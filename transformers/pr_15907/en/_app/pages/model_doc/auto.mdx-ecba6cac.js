import{S as ETt,i as yTt,s as wTt,e as a,k as l,w as f,t as o,M as ATt,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as Z8r}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function LTt(Ii){let J,Pe,de,ge,io,fe,Te,Vo,ji,If,fa,Di,Ni,WM,jf,Le,co,qi,On,QM,Gn,Xn,HM,Oi,Vn,UM,Gi,Df,qa;return{c(){J=a("p"),Pe=o("If your "),de=a("code"),ge=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Te=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),WM=o(")."),jf=l(),Le=a("p"),co=o("Likewise, if your "),qi=a("code"),On=o("NewModel"),QM=o(" is a subclass of "),Gn=a("a"),Xn=o("PreTrainedModel"),HM=o(`, make sure its
`),Oi=a("code"),Vn=o("config_class"),UM=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Df=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){J=n(fo,"P",{});var he=s(J);Pe=r(he,"If your "),de=n(he,"CODE",{});var NL=s(de);ge=r(NL,"NewModelConfig"),NL.forEach(t),io=r(he," is a subclass of "),fe=n(he,"CODE",{});var Xi=s(fe);Te=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(he,`, make sure its
`),ji=n(he,"CODE",{});var qL=s(ji);If=r(qL,"model_type"),qL.forEach(t),fa=r(he," attribute is set to the same key you use when registering the config (here "),Di=n(he,"CODE",{});var OL=s(Di);Ni=r(OL,'"new-model"'),OL.forEach(t),WM=r(he,")."),he.forEach(t),jf=i(fo),Le=n(fo,"P",{});var zo=s(Le);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var Oa=s(qi);On=r(Oa,"NewModel"),Oa.forEach(t),QM=r(zo," is a subclass of "),Gn=n(zo,"A",{href:!0});var GL=s(Gn);Xn=r(GL,"PreTrainedModel"),GL.forEach(t),HM=r(zo,`, make sure its
`),Oi=n(zo,"CODE",{});var Nf=s(Oi);Vn=r(Nf,"config_class"),Nf.forEach(t),UM=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var XL=s(Gi);Df=r(XL,"NewModelConfig"),XL.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){c(Gn,"href","/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel")},m(fo,he){b(fo,J,he),e(J,Pe),e(J,de),e(de,ge),e(J,io),e(J,fe),e(fe,Te),e(J,Vo),e(J,ji),e(ji,If),e(J,fa),e(J,Di),e(Di,Ni),e(J,WM),b(fo,jf,he),b(fo,Le,he),e(Le,co),e(Le,qi),e(qi,On),e(Le,QM),e(Le,Gn),e(Gn,Xn),e(Le,HM),e(Le,Oi),e(Oi,Vn),e(Le,UM),e(Le,Gi),e(Gi,Df),e(Le,qa)},d(fo){fo&&t(J),fo&&t(jf),fo&&t(Le)}}}function BTt(Ii){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Te=s(J);Pe=r(Te,"Passing "),de=n(Te,"CODE",{});var Vo=s(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(fe,Te){b(fe,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(fe){fe&&t(J)}}}function xTt(Ii){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Te=s(J);Pe=r(Te,"Passing "),de=n(Te,"CODE",{});var Vo=s(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(fe,Te){b(fe,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(fe){fe&&t(J)}}}function kTt(Ii){let J,Pe,de,ge,io,fe,Te,Vo,ji,If,fa,Di,Ni,WM,jf,Le,co,qi,On,QM,Gn,Xn,HM,Oi,Vn,UM,Gi,Df,qa,fo,he,NL,Xi,qL,OL,zo,Oa,GL,Nf,XL,_Pe,rxe,Vi,qf,mQ,JM,uPe,gQ,bPe,txe,zn,vPe,hQ,TPe,FPe,pQ,CPe,MPe,axe,YM,nxe,VL,EPe,sxe,Of,lxe,zi,Gf,_Q,KM,yPe,uQ,wPe,ixe,Wo,ZM,APe,e4,LPe,zL,BPe,xPe,kPe,o4,RPe,bQ,SPe,PPe,$Pe,mo,r4,IPe,vQ,jPe,DPe,Wi,NPe,TQ,qPe,OPe,FQ,GPe,XPe,VPe,v,Xf,CQ,zPe,WPe,WL,QPe,HPe,UPe,Vf,MQ,JPe,YPe,QL,KPe,ZPe,e$e,zf,EQ,o$e,r$e,HL,t$e,a$e,n$e,Wf,yQ,s$e,l$e,UL,i$e,d$e,c$e,Qf,wQ,f$e,m$e,JL,g$e,h$e,p$e,Hf,AQ,_$e,u$e,YL,b$e,v$e,T$e,Uf,LQ,F$e,C$e,KL,M$e,E$e,y$e,Jf,BQ,w$e,A$e,ZL,L$e,B$e,x$e,Yf,xQ,k$e,R$e,e8,S$e,P$e,$$e,Kf,kQ,I$e,j$e,o8,D$e,N$e,q$e,Zf,RQ,O$e,G$e,r8,X$e,V$e,z$e,em,SQ,W$e,Q$e,t8,H$e,U$e,J$e,om,PQ,Y$e,K$e,a8,Z$e,eIe,oIe,rm,$Q,rIe,tIe,n8,aIe,nIe,sIe,tm,IQ,lIe,iIe,s8,dIe,cIe,fIe,am,jQ,mIe,gIe,l8,hIe,pIe,_Ie,nm,DQ,uIe,bIe,i8,vIe,TIe,FIe,sm,NQ,CIe,MIe,d8,EIe,yIe,wIe,lm,qQ,AIe,LIe,c8,BIe,xIe,kIe,im,OQ,RIe,SIe,f8,PIe,$Ie,IIe,dm,GQ,jIe,DIe,m8,NIe,qIe,OIe,cm,XQ,GIe,XIe,g8,VIe,zIe,WIe,fm,VQ,QIe,HIe,h8,UIe,JIe,YIe,mm,zQ,KIe,ZIe,p8,eje,oje,rje,gm,WQ,tje,aje,_8,nje,sje,lje,hm,QQ,ije,dje,u8,cje,fje,mje,pm,HQ,gje,hje,b8,pje,_je,uje,_m,UQ,bje,vje,v8,Tje,Fje,Cje,um,JQ,Mje,Eje,T8,yje,wje,Aje,bm,YQ,Lje,Bje,F8,xje,kje,Rje,vm,KQ,Sje,Pje,C8,$je,Ije,jje,Tm,ZQ,Dje,Nje,M8,qje,Oje,Gje,Fm,eH,Xje,Vje,E8,zje,Wje,Qje,Cm,oH,Hje,Uje,y8,Jje,Yje,Kje,Mm,rH,Zje,eDe,w8,oDe,rDe,tDe,Em,tH,aDe,nDe,A8,sDe,lDe,iDe,ym,aH,dDe,cDe,L8,fDe,mDe,gDe,wm,nH,hDe,pDe,B8,_De,uDe,bDe,Am,sH,vDe,TDe,x8,FDe,CDe,MDe,Lm,lH,EDe,yDe,k8,wDe,ADe,LDe,Bm,iH,BDe,xDe,R8,kDe,RDe,SDe,xm,dH,PDe,$De,S8,IDe,jDe,DDe,km,cH,NDe,qDe,P8,ODe,GDe,XDe,Rm,fH,VDe,zDe,$8,WDe,QDe,HDe,Sm,mH,UDe,JDe,I8,YDe,KDe,ZDe,Pm,gH,eNe,oNe,j8,rNe,tNe,aNe,$m,hH,nNe,sNe,D8,lNe,iNe,dNe,Im,pH,cNe,fNe,N8,mNe,gNe,hNe,jm,_H,pNe,_Ne,q8,uNe,bNe,vNe,Dm,uH,TNe,FNe,O8,CNe,MNe,ENe,Nm,bH,yNe,wNe,G8,ANe,LNe,BNe,qm,vH,xNe,kNe,X8,RNe,SNe,PNe,Om,TH,$Ne,INe,V8,jNe,DNe,NNe,Gm,FH,qNe,ONe,z8,GNe,XNe,VNe,Xm,CH,zNe,WNe,W8,QNe,HNe,UNe,Vm,MH,JNe,YNe,Q8,KNe,ZNe,eqe,zm,EH,oqe,rqe,H8,tqe,aqe,nqe,Wm,yH,sqe,lqe,U8,iqe,dqe,cqe,Qm,wH,fqe,mqe,J8,gqe,hqe,pqe,Hm,AH,_qe,uqe,Y8,bqe,vqe,Tqe,Um,LH,Fqe,Cqe,K8,Mqe,Eqe,yqe,Jm,BH,wqe,Aqe,Z8,Lqe,Bqe,xqe,Ym,xH,kqe,Rqe,eB,Sqe,Pqe,$qe,Km,kH,Iqe,jqe,oB,Dqe,Nqe,qqe,Zm,RH,Oqe,Gqe,rB,Xqe,Vqe,zqe,eg,SH,Wqe,Qqe,tB,Hqe,Uqe,Jqe,og,PH,Yqe,Kqe,aB,Zqe,eOe,oOe,rg,$H,rOe,tOe,nB,aOe,nOe,sOe,tg,IH,lOe,iOe,sB,dOe,cOe,fOe,ag,jH,mOe,gOe,lB,hOe,pOe,_Oe,ng,DH,uOe,bOe,iB,vOe,TOe,FOe,sg,NH,COe,MOe,dB,EOe,yOe,wOe,lg,qH,AOe,LOe,cB,BOe,xOe,kOe,ig,OH,ROe,SOe,fB,POe,$Oe,IOe,dg,GH,jOe,DOe,mB,NOe,qOe,OOe,cg,XH,GOe,XOe,gB,VOe,zOe,WOe,fg,VH,QOe,HOe,hB,UOe,JOe,YOe,mg,zH,KOe,ZOe,pB,eGe,oGe,rGe,gg,WH,tGe,aGe,_B,nGe,sGe,lGe,hg,QH,iGe,dGe,uB,cGe,fGe,mGe,pg,HH,gGe,hGe,bB,pGe,_Ge,uGe,_g,UH,bGe,vGe,vB,TGe,FGe,CGe,ug,JH,MGe,EGe,TB,yGe,wGe,AGe,bg,YH,LGe,BGe,FB,xGe,kGe,RGe,vg,KH,SGe,PGe,CB,$Ge,IGe,jGe,Tg,ZH,DGe,NGe,MB,qGe,OGe,GGe,Fg,eU,XGe,VGe,EB,zGe,WGe,QGe,Cg,oU,HGe,UGe,yB,JGe,YGe,KGe,Mg,rU,ZGe,eXe,wB,oXe,rXe,tXe,Eg,tU,aXe,nXe,AB,sXe,lXe,iXe,yg,aU,dXe,cXe,LB,fXe,mXe,gXe,wg,nU,hXe,pXe,BB,_Xe,uXe,bXe,Ag,sU,vXe,TXe,xB,FXe,CXe,MXe,Lg,lU,EXe,yXe,kB,wXe,AXe,LXe,iU,BXe,xXe,t4,kXe,Bg,a4,RXe,dU,SXe,dxe,Qi,xg,cU,n4,PXe,fU,$Xe,cxe,Qo,s4,IXe,l4,jXe,RB,DXe,NXe,qXe,i4,OXe,mU,GXe,XXe,VXe,go,d4,zXe,gU,WXe,QXe,Ga,HXe,hU,UXe,JXe,pU,YXe,KXe,_U,ZXe,eVe,oVe,E,Wn,uU,rVe,tVe,SB,aVe,nVe,PB,sVe,lVe,iVe,Qn,bU,dVe,cVe,$B,fVe,mVe,IB,gVe,hVe,pVe,Hn,vU,_Ve,uVe,jB,bVe,vVe,DB,TVe,FVe,CVe,kg,TU,MVe,EVe,NB,yVe,wVe,AVe,Un,FU,LVe,BVe,qB,xVe,kVe,OB,RVe,SVe,PVe,Rg,CU,$Ve,IVe,GB,jVe,DVe,NVe,Sg,MU,qVe,OVe,XB,GVe,XVe,VVe,Pg,EU,zVe,WVe,VB,QVe,HVe,UVe,Jn,yU,JVe,YVe,zB,KVe,ZVe,WB,eze,oze,rze,Yn,wU,tze,aze,QB,nze,sze,HB,lze,ize,dze,Kn,AU,cze,fze,UB,mze,gze,JB,hze,pze,_ze,$g,LU,uze,bze,YB,vze,Tze,Fze,Ig,BU,Cze,Mze,KB,Eze,yze,wze,Zn,xU,Aze,Lze,ZB,Bze,xze,ex,kze,Rze,Sze,jg,kU,Pze,$ze,ox,Ize,jze,Dze,es,RU,Nze,qze,rx,Oze,Gze,tx,Xze,Vze,zze,os,SU,Wze,Qze,ax,Hze,Uze,nx,Jze,Yze,Kze,rs,PU,Zze,eWe,sx,oWe,rWe,$U,tWe,aWe,nWe,Dg,IU,sWe,lWe,lx,iWe,dWe,cWe,ts,jU,fWe,mWe,ix,gWe,hWe,dx,pWe,_We,uWe,Ng,DU,bWe,vWe,cx,TWe,FWe,CWe,as,NU,MWe,EWe,fx,yWe,wWe,mx,AWe,LWe,BWe,ns,qU,xWe,kWe,gx,RWe,SWe,hx,PWe,$We,IWe,ss,OU,jWe,DWe,px,NWe,qWe,_x,OWe,GWe,XWe,qg,GU,VWe,zWe,ux,WWe,QWe,HWe,ls,XU,UWe,JWe,bx,YWe,KWe,vx,ZWe,eQe,oQe,Og,VU,rQe,tQe,Tx,aQe,nQe,sQe,is,zU,lQe,iQe,Fx,dQe,cQe,Cx,fQe,mQe,gQe,ds,WU,hQe,pQe,Mx,_Qe,uQe,Ex,bQe,vQe,TQe,cs,QU,FQe,CQe,yx,MQe,EQe,wx,yQe,wQe,AQe,fs,HU,LQe,BQe,Ax,xQe,kQe,Lx,RQe,SQe,PQe,Gg,UU,$Qe,IQe,Bx,jQe,DQe,NQe,ms,JU,qQe,OQe,xx,GQe,XQe,kx,VQe,zQe,WQe,gs,YU,QQe,HQe,Rx,UQe,JQe,Sx,YQe,KQe,ZQe,hs,KU,eHe,oHe,Px,rHe,tHe,$x,aHe,nHe,sHe,ps,ZU,lHe,iHe,Ix,dHe,cHe,jx,fHe,mHe,gHe,_s,eJ,hHe,pHe,Dx,_He,uHe,Nx,bHe,vHe,THe,us,oJ,FHe,CHe,qx,MHe,EHe,Ox,yHe,wHe,AHe,Xg,rJ,LHe,BHe,Gx,xHe,kHe,RHe,bs,tJ,SHe,PHe,Xx,$He,IHe,Vx,jHe,DHe,NHe,Vg,aJ,qHe,OHe,zx,GHe,XHe,VHe,zg,nJ,zHe,WHe,Wx,QHe,HHe,UHe,vs,sJ,JHe,YHe,Qx,KHe,ZHe,Hx,eUe,oUe,rUe,Ts,lJ,tUe,aUe,Ux,nUe,sUe,Jx,lUe,iUe,dUe,Wg,iJ,cUe,fUe,Yx,mUe,gUe,hUe,Fs,dJ,pUe,_Ue,Kx,uUe,bUe,Zx,vUe,TUe,FUe,Cs,cJ,CUe,MUe,ek,EUe,yUe,ok,wUe,AUe,LUe,Ms,fJ,BUe,xUe,rk,kUe,RUe,tk,SUe,PUe,$Ue,Es,mJ,IUe,jUe,ak,DUe,NUe,nk,qUe,OUe,GUe,ys,gJ,XUe,VUe,sk,zUe,WUe,lk,QUe,HUe,UUe,Qg,hJ,JUe,YUe,ik,KUe,ZUe,eJe,Hg,pJ,oJe,rJe,dk,tJe,aJe,nJe,Ug,_J,sJe,lJe,ck,iJe,dJe,cJe,Jg,uJ,fJe,mJe,fk,gJe,hJe,pJe,ws,bJ,_Je,uJe,mk,bJe,vJe,gk,TJe,FJe,CJe,Yg,vJ,MJe,EJe,hk,yJe,wJe,AJe,As,TJ,LJe,BJe,pk,xJe,kJe,_k,RJe,SJe,PJe,Ls,FJ,$Je,IJe,uk,jJe,DJe,bk,NJe,qJe,OJe,Bs,CJ,GJe,XJe,vk,VJe,zJe,Tk,WJe,QJe,HJe,xs,MJ,UJe,JJe,Fk,YJe,KJe,Ck,ZJe,eYe,oYe,ks,EJ,rYe,tYe,Mk,aYe,nYe,Ek,sYe,lYe,iYe,Rs,yJ,dYe,cYe,yk,fYe,mYe,wk,gYe,hYe,pYe,Kg,wJ,_Ye,uYe,Ak,bYe,vYe,TYe,Zg,AJ,FYe,CYe,Lk,MYe,EYe,yYe,Ss,LJ,wYe,AYe,Bk,LYe,BYe,xk,xYe,kYe,RYe,Ps,BJ,SYe,PYe,kk,$Ye,IYe,Rk,jYe,DYe,NYe,$s,xJ,qYe,OYe,Sk,GYe,XYe,Pk,VYe,zYe,WYe,eh,kJ,QYe,HYe,$k,UYe,JYe,YYe,oh,RJ,KYe,ZYe,Ik,eKe,oKe,rKe,rh,SJ,tKe,aKe,jk,nKe,sKe,lKe,th,PJ,iKe,dKe,Dk,cKe,fKe,mKe,Is,$J,gKe,hKe,Nk,pKe,_Ke,qk,uKe,bKe,vKe,ah,IJ,TKe,FKe,Ok,CKe,MKe,EKe,nh,jJ,yKe,wKe,Gk,AKe,LKe,BKe,js,DJ,xKe,kKe,Xk,RKe,SKe,Vk,PKe,$Ke,IKe,Ds,NJ,jKe,DKe,zk,NKe,qKe,Wk,OKe,GKe,XKe,qJ,VKe,zKe,c4,WKe,sh,f4,QKe,OJ,HKe,fxe,Hi,lh,GJ,m4,UKe,XJ,JKe,mxe,Ho,g4,YKe,h4,KKe,Qk,ZKe,eZe,oZe,p4,rZe,VJ,tZe,aZe,nZe,$e,_4,sZe,zJ,lZe,iZe,Xa,dZe,WJ,cZe,fZe,QJ,mZe,gZe,HJ,hZe,pZe,_Ze,ae,ih,UJ,uZe,bZe,Hk,vZe,TZe,FZe,dh,JJ,CZe,MZe,Uk,EZe,yZe,wZe,ch,YJ,AZe,LZe,Jk,BZe,xZe,kZe,fh,KJ,RZe,SZe,Yk,PZe,$Ze,IZe,mh,ZJ,jZe,DZe,Kk,NZe,qZe,OZe,gh,eY,GZe,XZe,Zk,VZe,zZe,WZe,hh,oY,QZe,HZe,eR,UZe,JZe,YZe,ph,rY,KZe,ZZe,oR,eeo,oeo,reo,_h,tY,teo,aeo,rR,neo,seo,leo,uh,aY,ieo,deo,tR,ceo,feo,meo,bh,nY,geo,heo,aR,peo,_eo,ueo,vh,sY,beo,veo,nR,Teo,Feo,Ceo,Th,lY,Meo,Eeo,sR,yeo,weo,Aeo,Fh,iY,Leo,Beo,lR,xeo,keo,Reo,Ch,dY,Seo,Peo,iR,$eo,Ieo,jeo,Mh,cY,Deo,Neo,dR,qeo,Oeo,Geo,Eh,Xeo,fY,Veo,zeo,u4,Weo,yh,b4,Qeo,mY,Heo,gxe,Ui,wh,gY,v4,Ueo,hY,Jeo,hxe,Uo,T4,Yeo,F4,Keo,cR,Zeo,eoo,ooo,C4,roo,pY,too,aoo,noo,Ie,M4,soo,_Y,loo,ioo,Ji,doo,uY,coo,foo,bY,moo,goo,hoo,Be,Ah,vY,poo,_oo,fR,uoo,boo,voo,Lh,TY,Too,Foo,mR,Coo,Moo,Eoo,Bh,FY,yoo,woo,gR,Aoo,Loo,Boo,xh,CY,xoo,koo,hR,Roo,Soo,Poo,kh,MY,$oo,Ioo,pR,joo,Doo,Noo,Rh,EY,qoo,Ooo,_R,Goo,Xoo,Voo,Sh,yY,zoo,Woo,uR,Qoo,Hoo,Uoo,Ph,wY,Joo,Yoo,bR,Koo,Zoo,ero,$h,oro,AY,rro,tro,E4,aro,Ih,y4,nro,LY,sro,pxe,Yi,jh,BY,w4,lro,xY,iro,_xe,Jo,A4,dro,Ki,cro,kY,fro,mro,RY,gro,hro,pro,L4,_ro,SY,uro,bro,vro,Vr,B4,Tro,PY,Fro,Cro,Zi,Mro,$Y,Ero,yro,IY,wro,Aro,Lro,jY,Bro,xro,x4,kro,je,k4,Rro,DY,Sro,Pro,Va,$ro,NY,Iro,jro,qY,Dro,Nro,OY,qro,Oro,Gro,F,Dh,GY,Xro,Vro,vR,zro,Wro,Qro,Nh,XY,Hro,Uro,TR,Jro,Yro,Kro,qh,VY,Zro,eto,FR,oto,rto,tto,Oh,zY,ato,nto,CR,sto,lto,ito,Gh,WY,dto,cto,MR,fto,mto,gto,Xh,QY,hto,pto,ER,_to,uto,bto,Vh,HY,vto,Tto,yR,Fto,Cto,Mto,zh,UY,Eto,yto,wR,wto,Ato,Lto,Wh,JY,Bto,xto,AR,kto,Rto,Sto,Qh,YY,Pto,$to,LR,Ito,jto,Dto,Hh,KY,Nto,qto,BR,Oto,Gto,Xto,Uh,ZY,Vto,zto,xR,Wto,Qto,Hto,Jh,eK,Uto,Jto,kR,Yto,Kto,Zto,Yh,oK,eao,oao,RR,rao,tao,aao,Kh,rK,nao,sao,SR,lao,iao,dao,Zh,tK,cao,fao,PR,mao,gao,hao,ep,aK,pao,_ao,$R,uao,bao,vao,op,nK,Tao,Fao,IR,Cao,Mao,Eao,rp,sK,yao,wao,jR,Aao,Lao,Bao,tp,lK,xao,kao,DR,Rao,Sao,Pao,ap,iK,$ao,Iao,NR,jao,Dao,Nao,np,dK,qao,Oao,qR,Gao,Xao,Vao,sp,cK,zao,Wao,OR,Qao,Hao,Uao,lp,fK,Jao,Yao,GR,Kao,Zao,eno,ip,mK,ono,rno,XR,tno,ano,nno,dp,gK,sno,lno,VR,ino,dno,cno,cp,hK,fno,mno,zR,gno,hno,pno,Ns,pK,_no,uno,WR,bno,vno,QR,Tno,Fno,Cno,fp,_K,Mno,Eno,HR,yno,wno,Ano,mp,uK,Lno,Bno,UR,xno,kno,Rno,gp,bK,Sno,Pno,JR,$no,Ino,jno,hp,vK,Dno,Nno,YR,qno,Ono,Gno,pp,TK,Xno,Vno,KR,zno,Wno,Qno,_p,FK,Hno,Uno,ZR,Jno,Yno,Kno,up,CK,Zno,eso,eS,oso,rso,tso,bp,MK,aso,nso,oS,sso,lso,iso,vp,EK,dso,cso,rS,fso,mso,gso,Tp,yK,hso,pso,tS,_so,uso,bso,Fp,wK,vso,Tso,aS,Fso,Cso,Mso,Cp,AK,Eso,yso,nS,wso,Aso,Lso,Mp,LK,Bso,xso,sS,kso,Rso,Sso,Ep,BK,Pso,$so,lS,Iso,jso,Dso,yp,xK,Nso,qso,iS,Oso,Gso,Xso,wp,kK,Vso,zso,dS,Wso,Qso,Hso,Ap,RK,Uso,Jso,cS,Yso,Kso,Zso,Lp,SK,elo,olo,fS,rlo,tlo,alo,Bp,PK,nlo,slo,mS,llo,ilo,dlo,xp,$K,clo,flo,gS,mlo,glo,hlo,kp,IK,plo,_lo,hS,ulo,blo,vlo,Rp,jK,Tlo,Flo,pS,Clo,Mlo,Elo,Sp,DK,ylo,wlo,_S,Alo,Llo,Blo,Pp,NK,xlo,klo,uS,Rlo,Slo,Plo,$p,qK,$lo,Ilo,bS,jlo,Dlo,Nlo,Ip,OK,qlo,Olo,vS,Glo,Xlo,Vlo,jp,GK,zlo,Wlo,TS,Qlo,Hlo,Ulo,Dp,XK,Jlo,Ylo,FS,Klo,Zlo,eio,Np,VK,oio,rio,CS,tio,aio,nio,qp,zK,sio,lio,MS,iio,dio,cio,Op,WK,fio,mio,ES,gio,hio,pio,Gp,QK,_io,uio,yS,bio,vio,Tio,Xp,HK,Fio,Cio,wS,Mio,Eio,yio,Vp,UK,wio,Aio,AS,Lio,Bio,xio,zp,JK,kio,Rio,LS,Sio,Pio,$io,Wp,YK,Iio,jio,BS,Dio,Nio,qio,Qp,KK,Oio,Gio,xS,Xio,Vio,zio,Hp,ZK,Wio,Qio,kS,Hio,Uio,Jio,Up,eZ,Yio,Kio,RS,Zio,edo,odo,Jp,oZ,rdo,tdo,SS,ado,ndo,sdo,Yp,rZ,ldo,ido,PS,ddo,cdo,fdo,Kp,tZ,mdo,gdo,$S,hdo,pdo,_do,Zp,aZ,udo,bdo,IS,vdo,Tdo,Fdo,e_,nZ,Cdo,Mdo,jS,Edo,ydo,wdo,o_,sZ,Ado,Ldo,DS,Bdo,xdo,kdo,r_,lZ,Rdo,Sdo,NS,Pdo,$do,Ido,t_,iZ,jdo,Ddo,qS,Ndo,qdo,Odo,a_,dZ,Gdo,Xdo,OS,Vdo,zdo,Wdo,n_,cZ,Qdo,Hdo,GS,Udo,Jdo,Ydo,s_,fZ,Kdo,Zdo,XS,eco,oco,rco,l_,mZ,tco,aco,VS,nco,sco,lco,i_,gZ,ico,dco,zS,cco,fco,mco,d_,hZ,gco,hco,WS,pco,_co,uco,c_,pZ,bco,vco,QS,Tco,Fco,Cco,f_,_Z,Mco,Eco,HS,yco,wco,Aco,m_,uZ,Lco,Bco,US,xco,kco,Rco,g_,bZ,Sco,Pco,JS,$co,Ico,jco,h_,vZ,Dco,Nco,YS,qco,Oco,Gco,p_,TZ,Xco,Vco,KS,zco,Wco,Qco,__,Hco,FZ,Uco,Jco,CZ,Yco,Kco,MZ,Zco,efo,R4,uxe,ed,u_,EZ,S4,ofo,yZ,rfo,bxe,Yo,P4,tfo,od,afo,wZ,nfo,sfo,AZ,lfo,ifo,dfo,$4,cfo,LZ,ffo,mfo,gfo,zr,I4,hfo,BZ,pfo,_fo,rd,ufo,xZ,bfo,vfo,kZ,Tfo,Ffo,Cfo,RZ,Mfo,Efo,j4,yfo,De,D4,wfo,SZ,Afo,Lfo,za,Bfo,PZ,xfo,kfo,$Z,Rfo,Sfo,IZ,Pfo,$fo,Ifo,k,b_,jZ,jfo,Dfo,ZS,Nfo,qfo,Ofo,v_,DZ,Gfo,Xfo,eP,Vfo,zfo,Wfo,T_,NZ,Qfo,Hfo,oP,Ufo,Jfo,Yfo,F_,qZ,Kfo,Zfo,rP,emo,omo,rmo,C_,OZ,tmo,amo,tP,nmo,smo,lmo,M_,GZ,imo,dmo,aP,cmo,fmo,mmo,E_,XZ,gmo,hmo,nP,pmo,_mo,umo,y_,VZ,bmo,vmo,sP,Tmo,Fmo,Cmo,w_,zZ,Mmo,Emo,lP,ymo,wmo,Amo,A_,WZ,Lmo,Bmo,iP,xmo,kmo,Rmo,L_,QZ,Smo,Pmo,dP,$mo,Imo,jmo,B_,HZ,Dmo,Nmo,cP,qmo,Omo,Gmo,x_,UZ,Xmo,Vmo,fP,zmo,Wmo,Qmo,k_,JZ,Hmo,Umo,mP,Jmo,Ymo,Kmo,R_,YZ,Zmo,ego,gP,ogo,rgo,tgo,S_,KZ,ago,ngo,hP,sgo,lgo,igo,P_,ZZ,dgo,cgo,pP,fgo,mgo,ggo,$_,eee,hgo,pgo,_P,_go,ugo,bgo,I_,oee,vgo,Tgo,uP,Fgo,Cgo,Mgo,j_,ree,Ego,ygo,bP,wgo,Ago,Lgo,D_,tee,Bgo,xgo,vP,kgo,Rgo,Sgo,N_,aee,Pgo,$go,TP,Igo,jgo,Dgo,q_,nee,Ngo,qgo,FP,Ogo,Ggo,Xgo,O_,see,Vgo,zgo,CP,Wgo,Qgo,Hgo,G_,lee,Ugo,Jgo,MP,Ygo,Kgo,Zgo,X_,iee,eho,oho,EP,rho,tho,aho,V_,dee,nho,sho,yP,lho,iho,dho,z_,cee,cho,fho,wP,mho,gho,hho,W_,fee,pho,_ho,AP,uho,bho,vho,Q_,mee,Tho,Fho,LP,Cho,Mho,Eho,H_,gee,yho,who,BP,Aho,Lho,Bho,U_,hee,xho,kho,xP,Rho,Sho,Pho,J_,pee,$ho,Iho,kP,jho,Dho,Nho,Y_,_ee,qho,Oho,RP,Gho,Xho,Vho,K_,uee,zho,Who,SP,Qho,Hho,Uho,Z_,bee,Jho,Yho,PP,Kho,Zho,epo,eu,vee,opo,rpo,$P,tpo,apo,npo,ou,Tee,spo,lpo,IP,ipo,dpo,cpo,ru,Fee,fpo,mpo,jP,gpo,hpo,ppo,tu,_po,Cee,upo,bpo,Mee,vpo,Tpo,Eee,Fpo,Cpo,N4,vxe,td,au,yee,q4,Mpo,wee,Epo,Txe,Ko,O4,ypo,ad,wpo,Aee,Apo,Lpo,Lee,Bpo,xpo,kpo,G4,Rpo,Bee,Spo,Ppo,$po,Wr,X4,Ipo,xee,jpo,Dpo,nd,Npo,kee,qpo,Opo,Ree,Gpo,Xpo,Vpo,See,zpo,Wpo,V4,Qpo,Ne,z4,Hpo,Pee,Upo,Jpo,Wa,Ypo,$ee,Kpo,Zpo,Iee,e_o,o_o,jee,r_o,t_o,a_o,$,nu,Dee,n_o,s_o,DP,l_o,i_o,d_o,su,Nee,c_o,f_o,NP,m_o,g_o,h_o,lu,qee,p_o,__o,qP,u_o,b_o,v_o,iu,Oee,T_o,F_o,OP,C_o,M_o,E_o,du,Gee,y_o,w_o,GP,A_o,L_o,B_o,cu,Xee,x_o,k_o,XP,R_o,S_o,P_o,fu,Vee,$_o,I_o,VP,j_o,D_o,N_o,mu,zee,q_o,O_o,zP,G_o,X_o,V_o,gu,Wee,z_o,W_o,WP,Q_o,H_o,U_o,hu,Qee,J_o,Y_o,QP,K_o,Z_o,euo,pu,Hee,ouo,ruo,HP,tuo,auo,nuo,_u,Uee,suo,luo,UP,iuo,duo,cuo,uu,Jee,fuo,muo,JP,guo,huo,puo,bu,Yee,_uo,uuo,YP,buo,vuo,Tuo,vu,Kee,Fuo,Cuo,KP,Muo,Euo,yuo,Tu,Zee,wuo,Auo,ZP,Luo,Buo,xuo,Fu,eoe,kuo,Ruo,e$,Suo,Puo,$uo,Cu,ooe,Iuo,juo,o$,Duo,Nuo,quo,Mu,roe,Ouo,Guo,r$,Xuo,Vuo,zuo,Eu,toe,Wuo,Quo,t$,Huo,Uuo,Juo,yu,aoe,Yuo,Kuo,a$,Zuo,e1o,o1o,wu,noe,r1o,t1o,n$,a1o,n1o,s1o,Au,soe,l1o,i1o,s$,d1o,c1o,f1o,Lu,loe,m1o,g1o,l$,h1o,p1o,_1o,Bu,ioe,u1o,b1o,i$,v1o,T1o,F1o,xu,doe,C1o,M1o,d$,E1o,y1o,w1o,ku,coe,A1o,L1o,c$,B1o,x1o,k1o,Ru,foe,R1o,S1o,f$,P1o,$1o,I1o,Su,moe,j1o,D1o,m$,N1o,q1o,O1o,Pu,goe,G1o,X1o,g$,V1o,z1o,W1o,$u,hoe,Q1o,H1o,h$,U1o,J1o,Y1o,Iu,poe,K1o,Z1o,p$,ebo,obo,rbo,ju,_oe,tbo,abo,_$,nbo,sbo,lbo,Du,uoe,ibo,dbo,u$,cbo,fbo,mbo,Nu,boe,gbo,hbo,b$,pbo,_bo,ubo,qu,bbo,voe,vbo,Tbo,Toe,Fbo,Cbo,Foe,Mbo,Ebo,W4,Fxe,sd,Ou,Coe,Q4,ybo,Moe,wbo,Cxe,Zo,H4,Abo,ld,Lbo,Eoe,Bbo,xbo,yoe,kbo,Rbo,Sbo,U4,Pbo,woe,$bo,Ibo,jbo,Qr,J4,Dbo,Aoe,Nbo,qbo,id,Obo,Loe,Gbo,Xbo,Boe,Vbo,zbo,Wbo,xoe,Qbo,Hbo,Y4,Ubo,qe,K4,Jbo,koe,Ybo,Kbo,Qa,Zbo,Roe,e5o,o5o,Soe,r5o,t5o,Poe,a5o,n5o,s5o,I,Gu,$oe,l5o,i5o,v$,d5o,c5o,f5o,Xu,Ioe,m5o,g5o,T$,h5o,p5o,_5o,Vu,joe,u5o,b5o,F$,v5o,T5o,F5o,zu,Doe,C5o,M5o,C$,E5o,y5o,w5o,Wu,Noe,A5o,L5o,M$,B5o,x5o,k5o,Qu,qoe,R5o,S5o,E$,P5o,$5o,I5o,Hu,Ooe,j5o,D5o,y$,N5o,q5o,O5o,Uu,Goe,G5o,X5o,w$,V5o,z5o,W5o,Ju,Xoe,Q5o,H5o,A$,U5o,J5o,Y5o,Yu,Voe,K5o,Z5o,L$,e2o,o2o,r2o,Ku,zoe,t2o,a2o,B$,n2o,s2o,l2o,Zu,Woe,i2o,d2o,x$,c2o,f2o,m2o,e1,Qoe,g2o,h2o,k$,p2o,_2o,u2o,o1,Hoe,b2o,v2o,R$,T2o,F2o,C2o,r1,Uoe,M2o,E2o,S$,y2o,w2o,A2o,t1,Joe,L2o,B2o,P$,x2o,k2o,R2o,a1,Yoe,S2o,P2o,$$,$2o,I2o,j2o,n1,Koe,D2o,N2o,I$,q2o,O2o,G2o,s1,Zoe,X2o,V2o,j$,z2o,W2o,Q2o,l1,ere,H2o,U2o,D$,J2o,Y2o,K2o,i1,ore,Z2o,evo,N$,ovo,rvo,tvo,d1,rre,avo,nvo,q$,svo,lvo,ivo,c1,tre,dvo,cvo,O$,fvo,mvo,gvo,f1,are,hvo,pvo,G$,_vo,uvo,bvo,m1,nre,vvo,Tvo,X$,Fvo,Cvo,Mvo,g1,sre,Evo,yvo,V$,wvo,Avo,Lvo,h1,lre,Bvo,xvo,z$,kvo,Rvo,Svo,p1,ire,Pvo,$vo,W$,Ivo,jvo,Dvo,_1,dre,Nvo,qvo,Q$,Ovo,Gvo,Xvo,u1,cre,Vvo,zvo,H$,Wvo,Qvo,Hvo,b1,fre,Uvo,Jvo,mre,Yvo,Kvo,Zvo,v1,gre,e0o,o0o,U$,r0o,t0o,a0o,T1,hre,n0o,s0o,J$,l0o,i0o,d0o,F1,pre,c0o,f0o,Y$,m0o,g0o,h0o,C1,_re,p0o,_0o,K$,u0o,b0o,v0o,M1,T0o,ure,F0o,C0o,bre,M0o,E0o,vre,y0o,w0o,Z4,Mxe,dd,E1,Tre,eE,A0o,Fre,L0o,Exe,er,oE,B0o,cd,x0o,Cre,k0o,R0o,Mre,S0o,P0o,$0o,rE,I0o,Ere,j0o,D0o,N0o,Hr,tE,q0o,yre,O0o,G0o,fd,X0o,wre,V0o,z0o,Are,W0o,Q0o,H0o,Lre,U0o,J0o,aE,Y0o,Oe,nE,K0o,Bre,Z0o,eTo,Ha,oTo,xre,rTo,tTo,kre,aTo,nTo,Rre,sTo,lTo,iTo,ne,y1,Sre,dTo,cTo,Z$,fTo,mTo,gTo,w1,Pre,hTo,pTo,eI,_To,uTo,bTo,A1,$re,vTo,TTo,oI,FTo,CTo,MTo,L1,Ire,ETo,yTo,rI,wTo,ATo,LTo,B1,jre,BTo,xTo,tI,kTo,RTo,STo,x1,Dre,PTo,$To,aI,ITo,jTo,DTo,k1,Nre,NTo,qTo,nI,OTo,GTo,XTo,R1,qre,VTo,zTo,sI,WTo,QTo,HTo,S1,Ore,UTo,JTo,lI,YTo,KTo,ZTo,P1,Gre,e7o,o7o,iI,r7o,t7o,a7o,$1,Xre,n7o,s7o,dI,l7o,i7o,d7o,I1,Vre,c7o,f7o,cI,m7o,g7o,h7o,j1,zre,p7o,_7o,fI,u7o,b7o,v7o,D1,Wre,T7o,F7o,mI,C7o,M7o,E7o,N1,Qre,y7o,w7o,gI,A7o,L7o,B7o,q1,Hre,x7o,k7o,hI,R7o,S7o,P7o,O1,$7o,Ure,I7o,j7o,Jre,D7o,N7o,Yre,q7o,O7o,sE,yxe,md,G1,Kre,lE,G7o,Zre,X7o,wxe,or,iE,V7o,gd,z7o,ete,W7o,Q7o,ote,H7o,U7o,J7o,dE,Y7o,rte,K7o,Z7o,eFo,Ur,cE,oFo,tte,rFo,tFo,hd,aFo,ate,nFo,sFo,nte,lFo,iFo,dFo,ste,cFo,fFo,fE,mFo,Ge,mE,gFo,lte,hFo,pFo,Ua,_Fo,ite,uFo,bFo,dte,vFo,TFo,cte,FFo,CFo,MFo,A,X1,fte,EFo,yFo,pI,wFo,AFo,LFo,V1,mte,BFo,xFo,_I,kFo,RFo,SFo,z1,gte,PFo,$Fo,uI,IFo,jFo,DFo,W1,hte,NFo,qFo,bI,OFo,GFo,XFo,Q1,pte,VFo,zFo,vI,WFo,QFo,HFo,H1,_te,UFo,JFo,TI,YFo,KFo,ZFo,U1,ute,e9o,o9o,FI,r9o,t9o,a9o,J1,bte,n9o,s9o,CI,l9o,i9o,d9o,Y1,vte,c9o,f9o,MI,m9o,g9o,h9o,K1,Tte,p9o,_9o,EI,u9o,b9o,v9o,Z1,Fte,T9o,F9o,yI,C9o,M9o,E9o,eb,Cte,y9o,w9o,wI,A9o,L9o,B9o,ob,Mte,x9o,k9o,AI,R9o,S9o,P9o,rb,Ete,$9o,I9o,LI,j9o,D9o,N9o,tb,yte,q9o,O9o,BI,G9o,X9o,V9o,ab,wte,z9o,W9o,xI,Q9o,H9o,U9o,nb,Ate,J9o,Y9o,kI,K9o,Z9o,eCo,sb,Lte,oCo,rCo,RI,tCo,aCo,nCo,lb,Bte,sCo,lCo,SI,iCo,dCo,cCo,ib,xte,fCo,mCo,PI,gCo,hCo,pCo,db,kte,_Co,uCo,$I,bCo,vCo,TCo,cb,Rte,FCo,CCo,II,MCo,ECo,yCo,fb,Ste,wCo,ACo,jI,LCo,BCo,xCo,mb,Pte,kCo,RCo,DI,SCo,PCo,$Co,gb,$te,ICo,jCo,NI,DCo,NCo,qCo,hb,Ite,OCo,GCo,qI,XCo,VCo,zCo,pb,jte,WCo,QCo,OI,HCo,UCo,JCo,_b,Dte,YCo,KCo,GI,ZCo,eMo,oMo,ub,Nte,rMo,tMo,XI,aMo,nMo,sMo,bb,qte,lMo,iMo,VI,dMo,cMo,fMo,vb,Ote,mMo,gMo,zI,hMo,pMo,_Mo,Tb,Gte,uMo,bMo,WI,vMo,TMo,FMo,Fb,Xte,CMo,MMo,QI,EMo,yMo,wMo,Cb,Vte,AMo,LMo,HI,BMo,xMo,kMo,Mb,zte,RMo,SMo,UI,PMo,$Mo,IMo,Eb,Wte,jMo,DMo,JI,NMo,qMo,OMo,yb,Qte,GMo,XMo,YI,VMo,zMo,WMo,wb,Hte,QMo,HMo,KI,UMo,JMo,YMo,Ab,Ute,KMo,ZMo,ZI,e4o,o4o,r4o,Lb,Jte,t4o,a4o,ej,n4o,s4o,l4o,Bb,Yte,i4o,d4o,oj,c4o,f4o,m4o,xb,Kte,g4o,h4o,rj,p4o,_4o,u4o,kb,Zte,b4o,v4o,tj,T4o,F4o,C4o,Rb,eae,M4o,E4o,aj,y4o,w4o,A4o,Sb,oae,L4o,B4o,nj,x4o,k4o,R4o,Pb,rae,S4o,P4o,sj,$4o,I4o,j4o,$b,D4o,tae,N4o,q4o,aae,O4o,G4o,nae,X4o,V4o,gE,Axe,pd,Ib,sae,hE,z4o,lae,W4o,Lxe,rr,pE,Q4o,_d,H4o,iae,U4o,J4o,dae,Y4o,K4o,Z4o,_E,eEo,cae,oEo,rEo,tEo,Jr,uE,aEo,fae,nEo,sEo,ud,lEo,mae,iEo,dEo,gae,cEo,fEo,mEo,hae,gEo,hEo,bE,pEo,Xe,vE,_Eo,pae,uEo,bEo,Ja,vEo,_ae,TEo,FEo,uae,CEo,MEo,bae,EEo,yEo,wEo,O,jb,vae,AEo,LEo,lj,BEo,xEo,kEo,Db,Tae,REo,SEo,ij,PEo,$Eo,IEo,Nb,Fae,jEo,DEo,dj,NEo,qEo,OEo,qb,Cae,GEo,XEo,cj,VEo,zEo,WEo,Ob,Mae,QEo,HEo,fj,UEo,JEo,YEo,Gb,Eae,KEo,ZEo,mj,e3o,o3o,r3o,Xb,yae,t3o,a3o,gj,n3o,s3o,l3o,Vb,wae,i3o,d3o,hj,c3o,f3o,m3o,zb,Aae,g3o,h3o,pj,p3o,_3o,u3o,Wb,Lae,b3o,v3o,_j,T3o,F3o,C3o,Qb,Bae,M3o,E3o,uj,y3o,w3o,A3o,Hb,xae,L3o,B3o,bj,x3o,k3o,R3o,Ub,kae,S3o,P3o,vj,$3o,I3o,j3o,Jb,Rae,D3o,N3o,Tj,q3o,O3o,G3o,Yb,Sae,X3o,V3o,Fj,z3o,W3o,Q3o,Kb,Pae,H3o,U3o,Cj,J3o,Y3o,K3o,Zb,$ae,Z3o,eyo,Mj,oyo,ryo,tyo,e5,Iae,ayo,nyo,Ej,syo,lyo,iyo,o5,jae,dyo,cyo,yj,fyo,myo,gyo,r5,Dae,hyo,pyo,wj,_yo,uyo,byo,t5,Nae,vyo,Tyo,Aj,Fyo,Cyo,Myo,a5,qae,Eyo,yyo,Lj,wyo,Ayo,Lyo,n5,Oae,Byo,xyo,Bj,kyo,Ryo,Syo,s5,Gae,Pyo,$yo,xj,Iyo,jyo,Dyo,l5,Xae,Nyo,qyo,kj,Oyo,Gyo,Xyo,i5,Vae,Vyo,zyo,Rj,Wyo,Qyo,Hyo,d5,zae,Uyo,Jyo,Sj,Yyo,Kyo,Zyo,c5,Wae,ewo,owo,Pj,rwo,two,awo,f5,nwo,Qae,swo,lwo,Hae,iwo,dwo,Uae,cwo,fwo,TE,Bxe,bd,m5,Jae,FE,mwo,Yae,gwo,xxe,tr,CE,hwo,vd,pwo,Kae,_wo,uwo,Zae,bwo,vwo,Two,ME,Fwo,ene,Cwo,Mwo,Ewo,Yr,EE,ywo,one,wwo,Awo,Td,Lwo,rne,Bwo,xwo,tne,kwo,Rwo,Swo,ane,Pwo,$wo,yE,Iwo,Ve,wE,jwo,nne,Dwo,Nwo,Ya,qwo,sne,Owo,Gwo,lne,Xwo,Vwo,ine,zwo,Wwo,Qwo,da,g5,dne,Hwo,Uwo,$j,Jwo,Ywo,Kwo,h5,cne,Zwo,e6o,Ij,o6o,r6o,t6o,p5,fne,a6o,n6o,jj,s6o,l6o,i6o,_5,mne,d6o,c6o,Dj,f6o,m6o,g6o,u5,gne,h6o,p6o,Nj,_6o,u6o,b6o,b5,v6o,hne,T6o,F6o,pne,C6o,M6o,_ne,E6o,y6o,AE,kxe,Fd,v5,une,LE,w6o,bne,A6o,Rxe,ar,BE,L6o,Cd,B6o,vne,x6o,k6o,Tne,R6o,S6o,P6o,xE,$6o,Fne,I6o,j6o,D6o,Kr,kE,N6o,Cne,q6o,O6o,Md,G6o,Mne,X6o,V6o,Ene,z6o,W6o,Q6o,yne,H6o,U6o,RE,J6o,ze,SE,Y6o,wne,K6o,Z6o,Ka,eAo,Ane,oAo,rAo,Lne,tAo,aAo,Bne,nAo,sAo,lAo,N,T5,xne,iAo,dAo,qj,cAo,fAo,mAo,F5,kne,gAo,hAo,Oj,pAo,_Ao,uAo,C5,Rne,bAo,vAo,Gj,TAo,FAo,CAo,M5,Sne,MAo,EAo,Xj,yAo,wAo,AAo,E5,Pne,LAo,BAo,Vj,xAo,kAo,RAo,y5,$ne,SAo,PAo,zj,$Ao,IAo,jAo,w5,Ine,DAo,NAo,Wj,qAo,OAo,GAo,A5,jne,XAo,VAo,Qj,zAo,WAo,QAo,L5,Dne,HAo,UAo,Hj,JAo,YAo,KAo,B5,Nne,ZAo,eLo,Uj,oLo,rLo,tLo,x5,qne,aLo,nLo,Jj,sLo,lLo,iLo,k5,One,dLo,cLo,Yj,fLo,mLo,gLo,R5,Gne,hLo,pLo,Kj,_Lo,uLo,bLo,S5,Xne,vLo,TLo,Zj,FLo,CLo,MLo,P5,Vne,ELo,yLo,eD,wLo,ALo,LLo,$5,zne,BLo,xLo,oD,kLo,RLo,SLo,I5,Wne,PLo,$Lo,rD,ILo,jLo,DLo,j5,Qne,NLo,qLo,tD,OLo,GLo,XLo,D5,Hne,VLo,zLo,aD,WLo,QLo,HLo,N5,Une,ULo,JLo,nD,YLo,KLo,ZLo,q5,Jne,e8o,o8o,sD,r8o,t8o,a8o,O5,Yne,n8o,s8o,lD,l8o,i8o,d8o,G5,Kne,c8o,f8o,iD,m8o,g8o,h8o,X5,Zne,p8o,_8o,dD,u8o,b8o,v8o,V5,ese,T8o,F8o,cD,C8o,M8o,E8o,z5,ose,y8o,w8o,fD,A8o,L8o,B8o,W5,rse,x8o,k8o,mD,R8o,S8o,P8o,Q5,tse,$8o,I8o,gD,j8o,D8o,N8o,H5,ase,q8o,O8o,hD,G8o,X8o,V8o,U5,nse,z8o,W8o,pD,Q8o,H8o,U8o,J5,sse,J8o,Y8o,_D,K8o,Z8o,eBo,Y5,lse,oBo,rBo,uD,tBo,aBo,nBo,K5,ise,sBo,lBo,bD,iBo,dBo,cBo,Z5,fBo,dse,mBo,gBo,cse,hBo,pBo,fse,_Bo,uBo,PE,Sxe,Ed,e2,mse,$E,bBo,gse,vBo,Pxe,nr,IE,TBo,yd,FBo,hse,CBo,MBo,pse,EBo,yBo,wBo,jE,ABo,_se,LBo,BBo,xBo,Zr,DE,kBo,use,RBo,SBo,wd,PBo,bse,$Bo,IBo,vse,jBo,DBo,NBo,Tse,qBo,OBo,NE,GBo,We,qE,XBo,Fse,VBo,zBo,Za,WBo,Cse,QBo,HBo,Mse,UBo,JBo,Ese,YBo,KBo,ZBo,R,o2,yse,exo,oxo,vD,rxo,txo,axo,r2,wse,nxo,sxo,TD,lxo,ixo,dxo,t2,Ase,cxo,fxo,FD,mxo,gxo,hxo,a2,Lse,pxo,_xo,CD,uxo,bxo,vxo,n2,Bse,Txo,Fxo,MD,Cxo,Mxo,Exo,s2,xse,yxo,wxo,ED,Axo,Lxo,Bxo,l2,kse,xxo,kxo,yD,Rxo,Sxo,Pxo,i2,Rse,$xo,Ixo,wD,jxo,Dxo,Nxo,d2,Sse,qxo,Oxo,AD,Gxo,Xxo,Vxo,c2,Pse,zxo,Wxo,LD,Qxo,Hxo,Uxo,f2,$se,Jxo,Yxo,BD,Kxo,Zxo,eko,m2,Ise,oko,rko,xD,tko,ako,nko,g2,jse,sko,lko,kD,iko,dko,cko,h2,Dse,fko,mko,RD,gko,hko,pko,p2,Nse,_ko,uko,SD,bko,vko,Tko,_2,qse,Fko,Cko,PD,Mko,Eko,yko,u2,Ose,wko,Ako,$D,Lko,Bko,xko,b2,Gse,kko,Rko,ID,Sko,Pko,$ko,v2,Xse,Iko,jko,jD,Dko,Nko,qko,T2,Vse,Oko,Gko,DD,Xko,Vko,zko,F2,zse,Wko,Qko,ND,Hko,Uko,Jko,C2,Wse,Yko,Kko,qD,Zko,eRo,oRo,M2,Qse,rRo,tRo,OD,aRo,nRo,sRo,E2,Hse,lRo,iRo,GD,dRo,cRo,fRo,y2,Use,mRo,gRo,XD,hRo,pRo,_Ro,w2,Jse,uRo,bRo,VD,vRo,TRo,FRo,A2,Yse,CRo,MRo,zD,ERo,yRo,wRo,L2,Kse,ARo,LRo,WD,BRo,xRo,kRo,B2,Zse,RRo,SRo,QD,PRo,$Ro,IRo,x2,ele,jRo,DRo,HD,NRo,qRo,ORo,k2,ole,GRo,XRo,UD,VRo,zRo,WRo,R2,rle,QRo,HRo,JD,URo,JRo,YRo,S2,tle,KRo,ZRo,YD,eSo,oSo,rSo,P2,ale,tSo,aSo,KD,nSo,sSo,lSo,$2,nle,iSo,dSo,ZD,cSo,fSo,mSo,I2,sle,gSo,hSo,eN,pSo,_So,uSo,j2,lle,bSo,vSo,oN,TSo,FSo,CSo,D2,ile,MSo,ESo,rN,ySo,wSo,ASo,N2,dle,LSo,BSo,tN,xSo,kSo,RSo,q2,SSo,cle,PSo,$So,fle,ISo,jSo,mle,DSo,NSo,OE,$xe,Ad,O2,gle,GE,qSo,hle,OSo,Ixe,sr,XE,GSo,Ld,XSo,ple,VSo,zSo,_le,WSo,QSo,HSo,VE,USo,ule,JSo,YSo,KSo,et,zE,ZSo,ble,ePo,oPo,Bd,rPo,vle,tPo,aPo,Tle,nPo,sPo,lPo,Fle,iPo,dPo,WE,cPo,Qe,QE,fPo,Cle,mPo,gPo,en,hPo,Mle,pPo,_Po,Ele,uPo,bPo,yle,vPo,TPo,FPo,wle,G2,Ale,CPo,MPo,aN,EPo,yPo,wPo,X2,APo,Lle,LPo,BPo,Ble,xPo,kPo,xle,RPo,SPo,HE,jxe,xd,V2,kle,UE,PPo,Rle,$Po,Dxe,lr,JE,IPo,kd,jPo,Sle,DPo,NPo,Ple,qPo,OPo,GPo,YE,XPo,$le,VPo,zPo,WPo,ot,KE,QPo,Ile,HPo,UPo,Rd,JPo,jle,YPo,KPo,Dle,ZPo,e$o,o$o,Nle,r$o,t$o,ZE,a$o,He,e3,n$o,qle,s$o,l$o,on,i$o,Ole,d$o,c$o,Gle,f$o,m$o,Xle,g$o,h$o,p$o,Fe,z2,Vle,_$o,u$o,nN,b$o,v$o,T$o,W2,zle,F$o,C$o,sN,M$o,E$o,y$o,qs,Wle,w$o,A$o,lN,L$o,B$o,iN,x$o,k$o,R$o,Q2,Qle,S$o,P$o,dN,$$o,I$o,j$o,ma,Hle,D$o,N$o,cN,q$o,O$o,fN,G$o,X$o,mN,V$o,z$o,W$o,H2,Ule,Q$o,H$o,gN,U$o,J$o,Y$o,U2,Jle,K$o,Z$o,hN,eIo,oIo,rIo,J2,Yle,tIo,aIo,pN,nIo,sIo,lIo,Y2,Kle,iIo,dIo,_N,cIo,fIo,mIo,K2,gIo,Zle,hIo,pIo,eie,_Io,uIo,oie,bIo,vIo,o3,Nxe,Sd,Z2,rie,r3,TIo,tie,FIo,qxe,ir,t3,CIo,Pd,MIo,aie,EIo,yIo,nie,wIo,AIo,LIo,a3,BIo,sie,xIo,kIo,RIo,rt,n3,SIo,lie,PIo,$Io,$d,IIo,iie,jIo,DIo,die,NIo,qIo,OIo,cie,GIo,XIo,s3,VIo,Ue,l3,zIo,fie,WIo,QIo,rn,HIo,mie,UIo,JIo,gie,YIo,KIo,hie,ZIo,ejo,ojo,pie,ev,_ie,rjo,tjo,uN,ajo,njo,sjo,ov,ljo,uie,ijo,djo,bie,cjo,fjo,vie,mjo,gjo,i3,Oxe,Id,rv,Tie,d3,hjo,Fie,pjo,Gxe,dr,c3,_jo,jd,ujo,Cie,bjo,vjo,Mie,Tjo,Fjo,Cjo,f3,Mjo,Eie,Ejo,yjo,wjo,tt,m3,Ajo,yie,Ljo,Bjo,Dd,xjo,wie,kjo,Rjo,Aie,Sjo,Pjo,$jo,Lie,Ijo,jjo,g3,Djo,Je,h3,Njo,Bie,qjo,Ojo,tn,Gjo,xie,Xjo,Vjo,kie,zjo,Wjo,Rie,Qjo,Hjo,Ujo,xe,tv,Sie,Jjo,Yjo,bN,Kjo,Zjo,eDo,av,Pie,oDo,rDo,vN,tDo,aDo,nDo,nv,$ie,sDo,lDo,TN,iDo,dDo,cDo,sv,Iie,fDo,mDo,FN,gDo,hDo,pDo,lv,jie,_Do,uDo,CN,bDo,vDo,TDo,iv,Die,FDo,CDo,MN,MDo,EDo,yDo,dv,Nie,wDo,ADo,EN,LDo,BDo,xDo,cv,qie,kDo,RDo,yN,SDo,PDo,$Do,fv,IDo,Oie,jDo,DDo,Gie,NDo,qDo,Xie,ODo,GDo,p3,Xxe,Nd,mv,Vie,_3,XDo,zie,VDo,Vxe,cr,u3,zDo,qd,WDo,Wie,QDo,HDo,Qie,UDo,JDo,YDo,b3,KDo,Hie,ZDo,eNo,oNo,at,v3,rNo,Uie,tNo,aNo,Od,nNo,Jie,sNo,lNo,Yie,iNo,dNo,cNo,Kie,fNo,mNo,T3,gNo,Ye,F3,hNo,Zie,pNo,_No,an,uNo,ede,bNo,vNo,ode,TNo,FNo,rde,CNo,MNo,ENo,nn,gv,tde,yNo,wNo,wN,ANo,LNo,BNo,hv,ade,xNo,kNo,AN,RNo,SNo,PNo,pv,nde,$No,INo,LN,jNo,DNo,NNo,_v,sde,qNo,ONo,BN,GNo,XNo,VNo,uv,zNo,lde,WNo,QNo,ide,HNo,UNo,dde,JNo,YNo,C3,zxe,Gd,bv,cde,M3,KNo,fde,ZNo,Wxe,fr,E3,eqo,Xd,oqo,mde,rqo,tqo,gde,aqo,nqo,sqo,y3,lqo,hde,iqo,dqo,cqo,nt,w3,fqo,pde,mqo,gqo,Vd,hqo,_de,pqo,_qo,ude,uqo,bqo,vqo,bde,Tqo,Fqo,A3,Cqo,Ke,L3,Mqo,vde,Eqo,yqo,sn,wqo,Tde,Aqo,Lqo,Fde,Bqo,xqo,Cde,kqo,Rqo,Sqo,ke,vv,Mde,Pqo,$qo,xN,Iqo,jqo,Dqo,Tv,Ede,Nqo,qqo,kN,Oqo,Gqo,Xqo,Fv,yde,Vqo,zqo,RN,Wqo,Qqo,Hqo,Cv,wde,Uqo,Jqo,SN,Yqo,Kqo,Zqo,Mv,Ade,eOo,oOo,PN,rOo,tOo,aOo,Ev,Lde,nOo,sOo,$N,lOo,iOo,dOo,yv,Bde,cOo,fOo,IN,mOo,gOo,hOo,wv,xde,pOo,_Oo,jN,uOo,bOo,vOo,Av,TOo,kde,FOo,COo,Rde,MOo,EOo,Sde,yOo,wOo,B3,Qxe,zd,Lv,Pde,x3,AOo,$de,LOo,Hxe,mr,k3,BOo,Wd,xOo,Ide,kOo,ROo,jde,SOo,POo,$Oo,R3,IOo,Dde,jOo,DOo,NOo,st,S3,qOo,Nde,OOo,GOo,Qd,XOo,qde,VOo,zOo,Ode,WOo,QOo,HOo,Gde,UOo,JOo,P3,YOo,Ze,$3,KOo,Xde,ZOo,eGo,ln,oGo,Vde,rGo,tGo,zde,aGo,nGo,Wde,sGo,lGo,iGo,I3,Bv,Qde,dGo,cGo,DN,fGo,mGo,gGo,xv,Hde,hGo,pGo,NN,_Go,uGo,bGo,kv,vGo,Ude,TGo,FGo,Jde,CGo,MGo,Yde,EGo,yGo,j3,Uxe,Hd,Rv,Kde,D3,wGo,Zde,AGo,Jxe,gr,N3,LGo,Ud,BGo,ece,xGo,kGo,oce,RGo,SGo,PGo,q3,$Go,rce,IGo,jGo,DGo,lt,O3,NGo,tce,qGo,OGo,Jd,GGo,ace,XGo,VGo,nce,zGo,WGo,QGo,sce,HGo,UGo,G3,JGo,eo,X3,YGo,lce,KGo,ZGo,dn,eXo,ice,oXo,rXo,dce,tXo,aXo,cce,nXo,sXo,lXo,cn,Sv,fce,iXo,dXo,qN,cXo,fXo,mXo,Pv,mce,gXo,hXo,ON,pXo,_Xo,uXo,$v,gce,bXo,vXo,GN,TXo,FXo,CXo,Iv,hce,MXo,EXo,XN,yXo,wXo,AXo,jv,LXo,pce,BXo,xXo,_ce,kXo,RXo,uce,SXo,PXo,V3,Yxe,Yd,Dv,bce,z3,$Xo,vce,IXo,Kxe,hr,W3,jXo,Kd,DXo,Tce,NXo,qXo,Fce,OXo,GXo,XXo,Q3,VXo,Cce,zXo,WXo,QXo,it,H3,HXo,Mce,UXo,JXo,Zd,YXo,Ece,KXo,ZXo,yce,eVo,oVo,rVo,wce,tVo,aVo,U3,nVo,oo,J3,sVo,Ace,lVo,iVo,fn,dVo,Lce,cVo,fVo,Bce,mVo,gVo,xce,hVo,pVo,_Vo,ec,Nv,kce,uVo,bVo,VN,vVo,TVo,FVo,qv,Rce,CVo,MVo,zN,EVo,yVo,wVo,Ov,Sce,AVo,LVo,WN,BVo,xVo,kVo,Gv,RVo,Pce,SVo,PVo,$ce,$Vo,IVo,Ice,jVo,DVo,Y3,Zxe,oc,Xv,jce,K3,NVo,Dce,qVo,eke,pr,Z3,OVo,rc,GVo,Nce,XVo,VVo,qce,zVo,WVo,QVo,ey,HVo,Oce,UVo,JVo,YVo,dt,oy,KVo,Gce,ZVo,ezo,tc,ozo,Xce,rzo,tzo,Vce,azo,nzo,szo,zce,lzo,izo,ry,dzo,ro,ty,czo,Wce,fzo,mzo,mn,gzo,Qce,hzo,pzo,Hce,_zo,uzo,Uce,bzo,vzo,Tzo,Jce,Vv,Yce,Fzo,Czo,QN,Mzo,Ezo,yzo,zv,wzo,Kce,Azo,Lzo,Zce,Bzo,xzo,efe,kzo,Rzo,ay,oke,ac,Wv,ofe,ny,Szo,rfe,Pzo,rke,_r,sy,$zo,nc,Izo,tfe,jzo,Dzo,afe,Nzo,qzo,Ozo,ly,Gzo,nfe,Xzo,Vzo,zzo,ct,iy,Wzo,sfe,Qzo,Hzo,sc,Uzo,lfe,Jzo,Yzo,ife,Kzo,Zzo,eWo,dfe,oWo,rWo,dy,tWo,to,cy,aWo,cfe,nWo,sWo,gn,lWo,ffe,iWo,dWo,mfe,cWo,fWo,gfe,mWo,gWo,hWo,hfe,Qv,pfe,pWo,_Wo,HN,uWo,bWo,vWo,Hv,TWo,_fe,FWo,CWo,ufe,MWo,EWo,bfe,yWo,wWo,fy,tke,lc,Uv,vfe,my,AWo,Tfe,LWo,ake,ur,gy,BWo,ic,xWo,Ffe,kWo,RWo,Cfe,SWo,PWo,$Wo,hy,IWo,Mfe,jWo,DWo,NWo,ft,py,qWo,Efe,OWo,GWo,dc,XWo,yfe,VWo,zWo,wfe,WWo,QWo,HWo,Afe,UWo,JWo,_y,YWo,ao,uy,KWo,Lfe,ZWo,eQo,hn,oQo,Bfe,rQo,tQo,xfe,aQo,nQo,kfe,sQo,lQo,iQo,by,Jv,Rfe,dQo,cQo,UN,fQo,mQo,gQo,Yv,Sfe,hQo,pQo,JN,_Qo,uQo,bQo,Kv,vQo,Pfe,TQo,FQo,$fe,CQo,MQo,Ife,EQo,yQo,vy,nke,cc,Zv,jfe,Ty,wQo,Dfe,AQo,ske,br,Fy,LQo,fc,BQo,Nfe,xQo,kQo,qfe,RQo,SQo,PQo,Cy,$Qo,Ofe,IQo,jQo,DQo,mt,My,NQo,Gfe,qQo,OQo,mc,GQo,Xfe,XQo,VQo,Vfe,zQo,WQo,QQo,zfe,HQo,UQo,Ey,JQo,no,yy,YQo,Wfe,KQo,ZQo,pn,eHo,Qfe,oHo,rHo,Hfe,tHo,aHo,Ufe,nHo,sHo,lHo,Jfe,e0,Yfe,iHo,dHo,YN,cHo,fHo,mHo,o0,gHo,Kfe,hHo,pHo,Zfe,_Ho,uHo,eme,bHo,vHo,wy,lke,gc,r0,ome,Ay,THo,rme,FHo,ike,vr,Ly,CHo,hc,MHo,tme,EHo,yHo,ame,wHo,AHo,LHo,By,BHo,nme,xHo,kHo,RHo,gt,xy,SHo,sme,PHo,$Ho,pc,IHo,lme,jHo,DHo,ime,NHo,qHo,OHo,dme,GHo,XHo,ky,VHo,ho,Ry,zHo,cme,WHo,QHo,_n,HHo,fme,UHo,JHo,mme,YHo,KHo,gme,ZHo,eUo,oUo,B,t0,hme,rUo,tUo,KN,aUo,nUo,sUo,a0,pme,lUo,iUo,ZN,dUo,cUo,fUo,n0,_me,mUo,gUo,eq,hUo,pUo,_Uo,s0,ume,uUo,bUo,oq,vUo,TUo,FUo,l0,bme,CUo,MUo,rq,EUo,yUo,wUo,i0,vme,AUo,LUo,tq,BUo,xUo,kUo,d0,Tme,RUo,SUo,aq,PUo,$Uo,IUo,c0,Fme,jUo,DUo,nq,NUo,qUo,OUo,f0,Cme,GUo,XUo,sq,VUo,zUo,WUo,m0,Mme,QUo,HUo,lq,UUo,JUo,YUo,g0,Eme,KUo,ZUo,iq,eJo,oJo,rJo,h0,yme,tJo,aJo,dq,nJo,sJo,lJo,p0,wme,iJo,dJo,cq,cJo,fJo,mJo,_0,Ame,gJo,hJo,fq,pJo,_Jo,uJo,u0,Lme,bJo,vJo,mq,TJo,FJo,CJo,b0,Bme,MJo,EJo,gq,yJo,wJo,AJo,Os,xme,LJo,BJo,hq,xJo,kJo,pq,RJo,SJo,PJo,v0,kme,$Jo,IJo,_q,jJo,DJo,NJo,T0,Rme,qJo,OJo,uq,GJo,XJo,VJo,F0,Sme,zJo,WJo,bq,QJo,HJo,UJo,C0,Pme,JJo,YJo,vq,KJo,ZJo,eYo,M0,$me,oYo,rYo,Tq,tYo,aYo,nYo,E0,Ime,sYo,lYo,Fq,iYo,dYo,cYo,y0,jme,fYo,mYo,Cq,gYo,hYo,pYo,w0,Dme,_Yo,uYo,Mq,bYo,vYo,TYo,A0,Nme,FYo,CYo,Eq,MYo,EYo,yYo,L0,qme,wYo,AYo,yq,LYo,BYo,xYo,B0,Ome,kYo,RYo,wq,SYo,PYo,$Yo,x0,Gme,IYo,jYo,Aq,DYo,NYo,qYo,k0,Xme,OYo,GYo,Lq,XYo,VYo,zYo,R0,Vme,WYo,QYo,Bq,HYo,UYo,JYo,S0,zme,YYo,KYo,xq,ZYo,eKo,oKo,P0,Wme,rKo,tKo,kq,aKo,nKo,sKo,$0,Qme,lKo,iKo,Rq,dKo,cKo,fKo,I0,Hme,mKo,gKo,Sq,hKo,pKo,_Ko,j0,Ume,uKo,bKo,Pq,vKo,TKo,FKo,D0,Jme,CKo,MKo,$q,EKo,yKo,wKo,N0,Yme,AKo,LKo,Iq,BKo,xKo,kKo,q0,Kme,RKo,SKo,jq,PKo,$Ko,IKo,O0,Zme,jKo,DKo,Dq,NKo,qKo,OKo,G0,ege,GKo,XKo,Nq,VKo,zKo,WKo,X0,oge,QKo,HKo,qq,UKo,JKo,YKo,rge,KKo,ZKo,Sy,dke,_c,V0,tge,Py,eZo,age,oZo,cke,Tr,$y,rZo,uc,tZo,nge,aZo,nZo,sge,sZo,lZo,iZo,Iy,dZo,lge,cZo,fZo,mZo,ht,jy,gZo,ige,hZo,pZo,bc,_Zo,dge,uZo,bZo,cge,vZo,TZo,FZo,fge,CZo,MZo,Dy,EZo,po,Ny,yZo,mge,wZo,AZo,un,LZo,gge,BZo,xZo,hge,kZo,RZo,pge,SZo,PZo,$Zo,H,z0,_ge,IZo,jZo,Oq,DZo,NZo,qZo,W0,uge,OZo,GZo,Gq,XZo,VZo,zZo,Q0,bge,WZo,QZo,Xq,HZo,UZo,JZo,H0,vge,YZo,KZo,Vq,ZZo,eer,oer,U0,Tge,rer,ter,zq,aer,ner,ser,J0,Fge,ler,ier,Wq,der,cer,fer,Y0,Cge,mer,ger,Qq,her,per,_er,K0,Mge,uer,ber,Hq,ver,Ter,Fer,Z0,Ege,Cer,Mer,Uq,Eer,yer,wer,eT,yge,Aer,Ler,Jq,Ber,xer,ker,oT,wge,Rer,Ser,Yq,Per,$er,Ier,rT,Age,jer,Der,Kq,Ner,qer,Oer,tT,Lge,Ger,Xer,Zq,Ver,zer,Wer,aT,Bge,Qer,Her,eO,Uer,Jer,Yer,nT,xge,Ker,Zer,oO,eor,oor,ror,sT,kge,tor,aor,rO,nor,sor,lor,lT,Rge,ior,dor,tO,cor,mor,gor,iT,Sge,hor,por,aO,_or,uor,bor,dT,Pge,vor,Tor,nO,For,Cor,Mor,cT,$ge,Eor,yor,sO,wor,Aor,Lor,fT,Ige,Bor,xor,lO,kor,Ror,Sor,mT,jge,Por,$or,iO,Ior,jor,Dor,Dge,Nor,qor,qy,fke,vc,gT,Nge,Oy,Oor,qge,Gor,mke,Fr,Gy,Xor,Tc,Vor,Oge,zor,Wor,Gge,Qor,Hor,Uor,Xy,Jor,Xge,Yor,Kor,Zor,pt,Vy,err,Vge,orr,rrr,Fc,trr,zge,arr,nrr,Wge,srr,lrr,irr,Qge,drr,crr,zy,frr,_o,Wy,mrr,Hge,grr,hrr,bn,prr,Uge,_rr,urr,Jge,brr,vrr,Yge,Trr,Frr,Crr,pe,hT,Kge,Mrr,Err,dO,yrr,wrr,Arr,pT,Zge,Lrr,Brr,cO,xrr,krr,Rrr,_T,ehe,Srr,Prr,fO,$rr,Irr,jrr,uT,ohe,Drr,Nrr,mO,qrr,Orr,Grr,bT,rhe,Xrr,Vrr,gO,zrr,Wrr,Qrr,vT,the,Hrr,Urr,hO,Jrr,Yrr,Krr,TT,ahe,Zrr,etr,pO,otr,rtr,ttr,FT,nhe,atr,ntr,_O,str,ltr,itr,CT,she,dtr,ctr,uO,ftr,mtr,gtr,MT,lhe,htr,ptr,bO,_tr,utr,btr,ihe,vtr,Ttr,Qy,gke,Cc,ET,dhe,Hy,Ftr,che,Ctr,hke,Cr,Uy,Mtr,Mc,Etr,fhe,ytr,wtr,mhe,Atr,Ltr,Btr,Jy,xtr,ghe,ktr,Rtr,Str,_t,Yy,Ptr,hhe,$tr,Itr,Ec,jtr,phe,Dtr,Ntr,_he,qtr,Otr,Gtr,uhe,Xtr,Vtr,Ky,ztr,uo,Zy,Wtr,bhe,Qtr,Htr,vn,Utr,vhe,Jtr,Ytr,The,Ktr,Ztr,Fhe,ear,oar,rar,ew,yT,Che,tar,aar,vO,nar,sar,lar,wT,Mhe,iar,dar,TO,car,far,mar,Ehe,gar,har,ow,pke,yc,AT,yhe,rw,par,whe,_ar,_ke,Mr,tw,uar,wc,bar,Ahe,Tar,Far,Lhe,Car,Mar,Ear,aw,yar,Bhe,war,Aar,Lar,ut,nw,Bar,xhe,xar,kar,Ac,Rar,khe,Sar,Par,Rhe,$ar,Iar,jar,She,Dar,Nar,sw,qar,bo,lw,Oar,Phe,Gar,Xar,Tn,Var,$he,zar,War,Ihe,Qar,Har,jhe,Uar,Jar,Yar,Y,LT,Dhe,Kar,Zar,FO,enr,onr,rnr,BT,Nhe,tnr,anr,CO,nnr,snr,lnr,xT,qhe,inr,dnr,MO,cnr,fnr,mnr,kT,Ohe,gnr,hnr,EO,pnr,_nr,unr,RT,Ghe,bnr,vnr,yO,Tnr,Fnr,Cnr,ST,Xhe,Mnr,Enr,wO,ynr,wnr,Anr,PT,Vhe,Lnr,Bnr,AO,xnr,knr,Rnr,$T,zhe,Snr,Pnr,LO,$nr,Inr,jnr,IT,Whe,Dnr,Nnr,BO,qnr,Onr,Gnr,jT,Qhe,Xnr,Vnr,xO,znr,Wnr,Qnr,DT,Hhe,Hnr,Unr,kO,Jnr,Ynr,Knr,NT,Uhe,Znr,esr,RO,osr,rsr,tsr,qT,Jhe,asr,nsr,SO,ssr,lsr,isr,OT,Yhe,dsr,csr,PO,fsr,msr,gsr,GT,Khe,hsr,psr,$O,_sr,usr,bsr,XT,Zhe,vsr,Tsr,IO,Fsr,Csr,Msr,VT,epe,Esr,ysr,jO,wsr,Asr,Lsr,zT,ope,Bsr,xsr,DO,ksr,Rsr,Ssr,WT,rpe,Psr,$sr,NO,Isr,jsr,Dsr,QT,tpe,Nsr,qsr,qO,Osr,Gsr,Xsr,ape,Vsr,zsr,iw,uke,Lc,HT,npe,dw,Wsr,spe,Qsr,bke,Er,cw,Hsr,Bc,Usr,lpe,Jsr,Ysr,ipe,Ksr,Zsr,elr,fw,olr,dpe,rlr,tlr,alr,bt,mw,nlr,cpe,slr,llr,xc,ilr,fpe,dlr,clr,mpe,flr,mlr,glr,gpe,hlr,plr,gw,_lr,vo,hw,ulr,hpe,blr,vlr,Fn,Tlr,ppe,Flr,Clr,_pe,Mlr,Elr,upe,ylr,wlr,Alr,_e,UT,bpe,Llr,Blr,OO,xlr,klr,Rlr,JT,vpe,Slr,Plr,GO,$lr,Ilr,jlr,YT,Tpe,Dlr,Nlr,XO,qlr,Olr,Glr,KT,Fpe,Xlr,Vlr,VO,zlr,Wlr,Qlr,ZT,Cpe,Hlr,Ulr,zO,Jlr,Ylr,Klr,e7,Mpe,Zlr,eir,WO,oir,rir,tir,o7,Epe,air,nir,QO,sir,lir,iir,r7,ype,dir,cir,HO,fir,mir,gir,t7,wpe,hir,pir,UO,_ir,uir,bir,a7,Ape,vir,Tir,JO,Fir,Cir,Mir,Lpe,Eir,yir,pw,vke,kc,n7,Bpe,_w,wir,xpe,Air,Tke,yr,uw,Lir,Rc,Bir,kpe,xir,kir,Rpe,Rir,Sir,Pir,bw,$ir,Spe,Iir,jir,Dir,vt,vw,Nir,Ppe,qir,Oir,Sc,Gir,$pe,Xir,Vir,Ipe,zir,Wir,Qir,jpe,Hir,Uir,Tw,Jir,To,Fw,Yir,Dpe,Kir,Zir,Cn,edr,Npe,odr,rdr,qpe,tdr,adr,Ope,ndr,sdr,ldr,V,s7,Gpe,idr,ddr,YO,cdr,fdr,mdr,l7,Xpe,gdr,hdr,KO,pdr,_dr,udr,i7,Vpe,bdr,vdr,ZO,Tdr,Fdr,Cdr,d7,zpe,Mdr,Edr,eG,ydr,wdr,Adr,c7,Wpe,Ldr,Bdr,oG,xdr,kdr,Rdr,f7,Qpe,Sdr,Pdr,rG,$dr,Idr,jdr,m7,Hpe,Ddr,Ndr,tG,qdr,Odr,Gdr,g7,Upe,Xdr,Vdr,aG,zdr,Wdr,Qdr,h7,Jpe,Hdr,Udr,nG,Jdr,Ydr,Kdr,p7,Ype,Zdr,ecr,sG,ocr,rcr,tcr,_7,Kpe,acr,ncr,lG,scr,lcr,icr,u7,Zpe,dcr,ccr,iG,fcr,mcr,gcr,b7,e_e,hcr,pcr,dG,_cr,ucr,bcr,v7,o_e,vcr,Tcr,cG,Fcr,Ccr,Mcr,T7,r_e,Ecr,ycr,fG,wcr,Acr,Lcr,F7,t_e,Bcr,xcr,mG,kcr,Rcr,Scr,C7,a_e,Pcr,$cr,gG,Icr,jcr,Dcr,M7,n_e,Ncr,qcr,hG,Ocr,Gcr,Xcr,E7,s_e,Vcr,zcr,pG,Wcr,Qcr,Hcr,y7,l_e,Ucr,Jcr,_G,Ycr,Kcr,Zcr,w7,i_e,efr,ofr,uG,rfr,tfr,afr,A7,d_e,nfr,sfr,bG,lfr,ifr,dfr,L7,c_e,cfr,ffr,vG,mfr,gfr,hfr,B7,f_e,pfr,_fr,TG,ufr,bfr,vfr,x7,m_e,Tfr,Ffr,FG,Cfr,Mfr,Efr,g_e,yfr,wfr,Cw,Fke,Pc,k7,h_e,Mw,Afr,p_e,Lfr,Cke,wr,Ew,Bfr,$c,xfr,__e,kfr,Rfr,u_e,Sfr,Pfr,$fr,yw,Ifr,b_e,jfr,Dfr,Nfr,Tt,ww,qfr,v_e,Ofr,Gfr,Ic,Xfr,T_e,Vfr,zfr,F_e,Wfr,Qfr,Hfr,C_e,Ufr,Jfr,Aw,Yfr,Fo,Lw,Kfr,M_e,Zfr,emr,Mn,omr,E_e,rmr,tmr,y_e,amr,nmr,w_e,smr,lmr,imr,te,R7,A_e,dmr,cmr,CG,fmr,mmr,gmr,S7,L_e,hmr,pmr,MG,_mr,umr,bmr,P7,B_e,vmr,Tmr,EG,Fmr,Cmr,Mmr,$7,x_e,Emr,ymr,yG,wmr,Amr,Lmr,I7,k_e,Bmr,xmr,wG,kmr,Rmr,Smr,j7,R_e,Pmr,$mr,AG,Imr,jmr,Dmr,D7,S_e,Nmr,qmr,LG,Omr,Gmr,Xmr,N7,P_e,Vmr,zmr,BG,Wmr,Qmr,Hmr,q7,$_e,Umr,Jmr,xG,Ymr,Kmr,Zmr,O7,I_e,egr,ogr,kG,rgr,tgr,agr,G7,j_e,ngr,sgr,RG,lgr,igr,dgr,X7,D_e,cgr,fgr,SG,mgr,ggr,hgr,V7,N_e,pgr,_gr,PG,ugr,bgr,vgr,z7,q_e,Tgr,Fgr,$G,Cgr,Mgr,Egr,W7,O_e,ygr,wgr,IG,Agr,Lgr,Bgr,Q7,G_e,xgr,kgr,jG,Rgr,Sgr,Pgr,H7,X_e,$gr,Igr,DG,jgr,Dgr,Ngr,V_e,qgr,Ogr,Bw,Mke,jc,U7,z_e,xw,Ggr,W_e,Xgr,Eke,Ar,kw,Vgr,Dc,zgr,Q_e,Wgr,Qgr,H_e,Hgr,Ugr,Jgr,Rw,Ygr,U_e,Kgr,Zgr,ehr,Ft,Sw,ohr,J_e,rhr,thr,Nc,ahr,Y_e,nhr,shr,K_e,lhr,ihr,dhr,Z_e,chr,fhr,Pw,mhr,Co,$w,ghr,eue,hhr,phr,En,_hr,oue,uhr,bhr,rue,vhr,Thr,tue,Fhr,Chr,Mhr,aue,J7,nue,Ehr,yhr,NG,whr,Ahr,Lhr,sue,Bhr,xhr,Iw,yke,qc,Y7,lue,jw,khr,iue,Rhr,wke,Lr,Dw,Shr,Oc,Phr,due,$hr,Ihr,cue,jhr,Dhr,Nhr,Nw,qhr,fue,Ohr,Ghr,Xhr,Ct,qw,Vhr,mue,zhr,Whr,Gc,Qhr,gue,Hhr,Uhr,hue,Jhr,Yhr,Khr,pue,Zhr,epr,Ow,opr,Mo,Gw,rpr,_ue,tpr,apr,yn,npr,uue,spr,lpr,bue,ipr,dpr,vue,cpr,fpr,mpr,K,K7,Tue,gpr,hpr,qG,ppr,_pr,upr,Z7,Fue,bpr,vpr,OG,Tpr,Fpr,Cpr,eF,Cue,Mpr,Epr,GG,ypr,wpr,Apr,oF,Mue,Lpr,Bpr,XG,xpr,kpr,Rpr,rF,Eue,Spr,Ppr,VG,$pr,Ipr,jpr,tF,yue,Dpr,Npr,zG,qpr,Opr,Gpr,aF,wue,Xpr,Vpr,WG,zpr,Wpr,Qpr,nF,Aue,Hpr,Upr,QG,Jpr,Ypr,Kpr,sF,Lue,Zpr,e_r,HG,o_r,r_r,t_r,lF,Bue,a_r,n_r,UG,s_r,l_r,i_r,iF,xue,d_r,c_r,JG,f_r,m_r,g_r,dF,kue,h_r,p_r,YG,__r,u_r,b_r,cF,Rue,v_r,T_r,KG,F_r,C_r,M_r,fF,Sue,E_r,y_r,ZG,w_r,A_r,L_r,mF,Pue,B_r,x_r,eX,k_r,R_r,S_r,gF,$ue,P_r,$_r,oX,I_r,j_r,D_r,hF,Iue,N_r,q_r,rX,O_r,G_r,X_r,pF,jue,V_r,z_r,tX,W_r,Q_r,H_r,_F,Due,U_r,J_r,aX,Y_r,K_r,Z_r,uF,Nue,eur,our,nX,rur,tur,aur,que,nur,sur,Xw,Ake,Xc,bF,Oue,Vw,lur,Gue,iur,Lke,Br,zw,dur,Vc,cur,Xue,fur,mur,Vue,gur,hur,pur,Ww,_ur,zue,uur,bur,vur,Mt,Qw,Tur,Wue,Fur,Cur,zc,Mur,Que,Eur,yur,Hue,wur,Aur,Lur,Uue,Bur,xur,Hw,kur,Eo,Uw,Rur,Jue,Sur,Pur,wn,$ur,Yue,Iur,jur,Kue,Dur,Nur,Zue,qur,Our,Gur,Z,vF,e1e,Xur,Vur,sX,zur,Wur,Qur,TF,o1e,Hur,Uur,lX,Jur,Yur,Kur,FF,r1e,Zur,e1r,iX,o1r,r1r,t1r,CF,t1e,a1r,n1r,dX,s1r,l1r,i1r,MF,a1e,d1r,c1r,cX,f1r,m1r,g1r,EF,n1e,h1r,p1r,fX,_1r,u1r,b1r,yF,s1e,v1r,T1r,mX,F1r,C1r,M1r,wF,l1e,E1r,y1r,gX,w1r,A1r,L1r,AF,i1e,B1r,x1r,hX,k1r,R1r,S1r,LF,d1e,P1r,$1r,pX,I1r,j1r,D1r,BF,c1e,N1r,q1r,_X,O1r,G1r,X1r,xF,f1e,V1r,z1r,uX,W1r,Q1r,H1r,kF,m1e,U1r,J1r,bX,Y1r,K1r,Z1r,RF,g1e,ebr,obr,vX,rbr,tbr,abr,SF,h1e,nbr,sbr,TX,lbr,ibr,dbr,PF,p1e,cbr,fbr,FX,mbr,gbr,hbr,$F,_1e,pbr,_br,CX,ubr,bbr,vbr,IF,u1e,Tbr,Fbr,MX,Cbr,Mbr,Ebr,jF,b1e,ybr,wbr,EX,Abr,Lbr,Bbr,v1e,xbr,kbr,Jw,Bke,Wc,DF,T1e,Yw,Rbr,F1e,Sbr,xke,xr,Kw,Pbr,Qc,$br,C1e,Ibr,jbr,M1e,Dbr,Nbr,qbr,Zw,Obr,E1e,Gbr,Xbr,Vbr,Et,e6,zbr,y1e,Wbr,Qbr,Hc,Hbr,w1e,Ubr,Jbr,A1e,Ybr,Kbr,Zbr,L1e,e5r,o5r,o6,r5r,yo,r6,t5r,B1e,a5r,n5r,An,s5r,x1e,l5r,i5r,k1e,d5r,c5r,R1e,f5r,m5r,g5r,S1e,NF,P1e,h5r,p5r,yX,_5r,u5r,b5r,$1e,v5r,T5r,t6,kke,Uc,qF,I1e,a6,F5r,j1e,C5r,Rke,kr,n6,M5r,Jc,E5r,D1e,y5r,w5r,N1e,A5r,L5r,B5r,s6,x5r,q1e,k5r,R5r,S5r,yt,l6,P5r,O1e,$5r,I5r,Yc,j5r,G1e,D5r,N5r,X1e,q5r,O5r,G5r,V1e,X5r,V5r,i6,z5r,wo,d6,W5r,z1e,Q5r,H5r,Ln,U5r,W1e,J5r,Y5r,Q1e,K5r,Z5r,H1e,e2r,o2r,r2r,U1e,OF,J1e,t2r,a2r,wX,n2r,s2r,l2r,Y1e,i2r,d2r,c6,Ske,Kc,GF,K1e,f6,c2r,Z1e,f2r,Pke,Rr,m6,m2r,Zc,g2r,ebe,h2r,p2r,obe,_2r,u2r,b2r,g6,v2r,rbe,T2r,F2r,C2r,wt,h6,M2r,tbe,E2r,y2r,ef,w2r,abe,A2r,L2r,nbe,B2r,x2r,k2r,sbe,R2r,S2r,p6,P2r,Ao,_6,$2r,lbe,I2r,j2r,Bn,D2r,ibe,N2r,q2r,dbe,O2r,G2r,cbe,X2r,V2r,z2r,z,XF,fbe,W2r,Q2r,AX,H2r,U2r,J2r,VF,mbe,Y2r,K2r,LX,Z2r,evr,ovr,zF,gbe,rvr,tvr,BX,avr,nvr,svr,WF,hbe,lvr,ivr,xX,dvr,cvr,fvr,QF,pbe,mvr,gvr,kX,hvr,pvr,_vr,HF,_be,uvr,bvr,RX,vvr,Tvr,Fvr,UF,ube,Cvr,Mvr,SX,Evr,yvr,wvr,JF,bbe,Avr,Lvr,PX,Bvr,xvr,kvr,YF,vbe,Rvr,Svr,$X,Pvr,$vr,Ivr,KF,Tbe,jvr,Dvr,IX,Nvr,qvr,Ovr,ZF,Fbe,Gvr,Xvr,jX,Vvr,zvr,Wvr,e9,Cbe,Qvr,Hvr,DX,Uvr,Jvr,Yvr,o9,Mbe,Kvr,Zvr,NX,e0r,o0r,r0r,r9,Ebe,t0r,a0r,qX,n0r,s0r,l0r,t9,ybe,i0r,d0r,OX,c0r,f0r,m0r,a9,wbe,g0r,h0r,GX,p0r,_0r,u0r,n9,Abe,b0r,v0r,XX,T0r,F0r,C0r,s9,Lbe,M0r,E0r,VX,y0r,w0r,A0r,l9,Bbe,L0r,B0r,zX,x0r,k0r,R0r,i9,xbe,S0r,P0r,WX,$0r,I0r,j0r,d9,kbe,D0r,N0r,QX,q0r,O0r,G0r,c9,Rbe,X0r,V0r,HX,z0r,W0r,Q0r,f9,Sbe,H0r,U0r,UX,J0r,Y0r,K0r,m9,Pbe,Z0r,eTr,JX,oTr,rTr,tTr,g9,$be,aTr,nTr,YX,sTr,lTr,iTr,Ibe,dTr,cTr,u6,$ke,of,h9,jbe,b6,fTr,Dbe,mTr,Ike,Sr,v6,gTr,rf,hTr,Nbe,pTr,_Tr,qbe,uTr,bTr,vTr,T6,TTr,Obe,FTr,CTr,MTr,At,F6,ETr,Gbe,yTr,wTr,tf,ATr,Xbe,LTr,BTr,Vbe,xTr,kTr,RTr,zbe,STr,PTr,C6,$Tr,Lo,M6,ITr,Wbe,jTr,DTr,xn,NTr,Qbe,qTr,OTr,Hbe,GTr,XTr,Ube,VTr,zTr,WTr,ca,p9,Jbe,QTr,HTr,KX,UTr,JTr,YTr,_9,Ybe,KTr,ZTr,ZX,e7r,o7r,r7r,u9,Kbe,t7r,a7r,eV,n7r,s7r,l7r,b9,Zbe,i7r,d7r,oV,c7r,f7r,m7r,v9,e5e,g7r,h7r,rV,p7r,_7r,u7r,o5e,b7r,v7r,E6,jke,af,T9,r5e,y6,T7r,t5e,F7r,Dke,Pr,w6,C7r,nf,M7r,a5e,E7r,y7r,n5e,w7r,A7r,L7r,A6,B7r,s5e,x7r,k7r,R7r,Lt,L6,S7r,l5e,P7r,$7r,sf,I7r,i5e,j7r,D7r,d5e,N7r,q7r,O7r,c5e,G7r,X7r,B6,V7r,Bo,x6,z7r,f5e,W7r,Q7r,kn,H7r,m5e,U7r,J7r,g5e,Y7r,K7r,h5e,Z7r,eFr,oFr,ce,F9,p5e,rFr,tFr,tV,aFr,nFr,sFr,C9,_5e,lFr,iFr,aV,dFr,cFr,fFr,M9,u5e,mFr,gFr,nV,hFr,pFr,_Fr,E9,b5e,uFr,bFr,sV,vFr,TFr,FFr,y9,v5e,CFr,MFr,lV,EFr,yFr,wFr,w9,T5e,AFr,LFr,iV,BFr,xFr,kFr,A9,F5e,RFr,SFr,dV,PFr,$Fr,IFr,L9,C5e,jFr,DFr,cV,NFr,qFr,OFr,B9,M5e,GFr,XFr,fV,VFr,zFr,WFr,x9,E5e,QFr,HFr,mV,UFr,JFr,YFr,k9,y5e,KFr,ZFr,gV,e9r,o9r,r9r,R9,w5e,t9r,a9r,hV,n9r,s9r,l9r,A5e,i9r,d9r,k6,Nke,lf,S9,L5e,R6,c9r,B5e,f9r,qke,$r,S6,m9r,df,g9r,x5e,h9r,p9r,k5e,_9r,u9r,b9r,P6,v9r,R5e,T9r,F9r,C9r,Bt,$6,M9r,S5e,E9r,y9r,cf,w9r,P5e,A9r,L9r,$5e,B9r,x9r,k9r,I5e,R9r,S9r,I6,P9r,xo,j6,$9r,j5e,I9r,j9r,Rn,D9r,D5e,N9r,q9r,N5e,O9r,G9r,q5e,X9r,V9r,z9r,ue,P9,O5e,W9r,Q9r,pV,H9r,U9r,J9r,$9,G5e,Y9r,K9r,_V,Z9r,eCr,oCr,I9,X5e,rCr,tCr,uV,aCr,nCr,sCr,j9,V5e,lCr,iCr,bV,dCr,cCr,fCr,D9,z5e,mCr,gCr,vV,hCr,pCr,_Cr,N9,W5e,uCr,bCr,TV,vCr,TCr,FCr,q9,Q5e,CCr,MCr,FV,ECr,yCr,wCr,O9,H5e,ACr,LCr,CV,BCr,xCr,kCr,G9,U5e,RCr,SCr,MV,PCr,$Cr,ICr,X9,J5e,jCr,DCr,EV,NCr,qCr,OCr,Y5e,GCr,XCr,D6,Oke,ff,V9,K5e,N6,VCr,Z5e,zCr,Gke,Ir,q6,WCr,mf,QCr,e2e,HCr,UCr,o2e,JCr,YCr,KCr,O6,ZCr,r2e,eMr,oMr,rMr,xt,G6,tMr,t2e,aMr,nMr,gf,sMr,a2e,lMr,iMr,n2e,dMr,cMr,fMr,s2e,mMr,gMr,X6,hMr,ko,V6,pMr,l2e,_Mr,uMr,Sn,bMr,i2e,vMr,TMr,d2e,FMr,CMr,c2e,MMr,EMr,yMr,Ce,z9,f2e,wMr,AMr,yV,LMr,BMr,xMr,W9,m2e,kMr,RMr,wV,SMr,PMr,$Mr,Q9,g2e,IMr,jMr,AV,DMr,NMr,qMr,H9,h2e,OMr,GMr,LV,XMr,VMr,zMr,U9,p2e,WMr,QMr,BV,HMr,UMr,JMr,J9,_2e,YMr,KMr,xV,ZMr,e4r,o4r,Y9,u2e,r4r,t4r,kV,a4r,n4r,s4r,K9,b2e,l4r,i4r,RV,d4r,c4r,f4r,Z9,v2e,m4r,g4r,SV,h4r,p4r,_4r,T2e,u4r,b4r,z6,Xke,hf,eC,F2e,W6,v4r,C2e,T4r,Vke,jr,Q6,F4r,pf,C4r,M2e,M4r,E4r,E2e,y4r,w4r,A4r,H6,L4r,y2e,B4r,x4r,k4r,kt,U6,R4r,w2e,S4r,P4r,_f,$4r,A2e,I4r,j4r,L2e,D4r,N4r,q4r,B2e,O4r,G4r,J6,X4r,Ro,Y6,V4r,x2e,z4r,W4r,Pn,Q4r,k2e,H4r,U4r,R2e,J4r,Y4r,S2e,K4r,Z4r,eEr,be,oC,P2e,oEr,rEr,PV,tEr,aEr,nEr,rC,$2e,sEr,lEr,$V,iEr,dEr,cEr,tC,I2e,fEr,mEr,IV,gEr,hEr,pEr,aC,j2e,_Er,uEr,jV,bEr,vEr,TEr,nC,D2e,FEr,CEr,DV,MEr,EEr,yEr,sC,N2e,wEr,AEr,NV,LEr,BEr,xEr,lC,q2e,kEr,REr,qV,SEr,PEr,$Er,iC,O2e,IEr,jEr,OV,DEr,NEr,qEr,dC,G2e,OEr,GEr,GV,XEr,VEr,zEr,cC,X2e,WEr,QEr,XV,HEr,UEr,JEr,V2e,YEr,KEr,K6,zke,uf,fC,z2e,Z6,ZEr,W2e,e3r,Wke,Dr,eA,o3r,bf,r3r,Q2e,t3r,a3r,H2e,n3r,s3r,l3r,oA,i3r,U2e,d3r,c3r,f3r,Rt,rA,m3r,J2e,g3r,h3r,vf,p3r,Y2e,_3r,u3r,K2e,b3r,v3r,T3r,Z2e,F3r,C3r,tA,M3r,So,aA,E3r,eve,y3r,w3r,$n,A3r,ove,L3r,B3r,rve,x3r,k3r,tve,R3r,S3r,P3r,ve,mC,ave,$3r,I3r,VV,j3r,D3r,N3r,gC,nve,q3r,O3r,zV,G3r,X3r,V3r,hC,sve,z3r,W3r,WV,Q3r,H3r,U3r,pC,lve,J3r,Y3r,QV,K3r,Z3r,eyr,_C,ive,oyr,ryr,HV,tyr,ayr,nyr,uC,dve,syr,lyr,UV,iyr,dyr,cyr,bC,cve,fyr,myr,JV,gyr,hyr,pyr,vC,fve,_yr,uyr,YV,byr,vyr,Tyr,TC,mve,Fyr,Cyr,KV,Myr,Eyr,yyr,FC,gve,wyr,Ayr,ZV,Lyr,Byr,xyr,hve,kyr,Ryr,nA,Qke,Tf,CC,pve,sA,Syr,_ve,Pyr,Hke,Nr,lA,$yr,Ff,Iyr,uve,jyr,Dyr,bve,Nyr,qyr,Oyr,iA,Gyr,vve,Xyr,Vyr,zyr,St,dA,Wyr,Tve,Qyr,Hyr,Cf,Uyr,Fve,Jyr,Yyr,Cve,Kyr,Zyr,ewr,Mve,owr,rwr,cA,twr,Po,fA,awr,Eve,nwr,swr,In,lwr,yve,iwr,dwr,wve,cwr,fwr,Ave,mwr,gwr,hwr,Re,MC,Lve,pwr,_wr,ez,uwr,bwr,vwr,EC,Bve,Twr,Fwr,oz,Cwr,Mwr,Ewr,yC,xve,ywr,wwr,rz,Awr,Lwr,Bwr,wC,kve,xwr,kwr,tz,Rwr,Swr,Pwr,AC,Rve,$wr,Iwr,az,jwr,Dwr,Nwr,LC,Sve,qwr,Owr,nz,Gwr,Xwr,Vwr,BC,Pve,zwr,Wwr,sz,Qwr,Hwr,Uwr,xC,$ve,Jwr,Ywr,lz,Kwr,Zwr,e6r,Ive,o6r,r6r,mA,Uke,Mf,kC,jve,gA,t6r,Dve,a6r,Jke,qr,hA,n6r,Ef,s6r,Nve,l6r,i6r,qve,d6r,c6r,f6r,pA,m6r,Ove,g6r,h6r,p6r,Pt,_A,_6r,Gve,u6r,b6r,yf,v6r,Xve,T6r,F6r,Vve,C6r,M6r,E6r,zve,y6r,w6r,uA,A6r,$o,bA,L6r,Wve,B6r,x6r,jn,k6r,Qve,R6r,S6r,Hve,P6r,$6r,Uve,I6r,j6r,D6r,Se,RC,Jve,N6r,q6r,iz,O6r,G6r,X6r,SC,Yve,V6r,z6r,dz,W6r,Q6r,H6r,PC,Kve,U6r,J6r,cz,Y6r,K6r,Z6r,$C,Zve,eAr,oAr,fz,rAr,tAr,aAr,IC,e0e,nAr,sAr,mz,lAr,iAr,dAr,jC,o0e,cAr,fAr,gz,mAr,gAr,hAr,DC,r0e,pAr,_Ar,hz,uAr,bAr,vAr,NC,t0e,TAr,FAr,pz,CAr,MAr,EAr,a0e,yAr,wAr,vA,Yke,wf,qC,n0e,TA,AAr,s0e,LAr,Kke,Or,FA,BAr,Af,xAr,l0e,kAr,RAr,i0e,SAr,PAr,$Ar,CA,IAr,d0e,jAr,DAr,NAr,$t,MA,qAr,c0e,OAr,GAr,Lf,XAr,f0e,VAr,zAr,m0e,WAr,QAr,HAr,g0e,UAr,JAr,EA,YAr,Io,yA,KAr,h0e,ZAr,eLr,Dn,oLr,p0e,rLr,tLr,_0e,aLr,nLr,u0e,sLr,lLr,iLr,b0e,OC,v0e,dLr,cLr,_z,fLr,mLr,gLr,T0e,hLr,pLr,wA,Zke,Bf,GC,F0e,AA,_Lr,C0e,uLr,eRe,Gr,LA,bLr,xf,vLr,M0e,TLr,FLr,E0e,CLr,MLr,ELr,BA,yLr,y0e,wLr,ALr,LLr,It,xA,BLr,w0e,xLr,kLr,kf,RLr,A0e,SLr,PLr,L0e,$Lr,ILr,jLr,B0e,DLr,NLr,kA,qLr,jo,RA,OLr,x0e,GLr,XLr,Nn,VLr,k0e,zLr,WLr,R0e,QLr,HLr,S0e,ULr,JLr,YLr,SA,XC,P0e,KLr,ZLr,uz,e8r,o8r,r8r,VC,$0e,t8r,a8r,bz,n8r,s8r,l8r,I0e,i8r,d8r,PA,oRe,Rf,zC,j0e,$A,c8r,D0e,f8r,rRe,Xr,IA,m8r,Sf,g8r,N0e,h8r,p8r,q0e,_8r,u8r,b8r,jA,v8r,O0e,T8r,F8r,C8r,jt,DA,M8r,G0e,E8r,y8r,Pf,w8r,X0e,A8r,L8r,V0e,B8r,x8r,k8r,z0e,R8r,S8r,NA,P8r,Do,qA,$8r,W0e,I8r,j8r,qn,D8r,Q0e,N8r,q8r,H0e,O8r,G8r,U0e,X8r,V8r,z8r,J0e,WC,Y0e,W8r,Q8r,vz,H8r,U8r,J8r,K0e,Y8r,K8r,OA,tRe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),JM=new X({}),YM=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new Z8r({props:{warning:"&lcub;true}",$$slots:{default:[LTt]},$$scope:{ctx:Ii}}}),KM=new X({}),ZM=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/configuration_auto.py#L527"}}),r4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/configuration_auto.py#L550",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),t4=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),a4=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/configuration_auto.py#L672",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),n4=new X({}),s4=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/tokenization_auto.py#L352"}}),d4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15907/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),c4=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),f4=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),m4=new X({}),g4=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),_4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15907/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Eh=new Z8r({props:{$$slots:{default:[BTt]},$$scope:{ctx:Ii}}}),u4=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),b4=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),v4=new X({}),T4=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/processing_auto.py#L71"}}),M4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),$h=new Z8r({props:{$$slots:{default:[xTt]},$$scope:{ctx:Ii}}}),E4=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),y4=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),w4=new X({}),A4=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L697"}}),B4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),x4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),k4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S4=new X({}),P4=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L704"}}),I4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),j4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),D4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q4=new X({}),O4=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L719"}}),X4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),V4=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),z4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W4=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q4=new X({}),H4=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L726"}}),J4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Y4=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),K4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z4=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eE=new X({}),oE=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L733"}}),tE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),aE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),nE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lE=new X({}),iE=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L742"}}),cE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),fE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),mE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hE=new X({}),pE=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L776"}}),uE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),bE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),vE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FE=new X({}),CE=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L783"}}),EE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),yE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),wE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LE=new X({}),BE=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L769"}}),kE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),RE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),SE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$E=new X({}),IE=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L751"}}),DE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),NE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),qE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GE=new X({}),XE=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L758"}}),zE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),WE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),QE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UE=new X({}),JE=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L792"}}),KE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ZE=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),e3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r3=new X({}),t3=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L831"}}),n3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),s3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),l3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d3=new X({}),c3=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L838"}}),m3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),g3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),h3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_3=new X({}),u3=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L861"}}),v3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),T3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),F3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M3=new X({}),E3=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L845"}}),w3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),A3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),L3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x3=new X({}),k3=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L852"}}),S3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),P3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),$3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D3=new X({}),N3=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L870"}}),O3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),G3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),X3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z3=new X({}),W3=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L877"}}),H3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),U3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),J3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K3=new X({}),Z3=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L824"}}),oy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),ty=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ny=new X({}),sy=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L799"}}),iy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),cy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new X({}),gy=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L806"}}),py=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),uy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new X({}),Fy=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_auto.py#L815"}}),My=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new X({}),Ly=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Ny=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new X({}),Gy=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),Vy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Wy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),Yy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new X({}),tw=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),nw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),lw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dw=new X({}),cw=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),hw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new X({}),uw=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),vw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Fw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Mw=new X({}),Ew=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),ww=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Lw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xw=new X({}),kw=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),Sw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),$w=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Dw=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new X({}),zw=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Uw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new X({}),Kw=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),e6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),o6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),r6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a6=new X({}),n6=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),l6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),i6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),d6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f6=new X({}),m6=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),h6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),p6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),_6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b6=new X({}),v6=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),F6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),C6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),M6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y6=new X({}),w6=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),L6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),B6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),x6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R6=new X({}),S6=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),$6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),I6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),j6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N6=new X({}),q6=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),G6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),X6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),V6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W6=new X({}),Q6=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),U6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),J6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),Y6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z6=new X({}),eA=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),rA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),tA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),aA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sA=new X({}),lA=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),dA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),fA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gA=new X({}),hA=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),_A=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),bA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TA=new X({}),FA=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),MA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),yA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AA=new X({}),LA=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),xA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),RA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new X({}),IA=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),DA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15907/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),qA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15907/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Pe=l(),de=a("h1"),ge=a("a"),io=a("span"),f(fe.$$.fragment),Te=l(),Vo=a("span"),ji=o("Auto Classes"),If=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),WM=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Le=l(),co=a("p"),qi=o("Instantiating one of "),On=a("a"),QM=o("AutoConfig"),Gn=o(", "),Xn=a("a"),HM=o("AutoModel"),Oi=o(`, and
`),Vn=a("a"),UM=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(qa.$$.fragment),fo=l(),he=a("p"),NL=o("will create a model that is an instance of "),Xi=a("a"),qL=o("BertModel"),OL=o("."),zo=l(),Oa=a("p"),GL=o("There is one class of "),Nf=a("code"),XL=o("AutoModel"),_Pe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rxe=l(),Vi=a("h2"),qf=a("a"),mQ=a("span"),f(JM.$$.fragment),uPe=l(),gQ=a("span"),bPe=o("Extending the Auto Classes"),txe=l(),zn=a("p"),vPe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hQ=a("code"),TPe=o("NewModel"),FPe=o(", make sure you have a "),pQ=a("code"),CPe=o("NewModelConfig"),MPe=o(` then you can add those to the auto
classes like this:`),axe=l(),f(YM.$$.fragment),nxe=l(),VL=a("p"),EPe=o("You will then be able to use the auto classes like you would usually do!"),sxe=l(),f(Of.$$.fragment),lxe=l(),zi=a("h2"),Gf=a("a"),_Q=a("span"),f(KM.$$.fragment),yPe=l(),uQ=a("span"),wPe=o("AutoConfig"),ixe=l(),Wo=a("div"),f(ZM.$$.fragment),APe=l(),e4=a("p"),LPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),zL=a("a"),BPe=o("from_pretrained()"),xPe=o(" class method."),kPe=l(),o4=a("p"),RPe=o("This class cannot be instantiated directly using "),bQ=a("code"),SPe=o("__init__()"),PPe=o(" (throws an error)."),$Pe=l(),mo=a("div"),f(r4.$$.fragment),IPe=l(),vQ=a("p"),jPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),DPe=l(),Wi=a("p"),NPe=o("The configuration class to instantiate is selected based on the "),TQ=a("code"),qPe=o("model_type"),OPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),FQ=a("code"),GPe=o("pretrained_model_name_or_path"),XPe=o(":"),VPe=l(),v=a("ul"),Xf=a("li"),CQ=a("strong"),zPe=o("albert"),WPe=o(" \u2014 "),WL=a("a"),QPe=o("AlbertConfig"),HPe=o(" (ALBERT model)"),UPe=l(),Vf=a("li"),MQ=a("strong"),JPe=o("bart"),YPe=o(" \u2014 "),QL=a("a"),KPe=o("BartConfig"),ZPe=o(" (BART model)"),e$e=l(),zf=a("li"),EQ=a("strong"),o$e=o("beit"),r$e=o(" \u2014 "),HL=a("a"),t$e=o("BeitConfig"),a$e=o(" (BEiT model)"),n$e=l(),Wf=a("li"),yQ=a("strong"),s$e=o("bert"),l$e=o(" \u2014 "),UL=a("a"),i$e=o("BertConfig"),d$e=o(" (BERT model)"),c$e=l(),Qf=a("li"),wQ=a("strong"),f$e=o("bert-generation"),m$e=o(" \u2014 "),JL=a("a"),g$e=o("BertGenerationConfig"),h$e=o(" (Bert Generation model)"),p$e=l(),Hf=a("li"),AQ=a("strong"),_$e=o("big_bird"),u$e=o(" \u2014 "),YL=a("a"),b$e=o("BigBirdConfig"),v$e=o(" (BigBird model)"),T$e=l(),Uf=a("li"),LQ=a("strong"),F$e=o("bigbird_pegasus"),C$e=o(" \u2014 "),KL=a("a"),M$e=o("BigBirdPegasusConfig"),E$e=o(" (BigBirdPegasus model)"),y$e=l(),Jf=a("li"),BQ=a("strong"),w$e=o("blenderbot"),A$e=o(" \u2014 "),ZL=a("a"),L$e=o("BlenderbotConfig"),B$e=o(" (Blenderbot model)"),x$e=l(),Yf=a("li"),xQ=a("strong"),k$e=o("blenderbot-small"),R$e=o(" \u2014 "),e8=a("a"),S$e=o("BlenderbotSmallConfig"),P$e=o(" (BlenderbotSmall model)"),$$e=l(),Kf=a("li"),kQ=a("strong"),I$e=o("camembert"),j$e=o(" \u2014 "),o8=a("a"),D$e=o("CamembertConfig"),N$e=o(" (CamemBERT model)"),q$e=l(),Zf=a("li"),RQ=a("strong"),O$e=o("canine"),G$e=o(" \u2014 "),r8=a("a"),X$e=o("CanineConfig"),V$e=o(" (Canine model)"),z$e=l(),em=a("li"),SQ=a("strong"),W$e=o("clip"),Q$e=o(" \u2014 "),t8=a("a"),H$e=o("CLIPConfig"),U$e=o(" (CLIP model)"),J$e=l(),om=a("li"),PQ=a("strong"),Y$e=o("convbert"),K$e=o(" \u2014 "),a8=a("a"),Z$e=o("ConvBertConfig"),eIe=o(" (ConvBERT model)"),oIe=l(),rm=a("li"),$Q=a("strong"),rIe=o("convnext"),tIe=o(" \u2014 "),n8=a("a"),aIe=o("ConvNextConfig"),nIe=o(" (ConvNext model)"),sIe=l(),tm=a("li"),IQ=a("strong"),lIe=o("ctrl"),iIe=o(" \u2014 "),s8=a("a"),dIe=o("CTRLConfig"),cIe=o(" (CTRL model)"),fIe=l(),am=a("li"),jQ=a("strong"),mIe=o("data2vec-audio"),gIe=o(" \u2014 "),l8=a("a"),hIe=o("Data2VecAudioConfig"),pIe=o(" (Data2VecAudio model)"),_Ie=l(),nm=a("li"),DQ=a("strong"),uIe=o("data2vec-text"),bIe=o(" \u2014 "),i8=a("a"),vIe=o("Data2VecTextConfig"),TIe=o(" (Data2VecText model)"),FIe=l(),sm=a("li"),NQ=a("strong"),CIe=o("deberta"),MIe=o(" \u2014 "),d8=a("a"),EIe=o("DebertaConfig"),yIe=o(" (DeBERTa model)"),wIe=l(),lm=a("li"),qQ=a("strong"),AIe=o("deberta-v2"),LIe=o(" \u2014 "),c8=a("a"),BIe=o("DebertaV2Config"),xIe=o(" (DeBERTa-v2 model)"),kIe=l(),im=a("li"),OQ=a("strong"),RIe=o("deit"),SIe=o(" \u2014 "),f8=a("a"),PIe=o("DeiTConfig"),$Ie=o(" (DeiT model)"),IIe=l(),dm=a("li"),GQ=a("strong"),jIe=o("detr"),DIe=o(" \u2014 "),m8=a("a"),NIe=o("DetrConfig"),qIe=o(" (DETR model)"),OIe=l(),cm=a("li"),XQ=a("strong"),GIe=o("distilbert"),XIe=o(" \u2014 "),g8=a("a"),VIe=o("DistilBertConfig"),zIe=o(" (DistilBERT model)"),WIe=l(),fm=a("li"),VQ=a("strong"),QIe=o("dpr"),HIe=o(" \u2014 "),h8=a("a"),UIe=o("DPRConfig"),JIe=o(" (DPR model)"),YIe=l(),mm=a("li"),zQ=a("strong"),KIe=o("electra"),ZIe=o(" \u2014 "),p8=a("a"),eje=o("ElectraConfig"),oje=o(" (ELECTRA model)"),rje=l(),gm=a("li"),WQ=a("strong"),tje=o("encoder-decoder"),aje=o(" \u2014 "),_8=a("a"),nje=o("EncoderDecoderConfig"),sje=o(" (Encoder decoder model)"),lje=l(),hm=a("li"),QQ=a("strong"),ije=o("flaubert"),dje=o(" \u2014 "),u8=a("a"),cje=o("FlaubertConfig"),fje=o(" (FlauBERT model)"),mje=l(),pm=a("li"),HQ=a("strong"),gje=o("fnet"),hje=o(" \u2014 "),b8=a("a"),pje=o("FNetConfig"),_je=o(" (FNet model)"),uje=l(),_m=a("li"),UQ=a("strong"),bje=o("fsmt"),vje=o(" \u2014 "),v8=a("a"),Tje=o("FSMTConfig"),Fje=o(" (FairSeq Machine-Translation model)"),Cje=l(),um=a("li"),JQ=a("strong"),Mje=o("funnel"),Eje=o(" \u2014 "),T8=a("a"),yje=o("FunnelConfig"),wje=o(" (Funnel Transformer model)"),Aje=l(),bm=a("li"),YQ=a("strong"),Lje=o("gpt2"),Bje=o(" \u2014 "),F8=a("a"),xje=o("GPT2Config"),kje=o(" (OpenAI GPT-2 model)"),Rje=l(),vm=a("li"),KQ=a("strong"),Sje=o("gpt_neo"),Pje=o(" \u2014 "),C8=a("a"),$je=o("GPTNeoConfig"),Ije=o(" (GPT Neo model)"),jje=l(),Tm=a("li"),ZQ=a("strong"),Dje=o("gptj"),Nje=o(" \u2014 "),M8=a("a"),qje=o("GPTJConfig"),Oje=o(" (GPT-J model)"),Gje=l(),Fm=a("li"),eH=a("strong"),Xje=o("hubert"),Vje=o(" \u2014 "),E8=a("a"),zje=o("HubertConfig"),Wje=o(" (Hubert model)"),Qje=l(),Cm=a("li"),oH=a("strong"),Hje=o("ibert"),Uje=o(" \u2014 "),y8=a("a"),Jje=o("IBertConfig"),Yje=o(" (I-BERT model)"),Kje=l(),Mm=a("li"),rH=a("strong"),Zje=o("imagegpt"),eDe=o(" \u2014 "),w8=a("a"),oDe=o("ImageGPTConfig"),rDe=o(" (ImageGPT model)"),tDe=l(),Em=a("li"),tH=a("strong"),aDe=o("layoutlm"),nDe=o(" \u2014 "),A8=a("a"),sDe=o("LayoutLMConfig"),lDe=o(" (LayoutLM model)"),iDe=l(),ym=a("li"),aH=a("strong"),dDe=o("layoutlmv2"),cDe=o(" \u2014 "),L8=a("a"),fDe=o("LayoutLMv2Config"),mDe=o(" (LayoutLMv2 model)"),gDe=l(),wm=a("li"),nH=a("strong"),hDe=o("led"),pDe=o(" \u2014 "),B8=a("a"),_De=o("LEDConfig"),uDe=o(" (LED model)"),bDe=l(),Am=a("li"),sH=a("strong"),vDe=o("longformer"),TDe=o(" \u2014 "),x8=a("a"),FDe=o("LongformerConfig"),CDe=o(" (Longformer model)"),MDe=l(),Lm=a("li"),lH=a("strong"),EDe=o("luke"),yDe=o(" \u2014 "),k8=a("a"),wDe=o("LukeConfig"),ADe=o(" (LUKE model)"),LDe=l(),Bm=a("li"),iH=a("strong"),BDe=o("lxmert"),xDe=o(" \u2014 "),R8=a("a"),kDe=o("LxmertConfig"),RDe=o(" (LXMERT model)"),SDe=l(),xm=a("li"),dH=a("strong"),PDe=o("m2m_100"),$De=o(" \u2014 "),S8=a("a"),IDe=o("M2M100Config"),jDe=o(" (M2M100 model)"),DDe=l(),km=a("li"),cH=a("strong"),NDe=o("marian"),qDe=o(" \u2014 "),P8=a("a"),ODe=o("MarianConfig"),GDe=o(" (Marian model)"),XDe=l(),Rm=a("li"),fH=a("strong"),VDe=o("maskformer"),zDe=o(" \u2014 "),$8=a("a"),WDe=o("MaskFormerConfig"),QDe=o(" (MaskFormer model)"),HDe=l(),Sm=a("li"),mH=a("strong"),UDe=o("mbart"),JDe=o(" \u2014 "),I8=a("a"),YDe=o("MBartConfig"),KDe=o(" (mBART model)"),ZDe=l(),Pm=a("li"),gH=a("strong"),eNe=o("megatron-bert"),oNe=o(" \u2014 "),j8=a("a"),rNe=o("MegatronBertConfig"),tNe=o(" (MegatronBert model)"),aNe=l(),$m=a("li"),hH=a("strong"),nNe=o("mobilebert"),sNe=o(" \u2014 "),D8=a("a"),lNe=o("MobileBertConfig"),iNe=o(" (MobileBERT model)"),dNe=l(),Im=a("li"),pH=a("strong"),cNe=o("mpnet"),fNe=o(" \u2014 "),N8=a("a"),mNe=o("MPNetConfig"),gNe=o(" (MPNet model)"),hNe=l(),jm=a("li"),_H=a("strong"),pNe=o("mt5"),_Ne=o(" \u2014 "),q8=a("a"),uNe=o("MT5Config"),bNe=o(" (mT5 model)"),vNe=l(),Dm=a("li"),uH=a("strong"),TNe=o("nystromformer"),FNe=o(" \u2014 "),O8=a("a"),CNe=o("NystromformerConfig"),MNe=o(" (Nystromformer model)"),ENe=l(),Nm=a("li"),bH=a("strong"),yNe=o("openai-gpt"),wNe=o(" \u2014 "),G8=a("a"),ANe=o("OpenAIGPTConfig"),LNe=o(" (OpenAI GPT model)"),BNe=l(),qm=a("li"),vH=a("strong"),xNe=o("pegasus"),kNe=o(" \u2014 "),X8=a("a"),RNe=o("PegasusConfig"),SNe=o(" (Pegasus model)"),PNe=l(),Om=a("li"),TH=a("strong"),$Ne=o("perceiver"),INe=o(" \u2014 "),V8=a("a"),jNe=o("PerceiverConfig"),DNe=o(" (Perceiver model)"),NNe=l(),Gm=a("li"),FH=a("strong"),qNe=o("plbart"),ONe=o(" \u2014 "),z8=a("a"),GNe=o("PLBartConfig"),XNe=o(" (PLBart model)"),VNe=l(),Xm=a("li"),CH=a("strong"),zNe=o("poolformer"),WNe=o(" \u2014 "),W8=a("a"),QNe=o("PoolFormerConfig"),HNe=o(" (PoolFormer model)"),UNe=l(),Vm=a("li"),MH=a("strong"),JNe=o("prophetnet"),YNe=o(" \u2014 "),Q8=a("a"),KNe=o("ProphetNetConfig"),ZNe=o(" (ProphetNet model)"),eqe=l(),zm=a("li"),EH=a("strong"),oqe=o("qdqbert"),rqe=o(" \u2014 "),H8=a("a"),tqe=o("QDQBertConfig"),aqe=o(" (QDQBert model)"),nqe=l(),Wm=a("li"),yH=a("strong"),sqe=o("rag"),lqe=o(" \u2014 "),U8=a("a"),iqe=o("RagConfig"),dqe=o(" (RAG model)"),cqe=l(),Qm=a("li"),wH=a("strong"),fqe=o("realm"),mqe=o(" \u2014 "),J8=a("a"),gqe=o("RealmConfig"),hqe=o(" (Realm model)"),pqe=l(),Hm=a("li"),AH=a("strong"),_qe=o("reformer"),uqe=o(" \u2014 "),Y8=a("a"),bqe=o("ReformerConfig"),vqe=o(" (Reformer model)"),Tqe=l(),Um=a("li"),LH=a("strong"),Fqe=o("rembert"),Cqe=o(" \u2014 "),K8=a("a"),Mqe=o("RemBertConfig"),Eqe=o(" (RemBERT model)"),yqe=l(),Jm=a("li"),BH=a("strong"),wqe=o("retribert"),Aqe=o(" \u2014 "),Z8=a("a"),Lqe=o("RetriBertConfig"),Bqe=o(" (RetriBERT model)"),xqe=l(),Ym=a("li"),xH=a("strong"),kqe=o("roberta"),Rqe=o(" \u2014 "),eB=a("a"),Sqe=o("RobertaConfig"),Pqe=o(" (RoBERTa model)"),$qe=l(),Km=a("li"),kH=a("strong"),Iqe=o("roformer"),jqe=o(" \u2014 "),oB=a("a"),Dqe=o("RoFormerConfig"),Nqe=o(" (RoFormer model)"),qqe=l(),Zm=a("li"),RH=a("strong"),Oqe=o("segformer"),Gqe=o(" \u2014 "),rB=a("a"),Xqe=o("SegformerConfig"),Vqe=o(" (SegFormer model)"),zqe=l(),eg=a("li"),SH=a("strong"),Wqe=o("sew"),Qqe=o(" \u2014 "),tB=a("a"),Hqe=o("SEWConfig"),Uqe=o(" (SEW model)"),Jqe=l(),og=a("li"),PH=a("strong"),Yqe=o("sew-d"),Kqe=o(" \u2014 "),aB=a("a"),Zqe=o("SEWDConfig"),eOe=o(" (SEW-D model)"),oOe=l(),rg=a("li"),$H=a("strong"),rOe=o("speech-encoder-decoder"),tOe=o(" \u2014 "),nB=a("a"),aOe=o("SpeechEncoderDecoderConfig"),nOe=o(" (Speech Encoder decoder model)"),sOe=l(),tg=a("li"),IH=a("strong"),lOe=o("speech_to_text"),iOe=o(" \u2014 "),sB=a("a"),dOe=o("Speech2TextConfig"),cOe=o(" (Speech2Text model)"),fOe=l(),ag=a("li"),jH=a("strong"),mOe=o("speech_to_text_2"),gOe=o(" \u2014 "),lB=a("a"),hOe=o("Speech2Text2Config"),pOe=o(" (Speech2Text2 model)"),_Oe=l(),ng=a("li"),DH=a("strong"),uOe=o("splinter"),bOe=o(" \u2014 "),iB=a("a"),vOe=o("SplinterConfig"),TOe=o(" (Splinter model)"),FOe=l(),sg=a("li"),NH=a("strong"),COe=o("squeezebert"),MOe=o(" \u2014 "),dB=a("a"),EOe=o("SqueezeBertConfig"),yOe=o(" (SqueezeBERT model)"),wOe=l(),lg=a("li"),qH=a("strong"),AOe=o("swin"),LOe=o(" \u2014 "),cB=a("a"),BOe=o("SwinConfig"),xOe=o(" (Swin model)"),kOe=l(),ig=a("li"),OH=a("strong"),ROe=o("t5"),SOe=o(" \u2014 "),fB=a("a"),POe=o("T5Config"),$Oe=o(" (T5 model)"),IOe=l(),dg=a("li"),GH=a("strong"),jOe=o("tapas"),DOe=o(" \u2014 "),mB=a("a"),NOe=o("TapasConfig"),qOe=o(" (TAPAS model)"),OOe=l(),cg=a("li"),XH=a("strong"),GOe=o("transfo-xl"),XOe=o(" \u2014 "),gB=a("a"),VOe=o("TransfoXLConfig"),zOe=o(" (Transformer-XL model)"),WOe=l(),fg=a("li"),VH=a("strong"),QOe=o("trocr"),HOe=o(" \u2014 "),hB=a("a"),UOe=o("TrOCRConfig"),JOe=o(" (TrOCR model)"),YOe=l(),mg=a("li"),zH=a("strong"),KOe=o("unispeech"),ZOe=o(" \u2014 "),pB=a("a"),eGe=o("UniSpeechConfig"),oGe=o(" (UniSpeech model)"),rGe=l(),gg=a("li"),WH=a("strong"),tGe=o("unispeech-sat"),aGe=o(" \u2014 "),_B=a("a"),nGe=o("UniSpeechSatConfig"),sGe=o(" (UniSpeechSat model)"),lGe=l(),hg=a("li"),QH=a("strong"),iGe=o("vilt"),dGe=o(" \u2014 "),uB=a("a"),cGe=o("ViltConfig"),fGe=o(" (ViLT model)"),mGe=l(),pg=a("li"),HH=a("strong"),gGe=o("vision-encoder-decoder"),hGe=o(" \u2014 "),bB=a("a"),pGe=o("VisionEncoderDecoderConfig"),_Ge=o(" (Vision Encoder decoder model)"),uGe=l(),_g=a("li"),UH=a("strong"),bGe=o("vision-text-dual-encoder"),vGe=o(" \u2014 "),vB=a("a"),TGe=o("VisionTextDualEncoderConfig"),FGe=o(" (VisionTextDualEncoder model)"),CGe=l(),ug=a("li"),JH=a("strong"),MGe=o("visual_bert"),EGe=o(" \u2014 "),TB=a("a"),yGe=o("VisualBertConfig"),wGe=o(" (VisualBert model)"),AGe=l(),bg=a("li"),YH=a("strong"),LGe=o("vit"),BGe=o(" \u2014 "),FB=a("a"),xGe=o("ViTConfig"),kGe=o(" (ViT model)"),RGe=l(),vg=a("li"),KH=a("strong"),SGe=o("vit_mae"),PGe=o(" \u2014 "),CB=a("a"),$Ge=o("ViTMAEConfig"),IGe=o(" (ViTMAE model)"),jGe=l(),Tg=a("li"),ZH=a("strong"),DGe=o("wav2vec2"),NGe=o(" \u2014 "),MB=a("a"),qGe=o("Wav2Vec2Config"),OGe=o(" (Wav2Vec2 model)"),GGe=l(),Fg=a("li"),eU=a("strong"),XGe=o("wavlm"),VGe=o(" \u2014 "),EB=a("a"),zGe=o("WavLMConfig"),WGe=o(" (WavLM model)"),QGe=l(),Cg=a("li"),oU=a("strong"),HGe=o("xglm"),UGe=o(" \u2014 "),yB=a("a"),JGe=o("XGLMConfig"),YGe=o(" (XGLM model)"),KGe=l(),Mg=a("li"),rU=a("strong"),ZGe=o("xlm"),eXe=o(" \u2014 "),wB=a("a"),oXe=o("XLMConfig"),rXe=o(" (XLM model)"),tXe=l(),Eg=a("li"),tU=a("strong"),aXe=o("xlm-prophetnet"),nXe=o(" \u2014 "),AB=a("a"),sXe=o("XLMProphetNetConfig"),lXe=o(" (XLMProphetNet model)"),iXe=l(),yg=a("li"),aU=a("strong"),dXe=o("xlm-roberta"),cXe=o(" \u2014 "),LB=a("a"),fXe=o("XLMRobertaConfig"),mXe=o(" (XLM-RoBERTa model)"),gXe=l(),wg=a("li"),nU=a("strong"),hXe=o("xlm-roberta-xl"),pXe=o(" \u2014 "),BB=a("a"),_Xe=o("XLMRobertaXLConfig"),uXe=o(" (XLM-RoBERTa-XL model)"),bXe=l(),Ag=a("li"),sU=a("strong"),vXe=o("xlnet"),TXe=o(" \u2014 "),xB=a("a"),FXe=o("XLNetConfig"),CXe=o(" (XLNet model)"),MXe=l(),Lg=a("li"),lU=a("strong"),EXe=o("yoso"),yXe=o(" \u2014 "),kB=a("a"),wXe=o("YosoConfig"),AXe=o(" (YOSO model)"),LXe=l(),iU=a("p"),BXe=o("Examples:"),xXe=l(),f(t4.$$.fragment),kXe=l(),Bg=a("div"),f(a4.$$.fragment),RXe=l(),dU=a("p"),SXe=o("Register a new configuration for this class."),dxe=l(),Qi=a("h2"),xg=a("a"),cU=a("span"),f(n4.$$.fragment),PXe=l(),fU=a("span"),$Xe=o("AutoTokenizer"),cxe=l(),Qo=a("div"),f(s4.$$.fragment),IXe=l(),l4=a("p"),jXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RB=a("a"),DXe=o("AutoTokenizer.from_pretrained()"),NXe=o(" class method."),qXe=l(),i4=a("p"),OXe=o("This class cannot be instantiated directly using "),mU=a("code"),GXe=o("__init__()"),XXe=o(" (throws an error)."),VXe=l(),go=a("div"),f(d4.$$.fragment),zXe=l(),gU=a("p"),WXe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QXe=l(),Ga=a("p"),HXe=o("The tokenizer class to instantiate is selected based on the "),hU=a("code"),UXe=o("model_type"),JXe=o(` property of the config object (either
passed as an argument or loaded from `),pU=a("code"),YXe=o("pretrained_model_name_or_path"),KXe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_U=a("code"),ZXe=o("pretrained_model_name_or_path"),eVe=o(":"),oVe=l(),E=a("ul"),Wn=a("li"),uU=a("strong"),rVe=o("albert"),tVe=o(" \u2014 "),SB=a("a"),aVe=o("AlbertTokenizer"),nVe=o(" or "),PB=a("a"),sVe=o("AlbertTokenizerFast"),lVe=o(" (ALBERT model)"),iVe=l(),Qn=a("li"),bU=a("strong"),dVe=o("bart"),cVe=o(" \u2014 "),$B=a("a"),fVe=o("BartTokenizer"),mVe=o(" or "),IB=a("a"),gVe=o("BartTokenizerFast"),hVe=o(" (BART model)"),pVe=l(),Hn=a("li"),vU=a("strong"),_Ve=o("barthez"),uVe=o(" \u2014 "),jB=a("a"),bVe=o("BarthezTokenizer"),vVe=o(" or "),DB=a("a"),TVe=o("BarthezTokenizerFast"),FVe=o(" (BARThez model)"),CVe=l(),kg=a("li"),TU=a("strong"),MVe=o("bartpho"),EVe=o(" \u2014 "),NB=a("a"),yVe=o("BartphoTokenizer"),wVe=o(" (BARTpho model)"),AVe=l(),Un=a("li"),FU=a("strong"),LVe=o("bert"),BVe=o(" \u2014 "),qB=a("a"),xVe=o("BertTokenizer"),kVe=o(" or "),OB=a("a"),RVe=o("BertTokenizerFast"),SVe=o(" (BERT model)"),PVe=l(),Rg=a("li"),CU=a("strong"),$Ve=o("bert-generation"),IVe=o(" \u2014 "),GB=a("a"),jVe=o("BertGenerationTokenizer"),DVe=o(" (Bert Generation model)"),NVe=l(),Sg=a("li"),MU=a("strong"),qVe=o("bert-japanese"),OVe=o(" \u2014 "),XB=a("a"),GVe=o("BertJapaneseTokenizer"),XVe=o(" (BertJapanese model)"),VVe=l(),Pg=a("li"),EU=a("strong"),zVe=o("bertweet"),WVe=o(" \u2014 "),VB=a("a"),QVe=o("BertweetTokenizer"),HVe=o(" (Bertweet model)"),UVe=l(),Jn=a("li"),yU=a("strong"),JVe=o("big_bird"),YVe=o(" \u2014 "),zB=a("a"),KVe=o("BigBirdTokenizer"),ZVe=o(" or "),WB=a("a"),eze=o("BigBirdTokenizerFast"),oze=o(" (BigBird model)"),rze=l(),Yn=a("li"),wU=a("strong"),tze=o("bigbird_pegasus"),aze=o(" \u2014 "),QB=a("a"),nze=o("PegasusTokenizer"),sze=o(" or "),HB=a("a"),lze=o("PegasusTokenizerFast"),ize=o(" (BigBirdPegasus model)"),dze=l(),Kn=a("li"),AU=a("strong"),cze=o("blenderbot"),fze=o(" \u2014 "),UB=a("a"),mze=o("BlenderbotTokenizer"),gze=o(" or "),JB=a("a"),hze=o("BlenderbotTokenizerFast"),pze=o(" (Blenderbot model)"),_ze=l(),$g=a("li"),LU=a("strong"),uze=o("blenderbot-small"),bze=o(" \u2014 "),YB=a("a"),vze=o("BlenderbotSmallTokenizer"),Tze=o(" (BlenderbotSmall model)"),Fze=l(),Ig=a("li"),BU=a("strong"),Cze=o("byt5"),Mze=o(" \u2014 "),KB=a("a"),Eze=o("ByT5Tokenizer"),yze=o(" (ByT5 model)"),wze=l(),Zn=a("li"),xU=a("strong"),Aze=o("camembert"),Lze=o(" \u2014 "),ZB=a("a"),Bze=o("CamembertTokenizer"),xze=o(" or "),ex=a("a"),kze=o("CamembertTokenizerFast"),Rze=o(" (CamemBERT model)"),Sze=l(),jg=a("li"),kU=a("strong"),Pze=o("canine"),$ze=o(" \u2014 "),ox=a("a"),Ize=o("CanineTokenizer"),jze=o(" (Canine model)"),Dze=l(),es=a("li"),RU=a("strong"),Nze=o("clip"),qze=o(" \u2014 "),rx=a("a"),Oze=o("CLIPTokenizer"),Gze=o(" or "),tx=a("a"),Xze=o("CLIPTokenizerFast"),Vze=o(" (CLIP model)"),zze=l(),os=a("li"),SU=a("strong"),Wze=o("convbert"),Qze=o(" \u2014 "),ax=a("a"),Hze=o("ConvBertTokenizer"),Uze=o(" or "),nx=a("a"),Jze=o("ConvBertTokenizerFast"),Yze=o(" (ConvBERT model)"),Kze=l(),rs=a("li"),PU=a("strong"),Zze=o("cpm"),eWe=o(" \u2014 "),sx=a("a"),oWe=o("CpmTokenizer"),rWe=o(" or "),$U=a("code"),tWe=o("CpmTokenizerFast"),aWe=o(" (CPM model)"),nWe=l(),Dg=a("li"),IU=a("strong"),sWe=o("ctrl"),lWe=o(" \u2014 "),lx=a("a"),iWe=o("CTRLTokenizer"),dWe=o(" (CTRL model)"),cWe=l(),ts=a("li"),jU=a("strong"),fWe=o("deberta"),mWe=o(" \u2014 "),ix=a("a"),gWe=o("DebertaTokenizer"),hWe=o(" or "),dx=a("a"),pWe=o("DebertaTokenizerFast"),_We=o(" (DeBERTa model)"),uWe=l(),Ng=a("li"),DU=a("strong"),bWe=o("deberta-v2"),vWe=o(" \u2014 "),cx=a("a"),TWe=o("DebertaV2Tokenizer"),FWe=o(" (DeBERTa-v2 model)"),CWe=l(),as=a("li"),NU=a("strong"),MWe=o("distilbert"),EWe=o(" \u2014 "),fx=a("a"),yWe=o("DistilBertTokenizer"),wWe=o(" or "),mx=a("a"),AWe=o("DistilBertTokenizerFast"),LWe=o(" (DistilBERT model)"),BWe=l(),ns=a("li"),qU=a("strong"),xWe=o("dpr"),kWe=o(" \u2014 "),gx=a("a"),RWe=o("DPRQuestionEncoderTokenizer"),SWe=o(" or "),hx=a("a"),PWe=o("DPRQuestionEncoderTokenizerFast"),$We=o(" (DPR model)"),IWe=l(),ss=a("li"),OU=a("strong"),jWe=o("electra"),DWe=o(" \u2014 "),px=a("a"),NWe=o("ElectraTokenizer"),qWe=o(" or "),_x=a("a"),OWe=o("ElectraTokenizerFast"),GWe=o(" (ELECTRA model)"),XWe=l(),qg=a("li"),GU=a("strong"),VWe=o("flaubert"),zWe=o(" \u2014 "),ux=a("a"),WWe=o("FlaubertTokenizer"),QWe=o(" (FlauBERT model)"),HWe=l(),ls=a("li"),XU=a("strong"),UWe=o("fnet"),JWe=o(" \u2014 "),bx=a("a"),YWe=o("FNetTokenizer"),KWe=o(" or "),vx=a("a"),ZWe=o("FNetTokenizerFast"),eQe=o(" (FNet model)"),oQe=l(),Og=a("li"),VU=a("strong"),rQe=o("fsmt"),tQe=o(" \u2014 "),Tx=a("a"),aQe=o("FSMTTokenizer"),nQe=o(" (FairSeq Machine-Translation model)"),sQe=l(),is=a("li"),zU=a("strong"),lQe=o("funnel"),iQe=o(" \u2014 "),Fx=a("a"),dQe=o("FunnelTokenizer"),cQe=o(" or "),Cx=a("a"),fQe=o("FunnelTokenizerFast"),mQe=o(" (Funnel Transformer model)"),gQe=l(),ds=a("li"),WU=a("strong"),hQe=o("gpt2"),pQe=o(" \u2014 "),Mx=a("a"),_Qe=o("GPT2Tokenizer"),uQe=o(" or "),Ex=a("a"),bQe=o("GPT2TokenizerFast"),vQe=o(" (OpenAI GPT-2 model)"),TQe=l(),cs=a("li"),QU=a("strong"),FQe=o("gpt_neo"),CQe=o(" \u2014 "),yx=a("a"),MQe=o("GPT2Tokenizer"),EQe=o(" or "),wx=a("a"),yQe=o("GPT2TokenizerFast"),wQe=o(" (GPT Neo model)"),AQe=l(),fs=a("li"),HU=a("strong"),LQe=o("herbert"),BQe=o(" \u2014 "),Ax=a("a"),xQe=o("HerbertTokenizer"),kQe=o(" or "),Lx=a("a"),RQe=o("HerbertTokenizerFast"),SQe=o(" (HerBERT model)"),PQe=l(),Gg=a("li"),UU=a("strong"),$Qe=o("hubert"),IQe=o(" \u2014 "),Bx=a("a"),jQe=o("Wav2Vec2CTCTokenizer"),DQe=o(" (Hubert model)"),NQe=l(),ms=a("li"),JU=a("strong"),qQe=o("ibert"),OQe=o(" \u2014 "),xx=a("a"),GQe=o("RobertaTokenizer"),XQe=o(" or "),kx=a("a"),VQe=o("RobertaTokenizerFast"),zQe=o(" (I-BERT model)"),WQe=l(),gs=a("li"),YU=a("strong"),QQe=o("layoutlm"),HQe=o(" \u2014 "),Rx=a("a"),UQe=o("LayoutLMTokenizer"),JQe=o(" or "),Sx=a("a"),YQe=o("LayoutLMTokenizerFast"),KQe=o(" (LayoutLM model)"),ZQe=l(),hs=a("li"),KU=a("strong"),eHe=o("layoutlmv2"),oHe=o(" \u2014 "),Px=a("a"),rHe=o("LayoutLMv2Tokenizer"),tHe=o(" or "),$x=a("a"),aHe=o("LayoutLMv2TokenizerFast"),nHe=o(" (LayoutLMv2 model)"),sHe=l(),ps=a("li"),ZU=a("strong"),lHe=o("layoutxlm"),iHe=o(" \u2014 "),Ix=a("a"),dHe=o("LayoutXLMTokenizer"),cHe=o(" or "),jx=a("a"),fHe=o("LayoutXLMTokenizerFast"),mHe=o(" (LayoutXLM model)"),gHe=l(),_s=a("li"),eJ=a("strong"),hHe=o("led"),pHe=o(" \u2014 "),Dx=a("a"),_He=o("LEDTokenizer"),uHe=o(" or "),Nx=a("a"),bHe=o("LEDTokenizerFast"),vHe=o(" (LED model)"),THe=l(),us=a("li"),oJ=a("strong"),FHe=o("longformer"),CHe=o(" \u2014 "),qx=a("a"),MHe=o("LongformerTokenizer"),EHe=o(" or "),Ox=a("a"),yHe=o("LongformerTokenizerFast"),wHe=o(" (Longformer model)"),AHe=l(),Xg=a("li"),rJ=a("strong"),LHe=o("luke"),BHe=o(" \u2014 "),Gx=a("a"),xHe=o("LukeTokenizer"),kHe=o(" (LUKE model)"),RHe=l(),bs=a("li"),tJ=a("strong"),SHe=o("lxmert"),PHe=o(" \u2014 "),Xx=a("a"),$He=o("LxmertTokenizer"),IHe=o(" or "),Vx=a("a"),jHe=o("LxmertTokenizerFast"),DHe=o(" (LXMERT model)"),NHe=l(),Vg=a("li"),aJ=a("strong"),qHe=o("m2m_100"),OHe=o(" \u2014 "),zx=a("a"),GHe=o("M2M100Tokenizer"),XHe=o(" (M2M100 model)"),VHe=l(),zg=a("li"),nJ=a("strong"),zHe=o("marian"),WHe=o(" \u2014 "),Wx=a("a"),QHe=o("MarianTokenizer"),HHe=o(" (Marian model)"),UHe=l(),vs=a("li"),sJ=a("strong"),JHe=o("mbart"),YHe=o(" \u2014 "),Qx=a("a"),KHe=o("MBartTokenizer"),ZHe=o(" or "),Hx=a("a"),eUe=o("MBartTokenizerFast"),oUe=o(" (mBART model)"),rUe=l(),Ts=a("li"),lJ=a("strong"),tUe=o("mbart50"),aUe=o(" \u2014 "),Ux=a("a"),nUe=o("MBart50Tokenizer"),sUe=o(" or "),Jx=a("a"),lUe=o("MBart50TokenizerFast"),iUe=o(" (mBART-50 model)"),dUe=l(),Wg=a("li"),iJ=a("strong"),cUe=o("mluke"),fUe=o(" \u2014 "),Yx=a("a"),mUe=o("MLukeTokenizer"),gUe=o(" (mLUKE model)"),hUe=l(),Fs=a("li"),dJ=a("strong"),pUe=o("mobilebert"),_Ue=o(" \u2014 "),Kx=a("a"),uUe=o("MobileBertTokenizer"),bUe=o(" or "),Zx=a("a"),vUe=o("MobileBertTokenizerFast"),TUe=o(" (MobileBERT model)"),FUe=l(),Cs=a("li"),cJ=a("strong"),CUe=o("mpnet"),MUe=o(" \u2014 "),ek=a("a"),EUe=o("MPNetTokenizer"),yUe=o(" or "),ok=a("a"),wUe=o("MPNetTokenizerFast"),AUe=o(" (MPNet model)"),LUe=l(),Ms=a("li"),fJ=a("strong"),BUe=o("mt5"),xUe=o(" \u2014 "),rk=a("a"),kUe=o("MT5Tokenizer"),RUe=o(" or "),tk=a("a"),SUe=o("MT5TokenizerFast"),PUe=o(" (mT5 model)"),$Ue=l(),Es=a("li"),mJ=a("strong"),IUe=o("openai-gpt"),jUe=o(" \u2014 "),ak=a("a"),DUe=o("OpenAIGPTTokenizer"),NUe=o(" or "),nk=a("a"),qUe=o("OpenAIGPTTokenizerFast"),OUe=o(" (OpenAI GPT model)"),GUe=l(),ys=a("li"),gJ=a("strong"),XUe=o("pegasus"),VUe=o(" \u2014 "),sk=a("a"),zUe=o("PegasusTokenizer"),WUe=o(" or "),lk=a("a"),QUe=o("PegasusTokenizerFast"),HUe=o(" (Pegasus model)"),UUe=l(),Qg=a("li"),hJ=a("strong"),JUe=o("perceiver"),YUe=o(" \u2014 "),ik=a("a"),KUe=o("PerceiverTokenizer"),ZUe=o(" (Perceiver model)"),eJe=l(),Hg=a("li"),pJ=a("strong"),oJe=o("phobert"),rJe=o(" \u2014 "),dk=a("a"),tJe=o("PhobertTokenizer"),aJe=o(" (PhoBERT model)"),nJe=l(),Ug=a("li"),_J=a("strong"),sJe=o("plbart"),lJe=o(" \u2014 "),ck=a("a"),iJe=o("PLBartTokenizer"),dJe=o(" (PLBart model)"),cJe=l(),Jg=a("li"),uJ=a("strong"),fJe=o("prophetnet"),mJe=o(" \u2014 "),fk=a("a"),gJe=o("ProphetNetTokenizer"),hJe=o(" (ProphetNet model)"),pJe=l(),ws=a("li"),bJ=a("strong"),_Je=o("qdqbert"),uJe=o(" \u2014 "),mk=a("a"),bJe=o("BertTokenizer"),vJe=o(" or "),gk=a("a"),TJe=o("BertTokenizerFast"),FJe=o(" (QDQBert model)"),CJe=l(),Yg=a("li"),vJ=a("strong"),MJe=o("rag"),EJe=o(" \u2014 "),hk=a("a"),yJe=o("RagTokenizer"),wJe=o(" (RAG model)"),AJe=l(),As=a("li"),TJ=a("strong"),LJe=o("realm"),BJe=o(" \u2014 "),pk=a("a"),xJe=o("RealmTokenizer"),kJe=o(" or "),_k=a("a"),RJe=o("RealmTokenizerFast"),SJe=o(" (Realm model)"),PJe=l(),Ls=a("li"),FJ=a("strong"),$Je=o("reformer"),IJe=o(" \u2014 "),uk=a("a"),jJe=o("ReformerTokenizer"),DJe=o(" or "),bk=a("a"),NJe=o("ReformerTokenizerFast"),qJe=o(" (Reformer model)"),OJe=l(),Bs=a("li"),CJ=a("strong"),GJe=o("rembert"),XJe=o(" \u2014 "),vk=a("a"),VJe=o("RemBertTokenizer"),zJe=o(" or "),Tk=a("a"),WJe=o("RemBertTokenizerFast"),QJe=o(" (RemBERT model)"),HJe=l(),xs=a("li"),MJ=a("strong"),UJe=o("retribert"),JJe=o(" \u2014 "),Fk=a("a"),YJe=o("RetriBertTokenizer"),KJe=o(" or "),Ck=a("a"),ZJe=o("RetriBertTokenizerFast"),eYe=o(" (RetriBERT model)"),oYe=l(),ks=a("li"),EJ=a("strong"),rYe=o("roberta"),tYe=o(" \u2014 "),Mk=a("a"),aYe=o("RobertaTokenizer"),nYe=o(" or "),Ek=a("a"),sYe=o("RobertaTokenizerFast"),lYe=o(" (RoBERTa model)"),iYe=l(),Rs=a("li"),yJ=a("strong"),dYe=o("roformer"),cYe=o(" \u2014 "),yk=a("a"),fYe=o("RoFormerTokenizer"),mYe=o(" or "),wk=a("a"),gYe=o("RoFormerTokenizerFast"),hYe=o(" (RoFormer model)"),pYe=l(),Kg=a("li"),wJ=a("strong"),_Ye=o("speech_to_text"),uYe=o(" \u2014 "),Ak=a("a"),bYe=o("Speech2TextTokenizer"),vYe=o(" (Speech2Text model)"),TYe=l(),Zg=a("li"),AJ=a("strong"),FYe=o("speech_to_text_2"),CYe=o(" \u2014 "),Lk=a("a"),MYe=o("Speech2Text2Tokenizer"),EYe=o(" (Speech2Text2 model)"),yYe=l(),Ss=a("li"),LJ=a("strong"),wYe=o("splinter"),AYe=o(" \u2014 "),Bk=a("a"),LYe=o("SplinterTokenizer"),BYe=o(" or "),xk=a("a"),xYe=o("SplinterTokenizerFast"),kYe=o(" (Splinter model)"),RYe=l(),Ps=a("li"),BJ=a("strong"),SYe=o("squeezebert"),PYe=o(" \u2014 "),kk=a("a"),$Ye=o("SqueezeBertTokenizer"),IYe=o(" or "),Rk=a("a"),jYe=o("SqueezeBertTokenizerFast"),DYe=o(" (SqueezeBERT model)"),NYe=l(),$s=a("li"),xJ=a("strong"),qYe=o("t5"),OYe=o(" \u2014 "),Sk=a("a"),GYe=o("T5Tokenizer"),XYe=o(" or "),Pk=a("a"),VYe=o("T5TokenizerFast"),zYe=o(" (T5 model)"),WYe=l(),eh=a("li"),kJ=a("strong"),QYe=o("tapas"),HYe=o(" \u2014 "),$k=a("a"),UYe=o("TapasTokenizer"),JYe=o(" (TAPAS model)"),YYe=l(),oh=a("li"),RJ=a("strong"),KYe=o("transfo-xl"),ZYe=o(" \u2014 "),Ik=a("a"),eKe=o("TransfoXLTokenizer"),oKe=o(" (Transformer-XL model)"),rKe=l(),rh=a("li"),SJ=a("strong"),tKe=o("wav2vec2"),aKe=o(" \u2014 "),jk=a("a"),nKe=o("Wav2Vec2CTCTokenizer"),sKe=o(" (Wav2Vec2 model)"),lKe=l(),th=a("li"),PJ=a("strong"),iKe=o("wav2vec2_phoneme"),dKe=o(" \u2014 "),Dk=a("a"),cKe=o("Wav2Vec2PhonemeCTCTokenizer"),fKe=o(" (Wav2Vec2Phoneme model)"),mKe=l(),Is=a("li"),$J=a("strong"),gKe=o("xglm"),hKe=o(" \u2014 "),Nk=a("a"),pKe=o("XGLMTokenizer"),_Ke=o(" or "),qk=a("a"),uKe=o("XGLMTokenizerFast"),bKe=o(" (XGLM model)"),vKe=l(),ah=a("li"),IJ=a("strong"),TKe=o("xlm"),FKe=o(" \u2014 "),Ok=a("a"),CKe=o("XLMTokenizer"),MKe=o(" (XLM model)"),EKe=l(),nh=a("li"),jJ=a("strong"),yKe=o("xlm-prophetnet"),wKe=o(" \u2014 "),Gk=a("a"),AKe=o("XLMProphetNetTokenizer"),LKe=o(" (XLMProphetNet model)"),BKe=l(),js=a("li"),DJ=a("strong"),xKe=o("xlm-roberta"),kKe=o(" \u2014 "),Xk=a("a"),RKe=o("XLMRobertaTokenizer"),SKe=o(" or "),Vk=a("a"),PKe=o("XLMRobertaTokenizerFast"),$Ke=o(" (XLM-RoBERTa model)"),IKe=l(),Ds=a("li"),NJ=a("strong"),jKe=o("xlnet"),DKe=o(" \u2014 "),zk=a("a"),NKe=o("XLNetTokenizer"),qKe=o(" or "),Wk=a("a"),OKe=o("XLNetTokenizerFast"),GKe=o(" (XLNet model)"),XKe=l(),qJ=a("p"),VKe=o("Examples:"),zKe=l(),f(c4.$$.fragment),WKe=l(),sh=a("div"),f(f4.$$.fragment),QKe=l(),OJ=a("p"),HKe=o("Register a new tokenizer in this mapping."),fxe=l(),Hi=a("h2"),lh=a("a"),GJ=a("span"),f(m4.$$.fragment),UKe=l(),XJ=a("span"),JKe=o("AutoFeatureExtractor"),mxe=l(),Ho=a("div"),f(g4.$$.fragment),YKe=l(),h4=a("p"),KKe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Qk=a("a"),ZKe=o("AutoFeatureExtractor.from_pretrained()"),eZe=o(" class method."),oZe=l(),p4=a("p"),rZe=o("This class cannot be instantiated directly using "),VJ=a("code"),tZe=o("__init__()"),aZe=o(" (throws an error)."),nZe=l(),$e=a("div"),f(_4.$$.fragment),sZe=l(),zJ=a("p"),lZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),iZe=l(),Xa=a("p"),dZe=o("The feature extractor class to instantiate is selected based on the "),WJ=a("code"),cZe=o("model_type"),fZe=o(` property of the config object
(either passed as an argument or loaded from `),QJ=a("code"),mZe=o("pretrained_model_name_or_path"),gZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),HJ=a("code"),hZe=o("pretrained_model_name_or_path"),pZe=o(":"),_Ze=l(),ae=a("ul"),ih=a("li"),UJ=a("strong"),uZe=o("beit"),bZe=o(" \u2014 "),Hk=a("a"),vZe=o("BeitFeatureExtractor"),TZe=o(" (BEiT model)"),FZe=l(),dh=a("li"),JJ=a("strong"),CZe=o("clip"),MZe=o(" \u2014 "),Uk=a("a"),EZe=o("CLIPFeatureExtractor"),yZe=o(" (CLIP model)"),wZe=l(),ch=a("li"),YJ=a("strong"),AZe=o("convnext"),LZe=o(" \u2014 "),Jk=a("a"),BZe=o("ConvNextFeatureExtractor"),xZe=o(" (ConvNext model)"),kZe=l(),fh=a("li"),KJ=a("strong"),RZe=o("deit"),SZe=o(" \u2014 "),Yk=a("a"),PZe=o("DeiTFeatureExtractor"),$Ze=o(" (DeiT model)"),IZe=l(),mh=a("li"),ZJ=a("strong"),jZe=o("detr"),DZe=o(" \u2014 "),Kk=a("a"),NZe=o("DetrFeatureExtractor"),qZe=o(" (DETR model)"),OZe=l(),gh=a("li"),eY=a("strong"),GZe=o("hubert"),XZe=o(" \u2014 "),Zk=a("a"),VZe=o("Wav2Vec2FeatureExtractor"),zZe=o(" (Hubert model)"),WZe=l(),hh=a("li"),oY=a("strong"),QZe=o("layoutlmv2"),HZe=o(" \u2014 "),eR=a("a"),UZe=o("LayoutLMv2FeatureExtractor"),JZe=o(" (LayoutLMv2 model)"),YZe=l(),ph=a("li"),rY=a("strong"),KZe=o("maskformer"),ZZe=o(" \u2014 "),oR=a("a"),eeo=o("MaskFormerFeatureExtractor"),oeo=o(" (MaskFormer model)"),reo=l(),_h=a("li"),tY=a("strong"),teo=o("perceiver"),aeo=o(" \u2014 "),rR=a("a"),neo=o("PerceiverFeatureExtractor"),seo=o(" (Perceiver model)"),leo=l(),uh=a("li"),aY=a("strong"),ieo=o("poolformer"),deo=o(" \u2014 "),tR=a("a"),ceo=o("PoolFormerFeatureExtractor"),feo=o(" (PoolFormer model)"),meo=l(),bh=a("li"),nY=a("strong"),geo=o("segformer"),heo=o(" \u2014 "),aR=a("a"),peo=o("SegformerFeatureExtractor"),_eo=o(" (SegFormer model)"),ueo=l(),vh=a("li"),sY=a("strong"),beo=o("speech_to_text"),veo=o(" \u2014 "),nR=a("a"),Teo=o("Speech2TextFeatureExtractor"),Feo=o(" (Speech2Text model)"),Ceo=l(),Th=a("li"),lY=a("strong"),Meo=o("swin"),Eeo=o(" \u2014 "),sR=a("a"),yeo=o("ViTFeatureExtractor"),weo=o(" (Swin model)"),Aeo=l(),Fh=a("li"),iY=a("strong"),Leo=o("vit"),Beo=o(" \u2014 "),lR=a("a"),xeo=o("ViTFeatureExtractor"),keo=o(" (ViT model)"),Reo=l(),Ch=a("li"),dY=a("strong"),Seo=o("vit_mae"),Peo=o(" \u2014 "),iR=a("a"),$eo=o("ViTFeatureExtractor"),Ieo=o(" (ViTMAE model)"),jeo=l(),Mh=a("li"),cY=a("strong"),Deo=o("wav2vec2"),Neo=o(" \u2014 "),dR=a("a"),qeo=o("Wav2Vec2FeatureExtractor"),Oeo=o(" (Wav2Vec2 model)"),Geo=l(),f(Eh.$$.fragment),Xeo=l(),fY=a("p"),Veo=o("Examples:"),zeo=l(),f(u4.$$.fragment),Weo=l(),yh=a("div"),f(b4.$$.fragment),Qeo=l(),mY=a("p"),Heo=o("Register a new feature extractor for this class."),gxe=l(),Ui=a("h2"),wh=a("a"),gY=a("span"),f(v4.$$.fragment),Ueo=l(),hY=a("span"),Jeo=o("AutoProcessor"),hxe=l(),Uo=a("div"),f(T4.$$.fragment),Yeo=l(),F4=a("p"),Keo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cR=a("a"),Zeo=o("AutoProcessor.from_pretrained()"),eoo=o(" class method."),ooo=l(),C4=a("p"),roo=o("This class cannot be instantiated directly using "),pY=a("code"),too=o("__init__()"),aoo=o(" (throws an error)."),noo=l(),Ie=a("div"),f(M4.$$.fragment),soo=l(),_Y=a("p"),loo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ioo=l(),Ji=a("p"),doo=o("The processor class to instantiate is selected based on the "),uY=a("code"),coo=o("model_type"),foo=o(` property of the config object (either
passed as an argument or loaded from `),bY=a("code"),moo=o("pretrained_model_name_or_path"),goo=o(" if possible):"),hoo=l(),Be=a("ul"),Ah=a("li"),vY=a("strong"),poo=o("clip"),_oo=o(" \u2014 "),fR=a("a"),uoo=o("CLIPProcessor"),boo=o(" (CLIP model)"),voo=l(),Lh=a("li"),TY=a("strong"),Too=o("layoutlmv2"),Foo=o(" \u2014 "),mR=a("a"),Coo=o("LayoutLMv2Processor"),Moo=o(" (LayoutLMv2 model)"),Eoo=l(),Bh=a("li"),FY=a("strong"),yoo=o("layoutxlm"),woo=o(" \u2014 "),gR=a("a"),Aoo=o("LayoutXLMProcessor"),Loo=o(" (LayoutXLM model)"),Boo=l(),xh=a("li"),CY=a("strong"),xoo=o("speech_to_text"),koo=o(" \u2014 "),hR=a("a"),Roo=o("Speech2TextProcessor"),Soo=o(" (Speech2Text model)"),Poo=l(),kh=a("li"),MY=a("strong"),$oo=o("speech_to_text_2"),Ioo=o(" \u2014 "),pR=a("a"),joo=o("Speech2Text2Processor"),Doo=o(" (Speech2Text2 model)"),Noo=l(),Rh=a("li"),EY=a("strong"),qoo=o("trocr"),Ooo=o(" \u2014 "),_R=a("a"),Goo=o("TrOCRProcessor"),Xoo=o(" (TrOCR model)"),Voo=l(),Sh=a("li"),yY=a("strong"),zoo=o("vision-text-dual-encoder"),Woo=o(" \u2014 "),uR=a("a"),Qoo=o("VisionTextDualEncoderProcessor"),Hoo=o(" (VisionTextDualEncoder model)"),Uoo=l(),Ph=a("li"),wY=a("strong"),Joo=o("wav2vec2"),Yoo=o(" \u2014 "),bR=a("a"),Koo=o("Wav2Vec2Processor"),Zoo=o(" (Wav2Vec2 model)"),ero=l(),f($h.$$.fragment),oro=l(),AY=a("p"),rro=o("Examples:"),tro=l(),f(E4.$$.fragment),aro=l(),Ih=a("div"),f(y4.$$.fragment),nro=l(),LY=a("p"),sro=o("Register a new processor for this class."),pxe=l(),Yi=a("h2"),jh=a("a"),BY=a("span"),f(w4.$$.fragment),lro=l(),xY=a("span"),iro=o("AutoModel"),_xe=l(),Jo=a("div"),f(A4.$$.fragment),dro=l(),Ki=a("p"),cro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kY=a("code"),fro=o("from_pretrained()"),mro=o("class method or the "),RY=a("code"),gro=o("from_config()"),hro=o(`class
method.`),pro=l(),L4=a("p"),_ro=o("This class cannot be instantiated directly using "),SY=a("code"),uro=o("__init__()"),bro=o(" (throws an error)."),vro=l(),Vr=a("div"),f(B4.$$.fragment),Tro=l(),PY=a("p"),Fro=o("Instantiates one of the base model classes of the library from a configuration."),Cro=l(),Zi=a("p"),Mro=o(`Note:
Loading a model from its configuration file does `),$Y=a("strong"),Ero=o("not"),yro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("code"),wro=o("from_pretrained()"),Aro=o("to load the model weights."),Lro=l(),jY=a("p"),Bro=o("Examples:"),xro=l(),f(x4.$$.fragment),kro=l(),je=a("div"),f(k4.$$.fragment),Rro=l(),DY=a("p"),Sro=o("Instantiate one of the base model classes of the library from a pretrained model."),Pro=l(),Va=a("p"),$ro=o("The model class to instantiate is selected based on the "),NY=a("code"),Iro=o("model_type"),jro=o(` property of the config object (either
passed as an argument or loaded from `),qY=a("code"),Dro=o("pretrained_model_name_or_path"),Nro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OY=a("code"),qro=o("pretrained_model_name_or_path"),Oro=o(":"),Gro=l(),F=a("ul"),Dh=a("li"),GY=a("strong"),Xro=o("albert"),Vro=o(" \u2014 "),vR=a("a"),zro=o("AlbertModel"),Wro=o(" (ALBERT model)"),Qro=l(),Nh=a("li"),XY=a("strong"),Hro=o("bart"),Uro=o(" \u2014 "),TR=a("a"),Jro=o("BartModel"),Yro=o(" (BART model)"),Kro=l(),qh=a("li"),VY=a("strong"),Zro=o("beit"),eto=o(" \u2014 "),FR=a("a"),oto=o("BeitModel"),rto=o(" (BEiT model)"),tto=l(),Oh=a("li"),zY=a("strong"),ato=o("bert"),nto=o(" \u2014 "),CR=a("a"),sto=o("BertModel"),lto=o(" (BERT model)"),ito=l(),Gh=a("li"),WY=a("strong"),dto=o("bert-generation"),cto=o(" \u2014 "),MR=a("a"),fto=o("BertGenerationEncoder"),mto=o(" (Bert Generation model)"),gto=l(),Xh=a("li"),QY=a("strong"),hto=o("big_bird"),pto=o(" \u2014 "),ER=a("a"),_to=o("BigBirdModel"),uto=o(" (BigBird model)"),bto=l(),Vh=a("li"),HY=a("strong"),vto=o("bigbird_pegasus"),Tto=o(" \u2014 "),yR=a("a"),Fto=o("BigBirdPegasusModel"),Cto=o(" (BigBirdPegasus model)"),Mto=l(),zh=a("li"),UY=a("strong"),Eto=o("blenderbot"),yto=o(" \u2014 "),wR=a("a"),wto=o("BlenderbotModel"),Ato=o(" (Blenderbot model)"),Lto=l(),Wh=a("li"),JY=a("strong"),Bto=o("blenderbot-small"),xto=o(" \u2014 "),AR=a("a"),kto=o("BlenderbotSmallModel"),Rto=o(" (BlenderbotSmall model)"),Sto=l(),Qh=a("li"),YY=a("strong"),Pto=o("camembert"),$to=o(" \u2014 "),LR=a("a"),Ito=o("CamembertModel"),jto=o(" (CamemBERT model)"),Dto=l(),Hh=a("li"),KY=a("strong"),Nto=o("canine"),qto=o(" \u2014 "),BR=a("a"),Oto=o("CanineModel"),Gto=o(" (Canine model)"),Xto=l(),Uh=a("li"),ZY=a("strong"),Vto=o("clip"),zto=o(" \u2014 "),xR=a("a"),Wto=o("CLIPModel"),Qto=o(" (CLIP model)"),Hto=l(),Jh=a("li"),eK=a("strong"),Uto=o("convbert"),Jto=o(" \u2014 "),kR=a("a"),Yto=o("ConvBertModel"),Kto=o(" (ConvBERT model)"),Zto=l(),Yh=a("li"),oK=a("strong"),eao=o("convnext"),oao=o(" \u2014 "),RR=a("a"),rao=o("ConvNextModel"),tao=o(" (ConvNext model)"),aao=l(),Kh=a("li"),rK=a("strong"),nao=o("ctrl"),sao=o(" \u2014 "),SR=a("a"),lao=o("CTRLModel"),iao=o(" (CTRL model)"),dao=l(),Zh=a("li"),tK=a("strong"),cao=o("data2vec-audio"),fao=o(" \u2014 "),PR=a("a"),mao=o("Data2VecAudioModel"),gao=o(" (Data2VecAudio model)"),hao=l(),ep=a("li"),aK=a("strong"),pao=o("data2vec-text"),_ao=o(" \u2014 "),$R=a("a"),uao=o("Data2VecTextModel"),bao=o(" (Data2VecText model)"),vao=l(),op=a("li"),nK=a("strong"),Tao=o("deberta"),Fao=o(" \u2014 "),IR=a("a"),Cao=o("DebertaModel"),Mao=o(" (DeBERTa model)"),Eao=l(),rp=a("li"),sK=a("strong"),yao=o("deberta-v2"),wao=o(" \u2014 "),jR=a("a"),Aao=o("DebertaV2Model"),Lao=o(" (DeBERTa-v2 model)"),Bao=l(),tp=a("li"),lK=a("strong"),xao=o("deit"),kao=o(" \u2014 "),DR=a("a"),Rao=o("DeiTModel"),Sao=o(" (DeiT model)"),Pao=l(),ap=a("li"),iK=a("strong"),$ao=o("detr"),Iao=o(" \u2014 "),NR=a("a"),jao=o("DetrModel"),Dao=o(" (DETR model)"),Nao=l(),np=a("li"),dK=a("strong"),qao=o("distilbert"),Oao=o(" \u2014 "),qR=a("a"),Gao=o("DistilBertModel"),Xao=o(" (DistilBERT model)"),Vao=l(),sp=a("li"),cK=a("strong"),zao=o("dpr"),Wao=o(" \u2014 "),OR=a("a"),Qao=o("DPRQuestionEncoder"),Hao=o(" (DPR model)"),Uao=l(),lp=a("li"),fK=a("strong"),Jao=o("electra"),Yao=o(" \u2014 "),GR=a("a"),Kao=o("ElectraModel"),Zao=o(" (ELECTRA model)"),eno=l(),ip=a("li"),mK=a("strong"),ono=o("flaubert"),rno=o(" \u2014 "),XR=a("a"),tno=o("FlaubertModel"),ano=o(" (FlauBERT model)"),nno=l(),dp=a("li"),gK=a("strong"),sno=o("fnet"),lno=o(" \u2014 "),VR=a("a"),ino=o("FNetModel"),dno=o(" (FNet model)"),cno=l(),cp=a("li"),hK=a("strong"),fno=o("fsmt"),mno=o(" \u2014 "),zR=a("a"),gno=o("FSMTModel"),hno=o(" (FairSeq Machine-Translation model)"),pno=l(),Ns=a("li"),pK=a("strong"),_no=o("funnel"),uno=o(" \u2014 "),WR=a("a"),bno=o("FunnelModel"),vno=o(" or "),QR=a("a"),Tno=o("FunnelBaseModel"),Fno=o(" (Funnel Transformer model)"),Cno=l(),fp=a("li"),_K=a("strong"),Mno=o("gpt2"),Eno=o(" \u2014 "),HR=a("a"),yno=o("GPT2Model"),wno=o(" (OpenAI GPT-2 model)"),Ano=l(),mp=a("li"),uK=a("strong"),Lno=o("gpt_neo"),Bno=o(" \u2014 "),UR=a("a"),xno=o("GPTNeoModel"),kno=o(" (GPT Neo model)"),Rno=l(),gp=a("li"),bK=a("strong"),Sno=o("gptj"),Pno=o(" \u2014 "),JR=a("a"),$no=o("GPTJModel"),Ino=o(" (GPT-J model)"),jno=l(),hp=a("li"),vK=a("strong"),Dno=o("hubert"),Nno=o(" \u2014 "),YR=a("a"),qno=o("HubertModel"),Ono=o(" (Hubert model)"),Gno=l(),pp=a("li"),TK=a("strong"),Xno=o("ibert"),Vno=o(" \u2014 "),KR=a("a"),zno=o("IBertModel"),Wno=o(" (I-BERT model)"),Qno=l(),_p=a("li"),FK=a("strong"),Hno=o("imagegpt"),Uno=o(" \u2014 "),ZR=a("a"),Jno=o("ImageGPTModel"),Yno=o(" (ImageGPT model)"),Kno=l(),up=a("li"),CK=a("strong"),Zno=o("layoutlm"),eso=o(" \u2014 "),eS=a("a"),oso=o("LayoutLMModel"),rso=o(" (LayoutLM model)"),tso=l(),bp=a("li"),MK=a("strong"),aso=o("layoutlmv2"),nso=o(" \u2014 "),oS=a("a"),sso=o("LayoutLMv2Model"),lso=o(" (LayoutLMv2 model)"),iso=l(),vp=a("li"),EK=a("strong"),dso=o("led"),cso=o(" \u2014 "),rS=a("a"),fso=o("LEDModel"),mso=o(" (LED model)"),gso=l(),Tp=a("li"),yK=a("strong"),hso=o("longformer"),pso=o(" \u2014 "),tS=a("a"),_so=o("LongformerModel"),uso=o(" (Longformer model)"),bso=l(),Fp=a("li"),wK=a("strong"),vso=o("luke"),Tso=o(" \u2014 "),aS=a("a"),Fso=o("LukeModel"),Cso=o(" (LUKE model)"),Mso=l(),Cp=a("li"),AK=a("strong"),Eso=o("lxmert"),yso=o(" \u2014 "),nS=a("a"),wso=o("LxmertModel"),Aso=o(" (LXMERT model)"),Lso=l(),Mp=a("li"),LK=a("strong"),Bso=o("m2m_100"),xso=o(" \u2014 "),sS=a("a"),kso=o("M2M100Model"),Rso=o(" (M2M100 model)"),Sso=l(),Ep=a("li"),BK=a("strong"),Pso=o("marian"),$so=o(" \u2014 "),lS=a("a"),Iso=o("MarianModel"),jso=o(" (Marian model)"),Dso=l(),yp=a("li"),xK=a("strong"),Nso=o("maskformer"),qso=o(" \u2014 "),iS=a("a"),Oso=o("MaskFormerModel"),Gso=o(" (MaskFormer model)"),Xso=l(),wp=a("li"),kK=a("strong"),Vso=o("mbart"),zso=o(" \u2014 "),dS=a("a"),Wso=o("MBartModel"),Qso=o(" (mBART model)"),Hso=l(),Ap=a("li"),RK=a("strong"),Uso=o("megatron-bert"),Jso=o(" \u2014 "),cS=a("a"),Yso=o("MegatronBertModel"),Kso=o(" (MegatronBert model)"),Zso=l(),Lp=a("li"),SK=a("strong"),elo=o("mobilebert"),olo=o(" \u2014 "),fS=a("a"),rlo=o("MobileBertModel"),tlo=o(" (MobileBERT model)"),alo=l(),Bp=a("li"),PK=a("strong"),nlo=o("mpnet"),slo=o(" \u2014 "),mS=a("a"),llo=o("MPNetModel"),ilo=o(" (MPNet model)"),dlo=l(),xp=a("li"),$K=a("strong"),clo=o("mt5"),flo=o(" \u2014 "),gS=a("a"),mlo=o("MT5Model"),glo=o(" (mT5 model)"),hlo=l(),kp=a("li"),IK=a("strong"),plo=o("nystromformer"),_lo=o(" \u2014 "),hS=a("a"),ulo=o("NystromformerModel"),blo=o(" (Nystromformer model)"),vlo=l(),Rp=a("li"),jK=a("strong"),Tlo=o("openai-gpt"),Flo=o(" \u2014 "),pS=a("a"),Clo=o("OpenAIGPTModel"),Mlo=o(" (OpenAI GPT model)"),Elo=l(),Sp=a("li"),DK=a("strong"),ylo=o("pegasus"),wlo=o(" \u2014 "),_S=a("a"),Alo=o("PegasusModel"),Llo=o(" (Pegasus model)"),Blo=l(),Pp=a("li"),NK=a("strong"),xlo=o("perceiver"),klo=o(" \u2014 "),uS=a("a"),Rlo=o("PerceiverModel"),Slo=o(" (Perceiver model)"),Plo=l(),$p=a("li"),qK=a("strong"),$lo=o("plbart"),Ilo=o(" \u2014 "),bS=a("a"),jlo=o("PLBartModel"),Dlo=o(" (PLBart model)"),Nlo=l(),Ip=a("li"),OK=a("strong"),qlo=o("poolformer"),Olo=o(" \u2014 "),vS=a("a"),Glo=o("PoolFormerModel"),Xlo=o(" (PoolFormer model)"),Vlo=l(),jp=a("li"),GK=a("strong"),zlo=o("prophetnet"),Wlo=o(" \u2014 "),TS=a("a"),Qlo=o("ProphetNetModel"),Hlo=o(" (ProphetNet model)"),Ulo=l(),Dp=a("li"),XK=a("strong"),Jlo=o("qdqbert"),Ylo=o(" \u2014 "),FS=a("a"),Klo=o("QDQBertModel"),Zlo=o(" (QDQBert model)"),eio=l(),Np=a("li"),VK=a("strong"),oio=o("reformer"),rio=o(" \u2014 "),CS=a("a"),tio=o("ReformerModel"),aio=o(" (Reformer model)"),nio=l(),qp=a("li"),zK=a("strong"),sio=o("rembert"),lio=o(" \u2014 "),MS=a("a"),iio=o("RemBertModel"),dio=o(" (RemBERT model)"),cio=l(),Op=a("li"),WK=a("strong"),fio=o("retribert"),mio=o(" \u2014 "),ES=a("a"),gio=o("RetriBertModel"),hio=o(" (RetriBERT model)"),pio=l(),Gp=a("li"),QK=a("strong"),_io=o("roberta"),uio=o(" \u2014 "),yS=a("a"),bio=o("RobertaModel"),vio=o(" (RoBERTa model)"),Tio=l(),Xp=a("li"),HK=a("strong"),Fio=o("roformer"),Cio=o(" \u2014 "),wS=a("a"),Mio=o("RoFormerModel"),Eio=o(" (RoFormer model)"),yio=l(),Vp=a("li"),UK=a("strong"),wio=o("segformer"),Aio=o(" \u2014 "),AS=a("a"),Lio=o("SegformerModel"),Bio=o(" (SegFormer model)"),xio=l(),zp=a("li"),JK=a("strong"),kio=o("sew"),Rio=o(" \u2014 "),LS=a("a"),Sio=o("SEWModel"),Pio=o(" (SEW model)"),$io=l(),Wp=a("li"),YK=a("strong"),Iio=o("sew-d"),jio=o(" \u2014 "),BS=a("a"),Dio=o("SEWDModel"),Nio=o(" (SEW-D model)"),qio=l(),Qp=a("li"),KK=a("strong"),Oio=o("speech_to_text"),Gio=o(" \u2014 "),xS=a("a"),Xio=o("Speech2TextModel"),Vio=o(" (Speech2Text model)"),zio=l(),Hp=a("li"),ZK=a("strong"),Wio=o("splinter"),Qio=o(" \u2014 "),kS=a("a"),Hio=o("SplinterModel"),Uio=o(" (Splinter model)"),Jio=l(),Up=a("li"),eZ=a("strong"),Yio=o("squeezebert"),Kio=o(" \u2014 "),RS=a("a"),Zio=o("SqueezeBertModel"),edo=o(" (SqueezeBERT model)"),odo=l(),Jp=a("li"),oZ=a("strong"),rdo=o("swin"),tdo=o(" \u2014 "),SS=a("a"),ado=o("SwinModel"),ndo=o(" (Swin model)"),sdo=l(),Yp=a("li"),rZ=a("strong"),ldo=o("t5"),ido=o(" \u2014 "),PS=a("a"),ddo=o("T5Model"),cdo=o(" (T5 model)"),fdo=l(),Kp=a("li"),tZ=a("strong"),mdo=o("tapas"),gdo=o(" \u2014 "),$S=a("a"),hdo=o("TapasModel"),pdo=o(" (TAPAS model)"),_do=l(),Zp=a("li"),aZ=a("strong"),udo=o("transfo-xl"),bdo=o(" \u2014 "),IS=a("a"),vdo=o("TransfoXLModel"),Tdo=o(" (Transformer-XL model)"),Fdo=l(),e_=a("li"),nZ=a("strong"),Cdo=o("unispeech"),Mdo=o(" \u2014 "),jS=a("a"),Edo=o("UniSpeechModel"),ydo=o(" (UniSpeech model)"),wdo=l(),o_=a("li"),sZ=a("strong"),Ado=o("unispeech-sat"),Ldo=o(" \u2014 "),DS=a("a"),Bdo=o("UniSpeechSatModel"),xdo=o(" (UniSpeechSat model)"),kdo=l(),r_=a("li"),lZ=a("strong"),Rdo=o("vilt"),Sdo=o(" \u2014 "),NS=a("a"),Pdo=o("ViltModel"),$do=o(" (ViLT model)"),Ido=l(),t_=a("li"),iZ=a("strong"),jdo=o("vision-text-dual-encoder"),Ddo=o(" \u2014 "),qS=a("a"),Ndo=o("VisionTextDualEncoderModel"),qdo=o(" (VisionTextDualEncoder model)"),Odo=l(),a_=a("li"),dZ=a("strong"),Gdo=o("visual_bert"),Xdo=o(" \u2014 "),OS=a("a"),Vdo=o("VisualBertModel"),zdo=o(" (VisualBert model)"),Wdo=l(),n_=a("li"),cZ=a("strong"),Qdo=o("vit"),Hdo=o(" \u2014 "),GS=a("a"),Udo=o("ViTModel"),Jdo=o(" (ViT model)"),Ydo=l(),s_=a("li"),fZ=a("strong"),Kdo=o("vit_mae"),Zdo=o(" \u2014 "),XS=a("a"),eco=o("ViTMAEModel"),oco=o(" (ViTMAE model)"),rco=l(),l_=a("li"),mZ=a("strong"),tco=o("wav2vec2"),aco=o(" \u2014 "),VS=a("a"),nco=o("Wav2Vec2Model"),sco=o(" (Wav2Vec2 model)"),lco=l(),i_=a("li"),gZ=a("strong"),ico=o("wavlm"),dco=o(" \u2014 "),zS=a("a"),cco=o("WavLMModel"),fco=o(" (WavLM model)"),mco=l(),d_=a("li"),hZ=a("strong"),gco=o("xglm"),hco=o(" \u2014 "),WS=a("a"),pco=o("XGLMModel"),_co=o(" (XGLM model)"),uco=l(),c_=a("li"),pZ=a("strong"),bco=o("xlm"),vco=o(" \u2014 "),QS=a("a"),Tco=o("XLMModel"),Fco=o(" (XLM model)"),Cco=l(),f_=a("li"),_Z=a("strong"),Mco=o("xlm-prophetnet"),Eco=o(" \u2014 "),HS=a("a"),yco=o("XLMProphetNetModel"),wco=o(" (XLMProphetNet model)"),Aco=l(),m_=a("li"),uZ=a("strong"),Lco=o("xlm-roberta"),Bco=o(" \u2014 "),US=a("a"),xco=o("XLMRobertaModel"),kco=o(" (XLM-RoBERTa model)"),Rco=l(),g_=a("li"),bZ=a("strong"),Sco=o("xlm-roberta-xl"),Pco=o(" \u2014 "),JS=a("a"),$co=o("XLMRobertaXLModel"),Ico=o(" (XLM-RoBERTa-XL model)"),jco=l(),h_=a("li"),vZ=a("strong"),Dco=o("xlnet"),Nco=o(" \u2014 "),YS=a("a"),qco=o("XLNetModel"),Oco=o(" (XLNet model)"),Gco=l(),p_=a("li"),TZ=a("strong"),Xco=o("yoso"),Vco=o(" \u2014 "),KS=a("a"),zco=o("YosoModel"),Wco=o(" (YOSO model)"),Qco=l(),__=a("p"),Hco=o("The model is set in evaluation mode by default using "),FZ=a("code"),Uco=o("model.eval()"),Jco=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CZ=a("code"),Yco=o("model.train()"),Kco=l(),MZ=a("p"),Zco=o("Examples:"),efo=l(),f(R4.$$.fragment),uxe=l(),ed=a("h2"),u_=a("a"),EZ=a("span"),f(S4.$$.fragment),ofo=l(),yZ=a("span"),rfo=o("AutoModelForPreTraining"),bxe=l(),Yo=a("div"),f(P4.$$.fragment),tfo=l(),od=a("p"),afo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wZ=a("code"),nfo=o("from_pretrained()"),sfo=o("class method or the "),AZ=a("code"),lfo=o("from_config()"),ifo=o(`class
method.`),dfo=l(),$4=a("p"),cfo=o("This class cannot be instantiated directly using "),LZ=a("code"),ffo=o("__init__()"),mfo=o(" (throws an error)."),gfo=l(),zr=a("div"),f(I4.$$.fragment),hfo=l(),BZ=a("p"),pfo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_fo=l(),rd=a("p"),ufo=o(`Note:
Loading a model from its configuration file does `),xZ=a("strong"),bfo=o("not"),vfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=a("code"),Tfo=o("from_pretrained()"),Ffo=o("to load the model weights."),Cfo=l(),RZ=a("p"),Mfo=o("Examples:"),Efo=l(),f(j4.$$.fragment),yfo=l(),De=a("div"),f(D4.$$.fragment),wfo=l(),SZ=a("p"),Afo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Lfo=l(),za=a("p"),Bfo=o("The model class to instantiate is selected based on the "),PZ=a("code"),xfo=o("model_type"),kfo=o(` property of the config object (either
passed as an argument or loaded from `),$Z=a("code"),Rfo=o("pretrained_model_name_or_path"),Sfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IZ=a("code"),Pfo=o("pretrained_model_name_or_path"),$fo=o(":"),Ifo=l(),k=a("ul"),b_=a("li"),jZ=a("strong"),jfo=o("albert"),Dfo=o(" \u2014 "),ZS=a("a"),Nfo=o("AlbertForPreTraining"),qfo=o(" (ALBERT model)"),Ofo=l(),v_=a("li"),DZ=a("strong"),Gfo=o("bart"),Xfo=o(" \u2014 "),eP=a("a"),Vfo=o("BartForConditionalGeneration"),zfo=o(" (BART model)"),Wfo=l(),T_=a("li"),NZ=a("strong"),Qfo=o("bert"),Hfo=o(" \u2014 "),oP=a("a"),Ufo=o("BertForPreTraining"),Jfo=o(" (BERT model)"),Yfo=l(),F_=a("li"),qZ=a("strong"),Kfo=o("big_bird"),Zfo=o(" \u2014 "),rP=a("a"),emo=o("BigBirdForPreTraining"),omo=o(" (BigBird model)"),rmo=l(),C_=a("li"),OZ=a("strong"),tmo=o("camembert"),amo=o(" \u2014 "),tP=a("a"),nmo=o("CamembertForMaskedLM"),smo=o(" (CamemBERT model)"),lmo=l(),M_=a("li"),GZ=a("strong"),imo=o("ctrl"),dmo=o(" \u2014 "),aP=a("a"),cmo=o("CTRLLMHeadModel"),fmo=o(" (CTRL model)"),mmo=l(),E_=a("li"),XZ=a("strong"),gmo=o("data2vec-text"),hmo=o(" \u2014 "),nP=a("a"),pmo=o("Data2VecTextForMaskedLM"),_mo=o(" (Data2VecText model)"),umo=l(),y_=a("li"),VZ=a("strong"),bmo=o("deberta"),vmo=o(" \u2014 "),sP=a("a"),Tmo=o("DebertaForMaskedLM"),Fmo=o(" (DeBERTa model)"),Cmo=l(),w_=a("li"),zZ=a("strong"),Mmo=o("deberta-v2"),Emo=o(" \u2014 "),lP=a("a"),ymo=o("DebertaV2ForMaskedLM"),wmo=o(" (DeBERTa-v2 model)"),Amo=l(),A_=a("li"),WZ=a("strong"),Lmo=o("distilbert"),Bmo=o(" \u2014 "),iP=a("a"),xmo=o("DistilBertForMaskedLM"),kmo=o(" (DistilBERT model)"),Rmo=l(),L_=a("li"),QZ=a("strong"),Smo=o("electra"),Pmo=o(" \u2014 "),dP=a("a"),$mo=o("ElectraForPreTraining"),Imo=o(" (ELECTRA model)"),jmo=l(),B_=a("li"),HZ=a("strong"),Dmo=o("flaubert"),Nmo=o(" \u2014 "),cP=a("a"),qmo=o("FlaubertWithLMHeadModel"),Omo=o(" (FlauBERT model)"),Gmo=l(),x_=a("li"),UZ=a("strong"),Xmo=o("fnet"),Vmo=o(" \u2014 "),fP=a("a"),zmo=o("FNetForPreTraining"),Wmo=o(" (FNet model)"),Qmo=l(),k_=a("li"),JZ=a("strong"),Hmo=o("fsmt"),Umo=o(" \u2014 "),mP=a("a"),Jmo=o("FSMTForConditionalGeneration"),Ymo=o(" (FairSeq Machine-Translation model)"),Kmo=l(),R_=a("li"),YZ=a("strong"),Zmo=o("funnel"),ego=o(" \u2014 "),gP=a("a"),ogo=o("FunnelForPreTraining"),rgo=o(" (Funnel Transformer model)"),tgo=l(),S_=a("li"),KZ=a("strong"),ago=o("gpt2"),ngo=o(" \u2014 "),hP=a("a"),sgo=o("GPT2LMHeadModel"),lgo=o(" (OpenAI GPT-2 model)"),igo=l(),P_=a("li"),ZZ=a("strong"),dgo=o("ibert"),cgo=o(" \u2014 "),pP=a("a"),fgo=o("IBertForMaskedLM"),mgo=o(" (I-BERT model)"),ggo=l(),$_=a("li"),eee=a("strong"),hgo=o("layoutlm"),pgo=o(" \u2014 "),_P=a("a"),_go=o("LayoutLMForMaskedLM"),ugo=o(" (LayoutLM model)"),bgo=l(),I_=a("li"),oee=a("strong"),vgo=o("longformer"),Tgo=o(" \u2014 "),uP=a("a"),Fgo=o("LongformerForMaskedLM"),Cgo=o(" (Longformer model)"),Mgo=l(),j_=a("li"),ree=a("strong"),Ego=o("lxmert"),ygo=o(" \u2014 "),bP=a("a"),wgo=o("LxmertForPreTraining"),Ago=o(" (LXMERT model)"),Lgo=l(),D_=a("li"),tee=a("strong"),Bgo=o("megatron-bert"),xgo=o(" \u2014 "),vP=a("a"),kgo=o("MegatronBertForPreTraining"),Rgo=o(" (MegatronBert model)"),Sgo=l(),N_=a("li"),aee=a("strong"),Pgo=o("mobilebert"),$go=o(" \u2014 "),TP=a("a"),Igo=o("MobileBertForPreTraining"),jgo=o(" (MobileBERT model)"),Dgo=l(),q_=a("li"),nee=a("strong"),Ngo=o("mpnet"),qgo=o(" \u2014 "),FP=a("a"),Ogo=o("MPNetForMaskedLM"),Ggo=o(" (MPNet model)"),Xgo=l(),O_=a("li"),see=a("strong"),Vgo=o("openai-gpt"),zgo=o(" \u2014 "),CP=a("a"),Wgo=o("OpenAIGPTLMHeadModel"),Qgo=o(" (OpenAI GPT model)"),Hgo=l(),G_=a("li"),lee=a("strong"),Ugo=o("retribert"),Jgo=o(" \u2014 "),MP=a("a"),Ygo=o("RetriBertModel"),Kgo=o(" (RetriBERT model)"),Zgo=l(),X_=a("li"),iee=a("strong"),eho=o("roberta"),oho=o(" \u2014 "),EP=a("a"),rho=o("RobertaForMaskedLM"),tho=o(" (RoBERTa model)"),aho=l(),V_=a("li"),dee=a("strong"),nho=o("squeezebert"),sho=o(" \u2014 "),yP=a("a"),lho=o("SqueezeBertForMaskedLM"),iho=o(" (SqueezeBERT model)"),dho=l(),z_=a("li"),cee=a("strong"),cho=o("t5"),fho=o(" \u2014 "),wP=a("a"),mho=o("T5ForConditionalGeneration"),gho=o(" (T5 model)"),hho=l(),W_=a("li"),fee=a("strong"),pho=o("tapas"),_ho=o(" \u2014 "),AP=a("a"),uho=o("TapasForMaskedLM"),bho=o(" (TAPAS model)"),vho=l(),Q_=a("li"),mee=a("strong"),Tho=o("transfo-xl"),Fho=o(" \u2014 "),LP=a("a"),Cho=o("TransfoXLLMHeadModel"),Mho=o(" (Transformer-XL model)"),Eho=l(),H_=a("li"),gee=a("strong"),yho=o("unispeech"),who=o(" \u2014 "),BP=a("a"),Aho=o("UniSpeechForPreTraining"),Lho=o(" (UniSpeech model)"),Bho=l(),U_=a("li"),hee=a("strong"),xho=o("unispeech-sat"),kho=o(" \u2014 "),xP=a("a"),Rho=o("UniSpeechSatForPreTraining"),Sho=o(" (UniSpeechSat model)"),Pho=l(),J_=a("li"),pee=a("strong"),$ho=o("visual_bert"),Iho=o(" \u2014 "),kP=a("a"),jho=o("VisualBertForPreTraining"),Dho=o(" (VisualBert model)"),Nho=l(),Y_=a("li"),_ee=a("strong"),qho=o("vit_mae"),Oho=o(" \u2014 "),RP=a("a"),Gho=o("ViTMAEForPreTraining"),Xho=o(" (ViTMAE model)"),Vho=l(),K_=a("li"),uee=a("strong"),zho=o("wav2vec2"),Who=o(" \u2014 "),SP=a("a"),Qho=o("Wav2Vec2ForPreTraining"),Hho=o(" (Wav2Vec2 model)"),Uho=l(),Z_=a("li"),bee=a("strong"),Jho=o("xlm"),Yho=o(" \u2014 "),PP=a("a"),Kho=o("XLMWithLMHeadModel"),Zho=o(" (XLM model)"),epo=l(),eu=a("li"),vee=a("strong"),opo=o("xlm-roberta"),rpo=o(" \u2014 "),$P=a("a"),tpo=o("XLMRobertaForMaskedLM"),apo=o(" (XLM-RoBERTa model)"),npo=l(),ou=a("li"),Tee=a("strong"),spo=o("xlm-roberta-xl"),lpo=o(" \u2014 "),IP=a("a"),ipo=o("XLMRobertaXLForMaskedLM"),dpo=o(" (XLM-RoBERTa-XL model)"),cpo=l(),ru=a("li"),Fee=a("strong"),fpo=o("xlnet"),mpo=o(" \u2014 "),jP=a("a"),gpo=o("XLNetLMHeadModel"),hpo=o(" (XLNet model)"),ppo=l(),tu=a("p"),_po=o("The model is set in evaluation mode by default using "),Cee=a("code"),upo=o("model.eval()"),bpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mee=a("code"),vpo=o("model.train()"),Tpo=l(),Eee=a("p"),Fpo=o("Examples:"),Cpo=l(),f(N4.$$.fragment),vxe=l(),td=a("h2"),au=a("a"),yee=a("span"),f(q4.$$.fragment),Mpo=l(),wee=a("span"),Epo=o("AutoModelForCausalLM"),Txe=l(),Ko=a("div"),f(O4.$$.fragment),ypo=l(),ad=a("p"),wpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aee=a("code"),Apo=o("from_pretrained()"),Lpo=o("class method or the "),Lee=a("code"),Bpo=o("from_config()"),xpo=o(`class
method.`),kpo=l(),G4=a("p"),Rpo=o("This class cannot be instantiated directly using "),Bee=a("code"),Spo=o("__init__()"),Ppo=o(" (throws an error)."),$po=l(),Wr=a("div"),f(X4.$$.fragment),Ipo=l(),xee=a("p"),jpo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Dpo=l(),nd=a("p"),Npo=o(`Note:
Loading a model from its configuration file does `),kee=a("strong"),qpo=o("not"),Opo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=a("code"),Gpo=o("from_pretrained()"),Xpo=o("to load the model weights."),Vpo=l(),See=a("p"),zpo=o("Examples:"),Wpo=l(),f(V4.$$.fragment),Qpo=l(),Ne=a("div"),f(z4.$$.fragment),Hpo=l(),Pee=a("p"),Upo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jpo=l(),Wa=a("p"),Ypo=o("The model class to instantiate is selected based on the "),$ee=a("code"),Kpo=o("model_type"),Zpo=o(` property of the config object (either
passed as an argument or loaded from `),Iee=a("code"),e_o=o("pretrained_model_name_or_path"),o_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jee=a("code"),r_o=o("pretrained_model_name_or_path"),t_o=o(":"),a_o=l(),$=a("ul"),nu=a("li"),Dee=a("strong"),n_o=o("bart"),s_o=o(" \u2014 "),DP=a("a"),l_o=o("BartForCausalLM"),i_o=o(" (BART model)"),d_o=l(),su=a("li"),Nee=a("strong"),c_o=o("bert"),f_o=o(" \u2014 "),NP=a("a"),m_o=o("BertLMHeadModel"),g_o=o(" (BERT model)"),h_o=l(),lu=a("li"),qee=a("strong"),p_o=o("bert-generation"),__o=o(" \u2014 "),qP=a("a"),u_o=o("BertGenerationDecoder"),b_o=o(" (Bert Generation model)"),v_o=l(),iu=a("li"),Oee=a("strong"),T_o=o("big_bird"),F_o=o(" \u2014 "),OP=a("a"),C_o=o("BigBirdForCausalLM"),M_o=o(" (BigBird model)"),E_o=l(),du=a("li"),Gee=a("strong"),y_o=o("bigbird_pegasus"),w_o=o(" \u2014 "),GP=a("a"),A_o=o("BigBirdPegasusForCausalLM"),L_o=o(" (BigBirdPegasus model)"),B_o=l(),cu=a("li"),Xee=a("strong"),x_o=o("blenderbot"),k_o=o(" \u2014 "),XP=a("a"),R_o=o("BlenderbotForCausalLM"),S_o=o(" (Blenderbot model)"),P_o=l(),fu=a("li"),Vee=a("strong"),$_o=o("blenderbot-small"),I_o=o(" \u2014 "),VP=a("a"),j_o=o("BlenderbotSmallForCausalLM"),D_o=o(" (BlenderbotSmall model)"),N_o=l(),mu=a("li"),zee=a("strong"),q_o=o("camembert"),O_o=o(" \u2014 "),zP=a("a"),G_o=o("CamembertForCausalLM"),X_o=o(" (CamemBERT model)"),V_o=l(),gu=a("li"),Wee=a("strong"),z_o=o("ctrl"),W_o=o(" \u2014 "),WP=a("a"),Q_o=o("CTRLLMHeadModel"),H_o=o(" (CTRL model)"),U_o=l(),hu=a("li"),Qee=a("strong"),J_o=o("data2vec-text"),Y_o=o(" \u2014 "),QP=a("a"),K_o=o("Data2VecTextForCausalLM"),Z_o=o(" (Data2VecText model)"),euo=l(),pu=a("li"),Hee=a("strong"),ouo=o("electra"),ruo=o(" \u2014 "),HP=a("a"),tuo=o("ElectraForCausalLM"),auo=o(" (ELECTRA model)"),nuo=l(),_u=a("li"),Uee=a("strong"),suo=o("gpt2"),luo=o(" \u2014 "),UP=a("a"),iuo=o("GPT2LMHeadModel"),duo=o(" (OpenAI GPT-2 model)"),cuo=l(),uu=a("li"),Jee=a("strong"),fuo=o("gpt_neo"),muo=o(" \u2014 "),JP=a("a"),guo=o("GPTNeoForCausalLM"),huo=o(" (GPT Neo model)"),puo=l(),bu=a("li"),Yee=a("strong"),_uo=o("gptj"),uuo=o(" \u2014 "),YP=a("a"),buo=o("GPTJForCausalLM"),vuo=o(" (GPT-J model)"),Tuo=l(),vu=a("li"),Kee=a("strong"),Fuo=o("marian"),Cuo=o(" \u2014 "),KP=a("a"),Muo=o("MarianForCausalLM"),Euo=o(" (Marian model)"),yuo=l(),Tu=a("li"),Zee=a("strong"),wuo=o("mbart"),Auo=o(" \u2014 "),ZP=a("a"),Luo=o("MBartForCausalLM"),Buo=o(" (mBART model)"),xuo=l(),Fu=a("li"),eoe=a("strong"),kuo=o("megatron-bert"),Ruo=o(" \u2014 "),e$=a("a"),Suo=o("MegatronBertForCausalLM"),Puo=o(" (MegatronBert model)"),$uo=l(),Cu=a("li"),ooe=a("strong"),Iuo=o("openai-gpt"),juo=o(" \u2014 "),o$=a("a"),Duo=o("OpenAIGPTLMHeadModel"),Nuo=o(" (OpenAI GPT model)"),quo=l(),Mu=a("li"),roe=a("strong"),Ouo=o("pegasus"),Guo=o(" \u2014 "),r$=a("a"),Xuo=o("PegasusForCausalLM"),Vuo=o(" (Pegasus model)"),zuo=l(),Eu=a("li"),toe=a("strong"),Wuo=o("plbart"),Quo=o(" \u2014 "),t$=a("a"),Huo=o("PLBartForCausalLM"),Uuo=o(" (PLBart model)"),Juo=l(),yu=a("li"),aoe=a("strong"),Yuo=o("prophetnet"),Kuo=o(" \u2014 "),a$=a("a"),Zuo=o("ProphetNetForCausalLM"),e1o=o(" (ProphetNet model)"),o1o=l(),wu=a("li"),noe=a("strong"),r1o=o("qdqbert"),t1o=o(" \u2014 "),n$=a("a"),a1o=o("QDQBertLMHeadModel"),n1o=o(" (QDQBert model)"),s1o=l(),Au=a("li"),soe=a("strong"),l1o=o("reformer"),i1o=o(" \u2014 "),s$=a("a"),d1o=o("ReformerModelWithLMHead"),c1o=o(" (Reformer model)"),f1o=l(),Lu=a("li"),loe=a("strong"),m1o=o("rembert"),g1o=o(" \u2014 "),l$=a("a"),h1o=o("RemBertForCausalLM"),p1o=o(" (RemBERT model)"),_1o=l(),Bu=a("li"),ioe=a("strong"),u1o=o("roberta"),b1o=o(" \u2014 "),i$=a("a"),v1o=o("RobertaForCausalLM"),T1o=o(" (RoBERTa model)"),F1o=l(),xu=a("li"),doe=a("strong"),C1o=o("roformer"),M1o=o(" \u2014 "),d$=a("a"),E1o=o("RoFormerForCausalLM"),y1o=o(" (RoFormer model)"),w1o=l(),ku=a("li"),coe=a("strong"),A1o=o("speech_to_text_2"),L1o=o(" \u2014 "),c$=a("a"),B1o=o("Speech2Text2ForCausalLM"),x1o=o(" (Speech2Text2 model)"),k1o=l(),Ru=a("li"),foe=a("strong"),R1o=o("transfo-xl"),S1o=o(" \u2014 "),f$=a("a"),P1o=o("TransfoXLLMHeadModel"),$1o=o(" (Transformer-XL model)"),I1o=l(),Su=a("li"),moe=a("strong"),j1o=o("trocr"),D1o=o(" \u2014 "),m$=a("a"),N1o=o("TrOCRForCausalLM"),q1o=o(" (TrOCR model)"),O1o=l(),Pu=a("li"),goe=a("strong"),G1o=o("xglm"),X1o=o(" \u2014 "),g$=a("a"),V1o=o("XGLMForCausalLM"),z1o=o(" (XGLM model)"),W1o=l(),$u=a("li"),hoe=a("strong"),Q1o=o("xlm"),H1o=o(" \u2014 "),h$=a("a"),U1o=o("XLMWithLMHeadModel"),J1o=o(" (XLM model)"),Y1o=l(),Iu=a("li"),poe=a("strong"),K1o=o("xlm-prophetnet"),Z1o=o(" \u2014 "),p$=a("a"),ebo=o("XLMProphetNetForCausalLM"),obo=o(" (XLMProphetNet model)"),rbo=l(),ju=a("li"),_oe=a("strong"),tbo=o("xlm-roberta"),abo=o(" \u2014 "),_$=a("a"),nbo=o("XLMRobertaForCausalLM"),sbo=o(" (XLM-RoBERTa model)"),lbo=l(),Du=a("li"),uoe=a("strong"),ibo=o("xlm-roberta-xl"),dbo=o(" \u2014 "),u$=a("a"),cbo=o("XLMRobertaXLForCausalLM"),fbo=o(" (XLM-RoBERTa-XL model)"),mbo=l(),Nu=a("li"),boe=a("strong"),gbo=o("xlnet"),hbo=o(" \u2014 "),b$=a("a"),pbo=o("XLNetLMHeadModel"),_bo=o(" (XLNet model)"),ubo=l(),qu=a("p"),bbo=o("The model is set in evaluation mode by default using "),voe=a("code"),vbo=o("model.eval()"),Tbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Toe=a("code"),Fbo=o("model.train()"),Cbo=l(),Foe=a("p"),Mbo=o("Examples:"),Ebo=l(),f(W4.$$.fragment),Fxe=l(),sd=a("h2"),Ou=a("a"),Coe=a("span"),f(Q4.$$.fragment),ybo=l(),Moe=a("span"),wbo=o("AutoModelForMaskedLM"),Cxe=l(),Zo=a("div"),f(H4.$$.fragment),Abo=l(),ld=a("p"),Lbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Eoe=a("code"),Bbo=o("from_pretrained()"),xbo=o("class method or the "),yoe=a("code"),kbo=o("from_config()"),Rbo=o(`class
method.`),Sbo=l(),U4=a("p"),Pbo=o("This class cannot be instantiated directly using "),woe=a("code"),$bo=o("__init__()"),Ibo=o(" (throws an error)."),jbo=l(),Qr=a("div"),f(J4.$$.fragment),Dbo=l(),Aoe=a("p"),Nbo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qbo=l(),id=a("p"),Obo=o(`Note:
Loading a model from its configuration file does `),Loe=a("strong"),Gbo=o("not"),Xbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=a("code"),Vbo=o("from_pretrained()"),zbo=o("to load the model weights."),Wbo=l(),xoe=a("p"),Qbo=o("Examples:"),Hbo=l(),f(Y4.$$.fragment),Ubo=l(),qe=a("div"),f(K4.$$.fragment),Jbo=l(),koe=a("p"),Ybo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kbo=l(),Qa=a("p"),Zbo=o("The model class to instantiate is selected based on the "),Roe=a("code"),e5o=o("model_type"),o5o=o(` property of the config object (either
passed as an argument or loaded from `),Soe=a("code"),r5o=o("pretrained_model_name_or_path"),t5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Poe=a("code"),a5o=o("pretrained_model_name_or_path"),n5o=o(":"),s5o=l(),I=a("ul"),Gu=a("li"),$oe=a("strong"),l5o=o("albert"),i5o=o(" \u2014 "),v$=a("a"),d5o=o("AlbertForMaskedLM"),c5o=o(" (ALBERT model)"),f5o=l(),Xu=a("li"),Ioe=a("strong"),m5o=o("bart"),g5o=o(" \u2014 "),T$=a("a"),h5o=o("BartForConditionalGeneration"),p5o=o(" (BART model)"),_5o=l(),Vu=a("li"),joe=a("strong"),u5o=o("bert"),b5o=o(" \u2014 "),F$=a("a"),v5o=o("BertForMaskedLM"),T5o=o(" (BERT model)"),F5o=l(),zu=a("li"),Doe=a("strong"),C5o=o("big_bird"),M5o=o(" \u2014 "),C$=a("a"),E5o=o("BigBirdForMaskedLM"),y5o=o(" (BigBird model)"),w5o=l(),Wu=a("li"),Noe=a("strong"),A5o=o("camembert"),L5o=o(" \u2014 "),M$=a("a"),B5o=o("CamembertForMaskedLM"),x5o=o(" (CamemBERT model)"),k5o=l(),Qu=a("li"),qoe=a("strong"),R5o=o("convbert"),S5o=o(" \u2014 "),E$=a("a"),P5o=o("ConvBertForMaskedLM"),$5o=o(" (ConvBERT model)"),I5o=l(),Hu=a("li"),Ooe=a("strong"),j5o=o("data2vec-text"),D5o=o(" \u2014 "),y$=a("a"),N5o=o("Data2VecTextForMaskedLM"),q5o=o(" (Data2VecText model)"),O5o=l(),Uu=a("li"),Goe=a("strong"),G5o=o("deberta"),X5o=o(" \u2014 "),w$=a("a"),V5o=o("DebertaForMaskedLM"),z5o=o(" (DeBERTa model)"),W5o=l(),Ju=a("li"),Xoe=a("strong"),Q5o=o("deberta-v2"),H5o=o(" \u2014 "),A$=a("a"),U5o=o("DebertaV2ForMaskedLM"),J5o=o(" (DeBERTa-v2 model)"),Y5o=l(),Yu=a("li"),Voe=a("strong"),K5o=o("distilbert"),Z5o=o(" \u2014 "),L$=a("a"),e2o=o("DistilBertForMaskedLM"),o2o=o(" (DistilBERT model)"),r2o=l(),Ku=a("li"),zoe=a("strong"),t2o=o("electra"),a2o=o(" \u2014 "),B$=a("a"),n2o=o("ElectraForMaskedLM"),s2o=o(" (ELECTRA model)"),l2o=l(),Zu=a("li"),Woe=a("strong"),i2o=o("flaubert"),d2o=o(" \u2014 "),x$=a("a"),c2o=o("FlaubertWithLMHeadModel"),f2o=o(" (FlauBERT model)"),m2o=l(),e1=a("li"),Qoe=a("strong"),g2o=o("fnet"),h2o=o(" \u2014 "),k$=a("a"),p2o=o("FNetForMaskedLM"),_2o=o(" (FNet model)"),u2o=l(),o1=a("li"),Hoe=a("strong"),b2o=o("funnel"),v2o=o(" \u2014 "),R$=a("a"),T2o=o("FunnelForMaskedLM"),F2o=o(" (Funnel Transformer model)"),C2o=l(),r1=a("li"),Uoe=a("strong"),M2o=o("ibert"),E2o=o(" \u2014 "),S$=a("a"),y2o=o("IBertForMaskedLM"),w2o=o(" (I-BERT model)"),A2o=l(),t1=a("li"),Joe=a("strong"),L2o=o("layoutlm"),B2o=o(" \u2014 "),P$=a("a"),x2o=o("LayoutLMForMaskedLM"),k2o=o(" (LayoutLM model)"),R2o=l(),a1=a("li"),Yoe=a("strong"),S2o=o("longformer"),P2o=o(" \u2014 "),$$=a("a"),$2o=o("LongformerForMaskedLM"),I2o=o(" (Longformer model)"),j2o=l(),n1=a("li"),Koe=a("strong"),D2o=o("mbart"),N2o=o(" \u2014 "),I$=a("a"),q2o=o("MBartForConditionalGeneration"),O2o=o(" (mBART model)"),G2o=l(),s1=a("li"),Zoe=a("strong"),X2o=o("megatron-bert"),V2o=o(" \u2014 "),j$=a("a"),z2o=o("MegatronBertForMaskedLM"),W2o=o(" (MegatronBert model)"),Q2o=l(),l1=a("li"),ere=a("strong"),H2o=o("mobilebert"),U2o=o(" \u2014 "),D$=a("a"),J2o=o("MobileBertForMaskedLM"),Y2o=o(" (MobileBERT model)"),K2o=l(),i1=a("li"),ore=a("strong"),Z2o=o("mpnet"),evo=o(" \u2014 "),N$=a("a"),ovo=o("MPNetForMaskedLM"),rvo=o(" (MPNet model)"),tvo=l(),d1=a("li"),rre=a("strong"),avo=o("nystromformer"),nvo=o(" \u2014 "),q$=a("a"),svo=o("NystromformerForMaskedLM"),lvo=o(" (Nystromformer model)"),ivo=l(),c1=a("li"),tre=a("strong"),dvo=o("perceiver"),cvo=o(" \u2014 "),O$=a("a"),fvo=o("PerceiverForMaskedLM"),mvo=o(" (Perceiver model)"),gvo=l(),f1=a("li"),are=a("strong"),hvo=o("qdqbert"),pvo=o(" \u2014 "),G$=a("a"),_vo=o("QDQBertForMaskedLM"),uvo=o(" (QDQBert model)"),bvo=l(),m1=a("li"),nre=a("strong"),vvo=o("reformer"),Tvo=o(" \u2014 "),X$=a("a"),Fvo=o("ReformerForMaskedLM"),Cvo=o(" (Reformer model)"),Mvo=l(),g1=a("li"),sre=a("strong"),Evo=o("rembert"),yvo=o(" \u2014 "),V$=a("a"),wvo=o("RemBertForMaskedLM"),Avo=o(" (RemBERT model)"),Lvo=l(),h1=a("li"),lre=a("strong"),Bvo=o("roberta"),xvo=o(" \u2014 "),z$=a("a"),kvo=o("RobertaForMaskedLM"),Rvo=o(" (RoBERTa model)"),Svo=l(),p1=a("li"),ire=a("strong"),Pvo=o("roformer"),$vo=o(" \u2014 "),W$=a("a"),Ivo=o("RoFormerForMaskedLM"),jvo=o(" (RoFormer model)"),Dvo=l(),_1=a("li"),dre=a("strong"),Nvo=o("squeezebert"),qvo=o(" \u2014 "),Q$=a("a"),Ovo=o("SqueezeBertForMaskedLM"),Gvo=o(" (SqueezeBERT model)"),Xvo=l(),u1=a("li"),cre=a("strong"),Vvo=o("tapas"),zvo=o(" \u2014 "),H$=a("a"),Wvo=o("TapasForMaskedLM"),Qvo=o(" (TAPAS model)"),Hvo=l(),b1=a("li"),fre=a("strong"),Uvo=o("wav2vec2"),Jvo=o(" \u2014 "),mre=a("code"),Yvo=o("Wav2Vec2ForMaskedLM"),Kvo=o("(Wav2Vec2 model)"),Zvo=l(),v1=a("li"),gre=a("strong"),e0o=o("xlm"),o0o=o(" \u2014 "),U$=a("a"),r0o=o("XLMWithLMHeadModel"),t0o=o(" (XLM model)"),a0o=l(),T1=a("li"),hre=a("strong"),n0o=o("xlm-roberta"),s0o=o(" \u2014 "),J$=a("a"),l0o=o("XLMRobertaForMaskedLM"),i0o=o(" (XLM-RoBERTa model)"),d0o=l(),F1=a("li"),pre=a("strong"),c0o=o("xlm-roberta-xl"),f0o=o(" \u2014 "),Y$=a("a"),m0o=o("XLMRobertaXLForMaskedLM"),g0o=o(" (XLM-RoBERTa-XL model)"),h0o=l(),C1=a("li"),_re=a("strong"),p0o=o("yoso"),_0o=o(" \u2014 "),K$=a("a"),u0o=o("YosoForMaskedLM"),b0o=o(" (YOSO model)"),v0o=l(),M1=a("p"),T0o=o("The model is set in evaluation mode by default using "),ure=a("code"),F0o=o("model.eval()"),C0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bre=a("code"),M0o=o("model.train()"),E0o=l(),vre=a("p"),y0o=o("Examples:"),w0o=l(),f(Z4.$$.fragment),Mxe=l(),dd=a("h2"),E1=a("a"),Tre=a("span"),f(eE.$$.fragment),A0o=l(),Fre=a("span"),L0o=o("AutoModelForSeq2SeqLM"),Exe=l(),er=a("div"),f(oE.$$.fragment),B0o=l(),cd=a("p"),x0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cre=a("code"),k0o=o("from_pretrained()"),R0o=o("class method or the "),Mre=a("code"),S0o=o("from_config()"),P0o=o(`class
method.`),$0o=l(),rE=a("p"),I0o=o("This class cannot be instantiated directly using "),Ere=a("code"),j0o=o("__init__()"),D0o=o(" (throws an error)."),N0o=l(),Hr=a("div"),f(tE.$$.fragment),q0o=l(),yre=a("p"),O0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G0o=l(),fd=a("p"),X0o=o(`Note:
Loading a model from its configuration file does `),wre=a("strong"),V0o=o("not"),z0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("code"),W0o=o("from_pretrained()"),Q0o=o("to load the model weights."),H0o=l(),Lre=a("p"),U0o=o("Examples:"),J0o=l(),f(aE.$$.fragment),Y0o=l(),Oe=a("div"),f(nE.$$.fragment),K0o=l(),Bre=a("p"),Z0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eTo=l(),Ha=a("p"),oTo=o("The model class to instantiate is selected based on the "),xre=a("code"),rTo=o("model_type"),tTo=o(` property of the config object (either
passed as an argument or loaded from `),kre=a("code"),aTo=o("pretrained_model_name_or_path"),nTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rre=a("code"),sTo=o("pretrained_model_name_or_path"),lTo=o(":"),iTo=l(),ne=a("ul"),y1=a("li"),Sre=a("strong"),dTo=o("bart"),cTo=o(" \u2014 "),Z$=a("a"),fTo=o("BartForConditionalGeneration"),mTo=o(" (BART model)"),gTo=l(),w1=a("li"),Pre=a("strong"),hTo=o("bigbird_pegasus"),pTo=o(" \u2014 "),eI=a("a"),_To=o("BigBirdPegasusForConditionalGeneration"),uTo=o(" (BigBirdPegasus model)"),bTo=l(),A1=a("li"),$re=a("strong"),vTo=o("blenderbot"),TTo=o(" \u2014 "),oI=a("a"),FTo=o("BlenderbotForConditionalGeneration"),CTo=o(" (Blenderbot model)"),MTo=l(),L1=a("li"),Ire=a("strong"),ETo=o("blenderbot-small"),yTo=o(" \u2014 "),rI=a("a"),wTo=o("BlenderbotSmallForConditionalGeneration"),ATo=o(" (BlenderbotSmall model)"),LTo=l(),B1=a("li"),jre=a("strong"),BTo=o("encoder-decoder"),xTo=o(" \u2014 "),tI=a("a"),kTo=o("EncoderDecoderModel"),RTo=o(" (Encoder decoder model)"),STo=l(),x1=a("li"),Dre=a("strong"),PTo=o("fsmt"),$To=o(" \u2014 "),aI=a("a"),ITo=o("FSMTForConditionalGeneration"),jTo=o(" (FairSeq Machine-Translation model)"),DTo=l(),k1=a("li"),Nre=a("strong"),NTo=o("led"),qTo=o(" \u2014 "),nI=a("a"),OTo=o("LEDForConditionalGeneration"),GTo=o(" (LED model)"),XTo=l(),R1=a("li"),qre=a("strong"),VTo=o("m2m_100"),zTo=o(" \u2014 "),sI=a("a"),WTo=o("M2M100ForConditionalGeneration"),QTo=o(" (M2M100 model)"),HTo=l(),S1=a("li"),Ore=a("strong"),UTo=o("marian"),JTo=o(" \u2014 "),lI=a("a"),YTo=o("MarianMTModel"),KTo=o(" (Marian model)"),ZTo=l(),P1=a("li"),Gre=a("strong"),e7o=o("mbart"),o7o=o(" \u2014 "),iI=a("a"),r7o=o("MBartForConditionalGeneration"),t7o=o(" (mBART model)"),a7o=l(),$1=a("li"),Xre=a("strong"),n7o=o("mt5"),s7o=o(" \u2014 "),dI=a("a"),l7o=o("MT5ForConditionalGeneration"),i7o=o(" (mT5 model)"),d7o=l(),I1=a("li"),Vre=a("strong"),c7o=o("pegasus"),f7o=o(" \u2014 "),cI=a("a"),m7o=o("PegasusForConditionalGeneration"),g7o=o(" (Pegasus model)"),h7o=l(),j1=a("li"),zre=a("strong"),p7o=o("plbart"),_7o=o(" \u2014 "),fI=a("a"),u7o=o("PLBartForConditionalGeneration"),b7o=o(" (PLBart model)"),v7o=l(),D1=a("li"),Wre=a("strong"),T7o=o("prophetnet"),F7o=o(" \u2014 "),mI=a("a"),C7o=o("ProphetNetForConditionalGeneration"),M7o=o(" (ProphetNet model)"),E7o=l(),N1=a("li"),Qre=a("strong"),y7o=o("t5"),w7o=o(" \u2014 "),gI=a("a"),A7o=o("T5ForConditionalGeneration"),L7o=o(" (T5 model)"),B7o=l(),q1=a("li"),Hre=a("strong"),x7o=o("xlm-prophetnet"),k7o=o(" \u2014 "),hI=a("a"),R7o=o("XLMProphetNetForConditionalGeneration"),S7o=o(" (XLMProphetNet model)"),P7o=l(),O1=a("p"),$7o=o("The model is set in evaluation mode by default using "),Ure=a("code"),I7o=o("model.eval()"),j7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jre=a("code"),D7o=o("model.train()"),N7o=l(),Yre=a("p"),q7o=o("Examples:"),O7o=l(),f(sE.$$.fragment),yxe=l(),md=a("h2"),G1=a("a"),Kre=a("span"),f(lE.$$.fragment),G7o=l(),Zre=a("span"),X7o=o("AutoModelForSequenceClassification"),wxe=l(),or=a("div"),f(iE.$$.fragment),V7o=l(),gd=a("p"),z7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ete=a("code"),W7o=o("from_pretrained()"),Q7o=o("class method or the "),ote=a("code"),H7o=o("from_config()"),U7o=o(`class
method.`),J7o=l(),dE=a("p"),Y7o=o("This class cannot be instantiated directly using "),rte=a("code"),K7o=o("__init__()"),Z7o=o(" (throws an error)."),eFo=l(),Ur=a("div"),f(cE.$$.fragment),oFo=l(),tte=a("p"),rFo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tFo=l(),hd=a("p"),aFo=o(`Note:
Loading a model from its configuration file does `),ate=a("strong"),nFo=o("not"),sFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nte=a("code"),lFo=o("from_pretrained()"),iFo=o("to load the model weights."),dFo=l(),ste=a("p"),cFo=o("Examples:"),fFo=l(),f(fE.$$.fragment),mFo=l(),Ge=a("div"),f(mE.$$.fragment),gFo=l(),lte=a("p"),hFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pFo=l(),Ua=a("p"),_Fo=o("The model class to instantiate is selected based on the "),ite=a("code"),uFo=o("model_type"),bFo=o(` property of the config object (either
passed as an argument or loaded from `),dte=a("code"),vFo=o("pretrained_model_name_or_path"),TFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cte=a("code"),FFo=o("pretrained_model_name_or_path"),CFo=o(":"),MFo=l(),A=a("ul"),X1=a("li"),fte=a("strong"),EFo=o("albert"),yFo=o(" \u2014 "),pI=a("a"),wFo=o("AlbertForSequenceClassification"),AFo=o(" (ALBERT model)"),LFo=l(),V1=a("li"),mte=a("strong"),BFo=o("bart"),xFo=o(" \u2014 "),_I=a("a"),kFo=o("BartForSequenceClassification"),RFo=o(" (BART model)"),SFo=l(),z1=a("li"),gte=a("strong"),PFo=o("bert"),$Fo=o(" \u2014 "),uI=a("a"),IFo=o("BertForSequenceClassification"),jFo=o(" (BERT model)"),DFo=l(),W1=a("li"),hte=a("strong"),NFo=o("big_bird"),qFo=o(" \u2014 "),bI=a("a"),OFo=o("BigBirdForSequenceClassification"),GFo=o(" (BigBird model)"),XFo=l(),Q1=a("li"),pte=a("strong"),VFo=o("bigbird_pegasus"),zFo=o(" \u2014 "),vI=a("a"),WFo=o("BigBirdPegasusForSequenceClassification"),QFo=o(" (BigBirdPegasus model)"),HFo=l(),H1=a("li"),_te=a("strong"),UFo=o("camembert"),JFo=o(" \u2014 "),TI=a("a"),YFo=o("CamembertForSequenceClassification"),KFo=o(" (CamemBERT model)"),ZFo=l(),U1=a("li"),ute=a("strong"),e9o=o("canine"),o9o=o(" \u2014 "),FI=a("a"),r9o=o("CanineForSequenceClassification"),t9o=o(" (Canine model)"),a9o=l(),J1=a("li"),bte=a("strong"),n9o=o("convbert"),s9o=o(" \u2014 "),CI=a("a"),l9o=o("ConvBertForSequenceClassification"),i9o=o(" (ConvBERT model)"),d9o=l(),Y1=a("li"),vte=a("strong"),c9o=o("ctrl"),f9o=o(" \u2014 "),MI=a("a"),m9o=o("CTRLForSequenceClassification"),g9o=o(" (CTRL model)"),h9o=l(),K1=a("li"),Tte=a("strong"),p9o=o("data2vec-text"),_9o=o(" \u2014 "),EI=a("a"),u9o=o("Data2VecTextForSequenceClassification"),b9o=o(" (Data2VecText model)"),v9o=l(),Z1=a("li"),Fte=a("strong"),T9o=o("deberta"),F9o=o(" \u2014 "),yI=a("a"),C9o=o("DebertaForSequenceClassification"),M9o=o(" (DeBERTa model)"),E9o=l(),eb=a("li"),Cte=a("strong"),y9o=o("deberta-v2"),w9o=o(" \u2014 "),wI=a("a"),A9o=o("DebertaV2ForSequenceClassification"),L9o=o(" (DeBERTa-v2 model)"),B9o=l(),ob=a("li"),Mte=a("strong"),x9o=o("distilbert"),k9o=o(" \u2014 "),AI=a("a"),R9o=o("DistilBertForSequenceClassification"),S9o=o(" (DistilBERT model)"),P9o=l(),rb=a("li"),Ete=a("strong"),$9o=o("electra"),I9o=o(" \u2014 "),LI=a("a"),j9o=o("ElectraForSequenceClassification"),D9o=o(" (ELECTRA model)"),N9o=l(),tb=a("li"),yte=a("strong"),q9o=o("flaubert"),O9o=o(" \u2014 "),BI=a("a"),G9o=o("FlaubertForSequenceClassification"),X9o=o(" (FlauBERT model)"),V9o=l(),ab=a("li"),wte=a("strong"),z9o=o("fnet"),W9o=o(" \u2014 "),xI=a("a"),Q9o=o("FNetForSequenceClassification"),H9o=o(" (FNet model)"),U9o=l(),nb=a("li"),Ate=a("strong"),J9o=o("funnel"),Y9o=o(" \u2014 "),kI=a("a"),K9o=o("FunnelForSequenceClassification"),Z9o=o(" (Funnel Transformer model)"),eCo=l(),sb=a("li"),Lte=a("strong"),oCo=o("gpt2"),rCo=o(" \u2014 "),RI=a("a"),tCo=o("GPT2ForSequenceClassification"),aCo=o(" (OpenAI GPT-2 model)"),nCo=l(),lb=a("li"),Bte=a("strong"),sCo=o("gpt_neo"),lCo=o(" \u2014 "),SI=a("a"),iCo=o("GPTNeoForSequenceClassification"),dCo=o(" (GPT Neo model)"),cCo=l(),ib=a("li"),xte=a("strong"),fCo=o("gptj"),mCo=o(" \u2014 "),PI=a("a"),gCo=o("GPTJForSequenceClassification"),hCo=o(" (GPT-J model)"),pCo=l(),db=a("li"),kte=a("strong"),_Co=o("ibert"),uCo=o(" \u2014 "),$I=a("a"),bCo=o("IBertForSequenceClassification"),vCo=o(" (I-BERT model)"),TCo=l(),cb=a("li"),Rte=a("strong"),FCo=o("layoutlm"),CCo=o(" \u2014 "),II=a("a"),MCo=o("LayoutLMForSequenceClassification"),ECo=o(" (LayoutLM model)"),yCo=l(),fb=a("li"),Ste=a("strong"),wCo=o("layoutlmv2"),ACo=o(" \u2014 "),jI=a("a"),LCo=o("LayoutLMv2ForSequenceClassification"),BCo=o(" (LayoutLMv2 model)"),xCo=l(),mb=a("li"),Pte=a("strong"),kCo=o("led"),RCo=o(" \u2014 "),DI=a("a"),SCo=o("LEDForSequenceClassification"),PCo=o(" (LED model)"),$Co=l(),gb=a("li"),$te=a("strong"),ICo=o("longformer"),jCo=o(" \u2014 "),NI=a("a"),DCo=o("LongformerForSequenceClassification"),NCo=o(" (Longformer model)"),qCo=l(),hb=a("li"),Ite=a("strong"),OCo=o("mbart"),GCo=o(" \u2014 "),qI=a("a"),XCo=o("MBartForSequenceClassification"),VCo=o(" (mBART model)"),zCo=l(),pb=a("li"),jte=a("strong"),WCo=o("megatron-bert"),QCo=o(" \u2014 "),OI=a("a"),HCo=o("MegatronBertForSequenceClassification"),UCo=o(" (MegatronBert model)"),JCo=l(),_b=a("li"),Dte=a("strong"),YCo=o("mobilebert"),KCo=o(" \u2014 "),GI=a("a"),ZCo=o("MobileBertForSequenceClassification"),eMo=o(" (MobileBERT model)"),oMo=l(),ub=a("li"),Nte=a("strong"),rMo=o("mpnet"),tMo=o(" \u2014 "),XI=a("a"),aMo=o("MPNetForSequenceClassification"),nMo=o(" (MPNet model)"),sMo=l(),bb=a("li"),qte=a("strong"),lMo=o("nystromformer"),iMo=o(" \u2014 "),VI=a("a"),dMo=o("NystromformerForSequenceClassification"),cMo=o(" (Nystromformer model)"),fMo=l(),vb=a("li"),Ote=a("strong"),mMo=o("openai-gpt"),gMo=o(" \u2014 "),zI=a("a"),hMo=o("OpenAIGPTForSequenceClassification"),pMo=o(" (OpenAI GPT model)"),_Mo=l(),Tb=a("li"),Gte=a("strong"),uMo=o("perceiver"),bMo=o(" \u2014 "),WI=a("a"),vMo=o("PerceiverForSequenceClassification"),TMo=o(" (Perceiver model)"),FMo=l(),Fb=a("li"),Xte=a("strong"),CMo=o("plbart"),MMo=o(" \u2014 "),QI=a("a"),EMo=o("PLBartForSequenceClassification"),yMo=o(" (PLBart model)"),wMo=l(),Cb=a("li"),Vte=a("strong"),AMo=o("qdqbert"),LMo=o(" \u2014 "),HI=a("a"),BMo=o("QDQBertForSequenceClassification"),xMo=o(" (QDQBert model)"),kMo=l(),Mb=a("li"),zte=a("strong"),RMo=o("reformer"),SMo=o(" \u2014 "),UI=a("a"),PMo=o("ReformerForSequenceClassification"),$Mo=o(" (Reformer model)"),IMo=l(),Eb=a("li"),Wte=a("strong"),jMo=o("rembert"),DMo=o(" \u2014 "),JI=a("a"),NMo=o("RemBertForSequenceClassification"),qMo=o(" (RemBERT model)"),OMo=l(),yb=a("li"),Qte=a("strong"),GMo=o("roberta"),XMo=o(" \u2014 "),YI=a("a"),VMo=o("RobertaForSequenceClassification"),zMo=o(" (RoBERTa model)"),WMo=l(),wb=a("li"),Hte=a("strong"),QMo=o("roformer"),HMo=o(" \u2014 "),KI=a("a"),UMo=o("RoFormerForSequenceClassification"),JMo=o(" (RoFormer model)"),YMo=l(),Ab=a("li"),Ute=a("strong"),KMo=o("squeezebert"),ZMo=o(" \u2014 "),ZI=a("a"),e4o=o("SqueezeBertForSequenceClassification"),o4o=o(" (SqueezeBERT model)"),r4o=l(),Lb=a("li"),Jte=a("strong"),t4o=o("tapas"),a4o=o(" \u2014 "),ej=a("a"),n4o=o("TapasForSequenceClassification"),s4o=o(" (TAPAS model)"),l4o=l(),Bb=a("li"),Yte=a("strong"),i4o=o("transfo-xl"),d4o=o(" \u2014 "),oj=a("a"),c4o=o("TransfoXLForSequenceClassification"),f4o=o(" (Transformer-XL model)"),m4o=l(),xb=a("li"),Kte=a("strong"),g4o=o("xlm"),h4o=o(" \u2014 "),rj=a("a"),p4o=o("XLMForSequenceClassification"),_4o=o(" (XLM model)"),u4o=l(),kb=a("li"),Zte=a("strong"),b4o=o("xlm-roberta"),v4o=o(" \u2014 "),tj=a("a"),T4o=o("XLMRobertaForSequenceClassification"),F4o=o(" (XLM-RoBERTa model)"),C4o=l(),Rb=a("li"),eae=a("strong"),M4o=o("xlm-roberta-xl"),E4o=o(" \u2014 "),aj=a("a"),y4o=o("XLMRobertaXLForSequenceClassification"),w4o=o(" (XLM-RoBERTa-XL model)"),A4o=l(),Sb=a("li"),oae=a("strong"),L4o=o("xlnet"),B4o=o(" \u2014 "),nj=a("a"),x4o=o("XLNetForSequenceClassification"),k4o=o(" (XLNet model)"),R4o=l(),Pb=a("li"),rae=a("strong"),S4o=o("yoso"),P4o=o(" \u2014 "),sj=a("a"),$4o=o("YosoForSequenceClassification"),I4o=o(" (YOSO model)"),j4o=l(),$b=a("p"),D4o=o("The model is set in evaluation mode by default using "),tae=a("code"),N4o=o("model.eval()"),q4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aae=a("code"),O4o=o("model.train()"),G4o=l(),nae=a("p"),X4o=o("Examples:"),V4o=l(),f(gE.$$.fragment),Axe=l(),pd=a("h2"),Ib=a("a"),sae=a("span"),f(hE.$$.fragment),z4o=l(),lae=a("span"),W4o=o("AutoModelForMultipleChoice"),Lxe=l(),rr=a("div"),f(pE.$$.fragment),Q4o=l(),_d=a("p"),H4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iae=a("code"),U4o=o("from_pretrained()"),J4o=o("class method or the "),dae=a("code"),Y4o=o("from_config()"),K4o=o(`class
method.`),Z4o=l(),_E=a("p"),eEo=o("This class cannot be instantiated directly using "),cae=a("code"),oEo=o("__init__()"),rEo=o(" (throws an error)."),tEo=l(),Jr=a("div"),f(uE.$$.fragment),aEo=l(),fae=a("p"),nEo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sEo=l(),ud=a("p"),lEo=o(`Note:
Loading a model from its configuration file does `),mae=a("strong"),iEo=o("not"),dEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gae=a("code"),cEo=o("from_pretrained()"),fEo=o("to load the model weights."),mEo=l(),hae=a("p"),gEo=o("Examples:"),hEo=l(),f(bE.$$.fragment),pEo=l(),Xe=a("div"),f(vE.$$.fragment),_Eo=l(),pae=a("p"),uEo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bEo=l(),Ja=a("p"),vEo=o("The model class to instantiate is selected based on the "),_ae=a("code"),TEo=o("model_type"),FEo=o(` property of the config object (either
passed as an argument or loaded from `),uae=a("code"),CEo=o("pretrained_model_name_or_path"),MEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bae=a("code"),EEo=o("pretrained_model_name_or_path"),yEo=o(":"),wEo=l(),O=a("ul"),jb=a("li"),vae=a("strong"),AEo=o("albert"),LEo=o(" \u2014 "),lj=a("a"),BEo=o("AlbertForMultipleChoice"),xEo=o(" (ALBERT model)"),kEo=l(),Db=a("li"),Tae=a("strong"),REo=o("bert"),SEo=o(" \u2014 "),ij=a("a"),PEo=o("BertForMultipleChoice"),$Eo=o(" (BERT model)"),IEo=l(),Nb=a("li"),Fae=a("strong"),jEo=o("big_bird"),DEo=o(" \u2014 "),dj=a("a"),NEo=o("BigBirdForMultipleChoice"),qEo=o(" (BigBird model)"),OEo=l(),qb=a("li"),Cae=a("strong"),GEo=o("camembert"),XEo=o(" \u2014 "),cj=a("a"),VEo=o("CamembertForMultipleChoice"),zEo=o(" (CamemBERT model)"),WEo=l(),Ob=a("li"),Mae=a("strong"),QEo=o("canine"),HEo=o(" \u2014 "),fj=a("a"),UEo=o("CanineForMultipleChoice"),JEo=o(" (Canine model)"),YEo=l(),Gb=a("li"),Eae=a("strong"),KEo=o("convbert"),ZEo=o(" \u2014 "),mj=a("a"),e3o=o("ConvBertForMultipleChoice"),o3o=o(" (ConvBERT model)"),r3o=l(),Xb=a("li"),yae=a("strong"),t3o=o("data2vec-text"),a3o=o(" \u2014 "),gj=a("a"),n3o=o("Data2VecTextForMultipleChoice"),s3o=o(" (Data2VecText model)"),l3o=l(),Vb=a("li"),wae=a("strong"),i3o=o("distilbert"),d3o=o(" \u2014 "),hj=a("a"),c3o=o("DistilBertForMultipleChoice"),f3o=o(" (DistilBERT model)"),m3o=l(),zb=a("li"),Aae=a("strong"),g3o=o("electra"),h3o=o(" \u2014 "),pj=a("a"),p3o=o("ElectraForMultipleChoice"),_3o=o(" (ELECTRA model)"),u3o=l(),Wb=a("li"),Lae=a("strong"),b3o=o("flaubert"),v3o=o(" \u2014 "),_j=a("a"),T3o=o("FlaubertForMultipleChoice"),F3o=o(" (FlauBERT model)"),C3o=l(),Qb=a("li"),Bae=a("strong"),M3o=o("fnet"),E3o=o(" \u2014 "),uj=a("a"),y3o=o("FNetForMultipleChoice"),w3o=o(" (FNet model)"),A3o=l(),Hb=a("li"),xae=a("strong"),L3o=o("funnel"),B3o=o(" \u2014 "),bj=a("a"),x3o=o("FunnelForMultipleChoice"),k3o=o(" (Funnel Transformer model)"),R3o=l(),Ub=a("li"),kae=a("strong"),S3o=o("ibert"),P3o=o(" \u2014 "),vj=a("a"),$3o=o("IBertForMultipleChoice"),I3o=o(" (I-BERT model)"),j3o=l(),Jb=a("li"),Rae=a("strong"),D3o=o("longformer"),N3o=o(" \u2014 "),Tj=a("a"),q3o=o("LongformerForMultipleChoice"),O3o=o(" (Longformer model)"),G3o=l(),Yb=a("li"),Sae=a("strong"),X3o=o("megatron-bert"),V3o=o(" \u2014 "),Fj=a("a"),z3o=o("MegatronBertForMultipleChoice"),W3o=o(" (MegatronBert model)"),Q3o=l(),Kb=a("li"),Pae=a("strong"),H3o=o("mobilebert"),U3o=o(" \u2014 "),Cj=a("a"),J3o=o("MobileBertForMultipleChoice"),Y3o=o(" (MobileBERT model)"),K3o=l(),Zb=a("li"),$ae=a("strong"),Z3o=o("mpnet"),eyo=o(" \u2014 "),Mj=a("a"),oyo=o("MPNetForMultipleChoice"),ryo=o(" (MPNet model)"),tyo=l(),e5=a("li"),Iae=a("strong"),ayo=o("nystromformer"),nyo=o(" \u2014 "),Ej=a("a"),syo=o("NystromformerForMultipleChoice"),lyo=o(" (Nystromformer model)"),iyo=l(),o5=a("li"),jae=a("strong"),dyo=o("qdqbert"),cyo=o(" \u2014 "),yj=a("a"),fyo=o("QDQBertForMultipleChoice"),myo=o(" (QDQBert model)"),gyo=l(),r5=a("li"),Dae=a("strong"),hyo=o("rembert"),pyo=o(" \u2014 "),wj=a("a"),_yo=o("RemBertForMultipleChoice"),uyo=o(" (RemBERT model)"),byo=l(),t5=a("li"),Nae=a("strong"),vyo=o("roberta"),Tyo=o(" \u2014 "),Aj=a("a"),Fyo=o("RobertaForMultipleChoice"),Cyo=o(" (RoBERTa model)"),Myo=l(),a5=a("li"),qae=a("strong"),Eyo=o("roformer"),yyo=o(" \u2014 "),Lj=a("a"),wyo=o("RoFormerForMultipleChoice"),Ayo=o(" (RoFormer model)"),Lyo=l(),n5=a("li"),Oae=a("strong"),Byo=o("squeezebert"),xyo=o(" \u2014 "),Bj=a("a"),kyo=o("SqueezeBertForMultipleChoice"),Ryo=o(" (SqueezeBERT model)"),Syo=l(),s5=a("li"),Gae=a("strong"),Pyo=o("xlm"),$yo=o(" \u2014 "),xj=a("a"),Iyo=o("XLMForMultipleChoice"),jyo=o(" (XLM model)"),Dyo=l(),l5=a("li"),Xae=a("strong"),Nyo=o("xlm-roberta"),qyo=o(" \u2014 "),kj=a("a"),Oyo=o("XLMRobertaForMultipleChoice"),Gyo=o(" (XLM-RoBERTa model)"),Xyo=l(),i5=a("li"),Vae=a("strong"),Vyo=o("xlm-roberta-xl"),zyo=o(" \u2014 "),Rj=a("a"),Wyo=o("XLMRobertaXLForMultipleChoice"),Qyo=o(" (XLM-RoBERTa-XL model)"),Hyo=l(),d5=a("li"),zae=a("strong"),Uyo=o("xlnet"),Jyo=o(" \u2014 "),Sj=a("a"),Yyo=o("XLNetForMultipleChoice"),Kyo=o(" (XLNet model)"),Zyo=l(),c5=a("li"),Wae=a("strong"),ewo=o("yoso"),owo=o(" \u2014 "),Pj=a("a"),rwo=o("YosoForMultipleChoice"),two=o(" (YOSO model)"),awo=l(),f5=a("p"),nwo=o("The model is set in evaluation mode by default using "),Qae=a("code"),swo=o("model.eval()"),lwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=a("code"),iwo=o("model.train()"),dwo=l(),Uae=a("p"),cwo=o("Examples:"),fwo=l(),f(TE.$$.fragment),Bxe=l(),bd=a("h2"),m5=a("a"),Jae=a("span"),f(FE.$$.fragment),mwo=l(),Yae=a("span"),gwo=o("AutoModelForNextSentencePrediction"),xxe=l(),tr=a("div"),f(CE.$$.fragment),hwo=l(),vd=a("p"),pwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kae=a("code"),_wo=o("from_pretrained()"),uwo=o("class method or the "),Zae=a("code"),bwo=o("from_config()"),vwo=o(`class
method.`),Two=l(),ME=a("p"),Fwo=o("This class cannot be instantiated directly using "),ene=a("code"),Cwo=o("__init__()"),Mwo=o(" (throws an error)."),Ewo=l(),Yr=a("div"),f(EE.$$.fragment),ywo=l(),one=a("p"),wwo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Awo=l(),Td=a("p"),Lwo=o(`Note:
Loading a model from its configuration file does `),rne=a("strong"),Bwo=o("not"),xwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=a("code"),kwo=o("from_pretrained()"),Rwo=o("to load the model weights."),Swo=l(),ane=a("p"),Pwo=o("Examples:"),$wo=l(),f(yE.$$.fragment),Iwo=l(),Ve=a("div"),f(wE.$$.fragment),jwo=l(),nne=a("p"),Dwo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nwo=l(),Ya=a("p"),qwo=o("The model class to instantiate is selected based on the "),sne=a("code"),Owo=o("model_type"),Gwo=o(` property of the config object (either
passed as an argument or loaded from `),lne=a("code"),Xwo=o("pretrained_model_name_or_path"),Vwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=a("code"),zwo=o("pretrained_model_name_or_path"),Wwo=o(":"),Qwo=l(),da=a("ul"),g5=a("li"),dne=a("strong"),Hwo=o("bert"),Uwo=o(" \u2014 "),$j=a("a"),Jwo=o("BertForNextSentencePrediction"),Ywo=o(" (BERT model)"),Kwo=l(),h5=a("li"),cne=a("strong"),Zwo=o("fnet"),e6o=o(" \u2014 "),Ij=a("a"),o6o=o("FNetForNextSentencePrediction"),r6o=o(" (FNet model)"),t6o=l(),p5=a("li"),fne=a("strong"),a6o=o("megatron-bert"),n6o=o(" \u2014 "),jj=a("a"),s6o=o("MegatronBertForNextSentencePrediction"),l6o=o(" (MegatronBert model)"),i6o=l(),_5=a("li"),mne=a("strong"),d6o=o("mobilebert"),c6o=o(" \u2014 "),Dj=a("a"),f6o=o("MobileBertForNextSentencePrediction"),m6o=o(" (MobileBERT model)"),g6o=l(),u5=a("li"),gne=a("strong"),h6o=o("qdqbert"),p6o=o(" \u2014 "),Nj=a("a"),_6o=o("QDQBertForNextSentencePrediction"),u6o=o(" (QDQBert model)"),b6o=l(),b5=a("p"),v6o=o("The model is set in evaluation mode by default using "),hne=a("code"),T6o=o("model.eval()"),F6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pne=a("code"),C6o=o("model.train()"),M6o=l(),_ne=a("p"),E6o=o("Examples:"),y6o=l(),f(AE.$$.fragment),kxe=l(),Fd=a("h2"),v5=a("a"),une=a("span"),f(LE.$$.fragment),w6o=l(),bne=a("span"),A6o=o("AutoModelForTokenClassification"),Rxe=l(),ar=a("div"),f(BE.$$.fragment),L6o=l(),Cd=a("p"),B6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vne=a("code"),x6o=o("from_pretrained()"),k6o=o("class method or the "),Tne=a("code"),R6o=o("from_config()"),S6o=o(`class
method.`),P6o=l(),xE=a("p"),$6o=o("This class cannot be instantiated directly using "),Fne=a("code"),I6o=o("__init__()"),j6o=o(" (throws an error)."),D6o=l(),Kr=a("div"),f(kE.$$.fragment),N6o=l(),Cne=a("p"),q6o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),O6o=l(),Md=a("p"),G6o=o(`Note:
Loading a model from its configuration file does `),Mne=a("strong"),X6o=o("not"),V6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ene=a("code"),z6o=o("from_pretrained()"),W6o=o("to load the model weights."),Q6o=l(),yne=a("p"),H6o=o("Examples:"),U6o=l(),f(RE.$$.fragment),J6o=l(),ze=a("div"),f(SE.$$.fragment),Y6o=l(),wne=a("p"),K6o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z6o=l(),Ka=a("p"),eAo=o("The model class to instantiate is selected based on the "),Ane=a("code"),oAo=o("model_type"),rAo=o(` property of the config object (either
passed as an argument or loaded from `),Lne=a("code"),tAo=o("pretrained_model_name_or_path"),aAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=a("code"),nAo=o("pretrained_model_name_or_path"),sAo=o(":"),lAo=l(),N=a("ul"),T5=a("li"),xne=a("strong"),iAo=o("albert"),dAo=o(" \u2014 "),qj=a("a"),cAo=o("AlbertForTokenClassification"),fAo=o(" (ALBERT model)"),mAo=l(),F5=a("li"),kne=a("strong"),gAo=o("bert"),hAo=o(" \u2014 "),Oj=a("a"),pAo=o("BertForTokenClassification"),_Ao=o(" (BERT model)"),uAo=l(),C5=a("li"),Rne=a("strong"),bAo=o("big_bird"),vAo=o(" \u2014 "),Gj=a("a"),TAo=o("BigBirdForTokenClassification"),FAo=o(" (BigBird model)"),CAo=l(),M5=a("li"),Sne=a("strong"),MAo=o("camembert"),EAo=o(" \u2014 "),Xj=a("a"),yAo=o("CamembertForTokenClassification"),wAo=o(" (CamemBERT model)"),AAo=l(),E5=a("li"),Pne=a("strong"),LAo=o("canine"),BAo=o(" \u2014 "),Vj=a("a"),xAo=o("CanineForTokenClassification"),kAo=o(" (Canine model)"),RAo=l(),y5=a("li"),$ne=a("strong"),SAo=o("convbert"),PAo=o(" \u2014 "),zj=a("a"),$Ao=o("ConvBertForTokenClassification"),IAo=o(" (ConvBERT model)"),jAo=l(),w5=a("li"),Ine=a("strong"),DAo=o("data2vec-text"),NAo=o(" \u2014 "),Wj=a("a"),qAo=o("Data2VecTextForTokenClassification"),OAo=o(" (Data2VecText model)"),GAo=l(),A5=a("li"),jne=a("strong"),XAo=o("deberta"),VAo=o(" \u2014 "),Qj=a("a"),zAo=o("DebertaForTokenClassification"),WAo=o(" (DeBERTa model)"),QAo=l(),L5=a("li"),Dne=a("strong"),HAo=o("deberta-v2"),UAo=o(" \u2014 "),Hj=a("a"),JAo=o("DebertaV2ForTokenClassification"),YAo=o(" (DeBERTa-v2 model)"),KAo=l(),B5=a("li"),Nne=a("strong"),ZAo=o("distilbert"),eLo=o(" \u2014 "),Uj=a("a"),oLo=o("DistilBertForTokenClassification"),rLo=o(" (DistilBERT model)"),tLo=l(),x5=a("li"),qne=a("strong"),aLo=o("electra"),nLo=o(" \u2014 "),Jj=a("a"),sLo=o("ElectraForTokenClassification"),lLo=o(" (ELECTRA model)"),iLo=l(),k5=a("li"),One=a("strong"),dLo=o("flaubert"),cLo=o(" \u2014 "),Yj=a("a"),fLo=o("FlaubertForTokenClassification"),mLo=o(" (FlauBERT model)"),gLo=l(),R5=a("li"),Gne=a("strong"),hLo=o("fnet"),pLo=o(" \u2014 "),Kj=a("a"),_Lo=o("FNetForTokenClassification"),uLo=o(" (FNet model)"),bLo=l(),S5=a("li"),Xne=a("strong"),vLo=o("funnel"),TLo=o(" \u2014 "),Zj=a("a"),FLo=o("FunnelForTokenClassification"),CLo=o(" (Funnel Transformer model)"),MLo=l(),P5=a("li"),Vne=a("strong"),ELo=o("gpt2"),yLo=o(" \u2014 "),eD=a("a"),wLo=o("GPT2ForTokenClassification"),ALo=o(" (OpenAI GPT-2 model)"),LLo=l(),$5=a("li"),zne=a("strong"),BLo=o("ibert"),xLo=o(" \u2014 "),oD=a("a"),kLo=o("IBertForTokenClassification"),RLo=o(" (I-BERT model)"),SLo=l(),I5=a("li"),Wne=a("strong"),PLo=o("layoutlm"),$Lo=o(" \u2014 "),rD=a("a"),ILo=o("LayoutLMForTokenClassification"),jLo=o(" (LayoutLM model)"),DLo=l(),j5=a("li"),Qne=a("strong"),NLo=o("layoutlmv2"),qLo=o(" \u2014 "),tD=a("a"),OLo=o("LayoutLMv2ForTokenClassification"),GLo=o(" (LayoutLMv2 model)"),XLo=l(),D5=a("li"),Hne=a("strong"),VLo=o("longformer"),zLo=o(" \u2014 "),aD=a("a"),WLo=o("LongformerForTokenClassification"),QLo=o(" (Longformer model)"),HLo=l(),N5=a("li"),Une=a("strong"),ULo=o("megatron-bert"),JLo=o(" \u2014 "),nD=a("a"),YLo=o("MegatronBertForTokenClassification"),KLo=o(" (MegatronBert model)"),ZLo=l(),q5=a("li"),Jne=a("strong"),e8o=o("mobilebert"),o8o=o(" \u2014 "),sD=a("a"),r8o=o("MobileBertForTokenClassification"),t8o=o(" (MobileBERT model)"),a8o=l(),O5=a("li"),Yne=a("strong"),n8o=o("mpnet"),s8o=o(" \u2014 "),lD=a("a"),l8o=o("MPNetForTokenClassification"),i8o=o(" (MPNet model)"),d8o=l(),G5=a("li"),Kne=a("strong"),c8o=o("nystromformer"),f8o=o(" \u2014 "),iD=a("a"),m8o=o("NystromformerForTokenClassification"),g8o=o(" (Nystromformer model)"),h8o=l(),X5=a("li"),Zne=a("strong"),p8o=o("qdqbert"),_8o=o(" \u2014 "),dD=a("a"),u8o=o("QDQBertForTokenClassification"),b8o=o(" (QDQBert model)"),v8o=l(),V5=a("li"),ese=a("strong"),T8o=o("rembert"),F8o=o(" \u2014 "),cD=a("a"),C8o=o("RemBertForTokenClassification"),M8o=o(" (RemBERT model)"),E8o=l(),z5=a("li"),ose=a("strong"),y8o=o("roberta"),w8o=o(" \u2014 "),fD=a("a"),A8o=o("RobertaForTokenClassification"),L8o=o(" (RoBERTa model)"),B8o=l(),W5=a("li"),rse=a("strong"),x8o=o("roformer"),k8o=o(" \u2014 "),mD=a("a"),R8o=o("RoFormerForTokenClassification"),S8o=o(" (RoFormer model)"),P8o=l(),Q5=a("li"),tse=a("strong"),$8o=o("squeezebert"),I8o=o(" \u2014 "),gD=a("a"),j8o=o("SqueezeBertForTokenClassification"),D8o=o(" (SqueezeBERT model)"),N8o=l(),H5=a("li"),ase=a("strong"),q8o=o("xlm"),O8o=o(" \u2014 "),hD=a("a"),G8o=o("XLMForTokenClassification"),X8o=o(" (XLM model)"),V8o=l(),U5=a("li"),nse=a("strong"),z8o=o("xlm-roberta"),W8o=o(" \u2014 "),pD=a("a"),Q8o=o("XLMRobertaForTokenClassification"),H8o=o(" (XLM-RoBERTa model)"),U8o=l(),J5=a("li"),sse=a("strong"),J8o=o("xlm-roberta-xl"),Y8o=o(" \u2014 "),_D=a("a"),K8o=o("XLMRobertaXLForTokenClassification"),Z8o=o(" (XLM-RoBERTa-XL model)"),eBo=l(),Y5=a("li"),lse=a("strong"),oBo=o("xlnet"),rBo=o(" \u2014 "),uD=a("a"),tBo=o("XLNetForTokenClassification"),aBo=o(" (XLNet model)"),nBo=l(),K5=a("li"),ise=a("strong"),sBo=o("yoso"),lBo=o(" \u2014 "),bD=a("a"),iBo=o("YosoForTokenClassification"),dBo=o(" (YOSO model)"),cBo=l(),Z5=a("p"),fBo=o("The model is set in evaluation mode by default using "),dse=a("code"),mBo=o("model.eval()"),gBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cse=a("code"),hBo=o("model.train()"),pBo=l(),fse=a("p"),_Bo=o("Examples:"),uBo=l(),f(PE.$$.fragment),Sxe=l(),Ed=a("h2"),e2=a("a"),mse=a("span"),f($E.$$.fragment),bBo=l(),gse=a("span"),vBo=o("AutoModelForQuestionAnswering"),Pxe=l(),nr=a("div"),f(IE.$$.fragment),TBo=l(),yd=a("p"),FBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hse=a("code"),CBo=o("from_pretrained()"),MBo=o("class method or the "),pse=a("code"),EBo=o("from_config()"),yBo=o(`class
method.`),wBo=l(),jE=a("p"),ABo=o("This class cannot be instantiated directly using "),_se=a("code"),LBo=o("__init__()"),BBo=o(" (throws an error)."),xBo=l(),Zr=a("div"),f(DE.$$.fragment),kBo=l(),use=a("p"),RBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SBo=l(),wd=a("p"),PBo=o(`Note:
Loading a model from its configuration file does `),bse=a("strong"),$Bo=o("not"),IBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vse=a("code"),jBo=o("from_pretrained()"),DBo=o("to load the model weights."),NBo=l(),Tse=a("p"),qBo=o("Examples:"),OBo=l(),f(NE.$$.fragment),GBo=l(),We=a("div"),f(qE.$$.fragment),XBo=l(),Fse=a("p"),VBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zBo=l(),Za=a("p"),WBo=o("The model class to instantiate is selected based on the "),Cse=a("code"),QBo=o("model_type"),HBo=o(` property of the config object (either
passed as an argument or loaded from `),Mse=a("code"),UBo=o("pretrained_model_name_or_path"),JBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=a("code"),YBo=o("pretrained_model_name_or_path"),KBo=o(":"),ZBo=l(),R=a("ul"),o2=a("li"),yse=a("strong"),exo=o("albert"),oxo=o(" \u2014 "),vD=a("a"),rxo=o("AlbertForQuestionAnswering"),txo=o(" (ALBERT model)"),axo=l(),r2=a("li"),wse=a("strong"),nxo=o("bart"),sxo=o(" \u2014 "),TD=a("a"),lxo=o("BartForQuestionAnswering"),ixo=o(" (BART model)"),dxo=l(),t2=a("li"),Ase=a("strong"),cxo=o("bert"),fxo=o(" \u2014 "),FD=a("a"),mxo=o("BertForQuestionAnswering"),gxo=o(" (BERT model)"),hxo=l(),a2=a("li"),Lse=a("strong"),pxo=o("big_bird"),_xo=o(" \u2014 "),CD=a("a"),uxo=o("BigBirdForQuestionAnswering"),bxo=o(" (BigBird model)"),vxo=l(),n2=a("li"),Bse=a("strong"),Txo=o("bigbird_pegasus"),Fxo=o(" \u2014 "),MD=a("a"),Cxo=o("BigBirdPegasusForQuestionAnswering"),Mxo=o(" (BigBirdPegasus model)"),Exo=l(),s2=a("li"),xse=a("strong"),yxo=o("camembert"),wxo=o(" \u2014 "),ED=a("a"),Axo=o("CamembertForQuestionAnswering"),Lxo=o(" (CamemBERT model)"),Bxo=l(),l2=a("li"),kse=a("strong"),xxo=o("canine"),kxo=o(" \u2014 "),yD=a("a"),Rxo=o("CanineForQuestionAnswering"),Sxo=o(" (Canine model)"),Pxo=l(),i2=a("li"),Rse=a("strong"),$xo=o("convbert"),Ixo=o(" \u2014 "),wD=a("a"),jxo=o("ConvBertForQuestionAnswering"),Dxo=o(" (ConvBERT model)"),Nxo=l(),d2=a("li"),Sse=a("strong"),qxo=o("data2vec-text"),Oxo=o(" \u2014 "),AD=a("a"),Gxo=o("Data2VecTextForQuestionAnswering"),Xxo=o(" (Data2VecText model)"),Vxo=l(),c2=a("li"),Pse=a("strong"),zxo=o("deberta"),Wxo=o(" \u2014 "),LD=a("a"),Qxo=o("DebertaForQuestionAnswering"),Hxo=o(" (DeBERTa model)"),Uxo=l(),f2=a("li"),$se=a("strong"),Jxo=o("deberta-v2"),Yxo=o(" \u2014 "),BD=a("a"),Kxo=o("DebertaV2ForQuestionAnswering"),Zxo=o(" (DeBERTa-v2 model)"),eko=l(),m2=a("li"),Ise=a("strong"),oko=o("distilbert"),rko=o(" \u2014 "),xD=a("a"),tko=o("DistilBertForQuestionAnswering"),ako=o(" (DistilBERT model)"),nko=l(),g2=a("li"),jse=a("strong"),sko=o("electra"),lko=o(" \u2014 "),kD=a("a"),iko=o("ElectraForQuestionAnswering"),dko=o(" (ELECTRA model)"),cko=l(),h2=a("li"),Dse=a("strong"),fko=o("flaubert"),mko=o(" \u2014 "),RD=a("a"),gko=o("FlaubertForQuestionAnsweringSimple"),hko=o(" (FlauBERT model)"),pko=l(),p2=a("li"),Nse=a("strong"),_ko=o("fnet"),uko=o(" \u2014 "),SD=a("a"),bko=o("FNetForQuestionAnswering"),vko=o(" (FNet model)"),Tko=l(),_2=a("li"),qse=a("strong"),Fko=o("funnel"),Cko=o(" \u2014 "),PD=a("a"),Mko=o("FunnelForQuestionAnswering"),Eko=o(" (Funnel Transformer model)"),yko=l(),u2=a("li"),Ose=a("strong"),wko=o("gptj"),Ako=o(" \u2014 "),$D=a("a"),Lko=o("GPTJForQuestionAnswering"),Bko=o(" (GPT-J model)"),xko=l(),b2=a("li"),Gse=a("strong"),kko=o("ibert"),Rko=o(" \u2014 "),ID=a("a"),Sko=o("IBertForQuestionAnswering"),Pko=o(" (I-BERT model)"),$ko=l(),v2=a("li"),Xse=a("strong"),Iko=o("layoutlmv2"),jko=o(" \u2014 "),jD=a("a"),Dko=o("LayoutLMv2ForQuestionAnswering"),Nko=o(" (LayoutLMv2 model)"),qko=l(),T2=a("li"),Vse=a("strong"),Oko=o("led"),Gko=o(" \u2014 "),DD=a("a"),Xko=o("LEDForQuestionAnswering"),Vko=o(" (LED model)"),zko=l(),F2=a("li"),zse=a("strong"),Wko=o("longformer"),Qko=o(" \u2014 "),ND=a("a"),Hko=o("LongformerForQuestionAnswering"),Uko=o(" (Longformer model)"),Jko=l(),C2=a("li"),Wse=a("strong"),Yko=o("lxmert"),Kko=o(" \u2014 "),qD=a("a"),Zko=o("LxmertForQuestionAnswering"),eRo=o(" (LXMERT model)"),oRo=l(),M2=a("li"),Qse=a("strong"),rRo=o("mbart"),tRo=o(" \u2014 "),OD=a("a"),aRo=o("MBartForQuestionAnswering"),nRo=o(" (mBART model)"),sRo=l(),E2=a("li"),Hse=a("strong"),lRo=o("megatron-bert"),iRo=o(" \u2014 "),GD=a("a"),dRo=o("MegatronBertForQuestionAnswering"),cRo=o(" (MegatronBert model)"),fRo=l(),y2=a("li"),Use=a("strong"),mRo=o("mobilebert"),gRo=o(" \u2014 "),XD=a("a"),hRo=o("MobileBertForQuestionAnswering"),pRo=o(" (MobileBERT model)"),_Ro=l(),w2=a("li"),Jse=a("strong"),uRo=o("mpnet"),bRo=o(" \u2014 "),VD=a("a"),vRo=o("MPNetForQuestionAnswering"),TRo=o(" (MPNet model)"),FRo=l(),A2=a("li"),Yse=a("strong"),CRo=o("nystromformer"),MRo=o(" \u2014 "),zD=a("a"),ERo=o("NystromformerForQuestionAnswering"),yRo=o(" (Nystromformer model)"),wRo=l(),L2=a("li"),Kse=a("strong"),ARo=o("qdqbert"),LRo=o(" \u2014 "),WD=a("a"),BRo=o("QDQBertForQuestionAnswering"),xRo=o(" (QDQBert model)"),kRo=l(),B2=a("li"),Zse=a("strong"),RRo=o("reformer"),SRo=o(" \u2014 "),QD=a("a"),PRo=o("ReformerForQuestionAnswering"),$Ro=o(" (Reformer model)"),IRo=l(),x2=a("li"),ele=a("strong"),jRo=o("rembert"),DRo=o(" \u2014 "),HD=a("a"),NRo=o("RemBertForQuestionAnswering"),qRo=o(" (RemBERT model)"),ORo=l(),k2=a("li"),ole=a("strong"),GRo=o("roberta"),XRo=o(" \u2014 "),UD=a("a"),VRo=o("RobertaForQuestionAnswering"),zRo=o(" (RoBERTa model)"),WRo=l(),R2=a("li"),rle=a("strong"),QRo=o("roformer"),HRo=o(" \u2014 "),JD=a("a"),URo=o("RoFormerForQuestionAnswering"),JRo=o(" (RoFormer model)"),YRo=l(),S2=a("li"),tle=a("strong"),KRo=o("splinter"),ZRo=o(" \u2014 "),YD=a("a"),eSo=o("SplinterForQuestionAnswering"),oSo=o(" (Splinter model)"),rSo=l(),P2=a("li"),ale=a("strong"),tSo=o("squeezebert"),aSo=o(" \u2014 "),KD=a("a"),nSo=o("SqueezeBertForQuestionAnswering"),sSo=o(" (SqueezeBERT model)"),lSo=l(),$2=a("li"),nle=a("strong"),iSo=o("xlm"),dSo=o(" \u2014 "),ZD=a("a"),cSo=o("XLMForQuestionAnsweringSimple"),fSo=o(" (XLM model)"),mSo=l(),I2=a("li"),sle=a("strong"),gSo=o("xlm-roberta"),hSo=o(" \u2014 "),eN=a("a"),pSo=o("XLMRobertaForQuestionAnswering"),_So=o(" (XLM-RoBERTa model)"),uSo=l(),j2=a("li"),lle=a("strong"),bSo=o("xlm-roberta-xl"),vSo=o(" \u2014 "),oN=a("a"),TSo=o("XLMRobertaXLForQuestionAnswering"),FSo=o(" (XLM-RoBERTa-XL model)"),CSo=l(),D2=a("li"),ile=a("strong"),MSo=o("xlnet"),ESo=o(" \u2014 "),rN=a("a"),ySo=o("XLNetForQuestionAnsweringSimple"),wSo=o(" (XLNet model)"),ASo=l(),N2=a("li"),dle=a("strong"),LSo=o("yoso"),BSo=o(" \u2014 "),tN=a("a"),xSo=o("YosoForQuestionAnswering"),kSo=o(" (YOSO model)"),RSo=l(),q2=a("p"),SSo=o("The model is set in evaluation mode by default using "),cle=a("code"),PSo=o("model.eval()"),$So=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=a("code"),ISo=o("model.train()"),jSo=l(),mle=a("p"),DSo=o("Examples:"),NSo=l(),f(OE.$$.fragment),$xe=l(),Ad=a("h2"),O2=a("a"),gle=a("span"),f(GE.$$.fragment),qSo=l(),hle=a("span"),OSo=o("AutoModelForTableQuestionAnswering"),Ixe=l(),sr=a("div"),f(XE.$$.fragment),GSo=l(),Ld=a("p"),XSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ple=a("code"),VSo=o("from_pretrained()"),zSo=o("class method or the "),_le=a("code"),WSo=o("from_config()"),QSo=o(`class
method.`),HSo=l(),VE=a("p"),USo=o("This class cannot be instantiated directly using "),ule=a("code"),JSo=o("__init__()"),YSo=o(" (throws an error)."),KSo=l(),et=a("div"),f(zE.$$.fragment),ZSo=l(),ble=a("p"),ePo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oPo=l(),Bd=a("p"),rPo=o(`Note:
Loading a model from its configuration file does `),vle=a("strong"),tPo=o("not"),aPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=a("code"),nPo=o("from_pretrained()"),sPo=o("to load the model weights."),lPo=l(),Fle=a("p"),iPo=o("Examples:"),dPo=l(),f(WE.$$.fragment),cPo=l(),Qe=a("div"),f(QE.$$.fragment),fPo=l(),Cle=a("p"),mPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),gPo=l(),en=a("p"),hPo=o("The model class to instantiate is selected based on the "),Mle=a("code"),pPo=o("model_type"),_Po=o(` property of the config object (either
passed as an argument or loaded from `),Ele=a("code"),uPo=o("pretrained_model_name_or_path"),bPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=a("code"),vPo=o("pretrained_model_name_or_path"),TPo=o(":"),FPo=l(),wle=a("ul"),G2=a("li"),Ale=a("strong"),CPo=o("tapas"),MPo=o(" \u2014 "),aN=a("a"),EPo=o("TapasForQuestionAnswering"),yPo=o(" (TAPAS model)"),wPo=l(),X2=a("p"),APo=o("The model is set in evaluation mode by default using "),Lle=a("code"),LPo=o("model.eval()"),BPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=a("code"),xPo=o("model.train()"),kPo=l(),xle=a("p"),RPo=o("Examples:"),SPo=l(),f(HE.$$.fragment),jxe=l(),xd=a("h2"),V2=a("a"),kle=a("span"),f(UE.$$.fragment),PPo=l(),Rle=a("span"),$Po=o("AutoModelForImageClassification"),Dxe=l(),lr=a("div"),f(JE.$$.fragment),IPo=l(),kd=a("p"),jPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sle=a("code"),DPo=o("from_pretrained()"),NPo=o("class method or the "),Ple=a("code"),qPo=o("from_config()"),OPo=o(`class
method.`),GPo=l(),YE=a("p"),XPo=o("This class cannot be instantiated directly using "),$le=a("code"),VPo=o("__init__()"),zPo=o(" (throws an error)."),WPo=l(),ot=a("div"),f(KE.$$.fragment),QPo=l(),Ile=a("p"),HPo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UPo=l(),Rd=a("p"),JPo=o(`Note:
Loading a model from its configuration file does `),jle=a("strong"),YPo=o("not"),KPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dle=a("code"),ZPo=o("from_pretrained()"),e$o=o("to load the model weights."),o$o=l(),Nle=a("p"),r$o=o("Examples:"),t$o=l(),f(ZE.$$.fragment),a$o=l(),He=a("div"),f(e3.$$.fragment),n$o=l(),qle=a("p"),s$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),l$o=l(),on=a("p"),i$o=o("The model class to instantiate is selected based on the "),Ole=a("code"),d$o=o("model_type"),c$o=o(` property of the config object (either
passed as an argument or loaded from `),Gle=a("code"),f$o=o("pretrained_model_name_or_path"),m$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=a("code"),g$o=o("pretrained_model_name_or_path"),h$o=o(":"),p$o=l(),Fe=a("ul"),z2=a("li"),Vle=a("strong"),_$o=o("beit"),u$o=o(" \u2014 "),nN=a("a"),b$o=o("BeitForImageClassification"),v$o=o(" (BEiT model)"),T$o=l(),W2=a("li"),zle=a("strong"),F$o=o("convnext"),C$o=o(" \u2014 "),sN=a("a"),M$o=o("ConvNextForImageClassification"),E$o=o(" (ConvNext model)"),y$o=l(),qs=a("li"),Wle=a("strong"),w$o=o("deit"),A$o=o(" \u2014 "),lN=a("a"),L$o=o("DeiTForImageClassification"),B$o=o(" or "),iN=a("a"),x$o=o("DeiTForImageClassificationWithTeacher"),k$o=o(" (DeiT model)"),R$o=l(),Q2=a("li"),Qle=a("strong"),S$o=o("imagegpt"),P$o=o(" \u2014 "),dN=a("a"),$$o=o("ImageGPTForImageClassification"),I$o=o(" (ImageGPT model)"),j$o=l(),ma=a("li"),Hle=a("strong"),D$o=o("perceiver"),N$o=o(" \u2014 "),cN=a("a"),q$o=o("PerceiverForImageClassificationLearned"),O$o=o(" or "),fN=a("a"),G$o=o("PerceiverForImageClassificationFourier"),X$o=o(" or "),mN=a("a"),V$o=o("PerceiverForImageClassificationConvProcessing"),z$o=o(" (Perceiver model)"),W$o=l(),H2=a("li"),Ule=a("strong"),Q$o=o("poolformer"),H$o=o(" \u2014 "),gN=a("a"),U$o=o("PoolFormerForImageClassification"),J$o=o(" (PoolFormer model)"),Y$o=l(),U2=a("li"),Jle=a("strong"),K$o=o("segformer"),Z$o=o(" \u2014 "),hN=a("a"),eIo=o("SegformerForImageClassification"),oIo=o(" (SegFormer model)"),rIo=l(),J2=a("li"),Yle=a("strong"),tIo=o("swin"),aIo=o(" \u2014 "),pN=a("a"),nIo=o("SwinForImageClassification"),sIo=o(" (Swin model)"),lIo=l(),Y2=a("li"),Kle=a("strong"),iIo=o("vit"),dIo=o(" \u2014 "),_N=a("a"),cIo=o("ViTForImageClassification"),fIo=o(" (ViT model)"),mIo=l(),K2=a("p"),gIo=o("The model is set in evaluation mode by default using "),Zle=a("code"),hIo=o("model.eval()"),pIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eie=a("code"),_Io=o("model.train()"),uIo=l(),oie=a("p"),bIo=o("Examples:"),vIo=l(),f(o3.$$.fragment),Nxe=l(),Sd=a("h2"),Z2=a("a"),rie=a("span"),f(r3.$$.fragment),TIo=l(),tie=a("span"),FIo=o("AutoModelForVision2Seq"),qxe=l(),ir=a("div"),f(t3.$$.fragment),CIo=l(),Pd=a("p"),MIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aie=a("code"),EIo=o("from_pretrained()"),yIo=o("class method or the "),nie=a("code"),wIo=o("from_config()"),AIo=o(`class
method.`),LIo=l(),a3=a("p"),BIo=o("This class cannot be instantiated directly using "),sie=a("code"),xIo=o("__init__()"),kIo=o(" (throws an error)."),RIo=l(),rt=a("div"),f(n3.$$.fragment),SIo=l(),lie=a("p"),PIo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Io=l(),$d=a("p"),IIo=o(`Note:
Loading a model from its configuration file does `),iie=a("strong"),jIo=o("not"),DIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),die=a("code"),NIo=o("from_pretrained()"),qIo=o("to load the model weights."),OIo=l(),cie=a("p"),GIo=o("Examples:"),XIo=l(),f(s3.$$.fragment),VIo=l(),Ue=a("div"),f(l3.$$.fragment),zIo=l(),fie=a("p"),WIo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QIo=l(),rn=a("p"),HIo=o("The model class to instantiate is selected based on the "),mie=a("code"),UIo=o("model_type"),JIo=o(` property of the config object (either
passed as an argument or loaded from `),gie=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=a("code"),ZIo=o("pretrained_model_name_or_path"),ejo=o(":"),ojo=l(),pie=a("ul"),ev=a("li"),_ie=a("strong"),rjo=o("vision-encoder-decoder"),tjo=o(" \u2014 "),uN=a("a"),ajo=o("VisionEncoderDecoderModel"),njo=o(" (Vision Encoder decoder model)"),sjo=l(),ov=a("p"),ljo=o("The model is set in evaluation mode by default using "),uie=a("code"),ijo=o("model.eval()"),djo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=a("code"),cjo=o("model.train()"),fjo=l(),vie=a("p"),mjo=o("Examples:"),gjo=l(),f(i3.$$.fragment),Oxe=l(),Id=a("h2"),rv=a("a"),Tie=a("span"),f(d3.$$.fragment),hjo=l(),Fie=a("span"),pjo=o("AutoModelForAudioClassification"),Gxe=l(),dr=a("div"),f(c3.$$.fragment),_jo=l(),jd=a("p"),ujo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Cie=a("code"),bjo=o("from_pretrained()"),vjo=o("class method or the "),Mie=a("code"),Tjo=o("from_config()"),Fjo=o(`class
method.`),Cjo=l(),f3=a("p"),Mjo=o("This class cannot be instantiated directly using "),Eie=a("code"),Ejo=o("__init__()"),yjo=o(" (throws an error)."),wjo=l(),tt=a("div"),f(m3.$$.fragment),Ajo=l(),yie=a("p"),Ljo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bjo=l(),Dd=a("p"),xjo=o(`Note:
Loading a model from its configuration file does `),wie=a("strong"),kjo=o("not"),Rjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aie=a("code"),Sjo=o("from_pretrained()"),Pjo=o("to load the model weights."),$jo=l(),Lie=a("p"),Ijo=o("Examples:"),jjo=l(),f(g3.$$.fragment),Djo=l(),Je=a("div"),f(h3.$$.fragment),Njo=l(),Bie=a("p"),qjo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ojo=l(),tn=a("p"),Gjo=o("The model class to instantiate is selected based on the "),xie=a("code"),Xjo=o("model_type"),Vjo=o(` property of the config object (either
passed as an argument or loaded from `),kie=a("code"),zjo=o("pretrained_model_name_or_path"),Wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=a("code"),Qjo=o("pretrained_model_name_or_path"),Hjo=o(":"),Ujo=l(),xe=a("ul"),tv=a("li"),Sie=a("strong"),Jjo=o("data2vec-audio"),Yjo=o(" \u2014 "),bN=a("a"),Kjo=o("Data2VecAudioForSequenceClassification"),Zjo=o(" (Data2VecAudio model)"),eDo=l(),av=a("li"),Pie=a("strong"),oDo=o("hubert"),rDo=o(" \u2014 "),vN=a("a"),tDo=o("HubertForSequenceClassification"),aDo=o(" (Hubert model)"),nDo=l(),nv=a("li"),$ie=a("strong"),sDo=o("sew"),lDo=o(" \u2014 "),TN=a("a"),iDo=o("SEWForSequenceClassification"),dDo=o(" (SEW model)"),cDo=l(),sv=a("li"),Iie=a("strong"),fDo=o("sew-d"),mDo=o(" \u2014 "),FN=a("a"),gDo=o("SEWDForSequenceClassification"),hDo=o(" (SEW-D model)"),pDo=l(),lv=a("li"),jie=a("strong"),_Do=o("unispeech"),uDo=o(" \u2014 "),CN=a("a"),bDo=o("UniSpeechForSequenceClassification"),vDo=o(" (UniSpeech model)"),TDo=l(),iv=a("li"),Die=a("strong"),FDo=o("unispeech-sat"),CDo=o(" \u2014 "),MN=a("a"),MDo=o("UniSpeechSatForSequenceClassification"),EDo=o(" (UniSpeechSat model)"),yDo=l(),dv=a("li"),Nie=a("strong"),wDo=o("wav2vec2"),ADo=o(" \u2014 "),EN=a("a"),LDo=o("Wav2Vec2ForSequenceClassification"),BDo=o(" (Wav2Vec2 model)"),xDo=l(),cv=a("li"),qie=a("strong"),kDo=o("wavlm"),RDo=o(" \u2014 "),yN=a("a"),SDo=o("WavLMForSequenceClassification"),PDo=o(" (WavLM model)"),$Do=l(),fv=a("p"),IDo=o("The model is set in evaluation mode by default using "),Oie=a("code"),jDo=o("model.eval()"),DDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),NDo=o("model.train()"),qDo=l(),Xie=a("p"),ODo=o("Examples:"),GDo=l(),f(p3.$$.fragment),Xxe=l(),Nd=a("h2"),mv=a("a"),Vie=a("span"),f(_3.$$.fragment),XDo=l(),zie=a("span"),VDo=o("AutoModelForAudioFrameClassification"),Vxe=l(),cr=a("div"),f(u3.$$.fragment),zDo=l(),qd=a("p"),WDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Wie=a("code"),QDo=o("from_pretrained()"),HDo=o("class method or the "),Qie=a("code"),UDo=o("from_config()"),JDo=o(`class
method.`),YDo=l(),b3=a("p"),KDo=o("This class cannot be instantiated directly using "),Hie=a("code"),ZDo=o("__init__()"),eNo=o(" (throws an error)."),oNo=l(),at=a("div"),f(v3.$$.fragment),rNo=l(),Uie=a("p"),tNo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),aNo=l(),Od=a("p"),nNo=o(`Note:
Loading a model from its configuration file does `),Jie=a("strong"),sNo=o("not"),lNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yie=a("code"),iNo=o("from_pretrained()"),dNo=o("to load the model weights."),cNo=l(),Kie=a("p"),fNo=o("Examples:"),mNo=l(),f(T3.$$.fragment),gNo=l(),Ye=a("div"),f(F3.$$.fragment),hNo=l(),Zie=a("p"),pNo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),_No=l(),an=a("p"),uNo=o("The model class to instantiate is selected based on the "),ede=a("code"),bNo=o("model_type"),vNo=o(` property of the config object (either
passed as an argument or loaded from `),ode=a("code"),TNo=o("pretrained_model_name_or_path"),FNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=a("code"),CNo=o("pretrained_model_name_or_path"),MNo=o(":"),ENo=l(),nn=a("ul"),gv=a("li"),tde=a("strong"),yNo=o("data2vec-audio"),wNo=o(" \u2014 "),wN=a("a"),ANo=o("Data2VecAudioForAudioFrameClassification"),LNo=o(" (Data2VecAudio model)"),BNo=l(),hv=a("li"),ade=a("strong"),xNo=o("unispeech-sat"),kNo=o(" \u2014 "),AN=a("a"),RNo=o("UniSpeechSatForAudioFrameClassification"),SNo=o(" (UniSpeechSat model)"),PNo=l(),pv=a("li"),nde=a("strong"),$No=o("wav2vec2"),INo=o(" \u2014 "),LN=a("a"),jNo=o("Wav2Vec2ForAudioFrameClassification"),DNo=o(" (Wav2Vec2 model)"),NNo=l(),_v=a("li"),sde=a("strong"),qNo=o("wavlm"),ONo=o(" \u2014 "),BN=a("a"),GNo=o("WavLMForAudioFrameClassification"),XNo=o(" (WavLM model)"),VNo=l(),uv=a("p"),zNo=o("The model is set in evaluation mode by default using "),lde=a("code"),WNo=o("model.eval()"),QNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=a("code"),HNo=o("model.train()"),UNo=l(),dde=a("p"),JNo=o("Examples:"),YNo=l(),f(C3.$$.fragment),zxe=l(),Gd=a("h2"),bv=a("a"),cde=a("span"),f(M3.$$.fragment),KNo=l(),fde=a("span"),ZNo=o("AutoModelForCTC"),Wxe=l(),fr=a("div"),f(E3.$$.fragment),eqo=l(),Xd=a("p"),oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mde=a("code"),rqo=o("from_pretrained()"),tqo=o("class method or the "),gde=a("code"),aqo=o("from_config()"),nqo=o(`class
method.`),sqo=l(),y3=a("p"),lqo=o("This class cannot be instantiated directly using "),hde=a("code"),iqo=o("__init__()"),dqo=o(" (throws an error)."),cqo=l(),nt=a("div"),f(w3.$$.fragment),fqo=l(),pde=a("p"),mqo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gqo=l(),Vd=a("p"),hqo=o(`Note:
Loading a model from its configuration file does `),_de=a("strong"),pqo=o("not"),_qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=a("code"),uqo=o("from_pretrained()"),bqo=o("to load the model weights."),vqo=l(),bde=a("p"),Tqo=o("Examples:"),Fqo=l(),f(A3.$$.fragment),Cqo=l(),Ke=a("div"),f(L3.$$.fragment),Mqo=l(),vde=a("p"),Eqo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),yqo=l(),sn=a("p"),wqo=o("The model class to instantiate is selected based on the "),Tde=a("code"),Aqo=o("model_type"),Lqo=o(` property of the config object (either
passed as an argument or loaded from `),Fde=a("code"),Bqo=o("pretrained_model_name_or_path"),xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),kqo=o("pretrained_model_name_or_path"),Rqo=o(":"),Sqo=l(),ke=a("ul"),vv=a("li"),Mde=a("strong"),Pqo=o("data2vec-audio"),$qo=o(" \u2014 "),xN=a("a"),Iqo=o("Data2VecAudioForCTC"),jqo=o(" (Data2VecAudio model)"),Dqo=l(),Tv=a("li"),Ede=a("strong"),Nqo=o("hubert"),qqo=o(" \u2014 "),kN=a("a"),Oqo=o("HubertForCTC"),Gqo=o(" (Hubert model)"),Xqo=l(),Fv=a("li"),yde=a("strong"),Vqo=o("sew"),zqo=o(" \u2014 "),RN=a("a"),Wqo=o("SEWForCTC"),Qqo=o(" (SEW model)"),Hqo=l(),Cv=a("li"),wde=a("strong"),Uqo=o("sew-d"),Jqo=o(" \u2014 "),SN=a("a"),Yqo=o("SEWDForCTC"),Kqo=o(" (SEW-D model)"),Zqo=l(),Mv=a("li"),Ade=a("strong"),eOo=o("unispeech"),oOo=o(" \u2014 "),PN=a("a"),rOo=o("UniSpeechForCTC"),tOo=o(" (UniSpeech model)"),aOo=l(),Ev=a("li"),Lde=a("strong"),nOo=o("unispeech-sat"),sOo=o(" \u2014 "),$N=a("a"),lOo=o("UniSpeechSatForCTC"),iOo=o(" (UniSpeechSat model)"),dOo=l(),yv=a("li"),Bde=a("strong"),cOo=o("wav2vec2"),fOo=o(" \u2014 "),IN=a("a"),mOo=o("Wav2Vec2ForCTC"),gOo=o(" (Wav2Vec2 model)"),hOo=l(),wv=a("li"),xde=a("strong"),pOo=o("wavlm"),_Oo=o(" \u2014 "),jN=a("a"),uOo=o("WavLMForCTC"),bOo=o(" (WavLM model)"),vOo=l(),Av=a("p"),TOo=o("The model is set in evaluation mode by default using "),kde=a("code"),FOo=o("model.eval()"),COo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=a("code"),MOo=o("model.train()"),EOo=l(),Sde=a("p"),yOo=o("Examples:"),wOo=l(),f(B3.$$.fragment),Qxe=l(),zd=a("h2"),Lv=a("a"),Pde=a("span"),f(x3.$$.fragment),AOo=l(),$de=a("span"),LOo=o("AutoModelForSpeechSeq2Seq"),Hxe=l(),mr=a("div"),f(k3.$$.fragment),BOo=l(),Wd=a("p"),xOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Ide=a("code"),kOo=o("from_pretrained()"),ROo=o("class method or the "),jde=a("code"),SOo=o("from_config()"),POo=o(`class
method.`),$Oo=l(),R3=a("p"),IOo=o("This class cannot be instantiated directly using "),Dde=a("code"),jOo=o("__init__()"),DOo=o(" (throws an error)."),NOo=l(),st=a("div"),f(S3.$$.fragment),qOo=l(),Nde=a("p"),OOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GOo=l(),Qd=a("p"),XOo=o(`Note:
Loading a model from its configuration file does `),qde=a("strong"),VOo=o("not"),zOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ode=a("code"),WOo=o("from_pretrained()"),QOo=o("to load the model weights."),HOo=l(),Gde=a("p"),UOo=o("Examples:"),JOo=l(),f(P3.$$.fragment),YOo=l(),Ze=a("div"),f($3.$$.fragment),KOo=l(),Xde=a("p"),ZOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eGo=l(),ln=a("p"),oGo=o("The model class to instantiate is selected based on the "),Vde=a("code"),rGo=o("model_type"),tGo=o(` property of the config object (either
passed as an argument or loaded from `),zde=a("code"),aGo=o("pretrained_model_name_or_path"),nGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wde=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(":"),iGo=l(),I3=a("ul"),Bv=a("li"),Qde=a("strong"),dGo=o("speech-encoder-decoder"),cGo=o(" \u2014 "),DN=a("a"),fGo=o("SpeechEncoderDecoderModel"),mGo=o(" (Speech Encoder decoder model)"),gGo=l(),xv=a("li"),Hde=a("strong"),hGo=o("speech_to_text"),pGo=o(" \u2014 "),NN=a("a"),_Go=o("Speech2TextForConditionalGeneration"),uGo=o(" (Speech2Text model)"),bGo=l(),kv=a("p"),vGo=o("The model is set in evaluation mode by default using "),Ude=a("code"),TGo=o("model.eval()"),FGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=a("code"),CGo=o("model.train()"),MGo=l(),Yde=a("p"),EGo=o("Examples:"),yGo=l(),f(j3.$$.fragment),Uxe=l(),Hd=a("h2"),Rv=a("a"),Kde=a("span"),f(D3.$$.fragment),wGo=l(),Zde=a("span"),AGo=o("AutoModelForAudioXVector"),Jxe=l(),gr=a("div"),f(N3.$$.fragment),LGo=l(),Ud=a("p"),BGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ece=a("code"),xGo=o("from_pretrained()"),kGo=o("class method or the "),oce=a("code"),RGo=o("from_config()"),SGo=o(`class
method.`),PGo=l(),q3=a("p"),$Go=o("This class cannot be instantiated directly using "),rce=a("code"),IGo=o("__init__()"),jGo=o(" (throws an error)."),DGo=l(),lt=a("div"),f(O3.$$.fragment),NGo=l(),tce=a("p"),qGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),OGo=l(),Jd=a("p"),GGo=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),XGo=o("not"),VGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nce=a("code"),zGo=o("from_pretrained()"),WGo=o("to load the model weights."),QGo=l(),sce=a("p"),HGo=o("Examples:"),UGo=l(),f(G3.$$.fragment),JGo=l(),eo=a("div"),f(X3.$$.fragment),YGo=l(),lce=a("p"),KGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ZGo=l(),dn=a("p"),eXo=o("The model class to instantiate is selected based on the "),ice=a("code"),oXo=o("model_type"),rXo=o(` property of the config object (either
passed as an argument or loaded from `),dce=a("code"),tXo=o("pretrained_model_name_or_path"),aXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=a("code"),nXo=o("pretrained_model_name_or_path"),sXo=o(":"),lXo=l(),cn=a("ul"),Sv=a("li"),fce=a("strong"),iXo=o("data2vec-audio"),dXo=o(" \u2014 "),qN=a("a"),cXo=o("Data2VecAudioForXVector"),fXo=o(" (Data2VecAudio model)"),mXo=l(),Pv=a("li"),mce=a("strong"),gXo=o("unispeech-sat"),hXo=o(" \u2014 "),ON=a("a"),pXo=o("UniSpeechSatForXVector"),_Xo=o(" (UniSpeechSat model)"),uXo=l(),$v=a("li"),gce=a("strong"),bXo=o("wav2vec2"),vXo=o(" \u2014 "),GN=a("a"),TXo=o("Wav2Vec2ForXVector"),FXo=o(" (Wav2Vec2 model)"),CXo=l(),Iv=a("li"),hce=a("strong"),MXo=o("wavlm"),EXo=o(" \u2014 "),XN=a("a"),yXo=o("WavLMForXVector"),wXo=o(" (WavLM model)"),AXo=l(),jv=a("p"),LXo=o("The model is set in evaluation mode by default using "),pce=a("code"),BXo=o("model.eval()"),xXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=a("code"),kXo=o("model.train()"),RXo=l(),uce=a("p"),SXo=o("Examples:"),PXo=l(),f(V3.$$.fragment),Yxe=l(),Yd=a("h2"),Dv=a("a"),bce=a("span"),f(z3.$$.fragment),$Xo=l(),vce=a("span"),IXo=o("AutoModelForMaskedImageModeling"),Kxe=l(),hr=a("div"),f(W3.$$.fragment),jXo=l(),Kd=a("p"),DXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Tce=a("code"),NXo=o("from_pretrained()"),qXo=o("class method or the "),Fce=a("code"),OXo=o("from_config()"),GXo=o(`class
method.`),XXo=l(),Q3=a("p"),VXo=o("This class cannot be instantiated directly using "),Cce=a("code"),zXo=o("__init__()"),WXo=o(" (throws an error)."),QXo=l(),it=a("div"),f(H3.$$.fragment),HXo=l(),Mce=a("p"),UXo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),JXo=l(),Zd=a("p"),YXo=o(`Note:
Loading a model from its configuration file does `),Ece=a("strong"),KXo=o("not"),ZXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yce=a("code"),eVo=o("from_pretrained()"),oVo=o("to load the model weights."),rVo=l(),wce=a("p"),tVo=o("Examples:"),aVo=l(),f(U3.$$.fragment),nVo=l(),oo=a("div"),f(J3.$$.fragment),sVo=l(),Ace=a("p"),lVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),iVo=l(),fn=a("p"),dVo=o("The model class to instantiate is selected based on the "),Lce=a("code"),cVo=o("model_type"),fVo=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),mVo=o("pretrained_model_name_or_path"),gVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),hVo=o("pretrained_model_name_or_path"),pVo=o(":"),_Vo=l(),ec=a("ul"),Nv=a("li"),kce=a("strong"),uVo=o("deit"),bVo=o(" \u2014 "),VN=a("a"),vVo=o("DeiTForMaskedImageModeling"),TVo=o(" (DeiT model)"),FVo=l(),qv=a("li"),Rce=a("strong"),CVo=o("swin"),MVo=o(" \u2014 "),zN=a("a"),EVo=o("SwinForMaskedImageModeling"),yVo=o(" (Swin model)"),wVo=l(),Ov=a("li"),Sce=a("strong"),AVo=o("vit"),LVo=o(" \u2014 "),WN=a("a"),BVo=o("ViTForMaskedImageModeling"),xVo=o(" (ViT model)"),kVo=l(),Gv=a("p"),RVo=o("The model is set in evaluation mode by default using "),Pce=a("code"),SVo=o("model.eval()"),PVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),$Vo=o("model.train()"),IVo=l(),Ice=a("p"),jVo=o("Examples:"),DVo=l(),f(Y3.$$.fragment),Zxe=l(),oc=a("h2"),Xv=a("a"),jce=a("span"),f(K3.$$.fragment),NVo=l(),Dce=a("span"),qVo=o("AutoModelForObjectDetection"),eke=l(),pr=a("div"),f(Z3.$$.fragment),OVo=l(),rc=a("p"),GVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Nce=a("code"),XVo=o("from_pretrained()"),VVo=o("class method or the "),qce=a("code"),zVo=o("from_config()"),WVo=o(`class
method.`),QVo=l(),ey=a("p"),HVo=o("This class cannot be instantiated directly using "),Oce=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),dt=a("div"),f(oy.$$.fragment),KVo=l(),Gce=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ezo=l(),tc=a("p"),ozo=o(`Note:
Loading a model from its configuration file does `),Xce=a("strong"),rzo=o("not"),tzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=a("code"),azo=o("from_pretrained()"),nzo=o("to load the model weights."),szo=l(),zce=a("p"),lzo=o("Examples:"),izo=l(),f(ry.$$.fragment),dzo=l(),ro=a("div"),f(ty.$$.fragment),czo=l(),Wce=a("p"),fzo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mzo=l(),mn=a("p"),gzo=o("The model class to instantiate is selected based on the "),Qce=a("code"),hzo=o("model_type"),pzo=o(` property of the config object (either
passed as an argument or loaded from `),Hce=a("code"),_zo=o("pretrained_model_name_or_path"),uzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=a("code"),bzo=o("pretrained_model_name_or_path"),vzo=o(":"),Tzo=l(),Jce=a("ul"),Vv=a("li"),Yce=a("strong"),Fzo=o("detr"),Czo=o(" \u2014 "),QN=a("a"),Mzo=o("DetrForObjectDetection"),Ezo=o(" (DETR model)"),yzo=l(),zv=a("p"),wzo=o("The model is set in evaluation mode by default using "),Kce=a("code"),Azo=o("model.eval()"),Lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=a("code"),Bzo=o("model.train()"),xzo=l(),efe=a("p"),kzo=o("Examples:"),Rzo=l(),f(ay.$$.fragment),oke=l(),ac=a("h2"),Wv=a("a"),ofe=a("span"),f(ny.$$.fragment),Szo=l(),rfe=a("span"),Pzo=o("AutoModelForImageSegmentation"),rke=l(),_r=a("div"),f(sy.$$.fragment),$zo=l(),nc=a("p"),Izo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tfe=a("code"),jzo=o("from_pretrained()"),Dzo=o("class method or the "),afe=a("code"),Nzo=o("from_config()"),qzo=o(`class
method.`),Ozo=l(),ly=a("p"),Gzo=o("This class cannot be instantiated directly using "),nfe=a("code"),Xzo=o("__init__()"),Vzo=o(" (throws an error)."),zzo=l(),ct=a("div"),f(iy.$$.fragment),Wzo=l(),sfe=a("p"),Qzo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Hzo=l(),sc=a("p"),Uzo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),Jzo=o("not"),Yzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ife=a("code"),Kzo=o("from_pretrained()"),Zzo=o("to load the model weights."),eWo=l(),dfe=a("p"),oWo=o("Examples:"),rWo=l(),f(dy.$$.fragment),tWo=l(),to=a("div"),f(cy.$$.fragment),aWo=l(),cfe=a("p"),nWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),sWo=l(),gn=a("p"),lWo=o("The model class to instantiate is selected based on the "),ffe=a("code"),iWo=o("model_type"),dWo=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),cWo=o("pretrained_model_name_or_path"),fWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),mWo=o("pretrained_model_name_or_path"),gWo=o(":"),hWo=l(),hfe=a("ul"),Qv=a("li"),pfe=a("strong"),pWo=o("detr"),_Wo=o(" \u2014 "),HN=a("a"),uWo=o("DetrForSegmentation"),bWo=o(" (DETR model)"),vWo=l(),Hv=a("p"),TWo=o("The model is set in evaluation mode by default using "),_fe=a("code"),FWo=o("model.eval()"),CWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),MWo=o("model.train()"),EWo=l(),bfe=a("p"),yWo=o("Examples:"),wWo=l(),f(fy.$$.fragment),tke=l(),lc=a("h2"),Uv=a("a"),vfe=a("span"),f(my.$$.fragment),AWo=l(),Tfe=a("span"),LWo=o("AutoModelForSemanticSegmentation"),ake=l(),ur=a("div"),f(gy.$$.fragment),BWo=l(),ic=a("p"),xWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ffe=a("code"),kWo=o("from_pretrained()"),RWo=o("class method or the "),Cfe=a("code"),SWo=o("from_config()"),PWo=o(`class
method.`),$Wo=l(),hy=a("p"),IWo=o("This class cannot be instantiated directly using "),Mfe=a("code"),jWo=o("__init__()"),DWo=o(" (throws an error)."),NWo=l(),ft=a("div"),f(py.$$.fragment),qWo=l(),Efe=a("p"),OWo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GWo=l(),dc=a("p"),XWo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),VWo=o("not"),zWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=a("code"),WWo=o("from_pretrained()"),QWo=o("to load the model weights."),HWo=l(),Afe=a("p"),UWo=o("Examples:"),JWo=l(),f(_y.$$.fragment),YWo=l(),ao=a("div"),f(uy.$$.fragment),KWo=l(),Lfe=a("p"),ZWo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eQo=l(),hn=a("p"),oQo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),rQo=o("model_type"),tQo=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),aQo=o("pretrained_model_name_or_path"),nQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(":"),iQo=l(),by=a("ul"),Jv=a("li"),Rfe=a("strong"),dQo=o("beit"),cQo=o(" \u2014 "),UN=a("a"),fQo=o("BeitForSemanticSegmentation"),mQo=o(" (BEiT model)"),gQo=l(),Yv=a("li"),Sfe=a("strong"),hQo=o("segformer"),pQo=o(" \u2014 "),JN=a("a"),_Qo=o("SegformerForSemanticSegmentation"),uQo=o(" (SegFormer model)"),bQo=l(),Kv=a("p"),vQo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),TQo=o("model.eval()"),FQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=a("code"),CQo=o("model.train()"),MQo=l(),Ife=a("p"),EQo=o("Examples:"),yQo=l(),f(vy.$$.fragment),nke=l(),cc=a("h2"),Zv=a("a"),jfe=a("span"),f(Ty.$$.fragment),wQo=l(),Dfe=a("span"),AQo=o("AutoModelForInstanceSegmentation"),ske=l(),br=a("div"),f(Fy.$$.fragment),LQo=l(),fc=a("p"),BQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Nfe=a("code"),xQo=o("from_pretrained()"),kQo=o("class method or the "),qfe=a("code"),RQo=o("from_config()"),SQo=o(`class
method.`),PQo=l(),Cy=a("p"),$Qo=o("This class cannot be instantiated directly using "),Ofe=a("code"),IQo=o("__init__()"),jQo=o(" (throws an error)."),DQo=l(),mt=a("div"),f(My.$$.fragment),NQo=l(),Gfe=a("p"),qQo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OQo=l(),mc=a("p"),GQo=o(`Note:
Loading a model from its configuration file does `),Xfe=a("strong"),XQo=o("not"),VQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vfe=a("code"),zQo=o("from_pretrained()"),WQo=o("to load the model weights."),QQo=l(),zfe=a("p"),HQo=o("Examples:"),UQo=l(),f(Ey.$$.fragment),JQo=l(),no=a("div"),f(yy.$$.fragment),YQo=l(),Wfe=a("p"),KQo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ZQo=l(),pn=a("p"),eHo=o("The model class to instantiate is selected based on the "),Qfe=a("code"),oHo=o("model_type"),rHo=o(` property of the config object (either
passed as an argument or loaded from `),Hfe=a("code"),tHo=o("pretrained_model_name_or_path"),aHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=a("code"),nHo=o("pretrained_model_name_or_path"),sHo=o(":"),lHo=l(),Jfe=a("ul"),e0=a("li"),Yfe=a("strong"),iHo=o("maskformer"),dHo=o(" \u2014 "),YN=a("a"),cHo=o("MaskFormerForInstanceSegmentation"),fHo=o(" (MaskFormer model)"),mHo=l(),o0=a("p"),gHo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),hHo=o("model.eval()"),pHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),_Ho=o("model.train()"),uHo=l(),eme=a("p"),bHo=o("Examples:"),vHo=l(),f(wy.$$.fragment),lke=l(),gc=a("h2"),r0=a("a"),ome=a("span"),f(Ay.$$.fragment),THo=l(),rme=a("span"),FHo=o("TFAutoModel"),ike=l(),vr=a("div"),f(Ly.$$.fragment),CHo=l(),hc=a("p"),MHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tme=a("code"),EHo=o("from_pretrained()"),yHo=o("class method or the "),ame=a("code"),wHo=o("from_config()"),AHo=o(`class
method.`),LHo=l(),By=a("p"),BHo=o("This class cannot be instantiated directly using "),nme=a("code"),xHo=o("__init__()"),kHo=o(" (throws an error)."),RHo=l(),gt=a("div"),f(xy.$$.fragment),SHo=l(),sme=a("p"),PHo=o("Instantiates one of the base model classes of the library from a configuration."),$Ho=l(),pc=a("p"),IHo=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),jHo=o("not"),DHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ime=a("code"),NHo=o("from_pretrained()"),qHo=o("to load the model weights."),OHo=l(),dme=a("p"),GHo=o("Examples:"),XHo=l(),f(ky.$$.fragment),VHo=l(),ho=a("div"),f(Ry.$$.fragment),zHo=l(),cme=a("p"),WHo=o("Instantiate one of the base model classes of the library from a pretrained model."),QHo=l(),_n=a("p"),HHo=o("The model class to instantiate is selected based on the "),fme=a("code"),UHo=o("model_type"),JHo=o(` property of the config object (either
passed as an argument or loaded from `),mme=a("code"),YHo=o("pretrained_model_name_or_path"),KHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),ZHo=o("pretrained_model_name_or_path"),eUo=o(":"),oUo=l(),B=a("ul"),t0=a("li"),hme=a("strong"),rUo=o("albert"),tUo=o(" \u2014 "),KN=a("a"),aUo=o("TFAlbertModel"),nUo=o(" (ALBERT model)"),sUo=l(),a0=a("li"),pme=a("strong"),lUo=o("bart"),iUo=o(" \u2014 "),ZN=a("a"),dUo=o("TFBartModel"),cUo=o(" (BART model)"),fUo=l(),n0=a("li"),_me=a("strong"),mUo=o("bert"),gUo=o(" \u2014 "),eq=a("a"),hUo=o("TFBertModel"),pUo=o(" (BERT model)"),_Uo=l(),s0=a("li"),ume=a("strong"),uUo=o("blenderbot"),bUo=o(" \u2014 "),oq=a("a"),vUo=o("TFBlenderbotModel"),TUo=o(" (Blenderbot model)"),FUo=l(),l0=a("li"),bme=a("strong"),CUo=o("blenderbot-small"),MUo=o(" \u2014 "),rq=a("a"),EUo=o("TFBlenderbotSmallModel"),yUo=o(" (BlenderbotSmall model)"),wUo=l(),i0=a("li"),vme=a("strong"),AUo=o("camembert"),LUo=o(" \u2014 "),tq=a("a"),BUo=o("TFCamembertModel"),xUo=o(" (CamemBERT model)"),kUo=l(),d0=a("li"),Tme=a("strong"),RUo=o("clip"),SUo=o(" \u2014 "),aq=a("a"),PUo=o("TFCLIPModel"),$Uo=o(" (CLIP model)"),IUo=l(),c0=a("li"),Fme=a("strong"),jUo=o("convbert"),DUo=o(" \u2014 "),nq=a("a"),NUo=o("TFConvBertModel"),qUo=o(" (ConvBERT model)"),OUo=l(),f0=a("li"),Cme=a("strong"),GUo=o("convnext"),XUo=o(" \u2014 "),sq=a("a"),VUo=o("TFConvNextModel"),zUo=o(" (ConvNext model)"),WUo=l(),m0=a("li"),Mme=a("strong"),QUo=o("ctrl"),HUo=o(" \u2014 "),lq=a("a"),UUo=o("TFCTRLModel"),JUo=o(" (CTRL model)"),YUo=l(),g0=a("li"),Eme=a("strong"),KUo=o("deberta"),ZUo=o(" \u2014 "),iq=a("a"),eJo=o("TFDebertaModel"),oJo=o(" (DeBERTa model)"),rJo=l(),h0=a("li"),yme=a("strong"),tJo=o("deberta-v2"),aJo=o(" \u2014 "),dq=a("a"),nJo=o("TFDebertaV2Model"),sJo=o(" (DeBERTa-v2 model)"),lJo=l(),p0=a("li"),wme=a("strong"),iJo=o("distilbert"),dJo=o(" \u2014 "),cq=a("a"),cJo=o("TFDistilBertModel"),fJo=o(" (DistilBERT model)"),mJo=l(),_0=a("li"),Ame=a("strong"),gJo=o("dpr"),hJo=o(" \u2014 "),fq=a("a"),pJo=o("TFDPRQuestionEncoder"),_Jo=o(" (DPR model)"),uJo=l(),u0=a("li"),Lme=a("strong"),bJo=o("electra"),vJo=o(" \u2014 "),mq=a("a"),TJo=o("TFElectraModel"),FJo=o(" (ELECTRA model)"),CJo=l(),b0=a("li"),Bme=a("strong"),MJo=o("flaubert"),EJo=o(" \u2014 "),gq=a("a"),yJo=o("TFFlaubertModel"),wJo=o(" (FlauBERT model)"),AJo=l(),Os=a("li"),xme=a("strong"),LJo=o("funnel"),BJo=o(" \u2014 "),hq=a("a"),xJo=o("TFFunnelModel"),kJo=o(" or "),pq=a("a"),RJo=o("TFFunnelBaseModel"),SJo=o(" (Funnel Transformer model)"),PJo=l(),v0=a("li"),kme=a("strong"),$Jo=o("gpt2"),IJo=o(" \u2014 "),_q=a("a"),jJo=o("TFGPT2Model"),DJo=o(" (OpenAI GPT-2 model)"),NJo=l(),T0=a("li"),Rme=a("strong"),qJo=o("hubert"),OJo=o(" \u2014 "),uq=a("a"),GJo=o("TFHubertModel"),XJo=o(" (Hubert model)"),VJo=l(),F0=a("li"),Sme=a("strong"),zJo=o("layoutlm"),WJo=o(" \u2014 "),bq=a("a"),QJo=o("TFLayoutLMModel"),HJo=o(" (LayoutLM model)"),UJo=l(),C0=a("li"),Pme=a("strong"),JJo=o("led"),YJo=o(" \u2014 "),vq=a("a"),KJo=o("TFLEDModel"),ZJo=o(" (LED model)"),eYo=l(),M0=a("li"),$me=a("strong"),oYo=o("longformer"),rYo=o(" \u2014 "),Tq=a("a"),tYo=o("TFLongformerModel"),aYo=o(" (Longformer model)"),nYo=l(),E0=a("li"),Ime=a("strong"),sYo=o("lxmert"),lYo=o(" \u2014 "),Fq=a("a"),iYo=o("TFLxmertModel"),dYo=o(" (LXMERT model)"),cYo=l(),y0=a("li"),jme=a("strong"),fYo=o("marian"),mYo=o(" \u2014 "),Cq=a("a"),gYo=o("TFMarianModel"),hYo=o(" (Marian model)"),pYo=l(),w0=a("li"),Dme=a("strong"),_Yo=o("mbart"),uYo=o(" \u2014 "),Mq=a("a"),bYo=o("TFMBartModel"),vYo=o(" (mBART model)"),TYo=l(),A0=a("li"),Nme=a("strong"),FYo=o("mobilebert"),CYo=o(" \u2014 "),Eq=a("a"),MYo=o("TFMobileBertModel"),EYo=o(" (MobileBERT model)"),yYo=l(),L0=a("li"),qme=a("strong"),wYo=o("mpnet"),AYo=o(" \u2014 "),yq=a("a"),LYo=o("TFMPNetModel"),BYo=o(" (MPNet model)"),xYo=l(),B0=a("li"),Ome=a("strong"),kYo=o("mt5"),RYo=o(" \u2014 "),wq=a("a"),SYo=o("TFMT5Model"),PYo=o(" (mT5 model)"),$Yo=l(),x0=a("li"),Gme=a("strong"),IYo=o("openai-gpt"),jYo=o(" \u2014 "),Aq=a("a"),DYo=o("TFOpenAIGPTModel"),NYo=o(" (OpenAI GPT model)"),qYo=l(),k0=a("li"),Xme=a("strong"),OYo=o("pegasus"),GYo=o(" \u2014 "),Lq=a("a"),XYo=o("TFPegasusModel"),VYo=o(" (Pegasus model)"),zYo=l(),R0=a("li"),Vme=a("strong"),WYo=o("rembert"),QYo=o(" \u2014 "),Bq=a("a"),HYo=o("TFRemBertModel"),UYo=o(" (RemBERT model)"),JYo=l(),S0=a("li"),zme=a("strong"),YYo=o("roberta"),KYo=o(" \u2014 "),xq=a("a"),ZYo=o("TFRobertaModel"),eKo=o(" (RoBERTa model)"),oKo=l(),P0=a("li"),Wme=a("strong"),rKo=o("roformer"),tKo=o(" \u2014 "),kq=a("a"),aKo=o("TFRoFormerModel"),nKo=o(" (RoFormer model)"),sKo=l(),$0=a("li"),Qme=a("strong"),lKo=o("speech_to_text"),iKo=o(" \u2014 "),Rq=a("a"),dKo=o("TFSpeech2TextModel"),cKo=o(" (Speech2Text model)"),fKo=l(),I0=a("li"),Hme=a("strong"),mKo=o("t5"),gKo=o(" \u2014 "),Sq=a("a"),hKo=o("TFT5Model"),pKo=o(" (T5 model)"),_Ko=l(),j0=a("li"),Ume=a("strong"),uKo=o("tapas"),bKo=o(" \u2014 "),Pq=a("a"),vKo=o("TFTapasModel"),TKo=o(" (TAPAS model)"),FKo=l(),D0=a("li"),Jme=a("strong"),CKo=o("transfo-xl"),MKo=o(" \u2014 "),$q=a("a"),EKo=o("TFTransfoXLModel"),yKo=o(" (Transformer-XL model)"),wKo=l(),N0=a("li"),Yme=a("strong"),AKo=o("vit"),LKo=o(" \u2014 "),Iq=a("a"),BKo=o("TFViTModel"),xKo=o(" (ViT model)"),kKo=l(),q0=a("li"),Kme=a("strong"),RKo=o("wav2vec2"),SKo=o(" \u2014 "),jq=a("a"),PKo=o("TFWav2Vec2Model"),$Ko=o(" (Wav2Vec2 model)"),IKo=l(),O0=a("li"),Zme=a("strong"),jKo=o("xlm"),DKo=o(" \u2014 "),Dq=a("a"),NKo=o("TFXLMModel"),qKo=o(" (XLM model)"),OKo=l(),G0=a("li"),ege=a("strong"),GKo=o("xlm-roberta"),XKo=o(" \u2014 "),Nq=a("a"),VKo=o("TFXLMRobertaModel"),zKo=o(" (XLM-RoBERTa model)"),WKo=l(),X0=a("li"),oge=a("strong"),QKo=o("xlnet"),HKo=o(" \u2014 "),qq=a("a"),UKo=o("TFXLNetModel"),JKo=o(" (XLNet model)"),YKo=l(),rge=a("p"),KKo=o("Examples:"),ZKo=l(),f(Sy.$$.fragment),dke=l(),_c=a("h2"),V0=a("a"),tge=a("span"),f(Py.$$.fragment),eZo=l(),age=a("span"),oZo=o("TFAutoModelForPreTraining"),cke=l(),Tr=a("div"),f($y.$$.fragment),rZo=l(),uc=a("p"),tZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nge=a("code"),aZo=o("from_pretrained()"),nZo=o("class method or the "),sge=a("code"),sZo=o("from_config()"),lZo=o(`class
method.`),iZo=l(),Iy=a("p"),dZo=o("This class cannot be instantiated directly using "),lge=a("code"),cZo=o("__init__()"),fZo=o(" (throws an error)."),mZo=l(),ht=a("div"),f(jy.$$.fragment),gZo=l(),ige=a("p"),hZo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pZo=l(),bc=a("p"),_Zo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),uZo=o("not"),bZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=a("code"),vZo=o("from_pretrained()"),TZo=o("to load the model weights."),FZo=l(),fge=a("p"),CZo=o("Examples:"),MZo=l(),f(Dy.$$.fragment),EZo=l(),po=a("div"),f(Ny.$$.fragment),yZo=l(),mge=a("p"),wZo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),AZo=l(),un=a("p"),LZo=o("The model class to instantiate is selected based on the "),gge=a("code"),BZo=o("model_type"),xZo=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),kZo=o("pretrained_model_name_or_path"),RZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=a("code"),SZo=o("pretrained_model_name_or_path"),PZo=o(":"),$Zo=l(),H=a("ul"),z0=a("li"),_ge=a("strong"),IZo=o("albert"),jZo=o(" \u2014 "),Oq=a("a"),DZo=o("TFAlbertForPreTraining"),NZo=o(" (ALBERT model)"),qZo=l(),W0=a("li"),uge=a("strong"),OZo=o("bart"),GZo=o(" \u2014 "),Gq=a("a"),XZo=o("TFBartForConditionalGeneration"),VZo=o(" (BART model)"),zZo=l(),Q0=a("li"),bge=a("strong"),WZo=o("bert"),QZo=o(" \u2014 "),Xq=a("a"),HZo=o("TFBertForPreTraining"),UZo=o(" (BERT model)"),JZo=l(),H0=a("li"),vge=a("strong"),YZo=o("camembert"),KZo=o(" \u2014 "),Vq=a("a"),ZZo=o("TFCamembertForMaskedLM"),eer=o(" (CamemBERT model)"),oer=l(),U0=a("li"),Tge=a("strong"),rer=o("ctrl"),ter=o(" \u2014 "),zq=a("a"),aer=o("TFCTRLLMHeadModel"),ner=o(" (CTRL model)"),ser=l(),J0=a("li"),Fge=a("strong"),ler=o("distilbert"),ier=o(" \u2014 "),Wq=a("a"),der=o("TFDistilBertForMaskedLM"),cer=o(" (DistilBERT model)"),fer=l(),Y0=a("li"),Cge=a("strong"),mer=o("electra"),ger=o(" \u2014 "),Qq=a("a"),her=o("TFElectraForPreTraining"),per=o(" (ELECTRA model)"),_er=l(),K0=a("li"),Mge=a("strong"),uer=o("flaubert"),ber=o(" \u2014 "),Hq=a("a"),ver=o("TFFlaubertWithLMHeadModel"),Ter=o(" (FlauBERT model)"),Fer=l(),Z0=a("li"),Ege=a("strong"),Cer=o("funnel"),Mer=o(" \u2014 "),Uq=a("a"),Eer=o("TFFunnelForPreTraining"),yer=o(" (Funnel Transformer model)"),wer=l(),eT=a("li"),yge=a("strong"),Aer=o("gpt2"),Ler=o(" \u2014 "),Jq=a("a"),Ber=o("TFGPT2LMHeadModel"),xer=o(" (OpenAI GPT-2 model)"),ker=l(),oT=a("li"),wge=a("strong"),Rer=o("layoutlm"),Ser=o(" \u2014 "),Yq=a("a"),Per=o("TFLayoutLMForMaskedLM"),$er=o(" (LayoutLM model)"),Ier=l(),rT=a("li"),Age=a("strong"),jer=o("lxmert"),Der=o(" \u2014 "),Kq=a("a"),Ner=o("TFLxmertForPreTraining"),qer=o(" (LXMERT model)"),Oer=l(),tT=a("li"),Lge=a("strong"),Ger=o("mobilebert"),Xer=o(" \u2014 "),Zq=a("a"),Ver=o("TFMobileBertForPreTraining"),zer=o(" (MobileBERT model)"),Wer=l(),aT=a("li"),Bge=a("strong"),Qer=o("mpnet"),Her=o(" \u2014 "),eO=a("a"),Uer=o("TFMPNetForMaskedLM"),Jer=o(" (MPNet model)"),Yer=l(),nT=a("li"),xge=a("strong"),Ker=o("openai-gpt"),Zer=o(" \u2014 "),oO=a("a"),eor=o("TFOpenAIGPTLMHeadModel"),oor=o(" (OpenAI GPT model)"),ror=l(),sT=a("li"),kge=a("strong"),tor=o("roberta"),aor=o(" \u2014 "),rO=a("a"),nor=o("TFRobertaForMaskedLM"),sor=o(" (RoBERTa model)"),lor=l(),lT=a("li"),Rge=a("strong"),ior=o("t5"),dor=o(" \u2014 "),tO=a("a"),cor=o("TFT5ForConditionalGeneration"),mor=o(" (T5 model)"),gor=l(),iT=a("li"),Sge=a("strong"),hor=o("tapas"),por=o(" \u2014 "),aO=a("a"),_or=o("TFTapasForMaskedLM"),uor=o(" (TAPAS model)"),bor=l(),dT=a("li"),Pge=a("strong"),vor=o("transfo-xl"),Tor=o(" \u2014 "),nO=a("a"),For=o("TFTransfoXLLMHeadModel"),Cor=o(" (Transformer-XL model)"),Mor=l(),cT=a("li"),$ge=a("strong"),Eor=o("xlm"),yor=o(" \u2014 "),sO=a("a"),wor=o("TFXLMWithLMHeadModel"),Aor=o(" (XLM model)"),Lor=l(),fT=a("li"),Ige=a("strong"),Bor=o("xlm-roberta"),xor=o(" \u2014 "),lO=a("a"),kor=o("TFXLMRobertaForMaskedLM"),Ror=o(" (XLM-RoBERTa model)"),Sor=l(),mT=a("li"),jge=a("strong"),Por=o("xlnet"),$or=o(" \u2014 "),iO=a("a"),Ior=o("TFXLNetLMHeadModel"),jor=o(" (XLNet model)"),Dor=l(),Dge=a("p"),Nor=o("Examples:"),qor=l(),f(qy.$$.fragment),fke=l(),vc=a("h2"),gT=a("a"),Nge=a("span"),f(Oy.$$.fragment),Oor=l(),qge=a("span"),Gor=o("TFAutoModelForCausalLM"),mke=l(),Fr=a("div"),f(Gy.$$.fragment),Xor=l(),Tc=a("p"),Vor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oge=a("code"),zor=o("from_pretrained()"),Wor=o("class method or the "),Gge=a("code"),Qor=o("from_config()"),Hor=o(`class
method.`),Uor=l(),Xy=a("p"),Jor=o("This class cannot be instantiated directly using "),Xge=a("code"),Yor=o("__init__()"),Kor=o(" (throws an error)."),Zor=l(),pt=a("div"),f(Vy.$$.fragment),err=l(),Vge=a("p"),orr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rrr=l(),Fc=a("p"),trr=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),arr=o("not"),nrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wge=a("code"),srr=o("from_pretrained()"),lrr=o("to load the model weights."),irr=l(),Qge=a("p"),drr=o("Examples:"),crr=l(),f(zy.$$.fragment),frr=l(),_o=a("div"),f(Wy.$$.fragment),mrr=l(),Hge=a("p"),grr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hrr=l(),bn=a("p"),prr=o("The model class to instantiate is selected based on the "),Uge=a("code"),_rr=o("model_type"),urr=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),brr=o("pretrained_model_name_or_path"),vrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),Trr=o("pretrained_model_name_or_path"),Frr=o(":"),Crr=l(),pe=a("ul"),hT=a("li"),Kge=a("strong"),Mrr=o("bert"),Err=o(" \u2014 "),dO=a("a"),yrr=o("TFBertLMHeadModel"),wrr=o(" (BERT model)"),Arr=l(),pT=a("li"),Zge=a("strong"),Lrr=o("ctrl"),Brr=o(" \u2014 "),cO=a("a"),xrr=o("TFCTRLLMHeadModel"),krr=o(" (CTRL model)"),Rrr=l(),_T=a("li"),ehe=a("strong"),Srr=o("gpt2"),Prr=o(" \u2014 "),fO=a("a"),$rr=o("TFGPT2LMHeadModel"),Irr=o(" (OpenAI GPT-2 model)"),jrr=l(),uT=a("li"),ohe=a("strong"),Drr=o("openai-gpt"),Nrr=o(" \u2014 "),mO=a("a"),qrr=o("TFOpenAIGPTLMHeadModel"),Orr=o(" (OpenAI GPT model)"),Grr=l(),bT=a("li"),rhe=a("strong"),Xrr=o("rembert"),Vrr=o(" \u2014 "),gO=a("a"),zrr=o("TFRemBertForCausalLM"),Wrr=o(" (RemBERT model)"),Qrr=l(),vT=a("li"),the=a("strong"),Hrr=o("roberta"),Urr=o(" \u2014 "),hO=a("a"),Jrr=o("TFRobertaForCausalLM"),Yrr=o(" (RoBERTa model)"),Krr=l(),TT=a("li"),ahe=a("strong"),Zrr=o("roformer"),etr=o(" \u2014 "),pO=a("a"),otr=o("TFRoFormerForCausalLM"),rtr=o(" (RoFormer model)"),ttr=l(),FT=a("li"),nhe=a("strong"),atr=o("transfo-xl"),ntr=o(" \u2014 "),_O=a("a"),str=o("TFTransfoXLLMHeadModel"),ltr=o(" (Transformer-XL model)"),itr=l(),CT=a("li"),she=a("strong"),dtr=o("xlm"),ctr=o(" \u2014 "),uO=a("a"),ftr=o("TFXLMWithLMHeadModel"),mtr=o(" (XLM model)"),gtr=l(),MT=a("li"),lhe=a("strong"),htr=o("xlnet"),ptr=o(" \u2014 "),bO=a("a"),_tr=o("TFXLNetLMHeadModel"),utr=o(" (XLNet model)"),btr=l(),ihe=a("p"),vtr=o("Examples:"),Ttr=l(),f(Qy.$$.fragment),gke=l(),Cc=a("h2"),ET=a("a"),dhe=a("span"),f(Hy.$$.fragment),Ftr=l(),che=a("span"),Ctr=o("TFAutoModelForImageClassification"),hke=l(),Cr=a("div"),f(Uy.$$.fragment),Mtr=l(),Mc=a("p"),Etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fhe=a("code"),ytr=o("from_pretrained()"),wtr=o("class method or the "),mhe=a("code"),Atr=o("from_config()"),Ltr=o(`class
method.`),Btr=l(),Jy=a("p"),xtr=o("This class cannot be instantiated directly using "),ghe=a("code"),ktr=o("__init__()"),Rtr=o(" (throws an error)."),Str=l(),_t=a("div"),f(Yy.$$.fragment),Ptr=l(),hhe=a("p"),$tr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Itr=l(),Ec=a("p"),jtr=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),Dtr=o("not"),Ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_he=a("code"),qtr=o("from_pretrained()"),Otr=o("to load the model weights."),Gtr=l(),uhe=a("p"),Xtr=o("Examples:"),Vtr=l(),f(Ky.$$.fragment),ztr=l(),uo=a("div"),f(Zy.$$.fragment),Wtr=l(),bhe=a("p"),Qtr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Htr=l(),vn=a("p"),Utr=o("The model class to instantiate is selected based on the "),vhe=a("code"),Jtr=o("model_type"),Ytr=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),Ktr=o("pretrained_model_name_or_path"),Ztr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),ear=o("pretrained_model_name_or_path"),oar=o(":"),rar=l(),ew=a("ul"),yT=a("li"),Che=a("strong"),tar=o("convnext"),aar=o(" \u2014 "),vO=a("a"),nar=o("TFConvNextForImageClassification"),sar=o(" (ConvNext model)"),lar=l(),wT=a("li"),Mhe=a("strong"),iar=o("vit"),dar=o(" \u2014 "),TO=a("a"),car=o("TFViTForImageClassification"),far=o(" (ViT model)"),mar=l(),Ehe=a("p"),gar=o("Examples:"),har=l(),f(ow.$$.fragment),pke=l(),yc=a("h2"),AT=a("a"),yhe=a("span"),f(rw.$$.fragment),par=l(),whe=a("span"),_ar=o("TFAutoModelForMaskedLM"),_ke=l(),Mr=a("div"),f(tw.$$.fragment),uar=l(),wc=a("p"),bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ahe=a("code"),Tar=o("from_pretrained()"),Far=o("class method or the "),Lhe=a("code"),Car=o("from_config()"),Mar=o(`class
method.`),Ear=l(),aw=a("p"),yar=o("This class cannot be instantiated directly using "),Bhe=a("code"),war=o("__init__()"),Aar=o(" (throws an error)."),Lar=l(),ut=a("div"),f(nw.$$.fragment),Bar=l(),xhe=a("p"),xar=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kar=l(),Ac=a("p"),Rar=o(`Note:
Loading a model from its configuration file does `),khe=a("strong"),Sar=o("not"),Par=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rhe=a("code"),$ar=o("from_pretrained()"),Iar=o("to load the model weights."),jar=l(),She=a("p"),Dar=o("Examples:"),Nar=l(),f(sw.$$.fragment),qar=l(),bo=a("div"),f(lw.$$.fragment),Oar=l(),Phe=a("p"),Gar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Xar=l(),Tn=a("p"),Var=o("The model class to instantiate is selected based on the "),$he=a("code"),zar=o("model_type"),War=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),Qar=o("pretrained_model_name_or_path"),Har=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),Uar=o("pretrained_model_name_or_path"),Jar=o(":"),Yar=l(),Y=a("ul"),LT=a("li"),Dhe=a("strong"),Kar=o("albert"),Zar=o(" \u2014 "),FO=a("a"),enr=o("TFAlbertForMaskedLM"),onr=o(" (ALBERT model)"),rnr=l(),BT=a("li"),Nhe=a("strong"),tnr=o("bert"),anr=o(" \u2014 "),CO=a("a"),nnr=o("TFBertForMaskedLM"),snr=o(" (BERT model)"),lnr=l(),xT=a("li"),qhe=a("strong"),inr=o("camembert"),dnr=o(" \u2014 "),MO=a("a"),cnr=o("TFCamembertForMaskedLM"),fnr=o(" (CamemBERT model)"),mnr=l(),kT=a("li"),Ohe=a("strong"),gnr=o("convbert"),hnr=o(" \u2014 "),EO=a("a"),pnr=o("TFConvBertForMaskedLM"),_nr=o(" (ConvBERT model)"),unr=l(),RT=a("li"),Ghe=a("strong"),bnr=o("deberta"),vnr=o(" \u2014 "),yO=a("a"),Tnr=o("TFDebertaForMaskedLM"),Fnr=o(" (DeBERTa model)"),Cnr=l(),ST=a("li"),Xhe=a("strong"),Mnr=o("deberta-v2"),Enr=o(" \u2014 "),wO=a("a"),ynr=o("TFDebertaV2ForMaskedLM"),wnr=o(" (DeBERTa-v2 model)"),Anr=l(),PT=a("li"),Vhe=a("strong"),Lnr=o("distilbert"),Bnr=o(" \u2014 "),AO=a("a"),xnr=o("TFDistilBertForMaskedLM"),knr=o(" (DistilBERT model)"),Rnr=l(),$T=a("li"),zhe=a("strong"),Snr=o("electra"),Pnr=o(" \u2014 "),LO=a("a"),$nr=o("TFElectraForMaskedLM"),Inr=o(" (ELECTRA model)"),jnr=l(),IT=a("li"),Whe=a("strong"),Dnr=o("flaubert"),Nnr=o(" \u2014 "),BO=a("a"),qnr=o("TFFlaubertWithLMHeadModel"),Onr=o(" (FlauBERT model)"),Gnr=l(),jT=a("li"),Qhe=a("strong"),Xnr=o("funnel"),Vnr=o(" \u2014 "),xO=a("a"),znr=o("TFFunnelForMaskedLM"),Wnr=o(" (Funnel Transformer model)"),Qnr=l(),DT=a("li"),Hhe=a("strong"),Hnr=o("layoutlm"),Unr=o(" \u2014 "),kO=a("a"),Jnr=o("TFLayoutLMForMaskedLM"),Ynr=o(" (LayoutLM model)"),Knr=l(),NT=a("li"),Uhe=a("strong"),Znr=o("longformer"),esr=o(" \u2014 "),RO=a("a"),osr=o("TFLongformerForMaskedLM"),rsr=o(" (Longformer model)"),tsr=l(),qT=a("li"),Jhe=a("strong"),asr=o("mobilebert"),nsr=o(" \u2014 "),SO=a("a"),ssr=o("TFMobileBertForMaskedLM"),lsr=o(" (MobileBERT model)"),isr=l(),OT=a("li"),Yhe=a("strong"),dsr=o("mpnet"),csr=o(" \u2014 "),PO=a("a"),fsr=o("TFMPNetForMaskedLM"),msr=o(" (MPNet model)"),gsr=l(),GT=a("li"),Khe=a("strong"),hsr=o("rembert"),psr=o(" \u2014 "),$O=a("a"),_sr=o("TFRemBertForMaskedLM"),usr=o(" (RemBERT model)"),bsr=l(),XT=a("li"),Zhe=a("strong"),vsr=o("roberta"),Tsr=o(" \u2014 "),IO=a("a"),Fsr=o("TFRobertaForMaskedLM"),Csr=o(" (RoBERTa model)"),Msr=l(),VT=a("li"),epe=a("strong"),Esr=o("roformer"),ysr=o(" \u2014 "),jO=a("a"),wsr=o("TFRoFormerForMaskedLM"),Asr=o(" (RoFormer model)"),Lsr=l(),zT=a("li"),ope=a("strong"),Bsr=o("tapas"),xsr=o(" \u2014 "),DO=a("a"),ksr=o("TFTapasForMaskedLM"),Rsr=o(" (TAPAS model)"),Ssr=l(),WT=a("li"),rpe=a("strong"),Psr=o("xlm"),$sr=o(" \u2014 "),NO=a("a"),Isr=o("TFXLMWithLMHeadModel"),jsr=o(" (XLM model)"),Dsr=l(),QT=a("li"),tpe=a("strong"),Nsr=o("xlm-roberta"),qsr=o(" \u2014 "),qO=a("a"),Osr=o("TFXLMRobertaForMaskedLM"),Gsr=o(" (XLM-RoBERTa model)"),Xsr=l(),ape=a("p"),Vsr=o("Examples:"),zsr=l(),f(iw.$$.fragment),uke=l(),Lc=a("h2"),HT=a("a"),npe=a("span"),f(dw.$$.fragment),Wsr=l(),spe=a("span"),Qsr=o("TFAutoModelForSeq2SeqLM"),bke=l(),Er=a("div"),f(cw.$$.fragment),Hsr=l(),Bc=a("p"),Usr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lpe=a("code"),Jsr=o("from_pretrained()"),Ysr=o("class method or the "),ipe=a("code"),Ksr=o("from_config()"),Zsr=o(`class
method.`),elr=l(),fw=a("p"),olr=o("This class cannot be instantiated directly using "),dpe=a("code"),rlr=o("__init__()"),tlr=o(" (throws an error)."),alr=l(),bt=a("div"),f(mw.$$.fragment),nlr=l(),cpe=a("p"),slr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),llr=l(),xc=a("p"),ilr=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),dlr=o("not"),clr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mpe=a("code"),flr=o("from_pretrained()"),mlr=o("to load the model weights."),glr=l(),gpe=a("p"),hlr=o("Examples:"),plr=l(),f(gw.$$.fragment),_lr=l(),vo=a("div"),f(hw.$$.fragment),ulr=l(),hpe=a("p"),blr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vlr=l(),Fn=a("p"),Tlr=o("The model class to instantiate is selected based on the "),ppe=a("code"),Flr=o("model_type"),Clr=o(` property of the config object (either
passed as an argument or loaded from `),_pe=a("code"),Mlr=o("pretrained_model_name_or_path"),Elr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),ylr=o("pretrained_model_name_or_path"),wlr=o(":"),Alr=l(),_e=a("ul"),UT=a("li"),bpe=a("strong"),Llr=o("bart"),Blr=o(" \u2014 "),OO=a("a"),xlr=o("TFBartForConditionalGeneration"),klr=o(" (BART model)"),Rlr=l(),JT=a("li"),vpe=a("strong"),Slr=o("blenderbot"),Plr=o(" \u2014 "),GO=a("a"),$lr=o("TFBlenderbotForConditionalGeneration"),Ilr=o(" (Blenderbot model)"),jlr=l(),YT=a("li"),Tpe=a("strong"),Dlr=o("blenderbot-small"),Nlr=o(" \u2014 "),XO=a("a"),qlr=o("TFBlenderbotSmallForConditionalGeneration"),Olr=o(" (BlenderbotSmall model)"),Glr=l(),KT=a("li"),Fpe=a("strong"),Xlr=o("encoder-decoder"),Vlr=o(" \u2014 "),VO=a("a"),zlr=o("TFEncoderDecoderModel"),Wlr=o(" (Encoder decoder model)"),Qlr=l(),ZT=a("li"),Cpe=a("strong"),Hlr=o("led"),Ulr=o(" \u2014 "),zO=a("a"),Jlr=o("TFLEDForConditionalGeneration"),Ylr=o(" (LED model)"),Klr=l(),e7=a("li"),Mpe=a("strong"),Zlr=o("marian"),eir=o(" \u2014 "),WO=a("a"),oir=o("TFMarianMTModel"),rir=o(" (Marian model)"),tir=l(),o7=a("li"),Epe=a("strong"),air=o("mbart"),nir=o(" \u2014 "),QO=a("a"),sir=o("TFMBartForConditionalGeneration"),lir=o(" (mBART model)"),iir=l(),r7=a("li"),ype=a("strong"),dir=o("mt5"),cir=o(" \u2014 "),HO=a("a"),fir=o("TFMT5ForConditionalGeneration"),mir=o(" (mT5 model)"),gir=l(),t7=a("li"),wpe=a("strong"),hir=o("pegasus"),pir=o(" \u2014 "),UO=a("a"),_ir=o("TFPegasusForConditionalGeneration"),uir=o(" (Pegasus model)"),bir=l(),a7=a("li"),Ape=a("strong"),vir=o("t5"),Tir=o(" \u2014 "),JO=a("a"),Fir=o("TFT5ForConditionalGeneration"),Cir=o(" (T5 model)"),Mir=l(),Lpe=a("p"),Eir=o("Examples:"),yir=l(),f(pw.$$.fragment),vke=l(),kc=a("h2"),n7=a("a"),Bpe=a("span"),f(_w.$$.fragment),wir=l(),xpe=a("span"),Air=o("TFAutoModelForSequenceClassification"),Tke=l(),yr=a("div"),f(uw.$$.fragment),Lir=l(),Rc=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kpe=a("code"),xir=o("from_pretrained()"),kir=o("class method or the "),Rpe=a("code"),Rir=o("from_config()"),Sir=o(`class
method.`),Pir=l(),bw=a("p"),$ir=o("This class cannot be instantiated directly using "),Spe=a("code"),Iir=o("__init__()"),jir=o(" (throws an error)."),Dir=l(),vt=a("div"),f(vw.$$.fragment),Nir=l(),Ppe=a("p"),qir=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Oir=l(),Sc=a("p"),Gir=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),Xir=o("not"),Vir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ipe=a("code"),zir=o("from_pretrained()"),Wir=o("to load the model weights."),Qir=l(),jpe=a("p"),Hir=o("Examples:"),Uir=l(),f(Tw.$$.fragment),Jir=l(),To=a("div"),f(Fw.$$.fragment),Yir=l(),Dpe=a("p"),Kir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zir=l(),Cn=a("p"),edr=o("The model class to instantiate is selected based on the "),Npe=a("code"),odr=o("model_type"),rdr=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),tdr=o("pretrained_model_name_or_path"),adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),ndr=o("pretrained_model_name_or_path"),sdr=o(":"),ldr=l(),V=a("ul"),s7=a("li"),Gpe=a("strong"),idr=o("albert"),ddr=o(" \u2014 "),YO=a("a"),cdr=o("TFAlbertForSequenceClassification"),fdr=o(" (ALBERT model)"),mdr=l(),l7=a("li"),Xpe=a("strong"),gdr=o("bert"),hdr=o(" \u2014 "),KO=a("a"),pdr=o("TFBertForSequenceClassification"),_dr=o(" (BERT model)"),udr=l(),i7=a("li"),Vpe=a("strong"),bdr=o("camembert"),vdr=o(" \u2014 "),ZO=a("a"),Tdr=o("TFCamembertForSequenceClassification"),Fdr=o(" (CamemBERT model)"),Cdr=l(),d7=a("li"),zpe=a("strong"),Mdr=o("convbert"),Edr=o(" \u2014 "),eG=a("a"),ydr=o("TFConvBertForSequenceClassification"),wdr=o(" (ConvBERT model)"),Adr=l(),c7=a("li"),Wpe=a("strong"),Ldr=o("ctrl"),Bdr=o(" \u2014 "),oG=a("a"),xdr=o("TFCTRLForSequenceClassification"),kdr=o(" (CTRL model)"),Rdr=l(),f7=a("li"),Qpe=a("strong"),Sdr=o("deberta"),Pdr=o(" \u2014 "),rG=a("a"),$dr=o("TFDebertaForSequenceClassification"),Idr=o(" (DeBERTa model)"),jdr=l(),m7=a("li"),Hpe=a("strong"),Ddr=o("deberta-v2"),Ndr=o(" \u2014 "),tG=a("a"),qdr=o("TFDebertaV2ForSequenceClassification"),Odr=o(" (DeBERTa-v2 model)"),Gdr=l(),g7=a("li"),Upe=a("strong"),Xdr=o("distilbert"),Vdr=o(" \u2014 "),aG=a("a"),zdr=o("TFDistilBertForSequenceClassification"),Wdr=o(" (DistilBERT model)"),Qdr=l(),h7=a("li"),Jpe=a("strong"),Hdr=o("electra"),Udr=o(" \u2014 "),nG=a("a"),Jdr=o("TFElectraForSequenceClassification"),Ydr=o(" (ELECTRA model)"),Kdr=l(),p7=a("li"),Ype=a("strong"),Zdr=o("flaubert"),ecr=o(" \u2014 "),sG=a("a"),ocr=o("TFFlaubertForSequenceClassification"),rcr=o(" (FlauBERT model)"),tcr=l(),_7=a("li"),Kpe=a("strong"),acr=o("funnel"),ncr=o(" \u2014 "),lG=a("a"),scr=o("TFFunnelForSequenceClassification"),lcr=o(" (Funnel Transformer model)"),icr=l(),u7=a("li"),Zpe=a("strong"),dcr=o("gpt2"),ccr=o(" \u2014 "),iG=a("a"),fcr=o("TFGPT2ForSequenceClassification"),mcr=o(" (OpenAI GPT-2 model)"),gcr=l(),b7=a("li"),e_e=a("strong"),hcr=o("layoutlm"),pcr=o(" \u2014 "),dG=a("a"),_cr=o("TFLayoutLMForSequenceClassification"),ucr=o(" (LayoutLM model)"),bcr=l(),v7=a("li"),o_e=a("strong"),vcr=o("longformer"),Tcr=o(" \u2014 "),cG=a("a"),Fcr=o("TFLongformerForSequenceClassification"),Ccr=o(" (Longformer model)"),Mcr=l(),T7=a("li"),r_e=a("strong"),Ecr=o("mobilebert"),ycr=o(" \u2014 "),fG=a("a"),wcr=o("TFMobileBertForSequenceClassification"),Acr=o(" (MobileBERT model)"),Lcr=l(),F7=a("li"),t_e=a("strong"),Bcr=o("mpnet"),xcr=o(" \u2014 "),mG=a("a"),kcr=o("TFMPNetForSequenceClassification"),Rcr=o(" (MPNet model)"),Scr=l(),C7=a("li"),a_e=a("strong"),Pcr=o("openai-gpt"),$cr=o(" \u2014 "),gG=a("a"),Icr=o("TFOpenAIGPTForSequenceClassification"),jcr=o(" (OpenAI GPT model)"),Dcr=l(),M7=a("li"),n_e=a("strong"),Ncr=o("rembert"),qcr=o(" \u2014 "),hG=a("a"),Ocr=o("TFRemBertForSequenceClassification"),Gcr=o(" (RemBERT model)"),Xcr=l(),E7=a("li"),s_e=a("strong"),Vcr=o("roberta"),zcr=o(" \u2014 "),pG=a("a"),Wcr=o("TFRobertaForSequenceClassification"),Qcr=o(" (RoBERTa model)"),Hcr=l(),y7=a("li"),l_e=a("strong"),Ucr=o("roformer"),Jcr=o(" \u2014 "),_G=a("a"),Ycr=o("TFRoFormerForSequenceClassification"),Kcr=o(" (RoFormer model)"),Zcr=l(),w7=a("li"),i_e=a("strong"),efr=o("tapas"),ofr=o(" \u2014 "),uG=a("a"),rfr=o("TFTapasForSequenceClassification"),tfr=o(" (TAPAS model)"),afr=l(),A7=a("li"),d_e=a("strong"),nfr=o("transfo-xl"),sfr=o(" \u2014 "),bG=a("a"),lfr=o("TFTransfoXLForSequenceClassification"),ifr=o(" (Transformer-XL model)"),dfr=l(),L7=a("li"),c_e=a("strong"),cfr=o("xlm"),ffr=o(" \u2014 "),vG=a("a"),mfr=o("TFXLMForSequenceClassification"),gfr=o(" (XLM model)"),hfr=l(),B7=a("li"),f_e=a("strong"),pfr=o("xlm-roberta"),_fr=o(" \u2014 "),TG=a("a"),ufr=o("TFXLMRobertaForSequenceClassification"),bfr=o(" (XLM-RoBERTa model)"),vfr=l(),x7=a("li"),m_e=a("strong"),Tfr=o("xlnet"),Ffr=o(" \u2014 "),FG=a("a"),Cfr=o("TFXLNetForSequenceClassification"),Mfr=o(" (XLNet model)"),Efr=l(),g_e=a("p"),yfr=o("Examples:"),wfr=l(),f(Cw.$$.fragment),Fke=l(),Pc=a("h2"),k7=a("a"),h_e=a("span"),f(Mw.$$.fragment),Afr=l(),p_e=a("span"),Lfr=o("TFAutoModelForMultipleChoice"),Cke=l(),wr=a("div"),f(Ew.$$.fragment),Bfr=l(),$c=a("p"),xfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),__e=a("code"),kfr=o("from_pretrained()"),Rfr=o("class method or the "),u_e=a("code"),Sfr=o("from_config()"),Pfr=o(`class
method.`),$fr=l(),yw=a("p"),Ifr=o("This class cannot be instantiated directly using "),b_e=a("code"),jfr=o("__init__()"),Dfr=o(" (throws an error)."),Nfr=l(),Tt=a("div"),f(ww.$$.fragment),qfr=l(),v_e=a("p"),Ofr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Gfr=l(),Ic=a("p"),Xfr=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),Vfr=o("not"),zfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),F_e=a("code"),Wfr=o("from_pretrained()"),Qfr=o("to load the model weights."),Hfr=l(),C_e=a("p"),Ufr=o("Examples:"),Jfr=l(),f(Aw.$$.fragment),Yfr=l(),Fo=a("div"),f(Lw.$$.fragment),Kfr=l(),M_e=a("p"),Zfr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),emr=l(),Mn=a("p"),omr=o("The model class to instantiate is selected based on the "),E_e=a("code"),rmr=o("model_type"),tmr=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),smr=o("pretrained_model_name_or_path"),lmr=o(":"),imr=l(),te=a("ul"),R7=a("li"),A_e=a("strong"),dmr=o("albert"),cmr=o(" \u2014 "),CG=a("a"),fmr=o("TFAlbertForMultipleChoice"),mmr=o(" (ALBERT model)"),gmr=l(),S7=a("li"),L_e=a("strong"),hmr=o("bert"),pmr=o(" \u2014 "),MG=a("a"),_mr=o("TFBertForMultipleChoice"),umr=o(" (BERT model)"),bmr=l(),P7=a("li"),B_e=a("strong"),vmr=o("camembert"),Tmr=o(" \u2014 "),EG=a("a"),Fmr=o("TFCamembertForMultipleChoice"),Cmr=o(" (CamemBERT model)"),Mmr=l(),$7=a("li"),x_e=a("strong"),Emr=o("convbert"),ymr=o(" \u2014 "),yG=a("a"),wmr=o("TFConvBertForMultipleChoice"),Amr=o(" (ConvBERT model)"),Lmr=l(),I7=a("li"),k_e=a("strong"),Bmr=o("distilbert"),xmr=o(" \u2014 "),wG=a("a"),kmr=o("TFDistilBertForMultipleChoice"),Rmr=o(" (DistilBERT model)"),Smr=l(),j7=a("li"),R_e=a("strong"),Pmr=o("electra"),$mr=o(" \u2014 "),AG=a("a"),Imr=o("TFElectraForMultipleChoice"),jmr=o(" (ELECTRA model)"),Dmr=l(),D7=a("li"),S_e=a("strong"),Nmr=o("flaubert"),qmr=o(" \u2014 "),LG=a("a"),Omr=o("TFFlaubertForMultipleChoice"),Gmr=o(" (FlauBERT model)"),Xmr=l(),N7=a("li"),P_e=a("strong"),Vmr=o("funnel"),zmr=o(" \u2014 "),BG=a("a"),Wmr=o("TFFunnelForMultipleChoice"),Qmr=o(" (Funnel Transformer model)"),Hmr=l(),q7=a("li"),$_e=a("strong"),Umr=o("longformer"),Jmr=o(" \u2014 "),xG=a("a"),Ymr=o("TFLongformerForMultipleChoice"),Kmr=o(" (Longformer model)"),Zmr=l(),O7=a("li"),I_e=a("strong"),egr=o("mobilebert"),ogr=o(" \u2014 "),kG=a("a"),rgr=o("TFMobileBertForMultipleChoice"),tgr=o(" (MobileBERT model)"),agr=l(),G7=a("li"),j_e=a("strong"),ngr=o("mpnet"),sgr=o(" \u2014 "),RG=a("a"),lgr=o("TFMPNetForMultipleChoice"),igr=o(" (MPNet model)"),dgr=l(),X7=a("li"),D_e=a("strong"),cgr=o("rembert"),fgr=o(" \u2014 "),SG=a("a"),mgr=o("TFRemBertForMultipleChoice"),ggr=o(" (RemBERT model)"),hgr=l(),V7=a("li"),N_e=a("strong"),pgr=o("roberta"),_gr=o(" \u2014 "),PG=a("a"),ugr=o("TFRobertaForMultipleChoice"),bgr=o(" (RoBERTa model)"),vgr=l(),z7=a("li"),q_e=a("strong"),Tgr=o("roformer"),Fgr=o(" \u2014 "),$G=a("a"),Cgr=o("TFRoFormerForMultipleChoice"),Mgr=o(" (RoFormer model)"),Egr=l(),W7=a("li"),O_e=a("strong"),ygr=o("xlm"),wgr=o(" \u2014 "),IG=a("a"),Agr=o("TFXLMForMultipleChoice"),Lgr=o(" (XLM model)"),Bgr=l(),Q7=a("li"),G_e=a("strong"),xgr=o("xlm-roberta"),kgr=o(" \u2014 "),jG=a("a"),Rgr=o("TFXLMRobertaForMultipleChoice"),Sgr=o(" (XLM-RoBERTa model)"),Pgr=l(),H7=a("li"),X_e=a("strong"),$gr=o("xlnet"),Igr=o(" \u2014 "),DG=a("a"),jgr=o("TFXLNetForMultipleChoice"),Dgr=o(" (XLNet model)"),Ngr=l(),V_e=a("p"),qgr=o("Examples:"),Ogr=l(),f(Bw.$$.fragment),Mke=l(),jc=a("h2"),U7=a("a"),z_e=a("span"),f(xw.$$.fragment),Ggr=l(),W_e=a("span"),Xgr=o("TFAutoModelForTableQuestionAnswering"),Eke=l(),Ar=a("div"),f(kw.$$.fragment),Vgr=l(),Dc=a("p"),zgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Q_e=a("code"),Wgr=o("from_pretrained()"),Qgr=o("class method or the "),H_e=a("code"),Hgr=o("from_config()"),Ugr=o(`class
method.`),Jgr=l(),Rw=a("p"),Ygr=o("This class cannot be instantiated directly using "),U_e=a("code"),Kgr=o("__init__()"),Zgr=o(" (throws an error)."),ehr=l(),Ft=a("div"),f(Sw.$$.fragment),ohr=l(),J_e=a("p"),rhr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),thr=l(),Nc=a("p"),ahr=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),nhr=o("not"),shr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K_e=a("code"),lhr=o("from_pretrained()"),ihr=o("to load the model weights."),dhr=l(),Z_e=a("p"),chr=o("Examples:"),fhr=l(),f(Pw.$$.fragment),mhr=l(),Co=a("div"),f($w.$$.fragment),ghr=l(),eue=a("p"),hhr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),phr=l(),En=a("p"),_hr=o("The model class to instantiate is selected based on the "),oue=a("code"),uhr=o("model_type"),bhr=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),vhr=o("pretrained_model_name_or_path"),Thr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),Fhr=o("pretrained_model_name_or_path"),Chr=o(":"),Mhr=l(),aue=a("ul"),J7=a("li"),nue=a("strong"),Ehr=o("tapas"),yhr=o(" \u2014 "),NG=a("a"),whr=o("TFTapasForQuestionAnswering"),Ahr=o(" (TAPAS model)"),Lhr=l(),sue=a("p"),Bhr=o("Examples:"),xhr=l(),f(Iw.$$.fragment),yke=l(),qc=a("h2"),Y7=a("a"),lue=a("span"),f(jw.$$.fragment),khr=l(),iue=a("span"),Rhr=o("TFAutoModelForTokenClassification"),wke=l(),Lr=a("div"),f(Dw.$$.fragment),Shr=l(),Oc=a("p"),Phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),due=a("code"),$hr=o("from_pretrained()"),Ihr=o("class method or the "),cue=a("code"),jhr=o("from_config()"),Dhr=o(`class
method.`),Nhr=l(),Nw=a("p"),qhr=o("This class cannot be instantiated directly using "),fue=a("code"),Ohr=o("__init__()"),Ghr=o(" (throws an error)."),Xhr=l(),Ct=a("div"),f(qw.$$.fragment),Vhr=l(),mue=a("p"),zhr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Whr=l(),Gc=a("p"),Qhr=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),Hhr=o("not"),Uhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hue=a("code"),Jhr=o("from_pretrained()"),Yhr=o("to load the model weights."),Khr=l(),pue=a("p"),Zhr=o("Examples:"),epr=l(),f(Ow.$$.fragment),opr=l(),Mo=a("div"),f(Gw.$$.fragment),rpr=l(),_ue=a("p"),tpr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),apr=l(),yn=a("p"),npr=o("The model class to instantiate is selected based on the "),uue=a("code"),spr=o("model_type"),lpr=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),ipr=o("pretrained_model_name_or_path"),dpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),cpr=o("pretrained_model_name_or_path"),fpr=o(":"),mpr=l(),K=a("ul"),K7=a("li"),Tue=a("strong"),gpr=o("albert"),hpr=o(" \u2014 "),qG=a("a"),ppr=o("TFAlbertForTokenClassification"),_pr=o(" (ALBERT model)"),upr=l(),Z7=a("li"),Fue=a("strong"),bpr=o("bert"),vpr=o(" \u2014 "),OG=a("a"),Tpr=o("TFBertForTokenClassification"),Fpr=o(" (BERT model)"),Cpr=l(),eF=a("li"),Cue=a("strong"),Mpr=o("camembert"),Epr=o(" \u2014 "),GG=a("a"),ypr=o("TFCamembertForTokenClassification"),wpr=o(" (CamemBERT model)"),Apr=l(),oF=a("li"),Mue=a("strong"),Lpr=o("convbert"),Bpr=o(" \u2014 "),XG=a("a"),xpr=o("TFConvBertForTokenClassification"),kpr=o(" (ConvBERT model)"),Rpr=l(),rF=a("li"),Eue=a("strong"),Spr=o("deberta"),Ppr=o(" \u2014 "),VG=a("a"),$pr=o("TFDebertaForTokenClassification"),Ipr=o(" (DeBERTa model)"),jpr=l(),tF=a("li"),yue=a("strong"),Dpr=o("deberta-v2"),Npr=o(" \u2014 "),zG=a("a"),qpr=o("TFDebertaV2ForTokenClassification"),Opr=o(" (DeBERTa-v2 model)"),Gpr=l(),aF=a("li"),wue=a("strong"),Xpr=o("distilbert"),Vpr=o(" \u2014 "),WG=a("a"),zpr=o("TFDistilBertForTokenClassification"),Wpr=o(" (DistilBERT model)"),Qpr=l(),nF=a("li"),Aue=a("strong"),Hpr=o("electra"),Upr=o(" \u2014 "),QG=a("a"),Jpr=o("TFElectraForTokenClassification"),Ypr=o(" (ELECTRA model)"),Kpr=l(),sF=a("li"),Lue=a("strong"),Zpr=o("flaubert"),e_r=o(" \u2014 "),HG=a("a"),o_r=o("TFFlaubertForTokenClassification"),r_r=o(" (FlauBERT model)"),t_r=l(),lF=a("li"),Bue=a("strong"),a_r=o("funnel"),n_r=o(" \u2014 "),UG=a("a"),s_r=o("TFFunnelForTokenClassification"),l_r=o(" (Funnel Transformer model)"),i_r=l(),iF=a("li"),xue=a("strong"),d_r=o("layoutlm"),c_r=o(" \u2014 "),JG=a("a"),f_r=o("TFLayoutLMForTokenClassification"),m_r=o(" (LayoutLM model)"),g_r=l(),dF=a("li"),kue=a("strong"),h_r=o("longformer"),p_r=o(" \u2014 "),YG=a("a"),__r=o("TFLongformerForTokenClassification"),u_r=o(" (Longformer model)"),b_r=l(),cF=a("li"),Rue=a("strong"),v_r=o("mobilebert"),T_r=o(" \u2014 "),KG=a("a"),F_r=o("TFMobileBertForTokenClassification"),C_r=o(" (MobileBERT model)"),M_r=l(),fF=a("li"),Sue=a("strong"),E_r=o("mpnet"),y_r=o(" \u2014 "),ZG=a("a"),w_r=o("TFMPNetForTokenClassification"),A_r=o(" (MPNet model)"),L_r=l(),mF=a("li"),Pue=a("strong"),B_r=o("rembert"),x_r=o(" \u2014 "),eX=a("a"),k_r=o("TFRemBertForTokenClassification"),R_r=o(" (RemBERT model)"),S_r=l(),gF=a("li"),$ue=a("strong"),P_r=o("roberta"),$_r=o(" \u2014 "),oX=a("a"),I_r=o("TFRobertaForTokenClassification"),j_r=o(" (RoBERTa model)"),D_r=l(),hF=a("li"),Iue=a("strong"),N_r=o("roformer"),q_r=o(" \u2014 "),rX=a("a"),O_r=o("TFRoFormerForTokenClassification"),G_r=o(" (RoFormer model)"),X_r=l(),pF=a("li"),jue=a("strong"),V_r=o("xlm"),z_r=o(" \u2014 "),tX=a("a"),W_r=o("TFXLMForTokenClassification"),Q_r=o(" (XLM model)"),H_r=l(),_F=a("li"),Due=a("strong"),U_r=o("xlm-roberta"),J_r=o(" \u2014 "),aX=a("a"),Y_r=o("TFXLMRobertaForTokenClassification"),K_r=o(" (XLM-RoBERTa model)"),Z_r=l(),uF=a("li"),Nue=a("strong"),eur=o("xlnet"),our=o(" \u2014 "),nX=a("a"),rur=o("TFXLNetForTokenClassification"),tur=o(" (XLNet model)"),aur=l(),que=a("p"),nur=o("Examples:"),sur=l(),f(Xw.$$.fragment),Ake=l(),Xc=a("h2"),bF=a("a"),Oue=a("span"),f(Vw.$$.fragment),lur=l(),Gue=a("span"),iur=o("TFAutoModelForQuestionAnswering"),Lke=l(),Br=a("div"),f(zw.$$.fragment),dur=l(),Vc=a("p"),cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xue=a("code"),fur=o("from_pretrained()"),mur=o("class method or the "),Vue=a("code"),gur=o("from_config()"),hur=o(`class
method.`),pur=l(),Ww=a("p"),_ur=o("This class cannot be instantiated directly using "),zue=a("code"),uur=o("__init__()"),bur=o(" (throws an error)."),vur=l(),Mt=a("div"),f(Qw.$$.fragment),Tur=l(),Wue=a("p"),Fur=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cur=l(),zc=a("p"),Mur=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),Eur=o("not"),yur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hue=a("code"),wur=o("from_pretrained()"),Aur=o("to load the model weights."),Lur=l(),Uue=a("p"),Bur=o("Examples:"),xur=l(),f(Hw.$$.fragment),kur=l(),Eo=a("div"),f(Uw.$$.fragment),Rur=l(),Jue=a("p"),Sur=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pur=l(),wn=a("p"),$ur=o("The model class to instantiate is selected based on the "),Yue=a("code"),Iur=o("model_type"),jur=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),Dur=o("pretrained_model_name_or_path"),Nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),qur=o("pretrained_model_name_or_path"),Our=o(":"),Gur=l(),Z=a("ul"),vF=a("li"),e1e=a("strong"),Xur=o("albert"),Vur=o(" \u2014 "),sX=a("a"),zur=o("TFAlbertForQuestionAnswering"),Wur=o(" (ALBERT model)"),Qur=l(),TF=a("li"),o1e=a("strong"),Hur=o("bert"),Uur=o(" \u2014 "),lX=a("a"),Jur=o("TFBertForQuestionAnswering"),Yur=o(" (BERT model)"),Kur=l(),FF=a("li"),r1e=a("strong"),Zur=o("camembert"),e1r=o(" \u2014 "),iX=a("a"),o1r=o("TFCamembertForQuestionAnswering"),r1r=o(" (CamemBERT model)"),t1r=l(),CF=a("li"),t1e=a("strong"),a1r=o("convbert"),n1r=o(" \u2014 "),dX=a("a"),s1r=o("TFConvBertForQuestionAnswering"),l1r=o(" (ConvBERT model)"),i1r=l(),MF=a("li"),a1e=a("strong"),d1r=o("deberta"),c1r=o(" \u2014 "),cX=a("a"),f1r=o("TFDebertaForQuestionAnswering"),m1r=o(" (DeBERTa model)"),g1r=l(),EF=a("li"),n1e=a("strong"),h1r=o("deberta-v2"),p1r=o(" \u2014 "),fX=a("a"),_1r=o("TFDebertaV2ForQuestionAnswering"),u1r=o(" (DeBERTa-v2 model)"),b1r=l(),yF=a("li"),s1e=a("strong"),v1r=o("distilbert"),T1r=o(" \u2014 "),mX=a("a"),F1r=o("TFDistilBertForQuestionAnswering"),C1r=o(" (DistilBERT model)"),M1r=l(),wF=a("li"),l1e=a("strong"),E1r=o("electra"),y1r=o(" \u2014 "),gX=a("a"),w1r=o("TFElectraForQuestionAnswering"),A1r=o(" (ELECTRA model)"),L1r=l(),AF=a("li"),i1e=a("strong"),B1r=o("flaubert"),x1r=o(" \u2014 "),hX=a("a"),k1r=o("TFFlaubertForQuestionAnsweringSimple"),R1r=o(" (FlauBERT model)"),S1r=l(),LF=a("li"),d1e=a("strong"),P1r=o("funnel"),$1r=o(" \u2014 "),pX=a("a"),I1r=o("TFFunnelForQuestionAnswering"),j1r=o(" (Funnel Transformer model)"),D1r=l(),BF=a("li"),c1e=a("strong"),N1r=o("longformer"),q1r=o(" \u2014 "),_X=a("a"),O1r=o("TFLongformerForQuestionAnswering"),G1r=o(" (Longformer model)"),X1r=l(),xF=a("li"),f1e=a("strong"),V1r=o("mobilebert"),z1r=o(" \u2014 "),uX=a("a"),W1r=o("TFMobileBertForQuestionAnswering"),Q1r=o(" (MobileBERT model)"),H1r=l(),kF=a("li"),m1e=a("strong"),U1r=o("mpnet"),J1r=o(" \u2014 "),bX=a("a"),Y1r=o("TFMPNetForQuestionAnswering"),K1r=o(" (MPNet model)"),Z1r=l(),RF=a("li"),g1e=a("strong"),ebr=o("rembert"),obr=o(" \u2014 "),vX=a("a"),rbr=o("TFRemBertForQuestionAnswering"),tbr=o(" (RemBERT model)"),abr=l(),SF=a("li"),h1e=a("strong"),nbr=o("roberta"),sbr=o(" \u2014 "),TX=a("a"),lbr=o("TFRobertaForQuestionAnswering"),ibr=o(" (RoBERTa model)"),dbr=l(),PF=a("li"),p1e=a("strong"),cbr=o("roformer"),fbr=o(" \u2014 "),FX=a("a"),mbr=o("TFRoFormerForQuestionAnswering"),gbr=o(" (RoFormer model)"),hbr=l(),$F=a("li"),_1e=a("strong"),pbr=o("xlm"),_br=o(" \u2014 "),CX=a("a"),ubr=o("TFXLMForQuestionAnsweringSimple"),bbr=o(" (XLM model)"),vbr=l(),IF=a("li"),u1e=a("strong"),Tbr=o("xlm-roberta"),Fbr=o(" \u2014 "),MX=a("a"),Cbr=o("TFXLMRobertaForQuestionAnswering"),Mbr=o(" (XLM-RoBERTa model)"),Ebr=l(),jF=a("li"),b1e=a("strong"),ybr=o("xlnet"),wbr=o(" \u2014 "),EX=a("a"),Abr=o("TFXLNetForQuestionAnsweringSimple"),Lbr=o(" (XLNet model)"),Bbr=l(),v1e=a("p"),xbr=o("Examples:"),kbr=l(),f(Jw.$$.fragment),Bke=l(),Wc=a("h2"),DF=a("a"),T1e=a("span"),f(Yw.$$.fragment),Rbr=l(),F1e=a("span"),Sbr=o("TFAutoModelForVision2Seq"),xke=l(),xr=a("div"),f(Kw.$$.fragment),Pbr=l(),Qc=a("p"),$br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),C1e=a("code"),Ibr=o("from_pretrained()"),jbr=o("class method or the "),M1e=a("code"),Dbr=o("from_config()"),Nbr=o(`class
method.`),qbr=l(),Zw=a("p"),Obr=o("This class cannot be instantiated directly using "),E1e=a("code"),Gbr=o("__init__()"),Xbr=o(" (throws an error)."),Vbr=l(),Et=a("div"),f(e6.$$.fragment),zbr=l(),y1e=a("p"),Wbr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qbr=l(),Hc=a("p"),Hbr=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),Ubr=o("not"),Jbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A1e=a("code"),Ybr=o("from_pretrained()"),Kbr=o("to load the model weights."),Zbr=l(),L1e=a("p"),e5r=o("Examples:"),o5r=l(),f(o6.$$.fragment),r5r=l(),yo=a("div"),f(r6.$$.fragment),t5r=l(),B1e=a("p"),a5r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),n5r=l(),An=a("p"),s5r=o("The model class to instantiate is selected based on the "),x1e=a("code"),l5r=o("model_type"),i5r=o(` property of the config object (either
passed as an argument or loaded from `),k1e=a("code"),d5r=o("pretrained_model_name_or_path"),c5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),f5r=o("pretrained_model_name_or_path"),m5r=o(":"),g5r=l(),S1e=a("ul"),NF=a("li"),P1e=a("strong"),h5r=o("vision-encoder-decoder"),p5r=o(" \u2014 "),yX=a("a"),_5r=o("TFVisionEncoderDecoderModel"),u5r=o(" (Vision Encoder decoder model)"),b5r=l(),$1e=a("p"),v5r=o("Examples:"),T5r=l(),f(t6.$$.fragment),kke=l(),Uc=a("h2"),qF=a("a"),I1e=a("span"),f(a6.$$.fragment),F5r=l(),j1e=a("span"),C5r=o("TFAutoModelForSpeechSeq2Seq"),Rke=l(),kr=a("div"),f(n6.$$.fragment),M5r=l(),Jc=a("p"),E5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),D1e=a("code"),y5r=o("from_pretrained()"),w5r=o("class method or the "),N1e=a("code"),A5r=o("from_config()"),L5r=o(`class
method.`),B5r=l(),s6=a("p"),x5r=o("This class cannot be instantiated directly using "),q1e=a("code"),k5r=o("__init__()"),R5r=o(" (throws an error)."),S5r=l(),yt=a("div"),f(l6.$$.fragment),P5r=l(),O1e=a("p"),$5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),I5r=l(),Yc=a("p"),j5r=o(`Note:
Loading a model from its configuration file does `),G1e=a("strong"),D5r=o("not"),N5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X1e=a("code"),q5r=o("from_pretrained()"),O5r=o("to load the model weights."),G5r=l(),V1e=a("p"),X5r=o("Examples:"),V5r=l(),f(i6.$$.fragment),z5r=l(),wo=a("div"),f(d6.$$.fragment),W5r=l(),z1e=a("p"),Q5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),H5r=l(),Ln=a("p"),U5r=o("The model class to instantiate is selected based on the "),W1e=a("code"),J5r=o("model_type"),Y5r=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),K5r=o("pretrained_model_name_or_path"),Z5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),e2r=o("pretrained_model_name_or_path"),o2r=o(":"),r2r=l(),U1e=a("ul"),OF=a("li"),J1e=a("strong"),t2r=o("speech_to_text"),a2r=o(" \u2014 "),wX=a("a"),n2r=o("TFSpeech2TextForConditionalGeneration"),s2r=o(" (Speech2Text model)"),l2r=l(),Y1e=a("p"),i2r=o("Examples:"),d2r=l(),f(c6.$$.fragment),Ske=l(),Kc=a("h2"),GF=a("a"),K1e=a("span"),f(f6.$$.fragment),c2r=l(),Z1e=a("span"),f2r=o("FlaxAutoModel"),Pke=l(),Rr=a("div"),f(m6.$$.fragment),m2r=l(),Zc=a("p"),g2r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ebe=a("code"),h2r=o("from_pretrained()"),p2r=o("class method or the "),obe=a("code"),_2r=o("from_config()"),u2r=o(`class
method.`),b2r=l(),g6=a("p"),v2r=o("This class cannot be instantiated directly using "),rbe=a("code"),T2r=o("__init__()"),F2r=o(" (throws an error)."),C2r=l(),wt=a("div"),f(h6.$$.fragment),M2r=l(),tbe=a("p"),E2r=o("Instantiates one of the base model classes of the library from a configuration."),y2r=l(),ef=a("p"),w2r=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),A2r=o("not"),L2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nbe=a("code"),B2r=o("from_pretrained()"),x2r=o("to load the model weights."),k2r=l(),sbe=a("p"),R2r=o("Examples:"),S2r=l(),f(p6.$$.fragment),P2r=l(),Ao=a("div"),f(_6.$$.fragment),$2r=l(),lbe=a("p"),I2r=o("Instantiate one of the base model classes of the library from a pretrained model."),j2r=l(),Bn=a("p"),D2r=o("The model class to instantiate is selected based on the "),ibe=a("code"),N2r=o("model_type"),q2r=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),O2r=o("pretrained_model_name_or_path"),G2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),X2r=o("pretrained_model_name_or_path"),V2r=o(":"),z2r=l(),z=a("ul"),XF=a("li"),fbe=a("strong"),W2r=o("albert"),Q2r=o(" \u2014 "),AX=a("a"),H2r=o("FlaxAlbertModel"),U2r=o(" (ALBERT model)"),J2r=l(),VF=a("li"),mbe=a("strong"),Y2r=o("bart"),K2r=o(" \u2014 "),LX=a("a"),Z2r=o("FlaxBartModel"),evr=o(" (BART model)"),ovr=l(),zF=a("li"),gbe=a("strong"),rvr=o("beit"),tvr=o(" \u2014 "),BX=a("a"),avr=o("FlaxBeitModel"),nvr=o(" (BEiT model)"),svr=l(),WF=a("li"),hbe=a("strong"),lvr=o("bert"),ivr=o(" \u2014 "),xX=a("a"),dvr=o("FlaxBertModel"),cvr=o(" (BERT model)"),fvr=l(),QF=a("li"),pbe=a("strong"),mvr=o("big_bird"),gvr=o(" \u2014 "),kX=a("a"),hvr=o("FlaxBigBirdModel"),pvr=o(" (BigBird model)"),_vr=l(),HF=a("li"),_be=a("strong"),uvr=o("blenderbot"),bvr=o(" \u2014 "),RX=a("a"),vvr=o("FlaxBlenderbotModel"),Tvr=o(" (Blenderbot model)"),Fvr=l(),UF=a("li"),ube=a("strong"),Cvr=o("blenderbot-small"),Mvr=o(" \u2014 "),SX=a("a"),Evr=o("FlaxBlenderbotSmallModel"),yvr=o(" (BlenderbotSmall model)"),wvr=l(),JF=a("li"),bbe=a("strong"),Avr=o("clip"),Lvr=o(" \u2014 "),PX=a("a"),Bvr=o("FlaxCLIPModel"),xvr=o(" (CLIP model)"),kvr=l(),YF=a("li"),vbe=a("strong"),Rvr=o("distilbert"),Svr=o(" \u2014 "),$X=a("a"),Pvr=o("FlaxDistilBertModel"),$vr=o(" (DistilBERT model)"),Ivr=l(),KF=a("li"),Tbe=a("strong"),jvr=o("electra"),Dvr=o(" \u2014 "),IX=a("a"),Nvr=o("FlaxElectraModel"),qvr=o(" (ELECTRA model)"),Ovr=l(),ZF=a("li"),Fbe=a("strong"),Gvr=o("gpt2"),Xvr=o(" \u2014 "),jX=a("a"),Vvr=o("FlaxGPT2Model"),zvr=o(" (OpenAI GPT-2 model)"),Wvr=l(),e9=a("li"),Cbe=a("strong"),Qvr=o("gpt_neo"),Hvr=o(" \u2014 "),DX=a("a"),Uvr=o("FlaxGPTNeoModel"),Jvr=o(" (GPT Neo model)"),Yvr=l(),o9=a("li"),Mbe=a("strong"),Kvr=o("gptj"),Zvr=o(" \u2014 "),NX=a("a"),e0r=o("FlaxGPTJModel"),o0r=o(" (GPT-J model)"),r0r=l(),r9=a("li"),Ebe=a("strong"),t0r=o("marian"),a0r=o(" \u2014 "),qX=a("a"),n0r=o("FlaxMarianModel"),s0r=o(" (Marian model)"),l0r=l(),t9=a("li"),ybe=a("strong"),i0r=o("mbart"),d0r=o(" \u2014 "),OX=a("a"),c0r=o("FlaxMBartModel"),f0r=o(" (mBART model)"),m0r=l(),a9=a("li"),wbe=a("strong"),g0r=o("mt5"),h0r=o(" \u2014 "),GX=a("a"),p0r=o("FlaxMT5Model"),_0r=o(" (mT5 model)"),u0r=l(),n9=a("li"),Abe=a("strong"),b0r=o("pegasus"),v0r=o(" \u2014 "),XX=a("a"),T0r=o("FlaxPegasusModel"),F0r=o(" (Pegasus model)"),C0r=l(),s9=a("li"),Lbe=a("strong"),M0r=o("roberta"),E0r=o(" \u2014 "),VX=a("a"),y0r=o("FlaxRobertaModel"),w0r=o(" (RoBERTa model)"),A0r=l(),l9=a("li"),Bbe=a("strong"),L0r=o("roformer"),B0r=o(" \u2014 "),zX=a("a"),x0r=o("FlaxRoFormerModel"),k0r=o(" (RoFormer model)"),R0r=l(),i9=a("li"),xbe=a("strong"),S0r=o("t5"),P0r=o(" \u2014 "),WX=a("a"),$0r=o("FlaxT5Model"),I0r=o(" (T5 model)"),j0r=l(),d9=a("li"),kbe=a("strong"),D0r=o("vision-text-dual-encoder"),N0r=o(" \u2014 "),QX=a("a"),q0r=o("FlaxVisionTextDualEncoderModel"),O0r=o(" (VisionTextDualEncoder model)"),G0r=l(),c9=a("li"),Rbe=a("strong"),X0r=o("vit"),V0r=o(" \u2014 "),HX=a("a"),z0r=o("FlaxViTModel"),W0r=o(" (ViT model)"),Q0r=l(),f9=a("li"),Sbe=a("strong"),H0r=o("wav2vec2"),U0r=o(" \u2014 "),UX=a("a"),J0r=o("FlaxWav2Vec2Model"),Y0r=o(" (Wav2Vec2 model)"),K0r=l(),m9=a("li"),Pbe=a("strong"),Z0r=o("xglm"),eTr=o(" \u2014 "),JX=a("a"),oTr=o("FlaxXGLMModel"),rTr=o(" (XGLM model)"),tTr=l(),g9=a("li"),$be=a("strong"),aTr=o("xlm-roberta"),nTr=o(" \u2014 "),YX=a("a"),sTr=o("FlaxXLMRobertaModel"),lTr=o(" (XLM-RoBERTa model)"),iTr=l(),Ibe=a("p"),dTr=o("Examples:"),cTr=l(),f(u6.$$.fragment),$ke=l(),of=a("h2"),h9=a("a"),jbe=a("span"),f(b6.$$.fragment),fTr=l(),Dbe=a("span"),mTr=o("FlaxAutoModelForCausalLM"),Ike=l(),Sr=a("div"),f(v6.$$.fragment),gTr=l(),rf=a("p"),hTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nbe=a("code"),pTr=o("from_pretrained()"),_Tr=o("class method or the "),qbe=a("code"),uTr=o("from_config()"),bTr=o(`class
method.`),vTr=l(),T6=a("p"),TTr=o("This class cannot be instantiated directly using "),Obe=a("code"),FTr=o("__init__()"),CTr=o(" (throws an error)."),MTr=l(),At=a("div"),f(F6.$$.fragment),ETr=l(),Gbe=a("p"),yTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wTr=l(),tf=a("p"),ATr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),LTr=o("not"),BTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vbe=a("code"),xTr=o("from_pretrained()"),kTr=o("to load the model weights."),RTr=l(),zbe=a("p"),STr=o("Examples:"),PTr=l(),f(C6.$$.fragment),$Tr=l(),Lo=a("div"),f(M6.$$.fragment),ITr=l(),Wbe=a("p"),jTr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DTr=l(),xn=a("p"),NTr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),qTr=o("model_type"),OTr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),GTr=o("pretrained_model_name_or_path"),XTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),VTr=o("pretrained_model_name_or_path"),zTr=o(":"),WTr=l(),ca=a("ul"),p9=a("li"),Jbe=a("strong"),QTr=o("bart"),HTr=o(" \u2014 "),KX=a("a"),UTr=o("FlaxBartForCausalLM"),JTr=o(" (BART model)"),YTr=l(),_9=a("li"),Ybe=a("strong"),KTr=o("gpt2"),ZTr=o(" \u2014 "),ZX=a("a"),e7r=o("FlaxGPT2LMHeadModel"),o7r=o(" (OpenAI GPT-2 model)"),r7r=l(),u9=a("li"),Kbe=a("strong"),t7r=o("gpt_neo"),a7r=o(" \u2014 "),eV=a("a"),n7r=o("FlaxGPTNeoForCausalLM"),s7r=o(" (GPT Neo model)"),l7r=l(),b9=a("li"),Zbe=a("strong"),i7r=o("gptj"),d7r=o(" \u2014 "),oV=a("a"),c7r=o("FlaxGPTJForCausalLM"),f7r=o(" (GPT-J model)"),m7r=l(),v9=a("li"),e5e=a("strong"),g7r=o("xglm"),h7r=o(" \u2014 "),rV=a("a"),p7r=o("FlaxXGLMForCausalLM"),_7r=o(" (XGLM model)"),u7r=l(),o5e=a("p"),b7r=o("Examples:"),v7r=l(),f(E6.$$.fragment),jke=l(),af=a("h2"),T9=a("a"),r5e=a("span"),f(y6.$$.fragment),T7r=l(),t5e=a("span"),F7r=o("FlaxAutoModelForPreTraining"),Dke=l(),Pr=a("div"),f(w6.$$.fragment),C7r=l(),nf=a("p"),M7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),a5e=a("code"),E7r=o("from_pretrained()"),y7r=o("class method or the "),n5e=a("code"),w7r=o("from_config()"),A7r=o(`class
method.`),L7r=l(),A6=a("p"),B7r=o("This class cannot be instantiated directly using "),s5e=a("code"),x7r=o("__init__()"),k7r=o(" (throws an error)."),R7r=l(),Lt=a("div"),f(L6.$$.fragment),S7r=l(),l5e=a("p"),P7r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$7r=l(),sf=a("p"),I7r=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),j7r=o("not"),D7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),d5e=a("code"),N7r=o("from_pretrained()"),q7r=o("to load the model weights."),O7r=l(),c5e=a("p"),G7r=o("Examples:"),X7r=l(),f(B6.$$.fragment),V7r=l(),Bo=a("div"),f(x6.$$.fragment),z7r=l(),f5e=a("p"),W7r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Q7r=l(),kn=a("p"),H7r=o("The model class to instantiate is selected based on the "),m5e=a("code"),U7r=o("model_type"),J7r=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),Y7r=o("pretrained_model_name_or_path"),K7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),Z7r=o("pretrained_model_name_or_path"),eFr=o(":"),oFr=l(),ce=a("ul"),F9=a("li"),p5e=a("strong"),rFr=o("albert"),tFr=o(" \u2014 "),tV=a("a"),aFr=o("FlaxAlbertForPreTraining"),nFr=o(" (ALBERT model)"),sFr=l(),C9=a("li"),_5e=a("strong"),lFr=o("bart"),iFr=o(" \u2014 "),aV=a("a"),dFr=o("FlaxBartForConditionalGeneration"),cFr=o(" (BART model)"),fFr=l(),M9=a("li"),u5e=a("strong"),mFr=o("bert"),gFr=o(" \u2014 "),nV=a("a"),hFr=o("FlaxBertForPreTraining"),pFr=o(" (BERT model)"),_Fr=l(),E9=a("li"),b5e=a("strong"),uFr=o("big_bird"),bFr=o(" \u2014 "),sV=a("a"),vFr=o("FlaxBigBirdForPreTraining"),TFr=o(" (BigBird model)"),FFr=l(),y9=a("li"),v5e=a("strong"),CFr=o("electra"),MFr=o(" \u2014 "),lV=a("a"),EFr=o("FlaxElectraForPreTraining"),yFr=o(" (ELECTRA model)"),wFr=l(),w9=a("li"),T5e=a("strong"),AFr=o("mbart"),LFr=o(" \u2014 "),iV=a("a"),BFr=o("FlaxMBartForConditionalGeneration"),xFr=o(" (mBART model)"),kFr=l(),A9=a("li"),F5e=a("strong"),RFr=o("mt5"),SFr=o(" \u2014 "),dV=a("a"),PFr=o("FlaxMT5ForConditionalGeneration"),$Fr=o(" (mT5 model)"),IFr=l(),L9=a("li"),C5e=a("strong"),jFr=o("roberta"),DFr=o(" \u2014 "),cV=a("a"),NFr=o("FlaxRobertaForMaskedLM"),qFr=o(" (RoBERTa model)"),OFr=l(),B9=a("li"),M5e=a("strong"),GFr=o("roformer"),XFr=o(" \u2014 "),fV=a("a"),VFr=o("FlaxRoFormerForMaskedLM"),zFr=o(" (RoFormer model)"),WFr=l(),x9=a("li"),E5e=a("strong"),QFr=o("t5"),HFr=o(" \u2014 "),mV=a("a"),UFr=o("FlaxT5ForConditionalGeneration"),JFr=o(" (T5 model)"),YFr=l(),k9=a("li"),y5e=a("strong"),KFr=o("wav2vec2"),ZFr=o(" \u2014 "),gV=a("a"),e9r=o("FlaxWav2Vec2ForPreTraining"),o9r=o(" (Wav2Vec2 model)"),r9r=l(),R9=a("li"),w5e=a("strong"),t9r=o("xlm-roberta"),a9r=o(" \u2014 "),hV=a("a"),n9r=o("FlaxXLMRobertaForMaskedLM"),s9r=o(" (XLM-RoBERTa model)"),l9r=l(),A5e=a("p"),i9r=o("Examples:"),d9r=l(),f(k6.$$.fragment),Nke=l(),lf=a("h2"),S9=a("a"),L5e=a("span"),f(R6.$$.fragment),c9r=l(),B5e=a("span"),f9r=o("FlaxAutoModelForMaskedLM"),qke=l(),$r=a("div"),f(S6.$$.fragment),m9r=l(),df=a("p"),g9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),x5e=a("code"),h9r=o("from_pretrained()"),p9r=o("class method or the "),k5e=a("code"),_9r=o("from_config()"),u9r=o(`class
method.`),b9r=l(),P6=a("p"),v9r=o("This class cannot be instantiated directly using "),R5e=a("code"),T9r=o("__init__()"),F9r=o(" (throws an error)."),C9r=l(),Bt=a("div"),f($6.$$.fragment),M9r=l(),S5e=a("p"),E9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y9r=l(),cf=a("p"),w9r=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),A9r=o("not"),L9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$5e=a("code"),B9r=o("from_pretrained()"),x9r=o("to load the model weights."),k9r=l(),I5e=a("p"),R9r=o("Examples:"),S9r=l(),f(I6.$$.fragment),P9r=l(),xo=a("div"),f(j6.$$.fragment),$9r=l(),j5e=a("p"),I9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j9r=l(),Rn=a("p"),D9r=o("The model class to instantiate is selected based on the "),D5e=a("code"),N9r=o("model_type"),q9r=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),O9r=o("pretrained_model_name_or_path"),G9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=a("code"),X9r=o("pretrained_model_name_or_path"),V9r=o(":"),z9r=l(),ue=a("ul"),P9=a("li"),O5e=a("strong"),W9r=o("albert"),Q9r=o(" \u2014 "),pV=a("a"),H9r=o("FlaxAlbertForMaskedLM"),U9r=o(" (ALBERT model)"),J9r=l(),$9=a("li"),G5e=a("strong"),Y9r=o("bart"),K9r=o(" \u2014 "),_V=a("a"),Z9r=o("FlaxBartForConditionalGeneration"),eCr=o(" (BART model)"),oCr=l(),I9=a("li"),X5e=a("strong"),rCr=o("bert"),tCr=o(" \u2014 "),uV=a("a"),aCr=o("FlaxBertForMaskedLM"),nCr=o(" (BERT model)"),sCr=l(),j9=a("li"),V5e=a("strong"),lCr=o("big_bird"),iCr=o(" \u2014 "),bV=a("a"),dCr=o("FlaxBigBirdForMaskedLM"),cCr=o(" (BigBird model)"),fCr=l(),D9=a("li"),z5e=a("strong"),mCr=o("distilbert"),gCr=o(" \u2014 "),vV=a("a"),hCr=o("FlaxDistilBertForMaskedLM"),pCr=o(" (DistilBERT model)"),_Cr=l(),N9=a("li"),W5e=a("strong"),uCr=o("electra"),bCr=o(" \u2014 "),TV=a("a"),vCr=o("FlaxElectraForMaskedLM"),TCr=o(" (ELECTRA model)"),FCr=l(),q9=a("li"),Q5e=a("strong"),CCr=o("mbart"),MCr=o(" \u2014 "),FV=a("a"),ECr=o("FlaxMBartForConditionalGeneration"),yCr=o(" (mBART model)"),wCr=l(),O9=a("li"),H5e=a("strong"),ACr=o("roberta"),LCr=o(" \u2014 "),CV=a("a"),BCr=o("FlaxRobertaForMaskedLM"),xCr=o(" (RoBERTa model)"),kCr=l(),G9=a("li"),U5e=a("strong"),RCr=o("roformer"),SCr=o(" \u2014 "),MV=a("a"),PCr=o("FlaxRoFormerForMaskedLM"),$Cr=o(" (RoFormer model)"),ICr=l(),X9=a("li"),J5e=a("strong"),jCr=o("xlm-roberta"),DCr=o(" \u2014 "),EV=a("a"),NCr=o("FlaxXLMRobertaForMaskedLM"),qCr=o(" (XLM-RoBERTa model)"),OCr=l(),Y5e=a("p"),GCr=o("Examples:"),XCr=l(),f(D6.$$.fragment),Oke=l(),ff=a("h2"),V9=a("a"),K5e=a("span"),f(N6.$$.fragment),VCr=l(),Z5e=a("span"),zCr=o("FlaxAutoModelForSeq2SeqLM"),Gke=l(),Ir=a("div"),f(q6.$$.fragment),WCr=l(),mf=a("p"),QCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),e2e=a("code"),HCr=o("from_pretrained()"),UCr=o("class method or the "),o2e=a("code"),JCr=o("from_config()"),YCr=o(`class
method.`),KCr=l(),O6=a("p"),ZCr=o("This class cannot be instantiated directly using "),r2e=a("code"),eMr=o("__init__()"),oMr=o(" (throws an error)."),rMr=l(),xt=a("div"),f(G6.$$.fragment),tMr=l(),t2e=a("p"),aMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nMr=l(),gf=a("p"),sMr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),lMr=o("not"),iMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n2e=a("code"),dMr=o("from_pretrained()"),cMr=o("to load the model weights."),fMr=l(),s2e=a("p"),mMr=o("Examples:"),gMr=l(),f(X6.$$.fragment),hMr=l(),ko=a("div"),f(V6.$$.fragment),pMr=l(),l2e=a("p"),_Mr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uMr=l(),Sn=a("p"),bMr=o("The model class to instantiate is selected based on the "),i2e=a("code"),vMr=o("model_type"),TMr=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),FMr=o("pretrained_model_name_or_path"),CMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(":"),yMr=l(),Ce=a("ul"),z9=a("li"),f2e=a("strong"),wMr=o("bart"),AMr=o(" \u2014 "),yV=a("a"),LMr=o("FlaxBartForConditionalGeneration"),BMr=o(" (BART model)"),xMr=l(),W9=a("li"),m2e=a("strong"),kMr=o("blenderbot"),RMr=o(" \u2014 "),wV=a("a"),SMr=o("FlaxBlenderbotForConditionalGeneration"),PMr=o(" (Blenderbot model)"),$Mr=l(),Q9=a("li"),g2e=a("strong"),IMr=o("blenderbot-small"),jMr=o(" \u2014 "),AV=a("a"),DMr=o("FlaxBlenderbotSmallForConditionalGeneration"),NMr=o(" (BlenderbotSmall model)"),qMr=l(),H9=a("li"),h2e=a("strong"),OMr=o("encoder-decoder"),GMr=o(" \u2014 "),LV=a("a"),XMr=o("FlaxEncoderDecoderModel"),VMr=o(" (Encoder decoder model)"),zMr=l(),U9=a("li"),p2e=a("strong"),WMr=o("marian"),QMr=o(" \u2014 "),BV=a("a"),HMr=o("FlaxMarianMTModel"),UMr=o(" (Marian model)"),JMr=l(),J9=a("li"),_2e=a("strong"),YMr=o("mbart"),KMr=o(" \u2014 "),xV=a("a"),ZMr=o("FlaxMBartForConditionalGeneration"),e4r=o(" (mBART model)"),o4r=l(),Y9=a("li"),u2e=a("strong"),r4r=o("mt5"),t4r=o(" \u2014 "),kV=a("a"),a4r=o("FlaxMT5ForConditionalGeneration"),n4r=o(" (mT5 model)"),s4r=l(),K9=a("li"),b2e=a("strong"),l4r=o("pegasus"),i4r=o(" \u2014 "),RV=a("a"),d4r=o("FlaxPegasusForConditionalGeneration"),c4r=o(" (Pegasus model)"),f4r=l(),Z9=a("li"),v2e=a("strong"),m4r=o("t5"),g4r=o(" \u2014 "),SV=a("a"),h4r=o("FlaxT5ForConditionalGeneration"),p4r=o(" (T5 model)"),_4r=l(),T2e=a("p"),u4r=o("Examples:"),b4r=l(),f(z6.$$.fragment),Xke=l(),hf=a("h2"),eC=a("a"),F2e=a("span"),f(W6.$$.fragment),v4r=l(),C2e=a("span"),T4r=o("FlaxAutoModelForSequenceClassification"),Vke=l(),jr=a("div"),f(Q6.$$.fragment),F4r=l(),pf=a("p"),C4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),M2e=a("code"),M4r=o("from_pretrained()"),E4r=o("class method or the "),E2e=a("code"),y4r=o("from_config()"),w4r=o(`class
method.`),A4r=l(),H6=a("p"),L4r=o("This class cannot be instantiated directly using "),y2e=a("code"),B4r=o("__init__()"),x4r=o(" (throws an error)."),k4r=l(),kt=a("div"),f(U6.$$.fragment),R4r=l(),w2e=a("p"),S4r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),P4r=l(),_f=a("p"),$4r=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),I4r=o("not"),j4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L2e=a("code"),D4r=o("from_pretrained()"),N4r=o("to load the model weights."),q4r=l(),B2e=a("p"),O4r=o("Examples:"),G4r=l(),f(J6.$$.fragment),X4r=l(),Ro=a("div"),f(Y6.$$.fragment),V4r=l(),x2e=a("p"),z4r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),W4r=l(),Pn=a("p"),Q4r=o("The model class to instantiate is selected based on the "),k2e=a("code"),H4r=o("model_type"),U4r=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),J4r=o("pretrained_model_name_or_path"),Y4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=a("code"),K4r=o("pretrained_model_name_or_path"),Z4r=o(":"),eEr=l(),be=a("ul"),oC=a("li"),P2e=a("strong"),oEr=o("albert"),rEr=o(" \u2014 "),PV=a("a"),tEr=o("FlaxAlbertForSequenceClassification"),aEr=o(" (ALBERT model)"),nEr=l(),rC=a("li"),$2e=a("strong"),sEr=o("bart"),lEr=o(" \u2014 "),$V=a("a"),iEr=o("FlaxBartForSequenceClassification"),dEr=o(" (BART model)"),cEr=l(),tC=a("li"),I2e=a("strong"),fEr=o("bert"),mEr=o(" \u2014 "),IV=a("a"),gEr=o("FlaxBertForSequenceClassification"),hEr=o(" (BERT model)"),pEr=l(),aC=a("li"),j2e=a("strong"),_Er=o("big_bird"),uEr=o(" \u2014 "),jV=a("a"),bEr=o("FlaxBigBirdForSequenceClassification"),vEr=o(" (BigBird model)"),TEr=l(),nC=a("li"),D2e=a("strong"),FEr=o("distilbert"),CEr=o(" \u2014 "),DV=a("a"),MEr=o("FlaxDistilBertForSequenceClassification"),EEr=o(" (DistilBERT model)"),yEr=l(),sC=a("li"),N2e=a("strong"),wEr=o("electra"),AEr=o(" \u2014 "),NV=a("a"),LEr=o("FlaxElectraForSequenceClassification"),BEr=o(" (ELECTRA model)"),xEr=l(),lC=a("li"),q2e=a("strong"),kEr=o("mbart"),REr=o(" \u2014 "),qV=a("a"),SEr=o("FlaxMBartForSequenceClassification"),PEr=o(" (mBART model)"),$Er=l(),iC=a("li"),O2e=a("strong"),IEr=o("roberta"),jEr=o(" \u2014 "),OV=a("a"),DEr=o("FlaxRobertaForSequenceClassification"),NEr=o(" (RoBERTa model)"),qEr=l(),dC=a("li"),G2e=a("strong"),OEr=o("roformer"),GEr=o(" \u2014 "),GV=a("a"),XEr=o("FlaxRoFormerForSequenceClassification"),VEr=o(" (RoFormer model)"),zEr=l(),cC=a("li"),X2e=a("strong"),WEr=o("xlm-roberta"),QEr=o(" \u2014 "),XV=a("a"),HEr=o("FlaxXLMRobertaForSequenceClassification"),UEr=o(" (XLM-RoBERTa model)"),JEr=l(),V2e=a("p"),YEr=o("Examples:"),KEr=l(),f(K6.$$.fragment),zke=l(),uf=a("h2"),fC=a("a"),z2e=a("span"),f(Z6.$$.fragment),ZEr=l(),W2e=a("span"),e3r=o("FlaxAutoModelForQuestionAnswering"),Wke=l(),Dr=a("div"),f(eA.$$.fragment),o3r=l(),bf=a("p"),r3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Q2e=a("code"),t3r=o("from_pretrained()"),a3r=o("class method or the "),H2e=a("code"),n3r=o("from_config()"),s3r=o(`class
method.`),l3r=l(),oA=a("p"),i3r=o("This class cannot be instantiated directly using "),U2e=a("code"),d3r=o("__init__()"),c3r=o(" (throws an error)."),f3r=l(),Rt=a("div"),f(rA.$$.fragment),m3r=l(),J2e=a("p"),g3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h3r=l(),vf=a("p"),p3r=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),_3r=o("not"),u3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K2e=a("code"),b3r=o("from_pretrained()"),v3r=o("to load the model weights."),T3r=l(),Z2e=a("p"),F3r=o("Examples:"),C3r=l(),f(tA.$$.fragment),M3r=l(),So=a("div"),f(aA.$$.fragment),E3r=l(),eve=a("p"),y3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w3r=l(),$n=a("p"),A3r=o("The model class to instantiate is selected based on the "),ove=a("code"),L3r=o("model_type"),B3r=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),x3r=o("pretrained_model_name_or_path"),k3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),R3r=o("pretrained_model_name_or_path"),S3r=o(":"),P3r=l(),ve=a("ul"),mC=a("li"),ave=a("strong"),$3r=o("albert"),I3r=o(" \u2014 "),VV=a("a"),j3r=o("FlaxAlbertForQuestionAnswering"),D3r=o(" (ALBERT model)"),N3r=l(),gC=a("li"),nve=a("strong"),q3r=o("bart"),O3r=o(" \u2014 "),zV=a("a"),G3r=o("FlaxBartForQuestionAnswering"),X3r=o(" (BART model)"),V3r=l(),hC=a("li"),sve=a("strong"),z3r=o("bert"),W3r=o(" \u2014 "),WV=a("a"),Q3r=o("FlaxBertForQuestionAnswering"),H3r=o(" (BERT model)"),U3r=l(),pC=a("li"),lve=a("strong"),J3r=o("big_bird"),Y3r=o(" \u2014 "),QV=a("a"),K3r=o("FlaxBigBirdForQuestionAnswering"),Z3r=o(" (BigBird model)"),eyr=l(),_C=a("li"),ive=a("strong"),oyr=o("distilbert"),ryr=o(" \u2014 "),HV=a("a"),tyr=o("FlaxDistilBertForQuestionAnswering"),ayr=o(" (DistilBERT model)"),nyr=l(),uC=a("li"),dve=a("strong"),syr=o("electra"),lyr=o(" \u2014 "),UV=a("a"),iyr=o("FlaxElectraForQuestionAnswering"),dyr=o(" (ELECTRA model)"),cyr=l(),bC=a("li"),cve=a("strong"),fyr=o("mbart"),myr=o(" \u2014 "),JV=a("a"),gyr=o("FlaxMBartForQuestionAnswering"),hyr=o(" (mBART model)"),pyr=l(),vC=a("li"),fve=a("strong"),_yr=o("roberta"),uyr=o(" \u2014 "),YV=a("a"),byr=o("FlaxRobertaForQuestionAnswering"),vyr=o(" (RoBERTa model)"),Tyr=l(),TC=a("li"),mve=a("strong"),Fyr=o("roformer"),Cyr=o(" \u2014 "),KV=a("a"),Myr=o("FlaxRoFormerForQuestionAnswering"),Eyr=o(" (RoFormer model)"),yyr=l(),FC=a("li"),gve=a("strong"),wyr=o("xlm-roberta"),Ayr=o(" \u2014 "),ZV=a("a"),Lyr=o("FlaxXLMRobertaForQuestionAnswering"),Byr=o(" (XLM-RoBERTa model)"),xyr=l(),hve=a("p"),kyr=o("Examples:"),Ryr=l(),f(nA.$$.fragment),Qke=l(),Tf=a("h2"),CC=a("a"),pve=a("span"),f(sA.$$.fragment),Syr=l(),_ve=a("span"),Pyr=o("FlaxAutoModelForTokenClassification"),Hke=l(),Nr=a("div"),f(lA.$$.fragment),$yr=l(),Ff=a("p"),Iyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uve=a("code"),jyr=o("from_pretrained()"),Dyr=o("class method or the "),bve=a("code"),Nyr=o("from_config()"),qyr=o(`class
method.`),Oyr=l(),iA=a("p"),Gyr=o("This class cannot be instantiated directly using "),vve=a("code"),Xyr=o("__init__()"),Vyr=o(" (throws an error)."),zyr=l(),St=a("div"),f(dA.$$.fragment),Wyr=l(),Tve=a("p"),Qyr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hyr=l(),Cf=a("p"),Uyr=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),Jyr=o("not"),Yyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cve=a("code"),Kyr=o("from_pretrained()"),Zyr=o("to load the model weights."),ewr=l(),Mve=a("p"),owr=o("Examples:"),rwr=l(),f(cA.$$.fragment),twr=l(),Po=a("div"),f(fA.$$.fragment),awr=l(),Eve=a("p"),nwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),swr=l(),In=a("p"),lwr=o("The model class to instantiate is selected based on the "),yve=a("code"),iwr=o("model_type"),dwr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),cwr=o("pretrained_model_name_or_path"),fwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),mwr=o("pretrained_model_name_or_path"),gwr=o(":"),hwr=l(),Re=a("ul"),MC=a("li"),Lve=a("strong"),pwr=o("albert"),_wr=o(" \u2014 "),ez=a("a"),uwr=o("FlaxAlbertForTokenClassification"),bwr=o(" (ALBERT model)"),vwr=l(),EC=a("li"),Bve=a("strong"),Twr=o("bert"),Fwr=o(" \u2014 "),oz=a("a"),Cwr=o("FlaxBertForTokenClassification"),Mwr=o(" (BERT model)"),Ewr=l(),yC=a("li"),xve=a("strong"),ywr=o("big_bird"),wwr=o(" \u2014 "),rz=a("a"),Awr=o("FlaxBigBirdForTokenClassification"),Lwr=o(" (BigBird model)"),Bwr=l(),wC=a("li"),kve=a("strong"),xwr=o("distilbert"),kwr=o(" \u2014 "),tz=a("a"),Rwr=o("FlaxDistilBertForTokenClassification"),Swr=o(" (DistilBERT model)"),Pwr=l(),AC=a("li"),Rve=a("strong"),$wr=o("electra"),Iwr=o(" \u2014 "),az=a("a"),jwr=o("FlaxElectraForTokenClassification"),Dwr=o(" (ELECTRA model)"),Nwr=l(),LC=a("li"),Sve=a("strong"),qwr=o("roberta"),Owr=o(" \u2014 "),nz=a("a"),Gwr=o("FlaxRobertaForTokenClassification"),Xwr=o(" (RoBERTa model)"),Vwr=l(),BC=a("li"),Pve=a("strong"),zwr=o("roformer"),Wwr=o(" \u2014 "),sz=a("a"),Qwr=o("FlaxRoFormerForTokenClassification"),Hwr=o(" (RoFormer model)"),Uwr=l(),xC=a("li"),$ve=a("strong"),Jwr=o("xlm-roberta"),Ywr=o(" \u2014 "),lz=a("a"),Kwr=o("FlaxXLMRobertaForTokenClassification"),Zwr=o(" (XLM-RoBERTa model)"),e6r=l(),Ive=a("p"),o6r=o("Examples:"),r6r=l(),f(mA.$$.fragment),Uke=l(),Mf=a("h2"),kC=a("a"),jve=a("span"),f(gA.$$.fragment),t6r=l(),Dve=a("span"),a6r=o("FlaxAutoModelForMultipleChoice"),Jke=l(),qr=a("div"),f(hA.$$.fragment),n6r=l(),Ef=a("p"),s6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Nve=a("code"),l6r=o("from_pretrained()"),i6r=o("class method or the "),qve=a("code"),d6r=o("from_config()"),c6r=o(`class
method.`),f6r=l(),pA=a("p"),m6r=o("This class cannot be instantiated directly using "),Ove=a("code"),g6r=o("__init__()"),h6r=o(" (throws an error)."),p6r=l(),Pt=a("div"),f(_A.$$.fragment),_6r=l(),Gve=a("p"),u6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),b6r=l(),yf=a("p"),v6r=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),T6r=o("not"),F6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vve=a("code"),C6r=o("from_pretrained()"),M6r=o("to load the model weights."),E6r=l(),zve=a("p"),y6r=o("Examples:"),w6r=l(),f(uA.$$.fragment),A6r=l(),$o=a("div"),f(bA.$$.fragment),L6r=l(),Wve=a("p"),B6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),x6r=l(),jn=a("p"),k6r=o("The model class to instantiate is selected based on the "),Qve=a("code"),R6r=o("model_type"),S6r=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),P6r=o("pretrained_model_name_or_path"),$6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),I6r=o("pretrained_model_name_or_path"),j6r=o(":"),D6r=l(),Se=a("ul"),RC=a("li"),Jve=a("strong"),N6r=o("albert"),q6r=o(" \u2014 "),iz=a("a"),O6r=o("FlaxAlbertForMultipleChoice"),G6r=o(" (ALBERT model)"),X6r=l(),SC=a("li"),Yve=a("strong"),V6r=o("bert"),z6r=o(" \u2014 "),dz=a("a"),W6r=o("FlaxBertForMultipleChoice"),Q6r=o(" (BERT model)"),H6r=l(),PC=a("li"),Kve=a("strong"),U6r=o("big_bird"),J6r=o(" \u2014 "),cz=a("a"),Y6r=o("FlaxBigBirdForMultipleChoice"),K6r=o(" (BigBird model)"),Z6r=l(),$C=a("li"),Zve=a("strong"),eAr=o("distilbert"),oAr=o(" \u2014 "),fz=a("a"),rAr=o("FlaxDistilBertForMultipleChoice"),tAr=o(" (DistilBERT model)"),aAr=l(),IC=a("li"),e0e=a("strong"),nAr=o("electra"),sAr=o(" \u2014 "),mz=a("a"),lAr=o("FlaxElectraForMultipleChoice"),iAr=o(" (ELECTRA model)"),dAr=l(),jC=a("li"),o0e=a("strong"),cAr=o("roberta"),fAr=o(" \u2014 "),gz=a("a"),mAr=o("FlaxRobertaForMultipleChoice"),gAr=o(" (RoBERTa model)"),hAr=l(),DC=a("li"),r0e=a("strong"),pAr=o("roformer"),_Ar=o(" \u2014 "),hz=a("a"),uAr=o("FlaxRoFormerForMultipleChoice"),bAr=o(" (RoFormer model)"),vAr=l(),NC=a("li"),t0e=a("strong"),TAr=o("xlm-roberta"),FAr=o(" \u2014 "),pz=a("a"),CAr=o("FlaxXLMRobertaForMultipleChoice"),MAr=o(" (XLM-RoBERTa model)"),EAr=l(),a0e=a("p"),yAr=o("Examples:"),wAr=l(),f(vA.$$.fragment),Yke=l(),wf=a("h2"),qC=a("a"),n0e=a("span"),f(TA.$$.fragment),AAr=l(),s0e=a("span"),LAr=o("FlaxAutoModelForNextSentencePrediction"),Kke=l(),Or=a("div"),f(FA.$$.fragment),BAr=l(),Af=a("p"),xAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),l0e=a("code"),kAr=o("from_pretrained()"),RAr=o("class method or the "),i0e=a("code"),SAr=o("from_config()"),PAr=o(`class
method.`),$Ar=l(),CA=a("p"),IAr=o("This class cannot be instantiated directly using "),d0e=a("code"),jAr=o("__init__()"),DAr=o(" (throws an error)."),NAr=l(),$t=a("div"),f(MA.$$.fragment),qAr=l(),c0e=a("p"),OAr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GAr=l(),Lf=a("p"),XAr=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),VAr=o("not"),zAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m0e=a("code"),WAr=o("from_pretrained()"),QAr=o("to load the model weights."),HAr=l(),g0e=a("p"),UAr=o("Examples:"),JAr=l(),f(EA.$$.fragment),YAr=l(),Io=a("div"),f(yA.$$.fragment),KAr=l(),h0e=a("p"),ZAr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eLr=l(),Dn=a("p"),oLr=o("The model class to instantiate is selected based on the "),p0e=a("code"),rLr=o("model_type"),tLr=o(` property of the config object (either
passed as an argument or loaded from `),_0e=a("code"),aLr=o("pretrained_model_name_or_path"),nLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=a("code"),sLr=o("pretrained_model_name_or_path"),lLr=o(":"),iLr=l(),b0e=a("ul"),OC=a("li"),v0e=a("strong"),dLr=o("bert"),cLr=o(" \u2014 "),_z=a("a"),fLr=o("FlaxBertForNextSentencePrediction"),mLr=o(" (BERT model)"),gLr=l(),T0e=a("p"),hLr=o("Examples:"),pLr=l(),f(wA.$$.fragment),Zke=l(),Bf=a("h2"),GC=a("a"),F0e=a("span"),f(AA.$$.fragment),_Lr=l(),C0e=a("span"),uLr=o("FlaxAutoModelForImageClassification"),eRe=l(),Gr=a("div"),f(LA.$$.fragment),bLr=l(),xf=a("p"),vLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),M0e=a("code"),TLr=o("from_pretrained()"),FLr=o("class method or the "),E0e=a("code"),CLr=o("from_config()"),MLr=o(`class
method.`),ELr=l(),BA=a("p"),yLr=o("This class cannot be instantiated directly using "),y0e=a("code"),wLr=o("__init__()"),ALr=o(" (throws an error)."),LLr=l(),It=a("div"),f(xA.$$.fragment),BLr=l(),w0e=a("p"),xLr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kLr=l(),kf=a("p"),RLr=o(`Note:
Loading a model from its configuration file does `),A0e=a("strong"),SLr=o("not"),PLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L0e=a("code"),$Lr=o("from_pretrained()"),ILr=o("to load the model weights."),jLr=l(),B0e=a("p"),DLr=o("Examples:"),NLr=l(),f(kA.$$.fragment),qLr=l(),jo=a("div"),f(RA.$$.fragment),OLr=l(),x0e=a("p"),GLr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XLr=l(),Nn=a("p"),VLr=o("The model class to instantiate is selected based on the "),k0e=a("code"),zLr=o("model_type"),WLr=o(` property of the config object (either
passed as an argument or loaded from `),R0e=a("code"),QLr=o("pretrained_model_name_or_path"),HLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=a("code"),ULr=o("pretrained_model_name_or_path"),JLr=o(":"),YLr=l(),SA=a("ul"),XC=a("li"),P0e=a("strong"),KLr=o("beit"),ZLr=o(" \u2014 "),uz=a("a"),e8r=o("FlaxBeitForImageClassification"),o8r=o(" (BEiT model)"),r8r=l(),VC=a("li"),$0e=a("strong"),t8r=o("vit"),a8r=o(" \u2014 "),bz=a("a"),n8r=o("FlaxViTForImageClassification"),s8r=o(" (ViT model)"),l8r=l(),I0e=a("p"),i8r=o("Examples:"),d8r=l(),f(PA.$$.fragment),oRe=l(),Rf=a("h2"),zC=a("a"),j0e=a("span"),f($A.$$.fragment),c8r=l(),D0e=a("span"),f8r=o("FlaxAutoModelForVision2Seq"),rRe=l(),Xr=a("div"),f(IA.$$.fragment),m8r=l(),Sf=a("p"),g8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),N0e=a("code"),h8r=o("from_pretrained()"),p8r=o("class method or the "),q0e=a("code"),_8r=o("from_config()"),u8r=o(`class
method.`),b8r=l(),jA=a("p"),v8r=o("This class cannot be instantiated directly using "),O0e=a("code"),T8r=o("__init__()"),F8r=o(" (throws an error)."),C8r=l(),jt=a("div"),f(DA.$$.fragment),M8r=l(),G0e=a("p"),E8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),y8r=l(),Pf=a("p"),w8r=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),A8r=o("not"),L8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V0e=a("code"),B8r=o("from_pretrained()"),x8r=o("to load the model weights."),k8r=l(),z0e=a("p"),R8r=o("Examples:"),S8r=l(),f(NA.$$.fragment),P8r=l(),Do=a("div"),f(qA.$$.fragment),$8r=l(),W0e=a("p"),I8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),j8r=l(),qn=a("p"),D8r=o("The model class to instantiate is selected based on the "),Q0e=a("code"),N8r=o("model_type"),q8r=o(` property of the config object (either
passed as an argument or loaded from `),H0e=a("code"),O8r=o("pretrained_model_name_or_path"),G8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=a("code"),X8r=o("pretrained_model_name_or_path"),V8r=o(":"),z8r=l(),J0e=a("ul"),WC=a("li"),Y0e=a("strong"),W8r=o("vision-encoder-decoder"),Q8r=o(" \u2014 "),vz=a("a"),H8r=o("FlaxVisionEncoderDecoderModel"),U8r=o(" (Vision Encoder decoder model)"),J8r=l(),K0e=a("p"),Y8r=o("Examples:"),K8r=l(),f(OA.$$.fragment),this.h()},l(d){const u=ATt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Pe=i(d),de=n(d,"H1",{class:!0});var GA=s(de);ge=n(GA,"A",{id:!0,class:!0,href:!0});var Z0e=s(ge);io=n(Z0e,"SPAN",{});var eTe=s(io);m(fe.$$.fragment,eTe),eTe.forEach(t),Z0e.forEach(t),Te=i(GA),Vo=n(GA,"SPAN",{});var eBr=s(Vo);ji=r(eBr,"Auto Classes"),eBr.forEach(t),GA.forEach(t),If=i(d),fa=n(d,"P",{});var aRe=s(fa);Di=r(aRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(aRe,"CODE",{});var oBr=s(Ni);WM=r(oBr,"from_pretrained()"),oBr.forEach(t),jf=r(aRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),aRe.forEach(t),Le=i(d),co=n(d,"P",{});var QC=s(co);qi=r(QC,"Instantiating one of "),On=n(QC,"A",{href:!0});var rBr=s(On);QM=r(rBr,"AutoConfig"),rBr.forEach(t),Gn=r(QC,", "),Xn=n(QC,"A",{href:!0});var tBr=s(Xn);HM=r(tBr,"AutoModel"),tBr.forEach(t),Oi=r(QC,`, and
`),Vn=n(QC,"A",{href:!0});var aBr=s(Vn);UM=r(aBr,"AutoTokenizer"),aBr.forEach(t),Gi=r(QC," will directly create a class of the relevant architecture. For instance"),QC.forEach(t),Df=i(d),m(qa.$$.fragment,d),fo=i(d),he=n(d,"P",{});var nRe=s(he);NL=r(nRe,"will create a model that is an instance of "),Xi=n(nRe,"A",{href:!0});var nBr=s(Xi);qL=r(nBr,"BertModel"),nBr.forEach(t),OL=r(nRe,"."),nRe.forEach(t),zo=i(d),Oa=n(d,"P",{});var sRe=s(Oa);GL=r(sRe,"There is one class of "),Nf=n(sRe,"CODE",{});var sBr=s(Nf);XL=r(sBr,"AutoModel"),sBr.forEach(t),_Pe=r(sRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),sRe.forEach(t),rxe=i(d),Vi=n(d,"H2",{class:!0});var lRe=s(Vi);qf=n(lRe,"A",{id:!0,class:!0,href:!0});var lBr=s(qf);mQ=n(lBr,"SPAN",{});var iBr=s(mQ);m(JM.$$.fragment,iBr),iBr.forEach(t),lBr.forEach(t),uPe=i(lRe),gQ=n(lRe,"SPAN",{});var dBr=s(gQ);bPe=r(dBr,"Extending the Auto Classes"),dBr.forEach(t),lRe.forEach(t),txe=i(d),zn=n(d,"P",{});var Tz=s(zn);vPe=r(Tz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hQ=n(Tz,"CODE",{});var cBr=s(hQ);TPe=r(cBr,"NewModel"),cBr.forEach(t),FPe=r(Tz,", make sure you have a "),pQ=n(Tz,"CODE",{});var fBr=s(pQ);CPe=r(fBr,"NewModelConfig"),fBr.forEach(t),MPe=r(Tz,` then you can add those to the auto
classes like this:`),Tz.forEach(t),axe=i(d),m(YM.$$.fragment,d),nxe=i(d),VL=n(d,"P",{});var mBr=s(VL);EPe=r(mBr,"You will then be able to use the auto classes like you would usually do!"),mBr.forEach(t),sxe=i(d),m(Of.$$.fragment,d),lxe=i(d),zi=n(d,"H2",{class:!0});var iRe=s(zi);Gf=n(iRe,"A",{id:!0,class:!0,href:!0});var gBr=s(Gf);_Q=n(gBr,"SPAN",{});var hBr=s(_Q);m(KM.$$.fragment,hBr),hBr.forEach(t),gBr.forEach(t),yPe=i(iRe),uQ=n(iRe,"SPAN",{});var pBr=s(uQ);wPe=r(pBr,"AutoConfig"),pBr.forEach(t),iRe.forEach(t),ixe=i(d),Wo=n(d,"DIV",{class:!0});var Gs=s(Wo);m(ZM.$$.fragment,Gs),APe=i(Gs),e4=n(Gs,"P",{});var dRe=s(e4);LPe=r(dRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),zL=n(dRe,"A",{href:!0});var _Br=s(zL);BPe=r(_Br,"from_pretrained()"),_Br.forEach(t),xPe=r(dRe," class method."),dRe.forEach(t),kPe=i(Gs),o4=n(Gs,"P",{});var cRe=s(o4);RPe=r(cRe,"This class cannot be instantiated directly using "),bQ=n(cRe,"CODE",{});var uBr=s(bQ);SPe=r(uBr,"__init__()"),uBr.forEach(t),PPe=r(cRe," (throws an error)."),cRe.forEach(t),$Pe=i(Gs),mo=n(Gs,"DIV",{class:!0});var ga=s(mo);m(r4.$$.fragment,ga),IPe=i(ga),vQ=n(ga,"P",{});var bBr=s(vQ);jPe=r(bBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),bBr.forEach(t),DPe=i(ga),Wi=n(ga,"P",{});var Fz=s(Wi);NPe=r(Fz,"The configuration class to instantiate is selected based on the "),TQ=n(Fz,"CODE",{});var vBr=s(TQ);qPe=r(vBr,"model_type"),vBr.forEach(t),OPe=r(Fz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),FQ=n(Fz,"CODE",{});var TBr=s(FQ);GPe=r(TBr,"pretrained_model_name_or_path"),TBr.forEach(t),XPe=r(Fz,":"),Fz.forEach(t),VPe=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var oTe=s(Xf);CQ=n(oTe,"STRONG",{});var FBr=s(CQ);zPe=r(FBr,"albert"),FBr.forEach(t),WPe=r(oTe," \u2014 "),WL=n(oTe,"A",{href:!0});var CBr=s(WL);QPe=r(CBr,"AlbertConfig"),CBr.forEach(t),HPe=r(oTe," (ALBERT model)"),oTe.forEach(t),UPe=i(T),Vf=n(T,"LI",{});var rTe=s(Vf);MQ=n(rTe,"STRONG",{});var MBr=s(MQ);JPe=r(MBr,"bart"),MBr.forEach(t),YPe=r(rTe," \u2014 "),QL=n(rTe,"A",{href:!0});var EBr=s(QL);KPe=r(EBr,"BartConfig"),EBr.forEach(t),ZPe=r(rTe," (BART model)"),rTe.forEach(t),e$e=i(T),zf=n(T,"LI",{});var tTe=s(zf);EQ=n(tTe,"STRONG",{});var yBr=s(EQ);o$e=r(yBr,"beit"),yBr.forEach(t),r$e=r(tTe," \u2014 "),HL=n(tTe,"A",{href:!0});var wBr=s(HL);t$e=r(wBr,"BeitConfig"),wBr.forEach(t),a$e=r(tTe," (BEiT model)"),tTe.forEach(t),n$e=i(T),Wf=n(T,"LI",{});var aTe=s(Wf);yQ=n(aTe,"STRONG",{});var ABr=s(yQ);s$e=r(ABr,"bert"),ABr.forEach(t),l$e=r(aTe," \u2014 "),UL=n(aTe,"A",{href:!0});var LBr=s(UL);i$e=r(LBr,"BertConfig"),LBr.forEach(t),d$e=r(aTe," (BERT model)"),aTe.forEach(t),c$e=i(T),Qf=n(T,"LI",{});var nTe=s(Qf);wQ=n(nTe,"STRONG",{});var BBr=s(wQ);f$e=r(BBr,"bert-generation"),BBr.forEach(t),m$e=r(nTe," \u2014 "),JL=n(nTe,"A",{href:!0});var xBr=s(JL);g$e=r(xBr,"BertGenerationConfig"),xBr.forEach(t),h$e=r(nTe," (Bert Generation model)"),nTe.forEach(t),p$e=i(T),Hf=n(T,"LI",{});var sTe=s(Hf);AQ=n(sTe,"STRONG",{});var kBr=s(AQ);_$e=r(kBr,"big_bird"),kBr.forEach(t),u$e=r(sTe," \u2014 "),YL=n(sTe,"A",{href:!0});var RBr=s(YL);b$e=r(RBr,"BigBirdConfig"),RBr.forEach(t),v$e=r(sTe," (BigBird model)"),sTe.forEach(t),T$e=i(T),Uf=n(T,"LI",{});var lTe=s(Uf);LQ=n(lTe,"STRONG",{});var SBr=s(LQ);F$e=r(SBr,"bigbird_pegasus"),SBr.forEach(t),C$e=r(lTe," \u2014 "),KL=n(lTe,"A",{href:!0});var PBr=s(KL);M$e=r(PBr,"BigBirdPegasusConfig"),PBr.forEach(t),E$e=r(lTe," (BigBirdPegasus model)"),lTe.forEach(t),y$e=i(T),Jf=n(T,"LI",{});var iTe=s(Jf);BQ=n(iTe,"STRONG",{});var $Br=s(BQ);w$e=r($Br,"blenderbot"),$Br.forEach(t),A$e=r(iTe," \u2014 "),ZL=n(iTe,"A",{href:!0});var IBr=s(ZL);L$e=r(IBr,"BlenderbotConfig"),IBr.forEach(t),B$e=r(iTe," (Blenderbot model)"),iTe.forEach(t),x$e=i(T),Yf=n(T,"LI",{});var dTe=s(Yf);xQ=n(dTe,"STRONG",{});var jBr=s(xQ);k$e=r(jBr,"blenderbot-small"),jBr.forEach(t),R$e=r(dTe," \u2014 "),e8=n(dTe,"A",{href:!0});var DBr=s(e8);S$e=r(DBr,"BlenderbotSmallConfig"),DBr.forEach(t),P$e=r(dTe," (BlenderbotSmall model)"),dTe.forEach(t),$$e=i(T),Kf=n(T,"LI",{});var cTe=s(Kf);kQ=n(cTe,"STRONG",{});var NBr=s(kQ);I$e=r(NBr,"camembert"),NBr.forEach(t),j$e=r(cTe," \u2014 "),o8=n(cTe,"A",{href:!0});var qBr=s(o8);D$e=r(qBr,"CamembertConfig"),qBr.forEach(t),N$e=r(cTe," (CamemBERT model)"),cTe.forEach(t),q$e=i(T),Zf=n(T,"LI",{});var fTe=s(Zf);RQ=n(fTe,"STRONG",{});var OBr=s(RQ);O$e=r(OBr,"canine"),OBr.forEach(t),G$e=r(fTe," \u2014 "),r8=n(fTe,"A",{href:!0});var GBr=s(r8);X$e=r(GBr,"CanineConfig"),GBr.forEach(t),V$e=r(fTe," (Canine model)"),fTe.forEach(t),z$e=i(T),em=n(T,"LI",{});var mTe=s(em);SQ=n(mTe,"STRONG",{});var XBr=s(SQ);W$e=r(XBr,"clip"),XBr.forEach(t),Q$e=r(mTe," \u2014 "),t8=n(mTe,"A",{href:!0});var VBr=s(t8);H$e=r(VBr,"CLIPConfig"),VBr.forEach(t),U$e=r(mTe," (CLIP model)"),mTe.forEach(t),J$e=i(T),om=n(T,"LI",{});var gTe=s(om);PQ=n(gTe,"STRONG",{});var zBr=s(PQ);Y$e=r(zBr,"convbert"),zBr.forEach(t),K$e=r(gTe," \u2014 "),a8=n(gTe,"A",{href:!0});var WBr=s(a8);Z$e=r(WBr,"ConvBertConfig"),WBr.forEach(t),eIe=r(gTe," (ConvBERT model)"),gTe.forEach(t),oIe=i(T),rm=n(T,"LI",{});var hTe=s(rm);$Q=n(hTe,"STRONG",{});var QBr=s($Q);rIe=r(QBr,"convnext"),QBr.forEach(t),tIe=r(hTe," \u2014 "),n8=n(hTe,"A",{href:!0});var HBr=s(n8);aIe=r(HBr,"ConvNextConfig"),HBr.forEach(t),nIe=r(hTe," (ConvNext model)"),hTe.forEach(t),sIe=i(T),tm=n(T,"LI",{});var pTe=s(tm);IQ=n(pTe,"STRONG",{});var UBr=s(IQ);lIe=r(UBr,"ctrl"),UBr.forEach(t),iIe=r(pTe," \u2014 "),s8=n(pTe,"A",{href:!0});var JBr=s(s8);dIe=r(JBr,"CTRLConfig"),JBr.forEach(t),cIe=r(pTe," (CTRL model)"),pTe.forEach(t),fIe=i(T),am=n(T,"LI",{});var _Te=s(am);jQ=n(_Te,"STRONG",{});var YBr=s(jQ);mIe=r(YBr,"data2vec-audio"),YBr.forEach(t),gIe=r(_Te," \u2014 "),l8=n(_Te,"A",{href:!0});var KBr=s(l8);hIe=r(KBr,"Data2VecAudioConfig"),KBr.forEach(t),pIe=r(_Te," (Data2VecAudio model)"),_Te.forEach(t),_Ie=i(T),nm=n(T,"LI",{});var uTe=s(nm);DQ=n(uTe,"STRONG",{});var ZBr=s(DQ);uIe=r(ZBr,"data2vec-text"),ZBr.forEach(t),bIe=r(uTe," \u2014 "),i8=n(uTe,"A",{href:!0});var exr=s(i8);vIe=r(exr,"Data2VecTextConfig"),exr.forEach(t),TIe=r(uTe," (Data2VecText model)"),uTe.forEach(t),FIe=i(T),sm=n(T,"LI",{});var bTe=s(sm);NQ=n(bTe,"STRONG",{});var oxr=s(NQ);CIe=r(oxr,"deberta"),oxr.forEach(t),MIe=r(bTe," \u2014 "),d8=n(bTe,"A",{href:!0});var rxr=s(d8);EIe=r(rxr,"DebertaConfig"),rxr.forEach(t),yIe=r(bTe," (DeBERTa model)"),bTe.forEach(t),wIe=i(T),lm=n(T,"LI",{});var vTe=s(lm);qQ=n(vTe,"STRONG",{});var txr=s(qQ);AIe=r(txr,"deberta-v2"),txr.forEach(t),LIe=r(vTe," \u2014 "),c8=n(vTe,"A",{href:!0});var axr=s(c8);BIe=r(axr,"DebertaV2Config"),axr.forEach(t),xIe=r(vTe," (DeBERTa-v2 model)"),vTe.forEach(t),kIe=i(T),im=n(T,"LI",{});var TTe=s(im);OQ=n(TTe,"STRONG",{});var nxr=s(OQ);RIe=r(nxr,"deit"),nxr.forEach(t),SIe=r(TTe," \u2014 "),f8=n(TTe,"A",{href:!0});var sxr=s(f8);PIe=r(sxr,"DeiTConfig"),sxr.forEach(t),$Ie=r(TTe," (DeiT model)"),TTe.forEach(t),IIe=i(T),dm=n(T,"LI",{});var FTe=s(dm);GQ=n(FTe,"STRONG",{});var lxr=s(GQ);jIe=r(lxr,"detr"),lxr.forEach(t),DIe=r(FTe," \u2014 "),m8=n(FTe,"A",{href:!0});var ixr=s(m8);NIe=r(ixr,"DetrConfig"),ixr.forEach(t),qIe=r(FTe," (DETR model)"),FTe.forEach(t),OIe=i(T),cm=n(T,"LI",{});var CTe=s(cm);XQ=n(CTe,"STRONG",{});var dxr=s(XQ);GIe=r(dxr,"distilbert"),dxr.forEach(t),XIe=r(CTe," \u2014 "),g8=n(CTe,"A",{href:!0});var cxr=s(g8);VIe=r(cxr,"DistilBertConfig"),cxr.forEach(t),zIe=r(CTe," (DistilBERT model)"),CTe.forEach(t),WIe=i(T),fm=n(T,"LI",{});var MTe=s(fm);VQ=n(MTe,"STRONG",{});var fxr=s(VQ);QIe=r(fxr,"dpr"),fxr.forEach(t),HIe=r(MTe," \u2014 "),h8=n(MTe,"A",{href:!0});var mxr=s(h8);UIe=r(mxr,"DPRConfig"),mxr.forEach(t),JIe=r(MTe," (DPR model)"),MTe.forEach(t),YIe=i(T),mm=n(T,"LI",{});var ETe=s(mm);zQ=n(ETe,"STRONG",{});var gxr=s(zQ);KIe=r(gxr,"electra"),gxr.forEach(t),ZIe=r(ETe," \u2014 "),p8=n(ETe,"A",{href:!0});var hxr=s(p8);eje=r(hxr,"ElectraConfig"),hxr.forEach(t),oje=r(ETe," (ELECTRA model)"),ETe.forEach(t),rje=i(T),gm=n(T,"LI",{});var yTe=s(gm);WQ=n(yTe,"STRONG",{});var pxr=s(WQ);tje=r(pxr,"encoder-decoder"),pxr.forEach(t),aje=r(yTe," \u2014 "),_8=n(yTe,"A",{href:!0});var _xr=s(_8);nje=r(_xr,"EncoderDecoderConfig"),_xr.forEach(t),sje=r(yTe," (Encoder decoder model)"),yTe.forEach(t),lje=i(T),hm=n(T,"LI",{});var wTe=s(hm);QQ=n(wTe,"STRONG",{});var uxr=s(QQ);ije=r(uxr,"flaubert"),uxr.forEach(t),dje=r(wTe," \u2014 "),u8=n(wTe,"A",{href:!0});var bxr=s(u8);cje=r(bxr,"FlaubertConfig"),bxr.forEach(t),fje=r(wTe," (FlauBERT model)"),wTe.forEach(t),mje=i(T),pm=n(T,"LI",{});var ATe=s(pm);HQ=n(ATe,"STRONG",{});var vxr=s(HQ);gje=r(vxr,"fnet"),vxr.forEach(t),hje=r(ATe," \u2014 "),b8=n(ATe,"A",{href:!0});var Txr=s(b8);pje=r(Txr,"FNetConfig"),Txr.forEach(t),_je=r(ATe," (FNet model)"),ATe.forEach(t),uje=i(T),_m=n(T,"LI",{});var LTe=s(_m);UQ=n(LTe,"STRONG",{});var Fxr=s(UQ);bje=r(Fxr,"fsmt"),Fxr.forEach(t),vje=r(LTe," \u2014 "),v8=n(LTe,"A",{href:!0});var Cxr=s(v8);Tje=r(Cxr,"FSMTConfig"),Cxr.forEach(t),Fje=r(LTe," (FairSeq Machine-Translation model)"),LTe.forEach(t),Cje=i(T),um=n(T,"LI",{});var BTe=s(um);JQ=n(BTe,"STRONG",{});var Mxr=s(JQ);Mje=r(Mxr,"funnel"),Mxr.forEach(t),Eje=r(BTe," \u2014 "),T8=n(BTe,"A",{href:!0});var Exr=s(T8);yje=r(Exr,"FunnelConfig"),Exr.forEach(t),wje=r(BTe," (Funnel Transformer model)"),BTe.forEach(t),Aje=i(T),bm=n(T,"LI",{});var xTe=s(bm);YQ=n(xTe,"STRONG",{});var yxr=s(YQ);Lje=r(yxr,"gpt2"),yxr.forEach(t),Bje=r(xTe," \u2014 "),F8=n(xTe,"A",{href:!0});var wxr=s(F8);xje=r(wxr,"GPT2Config"),wxr.forEach(t),kje=r(xTe," (OpenAI GPT-2 model)"),xTe.forEach(t),Rje=i(T),vm=n(T,"LI",{});var kTe=s(vm);KQ=n(kTe,"STRONG",{});var Axr=s(KQ);Sje=r(Axr,"gpt_neo"),Axr.forEach(t),Pje=r(kTe," \u2014 "),C8=n(kTe,"A",{href:!0});var Lxr=s(C8);$je=r(Lxr,"GPTNeoConfig"),Lxr.forEach(t),Ije=r(kTe," (GPT Neo model)"),kTe.forEach(t),jje=i(T),Tm=n(T,"LI",{});var RTe=s(Tm);ZQ=n(RTe,"STRONG",{});var Bxr=s(ZQ);Dje=r(Bxr,"gptj"),Bxr.forEach(t),Nje=r(RTe," \u2014 "),M8=n(RTe,"A",{href:!0});var xxr=s(M8);qje=r(xxr,"GPTJConfig"),xxr.forEach(t),Oje=r(RTe," (GPT-J model)"),RTe.forEach(t),Gje=i(T),Fm=n(T,"LI",{});var STe=s(Fm);eH=n(STe,"STRONG",{});var kxr=s(eH);Xje=r(kxr,"hubert"),kxr.forEach(t),Vje=r(STe," \u2014 "),E8=n(STe,"A",{href:!0});var Rxr=s(E8);zje=r(Rxr,"HubertConfig"),Rxr.forEach(t),Wje=r(STe," (Hubert model)"),STe.forEach(t),Qje=i(T),Cm=n(T,"LI",{});var PTe=s(Cm);oH=n(PTe,"STRONG",{});var Sxr=s(oH);Hje=r(Sxr,"ibert"),Sxr.forEach(t),Uje=r(PTe," \u2014 "),y8=n(PTe,"A",{href:!0});var Pxr=s(y8);Jje=r(Pxr,"IBertConfig"),Pxr.forEach(t),Yje=r(PTe," (I-BERT model)"),PTe.forEach(t),Kje=i(T),Mm=n(T,"LI",{});var $Te=s(Mm);rH=n($Te,"STRONG",{});var $xr=s(rH);Zje=r($xr,"imagegpt"),$xr.forEach(t),eDe=r($Te," \u2014 "),w8=n($Te,"A",{href:!0});var Ixr=s(w8);oDe=r(Ixr,"ImageGPTConfig"),Ixr.forEach(t),rDe=r($Te," (ImageGPT model)"),$Te.forEach(t),tDe=i(T),Em=n(T,"LI",{});var ITe=s(Em);tH=n(ITe,"STRONG",{});var jxr=s(tH);aDe=r(jxr,"layoutlm"),jxr.forEach(t),nDe=r(ITe," \u2014 "),A8=n(ITe,"A",{href:!0});var Dxr=s(A8);sDe=r(Dxr,"LayoutLMConfig"),Dxr.forEach(t),lDe=r(ITe," (LayoutLM model)"),ITe.forEach(t),iDe=i(T),ym=n(T,"LI",{});var jTe=s(ym);aH=n(jTe,"STRONG",{});var Nxr=s(aH);dDe=r(Nxr,"layoutlmv2"),Nxr.forEach(t),cDe=r(jTe," \u2014 "),L8=n(jTe,"A",{href:!0});var qxr=s(L8);fDe=r(qxr,"LayoutLMv2Config"),qxr.forEach(t),mDe=r(jTe," (LayoutLMv2 model)"),jTe.forEach(t),gDe=i(T),wm=n(T,"LI",{});var DTe=s(wm);nH=n(DTe,"STRONG",{});var Oxr=s(nH);hDe=r(Oxr,"led"),Oxr.forEach(t),pDe=r(DTe," \u2014 "),B8=n(DTe,"A",{href:!0});var Gxr=s(B8);_De=r(Gxr,"LEDConfig"),Gxr.forEach(t),uDe=r(DTe," (LED model)"),DTe.forEach(t),bDe=i(T),Am=n(T,"LI",{});var NTe=s(Am);sH=n(NTe,"STRONG",{});var Xxr=s(sH);vDe=r(Xxr,"longformer"),Xxr.forEach(t),TDe=r(NTe," \u2014 "),x8=n(NTe,"A",{href:!0});var Vxr=s(x8);FDe=r(Vxr,"LongformerConfig"),Vxr.forEach(t),CDe=r(NTe," (Longformer model)"),NTe.forEach(t),MDe=i(T),Lm=n(T,"LI",{});var qTe=s(Lm);lH=n(qTe,"STRONG",{});var zxr=s(lH);EDe=r(zxr,"luke"),zxr.forEach(t),yDe=r(qTe," \u2014 "),k8=n(qTe,"A",{href:!0});var Wxr=s(k8);wDe=r(Wxr,"LukeConfig"),Wxr.forEach(t),ADe=r(qTe," (LUKE model)"),qTe.forEach(t),LDe=i(T),Bm=n(T,"LI",{});var OTe=s(Bm);iH=n(OTe,"STRONG",{});var Qxr=s(iH);BDe=r(Qxr,"lxmert"),Qxr.forEach(t),xDe=r(OTe," \u2014 "),R8=n(OTe,"A",{href:!0});var Hxr=s(R8);kDe=r(Hxr,"LxmertConfig"),Hxr.forEach(t),RDe=r(OTe," (LXMERT model)"),OTe.forEach(t),SDe=i(T),xm=n(T,"LI",{});var GTe=s(xm);dH=n(GTe,"STRONG",{});var Uxr=s(dH);PDe=r(Uxr,"m2m_100"),Uxr.forEach(t),$De=r(GTe," \u2014 "),S8=n(GTe,"A",{href:!0});var Jxr=s(S8);IDe=r(Jxr,"M2M100Config"),Jxr.forEach(t),jDe=r(GTe," (M2M100 model)"),GTe.forEach(t),DDe=i(T),km=n(T,"LI",{});var XTe=s(km);cH=n(XTe,"STRONG",{});var Yxr=s(cH);NDe=r(Yxr,"marian"),Yxr.forEach(t),qDe=r(XTe," \u2014 "),P8=n(XTe,"A",{href:!0});var Kxr=s(P8);ODe=r(Kxr,"MarianConfig"),Kxr.forEach(t),GDe=r(XTe," (Marian model)"),XTe.forEach(t),XDe=i(T),Rm=n(T,"LI",{});var VTe=s(Rm);fH=n(VTe,"STRONG",{});var Zxr=s(fH);VDe=r(Zxr,"maskformer"),Zxr.forEach(t),zDe=r(VTe," \u2014 "),$8=n(VTe,"A",{href:!0});var ekr=s($8);WDe=r(ekr,"MaskFormerConfig"),ekr.forEach(t),QDe=r(VTe," (MaskFormer model)"),VTe.forEach(t),HDe=i(T),Sm=n(T,"LI",{});var zTe=s(Sm);mH=n(zTe,"STRONG",{});var okr=s(mH);UDe=r(okr,"mbart"),okr.forEach(t),JDe=r(zTe," \u2014 "),I8=n(zTe,"A",{href:!0});var rkr=s(I8);YDe=r(rkr,"MBartConfig"),rkr.forEach(t),KDe=r(zTe," (mBART model)"),zTe.forEach(t),ZDe=i(T),Pm=n(T,"LI",{});var WTe=s(Pm);gH=n(WTe,"STRONG",{});var tkr=s(gH);eNe=r(tkr,"megatron-bert"),tkr.forEach(t),oNe=r(WTe," \u2014 "),j8=n(WTe,"A",{href:!0});var akr=s(j8);rNe=r(akr,"MegatronBertConfig"),akr.forEach(t),tNe=r(WTe," (MegatronBert model)"),WTe.forEach(t),aNe=i(T),$m=n(T,"LI",{});var QTe=s($m);hH=n(QTe,"STRONG",{});var nkr=s(hH);nNe=r(nkr,"mobilebert"),nkr.forEach(t),sNe=r(QTe," \u2014 "),D8=n(QTe,"A",{href:!0});var skr=s(D8);lNe=r(skr,"MobileBertConfig"),skr.forEach(t),iNe=r(QTe," (MobileBERT model)"),QTe.forEach(t),dNe=i(T),Im=n(T,"LI",{});var HTe=s(Im);pH=n(HTe,"STRONG",{});var lkr=s(pH);cNe=r(lkr,"mpnet"),lkr.forEach(t),fNe=r(HTe," \u2014 "),N8=n(HTe,"A",{href:!0});var ikr=s(N8);mNe=r(ikr,"MPNetConfig"),ikr.forEach(t),gNe=r(HTe," (MPNet model)"),HTe.forEach(t),hNe=i(T),jm=n(T,"LI",{});var UTe=s(jm);_H=n(UTe,"STRONG",{});var dkr=s(_H);pNe=r(dkr,"mt5"),dkr.forEach(t),_Ne=r(UTe," \u2014 "),q8=n(UTe,"A",{href:!0});var ckr=s(q8);uNe=r(ckr,"MT5Config"),ckr.forEach(t),bNe=r(UTe," (mT5 model)"),UTe.forEach(t),vNe=i(T),Dm=n(T,"LI",{});var JTe=s(Dm);uH=n(JTe,"STRONG",{});var fkr=s(uH);TNe=r(fkr,"nystromformer"),fkr.forEach(t),FNe=r(JTe," \u2014 "),O8=n(JTe,"A",{href:!0});var mkr=s(O8);CNe=r(mkr,"NystromformerConfig"),mkr.forEach(t),MNe=r(JTe," (Nystromformer model)"),JTe.forEach(t),ENe=i(T),Nm=n(T,"LI",{});var YTe=s(Nm);bH=n(YTe,"STRONG",{});var gkr=s(bH);yNe=r(gkr,"openai-gpt"),gkr.forEach(t),wNe=r(YTe," \u2014 "),G8=n(YTe,"A",{href:!0});var hkr=s(G8);ANe=r(hkr,"OpenAIGPTConfig"),hkr.forEach(t),LNe=r(YTe," (OpenAI GPT model)"),YTe.forEach(t),BNe=i(T),qm=n(T,"LI",{});var KTe=s(qm);vH=n(KTe,"STRONG",{});var pkr=s(vH);xNe=r(pkr,"pegasus"),pkr.forEach(t),kNe=r(KTe," \u2014 "),X8=n(KTe,"A",{href:!0});var _kr=s(X8);RNe=r(_kr,"PegasusConfig"),_kr.forEach(t),SNe=r(KTe," (Pegasus model)"),KTe.forEach(t),PNe=i(T),Om=n(T,"LI",{});var ZTe=s(Om);TH=n(ZTe,"STRONG",{});var ukr=s(TH);$Ne=r(ukr,"perceiver"),ukr.forEach(t),INe=r(ZTe," \u2014 "),V8=n(ZTe,"A",{href:!0});var bkr=s(V8);jNe=r(bkr,"PerceiverConfig"),bkr.forEach(t),DNe=r(ZTe," (Perceiver model)"),ZTe.forEach(t),NNe=i(T),Gm=n(T,"LI",{});var e7e=s(Gm);FH=n(e7e,"STRONG",{});var vkr=s(FH);qNe=r(vkr,"plbart"),vkr.forEach(t),ONe=r(e7e," \u2014 "),z8=n(e7e,"A",{href:!0});var Tkr=s(z8);GNe=r(Tkr,"PLBartConfig"),Tkr.forEach(t),XNe=r(e7e," (PLBart model)"),e7e.forEach(t),VNe=i(T),Xm=n(T,"LI",{});var o7e=s(Xm);CH=n(o7e,"STRONG",{});var Fkr=s(CH);zNe=r(Fkr,"poolformer"),Fkr.forEach(t),WNe=r(o7e," \u2014 "),W8=n(o7e,"A",{href:!0});var Ckr=s(W8);QNe=r(Ckr,"PoolFormerConfig"),Ckr.forEach(t),HNe=r(o7e," (PoolFormer model)"),o7e.forEach(t),UNe=i(T),Vm=n(T,"LI",{});var r7e=s(Vm);MH=n(r7e,"STRONG",{});var Mkr=s(MH);JNe=r(Mkr,"prophetnet"),Mkr.forEach(t),YNe=r(r7e," \u2014 "),Q8=n(r7e,"A",{href:!0});var Ekr=s(Q8);KNe=r(Ekr,"ProphetNetConfig"),Ekr.forEach(t),ZNe=r(r7e," (ProphetNet model)"),r7e.forEach(t),eqe=i(T),zm=n(T,"LI",{});var t7e=s(zm);EH=n(t7e,"STRONG",{});var ykr=s(EH);oqe=r(ykr,"qdqbert"),ykr.forEach(t),rqe=r(t7e," \u2014 "),H8=n(t7e,"A",{href:!0});var wkr=s(H8);tqe=r(wkr,"QDQBertConfig"),wkr.forEach(t),aqe=r(t7e," (QDQBert model)"),t7e.forEach(t),nqe=i(T),Wm=n(T,"LI",{});var a7e=s(Wm);yH=n(a7e,"STRONG",{});var Akr=s(yH);sqe=r(Akr,"rag"),Akr.forEach(t),lqe=r(a7e," \u2014 "),U8=n(a7e,"A",{href:!0});var Lkr=s(U8);iqe=r(Lkr,"RagConfig"),Lkr.forEach(t),dqe=r(a7e," (RAG model)"),a7e.forEach(t),cqe=i(T),Qm=n(T,"LI",{});var n7e=s(Qm);wH=n(n7e,"STRONG",{});var Bkr=s(wH);fqe=r(Bkr,"realm"),Bkr.forEach(t),mqe=r(n7e," \u2014 "),J8=n(n7e,"A",{href:!0});var xkr=s(J8);gqe=r(xkr,"RealmConfig"),xkr.forEach(t),hqe=r(n7e," (Realm model)"),n7e.forEach(t),pqe=i(T),Hm=n(T,"LI",{});var s7e=s(Hm);AH=n(s7e,"STRONG",{});var kkr=s(AH);_qe=r(kkr,"reformer"),kkr.forEach(t),uqe=r(s7e," \u2014 "),Y8=n(s7e,"A",{href:!0});var Rkr=s(Y8);bqe=r(Rkr,"ReformerConfig"),Rkr.forEach(t),vqe=r(s7e," (Reformer model)"),s7e.forEach(t),Tqe=i(T),Um=n(T,"LI",{});var l7e=s(Um);LH=n(l7e,"STRONG",{});var Skr=s(LH);Fqe=r(Skr,"rembert"),Skr.forEach(t),Cqe=r(l7e," \u2014 "),K8=n(l7e,"A",{href:!0});var Pkr=s(K8);Mqe=r(Pkr,"RemBertConfig"),Pkr.forEach(t),Eqe=r(l7e," (RemBERT model)"),l7e.forEach(t),yqe=i(T),Jm=n(T,"LI",{});var i7e=s(Jm);BH=n(i7e,"STRONG",{});var $kr=s(BH);wqe=r($kr,"retribert"),$kr.forEach(t),Aqe=r(i7e," \u2014 "),Z8=n(i7e,"A",{href:!0});var Ikr=s(Z8);Lqe=r(Ikr,"RetriBertConfig"),Ikr.forEach(t),Bqe=r(i7e," (RetriBERT model)"),i7e.forEach(t),xqe=i(T),Ym=n(T,"LI",{});var d7e=s(Ym);xH=n(d7e,"STRONG",{});var jkr=s(xH);kqe=r(jkr,"roberta"),jkr.forEach(t),Rqe=r(d7e," \u2014 "),eB=n(d7e,"A",{href:!0});var Dkr=s(eB);Sqe=r(Dkr,"RobertaConfig"),Dkr.forEach(t),Pqe=r(d7e," (RoBERTa model)"),d7e.forEach(t),$qe=i(T),Km=n(T,"LI",{});var c7e=s(Km);kH=n(c7e,"STRONG",{});var Nkr=s(kH);Iqe=r(Nkr,"roformer"),Nkr.forEach(t),jqe=r(c7e," \u2014 "),oB=n(c7e,"A",{href:!0});var qkr=s(oB);Dqe=r(qkr,"RoFormerConfig"),qkr.forEach(t),Nqe=r(c7e," (RoFormer model)"),c7e.forEach(t),qqe=i(T),Zm=n(T,"LI",{});var f7e=s(Zm);RH=n(f7e,"STRONG",{});var Okr=s(RH);Oqe=r(Okr,"segformer"),Okr.forEach(t),Gqe=r(f7e," \u2014 "),rB=n(f7e,"A",{href:!0});var Gkr=s(rB);Xqe=r(Gkr,"SegformerConfig"),Gkr.forEach(t),Vqe=r(f7e," (SegFormer model)"),f7e.forEach(t),zqe=i(T),eg=n(T,"LI",{});var m7e=s(eg);SH=n(m7e,"STRONG",{});var Xkr=s(SH);Wqe=r(Xkr,"sew"),Xkr.forEach(t),Qqe=r(m7e," \u2014 "),tB=n(m7e,"A",{href:!0});var Vkr=s(tB);Hqe=r(Vkr,"SEWConfig"),Vkr.forEach(t),Uqe=r(m7e," (SEW model)"),m7e.forEach(t),Jqe=i(T),og=n(T,"LI",{});var g7e=s(og);PH=n(g7e,"STRONG",{});var zkr=s(PH);Yqe=r(zkr,"sew-d"),zkr.forEach(t),Kqe=r(g7e," \u2014 "),aB=n(g7e,"A",{href:!0});var Wkr=s(aB);Zqe=r(Wkr,"SEWDConfig"),Wkr.forEach(t),eOe=r(g7e," (SEW-D model)"),g7e.forEach(t),oOe=i(T),rg=n(T,"LI",{});var h7e=s(rg);$H=n(h7e,"STRONG",{});var Qkr=s($H);rOe=r(Qkr,"speech-encoder-decoder"),Qkr.forEach(t),tOe=r(h7e," \u2014 "),nB=n(h7e,"A",{href:!0});var Hkr=s(nB);aOe=r(Hkr,"SpeechEncoderDecoderConfig"),Hkr.forEach(t),nOe=r(h7e," (Speech Encoder decoder model)"),h7e.forEach(t),sOe=i(T),tg=n(T,"LI",{});var p7e=s(tg);IH=n(p7e,"STRONG",{});var Ukr=s(IH);lOe=r(Ukr,"speech_to_text"),Ukr.forEach(t),iOe=r(p7e," \u2014 "),sB=n(p7e,"A",{href:!0});var Jkr=s(sB);dOe=r(Jkr,"Speech2TextConfig"),Jkr.forEach(t),cOe=r(p7e," (Speech2Text model)"),p7e.forEach(t),fOe=i(T),ag=n(T,"LI",{});var _7e=s(ag);jH=n(_7e,"STRONG",{});var Ykr=s(jH);mOe=r(Ykr,"speech_to_text_2"),Ykr.forEach(t),gOe=r(_7e," \u2014 "),lB=n(_7e,"A",{href:!0});var Kkr=s(lB);hOe=r(Kkr,"Speech2Text2Config"),Kkr.forEach(t),pOe=r(_7e," (Speech2Text2 model)"),_7e.forEach(t),_Oe=i(T),ng=n(T,"LI",{});var u7e=s(ng);DH=n(u7e,"STRONG",{});var Zkr=s(DH);uOe=r(Zkr,"splinter"),Zkr.forEach(t),bOe=r(u7e," \u2014 "),iB=n(u7e,"A",{href:!0});var eRr=s(iB);vOe=r(eRr,"SplinterConfig"),eRr.forEach(t),TOe=r(u7e," (Splinter model)"),u7e.forEach(t),FOe=i(T),sg=n(T,"LI",{});var b7e=s(sg);NH=n(b7e,"STRONG",{});var oRr=s(NH);COe=r(oRr,"squeezebert"),oRr.forEach(t),MOe=r(b7e," \u2014 "),dB=n(b7e,"A",{href:!0});var rRr=s(dB);EOe=r(rRr,"SqueezeBertConfig"),rRr.forEach(t),yOe=r(b7e," (SqueezeBERT model)"),b7e.forEach(t),wOe=i(T),lg=n(T,"LI",{});var v7e=s(lg);qH=n(v7e,"STRONG",{});var tRr=s(qH);AOe=r(tRr,"swin"),tRr.forEach(t),LOe=r(v7e," \u2014 "),cB=n(v7e,"A",{href:!0});var aRr=s(cB);BOe=r(aRr,"SwinConfig"),aRr.forEach(t),xOe=r(v7e," (Swin model)"),v7e.forEach(t),kOe=i(T),ig=n(T,"LI",{});var T7e=s(ig);OH=n(T7e,"STRONG",{});var nRr=s(OH);ROe=r(nRr,"t5"),nRr.forEach(t),SOe=r(T7e," \u2014 "),fB=n(T7e,"A",{href:!0});var sRr=s(fB);POe=r(sRr,"T5Config"),sRr.forEach(t),$Oe=r(T7e," (T5 model)"),T7e.forEach(t),IOe=i(T),dg=n(T,"LI",{});var F7e=s(dg);GH=n(F7e,"STRONG",{});var lRr=s(GH);jOe=r(lRr,"tapas"),lRr.forEach(t),DOe=r(F7e," \u2014 "),mB=n(F7e,"A",{href:!0});var iRr=s(mB);NOe=r(iRr,"TapasConfig"),iRr.forEach(t),qOe=r(F7e," (TAPAS model)"),F7e.forEach(t),OOe=i(T),cg=n(T,"LI",{});var C7e=s(cg);XH=n(C7e,"STRONG",{});var dRr=s(XH);GOe=r(dRr,"transfo-xl"),dRr.forEach(t),XOe=r(C7e," \u2014 "),gB=n(C7e,"A",{href:!0});var cRr=s(gB);VOe=r(cRr,"TransfoXLConfig"),cRr.forEach(t),zOe=r(C7e," (Transformer-XL model)"),C7e.forEach(t),WOe=i(T),fg=n(T,"LI",{});var M7e=s(fg);VH=n(M7e,"STRONG",{});var fRr=s(VH);QOe=r(fRr,"trocr"),fRr.forEach(t),HOe=r(M7e," \u2014 "),hB=n(M7e,"A",{href:!0});var mRr=s(hB);UOe=r(mRr,"TrOCRConfig"),mRr.forEach(t),JOe=r(M7e," (TrOCR model)"),M7e.forEach(t),YOe=i(T),mg=n(T,"LI",{});var E7e=s(mg);zH=n(E7e,"STRONG",{});var gRr=s(zH);KOe=r(gRr,"unispeech"),gRr.forEach(t),ZOe=r(E7e," \u2014 "),pB=n(E7e,"A",{href:!0});var hRr=s(pB);eGe=r(hRr,"UniSpeechConfig"),hRr.forEach(t),oGe=r(E7e," (UniSpeech model)"),E7e.forEach(t),rGe=i(T),gg=n(T,"LI",{});var y7e=s(gg);WH=n(y7e,"STRONG",{});var pRr=s(WH);tGe=r(pRr,"unispeech-sat"),pRr.forEach(t),aGe=r(y7e," \u2014 "),_B=n(y7e,"A",{href:!0});var _Rr=s(_B);nGe=r(_Rr,"UniSpeechSatConfig"),_Rr.forEach(t),sGe=r(y7e," (UniSpeechSat model)"),y7e.forEach(t),lGe=i(T),hg=n(T,"LI",{});var w7e=s(hg);QH=n(w7e,"STRONG",{});var uRr=s(QH);iGe=r(uRr,"vilt"),uRr.forEach(t),dGe=r(w7e," \u2014 "),uB=n(w7e,"A",{href:!0});var bRr=s(uB);cGe=r(bRr,"ViltConfig"),bRr.forEach(t),fGe=r(w7e," (ViLT model)"),w7e.forEach(t),mGe=i(T),pg=n(T,"LI",{});var A7e=s(pg);HH=n(A7e,"STRONG",{});var vRr=s(HH);gGe=r(vRr,"vision-encoder-decoder"),vRr.forEach(t),hGe=r(A7e," \u2014 "),bB=n(A7e,"A",{href:!0});var TRr=s(bB);pGe=r(TRr,"VisionEncoderDecoderConfig"),TRr.forEach(t),_Ge=r(A7e," (Vision Encoder decoder model)"),A7e.forEach(t),uGe=i(T),_g=n(T,"LI",{});var L7e=s(_g);UH=n(L7e,"STRONG",{});var FRr=s(UH);bGe=r(FRr,"vision-text-dual-encoder"),FRr.forEach(t),vGe=r(L7e," \u2014 "),vB=n(L7e,"A",{href:!0});var CRr=s(vB);TGe=r(CRr,"VisionTextDualEncoderConfig"),CRr.forEach(t),FGe=r(L7e," (VisionTextDualEncoder model)"),L7e.forEach(t),CGe=i(T),ug=n(T,"LI",{});var B7e=s(ug);JH=n(B7e,"STRONG",{});var MRr=s(JH);MGe=r(MRr,"visual_bert"),MRr.forEach(t),EGe=r(B7e," \u2014 "),TB=n(B7e,"A",{href:!0});var ERr=s(TB);yGe=r(ERr,"VisualBertConfig"),ERr.forEach(t),wGe=r(B7e," (VisualBert model)"),B7e.forEach(t),AGe=i(T),bg=n(T,"LI",{});var x7e=s(bg);YH=n(x7e,"STRONG",{});var yRr=s(YH);LGe=r(yRr,"vit"),yRr.forEach(t),BGe=r(x7e," \u2014 "),FB=n(x7e,"A",{href:!0});var wRr=s(FB);xGe=r(wRr,"ViTConfig"),wRr.forEach(t),kGe=r(x7e," (ViT model)"),x7e.forEach(t),RGe=i(T),vg=n(T,"LI",{});var k7e=s(vg);KH=n(k7e,"STRONG",{});var ARr=s(KH);SGe=r(ARr,"vit_mae"),ARr.forEach(t),PGe=r(k7e," \u2014 "),CB=n(k7e,"A",{href:!0});var LRr=s(CB);$Ge=r(LRr,"ViTMAEConfig"),LRr.forEach(t),IGe=r(k7e," (ViTMAE model)"),k7e.forEach(t),jGe=i(T),Tg=n(T,"LI",{});var R7e=s(Tg);ZH=n(R7e,"STRONG",{});var BRr=s(ZH);DGe=r(BRr,"wav2vec2"),BRr.forEach(t),NGe=r(R7e," \u2014 "),MB=n(R7e,"A",{href:!0});var xRr=s(MB);qGe=r(xRr,"Wav2Vec2Config"),xRr.forEach(t),OGe=r(R7e," (Wav2Vec2 model)"),R7e.forEach(t),GGe=i(T),Fg=n(T,"LI",{});var S7e=s(Fg);eU=n(S7e,"STRONG",{});var kRr=s(eU);XGe=r(kRr,"wavlm"),kRr.forEach(t),VGe=r(S7e," \u2014 "),EB=n(S7e,"A",{href:!0});var RRr=s(EB);zGe=r(RRr,"WavLMConfig"),RRr.forEach(t),WGe=r(S7e," (WavLM model)"),S7e.forEach(t),QGe=i(T),Cg=n(T,"LI",{});var P7e=s(Cg);oU=n(P7e,"STRONG",{});var SRr=s(oU);HGe=r(SRr,"xglm"),SRr.forEach(t),UGe=r(P7e," \u2014 "),yB=n(P7e,"A",{href:!0});var PRr=s(yB);JGe=r(PRr,"XGLMConfig"),PRr.forEach(t),YGe=r(P7e," (XGLM model)"),P7e.forEach(t),KGe=i(T),Mg=n(T,"LI",{});var $7e=s(Mg);rU=n($7e,"STRONG",{});var $Rr=s(rU);ZGe=r($Rr,"xlm"),$Rr.forEach(t),eXe=r($7e," \u2014 "),wB=n($7e,"A",{href:!0});var IRr=s(wB);oXe=r(IRr,"XLMConfig"),IRr.forEach(t),rXe=r($7e," (XLM model)"),$7e.forEach(t),tXe=i(T),Eg=n(T,"LI",{});var I7e=s(Eg);tU=n(I7e,"STRONG",{});var jRr=s(tU);aXe=r(jRr,"xlm-prophetnet"),jRr.forEach(t),nXe=r(I7e," \u2014 "),AB=n(I7e,"A",{href:!0});var DRr=s(AB);sXe=r(DRr,"XLMProphetNetConfig"),DRr.forEach(t),lXe=r(I7e," (XLMProphetNet model)"),I7e.forEach(t),iXe=i(T),yg=n(T,"LI",{});var j7e=s(yg);aU=n(j7e,"STRONG",{});var NRr=s(aU);dXe=r(NRr,"xlm-roberta"),NRr.forEach(t),cXe=r(j7e," \u2014 "),LB=n(j7e,"A",{href:!0});var qRr=s(LB);fXe=r(qRr,"XLMRobertaConfig"),qRr.forEach(t),mXe=r(j7e," (XLM-RoBERTa model)"),j7e.forEach(t),gXe=i(T),wg=n(T,"LI",{});var D7e=s(wg);nU=n(D7e,"STRONG",{});var ORr=s(nU);hXe=r(ORr,"xlm-roberta-xl"),ORr.forEach(t),pXe=r(D7e," \u2014 "),BB=n(D7e,"A",{href:!0});var GRr=s(BB);_Xe=r(GRr,"XLMRobertaXLConfig"),GRr.forEach(t),uXe=r(D7e," (XLM-RoBERTa-XL model)"),D7e.forEach(t),bXe=i(T),Ag=n(T,"LI",{});var N7e=s(Ag);sU=n(N7e,"STRONG",{});var XRr=s(sU);vXe=r(XRr,"xlnet"),XRr.forEach(t),TXe=r(N7e," \u2014 "),xB=n(N7e,"A",{href:!0});var VRr=s(xB);FXe=r(VRr,"XLNetConfig"),VRr.forEach(t),CXe=r(N7e," (XLNet model)"),N7e.forEach(t),MXe=i(T),Lg=n(T,"LI",{});var q7e=s(Lg);lU=n(q7e,"STRONG",{});var zRr=s(lU);EXe=r(zRr,"yoso"),zRr.forEach(t),yXe=r(q7e," \u2014 "),kB=n(q7e,"A",{href:!0});var WRr=s(kB);wXe=r(WRr,"YosoConfig"),WRr.forEach(t),AXe=r(q7e," (YOSO model)"),q7e.forEach(t),T.forEach(t),LXe=i(ga),iU=n(ga,"P",{});var QRr=s(iU);BXe=r(QRr,"Examples:"),QRr.forEach(t),xXe=i(ga),m(t4.$$.fragment,ga),ga.forEach(t),kXe=i(Gs),Bg=n(Gs,"DIV",{class:!0});var fRe=s(Bg);m(a4.$$.fragment,fRe),RXe=i(fRe),dU=n(fRe,"P",{});var HRr=s(dU);SXe=r(HRr,"Register a new configuration for this class."),HRr.forEach(t),fRe.forEach(t),Gs.forEach(t),dxe=i(d),Qi=n(d,"H2",{class:!0});var mRe=s(Qi);xg=n(mRe,"A",{id:!0,class:!0,href:!0});var URr=s(xg);cU=n(URr,"SPAN",{});var JRr=s(cU);m(n4.$$.fragment,JRr),JRr.forEach(t),URr.forEach(t),PXe=i(mRe),fU=n(mRe,"SPAN",{});var YRr=s(fU);$Xe=r(YRr,"AutoTokenizer"),YRr.forEach(t),mRe.forEach(t),cxe=i(d),Qo=n(d,"DIV",{class:!0});var Xs=s(Qo);m(s4.$$.fragment,Xs),IXe=i(Xs),l4=n(Xs,"P",{});var gRe=s(l4);jXe=r(gRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RB=n(gRe,"A",{href:!0});var KRr=s(RB);DXe=r(KRr,"AutoTokenizer.from_pretrained()"),KRr.forEach(t),NXe=r(gRe," class method."),gRe.forEach(t),qXe=i(Xs),i4=n(Xs,"P",{});var hRe=s(i4);OXe=r(hRe,"This class cannot be instantiated directly using "),mU=n(hRe,"CODE",{});var ZRr=s(mU);GXe=r(ZRr,"__init__()"),ZRr.forEach(t),XXe=r(hRe," (throws an error)."),hRe.forEach(t),VXe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(d4.$$.fragment,ha),zXe=i(ha),gU=n(ha,"P",{});var eSr=s(gU);WXe=r(eSr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),eSr.forEach(t),QXe=i(ha),Ga=n(ha,"P",{});var HC=s(Ga);HXe=r(HC,"The tokenizer class to instantiate is selected based on the "),hU=n(HC,"CODE",{});var oSr=s(hU);UXe=r(oSr,"model_type"),oSr.forEach(t),JXe=r(HC,` property of the config object (either
passed as an argument or loaded from `),pU=n(HC,"CODE",{});var rSr=s(pU);YXe=r(rSr,"pretrained_model_name_or_path"),rSr.forEach(t),KXe=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_U=n(HC,"CODE",{});var tSr=s(_U);ZXe=r(tSr,"pretrained_model_name_or_path"),tSr.forEach(t),eVe=r(HC,":"),HC.forEach(t),oVe=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var XA=s(Wn);uU=n(XA,"STRONG",{});var aSr=s(uU);rVe=r(aSr,"albert"),aSr.forEach(t),tVe=r(XA," \u2014 "),SB=n(XA,"A",{href:!0});var nSr=s(SB);aVe=r(nSr,"AlbertTokenizer"),nSr.forEach(t),nVe=r(XA," or "),PB=n(XA,"A",{href:!0});var sSr=s(PB);sVe=r(sSr,"AlbertTokenizerFast"),sSr.forEach(t),lVe=r(XA," (ALBERT model)"),XA.forEach(t),iVe=i(y),Qn=n(y,"LI",{});var VA=s(Qn);bU=n(VA,"STRONG",{});var lSr=s(bU);dVe=r(lSr,"bart"),lSr.forEach(t),cVe=r(VA," \u2014 "),$B=n(VA,"A",{href:!0});var iSr=s($B);fVe=r(iSr,"BartTokenizer"),iSr.forEach(t),mVe=r(VA," or "),IB=n(VA,"A",{href:!0});var dSr=s(IB);gVe=r(dSr,"BartTokenizerFast"),dSr.forEach(t),hVe=r(VA," (BART model)"),VA.forEach(t),pVe=i(y),Hn=n(y,"LI",{});var zA=s(Hn);vU=n(zA,"STRONG",{});var cSr=s(vU);_Ve=r(cSr,"barthez"),cSr.forEach(t),uVe=r(zA," \u2014 "),jB=n(zA,"A",{href:!0});var fSr=s(jB);bVe=r(fSr,"BarthezTokenizer"),fSr.forEach(t),vVe=r(zA," or "),DB=n(zA,"A",{href:!0});var mSr=s(DB);TVe=r(mSr,"BarthezTokenizerFast"),mSr.forEach(t),FVe=r(zA," (BARThez model)"),zA.forEach(t),CVe=i(y),kg=n(y,"LI",{});var O7e=s(kg);TU=n(O7e,"STRONG",{});var gSr=s(TU);MVe=r(gSr,"bartpho"),gSr.forEach(t),EVe=r(O7e," \u2014 "),NB=n(O7e,"A",{href:!0});var hSr=s(NB);yVe=r(hSr,"BartphoTokenizer"),hSr.forEach(t),wVe=r(O7e," (BARTpho model)"),O7e.forEach(t),AVe=i(y),Un=n(y,"LI",{});var WA=s(Un);FU=n(WA,"STRONG",{});var pSr=s(FU);LVe=r(pSr,"bert"),pSr.forEach(t),BVe=r(WA," \u2014 "),qB=n(WA,"A",{href:!0});var _Sr=s(qB);xVe=r(_Sr,"BertTokenizer"),_Sr.forEach(t),kVe=r(WA," or "),OB=n(WA,"A",{href:!0});var uSr=s(OB);RVe=r(uSr,"BertTokenizerFast"),uSr.forEach(t),SVe=r(WA," (BERT model)"),WA.forEach(t),PVe=i(y),Rg=n(y,"LI",{});var G7e=s(Rg);CU=n(G7e,"STRONG",{});var bSr=s(CU);$Ve=r(bSr,"bert-generation"),bSr.forEach(t),IVe=r(G7e," \u2014 "),GB=n(G7e,"A",{href:!0});var vSr=s(GB);jVe=r(vSr,"BertGenerationTokenizer"),vSr.forEach(t),DVe=r(G7e," (Bert Generation model)"),G7e.forEach(t),NVe=i(y),Sg=n(y,"LI",{});var X7e=s(Sg);MU=n(X7e,"STRONG",{});var TSr=s(MU);qVe=r(TSr,"bert-japanese"),TSr.forEach(t),OVe=r(X7e," \u2014 "),XB=n(X7e,"A",{href:!0});var FSr=s(XB);GVe=r(FSr,"BertJapaneseTokenizer"),FSr.forEach(t),XVe=r(X7e," (BertJapanese model)"),X7e.forEach(t),VVe=i(y),Pg=n(y,"LI",{});var V7e=s(Pg);EU=n(V7e,"STRONG",{});var CSr=s(EU);zVe=r(CSr,"bertweet"),CSr.forEach(t),WVe=r(V7e," \u2014 "),VB=n(V7e,"A",{href:!0});var MSr=s(VB);QVe=r(MSr,"BertweetTokenizer"),MSr.forEach(t),HVe=r(V7e," (Bertweet model)"),V7e.forEach(t),UVe=i(y),Jn=n(y,"LI",{});var QA=s(Jn);yU=n(QA,"STRONG",{});var ESr=s(yU);JVe=r(ESr,"big_bird"),ESr.forEach(t),YVe=r(QA," \u2014 "),zB=n(QA,"A",{href:!0});var ySr=s(zB);KVe=r(ySr,"BigBirdTokenizer"),ySr.forEach(t),ZVe=r(QA," or "),WB=n(QA,"A",{href:!0});var wSr=s(WB);eze=r(wSr,"BigBirdTokenizerFast"),wSr.forEach(t),oze=r(QA," (BigBird model)"),QA.forEach(t),rze=i(y),Yn=n(y,"LI",{});var HA=s(Yn);wU=n(HA,"STRONG",{});var ASr=s(wU);tze=r(ASr,"bigbird_pegasus"),ASr.forEach(t),aze=r(HA," \u2014 "),QB=n(HA,"A",{href:!0});var LSr=s(QB);nze=r(LSr,"PegasusTokenizer"),LSr.forEach(t),sze=r(HA," or "),HB=n(HA,"A",{href:!0});var BSr=s(HB);lze=r(BSr,"PegasusTokenizerFast"),BSr.forEach(t),ize=r(HA," (BigBirdPegasus model)"),HA.forEach(t),dze=i(y),Kn=n(y,"LI",{});var UA=s(Kn);AU=n(UA,"STRONG",{});var xSr=s(AU);cze=r(xSr,"blenderbot"),xSr.forEach(t),fze=r(UA," \u2014 "),UB=n(UA,"A",{href:!0});var kSr=s(UB);mze=r(kSr,"BlenderbotTokenizer"),kSr.forEach(t),gze=r(UA," or "),JB=n(UA,"A",{href:!0});var RSr=s(JB);hze=r(RSr,"BlenderbotTokenizerFast"),RSr.forEach(t),pze=r(UA," (Blenderbot model)"),UA.forEach(t),_ze=i(y),$g=n(y,"LI",{});var z7e=s($g);LU=n(z7e,"STRONG",{});var SSr=s(LU);uze=r(SSr,"blenderbot-small"),SSr.forEach(t),bze=r(z7e," \u2014 "),YB=n(z7e,"A",{href:!0});var PSr=s(YB);vze=r(PSr,"BlenderbotSmallTokenizer"),PSr.forEach(t),Tze=r(z7e," (BlenderbotSmall model)"),z7e.forEach(t),Fze=i(y),Ig=n(y,"LI",{});var W7e=s(Ig);BU=n(W7e,"STRONG",{});var $Sr=s(BU);Cze=r($Sr,"byt5"),$Sr.forEach(t),Mze=r(W7e," \u2014 "),KB=n(W7e,"A",{href:!0});var ISr=s(KB);Eze=r(ISr,"ByT5Tokenizer"),ISr.forEach(t),yze=r(W7e," (ByT5 model)"),W7e.forEach(t),wze=i(y),Zn=n(y,"LI",{});var JA=s(Zn);xU=n(JA,"STRONG",{});var jSr=s(xU);Aze=r(jSr,"camembert"),jSr.forEach(t),Lze=r(JA," \u2014 "),ZB=n(JA,"A",{href:!0});var DSr=s(ZB);Bze=r(DSr,"CamembertTokenizer"),DSr.forEach(t),xze=r(JA," or "),ex=n(JA,"A",{href:!0});var NSr=s(ex);kze=r(NSr,"CamembertTokenizerFast"),NSr.forEach(t),Rze=r(JA," (CamemBERT model)"),JA.forEach(t),Sze=i(y),jg=n(y,"LI",{});var Q7e=s(jg);kU=n(Q7e,"STRONG",{});var qSr=s(kU);Pze=r(qSr,"canine"),qSr.forEach(t),$ze=r(Q7e," \u2014 "),ox=n(Q7e,"A",{href:!0});var OSr=s(ox);Ize=r(OSr,"CanineTokenizer"),OSr.forEach(t),jze=r(Q7e," (Canine model)"),Q7e.forEach(t),Dze=i(y),es=n(y,"LI",{});var YA=s(es);RU=n(YA,"STRONG",{});var GSr=s(RU);Nze=r(GSr,"clip"),GSr.forEach(t),qze=r(YA," \u2014 "),rx=n(YA,"A",{href:!0});var XSr=s(rx);Oze=r(XSr,"CLIPTokenizer"),XSr.forEach(t),Gze=r(YA," or "),tx=n(YA,"A",{href:!0});var VSr=s(tx);Xze=r(VSr,"CLIPTokenizerFast"),VSr.forEach(t),Vze=r(YA," (CLIP model)"),YA.forEach(t),zze=i(y),os=n(y,"LI",{});var KA=s(os);SU=n(KA,"STRONG",{});var zSr=s(SU);Wze=r(zSr,"convbert"),zSr.forEach(t),Qze=r(KA," \u2014 "),ax=n(KA,"A",{href:!0});var WSr=s(ax);Hze=r(WSr,"ConvBertTokenizer"),WSr.forEach(t),Uze=r(KA," or "),nx=n(KA,"A",{href:!0});var QSr=s(nx);Jze=r(QSr,"ConvBertTokenizerFast"),QSr.forEach(t),Yze=r(KA," (ConvBERT model)"),KA.forEach(t),Kze=i(y),rs=n(y,"LI",{});var ZA=s(rs);PU=n(ZA,"STRONG",{});var HSr=s(PU);Zze=r(HSr,"cpm"),HSr.forEach(t),eWe=r(ZA," \u2014 "),sx=n(ZA,"A",{href:!0});var USr=s(sx);oWe=r(USr,"CpmTokenizer"),USr.forEach(t),rWe=r(ZA," or "),$U=n(ZA,"CODE",{});var JSr=s($U);tWe=r(JSr,"CpmTokenizerFast"),JSr.forEach(t),aWe=r(ZA," (CPM model)"),ZA.forEach(t),nWe=i(y),Dg=n(y,"LI",{});var H7e=s(Dg);IU=n(H7e,"STRONG",{});var YSr=s(IU);sWe=r(YSr,"ctrl"),YSr.forEach(t),lWe=r(H7e," \u2014 "),lx=n(H7e,"A",{href:!0});var KSr=s(lx);iWe=r(KSr,"CTRLTokenizer"),KSr.forEach(t),dWe=r(H7e," (CTRL model)"),H7e.forEach(t),cWe=i(y),ts=n(y,"LI",{});var eL=s(ts);jU=n(eL,"STRONG",{});var ZSr=s(jU);fWe=r(ZSr,"deberta"),ZSr.forEach(t),mWe=r(eL," \u2014 "),ix=n(eL,"A",{href:!0});var ePr=s(ix);gWe=r(ePr,"DebertaTokenizer"),ePr.forEach(t),hWe=r(eL," or "),dx=n(eL,"A",{href:!0});var oPr=s(dx);pWe=r(oPr,"DebertaTokenizerFast"),oPr.forEach(t),_We=r(eL," (DeBERTa model)"),eL.forEach(t),uWe=i(y),Ng=n(y,"LI",{});var U7e=s(Ng);DU=n(U7e,"STRONG",{});var rPr=s(DU);bWe=r(rPr,"deberta-v2"),rPr.forEach(t),vWe=r(U7e," \u2014 "),cx=n(U7e,"A",{href:!0});var tPr=s(cx);TWe=r(tPr,"DebertaV2Tokenizer"),tPr.forEach(t),FWe=r(U7e," (DeBERTa-v2 model)"),U7e.forEach(t),CWe=i(y),as=n(y,"LI",{});var oL=s(as);NU=n(oL,"STRONG",{});var aPr=s(NU);MWe=r(aPr,"distilbert"),aPr.forEach(t),EWe=r(oL," \u2014 "),fx=n(oL,"A",{href:!0});var nPr=s(fx);yWe=r(nPr,"DistilBertTokenizer"),nPr.forEach(t),wWe=r(oL," or "),mx=n(oL,"A",{href:!0});var sPr=s(mx);AWe=r(sPr,"DistilBertTokenizerFast"),sPr.forEach(t),LWe=r(oL," (DistilBERT model)"),oL.forEach(t),BWe=i(y),ns=n(y,"LI",{});var rL=s(ns);qU=n(rL,"STRONG",{});var lPr=s(qU);xWe=r(lPr,"dpr"),lPr.forEach(t),kWe=r(rL," \u2014 "),gx=n(rL,"A",{href:!0});var iPr=s(gx);RWe=r(iPr,"DPRQuestionEncoderTokenizer"),iPr.forEach(t),SWe=r(rL," or "),hx=n(rL,"A",{href:!0});var dPr=s(hx);PWe=r(dPr,"DPRQuestionEncoderTokenizerFast"),dPr.forEach(t),$We=r(rL," (DPR model)"),rL.forEach(t),IWe=i(y),ss=n(y,"LI",{});var tL=s(ss);OU=n(tL,"STRONG",{});var cPr=s(OU);jWe=r(cPr,"electra"),cPr.forEach(t),DWe=r(tL," \u2014 "),px=n(tL,"A",{href:!0});var fPr=s(px);NWe=r(fPr,"ElectraTokenizer"),fPr.forEach(t),qWe=r(tL," or "),_x=n(tL,"A",{href:!0});var mPr=s(_x);OWe=r(mPr,"ElectraTokenizerFast"),mPr.forEach(t),GWe=r(tL," (ELECTRA model)"),tL.forEach(t),XWe=i(y),qg=n(y,"LI",{});var J7e=s(qg);GU=n(J7e,"STRONG",{});var gPr=s(GU);VWe=r(gPr,"flaubert"),gPr.forEach(t),zWe=r(J7e," \u2014 "),ux=n(J7e,"A",{href:!0});var hPr=s(ux);WWe=r(hPr,"FlaubertTokenizer"),hPr.forEach(t),QWe=r(J7e," (FlauBERT model)"),J7e.forEach(t),HWe=i(y),ls=n(y,"LI",{});var aL=s(ls);XU=n(aL,"STRONG",{});var pPr=s(XU);UWe=r(pPr,"fnet"),pPr.forEach(t),JWe=r(aL," \u2014 "),bx=n(aL,"A",{href:!0});var _Pr=s(bx);YWe=r(_Pr,"FNetTokenizer"),_Pr.forEach(t),KWe=r(aL," or "),vx=n(aL,"A",{href:!0});var uPr=s(vx);ZWe=r(uPr,"FNetTokenizerFast"),uPr.forEach(t),eQe=r(aL," (FNet model)"),aL.forEach(t),oQe=i(y),Og=n(y,"LI",{});var Y7e=s(Og);VU=n(Y7e,"STRONG",{});var bPr=s(VU);rQe=r(bPr,"fsmt"),bPr.forEach(t),tQe=r(Y7e," \u2014 "),Tx=n(Y7e,"A",{href:!0});var vPr=s(Tx);aQe=r(vPr,"FSMTTokenizer"),vPr.forEach(t),nQe=r(Y7e," (FairSeq Machine-Translation model)"),Y7e.forEach(t),sQe=i(y),is=n(y,"LI",{});var nL=s(is);zU=n(nL,"STRONG",{});var TPr=s(zU);lQe=r(TPr,"funnel"),TPr.forEach(t),iQe=r(nL," \u2014 "),Fx=n(nL,"A",{href:!0});var FPr=s(Fx);dQe=r(FPr,"FunnelTokenizer"),FPr.forEach(t),cQe=r(nL," or "),Cx=n(nL,"A",{href:!0});var CPr=s(Cx);fQe=r(CPr,"FunnelTokenizerFast"),CPr.forEach(t),mQe=r(nL," (Funnel Transformer model)"),nL.forEach(t),gQe=i(y),ds=n(y,"LI",{});var sL=s(ds);WU=n(sL,"STRONG",{});var MPr=s(WU);hQe=r(MPr,"gpt2"),MPr.forEach(t),pQe=r(sL," \u2014 "),Mx=n(sL,"A",{href:!0});var EPr=s(Mx);_Qe=r(EPr,"GPT2Tokenizer"),EPr.forEach(t),uQe=r(sL," or "),Ex=n(sL,"A",{href:!0});var yPr=s(Ex);bQe=r(yPr,"GPT2TokenizerFast"),yPr.forEach(t),vQe=r(sL," (OpenAI GPT-2 model)"),sL.forEach(t),TQe=i(y),cs=n(y,"LI",{});var lL=s(cs);QU=n(lL,"STRONG",{});var wPr=s(QU);FQe=r(wPr,"gpt_neo"),wPr.forEach(t),CQe=r(lL," \u2014 "),yx=n(lL,"A",{href:!0});var APr=s(yx);MQe=r(APr,"GPT2Tokenizer"),APr.forEach(t),EQe=r(lL," or "),wx=n(lL,"A",{href:!0});var LPr=s(wx);yQe=r(LPr,"GPT2TokenizerFast"),LPr.forEach(t),wQe=r(lL," (GPT Neo model)"),lL.forEach(t),AQe=i(y),fs=n(y,"LI",{});var iL=s(fs);HU=n(iL,"STRONG",{});var BPr=s(HU);LQe=r(BPr,"herbert"),BPr.forEach(t),BQe=r(iL," \u2014 "),Ax=n(iL,"A",{href:!0});var xPr=s(Ax);xQe=r(xPr,"HerbertTokenizer"),xPr.forEach(t),kQe=r(iL," or "),Lx=n(iL,"A",{href:!0});var kPr=s(Lx);RQe=r(kPr,"HerbertTokenizerFast"),kPr.forEach(t),SQe=r(iL," (HerBERT model)"),iL.forEach(t),PQe=i(y),Gg=n(y,"LI",{});var K7e=s(Gg);UU=n(K7e,"STRONG",{});var RPr=s(UU);$Qe=r(RPr,"hubert"),RPr.forEach(t),IQe=r(K7e," \u2014 "),Bx=n(K7e,"A",{href:!0});var SPr=s(Bx);jQe=r(SPr,"Wav2Vec2CTCTokenizer"),SPr.forEach(t),DQe=r(K7e," (Hubert model)"),K7e.forEach(t),NQe=i(y),ms=n(y,"LI",{});var dL=s(ms);JU=n(dL,"STRONG",{});var PPr=s(JU);qQe=r(PPr,"ibert"),PPr.forEach(t),OQe=r(dL," \u2014 "),xx=n(dL,"A",{href:!0});var $Pr=s(xx);GQe=r($Pr,"RobertaTokenizer"),$Pr.forEach(t),XQe=r(dL," or "),kx=n(dL,"A",{href:!0});var IPr=s(kx);VQe=r(IPr,"RobertaTokenizerFast"),IPr.forEach(t),zQe=r(dL," (I-BERT model)"),dL.forEach(t),WQe=i(y),gs=n(y,"LI",{});var cL=s(gs);YU=n(cL,"STRONG",{});var jPr=s(YU);QQe=r(jPr,"layoutlm"),jPr.forEach(t),HQe=r(cL," \u2014 "),Rx=n(cL,"A",{href:!0});var DPr=s(Rx);UQe=r(DPr,"LayoutLMTokenizer"),DPr.forEach(t),JQe=r(cL," or "),Sx=n(cL,"A",{href:!0});var NPr=s(Sx);YQe=r(NPr,"LayoutLMTokenizerFast"),NPr.forEach(t),KQe=r(cL," (LayoutLM model)"),cL.forEach(t),ZQe=i(y),hs=n(y,"LI",{});var fL=s(hs);KU=n(fL,"STRONG",{});var qPr=s(KU);eHe=r(qPr,"layoutlmv2"),qPr.forEach(t),oHe=r(fL," \u2014 "),Px=n(fL,"A",{href:!0});var OPr=s(Px);rHe=r(OPr,"LayoutLMv2Tokenizer"),OPr.forEach(t),tHe=r(fL," or "),$x=n(fL,"A",{href:!0});var GPr=s($x);aHe=r(GPr,"LayoutLMv2TokenizerFast"),GPr.forEach(t),nHe=r(fL," (LayoutLMv2 model)"),fL.forEach(t),sHe=i(y),ps=n(y,"LI",{});var mL=s(ps);ZU=n(mL,"STRONG",{});var XPr=s(ZU);lHe=r(XPr,"layoutxlm"),XPr.forEach(t),iHe=r(mL," \u2014 "),Ix=n(mL,"A",{href:!0});var VPr=s(Ix);dHe=r(VPr,"LayoutXLMTokenizer"),VPr.forEach(t),cHe=r(mL," or "),jx=n(mL,"A",{href:!0});var zPr=s(jx);fHe=r(zPr,"LayoutXLMTokenizerFast"),zPr.forEach(t),mHe=r(mL," (LayoutXLM model)"),mL.forEach(t),gHe=i(y),_s=n(y,"LI",{});var gL=s(_s);eJ=n(gL,"STRONG",{});var WPr=s(eJ);hHe=r(WPr,"led"),WPr.forEach(t),pHe=r(gL," \u2014 "),Dx=n(gL,"A",{href:!0});var QPr=s(Dx);_He=r(QPr,"LEDTokenizer"),QPr.forEach(t),uHe=r(gL," or "),Nx=n(gL,"A",{href:!0});var HPr=s(Nx);bHe=r(HPr,"LEDTokenizerFast"),HPr.forEach(t),vHe=r(gL," (LED model)"),gL.forEach(t),THe=i(y),us=n(y,"LI",{});var hL=s(us);oJ=n(hL,"STRONG",{});var UPr=s(oJ);FHe=r(UPr,"longformer"),UPr.forEach(t),CHe=r(hL," \u2014 "),qx=n(hL,"A",{href:!0});var JPr=s(qx);MHe=r(JPr,"LongformerTokenizer"),JPr.forEach(t),EHe=r(hL," or "),Ox=n(hL,"A",{href:!0});var YPr=s(Ox);yHe=r(YPr,"LongformerTokenizerFast"),YPr.forEach(t),wHe=r(hL," (Longformer model)"),hL.forEach(t),AHe=i(y),Xg=n(y,"LI",{});var Z7e=s(Xg);rJ=n(Z7e,"STRONG",{});var KPr=s(rJ);LHe=r(KPr,"luke"),KPr.forEach(t),BHe=r(Z7e," \u2014 "),Gx=n(Z7e,"A",{href:!0});var ZPr=s(Gx);xHe=r(ZPr,"LukeTokenizer"),ZPr.forEach(t),kHe=r(Z7e," (LUKE model)"),Z7e.forEach(t),RHe=i(y),bs=n(y,"LI",{});var pL=s(bs);tJ=n(pL,"STRONG",{});var e$r=s(tJ);SHe=r(e$r,"lxmert"),e$r.forEach(t),PHe=r(pL," \u2014 "),Xx=n(pL,"A",{href:!0});var o$r=s(Xx);$He=r(o$r,"LxmertTokenizer"),o$r.forEach(t),IHe=r(pL," or "),Vx=n(pL,"A",{href:!0});var r$r=s(Vx);jHe=r(r$r,"LxmertTokenizerFast"),r$r.forEach(t),DHe=r(pL," (LXMERT model)"),pL.forEach(t),NHe=i(y),Vg=n(y,"LI",{});var eFe=s(Vg);aJ=n(eFe,"STRONG",{});var t$r=s(aJ);qHe=r(t$r,"m2m_100"),t$r.forEach(t),OHe=r(eFe," \u2014 "),zx=n(eFe,"A",{href:!0});var a$r=s(zx);GHe=r(a$r,"M2M100Tokenizer"),a$r.forEach(t),XHe=r(eFe," (M2M100 model)"),eFe.forEach(t),VHe=i(y),zg=n(y,"LI",{});var oFe=s(zg);nJ=n(oFe,"STRONG",{});var n$r=s(nJ);zHe=r(n$r,"marian"),n$r.forEach(t),WHe=r(oFe," \u2014 "),Wx=n(oFe,"A",{href:!0});var s$r=s(Wx);QHe=r(s$r,"MarianTokenizer"),s$r.forEach(t),HHe=r(oFe," (Marian model)"),oFe.forEach(t),UHe=i(y),vs=n(y,"LI",{});var _L=s(vs);sJ=n(_L,"STRONG",{});var l$r=s(sJ);JHe=r(l$r,"mbart"),l$r.forEach(t),YHe=r(_L," \u2014 "),Qx=n(_L,"A",{href:!0});var i$r=s(Qx);KHe=r(i$r,"MBartTokenizer"),i$r.forEach(t),ZHe=r(_L," or "),Hx=n(_L,"A",{href:!0});var d$r=s(Hx);eUe=r(d$r,"MBartTokenizerFast"),d$r.forEach(t),oUe=r(_L," (mBART model)"),_L.forEach(t),rUe=i(y),Ts=n(y,"LI",{});var uL=s(Ts);lJ=n(uL,"STRONG",{});var c$r=s(lJ);tUe=r(c$r,"mbart50"),c$r.forEach(t),aUe=r(uL," \u2014 "),Ux=n(uL,"A",{href:!0});var f$r=s(Ux);nUe=r(f$r,"MBart50Tokenizer"),f$r.forEach(t),sUe=r(uL," or "),Jx=n(uL,"A",{href:!0});var m$r=s(Jx);lUe=r(m$r,"MBart50TokenizerFast"),m$r.forEach(t),iUe=r(uL," (mBART-50 model)"),uL.forEach(t),dUe=i(y),Wg=n(y,"LI",{});var rFe=s(Wg);iJ=n(rFe,"STRONG",{});var g$r=s(iJ);cUe=r(g$r,"mluke"),g$r.forEach(t),fUe=r(rFe," \u2014 "),Yx=n(rFe,"A",{href:!0});var h$r=s(Yx);mUe=r(h$r,"MLukeTokenizer"),h$r.forEach(t),gUe=r(rFe," (mLUKE model)"),rFe.forEach(t),hUe=i(y),Fs=n(y,"LI",{});var bL=s(Fs);dJ=n(bL,"STRONG",{});var p$r=s(dJ);pUe=r(p$r,"mobilebert"),p$r.forEach(t),_Ue=r(bL," \u2014 "),Kx=n(bL,"A",{href:!0});var _$r=s(Kx);uUe=r(_$r,"MobileBertTokenizer"),_$r.forEach(t),bUe=r(bL," or "),Zx=n(bL,"A",{href:!0});var u$r=s(Zx);vUe=r(u$r,"MobileBertTokenizerFast"),u$r.forEach(t),TUe=r(bL," (MobileBERT model)"),bL.forEach(t),FUe=i(y),Cs=n(y,"LI",{});var vL=s(Cs);cJ=n(vL,"STRONG",{});var b$r=s(cJ);CUe=r(b$r,"mpnet"),b$r.forEach(t),MUe=r(vL," \u2014 "),ek=n(vL,"A",{href:!0});var v$r=s(ek);EUe=r(v$r,"MPNetTokenizer"),v$r.forEach(t),yUe=r(vL," or "),ok=n(vL,"A",{href:!0});var T$r=s(ok);wUe=r(T$r,"MPNetTokenizerFast"),T$r.forEach(t),AUe=r(vL," (MPNet model)"),vL.forEach(t),LUe=i(y),Ms=n(y,"LI",{});var TL=s(Ms);fJ=n(TL,"STRONG",{});var F$r=s(fJ);BUe=r(F$r,"mt5"),F$r.forEach(t),xUe=r(TL," \u2014 "),rk=n(TL,"A",{href:!0});var C$r=s(rk);kUe=r(C$r,"MT5Tokenizer"),C$r.forEach(t),RUe=r(TL," or "),tk=n(TL,"A",{href:!0});var M$r=s(tk);SUe=r(M$r,"MT5TokenizerFast"),M$r.forEach(t),PUe=r(TL," (mT5 model)"),TL.forEach(t),$Ue=i(y),Es=n(y,"LI",{});var FL=s(Es);mJ=n(FL,"STRONG",{});var E$r=s(mJ);IUe=r(E$r,"openai-gpt"),E$r.forEach(t),jUe=r(FL," \u2014 "),ak=n(FL,"A",{href:!0});var y$r=s(ak);DUe=r(y$r,"OpenAIGPTTokenizer"),y$r.forEach(t),NUe=r(FL," or "),nk=n(FL,"A",{href:!0});var w$r=s(nk);qUe=r(w$r,"OpenAIGPTTokenizerFast"),w$r.forEach(t),OUe=r(FL," (OpenAI GPT model)"),FL.forEach(t),GUe=i(y),ys=n(y,"LI",{});var CL=s(ys);gJ=n(CL,"STRONG",{});var A$r=s(gJ);XUe=r(A$r,"pegasus"),A$r.forEach(t),VUe=r(CL," \u2014 "),sk=n(CL,"A",{href:!0});var L$r=s(sk);zUe=r(L$r,"PegasusTokenizer"),L$r.forEach(t),WUe=r(CL," or "),lk=n(CL,"A",{href:!0});var B$r=s(lk);QUe=r(B$r,"PegasusTokenizerFast"),B$r.forEach(t),HUe=r(CL," (Pegasus model)"),CL.forEach(t),UUe=i(y),Qg=n(y,"LI",{});var tFe=s(Qg);hJ=n(tFe,"STRONG",{});var x$r=s(hJ);JUe=r(x$r,"perceiver"),x$r.forEach(t),YUe=r(tFe," \u2014 "),ik=n(tFe,"A",{href:!0});var k$r=s(ik);KUe=r(k$r,"PerceiverTokenizer"),k$r.forEach(t),ZUe=r(tFe," (Perceiver model)"),tFe.forEach(t),eJe=i(y),Hg=n(y,"LI",{});var aFe=s(Hg);pJ=n(aFe,"STRONG",{});var R$r=s(pJ);oJe=r(R$r,"phobert"),R$r.forEach(t),rJe=r(aFe," \u2014 "),dk=n(aFe,"A",{href:!0});var S$r=s(dk);tJe=r(S$r,"PhobertTokenizer"),S$r.forEach(t),aJe=r(aFe," (PhoBERT model)"),aFe.forEach(t),nJe=i(y),Ug=n(y,"LI",{});var nFe=s(Ug);_J=n(nFe,"STRONG",{});var P$r=s(_J);sJe=r(P$r,"plbart"),P$r.forEach(t),lJe=r(nFe," \u2014 "),ck=n(nFe,"A",{href:!0});var $$r=s(ck);iJe=r($$r,"PLBartTokenizer"),$$r.forEach(t),dJe=r(nFe," (PLBart model)"),nFe.forEach(t),cJe=i(y),Jg=n(y,"LI",{});var sFe=s(Jg);uJ=n(sFe,"STRONG",{});var I$r=s(uJ);fJe=r(I$r,"prophetnet"),I$r.forEach(t),mJe=r(sFe," \u2014 "),fk=n(sFe,"A",{href:!0});var j$r=s(fk);gJe=r(j$r,"ProphetNetTokenizer"),j$r.forEach(t),hJe=r(sFe," (ProphetNet model)"),sFe.forEach(t),pJe=i(y),ws=n(y,"LI",{});var ML=s(ws);bJ=n(ML,"STRONG",{});var D$r=s(bJ);_Je=r(D$r,"qdqbert"),D$r.forEach(t),uJe=r(ML," \u2014 "),mk=n(ML,"A",{href:!0});var N$r=s(mk);bJe=r(N$r,"BertTokenizer"),N$r.forEach(t),vJe=r(ML," or "),gk=n(ML,"A",{href:!0});var q$r=s(gk);TJe=r(q$r,"BertTokenizerFast"),q$r.forEach(t),FJe=r(ML," (QDQBert model)"),ML.forEach(t),CJe=i(y),Yg=n(y,"LI",{});var lFe=s(Yg);vJ=n(lFe,"STRONG",{});var O$r=s(vJ);MJe=r(O$r,"rag"),O$r.forEach(t),EJe=r(lFe," \u2014 "),hk=n(lFe,"A",{href:!0});var G$r=s(hk);yJe=r(G$r,"RagTokenizer"),G$r.forEach(t),wJe=r(lFe," (RAG model)"),lFe.forEach(t),AJe=i(y),As=n(y,"LI",{});var EL=s(As);TJ=n(EL,"STRONG",{});var X$r=s(TJ);LJe=r(X$r,"realm"),X$r.forEach(t),BJe=r(EL," \u2014 "),pk=n(EL,"A",{href:!0});var V$r=s(pk);xJe=r(V$r,"RealmTokenizer"),V$r.forEach(t),kJe=r(EL," or "),_k=n(EL,"A",{href:!0});var z$r=s(_k);RJe=r(z$r,"RealmTokenizerFast"),z$r.forEach(t),SJe=r(EL," (Realm model)"),EL.forEach(t),PJe=i(y),Ls=n(y,"LI",{});var yL=s(Ls);FJ=n(yL,"STRONG",{});var W$r=s(FJ);$Je=r(W$r,"reformer"),W$r.forEach(t),IJe=r(yL," \u2014 "),uk=n(yL,"A",{href:!0});var Q$r=s(uk);jJe=r(Q$r,"ReformerTokenizer"),Q$r.forEach(t),DJe=r(yL," or "),bk=n(yL,"A",{href:!0});var H$r=s(bk);NJe=r(H$r,"ReformerTokenizerFast"),H$r.forEach(t),qJe=r(yL," (Reformer model)"),yL.forEach(t),OJe=i(y),Bs=n(y,"LI",{});var wL=s(Bs);CJ=n(wL,"STRONG",{});var U$r=s(CJ);GJe=r(U$r,"rembert"),U$r.forEach(t),XJe=r(wL," \u2014 "),vk=n(wL,"A",{href:!0});var J$r=s(vk);VJe=r(J$r,"RemBertTokenizer"),J$r.forEach(t),zJe=r(wL," or "),Tk=n(wL,"A",{href:!0});var Y$r=s(Tk);WJe=r(Y$r,"RemBertTokenizerFast"),Y$r.forEach(t),QJe=r(wL," (RemBERT model)"),wL.forEach(t),HJe=i(y),xs=n(y,"LI",{});var AL=s(xs);MJ=n(AL,"STRONG",{});var K$r=s(MJ);UJe=r(K$r,"retribert"),K$r.forEach(t),JJe=r(AL," \u2014 "),Fk=n(AL,"A",{href:!0});var Z$r=s(Fk);YJe=r(Z$r,"RetriBertTokenizer"),Z$r.forEach(t),KJe=r(AL," or "),Ck=n(AL,"A",{href:!0});var eIr=s(Ck);ZJe=r(eIr,"RetriBertTokenizerFast"),eIr.forEach(t),eYe=r(AL," (RetriBERT model)"),AL.forEach(t),oYe=i(y),ks=n(y,"LI",{});var LL=s(ks);EJ=n(LL,"STRONG",{});var oIr=s(EJ);rYe=r(oIr,"roberta"),oIr.forEach(t),tYe=r(LL," \u2014 "),Mk=n(LL,"A",{href:!0});var rIr=s(Mk);aYe=r(rIr,"RobertaTokenizer"),rIr.forEach(t),nYe=r(LL," or "),Ek=n(LL,"A",{href:!0});var tIr=s(Ek);sYe=r(tIr,"RobertaTokenizerFast"),tIr.forEach(t),lYe=r(LL," (RoBERTa model)"),LL.forEach(t),iYe=i(y),Rs=n(y,"LI",{});var BL=s(Rs);yJ=n(BL,"STRONG",{});var aIr=s(yJ);dYe=r(aIr,"roformer"),aIr.forEach(t),cYe=r(BL," \u2014 "),yk=n(BL,"A",{href:!0});var nIr=s(yk);fYe=r(nIr,"RoFormerTokenizer"),nIr.forEach(t),mYe=r(BL," or "),wk=n(BL,"A",{href:!0});var sIr=s(wk);gYe=r(sIr,"RoFormerTokenizerFast"),sIr.forEach(t),hYe=r(BL," (RoFormer model)"),BL.forEach(t),pYe=i(y),Kg=n(y,"LI",{});var iFe=s(Kg);wJ=n(iFe,"STRONG",{});var lIr=s(wJ);_Ye=r(lIr,"speech_to_text"),lIr.forEach(t),uYe=r(iFe," \u2014 "),Ak=n(iFe,"A",{href:!0});var iIr=s(Ak);bYe=r(iIr,"Speech2TextTokenizer"),iIr.forEach(t),vYe=r(iFe," (Speech2Text model)"),iFe.forEach(t),TYe=i(y),Zg=n(y,"LI",{});var dFe=s(Zg);AJ=n(dFe,"STRONG",{});var dIr=s(AJ);FYe=r(dIr,"speech_to_text_2"),dIr.forEach(t),CYe=r(dFe," \u2014 "),Lk=n(dFe,"A",{href:!0});var cIr=s(Lk);MYe=r(cIr,"Speech2Text2Tokenizer"),cIr.forEach(t),EYe=r(dFe," (Speech2Text2 model)"),dFe.forEach(t),yYe=i(y),Ss=n(y,"LI",{});var xL=s(Ss);LJ=n(xL,"STRONG",{});var fIr=s(LJ);wYe=r(fIr,"splinter"),fIr.forEach(t),AYe=r(xL," \u2014 "),Bk=n(xL,"A",{href:!0});var mIr=s(Bk);LYe=r(mIr,"SplinterTokenizer"),mIr.forEach(t),BYe=r(xL," or "),xk=n(xL,"A",{href:!0});var gIr=s(xk);xYe=r(gIr,"SplinterTokenizerFast"),gIr.forEach(t),kYe=r(xL," (Splinter model)"),xL.forEach(t),RYe=i(y),Ps=n(y,"LI",{});var kL=s(Ps);BJ=n(kL,"STRONG",{});var hIr=s(BJ);SYe=r(hIr,"squeezebert"),hIr.forEach(t),PYe=r(kL," \u2014 "),kk=n(kL,"A",{href:!0});var pIr=s(kk);$Ye=r(pIr,"SqueezeBertTokenizer"),pIr.forEach(t),IYe=r(kL," or "),Rk=n(kL,"A",{href:!0});var _Ir=s(Rk);jYe=r(_Ir,"SqueezeBertTokenizerFast"),_Ir.forEach(t),DYe=r(kL," (SqueezeBERT model)"),kL.forEach(t),NYe=i(y),$s=n(y,"LI",{});var RL=s($s);xJ=n(RL,"STRONG",{});var uIr=s(xJ);qYe=r(uIr,"t5"),uIr.forEach(t),OYe=r(RL," \u2014 "),Sk=n(RL,"A",{href:!0});var bIr=s(Sk);GYe=r(bIr,"T5Tokenizer"),bIr.forEach(t),XYe=r(RL," or "),Pk=n(RL,"A",{href:!0});var vIr=s(Pk);VYe=r(vIr,"T5TokenizerFast"),vIr.forEach(t),zYe=r(RL," (T5 model)"),RL.forEach(t),WYe=i(y),eh=n(y,"LI",{});var cFe=s(eh);kJ=n(cFe,"STRONG",{});var TIr=s(kJ);QYe=r(TIr,"tapas"),TIr.forEach(t),HYe=r(cFe," \u2014 "),$k=n(cFe,"A",{href:!0});var FIr=s($k);UYe=r(FIr,"TapasTokenizer"),FIr.forEach(t),JYe=r(cFe," (TAPAS model)"),cFe.forEach(t),YYe=i(y),oh=n(y,"LI",{});var fFe=s(oh);RJ=n(fFe,"STRONG",{});var CIr=s(RJ);KYe=r(CIr,"transfo-xl"),CIr.forEach(t),ZYe=r(fFe," \u2014 "),Ik=n(fFe,"A",{href:!0});var MIr=s(Ik);eKe=r(MIr,"TransfoXLTokenizer"),MIr.forEach(t),oKe=r(fFe," (Transformer-XL model)"),fFe.forEach(t),rKe=i(y),rh=n(y,"LI",{});var mFe=s(rh);SJ=n(mFe,"STRONG",{});var EIr=s(SJ);tKe=r(EIr,"wav2vec2"),EIr.forEach(t),aKe=r(mFe," \u2014 "),jk=n(mFe,"A",{href:!0});var yIr=s(jk);nKe=r(yIr,"Wav2Vec2CTCTokenizer"),yIr.forEach(t),sKe=r(mFe," (Wav2Vec2 model)"),mFe.forEach(t),lKe=i(y),th=n(y,"LI",{});var gFe=s(th);PJ=n(gFe,"STRONG",{});var wIr=s(PJ);iKe=r(wIr,"wav2vec2_phoneme"),wIr.forEach(t),dKe=r(gFe," \u2014 "),Dk=n(gFe,"A",{href:!0});var AIr=s(Dk);cKe=r(AIr,"Wav2Vec2PhonemeCTCTokenizer"),AIr.forEach(t),fKe=r(gFe," (Wav2Vec2Phoneme model)"),gFe.forEach(t),mKe=i(y),Is=n(y,"LI",{});var SL=s(Is);$J=n(SL,"STRONG",{});var LIr=s($J);gKe=r(LIr,"xglm"),LIr.forEach(t),hKe=r(SL," \u2014 "),Nk=n(SL,"A",{href:!0});var BIr=s(Nk);pKe=r(BIr,"XGLMTokenizer"),BIr.forEach(t),_Ke=r(SL," or "),qk=n(SL,"A",{href:!0});var xIr=s(qk);uKe=r(xIr,"XGLMTokenizerFast"),xIr.forEach(t),bKe=r(SL," (XGLM model)"),SL.forEach(t),vKe=i(y),ah=n(y,"LI",{});var hFe=s(ah);IJ=n(hFe,"STRONG",{});var kIr=s(IJ);TKe=r(kIr,"xlm"),kIr.forEach(t),FKe=r(hFe," \u2014 "),Ok=n(hFe,"A",{href:!0});var RIr=s(Ok);CKe=r(RIr,"XLMTokenizer"),RIr.forEach(t),MKe=r(hFe," (XLM model)"),hFe.forEach(t),EKe=i(y),nh=n(y,"LI",{});var pFe=s(nh);jJ=n(pFe,"STRONG",{});var SIr=s(jJ);yKe=r(SIr,"xlm-prophetnet"),SIr.forEach(t),wKe=r(pFe," \u2014 "),Gk=n(pFe,"A",{href:!0});var PIr=s(Gk);AKe=r(PIr,"XLMProphetNetTokenizer"),PIr.forEach(t),LKe=r(pFe," (XLMProphetNet model)"),pFe.forEach(t),BKe=i(y),js=n(y,"LI",{});var PL=s(js);DJ=n(PL,"STRONG",{});var $Ir=s(DJ);xKe=r($Ir,"xlm-roberta"),$Ir.forEach(t),kKe=r(PL," \u2014 "),Xk=n(PL,"A",{href:!0});var IIr=s(Xk);RKe=r(IIr,"XLMRobertaTokenizer"),IIr.forEach(t),SKe=r(PL," or "),Vk=n(PL,"A",{href:!0});var jIr=s(Vk);PKe=r(jIr,"XLMRobertaTokenizerFast"),jIr.forEach(t),$Ke=r(PL," (XLM-RoBERTa model)"),PL.forEach(t),IKe=i(y),Ds=n(y,"LI",{});var $L=s(Ds);NJ=n($L,"STRONG",{});var DIr=s(NJ);jKe=r(DIr,"xlnet"),DIr.forEach(t),DKe=r($L," \u2014 "),zk=n($L,"A",{href:!0});var NIr=s(zk);NKe=r(NIr,"XLNetTokenizer"),NIr.forEach(t),qKe=r($L," or "),Wk=n($L,"A",{href:!0});var qIr=s(Wk);OKe=r(qIr,"XLNetTokenizerFast"),qIr.forEach(t),GKe=r($L," (XLNet model)"),$L.forEach(t),y.forEach(t),XKe=i(ha),qJ=n(ha,"P",{});var OIr=s(qJ);VKe=r(OIr,"Examples:"),OIr.forEach(t),zKe=i(ha),m(c4.$$.fragment,ha),ha.forEach(t),WKe=i(Xs),sh=n(Xs,"DIV",{class:!0});var pRe=s(sh);m(f4.$$.fragment,pRe),QKe=i(pRe),OJ=n(pRe,"P",{});var GIr=s(OJ);HKe=r(GIr,"Register a new tokenizer in this mapping."),GIr.forEach(t),pRe.forEach(t),Xs.forEach(t),fxe=i(d),Hi=n(d,"H2",{class:!0});var _Re=s(Hi);lh=n(_Re,"A",{id:!0,class:!0,href:!0});var XIr=s(lh);GJ=n(XIr,"SPAN",{});var VIr=s(GJ);m(m4.$$.fragment,VIr),VIr.forEach(t),XIr.forEach(t),UKe=i(_Re),XJ=n(_Re,"SPAN",{});var zIr=s(XJ);JKe=r(zIr,"AutoFeatureExtractor"),zIr.forEach(t),_Re.forEach(t),mxe=i(d),Ho=n(d,"DIV",{class:!0});var Vs=s(Ho);m(g4.$$.fragment,Vs),YKe=i(Vs),h4=n(Vs,"P",{});var uRe=s(h4);KKe=r(uRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Qk=n(uRe,"A",{href:!0});var WIr=s(Qk);ZKe=r(WIr,"AutoFeatureExtractor.from_pretrained()"),WIr.forEach(t),eZe=r(uRe," class method."),uRe.forEach(t),oZe=i(Vs),p4=n(Vs,"P",{});var bRe=s(p4);rZe=r(bRe,"This class cannot be instantiated directly using "),VJ=n(bRe,"CODE",{});var QIr=s(VJ);tZe=r(QIr,"__init__()"),QIr.forEach(t),aZe=r(bRe," (throws an error)."),bRe.forEach(t),nZe=i(Vs),$e=n(Vs,"DIV",{class:!0});var Dt=s($e);m(_4.$$.fragment,Dt),sZe=i(Dt),zJ=n(Dt,"P",{});var HIr=s(zJ);lZe=r(HIr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),HIr.forEach(t),iZe=i(Dt),Xa=n(Dt,"P",{});var UC=s(Xa);dZe=r(UC,"The feature extractor class to instantiate is selected based on the "),WJ=n(UC,"CODE",{});var UIr=s(WJ);cZe=r(UIr,"model_type"),UIr.forEach(t),fZe=r(UC,` property of the config object
(either passed as an argument or loaded from `),QJ=n(UC,"CODE",{});var JIr=s(QJ);mZe=r(JIr,"pretrained_model_name_or_path"),JIr.forEach(t),gZe=r(UC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),HJ=n(UC,"CODE",{});var YIr=s(HJ);hZe=r(YIr,"pretrained_model_name_or_path"),YIr.forEach(t),pZe=r(UC,":"),UC.forEach(t),_Ze=i(Dt),ae=n(Dt,"UL",{});var le=s(ae);ih=n(le,"LI",{});var _Fe=s(ih);UJ=n(_Fe,"STRONG",{});var KIr=s(UJ);uZe=r(KIr,"beit"),KIr.forEach(t),bZe=r(_Fe," \u2014 "),Hk=n(_Fe,"A",{href:!0});var ZIr=s(Hk);vZe=r(ZIr,"BeitFeatureExtractor"),ZIr.forEach(t),TZe=r(_Fe," (BEiT model)"),_Fe.forEach(t),FZe=i(le),dh=n(le,"LI",{});var uFe=s(dh);JJ=n(uFe,"STRONG",{});var ejr=s(JJ);CZe=r(ejr,"clip"),ejr.forEach(t),MZe=r(uFe," \u2014 "),Uk=n(uFe,"A",{href:!0});var ojr=s(Uk);EZe=r(ojr,"CLIPFeatureExtractor"),ojr.forEach(t),yZe=r(uFe," (CLIP model)"),uFe.forEach(t),wZe=i(le),ch=n(le,"LI",{});var bFe=s(ch);YJ=n(bFe,"STRONG",{});var rjr=s(YJ);AZe=r(rjr,"convnext"),rjr.forEach(t),LZe=r(bFe," \u2014 "),Jk=n(bFe,"A",{href:!0});var tjr=s(Jk);BZe=r(tjr,"ConvNextFeatureExtractor"),tjr.forEach(t),xZe=r(bFe," (ConvNext model)"),bFe.forEach(t),kZe=i(le),fh=n(le,"LI",{});var vFe=s(fh);KJ=n(vFe,"STRONG",{});var ajr=s(KJ);RZe=r(ajr,"deit"),ajr.forEach(t),SZe=r(vFe," \u2014 "),Yk=n(vFe,"A",{href:!0});var njr=s(Yk);PZe=r(njr,"DeiTFeatureExtractor"),njr.forEach(t),$Ze=r(vFe," (DeiT model)"),vFe.forEach(t),IZe=i(le),mh=n(le,"LI",{});var TFe=s(mh);ZJ=n(TFe,"STRONG",{});var sjr=s(ZJ);jZe=r(sjr,"detr"),sjr.forEach(t),DZe=r(TFe," \u2014 "),Kk=n(TFe,"A",{href:!0});var ljr=s(Kk);NZe=r(ljr,"DetrFeatureExtractor"),ljr.forEach(t),qZe=r(TFe," (DETR model)"),TFe.forEach(t),OZe=i(le),gh=n(le,"LI",{});var FFe=s(gh);eY=n(FFe,"STRONG",{});var ijr=s(eY);GZe=r(ijr,"hubert"),ijr.forEach(t),XZe=r(FFe," \u2014 "),Zk=n(FFe,"A",{href:!0});var djr=s(Zk);VZe=r(djr,"Wav2Vec2FeatureExtractor"),djr.forEach(t),zZe=r(FFe," (Hubert model)"),FFe.forEach(t),WZe=i(le),hh=n(le,"LI",{});var CFe=s(hh);oY=n(CFe,"STRONG",{});var cjr=s(oY);QZe=r(cjr,"layoutlmv2"),cjr.forEach(t),HZe=r(CFe," \u2014 "),eR=n(CFe,"A",{href:!0});var fjr=s(eR);UZe=r(fjr,"LayoutLMv2FeatureExtractor"),fjr.forEach(t),JZe=r(CFe," (LayoutLMv2 model)"),CFe.forEach(t),YZe=i(le),ph=n(le,"LI",{});var MFe=s(ph);rY=n(MFe,"STRONG",{});var mjr=s(rY);KZe=r(mjr,"maskformer"),mjr.forEach(t),ZZe=r(MFe," \u2014 "),oR=n(MFe,"A",{href:!0});var gjr=s(oR);eeo=r(gjr,"MaskFormerFeatureExtractor"),gjr.forEach(t),oeo=r(MFe," (MaskFormer model)"),MFe.forEach(t),reo=i(le),_h=n(le,"LI",{});var EFe=s(_h);tY=n(EFe,"STRONG",{});var hjr=s(tY);teo=r(hjr,"perceiver"),hjr.forEach(t),aeo=r(EFe," \u2014 "),rR=n(EFe,"A",{href:!0});var pjr=s(rR);neo=r(pjr,"PerceiverFeatureExtractor"),pjr.forEach(t),seo=r(EFe," (Perceiver model)"),EFe.forEach(t),leo=i(le),uh=n(le,"LI",{});var yFe=s(uh);aY=n(yFe,"STRONG",{});var _jr=s(aY);ieo=r(_jr,"poolformer"),_jr.forEach(t),deo=r(yFe," \u2014 "),tR=n(yFe,"A",{href:!0});var ujr=s(tR);ceo=r(ujr,"PoolFormerFeatureExtractor"),ujr.forEach(t),feo=r(yFe," (PoolFormer model)"),yFe.forEach(t),meo=i(le),bh=n(le,"LI",{});var wFe=s(bh);nY=n(wFe,"STRONG",{});var bjr=s(nY);geo=r(bjr,"segformer"),bjr.forEach(t),heo=r(wFe," \u2014 "),aR=n(wFe,"A",{href:!0});var vjr=s(aR);peo=r(vjr,"SegformerFeatureExtractor"),vjr.forEach(t),_eo=r(wFe," (SegFormer model)"),wFe.forEach(t),ueo=i(le),vh=n(le,"LI",{});var AFe=s(vh);sY=n(AFe,"STRONG",{});var Tjr=s(sY);beo=r(Tjr,"speech_to_text"),Tjr.forEach(t),veo=r(AFe," \u2014 "),nR=n(AFe,"A",{href:!0});var Fjr=s(nR);Teo=r(Fjr,"Speech2TextFeatureExtractor"),Fjr.forEach(t),Feo=r(AFe," (Speech2Text model)"),AFe.forEach(t),Ceo=i(le),Th=n(le,"LI",{});var LFe=s(Th);lY=n(LFe,"STRONG",{});var Cjr=s(lY);Meo=r(Cjr,"swin"),Cjr.forEach(t),Eeo=r(LFe," \u2014 "),sR=n(LFe,"A",{href:!0});var Mjr=s(sR);yeo=r(Mjr,"ViTFeatureExtractor"),Mjr.forEach(t),weo=r(LFe," (Swin model)"),LFe.forEach(t),Aeo=i(le),Fh=n(le,"LI",{});var BFe=s(Fh);iY=n(BFe,"STRONG",{});var Ejr=s(iY);Leo=r(Ejr,"vit"),Ejr.forEach(t),Beo=r(BFe," \u2014 "),lR=n(BFe,"A",{href:!0});var yjr=s(lR);xeo=r(yjr,"ViTFeatureExtractor"),yjr.forEach(t),keo=r(BFe," (ViT model)"),BFe.forEach(t),Reo=i(le),Ch=n(le,"LI",{});var xFe=s(Ch);dY=n(xFe,"STRONG",{});var wjr=s(dY);Seo=r(wjr,"vit_mae"),wjr.forEach(t),Peo=r(xFe," \u2014 "),iR=n(xFe,"A",{href:!0});var Ajr=s(iR);$eo=r(Ajr,"ViTFeatureExtractor"),Ajr.forEach(t),Ieo=r(xFe," (ViTMAE model)"),xFe.forEach(t),jeo=i(le),Mh=n(le,"LI",{});var kFe=s(Mh);cY=n(kFe,"STRONG",{});var Ljr=s(cY);Deo=r(Ljr,"wav2vec2"),Ljr.forEach(t),Neo=r(kFe," \u2014 "),dR=n(kFe,"A",{href:!0});var Bjr=s(dR);qeo=r(Bjr,"Wav2Vec2FeatureExtractor"),Bjr.forEach(t),Oeo=r(kFe," (Wav2Vec2 model)"),kFe.forEach(t),le.forEach(t),Geo=i(Dt),m(Eh.$$.fragment,Dt),Xeo=i(Dt),fY=n(Dt,"P",{});var xjr=s(fY);Veo=r(xjr,"Examples:"),xjr.forEach(t),zeo=i(Dt),m(u4.$$.fragment,Dt),Dt.forEach(t),Weo=i(Vs),yh=n(Vs,"DIV",{class:!0});var vRe=s(yh);m(b4.$$.fragment,vRe),Qeo=i(vRe),mY=n(vRe,"P",{});var kjr=s(mY);Heo=r(kjr,"Register a new feature extractor for this class."),kjr.forEach(t),vRe.forEach(t),Vs.forEach(t),gxe=i(d),Ui=n(d,"H2",{class:!0});var TRe=s(Ui);wh=n(TRe,"A",{id:!0,class:!0,href:!0});var Rjr=s(wh);gY=n(Rjr,"SPAN",{});var Sjr=s(gY);m(v4.$$.fragment,Sjr),Sjr.forEach(t),Rjr.forEach(t),Ueo=i(TRe),hY=n(TRe,"SPAN",{});var Pjr=s(hY);Jeo=r(Pjr,"AutoProcessor"),Pjr.forEach(t),TRe.forEach(t),hxe=i(d),Uo=n(d,"DIV",{class:!0});var zs=s(Uo);m(T4.$$.fragment,zs),Yeo=i(zs),F4=n(zs,"P",{});var FRe=s(F4);Keo=r(FRe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cR=n(FRe,"A",{href:!0});var $jr=s(cR);Zeo=r($jr,"AutoProcessor.from_pretrained()"),$jr.forEach(t),eoo=r(FRe," class method."),FRe.forEach(t),ooo=i(zs),C4=n(zs,"P",{});var CRe=s(C4);roo=r(CRe,"This class cannot be instantiated directly using "),pY=n(CRe,"CODE",{});var Ijr=s(pY);too=r(Ijr,"__init__()"),Ijr.forEach(t),aoo=r(CRe," (throws an error)."),CRe.forEach(t),noo=i(zs),Ie=n(zs,"DIV",{class:!0});var Nt=s(Ie);m(M4.$$.fragment,Nt),soo=i(Nt),_Y=n(Nt,"P",{});var jjr=s(_Y);loo=r(jjr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jjr.forEach(t),ioo=i(Nt),Ji=n(Nt,"P",{});var Cz=s(Ji);doo=r(Cz,"The processor class to instantiate is selected based on the "),uY=n(Cz,"CODE",{});var Djr=s(uY);coo=r(Djr,"model_type"),Djr.forEach(t),foo=r(Cz,` property of the config object (either
passed as an argument or loaded from `),bY=n(Cz,"CODE",{});var Njr=s(bY);moo=r(Njr,"pretrained_model_name_or_path"),Njr.forEach(t),goo=r(Cz," if possible):"),Cz.forEach(t),hoo=i(Nt),Be=n(Nt,"UL",{});var No=s(Be);Ah=n(No,"LI",{});var RFe=s(Ah);vY=n(RFe,"STRONG",{});var qjr=s(vY);poo=r(qjr,"clip"),qjr.forEach(t),_oo=r(RFe," \u2014 "),fR=n(RFe,"A",{href:!0});var Ojr=s(fR);uoo=r(Ojr,"CLIPProcessor"),Ojr.forEach(t),boo=r(RFe," (CLIP model)"),RFe.forEach(t),voo=i(No),Lh=n(No,"LI",{});var SFe=s(Lh);TY=n(SFe,"STRONG",{});var Gjr=s(TY);Too=r(Gjr,"layoutlmv2"),Gjr.forEach(t),Foo=r(SFe," \u2014 "),mR=n(SFe,"A",{href:!0});var Xjr=s(mR);Coo=r(Xjr,"LayoutLMv2Processor"),Xjr.forEach(t),Moo=r(SFe," (LayoutLMv2 model)"),SFe.forEach(t),Eoo=i(No),Bh=n(No,"LI",{});var PFe=s(Bh);FY=n(PFe,"STRONG",{});var Vjr=s(FY);yoo=r(Vjr,"layoutxlm"),Vjr.forEach(t),woo=r(PFe," \u2014 "),gR=n(PFe,"A",{href:!0});var zjr=s(gR);Aoo=r(zjr,"LayoutXLMProcessor"),zjr.forEach(t),Loo=r(PFe," (LayoutXLM model)"),PFe.forEach(t),Boo=i(No),xh=n(No,"LI",{});var $Fe=s(xh);CY=n($Fe,"STRONG",{});var Wjr=s(CY);xoo=r(Wjr,"speech_to_text"),Wjr.forEach(t),koo=r($Fe," \u2014 "),hR=n($Fe,"A",{href:!0});var Qjr=s(hR);Roo=r(Qjr,"Speech2TextProcessor"),Qjr.forEach(t),Soo=r($Fe," (Speech2Text model)"),$Fe.forEach(t),Poo=i(No),kh=n(No,"LI",{});var IFe=s(kh);MY=n(IFe,"STRONG",{});var Hjr=s(MY);$oo=r(Hjr,"speech_to_text_2"),Hjr.forEach(t),Ioo=r(IFe," \u2014 "),pR=n(IFe,"A",{href:!0});var Ujr=s(pR);joo=r(Ujr,"Speech2Text2Processor"),Ujr.forEach(t),Doo=r(IFe," (Speech2Text2 model)"),IFe.forEach(t),Noo=i(No),Rh=n(No,"LI",{});var jFe=s(Rh);EY=n(jFe,"STRONG",{});var Jjr=s(EY);qoo=r(Jjr,"trocr"),Jjr.forEach(t),Ooo=r(jFe," \u2014 "),_R=n(jFe,"A",{href:!0});var Yjr=s(_R);Goo=r(Yjr,"TrOCRProcessor"),Yjr.forEach(t),Xoo=r(jFe," (TrOCR model)"),jFe.forEach(t),Voo=i(No),Sh=n(No,"LI",{});var DFe=s(Sh);yY=n(DFe,"STRONG",{});var Kjr=s(yY);zoo=r(Kjr,"vision-text-dual-encoder"),Kjr.forEach(t),Woo=r(DFe," \u2014 "),uR=n(DFe,"A",{href:!0});var Zjr=s(uR);Qoo=r(Zjr,"VisionTextDualEncoderProcessor"),Zjr.forEach(t),Hoo=r(DFe," (VisionTextDualEncoder model)"),DFe.forEach(t),Uoo=i(No),Ph=n(No,"LI",{});var NFe=s(Ph);wY=n(NFe,"STRONG",{});var eDr=s(wY);Joo=r(eDr,"wav2vec2"),eDr.forEach(t),Yoo=r(NFe," \u2014 "),bR=n(NFe,"A",{href:!0});var oDr=s(bR);Koo=r(oDr,"Wav2Vec2Processor"),oDr.forEach(t),Zoo=r(NFe," (Wav2Vec2 model)"),NFe.forEach(t),No.forEach(t),ero=i(Nt),m($h.$$.fragment,Nt),oro=i(Nt),AY=n(Nt,"P",{});var rDr=s(AY);rro=r(rDr,"Examples:"),rDr.forEach(t),tro=i(Nt),m(E4.$$.fragment,Nt),Nt.forEach(t),aro=i(zs),Ih=n(zs,"DIV",{class:!0});var MRe=s(Ih);m(y4.$$.fragment,MRe),nro=i(MRe),LY=n(MRe,"P",{});var tDr=s(LY);sro=r(tDr,"Register a new processor for this class."),tDr.forEach(t),MRe.forEach(t),zs.forEach(t),pxe=i(d),Yi=n(d,"H2",{class:!0});var ERe=s(Yi);jh=n(ERe,"A",{id:!0,class:!0,href:!0});var aDr=s(jh);BY=n(aDr,"SPAN",{});var nDr=s(BY);m(w4.$$.fragment,nDr),nDr.forEach(t),aDr.forEach(t),lro=i(ERe),xY=n(ERe,"SPAN",{});var sDr=s(xY);iro=r(sDr,"AutoModel"),sDr.forEach(t),ERe.forEach(t),_xe=i(d),Jo=n(d,"DIV",{class:!0});var Ws=s(Jo);m(A4.$$.fragment,Ws),dro=i(Ws),Ki=n(Ws,"P",{});var Mz=s(Ki);cro=r(Mz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kY=n(Mz,"CODE",{});var lDr=s(kY);fro=r(lDr,"from_pretrained()"),lDr.forEach(t),mro=r(Mz,"class method or the "),RY=n(Mz,"CODE",{});var iDr=s(RY);gro=r(iDr,"from_config()"),iDr.forEach(t),hro=r(Mz,`class
method.`),Mz.forEach(t),pro=i(Ws),L4=n(Ws,"P",{});var yRe=s(L4);_ro=r(yRe,"This class cannot be instantiated directly using "),SY=n(yRe,"CODE",{});var dDr=s(SY);uro=r(dDr,"__init__()"),dDr.forEach(t),bro=r(yRe," (throws an error)."),yRe.forEach(t),vro=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(B4.$$.fragment,Qs),Tro=i(Qs),PY=n(Qs,"P",{});var cDr=s(PY);Fro=r(cDr,"Instantiates one of the base model classes of the library from a configuration."),cDr.forEach(t),Cro=i(Qs),Zi=n(Qs,"P",{});var Ez=s(Zi);Mro=r(Ez,`Note:
Loading a model from its configuration file does `),$Y=n(Ez,"STRONG",{});var fDr=s($Y);Ero=r(fDr,"not"),fDr.forEach(t),yro=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(Ez,"CODE",{});var mDr=s(IY);wro=r(mDr,"from_pretrained()"),mDr.forEach(t),Aro=r(Ez,"to load the model weights."),Ez.forEach(t),Lro=i(Qs),jY=n(Qs,"P",{});var gDr=s(jY);Bro=r(gDr,"Examples:"),gDr.forEach(t),xro=i(Qs),m(x4.$$.fragment,Qs),Qs.forEach(t),kro=i(Ws),je=n(Ws,"DIV",{class:!0});var qt=s(je);m(k4.$$.fragment,qt),Rro=i(qt),DY=n(qt,"P",{});var hDr=s(DY);Sro=r(hDr,"Instantiate one of the base model classes of the library from a pretrained model."),hDr.forEach(t),Pro=i(qt),Va=n(qt,"P",{});var JC=s(Va);$ro=r(JC,"The model class to instantiate is selected based on the "),NY=n(JC,"CODE",{});var pDr=s(NY);Iro=r(pDr,"model_type"),pDr.forEach(t),jro=r(JC,` property of the config object (either
passed as an argument or loaded from `),qY=n(JC,"CODE",{});var _Dr=s(qY);Dro=r(_Dr,"pretrained_model_name_or_path"),_Dr.forEach(t),Nro=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OY=n(JC,"CODE",{});var uDr=s(OY);qro=r(uDr,"pretrained_model_name_or_path"),uDr.forEach(t),Oro=r(JC,":"),JC.forEach(t),Gro=i(qt),F=n(qt,"UL",{});var C=s(F);Dh=n(C,"LI",{});var qFe=s(Dh);GY=n(qFe,"STRONG",{});var bDr=s(GY);Xro=r(bDr,"albert"),bDr.forEach(t),Vro=r(qFe," \u2014 "),vR=n(qFe,"A",{href:!0});var vDr=s(vR);zro=r(vDr,"AlbertModel"),vDr.forEach(t),Wro=r(qFe," (ALBERT model)"),qFe.forEach(t),Qro=i(C),Nh=n(C,"LI",{});var OFe=s(Nh);XY=n(OFe,"STRONG",{});var TDr=s(XY);Hro=r(TDr,"bart"),TDr.forEach(t),Uro=r(OFe," \u2014 "),TR=n(OFe,"A",{href:!0});var FDr=s(TR);Jro=r(FDr,"BartModel"),FDr.forEach(t),Yro=r(OFe," (BART model)"),OFe.forEach(t),Kro=i(C),qh=n(C,"LI",{});var GFe=s(qh);VY=n(GFe,"STRONG",{});var CDr=s(VY);Zro=r(CDr,"beit"),CDr.forEach(t),eto=r(GFe," \u2014 "),FR=n(GFe,"A",{href:!0});var MDr=s(FR);oto=r(MDr,"BeitModel"),MDr.forEach(t),rto=r(GFe," (BEiT model)"),GFe.forEach(t),tto=i(C),Oh=n(C,"LI",{});var XFe=s(Oh);zY=n(XFe,"STRONG",{});var EDr=s(zY);ato=r(EDr,"bert"),EDr.forEach(t),nto=r(XFe," \u2014 "),CR=n(XFe,"A",{href:!0});var yDr=s(CR);sto=r(yDr,"BertModel"),yDr.forEach(t),lto=r(XFe," (BERT model)"),XFe.forEach(t),ito=i(C),Gh=n(C,"LI",{});var VFe=s(Gh);WY=n(VFe,"STRONG",{});var wDr=s(WY);dto=r(wDr,"bert-generation"),wDr.forEach(t),cto=r(VFe," \u2014 "),MR=n(VFe,"A",{href:!0});var ADr=s(MR);fto=r(ADr,"BertGenerationEncoder"),ADr.forEach(t),mto=r(VFe," (Bert Generation model)"),VFe.forEach(t),gto=i(C),Xh=n(C,"LI",{});var zFe=s(Xh);QY=n(zFe,"STRONG",{});var LDr=s(QY);hto=r(LDr,"big_bird"),LDr.forEach(t),pto=r(zFe," \u2014 "),ER=n(zFe,"A",{href:!0});var BDr=s(ER);_to=r(BDr,"BigBirdModel"),BDr.forEach(t),uto=r(zFe," (BigBird model)"),zFe.forEach(t),bto=i(C),Vh=n(C,"LI",{});var WFe=s(Vh);HY=n(WFe,"STRONG",{});var xDr=s(HY);vto=r(xDr,"bigbird_pegasus"),xDr.forEach(t),Tto=r(WFe," \u2014 "),yR=n(WFe,"A",{href:!0});var kDr=s(yR);Fto=r(kDr,"BigBirdPegasusModel"),kDr.forEach(t),Cto=r(WFe," (BigBirdPegasus model)"),WFe.forEach(t),Mto=i(C),zh=n(C,"LI",{});var QFe=s(zh);UY=n(QFe,"STRONG",{});var RDr=s(UY);Eto=r(RDr,"blenderbot"),RDr.forEach(t),yto=r(QFe," \u2014 "),wR=n(QFe,"A",{href:!0});var SDr=s(wR);wto=r(SDr,"BlenderbotModel"),SDr.forEach(t),Ato=r(QFe," (Blenderbot model)"),QFe.forEach(t),Lto=i(C),Wh=n(C,"LI",{});var HFe=s(Wh);JY=n(HFe,"STRONG",{});var PDr=s(JY);Bto=r(PDr,"blenderbot-small"),PDr.forEach(t),xto=r(HFe," \u2014 "),AR=n(HFe,"A",{href:!0});var $Dr=s(AR);kto=r($Dr,"BlenderbotSmallModel"),$Dr.forEach(t),Rto=r(HFe," (BlenderbotSmall model)"),HFe.forEach(t),Sto=i(C),Qh=n(C,"LI",{});var UFe=s(Qh);YY=n(UFe,"STRONG",{});var IDr=s(YY);Pto=r(IDr,"camembert"),IDr.forEach(t),$to=r(UFe," \u2014 "),LR=n(UFe,"A",{href:!0});var jDr=s(LR);Ito=r(jDr,"CamembertModel"),jDr.forEach(t),jto=r(UFe," (CamemBERT model)"),UFe.forEach(t),Dto=i(C),Hh=n(C,"LI",{});var JFe=s(Hh);KY=n(JFe,"STRONG",{});var DDr=s(KY);Nto=r(DDr,"canine"),DDr.forEach(t),qto=r(JFe," \u2014 "),BR=n(JFe,"A",{href:!0});var NDr=s(BR);Oto=r(NDr,"CanineModel"),NDr.forEach(t),Gto=r(JFe," (Canine model)"),JFe.forEach(t),Xto=i(C),Uh=n(C,"LI",{});var YFe=s(Uh);ZY=n(YFe,"STRONG",{});var qDr=s(ZY);Vto=r(qDr,"clip"),qDr.forEach(t),zto=r(YFe," \u2014 "),xR=n(YFe,"A",{href:!0});var ODr=s(xR);Wto=r(ODr,"CLIPModel"),ODr.forEach(t),Qto=r(YFe," (CLIP model)"),YFe.forEach(t),Hto=i(C),Jh=n(C,"LI",{});var KFe=s(Jh);eK=n(KFe,"STRONG",{});var GDr=s(eK);Uto=r(GDr,"convbert"),GDr.forEach(t),Jto=r(KFe," \u2014 "),kR=n(KFe,"A",{href:!0});var XDr=s(kR);Yto=r(XDr,"ConvBertModel"),XDr.forEach(t),Kto=r(KFe," (ConvBERT model)"),KFe.forEach(t),Zto=i(C),Yh=n(C,"LI",{});var ZFe=s(Yh);oK=n(ZFe,"STRONG",{});var VDr=s(oK);eao=r(VDr,"convnext"),VDr.forEach(t),oao=r(ZFe," \u2014 "),RR=n(ZFe,"A",{href:!0});var zDr=s(RR);rao=r(zDr,"ConvNextModel"),zDr.forEach(t),tao=r(ZFe," (ConvNext model)"),ZFe.forEach(t),aao=i(C),Kh=n(C,"LI",{});var e9e=s(Kh);rK=n(e9e,"STRONG",{});var WDr=s(rK);nao=r(WDr,"ctrl"),WDr.forEach(t),sao=r(e9e," \u2014 "),SR=n(e9e,"A",{href:!0});var QDr=s(SR);lao=r(QDr,"CTRLModel"),QDr.forEach(t),iao=r(e9e," (CTRL model)"),e9e.forEach(t),dao=i(C),Zh=n(C,"LI",{});var o9e=s(Zh);tK=n(o9e,"STRONG",{});var HDr=s(tK);cao=r(HDr,"data2vec-audio"),HDr.forEach(t),fao=r(o9e," \u2014 "),PR=n(o9e,"A",{href:!0});var UDr=s(PR);mao=r(UDr,"Data2VecAudioModel"),UDr.forEach(t),gao=r(o9e," (Data2VecAudio model)"),o9e.forEach(t),hao=i(C),ep=n(C,"LI",{});var r9e=s(ep);aK=n(r9e,"STRONG",{});var JDr=s(aK);pao=r(JDr,"data2vec-text"),JDr.forEach(t),_ao=r(r9e," \u2014 "),$R=n(r9e,"A",{href:!0});var YDr=s($R);uao=r(YDr,"Data2VecTextModel"),YDr.forEach(t),bao=r(r9e," (Data2VecText model)"),r9e.forEach(t),vao=i(C),op=n(C,"LI",{});var t9e=s(op);nK=n(t9e,"STRONG",{});var KDr=s(nK);Tao=r(KDr,"deberta"),KDr.forEach(t),Fao=r(t9e," \u2014 "),IR=n(t9e,"A",{href:!0});var ZDr=s(IR);Cao=r(ZDr,"DebertaModel"),ZDr.forEach(t),Mao=r(t9e," (DeBERTa model)"),t9e.forEach(t),Eao=i(C),rp=n(C,"LI",{});var a9e=s(rp);sK=n(a9e,"STRONG",{});var eNr=s(sK);yao=r(eNr,"deberta-v2"),eNr.forEach(t),wao=r(a9e," \u2014 "),jR=n(a9e,"A",{href:!0});var oNr=s(jR);Aao=r(oNr,"DebertaV2Model"),oNr.forEach(t),Lao=r(a9e," (DeBERTa-v2 model)"),a9e.forEach(t),Bao=i(C),tp=n(C,"LI",{});var n9e=s(tp);lK=n(n9e,"STRONG",{});var rNr=s(lK);xao=r(rNr,"deit"),rNr.forEach(t),kao=r(n9e," \u2014 "),DR=n(n9e,"A",{href:!0});var tNr=s(DR);Rao=r(tNr,"DeiTModel"),tNr.forEach(t),Sao=r(n9e," (DeiT model)"),n9e.forEach(t),Pao=i(C),ap=n(C,"LI",{});var s9e=s(ap);iK=n(s9e,"STRONG",{});var aNr=s(iK);$ao=r(aNr,"detr"),aNr.forEach(t),Iao=r(s9e," \u2014 "),NR=n(s9e,"A",{href:!0});var nNr=s(NR);jao=r(nNr,"DetrModel"),nNr.forEach(t),Dao=r(s9e," (DETR model)"),s9e.forEach(t),Nao=i(C),np=n(C,"LI",{});var l9e=s(np);dK=n(l9e,"STRONG",{});var sNr=s(dK);qao=r(sNr,"distilbert"),sNr.forEach(t),Oao=r(l9e," \u2014 "),qR=n(l9e,"A",{href:!0});var lNr=s(qR);Gao=r(lNr,"DistilBertModel"),lNr.forEach(t),Xao=r(l9e," (DistilBERT model)"),l9e.forEach(t),Vao=i(C),sp=n(C,"LI",{});var i9e=s(sp);cK=n(i9e,"STRONG",{});var iNr=s(cK);zao=r(iNr,"dpr"),iNr.forEach(t),Wao=r(i9e," \u2014 "),OR=n(i9e,"A",{href:!0});var dNr=s(OR);Qao=r(dNr,"DPRQuestionEncoder"),dNr.forEach(t),Hao=r(i9e," (DPR model)"),i9e.forEach(t),Uao=i(C),lp=n(C,"LI",{});var d9e=s(lp);fK=n(d9e,"STRONG",{});var cNr=s(fK);Jao=r(cNr,"electra"),cNr.forEach(t),Yao=r(d9e," \u2014 "),GR=n(d9e,"A",{href:!0});var fNr=s(GR);Kao=r(fNr,"ElectraModel"),fNr.forEach(t),Zao=r(d9e," (ELECTRA model)"),d9e.forEach(t),eno=i(C),ip=n(C,"LI",{});var c9e=s(ip);mK=n(c9e,"STRONG",{});var mNr=s(mK);ono=r(mNr,"flaubert"),mNr.forEach(t),rno=r(c9e," \u2014 "),XR=n(c9e,"A",{href:!0});var gNr=s(XR);tno=r(gNr,"FlaubertModel"),gNr.forEach(t),ano=r(c9e," (FlauBERT model)"),c9e.forEach(t),nno=i(C),dp=n(C,"LI",{});var f9e=s(dp);gK=n(f9e,"STRONG",{});var hNr=s(gK);sno=r(hNr,"fnet"),hNr.forEach(t),lno=r(f9e," \u2014 "),VR=n(f9e,"A",{href:!0});var pNr=s(VR);ino=r(pNr,"FNetModel"),pNr.forEach(t),dno=r(f9e," (FNet model)"),f9e.forEach(t),cno=i(C),cp=n(C,"LI",{});var m9e=s(cp);hK=n(m9e,"STRONG",{});var _Nr=s(hK);fno=r(_Nr,"fsmt"),_Nr.forEach(t),mno=r(m9e," \u2014 "),zR=n(m9e,"A",{href:!0});var uNr=s(zR);gno=r(uNr,"FSMTModel"),uNr.forEach(t),hno=r(m9e," (FairSeq Machine-Translation model)"),m9e.forEach(t),pno=i(C),Ns=n(C,"LI",{});var IL=s(Ns);pK=n(IL,"STRONG",{});var bNr=s(pK);_no=r(bNr,"funnel"),bNr.forEach(t),uno=r(IL," \u2014 "),WR=n(IL,"A",{href:!0});var vNr=s(WR);bno=r(vNr,"FunnelModel"),vNr.forEach(t),vno=r(IL," or "),QR=n(IL,"A",{href:!0});var TNr=s(QR);Tno=r(TNr,"FunnelBaseModel"),TNr.forEach(t),Fno=r(IL," (Funnel Transformer model)"),IL.forEach(t),Cno=i(C),fp=n(C,"LI",{});var g9e=s(fp);_K=n(g9e,"STRONG",{});var FNr=s(_K);Mno=r(FNr,"gpt2"),FNr.forEach(t),Eno=r(g9e," \u2014 "),HR=n(g9e,"A",{href:!0});var CNr=s(HR);yno=r(CNr,"GPT2Model"),CNr.forEach(t),wno=r(g9e," (OpenAI GPT-2 model)"),g9e.forEach(t),Ano=i(C),mp=n(C,"LI",{});var h9e=s(mp);uK=n(h9e,"STRONG",{});var MNr=s(uK);Lno=r(MNr,"gpt_neo"),MNr.forEach(t),Bno=r(h9e," \u2014 "),UR=n(h9e,"A",{href:!0});var ENr=s(UR);xno=r(ENr,"GPTNeoModel"),ENr.forEach(t),kno=r(h9e," (GPT Neo model)"),h9e.forEach(t),Rno=i(C),gp=n(C,"LI",{});var p9e=s(gp);bK=n(p9e,"STRONG",{});var yNr=s(bK);Sno=r(yNr,"gptj"),yNr.forEach(t),Pno=r(p9e," \u2014 "),JR=n(p9e,"A",{href:!0});var wNr=s(JR);$no=r(wNr,"GPTJModel"),wNr.forEach(t),Ino=r(p9e," (GPT-J model)"),p9e.forEach(t),jno=i(C),hp=n(C,"LI",{});var _9e=s(hp);vK=n(_9e,"STRONG",{});var ANr=s(vK);Dno=r(ANr,"hubert"),ANr.forEach(t),Nno=r(_9e," \u2014 "),YR=n(_9e,"A",{href:!0});var LNr=s(YR);qno=r(LNr,"HubertModel"),LNr.forEach(t),Ono=r(_9e," (Hubert model)"),_9e.forEach(t),Gno=i(C),pp=n(C,"LI",{});var u9e=s(pp);TK=n(u9e,"STRONG",{});var BNr=s(TK);Xno=r(BNr,"ibert"),BNr.forEach(t),Vno=r(u9e," \u2014 "),KR=n(u9e,"A",{href:!0});var xNr=s(KR);zno=r(xNr,"IBertModel"),xNr.forEach(t),Wno=r(u9e," (I-BERT model)"),u9e.forEach(t),Qno=i(C),_p=n(C,"LI",{});var b9e=s(_p);FK=n(b9e,"STRONG",{});var kNr=s(FK);Hno=r(kNr,"imagegpt"),kNr.forEach(t),Uno=r(b9e," \u2014 "),ZR=n(b9e,"A",{href:!0});var RNr=s(ZR);Jno=r(RNr,"ImageGPTModel"),RNr.forEach(t),Yno=r(b9e," (ImageGPT model)"),b9e.forEach(t),Kno=i(C),up=n(C,"LI",{});var v9e=s(up);CK=n(v9e,"STRONG",{});var SNr=s(CK);Zno=r(SNr,"layoutlm"),SNr.forEach(t),eso=r(v9e," \u2014 "),eS=n(v9e,"A",{href:!0});var PNr=s(eS);oso=r(PNr,"LayoutLMModel"),PNr.forEach(t),rso=r(v9e," (LayoutLM model)"),v9e.forEach(t),tso=i(C),bp=n(C,"LI",{});var T9e=s(bp);MK=n(T9e,"STRONG",{});var $Nr=s(MK);aso=r($Nr,"layoutlmv2"),$Nr.forEach(t),nso=r(T9e," \u2014 "),oS=n(T9e,"A",{href:!0});var INr=s(oS);sso=r(INr,"LayoutLMv2Model"),INr.forEach(t),lso=r(T9e," (LayoutLMv2 model)"),T9e.forEach(t),iso=i(C),vp=n(C,"LI",{});var F9e=s(vp);EK=n(F9e,"STRONG",{});var jNr=s(EK);dso=r(jNr,"led"),jNr.forEach(t),cso=r(F9e," \u2014 "),rS=n(F9e,"A",{href:!0});var DNr=s(rS);fso=r(DNr,"LEDModel"),DNr.forEach(t),mso=r(F9e," (LED model)"),F9e.forEach(t),gso=i(C),Tp=n(C,"LI",{});var C9e=s(Tp);yK=n(C9e,"STRONG",{});var NNr=s(yK);hso=r(NNr,"longformer"),NNr.forEach(t),pso=r(C9e," \u2014 "),tS=n(C9e,"A",{href:!0});var qNr=s(tS);_so=r(qNr,"LongformerModel"),qNr.forEach(t),uso=r(C9e," (Longformer model)"),C9e.forEach(t),bso=i(C),Fp=n(C,"LI",{});var M9e=s(Fp);wK=n(M9e,"STRONG",{});var ONr=s(wK);vso=r(ONr,"luke"),ONr.forEach(t),Tso=r(M9e," \u2014 "),aS=n(M9e,"A",{href:!0});var GNr=s(aS);Fso=r(GNr,"LukeModel"),GNr.forEach(t),Cso=r(M9e," (LUKE model)"),M9e.forEach(t),Mso=i(C),Cp=n(C,"LI",{});var E9e=s(Cp);AK=n(E9e,"STRONG",{});var XNr=s(AK);Eso=r(XNr,"lxmert"),XNr.forEach(t),yso=r(E9e," \u2014 "),nS=n(E9e,"A",{href:!0});var VNr=s(nS);wso=r(VNr,"LxmertModel"),VNr.forEach(t),Aso=r(E9e," (LXMERT model)"),E9e.forEach(t),Lso=i(C),Mp=n(C,"LI",{});var y9e=s(Mp);LK=n(y9e,"STRONG",{});var zNr=s(LK);Bso=r(zNr,"m2m_100"),zNr.forEach(t),xso=r(y9e," \u2014 "),sS=n(y9e,"A",{href:!0});var WNr=s(sS);kso=r(WNr,"M2M100Model"),WNr.forEach(t),Rso=r(y9e," (M2M100 model)"),y9e.forEach(t),Sso=i(C),Ep=n(C,"LI",{});var w9e=s(Ep);BK=n(w9e,"STRONG",{});var QNr=s(BK);Pso=r(QNr,"marian"),QNr.forEach(t),$so=r(w9e," \u2014 "),lS=n(w9e,"A",{href:!0});var HNr=s(lS);Iso=r(HNr,"MarianModel"),HNr.forEach(t),jso=r(w9e," (Marian model)"),w9e.forEach(t),Dso=i(C),yp=n(C,"LI",{});var A9e=s(yp);xK=n(A9e,"STRONG",{});var UNr=s(xK);Nso=r(UNr,"maskformer"),UNr.forEach(t),qso=r(A9e," \u2014 "),iS=n(A9e,"A",{href:!0});var JNr=s(iS);Oso=r(JNr,"MaskFormerModel"),JNr.forEach(t),Gso=r(A9e," (MaskFormer model)"),A9e.forEach(t),Xso=i(C),wp=n(C,"LI",{});var L9e=s(wp);kK=n(L9e,"STRONG",{});var YNr=s(kK);Vso=r(YNr,"mbart"),YNr.forEach(t),zso=r(L9e," \u2014 "),dS=n(L9e,"A",{href:!0});var KNr=s(dS);Wso=r(KNr,"MBartModel"),KNr.forEach(t),Qso=r(L9e," (mBART model)"),L9e.forEach(t),Hso=i(C),Ap=n(C,"LI",{});var B9e=s(Ap);RK=n(B9e,"STRONG",{});var ZNr=s(RK);Uso=r(ZNr,"megatron-bert"),ZNr.forEach(t),Jso=r(B9e," \u2014 "),cS=n(B9e,"A",{href:!0});var eqr=s(cS);Yso=r(eqr,"MegatronBertModel"),eqr.forEach(t),Kso=r(B9e," (MegatronBert model)"),B9e.forEach(t),Zso=i(C),Lp=n(C,"LI",{});var x9e=s(Lp);SK=n(x9e,"STRONG",{});var oqr=s(SK);elo=r(oqr,"mobilebert"),oqr.forEach(t),olo=r(x9e," \u2014 "),fS=n(x9e,"A",{href:!0});var rqr=s(fS);rlo=r(rqr,"MobileBertModel"),rqr.forEach(t),tlo=r(x9e," (MobileBERT model)"),x9e.forEach(t),alo=i(C),Bp=n(C,"LI",{});var k9e=s(Bp);PK=n(k9e,"STRONG",{});var tqr=s(PK);nlo=r(tqr,"mpnet"),tqr.forEach(t),slo=r(k9e," \u2014 "),mS=n(k9e,"A",{href:!0});var aqr=s(mS);llo=r(aqr,"MPNetModel"),aqr.forEach(t),ilo=r(k9e," (MPNet model)"),k9e.forEach(t),dlo=i(C),xp=n(C,"LI",{});var R9e=s(xp);$K=n(R9e,"STRONG",{});var nqr=s($K);clo=r(nqr,"mt5"),nqr.forEach(t),flo=r(R9e," \u2014 "),gS=n(R9e,"A",{href:!0});var sqr=s(gS);mlo=r(sqr,"MT5Model"),sqr.forEach(t),glo=r(R9e," (mT5 model)"),R9e.forEach(t),hlo=i(C),kp=n(C,"LI",{});var S9e=s(kp);IK=n(S9e,"STRONG",{});var lqr=s(IK);plo=r(lqr,"nystromformer"),lqr.forEach(t),_lo=r(S9e," \u2014 "),hS=n(S9e,"A",{href:!0});var iqr=s(hS);ulo=r(iqr,"NystromformerModel"),iqr.forEach(t),blo=r(S9e," (Nystromformer model)"),S9e.forEach(t),vlo=i(C),Rp=n(C,"LI",{});var P9e=s(Rp);jK=n(P9e,"STRONG",{});var dqr=s(jK);Tlo=r(dqr,"openai-gpt"),dqr.forEach(t),Flo=r(P9e," \u2014 "),pS=n(P9e,"A",{href:!0});var cqr=s(pS);Clo=r(cqr,"OpenAIGPTModel"),cqr.forEach(t),Mlo=r(P9e," (OpenAI GPT model)"),P9e.forEach(t),Elo=i(C),Sp=n(C,"LI",{});var $9e=s(Sp);DK=n($9e,"STRONG",{});var fqr=s(DK);ylo=r(fqr,"pegasus"),fqr.forEach(t),wlo=r($9e," \u2014 "),_S=n($9e,"A",{href:!0});var mqr=s(_S);Alo=r(mqr,"PegasusModel"),mqr.forEach(t),Llo=r($9e," (Pegasus model)"),$9e.forEach(t),Blo=i(C),Pp=n(C,"LI",{});var I9e=s(Pp);NK=n(I9e,"STRONG",{});var gqr=s(NK);xlo=r(gqr,"perceiver"),gqr.forEach(t),klo=r(I9e," \u2014 "),uS=n(I9e,"A",{href:!0});var hqr=s(uS);Rlo=r(hqr,"PerceiverModel"),hqr.forEach(t),Slo=r(I9e," (Perceiver model)"),I9e.forEach(t),Plo=i(C),$p=n(C,"LI",{});var j9e=s($p);qK=n(j9e,"STRONG",{});var pqr=s(qK);$lo=r(pqr,"plbart"),pqr.forEach(t),Ilo=r(j9e," \u2014 "),bS=n(j9e,"A",{href:!0});var _qr=s(bS);jlo=r(_qr,"PLBartModel"),_qr.forEach(t),Dlo=r(j9e," (PLBart model)"),j9e.forEach(t),Nlo=i(C),Ip=n(C,"LI",{});var D9e=s(Ip);OK=n(D9e,"STRONG",{});var uqr=s(OK);qlo=r(uqr,"poolformer"),uqr.forEach(t),Olo=r(D9e," \u2014 "),vS=n(D9e,"A",{href:!0});var bqr=s(vS);Glo=r(bqr,"PoolFormerModel"),bqr.forEach(t),Xlo=r(D9e," (PoolFormer model)"),D9e.forEach(t),Vlo=i(C),jp=n(C,"LI",{});var N9e=s(jp);GK=n(N9e,"STRONG",{});var vqr=s(GK);zlo=r(vqr,"prophetnet"),vqr.forEach(t),Wlo=r(N9e," \u2014 "),TS=n(N9e,"A",{href:!0});var Tqr=s(TS);Qlo=r(Tqr,"ProphetNetModel"),Tqr.forEach(t),Hlo=r(N9e," (ProphetNet model)"),N9e.forEach(t),Ulo=i(C),Dp=n(C,"LI",{});var q9e=s(Dp);XK=n(q9e,"STRONG",{});var Fqr=s(XK);Jlo=r(Fqr,"qdqbert"),Fqr.forEach(t),Ylo=r(q9e," \u2014 "),FS=n(q9e,"A",{href:!0});var Cqr=s(FS);Klo=r(Cqr,"QDQBertModel"),Cqr.forEach(t),Zlo=r(q9e," (QDQBert model)"),q9e.forEach(t),eio=i(C),Np=n(C,"LI",{});var O9e=s(Np);VK=n(O9e,"STRONG",{});var Mqr=s(VK);oio=r(Mqr,"reformer"),Mqr.forEach(t),rio=r(O9e," \u2014 "),CS=n(O9e,"A",{href:!0});var Eqr=s(CS);tio=r(Eqr,"ReformerModel"),Eqr.forEach(t),aio=r(O9e," (Reformer model)"),O9e.forEach(t),nio=i(C),qp=n(C,"LI",{});var G9e=s(qp);zK=n(G9e,"STRONG",{});var yqr=s(zK);sio=r(yqr,"rembert"),yqr.forEach(t),lio=r(G9e," \u2014 "),MS=n(G9e,"A",{href:!0});var wqr=s(MS);iio=r(wqr,"RemBertModel"),wqr.forEach(t),dio=r(G9e," (RemBERT model)"),G9e.forEach(t),cio=i(C),Op=n(C,"LI",{});var X9e=s(Op);WK=n(X9e,"STRONG",{});var Aqr=s(WK);fio=r(Aqr,"retribert"),Aqr.forEach(t),mio=r(X9e," \u2014 "),ES=n(X9e,"A",{href:!0});var Lqr=s(ES);gio=r(Lqr,"RetriBertModel"),Lqr.forEach(t),hio=r(X9e," (RetriBERT model)"),X9e.forEach(t),pio=i(C),Gp=n(C,"LI",{});var V9e=s(Gp);QK=n(V9e,"STRONG",{});var Bqr=s(QK);_io=r(Bqr,"roberta"),Bqr.forEach(t),uio=r(V9e," \u2014 "),yS=n(V9e,"A",{href:!0});var xqr=s(yS);bio=r(xqr,"RobertaModel"),xqr.forEach(t),vio=r(V9e," (RoBERTa model)"),V9e.forEach(t),Tio=i(C),Xp=n(C,"LI",{});var z9e=s(Xp);HK=n(z9e,"STRONG",{});var kqr=s(HK);Fio=r(kqr,"roformer"),kqr.forEach(t),Cio=r(z9e," \u2014 "),wS=n(z9e,"A",{href:!0});var Rqr=s(wS);Mio=r(Rqr,"RoFormerModel"),Rqr.forEach(t),Eio=r(z9e," (RoFormer model)"),z9e.forEach(t),yio=i(C),Vp=n(C,"LI",{});var W9e=s(Vp);UK=n(W9e,"STRONG",{});var Sqr=s(UK);wio=r(Sqr,"segformer"),Sqr.forEach(t),Aio=r(W9e," \u2014 "),AS=n(W9e,"A",{href:!0});var Pqr=s(AS);Lio=r(Pqr,"SegformerModel"),Pqr.forEach(t),Bio=r(W9e," (SegFormer model)"),W9e.forEach(t),xio=i(C),zp=n(C,"LI",{});var Q9e=s(zp);JK=n(Q9e,"STRONG",{});var $qr=s(JK);kio=r($qr,"sew"),$qr.forEach(t),Rio=r(Q9e," \u2014 "),LS=n(Q9e,"A",{href:!0});var Iqr=s(LS);Sio=r(Iqr,"SEWModel"),Iqr.forEach(t),Pio=r(Q9e," (SEW model)"),Q9e.forEach(t),$io=i(C),Wp=n(C,"LI",{});var H9e=s(Wp);YK=n(H9e,"STRONG",{});var jqr=s(YK);Iio=r(jqr,"sew-d"),jqr.forEach(t),jio=r(H9e," \u2014 "),BS=n(H9e,"A",{href:!0});var Dqr=s(BS);Dio=r(Dqr,"SEWDModel"),Dqr.forEach(t),Nio=r(H9e," (SEW-D model)"),H9e.forEach(t),qio=i(C),Qp=n(C,"LI",{});var U9e=s(Qp);KK=n(U9e,"STRONG",{});var Nqr=s(KK);Oio=r(Nqr,"speech_to_text"),Nqr.forEach(t),Gio=r(U9e," \u2014 "),xS=n(U9e,"A",{href:!0});var qqr=s(xS);Xio=r(qqr,"Speech2TextModel"),qqr.forEach(t),Vio=r(U9e," (Speech2Text model)"),U9e.forEach(t),zio=i(C),Hp=n(C,"LI",{});var J9e=s(Hp);ZK=n(J9e,"STRONG",{});var Oqr=s(ZK);Wio=r(Oqr,"splinter"),Oqr.forEach(t),Qio=r(J9e," \u2014 "),kS=n(J9e,"A",{href:!0});var Gqr=s(kS);Hio=r(Gqr,"SplinterModel"),Gqr.forEach(t),Uio=r(J9e," (Splinter model)"),J9e.forEach(t),Jio=i(C),Up=n(C,"LI",{});var Y9e=s(Up);eZ=n(Y9e,"STRONG",{});var Xqr=s(eZ);Yio=r(Xqr,"squeezebert"),Xqr.forEach(t),Kio=r(Y9e," \u2014 "),RS=n(Y9e,"A",{href:!0});var Vqr=s(RS);Zio=r(Vqr,"SqueezeBertModel"),Vqr.forEach(t),edo=r(Y9e," (SqueezeBERT model)"),Y9e.forEach(t),odo=i(C),Jp=n(C,"LI",{});var K9e=s(Jp);oZ=n(K9e,"STRONG",{});var zqr=s(oZ);rdo=r(zqr,"swin"),zqr.forEach(t),tdo=r(K9e," \u2014 "),SS=n(K9e,"A",{href:!0});var Wqr=s(SS);ado=r(Wqr,"SwinModel"),Wqr.forEach(t),ndo=r(K9e," (Swin model)"),K9e.forEach(t),sdo=i(C),Yp=n(C,"LI",{});var Z9e=s(Yp);rZ=n(Z9e,"STRONG",{});var Qqr=s(rZ);ldo=r(Qqr,"t5"),Qqr.forEach(t),ido=r(Z9e," \u2014 "),PS=n(Z9e,"A",{href:!0});var Hqr=s(PS);ddo=r(Hqr,"T5Model"),Hqr.forEach(t),cdo=r(Z9e," (T5 model)"),Z9e.forEach(t),fdo=i(C),Kp=n(C,"LI",{});var eCe=s(Kp);tZ=n(eCe,"STRONG",{});var Uqr=s(tZ);mdo=r(Uqr,"tapas"),Uqr.forEach(t),gdo=r(eCe," \u2014 "),$S=n(eCe,"A",{href:!0});var Jqr=s($S);hdo=r(Jqr,"TapasModel"),Jqr.forEach(t),pdo=r(eCe," (TAPAS model)"),eCe.forEach(t),_do=i(C),Zp=n(C,"LI",{});var oCe=s(Zp);aZ=n(oCe,"STRONG",{});var Yqr=s(aZ);udo=r(Yqr,"transfo-xl"),Yqr.forEach(t),bdo=r(oCe," \u2014 "),IS=n(oCe,"A",{href:!0});var Kqr=s(IS);vdo=r(Kqr,"TransfoXLModel"),Kqr.forEach(t),Tdo=r(oCe," (Transformer-XL model)"),oCe.forEach(t),Fdo=i(C),e_=n(C,"LI",{});var rCe=s(e_);nZ=n(rCe,"STRONG",{});var Zqr=s(nZ);Cdo=r(Zqr,"unispeech"),Zqr.forEach(t),Mdo=r(rCe," \u2014 "),jS=n(rCe,"A",{href:!0});var eOr=s(jS);Edo=r(eOr,"UniSpeechModel"),eOr.forEach(t),ydo=r(rCe," (UniSpeech model)"),rCe.forEach(t),wdo=i(C),o_=n(C,"LI",{});var tCe=s(o_);sZ=n(tCe,"STRONG",{});var oOr=s(sZ);Ado=r(oOr,"unispeech-sat"),oOr.forEach(t),Ldo=r(tCe," \u2014 "),DS=n(tCe,"A",{href:!0});var rOr=s(DS);Bdo=r(rOr,"UniSpeechSatModel"),rOr.forEach(t),xdo=r(tCe," (UniSpeechSat model)"),tCe.forEach(t),kdo=i(C),r_=n(C,"LI",{});var aCe=s(r_);lZ=n(aCe,"STRONG",{});var tOr=s(lZ);Rdo=r(tOr,"vilt"),tOr.forEach(t),Sdo=r(aCe," \u2014 "),NS=n(aCe,"A",{href:!0});var aOr=s(NS);Pdo=r(aOr,"ViltModel"),aOr.forEach(t),$do=r(aCe," (ViLT model)"),aCe.forEach(t),Ido=i(C),t_=n(C,"LI",{});var nCe=s(t_);iZ=n(nCe,"STRONG",{});var nOr=s(iZ);jdo=r(nOr,"vision-text-dual-encoder"),nOr.forEach(t),Ddo=r(nCe," \u2014 "),qS=n(nCe,"A",{href:!0});var sOr=s(qS);Ndo=r(sOr,"VisionTextDualEncoderModel"),sOr.forEach(t),qdo=r(nCe," (VisionTextDualEncoder model)"),nCe.forEach(t),Odo=i(C),a_=n(C,"LI",{});var sCe=s(a_);dZ=n(sCe,"STRONG",{});var lOr=s(dZ);Gdo=r(lOr,"visual_bert"),lOr.forEach(t),Xdo=r(sCe," \u2014 "),OS=n(sCe,"A",{href:!0});var iOr=s(OS);Vdo=r(iOr,"VisualBertModel"),iOr.forEach(t),zdo=r(sCe," (VisualBert model)"),sCe.forEach(t),Wdo=i(C),n_=n(C,"LI",{});var lCe=s(n_);cZ=n(lCe,"STRONG",{});var dOr=s(cZ);Qdo=r(dOr,"vit"),dOr.forEach(t),Hdo=r(lCe," \u2014 "),GS=n(lCe,"A",{href:!0});var cOr=s(GS);Udo=r(cOr,"ViTModel"),cOr.forEach(t),Jdo=r(lCe," (ViT model)"),lCe.forEach(t),Ydo=i(C),s_=n(C,"LI",{});var iCe=s(s_);fZ=n(iCe,"STRONG",{});var fOr=s(fZ);Kdo=r(fOr,"vit_mae"),fOr.forEach(t),Zdo=r(iCe," \u2014 "),XS=n(iCe,"A",{href:!0});var mOr=s(XS);eco=r(mOr,"ViTMAEModel"),mOr.forEach(t),oco=r(iCe," (ViTMAE model)"),iCe.forEach(t),rco=i(C),l_=n(C,"LI",{});var dCe=s(l_);mZ=n(dCe,"STRONG",{});var gOr=s(mZ);tco=r(gOr,"wav2vec2"),gOr.forEach(t),aco=r(dCe," \u2014 "),VS=n(dCe,"A",{href:!0});var hOr=s(VS);nco=r(hOr,"Wav2Vec2Model"),hOr.forEach(t),sco=r(dCe," (Wav2Vec2 model)"),dCe.forEach(t),lco=i(C),i_=n(C,"LI",{});var cCe=s(i_);gZ=n(cCe,"STRONG",{});var pOr=s(gZ);ico=r(pOr,"wavlm"),pOr.forEach(t),dco=r(cCe," \u2014 "),zS=n(cCe,"A",{href:!0});var _Or=s(zS);cco=r(_Or,"WavLMModel"),_Or.forEach(t),fco=r(cCe," (WavLM model)"),cCe.forEach(t),mco=i(C),d_=n(C,"LI",{});var fCe=s(d_);hZ=n(fCe,"STRONG",{});var uOr=s(hZ);gco=r(uOr,"xglm"),uOr.forEach(t),hco=r(fCe," \u2014 "),WS=n(fCe,"A",{href:!0});var bOr=s(WS);pco=r(bOr,"XGLMModel"),bOr.forEach(t),_co=r(fCe," (XGLM model)"),fCe.forEach(t),uco=i(C),c_=n(C,"LI",{});var mCe=s(c_);pZ=n(mCe,"STRONG",{});var vOr=s(pZ);bco=r(vOr,"xlm"),vOr.forEach(t),vco=r(mCe," \u2014 "),QS=n(mCe,"A",{href:!0});var TOr=s(QS);Tco=r(TOr,"XLMModel"),TOr.forEach(t),Fco=r(mCe," (XLM model)"),mCe.forEach(t),Cco=i(C),f_=n(C,"LI",{});var gCe=s(f_);_Z=n(gCe,"STRONG",{});var FOr=s(_Z);Mco=r(FOr,"xlm-prophetnet"),FOr.forEach(t),Eco=r(gCe," \u2014 "),HS=n(gCe,"A",{href:!0});var COr=s(HS);yco=r(COr,"XLMProphetNetModel"),COr.forEach(t),wco=r(gCe," (XLMProphetNet model)"),gCe.forEach(t),Aco=i(C),m_=n(C,"LI",{});var hCe=s(m_);uZ=n(hCe,"STRONG",{});var MOr=s(uZ);Lco=r(MOr,"xlm-roberta"),MOr.forEach(t),Bco=r(hCe," \u2014 "),US=n(hCe,"A",{href:!0});var EOr=s(US);xco=r(EOr,"XLMRobertaModel"),EOr.forEach(t),kco=r(hCe," (XLM-RoBERTa model)"),hCe.forEach(t),Rco=i(C),g_=n(C,"LI",{});var pCe=s(g_);bZ=n(pCe,"STRONG",{});var yOr=s(bZ);Sco=r(yOr,"xlm-roberta-xl"),yOr.forEach(t),Pco=r(pCe," \u2014 "),JS=n(pCe,"A",{href:!0});var wOr=s(JS);$co=r(wOr,"XLMRobertaXLModel"),wOr.forEach(t),Ico=r(pCe," (XLM-RoBERTa-XL model)"),pCe.forEach(t),jco=i(C),h_=n(C,"LI",{});var _Ce=s(h_);vZ=n(_Ce,"STRONG",{});var AOr=s(vZ);Dco=r(AOr,"xlnet"),AOr.forEach(t),Nco=r(_Ce," \u2014 "),YS=n(_Ce,"A",{href:!0});var LOr=s(YS);qco=r(LOr,"XLNetModel"),LOr.forEach(t),Oco=r(_Ce," (XLNet model)"),_Ce.forEach(t),Gco=i(C),p_=n(C,"LI",{});var uCe=s(p_);TZ=n(uCe,"STRONG",{});var BOr=s(TZ);Xco=r(BOr,"yoso"),BOr.forEach(t),Vco=r(uCe," \u2014 "),KS=n(uCe,"A",{href:!0});var xOr=s(KS);zco=r(xOr,"YosoModel"),xOr.forEach(t),Wco=r(uCe," (YOSO model)"),uCe.forEach(t),C.forEach(t),Qco=i(qt),__=n(qt,"P",{});var bCe=s(__);Hco=r(bCe,"The model is set in evaluation mode by default using "),FZ=n(bCe,"CODE",{});var kOr=s(FZ);Uco=r(kOr,"model.eval()"),kOr.forEach(t),Jco=r(bCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CZ=n(bCe,"CODE",{});var ROr=s(CZ);Yco=r(ROr,"model.train()"),ROr.forEach(t),bCe.forEach(t),Kco=i(qt),MZ=n(qt,"P",{});var SOr=s(MZ);Zco=r(SOr,"Examples:"),SOr.forEach(t),efo=i(qt),m(R4.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),uxe=i(d),ed=n(d,"H2",{class:!0});var wRe=s(ed);u_=n(wRe,"A",{id:!0,class:!0,href:!0});var POr=s(u_);EZ=n(POr,"SPAN",{});var $Or=s(EZ);m(S4.$$.fragment,$Or),$Or.forEach(t),POr.forEach(t),ofo=i(wRe),yZ=n(wRe,"SPAN",{});var IOr=s(yZ);rfo=r(IOr,"AutoModelForPreTraining"),IOr.forEach(t),wRe.forEach(t),bxe=i(d),Yo=n(d,"DIV",{class:!0});var Hs=s(Yo);m(P4.$$.fragment,Hs),tfo=i(Hs),od=n(Hs,"P",{});var yz=s(od);afo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wZ=n(yz,"CODE",{});var jOr=s(wZ);nfo=r(jOr,"from_pretrained()"),jOr.forEach(t),sfo=r(yz,"class method or the "),AZ=n(yz,"CODE",{});var DOr=s(AZ);lfo=r(DOr,"from_config()"),DOr.forEach(t),ifo=r(yz,`class
method.`),yz.forEach(t),dfo=i(Hs),$4=n(Hs,"P",{});var ARe=s($4);cfo=r(ARe,"This class cannot be instantiated directly using "),LZ=n(ARe,"CODE",{});var NOr=s(LZ);ffo=r(NOr,"__init__()"),NOr.forEach(t),mfo=r(ARe," (throws an error)."),ARe.forEach(t),gfo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(I4.$$.fragment,Us),hfo=i(Us),BZ=n(Us,"P",{});var qOr=s(BZ);pfo=r(qOr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qOr.forEach(t),_fo=i(Us),rd=n(Us,"P",{});var wz=s(rd);ufo=r(wz,`Note:
Loading a model from its configuration file does `),xZ=n(wz,"STRONG",{});var OOr=s(xZ);bfo=r(OOr,"not"),OOr.forEach(t),vfo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=n(wz,"CODE",{});var GOr=s(kZ);Tfo=r(GOr,"from_pretrained()"),GOr.forEach(t),Ffo=r(wz,"to load the model weights."),wz.forEach(t),Cfo=i(Us),RZ=n(Us,"P",{});var XOr=s(RZ);Mfo=r(XOr,"Examples:"),XOr.forEach(t),Efo=i(Us),m(j4.$$.fragment,Us),Us.forEach(t),yfo=i(Hs),De=n(Hs,"DIV",{class:!0});var Ot=s(De);m(D4.$$.fragment,Ot),wfo=i(Ot),SZ=n(Ot,"P",{});var VOr=s(SZ);Afo=r(VOr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VOr.forEach(t),Lfo=i(Ot),za=n(Ot,"P",{});var YC=s(za);Bfo=r(YC,"The model class to instantiate is selected based on the "),PZ=n(YC,"CODE",{});var zOr=s(PZ);xfo=r(zOr,"model_type"),zOr.forEach(t),kfo=r(YC,` property of the config object (either
passed as an argument or loaded from `),$Z=n(YC,"CODE",{});var WOr=s($Z);Rfo=r(WOr,"pretrained_model_name_or_path"),WOr.forEach(t),Sfo=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IZ=n(YC,"CODE",{});var QOr=s(IZ);Pfo=r(QOr,"pretrained_model_name_or_path"),QOr.forEach(t),$fo=r(YC,":"),YC.forEach(t),Ifo=i(Ot),k=n(Ot,"UL",{});var S=s(k);b_=n(S,"LI",{});var vCe=s(b_);jZ=n(vCe,"STRONG",{});var HOr=s(jZ);jfo=r(HOr,"albert"),HOr.forEach(t),Dfo=r(vCe," \u2014 "),ZS=n(vCe,"A",{href:!0});var UOr=s(ZS);Nfo=r(UOr,"AlbertForPreTraining"),UOr.forEach(t),qfo=r(vCe," (ALBERT model)"),vCe.forEach(t),Ofo=i(S),v_=n(S,"LI",{});var TCe=s(v_);DZ=n(TCe,"STRONG",{});var JOr=s(DZ);Gfo=r(JOr,"bart"),JOr.forEach(t),Xfo=r(TCe," \u2014 "),eP=n(TCe,"A",{href:!0});var YOr=s(eP);Vfo=r(YOr,"BartForConditionalGeneration"),YOr.forEach(t),zfo=r(TCe," (BART model)"),TCe.forEach(t),Wfo=i(S),T_=n(S,"LI",{});var FCe=s(T_);NZ=n(FCe,"STRONG",{});var KOr=s(NZ);Qfo=r(KOr,"bert"),KOr.forEach(t),Hfo=r(FCe," \u2014 "),oP=n(FCe,"A",{href:!0});var ZOr=s(oP);Ufo=r(ZOr,"BertForPreTraining"),ZOr.forEach(t),Jfo=r(FCe," (BERT model)"),FCe.forEach(t),Yfo=i(S),F_=n(S,"LI",{});var CCe=s(F_);qZ=n(CCe,"STRONG",{});var eGr=s(qZ);Kfo=r(eGr,"big_bird"),eGr.forEach(t),Zfo=r(CCe," \u2014 "),rP=n(CCe,"A",{href:!0});var oGr=s(rP);emo=r(oGr,"BigBirdForPreTraining"),oGr.forEach(t),omo=r(CCe," (BigBird model)"),CCe.forEach(t),rmo=i(S),C_=n(S,"LI",{});var MCe=s(C_);OZ=n(MCe,"STRONG",{});var rGr=s(OZ);tmo=r(rGr,"camembert"),rGr.forEach(t),amo=r(MCe," \u2014 "),tP=n(MCe,"A",{href:!0});var tGr=s(tP);nmo=r(tGr,"CamembertForMaskedLM"),tGr.forEach(t),smo=r(MCe," (CamemBERT model)"),MCe.forEach(t),lmo=i(S),M_=n(S,"LI",{});var ECe=s(M_);GZ=n(ECe,"STRONG",{});var aGr=s(GZ);imo=r(aGr,"ctrl"),aGr.forEach(t),dmo=r(ECe," \u2014 "),aP=n(ECe,"A",{href:!0});var nGr=s(aP);cmo=r(nGr,"CTRLLMHeadModel"),nGr.forEach(t),fmo=r(ECe," (CTRL model)"),ECe.forEach(t),mmo=i(S),E_=n(S,"LI",{});var yCe=s(E_);XZ=n(yCe,"STRONG",{});var sGr=s(XZ);gmo=r(sGr,"data2vec-text"),sGr.forEach(t),hmo=r(yCe," \u2014 "),nP=n(yCe,"A",{href:!0});var lGr=s(nP);pmo=r(lGr,"Data2VecTextForMaskedLM"),lGr.forEach(t),_mo=r(yCe," (Data2VecText model)"),yCe.forEach(t),umo=i(S),y_=n(S,"LI",{});var wCe=s(y_);VZ=n(wCe,"STRONG",{});var iGr=s(VZ);bmo=r(iGr,"deberta"),iGr.forEach(t),vmo=r(wCe," \u2014 "),sP=n(wCe,"A",{href:!0});var dGr=s(sP);Tmo=r(dGr,"DebertaForMaskedLM"),dGr.forEach(t),Fmo=r(wCe," (DeBERTa model)"),wCe.forEach(t),Cmo=i(S),w_=n(S,"LI",{});var ACe=s(w_);zZ=n(ACe,"STRONG",{});var cGr=s(zZ);Mmo=r(cGr,"deberta-v2"),cGr.forEach(t),Emo=r(ACe," \u2014 "),lP=n(ACe,"A",{href:!0});var fGr=s(lP);ymo=r(fGr,"DebertaV2ForMaskedLM"),fGr.forEach(t),wmo=r(ACe," (DeBERTa-v2 model)"),ACe.forEach(t),Amo=i(S),A_=n(S,"LI",{});var LCe=s(A_);WZ=n(LCe,"STRONG",{});var mGr=s(WZ);Lmo=r(mGr,"distilbert"),mGr.forEach(t),Bmo=r(LCe," \u2014 "),iP=n(LCe,"A",{href:!0});var gGr=s(iP);xmo=r(gGr,"DistilBertForMaskedLM"),gGr.forEach(t),kmo=r(LCe," (DistilBERT model)"),LCe.forEach(t),Rmo=i(S),L_=n(S,"LI",{});var BCe=s(L_);QZ=n(BCe,"STRONG",{});var hGr=s(QZ);Smo=r(hGr,"electra"),hGr.forEach(t),Pmo=r(BCe," \u2014 "),dP=n(BCe,"A",{href:!0});var pGr=s(dP);$mo=r(pGr,"ElectraForPreTraining"),pGr.forEach(t),Imo=r(BCe," (ELECTRA model)"),BCe.forEach(t),jmo=i(S),B_=n(S,"LI",{});var xCe=s(B_);HZ=n(xCe,"STRONG",{});var _Gr=s(HZ);Dmo=r(_Gr,"flaubert"),_Gr.forEach(t),Nmo=r(xCe," \u2014 "),cP=n(xCe,"A",{href:!0});var uGr=s(cP);qmo=r(uGr,"FlaubertWithLMHeadModel"),uGr.forEach(t),Omo=r(xCe," (FlauBERT model)"),xCe.forEach(t),Gmo=i(S),x_=n(S,"LI",{});var kCe=s(x_);UZ=n(kCe,"STRONG",{});var bGr=s(UZ);Xmo=r(bGr,"fnet"),bGr.forEach(t),Vmo=r(kCe," \u2014 "),fP=n(kCe,"A",{href:!0});var vGr=s(fP);zmo=r(vGr,"FNetForPreTraining"),vGr.forEach(t),Wmo=r(kCe," (FNet model)"),kCe.forEach(t),Qmo=i(S),k_=n(S,"LI",{});var RCe=s(k_);JZ=n(RCe,"STRONG",{});var TGr=s(JZ);Hmo=r(TGr,"fsmt"),TGr.forEach(t),Umo=r(RCe," \u2014 "),mP=n(RCe,"A",{href:!0});var FGr=s(mP);Jmo=r(FGr,"FSMTForConditionalGeneration"),FGr.forEach(t),Ymo=r(RCe," (FairSeq Machine-Translation model)"),RCe.forEach(t),Kmo=i(S),R_=n(S,"LI",{});var SCe=s(R_);YZ=n(SCe,"STRONG",{});var CGr=s(YZ);Zmo=r(CGr,"funnel"),CGr.forEach(t),ego=r(SCe," \u2014 "),gP=n(SCe,"A",{href:!0});var MGr=s(gP);ogo=r(MGr,"FunnelForPreTraining"),MGr.forEach(t),rgo=r(SCe," (Funnel Transformer model)"),SCe.forEach(t),tgo=i(S),S_=n(S,"LI",{});var PCe=s(S_);KZ=n(PCe,"STRONG",{});var EGr=s(KZ);ago=r(EGr,"gpt2"),EGr.forEach(t),ngo=r(PCe," \u2014 "),hP=n(PCe,"A",{href:!0});var yGr=s(hP);sgo=r(yGr,"GPT2LMHeadModel"),yGr.forEach(t),lgo=r(PCe," (OpenAI GPT-2 model)"),PCe.forEach(t),igo=i(S),P_=n(S,"LI",{});var $Ce=s(P_);ZZ=n($Ce,"STRONG",{});var wGr=s(ZZ);dgo=r(wGr,"ibert"),wGr.forEach(t),cgo=r($Ce," \u2014 "),pP=n($Ce,"A",{href:!0});var AGr=s(pP);fgo=r(AGr,"IBertForMaskedLM"),AGr.forEach(t),mgo=r($Ce," (I-BERT model)"),$Ce.forEach(t),ggo=i(S),$_=n(S,"LI",{});var ICe=s($_);eee=n(ICe,"STRONG",{});var LGr=s(eee);hgo=r(LGr,"layoutlm"),LGr.forEach(t),pgo=r(ICe," \u2014 "),_P=n(ICe,"A",{href:!0});var BGr=s(_P);_go=r(BGr,"LayoutLMForMaskedLM"),BGr.forEach(t),ugo=r(ICe," (LayoutLM model)"),ICe.forEach(t),bgo=i(S),I_=n(S,"LI",{});var jCe=s(I_);oee=n(jCe,"STRONG",{});var xGr=s(oee);vgo=r(xGr,"longformer"),xGr.forEach(t),Tgo=r(jCe," \u2014 "),uP=n(jCe,"A",{href:!0});var kGr=s(uP);Fgo=r(kGr,"LongformerForMaskedLM"),kGr.forEach(t),Cgo=r(jCe," (Longformer model)"),jCe.forEach(t),Mgo=i(S),j_=n(S,"LI",{});var DCe=s(j_);ree=n(DCe,"STRONG",{});var RGr=s(ree);Ego=r(RGr,"lxmert"),RGr.forEach(t),ygo=r(DCe," \u2014 "),bP=n(DCe,"A",{href:!0});var SGr=s(bP);wgo=r(SGr,"LxmertForPreTraining"),SGr.forEach(t),Ago=r(DCe," (LXMERT model)"),DCe.forEach(t),Lgo=i(S),D_=n(S,"LI",{});var NCe=s(D_);tee=n(NCe,"STRONG",{});var PGr=s(tee);Bgo=r(PGr,"megatron-bert"),PGr.forEach(t),xgo=r(NCe," \u2014 "),vP=n(NCe,"A",{href:!0});var $Gr=s(vP);kgo=r($Gr,"MegatronBertForPreTraining"),$Gr.forEach(t),Rgo=r(NCe," (MegatronBert model)"),NCe.forEach(t),Sgo=i(S),N_=n(S,"LI",{});var qCe=s(N_);aee=n(qCe,"STRONG",{});var IGr=s(aee);Pgo=r(IGr,"mobilebert"),IGr.forEach(t),$go=r(qCe," \u2014 "),TP=n(qCe,"A",{href:!0});var jGr=s(TP);Igo=r(jGr,"MobileBertForPreTraining"),jGr.forEach(t),jgo=r(qCe," (MobileBERT model)"),qCe.forEach(t),Dgo=i(S),q_=n(S,"LI",{});var OCe=s(q_);nee=n(OCe,"STRONG",{});var DGr=s(nee);Ngo=r(DGr,"mpnet"),DGr.forEach(t),qgo=r(OCe," \u2014 "),FP=n(OCe,"A",{href:!0});var NGr=s(FP);Ogo=r(NGr,"MPNetForMaskedLM"),NGr.forEach(t),Ggo=r(OCe," (MPNet model)"),OCe.forEach(t),Xgo=i(S),O_=n(S,"LI",{});var GCe=s(O_);see=n(GCe,"STRONG",{});var qGr=s(see);Vgo=r(qGr,"openai-gpt"),qGr.forEach(t),zgo=r(GCe," \u2014 "),CP=n(GCe,"A",{href:!0});var OGr=s(CP);Wgo=r(OGr,"OpenAIGPTLMHeadModel"),OGr.forEach(t),Qgo=r(GCe," (OpenAI GPT model)"),GCe.forEach(t),Hgo=i(S),G_=n(S,"LI",{});var XCe=s(G_);lee=n(XCe,"STRONG",{});var GGr=s(lee);Ugo=r(GGr,"retribert"),GGr.forEach(t),Jgo=r(XCe," \u2014 "),MP=n(XCe,"A",{href:!0});var XGr=s(MP);Ygo=r(XGr,"RetriBertModel"),XGr.forEach(t),Kgo=r(XCe," (RetriBERT model)"),XCe.forEach(t),Zgo=i(S),X_=n(S,"LI",{});var VCe=s(X_);iee=n(VCe,"STRONG",{});var VGr=s(iee);eho=r(VGr,"roberta"),VGr.forEach(t),oho=r(VCe," \u2014 "),EP=n(VCe,"A",{href:!0});var zGr=s(EP);rho=r(zGr,"RobertaForMaskedLM"),zGr.forEach(t),tho=r(VCe," (RoBERTa model)"),VCe.forEach(t),aho=i(S),V_=n(S,"LI",{});var zCe=s(V_);dee=n(zCe,"STRONG",{});var WGr=s(dee);nho=r(WGr,"squeezebert"),WGr.forEach(t),sho=r(zCe," \u2014 "),yP=n(zCe,"A",{href:!0});var QGr=s(yP);lho=r(QGr,"SqueezeBertForMaskedLM"),QGr.forEach(t),iho=r(zCe," (SqueezeBERT model)"),zCe.forEach(t),dho=i(S),z_=n(S,"LI",{});var WCe=s(z_);cee=n(WCe,"STRONG",{});var HGr=s(cee);cho=r(HGr,"t5"),HGr.forEach(t),fho=r(WCe," \u2014 "),wP=n(WCe,"A",{href:!0});var UGr=s(wP);mho=r(UGr,"T5ForConditionalGeneration"),UGr.forEach(t),gho=r(WCe," (T5 model)"),WCe.forEach(t),hho=i(S),W_=n(S,"LI",{});var QCe=s(W_);fee=n(QCe,"STRONG",{});var JGr=s(fee);pho=r(JGr,"tapas"),JGr.forEach(t),_ho=r(QCe," \u2014 "),AP=n(QCe,"A",{href:!0});var YGr=s(AP);uho=r(YGr,"TapasForMaskedLM"),YGr.forEach(t),bho=r(QCe," (TAPAS model)"),QCe.forEach(t),vho=i(S),Q_=n(S,"LI",{});var HCe=s(Q_);mee=n(HCe,"STRONG",{});var KGr=s(mee);Tho=r(KGr,"transfo-xl"),KGr.forEach(t),Fho=r(HCe," \u2014 "),LP=n(HCe,"A",{href:!0});var ZGr=s(LP);Cho=r(ZGr,"TransfoXLLMHeadModel"),ZGr.forEach(t),Mho=r(HCe," (Transformer-XL model)"),HCe.forEach(t),Eho=i(S),H_=n(S,"LI",{});var UCe=s(H_);gee=n(UCe,"STRONG",{});var eXr=s(gee);yho=r(eXr,"unispeech"),eXr.forEach(t),who=r(UCe," \u2014 "),BP=n(UCe,"A",{href:!0});var oXr=s(BP);Aho=r(oXr,"UniSpeechForPreTraining"),oXr.forEach(t),Lho=r(UCe," (UniSpeech model)"),UCe.forEach(t),Bho=i(S),U_=n(S,"LI",{});var JCe=s(U_);hee=n(JCe,"STRONG",{});var rXr=s(hee);xho=r(rXr,"unispeech-sat"),rXr.forEach(t),kho=r(JCe," \u2014 "),xP=n(JCe,"A",{href:!0});var tXr=s(xP);Rho=r(tXr,"UniSpeechSatForPreTraining"),tXr.forEach(t),Sho=r(JCe," (UniSpeechSat model)"),JCe.forEach(t),Pho=i(S),J_=n(S,"LI",{});var YCe=s(J_);pee=n(YCe,"STRONG",{});var aXr=s(pee);$ho=r(aXr,"visual_bert"),aXr.forEach(t),Iho=r(YCe," \u2014 "),kP=n(YCe,"A",{href:!0});var nXr=s(kP);jho=r(nXr,"VisualBertForPreTraining"),nXr.forEach(t),Dho=r(YCe," (VisualBert model)"),YCe.forEach(t),Nho=i(S),Y_=n(S,"LI",{});var KCe=s(Y_);_ee=n(KCe,"STRONG",{});var sXr=s(_ee);qho=r(sXr,"vit_mae"),sXr.forEach(t),Oho=r(KCe," \u2014 "),RP=n(KCe,"A",{href:!0});var lXr=s(RP);Gho=r(lXr,"ViTMAEForPreTraining"),lXr.forEach(t),Xho=r(KCe," (ViTMAE model)"),KCe.forEach(t),Vho=i(S),K_=n(S,"LI",{});var ZCe=s(K_);uee=n(ZCe,"STRONG",{});var iXr=s(uee);zho=r(iXr,"wav2vec2"),iXr.forEach(t),Who=r(ZCe," \u2014 "),SP=n(ZCe,"A",{href:!0});var dXr=s(SP);Qho=r(dXr,"Wav2Vec2ForPreTraining"),dXr.forEach(t),Hho=r(ZCe," (Wav2Vec2 model)"),ZCe.forEach(t),Uho=i(S),Z_=n(S,"LI",{});var eMe=s(Z_);bee=n(eMe,"STRONG",{});var cXr=s(bee);Jho=r(cXr,"xlm"),cXr.forEach(t),Yho=r(eMe," \u2014 "),PP=n(eMe,"A",{href:!0});var fXr=s(PP);Kho=r(fXr,"XLMWithLMHeadModel"),fXr.forEach(t),Zho=r(eMe," (XLM model)"),eMe.forEach(t),epo=i(S),eu=n(S,"LI",{});var oMe=s(eu);vee=n(oMe,"STRONG",{});var mXr=s(vee);opo=r(mXr,"xlm-roberta"),mXr.forEach(t),rpo=r(oMe," \u2014 "),$P=n(oMe,"A",{href:!0});var gXr=s($P);tpo=r(gXr,"XLMRobertaForMaskedLM"),gXr.forEach(t),apo=r(oMe," (XLM-RoBERTa model)"),oMe.forEach(t),npo=i(S),ou=n(S,"LI",{});var rMe=s(ou);Tee=n(rMe,"STRONG",{});var hXr=s(Tee);spo=r(hXr,"xlm-roberta-xl"),hXr.forEach(t),lpo=r(rMe," \u2014 "),IP=n(rMe,"A",{href:!0});var pXr=s(IP);ipo=r(pXr,"XLMRobertaXLForMaskedLM"),pXr.forEach(t),dpo=r(rMe," (XLM-RoBERTa-XL model)"),rMe.forEach(t),cpo=i(S),ru=n(S,"LI",{});var tMe=s(ru);Fee=n(tMe,"STRONG",{});var _Xr=s(Fee);fpo=r(_Xr,"xlnet"),_Xr.forEach(t),mpo=r(tMe," \u2014 "),jP=n(tMe,"A",{href:!0});var uXr=s(jP);gpo=r(uXr,"XLNetLMHeadModel"),uXr.forEach(t),hpo=r(tMe," (XLNet model)"),tMe.forEach(t),S.forEach(t),ppo=i(Ot),tu=n(Ot,"P",{});var aMe=s(tu);_po=r(aMe,"The model is set in evaluation mode by default using "),Cee=n(aMe,"CODE",{});var bXr=s(Cee);upo=r(bXr,"model.eval()"),bXr.forEach(t),bpo=r(aMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mee=n(aMe,"CODE",{});var vXr=s(Mee);vpo=r(vXr,"model.train()"),vXr.forEach(t),aMe.forEach(t),Tpo=i(Ot),Eee=n(Ot,"P",{});var TXr=s(Eee);Fpo=r(TXr,"Examples:"),TXr.forEach(t),Cpo=i(Ot),m(N4.$$.fragment,Ot),Ot.forEach(t),Hs.forEach(t),vxe=i(d),td=n(d,"H2",{class:!0});var LRe=s(td);au=n(LRe,"A",{id:!0,class:!0,href:!0});var FXr=s(au);yee=n(FXr,"SPAN",{});var CXr=s(yee);m(q4.$$.fragment,CXr),CXr.forEach(t),FXr.forEach(t),Mpo=i(LRe),wee=n(LRe,"SPAN",{});var MXr=s(wee);Epo=r(MXr,"AutoModelForCausalLM"),MXr.forEach(t),LRe.forEach(t),Txe=i(d),Ko=n(d,"DIV",{class:!0});var Js=s(Ko);m(O4.$$.fragment,Js),ypo=i(Js),ad=n(Js,"P",{});var Az=s(ad);wpo=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aee=n(Az,"CODE",{});var EXr=s(Aee);Apo=r(EXr,"from_pretrained()"),EXr.forEach(t),Lpo=r(Az,"class method or the "),Lee=n(Az,"CODE",{});var yXr=s(Lee);Bpo=r(yXr,"from_config()"),yXr.forEach(t),xpo=r(Az,`class
method.`),Az.forEach(t),kpo=i(Js),G4=n(Js,"P",{});var BRe=s(G4);Rpo=r(BRe,"This class cannot be instantiated directly using "),Bee=n(BRe,"CODE",{});var wXr=s(Bee);Spo=r(wXr,"__init__()"),wXr.forEach(t),Ppo=r(BRe," (throws an error)."),BRe.forEach(t),$po=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(X4.$$.fragment,Ys),Ipo=i(Ys),xee=n(Ys,"P",{});var AXr=s(xee);jpo=r(AXr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AXr.forEach(t),Dpo=i(Ys),nd=n(Ys,"P",{});var Lz=s(nd);Npo=r(Lz,`Note:
Loading a model from its configuration file does `),kee=n(Lz,"STRONG",{});var LXr=s(kee);qpo=r(LXr,"not"),LXr.forEach(t),Opo=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=n(Lz,"CODE",{});var BXr=s(Ree);Gpo=r(BXr,"from_pretrained()"),BXr.forEach(t),Xpo=r(Lz,"to load the model weights."),Lz.forEach(t),Vpo=i(Ys),See=n(Ys,"P",{});var xXr=s(See);zpo=r(xXr,"Examples:"),xXr.forEach(t),Wpo=i(Ys),m(V4.$$.fragment,Ys),Ys.forEach(t),Qpo=i(Js),Ne=n(Js,"DIV",{class:!0});var Gt=s(Ne);m(z4.$$.fragment,Gt),Hpo=i(Gt),Pee=n(Gt,"P",{});var kXr=s(Pee);Upo=r(kXr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kXr.forEach(t),Jpo=i(Gt),Wa=n(Gt,"P",{});var KC=s(Wa);Ypo=r(KC,"The model class to instantiate is selected based on the "),$ee=n(KC,"CODE",{});var RXr=s($ee);Kpo=r(RXr,"model_type"),RXr.forEach(t),Zpo=r(KC,` property of the config object (either
passed as an argument or loaded from `),Iee=n(KC,"CODE",{});var SXr=s(Iee);e_o=r(SXr,"pretrained_model_name_or_path"),SXr.forEach(t),o_o=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jee=n(KC,"CODE",{});var PXr=s(jee);r_o=r(PXr,"pretrained_model_name_or_path"),PXr.forEach(t),t_o=r(KC,":"),KC.forEach(t),a_o=i(Gt),$=n(Gt,"UL",{});var j=s($);nu=n(j,"LI",{});var nMe=s(nu);Dee=n(nMe,"STRONG",{});var $Xr=s(Dee);n_o=r($Xr,"bart"),$Xr.forEach(t),s_o=r(nMe," \u2014 "),DP=n(nMe,"A",{href:!0});var IXr=s(DP);l_o=r(IXr,"BartForCausalLM"),IXr.forEach(t),i_o=r(nMe," (BART model)"),nMe.forEach(t),d_o=i(j),su=n(j,"LI",{});var sMe=s(su);Nee=n(sMe,"STRONG",{});var jXr=s(Nee);c_o=r(jXr,"bert"),jXr.forEach(t),f_o=r(sMe," \u2014 "),NP=n(sMe,"A",{href:!0});var DXr=s(NP);m_o=r(DXr,"BertLMHeadModel"),DXr.forEach(t),g_o=r(sMe," (BERT model)"),sMe.forEach(t),h_o=i(j),lu=n(j,"LI",{});var lMe=s(lu);qee=n(lMe,"STRONG",{});var NXr=s(qee);p_o=r(NXr,"bert-generation"),NXr.forEach(t),__o=r(lMe," \u2014 "),qP=n(lMe,"A",{href:!0});var qXr=s(qP);u_o=r(qXr,"BertGenerationDecoder"),qXr.forEach(t),b_o=r(lMe," (Bert Generation model)"),lMe.forEach(t),v_o=i(j),iu=n(j,"LI",{});var iMe=s(iu);Oee=n(iMe,"STRONG",{});var OXr=s(Oee);T_o=r(OXr,"big_bird"),OXr.forEach(t),F_o=r(iMe," \u2014 "),OP=n(iMe,"A",{href:!0});var GXr=s(OP);C_o=r(GXr,"BigBirdForCausalLM"),GXr.forEach(t),M_o=r(iMe," (BigBird model)"),iMe.forEach(t),E_o=i(j),du=n(j,"LI",{});var dMe=s(du);Gee=n(dMe,"STRONG",{});var XXr=s(Gee);y_o=r(XXr,"bigbird_pegasus"),XXr.forEach(t),w_o=r(dMe," \u2014 "),GP=n(dMe,"A",{href:!0});var VXr=s(GP);A_o=r(VXr,"BigBirdPegasusForCausalLM"),VXr.forEach(t),L_o=r(dMe," (BigBirdPegasus model)"),dMe.forEach(t),B_o=i(j),cu=n(j,"LI",{});var cMe=s(cu);Xee=n(cMe,"STRONG",{});var zXr=s(Xee);x_o=r(zXr,"blenderbot"),zXr.forEach(t),k_o=r(cMe," \u2014 "),XP=n(cMe,"A",{href:!0});var WXr=s(XP);R_o=r(WXr,"BlenderbotForCausalLM"),WXr.forEach(t),S_o=r(cMe," (Blenderbot model)"),cMe.forEach(t),P_o=i(j),fu=n(j,"LI",{});var fMe=s(fu);Vee=n(fMe,"STRONG",{});var QXr=s(Vee);$_o=r(QXr,"blenderbot-small"),QXr.forEach(t),I_o=r(fMe," \u2014 "),VP=n(fMe,"A",{href:!0});var HXr=s(VP);j_o=r(HXr,"BlenderbotSmallForCausalLM"),HXr.forEach(t),D_o=r(fMe," (BlenderbotSmall model)"),fMe.forEach(t),N_o=i(j),mu=n(j,"LI",{});var mMe=s(mu);zee=n(mMe,"STRONG",{});var UXr=s(zee);q_o=r(UXr,"camembert"),UXr.forEach(t),O_o=r(mMe," \u2014 "),zP=n(mMe,"A",{href:!0});var JXr=s(zP);G_o=r(JXr,"CamembertForCausalLM"),JXr.forEach(t),X_o=r(mMe," (CamemBERT model)"),mMe.forEach(t),V_o=i(j),gu=n(j,"LI",{});var gMe=s(gu);Wee=n(gMe,"STRONG",{});var YXr=s(Wee);z_o=r(YXr,"ctrl"),YXr.forEach(t),W_o=r(gMe," \u2014 "),WP=n(gMe,"A",{href:!0});var KXr=s(WP);Q_o=r(KXr,"CTRLLMHeadModel"),KXr.forEach(t),H_o=r(gMe," (CTRL model)"),gMe.forEach(t),U_o=i(j),hu=n(j,"LI",{});var hMe=s(hu);Qee=n(hMe,"STRONG",{});var ZXr=s(Qee);J_o=r(ZXr,"data2vec-text"),ZXr.forEach(t),Y_o=r(hMe," \u2014 "),QP=n(hMe,"A",{href:!0});var eVr=s(QP);K_o=r(eVr,"Data2VecTextForCausalLM"),eVr.forEach(t),Z_o=r(hMe," (Data2VecText model)"),hMe.forEach(t),euo=i(j),pu=n(j,"LI",{});var pMe=s(pu);Hee=n(pMe,"STRONG",{});var oVr=s(Hee);ouo=r(oVr,"electra"),oVr.forEach(t),ruo=r(pMe," \u2014 "),HP=n(pMe,"A",{href:!0});var rVr=s(HP);tuo=r(rVr,"ElectraForCausalLM"),rVr.forEach(t),auo=r(pMe," (ELECTRA model)"),pMe.forEach(t),nuo=i(j),_u=n(j,"LI",{});var _Me=s(_u);Uee=n(_Me,"STRONG",{});var tVr=s(Uee);suo=r(tVr,"gpt2"),tVr.forEach(t),luo=r(_Me," \u2014 "),UP=n(_Me,"A",{href:!0});var aVr=s(UP);iuo=r(aVr,"GPT2LMHeadModel"),aVr.forEach(t),duo=r(_Me," (OpenAI GPT-2 model)"),_Me.forEach(t),cuo=i(j),uu=n(j,"LI",{});var uMe=s(uu);Jee=n(uMe,"STRONG",{});var nVr=s(Jee);fuo=r(nVr,"gpt_neo"),nVr.forEach(t),muo=r(uMe," \u2014 "),JP=n(uMe,"A",{href:!0});var sVr=s(JP);guo=r(sVr,"GPTNeoForCausalLM"),sVr.forEach(t),huo=r(uMe," (GPT Neo model)"),uMe.forEach(t),puo=i(j),bu=n(j,"LI",{});var bMe=s(bu);Yee=n(bMe,"STRONG",{});var lVr=s(Yee);_uo=r(lVr,"gptj"),lVr.forEach(t),uuo=r(bMe," \u2014 "),YP=n(bMe,"A",{href:!0});var iVr=s(YP);buo=r(iVr,"GPTJForCausalLM"),iVr.forEach(t),vuo=r(bMe," (GPT-J model)"),bMe.forEach(t),Tuo=i(j),vu=n(j,"LI",{});var vMe=s(vu);Kee=n(vMe,"STRONG",{});var dVr=s(Kee);Fuo=r(dVr,"marian"),dVr.forEach(t),Cuo=r(vMe," \u2014 "),KP=n(vMe,"A",{href:!0});var cVr=s(KP);Muo=r(cVr,"MarianForCausalLM"),cVr.forEach(t),Euo=r(vMe," (Marian model)"),vMe.forEach(t),yuo=i(j),Tu=n(j,"LI",{});var TMe=s(Tu);Zee=n(TMe,"STRONG",{});var fVr=s(Zee);wuo=r(fVr,"mbart"),fVr.forEach(t),Auo=r(TMe," \u2014 "),ZP=n(TMe,"A",{href:!0});var mVr=s(ZP);Luo=r(mVr,"MBartForCausalLM"),mVr.forEach(t),Buo=r(TMe," (mBART model)"),TMe.forEach(t),xuo=i(j),Fu=n(j,"LI",{});var FMe=s(Fu);eoe=n(FMe,"STRONG",{});var gVr=s(eoe);kuo=r(gVr,"megatron-bert"),gVr.forEach(t),Ruo=r(FMe," \u2014 "),e$=n(FMe,"A",{href:!0});var hVr=s(e$);Suo=r(hVr,"MegatronBertForCausalLM"),hVr.forEach(t),Puo=r(FMe," (MegatronBert model)"),FMe.forEach(t),$uo=i(j),Cu=n(j,"LI",{});var CMe=s(Cu);ooe=n(CMe,"STRONG",{});var pVr=s(ooe);Iuo=r(pVr,"openai-gpt"),pVr.forEach(t),juo=r(CMe," \u2014 "),o$=n(CMe,"A",{href:!0});var _Vr=s(o$);Duo=r(_Vr,"OpenAIGPTLMHeadModel"),_Vr.forEach(t),Nuo=r(CMe," (OpenAI GPT model)"),CMe.forEach(t),quo=i(j),Mu=n(j,"LI",{});var MMe=s(Mu);roe=n(MMe,"STRONG",{});var uVr=s(roe);Ouo=r(uVr,"pegasus"),uVr.forEach(t),Guo=r(MMe," \u2014 "),r$=n(MMe,"A",{href:!0});var bVr=s(r$);Xuo=r(bVr,"PegasusForCausalLM"),bVr.forEach(t),Vuo=r(MMe," (Pegasus model)"),MMe.forEach(t),zuo=i(j),Eu=n(j,"LI",{});var EMe=s(Eu);toe=n(EMe,"STRONG",{});var vVr=s(toe);Wuo=r(vVr,"plbart"),vVr.forEach(t),Quo=r(EMe," \u2014 "),t$=n(EMe,"A",{href:!0});var TVr=s(t$);Huo=r(TVr,"PLBartForCausalLM"),TVr.forEach(t),Uuo=r(EMe," (PLBart model)"),EMe.forEach(t),Juo=i(j),yu=n(j,"LI",{});var yMe=s(yu);aoe=n(yMe,"STRONG",{});var FVr=s(aoe);Yuo=r(FVr,"prophetnet"),FVr.forEach(t),Kuo=r(yMe," \u2014 "),a$=n(yMe,"A",{href:!0});var CVr=s(a$);Zuo=r(CVr,"ProphetNetForCausalLM"),CVr.forEach(t),e1o=r(yMe," (ProphetNet model)"),yMe.forEach(t),o1o=i(j),wu=n(j,"LI",{});var wMe=s(wu);noe=n(wMe,"STRONG",{});var MVr=s(noe);r1o=r(MVr,"qdqbert"),MVr.forEach(t),t1o=r(wMe," \u2014 "),n$=n(wMe,"A",{href:!0});var EVr=s(n$);a1o=r(EVr,"QDQBertLMHeadModel"),EVr.forEach(t),n1o=r(wMe," (QDQBert model)"),wMe.forEach(t),s1o=i(j),Au=n(j,"LI",{});var AMe=s(Au);soe=n(AMe,"STRONG",{});var yVr=s(soe);l1o=r(yVr,"reformer"),yVr.forEach(t),i1o=r(AMe," \u2014 "),s$=n(AMe,"A",{href:!0});var wVr=s(s$);d1o=r(wVr,"ReformerModelWithLMHead"),wVr.forEach(t),c1o=r(AMe," (Reformer model)"),AMe.forEach(t),f1o=i(j),Lu=n(j,"LI",{});var LMe=s(Lu);loe=n(LMe,"STRONG",{});var AVr=s(loe);m1o=r(AVr,"rembert"),AVr.forEach(t),g1o=r(LMe," \u2014 "),l$=n(LMe,"A",{href:!0});var LVr=s(l$);h1o=r(LVr,"RemBertForCausalLM"),LVr.forEach(t),p1o=r(LMe," (RemBERT model)"),LMe.forEach(t),_1o=i(j),Bu=n(j,"LI",{});var BMe=s(Bu);ioe=n(BMe,"STRONG",{});var BVr=s(ioe);u1o=r(BVr,"roberta"),BVr.forEach(t),b1o=r(BMe," \u2014 "),i$=n(BMe,"A",{href:!0});var xVr=s(i$);v1o=r(xVr,"RobertaForCausalLM"),xVr.forEach(t),T1o=r(BMe," (RoBERTa model)"),BMe.forEach(t),F1o=i(j),xu=n(j,"LI",{});var xMe=s(xu);doe=n(xMe,"STRONG",{});var kVr=s(doe);C1o=r(kVr,"roformer"),kVr.forEach(t),M1o=r(xMe," \u2014 "),d$=n(xMe,"A",{href:!0});var RVr=s(d$);E1o=r(RVr,"RoFormerForCausalLM"),RVr.forEach(t),y1o=r(xMe," (RoFormer model)"),xMe.forEach(t),w1o=i(j),ku=n(j,"LI",{});var kMe=s(ku);coe=n(kMe,"STRONG",{});var SVr=s(coe);A1o=r(SVr,"speech_to_text_2"),SVr.forEach(t),L1o=r(kMe," \u2014 "),c$=n(kMe,"A",{href:!0});var PVr=s(c$);B1o=r(PVr,"Speech2Text2ForCausalLM"),PVr.forEach(t),x1o=r(kMe," (Speech2Text2 model)"),kMe.forEach(t),k1o=i(j),Ru=n(j,"LI",{});var RMe=s(Ru);foe=n(RMe,"STRONG",{});var $Vr=s(foe);R1o=r($Vr,"transfo-xl"),$Vr.forEach(t),S1o=r(RMe," \u2014 "),f$=n(RMe,"A",{href:!0});var IVr=s(f$);P1o=r(IVr,"TransfoXLLMHeadModel"),IVr.forEach(t),$1o=r(RMe," (Transformer-XL model)"),RMe.forEach(t),I1o=i(j),Su=n(j,"LI",{});var SMe=s(Su);moe=n(SMe,"STRONG",{});var jVr=s(moe);j1o=r(jVr,"trocr"),jVr.forEach(t),D1o=r(SMe," \u2014 "),m$=n(SMe,"A",{href:!0});var DVr=s(m$);N1o=r(DVr,"TrOCRForCausalLM"),DVr.forEach(t),q1o=r(SMe," (TrOCR model)"),SMe.forEach(t),O1o=i(j),Pu=n(j,"LI",{});var PMe=s(Pu);goe=n(PMe,"STRONG",{});var NVr=s(goe);G1o=r(NVr,"xglm"),NVr.forEach(t),X1o=r(PMe," \u2014 "),g$=n(PMe,"A",{href:!0});var qVr=s(g$);V1o=r(qVr,"XGLMForCausalLM"),qVr.forEach(t),z1o=r(PMe," (XGLM model)"),PMe.forEach(t),W1o=i(j),$u=n(j,"LI",{});var $Me=s($u);hoe=n($Me,"STRONG",{});var OVr=s(hoe);Q1o=r(OVr,"xlm"),OVr.forEach(t),H1o=r($Me," \u2014 "),h$=n($Me,"A",{href:!0});var GVr=s(h$);U1o=r(GVr,"XLMWithLMHeadModel"),GVr.forEach(t),J1o=r($Me," (XLM model)"),$Me.forEach(t),Y1o=i(j),Iu=n(j,"LI",{});var IMe=s(Iu);poe=n(IMe,"STRONG",{});var XVr=s(poe);K1o=r(XVr,"xlm-prophetnet"),XVr.forEach(t),Z1o=r(IMe," \u2014 "),p$=n(IMe,"A",{href:!0});var VVr=s(p$);ebo=r(VVr,"XLMProphetNetForCausalLM"),VVr.forEach(t),obo=r(IMe," (XLMProphetNet model)"),IMe.forEach(t),rbo=i(j),ju=n(j,"LI",{});var jMe=s(ju);_oe=n(jMe,"STRONG",{});var zVr=s(_oe);tbo=r(zVr,"xlm-roberta"),zVr.forEach(t),abo=r(jMe," \u2014 "),_$=n(jMe,"A",{href:!0});var WVr=s(_$);nbo=r(WVr,"XLMRobertaForCausalLM"),WVr.forEach(t),sbo=r(jMe," (XLM-RoBERTa model)"),jMe.forEach(t),lbo=i(j),Du=n(j,"LI",{});var DMe=s(Du);uoe=n(DMe,"STRONG",{});var QVr=s(uoe);ibo=r(QVr,"xlm-roberta-xl"),QVr.forEach(t),dbo=r(DMe," \u2014 "),u$=n(DMe,"A",{href:!0});var HVr=s(u$);cbo=r(HVr,"XLMRobertaXLForCausalLM"),HVr.forEach(t),fbo=r(DMe," (XLM-RoBERTa-XL model)"),DMe.forEach(t),mbo=i(j),Nu=n(j,"LI",{});var NMe=s(Nu);boe=n(NMe,"STRONG",{});var UVr=s(boe);gbo=r(UVr,"xlnet"),UVr.forEach(t),hbo=r(NMe," \u2014 "),b$=n(NMe,"A",{href:!0});var JVr=s(b$);pbo=r(JVr,"XLNetLMHeadModel"),JVr.forEach(t),_bo=r(NMe," (XLNet model)"),NMe.forEach(t),j.forEach(t),ubo=i(Gt),qu=n(Gt,"P",{});var qMe=s(qu);bbo=r(qMe,"The model is set in evaluation mode by default using "),voe=n(qMe,"CODE",{});var YVr=s(voe);vbo=r(YVr,"model.eval()"),YVr.forEach(t),Tbo=r(qMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Toe=n(qMe,"CODE",{});var KVr=s(Toe);Fbo=r(KVr,"model.train()"),KVr.forEach(t),qMe.forEach(t),Cbo=i(Gt),Foe=n(Gt,"P",{});var ZVr=s(Foe);Mbo=r(ZVr,"Examples:"),ZVr.forEach(t),Ebo=i(Gt),m(W4.$$.fragment,Gt),Gt.forEach(t),Js.forEach(t),Fxe=i(d),sd=n(d,"H2",{class:!0});var xRe=s(sd);Ou=n(xRe,"A",{id:!0,class:!0,href:!0});var ezr=s(Ou);Coe=n(ezr,"SPAN",{});var ozr=s(Coe);m(Q4.$$.fragment,ozr),ozr.forEach(t),ezr.forEach(t),ybo=i(xRe),Moe=n(xRe,"SPAN",{});var rzr=s(Moe);wbo=r(rzr,"AutoModelForMaskedLM"),rzr.forEach(t),xRe.forEach(t),Cxe=i(d),Zo=n(d,"DIV",{class:!0});var Ks=s(Zo);m(H4.$$.fragment,Ks),Abo=i(Ks),ld=n(Ks,"P",{});var Bz=s(ld);Lbo=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Eoe=n(Bz,"CODE",{});var tzr=s(Eoe);Bbo=r(tzr,"from_pretrained()"),tzr.forEach(t),xbo=r(Bz,"class method or the "),yoe=n(Bz,"CODE",{});var azr=s(yoe);kbo=r(azr,"from_config()"),azr.forEach(t),Rbo=r(Bz,`class
method.`),Bz.forEach(t),Sbo=i(Ks),U4=n(Ks,"P",{});var kRe=s(U4);Pbo=r(kRe,"This class cannot be instantiated directly using "),woe=n(kRe,"CODE",{});var nzr=s(woe);$bo=r(nzr,"__init__()"),nzr.forEach(t),Ibo=r(kRe," (throws an error)."),kRe.forEach(t),jbo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(J4.$$.fragment,Zs),Dbo=i(Zs),Aoe=n(Zs,"P",{});var szr=s(Aoe);Nbo=r(szr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),szr.forEach(t),qbo=i(Zs),id=n(Zs,"P",{});var xz=s(id);Obo=r(xz,`Note:
Loading a model from its configuration file does `),Loe=n(xz,"STRONG",{});var lzr=s(Loe);Gbo=r(lzr,"not"),lzr.forEach(t),Xbo=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=n(xz,"CODE",{});var izr=s(Boe);Vbo=r(izr,"from_pretrained()"),izr.forEach(t),zbo=r(xz,"to load the model weights."),xz.forEach(t),Wbo=i(Zs),xoe=n(Zs,"P",{});var dzr=s(xoe);Qbo=r(dzr,"Examples:"),dzr.forEach(t),Hbo=i(Zs),m(Y4.$$.fragment,Zs),Zs.forEach(t),Ubo=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(K4.$$.fragment,Xt),Jbo=i(Xt),koe=n(Xt,"P",{});var czr=s(koe);Ybo=r(czr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),czr.forEach(t),Kbo=i(Xt),Qa=n(Xt,"P",{});var ZC=s(Qa);Zbo=r(ZC,"The model class to instantiate is selected based on the "),Roe=n(ZC,"CODE",{});var fzr=s(Roe);e5o=r(fzr,"model_type"),fzr.forEach(t),o5o=r(ZC,` property of the config object (either
passed as an argument or loaded from `),Soe=n(ZC,"CODE",{});var mzr=s(Soe);r5o=r(mzr,"pretrained_model_name_or_path"),mzr.forEach(t),t5o=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Poe=n(ZC,"CODE",{});var gzr=s(Poe);a5o=r(gzr,"pretrained_model_name_or_path"),gzr.forEach(t),n5o=r(ZC,":"),ZC.forEach(t),s5o=i(Xt),I=n(Xt,"UL",{});var D=s(I);Gu=n(D,"LI",{});var OMe=s(Gu);$oe=n(OMe,"STRONG",{});var hzr=s($oe);l5o=r(hzr,"albert"),hzr.forEach(t),i5o=r(OMe," \u2014 "),v$=n(OMe,"A",{href:!0});var pzr=s(v$);d5o=r(pzr,"AlbertForMaskedLM"),pzr.forEach(t),c5o=r(OMe," (ALBERT model)"),OMe.forEach(t),f5o=i(D),Xu=n(D,"LI",{});var GMe=s(Xu);Ioe=n(GMe,"STRONG",{});var _zr=s(Ioe);m5o=r(_zr,"bart"),_zr.forEach(t),g5o=r(GMe," \u2014 "),T$=n(GMe,"A",{href:!0});var uzr=s(T$);h5o=r(uzr,"BartForConditionalGeneration"),uzr.forEach(t),p5o=r(GMe," (BART model)"),GMe.forEach(t),_5o=i(D),Vu=n(D,"LI",{});var XMe=s(Vu);joe=n(XMe,"STRONG",{});var bzr=s(joe);u5o=r(bzr,"bert"),bzr.forEach(t),b5o=r(XMe," \u2014 "),F$=n(XMe,"A",{href:!0});var vzr=s(F$);v5o=r(vzr,"BertForMaskedLM"),vzr.forEach(t),T5o=r(XMe," (BERT model)"),XMe.forEach(t),F5o=i(D),zu=n(D,"LI",{});var VMe=s(zu);Doe=n(VMe,"STRONG",{});var Tzr=s(Doe);C5o=r(Tzr,"big_bird"),Tzr.forEach(t),M5o=r(VMe," \u2014 "),C$=n(VMe,"A",{href:!0});var Fzr=s(C$);E5o=r(Fzr,"BigBirdForMaskedLM"),Fzr.forEach(t),y5o=r(VMe," (BigBird model)"),VMe.forEach(t),w5o=i(D),Wu=n(D,"LI",{});var zMe=s(Wu);Noe=n(zMe,"STRONG",{});var Czr=s(Noe);A5o=r(Czr,"camembert"),Czr.forEach(t),L5o=r(zMe," \u2014 "),M$=n(zMe,"A",{href:!0});var Mzr=s(M$);B5o=r(Mzr,"CamembertForMaskedLM"),Mzr.forEach(t),x5o=r(zMe," (CamemBERT model)"),zMe.forEach(t),k5o=i(D),Qu=n(D,"LI",{});var WMe=s(Qu);qoe=n(WMe,"STRONG",{});var Ezr=s(qoe);R5o=r(Ezr,"convbert"),Ezr.forEach(t),S5o=r(WMe," \u2014 "),E$=n(WMe,"A",{href:!0});var yzr=s(E$);P5o=r(yzr,"ConvBertForMaskedLM"),yzr.forEach(t),$5o=r(WMe," (ConvBERT model)"),WMe.forEach(t),I5o=i(D),Hu=n(D,"LI",{});var QMe=s(Hu);Ooe=n(QMe,"STRONG",{});var wzr=s(Ooe);j5o=r(wzr,"data2vec-text"),wzr.forEach(t),D5o=r(QMe," \u2014 "),y$=n(QMe,"A",{href:!0});var Azr=s(y$);N5o=r(Azr,"Data2VecTextForMaskedLM"),Azr.forEach(t),q5o=r(QMe," (Data2VecText model)"),QMe.forEach(t),O5o=i(D),Uu=n(D,"LI",{});var HMe=s(Uu);Goe=n(HMe,"STRONG",{});var Lzr=s(Goe);G5o=r(Lzr,"deberta"),Lzr.forEach(t),X5o=r(HMe," \u2014 "),w$=n(HMe,"A",{href:!0});var Bzr=s(w$);V5o=r(Bzr,"DebertaForMaskedLM"),Bzr.forEach(t),z5o=r(HMe," (DeBERTa model)"),HMe.forEach(t),W5o=i(D),Ju=n(D,"LI",{});var UMe=s(Ju);Xoe=n(UMe,"STRONG",{});var xzr=s(Xoe);Q5o=r(xzr,"deberta-v2"),xzr.forEach(t),H5o=r(UMe," \u2014 "),A$=n(UMe,"A",{href:!0});var kzr=s(A$);U5o=r(kzr,"DebertaV2ForMaskedLM"),kzr.forEach(t),J5o=r(UMe," (DeBERTa-v2 model)"),UMe.forEach(t),Y5o=i(D),Yu=n(D,"LI",{});var JMe=s(Yu);Voe=n(JMe,"STRONG",{});var Rzr=s(Voe);K5o=r(Rzr,"distilbert"),Rzr.forEach(t),Z5o=r(JMe," \u2014 "),L$=n(JMe,"A",{href:!0});var Szr=s(L$);e2o=r(Szr,"DistilBertForMaskedLM"),Szr.forEach(t),o2o=r(JMe," (DistilBERT model)"),JMe.forEach(t),r2o=i(D),Ku=n(D,"LI",{});var YMe=s(Ku);zoe=n(YMe,"STRONG",{});var Pzr=s(zoe);t2o=r(Pzr,"electra"),Pzr.forEach(t),a2o=r(YMe," \u2014 "),B$=n(YMe,"A",{href:!0});var $zr=s(B$);n2o=r($zr,"ElectraForMaskedLM"),$zr.forEach(t),s2o=r(YMe," (ELECTRA model)"),YMe.forEach(t),l2o=i(D),Zu=n(D,"LI",{});var KMe=s(Zu);Woe=n(KMe,"STRONG",{});var Izr=s(Woe);i2o=r(Izr,"flaubert"),Izr.forEach(t),d2o=r(KMe," \u2014 "),x$=n(KMe,"A",{href:!0});var jzr=s(x$);c2o=r(jzr,"FlaubertWithLMHeadModel"),jzr.forEach(t),f2o=r(KMe," (FlauBERT model)"),KMe.forEach(t),m2o=i(D),e1=n(D,"LI",{});var ZMe=s(e1);Qoe=n(ZMe,"STRONG",{});var Dzr=s(Qoe);g2o=r(Dzr,"fnet"),Dzr.forEach(t),h2o=r(ZMe," \u2014 "),k$=n(ZMe,"A",{href:!0});var Nzr=s(k$);p2o=r(Nzr,"FNetForMaskedLM"),Nzr.forEach(t),_2o=r(ZMe," (FNet model)"),ZMe.forEach(t),u2o=i(D),o1=n(D,"LI",{});var e4e=s(o1);Hoe=n(e4e,"STRONG",{});var qzr=s(Hoe);b2o=r(qzr,"funnel"),qzr.forEach(t),v2o=r(e4e," \u2014 "),R$=n(e4e,"A",{href:!0});var Ozr=s(R$);T2o=r(Ozr,"FunnelForMaskedLM"),Ozr.forEach(t),F2o=r(e4e," (Funnel Transformer model)"),e4e.forEach(t),C2o=i(D),r1=n(D,"LI",{});var o4e=s(r1);Uoe=n(o4e,"STRONG",{});var Gzr=s(Uoe);M2o=r(Gzr,"ibert"),Gzr.forEach(t),E2o=r(o4e," \u2014 "),S$=n(o4e,"A",{href:!0});var Xzr=s(S$);y2o=r(Xzr,"IBertForMaskedLM"),Xzr.forEach(t),w2o=r(o4e," (I-BERT model)"),o4e.forEach(t),A2o=i(D),t1=n(D,"LI",{});var r4e=s(t1);Joe=n(r4e,"STRONG",{});var Vzr=s(Joe);L2o=r(Vzr,"layoutlm"),Vzr.forEach(t),B2o=r(r4e," \u2014 "),P$=n(r4e,"A",{href:!0});var zzr=s(P$);x2o=r(zzr,"LayoutLMForMaskedLM"),zzr.forEach(t),k2o=r(r4e," (LayoutLM model)"),r4e.forEach(t),R2o=i(D),a1=n(D,"LI",{});var t4e=s(a1);Yoe=n(t4e,"STRONG",{});var Wzr=s(Yoe);S2o=r(Wzr,"longformer"),Wzr.forEach(t),P2o=r(t4e," \u2014 "),$$=n(t4e,"A",{href:!0});var Qzr=s($$);$2o=r(Qzr,"LongformerForMaskedLM"),Qzr.forEach(t),I2o=r(t4e," (Longformer model)"),t4e.forEach(t),j2o=i(D),n1=n(D,"LI",{});var a4e=s(n1);Koe=n(a4e,"STRONG",{});var Hzr=s(Koe);D2o=r(Hzr,"mbart"),Hzr.forEach(t),N2o=r(a4e," \u2014 "),I$=n(a4e,"A",{href:!0});var Uzr=s(I$);q2o=r(Uzr,"MBartForConditionalGeneration"),Uzr.forEach(t),O2o=r(a4e," (mBART model)"),a4e.forEach(t),G2o=i(D),s1=n(D,"LI",{});var n4e=s(s1);Zoe=n(n4e,"STRONG",{});var Jzr=s(Zoe);X2o=r(Jzr,"megatron-bert"),Jzr.forEach(t),V2o=r(n4e," \u2014 "),j$=n(n4e,"A",{href:!0});var Yzr=s(j$);z2o=r(Yzr,"MegatronBertForMaskedLM"),Yzr.forEach(t),W2o=r(n4e," (MegatronBert model)"),n4e.forEach(t),Q2o=i(D),l1=n(D,"LI",{});var s4e=s(l1);ere=n(s4e,"STRONG",{});var Kzr=s(ere);H2o=r(Kzr,"mobilebert"),Kzr.forEach(t),U2o=r(s4e," \u2014 "),D$=n(s4e,"A",{href:!0});var Zzr=s(D$);J2o=r(Zzr,"MobileBertForMaskedLM"),Zzr.forEach(t),Y2o=r(s4e," (MobileBERT model)"),s4e.forEach(t),K2o=i(D),i1=n(D,"LI",{});var l4e=s(i1);ore=n(l4e,"STRONG",{});var eWr=s(ore);Z2o=r(eWr,"mpnet"),eWr.forEach(t),evo=r(l4e," \u2014 "),N$=n(l4e,"A",{href:!0});var oWr=s(N$);ovo=r(oWr,"MPNetForMaskedLM"),oWr.forEach(t),rvo=r(l4e," (MPNet model)"),l4e.forEach(t),tvo=i(D),d1=n(D,"LI",{});var i4e=s(d1);rre=n(i4e,"STRONG",{});var rWr=s(rre);avo=r(rWr,"nystromformer"),rWr.forEach(t),nvo=r(i4e," \u2014 "),q$=n(i4e,"A",{href:!0});var tWr=s(q$);svo=r(tWr,"NystromformerForMaskedLM"),tWr.forEach(t),lvo=r(i4e," (Nystromformer model)"),i4e.forEach(t),ivo=i(D),c1=n(D,"LI",{});var d4e=s(c1);tre=n(d4e,"STRONG",{});var aWr=s(tre);dvo=r(aWr,"perceiver"),aWr.forEach(t),cvo=r(d4e," \u2014 "),O$=n(d4e,"A",{href:!0});var nWr=s(O$);fvo=r(nWr,"PerceiverForMaskedLM"),nWr.forEach(t),mvo=r(d4e," (Perceiver model)"),d4e.forEach(t),gvo=i(D),f1=n(D,"LI",{});var c4e=s(f1);are=n(c4e,"STRONG",{});var sWr=s(are);hvo=r(sWr,"qdqbert"),sWr.forEach(t),pvo=r(c4e," \u2014 "),G$=n(c4e,"A",{href:!0});var lWr=s(G$);_vo=r(lWr,"QDQBertForMaskedLM"),lWr.forEach(t),uvo=r(c4e," (QDQBert model)"),c4e.forEach(t),bvo=i(D),m1=n(D,"LI",{});var f4e=s(m1);nre=n(f4e,"STRONG",{});var iWr=s(nre);vvo=r(iWr,"reformer"),iWr.forEach(t),Tvo=r(f4e," \u2014 "),X$=n(f4e,"A",{href:!0});var dWr=s(X$);Fvo=r(dWr,"ReformerForMaskedLM"),dWr.forEach(t),Cvo=r(f4e," (Reformer model)"),f4e.forEach(t),Mvo=i(D),g1=n(D,"LI",{});var m4e=s(g1);sre=n(m4e,"STRONG",{});var cWr=s(sre);Evo=r(cWr,"rembert"),cWr.forEach(t),yvo=r(m4e," \u2014 "),V$=n(m4e,"A",{href:!0});var fWr=s(V$);wvo=r(fWr,"RemBertForMaskedLM"),fWr.forEach(t),Avo=r(m4e," (RemBERT model)"),m4e.forEach(t),Lvo=i(D),h1=n(D,"LI",{});var g4e=s(h1);lre=n(g4e,"STRONG",{});var mWr=s(lre);Bvo=r(mWr,"roberta"),mWr.forEach(t),xvo=r(g4e," \u2014 "),z$=n(g4e,"A",{href:!0});var gWr=s(z$);kvo=r(gWr,"RobertaForMaskedLM"),gWr.forEach(t),Rvo=r(g4e," (RoBERTa model)"),g4e.forEach(t),Svo=i(D),p1=n(D,"LI",{});var h4e=s(p1);ire=n(h4e,"STRONG",{});var hWr=s(ire);Pvo=r(hWr,"roformer"),hWr.forEach(t),$vo=r(h4e," \u2014 "),W$=n(h4e,"A",{href:!0});var pWr=s(W$);Ivo=r(pWr,"RoFormerForMaskedLM"),pWr.forEach(t),jvo=r(h4e," (RoFormer model)"),h4e.forEach(t),Dvo=i(D),_1=n(D,"LI",{});var p4e=s(_1);dre=n(p4e,"STRONG",{});var _Wr=s(dre);Nvo=r(_Wr,"squeezebert"),_Wr.forEach(t),qvo=r(p4e," \u2014 "),Q$=n(p4e,"A",{href:!0});var uWr=s(Q$);Ovo=r(uWr,"SqueezeBertForMaskedLM"),uWr.forEach(t),Gvo=r(p4e," (SqueezeBERT model)"),p4e.forEach(t),Xvo=i(D),u1=n(D,"LI",{});var _4e=s(u1);cre=n(_4e,"STRONG",{});var bWr=s(cre);Vvo=r(bWr,"tapas"),bWr.forEach(t),zvo=r(_4e," \u2014 "),H$=n(_4e,"A",{href:!0});var vWr=s(H$);Wvo=r(vWr,"TapasForMaskedLM"),vWr.forEach(t),Qvo=r(_4e," (TAPAS model)"),_4e.forEach(t),Hvo=i(D),b1=n(D,"LI",{});var u4e=s(b1);fre=n(u4e,"STRONG",{});var TWr=s(fre);Uvo=r(TWr,"wav2vec2"),TWr.forEach(t),Jvo=r(u4e," \u2014 "),mre=n(u4e,"CODE",{});var FWr=s(mre);Yvo=r(FWr,"Wav2Vec2ForMaskedLM"),FWr.forEach(t),Kvo=r(u4e,"(Wav2Vec2 model)"),u4e.forEach(t),Zvo=i(D),v1=n(D,"LI",{});var b4e=s(v1);gre=n(b4e,"STRONG",{});var CWr=s(gre);e0o=r(CWr,"xlm"),CWr.forEach(t),o0o=r(b4e," \u2014 "),U$=n(b4e,"A",{href:!0});var MWr=s(U$);r0o=r(MWr,"XLMWithLMHeadModel"),MWr.forEach(t),t0o=r(b4e," (XLM model)"),b4e.forEach(t),a0o=i(D),T1=n(D,"LI",{});var v4e=s(T1);hre=n(v4e,"STRONG",{});var EWr=s(hre);n0o=r(EWr,"xlm-roberta"),EWr.forEach(t),s0o=r(v4e," \u2014 "),J$=n(v4e,"A",{href:!0});var yWr=s(J$);l0o=r(yWr,"XLMRobertaForMaskedLM"),yWr.forEach(t),i0o=r(v4e," (XLM-RoBERTa model)"),v4e.forEach(t),d0o=i(D),F1=n(D,"LI",{});var T4e=s(F1);pre=n(T4e,"STRONG",{});var wWr=s(pre);c0o=r(wWr,"xlm-roberta-xl"),wWr.forEach(t),f0o=r(T4e," \u2014 "),Y$=n(T4e,"A",{href:!0});var AWr=s(Y$);m0o=r(AWr,"XLMRobertaXLForMaskedLM"),AWr.forEach(t),g0o=r(T4e," (XLM-RoBERTa-XL model)"),T4e.forEach(t),h0o=i(D),C1=n(D,"LI",{});var F4e=s(C1);_re=n(F4e,"STRONG",{});var LWr=s(_re);p0o=r(LWr,"yoso"),LWr.forEach(t),_0o=r(F4e," \u2014 "),K$=n(F4e,"A",{href:!0});var BWr=s(K$);u0o=r(BWr,"YosoForMaskedLM"),BWr.forEach(t),b0o=r(F4e," (YOSO model)"),F4e.forEach(t),D.forEach(t),v0o=i(Xt),M1=n(Xt,"P",{});var C4e=s(M1);T0o=r(C4e,"The model is set in evaluation mode by default using "),ure=n(C4e,"CODE",{});var xWr=s(ure);F0o=r(xWr,"model.eval()"),xWr.forEach(t),C0o=r(C4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bre=n(C4e,"CODE",{});var kWr=s(bre);M0o=r(kWr,"model.train()"),kWr.forEach(t),C4e.forEach(t),E0o=i(Xt),vre=n(Xt,"P",{});var RWr=s(vre);y0o=r(RWr,"Examples:"),RWr.forEach(t),w0o=i(Xt),m(Z4.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Mxe=i(d),dd=n(d,"H2",{class:!0});var RRe=s(dd);E1=n(RRe,"A",{id:!0,class:!0,href:!0});var SWr=s(E1);Tre=n(SWr,"SPAN",{});var PWr=s(Tre);m(eE.$$.fragment,PWr),PWr.forEach(t),SWr.forEach(t),A0o=i(RRe),Fre=n(RRe,"SPAN",{});var $Wr=s(Fre);L0o=r($Wr,"AutoModelForSeq2SeqLM"),$Wr.forEach(t),RRe.forEach(t),Exe=i(d),er=n(d,"DIV",{class:!0});var el=s(er);m(oE.$$.fragment,el),B0o=i(el),cd=n(el,"P",{});var kz=s(cd);x0o=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cre=n(kz,"CODE",{});var IWr=s(Cre);k0o=r(IWr,"from_pretrained()"),IWr.forEach(t),R0o=r(kz,"class method or the "),Mre=n(kz,"CODE",{});var jWr=s(Mre);S0o=r(jWr,"from_config()"),jWr.forEach(t),P0o=r(kz,`class
method.`),kz.forEach(t),$0o=i(el),rE=n(el,"P",{});var SRe=s(rE);I0o=r(SRe,"This class cannot be instantiated directly using "),Ere=n(SRe,"CODE",{});var DWr=s(Ere);j0o=r(DWr,"__init__()"),DWr.forEach(t),D0o=r(SRe," (throws an error)."),SRe.forEach(t),N0o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(tE.$$.fragment,ol),q0o=i(ol),yre=n(ol,"P",{});var NWr=s(yre);O0o=r(NWr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NWr.forEach(t),G0o=i(ol),fd=n(ol,"P",{});var Rz=s(fd);X0o=r(Rz,`Note:
Loading a model from its configuration file does `),wre=n(Rz,"STRONG",{});var qWr=s(wre);V0o=r(qWr,"not"),qWr.forEach(t),z0o=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(Rz,"CODE",{});var OWr=s(Are);W0o=r(OWr,"from_pretrained()"),OWr.forEach(t),Q0o=r(Rz,"to load the model weights."),Rz.forEach(t),H0o=i(ol),Lre=n(ol,"P",{});var GWr=s(Lre);U0o=r(GWr,"Examples:"),GWr.forEach(t),J0o=i(ol),m(aE.$$.fragment,ol),ol.forEach(t),Y0o=i(el),Oe=n(el,"DIV",{class:!0});var Vt=s(Oe);m(nE.$$.fragment,Vt),K0o=i(Vt),Bre=n(Vt,"P",{});var XWr=s(Bre);Z0o=r(XWr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XWr.forEach(t),eTo=i(Vt),Ha=n(Vt,"P",{});var eM=s(Ha);oTo=r(eM,"The model class to instantiate is selected based on the "),xre=n(eM,"CODE",{});var VWr=s(xre);rTo=r(VWr,"model_type"),VWr.forEach(t),tTo=r(eM,` property of the config object (either
passed as an argument or loaded from `),kre=n(eM,"CODE",{});var zWr=s(kre);aTo=r(zWr,"pretrained_model_name_or_path"),zWr.forEach(t),nTo=r(eM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rre=n(eM,"CODE",{});var WWr=s(Rre);sTo=r(WWr,"pretrained_model_name_or_path"),WWr.forEach(t),lTo=r(eM,":"),eM.forEach(t),iTo=i(Vt),ne=n(Vt,"UL",{});var ie=s(ne);y1=n(ie,"LI",{});var M4e=s(y1);Sre=n(M4e,"STRONG",{});var QWr=s(Sre);dTo=r(QWr,"bart"),QWr.forEach(t),cTo=r(M4e," \u2014 "),Z$=n(M4e,"A",{href:!0});var HWr=s(Z$);fTo=r(HWr,"BartForConditionalGeneration"),HWr.forEach(t),mTo=r(M4e," (BART model)"),M4e.forEach(t),gTo=i(ie),w1=n(ie,"LI",{});var E4e=s(w1);Pre=n(E4e,"STRONG",{});var UWr=s(Pre);hTo=r(UWr,"bigbird_pegasus"),UWr.forEach(t),pTo=r(E4e," \u2014 "),eI=n(E4e,"A",{href:!0});var JWr=s(eI);_To=r(JWr,"BigBirdPegasusForConditionalGeneration"),JWr.forEach(t),uTo=r(E4e," (BigBirdPegasus model)"),E4e.forEach(t),bTo=i(ie),A1=n(ie,"LI",{});var y4e=s(A1);$re=n(y4e,"STRONG",{});var YWr=s($re);vTo=r(YWr,"blenderbot"),YWr.forEach(t),TTo=r(y4e," \u2014 "),oI=n(y4e,"A",{href:!0});var KWr=s(oI);FTo=r(KWr,"BlenderbotForConditionalGeneration"),KWr.forEach(t),CTo=r(y4e," (Blenderbot model)"),y4e.forEach(t),MTo=i(ie),L1=n(ie,"LI",{});var w4e=s(L1);Ire=n(w4e,"STRONG",{});var ZWr=s(Ire);ETo=r(ZWr,"blenderbot-small"),ZWr.forEach(t),yTo=r(w4e," \u2014 "),rI=n(w4e,"A",{href:!0});var eQr=s(rI);wTo=r(eQr,"BlenderbotSmallForConditionalGeneration"),eQr.forEach(t),ATo=r(w4e," (BlenderbotSmall model)"),w4e.forEach(t),LTo=i(ie),B1=n(ie,"LI",{});var A4e=s(B1);jre=n(A4e,"STRONG",{});var oQr=s(jre);BTo=r(oQr,"encoder-decoder"),oQr.forEach(t),xTo=r(A4e," \u2014 "),tI=n(A4e,"A",{href:!0});var rQr=s(tI);kTo=r(rQr,"EncoderDecoderModel"),rQr.forEach(t),RTo=r(A4e," (Encoder decoder model)"),A4e.forEach(t),STo=i(ie),x1=n(ie,"LI",{});var L4e=s(x1);Dre=n(L4e,"STRONG",{});var tQr=s(Dre);PTo=r(tQr,"fsmt"),tQr.forEach(t),$To=r(L4e," \u2014 "),aI=n(L4e,"A",{href:!0});var aQr=s(aI);ITo=r(aQr,"FSMTForConditionalGeneration"),aQr.forEach(t),jTo=r(L4e," (FairSeq Machine-Translation model)"),L4e.forEach(t),DTo=i(ie),k1=n(ie,"LI",{});var B4e=s(k1);Nre=n(B4e,"STRONG",{});var nQr=s(Nre);NTo=r(nQr,"led"),nQr.forEach(t),qTo=r(B4e," \u2014 "),nI=n(B4e,"A",{href:!0});var sQr=s(nI);OTo=r(sQr,"LEDForConditionalGeneration"),sQr.forEach(t),GTo=r(B4e," (LED model)"),B4e.forEach(t),XTo=i(ie),R1=n(ie,"LI",{});var x4e=s(R1);qre=n(x4e,"STRONG",{});var lQr=s(qre);VTo=r(lQr,"m2m_100"),lQr.forEach(t),zTo=r(x4e," \u2014 "),sI=n(x4e,"A",{href:!0});var iQr=s(sI);WTo=r(iQr,"M2M100ForConditionalGeneration"),iQr.forEach(t),QTo=r(x4e," (M2M100 model)"),x4e.forEach(t),HTo=i(ie),S1=n(ie,"LI",{});var k4e=s(S1);Ore=n(k4e,"STRONG",{});var dQr=s(Ore);UTo=r(dQr,"marian"),dQr.forEach(t),JTo=r(k4e," \u2014 "),lI=n(k4e,"A",{href:!0});var cQr=s(lI);YTo=r(cQr,"MarianMTModel"),cQr.forEach(t),KTo=r(k4e," (Marian model)"),k4e.forEach(t),ZTo=i(ie),P1=n(ie,"LI",{});var R4e=s(P1);Gre=n(R4e,"STRONG",{});var fQr=s(Gre);e7o=r(fQr,"mbart"),fQr.forEach(t),o7o=r(R4e," \u2014 "),iI=n(R4e,"A",{href:!0});var mQr=s(iI);r7o=r(mQr,"MBartForConditionalGeneration"),mQr.forEach(t),t7o=r(R4e," (mBART model)"),R4e.forEach(t),a7o=i(ie),$1=n(ie,"LI",{});var S4e=s($1);Xre=n(S4e,"STRONG",{});var gQr=s(Xre);n7o=r(gQr,"mt5"),gQr.forEach(t),s7o=r(S4e," \u2014 "),dI=n(S4e,"A",{href:!0});var hQr=s(dI);l7o=r(hQr,"MT5ForConditionalGeneration"),hQr.forEach(t),i7o=r(S4e," (mT5 model)"),S4e.forEach(t),d7o=i(ie),I1=n(ie,"LI",{});var P4e=s(I1);Vre=n(P4e,"STRONG",{});var pQr=s(Vre);c7o=r(pQr,"pegasus"),pQr.forEach(t),f7o=r(P4e," \u2014 "),cI=n(P4e,"A",{href:!0});var _Qr=s(cI);m7o=r(_Qr,"PegasusForConditionalGeneration"),_Qr.forEach(t),g7o=r(P4e," (Pegasus model)"),P4e.forEach(t),h7o=i(ie),j1=n(ie,"LI",{});var $4e=s(j1);zre=n($4e,"STRONG",{});var uQr=s(zre);p7o=r(uQr,"plbart"),uQr.forEach(t),_7o=r($4e," \u2014 "),fI=n($4e,"A",{href:!0});var bQr=s(fI);u7o=r(bQr,"PLBartForConditionalGeneration"),bQr.forEach(t),b7o=r($4e," (PLBart model)"),$4e.forEach(t),v7o=i(ie),D1=n(ie,"LI",{});var I4e=s(D1);Wre=n(I4e,"STRONG",{});var vQr=s(Wre);T7o=r(vQr,"prophetnet"),vQr.forEach(t),F7o=r(I4e," \u2014 "),mI=n(I4e,"A",{href:!0});var TQr=s(mI);C7o=r(TQr,"ProphetNetForConditionalGeneration"),TQr.forEach(t),M7o=r(I4e," (ProphetNet model)"),I4e.forEach(t),E7o=i(ie),N1=n(ie,"LI",{});var j4e=s(N1);Qre=n(j4e,"STRONG",{});var FQr=s(Qre);y7o=r(FQr,"t5"),FQr.forEach(t),w7o=r(j4e," \u2014 "),gI=n(j4e,"A",{href:!0});var CQr=s(gI);A7o=r(CQr,"T5ForConditionalGeneration"),CQr.forEach(t),L7o=r(j4e," (T5 model)"),j4e.forEach(t),B7o=i(ie),q1=n(ie,"LI",{});var D4e=s(q1);Hre=n(D4e,"STRONG",{});var MQr=s(Hre);x7o=r(MQr,"xlm-prophetnet"),MQr.forEach(t),k7o=r(D4e," \u2014 "),hI=n(D4e,"A",{href:!0});var EQr=s(hI);R7o=r(EQr,"XLMProphetNetForConditionalGeneration"),EQr.forEach(t),S7o=r(D4e," (XLMProphetNet model)"),D4e.forEach(t),ie.forEach(t),P7o=i(Vt),O1=n(Vt,"P",{});var N4e=s(O1);$7o=r(N4e,"The model is set in evaluation mode by default using "),Ure=n(N4e,"CODE",{});var yQr=s(Ure);I7o=r(yQr,"model.eval()"),yQr.forEach(t),j7o=r(N4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jre=n(N4e,"CODE",{});var wQr=s(Jre);D7o=r(wQr,"model.train()"),wQr.forEach(t),N4e.forEach(t),N7o=i(Vt),Yre=n(Vt,"P",{});var AQr=s(Yre);q7o=r(AQr,"Examples:"),AQr.forEach(t),O7o=i(Vt),m(sE.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),yxe=i(d),md=n(d,"H2",{class:!0});var PRe=s(md);G1=n(PRe,"A",{id:!0,class:!0,href:!0});var LQr=s(G1);Kre=n(LQr,"SPAN",{});var BQr=s(Kre);m(lE.$$.fragment,BQr),BQr.forEach(t),LQr.forEach(t),G7o=i(PRe),Zre=n(PRe,"SPAN",{});var xQr=s(Zre);X7o=r(xQr,"AutoModelForSequenceClassification"),xQr.forEach(t),PRe.forEach(t),wxe=i(d),or=n(d,"DIV",{class:!0});var rl=s(or);m(iE.$$.fragment,rl),V7o=i(rl),gd=n(rl,"P",{});var Sz=s(gd);z7o=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ete=n(Sz,"CODE",{});var kQr=s(ete);W7o=r(kQr,"from_pretrained()"),kQr.forEach(t),Q7o=r(Sz,"class method or the "),ote=n(Sz,"CODE",{});var RQr=s(ote);H7o=r(RQr,"from_config()"),RQr.forEach(t),U7o=r(Sz,`class
method.`),Sz.forEach(t),J7o=i(rl),dE=n(rl,"P",{});var $Re=s(dE);Y7o=r($Re,"This class cannot be instantiated directly using "),rte=n($Re,"CODE",{});var SQr=s(rte);K7o=r(SQr,"__init__()"),SQr.forEach(t),Z7o=r($Re," (throws an error)."),$Re.forEach(t),eFo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(cE.$$.fragment,tl),oFo=i(tl),tte=n(tl,"P",{});var PQr=s(tte);rFo=r(PQr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PQr.forEach(t),tFo=i(tl),hd=n(tl,"P",{});var Pz=s(hd);aFo=r(Pz,`Note:
Loading a model from its configuration file does `),ate=n(Pz,"STRONG",{});var $Qr=s(ate);nFo=r($Qr,"not"),$Qr.forEach(t),sFo=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nte=n(Pz,"CODE",{});var IQr=s(nte);lFo=r(IQr,"from_pretrained()"),IQr.forEach(t),iFo=r(Pz,"to load the model weights."),Pz.forEach(t),dFo=i(tl),ste=n(tl,"P",{});var jQr=s(ste);cFo=r(jQr,"Examples:"),jQr.forEach(t),fFo=i(tl),m(fE.$$.fragment,tl),tl.forEach(t),mFo=i(rl),Ge=n(rl,"DIV",{class:!0});var zt=s(Ge);m(mE.$$.fragment,zt),gFo=i(zt),lte=n(zt,"P",{});var DQr=s(lte);hFo=r(DQr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DQr.forEach(t),pFo=i(zt),Ua=n(zt,"P",{});var oM=s(Ua);_Fo=r(oM,"The model class to instantiate is selected based on the "),ite=n(oM,"CODE",{});var NQr=s(ite);uFo=r(NQr,"model_type"),NQr.forEach(t),bFo=r(oM,` property of the config object (either
passed as an argument or loaded from `),dte=n(oM,"CODE",{});var qQr=s(dte);vFo=r(qQr,"pretrained_model_name_or_path"),qQr.forEach(t),TFo=r(oM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cte=n(oM,"CODE",{});var OQr=s(cte);FFo=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),CFo=r(oM,":"),oM.forEach(t),MFo=i(zt),A=n(zt,"UL",{});var L=s(A);X1=n(L,"LI",{});var q4e=s(X1);fte=n(q4e,"STRONG",{});var GQr=s(fte);EFo=r(GQr,"albert"),GQr.forEach(t),yFo=r(q4e," \u2014 "),pI=n(q4e,"A",{href:!0});var XQr=s(pI);wFo=r(XQr,"AlbertForSequenceClassification"),XQr.forEach(t),AFo=r(q4e," (ALBERT model)"),q4e.forEach(t),LFo=i(L),V1=n(L,"LI",{});var O4e=s(V1);mte=n(O4e,"STRONG",{});var VQr=s(mte);BFo=r(VQr,"bart"),VQr.forEach(t),xFo=r(O4e," \u2014 "),_I=n(O4e,"A",{href:!0});var zQr=s(_I);kFo=r(zQr,"BartForSequenceClassification"),zQr.forEach(t),RFo=r(O4e," (BART model)"),O4e.forEach(t),SFo=i(L),z1=n(L,"LI",{});var G4e=s(z1);gte=n(G4e,"STRONG",{});var WQr=s(gte);PFo=r(WQr,"bert"),WQr.forEach(t),$Fo=r(G4e," \u2014 "),uI=n(G4e,"A",{href:!0});var QQr=s(uI);IFo=r(QQr,"BertForSequenceClassification"),QQr.forEach(t),jFo=r(G4e," (BERT model)"),G4e.forEach(t),DFo=i(L),W1=n(L,"LI",{});var X4e=s(W1);hte=n(X4e,"STRONG",{});var HQr=s(hte);NFo=r(HQr,"big_bird"),HQr.forEach(t),qFo=r(X4e," \u2014 "),bI=n(X4e,"A",{href:!0});var UQr=s(bI);OFo=r(UQr,"BigBirdForSequenceClassification"),UQr.forEach(t),GFo=r(X4e," (BigBird model)"),X4e.forEach(t),XFo=i(L),Q1=n(L,"LI",{});var V4e=s(Q1);pte=n(V4e,"STRONG",{});var JQr=s(pte);VFo=r(JQr,"bigbird_pegasus"),JQr.forEach(t),zFo=r(V4e," \u2014 "),vI=n(V4e,"A",{href:!0});var YQr=s(vI);WFo=r(YQr,"BigBirdPegasusForSequenceClassification"),YQr.forEach(t),QFo=r(V4e," (BigBirdPegasus model)"),V4e.forEach(t),HFo=i(L),H1=n(L,"LI",{});var z4e=s(H1);_te=n(z4e,"STRONG",{});var KQr=s(_te);UFo=r(KQr,"camembert"),KQr.forEach(t),JFo=r(z4e," \u2014 "),TI=n(z4e,"A",{href:!0});var ZQr=s(TI);YFo=r(ZQr,"CamembertForSequenceClassification"),ZQr.forEach(t),KFo=r(z4e," (CamemBERT model)"),z4e.forEach(t),ZFo=i(L),U1=n(L,"LI",{});var W4e=s(U1);ute=n(W4e,"STRONG",{});var eHr=s(ute);e9o=r(eHr,"canine"),eHr.forEach(t),o9o=r(W4e," \u2014 "),FI=n(W4e,"A",{href:!0});var oHr=s(FI);r9o=r(oHr,"CanineForSequenceClassification"),oHr.forEach(t),t9o=r(W4e," (Canine model)"),W4e.forEach(t),a9o=i(L),J1=n(L,"LI",{});var Q4e=s(J1);bte=n(Q4e,"STRONG",{});var rHr=s(bte);n9o=r(rHr,"convbert"),rHr.forEach(t),s9o=r(Q4e," \u2014 "),CI=n(Q4e,"A",{href:!0});var tHr=s(CI);l9o=r(tHr,"ConvBertForSequenceClassification"),tHr.forEach(t),i9o=r(Q4e," (ConvBERT model)"),Q4e.forEach(t),d9o=i(L),Y1=n(L,"LI",{});var H4e=s(Y1);vte=n(H4e,"STRONG",{});var aHr=s(vte);c9o=r(aHr,"ctrl"),aHr.forEach(t),f9o=r(H4e," \u2014 "),MI=n(H4e,"A",{href:!0});var nHr=s(MI);m9o=r(nHr,"CTRLForSequenceClassification"),nHr.forEach(t),g9o=r(H4e," (CTRL model)"),H4e.forEach(t),h9o=i(L),K1=n(L,"LI",{});var U4e=s(K1);Tte=n(U4e,"STRONG",{});var sHr=s(Tte);p9o=r(sHr,"data2vec-text"),sHr.forEach(t),_9o=r(U4e," \u2014 "),EI=n(U4e,"A",{href:!0});var lHr=s(EI);u9o=r(lHr,"Data2VecTextForSequenceClassification"),lHr.forEach(t),b9o=r(U4e," (Data2VecText model)"),U4e.forEach(t),v9o=i(L),Z1=n(L,"LI",{});var J4e=s(Z1);Fte=n(J4e,"STRONG",{});var iHr=s(Fte);T9o=r(iHr,"deberta"),iHr.forEach(t),F9o=r(J4e," \u2014 "),yI=n(J4e,"A",{href:!0});var dHr=s(yI);C9o=r(dHr,"DebertaForSequenceClassification"),dHr.forEach(t),M9o=r(J4e," (DeBERTa model)"),J4e.forEach(t),E9o=i(L),eb=n(L,"LI",{});var Y4e=s(eb);Cte=n(Y4e,"STRONG",{});var cHr=s(Cte);y9o=r(cHr,"deberta-v2"),cHr.forEach(t),w9o=r(Y4e," \u2014 "),wI=n(Y4e,"A",{href:!0});var fHr=s(wI);A9o=r(fHr,"DebertaV2ForSequenceClassification"),fHr.forEach(t),L9o=r(Y4e," (DeBERTa-v2 model)"),Y4e.forEach(t),B9o=i(L),ob=n(L,"LI",{});var K4e=s(ob);Mte=n(K4e,"STRONG",{});var mHr=s(Mte);x9o=r(mHr,"distilbert"),mHr.forEach(t),k9o=r(K4e," \u2014 "),AI=n(K4e,"A",{href:!0});var gHr=s(AI);R9o=r(gHr,"DistilBertForSequenceClassification"),gHr.forEach(t),S9o=r(K4e," (DistilBERT model)"),K4e.forEach(t),P9o=i(L),rb=n(L,"LI",{});var Z4e=s(rb);Ete=n(Z4e,"STRONG",{});var hHr=s(Ete);$9o=r(hHr,"electra"),hHr.forEach(t),I9o=r(Z4e," \u2014 "),LI=n(Z4e,"A",{href:!0});var pHr=s(LI);j9o=r(pHr,"ElectraForSequenceClassification"),pHr.forEach(t),D9o=r(Z4e," (ELECTRA model)"),Z4e.forEach(t),N9o=i(L),tb=n(L,"LI",{});var eEe=s(tb);yte=n(eEe,"STRONG",{});var _Hr=s(yte);q9o=r(_Hr,"flaubert"),_Hr.forEach(t),O9o=r(eEe," \u2014 "),BI=n(eEe,"A",{href:!0});var uHr=s(BI);G9o=r(uHr,"FlaubertForSequenceClassification"),uHr.forEach(t),X9o=r(eEe," (FlauBERT model)"),eEe.forEach(t),V9o=i(L),ab=n(L,"LI",{});var oEe=s(ab);wte=n(oEe,"STRONG",{});var bHr=s(wte);z9o=r(bHr,"fnet"),bHr.forEach(t),W9o=r(oEe," \u2014 "),xI=n(oEe,"A",{href:!0});var vHr=s(xI);Q9o=r(vHr,"FNetForSequenceClassification"),vHr.forEach(t),H9o=r(oEe," (FNet model)"),oEe.forEach(t),U9o=i(L),nb=n(L,"LI",{});var rEe=s(nb);Ate=n(rEe,"STRONG",{});var THr=s(Ate);J9o=r(THr,"funnel"),THr.forEach(t),Y9o=r(rEe," \u2014 "),kI=n(rEe,"A",{href:!0});var FHr=s(kI);K9o=r(FHr,"FunnelForSequenceClassification"),FHr.forEach(t),Z9o=r(rEe," (Funnel Transformer model)"),rEe.forEach(t),eCo=i(L),sb=n(L,"LI",{});var tEe=s(sb);Lte=n(tEe,"STRONG",{});var CHr=s(Lte);oCo=r(CHr,"gpt2"),CHr.forEach(t),rCo=r(tEe," \u2014 "),RI=n(tEe,"A",{href:!0});var MHr=s(RI);tCo=r(MHr,"GPT2ForSequenceClassification"),MHr.forEach(t),aCo=r(tEe," (OpenAI GPT-2 model)"),tEe.forEach(t),nCo=i(L),lb=n(L,"LI",{});var aEe=s(lb);Bte=n(aEe,"STRONG",{});var EHr=s(Bte);sCo=r(EHr,"gpt_neo"),EHr.forEach(t),lCo=r(aEe," \u2014 "),SI=n(aEe,"A",{href:!0});var yHr=s(SI);iCo=r(yHr,"GPTNeoForSequenceClassification"),yHr.forEach(t),dCo=r(aEe," (GPT Neo model)"),aEe.forEach(t),cCo=i(L),ib=n(L,"LI",{});var nEe=s(ib);xte=n(nEe,"STRONG",{});var wHr=s(xte);fCo=r(wHr,"gptj"),wHr.forEach(t),mCo=r(nEe," \u2014 "),PI=n(nEe,"A",{href:!0});var AHr=s(PI);gCo=r(AHr,"GPTJForSequenceClassification"),AHr.forEach(t),hCo=r(nEe," (GPT-J model)"),nEe.forEach(t),pCo=i(L),db=n(L,"LI",{});var sEe=s(db);kte=n(sEe,"STRONG",{});var LHr=s(kte);_Co=r(LHr,"ibert"),LHr.forEach(t),uCo=r(sEe," \u2014 "),$I=n(sEe,"A",{href:!0});var BHr=s($I);bCo=r(BHr,"IBertForSequenceClassification"),BHr.forEach(t),vCo=r(sEe," (I-BERT model)"),sEe.forEach(t),TCo=i(L),cb=n(L,"LI",{});var lEe=s(cb);Rte=n(lEe,"STRONG",{});var xHr=s(Rte);FCo=r(xHr,"layoutlm"),xHr.forEach(t),CCo=r(lEe," \u2014 "),II=n(lEe,"A",{href:!0});var kHr=s(II);MCo=r(kHr,"LayoutLMForSequenceClassification"),kHr.forEach(t),ECo=r(lEe," (LayoutLM model)"),lEe.forEach(t),yCo=i(L),fb=n(L,"LI",{});var iEe=s(fb);Ste=n(iEe,"STRONG",{});var RHr=s(Ste);wCo=r(RHr,"layoutlmv2"),RHr.forEach(t),ACo=r(iEe," \u2014 "),jI=n(iEe,"A",{href:!0});var SHr=s(jI);LCo=r(SHr,"LayoutLMv2ForSequenceClassification"),SHr.forEach(t),BCo=r(iEe," (LayoutLMv2 model)"),iEe.forEach(t),xCo=i(L),mb=n(L,"LI",{});var dEe=s(mb);Pte=n(dEe,"STRONG",{});var PHr=s(Pte);kCo=r(PHr,"led"),PHr.forEach(t),RCo=r(dEe," \u2014 "),DI=n(dEe,"A",{href:!0});var $Hr=s(DI);SCo=r($Hr,"LEDForSequenceClassification"),$Hr.forEach(t),PCo=r(dEe," (LED model)"),dEe.forEach(t),$Co=i(L),gb=n(L,"LI",{});var cEe=s(gb);$te=n(cEe,"STRONG",{});var IHr=s($te);ICo=r(IHr,"longformer"),IHr.forEach(t),jCo=r(cEe," \u2014 "),NI=n(cEe,"A",{href:!0});var jHr=s(NI);DCo=r(jHr,"LongformerForSequenceClassification"),jHr.forEach(t),NCo=r(cEe," (Longformer model)"),cEe.forEach(t),qCo=i(L),hb=n(L,"LI",{});var fEe=s(hb);Ite=n(fEe,"STRONG",{});var DHr=s(Ite);OCo=r(DHr,"mbart"),DHr.forEach(t),GCo=r(fEe," \u2014 "),qI=n(fEe,"A",{href:!0});var NHr=s(qI);XCo=r(NHr,"MBartForSequenceClassification"),NHr.forEach(t),VCo=r(fEe," (mBART model)"),fEe.forEach(t),zCo=i(L),pb=n(L,"LI",{});var mEe=s(pb);jte=n(mEe,"STRONG",{});var qHr=s(jte);WCo=r(qHr,"megatron-bert"),qHr.forEach(t),QCo=r(mEe," \u2014 "),OI=n(mEe,"A",{href:!0});var OHr=s(OI);HCo=r(OHr,"MegatronBertForSequenceClassification"),OHr.forEach(t),UCo=r(mEe," (MegatronBert model)"),mEe.forEach(t),JCo=i(L),_b=n(L,"LI",{});var gEe=s(_b);Dte=n(gEe,"STRONG",{});var GHr=s(Dte);YCo=r(GHr,"mobilebert"),GHr.forEach(t),KCo=r(gEe," \u2014 "),GI=n(gEe,"A",{href:!0});var XHr=s(GI);ZCo=r(XHr,"MobileBertForSequenceClassification"),XHr.forEach(t),eMo=r(gEe," (MobileBERT model)"),gEe.forEach(t),oMo=i(L),ub=n(L,"LI",{});var hEe=s(ub);Nte=n(hEe,"STRONG",{});var VHr=s(Nte);rMo=r(VHr,"mpnet"),VHr.forEach(t),tMo=r(hEe," \u2014 "),XI=n(hEe,"A",{href:!0});var zHr=s(XI);aMo=r(zHr,"MPNetForSequenceClassification"),zHr.forEach(t),nMo=r(hEe," (MPNet model)"),hEe.forEach(t),sMo=i(L),bb=n(L,"LI",{});var pEe=s(bb);qte=n(pEe,"STRONG",{});var WHr=s(qte);lMo=r(WHr,"nystromformer"),WHr.forEach(t),iMo=r(pEe," \u2014 "),VI=n(pEe,"A",{href:!0});var QHr=s(VI);dMo=r(QHr,"NystromformerForSequenceClassification"),QHr.forEach(t),cMo=r(pEe," (Nystromformer model)"),pEe.forEach(t),fMo=i(L),vb=n(L,"LI",{});var _Ee=s(vb);Ote=n(_Ee,"STRONG",{});var HHr=s(Ote);mMo=r(HHr,"openai-gpt"),HHr.forEach(t),gMo=r(_Ee," \u2014 "),zI=n(_Ee,"A",{href:!0});var UHr=s(zI);hMo=r(UHr,"OpenAIGPTForSequenceClassification"),UHr.forEach(t),pMo=r(_Ee," (OpenAI GPT model)"),_Ee.forEach(t),_Mo=i(L),Tb=n(L,"LI",{});var uEe=s(Tb);Gte=n(uEe,"STRONG",{});var JHr=s(Gte);uMo=r(JHr,"perceiver"),JHr.forEach(t),bMo=r(uEe," \u2014 "),WI=n(uEe,"A",{href:!0});var YHr=s(WI);vMo=r(YHr,"PerceiverForSequenceClassification"),YHr.forEach(t),TMo=r(uEe," (Perceiver model)"),uEe.forEach(t),FMo=i(L),Fb=n(L,"LI",{});var bEe=s(Fb);Xte=n(bEe,"STRONG",{});var KHr=s(Xte);CMo=r(KHr,"plbart"),KHr.forEach(t),MMo=r(bEe," \u2014 "),QI=n(bEe,"A",{href:!0});var ZHr=s(QI);EMo=r(ZHr,"PLBartForSequenceClassification"),ZHr.forEach(t),yMo=r(bEe," (PLBart model)"),bEe.forEach(t),wMo=i(L),Cb=n(L,"LI",{});var vEe=s(Cb);Vte=n(vEe,"STRONG",{});var eUr=s(Vte);AMo=r(eUr,"qdqbert"),eUr.forEach(t),LMo=r(vEe," \u2014 "),HI=n(vEe,"A",{href:!0});var oUr=s(HI);BMo=r(oUr,"QDQBertForSequenceClassification"),oUr.forEach(t),xMo=r(vEe," (QDQBert model)"),vEe.forEach(t),kMo=i(L),Mb=n(L,"LI",{});var TEe=s(Mb);zte=n(TEe,"STRONG",{});var rUr=s(zte);RMo=r(rUr,"reformer"),rUr.forEach(t),SMo=r(TEe," \u2014 "),UI=n(TEe,"A",{href:!0});var tUr=s(UI);PMo=r(tUr,"ReformerForSequenceClassification"),tUr.forEach(t),$Mo=r(TEe," (Reformer model)"),TEe.forEach(t),IMo=i(L),Eb=n(L,"LI",{});var FEe=s(Eb);Wte=n(FEe,"STRONG",{});var aUr=s(Wte);jMo=r(aUr,"rembert"),aUr.forEach(t),DMo=r(FEe," \u2014 "),JI=n(FEe,"A",{href:!0});var nUr=s(JI);NMo=r(nUr,"RemBertForSequenceClassification"),nUr.forEach(t),qMo=r(FEe," (RemBERT model)"),FEe.forEach(t),OMo=i(L),yb=n(L,"LI",{});var CEe=s(yb);Qte=n(CEe,"STRONG",{});var sUr=s(Qte);GMo=r(sUr,"roberta"),sUr.forEach(t),XMo=r(CEe," \u2014 "),YI=n(CEe,"A",{href:!0});var lUr=s(YI);VMo=r(lUr,"RobertaForSequenceClassification"),lUr.forEach(t),zMo=r(CEe," (RoBERTa model)"),CEe.forEach(t),WMo=i(L),wb=n(L,"LI",{});var MEe=s(wb);Hte=n(MEe,"STRONG",{});var iUr=s(Hte);QMo=r(iUr,"roformer"),iUr.forEach(t),HMo=r(MEe," \u2014 "),KI=n(MEe,"A",{href:!0});var dUr=s(KI);UMo=r(dUr,"RoFormerForSequenceClassification"),dUr.forEach(t),JMo=r(MEe," (RoFormer model)"),MEe.forEach(t),YMo=i(L),Ab=n(L,"LI",{});var EEe=s(Ab);Ute=n(EEe,"STRONG",{});var cUr=s(Ute);KMo=r(cUr,"squeezebert"),cUr.forEach(t),ZMo=r(EEe," \u2014 "),ZI=n(EEe,"A",{href:!0});var fUr=s(ZI);e4o=r(fUr,"SqueezeBertForSequenceClassification"),fUr.forEach(t),o4o=r(EEe," (SqueezeBERT model)"),EEe.forEach(t),r4o=i(L),Lb=n(L,"LI",{});var yEe=s(Lb);Jte=n(yEe,"STRONG",{});var mUr=s(Jte);t4o=r(mUr,"tapas"),mUr.forEach(t),a4o=r(yEe," \u2014 "),ej=n(yEe,"A",{href:!0});var gUr=s(ej);n4o=r(gUr,"TapasForSequenceClassification"),gUr.forEach(t),s4o=r(yEe," (TAPAS model)"),yEe.forEach(t),l4o=i(L),Bb=n(L,"LI",{});var wEe=s(Bb);Yte=n(wEe,"STRONG",{});var hUr=s(Yte);i4o=r(hUr,"transfo-xl"),hUr.forEach(t),d4o=r(wEe," \u2014 "),oj=n(wEe,"A",{href:!0});var pUr=s(oj);c4o=r(pUr,"TransfoXLForSequenceClassification"),pUr.forEach(t),f4o=r(wEe," (Transformer-XL model)"),wEe.forEach(t),m4o=i(L),xb=n(L,"LI",{});var AEe=s(xb);Kte=n(AEe,"STRONG",{});var _Ur=s(Kte);g4o=r(_Ur,"xlm"),_Ur.forEach(t),h4o=r(AEe," \u2014 "),rj=n(AEe,"A",{href:!0});var uUr=s(rj);p4o=r(uUr,"XLMForSequenceClassification"),uUr.forEach(t),_4o=r(AEe," (XLM model)"),AEe.forEach(t),u4o=i(L),kb=n(L,"LI",{});var LEe=s(kb);Zte=n(LEe,"STRONG",{});var bUr=s(Zte);b4o=r(bUr,"xlm-roberta"),bUr.forEach(t),v4o=r(LEe," \u2014 "),tj=n(LEe,"A",{href:!0});var vUr=s(tj);T4o=r(vUr,"XLMRobertaForSequenceClassification"),vUr.forEach(t),F4o=r(LEe," (XLM-RoBERTa model)"),LEe.forEach(t),C4o=i(L),Rb=n(L,"LI",{});var BEe=s(Rb);eae=n(BEe,"STRONG",{});var TUr=s(eae);M4o=r(TUr,"xlm-roberta-xl"),TUr.forEach(t),E4o=r(BEe," \u2014 "),aj=n(BEe,"A",{href:!0});var FUr=s(aj);y4o=r(FUr,"XLMRobertaXLForSequenceClassification"),FUr.forEach(t),w4o=r(BEe," (XLM-RoBERTa-XL model)"),BEe.forEach(t),A4o=i(L),Sb=n(L,"LI",{});var xEe=s(Sb);oae=n(xEe,"STRONG",{});var CUr=s(oae);L4o=r(CUr,"xlnet"),CUr.forEach(t),B4o=r(xEe," \u2014 "),nj=n(xEe,"A",{href:!0});var MUr=s(nj);x4o=r(MUr,"XLNetForSequenceClassification"),MUr.forEach(t),k4o=r(xEe," (XLNet model)"),xEe.forEach(t),R4o=i(L),Pb=n(L,"LI",{});var kEe=s(Pb);rae=n(kEe,"STRONG",{});var EUr=s(rae);S4o=r(EUr,"yoso"),EUr.forEach(t),P4o=r(kEe," \u2014 "),sj=n(kEe,"A",{href:!0});var yUr=s(sj);$4o=r(yUr,"YosoForSequenceClassification"),yUr.forEach(t),I4o=r(kEe," (YOSO model)"),kEe.forEach(t),L.forEach(t),j4o=i(zt),$b=n(zt,"P",{});var REe=s($b);D4o=r(REe,"The model is set in evaluation mode by default using "),tae=n(REe,"CODE",{});var wUr=s(tae);N4o=r(wUr,"model.eval()"),wUr.forEach(t),q4o=r(REe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aae=n(REe,"CODE",{});var AUr=s(aae);O4o=r(AUr,"model.train()"),AUr.forEach(t),REe.forEach(t),G4o=i(zt),nae=n(zt,"P",{});var LUr=s(nae);X4o=r(LUr,"Examples:"),LUr.forEach(t),V4o=i(zt),m(gE.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Axe=i(d),pd=n(d,"H2",{class:!0});var IRe=s(pd);Ib=n(IRe,"A",{id:!0,class:!0,href:!0});var BUr=s(Ib);sae=n(BUr,"SPAN",{});var xUr=s(sae);m(hE.$$.fragment,xUr),xUr.forEach(t),BUr.forEach(t),z4o=i(IRe),lae=n(IRe,"SPAN",{});var kUr=s(lae);W4o=r(kUr,"AutoModelForMultipleChoice"),kUr.forEach(t),IRe.forEach(t),Lxe=i(d),rr=n(d,"DIV",{class:!0});var al=s(rr);m(pE.$$.fragment,al),Q4o=i(al),_d=n(al,"P",{});var $z=s(_d);H4o=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iae=n($z,"CODE",{});var RUr=s(iae);U4o=r(RUr,"from_pretrained()"),RUr.forEach(t),J4o=r($z,"class method or the "),dae=n($z,"CODE",{});var SUr=s(dae);Y4o=r(SUr,"from_config()"),SUr.forEach(t),K4o=r($z,`class
method.`),$z.forEach(t),Z4o=i(al),_E=n(al,"P",{});var jRe=s(_E);eEo=r(jRe,"This class cannot be instantiated directly using "),cae=n(jRe,"CODE",{});var PUr=s(cae);oEo=r(PUr,"__init__()"),PUr.forEach(t),rEo=r(jRe," (throws an error)."),jRe.forEach(t),tEo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(uE.$$.fragment,nl),aEo=i(nl),fae=n(nl,"P",{});var $Ur=s(fae);nEo=r($Ur,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Ur.forEach(t),sEo=i(nl),ud=n(nl,"P",{});var Iz=s(ud);lEo=r(Iz,`Note:
Loading a model from its configuration file does `),mae=n(Iz,"STRONG",{});var IUr=s(mae);iEo=r(IUr,"not"),IUr.forEach(t),dEo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),gae=n(Iz,"CODE",{});var jUr=s(gae);cEo=r(jUr,"from_pretrained()"),jUr.forEach(t),fEo=r(Iz,"to load the model weights."),Iz.forEach(t),mEo=i(nl),hae=n(nl,"P",{});var DUr=s(hae);gEo=r(DUr,"Examples:"),DUr.forEach(t),hEo=i(nl),m(bE.$$.fragment,nl),nl.forEach(t),pEo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(vE.$$.fragment,Wt),_Eo=i(Wt),pae=n(Wt,"P",{});var NUr=s(pae);uEo=r(NUr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NUr.forEach(t),bEo=i(Wt),Ja=n(Wt,"P",{});var rM=s(Ja);vEo=r(rM,"The model class to instantiate is selected based on the "),_ae=n(rM,"CODE",{});var qUr=s(_ae);TEo=r(qUr,"model_type"),qUr.forEach(t),FEo=r(rM,` property of the config object (either
passed as an argument or loaded from `),uae=n(rM,"CODE",{});var OUr=s(uae);CEo=r(OUr,"pretrained_model_name_or_path"),OUr.forEach(t),MEo=r(rM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bae=n(rM,"CODE",{});var GUr=s(bae);EEo=r(GUr,"pretrained_model_name_or_path"),GUr.forEach(t),yEo=r(rM,":"),rM.forEach(t),wEo=i(Wt),O=n(Wt,"UL",{});var G=s(O);jb=n(G,"LI",{});var SEe=s(jb);vae=n(SEe,"STRONG",{});var XUr=s(vae);AEo=r(XUr,"albert"),XUr.forEach(t),LEo=r(SEe," \u2014 "),lj=n(SEe,"A",{href:!0});var VUr=s(lj);BEo=r(VUr,"AlbertForMultipleChoice"),VUr.forEach(t),xEo=r(SEe," (ALBERT model)"),SEe.forEach(t),kEo=i(G),Db=n(G,"LI",{});var PEe=s(Db);Tae=n(PEe,"STRONG",{});var zUr=s(Tae);REo=r(zUr,"bert"),zUr.forEach(t),SEo=r(PEe," \u2014 "),ij=n(PEe,"A",{href:!0});var WUr=s(ij);PEo=r(WUr,"BertForMultipleChoice"),WUr.forEach(t),$Eo=r(PEe," (BERT model)"),PEe.forEach(t),IEo=i(G),Nb=n(G,"LI",{});var $Ee=s(Nb);Fae=n($Ee,"STRONG",{});var QUr=s(Fae);jEo=r(QUr,"big_bird"),QUr.forEach(t),DEo=r($Ee," \u2014 "),dj=n($Ee,"A",{href:!0});var HUr=s(dj);NEo=r(HUr,"BigBirdForMultipleChoice"),HUr.forEach(t),qEo=r($Ee," (BigBird model)"),$Ee.forEach(t),OEo=i(G),qb=n(G,"LI",{});var IEe=s(qb);Cae=n(IEe,"STRONG",{});var UUr=s(Cae);GEo=r(UUr,"camembert"),UUr.forEach(t),XEo=r(IEe," \u2014 "),cj=n(IEe,"A",{href:!0});var JUr=s(cj);VEo=r(JUr,"CamembertForMultipleChoice"),JUr.forEach(t),zEo=r(IEe," (CamemBERT model)"),IEe.forEach(t),WEo=i(G),Ob=n(G,"LI",{});var jEe=s(Ob);Mae=n(jEe,"STRONG",{});var YUr=s(Mae);QEo=r(YUr,"canine"),YUr.forEach(t),HEo=r(jEe," \u2014 "),fj=n(jEe,"A",{href:!0});var KUr=s(fj);UEo=r(KUr,"CanineForMultipleChoice"),KUr.forEach(t),JEo=r(jEe," (Canine model)"),jEe.forEach(t),YEo=i(G),Gb=n(G,"LI",{});var DEe=s(Gb);Eae=n(DEe,"STRONG",{});var ZUr=s(Eae);KEo=r(ZUr,"convbert"),ZUr.forEach(t),ZEo=r(DEe," \u2014 "),mj=n(DEe,"A",{href:!0});var eJr=s(mj);e3o=r(eJr,"ConvBertForMultipleChoice"),eJr.forEach(t),o3o=r(DEe," (ConvBERT model)"),DEe.forEach(t),r3o=i(G),Xb=n(G,"LI",{});var NEe=s(Xb);yae=n(NEe,"STRONG",{});var oJr=s(yae);t3o=r(oJr,"data2vec-text"),oJr.forEach(t),a3o=r(NEe," \u2014 "),gj=n(NEe,"A",{href:!0});var rJr=s(gj);n3o=r(rJr,"Data2VecTextForMultipleChoice"),rJr.forEach(t),s3o=r(NEe," (Data2VecText model)"),NEe.forEach(t),l3o=i(G),Vb=n(G,"LI",{});var qEe=s(Vb);wae=n(qEe,"STRONG",{});var tJr=s(wae);i3o=r(tJr,"distilbert"),tJr.forEach(t),d3o=r(qEe," \u2014 "),hj=n(qEe,"A",{href:!0});var aJr=s(hj);c3o=r(aJr,"DistilBertForMultipleChoice"),aJr.forEach(t),f3o=r(qEe," (DistilBERT model)"),qEe.forEach(t),m3o=i(G),zb=n(G,"LI",{});var OEe=s(zb);Aae=n(OEe,"STRONG",{});var nJr=s(Aae);g3o=r(nJr,"electra"),nJr.forEach(t),h3o=r(OEe," \u2014 "),pj=n(OEe,"A",{href:!0});var sJr=s(pj);p3o=r(sJr,"ElectraForMultipleChoice"),sJr.forEach(t),_3o=r(OEe," (ELECTRA model)"),OEe.forEach(t),u3o=i(G),Wb=n(G,"LI",{});var GEe=s(Wb);Lae=n(GEe,"STRONG",{});var lJr=s(Lae);b3o=r(lJr,"flaubert"),lJr.forEach(t),v3o=r(GEe," \u2014 "),_j=n(GEe,"A",{href:!0});var iJr=s(_j);T3o=r(iJr,"FlaubertForMultipleChoice"),iJr.forEach(t),F3o=r(GEe," (FlauBERT model)"),GEe.forEach(t),C3o=i(G),Qb=n(G,"LI",{});var XEe=s(Qb);Bae=n(XEe,"STRONG",{});var dJr=s(Bae);M3o=r(dJr,"fnet"),dJr.forEach(t),E3o=r(XEe," \u2014 "),uj=n(XEe,"A",{href:!0});var cJr=s(uj);y3o=r(cJr,"FNetForMultipleChoice"),cJr.forEach(t),w3o=r(XEe," (FNet model)"),XEe.forEach(t),A3o=i(G),Hb=n(G,"LI",{});var VEe=s(Hb);xae=n(VEe,"STRONG",{});var fJr=s(xae);L3o=r(fJr,"funnel"),fJr.forEach(t),B3o=r(VEe," \u2014 "),bj=n(VEe,"A",{href:!0});var mJr=s(bj);x3o=r(mJr,"FunnelForMultipleChoice"),mJr.forEach(t),k3o=r(VEe," (Funnel Transformer model)"),VEe.forEach(t),R3o=i(G),Ub=n(G,"LI",{});var zEe=s(Ub);kae=n(zEe,"STRONG",{});var gJr=s(kae);S3o=r(gJr,"ibert"),gJr.forEach(t),P3o=r(zEe," \u2014 "),vj=n(zEe,"A",{href:!0});var hJr=s(vj);$3o=r(hJr,"IBertForMultipleChoice"),hJr.forEach(t),I3o=r(zEe," (I-BERT model)"),zEe.forEach(t),j3o=i(G),Jb=n(G,"LI",{});var WEe=s(Jb);Rae=n(WEe,"STRONG",{});var pJr=s(Rae);D3o=r(pJr,"longformer"),pJr.forEach(t),N3o=r(WEe," \u2014 "),Tj=n(WEe,"A",{href:!0});var _Jr=s(Tj);q3o=r(_Jr,"LongformerForMultipleChoice"),_Jr.forEach(t),O3o=r(WEe," (Longformer model)"),WEe.forEach(t),G3o=i(G),Yb=n(G,"LI",{});var QEe=s(Yb);Sae=n(QEe,"STRONG",{});var uJr=s(Sae);X3o=r(uJr,"megatron-bert"),uJr.forEach(t),V3o=r(QEe," \u2014 "),Fj=n(QEe,"A",{href:!0});var bJr=s(Fj);z3o=r(bJr,"MegatronBertForMultipleChoice"),bJr.forEach(t),W3o=r(QEe," (MegatronBert model)"),QEe.forEach(t),Q3o=i(G),Kb=n(G,"LI",{});var HEe=s(Kb);Pae=n(HEe,"STRONG",{});var vJr=s(Pae);H3o=r(vJr,"mobilebert"),vJr.forEach(t),U3o=r(HEe," \u2014 "),Cj=n(HEe,"A",{href:!0});var TJr=s(Cj);J3o=r(TJr,"MobileBertForMultipleChoice"),TJr.forEach(t),Y3o=r(HEe," (MobileBERT model)"),HEe.forEach(t),K3o=i(G),Zb=n(G,"LI",{});var UEe=s(Zb);$ae=n(UEe,"STRONG",{});var FJr=s($ae);Z3o=r(FJr,"mpnet"),FJr.forEach(t),eyo=r(UEe," \u2014 "),Mj=n(UEe,"A",{href:!0});var CJr=s(Mj);oyo=r(CJr,"MPNetForMultipleChoice"),CJr.forEach(t),ryo=r(UEe," (MPNet model)"),UEe.forEach(t),tyo=i(G),e5=n(G,"LI",{});var JEe=s(e5);Iae=n(JEe,"STRONG",{});var MJr=s(Iae);ayo=r(MJr,"nystromformer"),MJr.forEach(t),nyo=r(JEe," \u2014 "),Ej=n(JEe,"A",{href:!0});var EJr=s(Ej);syo=r(EJr,"NystromformerForMultipleChoice"),EJr.forEach(t),lyo=r(JEe," (Nystromformer model)"),JEe.forEach(t),iyo=i(G),o5=n(G,"LI",{});var YEe=s(o5);jae=n(YEe,"STRONG",{});var yJr=s(jae);dyo=r(yJr,"qdqbert"),yJr.forEach(t),cyo=r(YEe," \u2014 "),yj=n(YEe,"A",{href:!0});var wJr=s(yj);fyo=r(wJr,"QDQBertForMultipleChoice"),wJr.forEach(t),myo=r(YEe," (QDQBert model)"),YEe.forEach(t),gyo=i(G),r5=n(G,"LI",{});var KEe=s(r5);Dae=n(KEe,"STRONG",{});var AJr=s(Dae);hyo=r(AJr,"rembert"),AJr.forEach(t),pyo=r(KEe," \u2014 "),wj=n(KEe,"A",{href:!0});var LJr=s(wj);_yo=r(LJr,"RemBertForMultipleChoice"),LJr.forEach(t),uyo=r(KEe," (RemBERT model)"),KEe.forEach(t),byo=i(G),t5=n(G,"LI",{});var ZEe=s(t5);Nae=n(ZEe,"STRONG",{});var BJr=s(Nae);vyo=r(BJr,"roberta"),BJr.forEach(t),Tyo=r(ZEe," \u2014 "),Aj=n(ZEe,"A",{href:!0});var xJr=s(Aj);Fyo=r(xJr,"RobertaForMultipleChoice"),xJr.forEach(t),Cyo=r(ZEe," (RoBERTa model)"),ZEe.forEach(t),Myo=i(G),a5=n(G,"LI",{});var e3e=s(a5);qae=n(e3e,"STRONG",{});var kJr=s(qae);Eyo=r(kJr,"roformer"),kJr.forEach(t),yyo=r(e3e," \u2014 "),Lj=n(e3e,"A",{href:!0});var RJr=s(Lj);wyo=r(RJr,"RoFormerForMultipleChoice"),RJr.forEach(t),Ayo=r(e3e," (RoFormer model)"),e3e.forEach(t),Lyo=i(G),n5=n(G,"LI",{});var o3e=s(n5);Oae=n(o3e,"STRONG",{});var SJr=s(Oae);Byo=r(SJr,"squeezebert"),SJr.forEach(t),xyo=r(o3e," \u2014 "),Bj=n(o3e,"A",{href:!0});var PJr=s(Bj);kyo=r(PJr,"SqueezeBertForMultipleChoice"),PJr.forEach(t),Ryo=r(o3e," (SqueezeBERT model)"),o3e.forEach(t),Syo=i(G),s5=n(G,"LI",{});var r3e=s(s5);Gae=n(r3e,"STRONG",{});var $Jr=s(Gae);Pyo=r($Jr,"xlm"),$Jr.forEach(t),$yo=r(r3e," \u2014 "),xj=n(r3e,"A",{href:!0});var IJr=s(xj);Iyo=r(IJr,"XLMForMultipleChoice"),IJr.forEach(t),jyo=r(r3e," (XLM model)"),r3e.forEach(t),Dyo=i(G),l5=n(G,"LI",{});var t3e=s(l5);Xae=n(t3e,"STRONG",{});var jJr=s(Xae);Nyo=r(jJr,"xlm-roberta"),jJr.forEach(t),qyo=r(t3e," \u2014 "),kj=n(t3e,"A",{href:!0});var DJr=s(kj);Oyo=r(DJr,"XLMRobertaForMultipleChoice"),DJr.forEach(t),Gyo=r(t3e," (XLM-RoBERTa model)"),t3e.forEach(t),Xyo=i(G),i5=n(G,"LI",{});var a3e=s(i5);Vae=n(a3e,"STRONG",{});var NJr=s(Vae);Vyo=r(NJr,"xlm-roberta-xl"),NJr.forEach(t),zyo=r(a3e," \u2014 "),Rj=n(a3e,"A",{href:!0});var qJr=s(Rj);Wyo=r(qJr,"XLMRobertaXLForMultipleChoice"),qJr.forEach(t),Qyo=r(a3e," (XLM-RoBERTa-XL model)"),a3e.forEach(t),Hyo=i(G),d5=n(G,"LI",{});var n3e=s(d5);zae=n(n3e,"STRONG",{});var OJr=s(zae);Uyo=r(OJr,"xlnet"),OJr.forEach(t),Jyo=r(n3e," \u2014 "),Sj=n(n3e,"A",{href:!0});var GJr=s(Sj);Yyo=r(GJr,"XLNetForMultipleChoice"),GJr.forEach(t),Kyo=r(n3e," (XLNet model)"),n3e.forEach(t),Zyo=i(G),c5=n(G,"LI",{});var s3e=s(c5);Wae=n(s3e,"STRONG",{});var XJr=s(Wae);ewo=r(XJr,"yoso"),XJr.forEach(t),owo=r(s3e," \u2014 "),Pj=n(s3e,"A",{href:!0});var VJr=s(Pj);rwo=r(VJr,"YosoForMultipleChoice"),VJr.forEach(t),two=r(s3e," (YOSO model)"),s3e.forEach(t),G.forEach(t),awo=i(Wt),f5=n(Wt,"P",{});var l3e=s(f5);nwo=r(l3e,"The model is set in evaluation mode by default using "),Qae=n(l3e,"CODE",{});var zJr=s(Qae);swo=r(zJr,"model.eval()"),zJr.forEach(t),lwo=r(l3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=n(l3e,"CODE",{});var WJr=s(Hae);iwo=r(WJr,"model.train()"),WJr.forEach(t),l3e.forEach(t),dwo=i(Wt),Uae=n(Wt,"P",{});var QJr=s(Uae);cwo=r(QJr,"Examples:"),QJr.forEach(t),fwo=i(Wt),m(TE.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Bxe=i(d),bd=n(d,"H2",{class:!0});var DRe=s(bd);m5=n(DRe,"A",{id:!0,class:!0,href:!0});var HJr=s(m5);Jae=n(HJr,"SPAN",{});var UJr=s(Jae);m(FE.$$.fragment,UJr),UJr.forEach(t),HJr.forEach(t),mwo=i(DRe),Yae=n(DRe,"SPAN",{});var JJr=s(Yae);gwo=r(JJr,"AutoModelForNextSentencePrediction"),JJr.forEach(t),DRe.forEach(t),xxe=i(d),tr=n(d,"DIV",{class:!0});var sl=s(tr);m(CE.$$.fragment,sl),hwo=i(sl),vd=n(sl,"P",{});var jz=s(vd);pwo=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kae=n(jz,"CODE",{});var YJr=s(Kae);_wo=r(YJr,"from_pretrained()"),YJr.forEach(t),uwo=r(jz,"class method or the "),Zae=n(jz,"CODE",{});var KJr=s(Zae);bwo=r(KJr,"from_config()"),KJr.forEach(t),vwo=r(jz,`class
method.`),jz.forEach(t),Two=i(sl),ME=n(sl,"P",{});var NRe=s(ME);Fwo=r(NRe,"This class cannot be instantiated directly using "),ene=n(NRe,"CODE",{});var ZJr=s(ene);Cwo=r(ZJr,"__init__()"),ZJr.forEach(t),Mwo=r(NRe," (throws an error)."),NRe.forEach(t),Ewo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(EE.$$.fragment,ll),ywo=i(ll),one=n(ll,"P",{});var eYr=s(one);wwo=r(eYr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eYr.forEach(t),Awo=i(ll),Td=n(ll,"P",{});var Dz=s(Td);Lwo=r(Dz,`Note:
Loading a model from its configuration file does `),rne=n(Dz,"STRONG",{});var oYr=s(rne);Bwo=r(oYr,"not"),oYr.forEach(t),xwo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=n(Dz,"CODE",{});var rYr=s(tne);kwo=r(rYr,"from_pretrained()"),rYr.forEach(t),Rwo=r(Dz,"to load the model weights."),Dz.forEach(t),Swo=i(ll),ane=n(ll,"P",{});var tYr=s(ane);Pwo=r(tYr,"Examples:"),tYr.forEach(t),$wo=i(ll),m(yE.$$.fragment,ll),ll.forEach(t),Iwo=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(wE.$$.fragment,Qt),jwo=i(Qt),nne=n(Qt,"P",{});var aYr=s(nne);Dwo=r(aYr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aYr.forEach(t),Nwo=i(Qt),Ya=n(Qt,"P",{});var tM=s(Ya);qwo=r(tM,"The model class to instantiate is selected based on the "),sne=n(tM,"CODE",{});var nYr=s(sne);Owo=r(nYr,"model_type"),nYr.forEach(t),Gwo=r(tM,` property of the config object (either
passed as an argument or loaded from `),lne=n(tM,"CODE",{});var sYr=s(lne);Xwo=r(sYr,"pretrained_model_name_or_path"),sYr.forEach(t),Vwo=r(tM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=n(tM,"CODE",{});var lYr=s(ine);zwo=r(lYr,"pretrained_model_name_or_path"),lYr.forEach(t),Wwo=r(tM,":"),tM.forEach(t),Qwo=i(Qt),da=n(Qt,"UL",{});var il=s(da);g5=n(il,"LI",{});var i3e=s(g5);dne=n(i3e,"STRONG",{});var iYr=s(dne);Hwo=r(iYr,"bert"),iYr.forEach(t),Uwo=r(i3e," \u2014 "),$j=n(i3e,"A",{href:!0});var dYr=s($j);Jwo=r(dYr,"BertForNextSentencePrediction"),dYr.forEach(t),Ywo=r(i3e," (BERT model)"),i3e.forEach(t),Kwo=i(il),h5=n(il,"LI",{});var d3e=s(h5);cne=n(d3e,"STRONG",{});var cYr=s(cne);Zwo=r(cYr,"fnet"),cYr.forEach(t),e6o=r(d3e," \u2014 "),Ij=n(d3e,"A",{href:!0});var fYr=s(Ij);o6o=r(fYr,"FNetForNextSentencePrediction"),fYr.forEach(t),r6o=r(d3e," (FNet model)"),d3e.forEach(t),t6o=i(il),p5=n(il,"LI",{});var c3e=s(p5);fne=n(c3e,"STRONG",{});var mYr=s(fne);a6o=r(mYr,"megatron-bert"),mYr.forEach(t),n6o=r(c3e," \u2014 "),jj=n(c3e,"A",{href:!0});var gYr=s(jj);s6o=r(gYr,"MegatronBertForNextSentencePrediction"),gYr.forEach(t),l6o=r(c3e," (MegatronBert model)"),c3e.forEach(t),i6o=i(il),_5=n(il,"LI",{});var f3e=s(_5);mne=n(f3e,"STRONG",{});var hYr=s(mne);d6o=r(hYr,"mobilebert"),hYr.forEach(t),c6o=r(f3e," \u2014 "),Dj=n(f3e,"A",{href:!0});var pYr=s(Dj);f6o=r(pYr,"MobileBertForNextSentencePrediction"),pYr.forEach(t),m6o=r(f3e," (MobileBERT model)"),f3e.forEach(t),g6o=i(il),u5=n(il,"LI",{});var m3e=s(u5);gne=n(m3e,"STRONG",{});var _Yr=s(gne);h6o=r(_Yr,"qdqbert"),_Yr.forEach(t),p6o=r(m3e," \u2014 "),Nj=n(m3e,"A",{href:!0});var uYr=s(Nj);_6o=r(uYr,"QDQBertForNextSentencePrediction"),uYr.forEach(t),u6o=r(m3e," (QDQBert model)"),m3e.forEach(t),il.forEach(t),b6o=i(Qt),b5=n(Qt,"P",{});var g3e=s(b5);v6o=r(g3e,"The model is set in evaluation mode by default using "),hne=n(g3e,"CODE",{});var bYr=s(hne);T6o=r(bYr,"model.eval()"),bYr.forEach(t),F6o=r(g3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pne=n(g3e,"CODE",{});var vYr=s(pne);C6o=r(vYr,"model.train()"),vYr.forEach(t),g3e.forEach(t),M6o=i(Qt),_ne=n(Qt,"P",{});var TYr=s(_ne);E6o=r(TYr,"Examples:"),TYr.forEach(t),y6o=i(Qt),m(AE.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),kxe=i(d),Fd=n(d,"H2",{class:!0});var qRe=s(Fd);v5=n(qRe,"A",{id:!0,class:!0,href:!0});var FYr=s(v5);une=n(FYr,"SPAN",{});var CYr=s(une);m(LE.$$.fragment,CYr),CYr.forEach(t),FYr.forEach(t),w6o=i(qRe),bne=n(qRe,"SPAN",{});var MYr=s(bne);A6o=r(MYr,"AutoModelForTokenClassification"),MYr.forEach(t),qRe.forEach(t),Rxe=i(d),ar=n(d,"DIV",{class:!0});var dl=s(ar);m(BE.$$.fragment,dl),L6o=i(dl),Cd=n(dl,"P",{});var Nz=s(Cd);B6o=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vne=n(Nz,"CODE",{});var EYr=s(vne);x6o=r(EYr,"from_pretrained()"),EYr.forEach(t),k6o=r(Nz,"class method or the "),Tne=n(Nz,"CODE",{});var yYr=s(Tne);R6o=r(yYr,"from_config()"),yYr.forEach(t),S6o=r(Nz,`class
method.`),Nz.forEach(t),P6o=i(dl),xE=n(dl,"P",{});var ORe=s(xE);$6o=r(ORe,"This class cannot be instantiated directly using "),Fne=n(ORe,"CODE",{});var wYr=s(Fne);I6o=r(wYr,"__init__()"),wYr.forEach(t),j6o=r(ORe," (throws an error)."),ORe.forEach(t),D6o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(kE.$$.fragment,cl),N6o=i(cl),Cne=n(cl,"P",{});var AYr=s(Cne);q6o=r(AYr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AYr.forEach(t),O6o=i(cl),Md=n(cl,"P",{});var qz=s(Md);G6o=r(qz,`Note:
Loading a model from its configuration file does `),Mne=n(qz,"STRONG",{});var LYr=s(Mne);X6o=r(LYr,"not"),LYr.forEach(t),V6o=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ene=n(qz,"CODE",{});var BYr=s(Ene);z6o=r(BYr,"from_pretrained()"),BYr.forEach(t),W6o=r(qz,"to load the model weights."),qz.forEach(t),Q6o=i(cl),yne=n(cl,"P",{});var xYr=s(yne);H6o=r(xYr,"Examples:"),xYr.forEach(t),U6o=i(cl),m(RE.$$.fragment,cl),cl.forEach(t),J6o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(SE.$$.fragment,Ht),Y6o=i(Ht),wne=n(Ht,"P",{});var kYr=s(wne);K6o=r(kYr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kYr.forEach(t),Z6o=i(Ht),Ka=n(Ht,"P",{});var aM=s(Ka);eAo=r(aM,"The model class to instantiate is selected based on the "),Ane=n(aM,"CODE",{});var RYr=s(Ane);oAo=r(RYr,"model_type"),RYr.forEach(t),rAo=r(aM,` property of the config object (either
passed as an argument or loaded from `),Lne=n(aM,"CODE",{});var SYr=s(Lne);tAo=r(SYr,"pretrained_model_name_or_path"),SYr.forEach(t),aAo=r(aM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=n(aM,"CODE",{});var PYr=s(Bne);nAo=r(PYr,"pretrained_model_name_or_path"),PYr.forEach(t),sAo=r(aM,":"),aM.forEach(t),lAo=i(Ht),N=n(Ht,"UL",{});var q=s(N);T5=n(q,"LI",{});var h3e=s(T5);xne=n(h3e,"STRONG",{});var $Yr=s(xne);iAo=r($Yr,"albert"),$Yr.forEach(t),dAo=r(h3e," \u2014 "),qj=n(h3e,"A",{href:!0});var IYr=s(qj);cAo=r(IYr,"AlbertForTokenClassification"),IYr.forEach(t),fAo=r(h3e," (ALBERT model)"),h3e.forEach(t),mAo=i(q),F5=n(q,"LI",{});var p3e=s(F5);kne=n(p3e,"STRONG",{});var jYr=s(kne);gAo=r(jYr,"bert"),jYr.forEach(t),hAo=r(p3e," \u2014 "),Oj=n(p3e,"A",{href:!0});var DYr=s(Oj);pAo=r(DYr,"BertForTokenClassification"),DYr.forEach(t),_Ao=r(p3e," (BERT model)"),p3e.forEach(t),uAo=i(q),C5=n(q,"LI",{});var _3e=s(C5);Rne=n(_3e,"STRONG",{});var NYr=s(Rne);bAo=r(NYr,"big_bird"),NYr.forEach(t),vAo=r(_3e," \u2014 "),Gj=n(_3e,"A",{href:!0});var qYr=s(Gj);TAo=r(qYr,"BigBirdForTokenClassification"),qYr.forEach(t),FAo=r(_3e," (BigBird model)"),_3e.forEach(t),CAo=i(q),M5=n(q,"LI",{});var u3e=s(M5);Sne=n(u3e,"STRONG",{});var OYr=s(Sne);MAo=r(OYr,"camembert"),OYr.forEach(t),EAo=r(u3e," \u2014 "),Xj=n(u3e,"A",{href:!0});var GYr=s(Xj);yAo=r(GYr,"CamembertForTokenClassification"),GYr.forEach(t),wAo=r(u3e," (CamemBERT model)"),u3e.forEach(t),AAo=i(q),E5=n(q,"LI",{});var b3e=s(E5);Pne=n(b3e,"STRONG",{});var XYr=s(Pne);LAo=r(XYr,"canine"),XYr.forEach(t),BAo=r(b3e," \u2014 "),Vj=n(b3e,"A",{href:!0});var VYr=s(Vj);xAo=r(VYr,"CanineForTokenClassification"),VYr.forEach(t),kAo=r(b3e," (Canine model)"),b3e.forEach(t),RAo=i(q),y5=n(q,"LI",{});var v3e=s(y5);$ne=n(v3e,"STRONG",{});var zYr=s($ne);SAo=r(zYr,"convbert"),zYr.forEach(t),PAo=r(v3e," \u2014 "),zj=n(v3e,"A",{href:!0});var WYr=s(zj);$Ao=r(WYr,"ConvBertForTokenClassification"),WYr.forEach(t),IAo=r(v3e," (ConvBERT model)"),v3e.forEach(t),jAo=i(q),w5=n(q,"LI",{});var T3e=s(w5);Ine=n(T3e,"STRONG",{});var QYr=s(Ine);DAo=r(QYr,"data2vec-text"),QYr.forEach(t),NAo=r(T3e," \u2014 "),Wj=n(T3e,"A",{href:!0});var HYr=s(Wj);qAo=r(HYr,"Data2VecTextForTokenClassification"),HYr.forEach(t),OAo=r(T3e," (Data2VecText model)"),T3e.forEach(t),GAo=i(q),A5=n(q,"LI",{});var F3e=s(A5);jne=n(F3e,"STRONG",{});var UYr=s(jne);XAo=r(UYr,"deberta"),UYr.forEach(t),VAo=r(F3e," \u2014 "),Qj=n(F3e,"A",{href:!0});var JYr=s(Qj);zAo=r(JYr,"DebertaForTokenClassification"),JYr.forEach(t),WAo=r(F3e," (DeBERTa model)"),F3e.forEach(t),QAo=i(q),L5=n(q,"LI",{});var C3e=s(L5);Dne=n(C3e,"STRONG",{});var YYr=s(Dne);HAo=r(YYr,"deberta-v2"),YYr.forEach(t),UAo=r(C3e," \u2014 "),Hj=n(C3e,"A",{href:!0});var KYr=s(Hj);JAo=r(KYr,"DebertaV2ForTokenClassification"),KYr.forEach(t),YAo=r(C3e," (DeBERTa-v2 model)"),C3e.forEach(t),KAo=i(q),B5=n(q,"LI",{});var M3e=s(B5);Nne=n(M3e,"STRONG",{});var ZYr=s(Nne);ZAo=r(ZYr,"distilbert"),ZYr.forEach(t),eLo=r(M3e," \u2014 "),Uj=n(M3e,"A",{href:!0});var eKr=s(Uj);oLo=r(eKr,"DistilBertForTokenClassification"),eKr.forEach(t),rLo=r(M3e," (DistilBERT model)"),M3e.forEach(t),tLo=i(q),x5=n(q,"LI",{});var E3e=s(x5);qne=n(E3e,"STRONG",{});var oKr=s(qne);aLo=r(oKr,"electra"),oKr.forEach(t),nLo=r(E3e," \u2014 "),Jj=n(E3e,"A",{href:!0});var rKr=s(Jj);sLo=r(rKr,"ElectraForTokenClassification"),rKr.forEach(t),lLo=r(E3e," (ELECTRA model)"),E3e.forEach(t),iLo=i(q),k5=n(q,"LI",{});var y3e=s(k5);One=n(y3e,"STRONG",{});var tKr=s(One);dLo=r(tKr,"flaubert"),tKr.forEach(t),cLo=r(y3e," \u2014 "),Yj=n(y3e,"A",{href:!0});var aKr=s(Yj);fLo=r(aKr,"FlaubertForTokenClassification"),aKr.forEach(t),mLo=r(y3e," (FlauBERT model)"),y3e.forEach(t),gLo=i(q),R5=n(q,"LI",{});var w3e=s(R5);Gne=n(w3e,"STRONG",{});var nKr=s(Gne);hLo=r(nKr,"fnet"),nKr.forEach(t),pLo=r(w3e," \u2014 "),Kj=n(w3e,"A",{href:!0});var sKr=s(Kj);_Lo=r(sKr,"FNetForTokenClassification"),sKr.forEach(t),uLo=r(w3e," (FNet model)"),w3e.forEach(t),bLo=i(q),S5=n(q,"LI",{});var A3e=s(S5);Xne=n(A3e,"STRONG",{});var lKr=s(Xne);vLo=r(lKr,"funnel"),lKr.forEach(t),TLo=r(A3e," \u2014 "),Zj=n(A3e,"A",{href:!0});var iKr=s(Zj);FLo=r(iKr,"FunnelForTokenClassification"),iKr.forEach(t),CLo=r(A3e," (Funnel Transformer model)"),A3e.forEach(t),MLo=i(q),P5=n(q,"LI",{});var L3e=s(P5);Vne=n(L3e,"STRONG",{});var dKr=s(Vne);ELo=r(dKr,"gpt2"),dKr.forEach(t),yLo=r(L3e," \u2014 "),eD=n(L3e,"A",{href:!0});var cKr=s(eD);wLo=r(cKr,"GPT2ForTokenClassification"),cKr.forEach(t),ALo=r(L3e," (OpenAI GPT-2 model)"),L3e.forEach(t),LLo=i(q),$5=n(q,"LI",{});var B3e=s($5);zne=n(B3e,"STRONG",{});var fKr=s(zne);BLo=r(fKr,"ibert"),fKr.forEach(t),xLo=r(B3e," \u2014 "),oD=n(B3e,"A",{href:!0});var mKr=s(oD);kLo=r(mKr,"IBertForTokenClassification"),mKr.forEach(t),RLo=r(B3e," (I-BERT model)"),B3e.forEach(t),SLo=i(q),I5=n(q,"LI",{});var x3e=s(I5);Wne=n(x3e,"STRONG",{});var gKr=s(Wne);PLo=r(gKr,"layoutlm"),gKr.forEach(t),$Lo=r(x3e," \u2014 "),rD=n(x3e,"A",{href:!0});var hKr=s(rD);ILo=r(hKr,"LayoutLMForTokenClassification"),hKr.forEach(t),jLo=r(x3e," (LayoutLM model)"),x3e.forEach(t),DLo=i(q),j5=n(q,"LI",{});var k3e=s(j5);Qne=n(k3e,"STRONG",{});var pKr=s(Qne);NLo=r(pKr,"layoutlmv2"),pKr.forEach(t),qLo=r(k3e," \u2014 "),tD=n(k3e,"A",{href:!0});var _Kr=s(tD);OLo=r(_Kr,"LayoutLMv2ForTokenClassification"),_Kr.forEach(t),GLo=r(k3e," (LayoutLMv2 model)"),k3e.forEach(t),XLo=i(q),D5=n(q,"LI",{});var R3e=s(D5);Hne=n(R3e,"STRONG",{});var uKr=s(Hne);VLo=r(uKr,"longformer"),uKr.forEach(t),zLo=r(R3e," \u2014 "),aD=n(R3e,"A",{href:!0});var bKr=s(aD);WLo=r(bKr,"LongformerForTokenClassification"),bKr.forEach(t),QLo=r(R3e," (Longformer model)"),R3e.forEach(t),HLo=i(q),N5=n(q,"LI",{});var S3e=s(N5);Une=n(S3e,"STRONG",{});var vKr=s(Une);ULo=r(vKr,"megatron-bert"),vKr.forEach(t),JLo=r(S3e," \u2014 "),nD=n(S3e,"A",{href:!0});var TKr=s(nD);YLo=r(TKr,"MegatronBertForTokenClassification"),TKr.forEach(t),KLo=r(S3e," (MegatronBert model)"),S3e.forEach(t),ZLo=i(q),q5=n(q,"LI",{});var P3e=s(q5);Jne=n(P3e,"STRONG",{});var FKr=s(Jne);e8o=r(FKr,"mobilebert"),FKr.forEach(t),o8o=r(P3e," \u2014 "),sD=n(P3e,"A",{href:!0});var CKr=s(sD);r8o=r(CKr,"MobileBertForTokenClassification"),CKr.forEach(t),t8o=r(P3e," (MobileBERT model)"),P3e.forEach(t),a8o=i(q),O5=n(q,"LI",{});var $3e=s(O5);Yne=n($3e,"STRONG",{});var MKr=s(Yne);n8o=r(MKr,"mpnet"),MKr.forEach(t),s8o=r($3e," \u2014 "),lD=n($3e,"A",{href:!0});var EKr=s(lD);l8o=r(EKr,"MPNetForTokenClassification"),EKr.forEach(t),i8o=r($3e," (MPNet model)"),$3e.forEach(t),d8o=i(q),G5=n(q,"LI",{});var I3e=s(G5);Kne=n(I3e,"STRONG",{});var yKr=s(Kne);c8o=r(yKr,"nystromformer"),yKr.forEach(t),f8o=r(I3e," \u2014 "),iD=n(I3e,"A",{href:!0});var wKr=s(iD);m8o=r(wKr,"NystromformerForTokenClassification"),wKr.forEach(t),g8o=r(I3e," (Nystromformer model)"),I3e.forEach(t),h8o=i(q),X5=n(q,"LI",{});var j3e=s(X5);Zne=n(j3e,"STRONG",{});var AKr=s(Zne);p8o=r(AKr,"qdqbert"),AKr.forEach(t),_8o=r(j3e," \u2014 "),dD=n(j3e,"A",{href:!0});var LKr=s(dD);u8o=r(LKr,"QDQBertForTokenClassification"),LKr.forEach(t),b8o=r(j3e," (QDQBert model)"),j3e.forEach(t),v8o=i(q),V5=n(q,"LI",{});var D3e=s(V5);ese=n(D3e,"STRONG",{});var BKr=s(ese);T8o=r(BKr,"rembert"),BKr.forEach(t),F8o=r(D3e," \u2014 "),cD=n(D3e,"A",{href:!0});var xKr=s(cD);C8o=r(xKr,"RemBertForTokenClassification"),xKr.forEach(t),M8o=r(D3e," (RemBERT model)"),D3e.forEach(t),E8o=i(q),z5=n(q,"LI",{});var N3e=s(z5);ose=n(N3e,"STRONG",{});var kKr=s(ose);y8o=r(kKr,"roberta"),kKr.forEach(t),w8o=r(N3e," \u2014 "),fD=n(N3e,"A",{href:!0});var RKr=s(fD);A8o=r(RKr,"RobertaForTokenClassification"),RKr.forEach(t),L8o=r(N3e," (RoBERTa model)"),N3e.forEach(t),B8o=i(q),W5=n(q,"LI",{});var q3e=s(W5);rse=n(q3e,"STRONG",{});var SKr=s(rse);x8o=r(SKr,"roformer"),SKr.forEach(t),k8o=r(q3e," \u2014 "),mD=n(q3e,"A",{href:!0});var PKr=s(mD);R8o=r(PKr,"RoFormerForTokenClassification"),PKr.forEach(t),S8o=r(q3e," (RoFormer model)"),q3e.forEach(t),P8o=i(q),Q5=n(q,"LI",{});var O3e=s(Q5);tse=n(O3e,"STRONG",{});var $Kr=s(tse);$8o=r($Kr,"squeezebert"),$Kr.forEach(t),I8o=r(O3e," \u2014 "),gD=n(O3e,"A",{href:!0});var IKr=s(gD);j8o=r(IKr,"SqueezeBertForTokenClassification"),IKr.forEach(t),D8o=r(O3e," (SqueezeBERT model)"),O3e.forEach(t),N8o=i(q),H5=n(q,"LI",{});var G3e=s(H5);ase=n(G3e,"STRONG",{});var jKr=s(ase);q8o=r(jKr,"xlm"),jKr.forEach(t),O8o=r(G3e," \u2014 "),hD=n(G3e,"A",{href:!0});var DKr=s(hD);G8o=r(DKr,"XLMForTokenClassification"),DKr.forEach(t),X8o=r(G3e," (XLM model)"),G3e.forEach(t),V8o=i(q),U5=n(q,"LI",{});var X3e=s(U5);nse=n(X3e,"STRONG",{});var NKr=s(nse);z8o=r(NKr,"xlm-roberta"),NKr.forEach(t),W8o=r(X3e," \u2014 "),pD=n(X3e,"A",{href:!0});var qKr=s(pD);Q8o=r(qKr,"XLMRobertaForTokenClassification"),qKr.forEach(t),H8o=r(X3e," (XLM-RoBERTa model)"),X3e.forEach(t),U8o=i(q),J5=n(q,"LI",{});var V3e=s(J5);sse=n(V3e,"STRONG",{});var OKr=s(sse);J8o=r(OKr,"xlm-roberta-xl"),OKr.forEach(t),Y8o=r(V3e," \u2014 "),_D=n(V3e,"A",{href:!0});var GKr=s(_D);K8o=r(GKr,"XLMRobertaXLForTokenClassification"),GKr.forEach(t),Z8o=r(V3e," (XLM-RoBERTa-XL model)"),V3e.forEach(t),eBo=i(q),Y5=n(q,"LI",{});var z3e=s(Y5);lse=n(z3e,"STRONG",{});var XKr=s(lse);oBo=r(XKr,"xlnet"),XKr.forEach(t),rBo=r(z3e," \u2014 "),uD=n(z3e,"A",{href:!0});var VKr=s(uD);tBo=r(VKr,"XLNetForTokenClassification"),VKr.forEach(t),aBo=r(z3e," (XLNet model)"),z3e.forEach(t),nBo=i(q),K5=n(q,"LI",{});var W3e=s(K5);ise=n(W3e,"STRONG",{});var zKr=s(ise);sBo=r(zKr,"yoso"),zKr.forEach(t),lBo=r(W3e," \u2014 "),bD=n(W3e,"A",{href:!0});var WKr=s(bD);iBo=r(WKr,"YosoForTokenClassification"),WKr.forEach(t),dBo=r(W3e," (YOSO model)"),W3e.forEach(t),q.forEach(t),cBo=i(Ht),Z5=n(Ht,"P",{});var Q3e=s(Z5);fBo=r(Q3e,"The model is set in evaluation mode by default using "),dse=n(Q3e,"CODE",{});var QKr=s(dse);mBo=r(QKr,"model.eval()"),QKr.forEach(t),gBo=r(Q3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cse=n(Q3e,"CODE",{});var HKr=s(cse);hBo=r(HKr,"model.train()"),HKr.forEach(t),Q3e.forEach(t),pBo=i(Ht),fse=n(Ht,"P",{});var UKr=s(fse);_Bo=r(UKr,"Examples:"),UKr.forEach(t),uBo=i(Ht),m(PE.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Sxe=i(d),Ed=n(d,"H2",{class:!0});var GRe=s(Ed);e2=n(GRe,"A",{id:!0,class:!0,href:!0});var JKr=s(e2);mse=n(JKr,"SPAN",{});var YKr=s(mse);m($E.$$.fragment,YKr),YKr.forEach(t),JKr.forEach(t),bBo=i(GRe),gse=n(GRe,"SPAN",{});var KKr=s(gse);vBo=r(KKr,"AutoModelForQuestionAnswering"),KKr.forEach(t),GRe.forEach(t),Pxe=i(d),nr=n(d,"DIV",{class:!0});var fl=s(nr);m(IE.$$.fragment,fl),TBo=i(fl),yd=n(fl,"P",{});var Oz=s(yd);FBo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hse=n(Oz,"CODE",{});var ZKr=s(hse);CBo=r(ZKr,"from_pretrained()"),ZKr.forEach(t),MBo=r(Oz,"class method or the "),pse=n(Oz,"CODE",{});var eZr=s(pse);EBo=r(eZr,"from_config()"),eZr.forEach(t),yBo=r(Oz,`class
method.`),Oz.forEach(t),wBo=i(fl),jE=n(fl,"P",{});var XRe=s(jE);ABo=r(XRe,"This class cannot be instantiated directly using "),_se=n(XRe,"CODE",{});var oZr=s(_se);LBo=r(oZr,"__init__()"),oZr.forEach(t),BBo=r(XRe," (throws an error)."),XRe.forEach(t),xBo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(DE.$$.fragment,ml),kBo=i(ml),use=n(ml,"P",{});var rZr=s(use);RBo=r(rZr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rZr.forEach(t),SBo=i(ml),wd=n(ml,"P",{});var Gz=s(wd);PBo=r(Gz,`Note:
Loading a model from its configuration file does `),bse=n(Gz,"STRONG",{});var tZr=s(bse);$Bo=r(tZr,"not"),tZr.forEach(t),IBo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),vse=n(Gz,"CODE",{});var aZr=s(vse);jBo=r(aZr,"from_pretrained()"),aZr.forEach(t),DBo=r(Gz,"to load the model weights."),Gz.forEach(t),NBo=i(ml),Tse=n(ml,"P",{});var nZr=s(Tse);qBo=r(nZr,"Examples:"),nZr.forEach(t),OBo=i(ml),m(NE.$$.fragment,ml),ml.forEach(t),GBo=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(qE.$$.fragment,Ut),XBo=i(Ut),Fse=n(Ut,"P",{});var sZr=s(Fse);VBo=r(sZr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sZr.forEach(t),zBo=i(Ut),Za=n(Ut,"P",{});var nM=s(Za);WBo=r(nM,"The model class to instantiate is selected based on the "),Cse=n(nM,"CODE",{});var lZr=s(Cse);QBo=r(lZr,"model_type"),lZr.forEach(t),HBo=r(nM,` property of the config object (either
passed as an argument or loaded from `),Mse=n(nM,"CODE",{});var iZr=s(Mse);UBo=r(iZr,"pretrained_model_name_or_path"),iZr.forEach(t),JBo=r(nM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=n(nM,"CODE",{});var dZr=s(Ese);YBo=r(dZr,"pretrained_model_name_or_path"),dZr.forEach(t),KBo=r(nM,":"),nM.forEach(t),ZBo=i(Ut),R=n(Ut,"UL",{});var P=s(R);o2=n(P,"LI",{});var H3e=s(o2);yse=n(H3e,"STRONG",{});var cZr=s(yse);exo=r(cZr,"albert"),cZr.forEach(t),oxo=r(H3e," \u2014 "),vD=n(H3e,"A",{href:!0});var fZr=s(vD);rxo=r(fZr,"AlbertForQuestionAnswering"),fZr.forEach(t),txo=r(H3e," (ALBERT model)"),H3e.forEach(t),axo=i(P),r2=n(P,"LI",{});var U3e=s(r2);wse=n(U3e,"STRONG",{});var mZr=s(wse);nxo=r(mZr,"bart"),mZr.forEach(t),sxo=r(U3e," \u2014 "),TD=n(U3e,"A",{href:!0});var gZr=s(TD);lxo=r(gZr,"BartForQuestionAnswering"),gZr.forEach(t),ixo=r(U3e," (BART model)"),U3e.forEach(t),dxo=i(P),t2=n(P,"LI",{});var J3e=s(t2);Ase=n(J3e,"STRONG",{});var hZr=s(Ase);cxo=r(hZr,"bert"),hZr.forEach(t),fxo=r(J3e," \u2014 "),FD=n(J3e,"A",{href:!0});var pZr=s(FD);mxo=r(pZr,"BertForQuestionAnswering"),pZr.forEach(t),gxo=r(J3e," (BERT model)"),J3e.forEach(t),hxo=i(P),a2=n(P,"LI",{});var Y3e=s(a2);Lse=n(Y3e,"STRONG",{});var _Zr=s(Lse);pxo=r(_Zr,"big_bird"),_Zr.forEach(t),_xo=r(Y3e," \u2014 "),CD=n(Y3e,"A",{href:!0});var uZr=s(CD);uxo=r(uZr,"BigBirdForQuestionAnswering"),uZr.forEach(t),bxo=r(Y3e," (BigBird model)"),Y3e.forEach(t),vxo=i(P),n2=n(P,"LI",{});var K3e=s(n2);Bse=n(K3e,"STRONG",{});var bZr=s(Bse);Txo=r(bZr,"bigbird_pegasus"),bZr.forEach(t),Fxo=r(K3e," \u2014 "),MD=n(K3e,"A",{href:!0});var vZr=s(MD);Cxo=r(vZr,"BigBirdPegasusForQuestionAnswering"),vZr.forEach(t),Mxo=r(K3e," (BigBirdPegasus model)"),K3e.forEach(t),Exo=i(P),s2=n(P,"LI",{});var Z3e=s(s2);xse=n(Z3e,"STRONG",{});var TZr=s(xse);yxo=r(TZr,"camembert"),TZr.forEach(t),wxo=r(Z3e," \u2014 "),ED=n(Z3e,"A",{href:!0});var FZr=s(ED);Axo=r(FZr,"CamembertForQuestionAnswering"),FZr.forEach(t),Lxo=r(Z3e," (CamemBERT model)"),Z3e.forEach(t),Bxo=i(P),l2=n(P,"LI",{});var eye=s(l2);kse=n(eye,"STRONG",{});var CZr=s(kse);xxo=r(CZr,"canine"),CZr.forEach(t),kxo=r(eye," \u2014 "),yD=n(eye,"A",{href:!0});var MZr=s(yD);Rxo=r(MZr,"CanineForQuestionAnswering"),MZr.forEach(t),Sxo=r(eye," (Canine model)"),eye.forEach(t),Pxo=i(P),i2=n(P,"LI",{});var oye=s(i2);Rse=n(oye,"STRONG",{});var EZr=s(Rse);$xo=r(EZr,"convbert"),EZr.forEach(t),Ixo=r(oye," \u2014 "),wD=n(oye,"A",{href:!0});var yZr=s(wD);jxo=r(yZr,"ConvBertForQuestionAnswering"),yZr.forEach(t),Dxo=r(oye," (ConvBERT model)"),oye.forEach(t),Nxo=i(P),d2=n(P,"LI",{});var rye=s(d2);Sse=n(rye,"STRONG",{});var wZr=s(Sse);qxo=r(wZr,"data2vec-text"),wZr.forEach(t),Oxo=r(rye," \u2014 "),AD=n(rye,"A",{href:!0});var AZr=s(AD);Gxo=r(AZr,"Data2VecTextForQuestionAnswering"),AZr.forEach(t),Xxo=r(rye," (Data2VecText model)"),rye.forEach(t),Vxo=i(P),c2=n(P,"LI",{});var tye=s(c2);Pse=n(tye,"STRONG",{});var LZr=s(Pse);zxo=r(LZr,"deberta"),LZr.forEach(t),Wxo=r(tye," \u2014 "),LD=n(tye,"A",{href:!0});var BZr=s(LD);Qxo=r(BZr,"DebertaForQuestionAnswering"),BZr.forEach(t),Hxo=r(tye," (DeBERTa model)"),tye.forEach(t),Uxo=i(P),f2=n(P,"LI",{});var aye=s(f2);$se=n(aye,"STRONG",{});var xZr=s($se);Jxo=r(xZr,"deberta-v2"),xZr.forEach(t),Yxo=r(aye," \u2014 "),BD=n(aye,"A",{href:!0});var kZr=s(BD);Kxo=r(kZr,"DebertaV2ForQuestionAnswering"),kZr.forEach(t),Zxo=r(aye," (DeBERTa-v2 model)"),aye.forEach(t),eko=i(P),m2=n(P,"LI",{});var nye=s(m2);Ise=n(nye,"STRONG",{});var RZr=s(Ise);oko=r(RZr,"distilbert"),RZr.forEach(t),rko=r(nye," \u2014 "),xD=n(nye,"A",{href:!0});var SZr=s(xD);tko=r(SZr,"DistilBertForQuestionAnswering"),SZr.forEach(t),ako=r(nye," (DistilBERT model)"),nye.forEach(t),nko=i(P),g2=n(P,"LI",{});var sye=s(g2);jse=n(sye,"STRONG",{});var PZr=s(jse);sko=r(PZr,"electra"),PZr.forEach(t),lko=r(sye," \u2014 "),kD=n(sye,"A",{href:!0});var $Zr=s(kD);iko=r($Zr,"ElectraForQuestionAnswering"),$Zr.forEach(t),dko=r(sye," (ELECTRA model)"),sye.forEach(t),cko=i(P),h2=n(P,"LI",{});var lye=s(h2);Dse=n(lye,"STRONG",{});var IZr=s(Dse);fko=r(IZr,"flaubert"),IZr.forEach(t),mko=r(lye," \u2014 "),RD=n(lye,"A",{href:!0});var jZr=s(RD);gko=r(jZr,"FlaubertForQuestionAnsweringSimple"),jZr.forEach(t),hko=r(lye," (FlauBERT model)"),lye.forEach(t),pko=i(P),p2=n(P,"LI",{});var iye=s(p2);Nse=n(iye,"STRONG",{});var DZr=s(Nse);_ko=r(DZr,"fnet"),DZr.forEach(t),uko=r(iye," \u2014 "),SD=n(iye,"A",{href:!0});var NZr=s(SD);bko=r(NZr,"FNetForQuestionAnswering"),NZr.forEach(t),vko=r(iye," (FNet model)"),iye.forEach(t),Tko=i(P),_2=n(P,"LI",{});var dye=s(_2);qse=n(dye,"STRONG",{});var qZr=s(qse);Fko=r(qZr,"funnel"),qZr.forEach(t),Cko=r(dye," \u2014 "),PD=n(dye,"A",{href:!0});var OZr=s(PD);Mko=r(OZr,"FunnelForQuestionAnswering"),OZr.forEach(t),Eko=r(dye," (Funnel Transformer model)"),dye.forEach(t),yko=i(P),u2=n(P,"LI",{});var cye=s(u2);Ose=n(cye,"STRONG",{});var GZr=s(Ose);wko=r(GZr,"gptj"),GZr.forEach(t),Ako=r(cye," \u2014 "),$D=n(cye,"A",{href:!0});var XZr=s($D);Lko=r(XZr,"GPTJForQuestionAnswering"),XZr.forEach(t),Bko=r(cye," (GPT-J model)"),cye.forEach(t),xko=i(P),b2=n(P,"LI",{});var fye=s(b2);Gse=n(fye,"STRONG",{});var VZr=s(Gse);kko=r(VZr,"ibert"),VZr.forEach(t),Rko=r(fye," \u2014 "),ID=n(fye,"A",{href:!0});var zZr=s(ID);Sko=r(zZr,"IBertForQuestionAnswering"),zZr.forEach(t),Pko=r(fye," (I-BERT model)"),fye.forEach(t),$ko=i(P),v2=n(P,"LI",{});var mye=s(v2);Xse=n(mye,"STRONG",{});var WZr=s(Xse);Iko=r(WZr,"layoutlmv2"),WZr.forEach(t),jko=r(mye," \u2014 "),jD=n(mye,"A",{href:!0});var QZr=s(jD);Dko=r(QZr,"LayoutLMv2ForQuestionAnswering"),QZr.forEach(t),Nko=r(mye," (LayoutLMv2 model)"),mye.forEach(t),qko=i(P),T2=n(P,"LI",{});var gye=s(T2);Vse=n(gye,"STRONG",{});var HZr=s(Vse);Oko=r(HZr,"led"),HZr.forEach(t),Gko=r(gye," \u2014 "),DD=n(gye,"A",{href:!0});var UZr=s(DD);Xko=r(UZr,"LEDForQuestionAnswering"),UZr.forEach(t),Vko=r(gye," (LED model)"),gye.forEach(t),zko=i(P),F2=n(P,"LI",{});var hye=s(F2);zse=n(hye,"STRONG",{});var JZr=s(zse);Wko=r(JZr,"longformer"),JZr.forEach(t),Qko=r(hye," \u2014 "),ND=n(hye,"A",{href:!0});var YZr=s(ND);Hko=r(YZr,"LongformerForQuestionAnswering"),YZr.forEach(t),Uko=r(hye," (Longformer model)"),hye.forEach(t),Jko=i(P),C2=n(P,"LI",{});var pye=s(C2);Wse=n(pye,"STRONG",{});var KZr=s(Wse);Yko=r(KZr,"lxmert"),KZr.forEach(t),Kko=r(pye," \u2014 "),qD=n(pye,"A",{href:!0});var ZZr=s(qD);Zko=r(ZZr,"LxmertForQuestionAnswering"),ZZr.forEach(t),eRo=r(pye," (LXMERT model)"),pye.forEach(t),oRo=i(P),M2=n(P,"LI",{});var _ye=s(M2);Qse=n(_ye,"STRONG",{});var eet=s(Qse);rRo=r(eet,"mbart"),eet.forEach(t),tRo=r(_ye," \u2014 "),OD=n(_ye,"A",{href:!0});var oet=s(OD);aRo=r(oet,"MBartForQuestionAnswering"),oet.forEach(t),nRo=r(_ye," (mBART model)"),_ye.forEach(t),sRo=i(P),E2=n(P,"LI",{});var uye=s(E2);Hse=n(uye,"STRONG",{});var ret=s(Hse);lRo=r(ret,"megatron-bert"),ret.forEach(t),iRo=r(uye," \u2014 "),GD=n(uye,"A",{href:!0});var tet=s(GD);dRo=r(tet,"MegatronBertForQuestionAnswering"),tet.forEach(t),cRo=r(uye," (MegatronBert model)"),uye.forEach(t),fRo=i(P),y2=n(P,"LI",{});var bye=s(y2);Use=n(bye,"STRONG",{});var aet=s(Use);mRo=r(aet,"mobilebert"),aet.forEach(t),gRo=r(bye," \u2014 "),XD=n(bye,"A",{href:!0});var net=s(XD);hRo=r(net,"MobileBertForQuestionAnswering"),net.forEach(t),pRo=r(bye," (MobileBERT model)"),bye.forEach(t),_Ro=i(P),w2=n(P,"LI",{});var vye=s(w2);Jse=n(vye,"STRONG",{});var set=s(Jse);uRo=r(set,"mpnet"),set.forEach(t),bRo=r(vye," \u2014 "),VD=n(vye,"A",{href:!0});var iet=s(VD);vRo=r(iet,"MPNetForQuestionAnswering"),iet.forEach(t),TRo=r(vye," (MPNet model)"),vye.forEach(t),FRo=i(P),A2=n(P,"LI",{});var Tye=s(A2);Yse=n(Tye,"STRONG",{});var det=s(Yse);CRo=r(det,"nystromformer"),det.forEach(t),MRo=r(Tye," \u2014 "),zD=n(Tye,"A",{href:!0});var cet=s(zD);ERo=r(cet,"NystromformerForQuestionAnswering"),cet.forEach(t),yRo=r(Tye," (Nystromformer model)"),Tye.forEach(t),wRo=i(P),L2=n(P,"LI",{});var Fye=s(L2);Kse=n(Fye,"STRONG",{});var fet=s(Kse);ARo=r(fet,"qdqbert"),fet.forEach(t),LRo=r(Fye," \u2014 "),WD=n(Fye,"A",{href:!0});var met=s(WD);BRo=r(met,"QDQBertForQuestionAnswering"),met.forEach(t),xRo=r(Fye," (QDQBert model)"),Fye.forEach(t),kRo=i(P),B2=n(P,"LI",{});var Cye=s(B2);Zse=n(Cye,"STRONG",{});var get=s(Zse);RRo=r(get,"reformer"),get.forEach(t),SRo=r(Cye," \u2014 "),QD=n(Cye,"A",{href:!0});var het=s(QD);PRo=r(het,"ReformerForQuestionAnswering"),het.forEach(t),$Ro=r(Cye," (Reformer model)"),Cye.forEach(t),IRo=i(P),x2=n(P,"LI",{});var Mye=s(x2);ele=n(Mye,"STRONG",{});var pet=s(ele);jRo=r(pet,"rembert"),pet.forEach(t),DRo=r(Mye," \u2014 "),HD=n(Mye,"A",{href:!0});var _et=s(HD);NRo=r(_et,"RemBertForQuestionAnswering"),_et.forEach(t),qRo=r(Mye," (RemBERT model)"),Mye.forEach(t),ORo=i(P),k2=n(P,"LI",{});var Eye=s(k2);ole=n(Eye,"STRONG",{});var uet=s(ole);GRo=r(uet,"roberta"),uet.forEach(t),XRo=r(Eye," \u2014 "),UD=n(Eye,"A",{href:!0});var bet=s(UD);VRo=r(bet,"RobertaForQuestionAnswering"),bet.forEach(t),zRo=r(Eye," (RoBERTa model)"),Eye.forEach(t),WRo=i(P),R2=n(P,"LI",{});var yye=s(R2);rle=n(yye,"STRONG",{});var vet=s(rle);QRo=r(vet,"roformer"),vet.forEach(t),HRo=r(yye," \u2014 "),JD=n(yye,"A",{href:!0});var Tet=s(JD);URo=r(Tet,"RoFormerForQuestionAnswering"),Tet.forEach(t),JRo=r(yye," (RoFormer model)"),yye.forEach(t),YRo=i(P),S2=n(P,"LI",{});var wye=s(S2);tle=n(wye,"STRONG",{});var Fet=s(tle);KRo=r(Fet,"splinter"),Fet.forEach(t),ZRo=r(wye," \u2014 "),YD=n(wye,"A",{href:!0});var Cet=s(YD);eSo=r(Cet,"SplinterForQuestionAnswering"),Cet.forEach(t),oSo=r(wye," (Splinter model)"),wye.forEach(t),rSo=i(P),P2=n(P,"LI",{});var Aye=s(P2);ale=n(Aye,"STRONG",{});var Met=s(ale);tSo=r(Met,"squeezebert"),Met.forEach(t),aSo=r(Aye," \u2014 "),KD=n(Aye,"A",{href:!0});var Eet=s(KD);nSo=r(Eet,"SqueezeBertForQuestionAnswering"),Eet.forEach(t),sSo=r(Aye," (SqueezeBERT model)"),Aye.forEach(t),lSo=i(P),$2=n(P,"LI",{});var Lye=s($2);nle=n(Lye,"STRONG",{});var yet=s(nle);iSo=r(yet,"xlm"),yet.forEach(t),dSo=r(Lye," \u2014 "),ZD=n(Lye,"A",{href:!0});var wet=s(ZD);cSo=r(wet,"XLMForQuestionAnsweringSimple"),wet.forEach(t),fSo=r(Lye," (XLM model)"),Lye.forEach(t),mSo=i(P),I2=n(P,"LI",{});var Bye=s(I2);sle=n(Bye,"STRONG",{});var Aet=s(sle);gSo=r(Aet,"xlm-roberta"),Aet.forEach(t),hSo=r(Bye," \u2014 "),eN=n(Bye,"A",{href:!0});var Let=s(eN);pSo=r(Let,"XLMRobertaForQuestionAnswering"),Let.forEach(t),_So=r(Bye," (XLM-RoBERTa model)"),Bye.forEach(t),uSo=i(P),j2=n(P,"LI",{});var xye=s(j2);lle=n(xye,"STRONG",{});var Bet=s(lle);bSo=r(Bet,"xlm-roberta-xl"),Bet.forEach(t),vSo=r(xye," \u2014 "),oN=n(xye,"A",{href:!0});var xet=s(oN);TSo=r(xet,"XLMRobertaXLForQuestionAnswering"),xet.forEach(t),FSo=r(xye," (XLM-RoBERTa-XL model)"),xye.forEach(t),CSo=i(P),D2=n(P,"LI",{});var kye=s(D2);ile=n(kye,"STRONG",{});var ket=s(ile);MSo=r(ket,"xlnet"),ket.forEach(t),ESo=r(kye," \u2014 "),rN=n(kye,"A",{href:!0});var Ret=s(rN);ySo=r(Ret,"XLNetForQuestionAnsweringSimple"),Ret.forEach(t),wSo=r(kye," (XLNet model)"),kye.forEach(t),ASo=i(P),N2=n(P,"LI",{});var Rye=s(N2);dle=n(Rye,"STRONG",{});var Set=s(dle);LSo=r(Set,"yoso"),Set.forEach(t),BSo=r(Rye," \u2014 "),tN=n(Rye,"A",{href:!0});var Pet=s(tN);xSo=r(Pet,"YosoForQuestionAnswering"),Pet.forEach(t),kSo=r(Rye," (YOSO model)"),Rye.forEach(t),P.forEach(t),RSo=i(Ut),q2=n(Ut,"P",{});var Sye=s(q2);SSo=r(Sye,"The model is set in evaluation mode by default using "),cle=n(Sye,"CODE",{});var $et=s(cle);PSo=r($et,"model.eval()"),$et.forEach(t),$So=r(Sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=n(Sye,"CODE",{});var Iet=s(fle);ISo=r(Iet,"model.train()"),Iet.forEach(t),Sye.forEach(t),jSo=i(Ut),mle=n(Ut,"P",{});var jet=s(mle);DSo=r(jet,"Examples:"),jet.forEach(t),NSo=i(Ut),m(OE.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),$xe=i(d),Ad=n(d,"H2",{class:!0});var VRe=s(Ad);O2=n(VRe,"A",{id:!0,class:!0,href:!0});var Det=s(O2);gle=n(Det,"SPAN",{});var Net=s(gle);m(GE.$$.fragment,Net),Net.forEach(t),Det.forEach(t),qSo=i(VRe),hle=n(VRe,"SPAN",{});var qet=s(hle);OSo=r(qet,"AutoModelForTableQuestionAnswering"),qet.forEach(t),VRe.forEach(t),Ixe=i(d),sr=n(d,"DIV",{class:!0});var gl=s(sr);m(XE.$$.fragment,gl),GSo=i(gl),Ld=n(gl,"P",{});var Xz=s(Ld);XSo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ple=n(Xz,"CODE",{});var Oet=s(ple);VSo=r(Oet,"from_pretrained()"),Oet.forEach(t),zSo=r(Xz,"class method or the "),_le=n(Xz,"CODE",{});var Get=s(_le);WSo=r(Get,"from_config()"),Get.forEach(t),QSo=r(Xz,`class
method.`),Xz.forEach(t),HSo=i(gl),VE=n(gl,"P",{});var zRe=s(VE);USo=r(zRe,"This class cannot be instantiated directly using "),ule=n(zRe,"CODE",{});var Xet=s(ule);JSo=r(Xet,"__init__()"),Xet.forEach(t),YSo=r(zRe," (throws an error)."),zRe.forEach(t),KSo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(zE.$$.fragment,hl),ZSo=i(hl),ble=n(hl,"P",{});var Vet=s(ble);ePo=r(Vet,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vet.forEach(t),oPo=i(hl),Bd=n(hl,"P",{});var Vz=s(Bd);rPo=r(Vz,`Note:
Loading a model from its configuration file does `),vle=n(Vz,"STRONG",{});var zet=s(vle);tPo=r(zet,"not"),zet.forEach(t),aPo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=n(Vz,"CODE",{});var Wet=s(Tle);nPo=r(Wet,"from_pretrained()"),Wet.forEach(t),sPo=r(Vz,"to load the model weights."),Vz.forEach(t),lPo=i(hl),Fle=n(hl,"P",{});var Qet=s(Fle);iPo=r(Qet,"Examples:"),Qet.forEach(t),dPo=i(hl),m(WE.$$.fragment,hl),hl.forEach(t),cPo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(QE.$$.fragment,Jt),fPo=i(Jt),Cle=n(Jt,"P",{});var Het=s(Cle);mPo=r(Het,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Het.forEach(t),gPo=i(Jt),en=n(Jt,"P",{});var sM=s(en);hPo=r(sM,"The model class to instantiate is selected based on the "),Mle=n(sM,"CODE",{});var Uet=s(Mle);pPo=r(Uet,"model_type"),Uet.forEach(t),_Po=r(sM,` property of the config object (either
passed as an argument or loaded from `),Ele=n(sM,"CODE",{});var Jet=s(Ele);uPo=r(Jet,"pretrained_model_name_or_path"),Jet.forEach(t),bPo=r(sM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=n(sM,"CODE",{});var Yet=s(yle);vPo=r(Yet,"pretrained_model_name_or_path"),Yet.forEach(t),TPo=r(sM,":"),sM.forEach(t),FPo=i(Jt),wle=n(Jt,"UL",{});var Ket=s(wle);G2=n(Ket,"LI",{});var Pye=s(G2);Ale=n(Pye,"STRONG",{});var Zet=s(Ale);CPo=r(Zet,"tapas"),Zet.forEach(t),MPo=r(Pye," \u2014 "),aN=n(Pye,"A",{href:!0});var eot=s(aN);EPo=r(eot,"TapasForQuestionAnswering"),eot.forEach(t),yPo=r(Pye," (TAPAS model)"),Pye.forEach(t),Ket.forEach(t),wPo=i(Jt),X2=n(Jt,"P",{});var $ye=s(X2);APo=r($ye,"The model is set in evaluation mode by default using "),Lle=n($ye,"CODE",{});var oot=s(Lle);LPo=r(oot,"model.eval()"),oot.forEach(t),BPo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=n($ye,"CODE",{});var rot=s(Ble);xPo=r(rot,"model.train()"),rot.forEach(t),$ye.forEach(t),kPo=i(Jt),xle=n(Jt,"P",{});var tot=s(xle);RPo=r(tot,"Examples:"),tot.forEach(t),SPo=i(Jt),m(HE.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),jxe=i(d),xd=n(d,"H2",{class:!0});var WRe=s(xd);V2=n(WRe,"A",{id:!0,class:!0,href:!0});var aot=s(V2);kle=n(aot,"SPAN",{});var not=s(kle);m(UE.$$.fragment,not),not.forEach(t),aot.forEach(t),PPo=i(WRe),Rle=n(WRe,"SPAN",{});var sot=s(Rle);$Po=r(sot,"AutoModelForImageClassification"),sot.forEach(t),WRe.forEach(t),Dxe=i(d),lr=n(d,"DIV",{class:!0});var pl=s(lr);m(JE.$$.fragment,pl),IPo=i(pl),kd=n(pl,"P",{});var zz=s(kd);jPo=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sle=n(zz,"CODE",{});var lot=s(Sle);DPo=r(lot,"from_pretrained()"),lot.forEach(t),NPo=r(zz,"class method or the "),Ple=n(zz,"CODE",{});var iot=s(Ple);qPo=r(iot,"from_config()"),iot.forEach(t),OPo=r(zz,`class
method.`),zz.forEach(t),GPo=i(pl),YE=n(pl,"P",{});var QRe=s(YE);XPo=r(QRe,"This class cannot be instantiated directly using "),$le=n(QRe,"CODE",{});var dot=s($le);VPo=r(dot,"__init__()"),dot.forEach(t),zPo=r(QRe," (throws an error)."),QRe.forEach(t),WPo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(KE.$$.fragment,_l),QPo=i(_l),Ile=n(_l,"P",{});var cot=s(Ile);HPo=r(cot,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cot.forEach(t),UPo=i(_l),Rd=n(_l,"P",{});var Wz=s(Rd);JPo=r(Wz,`Note:
Loading a model from its configuration file does `),jle=n(Wz,"STRONG",{});var fot=s(jle);YPo=r(fot,"not"),fot.forEach(t),KPo=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dle=n(Wz,"CODE",{});var mot=s(Dle);ZPo=r(mot,"from_pretrained()"),mot.forEach(t),e$o=r(Wz,"to load the model weights."),Wz.forEach(t),o$o=i(_l),Nle=n(_l,"P",{});var got=s(Nle);r$o=r(got,"Examples:"),got.forEach(t),t$o=i(_l),m(ZE.$$.fragment,_l),_l.forEach(t),a$o=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(e3.$$.fragment,Yt),n$o=i(Yt),qle=n(Yt,"P",{});var hot=s(qle);s$o=r(hot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hot.forEach(t),l$o=i(Yt),on=n(Yt,"P",{});var lM=s(on);i$o=r(lM,"The model class to instantiate is selected based on the "),Ole=n(lM,"CODE",{});var pot=s(Ole);d$o=r(pot,"model_type"),pot.forEach(t),c$o=r(lM,` property of the config object (either
passed as an argument or loaded from `),Gle=n(lM,"CODE",{});var _ot=s(Gle);f$o=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),m$o=r(lM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=n(lM,"CODE",{});var uot=s(Xle);g$o=r(uot,"pretrained_model_name_or_path"),uot.forEach(t),h$o=r(lM,":"),lM.forEach(t),p$o=i(Yt),Fe=n(Yt,"UL",{});var so=s(Fe);z2=n(so,"LI",{});var Iye=s(z2);Vle=n(Iye,"STRONG",{});var bot=s(Vle);_$o=r(bot,"beit"),bot.forEach(t),u$o=r(Iye," \u2014 "),nN=n(Iye,"A",{href:!0});var vot=s(nN);b$o=r(vot,"BeitForImageClassification"),vot.forEach(t),v$o=r(Iye," (BEiT model)"),Iye.forEach(t),T$o=i(so),W2=n(so,"LI",{});var jye=s(W2);zle=n(jye,"STRONG",{});var Tot=s(zle);F$o=r(Tot,"convnext"),Tot.forEach(t),C$o=r(jye," \u2014 "),sN=n(jye,"A",{href:!0});var Fot=s(sN);M$o=r(Fot,"ConvNextForImageClassification"),Fot.forEach(t),E$o=r(jye," (ConvNext model)"),jye.forEach(t),y$o=i(so),qs=n(so,"LI",{});var jL=s(qs);Wle=n(jL,"STRONG",{});var Cot=s(Wle);w$o=r(Cot,"deit"),Cot.forEach(t),A$o=r(jL," \u2014 "),lN=n(jL,"A",{href:!0});var Mot=s(lN);L$o=r(Mot,"DeiTForImageClassification"),Mot.forEach(t),B$o=r(jL," or "),iN=n(jL,"A",{href:!0});var Eot=s(iN);x$o=r(Eot,"DeiTForImageClassificationWithTeacher"),Eot.forEach(t),k$o=r(jL," (DeiT model)"),jL.forEach(t),R$o=i(so),Q2=n(so,"LI",{});var Dye=s(Q2);Qle=n(Dye,"STRONG",{});var yot=s(Qle);S$o=r(yot,"imagegpt"),yot.forEach(t),P$o=r(Dye," \u2014 "),dN=n(Dye,"A",{href:!0});var wot=s(dN);$$o=r(wot,"ImageGPTForImageClassification"),wot.forEach(t),I$o=r(Dye," (ImageGPT model)"),Dye.forEach(t),j$o=i(so),ma=n(so,"LI",{});var $f=s(ma);Hle=n($f,"STRONG",{});var Aot=s(Hle);D$o=r(Aot,"perceiver"),Aot.forEach(t),N$o=r($f," \u2014 "),cN=n($f,"A",{href:!0});var Lot=s(cN);q$o=r(Lot,"PerceiverForImageClassificationLearned"),Lot.forEach(t),O$o=r($f," or "),fN=n($f,"A",{href:!0});var Bot=s(fN);G$o=r(Bot,"PerceiverForImageClassificationFourier"),Bot.forEach(t),X$o=r($f," or "),mN=n($f,"A",{href:!0});var xot=s(mN);V$o=r(xot,"PerceiverForImageClassificationConvProcessing"),xot.forEach(t),z$o=r($f," (Perceiver model)"),$f.forEach(t),W$o=i(so),H2=n(so,"LI",{});var Nye=s(H2);Ule=n(Nye,"STRONG",{});var kot=s(Ule);Q$o=r(kot,"poolformer"),kot.forEach(t),H$o=r(Nye," \u2014 "),gN=n(Nye,"A",{href:!0});var Rot=s(gN);U$o=r(Rot,"PoolFormerForImageClassification"),Rot.forEach(t),J$o=r(Nye," (PoolFormer model)"),Nye.forEach(t),Y$o=i(so),U2=n(so,"LI",{});var qye=s(U2);Jle=n(qye,"STRONG",{});var Sot=s(Jle);K$o=r(Sot,"segformer"),Sot.forEach(t),Z$o=r(qye," \u2014 "),hN=n(qye,"A",{href:!0});var Pot=s(hN);eIo=r(Pot,"SegformerForImageClassification"),Pot.forEach(t),oIo=r(qye," (SegFormer model)"),qye.forEach(t),rIo=i(so),J2=n(so,"LI",{});var Oye=s(J2);Yle=n(Oye,"STRONG",{});var $ot=s(Yle);tIo=r($ot,"swin"),$ot.forEach(t),aIo=r(Oye," \u2014 "),pN=n(Oye,"A",{href:!0});var Iot=s(pN);nIo=r(Iot,"SwinForImageClassification"),Iot.forEach(t),sIo=r(Oye," (Swin model)"),Oye.forEach(t),lIo=i(so),Y2=n(so,"LI",{});var Gye=s(Y2);Kle=n(Gye,"STRONG",{});var jot=s(Kle);iIo=r(jot,"vit"),jot.forEach(t),dIo=r(Gye," \u2014 "),_N=n(Gye,"A",{href:!0});var Dot=s(_N);cIo=r(Dot,"ViTForImageClassification"),Dot.forEach(t),fIo=r(Gye," (ViT model)"),Gye.forEach(t),so.forEach(t),mIo=i(Yt),K2=n(Yt,"P",{});var Xye=s(K2);gIo=r(Xye,"The model is set in evaluation mode by default using "),Zle=n(Xye,"CODE",{});var Not=s(Zle);hIo=r(Not,"model.eval()"),Not.forEach(t),pIo=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eie=n(Xye,"CODE",{});var qot=s(eie);_Io=r(qot,"model.train()"),qot.forEach(t),Xye.forEach(t),uIo=i(Yt),oie=n(Yt,"P",{});var Oot=s(oie);bIo=r(Oot,"Examples:"),Oot.forEach(t),vIo=i(Yt),m(o3.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Nxe=i(d),Sd=n(d,"H2",{class:!0});var HRe=s(Sd);Z2=n(HRe,"A",{id:!0,class:!0,href:!0});var Got=s(Z2);rie=n(Got,"SPAN",{});var Xot=s(rie);m(r3.$$.fragment,Xot),Xot.forEach(t),Got.forEach(t),TIo=i(HRe),tie=n(HRe,"SPAN",{});var Vot=s(tie);FIo=r(Vot,"AutoModelForVision2Seq"),Vot.forEach(t),HRe.forEach(t),qxe=i(d),ir=n(d,"DIV",{class:!0});var ul=s(ir);m(t3.$$.fragment,ul),CIo=i(ul),Pd=n(ul,"P",{});var Qz=s(Pd);MIo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aie=n(Qz,"CODE",{});var zot=s(aie);EIo=r(zot,"from_pretrained()"),zot.forEach(t),yIo=r(Qz,"class method or the "),nie=n(Qz,"CODE",{});var Wot=s(nie);wIo=r(Wot,"from_config()"),Wot.forEach(t),AIo=r(Qz,`class
method.`),Qz.forEach(t),LIo=i(ul),a3=n(ul,"P",{});var URe=s(a3);BIo=r(URe,"This class cannot be instantiated directly using "),sie=n(URe,"CODE",{});var Qot=s(sie);xIo=r(Qot,"__init__()"),Qot.forEach(t),kIo=r(URe," (throws an error)."),URe.forEach(t),RIo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(n3.$$.fragment,bl),SIo=i(bl),lie=n(bl,"P",{});var Hot=s(lie);PIo=r(Hot,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hot.forEach(t),$Io=i(bl),$d=n(bl,"P",{});var Hz=s($d);IIo=r(Hz,`Note:
Loading a model from its configuration file does `),iie=n(Hz,"STRONG",{});var Uot=s(iie);jIo=r(Uot,"not"),Uot.forEach(t),DIo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),die=n(Hz,"CODE",{});var Jot=s(die);NIo=r(Jot,"from_pretrained()"),Jot.forEach(t),qIo=r(Hz,"to load the model weights."),Hz.forEach(t),OIo=i(bl),cie=n(bl,"P",{});var Yot=s(cie);GIo=r(Yot,"Examples:"),Yot.forEach(t),XIo=i(bl),m(s3.$$.fragment,bl),bl.forEach(t),VIo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(l3.$$.fragment,Kt),zIo=i(Kt),fie=n(Kt,"P",{});var Kot=s(fie);WIo=r(Kot,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kot.forEach(t),QIo=i(Kt),rn=n(Kt,"P",{});var iM=s(rn);HIo=r(iM,"The model class to instantiate is selected based on the "),mie=n(iM,"CODE",{});var Zot=s(mie);UIo=r(Zot,"model_type"),Zot.forEach(t),JIo=r(iM,` property of the config object (either
passed as an argument or loaded from `),gie=n(iM,"CODE",{});var ert=s(gie);YIo=r(ert,"pretrained_model_name_or_path"),ert.forEach(t),KIo=r(iM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=n(iM,"CODE",{});var ort=s(hie);ZIo=r(ort,"pretrained_model_name_or_path"),ort.forEach(t),ejo=r(iM,":"),iM.forEach(t),ojo=i(Kt),pie=n(Kt,"UL",{});var rrt=s(pie);ev=n(rrt,"LI",{});var Vye=s(ev);_ie=n(Vye,"STRONG",{});var trt=s(_ie);rjo=r(trt,"vision-encoder-decoder"),trt.forEach(t),tjo=r(Vye," \u2014 "),uN=n(Vye,"A",{href:!0});var art=s(uN);ajo=r(art,"VisionEncoderDecoderModel"),art.forEach(t),njo=r(Vye," (Vision Encoder decoder model)"),Vye.forEach(t),rrt.forEach(t),sjo=i(Kt),ov=n(Kt,"P",{});var zye=s(ov);ljo=r(zye,"The model is set in evaluation mode by default using "),uie=n(zye,"CODE",{});var nrt=s(uie);ijo=r(nrt,"model.eval()"),nrt.forEach(t),djo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=n(zye,"CODE",{});var srt=s(bie);cjo=r(srt,"model.train()"),srt.forEach(t),zye.forEach(t),fjo=i(Kt),vie=n(Kt,"P",{});var lrt=s(vie);mjo=r(lrt,"Examples:"),lrt.forEach(t),gjo=i(Kt),m(i3.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),Oxe=i(d),Id=n(d,"H2",{class:!0});var JRe=s(Id);rv=n(JRe,"A",{id:!0,class:!0,href:!0});var irt=s(rv);Tie=n(irt,"SPAN",{});var drt=s(Tie);m(d3.$$.fragment,drt),drt.forEach(t),irt.forEach(t),hjo=i(JRe),Fie=n(JRe,"SPAN",{});var crt=s(Fie);pjo=r(crt,"AutoModelForAudioClassification"),crt.forEach(t),JRe.forEach(t),Gxe=i(d),dr=n(d,"DIV",{class:!0});var vl=s(dr);m(c3.$$.fragment,vl),_jo=i(vl),jd=n(vl,"P",{});var Uz=s(jd);ujo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Cie=n(Uz,"CODE",{});var frt=s(Cie);bjo=r(frt,"from_pretrained()"),frt.forEach(t),vjo=r(Uz,"class method or the "),Mie=n(Uz,"CODE",{});var mrt=s(Mie);Tjo=r(mrt,"from_config()"),mrt.forEach(t),Fjo=r(Uz,`class
method.`),Uz.forEach(t),Cjo=i(vl),f3=n(vl,"P",{});var YRe=s(f3);Mjo=r(YRe,"This class cannot be instantiated directly using "),Eie=n(YRe,"CODE",{});var grt=s(Eie);Ejo=r(grt,"__init__()"),grt.forEach(t),yjo=r(YRe," (throws an error)."),YRe.forEach(t),wjo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(m3.$$.fragment,Tl),Ajo=i(Tl),yie=n(Tl,"P",{});var hrt=s(yie);Ljo=r(hrt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hrt.forEach(t),Bjo=i(Tl),Dd=n(Tl,"P",{});var Jz=s(Dd);xjo=r(Jz,`Note:
Loading a model from its configuration file does `),wie=n(Jz,"STRONG",{});var prt=s(wie);kjo=r(prt,"not"),prt.forEach(t),Rjo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aie=n(Jz,"CODE",{});var _rt=s(Aie);Sjo=r(_rt,"from_pretrained()"),_rt.forEach(t),Pjo=r(Jz,"to load the model weights."),Jz.forEach(t),$jo=i(Tl),Lie=n(Tl,"P",{});var urt=s(Lie);Ijo=r(urt,"Examples:"),urt.forEach(t),jjo=i(Tl),m(g3.$$.fragment,Tl),Tl.forEach(t),Djo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(h3.$$.fragment,Zt),Njo=i(Zt),Bie=n(Zt,"P",{});var brt=s(Bie);qjo=r(brt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),brt.forEach(t),Ojo=i(Zt),tn=n(Zt,"P",{});var dM=s(tn);Gjo=r(dM,"The model class to instantiate is selected based on the "),xie=n(dM,"CODE",{});var vrt=s(xie);Xjo=r(vrt,"model_type"),vrt.forEach(t),Vjo=r(dM,` property of the config object (either
passed as an argument or loaded from `),kie=n(dM,"CODE",{});var Trt=s(kie);zjo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),Wjo=r(dM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=n(dM,"CODE",{});var Frt=s(Rie);Qjo=r(Frt,"pretrained_model_name_or_path"),Frt.forEach(t),Hjo=r(dM,":"),dM.forEach(t),Ujo=i(Zt),xe=n(Zt,"UL",{});var qo=s(xe);tv=n(qo,"LI",{});var Wye=s(tv);Sie=n(Wye,"STRONG",{});var Crt=s(Sie);Jjo=r(Crt,"data2vec-audio"),Crt.forEach(t),Yjo=r(Wye," \u2014 "),bN=n(Wye,"A",{href:!0});var Mrt=s(bN);Kjo=r(Mrt,"Data2VecAudioForSequenceClassification"),Mrt.forEach(t),Zjo=r(Wye," (Data2VecAudio model)"),Wye.forEach(t),eDo=i(qo),av=n(qo,"LI",{});var Qye=s(av);Pie=n(Qye,"STRONG",{});var Ert=s(Pie);oDo=r(Ert,"hubert"),Ert.forEach(t),rDo=r(Qye," \u2014 "),vN=n(Qye,"A",{href:!0});var yrt=s(vN);tDo=r(yrt,"HubertForSequenceClassification"),yrt.forEach(t),aDo=r(Qye," (Hubert model)"),Qye.forEach(t),nDo=i(qo),nv=n(qo,"LI",{});var Hye=s(nv);$ie=n(Hye,"STRONG",{});var wrt=s($ie);sDo=r(wrt,"sew"),wrt.forEach(t),lDo=r(Hye," \u2014 "),TN=n(Hye,"A",{href:!0});var Art=s(TN);iDo=r(Art,"SEWForSequenceClassification"),Art.forEach(t),dDo=r(Hye," (SEW model)"),Hye.forEach(t),cDo=i(qo),sv=n(qo,"LI",{});var Uye=s(sv);Iie=n(Uye,"STRONG",{});var Lrt=s(Iie);fDo=r(Lrt,"sew-d"),Lrt.forEach(t),mDo=r(Uye," \u2014 "),FN=n(Uye,"A",{href:!0});var Brt=s(FN);gDo=r(Brt,"SEWDForSequenceClassification"),Brt.forEach(t),hDo=r(Uye," (SEW-D model)"),Uye.forEach(t),pDo=i(qo),lv=n(qo,"LI",{});var Jye=s(lv);jie=n(Jye,"STRONG",{});var xrt=s(jie);_Do=r(xrt,"unispeech"),xrt.forEach(t),uDo=r(Jye," \u2014 "),CN=n(Jye,"A",{href:!0});var krt=s(CN);bDo=r(krt,"UniSpeechForSequenceClassification"),krt.forEach(t),vDo=r(Jye," (UniSpeech model)"),Jye.forEach(t),TDo=i(qo),iv=n(qo,"LI",{});var Yye=s(iv);Die=n(Yye,"STRONG",{});var Rrt=s(Die);FDo=r(Rrt,"unispeech-sat"),Rrt.forEach(t),CDo=r(Yye," \u2014 "),MN=n(Yye,"A",{href:!0});var Srt=s(MN);MDo=r(Srt,"UniSpeechSatForSequenceClassification"),Srt.forEach(t),EDo=r(Yye," (UniSpeechSat model)"),Yye.forEach(t),yDo=i(qo),dv=n(qo,"LI",{});var Kye=s(dv);Nie=n(Kye,"STRONG",{});var Prt=s(Nie);wDo=r(Prt,"wav2vec2"),Prt.forEach(t),ADo=r(Kye," \u2014 "),EN=n(Kye,"A",{href:!0});var $rt=s(EN);LDo=r($rt,"Wav2Vec2ForSequenceClassification"),$rt.forEach(t),BDo=r(Kye," (Wav2Vec2 model)"),Kye.forEach(t),xDo=i(qo),cv=n(qo,"LI",{});var Zye=s(cv);qie=n(Zye,"STRONG",{});var Irt=s(qie);kDo=r(Irt,"wavlm"),Irt.forEach(t),RDo=r(Zye," \u2014 "),yN=n(Zye,"A",{href:!0});var jrt=s(yN);SDo=r(jrt,"WavLMForSequenceClassification"),jrt.forEach(t),PDo=r(Zye," (WavLM model)"),Zye.forEach(t),qo.forEach(t),$Do=i(Zt),fv=n(Zt,"P",{});var ewe=s(fv);IDo=r(ewe,"The model is set in evaluation mode by default using "),Oie=n(ewe,"CODE",{});var Drt=s(Oie);jDo=r(Drt,"model.eval()"),Drt.forEach(t),DDo=r(ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(ewe,"CODE",{});var Nrt=s(Gie);NDo=r(Nrt,"model.train()"),Nrt.forEach(t),ewe.forEach(t),qDo=i(Zt),Xie=n(Zt,"P",{});var qrt=s(Xie);ODo=r(qrt,"Examples:"),qrt.forEach(t),GDo=i(Zt),m(p3.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Xxe=i(d),Nd=n(d,"H2",{class:!0});var KRe=s(Nd);mv=n(KRe,"A",{id:!0,class:!0,href:!0});var Ort=s(mv);Vie=n(Ort,"SPAN",{});var Grt=s(Vie);m(_3.$$.fragment,Grt),Grt.forEach(t),Ort.forEach(t),XDo=i(KRe),zie=n(KRe,"SPAN",{});var Xrt=s(zie);VDo=r(Xrt,"AutoModelForAudioFrameClassification"),Xrt.forEach(t),KRe.forEach(t),Vxe=i(d),cr=n(d,"DIV",{class:!0});var Fl=s(cr);m(u3.$$.fragment,Fl),zDo=i(Fl),qd=n(Fl,"P",{});var Yz=s(qd);WDo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Wie=n(Yz,"CODE",{});var Vrt=s(Wie);QDo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),HDo=r(Yz,"class method or the "),Qie=n(Yz,"CODE",{});var zrt=s(Qie);UDo=r(zrt,"from_config()"),zrt.forEach(t),JDo=r(Yz,`class
method.`),Yz.forEach(t),YDo=i(Fl),b3=n(Fl,"P",{});var ZRe=s(b3);KDo=r(ZRe,"This class cannot be instantiated directly using "),Hie=n(ZRe,"CODE",{});var Wrt=s(Hie);ZDo=r(Wrt,"__init__()"),Wrt.forEach(t),eNo=r(ZRe," (throws an error)."),ZRe.forEach(t),oNo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(v3.$$.fragment,Cl),rNo=i(Cl),Uie=n(Cl,"P",{});var Qrt=s(Uie);tNo=r(Qrt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Qrt.forEach(t),aNo=i(Cl),Od=n(Cl,"P",{});var Kz=s(Od);nNo=r(Kz,`Note:
Loading a model from its configuration file does `),Jie=n(Kz,"STRONG",{});var Hrt=s(Jie);sNo=r(Hrt,"not"),Hrt.forEach(t),lNo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yie=n(Kz,"CODE",{});var Urt=s(Yie);iNo=r(Urt,"from_pretrained()"),Urt.forEach(t),dNo=r(Kz,"to load the model weights."),Kz.forEach(t),cNo=i(Cl),Kie=n(Cl,"P",{});var Jrt=s(Kie);fNo=r(Jrt,"Examples:"),Jrt.forEach(t),mNo=i(Cl),m(T3.$$.fragment,Cl),Cl.forEach(t),gNo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(F3.$$.fragment,ea),hNo=i(ea),Zie=n(ea,"P",{});var Yrt=s(Zie);pNo=r(Yrt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Yrt.forEach(t),_No=i(ea),an=n(ea,"P",{});var cM=s(an);uNo=r(cM,"The model class to instantiate is selected based on the "),ede=n(cM,"CODE",{});var Krt=s(ede);bNo=r(Krt,"model_type"),Krt.forEach(t),vNo=r(cM,` property of the config object (either
passed as an argument or loaded from `),ode=n(cM,"CODE",{});var Zrt=s(ode);TNo=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),FNo=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=n(cM,"CODE",{});var ett=s(rde);CNo=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),MNo=r(cM,":"),cM.forEach(t),ENo=i(ea),nn=n(ea,"UL",{});var fM=s(nn);gv=n(fM,"LI",{});var owe=s(gv);tde=n(owe,"STRONG",{});var ott=s(tde);yNo=r(ott,"data2vec-audio"),ott.forEach(t),wNo=r(owe," \u2014 "),wN=n(owe,"A",{href:!0});var rtt=s(wN);ANo=r(rtt,"Data2VecAudioForAudioFrameClassification"),rtt.forEach(t),LNo=r(owe," (Data2VecAudio model)"),owe.forEach(t),BNo=i(fM),hv=n(fM,"LI",{});var rwe=s(hv);ade=n(rwe,"STRONG",{});var ttt=s(ade);xNo=r(ttt,"unispeech-sat"),ttt.forEach(t),kNo=r(rwe," \u2014 "),AN=n(rwe,"A",{href:!0});var att=s(AN);RNo=r(att,"UniSpeechSatForAudioFrameClassification"),att.forEach(t),SNo=r(rwe," (UniSpeechSat model)"),rwe.forEach(t),PNo=i(fM),pv=n(fM,"LI",{});var twe=s(pv);nde=n(twe,"STRONG",{});var ntt=s(nde);$No=r(ntt,"wav2vec2"),ntt.forEach(t),INo=r(twe," \u2014 "),LN=n(twe,"A",{href:!0});var stt=s(LN);jNo=r(stt,"Wav2Vec2ForAudioFrameClassification"),stt.forEach(t),DNo=r(twe," (Wav2Vec2 model)"),twe.forEach(t),NNo=i(fM),_v=n(fM,"LI",{});var awe=s(_v);sde=n(awe,"STRONG",{});var ltt=s(sde);qNo=r(ltt,"wavlm"),ltt.forEach(t),ONo=r(awe," \u2014 "),BN=n(awe,"A",{href:!0});var itt=s(BN);GNo=r(itt,"WavLMForAudioFrameClassification"),itt.forEach(t),XNo=r(awe," (WavLM model)"),awe.forEach(t),fM.forEach(t),VNo=i(ea),uv=n(ea,"P",{});var nwe=s(uv);zNo=r(nwe,"The model is set in evaluation mode by default using "),lde=n(nwe,"CODE",{});var dtt=s(lde);WNo=r(dtt,"model.eval()"),dtt.forEach(t),QNo=r(nwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=n(nwe,"CODE",{});var ctt=s(ide);HNo=r(ctt,"model.train()"),ctt.forEach(t),nwe.forEach(t),UNo=i(ea),dde=n(ea,"P",{});var ftt=s(dde);JNo=r(ftt,"Examples:"),ftt.forEach(t),YNo=i(ea),m(C3.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),zxe=i(d),Gd=n(d,"H2",{class:!0});var eSe=s(Gd);bv=n(eSe,"A",{id:!0,class:!0,href:!0});var mtt=s(bv);cde=n(mtt,"SPAN",{});var gtt=s(cde);m(M3.$$.fragment,gtt),gtt.forEach(t),mtt.forEach(t),KNo=i(eSe),fde=n(eSe,"SPAN",{});var htt=s(fde);ZNo=r(htt,"AutoModelForCTC"),htt.forEach(t),eSe.forEach(t),Wxe=i(d),fr=n(d,"DIV",{class:!0});var Ml=s(fr);m(E3.$$.fragment,Ml),eqo=i(Ml),Xd=n(Ml,"P",{});var Zz=s(Xd);oqo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mde=n(Zz,"CODE",{});var ptt=s(mde);rqo=r(ptt,"from_pretrained()"),ptt.forEach(t),tqo=r(Zz,"class method or the "),gde=n(Zz,"CODE",{});var _tt=s(gde);aqo=r(_tt,"from_config()"),_tt.forEach(t),nqo=r(Zz,`class
method.`),Zz.forEach(t),sqo=i(Ml),y3=n(Ml,"P",{});var oSe=s(y3);lqo=r(oSe,"This class cannot be instantiated directly using "),hde=n(oSe,"CODE",{});var utt=s(hde);iqo=r(utt,"__init__()"),utt.forEach(t),dqo=r(oSe," (throws an error)."),oSe.forEach(t),cqo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(w3.$$.fragment,El),fqo=i(El),pde=n(El,"P",{});var btt=s(pde);mqo=r(btt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),btt.forEach(t),gqo=i(El),Vd=n(El,"P",{});var eW=s(Vd);hqo=r(eW,`Note:
Loading a model from its configuration file does `),_de=n(eW,"STRONG",{});var vtt=s(_de);pqo=r(vtt,"not"),vtt.forEach(t),_qo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=n(eW,"CODE",{});var Ttt=s(ude);uqo=r(Ttt,"from_pretrained()"),Ttt.forEach(t),bqo=r(eW,"to load the model weights."),eW.forEach(t),vqo=i(El),bde=n(El,"P",{});var Ftt=s(bde);Tqo=r(Ftt,"Examples:"),Ftt.forEach(t),Fqo=i(El),m(A3.$$.fragment,El),El.forEach(t),Cqo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(L3.$$.fragment,oa),Mqo=i(oa),vde=n(oa,"P",{});var Ctt=s(vde);Eqo=r(Ctt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ctt.forEach(t),yqo=i(oa),sn=n(oa,"P",{});var mM=s(sn);wqo=r(mM,"The model class to instantiate is selected based on the "),Tde=n(mM,"CODE",{});var Mtt=s(Tde);Aqo=r(Mtt,"model_type"),Mtt.forEach(t),Lqo=r(mM,` property of the config object (either
passed as an argument or loaded from `),Fde=n(mM,"CODE",{});var Ett=s(Fde);Bqo=r(Ett,"pretrained_model_name_or_path"),Ett.forEach(t),xqo=r(mM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=n(mM,"CODE",{});var ytt=s(Cde);kqo=r(ytt,"pretrained_model_name_or_path"),ytt.forEach(t),Rqo=r(mM,":"),mM.forEach(t),Sqo=i(oa),ke=n(oa,"UL",{});var Oo=s(ke);vv=n(Oo,"LI",{});var swe=s(vv);Mde=n(swe,"STRONG",{});var wtt=s(Mde);Pqo=r(wtt,"data2vec-audio"),wtt.forEach(t),$qo=r(swe," \u2014 "),xN=n(swe,"A",{href:!0});var Att=s(xN);Iqo=r(Att,"Data2VecAudioForCTC"),Att.forEach(t),jqo=r(swe," (Data2VecAudio model)"),swe.forEach(t),Dqo=i(Oo),Tv=n(Oo,"LI",{});var lwe=s(Tv);Ede=n(lwe,"STRONG",{});var Ltt=s(Ede);Nqo=r(Ltt,"hubert"),Ltt.forEach(t),qqo=r(lwe," \u2014 "),kN=n(lwe,"A",{href:!0});var Btt=s(kN);Oqo=r(Btt,"HubertForCTC"),Btt.forEach(t),Gqo=r(lwe," (Hubert model)"),lwe.forEach(t),Xqo=i(Oo),Fv=n(Oo,"LI",{});var iwe=s(Fv);yde=n(iwe,"STRONG",{});var xtt=s(yde);Vqo=r(xtt,"sew"),xtt.forEach(t),zqo=r(iwe," \u2014 "),RN=n(iwe,"A",{href:!0});var ktt=s(RN);Wqo=r(ktt,"SEWForCTC"),ktt.forEach(t),Qqo=r(iwe," (SEW model)"),iwe.forEach(t),Hqo=i(Oo),Cv=n(Oo,"LI",{});var dwe=s(Cv);wde=n(dwe,"STRONG",{});var Rtt=s(wde);Uqo=r(Rtt,"sew-d"),Rtt.forEach(t),Jqo=r(dwe," \u2014 "),SN=n(dwe,"A",{href:!0});var Stt=s(SN);Yqo=r(Stt,"SEWDForCTC"),Stt.forEach(t),Kqo=r(dwe," (SEW-D model)"),dwe.forEach(t),Zqo=i(Oo),Mv=n(Oo,"LI",{});var cwe=s(Mv);Ade=n(cwe,"STRONG",{});var Ptt=s(Ade);eOo=r(Ptt,"unispeech"),Ptt.forEach(t),oOo=r(cwe," \u2014 "),PN=n(cwe,"A",{href:!0});var $tt=s(PN);rOo=r($tt,"UniSpeechForCTC"),$tt.forEach(t),tOo=r(cwe," (UniSpeech model)"),cwe.forEach(t),aOo=i(Oo),Ev=n(Oo,"LI",{});var fwe=s(Ev);Lde=n(fwe,"STRONG",{});var Itt=s(Lde);nOo=r(Itt,"unispeech-sat"),Itt.forEach(t),sOo=r(fwe," \u2014 "),$N=n(fwe,"A",{href:!0});var jtt=s($N);lOo=r(jtt,"UniSpeechSatForCTC"),jtt.forEach(t),iOo=r(fwe," (UniSpeechSat model)"),fwe.forEach(t),dOo=i(Oo),yv=n(Oo,"LI",{});var mwe=s(yv);Bde=n(mwe,"STRONG",{});var Dtt=s(Bde);cOo=r(Dtt,"wav2vec2"),Dtt.forEach(t),fOo=r(mwe," \u2014 "),IN=n(mwe,"A",{href:!0});var Ntt=s(IN);mOo=r(Ntt,"Wav2Vec2ForCTC"),Ntt.forEach(t),gOo=r(mwe," (Wav2Vec2 model)"),mwe.forEach(t),hOo=i(Oo),wv=n(Oo,"LI",{});var gwe=s(wv);xde=n(gwe,"STRONG",{});var qtt=s(xde);pOo=r(qtt,"wavlm"),qtt.forEach(t),_Oo=r(gwe," \u2014 "),jN=n(gwe,"A",{href:!0});var Ott=s(jN);uOo=r(Ott,"WavLMForCTC"),Ott.forEach(t),bOo=r(gwe," (WavLM model)"),gwe.forEach(t),Oo.forEach(t),vOo=i(oa),Av=n(oa,"P",{});var hwe=s(Av);TOo=r(hwe,"The model is set in evaluation mode by default using "),kde=n(hwe,"CODE",{});var Gtt=s(kde);FOo=r(Gtt,"model.eval()"),Gtt.forEach(t),COo=r(hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=n(hwe,"CODE",{});var Xtt=s(Rde);MOo=r(Xtt,"model.train()"),Xtt.forEach(t),hwe.forEach(t),EOo=i(oa),Sde=n(oa,"P",{});var Vtt=s(Sde);yOo=r(Vtt,"Examples:"),Vtt.forEach(t),wOo=i(oa),m(B3.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Qxe=i(d),zd=n(d,"H2",{class:!0});var rSe=s(zd);Lv=n(rSe,"A",{id:!0,class:!0,href:!0});var ztt=s(Lv);Pde=n(ztt,"SPAN",{});var Wtt=s(Pde);m(x3.$$.fragment,Wtt),Wtt.forEach(t),ztt.forEach(t),AOo=i(rSe),$de=n(rSe,"SPAN",{});var Qtt=s($de);LOo=r(Qtt,"AutoModelForSpeechSeq2Seq"),Qtt.forEach(t),rSe.forEach(t),Hxe=i(d),mr=n(d,"DIV",{class:!0});var yl=s(mr);m(k3.$$.fragment,yl),BOo=i(yl),Wd=n(yl,"P",{});var oW=s(Wd);xOo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Ide=n(oW,"CODE",{});var Htt=s(Ide);kOo=r(Htt,"from_pretrained()"),Htt.forEach(t),ROo=r(oW,"class method or the "),jde=n(oW,"CODE",{});var Utt=s(jde);SOo=r(Utt,"from_config()"),Utt.forEach(t),POo=r(oW,`class
method.`),oW.forEach(t),$Oo=i(yl),R3=n(yl,"P",{});var tSe=s(R3);IOo=r(tSe,"This class cannot be instantiated directly using "),Dde=n(tSe,"CODE",{});var Jtt=s(Dde);jOo=r(Jtt,"__init__()"),Jtt.forEach(t),DOo=r(tSe," (throws an error)."),tSe.forEach(t),NOo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(S3.$$.fragment,wl),qOo=i(wl),Nde=n(wl,"P",{});var Ytt=s(Nde);OOo=r(Ytt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ytt.forEach(t),GOo=i(wl),Qd=n(wl,"P",{});var rW=s(Qd);XOo=r(rW,`Note:
Loading a model from its configuration file does `),qde=n(rW,"STRONG",{});var Ktt=s(qde);VOo=r(Ktt,"not"),Ktt.forEach(t),zOo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ode=n(rW,"CODE",{});var Ztt=s(Ode);WOo=r(Ztt,"from_pretrained()"),Ztt.forEach(t),QOo=r(rW,"to load the model weights."),rW.forEach(t),HOo=i(wl),Gde=n(wl,"P",{});var eat=s(Gde);UOo=r(eat,"Examples:"),eat.forEach(t),JOo=i(wl),m(P3.$$.fragment,wl),wl.forEach(t),YOo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m($3.$$.fragment,ra),KOo=i(ra),Xde=n(ra,"P",{});var oat=s(Xde);ZOo=r(oat,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oat.forEach(t),eGo=i(ra),ln=n(ra,"P",{});var gM=s(ln);oGo=r(gM,"The model class to instantiate is selected based on the "),Vde=n(gM,"CODE",{});var rat=s(Vde);rGo=r(rat,"model_type"),rat.forEach(t),tGo=r(gM,` property of the config object (either
passed as an argument or loaded from `),zde=n(gM,"CODE",{});var tat=s(zde);aGo=r(tat,"pretrained_model_name_or_path"),tat.forEach(t),nGo=r(gM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wde=n(gM,"CODE",{});var aat=s(Wde);sGo=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),lGo=r(gM,":"),gM.forEach(t),iGo=i(ra),I3=n(ra,"UL",{});var aSe=s(I3);Bv=n(aSe,"LI",{});var pwe=s(Bv);Qde=n(pwe,"STRONG",{});var nat=s(Qde);dGo=r(nat,"speech-encoder-decoder"),nat.forEach(t),cGo=r(pwe," \u2014 "),DN=n(pwe,"A",{href:!0});var sat=s(DN);fGo=r(sat,"SpeechEncoderDecoderModel"),sat.forEach(t),mGo=r(pwe," (Speech Encoder decoder model)"),pwe.forEach(t),gGo=i(aSe),xv=n(aSe,"LI",{});var _we=s(xv);Hde=n(_we,"STRONG",{});var lat=s(Hde);hGo=r(lat,"speech_to_text"),lat.forEach(t),pGo=r(_we," \u2014 "),NN=n(_we,"A",{href:!0});var iat=s(NN);_Go=r(iat,"Speech2TextForConditionalGeneration"),iat.forEach(t),uGo=r(_we," (Speech2Text model)"),_we.forEach(t),aSe.forEach(t),bGo=i(ra),kv=n(ra,"P",{});var uwe=s(kv);vGo=r(uwe,"The model is set in evaluation mode by default using "),Ude=n(uwe,"CODE",{});var dat=s(Ude);TGo=r(dat,"model.eval()"),dat.forEach(t),FGo=r(uwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=n(uwe,"CODE",{});var cat=s(Jde);CGo=r(cat,"model.train()"),cat.forEach(t),uwe.forEach(t),MGo=i(ra),Yde=n(ra,"P",{});var fat=s(Yde);EGo=r(fat,"Examples:"),fat.forEach(t),yGo=i(ra),m(j3.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Uxe=i(d),Hd=n(d,"H2",{class:!0});var nSe=s(Hd);Rv=n(nSe,"A",{id:!0,class:!0,href:!0});var mat=s(Rv);Kde=n(mat,"SPAN",{});var gat=s(Kde);m(D3.$$.fragment,gat),gat.forEach(t),mat.forEach(t),wGo=i(nSe),Zde=n(nSe,"SPAN",{});var hat=s(Zde);AGo=r(hat,"AutoModelForAudioXVector"),hat.forEach(t),nSe.forEach(t),Jxe=i(d),gr=n(d,"DIV",{class:!0});var Al=s(gr);m(N3.$$.fragment,Al),LGo=i(Al),Ud=n(Al,"P",{});var tW=s(Ud);BGo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ece=n(tW,"CODE",{});var pat=s(ece);xGo=r(pat,"from_pretrained()"),pat.forEach(t),kGo=r(tW,"class method or the "),oce=n(tW,"CODE",{});var _at=s(oce);RGo=r(_at,"from_config()"),_at.forEach(t),SGo=r(tW,`class
method.`),tW.forEach(t),PGo=i(Al),q3=n(Al,"P",{});var sSe=s(q3);$Go=r(sSe,"This class cannot be instantiated directly using "),rce=n(sSe,"CODE",{});var uat=s(rce);IGo=r(uat,"__init__()"),uat.forEach(t),jGo=r(sSe," (throws an error)."),sSe.forEach(t),DGo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(O3.$$.fragment,Ll),NGo=i(Ll),tce=n(Ll,"P",{});var bat=s(tce);qGo=r(bat,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bat.forEach(t),OGo=i(Ll),Jd=n(Ll,"P",{});var aW=s(Jd);GGo=r(aW,`Note:
Loading a model from its configuration file does `),ace=n(aW,"STRONG",{});var vat=s(ace);XGo=r(vat,"not"),vat.forEach(t),VGo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nce=n(aW,"CODE",{});var Tat=s(nce);zGo=r(Tat,"from_pretrained()"),Tat.forEach(t),WGo=r(aW,"to load the model weights."),aW.forEach(t),QGo=i(Ll),sce=n(Ll,"P",{});var Fat=s(sce);HGo=r(Fat,"Examples:"),Fat.forEach(t),UGo=i(Ll),m(G3.$$.fragment,Ll),Ll.forEach(t),JGo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(X3.$$.fragment,ta),YGo=i(ta),lce=n(ta,"P",{});var Cat=s(lce);KGo=r(Cat,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Cat.forEach(t),ZGo=i(ta),dn=n(ta,"P",{});var hM=s(dn);eXo=r(hM,"The model class to instantiate is selected based on the "),ice=n(hM,"CODE",{});var Mat=s(ice);oXo=r(Mat,"model_type"),Mat.forEach(t),rXo=r(hM,` property of the config object (either
passed as an argument or loaded from `),dce=n(hM,"CODE",{});var Eat=s(dce);tXo=r(Eat,"pretrained_model_name_or_path"),Eat.forEach(t),aXo=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=n(hM,"CODE",{});var yat=s(cce);nXo=r(yat,"pretrained_model_name_or_path"),yat.forEach(t),sXo=r(hM,":"),hM.forEach(t),lXo=i(ta),cn=n(ta,"UL",{});var pM=s(cn);Sv=n(pM,"LI",{});var bwe=s(Sv);fce=n(bwe,"STRONG",{});var wat=s(fce);iXo=r(wat,"data2vec-audio"),wat.forEach(t),dXo=r(bwe," \u2014 "),qN=n(bwe,"A",{href:!0});var Aat=s(qN);cXo=r(Aat,"Data2VecAudioForXVector"),Aat.forEach(t),fXo=r(bwe," (Data2VecAudio model)"),bwe.forEach(t),mXo=i(pM),Pv=n(pM,"LI",{});var vwe=s(Pv);mce=n(vwe,"STRONG",{});var Lat=s(mce);gXo=r(Lat,"unispeech-sat"),Lat.forEach(t),hXo=r(vwe," \u2014 "),ON=n(vwe,"A",{href:!0});var Bat=s(ON);pXo=r(Bat,"UniSpeechSatForXVector"),Bat.forEach(t),_Xo=r(vwe," (UniSpeechSat model)"),vwe.forEach(t),uXo=i(pM),$v=n(pM,"LI",{});var Twe=s($v);gce=n(Twe,"STRONG",{});var xat=s(gce);bXo=r(xat,"wav2vec2"),xat.forEach(t),vXo=r(Twe," \u2014 "),GN=n(Twe,"A",{href:!0});var kat=s(GN);TXo=r(kat,"Wav2Vec2ForXVector"),kat.forEach(t),FXo=r(Twe," (Wav2Vec2 model)"),Twe.forEach(t),CXo=i(pM),Iv=n(pM,"LI",{});var Fwe=s(Iv);hce=n(Fwe,"STRONG",{});var Rat=s(hce);MXo=r(Rat,"wavlm"),Rat.forEach(t),EXo=r(Fwe," \u2014 "),XN=n(Fwe,"A",{href:!0});var Sat=s(XN);yXo=r(Sat,"WavLMForXVector"),Sat.forEach(t),wXo=r(Fwe," (WavLM model)"),Fwe.forEach(t),pM.forEach(t),AXo=i(ta),jv=n(ta,"P",{});var Cwe=s(jv);LXo=r(Cwe,"The model is set in evaluation mode by default using "),pce=n(Cwe,"CODE",{});var Pat=s(pce);BXo=r(Pat,"model.eval()"),Pat.forEach(t),xXo=r(Cwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=n(Cwe,"CODE",{});var $at=s(_ce);kXo=r($at,"model.train()"),$at.forEach(t),Cwe.forEach(t),RXo=i(ta),uce=n(ta,"P",{});var Iat=s(uce);SXo=r(Iat,"Examples:"),Iat.forEach(t),PXo=i(ta),m(V3.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Yxe=i(d),Yd=n(d,"H2",{class:!0});var lSe=s(Yd);Dv=n(lSe,"A",{id:!0,class:!0,href:!0});var jat=s(Dv);bce=n(jat,"SPAN",{});var Dat=s(bce);m(z3.$$.fragment,Dat),Dat.forEach(t),jat.forEach(t),$Xo=i(lSe),vce=n(lSe,"SPAN",{});var Nat=s(vce);IXo=r(Nat,"AutoModelForMaskedImageModeling"),Nat.forEach(t),lSe.forEach(t),Kxe=i(d),hr=n(d,"DIV",{class:!0});var Bl=s(hr);m(W3.$$.fragment,Bl),jXo=i(Bl),Kd=n(Bl,"P",{});var nW=s(Kd);DXo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Tce=n(nW,"CODE",{});var qat=s(Tce);NXo=r(qat,"from_pretrained()"),qat.forEach(t),qXo=r(nW,"class method or the "),Fce=n(nW,"CODE",{});var Oat=s(Fce);OXo=r(Oat,"from_config()"),Oat.forEach(t),GXo=r(nW,`class
method.`),nW.forEach(t),XXo=i(Bl),Q3=n(Bl,"P",{});var iSe=s(Q3);VXo=r(iSe,"This class cannot be instantiated directly using "),Cce=n(iSe,"CODE",{});var Gat=s(Cce);zXo=r(Gat,"__init__()"),Gat.forEach(t),WXo=r(iSe," (throws an error)."),iSe.forEach(t),QXo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(H3.$$.fragment,xl),HXo=i(xl),Mce=n(xl,"P",{});var Xat=s(Mce);UXo=r(Xat,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Xat.forEach(t),JXo=i(xl),Zd=n(xl,"P",{});var sW=s(Zd);YXo=r(sW,`Note:
Loading a model from its configuration file does `),Ece=n(sW,"STRONG",{});var Vat=s(Ece);KXo=r(Vat,"not"),Vat.forEach(t),ZXo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yce=n(sW,"CODE",{});var zat=s(yce);eVo=r(zat,"from_pretrained()"),zat.forEach(t),oVo=r(sW,"to load the model weights."),sW.forEach(t),rVo=i(xl),wce=n(xl,"P",{});var Wat=s(wce);tVo=r(Wat,"Examples:"),Wat.forEach(t),aVo=i(xl),m(U3.$$.fragment,xl),xl.forEach(t),nVo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(J3.$$.fragment,aa),sVo=i(aa),Ace=n(aa,"P",{});var Qat=s(Ace);lVo=r(Qat,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Qat.forEach(t),iVo=i(aa),fn=n(aa,"P",{});var _M=s(fn);dVo=r(_M,"The model class to instantiate is selected based on the "),Lce=n(_M,"CODE",{});var Hat=s(Lce);cVo=r(Hat,"model_type"),Hat.forEach(t),fVo=r(_M,` property of the config object (either
passed as an argument or loaded from `),Bce=n(_M,"CODE",{});var Uat=s(Bce);mVo=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),gVo=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(_M,"CODE",{});var Jat=s(xce);hVo=r(Jat,"pretrained_model_name_or_path"),Jat.forEach(t),pVo=r(_M,":"),_M.forEach(t),_Vo=i(aa),ec=n(aa,"UL",{});var lW=s(ec);Nv=n(lW,"LI",{});var Mwe=s(Nv);kce=n(Mwe,"STRONG",{});var Yat=s(kce);uVo=r(Yat,"deit"),Yat.forEach(t),bVo=r(Mwe," \u2014 "),VN=n(Mwe,"A",{href:!0});var Kat=s(VN);vVo=r(Kat,"DeiTForMaskedImageModeling"),Kat.forEach(t),TVo=r(Mwe," (DeiT model)"),Mwe.forEach(t),FVo=i(lW),qv=n(lW,"LI",{});var Ewe=s(qv);Rce=n(Ewe,"STRONG",{});var Zat=s(Rce);CVo=r(Zat,"swin"),Zat.forEach(t),MVo=r(Ewe," \u2014 "),zN=n(Ewe,"A",{href:!0});var ent=s(zN);EVo=r(ent,"SwinForMaskedImageModeling"),ent.forEach(t),yVo=r(Ewe," (Swin model)"),Ewe.forEach(t),wVo=i(lW),Ov=n(lW,"LI",{});var ywe=s(Ov);Sce=n(ywe,"STRONG",{});var ont=s(Sce);AVo=r(ont,"vit"),ont.forEach(t),LVo=r(ywe," \u2014 "),WN=n(ywe,"A",{href:!0});var rnt=s(WN);BVo=r(rnt,"ViTForMaskedImageModeling"),rnt.forEach(t),xVo=r(ywe," (ViT model)"),ywe.forEach(t),lW.forEach(t),kVo=i(aa),Gv=n(aa,"P",{});var wwe=s(Gv);RVo=r(wwe,"The model is set in evaluation mode by default using "),Pce=n(wwe,"CODE",{});var tnt=s(Pce);SVo=r(tnt,"model.eval()"),tnt.forEach(t),PVo=r(wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(wwe,"CODE",{});var ant=s($ce);$Vo=r(ant,"model.train()"),ant.forEach(t),wwe.forEach(t),IVo=i(aa),Ice=n(aa,"P",{});var nnt=s(Ice);jVo=r(nnt,"Examples:"),nnt.forEach(t),DVo=i(aa),m(Y3.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),Zxe=i(d),oc=n(d,"H2",{class:!0});var dSe=s(oc);Xv=n(dSe,"A",{id:!0,class:!0,href:!0});var snt=s(Xv);jce=n(snt,"SPAN",{});var lnt=s(jce);m(K3.$$.fragment,lnt),lnt.forEach(t),snt.forEach(t),NVo=i(dSe),Dce=n(dSe,"SPAN",{});var int=s(Dce);qVo=r(int,"AutoModelForObjectDetection"),int.forEach(t),dSe.forEach(t),eke=i(d),pr=n(d,"DIV",{class:!0});var kl=s(pr);m(Z3.$$.fragment,kl),OVo=i(kl),rc=n(kl,"P",{});var iW=s(rc);GVo=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Nce=n(iW,"CODE",{});var dnt=s(Nce);XVo=r(dnt,"from_pretrained()"),dnt.forEach(t),VVo=r(iW,"class method or the "),qce=n(iW,"CODE",{});var cnt=s(qce);zVo=r(cnt,"from_config()"),cnt.forEach(t),WVo=r(iW,`class
method.`),iW.forEach(t),QVo=i(kl),ey=n(kl,"P",{});var cSe=s(ey);HVo=r(cSe,"This class cannot be instantiated directly using "),Oce=n(cSe,"CODE",{});var fnt=s(Oce);UVo=r(fnt,"__init__()"),fnt.forEach(t),JVo=r(cSe," (throws an error)."),cSe.forEach(t),YVo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(oy.$$.fragment,Rl),KVo=i(Rl),Gce=n(Rl,"P",{});var mnt=s(Gce);ZVo=r(mnt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mnt.forEach(t),ezo=i(Rl),tc=n(Rl,"P",{});var dW=s(tc);ozo=r(dW,`Note:
Loading a model from its configuration file does `),Xce=n(dW,"STRONG",{});var gnt=s(Xce);rzo=r(gnt,"not"),gnt.forEach(t),tzo=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=n(dW,"CODE",{});var hnt=s(Vce);azo=r(hnt,"from_pretrained()"),hnt.forEach(t),nzo=r(dW,"to load the model weights."),dW.forEach(t),szo=i(Rl),zce=n(Rl,"P",{});var pnt=s(zce);lzo=r(pnt,"Examples:"),pnt.forEach(t),izo=i(Rl),m(ry.$$.fragment,Rl),Rl.forEach(t),dzo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(ty.$$.fragment,na),czo=i(na),Wce=n(na,"P",{});var _nt=s(Wce);fzo=r(_nt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_nt.forEach(t),mzo=i(na),mn=n(na,"P",{});var uM=s(mn);gzo=r(uM,"The model class to instantiate is selected based on the "),Qce=n(uM,"CODE",{});var unt=s(Qce);hzo=r(unt,"model_type"),unt.forEach(t),pzo=r(uM,` property of the config object (either
passed as an argument or loaded from `),Hce=n(uM,"CODE",{});var bnt=s(Hce);_zo=r(bnt,"pretrained_model_name_or_path"),bnt.forEach(t),uzo=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=n(uM,"CODE",{});var vnt=s(Uce);bzo=r(vnt,"pretrained_model_name_or_path"),vnt.forEach(t),vzo=r(uM,":"),uM.forEach(t),Tzo=i(na),Jce=n(na,"UL",{});var Tnt=s(Jce);Vv=n(Tnt,"LI",{});var Awe=s(Vv);Yce=n(Awe,"STRONG",{});var Fnt=s(Yce);Fzo=r(Fnt,"detr"),Fnt.forEach(t),Czo=r(Awe," \u2014 "),QN=n(Awe,"A",{href:!0});var Cnt=s(QN);Mzo=r(Cnt,"DetrForObjectDetection"),Cnt.forEach(t),Ezo=r(Awe," (DETR model)"),Awe.forEach(t),Tnt.forEach(t),yzo=i(na),zv=n(na,"P",{});var Lwe=s(zv);wzo=r(Lwe,"The model is set in evaluation mode by default using "),Kce=n(Lwe,"CODE",{});var Mnt=s(Kce);Azo=r(Mnt,"model.eval()"),Mnt.forEach(t),Lzo=r(Lwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=n(Lwe,"CODE",{});var Ent=s(Zce);Bzo=r(Ent,"model.train()"),Ent.forEach(t),Lwe.forEach(t),xzo=i(na),efe=n(na,"P",{});var ynt=s(efe);kzo=r(ynt,"Examples:"),ynt.forEach(t),Rzo=i(na),m(ay.$$.fragment,na),na.forEach(t),kl.forEach(t),oke=i(d),ac=n(d,"H2",{class:!0});var fSe=s(ac);Wv=n(fSe,"A",{id:!0,class:!0,href:!0});var wnt=s(Wv);ofe=n(wnt,"SPAN",{});var Ant=s(ofe);m(ny.$$.fragment,Ant),Ant.forEach(t),wnt.forEach(t),Szo=i(fSe),rfe=n(fSe,"SPAN",{});var Lnt=s(rfe);Pzo=r(Lnt,"AutoModelForImageSegmentation"),Lnt.forEach(t),fSe.forEach(t),rke=i(d),_r=n(d,"DIV",{class:!0});var Sl=s(_r);m(sy.$$.fragment,Sl),$zo=i(Sl),nc=n(Sl,"P",{});var cW=s(nc);Izo=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tfe=n(cW,"CODE",{});var Bnt=s(tfe);jzo=r(Bnt,"from_pretrained()"),Bnt.forEach(t),Dzo=r(cW,"class method or the "),afe=n(cW,"CODE",{});var xnt=s(afe);Nzo=r(xnt,"from_config()"),xnt.forEach(t),qzo=r(cW,`class
method.`),cW.forEach(t),Ozo=i(Sl),ly=n(Sl,"P",{});var mSe=s(ly);Gzo=r(mSe,"This class cannot be instantiated directly using "),nfe=n(mSe,"CODE",{});var knt=s(nfe);Xzo=r(knt,"__init__()"),knt.forEach(t),Vzo=r(mSe," (throws an error)."),mSe.forEach(t),zzo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(iy.$$.fragment,Pl),Wzo=i(Pl),sfe=n(Pl,"P",{});var Rnt=s(sfe);Qzo=r(Rnt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rnt.forEach(t),Hzo=i(Pl),sc=n(Pl,"P",{});var fW=s(sc);Uzo=r(fW,`Note:
Loading a model from its configuration file does `),lfe=n(fW,"STRONG",{});var Snt=s(lfe);Jzo=r(Snt,"not"),Snt.forEach(t),Yzo=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ife=n(fW,"CODE",{});var Pnt=s(ife);Kzo=r(Pnt,"from_pretrained()"),Pnt.forEach(t),Zzo=r(fW,"to load the model weights."),fW.forEach(t),eWo=i(Pl),dfe=n(Pl,"P",{});var $nt=s(dfe);oWo=r($nt,"Examples:"),$nt.forEach(t),rWo=i(Pl),m(dy.$$.fragment,Pl),Pl.forEach(t),tWo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(cy.$$.fragment,sa),aWo=i(sa),cfe=n(sa,"P",{});var Int=s(cfe);nWo=r(Int,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Int.forEach(t),sWo=i(sa),gn=n(sa,"P",{});var bM=s(gn);lWo=r(bM,"The model class to instantiate is selected based on the "),ffe=n(bM,"CODE",{});var jnt=s(ffe);iWo=r(jnt,"model_type"),jnt.forEach(t),dWo=r(bM,` property of the config object (either
passed as an argument or loaded from `),mfe=n(bM,"CODE",{});var Dnt=s(mfe);cWo=r(Dnt,"pretrained_model_name_or_path"),Dnt.forEach(t),fWo=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(bM,"CODE",{});var Nnt=s(gfe);mWo=r(Nnt,"pretrained_model_name_or_path"),Nnt.forEach(t),gWo=r(bM,":"),bM.forEach(t),hWo=i(sa),hfe=n(sa,"UL",{});var qnt=s(hfe);Qv=n(qnt,"LI",{});var Bwe=s(Qv);pfe=n(Bwe,"STRONG",{});var Ont=s(pfe);pWo=r(Ont,"detr"),Ont.forEach(t),_Wo=r(Bwe," \u2014 "),HN=n(Bwe,"A",{href:!0});var Gnt=s(HN);uWo=r(Gnt,"DetrForSegmentation"),Gnt.forEach(t),bWo=r(Bwe," (DETR model)"),Bwe.forEach(t),qnt.forEach(t),vWo=i(sa),Hv=n(sa,"P",{});var xwe=s(Hv);TWo=r(xwe,"The model is set in evaluation mode by default using "),_fe=n(xwe,"CODE",{});var Xnt=s(_fe);FWo=r(Xnt,"model.eval()"),Xnt.forEach(t),CWo=r(xwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(xwe,"CODE",{});var Vnt=s(ufe);MWo=r(Vnt,"model.train()"),Vnt.forEach(t),xwe.forEach(t),EWo=i(sa),bfe=n(sa,"P",{});var znt=s(bfe);yWo=r(znt,"Examples:"),znt.forEach(t),wWo=i(sa),m(fy.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),tke=i(d),lc=n(d,"H2",{class:!0});var gSe=s(lc);Uv=n(gSe,"A",{id:!0,class:!0,href:!0});var Wnt=s(Uv);vfe=n(Wnt,"SPAN",{});var Qnt=s(vfe);m(my.$$.fragment,Qnt),Qnt.forEach(t),Wnt.forEach(t),AWo=i(gSe),Tfe=n(gSe,"SPAN",{});var Hnt=s(Tfe);LWo=r(Hnt,"AutoModelForSemanticSegmentation"),Hnt.forEach(t),gSe.forEach(t),ake=i(d),ur=n(d,"DIV",{class:!0});var $l=s(ur);m(gy.$$.fragment,$l),BWo=i($l),ic=n($l,"P",{});var mW=s(ic);xWo=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ffe=n(mW,"CODE",{});var Unt=s(Ffe);kWo=r(Unt,"from_pretrained()"),Unt.forEach(t),RWo=r(mW,"class method or the "),Cfe=n(mW,"CODE",{});var Jnt=s(Cfe);SWo=r(Jnt,"from_config()"),Jnt.forEach(t),PWo=r(mW,`class
method.`),mW.forEach(t),$Wo=i($l),hy=n($l,"P",{});var hSe=s(hy);IWo=r(hSe,"This class cannot be instantiated directly using "),Mfe=n(hSe,"CODE",{});var Ynt=s(Mfe);jWo=r(Ynt,"__init__()"),Ynt.forEach(t),DWo=r(hSe," (throws an error)."),hSe.forEach(t),NWo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(py.$$.fragment,Il),qWo=i(Il),Efe=n(Il,"P",{});var Knt=s(Efe);OWo=r(Knt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Knt.forEach(t),GWo=i(Il),dc=n(Il,"P",{});var gW=s(dc);XWo=r(gW,`Note:
Loading a model from its configuration file does `),yfe=n(gW,"STRONG",{});var Znt=s(yfe);VWo=r(Znt,"not"),Znt.forEach(t),zWo=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=n(gW,"CODE",{});var est=s(wfe);WWo=r(est,"from_pretrained()"),est.forEach(t),QWo=r(gW,"to load the model weights."),gW.forEach(t),HWo=i(Il),Afe=n(Il,"P",{});var ost=s(Afe);UWo=r(ost,"Examples:"),ost.forEach(t),JWo=i(Il),m(_y.$$.fragment,Il),Il.forEach(t),YWo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(uy.$$.fragment,la),KWo=i(la),Lfe=n(la,"P",{});var rst=s(Lfe);ZWo=r(rst,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rst.forEach(t),eQo=i(la),hn=n(la,"P",{});var vM=s(hn);oQo=r(vM,"The model class to instantiate is selected based on the "),Bfe=n(vM,"CODE",{});var tst=s(Bfe);rQo=r(tst,"model_type"),tst.forEach(t),tQo=r(vM,` property of the config object (either
passed as an argument or loaded from `),xfe=n(vM,"CODE",{});var ast=s(xfe);aQo=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),nQo=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(vM,"CODE",{});var nst=s(kfe);sQo=r(nst,"pretrained_model_name_or_path"),nst.forEach(t),lQo=r(vM,":"),vM.forEach(t),iQo=i(la),by=n(la,"UL",{});var pSe=s(by);Jv=n(pSe,"LI",{});var kwe=s(Jv);Rfe=n(kwe,"STRONG",{});var sst=s(Rfe);dQo=r(sst,"beit"),sst.forEach(t),cQo=r(kwe," \u2014 "),UN=n(kwe,"A",{href:!0});var lst=s(UN);fQo=r(lst,"BeitForSemanticSegmentation"),lst.forEach(t),mQo=r(kwe," (BEiT model)"),kwe.forEach(t),gQo=i(pSe),Yv=n(pSe,"LI",{});var Rwe=s(Yv);Sfe=n(Rwe,"STRONG",{});var ist=s(Sfe);hQo=r(ist,"segformer"),ist.forEach(t),pQo=r(Rwe," \u2014 "),JN=n(Rwe,"A",{href:!0});var dst=s(JN);_Qo=r(dst,"SegformerForSemanticSegmentation"),dst.forEach(t),uQo=r(Rwe," (SegFormer model)"),Rwe.forEach(t),pSe.forEach(t),bQo=i(la),Kv=n(la,"P",{});var Swe=s(Kv);vQo=r(Swe,"The model is set in evaluation mode by default using "),Pfe=n(Swe,"CODE",{});var cst=s(Pfe);TQo=r(cst,"model.eval()"),cst.forEach(t),FQo=r(Swe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=n(Swe,"CODE",{});var fst=s($fe);CQo=r(fst,"model.train()"),fst.forEach(t),Swe.forEach(t),MQo=i(la),Ife=n(la,"P",{});var mst=s(Ife);EQo=r(mst,"Examples:"),mst.forEach(t),yQo=i(la),m(vy.$$.fragment,la),la.forEach(t),$l.forEach(t),nke=i(d),cc=n(d,"H2",{class:!0});var _Se=s(cc);Zv=n(_Se,"A",{id:!0,class:!0,href:!0});var gst=s(Zv);jfe=n(gst,"SPAN",{});var hst=s(jfe);m(Ty.$$.fragment,hst),hst.forEach(t),gst.forEach(t),wQo=i(_Se),Dfe=n(_Se,"SPAN",{});var pst=s(Dfe);AQo=r(pst,"AutoModelForInstanceSegmentation"),pst.forEach(t),_Se.forEach(t),ske=i(d),br=n(d,"DIV",{class:!0});var jl=s(br);m(Fy.$$.fragment,jl),LQo=i(jl),fc=n(jl,"P",{});var hW=s(fc);BQo=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Nfe=n(hW,"CODE",{});var _st=s(Nfe);xQo=r(_st,"from_pretrained()"),_st.forEach(t),kQo=r(hW,"class method or the "),qfe=n(hW,"CODE",{});var ust=s(qfe);RQo=r(ust,"from_config()"),ust.forEach(t),SQo=r(hW,`class
method.`),hW.forEach(t),PQo=i(jl),Cy=n(jl,"P",{});var uSe=s(Cy);$Qo=r(uSe,"This class cannot be instantiated directly using "),Ofe=n(uSe,"CODE",{});var bst=s(Ofe);IQo=r(bst,"__init__()"),bst.forEach(t),jQo=r(uSe," (throws an error)."),uSe.forEach(t),DQo=i(jl),mt=n(jl,"DIV",{class:!0});var Dl=s(mt);m(My.$$.fragment,Dl),NQo=i(Dl),Gfe=n(Dl,"P",{});var vst=s(Gfe);qQo=r(vst,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),vst.forEach(t),OQo=i(Dl),mc=n(Dl,"P",{});var pW=s(mc);GQo=r(pW,`Note:
Loading a model from its configuration file does `),Xfe=n(pW,"STRONG",{});var Tst=s(Xfe);XQo=r(Tst,"not"),Tst.forEach(t),VQo=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vfe=n(pW,"CODE",{});var Fst=s(Vfe);zQo=r(Fst,"from_pretrained()"),Fst.forEach(t),WQo=r(pW,"to load the model weights."),pW.forEach(t),QQo=i(Dl),zfe=n(Dl,"P",{});var Cst=s(zfe);HQo=r(Cst,"Examples:"),Cst.forEach(t),UQo=i(Dl),m(Ey.$$.fragment,Dl),Dl.forEach(t),JQo=i(jl),no=n(jl,"DIV",{class:!0});var ia=s(no);m(yy.$$.fragment,ia),YQo=i(ia),Wfe=n(ia,"P",{});var Mst=s(Wfe);KQo=r(Mst,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Mst.forEach(t),ZQo=i(ia),pn=n(ia,"P",{});var TM=s(pn);eHo=r(TM,"The model class to instantiate is selected based on the "),Qfe=n(TM,"CODE",{});var Est=s(Qfe);oHo=r(Est,"model_type"),Est.forEach(t),rHo=r(TM,` property of the config object (either
passed as an argument or loaded from `),Hfe=n(TM,"CODE",{});var yst=s(Hfe);tHo=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),aHo=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=n(TM,"CODE",{});var wst=s(Ufe);nHo=r(wst,"pretrained_model_name_or_path"),wst.forEach(t),sHo=r(TM,":"),TM.forEach(t),lHo=i(ia),Jfe=n(ia,"UL",{});var Ast=s(Jfe);e0=n(Ast,"LI",{});var Pwe=s(e0);Yfe=n(Pwe,"STRONG",{});var Lst=s(Yfe);iHo=r(Lst,"maskformer"),Lst.forEach(t),dHo=r(Pwe," \u2014 "),YN=n(Pwe,"A",{href:!0});var Bst=s(YN);cHo=r(Bst,"MaskFormerForInstanceSegmentation"),Bst.forEach(t),fHo=r(Pwe," (MaskFormer model)"),Pwe.forEach(t),Ast.forEach(t),mHo=i(ia),o0=n(ia,"P",{});var $we=s(o0);gHo=r($we,"The model is set in evaluation mode by default using "),Kfe=n($we,"CODE",{});var xst=s(Kfe);hHo=r(xst,"model.eval()"),xst.forEach(t),pHo=r($we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n($we,"CODE",{});var kst=s(Zfe);_Ho=r(kst,"model.train()"),kst.forEach(t),$we.forEach(t),uHo=i(ia),eme=n(ia,"P",{});var Rst=s(eme);bHo=r(Rst,"Examples:"),Rst.forEach(t),vHo=i(ia),m(wy.$$.fragment,ia),ia.forEach(t),jl.forEach(t),lke=i(d),gc=n(d,"H2",{class:!0});var bSe=s(gc);r0=n(bSe,"A",{id:!0,class:!0,href:!0});var Sst=s(r0);ome=n(Sst,"SPAN",{});var Pst=s(ome);m(Ay.$$.fragment,Pst),Pst.forEach(t),Sst.forEach(t),THo=i(bSe),rme=n(bSe,"SPAN",{});var $st=s(rme);FHo=r($st,"TFAutoModel"),$st.forEach(t),bSe.forEach(t),ike=i(d),vr=n(d,"DIV",{class:!0});var Nl=s(vr);m(Ly.$$.fragment,Nl),CHo=i(Nl),hc=n(Nl,"P",{});var _W=s(hc);MHo=r(_W,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tme=n(_W,"CODE",{});var Ist=s(tme);EHo=r(Ist,"from_pretrained()"),Ist.forEach(t),yHo=r(_W,"class method or the "),ame=n(_W,"CODE",{});var jst=s(ame);wHo=r(jst,"from_config()"),jst.forEach(t),AHo=r(_W,`class
method.`),_W.forEach(t),LHo=i(Nl),By=n(Nl,"P",{});var vSe=s(By);BHo=r(vSe,"This class cannot be instantiated directly using "),nme=n(vSe,"CODE",{});var Dst=s(nme);xHo=r(Dst,"__init__()"),Dst.forEach(t),kHo=r(vSe," (throws an error)."),vSe.forEach(t),RHo=i(Nl),gt=n(Nl,"DIV",{class:!0});var ql=s(gt);m(xy.$$.fragment,ql),SHo=i(ql),sme=n(ql,"P",{});var Nst=s(sme);PHo=r(Nst,"Instantiates one of the base model classes of the library from a configuration."),Nst.forEach(t),$Ho=i(ql),pc=n(ql,"P",{});var uW=s(pc);IHo=r(uW,`Note:
Loading a model from its configuration file does `),lme=n(uW,"STRONG",{});var qst=s(lme);jHo=r(qst,"not"),qst.forEach(t),DHo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ime=n(uW,"CODE",{});var Ost=s(ime);NHo=r(Ost,"from_pretrained()"),Ost.forEach(t),qHo=r(uW,"to load the model weights."),uW.forEach(t),OHo=i(ql),dme=n(ql,"P",{});var Gst=s(dme);GHo=r(Gst,"Examples:"),Gst.forEach(t),XHo=i(ql),m(ky.$$.fragment,ql),ql.forEach(t),VHo=i(Nl),ho=n(Nl,"DIV",{class:!0});var pa=s(ho);m(Ry.$$.fragment,pa),zHo=i(pa),cme=n(pa,"P",{});var Xst=s(cme);WHo=r(Xst,"Instantiate one of the base model classes of the library from a pretrained model."),Xst.forEach(t),QHo=i(pa),_n=n(pa,"P",{});var FM=s(_n);HHo=r(FM,"The model class to instantiate is selected based on the "),fme=n(FM,"CODE",{});var Vst=s(fme);UHo=r(Vst,"model_type"),Vst.forEach(t),JHo=r(FM,` property of the config object (either
passed as an argument or loaded from `),mme=n(FM,"CODE",{});var zst=s(mme);YHo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),KHo=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(FM,"CODE",{});var Wst=s(gme);ZHo=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),eUo=r(FM,":"),FM.forEach(t),oUo=i(pa),B=n(pa,"UL",{});var x=s(B);t0=n(x,"LI",{});var Iwe=s(t0);hme=n(Iwe,"STRONG",{});var Qst=s(hme);rUo=r(Qst,"albert"),Qst.forEach(t),tUo=r(Iwe," \u2014 "),KN=n(Iwe,"A",{href:!0});var Hst=s(KN);aUo=r(Hst,"TFAlbertModel"),Hst.forEach(t),nUo=r(Iwe," (ALBERT model)"),Iwe.forEach(t),sUo=i(x),a0=n(x,"LI",{});var jwe=s(a0);pme=n(jwe,"STRONG",{});var Ust=s(pme);lUo=r(Ust,"bart"),Ust.forEach(t),iUo=r(jwe," \u2014 "),ZN=n(jwe,"A",{href:!0});var Jst=s(ZN);dUo=r(Jst,"TFBartModel"),Jst.forEach(t),cUo=r(jwe," (BART model)"),jwe.forEach(t),fUo=i(x),n0=n(x,"LI",{});var Dwe=s(n0);_me=n(Dwe,"STRONG",{});var Yst=s(_me);mUo=r(Yst,"bert"),Yst.forEach(t),gUo=r(Dwe," \u2014 "),eq=n(Dwe,"A",{href:!0});var Kst=s(eq);hUo=r(Kst,"TFBertModel"),Kst.forEach(t),pUo=r(Dwe," (BERT model)"),Dwe.forEach(t),_Uo=i(x),s0=n(x,"LI",{});var Nwe=s(s0);ume=n(Nwe,"STRONG",{});var Zst=s(ume);uUo=r(Zst,"blenderbot"),Zst.forEach(t),bUo=r(Nwe," \u2014 "),oq=n(Nwe,"A",{href:!0});var elt=s(oq);vUo=r(elt,"TFBlenderbotModel"),elt.forEach(t),TUo=r(Nwe," (Blenderbot model)"),Nwe.forEach(t),FUo=i(x),l0=n(x,"LI",{});var qwe=s(l0);bme=n(qwe,"STRONG",{});var olt=s(bme);CUo=r(olt,"blenderbot-small"),olt.forEach(t),MUo=r(qwe," \u2014 "),rq=n(qwe,"A",{href:!0});var rlt=s(rq);EUo=r(rlt,"TFBlenderbotSmallModel"),rlt.forEach(t),yUo=r(qwe," (BlenderbotSmall model)"),qwe.forEach(t),wUo=i(x),i0=n(x,"LI",{});var Owe=s(i0);vme=n(Owe,"STRONG",{});var tlt=s(vme);AUo=r(tlt,"camembert"),tlt.forEach(t),LUo=r(Owe," \u2014 "),tq=n(Owe,"A",{href:!0});var alt=s(tq);BUo=r(alt,"TFCamembertModel"),alt.forEach(t),xUo=r(Owe," (CamemBERT model)"),Owe.forEach(t),kUo=i(x),d0=n(x,"LI",{});var Gwe=s(d0);Tme=n(Gwe,"STRONG",{});var nlt=s(Tme);RUo=r(nlt,"clip"),nlt.forEach(t),SUo=r(Gwe," \u2014 "),aq=n(Gwe,"A",{href:!0});var slt=s(aq);PUo=r(slt,"TFCLIPModel"),slt.forEach(t),$Uo=r(Gwe," (CLIP model)"),Gwe.forEach(t),IUo=i(x),c0=n(x,"LI",{});var Xwe=s(c0);Fme=n(Xwe,"STRONG",{});var llt=s(Fme);jUo=r(llt,"convbert"),llt.forEach(t),DUo=r(Xwe," \u2014 "),nq=n(Xwe,"A",{href:!0});var ilt=s(nq);NUo=r(ilt,"TFConvBertModel"),ilt.forEach(t),qUo=r(Xwe," (ConvBERT model)"),Xwe.forEach(t),OUo=i(x),f0=n(x,"LI",{});var Vwe=s(f0);Cme=n(Vwe,"STRONG",{});var dlt=s(Cme);GUo=r(dlt,"convnext"),dlt.forEach(t),XUo=r(Vwe," \u2014 "),sq=n(Vwe,"A",{href:!0});var clt=s(sq);VUo=r(clt,"TFConvNextModel"),clt.forEach(t),zUo=r(Vwe," (ConvNext model)"),Vwe.forEach(t),WUo=i(x),m0=n(x,"LI",{});var zwe=s(m0);Mme=n(zwe,"STRONG",{});var flt=s(Mme);QUo=r(flt,"ctrl"),flt.forEach(t),HUo=r(zwe," \u2014 "),lq=n(zwe,"A",{href:!0});var mlt=s(lq);UUo=r(mlt,"TFCTRLModel"),mlt.forEach(t),JUo=r(zwe," (CTRL model)"),zwe.forEach(t),YUo=i(x),g0=n(x,"LI",{});var Wwe=s(g0);Eme=n(Wwe,"STRONG",{});var glt=s(Eme);KUo=r(glt,"deberta"),glt.forEach(t),ZUo=r(Wwe," \u2014 "),iq=n(Wwe,"A",{href:!0});var hlt=s(iq);eJo=r(hlt,"TFDebertaModel"),hlt.forEach(t),oJo=r(Wwe," (DeBERTa model)"),Wwe.forEach(t),rJo=i(x),h0=n(x,"LI",{});var Qwe=s(h0);yme=n(Qwe,"STRONG",{});var plt=s(yme);tJo=r(plt,"deberta-v2"),plt.forEach(t),aJo=r(Qwe," \u2014 "),dq=n(Qwe,"A",{href:!0});var _lt=s(dq);nJo=r(_lt,"TFDebertaV2Model"),_lt.forEach(t),sJo=r(Qwe," (DeBERTa-v2 model)"),Qwe.forEach(t),lJo=i(x),p0=n(x,"LI",{});var Hwe=s(p0);wme=n(Hwe,"STRONG",{});var ult=s(wme);iJo=r(ult,"distilbert"),ult.forEach(t),dJo=r(Hwe," \u2014 "),cq=n(Hwe,"A",{href:!0});var blt=s(cq);cJo=r(blt,"TFDistilBertModel"),blt.forEach(t),fJo=r(Hwe," (DistilBERT model)"),Hwe.forEach(t),mJo=i(x),_0=n(x,"LI",{});var Uwe=s(_0);Ame=n(Uwe,"STRONG",{});var vlt=s(Ame);gJo=r(vlt,"dpr"),vlt.forEach(t),hJo=r(Uwe," \u2014 "),fq=n(Uwe,"A",{href:!0});var Tlt=s(fq);pJo=r(Tlt,"TFDPRQuestionEncoder"),Tlt.forEach(t),_Jo=r(Uwe," (DPR model)"),Uwe.forEach(t),uJo=i(x),u0=n(x,"LI",{});var Jwe=s(u0);Lme=n(Jwe,"STRONG",{});var Flt=s(Lme);bJo=r(Flt,"electra"),Flt.forEach(t),vJo=r(Jwe," \u2014 "),mq=n(Jwe,"A",{href:!0});var Clt=s(mq);TJo=r(Clt,"TFElectraModel"),Clt.forEach(t),FJo=r(Jwe," (ELECTRA model)"),Jwe.forEach(t),CJo=i(x),b0=n(x,"LI",{});var Ywe=s(b0);Bme=n(Ywe,"STRONG",{});var Mlt=s(Bme);MJo=r(Mlt,"flaubert"),Mlt.forEach(t),EJo=r(Ywe," \u2014 "),gq=n(Ywe,"A",{href:!0});var Elt=s(gq);yJo=r(Elt,"TFFlaubertModel"),Elt.forEach(t),wJo=r(Ywe," (FlauBERT model)"),Ywe.forEach(t),AJo=i(x),Os=n(x,"LI",{});var DL=s(Os);xme=n(DL,"STRONG",{});var ylt=s(xme);LJo=r(ylt,"funnel"),ylt.forEach(t),BJo=r(DL," \u2014 "),hq=n(DL,"A",{href:!0});var wlt=s(hq);xJo=r(wlt,"TFFunnelModel"),wlt.forEach(t),kJo=r(DL," or "),pq=n(DL,"A",{href:!0});var Alt=s(pq);RJo=r(Alt,"TFFunnelBaseModel"),Alt.forEach(t),SJo=r(DL," (Funnel Transformer model)"),DL.forEach(t),PJo=i(x),v0=n(x,"LI",{});var Kwe=s(v0);kme=n(Kwe,"STRONG",{});var Llt=s(kme);$Jo=r(Llt,"gpt2"),Llt.forEach(t),IJo=r(Kwe," \u2014 "),_q=n(Kwe,"A",{href:!0});var Blt=s(_q);jJo=r(Blt,"TFGPT2Model"),Blt.forEach(t),DJo=r(Kwe," (OpenAI GPT-2 model)"),Kwe.forEach(t),NJo=i(x),T0=n(x,"LI",{});var Zwe=s(T0);Rme=n(Zwe,"STRONG",{});var xlt=s(Rme);qJo=r(xlt,"hubert"),xlt.forEach(t),OJo=r(Zwe," \u2014 "),uq=n(Zwe,"A",{href:!0});var klt=s(uq);GJo=r(klt,"TFHubertModel"),klt.forEach(t),XJo=r(Zwe," (Hubert model)"),Zwe.forEach(t),VJo=i(x),F0=n(x,"LI",{});var e6e=s(F0);Sme=n(e6e,"STRONG",{});var Rlt=s(Sme);zJo=r(Rlt,"layoutlm"),Rlt.forEach(t),WJo=r(e6e," \u2014 "),bq=n(e6e,"A",{href:!0});var Slt=s(bq);QJo=r(Slt,"TFLayoutLMModel"),Slt.forEach(t),HJo=r(e6e," (LayoutLM model)"),e6e.forEach(t),UJo=i(x),C0=n(x,"LI",{});var o6e=s(C0);Pme=n(o6e,"STRONG",{});var Plt=s(Pme);JJo=r(Plt,"led"),Plt.forEach(t),YJo=r(o6e," \u2014 "),vq=n(o6e,"A",{href:!0});var $lt=s(vq);KJo=r($lt,"TFLEDModel"),$lt.forEach(t),ZJo=r(o6e," (LED model)"),o6e.forEach(t),eYo=i(x),M0=n(x,"LI",{});var r6e=s(M0);$me=n(r6e,"STRONG",{});var Ilt=s($me);oYo=r(Ilt,"longformer"),Ilt.forEach(t),rYo=r(r6e," \u2014 "),Tq=n(r6e,"A",{href:!0});var jlt=s(Tq);tYo=r(jlt,"TFLongformerModel"),jlt.forEach(t),aYo=r(r6e," (Longformer model)"),r6e.forEach(t),nYo=i(x),E0=n(x,"LI",{});var t6e=s(E0);Ime=n(t6e,"STRONG",{});var Dlt=s(Ime);sYo=r(Dlt,"lxmert"),Dlt.forEach(t),lYo=r(t6e," \u2014 "),Fq=n(t6e,"A",{href:!0});var Nlt=s(Fq);iYo=r(Nlt,"TFLxmertModel"),Nlt.forEach(t),dYo=r(t6e," (LXMERT model)"),t6e.forEach(t),cYo=i(x),y0=n(x,"LI",{});var a6e=s(y0);jme=n(a6e,"STRONG",{});var qlt=s(jme);fYo=r(qlt,"marian"),qlt.forEach(t),mYo=r(a6e," \u2014 "),Cq=n(a6e,"A",{href:!0});var Olt=s(Cq);gYo=r(Olt,"TFMarianModel"),Olt.forEach(t),hYo=r(a6e," (Marian model)"),a6e.forEach(t),pYo=i(x),w0=n(x,"LI",{});var n6e=s(w0);Dme=n(n6e,"STRONG",{});var Glt=s(Dme);_Yo=r(Glt,"mbart"),Glt.forEach(t),uYo=r(n6e," \u2014 "),Mq=n(n6e,"A",{href:!0});var Xlt=s(Mq);bYo=r(Xlt,"TFMBartModel"),Xlt.forEach(t),vYo=r(n6e," (mBART model)"),n6e.forEach(t),TYo=i(x),A0=n(x,"LI",{});var s6e=s(A0);Nme=n(s6e,"STRONG",{});var Vlt=s(Nme);FYo=r(Vlt,"mobilebert"),Vlt.forEach(t),CYo=r(s6e," \u2014 "),Eq=n(s6e,"A",{href:!0});var zlt=s(Eq);MYo=r(zlt,"TFMobileBertModel"),zlt.forEach(t),EYo=r(s6e," (MobileBERT model)"),s6e.forEach(t),yYo=i(x),L0=n(x,"LI",{});var l6e=s(L0);qme=n(l6e,"STRONG",{});var Wlt=s(qme);wYo=r(Wlt,"mpnet"),Wlt.forEach(t),AYo=r(l6e," \u2014 "),yq=n(l6e,"A",{href:!0});var Qlt=s(yq);LYo=r(Qlt,"TFMPNetModel"),Qlt.forEach(t),BYo=r(l6e," (MPNet model)"),l6e.forEach(t),xYo=i(x),B0=n(x,"LI",{});var i6e=s(B0);Ome=n(i6e,"STRONG",{});var Hlt=s(Ome);kYo=r(Hlt,"mt5"),Hlt.forEach(t),RYo=r(i6e," \u2014 "),wq=n(i6e,"A",{href:!0});var Ult=s(wq);SYo=r(Ult,"TFMT5Model"),Ult.forEach(t),PYo=r(i6e," (mT5 model)"),i6e.forEach(t),$Yo=i(x),x0=n(x,"LI",{});var d6e=s(x0);Gme=n(d6e,"STRONG",{});var Jlt=s(Gme);IYo=r(Jlt,"openai-gpt"),Jlt.forEach(t),jYo=r(d6e," \u2014 "),Aq=n(d6e,"A",{href:!0});var Ylt=s(Aq);DYo=r(Ylt,"TFOpenAIGPTModel"),Ylt.forEach(t),NYo=r(d6e," (OpenAI GPT model)"),d6e.forEach(t),qYo=i(x),k0=n(x,"LI",{});var c6e=s(k0);Xme=n(c6e,"STRONG",{});var Klt=s(Xme);OYo=r(Klt,"pegasus"),Klt.forEach(t),GYo=r(c6e," \u2014 "),Lq=n(c6e,"A",{href:!0});var Zlt=s(Lq);XYo=r(Zlt,"TFPegasusModel"),Zlt.forEach(t),VYo=r(c6e," (Pegasus model)"),c6e.forEach(t),zYo=i(x),R0=n(x,"LI",{});var f6e=s(R0);Vme=n(f6e,"STRONG",{});var eit=s(Vme);WYo=r(eit,"rembert"),eit.forEach(t),QYo=r(f6e," \u2014 "),Bq=n(f6e,"A",{href:!0});var oit=s(Bq);HYo=r(oit,"TFRemBertModel"),oit.forEach(t),UYo=r(f6e," (RemBERT model)"),f6e.forEach(t),JYo=i(x),S0=n(x,"LI",{});var m6e=s(S0);zme=n(m6e,"STRONG",{});var rit=s(zme);YYo=r(rit,"roberta"),rit.forEach(t),KYo=r(m6e," \u2014 "),xq=n(m6e,"A",{href:!0});var tit=s(xq);ZYo=r(tit,"TFRobertaModel"),tit.forEach(t),eKo=r(m6e," (RoBERTa model)"),m6e.forEach(t),oKo=i(x),P0=n(x,"LI",{});var g6e=s(P0);Wme=n(g6e,"STRONG",{});var ait=s(Wme);rKo=r(ait,"roformer"),ait.forEach(t),tKo=r(g6e," \u2014 "),kq=n(g6e,"A",{href:!0});var nit=s(kq);aKo=r(nit,"TFRoFormerModel"),nit.forEach(t),nKo=r(g6e," (RoFormer model)"),g6e.forEach(t),sKo=i(x),$0=n(x,"LI",{});var h6e=s($0);Qme=n(h6e,"STRONG",{});var sit=s(Qme);lKo=r(sit,"speech_to_text"),sit.forEach(t),iKo=r(h6e," \u2014 "),Rq=n(h6e,"A",{href:!0});var lit=s(Rq);dKo=r(lit,"TFSpeech2TextModel"),lit.forEach(t),cKo=r(h6e," (Speech2Text model)"),h6e.forEach(t),fKo=i(x),I0=n(x,"LI",{});var p6e=s(I0);Hme=n(p6e,"STRONG",{});var iit=s(Hme);mKo=r(iit,"t5"),iit.forEach(t),gKo=r(p6e," \u2014 "),Sq=n(p6e,"A",{href:!0});var dit=s(Sq);hKo=r(dit,"TFT5Model"),dit.forEach(t),pKo=r(p6e," (T5 model)"),p6e.forEach(t),_Ko=i(x),j0=n(x,"LI",{});var _6e=s(j0);Ume=n(_6e,"STRONG",{});var cit=s(Ume);uKo=r(cit,"tapas"),cit.forEach(t),bKo=r(_6e," \u2014 "),Pq=n(_6e,"A",{href:!0});var fit=s(Pq);vKo=r(fit,"TFTapasModel"),fit.forEach(t),TKo=r(_6e," (TAPAS model)"),_6e.forEach(t),FKo=i(x),D0=n(x,"LI",{});var u6e=s(D0);Jme=n(u6e,"STRONG",{});var mit=s(Jme);CKo=r(mit,"transfo-xl"),mit.forEach(t),MKo=r(u6e," \u2014 "),$q=n(u6e,"A",{href:!0});var git=s($q);EKo=r(git,"TFTransfoXLModel"),git.forEach(t),yKo=r(u6e," (Transformer-XL model)"),u6e.forEach(t),wKo=i(x),N0=n(x,"LI",{});var b6e=s(N0);Yme=n(b6e,"STRONG",{});var hit=s(Yme);AKo=r(hit,"vit"),hit.forEach(t),LKo=r(b6e," \u2014 "),Iq=n(b6e,"A",{href:!0});var pit=s(Iq);BKo=r(pit,"TFViTModel"),pit.forEach(t),xKo=r(b6e," (ViT model)"),b6e.forEach(t),kKo=i(x),q0=n(x,"LI",{});var v6e=s(q0);Kme=n(v6e,"STRONG",{});var _it=s(Kme);RKo=r(_it,"wav2vec2"),_it.forEach(t),SKo=r(v6e," \u2014 "),jq=n(v6e,"A",{href:!0});var uit=s(jq);PKo=r(uit,"TFWav2Vec2Model"),uit.forEach(t),$Ko=r(v6e," (Wav2Vec2 model)"),v6e.forEach(t),IKo=i(x),O0=n(x,"LI",{});var T6e=s(O0);Zme=n(T6e,"STRONG",{});var bit=s(Zme);jKo=r(bit,"xlm"),bit.forEach(t),DKo=r(T6e," \u2014 "),Dq=n(T6e,"A",{href:!0});var vit=s(Dq);NKo=r(vit,"TFXLMModel"),vit.forEach(t),qKo=r(T6e," (XLM model)"),T6e.forEach(t),OKo=i(x),G0=n(x,"LI",{});var F6e=s(G0);ege=n(F6e,"STRONG",{});var Tit=s(ege);GKo=r(Tit,"xlm-roberta"),Tit.forEach(t),XKo=r(F6e," \u2014 "),Nq=n(F6e,"A",{href:!0});var Fit=s(Nq);VKo=r(Fit,"TFXLMRobertaModel"),Fit.forEach(t),zKo=r(F6e," (XLM-RoBERTa model)"),F6e.forEach(t),WKo=i(x),X0=n(x,"LI",{});var C6e=s(X0);oge=n(C6e,"STRONG",{});var Cit=s(oge);QKo=r(Cit,"xlnet"),Cit.forEach(t),HKo=r(C6e," \u2014 "),qq=n(C6e,"A",{href:!0});var Mit=s(qq);UKo=r(Mit,"TFXLNetModel"),Mit.forEach(t),JKo=r(C6e," (XLNet model)"),C6e.forEach(t),x.forEach(t),YKo=i(pa),rge=n(pa,"P",{});var Eit=s(rge);KKo=r(Eit,"Examples:"),Eit.forEach(t),ZKo=i(pa),m(Sy.$$.fragment,pa),pa.forEach(t),Nl.forEach(t),dke=i(d),_c=n(d,"H2",{class:!0});var TSe=s(_c);V0=n(TSe,"A",{id:!0,class:!0,href:!0});var yit=s(V0);tge=n(yit,"SPAN",{});var wit=s(tge);m(Py.$$.fragment,wit),wit.forEach(t),yit.forEach(t),eZo=i(TSe),age=n(TSe,"SPAN",{});var Ait=s(age);oZo=r(Ait,"TFAutoModelForPreTraining"),Ait.forEach(t),TSe.forEach(t),cke=i(d),Tr=n(d,"DIV",{class:!0});var Ol=s(Tr);m($y.$$.fragment,Ol),rZo=i(Ol),uc=n(Ol,"P",{});var bW=s(uc);tZo=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nge=n(bW,"CODE",{});var Lit=s(nge);aZo=r(Lit,"from_pretrained()"),Lit.forEach(t),nZo=r(bW,"class method or the "),sge=n(bW,"CODE",{});var Bit=s(sge);sZo=r(Bit,"from_config()"),Bit.forEach(t),lZo=r(bW,`class
method.`),bW.forEach(t),iZo=i(Ol),Iy=n(Ol,"P",{});var FSe=s(Iy);dZo=r(FSe,"This class cannot be instantiated directly using "),lge=n(FSe,"CODE",{});var xit=s(lge);cZo=r(xit,"__init__()"),xit.forEach(t),fZo=r(FSe," (throws an error)."),FSe.forEach(t),mZo=i(Ol),ht=n(Ol,"DIV",{class:!0});var Gl=s(ht);m(jy.$$.fragment,Gl),gZo=i(Gl),ige=n(Gl,"P",{});var kit=s(ige);hZo=r(kit,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kit.forEach(t),pZo=i(Gl),bc=n(Gl,"P",{});var vW=s(bc);_Zo=r(vW,`Note:
Loading a model from its configuration file does `),dge=n(vW,"STRONG",{});var Rit=s(dge);uZo=r(Rit,"not"),Rit.forEach(t),bZo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=n(vW,"CODE",{});var Sit=s(cge);vZo=r(Sit,"from_pretrained()"),Sit.forEach(t),TZo=r(vW,"to load the model weights."),vW.forEach(t),FZo=i(Gl),fge=n(Gl,"P",{});var Pit=s(fge);CZo=r(Pit,"Examples:"),Pit.forEach(t),MZo=i(Gl),m(Dy.$$.fragment,Gl),Gl.forEach(t),EZo=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(Ny.$$.fragment,_a),yZo=i(_a),mge=n(_a,"P",{});var $it=s(mge);wZo=r($it,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$it.forEach(t),AZo=i(_a),un=n(_a,"P",{});var CM=s(un);LZo=r(CM,"The model class to instantiate is selected based on the "),gge=n(CM,"CODE",{});var Iit=s(gge);BZo=r(Iit,"model_type"),Iit.forEach(t),xZo=r(CM,` property of the config object (either
passed as an argument or loaded from `),hge=n(CM,"CODE",{});var jit=s(hge);kZo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),RZo=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=n(CM,"CODE",{});var Dit=s(pge);SZo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),PZo=r(CM,":"),CM.forEach(t),$Zo=i(_a),H=n(_a,"UL",{});var U=s(H);z0=n(U,"LI",{});var M6e=s(z0);_ge=n(M6e,"STRONG",{});var Nit=s(_ge);IZo=r(Nit,"albert"),Nit.forEach(t),jZo=r(M6e," \u2014 "),Oq=n(M6e,"A",{href:!0});var qit=s(Oq);DZo=r(qit,"TFAlbertForPreTraining"),qit.forEach(t),NZo=r(M6e," (ALBERT model)"),M6e.forEach(t),qZo=i(U),W0=n(U,"LI",{});var E6e=s(W0);uge=n(E6e,"STRONG",{});var Oit=s(uge);OZo=r(Oit,"bart"),Oit.forEach(t),GZo=r(E6e," \u2014 "),Gq=n(E6e,"A",{href:!0});var Git=s(Gq);XZo=r(Git,"TFBartForConditionalGeneration"),Git.forEach(t),VZo=r(E6e," (BART model)"),E6e.forEach(t),zZo=i(U),Q0=n(U,"LI",{});var y6e=s(Q0);bge=n(y6e,"STRONG",{});var Xit=s(bge);WZo=r(Xit,"bert"),Xit.forEach(t),QZo=r(y6e," \u2014 "),Xq=n(y6e,"A",{href:!0});var Vit=s(Xq);HZo=r(Vit,"TFBertForPreTraining"),Vit.forEach(t),UZo=r(y6e," (BERT model)"),y6e.forEach(t),JZo=i(U),H0=n(U,"LI",{});var w6e=s(H0);vge=n(w6e,"STRONG",{});var zit=s(vge);YZo=r(zit,"camembert"),zit.forEach(t),KZo=r(w6e," \u2014 "),Vq=n(w6e,"A",{href:!0});var Wit=s(Vq);ZZo=r(Wit,"TFCamembertForMaskedLM"),Wit.forEach(t),eer=r(w6e," (CamemBERT model)"),w6e.forEach(t),oer=i(U),U0=n(U,"LI",{});var A6e=s(U0);Tge=n(A6e,"STRONG",{});var Qit=s(Tge);rer=r(Qit,"ctrl"),Qit.forEach(t),ter=r(A6e," \u2014 "),zq=n(A6e,"A",{href:!0});var Hit=s(zq);aer=r(Hit,"TFCTRLLMHeadModel"),Hit.forEach(t),ner=r(A6e," (CTRL model)"),A6e.forEach(t),ser=i(U),J0=n(U,"LI",{});var L6e=s(J0);Fge=n(L6e,"STRONG",{});var Uit=s(Fge);ler=r(Uit,"distilbert"),Uit.forEach(t),ier=r(L6e," \u2014 "),Wq=n(L6e,"A",{href:!0});var Jit=s(Wq);der=r(Jit,"TFDistilBertForMaskedLM"),Jit.forEach(t),cer=r(L6e," (DistilBERT model)"),L6e.forEach(t),fer=i(U),Y0=n(U,"LI",{});var B6e=s(Y0);Cge=n(B6e,"STRONG",{});var Yit=s(Cge);mer=r(Yit,"electra"),Yit.forEach(t),ger=r(B6e," \u2014 "),Qq=n(B6e,"A",{href:!0});var Kit=s(Qq);her=r(Kit,"TFElectraForPreTraining"),Kit.forEach(t),per=r(B6e," (ELECTRA model)"),B6e.forEach(t),_er=i(U),K0=n(U,"LI",{});var x6e=s(K0);Mge=n(x6e,"STRONG",{});var Zit=s(Mge);uer=r(Zit,"flaubert"),Zit.forEach(t),ber=r(x6e," \u2014 "),Hq=n(x6e,"A",{href:!0});var edt=s(Hq);ver=r(edt,"TFFlaubertWithLMHeadModel"),edt.forEach(t),Ter=r(x6e," (FlauBERT model)"),x6e.forEach(t),Fer=i(U),Z0=n(U,"LI",{});var k6e=s(Z0);Ege=n(k6e,"STRONG",{});var odt=s(Ege);Cer=r(odt,"funnel"),odt.forEach(t),Mer=r(k6e," \u2014 "),Uq=n(k6e,"A",{href:!0});var rdt=s(Uq);Eer=r(rdt,"TFFunnelForPreTraining"),rdt.forEach(t),yer=r(k6e," (Funnel Transformer model)"),k6e.forEach(t),wer=i(U),eT=n(U,"LI",{});var R6e=s(eT);yge=n(R6e,"STRONG",{});var tdt=s(yge);Aer=r(tdt,"gpt2"),tdt.forEach(t),Ler=r(R6e," \u2014 "),Jq=n(R6e,"A",{href:!0});var adt=s(Jq);Ber=r(adt,"TFGPT2LMHeadModel"),adt.forEach(t),xer=r(R6e," (OpenAI GPT-2 model)"),R6e.forEach(t),ker=i(U),oT=n(U,"LI",{});var S6e=s(oT);wge=n(S6e,"STRONG",{});var ndt=s(wge);Rer=r(ndt,"layoutlm"),ndt.forEach(t),Ser=r(S6e," \u2014 "),Yq=n(S6e,"A",{href:!0});var sdt=s(Yq);Per=r(sdt,"TFLayoutLMForMaskedLM"),sdt.forEach(t),$er=r(S6e," (LayoutLM model)"),S6e.forEach(t),Ier=i(U),rT=n(U,"LI",{});var P6e=s(rT);Age=n(P6e,"STRONG",{});var ldt=s(Age);jer=r(ldt,"lxmert"),ldt.forEach(t),Der=r(P6e," \u2014 "),Kq=n(P6e,"A",{href:!0});var idt=s(Kq);Ner=r(idt,"TFLxmertForPreTraining"),idt.forEach(t),qer=r(P6e," (LXMERT model)"),P6e.forEach(t),Oer=i(U),tT=n(U,"LI",{});var $6e=s(tT);Lge=n($6e,"STRONG",{});var ddt=s(Lge);Ger=r(ddt,"mobilebert"),ddt.forEach(t),Xer=r($6e," \u2014 "),Zq=n($6e,"A",{href:!0});var cdt=s(Zq);Ver=r(cdt,"TFMobileBertForPreTraining"),cdt.forEach(t),zer=r($6e," (MobileBERT model)"),$6e.forEach(t),Wer=i(U),aT=n(U,"LI",{});var I6e=s(aT);Bge=n(I6e,"STRONG",{});var fdt=s(Bge);Qer=r(fdt,"mpnet"),fdt.forEach(t),Her=r(I6e," \u2014 "),eO=n(I6e,"A",{href:!0});var mdt=s(eO);Uer=r(mdt,"TFMPNetForMaskedLM"),mdt.forEach(t),Jer=r(I6e," (MPNet model)"),I6e.forEach(t),Yer=i(U),nT=n(U,"LI",{});var j6e=s(nT);xge=n(j6e,"STRONG",{});var gdt=s(xge);Ker=r(gdt,"openai-gpt"),gdt.forEach(t),Zer=r(j6e," \u2014 "),oO=n(j6e,"A",{href:!0});var hdt=s(oO);eor=r(hdt,"TFOpenAIGPTLMHeadModel"),hdt.forEach(t),oor=r(j6e," (OpenAI GPT model)"),j6e.forEach(t),ror=i(U),sT=n(U,"LI",{});var D6e=s(sT);kge=n(D6e,"STRONG",{});var pdt=s(kge);tor=r(pdt,"roberta"),pdt.forEach(t),aor=r(D6e," \u2014 "),rO=n(D6e,"A",{href:!0});var _dt=s(rO);nor=r(_dt,"TFRobertaForMaskedLM"),_dt.forEach(t),sor=r(D6e," (RoBERTa model)"),D6e.forEach(t),lor=i(U),lT=n(U,"LI",{});var N6e=s(lT);Rge=n(N6e,"STRONG",{});var udt=s(Rge);ior=r(udt,"t5"),udt.forEach(t),dor=r(N6e," \u2014 "),tO=n(N6e,"A",{href:!0});var bdt=s(tO);cor=r(bdt,"TFT5ForConditionalGeneration"),bdt.forEach(t),mor=r(N6e," (T5 model)"),N6e.forEach(t),gor=i(U),iT=n(U,"LI",{});var q6e=s(iT);Sge=n(q6e,"STRONG",{});var vdt=s(Sge);hor=r(vdt,"tapas"),vdt.forEach(t),por=r(q6e," \u2014 "),aO=n(q6e,"A",{href:!0});var Tdt=s(aO);_or=r(Tdt,"TFTapasForMaskedLM"),Tdt.forEach(t),uor=r(q6e," (TAPAS model)"),q6e.forEach(t),bor=i(U),dT=n(U,"LI",{});var O6e=s(dT);Pge=n(O6e,"STRONG",{});var Fdt=s(Pge);vor=r(Fdt,"transfo-xl"),Fdt.forEach(t),Tor=r(O6e," \u2014 "),nO=n(O6e,"A",{href:!0});var Cdt=s(nO);For=r(Cdt,"TFTransfoXLLMHeadModel"),Cdt.forEach(t),Cor=r(O6e," (Transformer-XL model)"),O6e.forEach(t),Mor=i(U),cT=n(U,"LI",{});var G6e=s(cT);$ge=n(G6e,"STRONG",{});var Mdt=s($ge);Eor=r(Mdt,"xlm"),Mdt.forEach(t),yor=r(G6e," \u2014 "),sO=n(G6e,"A",{href:!0});var Edt=s(sO);wor=r(Edt,"TFXLMWithLMHeadModel"),Edt.forEach(t),Aor=r(G6e," (XLM model)"),G6e.forEach(t),Lor=i(U),fT=n(U,"LI",{});var X6e=s(fT);Ige=n(X6e,"STRONG",{});var ydt=s(Ige);Bor=r(ydt,"xlm-roberta"),ydt.forEach(t),xor=r(X6e," \u2014 "),lO=n(X6e,"A",{href:!0});var wdt=s(lO);kor=r(wdt,"TFXLMRobertaForMaskedLM"),wdt.forEach(t),Ror=r(X6e," (XLM-RoBERTa model)"),X6e.forEach(t),Sor=i(U),mT=n(U,"LI",{});var V6e=s(mT);jge=n(V6e,"STRONG",{});var Adt=s(jge);Por=r(Adt,"xlnet"),Adt.forEach(t),$or=r(V6e," \u2014 "),iO=n(V6e,"A",{href:!0});var Ldt=s(iO);Ior=r(Ldt,"TFXLNetLMHeadModel"),Ldt.forEach(t),jor=r(V6e," (XLNet model)"),V6e.forEach(t),U.forEach(t),Dor=i(_a),Dge=n(_a,"P",{});var Bdt=s(Dge);Nor=r(Bdt,"Examples:"),Bdt.forEach(t),qor=i(_a),m(qy.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),fke=i(d),vc=n(d,"H2",{class:!0});var CSe=s(vc);gT=n(CSe,"A",{id:!0,class:!0,href:!0});var xdt=s(gT);Nge=n(xdt,"SPAN",{});var kdt=s(Nge);m(Oy.$$.fragment,kdt),kdt.forEach(t),xdt.forEach(t),Oor=i(CSe),qge=n(CSe,"SPAN",{});var Rdt=s(qge);Gor=r(Rdt,"TFAutoModelForCausalLM"),Rdt.forEach(t),CSe.forEach(t),mke=i(d),Fr=n(d,"DIV",{class:!0});var Xl=s(Fr);m(Gy.$$.fragment,Xl),Xor=i(Xl),Tc=n(Xl,"P",{});var TW=s(Tc);Vor=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oge=n(TW,"CODE",{});var Sdt=s(Oge);zor=r(Sdt,"from_pretrained()"),Sdt.forEach(t),Wor=r(TW,"class method or the "),Gge=n(TW,"CODE",{});var Pdt=s(Gge);Qor=r(Pdt,"from_config()"),Pdt.forEach(t),Hor=r(TW,`class
method.`),TW.forEach(t),Uor=i(Xl),Xy=n(Xl,"P",{});var MSe=s(Xy);Jor=r(MSe,"This class cannot be instantiated directly using "),Xge=n(MSe,"CODE",{});var $dt=s(Xge);Yor=r($dt,"__init__()"),$dt.forEach(t),Kor=r(MSe," (throws an error)."),MSe.forEach(t),Zor=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(Vy.$$.fragment,Vl),err=i(Vl),Vge=n(Vl,"P",{});var Idt=s(Vge);orr=r(Idt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Idt.forEach(t),rrr=i(Vl),Fc=n(Vl,"P",{});var FW=s(Fc);trr=r(FW,`Note:
Loading a model from its configuration file does `),zge=n(FW,"STRONG",{});var jdt=s(zge);arr=r(jdt,"not"),jdt.forEach(t),nrr=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wge=n(FW,"CODE",{});var Ddt=s(Wge);srr=r(Ddt,"from_pretrained()"),Ddt.forEach(t),lrr=r(FW,"to load the model weights."),FW.forEach(t),irr=i(Vl),Qge=n(Vl,"P",{});var Ndt=s(Qge);drr=r(Ndt,"Examples:"),Ndt.forEach(t),crr=i(Vl),m(zy.$$.fragment,Vl),Vl.forEach(t),frr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(Wy.$$.fragment,ua),mrr=i(ua),Hge=n(ua,"P",{});var qdt=s(Hge);grr=r(qdt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qdt.forEach(t),hrr=i(ua),bn=n(ua,"P",{});var MM=s(bn);prr=r(MM,"The model class to instantiate is selected based on the "),Uge=n(MM,"CODE",{});var Odt=s(Uge);_rr=r(Odt,"model_type"),Odt.forEach(t),urr=r(MM,` property of the config object (either
passed as an argument or loaded from `),Jge=n(MM,"CODE",{});var Gdt=s(Jge);brr=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),vrr=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(MM,"CODE",{});var Xdt=s(Yge);Trr=r(Xdt,"pretrained_model_name_or_path"),Xdt.forEach(t),Frr=r(MM,":"),MM.forEach(t),Crr=i(ua),pe=n(ua,"UL",{});var Me=s(pe);hT=n(Me,"LI",{});var z6e=s(hT);Kge=n(z6e,"STRONG",{});var Vdt=s(Kge);Mrr=r(Vdt,"bert"),Vdt.forEach(t),Err=r(z6e," \u2014 "),dO=n(z6e,"A",{href:!0});var zdt=s(dO);yrr=r(zdt,"TFBertLMHeadModel"),zdt.forEach(t),wrr=r(z6e," (BERT model)"),z6e.forEach(t),Arr=i(Me),pT=n(Me,"LI",{});var W6e=s(pT);Zge=n(W6e,"STRONG",{});var Wdt=s(Zge);Lrr=r(Wdt,"ctrl"),Wdt.forEach(t),Brr=r(W6e," \u2014 "),cO=n(W6e,"A",{href:!0});var Qdt=s(cO);xrr=r(Qdt,"TFCTRLLMHeadModel"),Qdt.forEach(t),krr=r(W6e," (CTRL model)"),W6e.forEach(t),Rrr=i(Me),_T=n(Me,"LI",{});var Q6e=s(_T);ehe=n(Q6e,"STRONG",{});var Hdt=s(ehe);Srr=r(Hdt,"gpt2"),Hdt.forEach(t),Prr=r(Q6e," \u2014 "),fO=n(Q6e,"A",{href:!0});var Udt=s(fO);$rr=r(Udt,"TFGPT2LMHeadModel"),Udt.forEach(t),Irr=r(Q6e," (OpenAI GPT-2 model)"),Q6e.forEach(t),jrr=i(Me),uT=n(Me,"LI",{});var H6e=s(uT);ohe=n(H6e,"STRONG",{});var Jdt=s(ohe);Drr=r(Jdt,"openai-gpt"),Jdt.forEach(t),Nrr=r(H6e," \u2014 "),mO=n(H6e,"A",{href:!0});var Ydt=s(mO);qrr=r(Ydt,"TFOpenAIGPTLMHeadModel"),Ydt.forEach(t),Orr=r(H6e," (OpenAI GPT model)"),H6e.forEach(t),Grr=i(Me),bT=n(Me,"LI",{});var U6e=s(bT);rhe=n(U6e,"STRONG",{});var Kdt=s(rhe);Xrr=r(Kdt,"rembert"),Kdt.forEach(t),Vrr=r(U6e," \u2014 "),gO=n(U6e,"A",{href:!0});var Zdt=s(gO);zrr=r(Zdt,"TFRemBertForCausalLM"),Zdt.forEach(t),Wrr=r(U6e," (RemBERT model)"),U6e.forEach(t),Qrr=i(Me),vT=n(Me,"LI",{});var J6e=s(vT);the=n(J6e,"STRONG",{});var ect=s(the);Hrr=r(ect,"roberta"),ect.forEach(t),Urr=r(J6e," \u2014 "),hO=n(J6e,"A",{href:!0});var oct=s(hO);Jrr=r(oct,"TFRobertaForCausalLM"),oct.forEach(t),Yrr=r(J6e," (RoBERTa model)"),J6e.forEach(t),Krr=i(Me),TT=n(Me,"LI",{});var Y6e=s(TT);ahe=n(Y6e,"STRONG",{});var rct=s(ahe);Zrr=r(rct,"roformer"),rct.forEach(t),etr=r(Y6e," \u2014 "),pO=n(Y6e,"A",{href:!0});var tct=s(pO);otr=r(tct,"TFRoFormerForCausalLM"),tct.forEach(t),rtr=r(Y6e," (RoFormer model)"),Y6e.forEach(t),ttr=i(Me),FT=n(Me,"LI",{});var K6e=s(FT);nhe=n(K6e,"STRONG",{});var act=s(nhe);atr=r(act,"transfo-xl"),act.forEach(t),ntr=r(K6e," \u2014 "),_O=n(K6e,"A",{href:!0});var nct=s(_O);str=r(nct,"TFTransfoXLLMHeadModel"),nct.forEach(t),ltr=r(K6e," (Transformer-XL model)"),K6e.forEach(t),itr=i(Me),CT=n(Me,"LI",{});var Z6e=s(CT);she=n(Z6e,"STRONG",{});var sct=s(she);dtr=r(sct,"xlm"),sct.forEach(t),ctr=r(Z6e," \u2014 "),uO=n(Z6e,"A",{href:!0});var lct=s(uO);ftr=r(lct,"TFXLMWithLMHeadModel"),lct.forEach(t),mtr=r(Z6e," (XLM model)"),Z6e.forEach(t),gtr=i(Me),MT=n(Me,"LI",{});var eAe=s(MT);lhe=n(eAe,"STRONG",{});var ict=s(lhe);htr=r(ict,"xlnet"),ict.forEach(t),ptr=r(eAe," \u2014 "),bO=n(eAe,"A",{href:!0});var dct=s(bO);_tr=r(dct,"TFXLNetLMHeadModel"),dct.forEach(t),utr=r(eAe," (XLNet model)"),eAe.forEach(t),Me.forEach(t),btr=i(ua),ihe=n(ua,"P",{});var cct=s(ihe);vtr=r(cct,"Examples:"),cct.forEach(t),Ttr=i(ua),m(Qy.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),gke=i(d),Cc=n(d,"H2",{class:!0});var ESe=s(Cc);ET=n(ESe,"A",{id:!0,class:!0,href:!0});var fct=s(ET);dhe=n(fct,"SPAN",{});var mct=s(dhe);m(Hy.$$.fragment,mct),mct.forEach(t),fct.forEach(t),Ftr=i(ESe),che=n(ESe,"SPAN",{});var gct=s(che);Ctr=r(gct,"TFAutoModelForImageClassification"),gct.forEach(t),ESe.forEach(t),hke=i(d),Cr=n(d,"DIV",{class:!0});var zl=s(Cr);m(Uy.$$.fragment,zl),Mtr=i(zl),Mc=n(zl,"P",{});var CW=s(Mc);Etr=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fhe=n(CW,"CODE",{});var hct=s(fhe);ytr=r(hct,"from_pretrained()"),hct.forEach(t),wtr=r(CW,"class method or the "),mhe=n(CW,"CODE",{});var pct=s(mhe);Atr=r(pct,"from_config()"),pct.forEach(t),Ltr=r(CW,`class
method.`),CW.forEach(t),Btr=i(zl),Jy=n(zl,"P",{});var ySe=s(Jy);xtr=r(ySe,"This class cannot be instantiated directly using "),ghe=n(ySe,"CODE",{});var _ct=s(ghe);ktr=r(_ct,"__init__()"),_ct.forEach(t),Rtr=r(ySe," (throws an error)."),ySe.forEach(t),Str=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(Yy.$$.fragment,Wl),Ptr=i(Wl),hhe=n(Wl,"P",{});var uct=s(hhe);$tr=r(uct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uct.forEach(t),Itr=i(Wl),Ec=n(Wl,"P",{});var MW=s(Ec);jtr=r(MW,`Note:
Loading a model from its configuration file does `),phe=n(MW,"STRONG",{});var bct=s(phe);Dtr=r(bct,"not"),bct.forEach(t),Ntr=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_he=n(MW,"CODE",{});var vct=s(_he);qtr=r(vct,"from_pretrained()"),vct.forEach(t),Otr=r(MW,"to load the model weights."),MW.forEach(t),Gtr=i(Wl),uhe=n(Wl,"P",{});var Tct=s(uhe);Xtr=r(Tct,"Examples:"),Tct.forEach(t),Vtr=i(Wl),m(Ky.$$.fragment,Wl),Wl.forEach(t),ztr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(Zy.$$.fragment,ba),Wtr=i(ba),bhe=n(ba,"P",{});var Fct=s(bhe);Qtr=r(Fct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fct.forEach(t),Htr=i(ba),vn=n(ba,"P",{});var EM=s(vn);Utr=r(EM,"The model class to instantiate is selected based on the "),vhe=n(EM,"CODE",{});var Cct=s(vhe);Jtr=r(Cct,"model_type"),Cct.forEach(t),Ytr=r(EM,` property of the config object (either
passed as an argument or loaded from `),The=n(EM,"CODE",{});var Mct=s(The);Ktr=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),Ztr=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(EM,"CODE",{});var Ect=s(Fhe);ear=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),oar=r(EM,":"),EM.forEach(t),rar=i(ba),ew=n(ba,"UL",{});var wSe=s(ew);yT=n(wSe,"LI",{});var oAe=s(yT);Che=n(oAe,"STRONG",{});var yct=s(Che);tar=r(yct,"convnext"),yct.forEach(t),aar=r(oAe," \u2014 "),vO=n(oAe,"A",{href:!0});var wct=s(vO);nar=r(wct,"TFConvNextForImageClassification"),wct.forEach(t),sar=r(oAe," (ConvNext model)"),oAe.forEach(t),lar=i(wSe),wT=n(wSe,"LI",{});var rAe=s(wT);Mhe=n(rAe,"STRONG",{});var Act=s(Mhe);iar=r(Act,"vit"),Act.forEach(t),dar=r(rAe," \u2014 "),TO=n(rAe,"A",{href:!0});var Lct=s(TO);car=r(Lct,"TFViTForImageClassification"),Lct.forEach(t),far=r(rAe," (ViT model)"),rAe.forEach(t),wSe.forEach(t),mar=i(ba),Ehe=n(ba,"P",{});var Bct=s(Ehe);gar=r(Bct,"Examples:"),Bct.forEach(t),har=i(ba),m(ow.$$.fragment,ba),ba.forEach(t),zl.forEach(t),pke=i(d),yc=n(d,"H2",{class:!0});var ASe=s(yc);AT=n(ASe,"A",{id:!0,class:!0,href:!0});var xct=s(AT);yhe=n(xct,"SPAN",{});var kct=s(yhe);m(rw.$$.fragment,kct),kct.forEach(t),xct.forEach(t),par=i(ASe),whe=n(ASe,"SPAN",{});var Rct=s(whe);_ar=r(Rct,"TFAutoModelForMaskedLM"),Rct.forEach(t),ASe.forEach(t),_ke=i(d),Mr=n(d,"DIV",{class:!0});var Ql=s(Mr);m(tw.$$.fragment,Ql),uar=i(Ql),wc=n(Ql,"P",{});var EW=s(wc);bar=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ahe=n(EW,"CODE",{});var Sct=s(Ahe);Tar=r(Sct,"from_pretrained()"),Sct.forEach(t),Far=r(EW,"class method or the "),Lhe=n(EW,"CODE",{});var Pct=s(Lhe);Car=r(Pct,"from_config()"),Pct.forEach(t),Mar=r(EW,`class
method.`),EW.forEach(t),Ear=i(Ql),aw=n(Ql,"P",{});var LSe=s(aw);yar=r(LSe,"This class cannot be instantiated directly using "),Bhe=n(LSe,"CODE",{});var $ct=s(Bhe);war=r($ct,"__init__()"),$ct.forEach(t),Aar=r(LSe," (throws an error)."),LSe.forEach(t),Lar=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(nw.$$.fragment,Hl),Bar=i(Hl),xhe=n(Hl,"P",{});var Ict=s(xhe);xar=r(Ict,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ict.forEach(t),kar=i(Hl),Ac=n(Hl,"P",{});var yW=s(Ac);Rar=r(yW,`Note:
Loading a model from its configuration file does `),khe=n(yW,"STRONG",{});var jct=s(khe);Sar=r(jct,"not"),jct.forEach(t),Par=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rhe=n(yW,"CODE",{});var Dct=s(Rhe);$ar=r(Dct,"from_pretrained()"),Dct.forEach(t),Iar=r(yW,"to load the model weights."),yW.forEach(t),jar=i(Hl),She=n(Hl,"P",{});var Nct=s(She);Dar=r(Nct,"Examples:"),Nct.forEach(t),Nar=i(Hl),m(sw.$$.fragment,Hl),Hl.forEach(t),qar=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(lw.$$.fragment,va),Oar=i(va),Phe=n(va,"P",{});var qct=s(Phe);Gar=r(qct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qct.forEach(t),Xar=i(va),Tn=n(va,"P",{});var yM=s(Tn);Var=r(yM,"The model class to instantiate is selected based on the "),$he=n(yM,"CODE",{});var Oct=s($he);zar=r(Oct,"model_type"),Oct.forEach(t),War=r(yM,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(yM,"CODE",{});var Gct=s(Ihe);Qar=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),Har=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=n(yM,"CODE",{});var Xct=s(jhe);Uar=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),Jar=r(yM,":"),yM.forEach(t),Yar=i(va),Y=n(va,"UL",{});var ee=s(Y);LT=n(ee,"LI",{});var tAe=s(LT);Dhe=n(tAe,"STRONG",{});var Vct=s(Dhe);Kar=r(Vct,"albert"),Vct.forEach(t),Zar=r(tAe," \u2014 "),FO=n(tAe,"A",{href:!0});var zct=s(FO);enr=r(zct,"TFAlbertForMaskedLM"),zct.forEach(t),onr=r(tAe," (ALBERT model)"),tAe.forEach(t),rnr=i(ee),BT=n(ee,"LI",{});var aAe=s(BT);Nhe=n(aAe,"STRONG",{});var Wct=s(Nhe);tnr=r(Wct,"bert"),Wct.forEach(t),anr=r(aAe," \u2014 "),CO=n(aAe,"A",{href:!0});var Qct=s(CO);nnr=r(Qct,"TFBertForMaskedLM"),Qct.forEach(t),snr=r(aAe," (BERT model)"),aAe.forEach(t),lnr=i(ee),xT=n(ee,"LI",{});var nAe=s(xT);qhe=n(nAe,"STRONG",{});var Hct=s(qhe);inr=r(Hct,"camembert"),Hct.forEach(t),dnr=r(nAe," \u2014 "),MO=n(nAe,"A",{href:!0});var Uct=s(MO);cnr=r(Uct,"TFCamembertForMaskedLM"),Uct.forEach(t),fnr=r(nAe," (CamemBERT model)"),nAe.forEach(t),mnr=i(ee),kT=n(ee,"LI",{});var sAe=s(kT);Ohe=n(sAe,"STRONG",{});var Jct=s(Ohe);gnr=r(Jct,"convbert"),Jct.forEach(t),hnr=r(sAe," \u2014 "),EO=n(sAe,"A",{href:!0});var Yct=s(EO);pnr=r(Yct,"TFConvBertForMaskedLM"),Yct.forEach(t),_nr=r(sAe," (ConvBERT model)"),sAe.forEach(t),unr=i(ee),RT=n(ee,"LI",{});var lAe=s(RT);Ghe=n(lAe,"STRONG",{});var Kct=s(Ghe);bnr=r(Kct,"deberta"),Kct.forEach(t),vnr=r(lAe," \u2014 "),yO=n(lAe,"A",{href:!0});var Zct=s(yO);Tnr=r(Zct,"TFDebertaForMaskedLM"),Zct.forEach(t),Fnr=r(lAe," (DeBERTa model)"),lAe.forEach(t),Cnr=i(ee),ST=n(ee,"LI",{});var iAe=s(ST);Xhe=n(iAe,"STRONG",{});var eft=s(Xhe);Mnr=r(eft,"deberta-v2"),eft.forEach(t),Enr=r(iAe," \u2014 "),wO=n(iAe,"A",{href:!0});var oft=s(wO);ynr=r(oft,"TFDebertaV2ForMaskedLM"),oft.forEach(t),wnr=r(iAe," (DeBERTa-v2 model)"),iAe.forEach(t),Anr=i(ee),PT=n(ee,"LI",{});var dAe=s(PT);Vhe=n(dAe,"STRONG",{});var rft=s(Vhe);Lnr=r(rft,"distilbert"),rft.forEach(t),Bnr=r(dAe," \u2014 "),AO=n(dAe,"A",{href:!0});var tft=s(AO);xnr=r(tft,"TFDistilBertForMaskedLM"),tft.forEach(t),knr=r(dAe," (DistilBERT model)"),dAe.forEach(t),Rnr=i(ee),$T=n(ee,"LI",{});var cAe=s($T);zhe=n(cAe,"STRONG",{});var aft=s(zhe);Snr=r(aft,"electra"),aft.forEach(t),Pnr=r(cAe," \u2014 "),LO=n(cAe,"A",{href:!0});var nft=s(LO);$nr=r(nft,"TFElectraForMaskedLM"),nft.forEach(t),Inr=r(cAe," (ELECTRA model)"),cAe.forEach(t),jnr=i(ee),IT=n(ee,"LI",{});var fAe=s(IT);Whe=n(fAe,"STRONG",{});var sft=s(Whe);Dnr=r(sft,"flaubert"),sft.forEach(t),Nnr=r(fAe," \u2014 "),BO=n(fAe,"A",{href:!0});var lft=s(BO);qnr=r(lft,"TFFlaubertWithLMHeadModel"),lft.forEach(t),Onr=r(fAe," (FlauBERT model)"),fAe.forEach(t),Gnr=i(ee),jT=n(ee,"LI",{});var mAe=s(jT);Qhe=n(mAe,"STRONG",{});var ift=s(Qhe);Xnr=r(ift,"funnel"),ift.forEach(t),Vnr=r(mAe," \u2014 "),xO=n(mAe,"A",{href:!0});var dft=s(xO);znr=r(dft,"TFFunnelForMaskedLM"),dft.forEach(t),Wnr=r(mAe," (Funnel Transformer model)"),mAe.forEach(t),Qnr=i(ee),DT=n(ee,"LI",{});var gAe=s(DT);Hhe=n(gAe,"STRONG",{});var cft=s(Hhe);Hnr=r(cft,"layoutlm"),cft.forEach(t),Unr=r(gAe," \u2014 "),kO=n(gAe,"A",{href:!0});var fft=s(kO);Jnr=r(fft,"TFLayoutLMForMaskedLM"),fft.forEach(t),Ynr=r(gAe," (LayoutLM model)"),gAe.forEach(t),Knr=i(ee),NT=n(ee,"LI",{});var hAe=s(NT);Uhe=n(hAe,"STRONG",{});var mft=s(Uhe);Znr=r(mft,"longformer"),mft.forEach(t),esr=r(hAe," \u2014 "),RO=n(hAe,"A",{href:!0});var gft=s(RO);osr=r(gft,"TFLongformerForMaskedLM"),gft.forEach(t),rsr=r(hAe," (Longformer model)"),hAe.forEach(t),tsr=i(ee),qT=n(ee,"LI",{});var pAe=s(qT);Jhe=n(pAe,"STRONG",{});var hft=s(Jhe);asr=r(hft,"mobilebert"),hft.forEach(t),nsr=r(pAe," \u2014 "),SO=n(pAe,"A",{href:!0});var pft=s(SO);ssr=r(pft,"TFMobileBertForMaskedLM"),pft.forEach(t),lsr=r(pAe," (MobileBERT model)"),pAe.forEach(t),isr=i(ee),OT=n(ee,"LI",{});var _Ae=s(OT);Yhe=n(_Ae,"STRONG",{});var _ft=s(Yhe);dsr=r(_ft,"mpnet"),_ft.forEach(t),csr=r(_Ae," \u2014 "),PO=n(_Ae,"A",{href:!0});var uft=s(PO);fsr=r(uft,"TFMPNetForMaskedLM"),uft.forEach(t),msr=r(_Ae," (MPNet model)"),_Ae.forEach(t),gsr=i(ee),GT=n(ee,"LI",{});var uAe=s(GT);Khe=n(uAe,"STRONG",{});var bft=s(Khe);hsr=r(bft,"rembert"),bft.forEach(t),psr=r(uAe," \u2014 "),$O=n(uAe,"A",{href:!0});var vft=s($O);_sr=r(vft,"TFRemBertForMaskedLM"),vft.forEach(t),usr=r(uAe," (RemBERT model)"),uAe.forEach(t),bsr=i(ee),XT=n(ee,"LI",{});var bAe=s(XT);Zhe=n(bAe,"STRONG",{});var Tft=s(Zhe);vsr=r(Tft,"roberta"),Tft.forEach(t),Tsr=r(bAe," \u2014 "),IO=n(bAe,"A",{href:!0});var Fft=s(IO);Fsr=r(Fft,"TFRobertaForMaskedLM"),Fft.forEach(t),Csr=r(bAe," (RoBERTa model)"),bAe.forEach(t),Msr=i(ee),VT=n(ee,"LI",{});var vAe=s(VT);epe=n(vAe,"STRONG",{});var Cft=s(epe);Esr=r(Cft,"roformer"),Cft.forEach(t),ysr=r(vAe," \u2014 "),jO=n(vAe,"A",{href:!0});var Mft=s(jO);wsr=r(Mft,"TFRoFormerForMaskedLM"),Mft.forEach(t),Asr=r(vAe," (RoFormer model)"),vAe.forEach(t),Lsr=i(ee),zT=n(ee,"LI",{});var TAe=s(zT);ope=n(TAe,"STRONG",{});var Eft=s(ope);Bsr=r(Eft,"tapas"),Eft.forEach(t),xsr=r(TAe," \u2014 "),DO=n(TAe,"A",{href:!0});var yft=s(DO);ksr=r(yft,"TFTapasForMaskedLM"),yft.forEach(t),Rsr=r(TAe," (TAPAS model)"),TAe.forEach(t),Ssr=i(ee),WT=n(ee,"LI",{});var FAe=s(WT);rpe=n(FAe,"STRONG",{});var wft=s(rpe);Psr=r(wft,"xlm"),wft.forEach(t),$sr=r(FAe," \u2014 "),NO=n(FAe,"A",{href:!0});var Aft=s(NO);Isr=r(Aft,"TFXLMWithLMHeadModel"),Aft.forEach(t),jsr=r(FAe," (XLM model)"),FAe.forEach(t),Dsr=i(ee),QT=n(ee,"LI",{});var CAe=s(QT);tpe=n(CAe,"STRONG",{});var Lft=s(tpe);Nsr=r(Lft,"xlm-roberta"),Lft.forEach(t),qsr=r(CAe," \u2014 "),qO=n(CAe,"A",{href:!0});var Bft=s(qO);Osr=r(Bft,"TFXLMRobertaForMaskedLM"),Bft.forEach(t),Gsr=r(CAe," (XLM-RoBERTa model)"),CAe.forEach(t),ee.forEach(t),Xsr=i(va),ape=n(va,"P",{});var xft=s(ape);Vsr=r(xft,"Examples:"),xft.forEach(t),zsr=i(va),m(iw.$$.fragment,va),va.forEach(t),Ql.forEach(t),uke=i(d),Lc=n(d,"H2",{class:!0});var BSe=s(Lc);HT=n(BSe,"A",{id:!0,class:!0,href:!0});var kft=s(HT);npe=n(kft,"SPAN",{});var Rft=s(npe);m(dw.$$.fragment,Rft),Rft.forEach(t),kft.forEach(t),Wsr=i(BSe),spe=n(BSe,"SPAN",{});var Sft=s(spe);Qsr=r(Sft,"TFAutoModelForSeq2SeqLM"),Sft.forEach(t),BSe.forEach(t),bke=i(d),Er=n(d,"DIV",{class:!0});var Ul=s(Er);m(cw.$$.fragment,Ul),Hsr=i(Ul),Bc=n(Ul,"P",{});var wW=s(Bc);Usr=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lpe=n(wW,"CODE",{});var Pft=s(lpe);Jsr=r(Pft,"from_pretrained()"),Pft.forEach(t),Ysr=r(wW,"class method or the "),ipe=n(wW,"CODE",{});var $ft=s(ipe);Ksr=r($ft,"from_config()"),$ft.forEach(t),Zsr=r(wW,`class
method.`),wW.forEach(t),elr=i(Ul),fw=n(Ul,"P",{});var xSe=s(fw);olr=r(xSe,"This class cannot be instantiated directly using "),dpe=n(xSe,"CODE",{});var Ift=s(dpe);rlr=r(Ift,"__init__()"),Ift.forEach(t),tlr=r(xSe," (throws an error)."),xSe.forEach(t),alr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(mw.$$.fragment,Jl),nlr=i(Jl),cpe=n(Jl,"P",{});var jft=s(cpe);slr=r(jft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jft.forEach(t),llr=i(Jl),xc=n(Jl,"P",{});var AW=s(xc);ilr=r(AW,`Note:
Loading a model from its configuration file does `),fpe=n(AW,"STRONG",{});var Dft=s(fpe);dlr=r(Dft,"not"),Dft.forEach(t),clr=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mpe=n(AW,"CODE",{});var Nft=s(mpe);flr=r(Nft,"from_pretrained()"),Nft.forEach(t),mlr=r(AW,"to load the model weights."),AW.forEach(t),glr=i(Jl),gpe=n(Jl,"P",{});var qft=s(gpe);hlr=r(qft,"Examples:"),qft.forEach(t),plr=i(Jl),m(gw.$$.fragment,Jl),Jl.forEach(t),_lr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(hw.$$.fragment,Ta),ulr=i(Ta),hpe=n(Ta,"P",{});var Oft=s(hpe);blr=r(Oft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Oft.forEach(t),vlr=i(Ta),Fn=n(Ta,"P",{});var wM=s(Fn);Tlr=r(wM,"The model class to instantiate is selected based on the "),ppe=n(wM,"CODE",{});var Gft=s(ppe);Flr=r(Gft,"model_type"),Gft.forEach(t),Clr=r(wM,` property of the config object (either
passed as an argument or loaded from `),_pe=n(wM,"CODE",{});var Xft=s(_pe);Mlr=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),Elr=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(wM,"CODE",{});var Vft=s(upe);ylr=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),wlr=r(wM,":"),wM.forEach(t),Alr=i(Ta),_e=n(Ta,"UL",{});var Ee=s(_e);UT=n(Ee,"LI",{});var MAe=s(UT);bpe=n(MAe,"STRONG",{});var zft=s(bpe);Llr=r(zft,"bart"),zft.forEach(t),Blr=r(MAe," \u2014 "),OO=n(MAe,"A",{href:!0});var Wft=s(OO);xlr=r(Wft,"TFBartForConditionalGeneration"),Wft.forEach(t),klr=r(MAe," (BART model)"),MAe.forEach(t),Rlr=i(Ee),JT=n(Ee,"LI",{});var EAe=s(JT);vpe=n(EAe,"STRONG",{});var Qft=s(vpe);Slr=r(Qft,"blenderbot"),Qft.forEach(t),Plr=r(EAe," \u2014 "),GO=n(EAe,"A",{href:!0});var Hft=s(GO);$lr=r(Hft,"TFBlenderbotForConditionalGeneration"),Hft.forEach(t),Ilr=r(EAe," (Blenderbot model)"),EAe.forEach(t),jlr=i(Ee),YT=n(Ee,"LI",{});var yAe=s(YT);Tpe=n(yAe,"STRONG",{});var Uft=s(Tpe);Dlr=r(Uft,"blenderbot-small"),Uft.forEach(t),Nlr=r(yAe," \u2014 "),XO=n(yAe,"A",{href:!0});var Jft=s(XO);qlr=r(Jft,"TFBlenderbotSmallForConditionalGeneration"),Jft.forEach(t),Olr=r(yAe," (BlenderbotSmall model)"),yAe.forEach(t),Glr=i(Ee),KT=n(Ee,"LI",{});var wAe=s(KT);Fpe=n(wAe,"STRONG",{});var Yft=s(Fpe);Xlr=r(Yft,"encoder-decoder"),Yft.forEach(t),Vlr=r(wAe," \u2014 "),VO=n(wAe,"A",{href:!0});var Kft=s(VO);zlr=r(Kft,"TFEncoderDecoderModel"),Kft.forEach(t),Wlr=r(wAe," (Encoder decoder model)"),wAe.forEach(t),Qlr=i(Ee),ZT=n(Ee,"LI",{});var AAe=s(ZT);Cpe=n(AAe,"STRONG",{});var Zft=s(Cpe);Hlr=r(Zft,"led"),Zft.forEach(t),Ulr=r(AAe," \u2014 "),zO=n(AAe,"A",{href:!0});var emt=s(zO);Jlr=r(emt,"TFLEDForConditionalGeneration"),emt.forEach(t),Ylr=r(AAe," (LED model)"),AAe.forEach(t),Klr=i(Ee),e7=n(Ee,"LI",{});var LAe=s(e7);Mpe=n(LAe,"STRONG",{});var omt=s(Mpe);Zlr=r(omt,"marian"),omt.forEach(t),eir=r(LAe," \u2014 "),WO=n(LAe,"A",{href:!0});var rmt=s(WO);oir=r(rmt,"TFMarianMTModel"),rmt.forEach(t),rir=r(LAe," (Marian model)"),LAe.forEach(t),tir=i(Ee),o7=n(Ee,"LI",{});var BAe=s(o7);Epe=n(BAe,"STRONG",{});var tmt=s(Epe);air=r(tmt,"mbart"),tmt.forEach(t),nir=r(BAe," \u2014 "),QO=n(BAe,"A",{href:!0});var amt=s(QO);sir=r(amt,"TFMBartForConditionalGeneration"),amt.forEach(t),lir=r(BAe," (mBART model)"),BAe.forEach(t),iir=i(Ee),r7=n(Ee,"LI",{});var xAe=s(r7);ype=n(xAe,"STRONG",{});var nmt=s(ype);dir=r(nmt,"mt5"),nmt.forEach(t),cir=r(xAe," \u2014 "),HO=n(xAe,"A",{href:!0});var smt=s(HO);fir=r(smt,"TFMT5ForConditionalGeneration"),smt.forEach(t),mir=r(xAe," (mT5 model)"),xAe.forEach(t),gir=i(Ee),t7=n(Ee,"LI",{});var kAe=s(t7);wpe=n(kAe,"STRONG",{});var lmt=s(wpe);hir=r(lmt,"pegasus"),lmt.forEach(t),pir=r(kAe," \u2014 "),UO=n(kAe,"A",{href:!0});var imt=s(UO);_ir=r(imt,"TFPegasusForConditionalGeneration"),imt.forEach(t),uir=r(kAe," (Pegasus model)"),kAe.forEach(t),bir=i(Ee),a7=n(Ee,"LI",{});var RAe=s(a7);Ape=n(RAe,"STRONG",{});var dmt=s(Ape);vir=r(dmt,"t5"),dmt.forEach(t),Tir=r(RAe," \u2014 "),JO=n(RAe,"A",{href:!0});var cmt=s(JO);Fir=r(cmt,"TFT5ForConditionalGeneration"),cmt.forEach(t),Cir=r(RAe," (T5 model)"),RAe.forEach(t),Ee.forEach(t),Mir=i(Ta),Lpe=n(Ta,"P",{});var fmt=s(Lpe);Eir=r(fmt,"Examples:"),fmt.forEach(t),yir=i(Ta),m(pw.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),vke=i(d),kc=n(d,"H2",{class:!0});var kSe=s(kc);n7=n(kSe,"A",{id:!0,class:!0,href:!0});var mmt=s(n7);Bpe=n(mmt,"SPAN",{});var gmt=s(Bpe);m(_w.$$.fragment,gmt),gmt.forEach(t),mmt.forEach(t),wir=i(kSe),xpe=n(kSe,"SPAN",{});var hmt=s(xpe);Air=r(hmt,"TFAutoModelForSequenceClassification"),hmt.forEach(t),kSe.forEach(t),Tke=i(d),yr=n(d,"DIV",{class:!0});var Yl=s(yr);m(uw.$$.fragment,Yl),Lir=i(Yl),Rc=n(Yl,"P",{});var LW=s(Rc);Bir=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kpe=n(LW,"CODE",{});var pmt=s(kpe);xir=r(pmt,"from_pretrained()"),pmt.forEach(t),kir=r(LW,"class method or the "),Rpe=n(LW,"CODE",{});var _mt=s(Rpe);Rir=r(_mt,"from_config()"),_mt.forEach(t),Sir=r(LW,`class
method.`),LW.forEach(t),Pir=i(Yl),bw=n(Yl,"P",{});var RSe=s(bw);$ir=r(RSe,"This class cannot be instantiated directly using "),Spe=n(RSe,"CODE",{});var umt=s(Spe);Iir=r(umt,"__init__()"),umt.forEach(t),jir=r(RSe," (throws an error)."),RSe.forEach(t),Dir=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(vw.$$.fragment,Kl),Nir=i(Kl),Ppe=n(Kl,"P",{});var bmt=s(Ppe);qir=r(bmt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bmt.forEach(t),Oir=i(Kl),Sc=n(Kl,"P",{});var BW=s(Sc);Gir=r(BW,`Note:
Loading a model from its configuration file does `),$pe=n(BW,"STRONG",{});var vmt=s($pe);Xir=r(vmt,"not"),vmt.forEach(t),Vir=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ipe=n(BW,"CODE",{});var Tmt=s(Ipe);zir=r(Tmt,"from_pretrained()"),Tmt.forEach(t),Wir=r(BW,"to load the model weights."),BW.forEach(t),Qir=i(Kl),jpe=n(Kl,"P",{});var Fmt=s(jpe);Hir=r(Fmt,"Examples:"),Fmt.forEach(t),Uir=i(Kl),m(Tw.$$.fragment,Kl),Kl.forEach(t),Jir=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(Fw.$$.fragment,Fa),Yir=i(Fa),Dpe=n(Fa,"P",{});var Cmt=s(Dpe);Kir=r(Cmt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Cmt.forEach(t),Zir=i(Fa),Cn=n(Fa,"P",{});var AM=s(Cn);edr=r(AM,"The model class to instantiate is selected based on the "),Npe=n(AM,"CODE",{});var Mmt=s(Npe);odr=r(Mmt,"model_type"),Mmt.forEach(t),rdr=r(AM,` property of the config object (either
passed as an argument or loaded from `),qpe=n(AM,"CODE",{});var Emt=s(qpe);tdr=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),adr=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(AM,"CODE",{});var ymt=s(Ope);ndr=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),sdr=r(AM,":"),AM.forEach(t),ldr=i(Fa),V=n(Fa,"UL",{});var W=s(V);s7=n(W,"LI",{});var SAe=s(s7);Gpe=n(SAe,"STRONG",{});var wmt=s(Gpe);idr=r(wmt,"albert"),wmt.forEach(t),ddr=r(SAe," \u2014 "),YO=n(SAe,"A",{href:!0});var Amt=s(YO);cdr=r(Amt,"TFAlbertForSequenceClassification"),Amt.forEach(t),fdr=r(SAe," (ALBERT model)"),SAe.forEach(t),mdr=i(W),l7=n(W,"LI",{});var PAe=s(l7);Xpe=n(PAe,"STRONG",{});var Lmt=s(Xpe);gdr=r(Lmt,"bert"),Lmt.forEach(t),hdr=r(PAe," \u2014 "),KO=n(PAe,"A",{href:!0});var Bmt=s(KO);pdr=r(Bmt,"TFBertForSequenceClassification"),Bmt.forEach(t),_dr=r(PAe," (BERT model)"),PAe.forEach(t),udr=i(W),i7=n(W,"LI",{});var $Ae=s(i7);Vpe=n($Ae,"STRONG",{});var xmt=s(Vpe);bdr=r(xmt,"camembert"),xmt.forEach(t),vdr=r($Ae," \u2014 "),ZO=n($Ae,"A",{href:!0});var kmt=s(ZO);Tdr=r(kmt,"TFCamembertForSequenceClassification"),kmt.forEach(t),Fdr=r($Ae," (CamemBERT model)"),$Ae.forEach(t),Cdr=i(W),d7=n(W,"LI",{});var IAe=s(d7);zpe=n(IAe,"STRONG",{});var Rmt=s(zpe);Mdr=r(Rmt,"convbert"),Rmt.forEach(t),Edr=r(IAe," \u2014 "),eG=n(IAe,"A",{href:!0});var Smt=s(eG);ydr=r(Smt,"TFConvBertForSequenceClassification"),Smt.forEach(t),wdr=r(IAe," (ConvBERT model)"),IAe.forEach(t),Adr=i(W),c7=n(W,"LI",{});var jAe=s(c7);Wpe=n(jAe,"STRONG",{});var Pmt=s(Wpe);Ldr=r(Pmt,"ctrl"),Pmt.forEach(t),Bdr=r(jAe," \u2014 "),oG=n(jAe,"A",{href:!0});var $mt=s(oG);xdr=r($mt,"TFCTRLForSequenceClassification"),$mt.forEach(t),kdr=r(jAe," (CTRL model)"),jAe.forEach(t),Rdr=i(W),f7=n(W,"LI",{});var DAe=s(f7);Qpe=n(DAe,"STRONG",{});var Imt=s(Qpe);Sdr=r(Imt,"deberta"),Imt.forEach(t),Pdr=r(DAe," \u2014 "),rG=n(DAe,"A",{href:!0});var jmt=s(rG);$dr=r(jmt,"TFDebertaForSequenceClassification"),jmt.forEach(t),Idr=r(DAe," (DeBERTa model)"),DAe.forEach(t),jdr=i(W),m7=n(W,"LI",{});var NAe=s(m7);Hpe=n(NAe,"STRONG",{});var Dmt=s(Hpe);Ddr=r(Dmt,"deberta-v2"),Dmt.forEach(t),Ndr=r(NAe," \u2014 "),tG=n(NAe,"A",{href:!0});var Nmt=s(tG);qdr=r(Nmt,"TFDebertaV2ForSequenceClassification"),Nmt.forEach(t),Odr=r(NAe," (DeBERTa-v2 model)"),NAe.forEach(t),Gdr=i(W),g7=n(W,"LI",{});var qAe=s(g7);Upe=n(qAe,"STRONG",{});var qmt=s(Upe);Xdr=r(qmt,"distilbert"),qmt.forEach(t),Vdr=r(qAe," \u2014 "),aG=n(qAe,"A",{href:!0});var Omt=s(aG);zdr=r(Omt,"TFDistilBertForSequenceClassification"),Omt.forEach(t),Wdr=r(qAe," (DistilBERT model)"),qAe.forEach(t),Qdr=i(W),h7=n(W,"LI",{});var OAe=s(h7);Jpe=n(OAe,"STRONG",{});var Gmt=s(Jpe);Hdr=r(Gmt,"electra"),Gmt.forEach(t),Udr=r(OAe," \u2014 "),nG=n(OAe,"A",{href:!0});var Xmt=s(nG);Jdr=r(Xmt,"TFElectraForSequenceClassification"),Xmt.forEach(t),Ydr=r(OAe," (ELECTRA model)"),OAe.forEach(t),Kdr=i(W),p7=n(W,"LI",{});var GAe=s(p7);Ype=n(GAe,"STRONG",{});var Vmt=s(Ype);Zdr=r(Vmt,"flaubert"),Vmt.forEach(t),ecr=r(GAe," \u2014 "),sG=n(GAe,"A",{href:!0});var zmt=s(sG);ocr=r(zmt,"TFFlaubertForSequenceClassification"),zmt.forEach(t),rcr=r(GAe," (FlauBERT model)"),GAe.forEach(t),tcr=i(W),_7=n(W,"LI",{});var XAe=s(_7);Kpe=n(XAe,"STRONG",{});var Wmt=s(Kpe);acr=r(Wmt,"funnel"),Wmt.forEach(t),ncr=r(XAe," \u2014 "),lG=n(XAe,"A",{href:!0});var Qmt=s(lG);scr=r(Qmt,"TFFunnelForSequenceClassification"),Qmt.forEach(t),lcr=r(XAe," (Funnel Transformer model)"),XAe.forEach(t),icr=i(W),u7=n(W,"LI",{});var VAe=s(u7);Zpe=n(VAe,"STRONG",{});var Hmt=s(Zpe);dcr=r(Hmt,"gpt2"),Hmt.forEach(t),ccr=r(VAe," \u2014 "),iG=n(VAe,"A",{href:!0});var Umt=s(iG);fcr=r(Umt,"TFGPT2ForSequenceClassification"),Umt.forEach(t),mcr=r(VAe," (OpenAI GPT-2 model)"),VAe.forEach(t),gcr=i(W),b7=n(W,"LI",{});var zAe=s(b7);e_e=n(zAe,"STRONG",{});var Jmt=s(e_e);hcr=r(Jmt,"layoutlm"),Jmt.forEach(t),pcr=r(zAe," \u2014 "),dG=n(zAe,"A",{href:!0});var Ymt=s(dG);_cr=r(Ymt,"TFLayoutLMForSequenceClassification"),Ymt.forEach(t),ucr=r(zAe," (LayoutLM model)"),zAe.forEach(t),bcr=i(W),v7=n(W,"LI",{});var WAe=s(v7);o_e=n(WAe,"STRONG",{});var Kmt=s(o_e);vcr=r(Kmt,"longformer"),Kmt.forEach(t),Tcr=r(WAe," \u2014 "),cG=n(WAe,"A",{href:!0});var Zmt=s(cG);Fcr=r(Zmt,"TFLongformerForSequenceClassification"),Zmt.forEach(t),Ccr=r(WAe," (Longformer model)"),WAe.forEach(t),Mcr=i(W),T7=n(W,"LI",{});var QAe=s(T7);r_e=n(QAe,"STRONG",{});var egt=s(r_e);Ecr=r(egt,"mobilebert"),egt.forEach(t),ycr=r(QAe," \u2014 "),fG=n(QAe,"A",{href:!0});var ogt=s(fG);wcr=r(ogt,"TFMobileBertForSequenceClassification"),ogt.forEach(t),Acr=r(QAe," (MobileBERT model)"),QAe.forEach(t),Lcr=i(W),F7=n(W,"LI",{});var HAe=s(F7);t_e=n(HAe,"STRONG",{});var rgt=s(t_e);Bcr=r(rgt,"mpnet"),rgt.forEach(t),xcr=r(HAe," \u2014 "),mG=n(HAe,"A",{href:!0});var tgt=s(mG);kcr=r(tgt,"TFMPNetForSequenceClassification"),tgt.forEach(t),Rcr=r(HAe," (MPNet model)"),HAe.forEach(t),Scr=i(W),C7=n(W,"LI",{});var UAe=s(C7);a_e=n(UAe,"STRONG",{});var agt=s(a_e);Pcr=r(agt,"openai-gpt"),agt.forEach(t),$cr=r(UAe," \u2014 "),gG=n(UAe,"A",{href:!0});var ngt=s(gG);Icr=r(ngt,"TFOpenAIGPTForSequenceClassification"),ngt.forEach(t),jcr=r(UAe," (OpenAI GPT model)"),UAe.forEach(t),Dcr=i(W),M7=n(W,"LI",{});var JAe=s(M7);n_e=n(JAe,"STRONG",{});var sgt=s(n_e);Ncr=r(sgt,"rembert"),sgt.forEach(t),qcr=r(JAe," \u2014 "),hG=n(JAe,"A",{href:!0});var lgt=s(hG);Ocr=r(lgt,"TFRemBertForSequenceClassification"),lgt.forEach(t),Gcr=r(JAe," (RemBERT model)"),JAe.forEach(t),Xcr=i(W),E7=n(W,"LI",{});var YAe=s(E7);s_e=n(YAe,"STRONG",{});var igt=s(s_e);Vcr=r(igt,"roberta"),igt.forEach(t),zcr=r(YAe," \u2014 "),pG=n(YAe,"A",{href:!0});var dgt=s(pG);Wcr=r(dgt,"TFRobertaForSequenceClassification"),dgt.forEach(t),Qcr=r(YAe," (RoBERTa model)"),YAe.forEach(t),Hcr=i(W),y7=n(W,"LI",{});var KAe=s(y7);l_e=n(KAe,"STRONG",{});var cgt=s(l_e);Ucr=r(cgt,"roformer"),cgt.forEach(t),Jcr=r(KAe," \u2014 "),_G=n(KAe,"A",{href:!0});var fgt=s(_G);Ycr=r(fgt,"TFRoFormerForSequenceClassification"),fgt.forEach(t),Kcr=r(KAe," (RoFormer model)"),KAe.forEach(t),Zcr=i(W),w7=n(W,"LI",{});var ZAe=s(w7);i_e=n(ZAe,"STRONG",{});var mgt=s(i_e);efr=r(mgt,"tapas"),mgt.forEach(t),ofr=r(ZAe," \u2014 "),uG=n(ZAe,"A",{href:!0});var ggt=s(uG);rfr=r(ggt,"TFTapasForSequenceClassification"),ggt.forEach(t),tfr=r(ZAe," (TAPAS model)"),ZAe.forEach(t),afr=i(W),A7=n(W,"LI",{});var eLe=s(A7);d_e=n(eLe,"STRONG",{});var hgt=s(d_e);nfr=r(hgt,"transfo-xl"),hgt.forEach(t),sfr=r(eLe," \u2014 "),bG=n(eLe,"A",{href:!0});var pgt=s(bG);lfr=r(pgt,"TFTransfoXLForSequenceClassification"),pgt.forEach(t),ifr=r(eLe," (Transformer-XL model)"),eLe.forEach(t),dfr=i(W),L7=n(W,"LI",{});var oLe=s(L7);c_e=n(oLe,"STRONG",{});var _gt=s(c_e);cfr=r(_gt,"xlm"),_gt.forEach(t),ffr=r(oLe," \u2014 "),vG=n(oLe,"A",{href:!0});var ugt=s(vG);mfr=r(ugt,"TFXLMForSequenceClassification"),ugt.forEach(t),gfr=r(oLe," (XLM model)"),oLe.forEach(t),hfr=i(W),B7=n(W,"LI",{});var rLe=s(B7);f_e=n(rLe,"STRONG",{});var bgt=s(f_e);pfr=r(bgt,"xlm-roberta"),bgt.forEach(t),_fr=r(rLe," \u2014 "),TG=n(rLe,"A",{href:!0});var vgt=s(TG);ufr=r(vgt,"TFXLMRobertaForSequenceClassification"),vgt.forEach(t),bfr=r(rLe," (XLM-RoBERTa model)"),rLe.forEach(t),vfr=i(W),x7=n(W,"LI",{});var tLe=s(x7);m_e=n(tLe,"STRONG",{});var Tgt=s(m_e);Tfr=r(Tgt,"xlnet"),Tgt.forEach(t),Ffr=r(tLe," \u2014 "),FG=n(tLe,"A",{href:!0});var Fgt=s(FG);Cfr=r(Fgt,"TFXLNetForSequenceClassification"),Fgt.forEach(t),Mfr=r(tLe," (XLNet model)"),tLe.forEach(t),W.forEach(t),Efr=i(Fa),g_e=n(Fa,"P",{});var Cgt=s(g_e);yfr=r(Cgt,"Examples:"),Cgt.forEach(t),wfr=i(Fa),m(Cw.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),Fke=i(d),Pc=n(d,"H2",{class:!0});var SSe=s(Pc);k7=n(SSe,"A",{id:!0,class:!0,href:!0});var Mgt=s(k7);h_e=n(Mgt,"SPAN",{});var Egt=s(h_e);m(Mw.$$.fragment,Egt),Egt.forEach(t),Mgt.forEach(t),Afr=i(SSe),p_e=n(SSe,"SPAN",{});var ygt=s(p_e);Lfr=r(ygt,"TFAutoModelForMultipleChoice"),ygt.forEach(t),SSe.forEach(t),Cke=i(d),wr=n(d,"DIV",{class:!0});var Zl=s(wr);m(Ew.$$.fragment,Zl),Bfr=i(Zl),$c=n(Zl,"P",{});var xW=s($c);xfr=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),__e=n(xW,"CODE",{});var wgt=s(__e);kfr=r(wgt,"from_pretrained()"),wgt.forEach(t),Rfr=r(xW,"class method or the "),u_e=n(xW,"CODE",{});var Agt=s(u_e);Sfr=r(Agt,"from_config()"),Agt.forEach(t),Pfr=r(xW,`class
method.`),xW.forEach(t),$fr=i(Zl),yw=n(Zl,"P",{});var PSe=s(yw);Ifr=r(PSe,"This class cannot be instantiated directly using "),b_e=n(PSe,"CODE",{});var Lgt=s(b_e);jfr=r(Lgt,"__init__()"),Lgt.forEach(t),Dfr=r(PSe," (throws an error)."),PSe.forEach(t),Nfr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(ww.$$.fragment,ei),qfr=i(ei),v_e=n(ei,"P",{});var Bgt=s(v_e);Ofr=r(Bgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bgt.forEach(t),Gfr=i(ei),Ic=n(ei,"P",{});var kW=s(Ic);Xfr=r(kW,`Note:
Loading a model from its configuration file does `),T_e=n(kW,"STRONG",{});var xgt=s(T_e);Vfr=r(xgt,"not"),xgt.forEach(t),zfr=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),F_e=n(kW,"CODE",{});var kgt=s(F_e);Wfr=r(kgt,"from_pretrained()"),kgt.forEach(t),Qfr=r(kW,"to load the model weights."),kW.forEach(t),Hfr=i(ei),C_e=n(ei,"P",{});var Rgt=s(C_e);Ufr=r(Rgt,"Examples:"),Rgt.forEach(t),Jfr=i(ei),m(Aw.$$.fragment,ei),ei.forEach(t),Yfr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(Lw.$$.fragment,Ca),Kfr=i(Ca),M_e=n(Ca,"P",{});var Sgt=s(M_e);Zfr=r(Sgt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Sgt.forEach(t),emr=i(Ca),Mn=n(Ca,"P",{});var LM=s(Mn);omr=r(LM,"The model class to instantiate is selected based on the "),E_e=n(LM,"CODE",{});var Pgt=s(E_e);rmr=r(Pgt,"model_type"),Pgt.forEach(t),tmr=r(LM,` property of the config object (either
passed as an argument or loaded from `),y_e=n(LM,"CODE",{});var $gt=s(y_e);amr=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),nmr=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(LM,"CODE",{});var Igt=s(w_e);smr=r(Igt,"pretrained_model_name_or_path"),Igt.forEach(t),lmr=r(LM,":"),LM.forEach(t),imr=i(Ca),te=n(Ca,"UL",{});var se=s(te);R7=n(se,"LI",{});var aLe=s(R7);A_e=n(aLe,"STRONG",{});var jgt=s(A_e);dmr=r(jgt,"albert"),jgt.forEach(t),cmr=r(aLe," \u2014 "),CG=n(aLe,"A",{href:!0});var Dgt=s(CG);fmr=r(Dgt,"TFAlbertForMultipleChoice"),Dgt.forEach(t),mmr=r(aLe," (ALBERT model)"),aLe.forEach(t),gmr=i(se),S7=n(se,"LI",{});var nLe=s(S7);L_e=n(nLe,"STRONG",{});var Ngt=s(L_e);hmr=r(Ngt,"bert"),Ngt.forEach(t),pmr=r(nLe," \u2014 "),MG=n(nLe,"A",{href:!0});var qgt=s(MG);_mr=r(qgt,"TFBertForMultipleChoice"),qgt.forEach(t),umr=r(nLe," (BERT model)"),nLe.forEach(t),bmr=i(se),P7=n(se,"LI",{});var sLe=s(P7);B_e=n(sLe,"STRONG",{});var Ogt=s(B_e);vmr=r(Ogt,"camembert"),Ogt.forEach(t),Tmr=r(sLe," \u2014 "),EG=n(sLe,"A",{href:!0});var Ggt=s(EG);Fmr=r(Ggt,"TFCamembertForMultipleChoice"),Ggt.forEach(t),Cmr=r(sLe," (CamemBERT model)"),sLe.forEach(t),Mmr=i(se),$7=n(se,"LI",{});var lLe=s($7);x_e=n(lLe,"STRONG",{});var Xgt=s(x_e);Emr=r(Xgt,"convbert"),Xgt.forEach(t),ymr=r(lLe," \u2014 "),yG=n(lLe,"A",{href:!0});var Vgt=s(yG);wmr=r(Vgt,"TFConvBertForMultipleChoice"),Vgt.forEach(t),Amr=r(lLe," (ConvBERT model)"),lLe.forEach(t),Lmr=i(se),I7=n(se,"LI",{});var iLe=s(I7);k_e=n(iLe,"STRONG",{});var zgt=s(k_e);Bmr=r(zgt,"distilbert"),zgt.forEach(t),xmr=r(iLe," \u2014 "),wG=n(iLe,"A",{href:!0});var Wgt=s(wG);kmr=r(Wgt,"TFDistilBertForMultipleChoice"),Wgt.forEach(t),Rmr=r(iLe," (DistilBERT model)"),iLe.forEach(t),Smr=i(se),j7=n(se,"LI",{});var dLe=s(j7);R_e=n(dLe,"STRONG",{});var Qgt=s(R_e);Pmr=r(Qgt,"electra"),Qgt.forEach(t),$mr=r(dLe," \u2014 "),AG=n(dLe,"A",{href:!0});var Hgt=s(AG);Imr=r(Hgt,"TFElectraForMultipleChoice"),Hgt.forEach(t),jmr=r(dLe," (ELECTRA model)"),dLe.forEach(t),Dmr=i(se),D7=n(se,"LI",{});var cLe=s(D7);S_e=n(cLe,"STRONG",{});var Ugt=s(S_e);Nmr=r(Ugt,"flaubert"),Ugt.forEach(t),qmr=r(cLe," \u2014 "),LG=n(cLe,"A",{href:!0});var Jgt=s(LG);Omr=r(Jgt,"TFFlaubertForMultipleChoice"),Jgt.forEach(t),Gmr=r(cLe," (FlauBERT model)"),cLe.forEach(t),Xmr=i(se),N7=n(se,"LI",{});var fLe=s(N7);P_e=n(fLe,"STRONG",{});var Ygt=s(P_e);Vmr=r(Ygt,"funnel"),Ygt.forEach(t),zmr=r(fLe," \u2014 "),BG=n(fLe,"A",{href:!0});var Kgt=s(BG);Wmr=r(Kgt,"TFFunnelForMultipleChoice"),Kgt.forEach(t),Qmr=r(fLe," (Funnel Transformer model)"),fLe.forEach(t),Hmr=i(se),q7=n(se,"LI",{});var mLe=s(q7);$_e=n(mLe,"STRONG",{});var Zgt=s($_e);Umr=r(Zgt,"longformer"),Zgt.forEach(t),Jmr=r(mLe," \u2014 "),xG=n(mLe,"A",{href:!0});var eht=s(xG);Ymr=r(eht,"TFLongformerForMultipleChoice"),eht.forEach(t),Kmr=r(mLe," (Longformer model)"),mLe.forEach(t),Zmr=i(se),O7=n(se,"LI",{});var gLe=s(O7);I_e=n(gLe,"STRONG",{});var oht=s(I_e);egr=r(oht,"mobilebert"),oht.forEach(t),ogr=r(gLe," \u2014 "),kG=n(gLe,"A",{href:!0});var rht=s(kG);rgr=r(rht,"TFMobileBertForMultipleChoice"),rht.forEach(t),tgr=r(gLe," (MobileBERT model)"),gLe.forEach(t),agr=i(se),G7=n(se,"LI",{});var hLe=s(G7);j_e=n(hLe,"STRONG",{});var tht=s(j_e);ngr=r(tht,"mpnet"),tht.forEach(t),sgr=r(hLe," \u2014 "),RG=n(hLe,"A",{href:!0});var aht=s(RG);lgr=r(aht,"TFMPNetForMultipleChoice"),aht.forEach(t),igr=r(hLe," (MPNet model)"),hLe.forEach(t),dgr=i(se),X7=n(se,"LI",{});var pLe=s(X7);D_e=n(pLe,"STRONG",{});var nht=s(D_e);cgr=r(nht,"rembert"),nht.forEach(t),fgr=r(pLe," \u2014 "),SG=n(pLe,"A",{href:!0});var sht=s(SG);mgr=r(sht,"TFRemBertForMultipleChoice"),sht.forEach(t),ggr=r(pLe," (RemBERT model)"),pLe.forEach(t),hgr=i(se),V7=n(se,"LI",{});var _Le=s(V7);N_e=n(_Le,"STRONG",{});var lht=s(N_e);pgr=r(lht,"roberta"),lht.forEach(t),_gr=r(_Le," \u2014 "),PG=n(_Le,"A",{href:!0});var iht=s(PG);ugr=r(iht,"TFRobertaForMultipleChoice"),iht.forEach(t),bgr=r(_Le," (RoBERTa model)"),_Le.forEach(t),vgr=i(se),z7=n(se,"LI",{});var uLe=s(z7);q_e=n(uLe,"STRONG",{});var dht=s(q_e);Tgr=r(dht,"roformer"),dht.forEach(t),Fgr=r(uLe," \u2014 "),$G=n(uLe,"A",{href:!0});var cht=s($G);Cgr=r(cht,"TFRoFormerForMultipleChoice"),cht.forEach(t),Mgr=r(uLe," (RoFormer model)"),uLe.forEach(t),Egr=i(se),W7=n(se,"LI",{});var bLe=s(W7);O_e=n(bLe,"STRONG",{});var fht=s(O_e);ygr=r(fht,"xlm"),fht.forEach(t),wgr=r(bLe," \u2014 "),IG=n(bLe,"A",{href:!0});var mht=s(IG);Agr=r(mht,"TFXLMForMultipleChoice"),mht.forEach(t),Lgr=r(bLe," (XLM model)"),bLe.forEach(t),Bgr=i(se),Q7=n(se,"LI",{});var vLe=s(Q7);G_e=n(vLe,"STRONG",{});var ght=s(G_e);xgr=r(ght,"xlm-roberta"),ght.forEach(t),kgr=r(vLe," \u2014 "),jG=n(vLe,"A",{href:!0});var hht=s(jG);Rgr=r(hht,"TFXLMRobertaForMultipleChoice"),hht.forEach(t),Sgr=r(vLe," (XLM-RoBERTa model)"),vLe.forEach(t),Pgr=i(se),H7=n(se,"LI",{});var TLe=s(H7);X_e=n(TLe,"STRONG",{});var pht=s(X_e);$gr=r(pht,"xlnet"),pht.forEach(t),Igr=r(TLe," \u2014 "),DG=n(TLe,"A",{href:!0});var _ht=s(DG);jgr=r(_ht,"TFXLNetForMultipleChoice"),_ht.forEach(t),Dgr=r(TLe," (XLNet model)"),TLe.forEach(t),se.forEach(t),Ngr=i(Ca),V_e=n(Ca,"P",{});var uht=s(V_e);qgr=r(uht,"Examples:"),uht.forEach(t),Ogr=i(Ca),m(Bw.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),Mke=i(d),jc=n(d,"H2",{class:!0});var $Se=s(jc);U7=n($Se,"A",{id:!0,class:!0,href:!0});var bht=s(U7);z_e=n(bht,"SPAN",{});var vht=s(z_e);m(xw.$$.fragment,vht),vht.forEach(t),bht.forEach(t),Ggr=i($Se),W_e=n($Se,"SPAN",{});var Tht=s(W_e);Xgr=r(Tht,"TFAutoModelForTableQuestionAnswering"),Tht.forEach(t),$Se.forEach(t),Eke=i(d),Ar=n(d,"DIV",{class:!0});var oi=s(Ar);m(kw.$$.fragment,oi),Vgr=i(oi),Dc=n(oi,"P",{});var RW=s(Dc);zgr=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Q_e=n(RW,"CODE",{});var Fht=s(Q_e);Wgr=r(Fht,"from_pretrained()"),Fht.forEach(t),Qgr=r(RW,"class method or the "),H_e=n(RW,"CODE",{});var Cht=s(H_e);Hgr=r(Cht,"from_config()"),Cht.forEach(t),Ugr=r(RW,`class
method.`),RW.forEach(t),Jgr=i(oi),Rw=n(oi,"P",{});var ISe=s(Rw);Ygr=r(ISe,"This class cannot be instantiated directly using "),U_e=n(ISe,"CODE",{});var Mht=s(U_e);Kgr=r(Mht,"__init__()"),Mht.forEach(t),Zgr=r(ISe," (throws an error)."),ISe.forEach(t),ehr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(Sw.$$.fragment,ri),ohr=i(ri),J_e=n(ri,"P",{});var Eht=s(J_e);rhr=r(Eht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Eht.forEach(t),thr=i(ri),Nc=n(ri,"P",{});var SW=s(Nc);ahr=r(SW,`Note:
Loading a model from its configuration file does `),Y_e=n(SW,"STRONG",{});var yht=s(Y_e);nhr=r(yht,"not"),yht.forEach(t),shr=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),K_e=n(SW,"CODE",{});var wht=s(K_e);lhr=r(wht,"from_pretrained()"),wht.forEach(t),ihr=r(SW,"to load the model weights."),SW.forEach(t),dhr=i(ri),Z_e=n(ri,"P",{});var Aht=s(Z_e);chr=r(Aht,"Examples:"),Aht.forEach(t),fhr=i(ri),m(Pw.$$.fragment,ri),ri.forEach(t),mhr=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m($w.$$.fragment,Ma),ghr=i(Ma),eue=n(Ma,"P",{});var Lht=s(eue);hhr=r(Lht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lht.forEach(t),phr=i(Ma),En=n(Ma,"P",{});var BM=s(En);_hr=r(BM,"The model class to instantiate is selected based on the "),oue=n(BM,"CODE",{});var Bht=s(oue);uhr=r(Bht,"model_type"),Bht.forEach(t),bhr=r(BM,` property of the config object (either
passed as an argument or loaded from `),rue=n(BM,"CODE",{});var xht=s(rue);vhr=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),Thr=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(BM,"CODE",{});var kht=s(tue);Fhr=r(kht,"pretrained_model_name_or_path"),kht.forEach(t),Chr=r(BM,":"),BM.forEach(t),Mhr=i(Ma),aue=n(Ma,"UL",{});var Rht=s(aue);J7=n(Rht,"LI",{});var FLe=s(J7);nue=n(FLe,"STRONG",{});var Sht=s(nue);Ehr=r(Sht,"tapas"),Sht.forEach(t),yhr=r(FLe," \u2014 "),NG=n(FLe,"A",{href:!0});var Pht=s(NG);whr=r(Pht,"TFTapasForQuestionAnswering"),Pht.forEach(t),Ahr=r(FLe," (TAPAS model)"),FLe.forEach(t),Rht.forEach(t),Lhr=i(Ma),sue=n(Ma,"P",{});var $ht=s(sue);Bhr=r($ht,"Examples:"),$ht.forEach(t),xhr=i(Ma),m(Iw.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),yke=i(d),qc=n(d,"H2",{class:!0});var jSe=s(qc);Y7=n(jSe,"A",{id:!0,class:!0,href:!0});var Iht=s(Y7);lue=n(Iht,"SPAN",{});var jht=s(lue);m(jw.$$.fragment,jht),jht.forEach(t),Iht.forEach(t),khr=i(jSe),iue=n(jSe,"SPAN",{});var Dht=s(iue);Rhr=r(Dht,"TFAutoModelForTokenClassification"),Dht.forEach(t),jSe.forEach(t),wke=i(d),Lr=n(d,"DIV",{class:!0});var ti=s(Lr);m(Dw.$$.fragment,ti),Shr=i(ti),Oc=n(ti,"P",{});var PW=s(Oc);Phr=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),due=n(PW,"CODE",{});var Nht=s(due);$hr=r(Nht,"from_pretrained()"),Nht.forEach(t),Ihr=r(PW,"class method or the "),cue=n(PW,"CODE",{});var qht=s(cue);jhr=r(qht,"from_config()"),qht.forEach(t),Dhr=r(PW,`class
method.`),PW.forEach(t),Nhr=i(ti),Nw=n(ti,"P",{});var DSe=s(Nw);qhr=r(DSe,"This class cannot be instantiated directly using "),fue=n(DSe,"CODE",{});var Oht=s(fue);Ohr=r(Oht,"__init__()"),Oht.forEach(t),Ghr=r(DSe," (throws an error)."),DSe.forEach(t),Xhr=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(qw.$$.fragment,ai),Vhr=i(ai),mue=n(ai,"P",{});var Ght=s(mue);zhr=r(Ght,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ght.forEach(t),Whr=i(ai),Gc=n(ai,"P",{});var $W=s(Gc);Qhr=r($W,`Note:
Loading a model from its configuration file does `),gue=n($W,"STRONG",{});var Xht=s(gue);Hhr=r(Xht,"not"),Xht.forEach(t),Uhr=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),hue=n($W,"CODE",{});var Vht=s(hue);Jhr=r(Vht,"from_pretrained()"),Vht.forEach(t),Yhr=r($W,"to load the model weights."),$W.forEach(t),Khr=i(ai),pue=n(ai,"P",{});var zht=s(pue);Zhr=r(zht,"Examples:"),zht.forEach(t),epr=i(ai),m(Ow.$$.fragment,ai),ai.forEach(t),opr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(Gw.$$.fragment,Ea),rpr=i(Ea),_ue=n(Ea,"P",{});var Wht=s(_ue);tpr=r(Wht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wht.forEach(t),apr=i(Ea),yn=n(Ea,"P",{});var xM=s(yn);npr=r(xM,"The model class to instantiate is selected based on the "),uue=n(xM,"CODE",{});var Qht=s(uue);spr=r(Qht,"model_type"),Qht.forEach(t),lpr=r(xM,` property of the config object (either
passed as an argument or loaded from `),bue=n(xM,"CODE",{});var Hht=s(bue);ipr=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),dpr=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(xM,"CODE",{});var Uht=s(vue);cpr=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),fpr=r(xM,":"),xM.forEach(t),mpr=i(Ea),K=n(Ea,"UL",{});var oe=s(K);K7=n(oe,"LI",{});var CLe=s(K7);Tue=n(CLe,"STRONG",{});var Jht=s(Tue);gpr=r(Jht,"albert"),Jht.forEach(t),hpr=r(CLe," \u2014 "),qG=n(CLe,"A",{href:!0});var Yht=s(qG);ppr=r(Yht,"TFAlbertForTokenClassification"),Yht.forEach(t),_pr=r(CLe," (ALBERT model)"),CLe.forEach(t),upr=i(oe),Z7=n(oe,"LI",{});var MLe=s(Z7);Fue=n(MLe,"STRONG",{});var Kht=s(Fue);bpr=r(Kht,"bert"),Kht.forEach(t),vpr=r(MLe," \u2014 "),OG=n(MLe,"A",{href:!0});var Zht=s(OG);Tpr=r(Zht,"TFBertForTokenClassification"),Zht.forEach(t),Fpr=r(MLe," (BERT model)"),MLe.forEach(t),Cpr=i(oe),eF=n(oe,"LI",{});var ELe=s(eF);Cue=n(ELe,"STRONG",{});var ept=s(Cue);Mpr=r(ept,"camembert"),ept.forEach(t),Epr=r(ELe," \u2014 "),GG=n(ELe,"A",{href:!0});var opt=s(GG);ypr=r(opt,"TFCamembertForTokenClassification"),opt.forEach(t),wpr=r(ELe," (CamemBERT model)"),ELe.forEach(t),Apr=i(oe),oF=n(oe,"LI",{});var yLe=s(oF);Mue=n(yLe,"STRONG",{});var rpt=s(Mue);Lpr=r(rpt,"convbert"),rpt.forEach(t),Bpr=r(yLe," \u2014 "),XG=n(yLe,"A",{href:!0});var tpt=s(XG);xpr=r(tpt,"TFConvBertForTokenClassification"),tpt.forEach(t),kpr=r(yLe," (ConvBERT model)"),yLe.forEach(t),Rpr=i(oe),rF=n(oe,"LI",{});var wLe=s(rF);Eue=n(wLe,"STRONG",{});var apt=s(Eue);Spr=r(apt,"deberta"),apt.forEach(t),Ppr=r(wLe," \u2014 "),VG=n(wLe,"A",{href:!0});var npt=s(VG);$pr=r(npt,"TFDebertaForTokenClassification"),npt.forEach(t),Ipr=r(wLe," (DeBERTa model)"),wLe.forEach(t),jpr=i(oe),tF=n(oe,"LI",{});var ALe=s(tF);yue=n(ALe,"STRONG",{});var spt=s(yue);Dpr=r(spt,"deberta-v2"),spt.forEach(t),Npr=r(ALe," \u2014 "),zG=n(ALe,"A",{href:!0});var lpt=s(zG);qpr=r(lpt,"TFDebertaV2ForTokenClassification"),lpt.forEach(t),Opr=r(ALe," (DeBERTa-v2 model)"),ALe.forEach(t),Gpr=i(oe),aF=n(oe,"LI",{});var LLe=s(aF);wue=n(LLe,"STRONG",{});var ipt=s(wue);Xpr=r(ipt,"distilbert"),ipt.forEach(t),Vpr=r(LLe," \u2014 "),WG=n(LLe,"A",{href:!0});var dpt=s(WG);zpr=r(dpt,"TFDistilBertForTokenClassification"),dpt.forEach(t),Wpr=r(LLe," (DistilBERT model)"),LLe.forEach(t),Qpr=i(oe),nF=n(oe,"LI",{});var BLe=s(nF);Aue=n(BLe,"STRONG",{});var cpt=s(Aue);Hpr=r(cpt,"electra"),cpt.forEach(t),Upr=r(BLe," \u2014 "),QG=n(BLe,"A",{href:!0});var fpt=s(QG);Jpr=r(fpt,"TFElectraForTokenClassification"),fpt.forEach(t),Ypr=r(BLe," (ELECTRA model)"),BLe.forEach(t),Kpr=i(oe),sF=n(oe,"LI",{});var xLe=s(sF);Lue=n(xLe,"STRONG",{});var mpt=s(Lue);Zpr=r(mpt,"flaubert"),mpt.forEach(t),e_r=r(xLe," \u2014 "),HG=n(xLe,"A",{href:!0});var gpt=s(HG);o_r=r(gpt,"TFFlaubertForTokenClassification"),gpt.forEach(t),r_r=r(xLe," (FlauBERT model)"),xLe.forEach(t),t_r=i(oe),lF=n(oe,"LI",{});var kLe=s(lF);Bue=n(kLe,"STRONG",{});var hpt=s(Bue);a_r=r(hpt,"funnel"),hpt.forEach(t),n_r=r(kLe," \u2014 "),UG=n(kLe,"A",{href:!0});var ppt=s(UG);s_r=r(ppt,"TFFunnelForTokenClassification"),ppt.forEach(t),l_r=r(kLe," (Funnel Transformer model)"),kLe.forEach(t),i_r=i(oe),iF=n(oe,"LI",{});var RLe=s(iF);xue=n(RLe,"STRONG",{});var _pt=s(xue);d_r=r(_pt,"layoutlm"),_pt.forEach(t),c_r=r(RLe," \u2014 "),JG=n(RLe,"A",{href:!0});var upt=s(JG);f_r=r(upt,"TFLayoutLMForTokenClassification"),upt.forEach(t),m_r=r(RLe," (LayoutLM model)"),RLe.forEach(t),g_r=i(oe),dF=n(oe,"LI",{});var SLe=s(dF);kue=n(SLe,"STRONG",{});var bpt=s(kue);h_r=r(bpt,"longformer"),bpt.forEach(t),p_r=r(SLe," \u2014 "),YG=n(SLe,"A",{href:!0});var vpt=s(YG);__r=r(vpt,"TFLongformerForTokenClassification"),vpt.forEach(t),u_r=r(SLe," (Longformer model)"),SLe.forEach(t),b_r=i(oe),cF=n(oe,"LI",{});var PLe=s(cF);Rue=n(PLe,"STRONG",{});var Tpt=s(Rue);v_r=r(Tpt,"mobilebert"),Tpt.forEach(t),T_r=r(PLe," \u2014 "),KG=n(PLe,"A",{href:!0});var Fpt=s(KG);F_r=r(Fpt,"TFMobileBertForTokenClassification"),Fpt.forEach(t),C_r=r(PLe," (MobileBERT model)"),PLe.forEach(t),M_r=i(oe),fF=n(oe,"LI",{});var $Le=s(fF);Sue=n($Le,"STRONG",{});var Cpt=s(Sue);E_r=r(Cpt,"mpnet"),Cpt.forEach(t),y_r=r($Le," \u2014 "),ZG=n($Le,"A",{href:!0});var Mpt=s(ZG);w_r=r(Mpt,"TFMPNetForTokenClassification"),Mpt.forEach(t),A_r=r($Le," (MPNet model)"),$Le.forEach(t),L_r=i(oe),mF=n(oe,"LI",{});var ILe=s(mF);Pue=n(ILe,"STRONG",{});var Ept=s(Pue);B_r=r(Ept,"rembert"),Ept.forEach(t),x_r=r(ILe," \u2014 "),eX=n(ILe,"A",{href:!0});var ypt=s(eX);k_r=r(ypt,"TFRemBertForTokenClassification"),ypt.forEach(t),R_r=r(ILe," (RemBERT model)"),ILe.forEach(t),S_r=i(oe),gF=n(oe,"LI",{});var jLe=s(gF);$ue=n(jLe,"STRONG",{});var wpt=s($ue);P_r=r(wpt,"roberta"),wpt.forEach(t),$_r=r(jLe," \u2014 "),oX=n(jLe,"A",{href:!0});var Apt=s(oX);I_r=r(Apt,"TFRobertaForTokenClassification"),Apt.forEach(t),j_r=r(jLe," (RoBERTa model)"),jLe.forEach(t),D_r=i(oe),hF=n(oe,"LI",{});var DLe=s(hF);Iue=n(DLe,"STRONG",{});var Lpt=s(Iue);N_r=r(Lpt,"roformer"),Lpt.forEach(t),q_r=r(DLe," \u2014 "),rX=n(DLe,"A",{href:!0});var Bpt=s(rX);O_r=r(Bpt,"TFRoFormerForTokenClassification"),Bpt.forEach(t),G_r=r(DLe," (RoFormer model)"),DLe.forEach(t),X_r=i(oe),pF=n(oe,"LI",{});var NLe=s(pF);jue=n(NLe,"STRONG",{});var xpt=s(jue);V_r=r(xpt,"xlm"),xpt.forEach(t),z_r=r(NLe," \u2014 "),tX=n(NLe,"A",{href:!0});var kpt=s(tX);W_r=r(kpt,"TFXLMForTokenClassification"),kpt.forEach(t),Q_r=r(NLe," (XLM model)"),NLe.forEach(t),H_r=i(oe),_F=n(oe,"LI",{});var qLe=s(_F);Due=n(qLe,"STRONG",{});var Rpt=s(Due);U_r=r(Rpt,"xlm-roberta"),Rpt.forEach(t),J_r=r(qLe," \u2014 "),aX=n(qLe,"A",{href:!0});var Spt=s(aX);Y_r=r(Spt,"TFXLMRobertaForTokenClassification"),Spt.forEach(t),K_r=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),Z_r=i(oe),uF=n(oe,"LI",{});var OLe=s(uF);Nue=n(OLe,"STRONG",{});var Ppt=s(Nue);eur=r(Ppt,"xlnet"),Ppt.forEach(t),our=r(OLe," \u2014 "),nX=n(OLe,"A",{href:!0});var $pt=s(nX);rur=r($pt,"TFXLNetForTokenClassification"),$pt.forEach(t),tur=r(OLe," (XLNet model)"),OLe.forEach(t),oe.forEach(t),aur=i(Ea),que=n(Ea,"P",{});var Ipt=s(que);nur=r(Ipt,"Examples:"),Ipt.forEach(t),sur=i(Ea),m(Xw.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),Ake=i(d),Xc=n(d,"H2",{class:!0});var NSe=s(Xc);bF=n(NSe,"A",{id:!0,class:!0,href:!0});var jpt=s(bF);Oue=n(jpt,"SPAN",{});var Dpt=s(Oue);m(Vw.$$.fragment,Dpt),Dpt.forEach(t),jpt.forEach(t),lur=i(NSe),Gue=n(NSe,"SPAN",{});var Npt=s(Gue);iur=r(Npt,"TFAutoModelForQuestionAnswering"),Npt.forEach(t),NSe.forEach(t),Lke=i(d),Br=n(d,"DIV",{class:!0});var ni=s(Br);m(zw.$$.fragment,ni),dur=i(ni),Vc=n(ni,"P",{});var IW=s(Vc);cur=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xue=n(IW,"CODE",{});var qpt=s(Xue);fur=r(qpt,"from_pretrained()"),qpt.forEach(t),mur=r(IW,"class method or the "),Vue=n(IW,"CODE",{});var Opt=s(Vue);gur=r(Opt,"from_config()"),Opt.forEach(t),hur=r(IW,`class
method.`),IW.forEach(t),pur=i(ni),Ww=n(ni,"P",{});var qSe=s(Ww);_ur=r(qSe,"This class cannot be instantiated directly using "),zue=n(qSe,"CODE",{});var Gpt=s(zue);uur=r(Gpt,"__init__()"),Gpt.forEach(t),bur=r(qSe," (throws an error)."),qSe.forEach(t),vur=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(Qw.$$.fragment,si),Tur=i(si),Wue=n(si,"P",{});var Xpt=s(Wue);Fur=r(Xpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xpt.forEach(t),Cur=i(si),zc=n(si,"P",{});var jW=s(zc);Mur=r(jW,`Note:
Loading a model from its configuration file does `),Que=n(jW,"STRONG",{});var Vpt=s(Que);Eur=r(Vpt,"not"),Vpt.forEach(t),yur=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hue=n(jW,"CODE",{});var zpt=s(Hue);wur=r(zpt,"from_pretrained()"),zpt.forEach(t),Aur=r(jW,"to load the model weights."),jW.forEach(t),Lur=i(si),Uue=n(si,"P",{});var Wpt=s(Uue);Bur=r(Wpt,"Examples:"),Wpt.forEach(t),xur=i(si),m(Hw.$$.fragment,si),si.forEach(t),kur=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(Uw.$$.fragment,ya),Rur=i(ya),Jue=n(ya,"P",{});var Qpt=s(Jue);Sur=r(Qpt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qpt.forEach(t),Pur=i(ya),wn=n(ya,"P",{});var kM=s(wn);$ur=r(kM,"The model class to instantiate is selected based on the "),Yue=n(kM,"CODE",{});var Hpt=s(Yue);Iur=r(Hpt,"model_type"),Hpt.forEach(t),jur=r(kM,` property of the config object (either
passed as an argument or loaded from `),Kue=n(kM,"CODE",{});var Upt=s(Kue);Dur=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),Nur=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(kM,"CODE",{});var Jpt=s(Zue);qur=r(Jpt,"pretrained_model_name_or_path"),Jpt.forEach(t),Our=r(kM,":"),kM.forEach(t),Gur=i(ya),Z=n(ya,"UL",{});var re=s(Z);vF=n(re,"LI",{});var GLe=s(vF);e1e=n(GLe,"STRONG",{});var Ypt=s(e1e);Xur=r(Ypt,"albert"),Ypt.forEach(t),Vur=r(GLe," \u2014 "),sX=n(GLe,"A",{href:!0});var Kpt=s(sX);zur=r(Kpt,"TFAlbertForQuestionAnswering"),Kpt.forEach(t),Wur=r(GLe," (ALBERT model)"),GLe.forEach(t),Qur=i(re),TF=n(re,"LI",{});var XLe=s(TF);o1e=n(XLe,"STRONG",{});var Zpt=s(o1e);Hur=r(Zpt,"bert"),Zpt.forEach(t),Uur=r(XLe," \u2014 "),lX=n(XLe,"A",{href:!0});var e_t=s(lX);Jur=r(e_t,"TFBertForQuestionAnswering"),e_t.forEach(t),Yur=r(XLe," (BERT model)"),XLe.forEach(t),Kur=i(re),FF=n(re,"LI",{});var VLe=s(FF);r1e=n(VLe,"STRONG",{});var o_t=s(r1e);Zur=r(o_t,"camembert"),o_t.forEach(t),e1r=r(VLe," \u2014 "),iX=n(VLe,"A",{href:!0});var r_t=s(iX);o1r=r(r_t,"TFCamembertForQuestionAnswering"),r_t.forEach(t),r1r=r(VLe," (CamemBERT model)"),VLe.forEach(t),t1r=i(re),CF=n(re,"LI",{});var zLe=s(CF);t1e=n(zLe,"STRONG",{});var t_t=s(t1e);a1r=r(t_t,"convbert"),t_t.forEach(t),n1r=r(zLe," \u2014 "),dX=n(zLe,"A",{href:!0});var a_t=s(dX);s1r=r(a_t,"TFConvBertForQuestionAnswering"),a_t.forEach(t),l1r=r(zLe," (ConvBERT model)"),zLe.forEach(t),i1r=i(re),MF=n(re,"LI",{});var WLe=s(MF);a1e=n(WLe,"STRONG",{});var n_t=s(a1e);d1r=r(n_t,"deberta"),n_t.forEach(t),c1r=r(WLe," \u2014 "),cX=n(WLe,"A",{href:!0});var s_t=s(cX);f1r=r(s_t,"TFDebertaForQuestionAnswering"),s_t.forEach(t),m1r=r(WLe," (DeBERTa model)"),WLe.forEach(t),g1r=i(re),EF=n(re,"LI",{});var QLe=s(EF);n1e=n(QLe,"STRONG",{});var l_t=s(n1e);h1r=r(l_t,"deberta-v2"),l_t.forEach(t),p1r=r(QLe," \u2014 "),fX=n(QLe,"A",{href:!0});var i_t=s(fX);_1r=r(i_t,"TFDebertaV2ForQuestionAnswering"),i_t.forEach(t),u1r=r(QLe," (DeBERTa-v2 model)"),QLe.forEach(t),b1r=i(re),yF=n(re,"LI",{});var HLe=s(yF);s1e=n(HLe,"STRONG",{});var d_t=s(s1e);v1r=r(d_t,"distilbert"),d_t.forEach(t),T1r=r(HLe," \u2014 "),mX=n(HLe,"A",{href:!0});var c_t=s(mX);F1r=r(c_t,"TFDistilBertForQuestionAnswering"),c_t.forEach(t),C1r=r(HLe," (DistilBERT model)"),HLe.forEach(t),M1r=i(re),wF=n(re,"LI",{});var ULe=s(wF);l1e=n(ULe,"STRONG",{});var f_t=s(l1e);E1r=r(f_t,"electra"),f_t.forEach(t),y1r=r(ULe," \u2014 "),gX=n(ULe,"A",{href:!0});var m_t=s(gX);w1r=r(m_t,"TFElectraForQuestionAnswering"),m_t.forEach(t),A1r=r(ULe," (ELECTRA model)"),ULe.forEach(t),L1r=i(re),AF=n(re,"LI",{});var JLe=s(AF);i1e=n(JLe,"STRONG",{});var g_t=s(i1e);B1r=r(g_t,"flaubert"),g_t.forEach(t),x1r=r(JLe," \u2014 "),hX=n(JLe,"A",{href:!0});var h_t=s(hX);k1r=r(h_t,"TFFlaubertForQuestionAnsweringSimple"),h_t.forEach(t),R1r=r(JLe," (FlauBERT model)"),JLe.forEach(t),S1r=i(re),LF=n(re,"LI",{});var YLe=s(LF);d1e=n(YLe,"STRONG",{});var p_t=s(d1e);P1r=r(p_t,"funnel"),p_t.forEach(t),$1r=r(YLe," \u2014 "),pX=n(YLe,"A",{href:!0});var __t=s(pX);I1r=r(__t,"TFFunnelForQuestionAnswering"),__t.forEach(t),j1r=r(YLe," (Funnel Transformer model)"),YLe.forEach(t),D1r=i(re),BF=n(re,"LI",{});var KLe=s(BF);c1e=n(KLe,"STRONG",{});var u_t=s(c1e);N1r=r(u_t,"longformer"),u_t.forEach(t),q1r=r(KLe," \u2014 "),_X=n(KLe,"A",{href:!0});var b_t=s(_X);O1r=r(b_t,"TFLongformerForQuestionAnswering"),b_t.forEach(t),G1r=r(KLe," (Longformer model)"),KLe.forEach(t),X1r=i(re),xF=n(re,"LI",{});var ZLe=s(xF);f1e=n(ZLe,"STRONG",{});var v_t=s(f1e);V1r=r(v_t,"mobilebert"),v_t.forEach(t),z1r=r(ZLe," \u2014 "),uX=n(ZLe,"A",{href:!0});var T_t=s(uX);W1r=r(T_t,"TFMobileBertForQuestionAnswering"),T_t.forEach(t),Q1r=r(ZLe," (MobileBERT model)"),ZLe.forEach(t),H1r=i(re),kF=n(re,"LI",{});var e8e=s(kF);m1e=n(e8e,"STRONG",{});var F_t=s(m1e);U1r=r(F_t,"mpnet"),F_t.forEach(t),J1r=r(e8e," \u2014 "),bX=n(e8e,"A",{href:!0});var C_t=s(bX);Y1r=r(C_t,"TFMPNetForQuestionAnswering"),C_t.forEach(t),K1r=r(e8e," (MPNet model)"),e8e.forEach(t),Z1r=i(re),RF=n(re,"LI",{});var o8e=s(RF);g1e=n(o8e,"STRONG",{});var M_t=s(g1e);ebr=r(M_t,"rembert"),M_t.forEach(t),obr=r(o8e," \u2014 "),vX=n(o8e,"A",{href:!0});var E_t=s(vX);rbr=r(E_t,"TFRemBertForQuestionAnswering"),E_t.forEach(t),tbr=r(o8e," (RemBERT model)"),o8e.forEach(t),abr=i(re),SF=n(re,"LI",{});var r8e=s(SF);h1e=n(r8e,"STRONG",{});var y_t=s(h1e);nbr=r(y_t,"roberta"),y_t.forEach(t),sbr=r(r8e," \u2014 "),TX=n(r8e,"A",{href:!0});var w_t=s(TX);lbr=r(w_t,"TFRobertaForQuestionAnswering"),w_t.forEach(t),ibr=r(r8e," (RoBERTa model)"),r8e.forEach(t),dbr=i(re),PF=n(re,"LI",{});var t8e=s(PF);p1e=n(t8e,"STRONG",{});var A_t=s(p1e);cbr=r(A_t,"roformer"),A_t.forEach(t),fbr=r(t8e," \u2014 "),FX=n(t8e,"A",{href:!0});var L_t=s(FX);mbr=r(L_t,"TFRoFormerForQuestionAnswering"),L_t.forEach(t),gbr=r(t8e," (RoFormer model)"),t8e.forEach(t),hbr=i(re),$F=n(re,"LI",{});var a8e=s($F);_1e=n(a8e,"STRONG",{});var B_t=s(_1e);pbr=r(B_t,"xlm"),B_t.forEach(t),_br=r(a8e," \u2014 "),CX=n(a8e,"A",{href:!0});var x_t=s(CX);ubr=r(x_t,"TFXLMForQuestionAnsweringSimple"),x_t.forEach(t),bbr=r(a8e," (XLM model)"),a8e.forEach(t),vbr=i(re),IF=n(re,"LI",{});var n8e=s(IF);u1e=n(n8e,"STRONG",{});var k_t=s(u1e);Tbr=r(k_t,"xlm-roberta"),k_t.forEach(t),Fbr=r(n8e," \u2014 "),MX=n(n8e,"A",{href:!0});var R_t=s(MX);Cbr=r(R_t,"TFXLMRobertaForQuestionAnswering"),R_t.forEach(t),Mbr=r(n8e," (XLM-RoBERTa model)"),n8e.forEach(t),Ebr=i(re),jF=n(re,"LI",{});var s8e=s(jF);b1e=n(s8e,"STRONG",{});var S_t=s(b1e);ybr=r(S_t,"xlnet"),S_t.forEach(t),wbr=r(s8e," \u2014 "),EX=n(s8e,"A",{href:!0});var P_t=s(EX);Abr=r(P_t,"TFXLNetForQuestionAnsweringSimple"),P_t.forEach(t),Lbr=r(s8e," (XLNet model)"),s8e.forEach(t),re.forEach(t),Bbr=i(ya),v1e=n(ya,"P",{});var $_t=s(v1e);xbr=r($_t,"Examples:"),$_t.forEach(t),kbr=i(ya),m(Jw.$$.fragment,ya),ya.forEach(t),ni.forEach(t),Bke=i(d),Wc=n(d,"H2",{class:!0});var OSe=s(Wc);DF=n(OSe,"A",{id:!0,class:!0,href:!0});var I_t=s(DF);T1e=n(I_t,"SPAN",{});var j_t=s(T1e);m(Yw.$$.fragment,j_t),j_t.forEach(t),I_t.forEach(t),Rbr=i(OSe),F1e=n(OSe,"SPAN",{});var D_t=s(F1e);Sbr=r(D_t,"TFAutoModelForVision2Seq"),D_t.forEach(t),OSe.forEach(t),xke=i(d),xr=n(d,"DIV",{class:!0});var li=s(xr);m(Kw.$$.fragment,li),Pbr=i(li),Qc=n(li,"P",{});var DW=s(Qc);$br=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),C1e=n(DW,"CODE",{});var N_t=s(C1e);Ibr=r(N_t,"from_pretrained()"),N_t.forEach(t),jbr=r(DW,"class method or the "),M1e=n(DW,"CODE",{});var q_t=s(M1e);Dbr=r(q_t,"from_config()"),q_t.forEach(t),Nbr=r(DW,`class
method.`),DW.forEach(t),qbr=i(li),Zw=n(li,"P",{});var GSe=s(Zw);Obr=r(GSe,"This class cannot be instantiated directly using "),E1e=n(GSe,"CODE",{});var O_t=s(E1e);Gbr=r(O_t,"__init__()"),O_t.forEach(t),Xbr=r(GSe," (throws an error)."),GSe.forEach(t),Vbr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(e6.$$.fragment,ii),zbr=i(ii),y1e=n(ii,"P",{});var G_t=s(y1e);Wbr=r(G_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),G_t.forEach(t),Qbr=i(ii),Hc=n(ii,"P",{});var NW=s(Hc);Hbr=r(NW,`Note:
Loading a model from its configuration file does `),w1e=n(NW,"STRONG",{});var X_t=s(w1e);Ubr=r(X_t,"not"),X_t.forEach(t),Jbr=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),A1e=n(NW,"CODE",{});var V_t=s(A1e);Ybr=r(V_t,"from_pretrained()"),V_t.forEach(t),Kbr=r(NW,"to load the model weights."),NW.forEach(t),Zbr=i(ii),L1e=n(ii,"P",{});var z_t=s(L1e);e5r=r(z_t,"Examples:"),z_t.forEach(t),o5r=i(ii),m(o6.$$.fragment,ii),ii.forEach(t),r5r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(r6.$$.fragment,wa),t5r=i(wa),B1e=n(wa,"P",{});var W_t=s(B1e);a5r=r(W_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W_t.forEach(t),n5r=i(wa),An=n(wa,"P",{});var RM=s(An);s5r=r(RM,"The model class to instantiate is selected based on the "),x1e=n(RM,"CODE",{});var Q_t=s(x1e);l5r=r(Q_t,"model_type"),Q_t.forEach(t),i5r=r(RM,` property of the config object (either
passed as an argument or loaded from `),k1e=n(RM,"CODE",{});var H_t=s(k1e);d5r=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),c5r=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(RM,"CODE",{});var U_t=s(R1e);f5r=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),m5r=r(RM,":"),RM.forEach(t),g5r=i(wa),S1e=n(wa,"UL",{});var J_t=s(S1e);NF=n(J_t,"LI",{});var l8e=s(NF);P1e=n(l8e,"STRONG",{});var Y_t=s(P1e);h5r=r(Y_t,"vision-encoder-decoder"),Y_t.forEach(t),p5r=r(l8e," \u2014 "),yX=n(l8e,"A",{href:!0});var K_t=s(yX);_5r=r(K_t,"TFVisionEncoderDecoderModel"),K_t.forEach(t),u5r=r(l8e," (Vision Encoder decoder model)"),l8e.forEach(t),J_t.forEach(t),b5r=i(wa),$1e=n(wa,"P",{});var Z_t=s($1e);v5r=r(Z_t,"Examples:"),Z_t.forEach(t),T5r=i(wa),m(t6.$$.fragment,wa),wa.forEach(t),li.forEach(t),kke=i(d),Uc=n(d,"H2",{class:!0});var XSe=s(Uc);qF=n(XSe,"A",{id:!0,class:!0,href:!0});var eut=s(qF);I1e=n(eut,"SPAN",{});var out=s(I1e);m(a6.$$.fragment,out),out.forEach(t),eut.forEach(t),F5r=i(XSe),j1e=n(XSe,"SPAN",{});var rut=s(j1e);C5r=r(rut,"TFAutoModelForSpeechSeq2Seq"),rut.forEach(t),XSe.forEach(t),Rke=i(d),kr=n(d,"DIV",{class:!0});var di=s(kr);m(n6.$$.fragment,di),M5r=i(di),Jc=n(di,"P",{});var qW=s(Jc);E5r=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),D1e=n(qW,"CODE",{});var tut=s(D1e);y5r=r(tut,"from_pretrained()"),tut.forEach(t),w5r=r(qW,"class method or the "),N1e=n(qW,"CODE",{});var aut=s(N1e);A5r=r(aut,"from_config()"),aut.forEach(t),L5r=r(qW,`class
method.`),qW.forEach(t),B5r=i(di),s6=n(di,"P",{});var VSe=s(s6);x5r=r(VSe,"This class cannot be instantiated directly using "),q1e=n(VSe,"CODE",{});var nut=s(q1e);k5r=r(nut,"__init__()"),nut.forEach(t),R5r=r(VSe," (throws an error)."),VSe.forEach(t),S5r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(l6.$$.fragment,ci),P5r=i(ci),O1e=n(ci,"P",{});var sut=s(O1e);$5r=r(sut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sut.forEach(t),I5r=i(ci),Yc=n(ci,"P",{});var OW=s(Yc);j5r=r(OW,`Note:
Loading a model from its configuration file does `),G1e=n(OW,"STRONG",{});var lut=s(G1e);D5r=r(lut,"not"),lut.forEach(t),N5r=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),X1e=n(OW,"CODE",{});var iut=s(X1e);q5r=r(iut,"from_pretrained()"),iut.forEach(t),O5r=r(OW,"to load the model weights."),OW.forEach(t),G5r=i(ci),V1e=n(ci,"P",{});var dut=s(V1e);X5r=r(dut,"Examples:"),dut.forEach(t),V5r=i(ci),m(i6.$$.fragment,ci),ci.forEach(t),z5r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(d6.$$.fragment,Aa),W5r=i(Aa),z1e=n(Aa,"P",{});var cut=s(z1e);Q5r=r(cut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cut.forEach(t),H5r=i(Aa),Ln=n(Aa,"P",{});var SM=s(Ln);U5r=r(SM,"The model class to instantiate is selected based on the "),W1e=n(SM,"CODE",{});var fut=s(W1e);J5r=r(fut,"model_type"),fut.forEach(t),Y5r=r(SM,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(SM,"CODE",{});var mut=s(Q1e);K5r=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),Z5r=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(SM,"CODE",{});var gut=s(H1e);e2r=r(gut,"pretrained_model_name_or_path"),gut.forEach(t),o2r=r(SM,":"),SM.forEach(t),r2r=i(Aa),U1e=n(Aa,"UL",{});var hut=s(U1e);OF=n(hut,"LI",{});var i8e=s(OF);J1e=n(i8e,"STRONG",{});var put=s(J1e);t2r=r(put,"speech_to_text"),put.forEach(t),a2r=r(i8e," \u2014 "),wX=n(i8e,"A",{href:!0});var _ut=s(wX);n2r=r(_ut,"TFSpeech2TextForConditionalGeneration"),_ut.forEach(t),s2r=r(i8e," (Speech2Text model)"),i8e.forEach(t),hut.forEach(t),l2r=i(Aa),Y1e=n(Aa,"P",{});var uut=s(Y1e);i2r=r(uut,"Examples:"),uut.forEach(t),d2r=i(Aa),m(c6.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),Ske=i(d),Kc=n(d,"H2",{class:!0});var zSe=s(Kc);GF=n(zSe,"A",{id:!0,class:!0,href:!0});var but=s(GF);K1e=n(but,"SPAN",{});var vut=s(K1e);m(f6.$$.fragment,vut),vut.forEach(t),but.forEach(t),c2r=i(zSe),Z1e=n(zSe,"SPAN",{});var Tut=s(Z1e);f2r=r(Tut,"FlaxAutoModel"),Tut.forEach(t),zSe.forEach(t),Pke=i(d),Rr=n(d,"DIV",{class:!0});var fi=s(Rr);m(m6.$$.fragment,fi),m2r=i(fi),Zc=n(fi,"P",{});var GW=s(Zc);g2r=r(GW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ebe=n(GW,"CODE",{});var Fut=s(ebe);h2r=r(Fut,"from_pretrained()"),Fut.forEach(t),p2r=r(GW,"class method or the "),obe=n(GW,"CODE",{});var Cut=s(obe);_2r=r(Cut,"from_config()"),Cut.forEach(t),u2r=r(GW,`class
method.`),GW.forEach(t),b2r=i(fi),g6=n(fi,"P",{});var WSe=s(g6);v2r=r(WSe,"This class cannot be instantiated directly using "),rbe=n(WSe,"CODE",{});var Mut=s(rbe);T2r=r(Mut,"__init__()"),Mut.forEach(t),F2r=r(WSe," (throws an error)."),WSe.forEach(t),C2r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(h6.$$.fragment,mi),M2r=i(mi),tbe=n(mi,"P",{});var Eut=s(tbe);E2r=r(Eut,"Instantiates one of the base model classes of the library from a configuration."),Eut.forEach(t),y2r=i(mi),ef=n(mi,"P",{});var XW=s(ef);w2r=r(XW,`Note:
Loading a model from its configuration file does `),abe=n(XW,"STRONG",{});var yut=s(abe);A2r=r(yut,"not"),yut.forEach(t),L2r=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nbe=n(XW,"CODE",{});var wut=s(nbe);B2r=r(wut,"from_pretrained()"),wut.forEach(t),x2r=r(XW,"to load the model weights."),XW.forEach(t),k2r=i(mi),sbe=n(mi,"P",{});var Aut=s(sbe);R2r=r(Aut,"Examples:"),Aut.forEach(t),S2r=i(mi),m(p6.$$.fragment,mi),mi.forEach(t),P2r=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(_6.$$.fragment,La),$2r=i(La),lbe=n(La,"P",{});var Lut=s(lbe);I2r=r(Lut,"Instantiate one of the base model classes of the library from a pretrained model."),Lut.forEach(t),j2r=i(La),Bn=n(La,"P",{});var PM=s(Bn);D2r=r(PM,"The model class to instantiate is selected based on the "),ibe=n(PM,"CODE",{});var But=s(ibe);N2r=r(But,"model_type"),But.forEach(t),q2r=r(PM,` property of the config object (either
passed as an argument or loaded from `),dbe=n(PM,"CODE",{});var xut=s(dbe);O2r=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),G2r=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(PM,"CODE",{});var kut=s(cbe);X2r=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),V2r=r(PM,":"),PM.forEach(t),z2r=i(La),z=n(La,"UL",{});var Q=s(z);XF=n(Q,"LI",{});var d8e=s(XF);fbe=n(d8e,"STRONG",{});var Rut=s(fbe);W2r=r(Rut,"albert"),Rut.forEach(t),Q2r=r(d8e," \u2014 "),AX=n(d8e,"A",{href:!0});var Sut=s(AX);H2r=r(Sut,"FlaxAlbertModel"),Sut.forEach(t),U2r=r(d8e," (ALBERT model)"),d8e.forEach(t),J2r=i(Q),VF=n(Q,"LI",{});var c8e=s(VF);mbe=n(c8e,"STRONG",{});var Put=s(mbe);Y2r=r(Put,"bart"),Put.forEach(t),K2r=r(c8e," \u2014 "),LX=n(c8e,"A",{href:!0});var $ut=s(LX);Z2r=r($ut,"FlaxBartModel"),$ut.forEach(t),evr=r(c8e," (BART model)"),c8e.forEach(t),ovr=i(Q),zF=n(Q,"LI",{});var f8e=s(zF);gbe=n(f8e,"STRONG",{});var Iut=s(gbe);rvr=r(Iut,"beit"),Iut.forEach(t),tvr=r(f8e," \u2014 "),BX=n(f8e,"A",{href:!0});var jut=s(BX);avr=r(jut,"FlaxBeitModel"),jut.forEach(t),nvr=r(f8e," (BEiT model)"),f8e.forEach(t),svr=i(Q),WF=n(Q,"LI",{});var m8e=s(WF);hbe=n(m8e,"STRONG",{});var Dut=s(hbe);lvr=r(Dut,"bert"),Dut.forEach(t),ivr=r(m8e," \u2014 "),xX=n(m8e,"A",{href:!0});var Nut=s(xX);dvr=r(Nut,"FlaxBertModel"),Nut.forEach(t),cvr=r(m8e," (BERT model)"),m8e.forEach(t),fvr=i(Q),QF=n(Q,"LI",{});var g8e=s(QF);pbe=n(g8e,"STRONG",{});var qut=s(pbe);mvr=r(qut,"big_bird"),qut.forEach(t),gvr=r(g8e," \u2014 "),kX=n(g8e,"A",{href:!0});var Out=s(kX);hvr=r(Out,"FlaxBigBirdModel"),Out.forEach(t),pvr=r(g8e," (BigBird model)"),g8e.forEach(t),_vr=i(Q),HF=n(Q,"LI",{});var h8e=s(HF);_be=n(h8e,"STRONG",{});var Gut=s(_be);uvr=r(Gut,"blenderbot"),Gut.forEach(t),bvr=r(h8e," \u2014 "),RX=n(h8e,"A",{href:!0});var Xut=s(RX);vvr=r(Xut,"FlaxBlenderbotModel"),Xut.forEach(t),Tvr=r(h8e," (Blenderbot model)"),h8e.forEach(t),Fvr=i(Q),UF=n(Q,"LI",{});var p8e=s(UF);ube=n(p8e,"STRONG",{});var Vut=s(ube);Cvr=r(Vut,"blenderbot-small"),Vut.forEach(t),Mvr=r(p8e," \u2014 "),SX=n(p8e,"A",{href:!0});var zut=s(SX);Evr=r(zut,"FlaxBlenderbotSmallModel"),zut.forEach(t),yvr=r(p8e," (BlenderbotSmall model)"),p8e.forEach(t),wvr=i(Q),JF=n(Q,"LI",{});var _8e=s(JF);bbe=n(_8e,"STRONG",{});var Wut=s(bbe);Avr=r(Wut,"clip"),Wut.forEach(t),Lvr=r(_8e," \u2014 "),PX=n(_8e,"A",{href:!0});var Qut=s(PX);Bvr=r(Qut,"FlaxCLIPModel"),Qut.forEach(t),xvr=r(_8e," (CLIP model)"),_8e.forEach(t),kvr=i(Q),YF=n(Q,"LI",{});var u8e=s(YF);vbe=n(u8e,"STRONG",{});var Hut=s(vbe);Rvr=r(Hut,"distilbert"),Hut.forEach(t),Svr=r(u8e," \u2014 "),$X=n(u8e,"A",{href:!0});var Uut=s($X);Pvr=r(Uut,"FlaxDistilBertModel"),Uut.forEach(t),$vr=r(u8e," (DistilBERT model)"),u8e.forEach(t),Ivr=i(Q),KF=n(Q,"LI",{});var b8e=s(KF);Tbe=n(b8e,"STRONG",{});var Jut=s(Tbe);jvr=r(Jut,"electra"),Jut.forEach(t),Dvr=r(b8e," \u2014 "),IX=n(b8e,"A",{href:!0});var Yut=s(IX);Nvr=r(Yut,"FlaxElectraModel"),Yut.forEach(t),qvr=r(b8e," (ELECTRA model)"),b8e.forEach(t),Ovr=i(Q),ZF=n(Q,"LI",{});var v8e=s(ZF);Fbe=n(v8e,"STRONG",{});var Kut=s(Fbe);Gvr=r(Kut,"gpt2"),Kut.forEach(t),Xvr=r(v8e," \u2014 "),jX=n(v8e,"A",{href:!0});var Zut=s(jX);Vvr=r(Zut,"FlaxGPT2Model"),Zut.forEach(t),zvr=r(v8e," (OpenAI GPT-2 model)"),v8e.forEach(t),Wvr=i(Q),e9=n(Q,"LI",{});var T8e=s(e9);Cbe=n(T8e,"STRONG",{});var e1t=s(Cbe);Qvr=r(e1t,"gpt_neo"),e1t.forEach(t),Hvr=r(T8e," \u2014 "),DX=n(T8e,"A",{href:!0});var o1t=s(DX);Uvr=r(o1t,"FlaxGPTNeoModel"),o1t.forEach(t),Jvr=r(T8e," (GPT Neo model)"),T8e.forEach(t),Yvr=i(Q),o9=n(Q,"LI",{});var F8e=s(o9);Mbe=n(F8e,"STRONG",{});var r1t=s(Mbe);Kvr=r(r1t,"gptj"),r1t.forEach(t),Zvr=r(F8e," \u2014 "),NX=n(F8e,"A",{href:!0});var t1t=s(NX);e0r=r(t1t,"FlaxGPTJModel"),t1t.forEach(t),o0r=r(F8e," (GPT-J model)"),F8e.forEach(t),r0r=i(Q),r9=n(Q,"LI",{});var C8e=s(r9);Ebe=n(C8e,"STRONG",{});var a1t=s(Ebe);t0r=r(a1t,"marian"),a1t.forEach(t),a0r=r(C8e," \u2014 "),qX=n(C8e,"A",{href:!0});var n1t=s(qX);n0r=r(n1t,"FlaxMarianModel"),n1t.forEach(t),s0r=r(C8e," (Marian model)"),C8e.forEach(t),l0r=i(Q),t9=n(Q,"LI",{});var M8e=s(t9);ybe=n(M8e,"STRONG",{});var s1t=s(ybe);i0r=r(s1t,"mbart"),s1t.forEach(t),d0r=r(M8e," \u2014 "),OX=n(M8e,"A",{href:!0});var l1t=s(OX);c0r=r(l1t,"FlaxMBartModel"),l1t.forEach(t),f0r=r(M8e," (mBART model)"),M8e.forEach(t),m0r=i(Q),a9=n(Q,"LI",{});var E8e=s(a9);wbe=n(E8e,"STRONG",{});var i1t=s(wbe);g0r=r(i1t,"mt5"),i1t.forEach(t),h0r=r(E8e," \u2014 "),GX=n(E8e,"A",{href:!0});var d1t=s(GX);p0r=r(d1t,"FlaxMT5Model"),d1t.forEach(t),_0r=r(E8e," (mT5 model)"),E8e.forEach(t),u0r=i(Q),n9=n(Q,"LI",{});var y8e=s(n9);Abe=n(y8e,"STRONG",{});var c1t=s(Abe);b0r=r(c1t,"pegasus"),c1t.forEach(t),v0r=r(y8e," \u2014 "),XX=n(y8e,"A",{href:!0});var f1t=s(XX);T0r=r(f1t,"FlaxPegasusModel"),f1t.forEach(t),F0r=r(y8e," (Pegasus model)"),y8e.forEach(t),C0r=i(Q),s9=n(Q,"LI",{});var w8e=s(s9);Lbe=n(w8e,"STRONG",{});var m1t=s(Lbe);M0r=r(m1t,"roberta"),m1t.forEach(t),E0r=r(w8e," \u2014 "),VX=n(w8e,"A",{href:!0});var g1t=s(VX);y0r=r(g1t,"FlaxRobertaModel"),g1t.forEach(t),w0r=r(w8e," (RoBERTa model)"),w8e.forEach(t),A0r=i(Q),l9=n(Q,"LI",{});var A8e=s(l9);Bbe=n(A8e,"STRONG",{});var h1t=s(Bbe);L0r=r(h1t,"roformer"),h1t.forEach(t),B0r=r(A8e," \u2014 "),zX=n(A8e,"A",{href:!0});var p1t=s(zX);x0r=r(p1t,"FlaxRoFormerModel"),p1t.forEach(t),k0r=r(A8e," (RoFormer model)"),A8e.forEach(t),R0r=i(Q),i9=n(Q,"LI",{});var L8e=s(i9);xbe=n(L8e,"STRONG",{});var _1t=s(xbe);S0r=r(_1t,"t5"),_1t.forEach(t),P0r=r(L8e," \u2014 "),WX=n(L8e,"A",{href:!0});var u1t=s(WX);$0r=r(u1t,"FlaxT5Model"),u1t.forEach(t),I0r=r(L8e," (T5 model)"),L8e.forEach(t),j0r=i(Q),d9=n(Q,"LI",{});var B8e=s(d9);kbe=n(B8e,"STRONG",{});var b1t=s(kbe);D0r=r(b1t,"vision-text-dual-encoder"),b1t.forEach(t),N0r=r(B8e," \u2014 "),QX=n(B8e,"A",{href:!0});var v1t=s(QX);q0r=r(v1t,"FlaxVisionTextDualEncoderModel"),v1t.forEach(t),O0r=r(B8e," (VisionTextDualEncoder model)"),B8e.forEach(t),G0r=i(Q),c9=n(Q,"LI",{});var x8e=s(c9);Rbe=n(x8e,"STRONG",{});var T1t=s(Rbe);X0r=r(T1t,"vit"),T1t.forEach(t),V0r=r(x8e," \u2014 "),HX=n(x8e,"A",{href:!0});var F1t=s(HX);z0r=r(F1t,"FlaxViTModel"),F1t.forEach(t),W0r=r(x8e," (ViT model)"),x8e.forEach(t),Q0r=i(Q),f9=n(Q,"LI",{});var k8e=s(f9);Sbe=n(k8e,"STRONG",{});var C1t=s(Sbe);H0r=r(C1t,"wav2vec2"),C1t.forEach(t),U0r=r(k8e," \u2014 "),UX=n(k8e,"A",{href:!0});var M1t=s(UX);J0r=r(M1t,"FlaxWav2Vec2Model"),M1t.forEach(t),Y0r=r(k8e," (Wav2Vec2 model)"),k8e.forEach(t),K0r=i(Q),m9=n(Q,"LI",{});var R8e=s(m9);Pbe=n(R8e,"STRONG",{});var E1t=s(Pbe);Z0r=r(E1t,"xglm"),E1t.forEach(t),eTr=r(R8e," \u2014 "),JX=n(R8e,"A",{href:!0});var y1t=s(JX);oTr=r(y1t,"FlaxXGLMModel"),y1t.forEach(t),rTr=r(R8e," (XGLM model)"),R8e.forEach(t),tTr=i(Q),g9=n(Q,"LI",{});var S8e=s(g9);$be=n(S8e,"STRONG",{});var w1t=s($be);aTr=r(w1t,"xlm-roberta"),w1t.forEach(t),nTr=r(S8e," \u2014 "),YX=n(S8e,"A",{href:!0});var A1t=s(YX);sTr=r(A1t,"FlaxXLMRobertaModel"),A1t.forEach(t),lTr=r(S8e," (XLM-RoBERTa model)"),S8e.forEach(t),Q.forEach(t),iTr=i(La),Ibe=n(La,"P",{});var L1t=s(Ibe);dTr=r(L1t,"Examples:"),L1t.forEach(t),cTr=i(La),m(u6.$$.fragment,La),La.forEach(t),fi.forEach(t),$ke=i(d),of=n(d,"H2",{class:!0});var QSe=s(of);h9=n(QSe,"A",{id:!0,class:!0,href:!0});var B1t=s(h9);jbe=n(B1t,"SPAN",{});var x1t=s(jbe);m(b6.$$.fragment,x1t),x1t.forEach(t),B1t.forEach(t),fTr=i(QSe),Dbe=n(QSe,"SPAN",{});var k1t=s(Dbe);mTr=r(k1t,"FlaxAutoModelForCausalLM"),k1t.forEach(t),QSe.forEach(t),Ike=i(d),Sr=n(d,"DIV",{class:!0});var gi=s(Sr);m(v6.$$.fragment,gi),gTr=i(gi),rf=n(gi,"P",{});var VW=s(rf);hTr=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nbe=n(VW,"CODE",{});var R1t=s(Nbe);pTr=r(R1t,"from_pretrained()"),R1t.forEach(t),_Tr=r(VW,"class method or the "),qbe=n(VW,"CODE",{});var S1t=s(qbe);uTr=r(S1t,"from_config()"),S1t.forEach(t),bTr=r(VW,`class
method.`),VW.forEach(t),vTr=i(gi),T6=n(gi,"P",{});var HSe=s(T6);TTr=r(HSe,"This class cannot be instantiated directly using "),Obe=n(HSe,"CODE",{});var P1t=s(Obe);FTr=r(P1t,"__init__()"),P1t.forEach(t),CTr=r(HSe," (throws an error)."),HSe.forEach(t),MTr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(F6.$$.fragment,hi),ETr=i(hi),Gbe=n(hi,"P",{});var $1t=s(Gbe);yTr=r($1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$1t.forEach(t),wTr=i(hi),tf=n(hi,"P",{});var zW=s(tf);ATr=r(zW,`Note:
Loading a model from its configuration file does `),Xbe=n(zW,"STRONG",{});var I1t=s(Xbe);LTr=r(I1t,"not"),I1t.forEach(t),BTr=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vbe=n(zW,"CODE",{});var j1t=s(Vbe);xTr=r(j1t,"from_pretrained()"),j1t.forEach(t),kTr=r(zW,"to load the model weights."),zW.forEach(t),RTr=i(hi),zbe=n(hi,"P",{});var D1t=s(zbe);STr=r(D1t,"Examples:"),D1t.forEach(t),PTr=i(hi),m(C6.$$.fragment,hi),hi.forEach(t),$Tr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(M6.$$.fragment,Ba),ITr=i(Ba),Wbe=n(Ba,"P",{});var N1t=s(Wbe);jTr=r(N1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),N1t.forEach(t),DTr=i(Ba),xn=n(Ba,"P",{});var $M=s(xn);NTr=r($M,"The model class to instantiate is selected based on the "),Qbe=n($M,"CODE",{});var q1t=s(Qbe);qTr=r(q1t,"model_type"),q1t.forEach(t),OTr=r($M,` property of the config object (either
passed as an argument or loaded from `),Hbe=n($M,"CODE",{});var O1t=s(Hbe);GTr=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),XTr=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n($M,"CODE",{});var G1t=s(Ube);VTr=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),zTr=r($M,":"),$M.forEach(t),WTr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);p9=n(pi,"LI",{});var P8e=s(p9);Jbe=n(P8e,"STRONG",{});var X1t=s(Jbe);QTr=r(X1t,"bart"),X1t.forEach(t),HTr=r(P8e," \u2014 "),KX=n(P8e,"A",{href:!0});var V1t=s(KX);UTr=r(V1t,"FlaxBartForCausalLM"),V1t.forEach(t),JTr=r(P8e," (BART model)"),P8e.forEach(t),YTr=i(pi),_9=n(pi,"LI",{});var $8e=s(_9);Ybe=n($8e,"STRONG",{});var z1t=s(Ybe);KTr=r(z1t,"gpt2"),z1t.forEach(t),ZTr=r($8e," \u2014 "),ZX=n($8e,"A",{href:!0});var W1t=s(ZX);e7r=r(W1t,"FlaxGPT2LMHeadModel"),W1t.forEach(t),o7r=r($8e," (OpenAI GPT-2 model)"),$8e.forEach(t),r7r=i(pi),u9=n(pi,"LI",{});var I8e=s(u9);Kbe=n(I8e,"STRONG",{});var Q1t=s(Kbe);t7r=r(Q1t,"gpt_neo"),Q1t.forEach(t),a7r=r(I8e," \u2014 "),eV=n(I8e,"A",{href:!0});var H1t=s(eV);n7r=r(H1t,"FlaxGPTNeoForCausalLM"),H1t.forEach(t),s7r=r(I8e," (GPT Neo model)"),I8e.forEach(t),l7r=i(pi),b9=n(pi,"LI",{});var j8e=s(b9);Zbe=n(j8e,"STRONG",{});var U1t=s(Zbe);i7r=r(U1t,"gptj"),U1t.forEach(t),d7r=r(j8e," \u2014 "),oV=n(j8e,"A",{href:!0});var J1t=s(oV);c7r=r(J1t,"FlaxGPTJForCausalLM"),J1t.forEach(t),f7r=r(j8e," (GPT-J model)"),j8e.forEach(t),m7r=i(pi),v9=n(pi,"LI",{});var D8e=s(v9);e5e=n(D8e,"STRONG",{});var Y1t=s(e5e);g7r=r(Y1t,"xglm"),Y1t.forEach(t),h7r=r(D8e," \u2014 "),rV=n(D8e,"A",{href:!0});var K1t=s(rV);p7r=r(K1t,"FlaxXGLMForCausalLM"),K1t.forEach(t),_7r=r(D8e," (XGLM model)"),D8e.forEach(t),pi.forEach(t),u7r=i(Ba),o5e=n(Ba,"P",{});var Z1t=s(o5e);b7r=r(Z1t,"Examples:"),Z1t.forEach(t),v7r=i(Ba),m(E6.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),jke=i(d),af=n(d,"H2",{class:!0});var USe=s(af);T9=n(USe,"A",{id:!0,class:!0,href:!0});var ebt=s(T9);r5e=n(ebt,"SPAN",{});var obt=s(r5e);m(y6.$$.fragment,obt),obt.forEach(t),ebt.forEach(t),T7r=i(USe),t5e=n(USe,"SPAN",{});var rbt=s(t5e);F7r=r(rbt,"FlaxAutoModelForPreTraining"),rbt.forEach(t),USe.forEach(t),Dke=i(d),Pr=n(d,"DIV",{class:!0});var _i=s(Pr);m(w6.$$.fragment,_i),C7r=i(_i),nf=n(_i,"P",{});var WW=s(nf);M7r=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),a5e=n(WW,"CODE",{});var tbt=s(a5e);E7r=r(tbt,"from_pretrained()"),tbt.forEach(t),y7r=r(WW,"class method or the "),n5e=n(WW,"CODE",{});var abt=s(n5e);w7r=r(abt,"from_config()"),abt.forEach(t),A7r=r(WW,`class
method.`),WW.forEach(t),L7r=i(_i),A6=n(_i,"P",{});var JSe=s(A6);B7r=r(JSe,"This class cannot be instantiated directly using "),s5e=n(JSe,"CODE",{});var nbt=s(s5e);x7r=r(nbt,"__init__()"),nbt.forEach(t),k7r=r(JSe," (throws an error)."),JSe.forEach(t),R7r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(L6.$$.fragment,ui),S7r=i(ui),l5e=n(ui,"P",{});var sbt=s(l5e);P7r=r(sbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sbt.forEach(t),$7r=i(ui),sf=n(ui,"P",{});var QW=s(sf);I7r=r(QW,`Note:
Loading a model from its configuration file does `),i5e=n(QW,"STRONG",{});var lbt=s(i5e);j7r=r(lbt,"not"),lbt.forEach(t),D7r=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),d5e=n(QW,"CODE",{});var ibt=s(d5e);N7r=r(ibt,"from_pretrained()"),ibt.forEach(t),q7r=r(QW,"to load the model weights."),QW.forEach(t),O7r=i(ui),c5e=n(ui,"P",{});var dbt=s(c5e);G7r=r(dbt,"Examples:"),dbt.forEach(t),X7r=i(ui),m(B6.$$.fragment,ui),ui.forEach(t),V7r=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(x6.$$.fragment,xa),z7r=i(xa),f5e=n(xa,"P",{});var cbt=s(f5e);W7r=r(cbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cbt.forEach(t),Q7r=i(xa),kn=n(xa,"P",{});var IM=s(kn);H7r=r(IM,"The model class to instantiate is selected based on the "),m5e=n(IM,"CODE",{});var fbt=s(m5e);U7r=r(fbt,"model_type"),fbt.forEach(t),J7r=r(IM,` property of the config object (either
passed as an argument or loaded from `),g5e=n(IM,"CODE",{});var mbt=s(g5e);Y7r=r(mbt,"pretrained_model_name_or_path"),mbt.forEach(t),K7r=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(IM,"CODE",{});var gbt=s(h5e);Z7r=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),eFr=r(IM,":"),IM.forEach(t),oFr=i(xa),ce=n(xa,"UL",{});var me=s(ce);F9=n(me,"LI",{});var N8e=s(F9);p5e=n(N8e,"STRONG",{});var hbt=s(p5e);rFr=r(hbt,"albert"),hbt.forEach(t),tFr=r(N8e," \u2014 "),tV=n(N8e,"A",{href:!0});var pbt=s(tV);aFr=r(pbt,"FlaxAlbertForPreTraining"),pbt.forEach(t),nFr=r(N8e," (ALBERT model)"),N8e.forEach(t),sFr=i(me),C9=n(me,"LI",{});var q8e=s(C9);_5e=n(q8e,"STRONG",{});var _bt=s(_5e);lFr=r(_bt,"bart"),_bt.forEach(t),iFr=r(q8e," \u2014 "),aV=n(q8e,"A",{href:!0});var ubt=s(aV);dFr=r(ubt,"FlaxBartForConditionalGeneration"),ubt.forEach(t),cFr=r(q8e," (BART model)"),q8e.forEach(t),fFr=i(me),M9=n(me,"LI",{});var O8e=s(M9);u5e=n(O8e,"STRONG",{});var bbt=s(u5e);mFr=r(bbt,"bert"),bbt.forEach(t),gFr=r(O8e," \u2014 "),nV=n(O8e,"A",{href:!0});var vbt=s(nV);hFr=r(vbt,"FlaxBertForPreTraining"),vbt.forEach(t),pFr=r(O8e," (BERT model)"),O8e.forEach(t),_Fr=i(me),E9=n(me,"LI",{});var G8e=s(E9);b5e=n(G8e,"STRONG",{});var Tbt=s(b5e);uFr=r(Tbt,"big_bird"),Tbt.forEach(t),bFr=r(G8e," \u2014 "),sV=n(G8e,"A",{href:!0});var Fbt=s(sV);vFr=r(Fbt,"FlaxBigBirdForPreTraining"),Fbt.forEach(t),TFr=r(G8e," (BigBird model)"),G8e.forEach(t),FFr=i(me),y9=n(me,"LI",{});var X8e=s(y9);v5e=n(X8e,"STRONG",{});var Cbt=s(v5e);CFr=r(Cbt,"electra"),Cbt.forEach(t),MFr=r(X8e," \u2014 "),lV=n(X8e,"A",{href:!0});var Mbt=s(lV);EFr=r(Mbt,"FlaxElectraForPreTraining"),Mbt.forEach(t),yFr=r(X8e," (ELECTRA model)"),X8e.forEach(t),wFr=i(me),w9=n(me,"LI",{});var V8e=s(w9);T5e=n(V8e,"STRONG",{});var Ebt=s(T5e);AFr=r(Ebt,"mbart"),Ebt.forEach(t),LFr=r(V8e," \u2014 "),iV=n(V8e,"A",{href:!0});var ybt=s(iV);BFr=r(ybt,"FlaxMBartForConditionalGeneration"),ybt.forEach(t),xFr=r(V8e," (mBART model)"),V8e.forEach(t),kFr=i(me),A9=n(me,"LI",{});var z8e=s(A9);F5e=n(z8e,"STRONG",{});var wbt=s(F5e);RFr=r(wbt,"mt5"),wbt.forEach(t),SFr=r(z8e," \u2014 "),dV=n(z8e,"A",{href:!0});var Abt=s(dV);PFr=r(Abt,"FlaxMT5ForConditionalGeneration"),Abt.forEach(t),$Fr=r(z8e," (mT5 model)"),z8e.forEach(t),IFr=i(me),L9=n(me,"LI",{});var W8e=s(L9);C5e=n(W8e,"STRONG",{});var Lbt=s(C5e);jFr=r(Lbt,"roberta"),Lbt.forEach(t),DFr=r(W8e," \u2014 "),cV=n(W8e,"A",{href:!0});var Bbt=s(cV);NFr=r(Bbt,"FlaxRobertaForMaskedLM"),Bbt.forEach(t),qFr=r(W8e," (RoBERTa model)"),W8e.forEach(t),OFr=i(me),B9=n(me,"LI",{});var Q8e=s(B9);M5e=n(Q8e,"STRONG",{});var xbt=s(M5e);GFr=r(xbt,"roformer"),xbt.forEach(t),XFr=r(Q8e," \u2014 "),fV=n(Q8e,"A",{href:!0});var kbt=s(fV);VFr=r(kbt,"FlaxRoFormerForMaskedLM"),kbt.forEach(t),zFr=r(Q8e," (RoFormer model)"),Q8e.forEach(t),WFr=i(me),x9=n(me,"LI",{});var H8e=s(x9);E5e=n(H8e,"STRONG",{});var Rbt=s(E5e);QFr=r(Rbt,"t5"),Rbt.forEach(t),HFr=r(H8e," \u2014 "),mV=n(H8e,"A",{href:!0});var Sbt=s(mV);UFr=r(Sbt,"FlaxT5ForConditionalGeneration"),Sbt.forEach(t),JFr=r(H8e," (T5 model)"),H8e.forEach(t),YFr=i(me),k9=n(me,"LI",{});var U8e=s(k9);y5e=n(U8e,"STRONG",{});var Pbt=s(y5e);KFr=r(Pbt,"wav2vec2"),Pbt.forEach(t),ZFr=r(U8e," \u2014 "),gV=n(U8e,"A",{href:!0});var $bt=s(gV);e9r=r($bt,"FlaxWav2Vec2ForPreTraining"),$bt.forEach(t),o9r=r(U8e," (Wav2Vec2 model)"),U8e.forEach(t),r9r=i(me),R9=n(me,"LI",{});var J8e=s(R9);w5e=n(J8e,"STRONG",{});var Ibt=s(w5e);t9r=r(Ibt,"xlm-roberta"),Ibt.forEach(t),a9r=r(J8e," \u2014 "),hV=n(J8e,"A",{href:!0});var jbt=s(hV);n9r=r(jbt,"FlaxXLMRobertaForMaskedLM"),jbt.forEach(t),s9r=r(J8e," (XLM-RoBERTa model)"),J8e.forEach(t),me.forEach(t),l9r=i(xa),A5e=n(xa,"P",{});var Dbt=s(A5e);i9r=r(Dbt,"Examples:"),Dbt.forEach(t),d9r=i(xa),m(k6.$$.fragment,xa),xa.forEach(t),_i.forEach(t),Nke=i(d),lf=n(d,"H2",{class:!0});var YSe=s(lf);S9=n(YSe,"A",{id:!0,class:!0,href:!0});var Nbt=s(S9);L5e=n(Nbt,"SPAN",{});var qbt=s(L5e);m(R6.$$.fragment,qbt),qbt.forEach(t),Nbt.forEach(t),c9r=i(YSe),B5e=n(YSe,"SPAN",{});var Obt=s(B5e);f9r=r(Obt,"FlaxAutoModelForMaskedLM"),Obt.forEach(t),YSe.forEach(t),qke=i(d),$r=n(d,"DIV",{class:!0});var bi=s($r);m(S6.$$.fragment,bi),m9r=i(bi),df=n(bi,"P",{});var HW=s(df);g9r=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),x5e=n(HW,"CODE",{});var Gbt=s(x5e);h9r=r(Gbt,"from_pretrained()"),Gbt.forEach(t),p9r=r(HW,"class method or the "),k5e=n(HW,"CODE",{});var Xbt=s(k5e);_9r=r(Xbt,"from_config()"),Xbt.forEach(t),u9r=r(HW,`class
method.`),HW.forEach(t),b9r=i(bi),P6=n(bi,"P",{});var KSe=s(P6);v9r=r(KSe,"This class cannot be instantiated directly using "),R5e=n(KSe,"CODE",{});var Vbt=s(R5e);T9r=r(Vbt,"__init__()"),Vbt.forEach(t),F9r=r(KSe," (throws an error)."),KSe.forEach(t),C9r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m($6.$$.fragment,vi),M9r=i(vi),S5e=n(vi,"P",{});var zbt=s(S5e);E9r=r(zbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zbt.forEach(t),y9r=i(vi),cf=n(vi,"P",{});var UW=s(cf);w9r=r(UW,`Note:
Loading a model from its configuration file does `),P5e=n(UW,"STRONG",{});var Wbt=s(P5e);A9r=r(Wbt,"not"),Wbt.forEach(t),L9r=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$5e=n(UW,"CODE",{});var Qbt=s($5e);B9r=r(Qbt,"from_pretrained()"),Qbt.forEach(t),x9r=r(UW,"to load the model weights."),UW.forEach(t),k9r=i(vi),I5e=n(vi,"P",{});var Hbt=s(I5e);R9r=r(Hbt,"Examples:"),Hbt.forEach(t),S9r=i(vi),m(I6.$$.fragment,vi),vi.forEach(t),P9r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(j6.$$.fragment,ka),$9r=i(ka),j5e=n(ka,"P",{});var Ubt=s(j5e);I9r=r(Ubt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ubt.forEach(t),j9r=i(ka),Rn=n(ka,"P",{});var jM=s(Rn);D9r=r(jM,"The model class to instantiate is selected based on the "),D5e=n(jM,"CODE",{});var Jbt=s(D5e);N9r=r(Jbt,"model_type"),Jbt.forEach(t),q9r=r(jM,` property of the config object (either
passed as an argument or loaded from `),N5e=n(jM,"CODE",{});var Ybt=s(N5e);O9r=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),G9r=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=n(jM,"CODE",{});var Kbt=s(q5e);X9r=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),V9r=r(jM,":"),jM.forEach(t),z9r=i(ka),ue=n(ka,"UL",{});var ye=s(ue);P9=n(ye,"LI",{});var Y8e=s(P9);O5e=n(Y8e,"STRONG",{});var Zbt=s(O5e);W9r=r(Zbt,"albert"),Zbt.forEach(t),Q9r=r(Y8e," \u2014 "),pV=n(Y8e,"A",{href:!0});var e5t=s(pV);H9r=r(e5t,"FlaxAlbertForMaskedLM"),e5t.forEach(t),U9r=r(Y8e," (ALBERT model)"),Y8e.forEach(t),J9r=i(ye),$9=n(ye,"LI",{});var K8e=s($9);G5e=n(K8e,"STRONG",{});var o5t=s(G5e);Y9r=r(o5t,"bart"),o5t.forEach(t),K9r=r(K8e," \u2014 "),_V=n(K8e,"A",{href:!0});var r5t=s(_V);Z9r=r(r5t,"FlaxBartForConditionalGeneration"),r5t.forEach(t),eCr=r(K8e," (BART model)"),K8e.forEach(t),oCr=i(ye),I9=n(ye,"LI",{});var Z8e=s(I9);X5e=n(Z8e,"STRONG",{});var t5t=s(X5e);rCr=r(t5t,"bert"),t5t.forEach(t),tCr=r(Z8e," \u2014 "),uV=n(Z8e,"A",{href:!0});var a5t=s(uV);aCr=r(a5t,"FlaxBertForMaskedLM"),a5t.forEach(t),nCr=r(Z8e," (BERT model)"),Z8e.forEach(t),sCr=i(ye),j9=n(ye,"LI",{});var eBe=s(j9);V5e=n(eBe,"STRONG",{});var n5t=s(V5e);lCr=r(n5t,"big_bird"),n5t.forEach(t),iCr=r(eBe," \u2014 "),bV=n(eBe,"A",{href:!0});var s5t=s(bV);dCr=r(s5t,"FlaxBigBirdForMaskedLM"),s5t.forEach(t),cCr=r(eBe," (BigBird model)"),eBe.forEach(t),fCr=i(ye),D9=n(ye,"LI",{});var oBe=s(D9);z5e=n(oBe,"STRONG",{});var l5t=s(z5e);mCr=r(l5t,"distilbert"),l5t.forEach(t),gCr=r(oBe," \u2014 "),vV=n(oBe,"A",{href:!0});var i5t=s(vV);hCr=r(i5t,"FlaxDistilBertForMaskedLM"),i5t.forEach(t),pCr=r(oBe," (DistilBERT model)"),oBe.forEach(t),_Cr=i(ye),N9=n(ye,"LI",{});var rBe=s(N9);W5e=n(rBe,"STRONG",{});var d5t=s(W5e);uCr=r(d5t,"electra"),d5t.forEach(t),bCr=r(rBe," \u2014 "),TV=n(rBe,"A",{href:!0});var c5t=s(TV);vCr=r(c5t,"FlaxElectraForMaskedLM"),c5t.forEach(t),TCr=r(rBe," (ELECTRA model)"),rBe.forEach(t),FCr=i(ye),q9=n(ye,"LI",{});var tBe=s(q9);Q5e=n(tBe,"STRONG",{});var f5t=s(Q5e);CCr=r(f5t,"mbart"),f5t.forEach(t),MCr=r(tBe," \u2014 "),FV=n(tBe,"A",{href:!0});var m5t=s(FV);ECr=r(m5t,"FlaxMBartForConditionalGeneration"),m5t.forEach(t),yCr=r(tBe," (mBART model)"),tBe.forEach(t),wCr=i(ye),O9=n(ye,"LI",{});var aBe=s(O9);H5e=n(aBe,"STRONG",{});var g5t=s(H5e);ACr=r(g5t,"roberta"),g5t.forEach(t),LCr=r(aBe," \u2014 "),CV=n(aBe,"A",{href:!0});var h5t=s(CV);BCr=r(h5t,"FlaxRobertaForMaskedLM"),h5t.forEach(t),xCr=r(aBe," (RoBERTa model)"),aBe.forEach(t),kCr=i(ye),G9=n(ye,"LI",{});var nBe=s(G9);U5e=n(nBe,"STRONG",{});var p5t=s(U5e);RCr=r(p5t,"roformer"),p5t.forEach(t),SCr=r(nBe," \u2014 "),MV=n(nBe,"A",{href:!0});var _5t=s(MV);PCr=r(_5t,"FlaxRoFormerForMaskedLM"),_5t.forEach(t),$Cr=r(nBe," (RoFormer model)"),nBe.forEach(t),ICr=i(ye),X9=n(ye,"LI",{});var sBe=s(X9);J5e=n(sBe,"STRONG",{});var u5t=s(J5e);jCr=r(u5t,"xlm-roberta"),u5t.forEach(t),DCr=r(sBe," \u2014 "),EV=n(sBe,"A",{href:!0});var b5t=s(EV);NCr=r(b5t,"FlaxXLMRobertaForMaskedLM"),b5t.forEach(t),qCr=r(sBe," (XLM-RoBERTa model)"),sBe.forEach(t),ye.forEach(t),OCr=i(ka),Y5e=n(ka,"P",{});var v5t=s(Y5e);GCr=r(v5t,"Examples:"),v5t.forEach(t),XCr=i(ka),m(D6.$$.fragment,ka),ka.forEach(t),bi.forEach(t),Oke=i(d),ff=n(d,"H2",{class:!0});var ZSe=s(ff);V9=n(ZSe,"A",{id:!0,class:!0,href:!0});var T5t=s(V9);K5e=n(T5t,"SPAN",{});var F5t=s(K5e);m(N6.$$.fragment,F5t),F5t.forEach(t),T5t.forEach(t),VCr=i(ZSe),Z5e=n(ZSe,"SPAN",{});var C5t=s(Z5e);zCr=r(C5t,"FlaxAutoModelForSeq2SeqLM"),C5t.forEach(t),ZSe.forEach(t),Gke=i(d),Ir=n(d,"DIV",{class:!0});var Ti=s(Ir);m(q6.$$.fragment,Ti),WCr=i(Ti),mf=n(Ti,"P",{});var JW=s(mf);QCr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),e2e=n(JW,"CODE",{});var M5t=s(e2e);HCr=r(M5t,"from_pretrained()"),M5t.forEach(t),UCr=r(JW,"class method or the "),o2e=n(JW,"CODE",{});var E5t=s(o2e);JCr=r(E5t,"from_config()"),E5t.forEach(t),YCr=r(JW,`class
method.`),JW.forEach(t),KCr=i(Ti),O6=n(Ti,"P",{});var ePe=s(O6);ZCr=r(ePe,"This class cannot be instantiated directly using "),r2e=n(ePe,"CODE",{});var y5t=s(r2e);eMr=r(y5t,"__init__()"),y5t.forEach(t),oMr=r(ePe," (throws an error)."),ePe.forEach(t),rMr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(G6.$$.fragment,Fi),tMr=i(Fi),t2e=n(Fi,"P",{});var w5t=s(t2e);aMr=r(w5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w5t.forEach(t),nMr=i(Fi),gf=n(Fi,"P",{});var YW=s(gf);sMr=r(YW,`Note:
Loading a model from its configuration file does `),a2e=n(YW,"STRONG",{});var A5t=s(a2e);lMr=r(A5t,"not"),A5t.forEach(t),iMr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),n2e=n(YW,"CODE",{});var L5t=s(n2e);dMr=r(L5t,"from_pretrained()"),L5t.forEach(t),cMr=r(YW,"to load the model weights."),YW.forEach(t),fMr=i(Fi),s2e=n(Fi,"P",{});var B5t=s(s2e);mMr=r(B5t,"Examples:"),B5t.forEach(t),gMr=i(Fi),m(X6.$$.fragment,Fi),Fi.forEach(t),hMr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(V6.$$.fragment,Ra),pMr=i(Ra),l2e=n(Ra,"P",{});var x5t=s(l2e);_Mr=r(x5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),x5t.forEach(t),uMr=i(Ra),Sn=n(Ra,"P",{});var DM=s(Sn);bMr=r(DM,"The model class to instantiate is selected based on the "),i2e=n(DM,"CODE",{});var k5t=s(i2e);vMr=r(k5t,"model_type"),k5t.forEach(t),TMr=r(DM,` property of the config object (either
passed as an argument or loaded from `),d2e=n(DM,"CODE",{});var R5t=s(d2e);FMr=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),CMr=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(DM,"CODE",{});var S5t=s(c2e);MMr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),EMr=r(DM,":"),DM.forEach(t),yMr=i(Ra),Ce=n(Ra,"UL",{});var lo=s(Ce);z9=n(lo,"LI",{});var lBe=s(z9);f2e=n(lBe,"STRONG",{});var P5t=s(f2e);wMr=r(P5t,"bart"),P5t.forEach(t),AMr=r(lBe," \u2014 "),yV=n(lBe,"A",{href:!0});var $5t=s(yV);LMr=r($5t,"FlaxBartForConditionalGeneration"),$5t.forEach(t),BMr=r(lBe," (BART model)"),lBe.forEach(t),xMr=i(lo),W9=n(lo,"LI",{});var iBe=s(W9);m2e=n(iBe,"STRONG",{});var I5t=s(m2e);kMr=r(I5t,"blenderbot"),I5t.forEach(t),RMr=r(iBe," \u2014 "),wV=n(iBe,"A",{href:!0});var j5t=s(wV);SMr=r(j5t,"FlaxBlenderbotForConditionalGeneration"),j5t.forEach(t),PMr=r(iBe," (Blenderbot model)"),iBe.forEach(t),$Mr=i(lo),Q9=n(lo,"LI",{});var dBe=s(Q9);g2e=n(dBe,"STRONG",{});var D5t=s(g2e);IMr=r(D5t,"blenderbot-small"),D5t.forEach(t),jMr=r(dBe," \u2014 "),AV=n(dBe,"A",{href:!0});var N5t=s(AV);DMr=r(N5t,"FlaxBlenderbotSmallForConditionalGeneration"),N5t.forEach(t),NMr=r(dBe," (BlenderbotSmall model)"),dBe.forEach(t),qMr=i(lo),H9=n(lo,"LI",{});var cBe=s(H9);h2e=n(cBe,"STRONG",{});var q5t=s(h2e);OMr=r(q5t,"encoder-decoder"),q5t.forEach(t),GMr=r(cBe," \u2014 "),LV=n(cBe,"A",{href:!0});var O5t=s(LV);XMr=r(O5t,"FlaxEncoderDecoderModel"),O5t.forEach(t),VMr=r(cBe," (Encoder decoder model)"),cBe.forEach(t),zMr=i(lo),U9=n(lo,"LI",{});var fBe=s(U9);p2e=n(fBe,"STRONG",{});var G5t=s(p2e);WMr=r(G5t,"marian"),G5t.forEach(t),QMr=r(fBe," \u2014 "),BV=n(fBe,"A",{href:!0});var X5t=s(BV);HMr=r(X5t,"FlaxMarianMTModel"),X5t.forEach(t),UMr=r(fBe," (Marian model)"),fBe.forEach(t),JMr=i(lo),J9=n(lo,"LI",{});var mBe=s(J9);_2e=n(mBe,"STRONG",{});var V5t=s(_2e);YMr=r(V5t,"mbart"),V5t.forEach(t),KMr=r(mBe," \u2014 "),xV=n(mBe,"A",{href:!0});var z5t=s(xV);ZMr=r(z5t,"FlaxMBartForConditionalGeneration"),z5t.forEach(t),e4r=r(mBe," (mBART model)"),mBe.forEach(t),o4r=i(lo),Y9=n(lo,"LI",{});var gBe=s(Y9);u2e=n(gBe,"STRONG",{});var W5t=s(u2e);r4r=r(W5t,"mt5"),W5t.forEach(t),t4r=r(gBe," \u2014 "),kV=n(gBe,"A",{href:!0});var Q5t=s(kV);a4r=r(Q5t,"FlaxMT5ForConditionalGeneration"),Q5t.forEach(t),n4r=r(gBe," (mT5 model)"),gBe.forEach(t),s4r=i(lo),K9=n(lo,"LI",{});var hBe=s(K9);b2e=n(hBe,"STRONG",{});var H5t=s(b2e);l4r=r(H5t,"pegasus"),H5t.forEach(t),i4r=r(hBe," \u2014 "),RV=n(hBe,"A",{href:!0});var U5t=s(RV);d4r=r(U5t,"FlaxPegasusForConditionalGeneration"),U5t.forEach(t),c4r=r(hBe," (Pegasus model)"),hBe.forEach(t),f4r=i(lo),Z9=n(lo,"LI",{});var pBe=s(Z9);v2e=n(pBe,"STRONG",{});var J5t=s(v2e);m4r=r(J5t,"t5"),J5t.forEach(t),g4r=r(pBe," \u2014 "),SV=n(pBe,"A",{href:!0});var Y5t=s(SV);h4r=r(Y5t,"FlaxT5ForConditionalGeneration"),Y5t.forEach(t),p4r=r(pBe," (T5 model)"),pBe.forEach(t),lo.forEach(t),_4r=i(Ra),T2e=n(Ra,"P",{});var K5t=s(T2e);u4r=r(K5t,"Examples:"),K5t.forEach(t),b4r=i(Ra),m(z6.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),Xke=i(d),hf=n(d,"H2",{class:!0});var oPe=s(hf);eC=n(oPe,"A",{id:!0,class:!0,href:!0});var Z5t=s(eC);F2e=n(Z5t,"SPAN",{});var e2t=s(F2e);m(W6.$$.fragment,e2t),e2t.forEach(t),Z5t.forEach(t),v4r=i(oPe),C2e=n(oPe,"SPAN",{});var o2t=s(C2e);T4r=r(o2t,"FlaxAutoModelForSequenceClassification"),o2t.forEach(t),oPe.forEach(t),Vke=i(d),jr=n(d,"DIV",{class:!0});var Ci=s(jr);m(Q6.$$.fragment,Ci),F4r=i(Ci),pf=n(Ci,"P",{});var KW=s(pf);C4r=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),M2e=n(KW,"CODE",{});var r2t=s(M2e);M4r=r(r2t,"from_pretrained()"),r2t.forEach(t),E4r=r(KW,"class method or the "),E2e=n(KW,"CODE",{});var t2t=s(E2e);y4r=r(t2t,"from_config()"),t2t.forEach(t),w4r=r(KW,`class
method.`),KW.forEach(t),A4r=i(Ci),H6=n(Ci,"P",{});var rPe=s(H6);L4r=r(rPe,"This class cannot be instantiated directly using "),y2e=n(rPe,"CODE",{});var a2t=s(y2e);B4r=r(a2t,"__init__()"),a2t.forEach(t),x4r=r(rPe," (throws an error)."),rPe.forEach(t),k4r=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(U6.$$.fragment,Mi),R4r=i(Mi),w2e=n(Mi,"P",{});var n2t=s(w2e);S4r=r(n2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),n2t.forEach(t),P4r=i(Mi),_f=n(Mi,"P",{});var ZW=s(_f);$4r=r(ZW,`Note:
Loading a model from its configuration file does `),A2e=n(ZW,"STRONG",{});var s2t=s(A2e);I4r=r(s2t,"not"),s2t.forEach(t),j4r=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),L2e=n(ZW,"CODE",{});var l2t=s(L2e);D4r=r(l2t,"from_pretrained()"),l2t.forEach(t),N4r=r(ZW,"to load the model weights."),ZW.forEach(t),q4r=i(Mi),B2e=n(Mi,"P",{});var i2t=s(B2e);O4r=r(i2t,"Examples:"),i2t.forEach(t),G4r=i(Mi),m(J6.$$.fragment,Mi),Mi.forEach(t),X4r=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(Y6.$$.fragment,Sa),V4r=i(Sa),x2e=n(Sa,"P",{});var d2t=s(x2e);z4r=r(d2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d2t.forEach(t),W4r=i(Sa),Pn=n(Sa,"P",{});var NM=s(Pn);Q4r=r(NM,"The model class to instantiate is selected based on the "),k2e=n(NM,"CODE",{});var c2t=s(k2e);H4r=r(c2t,"model_type"),c2t.forEach(t),U4r=r(NM,` property of the config object (either
passed as an argument or loaded from `),R2e=n(NM,"CODE",{});var f2t=s(R2e);J4r=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),Y4r=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=n(NM,"CODE",{});var m2t=s(S2e);K4r=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),Z4r=r(NM,":"),NM.forEach(t),eEr=i(Sa),be=n(Sa,"UL",{});var we=s(be);oC=n(we,"LI",{});var _Be=s(oC);P2e=n(_Be,"STRONG",{});var g2t=s(P2e);oEr=r(g2t,"albert"),g2t.forEach(t),rEr=r(_Be," \u2014 "),PV=n(_Be,"A",{href:!0});var h2t=s(PV);tEr=r(h2t,"FlaxAlbertForSequenceClassification"),h2t.forEach(t),aEr=r(_Be," (ALBERT model)"),_Be.forEach(t),nEr=i(we),rC=n(we,"LI",{});var uBe=s(rC);$2e=n(uBe,"STRONG",{});var p2t=s($2e);sEr=r(p2t,"bart"),p2t.forEach(t),lEr=r(uBe," \u2014 "),$V=n(uBe,"A",{href:!0});var _2t=s($V);iEr=r(_2t,"FlaxBartForSequenceClassification"),_2t.forEach(t),dEr=r(uBe," (BART model)"),uBe.forEach(t),cEr=i(we),tC=n(we,"LI",{});var bBe=s(tC);I2e=n(bBe,"STRONG",{});var u2t=s(I2e);fEr=r(u2t,"bert"),u2t.forEach(t),mEr=r(bBe," \u2014 "),IV=n(bBe,"A",{href:!0});var b2t=s(IV);gEr=r(b2t,"FlaxBertForSequenceClassification"),b2t.forEach(t),hEr=r(bBe," (BERT model)"),bBe.forEach(t),pEr=i(we),aC=n(we,"LI",{});var vBe=s(aC);j2e=n(vBe,"STRONG",{});var v2t=s(j2e);_Er=r(v2t,"big_bird"),v2t.forEach(t),uEr=r(vBe," \u2014 "),jV=n(vBe,"A",{href:!0});var T2t=s(jV);bEr=r(T2t,"FlaxBigBirdForSequenceClassification"),T2t.forEach(t),vEr=r(vBe," (BigBird model)"),vBe.forEach(t),TEr=i(we),nC=n(we,"LI",{});var TBe=s(nC);D2e=n(TBe,"STRONG",{});var F2t=s(D2e);FEr=r(F2t,"distilbert"),F2t.forEach(t),CEr=r(TBe," \u2014 "),DV=n(TBe,"A",{href:!0});var C2t=s(DV);MEr=r(C2t,"FlaxDistilBertForSequenceClassification"),C2t.forEach(t),EEr=r(TBe," (DistilBERT model)"),TBe.forEach(t),yEr=i(we),sC=n(we,"LI",{});var FBe=s(sC);N2e=n(FBe,"STRONG",{});var M2t=s(N2e);wEr=r(M2t,"electra"),M2t.forEach(t),AEr=r(FBe," \u2014 "),NV=n(FBe,"A",{href:!0});var E2t=s(NV);LEr=r(E2t,"FlaxElectraForSequenceClassification"),E2t.forEach(t),BEr=r(FBe," (ELECTRA model)"),FBe.forEach(t),xEr=i(we),lC=n(we,"LI",{});var CBe=s(lC);q2e=n(CBe,"STRONG",{});var y2t=s(q2e);kEr=r(y2t,"mbart"),y2t.forEach(t),REr=r(CBe," \u2014 "),qV=n(CBe,"A",{href:!0});var w2t=s(qV);SEr=r(w2t,"FlaxMBartForSequenceClassification"),w2t.forEach(t),PEr=r(CBe," (mBART model)"),CBe.forEach(t),$Er=i(we),iC=n(we,"LI",{});var MBe=s(iC);O2e=n(MBe,"STRONG",{});var A2t=s(O2e);IEr=r(A2t,"roberta"),A2t.forEach(t),jEr=r(MBe," \u2014 "),OV=n(MBe,"A",{href:!0});var L2t=s(OV);DEr=r(L2t,"FlaxRobertaForSequenceClassification"),L2t.forEach(t),NEr=r(MBe," (RoBERTa model)"),MBe.forEach(t),qEr=i(we),dC=n(we,"LI",{});var EBe=s(dC);G2e=n(EBe,"STRONG",{});var B2t=s(G2e);OEr=r(B2t,"roformer"),B2t.forEach(t),GEr=r(EBe," \u2014 "),GV=n(EBe,"A",{href:!0});var x2t=s(GV);XEr=r(x2t,"FlaxRoFormerForSequenceClassification"),x2t.forEach(t),VEr=r(EBe," (RoFormer model)"),EBe.forEach(t),zEr=i(we),cC=n(we,"LI",{});var yBe=s(cC);X2e=n(yBe,"STRONG",{});var k2t=s(X2e);WEr=r(k2t,"xlm-roberta"),k2t.forEach(t),QEr=r(yBe," \u2014 "),XV=n(yBe,"A",{href:!0});var R2t=s(XV);HEr=r(R2t,"FlaxXLMRobertaForSequenceClassification"),R2t.forEach(t),UEr=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),we.forEach(t),JEr=i(Sa),V2e=n(Sa,"P",{});var S2t=s(V2e);YEr=r(S2t,"Examples:"),S2t.forEach(t),KEr=i(Sa),m(K6.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),zke=i(d),uf=n(d,"H2",{class:!0});var tPe=s(uf);fC=n(tPe,"A",{id:!0,class:!0,href:!0});var P2t=s(fC);z2e=n(P2t,"SPAN",{});var $2t=s(z2e);m(Z6.$$.fragment,$2t),$2t.forEach(t),P2t.forEach(t),ZEr=i(tPe),W2e=n(tPe,"SPAN",{});var I2t=s(W2e);e3r=r(I2t,"FlaxAutoModelForQuestionAnswering"),I2t.forEach(t),tPe.forEach(t),Wke=i(d),Dr=n(d,"DIV",{class:!0});var Ei=s(Dr);m(eA.$$.fragment,Ei),o3r=i(Ei),bf=n(Ei,"P",{});var eQ=s(bf);r3r=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Q2e=n(eQ,"CODE",{});var j2t=s(Q2e);t3r=r(j2t,"from_pretrained()"),j2t.forEach(t),a3r=r(eQ,"class method or the "),H2e=n(eQ,"CODE",{});var D2t=s(H2e);n3r=r(D2t,"from_config()"),D2t.forEach(t),s3r=r(eQ,`class
method.`),eQ.forEach(t),l3r=i(Ei),oA=n(Ei,"P",{});var aPe=s(oA);i3r=r(aPe,"This class cannot be instantiated directly using "),U2e=n(aPe,"CODE",{});var N2t=s(U2e);d3r=r(N2t,"__init__()"),N2t.forEach(t),c3r=r(aPe," (throws an error)."),aPe.forEach(t),f3r=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(rA.$$.fragment,yi),m3r=i(yi),J2e=n(yi,"P",{});var q2t=s(J2e);g3r=r(q2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q2t.forEach(t),h3r=i(yi),vf=n(yi,"P",{});var oQ=s(vf);p3r=r(oQ,`Note:
Loading a model from its configuration file does `),Y2e=n(oQ,"STRONG",{});var O2t=s(Y2e);_3r=r(O2t,"not"),O2t.forEach(t),u3r=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),K2e=n(oQ,"CODE",{});var G2t=s(K2e);b3r=r(G2t,"from_pretrained()"),G2t.forEach(t),v3r=r(oQ,"to load the model weights."),oQ.forEach(t),T3r=i(yi),Z2e=n(yi,"P",{});var X2t=s(Z2e);F3r=r(X2t,"Examples:"),X2t.forEach(t),C3r=i(yi),m(tA.$$.fragment,yi),yi.forEach(t),M3r=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(aA.$$.fragment,Pa),E3r=i(Pa),eve=n(Pa,"P",{});var V2t=s(eve);y3r=r(V2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),V2t.forEach(t),w3r=i(Pa),$n=n(Pa,"P",{});var qM=s($n);A3r=r(qM,"The model class to instantiate is selected based on the "),ove=n(qM,"CODE",{});var z2t=s(ove);L3r=r(z2t,"model_type"),z2t.forEach(t),B3r=r(qM,` property of the config object (either
passed as an argument or loaded from `),rve=n(qM,"CODE",{});var W2t=s(rve);x3r=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),k3r=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n(qM,"CODE",{});var Q2t=s(tve);R3r=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),S3r=r(qM,":"),qM.forEach(t),P3r=i(Pa),ve=n(Pa,"UL",{});var Ae=s(ve);mC=n(Ae,"LI",{});var wBe=s(mC);ave=n(wBe,"STRONG",{});var H2t=s(ave);$3r=r(H2t,"albert"),H2t.forEach(t),I3r=r(wBe," \u2014 "),VV=n(wBe,"A",{href:!0});var U2t=s(VV);j3r=r(U2t,"FlaxAlbertForQuestionAnswering"),U2t.forEach(t),D3r=r(wBe," (ALBERT model)"),wBe.forEach(t),N3r=i(Ae),gC=n(Ae,"LI",{});var ABe=s(gC);nve=n(ABe,"STRONG",{});var J2t=s(nve);q3r=r(J2t,"bart"),J2t.forEach(t),O3r=r(ABe," \u2014 "),zV=n(ABe,"A",{href:!0});var Y2t=s(zV);G3r=r(Y2t,"FlaxBartForQuestionAnswering"),Y2t.forEach(t),X3r=r(ABe," (BART model)"),ABe.forEach(t),V3r=i(Ae),hC=n(Ae,"LI",{});var LBe=s(hC);sve=n(LBe,"STRONG",{});var K2t=s(sve);z3r=r(K2t,"bert"),K2t.forEach(t),W3r=r(LBe," \u2014 "),WV=n(LBe,"A",{href:!0});var Z2t=s(WV);Q3r=r(Z2t,"FlaxBertForQuestionAnswering"),Z2t.forEach(t),H3r=r(LBe," (BERT model)"),LBe.forEach(t),U3r=i(Ae),pC=n(Ae,"LI",{});var BBe=s(pC);lve=n(BBe,"STRONG",{});var evt=s(lve);J3r=r(evt,"big_bird"),evt.forEach(t),Y3r=r(BBe," \u2014 "),QV=n(BBe,"A",{href:!0});var ovt=s(QV);K3r=r(ovt,"FlaxBigBirdForQuestionAnswering"),ovt.forEach(t),Z3r=r(BBe," (BigBird model)"),BBe.forEach(t),eyr=i(Ae),_C=n(Ae,"LI",{});var xBe=s(_C);ive=n(xBe,"STRONG",{});var rvt=s(ive);oyr=r(rvt,"distilbert"),rvt.forEach(t),ryr=r(xBe," \u2014 "),HV=n(xBe,"A",{href:!0});var tvt=s(HV);tyr=r(tvt,"FlaxDistilBertForQuestionAnswering"),tvt.forEach(t),ayr=r(xBe," (DistilBERT model)"),xBe.forEach(t),nyr=i(Ae),uC=n(Ae,"LI",{});var kBe=s(uC);dve=n(kBe,"STRONG",{});var avt=s(dve);syr=r(avt,"electra"),avt.forEach(t),lyr=r(kBe," \u2014 "),UV=n(kBe,"A",{href:!0});var nvt=s(UV);iyr=r(nvt,"FlaxElectraForQuestionAnswering"),nvt.forEach(t),dyr=r(kBe," (ELECTRA model)"),kBe.forEach(t),cyr=i(Ae),bC=n(Ae,"LI",{});var RBe=s(bC);cve=n(RBe,"STRONG",{});var svt=s(cve);fyr=r(svt,"mbart"),svt.forEach(t),myr=r(RBe," \u2014 "),JV=n(RBe,"A",{href:!0});var lvt=s(JV);gyr=r(lvt,"FlaxMBartForQuestionAnswering"),lvt.forEach(t),hyr=r(RBe," (mBART model)"),RBe.forEach(t),pyr=i(Ae),vC=n(Ae,"LI",{});var SBe=s(vC);fve=n(SBe,"STRONG",{});var ivt=s(fve);_yr=r(ivt,"roberta"),ivt.forEach(t),uyr=r(SBe," \u2014 "),YV=n(SBe,"A",{href:!0});var dvt=s(YV);byr=r(dvt,"FlaxRobertaForQuestionAnswering"),dvt.forEach(t),vyr=r(SBe," (RoBERTa model)"),SBe.forEach(t),Tyr=i(Ae),TC=n(Ae,"LI",{});var PBe=s(TC);mve=n(PBe,"STRONG",{});var cvt=s(mve);Fyr=r(cvt,"roformer"),cvt.forEach(t),Cyr=r(PBe," \u2014 "),KV=n(PBe,"A",{href:!0});var fvt=s(KV);Myr=r(fvt,"FlaxRoFormerForQuestionAnswering"),fvt.forEach(t),Eyr=r(PBe," (RoFormer model)"),PBe.forEach(t),yyr=i(Ae),FC=n(Ae,"LI",{});var $Be=s(FC);gve=n($Be,"STRONG",{});var mvt=s(gve);wyr=r(mvt,"xlm-roberta"),mvt.forEach(t),Ayr=r($Be," \u2014 "),ZV=n($Be,"A",{href:!0});var gvt=s(ZV);Lyr=r(gvt,"FlaxXLMRobertaForQuestionAnswering"),gvt.forEach(t),Byr=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),Ae.forEach(t),xyr=i(Pa),hve=n(Pa,"P",{});var hvt=s(hve);kyr=r(hvt,"Examples:"),hvt.forEach(t),Ryr=i(Pa),m(nA.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),Qke=i(d),Tf=n(d,"H2",{class:!0});var nPe=s(Tf);CC=n(nPe,"A",{id:!0,class:!0,href:!0});var pvt=s(CC);pve=n(pvt,"SPAN",{});var _vt=s(pve);m(sA.$$.fragment,_vt),_vt.forEach(t),pvt.forEach(t),Syr=i(nPe),_ve=n(nPe,"SPAN",{});var uvt=s(_ve);Pyr=r(uvt,"FlaxAutoModelForTokenClassification"),uvt.forEach(t),nPe.forEach(t),Hke=i(d),Nr=n(d,"DIV",{class:!0});var wi=s(Nr);m(lA.$$.fragment,wi),$yr=i(wi),Ff=n(wi,"P",{});var rQ=s(Ff);Iyr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uve=n(rQ,"CODE",{});var bvt=s(uve);jyr=r(bvt,"from_pretrained()"),bvt.forEach(t),Dyr=r(rQ,"class method or the "),bve=n(rQ,"CODE",{});var vvt=s(bve);Nyr=r(vvt,"from_config()"),vvt.forEach(t),qyr=r(rQ,`class
method.`),rQ.forEach(t),Oyr=i(wi),iA=n(wi,"P",{});var sPe=s(iA);Gyr=r(sPe,"This class cannot be instantiated directly using "),vve=n(sPe,"CODE",{});var Tvt=s(vve);Xyr=r(Tvt,"__init__()"),Tvt.forEach(t),Vyr=r(sPe," (throws an error)."),sPe.forEach(t),zyr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(dA.$$.fragment,Ai),Wyr=i(Ai),Tve=n(Ai,"P",{});var Fvt=s(Tve);Qyr=r(Fvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fvt.forEach(t),Hyr=i(Ai),Cf=n(Ai,"P",{});var tQ=s(Cf);Uyr=r(tQ,`Note:
Loading a model from its configuration file does `),Fve=n(tQ,"STRONG",{});var Cvt=s(Fve);Jyr=r(Cvt,"not"),Cvt.forEach(t),Yyr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cve=n(tQ,"CODE",{});var Mvt=s(Cve);Kyr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),Zyr=r(tQ,"to load the model weights."),tQ.forEach(t),ewr=i(Ai),Mve=n(Ai,"P",{});var Evt=s(Mve);owr=r(Evt,"Examples:"),Evt.forEach(t),rwr=i(Ai),m(cA.$$.fragment,Ai),Ai.forEach(t),twr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(fA.$$.fragment,$a),awr=i($a),Eve=n($a,"P",{});var yvt=s(Eve);nwr=r(yvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yvt.forEach(t),swr=i($a),In=n($a,"P",{});var OM=s(In);lwr=r(OM,"The model class to instantiate is selected based on the "),yve=n(OM,"CODE",{});var wvt=s(yve);iwr=r(wvt,"model_type"),wvt.forEach(t),dwr=r(OM,` property of the config object (either
passed as an argument or loaded from `),wve=n(OM,"CODE",{});var Avt=s(wve);cwr=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),fwr=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(OM,"CODE",{});var Lvt=s(Ave);mwr=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),gwr=r(OM,":"),OM.forEach(t),hwr=i($a),Re=n($a,"UL",{});var Go=s(Re);MC=n(Go,"LI",{});var IBe=s(MC);Lve=n(IBe,"STRONG",{});var Bvt=s(Lve);pwr=r(Bvt,"albert"),Bvt.forEach(t),_wr=r(IBe," \u2014 "),ez=n(IBe,"A",{href:!0});var xvt=s(ez);uwr=r(xvt,"FlaxAlbertForTokenClassification"),xvt.forEach(t),bwr=r(IBe," (ALBERT model)"),IBe.forEach(t),vwr=i(Go),EC=n(Go,"LI",{});var jBe=s(EC);Bve=n(jBe,"STRONG",{});var kvt=s(Bve);Twr=r(kvt,"bert"),kvt.forEach(t),Fwr=r(jBe," \u2014 "),oz=n(jBe,"A",{href:!0});var Rvt=s(oz);Cwr=r(Rvt,"FlaxBertForTokenClassification"),Rvt.forEach(t),Mwr=r(jBe," (BERT model)"),jBe.forEach(t),Ewr=i(Go),yC=n(Go,"LI",{});var DBe=s(yC);xve=n(DBe,"STRONG",{});var Svt=s(xve);ywr=r(Svt,"big_bird"),Svt.forEach(t),wwr=r(DBe," \u2014 "),rz=n(DBe,"A",{href:!0});var Pvt=s(rz);Awr=r(Pvt,"FlaxBigBirdForTokenClassification"),Pvt.forEach(t),Lwr=r(DBe," (BigBird model)"),DBe.forEach(t),Bwr=i(Go),wC=n(Go,"LI",{});var NBe=s(wC);kve=n(NBe,"STRONG",{});var $vt=s(kve);xwr=r($vt,"distilbert"),$vt.forEach(t),kwr=r(NBe," \u2014 "),tz=n(NBe,"A",{href:!0});var Ivt=s(tz);Rwr=r(Ivt,"FlaxDistilBertForTokenClassification"),Ivt.forEach(t),Swr=r(NBe," (DistilBERT model)"),NBe.forEach(t),Pwr=i(Go),AC=n(Go,"LI",{});var qBe=s(AC);Rve=n(qBe,"STRONG",{});var jvt=s(Rve);$wr=r(jvt,"electra"),jvt.forEach(t),Iwr=r(qBe," \u2014 "),az=n(qBe,"A",{href:!0});var Dvt=s(az);jwr=r(Dvt,"FlaxElectraForTokenClassification"),Dvt.forEach(t),Dwr=r(qBe," (ELECTRA model)"),qBe.forEach(t),Nwr=i(Go),LC=n(Go,"LI",{});var OBe=s(LC);Sve=n(OBe,"STRONG",{});var Nvt=s(Sve);qwr=r(Nvt,"roberta"),Nvt.forEach(t),Owr=r(OBe," \u2014 "),nz=n(OBe,"A",{href:!0});var qvt=s(nz);Gwr=r(qvt,"FlaxRobertaForTokenClassification"),qvt.forEach(t),Xwr=r(OBe," (RoBERTa model)"),OBe.forEach(t),Vwr=i(Go),BC=n(Go,"LI",{});var GBe=s(BC);Pve=n(GBe,"STRONG",{});var Ovt=s(Pve);zwr=r(Ovt,"roformer"),Ovt.forEach(t),Wwr=r(GBe," \u2014 "),sz=n(GBe,"A",{href:!0});var Gvt=s(sz);Qwr=r(Gvt,"FlaxRoFormerForTokenClassification"),Gvt.forEach(t),Hwr=r(GBe," (RoFormer model)"),GBe.forEach(t),Uwr=i(Go),xC=n(Go,"LI",{});var XBe=s(xC);$ve=n(XBe,"STRONG",{});var Xvt=s($ve);Jwr=r(Xvt,"xlm-roberta"),Xvt.forEach(t),Ywr=r(XBe," \u2014 "),lz=n(XBe,"A",{href:!0});var Vvt=s(lz);Kwr=r(Vvt,"FlaxXLMRobertaForTokenClassification"),Vvt.forEach(t),Zwr=r(XBe," (XLM-RoBERTa model)"),XBe.forEach(t),Go.forEach(t),e6r=i($a),Ive=n($a,"P",{});var zvt=s(Ive);o6r=r(zvt,"Examples:"),zvt.forEach(t),r6r=i($a),m(mA.$$.fragment,$a),$a.forEach(t),wi.forEach(t),Uke=i(d),Mf=n(d,"H2",{class:!0});var lPe=s(Mf);kC=n(lPe,"A",{id:!0,class:!0,href:!0});var Wvt=s(kC);jve=n(Wvt,"SPAN",{});var Qvt=s(jve);m(gA.$$.fragment,Qvt),Qvt.forEach(t),Wvt.forEach(t),t6r=i(lPe),Dve=n(lPe,"SPAN",{});var Hvt=s(Dve);a6r=r(Hvt,"FlaxAutoModelForMultipleChoice"),Hvt.forEach(t),lPe.forEach(t),Jke=i(d),qr=n(d,"DIV",{class:!0});var Li=s(qr);m(hA.$$.fragment,Li),n6r=i(Li),Ef=n(Li,"P",{});var aQ=s(Ef);s6r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Nve=n(aQ,"CODE",{});var Uvt=s(Nve);l6r=r(Uvt,"from_pretrained()"),Uvt.forEach(t),i6r=r(aQ,"class method or the "),qve=n(aQ,"CODE",{});var Jvt=s(qve);d6r=r(Jvt,"from_config()"),Jvt.forEach(t),c6r=r(aQ,`class
method.`),aQ.forEach(t),f6r=i(Li),pA=n(Li,"P",{});var iPe=s(pA);m6r=r(iPe,"This class cannot be instantiated directly using "),Ove=n(iPe,"CODE",{});var Yvt=s(Ove);g6r=r(Yvt,"__init__()"),Yvt.forEach(t),h6r=r(iPe," (throws an error)."),iPe.forEach(t),p6r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(_A.$$.fragment,Bi),_6r=i(Bi),Gve=n(Bi,"P",{});var Kvt=s(Gve);u6r=r(Kvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kvt.forEach(t),b6r=i(Bi),yf=n(Bi,"P",{});var nQ=s(yf);v6r=r(nQ,`Note:
Loading a model from its configuration file does `),Xve=n(nQ,"STRONG",{});var Zvt=s(Xve);T6r=r(Zvt,"not"),Zvt.forEach(t),F6r=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vve=n(nQ,"CODE",{});var e0t=s(Vve);C6r=r(e0t,"from_pretrained()"),e0t.forEach(t),M6r=r(nQ,"to load the model weights."),nQ.forEach(t),E6r=i(Bi),zve=n(Bi,"P",{});var o0t=s(zve);y6r=r(o0t,"Examples:"),o0t.forEach(t),w6r=i(Bi),m(uA.$$.fragment,Bi),Bi.forEach(t),A6r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(bA.$$.fragment,Ia),L6r=i(Ia),Wve=n(Ia,"P",{});var r0t=s(Wve);B6r=r(r0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r0t.forEach(t),x6r=i(Ia),jn=n(Ia,"P",{});var GM=s(jn);k6r=r(GM,"The model class to instantiate is selected based on the "),Qve=n(GM,"CODE",{});var t0t=s(Qve);R6r=r(t0t,"model_type"),t0t.forEach(t),S6r=r(GM,` property of the config object (either
passed as an argument or loaded from `),Hve=n(GM,"CODE",{});var a0t=s(Hve);P6r=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),$6r=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(GM,"CODE",{});var n0t=s(Uve);I6r=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),j6r=r(GM,":"),GM.forEach(t),D6r=i(Ia),Se=n(Ia,"UL",{});var Xo=s(Se);RC=n(Xo,"LI",{});var VBe=s(RC);Jve=n(VBe,"STRONG",{});var s0t=s(Jve);N6r=r(s0t,"albert"),s0t.forEach(t),q6r=r(VBe," \u2014 "),iz=n(VBe,"A",{href:!0});var l0t=s(iz);O6r=r(l0t,"FlaxAlbertForMultipleChoice"),l0t.forEach(t),G6r=r(VBe," (ALBERT model)"),VBe.forEach(t),X6r=i(Xo),SC=n(Xo,"LI",{});var zBe=s(SC);Yve=n(zBe,"STRONG",{});var i0t=s(Yve);V6r=r(i0t,"bert"),i0t.forEach(t),z6r=r(zBe," \u2014 "),dz=n(zBe,"A",{href:!0});var d0t=s(dz);W6r=r(d0t,"FlaxBertForMultipleChoice"),d0t.forEach(t),Q6r=r(zBe," (BERT model)"),zBe.forEach(t),H6r=i(Xo),PC=n(Xo,"LI",{});var WBe=s(PC);Kve=n(WBe,"STRONG",{});var c0t=s(Kve);U6r=r(c0t,"big_bird"),c0t.forEach(t),J6r=r(WBe," \u2014 "),cz=n(WBe,"A",{href:!0});var f0t=s(cz);Y6r=r(f0t,"FlaxBigBirdForMultipleChoice"),f0t.forEach(t),K6r=r(WBe," (BigBird model)"),WBe.forEach(t),Z6r=i(Xo),$C=n(Xo,"LI",{});var QBe=s($C);Zve=n(QBe,"STRONG",{});var m0t=s(Zve);eAr=r(m0t,"distilbert"),m0t.forEach(t),oAr=r(QBe," \u2014 "),fz=n(QBe,"A",{href:!0});var g0t=s(fz);rAr=r(g0t,"FlaxDistilBertForMultipleChoice"),g0t.forEach(t),tAr=r(QBe," (DistilBERT model)"),QBe.forEach(t),aAr=i(Xo),IC=n(Xo,"LI",{});var HBe=s(IC);e0e=n(HBe,"STRONG",{});var h0t=s(e0e);nAr=r(h0t,"electra"),h0t.forEach(t),sAr=r(HBe," \u2014 "),mz=n(HBe,"A",{href:!0});var p0t=s(mz);lAr=r(p0t,"FlaxElectraForMultipleChoice"),p0t.forEach(t),iAr=r(HBe," (ELECTRA model)"),HBe.forEach(t),dAr=i(Xo),jC=n(Xo,"LI",{});var UBe=s(jC);o0e=n(UBe,"STRONG",{});var _0t=s(o0e);cAr=r(_0t,"roberta"),_0t.forEach(t),fAr=r(UBe," \u2014 "),gz=n(UBe,"A",{href:!0});var u0t=s(gz);mAr=r(u0t,"FlaxRobertaForMultipleChoice"),u0t.forEach(t),gAr=r(UBe," (RoBERTa model)"),UBe.forEach(t),hAr=i(Xo),DC=n(Xo,"LI",{});var JBe=s(DC);r0e=n(JBe,"STRONG",{});var b0t=s(r0e);pAr=r(b0t,"roformer"),b0t.forEach(t),_Ar=r(JBe," \u2014 "),hz=n(JBe,"A",{href:!0});var v0t=s(hz);uAr=r(v0t,"FlaxRoFormerForMultipleChoice"),v0t.forEach(t),bAr=r(JBe," (RoFormer model)"),JBe.forEach(t),vAr=i(Xo),NC=n(Xo,"LI",{});var YBe=s(NC);t0e=n(YBe,"STRONG",{});var T0t=s(t0e);TAr=r(T0t,"xlm-roberta"),T0t.forEach(t),FAr=r(YBe," \u2014 "),pz=n(YBe,"A",{href:!0});var F0t=s(pz);CAr=r(F0t,"FlaxXLMRobertaForMultipleChoice"),F0t.forEach(t),MAr=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),Xo.forEach(t),EAr=i(Ia),a0e=n(Ia,"P",{});var C0t=s(a0e);yAr=r(C0t,"Examples:"),C0t.forEach(t),wAr=i(Ia),m(vA.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),Yke=i(d),wf=n(d,"H2",{class:!0});var dPe=s(wf);qC=n(dPe,"A",{id:!0,class:!0,href:!0});var M0t=s(qC);n0e=n(M0t,"SPAN",{});var E0t=s(n0e);m(TA.$$.fragment,E0t),E0t.forEach(t),M0t.forEach(t),AAr=i(dPe),s0e=n(dPe,"SPAN",{});var y0t=s(s0e);LAr=r(y0t,"FlaxAutoModelForNextSentencePrediction"),y0t.forEach(t),dPe.forEach(t),Kke=i(d),Or=n(d,"DIV",{class:!0});var xi=s(Or);m(FA.$$.fragment,xi),BAr=i(xi),Af=n(xi,"P",{});var sQ=s(Af);xAr=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),l0e=n(sQ,"CODE",{});var w0t=s(l0e);kAr=r(w0t,"from_pretrained()"),w0t.forEach(t),RAr=r(sQ,"class method or the "),i0e=n(sQ,"CODE",{});var A0t=s(i0e);SAr=r(A0t,"from_config()"),A0t.forEach(t),PAr=r(sQ,`class
method.`),sQ.forEach(t),$Ar=i(xi),CA=n(xi,"P",{});var cPe=s(CA);IAr=r(cPe,"This class cannot be instantiated directly using "),d0e=n(cPe,"CODE",{});var L0t=s(d0e);jAr=r(L0t,"__init__()"),L0t.forEach(t),DAr=r(cPe," (throws an error)."),cPe.forEach(t),NAr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(MA.$$.fragment,ki),qAr=i(ki),c0e=n(ki,"P",{});var B0t=s(c0e);OAr=r(B0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),B0t.forEach(t),GAr=i(ki),Lf=n(ki,"P",{});var lQ=s(Lf);XAr=r(lQ,`Note:
Loading a model from its configuration file does `),f0e=n(lQ,"STRONG",{});var x0t=s(f0e);VAr=r(x0t,"not"),x0t.forEach(t),zAr=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),m0e=n(lQ,"CODE",{});var k0t=s(m0e);WAr=r(k0t,"from_pretrained()"),k0t.forEach(t),QAr=r(lQ,"to load the model weights."),lQ.forEach(t),HAr=i(ki),g0e=n(ki,"P",{});var R0t=s(g0e);UAr=r(R0t,"Examples:"),R0t.forEach(t),JAr=i(ki),m(EA.$$.fragment,ki),ki.forEach(t),YAr=i(xi),Io=n(xi,"DIV",{class:!0});var ja=s(Io);m(yA.$$.fragment,ja),KAr=i(ja),h0e=n(ja,"P",{});var S0t=s(h0e);ZAr=r(S0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),S0t.forEach(t),eLr=i(ja),Dn=n(ja,"P",{});var XM=s(Dn);oLr=r(XM,"The model class to instantiate is selected based on the "),p0e=n(XM,"CODE",{});var P0t=s(p0e);rLr=r(P0t,"model_type"),P0t.forEach(t),tLr=r(XM,` property of the config object (either
passed as an argument or loaded from `),_0e=n(XM,"CODE",{});var $0t=s(_0e);aLr=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),nLr=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=n(XM,"CODE",{});var I0t=s(u0e);sLr=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),lLr=r(XM,":"),XM.forEach(t),iLr=i(ja),b0e=n(ja,"UL",{});var j0t=s(b0e);OC=n(j0t,"LI",{});var KBe=s(OC);v0e=n(KBe,"STRONG",{});var D0t=s(v0e);dLr=r(D0t,"bert"),D0t.forEach(t),cLr=r(KBe," \u2014 "),_z=n(KBe,"A",{href:!0});var N0t=s(_z);fLr=r(N0t,"FlaxBertForNextSentencePrediction"),N0t.forEach(t),mLr=r(KBe," (BERT model)"),KBe.forEach(t),j0t.forEach(t),gLr=i(ja),T0e=n(ja,"P",{});var q0t=s(T0e);hLr=r(q0t,"Examples:"),q0t.forEach(t),pLr=i(ja),m(wA.$$.fragment,ja),ja.forEach(t),xi.forEach(t),Zke=i(d),Bf=n(d,"H2",{class:!0});var fPe=s(Bf);GC=n(fPe,"A",{id:!0,class:!0,href:!0});var O0t=s(GC);F0e=n(O0t,"SPAN",{});var G0t=s(F0e);m(AA.$$.fragment,G0t),G0t.forEach(t),O0t.forEach(t),_Lr=i(fPe),C0e=n(fPe,"SPAN",{});var X0t=s(C0e);uLr=r(X0t,"FlaxAutoModelForImageClassification"),X0t.forEach(t),fPe.forEach(t),eRe=i(d),Gr=n(d,"DIV",{class:!0});var Ri=s(Gr);m(LA.$$.fragment,Ri),bLr=i(Ri),xf=n(Ri,"P",{});var iQ=s(xf);vLr=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),M0e=n(iQ,"CODE",{});var V0t=s(M0e);TLr=r(V0t,"from_pretrained()"),V0t.forEach(t),FLr=r(iQ,"class method or the "),E0e=n(iQ,"CODE",{});var z0t=s(E0e);CLr=r(z0t,"from_config()"),z0t.forEach(t),MLr=r(iQ,`class
method.`),iQ.forEach(t),ELr=i(Ri),BA=n(Ri,"P",{});var mPe=s(BA);yLr=r(mPe,"This class cannot be instantiated directly using "),y0e=n(mPe,"CODE",{});var W0t=s(y0e);wLr=r(W0t,"__init__()"),W0t.forEach(t),ALr=r(mPe," (throws an error)."),mPe.forEach(t),LLr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(xA.$$.fragment,Si),BLr=i(Si),w0e=n(Si,"P",{});var Q0t=s(w0e);xLr=r(Q0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Q0t.forEach(t),kLr=i(Si),kf=n(Si,"P",{});var dQ=s(kf);RLr=r(dQ,`Note:
Loading a model from its configuration file does `),A0e=n(dQ,"STRONG",{});var H0t=s(A0e);SLr=r(H0t,"not"),H0t.forEach(t),PLr=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),L0e=n(dQ,"CODE",{});var U0t=s(L0e);$Lr=r(U0t,"from_pretrained()"),U0t.forEach(t),ILr=r(dQ,"to load the model weights."),dQ.forEach(t),jLr=i(Si),B0e=n(Si,"P",{});var J0t=s(B0e);DLr=r(J0t,"Examples:"),J0t.forEach(t),NLr=i(Si),m(kA.$$.fragment,Si),Si.forEach(t),qLr=i(Ri),jo=n(Ri,"DIV",{class:!0});var Da=s(jo);m(RA.$$.fragment,Da),OLr=i(Da),x0e=n(Da,"P",{});var Y0t=s(x0e);GLr=r(Y0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Y0t.forEach(t),XLr=i(Da),Nn=n(Da,"P",{});var VM=s(Nn);VLr=r(VM,"The model class to instantiate is selected based on the "),k0e=n(VM,"CODE",{});var K0t=s(k0e);zLr=r(K0t,"model_type"),K0t.forEach(t),WLr=r(VM,` property of the config object (either
passed as an argument or loaded from `),R0e=n(VM,"CODE",{});var Z0t=s(R0e);QLr=r(Z0t,"pretrained_model_name_or_path"),Z0t.forEach(t),HLr=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=n(VM,"CODE",{});var eTt=s(S0e);ULr=r(eTt,"pretrained_model_name_or_path"),eTt.forEach(t),JLr=r(VM,":"),VM.forEach(t),YLr=i(Da),SA=n(Da,"UL",{});var gPe=s(SA);XC=n(gPe,"LI",{});var ZBe=s(XC);P0e=n(ZBe,"STRONG",{});var oTt=s(P0e);KLr=r(oTt,"beit"),oTt.forEach(t),ZLr=r(ZBe," \u2014 "),uz=n(ZBe,"A",{href:!0});var rTt=s(uz);e8r=r(rTt,"FlaxBeitForImageClassification"),rTt.forEach(t),o8r=r(ZBe," (BEiT model)"),ZBe.forEach(t),r8r=i(gPe),VC=n(gPe,"LI",{});var exe=s(VC);$0e=n(exe,"STRONG",{});var tTt=s($0e);t8r=r(tTt,"vit"),tTt.forEach(t),a8r=r(exe," \u2014 "),bz=n(exe,"A",{href:!0});var aTt=s(bz);n8r=r(aTt,"FlaxViTForImageClassification"),aTt.forEach(t),s8r=r(exe," (ViT model)"),exe.forEach(t),gPe.forEach(t),l8r=i(Da),I0e=n(Da,"P",{});var nTt=s(I0e);i8r=r(nTt,"Examples:"),nTt.forEach(t),d8r=i(Da),m(PA.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),oRe=i(d),Rf=n(d,"H2",{class:!0});var hPe=s(Rf);zC=n(hPe,"A",{id:!0,class:!0,href:!0});var sTt=s(zC);j0e=n(sTt,"SPAN",{});var lTt=s(j0e);m($A.$$.fragment,lTt),lTt.forEach(t),sTt.forEach(t),c8r=i(hPe),D0e=n(hPe,"SPAN",{});var iTt=s(D0e);f8r=r(iTt,"FlaxAutoModelForVision2Seq"),iTt.forEach(t),hPe.forEach(t),rRe=i(d),Xr=n(d,"DIV",{class:!0});var Pi=s(Xr);m(IA.$$.fragment,Pi),m8r=i(Pi),Sf=n(Pi,"P",{});var cQ=s(Sf);g8r=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),N0e=n(cQ,"CODE",{});var dTt=s(N0e);h8r=r(dTt,"from_pretrained()"),dTt.forEach(t),p8r=r(cQ,"class method or the "),q0e=n(cQ,"CODE",{});var cTt=s(q0e);_8r=r(cTt,"from_config()"),cTt.forEach(t),u8r=r(cQ,`class
method.`),cQ.forEach(t),b8r=i(Pi),jA=n(Pi,"P",{});var pPe=s(jA);v8r=r(pPe,"This class cannot be instantiated directly using "),O0e=n(pPe,"CODE",{});var fTt=s(O0e);T8r=r(fTt,"__init__()"),fTt.forEach(t),F8r=r(pPe," (throws an error)."),pPe.forEach(t),C8r=i(Pi),jt=n(Pi,"DIV",{class:!0});var $i=s(jt);m(DA.$$.fragment,$i),M8r=i($i),G0e=n($i,"P",{});var mTt=s(G0e);E8r=r(mTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mTt.forEach(t),y8r=i($i),Pf=n($i,"P",{});var fQ=s(Pf);w8r=r(fQ,`Note:
Loading a model from its configuration file does `),X0e=n(fQ,"STRONG",{});var gTt=s(X0e);A8r=r(gTt,"not"),gTt.forEach(t),L8r=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),V0e=n(fQ,"CODE",{});var hTt=s(V0e);B8r=r(hTt,"from_pretrained()"),hTt.forEach(t),x8r=r(fQ,"to load the model weights."),fQ.forEach(t),k8r=i($i),z0e=n($i,"P",{});var pTt=s(z0e);R8r=r(pTt,"Examples:"),pTt.forEach(t),S8r=i($i),m(NA.$$.fragment,$i),$i.forEach(t),P8r=i(Pi),Do=n(Pi,"DIV",{class:!0});var Na=s(Do);m(qA.$$.fragment,Na),$8r=i(Na),W0e=n(Na,"P",{});var _Tt=s(W0e);I8r=r(_Tt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Tt.forEach(t),j8r=i(Na),qn=n(Na,"P",{});var zM=s(qn);D8r=r(zM,"The model class to instantiate is selected based on the "),Q0e=n(zM,"CODE",{});var uTt=s(Q0e);N8r=r(uTt,"model_type"),uTt.forEach(t),q8r=r(zM,` property of the config object (either
passed as an argument or loaded from `),H0e=n(zM,"CODE",{});var bTt=s(H0e);O8r=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),G8r=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=n(zM,"CODE",{});var vTt=s(U0e);X8r=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),V8r=r(zM,":"),zM.forEach(t),z8r=i(Na),J0e=n(Na,"UL",{});var TTt=s(J0e);WC=n(TTt,"LI",{});var oxe=s(WC);Y0e=n(oxe,"STRONG",{});var FTt=s(Y0e);W8r=r(FTt,"vision-encoder-decoder"),FTt.forEach(t),Q8r=r(oxe," \u2014 "),vz=n(oxe,"A",{href:!0});var CTt=s(vz);H8r=r(CTt,"FlaxVisionEncoderDecoderModel"),CTt.forEach(t),U8r=r(oxe," (Vision Encoder decoder model)"),oxe.forEach(t),TTt.forEach(t),J8r=i(Na),K0e=n(Na,"P",{});var MTt=s(K0e);Y8r=r(MTt,"Examples:"),MTt.forEach(t),K8r=i(Na),m(OA.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(RTt)),c(ge,"id","auto-classes"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#auto-classes"),c(de,"class","relative group"),c(On,"href","/docs/transformers/pr_15907/en/model_doc/auto#transformers.AutoConfig"),c(Xn,"href","/docs/transformers/pr_15907/en/model_doc/auto#transformers.AutoModel"),c(Vn,"href","/docs/transformers/pr_15907/en/model_doc/auto#transformers.AutoTokenizer"),c(Xi,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(Vi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(zi,"class","relative group"),c(zL,"href","/docs/transformers/pr_15907/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(WL,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertConfig"),c(QL,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartConfig"),c(HL,"href","/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitConfig"),c(UL,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertConfig"),c(JL,"href","/docs/transformers/pr_15907/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(YL,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdConfig"),c(KL,"href","/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ZL,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(e8,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(o8,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertConfig"),c(r8,"href","/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineConfig"),c(t8,"href","/docs/transformers/pr_15907/en/model_doc/clip#transformers.CLIPConfig"),c(a8,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertConfig"),c(n8,"href","/docs/transformers/pr_15907/en/model_doc/convnext#transformers.ConvNextConfig"),c(s8,"href","/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLConfig"),c(l8,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(i8,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(d8,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaConfig"),c(c8,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(f8,"href","/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTConfig"),c(m8,"href","/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrConfig"),c(g8,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertConfig"),c(h8,"href","/docs/transformers/pr_15907/en/model_doc/dpr#transformers.DPRConfig"),c(p8,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraConfig"),c(_8,"href","/docs/transformers/pr_15907/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(u8,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertConfig"),c(b8,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetConfig"),c(v8,"href","/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTConfig"),c(T8,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelConfig"),c(F8,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Config"),c(C8,"href","/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(M8,"href","/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJConfig"),c(E8,"href","/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertConfig"),c(y8,"href","/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertConfig"),c(w8,"href","/docs/transformers/pr_15907/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(A8,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(L8,"href","/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(B8,"href","/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDConfig"),c(x8,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerConfig"),c(k8,"href","/docs/transformers/pr_15907/en/model_doc/luke#transformers.LukeConfig"),c(R8,"href","/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertConfig"),c(S8,"href","/docs/transformers/pr_15907/en/model_doc/m2m_100#transformers.M2M100Config"),c(P8,"href","/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianConfig"),c($8,"href","/docs/transformers/pr_15907/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(I8,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartConfig"),c(j8,"href","/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(D8,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(N8,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetConfig"),c(q8,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5Config"),c(O8,"href","/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(G8,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(X8,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusConfig"),c(V8,"href","/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverConfig"),c(z8,"href","/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartConfig"),c(W8,"href","/docs/transformers/pr_15907/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Q8,"href","/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(H8,"href","/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(U8,"href","/docs/transformers/pr_15907/en/model_doc/rag#transformers.RagConfig"),c(J8,"href","/docs/transformers/pr_15907/en/model_doc/realm#transformers.RealmConfig"),c(Y8,"href","/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerConfig"),c(K8,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertConfig"),c(Z8,"href","/docs/transformers/pr_15907/en/model_doc/retribert#transformers.RetriBertConfig"),c(eB,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaConfig"),c(oB,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerConfig"),c(rB,"href","/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerConfig"),c(tB,"href","/docs/transformers/pr_15907/en/model_doc/sew#transformers.SEWConfig"),c(aB,"href","/docs/transformers/pr_15907/en/model_doc/sew-d#transformers.SEWDConfig"),c(nB,"href","/docs/transformers/pr_15907/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(sB,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(lB,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(iB,"href","/docs/transformers/pr_15907/en/model_doc/splinter#transformers.SplinterConfig"),c(dB,"href","/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(cB,"href","/docs/transformers/pr_15907/en/model_doc/swin#transformers.SwinConfig"),c(fB,"href","/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Config"),c(mB,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasConfig"),c(gB,"href","/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(hB,"href","/docs/transformers/pr_15907/en/model_doc/trocr#transformers.TrOCRConfig"),c(pB,"href","/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(_B,"href","/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(uB,"href","/docs/transformers/pr_15907/en/model_doc/vilt#transformers.ViltConfig"),c(bB,"href","/docs/transformers/pr_15907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(vB,"href","/docs/transformers/pr_15907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(TB,"href","/docs/transformers/pr_15907/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(FB,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTConfig"),c(CB,"href","/docs/transformers/pr_15907/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(MB,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(EB,"href","/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMConfig"),c(yB,"href","/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMConfig"),c(wB,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMConfig"),c(AB,"href","/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(LB,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(BB,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(xB,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetConfig"),c(kB,"href","/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoConfig"),c(mo,"class","docstring"),c(Bg,"class","docstring"),c(Wo,"class","docstring"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Qi,"class","relative group"),c(RB,"href","/docs/transformers/pr_15907/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(SB,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertTokenizer"),c(PB,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($B,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartTokenizer"),c(IB,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartTokenizerFast"),c(jB,"href","/docs/transformers/pr_15907/en/model_doc/barthez#transformers.BarthezTokenizer"),c(DB,"href","/docs/transformers/pr_15907/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(NB,"href","/docs/transformers/pr_15907/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qB,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertTokenizer"),c(OB,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertTokenizerFast"),c(GB,"href","/docs/transformers/pr_15907/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(XB,"href","/docs/transformers/pr_15907/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(VB,"href","/docs/transformers/pr_15907/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(zB,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(WB,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(QB,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(HB,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(UB,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(JB,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(YB,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(KB,"href","/docs/transformers/pr_15907/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(ZB,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ex,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(ox,"href","/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineTokenizer"),c(rx,"href","/docs/transformers/pr_15907/en/model_doc/clip#transformers.CLIPTokenizer"),c(tx,"href","/docs/transformers/pr_15907/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ax,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(nx,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(sx,"href","/docs/transformers/pr_15907/en/model_doc/cpm#transformers.CpmTokenizer"),c(lx,"href","/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ix,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dx,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cx,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fx,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(mx,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(gx,"href","/docs/transformers/pr_15907/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(hx,"href","/docs/transformers/pr_15907/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(px,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraTokenizer"),c(_x,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(ux,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(bx,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetTokenizer"),c(vx,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(Tx,"href","/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Fx,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Cx,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(Mx,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Ex,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yx,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wx,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Ax,"href","/docs/transformers/pr_15907/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Lx,"href","/docs/transformers/pr_15907/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Bx,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xx,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kx,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Rx,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Sx,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Px,"href","/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c($x,"href","/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(Ix,"href","/docs/transformers/pr_15907/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(jx,"href","/docs/transformers/pr_15907/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Dx,"href","/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDTokenizer"),c(Nx,"href","/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDTokenizerFast"),c(qx,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Ox,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Gx,"href","/docs/transformers/pr_15907/en/model_doc/luke#transformers.LukeTokenizer"),c(Xx,"href","/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Vx,"href","/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(zx,"href","/docs/transformers/pr_15907/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Wx,"href","/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianTokenizer"),c(Qx,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartTokenizer"),c(Hx,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Ux,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Jx,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Yx,"href","/docs/transformers/pr_15907/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Kx,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Zx,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ek,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(ok,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(rk,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.T5Tokenizer"),c(tk,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ak,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(nk,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(sk,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lk,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ik,"href","/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dk,"href","/docs/transformers/pr_15907/en/model_doc/phobert#transformers.PhobertTokenizer"),c(ck,"href","/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartTokenizer"),c(fk,"href","/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(mk,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertTokenizer"),c(gk,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertTokenizerFast"),c(hk,"href","/docs/transformers/pr_15907/en/model_doc/rag#transformers.RagTokenizer"),c(pk,"href","/docs/transformers/pr_15907/en/model_doc/realm#transformers.RealmTokenizer"),c(_k,"href","/docs/transformers/pr_15907/en/model_doc/realm#transformers.RealmTokenizerFast"),c(uk,"href","/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerTokenizer"),c(bk,"href","/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(vk,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Tk,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Fk,"href","/docs/transformers/pr_15907/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Ck,"href","/docs/transformers/pr_15907/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Mk,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Ek,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yk,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(wk,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Ak,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Lk,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Bk,"href","/docs/transformers/pr_15907/en/model_doc/splinter#transformers.SplinterTokenizer"),c(xk,"href","/docs/transformers/pr_15907/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(kk,"href","/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Rk,"href","/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Sk,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.T5Tokenizer"),c(Pk,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.T5TokenizerFast"),c($k,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasTokenizer"),c(Ik,"href","/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(jk,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Dk,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Nk,"href","/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMTokenizer"),c(qk,"href","/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Ok,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMTokenizer"),c(Gk,"href","/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Xk,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Vk,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(zk,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Wk,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(sh,"class","docstring"),c(Qo,"class","docstring"),c(lh,"id","transformers.AutoFeatureExtractor"),c(lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lh,"href","#transformers.AutoFeatureExtractor"),c(Hi,"class","relative group"),c(Qk,"href","/docs/transformers/pr_15907/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Hk,"href","/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Uk,"href","/docs/transformers/pr_15907/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Jk,"href","/docs/transformers/pr_15907/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Yk,"href","/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Kk,"href","/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Zk,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eR,"href","/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(oR,"href","/docs/transformers/pr_15907/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(rR,"href","/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(tR,"href","/docs/transformers/pr_15907/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(aR,"href","/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(nR,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(sR,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lR,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iR,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dR,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($e,"class","docstring"),c(yh,"class","docstring"),c(Ho,"class","docstring"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(Ui,"class","relative group"),c(cR,"href","/docs/transformers/pr_15907/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(fR,"href","/docs/transformers/pr_15907/en/model_doc/clip#transformers.CLIPProcessor"),c(mR,"href","/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(gR,"href","/docs/transformers/pr_15907/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(hR,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(pR,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(_R,"href","/docs/transformers/pr_15907/en/model_doc/trocr#transformers.TrOCRProcessor"),c(uR,"href","/docs/transformers/pr_15907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(bR,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ie,"class","docstring"),c(Ih,"class","docstring"),c(Uo,"class","docstring"),c(jh,"id","transformers.AutoModel"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoModel"),c(Yi,"class","relative group"),c(Vr,"class","docstring"),c(vR,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertModel"),c(TR,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartModel"),c(FR,"href","/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitModel"),c(CR,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertModel"),c(MR,"href","/docs/transformers/pr_15907/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ER,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdModel"),c(yR,"href","/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(wR,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(AR,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(LR,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertModel"),c(BR,"href","/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineModel"),c(xR,"href","/docs/transformers/pr_15907/en/model_doc/clip#transformers.CLIPModel"),c(kR,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertModel"),c(RR,"href","/docs/transformers/pr_15907/en/model_doc/convnext#transformers.ConvNextModel"),c(SR,"href","/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLModel"),c(PR,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c($R,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(IR,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaModel"),c(jR,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(DR,"href","/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTModel"),c(NR,"href","/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrModel"),c(qR,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertModel"),c(OR,"href","/docs/transformers/pr_15907/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(GR,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraModel"),c(XR,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertModel"),c(VR,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetModel"),c(zR,"href","/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTModel"),c(WR,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelModel"),c(QR,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelBaseModel"),c(HR,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2Model"),c(UR,"href","/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(JR,"href","/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJModel"),c(YR,"href","/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertModel"),c(KR,"href","/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertModel"),c(ZR,"href","/docs/transformers/pr_15907/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(eS,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(oS,"href","/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(rS,"href","/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDModel"),c(tS,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerModel"),c(aS,"href","/docs/transformers/pr_15907/en/model_doc/luke#transformers.LukeModel"),c(nS,"href","/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertModel"),c(sS,"href","/docs/transformers/pr_15907/en/model_doc/m2m_100#transformers.M2M100Model"),c(lS,"href","/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianModel"),c(iS,"href","/docs/transformers/pr_15907/en/model_doc/maskformer#transformers.MaskFormerModel"),c(dS,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartModel"),c(cS,"href","/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(fS,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertModel"),c(mS,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetModel"),c(gS,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5Model"),c(hS,"href","/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerModel"),c(pS,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(_S,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusModel"),c(uS,"href","/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverModel"),c(bS,"href","/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartModel"),c(vS,"href","/docs/transformers/pr_15907/en/model_doc/poolformer#transformers.PoolFormerModel"),c(TS,"href","/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(FS,"href","/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertModel"),c(CS,"href","/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerModel"),c(MS,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertModel"),c(ES,"href","/docs/transformers/pr_15907/en/model_doc/retribert#transformers.RetriBertModel"),c(yS,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaModel"),c(wS,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerModel"),c(AS,"href","/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerModel"),c(LS,"href","/docs/transformers/pr_15907/en/model_doc/sew#transformers.SEWModel"),c(BS,"href","/docs/transformers/pr_15907/en/model_doc/sew-d#transformers.SEWDModel"),c(xS,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(kS,"href","/docs/transformers/pr_15907/en/model_doc/splinter#transformers.SplinterModel"),c(RS,"href","/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(SS,"href","/docs/transformers/pr_15907/en/model_doc/swin#transformers.SwinModel"),c(PS,"href","/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5Model"),c($S,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasModel"),c(IS,"href","/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(jS,"href","/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechModel"),c(DS,"href","/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(NS,"href","/docs/transformers/pr_15907/en/model_doc/vilt#transformers.ViltModel"),c(qS,"href","/docs/transformers/pr_15907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(OS,"href","/docs/transformers/pr_15907/en/model_doc/visual_bert#transformers.VisualBertModel"),c(GS,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTModel"),c(XS,"href","/docs/transformers/pr_15907/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(VS,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(zS,"href","/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMModel"),c(WS,"href","/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMModel"),c(QS,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMModel"),c(HS,"href","/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(US,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(JS,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(YS,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetModel"),c(KS,"href","/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoModel"),c(je,"class","docstring"),c(Jo,"class","docstring"),c(u_,"id","transformers.AutoModelForPreTraining"),c(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u_,"href","#transformers.AutoModelForPreTraining"),c(ed,"class","relative group"),c(zr,"class","docstring"),c(ZS,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForPreTraining"),c(eP,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oP,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForPreTraining"),c(rP,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(tP,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aP,"href","/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nP,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sP,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lP,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iP,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dP,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForPreTraining"),c(cP,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fP,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForPreTraining"),c(mP,"href","/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(gP,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(hP,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(pP,"href","/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(_P,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uP,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bP,"href","/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(vP,"href","/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(TP,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(FP,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(CP,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(MP,"href","/docs/transformers/pr_15907/en/model_doc/retribert#transformers.RetriBertModel"),c(EP,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yP,"href","/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wP,"href","/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(AP,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(LP,"href","/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BP,"href","/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(xP,"href","/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(kP,"href","/docs/transformers/pr_15907/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(RP,"href","/docs/transformers/pr_15907/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(SP,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(PP,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($P,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(IP,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jP,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(De,"class","docstring"),c(Yo,"class","docstring"),c(au,"id","transformers.AutoModelForCausalLM"),c(au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(au,"href","#transformers.AutoModelForCausalLM"),c(td,"class","relative group"),c(Wr,"class","docstring"),c(DP,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForCausalLM"),c(NP,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertLMHeadModel"),c(qP,"href","/docs/transformers/pr_15907/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(OP,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(GP,"href","/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(XP,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(VP,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zP,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(WP,"href","/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(QP,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(HP,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForCausalLM"),c(UP,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(JP,"href","/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(YP,"href","/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(KP,"href","/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianForCausalLM"),c(ZP,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartForCausalLM"),c(e$,"href","/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(o$,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(r$,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(t$,"href","/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(a$,"href","/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(n$,"href","/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(s$,"href","/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(l$,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(i$,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(d$,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(c$,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(f$,"href","/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(m$,"href","/docs/transformers/pr_15907/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(g$,"href","/docs/transformers/pr_15907/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(h$,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(p$,"href","/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(_$,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(u$,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(b$,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ne,"class","docstring"),c(Ko,"class","docstring"),c(Ou,"id","transformers.AutoModelForMaskedLM"),c(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ou,"href","#transformers.AutoModelForMaskedLM"),c(sd,"class","relative group"),c(Qr,"class","docstring"),c(v$,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(T$,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(F$,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForMaskedLM"),c(C$,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(M$,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(E$,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(y$,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(w$,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(A$,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(L$,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(B$,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(x$,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(k$,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(R$,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(S$,"href","/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(P$,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c($$,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(I$,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(j$,"href","/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(D$,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(N$,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(q$,"href","/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(O$,"href","/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(G$,"href","/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(X$,"href","/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(V$,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(z$,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(W$,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Q$,"href","/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(H$,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(U$,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(J$,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Y$,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(K$,"href","/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(E1,"id","transformers.AutoModelForSeq2SeqLM"),c(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E1,"href","#transformers.AutoModelForSeq2SeqLM"),c(dd,"class","relative group"),c(Hr,"class","docstring"),c(Z$,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eI,"href","/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(oI,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(rI,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(tI,"href","/docs/transformers/pr_15907/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(aI,"href","/docs/transformers/pr_15907/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(nI,"href","/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(sI,"href","/docs/transformers/pr_15907/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(lI,"href","/docs/transformers/pr_15907/en/model_doc/marian#transformers.MarianMTModel"),c(iI,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(dI,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(cI,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(fI,"href","/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(mI,"href","/docs/transformers/pr_15907/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(gI,"href","/docs/transformers/pr_15907/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(hI,"href","/docs/transformers/pr_15907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Oe,"class","docstring"),c(er,"class","docstring"),c(G1,"id","transformers.AutoModelForSequenceClassification"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForSequenceClassification"),c(md,"class","relative group"),c(Ur,"class","docstring"),c(pI,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(_I,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForSequenceClassification"),c(uI,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForSequenceClassification"),c(bI,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(vI,"href","/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(TI,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(FI,"href","/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(CI,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(MI,"href","/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(EI,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(yI,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(wI,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(AI,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(LI,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(BI,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(xI,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(kI,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(RI,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(SI,"href","/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(PI,"href","/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c($I,"href","/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(II,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(jI,"href","/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(DI,"href","/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDForSequenceClassification"),c(NI,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(qI,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(OI,"href","/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(GI,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(XI,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(VI,"href","/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(zI,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(WI,"href","/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(QI,"href","/docs/transformers/pr_15907/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(HI,"href","/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(UI,"href","/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(JI,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(YI,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(KI,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ZI,"href","/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(ej,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(oj,"href","/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(rj,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(tj,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(aj,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(nj,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(sj,"href","/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ge,"class","docstring"),c(or,"class","docstring"),c(Ib,"id","transformers.AutoModelForMultipleChoice"),c(Ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ib,"href","#transformers.AutoModelForMultipleChoice"),c(pd,"class","relative group"),c(Jr,"class","docstring"),c(lj,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(ij,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dj,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cj,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fj,"href","/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mj,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gj,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hj,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(pj,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(_j,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(uj,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(bj,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(vj,"href","/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(Tj,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Fj,"href","/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Cj,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Mj,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(Ej,"href","/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(yj,"href","/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wj,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Aj,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Lj,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Bj,"href","/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xj,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(kj,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Rj,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Sj,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Pj,"href","/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(m5,"id","transformers.AutoModelForNextSentencePrediction"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.AutoModelForNextSentencePrediction"),c(bd,"class","relative group"),c(Yr,"class","docstring"),c($j,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Ij,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jj,"href","/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Dj,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Nj,"href","/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ve,"class","docstring"),c(tr,"class","docstring"),c(v5,"id","transformers.AutoModelForTokenClassification"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.AutoModelForTokenClassification"),c(Fd,"class","relative group"),c(Kr,"class","docstring"),c(qj,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Oj,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForTokenClassification"),c(Gj,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Xj,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Vj,"href","/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineForTokenClassification"),c(zj,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Wj,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Qj,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Hj,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Uj,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Jj,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Yj,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Kj,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Zj,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(eD,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(oD,"href","/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(rD,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(tD,"href","/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(aD,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(nD,"href","/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(sD,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(lD,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(iD,"href","/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(dD,"href","/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(cD,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(fD,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(mD,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(gD,"href","/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(hD,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(pD,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(_D,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(uD,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(bD,"href","/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ze,"class","docstring"),c(ar,"class","docstring"),c(e2,"id","transformers.AutoModelForQuestionAnswering"),c(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ed,"class","relative group"),c(Zr,"class","docstring"),c(vD,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(TD,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(FD,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(CD,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(MD,"href","/docs/transformers/pr_15907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(ED,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(yD,"href","/docs/transformers/pr_15907/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(wD,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(AD,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(LD,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(BD,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(xD,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(kD,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(RD,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(SD,"href","/docs/transformers/pr_15907/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(PD,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c($D,"href","/docs/transformers/pr_15907/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(ID,"href","/docs/transformers/pr_15907/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(jD,"href","/docs/transformers/pr_15907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(DD,"href","/docs/transformers/pr_15907/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ND,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(qD,"href","/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(OD,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(GD,"href","/docs/transformers/pr_15907/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(XD,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(VD,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zD,"href","/docs/transformers/pr_15907/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(WD,"href","/docs/transformers/pr_15907/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(QD,"href","/docs/transformers/pr_15907/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HD,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UD,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(JD,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(YD,"href","/docs/transformers/pr_15907/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(KD,"href","/docs/transformers/pr_15907/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ZD,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(eN,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(oN,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(rN,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(tN,"href","/docs/transformers/pr_15907/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(We,"class","docstring"),c(nr,"class","docstring"),c(O2,"id","transformers.AutoModelForTableQuestionAnswering"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ad,"class","relative group"),c(et,"class","docstring"),c(aN,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Qe,"class","docstring"),c(sr,"class","docstring"),c(V2,"id","transformers.AutoModelForImageClassification"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForImageClassification"),c(xd,"class","relative group"),c(ot,"class","docstring"),c(nN,"href","/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitForImageClassification"),c(sN,"href","/docs/transformers/pr_15907/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(lN,"href","/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTForImageClassification"),c(iN,"href","/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(dN,"href","/docs/transformers/pr_15907/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(cN,"href","/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(fN,"href","/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(mN,"href","/docs/transformers/pr_15907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(gN,"href","/docs/transformers/pr_15907/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(hN,"href","/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(pN,"href","/docs/transformers/pr_15907/en/model_doc/swin#transformers.SwinForImageClassification"),c(_N,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTForImageClassification"),c(He,"class","docstring"),c(lr,"class","docstring"),c(Z2,"id","transformers.AutoModelForVision2Seq"),c(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z2,"href","#transformers.AutoModelForVision2Seq"),c(Sd,"class","relative group"),c(rt,"class","docstring"),c(uN,"href","/docs/transformers/pr_15907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(rv,"id","transformers.AutoModelForAudioClassification"),c(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rv,"href","#transformers.AutoModelForAudioClassification"),c(Id,"class","relative group"),c(tt,"class","docstring"),c(bN,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(vN,"href","/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(TN,"href","/docs/transformers/pr_15907/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(FN,"href","/docs/transformers/pr_15907/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(CN,"href","/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(MN,"href","/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(EN,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(yN,"href","/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(mv,"id","transformers.AutoModelForAudioFrameClassification"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForAudioFrameClassification"),c(Nd,"class","relative group"),c(at,"class","docstring"),c(wN,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(AN,"href","/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(LN,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(BN,"href","/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ye,"class","docstring"),c(cr,"class","docstring"),c(bv,"id","transformers.AutoModelForCTC"),c(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bv,"href","#transformers.AutoModelForCTC"),c(Gd,"class","relative group"),c(nt,"class","docstring"),c(xN,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(kN,"href","/docs/transformers/pr_15907/en/model_doc/hubert#transformers.HubertForCTC"),c(RN,"href","/docs/transformers/pr_15907/en/model_doc/sew#transformers.SEWForCTC"),c(SN,"href","/docs/transformers/pr_15907/en/model_doc/sew-d#transformers.SEWDForCTC"),c(PN,"href","/docs/transformers/pr_15907/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($N,"href","/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(IN,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(jN,"href","/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ke,"class","docstring"),c(fr,"class","docstring"),c(Lv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(zd,"class","relative group"),c(st,"class","docstring"),c(DN,"href","/docs/transformers/pr_15907/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(NN,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(Ze,"class","docstring"),c(mr,"class","docstring"),c(Rv,"id","transformers.AutoModelForAudioXVector"),c(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rv,"href","#transformers.AutoModelForAudioXVector"),c(Hd,"class","relative group"),c(lt,"class","docstring"),c(qN,"href","/docs/transformers/pr_15907/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(ON,"href","/docs/transformers/pr_15907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(GN,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(XN,"href","/docs/transformers/pr_15907/en/model_doc/wavlm#transformers.WavLMForXVector"),c(eo,"class","docstring"),c(gr,"class","docstring"),c(Dv,"id","transformers.AutoModelForMaskedImageModeling"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Yd,"class","relative group"),c(it,"class","docstring"),c(VN,"href","/docs/transformers/pr_15907/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(zN,"href","/docs/transformers/pr_15907/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(WN,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(oo,"class","docstring"),c(hr,"class","docstring"),c(Xv,"id","transformers.AutoModelForObjectDetection"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForObjectDetection"),c(oc,"class","relative group"),c(dt,"class","docstring"),c(QN,"href","/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ro,"class","docstring"),c(pr,"class","docstring"),c(Wv,"id","transformers.AutoModelForImageSegmentation"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForImageSegmentation"),c(ac,"class","relative group"),c(ct,"class","docstring"),c(HN,"href","/docs/transformers/pr_15907/en/model_doc/detr#transformers.DetrForSegmentation"),c(to,"class","docstring"),c(_r,"class","docstring"),c(Uv,"id","transformers.AutoModelForSemanticSegmentation"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForSemanticSegmentation"),c(lc,"class","relative group"),c(ft,"class","docstring"),c(UN,"href","/docs/transformers/pr_15907/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(JN,"href","/docs/transformers/pr_15907/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ao,"class","docstring"),c(ur,"class","docstring"),c(Zv,"id","transformers.AutoModelForInstanceSegmentation"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForInstanceSegmentation"),c(cc,"class","relative group"),c(mt,"class","docstring"),c(YN,"href","/docs/transformers/pr_15907/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(no,"class","docstring"),c(br,"class","docstring"),c(r0,"id","transformers.TFAutoModel"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.TFAutoModel"),c(gc,"class","relative group"),c(gt,"class","docstring"),c(KN,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertModel"),c(ZN,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.TFBartModel"),c(eq,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertModel"),c(oq,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(rq,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(tq,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertModel"),c(aq,"href","/docs/transformers/pr_15907/en/model_doc/clip#transformers.TFCLIPModel"),c(nq,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertModel"),c(sq,"href","/docs/transformers/pr_15907/en/model_doc/convnext#transformers.TFConvNextModel"),c(lq,"href","/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.TFCTRLModel"),c(iq,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.TFDebertaModel"),c(dq,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(cq,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(fq,"href","/docs/transformers/pr_15907/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(mq,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraModel"),c(gq,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(hq,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelModel"),c(pq,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(_q,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.TFGPT2Model"),c(uq,"href","/docs/transformers/pr_15907/en/model_doc/hubert#transformers.TFHubertModel"),c(bq,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(vq,"href","/docs/transformers/pr_15907/en/model_doc/led#transformers.TFLEDModel"),c(Tq,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerModel"),c(Fq,"href","/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Cq,"href","/docs/transformers/pr_15907/en/model_doc/marian#transformers.TFMarianModel"),c(Mq,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.TFMBartModel"),c(Eq,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(yq,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetModel"),c(wq,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.TFMT5Model"),c(Aq,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Lq,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Bq,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertModel"),c(xq,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaModel"),c(kq,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Rq,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Sq,"href","/docs/transformers/pr_15907/en/model_doc/t5#transformers.TFT5Model"),c(Pq,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TFTapasModel"),c($q,"href","/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Iq,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.TFViTModel"),c(jq,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Dq,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMModel"),c(Nq,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(qq,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(vr,"class","docstring"),c(V0,"id","transformers.TFAutoModelForPreTraining"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.TFAutoModelForPreTraining"),c(_c,"class","relative group"),c(ht,"class","docstring"),c(Oq,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Gq,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Xq,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Vq,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(zq,"href","/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Wq,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Qq,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Hq,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Uq,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Jq,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Yq,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Kq,"href","/docs/transformers/pr_15907/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Zq,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(eO,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(oO,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rO,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(tO,"href","/docs/transformers/pr_15907/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(aO,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(nO,"href","/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(sO,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lO,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(iO,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Tr,"class","docstring"),c(gT,"id","transformers.TFAutoModelForCausalLM"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.TFAutoModelForCausalLM"),c(vc,"class","relative group"),c(pt,"class","docstring"),c(dO,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(cO,"href","/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fO,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(mO,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gO,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(hO,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(pO,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(_O,"href","/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uO,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bO,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(_o,"class","docstring"),c(Fr,"class","docstring"),c(ET,"id","transformers.TFAutoModelForImageClassification"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.TFAutoModelForImageClassification"),c(Cc,"class","relative group"),c(_t,"class","docstring"),c(vO,"href","/docs/transformers/pr_15907/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(TO,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.TFViTForImageClassification"),c(uo,"class","docstring"),c(Cr,"class","docstring"),c(AT,"id","transformers.TFAutoModelForMaskedLM"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.TFAutoModelForMaskedLM"),c(yc,"class","relative group"),c(ut,"class","docstring"),c(FO,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(CO,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(MO,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EO,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(yO,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(wO,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(AO,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(LO,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(BO,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(xO,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(kO,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(RO,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(SO,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(PO,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($O,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(IO,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(jO,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(DO,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NO,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qO,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Mr,"class","docstring"),c(HT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(bt,"class","docstring"),c(OO,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_15907/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(zO,"href","/docs/transformers/pr_15907/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_15907/en/model_doc/marian#transformers.TFMarianMTModel"),c(QO,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_15907/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(Er,"class","docstring"),c(n7,"id","transformers.TFAutoModelForSequenceClassification"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.TFAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(vt,"class","docstring"),c(YO,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(KO,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_15907/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(rG,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(tG,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(aG,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(sG,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(iG,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(dG,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(cG,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(fG,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(gG,"href","/docs/transformers/pr_15907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(hG,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(_G,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(uG,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(bG,"href","/docs/transformers/pr_15907/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(vG,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(TG,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(FG,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(yr,"class","docstring"),c(k7,"id","transformers.TFAutoModelForMultipleChoice"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.TFAutoModelForMultipleChoice"),c(Pc,"class","relative group"),c(Tt,"class","docstring"),c(CG,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(LG,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(BG,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(xG,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kG,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(SG,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c($G,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IG,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(jG,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(DG,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(wr,"class","docstring"),c(U7,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(U7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(jc,"class","relative group"),c(Ft,"class","docstring"),c(NG,"href","/docs/transformers/pr_15907/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Ar,"class","docstring"),c(Y7,"id","transformers.TFAutoModelForTokenClassification"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.TFAutoModelForTokenClassification"),c(qc,"class","relative group"),c(Ct,"class","docstring"),c(qG,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(OG,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(GG,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(XG,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(VG,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(zG,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(WG,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(QG,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(HG,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(UG,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(JG,"href","/docs/transformers/pr_15907/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(YG,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(KG,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(eX,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(oX,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(rX,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(tX,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(aX,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(nX,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Lr,"class","docstring"),c(bF,"id","transformers.TFAutoModelForQuestionAnswering"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(Mt,"class","docstring"),c(sX,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_15907/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_15907/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_15907/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_15907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_15907/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(pX,"href","/docs/transformers/pr_15907/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_15907/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_15907/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_15907/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_15907/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_15907/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(MX,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_15907/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(Br,"class","docstring"),c(DF,"id","transformers.TFAutoModelForVision2Seq"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.TFAutoModelForVision2Seq"),c(Wc,"class","relative group"),c(Et,"class","docstring"),c(yX,"href","/docs/transformers/pr_15907/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(xr,"class","docstring"),c(qF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Uc,"class","relative group"),c(yt,"class","docstring"),c(wX,"href","/docs/transformers/pr_15907/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(kr,"class","docstring"),c(GF,"id","transformers.FlaxAutoModel"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.FlaxAutoModel"),c(Kc,"class","relative group"),c(wt,"class","docstring"),c(AX,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertModel"),c(LX,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartModel"),c(BX,"href","/docs/transformers/pr_15907/en/model_doc/beit#transformers.FlaxBeitModel"),c(xX,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertModel"),c(kX,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(RX,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(SX,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(PX,"href","/docs/transformers/pr_15907/en/model_doc/clip#transformers.FlaxCLIPModel"),c($X,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(IX,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraModel"),c(jX,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(DX,"href","/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(NX,"href","/docs/transformers/pr_15907/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(qX,"href","/docs/transformers/pr_15907/en/model_doc/marian#transformers.FlaxMarianModel"),c(OX,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartModel"),c(GX,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.FlaxMT5Model"),c(XX,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(VX,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(zX,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(WX,"href","/docs/transformers/pr_15907/en/model_doc/t5#transformers.FlaxT5Model"),c(QX,"href","/docs/transformers/pr_15907/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(HX,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.FlaxViTModel"),c(UX,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(JX,"href","/docs/transformers/pr_15907/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(YX,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Rr,"class","docstring"),c(h9,"id","transformers.FlaxAutoModelForCausalLM"),c(h9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h9,"href","#transformers.FlaxAutoModelForCausalLM"),c(of,"class","relative group"),c(At,"class","docstring"),c(KX,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(ZX,"href","/docs/transformers/pr_15907/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(eV,"href","/docs/transformers/pr_15907/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(oV,"href","/docs/transformers/pr_15907/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(rV,"href","/docs/transformers/pr_15907/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Sr,"class","docstring"),c(T9,"id","transformers.FlaxAutoModelForPreTraining"),c(T9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T9,"href","#transformers.FlaxAutoModelForPreTraining"),c(af,"class","relative group"),c(Lt,"class","docstring"),c(tV,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(aV,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nV,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(sV,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(lV,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(iV,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dV,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fV,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mV,"href","/docs/transformers/pr_15907/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(gV,"href","/docs/transformers/pr_15907/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(hV,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c(Pr,"class","docstring"),c(S9,"id","transformers.FlaxAutoModelForMaskedLM"),c(S9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S9,"href","#transformers.FlaxAutoModelForMaskedLM"),c(lf,"class","relative group"),c(Bt,"class","docstring"),c(pV,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_V,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uV,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bV,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vV,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(TV,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(FV,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CV,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(MV,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(EV,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c($r,"class","docstring"),c(V9,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(V9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V9,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(ff,"class","relative group"),c(xt,"class","docstring"),c(yV,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(AV,"href","/docs/transformers/pr_15907/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_15907/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(BV,"href","/docs/transformers/pr_15907/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(xV,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_15907/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_15907/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_15907/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(Ir,"class","docstring"),c(eC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(hf,"class","relative group"),c(kt,"class","docstring"),c(PV,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c($V,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(IV,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(jV,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(DV,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(NV,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(qV,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(OV,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(GV,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(XV,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(jr,"class","docstring"),c(fC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(uf,"class","relative group"),c(Rt,"class","docstring"),c(VV,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_15907/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_15907/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(So,"class","docstring"),c(Dr,"class","docstring"),c(CC,"id","transformers.FlaxAutoModelForTokenClassification"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Tf,"class","relative group"),c(St,"class","docstring"),c(ez,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oz,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rz,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tz,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(az,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nz,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sz,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lz,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Po,"class","docstring"),c(Nr,"class","docstring"),c(kC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Mf,"class","relative group"),c(Pt,"class","docstring"),c(iz,"href","/docs/transformers/pr_15907/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_15907/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(fz,"href","/docs/transformers/pr_15907/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_15907/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(gz,"href","/docs/transformers/pr_15907/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(hz,"href","/docs/transformers/pr_15907/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(pz,"href","/docs/transformers/pr_15907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c($o,"class","docstring"),c(qr,"class","docstring"),c(qC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(wf,"class","relative group"),c($t,"class","docstring"),c(_z,"href","/docs/transformers/pr_15907/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Io,"class","docstring"),c(Or,"class","docstring"),c(GC,"id","transformers.FlaxAutoModelForImageClassification"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Bf,"class","relative group"),c(It,"class","docstring"),c(uz,"href","/docs/transformers/pr_15907/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(bz,"href","/docs/transformers/pr_15907/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(jo,"class","docstring"),c(Gr,"class","docstring"),c(zC,"id","transformers.FlaxAutoModelForVision2Seq"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Rf,"class","relative group"),c(jt,"class","docstring"),c(vz,"href","/docs/transformers/pr_15907/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Do,"class","docstring"),c(Xr,"class","docstring")},m(d,u){e(document.head,J),b(d,Pe,u),b(d,de,u),e(de,ge),e(ge,io),g(fe,io,null),e(de,Te),e(de,Vo),e(Vo,ji),b(d,If,u),b(d,fa,u),e(fa,Di),e(fa,Ni),e(Ni,WM),e(fa,jf),b(d,Le,u),b(d,co,u),e(co,qi),e(co,On),e(On,QM),e(co,Gn),e(co,Xn),e(Xn,HM),e(co,Oi),e(co,Vn),e(Vn,UM),e(co,Gi),b(d,Df,u),g(qa,d,u),b(d,fo,u),b(d,he,u),e(he,NL),e(he,Xi),e(Xi,qL),e(he,OL),b(d,zo,u),b(d,Oa,u),e(Oa,GL),e(Oa,Nf),e(Nf,XL),e(Oa,_Pe),b(d,rxe,u),b(d,Vi,u),e(Vi,qf),e(qf,mQ),g(JM,mQ,null),e(Vi,uPe),e(Vi,gQ),e(gQ,bPe),b(d,txe,u),b(d,zn,u),e(zn,vPe),e(zn,hQ),e(hQ,TPe),e(zn,FPe),e(zn,pQ),e(pQ,CPe),e(zn,MPe),b(d,axe,u),g(YM,d,u),b(d,nxe,u),b(d,VL,u),e(VL,EPe),b(d,sxe,u),g(Of,d,u),b(d,lxe,u),b(d,zi,u),e(zi,Gf),e(Gf,_Q),g(KM,_Q,null),e(zi,yPe),e(zi,uQ),e(uQ,wPe),b(d,ixe,u),b(d,Wo,u),g(ZM,Wo,null),e(Wo,APe),e(Wo,e4),e(e4,LPe),e(e4,zL),e(zL,BPe),e(e4,xPe),e(Wo,kPe),e(Wo,o4),e(o4,RPe),e(o4,bQ),e(bQ,SPe),e(o4,PPe),e(Wo,$Pe),e(Wo,mo),g(r4,mo,null),e(mo,IPe),e(mo,vQ),e(vQ,jPe),e(mo,DPe),e(mo,Wi),e(Wi,NPe),e(Wi,TQ),e(TQ,qPe),e(Wi,OPe),e(Wi,FQ),e(FQ,GPe),e(Wi,XPe),e(mo,VPe),e(mo,v),e(v,Xf),e(Xf,CQ),e(CQ,zPe),e(Xf,WPe),e(Xf,WL),e(WL,QPe),e(Xf,HPe),e(v,UPe),e(v,Vf),e(Vf,MQ),e(MQ,JPe),e(Vf,YPe),e(Vf,QL),e(QL,KPe),e(Vf,ZPe),e(v,e$e),e(v,zf),e(zf,EQ),e(EQ,o$e),e(zf,r$e),e(zf,HL),e(HL,t$e),e(zf,a$e),e(v,n$e),e(v,Wf),e(Wf,yQ),e(yQ,s$e),e(Wf,l$e),e(Wf,UL),e(UL,i$e),e(Wf,d$e),e(v,c$e),e(v,Qf),e(Qf,wQ),e(wQ,f$e),e(Qf,m$e),e(Qf,JL),e(JL,g$e),e(Qf,h$e),e(v,p$e),e(v,Hf),e(Hf,AQ),e(AQ,_$e),e(Hf,u$e),e(Hf,YL),e(YL,b$e),e(Hf,v$e),e(v,T$e),e(v,Uf),e(Uf,LQ),e(LQ,F$e),e(Uf,C$e),e(Uf,KL),e(KL,M$e),e(Uf,E$e),e(v,y$e),e(v,Jf),e(Jf,BQ),e(BQ,w$e),e(Jf,A$e),e(Jf,ZL),e(ZL,L$e),e(Jf,B$e),e(v,x$e),e(v,Yf),e(Yf,xQ),e(xQ,k$e),e(Yf,R$e),e(Yf,e8),e(e8,S$e),e(Yf,P$e),e(v,$$e),e(v,Kf),e(Kf,kQ),e(kQ,I$e),e(Kf,j$e),e(Kf,o8),e(o8,D$e),e(Kf,N$e),e(v,q$e),e(v,Zf),e(Zf,RQ),e(RQ,O$e),e(Zf,G$e),e(Zf,r8),e(r8,X$e),e(Zf,V$e),e(v,z$e),e(v,em),e(em,SQ),e(SQ,W$e),e(em,Q$e),e(em,t8),e(t8,H$e),e(em,U$e),e(v,J$e),e(v,om),e(om,PQ),e(PQ,Y$e),e(om,K$e),e(om,a8),e(a8,Z$e),e(om,eIe),e(v,oIe),e(v,rm),e(rm,$Q),e($Q,rIe),e(rm,tIe),e(rm,n8),e(n8,aIe),e(rm,nIe),e(v,sIe),e(v,tm),e(tm,IQ),e(IQ,lIe),e(tm,iIe),e(tm,s8),e(s8,dIe),e(tm,cIe),e(v,fIe),e(v,am),e(am,jQ),e(jQ,mIe),e(am,gIe),e(am,l8),e(l8,hIe),e(am,pIe),e(v,_Ie),e(v,nm),e(nm,DQ),e(DQ,uIe),e(nm,bIe),e(nm,i8),e(i8,vIe),e(nm,TIe),e(v,FIe),e(v,sm),e(sm,NQ),e(NQ,CIe),e(sm,MIe),e(sm,d8),e(d8,EIe),e(sm,yIe),e(v,wIe),e(v,lm),e(lm,qQ),e(qQ,AIe),e(lm,LIe),e(lm,c8),e(c8,BIe),e(lm,xIe),e(v,kIe),e(v,im),e(im,OQ),e(OQ,RIe),e(im,SIe),e(im,f8),e(f8,PIe),e(im,$Ie),e(v,IIe),e(v,dm),e(dm,GQ),e(GQ,jIe),e(dm,DIe),e(dm,m8),e(m8,NIe),e(dm,qIe),e(v,OIe),e(v,cm),e(cm,XQ),e(XQ,GIe),e(cm,XIe),e(cm,g8),e(g8,VIe),e(cm,zIe),e(v,WIe),e(v,fm),e(fm,VQ),e(VQ,QIe),e(fm,HIe),e(fm,h8),e(h8,UIe),e(fm,JIe),e(v,YIe),e(v,mm),e(mm,zQ),e(zQ,KIe),e(mm,ZIe),e(mm,p8),e(p8,eje),e(mm,oje),e(v,rje),e(v,gm),e(gm,WQ),e(WQ,tje),e(gm,aje),e(gm,_8),e(_8,nje),e(gm,sje),e(v,lje),e(v,hm),e(hm,QQ),e(QQ,ije),e(hm,dje),e(hm,u8),e(u8,cje),e(hm,fje),e(v,mje),e(v,pm),e(pm,HQ),e(HQ,gje),e(pm,hje),e(pm,b8),e(b8,pje),e(pm,_je),e(v,uje),e(v,_m),e(_m,UQ),e(UQ,bje),e(_m,vje),e(_m,v8),e(v8,Tje),e(_m,Fje),e(v,Cje),e(v,um),e(um,JQ),e(JQ,Mje),e(um,Eje),e(um,T8),e(T8,yje),e(um,wje),e(v,Aje),e(v,bm),e(bm,YQ),e(YQ,Lje),e(bm,Bje),e(bm,F8),e(F8,xje),e(bm,kje),e(v,Rje),e(v,vm),e(vm,KQ),e(KQ,Sje),e(vm,Pje),e(vm,C8),e(C8,$je),e(vm,Ije),e(v,jje),e(v,Tm),e(Tm,ZQ),e(ZQ,Dje),e(Tm,Nje),e(Tm,M8),e(M8,qje),e(Tm,Oje),e(v,Gje),e(v,Fm),e(Fm,eH),e(eH,Xje),e(Fm,Vje),e(Fm,E8),e(E8,zje),e(Fm,Wje),e(v,Qje),e(v,Cm),e(Cm,oH),e(oH,Hje),e(Cm,Uje),e(Cm,y8),e(y8,Jje),e(Cm,Yje),e(v,Kje),e(v,Mm),e(Mm,rH),e(rH,Zje),e(Mm,eDe),e(Mm,w8),e(w8,oDe),e(Mm,rDe),e(v,tDe),e(v,Em),e(Em,tH),e(tH,aDe),e(Em,nDe),e(Em,A8),e(A8,sDe),e(Em,lDe),e(v,iDe),e(v,ym),e(ym,aH),e(aH,dDe),e(ym,cDe),e(ym,L8),e(L8,fDe),e(ym,mDe),e(v,gDe),e(v,wm),e(wm,nH),e(nH,hDe),e(wm,pDe),e(wm,B8),e(B8,_De),e(wm,uDe),e(v,bDe),e(v,Am),e(Am,sH),e(sH,vDe),e(Am,TDe),e(Am,x8),e(x8,FDe),e(Am,CDe),e(v,MDe),e(v,Lm),e(Lm,lH),e(lH,EDe),e(Lm,yDe),e(Lm,k8),e(k8,wDe),e(Lm,ADe),e(v,LDe),e(v,Bm),e(Bm,iH),e(iH,BDe),e(Bm,xDe),e(Bm,R8),e(R8,kDe),e(Bm,RDe),e(v,SDe),e(v,xm),e(xm,dH),e(dH,PDe),e(xm,$De),e(xm,S8),e(S8,IDe),e(xm,jDe),e(v,DDe),e(v,km),e(km,cH),e(cH,NDe),e(km,qDe),e(km,P8),e(P8,ODe),e(km,GDe),e(v,XDe),e(v,Rm),e(Rm,fH),e(fH,VDe),e(Rm,zDe),e(Rm,$8),e($8,WDe),e(Rm,QDe),e(v,HDe),e(v,Sm),e(Sm,mH),e(mH,UDe),e(Sm,JDe),e(Sm,I8),e(I8,YDe),e(Sm,KDe),e(v,ZDe),e(v,Pm),e(Pm,gH),e(gH,eNe),e(Pm,oNe),e(Pm,j8),e(j8,rNe),e(Pm,tNe),e(v,aNe),e(v,$m),e($m,hH),e(hH,nNe),e($m,sNe),e($m,D8),e(D8,lNe),e($m,iNe),e(v,dNe),e(v,Im),e(Im,pH),e(pH,cNe),e(Im,fNe),e(Im,N8),e(N8,mNe),e(Im,gNe),e(v,hNe),e(v,jm),e(jm,_H),e(_H,pNe),e(jm,_Ne),e(jm,q8),e(q8,uNe),e(jm,bNe),e(v,vNe),e(v,Dm),e(Dm,uH),e(uH,TNe),e(Dm,FNe),e(Dm,O8),e(O8,CNe),e(Dm,MNe),e(v,ENe),e(v,Nm),e(Nm,bH),e(bH,yNe),e(Nm,wNe),e(Nm,G8),e(G8,ANe),e(Nm,LNe),e(v,BNe),e(v,qm),e(qm,vH),e(vH,xNe),e(qm,kNe),e(qm,X8),e(X8,RNe),e(qm,SNe),e(v,PNe),e(v,Om),e(Om,TH),e(TH,$Ne),e(Om,INe),e(Om,V8),e(V8,jNe),e(Om,DNe),e(v,NNe),e(v,Gm),e(Gm,FH),e(FH,qNe),e(Gm,ONe),e(Gm,z8),e(z8,GNe),e(Gm,XNe),e(v,VNe),e(v,Xm),e(Xm,CH),e(CH,zNe),e(Xm,WNe),e(Xm,W8),e(W8,QNe),e(Xm,HNe),e(v,UNe),e(v,Vm),e(Vm,MH),e(MH,JNe),e(Vm,YNe),e(Vm,Q8),e(Q8,KNe),e(Vm,ZNe),e(v,eqe),e(v,zm),e(zm,EH),e(EH,oqe),e(zm,rqe),e(zm,H8),e(H8,tqe),e(zm,aqe),e(v,nqe),e(v,Wm),e(Wm,yH),e(yH,sqe),e(Wm,lqe),e(Wm,U8),e(U8,iqe),e(Wm,dqe),e(v,cqe),e(v,Qm),e(Qm,wH),e(wH,fqe),e(Qm,mqe),e(Qm,J8),e(J8,gqe),e(Qm,hqe),e(v,pqe),e(v,Hm),e(Hm,AH),e(AH,_qe),e(Hm,uqe),e(Hm,Y8),e(Y8,bqe),e(Hm,vqe),e(v,Tqe),e(v,Um),e(Um,LH),e(LH,Fqe),e(Um,Cqe),e(Um,K8),e(K8,Mqe),e(Um,Eqe),e(v,yqe),e(v,Jm),e(Jm,BH),e(BH,wqe),e(Jm,Aqe),e(Jm,Z8),e(Z8,Lqe),e(Jm,Bqe),e(v,xqe),e(v,Ym),e(Ym,xH),e(xH,kqe),e(Ym,Rqe),e(Ym,eB),e(eB,Sqe),e(Ym,Pqe),e(v,$qe),e(v,Km),e(Km,kH),e(kH,Iqe),e(Km,jqe),e(Km,oB),e(oB,Dqe),e(Km,Nqe),e(v,qqe),e(v,Zm),e(Zm,RH),e(RH,Oqe),e(Zm,Gqe),e(Zm,rB),e(rB,Xqe),e(Zm,Vqe),e(v,zqe),e(v,eg),e(eg,SH),e(SH,Wqe),e(eg,Qqe),e(eg,tB),e(tB,Hqe),e(eg,Uqe),e(v,Jqe),e(v,og),e(og,PH),e(PH,Yqe),e(og,Kqe),e(og,aB),e(aB,Zqe),e(og,eOe),e(v,oOe),e(v,rg),e(rg,$H),e($H,rOe),e(rg,tOe),e(rg,nB),e(nB,aOe),e(rg,nOe),e(v,sOe),e(v,tg),e(tg,IH),e(IH,lOe),e(tg,iOe),e(tg,sB),e(sB,dOe),e(tg,cOe),e(v,fOe),e(v,ag),e(ag,jH),e(jH,mOe),e(ag,gOe),e(ag,lB),e(lB,hOe),e(ag,pOe),e(v,_Oe),e(v,ng),e(ng,DH),e(DH,uOe),e(ng,bOe),e(ng,iB),e(iB,vOe),e(ng,TOe),e(v,FOe),e(v,sg),e(sg,NH),e(NH,COe),e(sg,MOe),e(sg,dB),e(dB,EOe),e(sg,yOe),e(v,wOe),e(v,lg),e(lg,qH),e(qH,AOe),e(lg,LOe),e(lg,cB),e(cB,BOe),e(lg,xOe),e(v,kOe),e(v,ig),e(ig,OH),e(OH,ROe),e(ig,SOe),e(ig,fB),e(fB,POe),e(ig,$Oe),e(v,IOe),e(v,dg),e(dg,GH),e(GH,jOe),e(dg,DOe),e(dg,mB),e(mB,NOe),e(dg,qOe),e(v,OOe),e(v,cg),e(cg,XH),e(XH,GOe),e(cg,XOe),e(cg,gB),e(gB,VOe),e(cg,zOe),e(v,WOe),e(v,fg),e(fg,VH),e(VH,QOe),e(fg,HOe),e(fg,hB),e(hB,UOe),e(fg,JOe),e(v,YOe),e(v,mg),e(mg,zH),e(zH,KOe),e(mg,ZOe),e(mg,pB),e(pB,eGe),e(mg,oGe),e(v,rGe),e(v,gg),e(gg,WH),e(WH,tGe),e(gg,aGe),e(gg,_B),e(_B,nGe),e(gg,sGe),e(v,lGe),e(v,hg),e(hg,QH),e(QH,iGe),e(hg,dGe),e(hg,uB),e(uB,cGe),e(hg,fGe),e(v,mGe),e(v,pg),e(pg,HH),e(HH,gGe),e(pg,hGe),e(pg,bB),e(bB,pGe),e(pg,_Ge),e(v,uGe),e(v,_g),e(_g,UH),e(UH,bGe),e(_g,vGe),e(_g,vB),e(vB,TGe),e(_g,FGe),e(v,CGe),e(v,ug),e(ug,JH),e(JH,MGe),e(ug,EGe),e(ug,TB),e(TB,yGe),e(ug,wGe),e(v,AGe),e(v,bg),e(bg,YH),e(YH,LGe),e(bg,BGe),e(bg,FB),e(FB,xGe),e(bg,kGe),e(v,RGe),e(v,vg),e(vg,KH),e(KH,SGe),e(vg,PGe),e(vg,CB),e(CB,$Ge),e(vg,IGe),e(v,jGe),e(v,Tg),e(Tg,ZH),e(ZH,DGe),e(Tg,NGe),e(Tg,MB),e(MB,qGe),e(Tg,OGe),e(v,GGe),e(v,Fg),e(Fg,eU),e(eU,XGe),e(Fg,VGe),e(Fg,EB),e(EB,zGe),e(Fg,WGe),e(v,QGe),e(v,Cg),e(Cg,oU),e(oU,HGe),e(Cg,UGe),e(Cg,yB),e(yB,JGe),e(Cg,YGe),e(v,KGe),e(v,Mg),e(Mg,rU),e(rU,ZGe),e(Mg,eXe),e(Mg,wB),e(wB,oXe),e(Mg,rXe),e(v,tXe),e(v,Eg),e(Eg,tU),e(tU,aXe),e(Eg,nXe),e(Eg,AB),e(AB,sXe),e(Eg,lXe),e(v,iXe),e(v,yg),e(yg,aU),e(aU,dXe),e(yg,cXe),e(yg,LB),e(LB,fXe),e(yg,mXe),e(v,gXe),e(v,wg),e(wg,nU),e(nU,hXe),e(wg,pXe),e(wg,BB),e(BB,_Xe),e(wg,uXe),e(v,bXe),e(v,Ag),e(Ag,sU),e(sU,vXe),e(Ag,TXe),e(Ag,xB),e(xB,FXe),e(Ag,CXe),e(v,MXe),e(v,Lg),e(Lg,lU),e(lU,EXe),e(Lg,yXe),e(Lg,kB),e(kB,wXe),e(Lg,AXe),e(mo,LXe),e(mo,iU),e(iU,BXe),e(mo,xXe),g(t4,mo,null),e(Wo,kXe),e(Wo,Bg),g(a4,Bg,null),e(Bg,RXe),e(Bg,dU),e(dU,SXe),b(d,dxe,u),b(d,Qi,u),e(Qi,xg),e(xg,cU),g(n4,cU,null),e(Qi,PXe),e(Qi,fU),e(fU,$Xe),b(d,cxe,u),b(d,Qo,u),g(s4,Qo,null),e(Qo,IXe),e(Qo,l4),e(l4,jXe),e(l4,RB),e(RB,DXe),e(l4,NXe),e(Qo,qXe),e(Qo,i4),e(i4,OXe),e(i4,mU),e(mU,GXe),e(i4,XXe),e(Qo,VXe),e(Qo,go),g(d4,go,null),e(go,zXe),e(go,gU),e(gU,WXe),e(go,QXe),e(go,Ga),e(Ga,HXe),e(Ga,hU),e(hU,UXe),e(Ga,JXe),e(Ga,pU),e(pU,YXe),e(Ga,KXe),e(Ga,_U),e(_U,ZXe),e(Ga,eVe),e(go,oVe),e(go,E),e(E,Wn),e(Wn,uU),e(uU,rVe),e(Wn,tVe),e(Wn,SB),e(SB,aVe),e(Wn,nVe),e(Wn,PB),e(PB,sVe),e(Wn,lVe),e(E,iVe),e(E,Qn),e(Qn,bU),e(bU,dVe),e(Qn,cVe),e(Qn,$B),e($B,fVe),e(Qn,mVe),e(Qn,IB),e(IB,gVe),e(Qn,hVe),e(E,pVe),e(E,Hn),e(Hn,vU),e(vU,_Ve),e(Hn,uVe),e(Hn,jB),e(jB,bVe),e(Hn,vVe),e(Hn,DB),e(DB,TVe),e(Hn,FVe),e(E,CVe),e(E,kg),e(kg,TU),e(TU,MVe),e(kg,EVe),e(kg,NB),e(NB,yVe),e(kg,wVe),e(E,AVe),e(E,Un),e(Un,FU),e(FU,LVe),e(Un,BVe),e(Un,qB),e(qB,xVe),e(Un,kVe),e(Un,OB),e(OB,RVe),e(Un,SVe),e(E,PVe),e(E,Rg),e(Rg,CU),e(CU,$Ve),e(Rg,IVe),e(Rg,GB),e(GB,jVe),e(Rg,DVe),e(E,NVe),e(E,Sg),e(Sg,MU),e(MU,qVe),e(Sg,OVe),e(Sg,XB),e(XB,GVe),e(Sg,XVe),e(E,VVe),e(E,Pg),e(Pg,EU),e(EU,zVe),e(Pg,WVe),e(Pg,VB),e(VB,QVe),e(Pg,HVe),e(E,UVe),e(E,Jn),e(Jn,yU),e(yU,JVe),e(Jn,YVe),e(Jn,zB),e(zB,KVe),e(Jn,ZVe),e(Jn,WB),e(WB,eze),e(Jn,oze),e(E,rze),e(E,Yn),e(Yn,wU),e(wU,tze),e(Yn,aze),e(Yn,QB),e(QB,nze),e(Yn,sze),e(Yn,HB),e(HB,lze),e(Yn,ize),e(E,dze),e(E,Kn),e(Kn,AU),e(AU,cze),e(Kn,fze),e(Kn,UB),e(UB,mze),e(Kn,gze),e(Kn,JB),e(JB,hze),e(Kn,pze),e(E,_ze),e(E,$g),e($g,LU),e(LU,uze),e($g,bze),e($g,YB),e(YB,vze),e($g,Tze),e(E,Fze),e(E,Ig),e(Ig,BU),e(BU,Cze),e(Ig,Mze),e(Ig,KB),e(KB,Eze),e(Ig,yze),e(E,wze),e(E,Zn),e(Zn,xU),e(xU,Aze),e(Zn,Lze),e(Zn,ZB),e(ZB,Bze),e(Zn,xze),e(Zn,ex),e(ex,kze),e(Zn,Rze),e(E,Sze),e(E,jg),e(jg,kU),e(kU,Pze),e(jg,$ze),e(jg,ox),e(ox,Ize),e(jg,jze),e(E,Dze),e(E,es),e(es,RU),e(RU,Nze),e(es,qze),e(es,rx),e(rx,Oze),e(es,Gze),e(es,tx),e(tx,Xze),e(es,Vze),e(E,zze),e(E,os),e(os,SU),e(SU,Wze),e(os,Qze),e(os,ax),e(ax,Hze),e(os,Uze),e(os,nx),e(nx,Jze),e(os,Yze),e(E,Kze),e(E,rs),e(rs,PU),e(PU,Zze),e(rs,eWe),e(rs,sx),e(sx,oWe),e(rs,rWe),e(rs,$U),e($U,tWe),e(rs,aWe),e(E,nWe),e(E,Dg),e(Dg,IU),e(IU,sWe),e(Dg,lWe),e(Dg,lx),e(lx,iWe),e(Dg,dWe),e(E,cWe),e(E,ts),e(ts,jU),e(jU,fWe),e(ts,mWe),e(ts,ix),e(ix,gWe),e(ts,hWe),e(ts,dx),e(dx,pWe),e(ts,_We),e(E,uWe),e(E,Ng),e(Ng,DU),e(DU,bWe),e(Ng,vWe),e(Ng,cx),e(cx,TWe),e(Ng,FWe),e(E,CWe),e(E,as),e(as,NU),e(NU,MWe),e(as,EWe),e(as,fx),e(fx,yWe),e(as,wWe),e(as,mx),e(mx,AWe),e(as,LWe),e(E,BWe),e(E,ns),e(ns,qU),e(qU,xWe),e(ns,kWe),e(ns,gx),e(gx,RWe),e(ns,SWe),e(ns,hx),e(hx,PWe),e(ns,$We),e(E,IWe),e(E,ss),e(ss,OU),e(OU,jWe),e(ss,DWe),e(ss,px),e(px,NWe),e(ss,qWe),e(ss,_x),e(_x,OWe),e(ss,GWe),e(E,XWe),e(E,qg),e(qg,GU),e(GU,VWe),e(qg,zWe),e(qg,ux),e(ux,WWe),e(qg,QWe),e(E,HWe),e(E,ls),e(ls,XU),e(XU,UWe),e(ls,JWe),e(ls,bx),e(bx,YWe),e(ls,KWe),e(ls,vx),e(vx,ZWe),e(ls,eQe),e(E,oQe),e(E,Og),e(Og,VU),e(VU,rQe),e(Og,tQe),e(Og,Tx),e(Tx,aQe),e(Og,nQe),e(E,sQe),e(E,is),e(is,zU),e(zU,lQe),e(is,iQe),e(is,Fx),e(Fx,dQe),e(is,cQe),e(is,Cx),e(Cx,fQe),e(is,mQe),e(E,gQe),e(E,ds),e(ds,WU),e(WU,hQe),e(ds,pQe),e(ds,Mx),e(Mx,_Qe),e(ds,uQe),e(ds,Ex),e(Ex,bQe),e(ds,vQe),e(E,TQe),e(E,cs),e(cs,QU),e(QU,FQe),e(cs,CQe),e(cs,yx),e(yx,MQe),e(cs,EQe),e(cs,wx),e(wx,yQe),e(cs,wQe),e(E,AQe),e(E,fs),e(fs,HU),e(HU,LQe),e(fs,BQe),e(fs,Ax),e(Ax,xQe),e(fs,kQe),e(fs,Lx),e(Lx,RQe),e(fs,SQe),e(E,PQe),e(E,Gg),e(Gg,UU),e(UU,$Qe),e(Gg,IQe),e(Gg,Bx),e(Bx,jQe),e(Gg,DQe),e(E,NQe),e(E,ms),e(ms,JU),e(JU,qQe),e(ms,OQe),e(ms,xx),e(xx,GQe),e(ms,XQe),e(ms,kx),e(kx,VQe),e(ms,zQe),e(E,WQe),e(E,gs),e(gs,YU),e(YU,QQe),e(gs,HQe),e(gs,Rx),e(Rx,UQe),e(gs,JQe),e(gs,Sx),e(Sx,YQe),e(gs,KQe),e(E,ZQe),e(E,hs),e(hs,KU),e(KU,eHe),e(hs,oHe),e(hs,Px),e(Px,rHe),e(hs,tHe),e(hs,$x),e($x,aHe),e(hs,nHe),e(E,sHe),e(E,ps),e(ps,ZU),e(ZU,lHe),e(ps,iHe),e(ps,Ix),e(Ix,dHe),e(ps,cHe),e(ps,jx),e(jx,fHe),e(ps,mHe),e(E,gHe),e(E,_s),e(_s,eJ),e(eJ,hHe),e(_s,pHe),e(_s,Dx),e(Dx,_He),e(_s,uHe),e(_s,Nx),e(Nx,bHe),e(_s,vHe),e(E,THe),e(E,us),e(us,oJ),e(oJ,FHe),e(us,CHe),e(us,qx),e(qx,MHe),e(us,EHe),e(us,Ox),e(Ox,yHe),e(us,wHe),e(E,AHe),e(E,Xg),e(Xg,rJ),e(rJ,LHe),e(Xg,BHe),e(Xg,Gx),e(Gx,xHe),e(Xg,kHe),e(E,RHe),e(E,bs),e(bs,tJ),e(tJ,SHe),e(bs,PHe),e(bs,Xx),e(Xx,$He),e(bs,IHe),e(bs,Vx),e(Vx,jHe),e(bs,DHe),e(E,NHe),e(E,Vg),e(Vg,aJ),e(aJ,qHe),e(Vg,OHe),e(Vg,zx),e(zx,GHe),e(Vg,XHe),e(E,VHe),e(E,zg),e(zg,nJ),e(nJ,zHe),e(zg,WHe),e(zg,Wx),e(Wx,QHe),e(zg,HHe),e(E,UHe),e(E,vs),e(vs,sJ),e(sJ,JHe),e(vs,YHe),e(vs,Qx),e(Qx,KHe),e(vs,ZHe),e(vs,Hx),e(Hx,eUe),e(vs,oUe),e(E,rUe),e(E,Ts),e(Ts,lJ),e(lJ,tUe),e(Ts,aUe),e(Ts,Ux),e(Ux,nUe),e(Ts,sUe),e(Ts,Jx),e(Jx,lUe),e(Ts,iUe),e(E,dUe),e(E,Wg),e(Wg,iJ),e(iJ,cUe),e(Wg,fUe),e(Wg,Yx),e(Yx,mUe),e(Wg,gUe),e(E,hUe),e(E,Fs),e(Fs,dJ),e(dJ,pUe),e(Fs,_Ue),e(Fs,Kx),e(Kx,uUe),e(Fs,bUe),e(Fs,Zx),e(Zx,vUe),e(Fs,TUe),e(E,FUe),e(E,Cs),e(Cs,cJ),e(cJ,CUe),e(Cs,MUe),e(Cs,ek),e(ek,EUe),e(Cs,yUe),e(Cs,ok),e(ok,wUe),e(Cs,AUe),e(E,LUe),e(E,Ms),e(Ms,fJ),e(fJ,BUe),e(Ms,xUe),e(Ms,rk),e(rk,kUe),e(Ms,RUe),e(Ms,tk),e(tk,SUe),e(Ms,PUe),e(E,$Ue),e(E,Es),e(Es,mJ),e(mJ,IUe),e(Es,jUe),e(Es,ak),e(ak,DUe),e(Es,NUe),e(Es,nk),e(nk,qUe),e(Es,OUe),e(E,GUe),e(E,ys),e(ys,gJ),e(gJ,XUe),e(ys,VUe),e(ys,sk),e(sk,zUe),e(ys,WUe),e(ys,lk),e(lk,QUe),e(ys,HUe),e(E,UUe),e(E,Qg),e(Qg,hJ),e(hJ,JUe),e(Qg,YUe),e(Qg,ik),e(ik,KUe),e(Qg,ZUe),e(E,eJe),e(E,Hg),e(Hg,pJ),e(pJ,oJe),e(Hg,rJe),e(Hg,dk),e(dk,tJe),e(Hg,aJe),e(E,nJe),e(E,Ug),e(Ug,_J),e(_J,sJe),e(Ug,lJe),e(Ug,ck),e(ck,iJe),e(Ug,dJe),e(E,cJe),e(E,Jg),e(Jg,uJ),e(uJ,fJe),e(Jg,mJe),e(Jg,fk),e(fk,gJe),e(Jg,hJe),e(E,pJe),e(E,ws),e(ws,bJ),e(bJ,_Je),e(ws,uJe),e(ws,mk),e(mk,bJe),e(ws,vJe),e(ws,gk),e(gk,TJe),e(ws,FJe),e(E,CJe),e(E,Yg),e(Yg,vJ),e(vJ,MJe),e(Yg,EJe),e(Yg,hk),e(hk,yJe),e(Yg,wJe),e(E,AJe),e(E,As),e(As,TJ),e(TJ,LJe),e(As,BJe),e(As,pk),e(pk,xJe),e(As,kJe),e(As,_k),e(_k,RJe),e(As,SJe),e(E,PJe),e(E,Ls),e(Ls,FJ),e(FJ,$Je),e(Ls,IJe),e(Ls,uk),e(uk,jJe),e(Ls,DJe),e(Ls,bk),e(bk,NJe),e(Ls,qJe),e(E,OJe),e(E,Bs),e(Bs,CJ),e(CJ,GJe),e(Bs,XJe),e(Bs,vk),e(vk,VJe),e(Bs,zJe),e(Bs,Tk),e(Tk,WJe),e(Bs,QJe),e(E,HJe),e(E,xs),e(xs,MJ),e(MJ,UJe),e(xs,JJe),e(xs,Fk),e(Fk,YJe),e(xs,KJe),e(xs,Ck),e(Ck,ZJe),e(xs,eYe),e(E,oYe),e(E,ks),e(ks,EJ),e(EJ,rYe),e(ks,tYe),e(ks,Mk),e(Mk,aYe),e(ks,nYe),e(ks,Ek),e(Ek,sYe),e(ks,lYe),e(E,iYe),e(E,Rs),e(Rs,yJ),e(yJ,dYe),e(Rs,cYe),e(Rs,yk),e(yk,fYe),e(Rs,mYe),e(Rs,wk),e(wk,gYe),e(Rs,hYe),e(E,pYe),e(E,Kg),e(Kg,wJ),e(wJ,_Ye),e(Kg,uYe),e(Kg,Ak),e(Ak,bYe),e(Kg,vYe),e(E,TYe),e(E,Zg),e(Zg,AJ),e(AJ,FYe),e(Zg,CYe),e(Zg,Lk),e(Lk,MYe),e(Zg,EYe),e(E,yYe),e(E,Ss),e(Ss,LJ),e(LJ,wYe),e(Ss,AYe),e(Ss,Bk),e(Bk,LYe),e(Ss,BYe),e(Ss,xk),e(xk,xYe),e(Ss,kYe),e(E,RYe),e(E,Ps),e(Ps,BJ),e(BJ,SYe),e(Ps,PYe),e(Ps,kk),e(kk,$Ye),e(Ps,IYe),e(Ps,Rk),e(Rk,jYe),e(Ps,DYe),e(E,NYe),e(E,$s),e($s,xJ),e(xJ,qYe),e($s,OYe),e($s,Sk),e(Sk,GYe),e($s,XYe),e($s,Pk),e(Pk,VYe),e($s,zYe),e(E,WYe),e(E,eh),e(eh,kJ),e(kJ,QYe),e(eh,HYe),e(eh,$k),e($k,UYe),e(eh,JYe),e(E,YYe),e(E,oh),e(oh,RJ),e(RJ,KYe),e(oh,ZYe),e(oh,Ik),e(Ik,eKe),e(oh,oKe),e(E,rKe),e(E,rh),e(rh,SJ),e(SJ,tKe),e(rh,aKe),e(rh,jk),e(jk,nKe),e(rh,sKe),e(E,lKe),e(E,th),e(th,PJ),e(PJ,iKe),e(th,dKe),e(th,Dk),e(Dk,cKe),e(th,fKe),e(E,mKe),e(E,Is),e(Is,$J),e($J,gKe),e(Is,hKe),e(Is,Nk),e(Nk,pKe),e(Is,_Ke),e(Is,qk),e(qk,uKe),e(Is,bKe),e(E,vKe),e(E,ah),e(ah,IJ),e(IJ,TKe),e(ah,FKe),e(ah,Ok),e(Ok,CKe),e(ah,MKe),e(E,EKe),e(E,nh),e(nh,jJ),e(jJ,yKe),e(nh,wKe),e(nh,Gk),e(Gk,AKe),e(nh,LKe),e(E,BKe),e(E,js),e(js,DJ),e(DJ,xKe),e(js,kKe),e(js,Xk),e(Xk,RKe),e(js,SKe),e(js,Vk),e(Vk,PKe),e(js,$Ke),e(E,IKe),e(E,Ds),e(Ds,NJ),e(NJ,jKe),e(Ds,DKe),e(Ds,zk),e(zk,NKe),e(Ds,qKe),e(Ds,Wk),e(Wk,OKe),e(Ds,GKe),e(go,XKe),e(go,qJ),e(qJ,VKe),e(go,zKe),g(c4,go,null),e(Qo,WKe),e(Qo,sh),g(f4,sh,null),e(sh,QKe),e(sh,OJ),e(OJ,HKe),b(d,fxe,u),b(d,Hi,u),e(Hi,lh),e(lh,GJ),g(m4,GJ,null),e(Hi,UKe),e(Hi,XJ),e(XJ,JKe),b(d,mxe,u),b(d,Ho,u),g(g4,Ho,null),e(Ho,YKe),e(Ho,h4),e(h4,KKe),e(h4,Qk),e(Qk,ZKe),e(h4,eZe),e(Ho,oZe),e(Ho,p4),e(p4,rZe),e(p4,VJ),e(VJ,tZe),e(p4,aZe),e(Ho,nZe),e(Ho,$e),g(_4,$e,null),e($e,sZe),e($e,zJ),e(zJ,lZe),e($e,iZe),e($e,Xa),e(Xa,dZe),e(Xa,WJ),e(WJ,cZe),e(Xa,fZe),e(Xa,QJ),e(QJ,mZe),e(Xa,gZe),e(Xa,HJ),e(HJ,hZe),e(Xa,pZe),e($e,_Ze),e($e,ae),e(ae,ih),e(ih,UJ),e(UJ,uZe),e(ih,bZe),e(ih,Hk),e(Hk,vZe),e(ih,TZe),e(ae,FZe),e(ae,dh),e(dh,JJ),e(JJ,CZe),e(dh,MZe),e(dh,Uk),e(Uk,EZe),e(dh,yZe),e(ae,wZe),e(ae,ch),e(ch,YJ),e(YJ,AZe),e(ch,LZe),e(ch,Jk),e(Jk,BZe),e(ch,xZe),e(ae,kZe),e(ae,fh),e(fh,KJ),e(KJ,RZe),e(fh,SZe),e(fh,Yk),e(Yk,PZe),e(fh,$Ze),e(ae,IZe),e(ae,mh),e(mh,ZJ),e(ZJ,jZe),e(mh,DZe),e(mh,Kk),e(Kk,NZe),e(mh,qZe),e(ae,OZe),e(ae,gh),e(gh,eY),e(eY,GZe),e(gh,XZe),e(gh,Zk),e(Zk,VZe),e(gh,zZe),e(ae,WZe),e(ae,hh),e(hh,oY),e(oY,QZe),e(hh,HZe),e(hh,eR),e(eR,UZe),e(hh,JZe),e(ae,YZe),e(ae,ph),e(ph,rY),e(rY,KZe),e(ph,ZZe),e(ph,oR),e(oR,eeo),e(ph,oeo),e(ae,reo),e(ae,_h),e(_h,tY),e(tY,teo),e(_h,aeo),e(_h,rR),e(rR,neo),e(_h,seo),e(ae,leo),e(ae,uh),e(uh,aY),e(aY,ieo),e(uh,deo),e(uh,tR),e(tR,ceo),e(uh,feo),e(ae,meo),e(ae,bh),e(bh,nY),e(nY,geo),e(bh,heo),e(bh,aR),e(aR,peo),e(bh,_eo),e(ae,ueo),e(ae,vh),e(vh,sY),e(sY,beo),e(vh,veo),e(vh,nR),e(nR,Teo),e(vh,Feo),e(ae,Ceo),e(ae,Th),e(Th,lY),e(lY,Meo),e(Th,Eeo),e(Th,sR),e(sR,yeo),e(Th,weo),e(ae,Aeo),e(ae,Fh),e(Fh,iY),e(iY,Leo),e(Fh,Beo),e(Fh,lR),e(lR,xeo),e(Fh,keo),e(ae,Reo),e(ae,Ch),e(Ch,dY),e(dY,Seo),e(Ch,Peo),e(Ch,iR),e(iR,$eo),e(Ch,Ieo),e(ae,jeo),e(ae,Mh),e(Mh,cY),e(cY,Deo),e(Mh,Neo),e(Mh,dR),e(dR,qeo),e(Mh,Oeo),e($e,Geo),g(Eh,$e,null),e($e,Xeo),e($e,fY),e(fY,Veo),e($e,zeo),g(u4,$e,null),e(Ho,Weo),e(Ho,yh),g(b4,yh,null),e(yh,Qeo),e(yh,mY),e(mY,Heo),b(d,gxe,u),b(d,Ui,u),e(Ui,wh),e(wh,gY),g(v4,gY,null),e(Ui,Ueo),e(Ui,hY),e(hY,Jeo),b(d,hxe,u),b(d,Uo,u),g(T4,Uo,null),e(Uo,Yeo),e(Uo,F4),e(F4,Keo),e(F4,cR),e(cR,Zeo),e(F4,eoo),e(Uo,ooo),e(Uo,C4),e(C4,roo),e(C4,pY),e(pY,too),e(C4,aoo),e(Uo,noo),e(Uo,Ie),g(M4,Ie,null),e(Ie,soo),e(Ie,_Y),e(_Y,loo),e(Ie,ioo),e(Ie,Ji),e(Ji,doo),e(Ji,uY),e(uY,coo),e(Ji,foo),e(Ji,bY),e(bY,moo),e(Ji,goo),e(Ie,hoo),e(Ie,Be),e(Be,Ah),e(Ah,vY),e(vY,poo),e(Ah,_oo),e(Ah,fR),e(fR,uoo),e(Ah,boo),e(Be,voo),e(Be,Lh),e(Lh,TY),e(TY,Too),e(Lh,Foo),e(Lh,mR),e(mR,Coo),e(Lh,Moo),e(Be,Eoo),e(Be,Bh),e(Bh,FY),e(FY,yoo),e(Bh,woo),e(Bh,gR),e(gR,Aoo),e(Bh,Loo),e(Be,Boo),e(Be,xh),e(xh,CY),e(CY,xoo),e(xh,koo),e(xh,hR),e(hR,Roo),e(xh,Soo),e(Be,Poo),e(Be,kh),e(kh,MY),e(MY,$oo),e(kh,Ioo),e(kh,pR),e(pR,joo),e(kh,Doo),e(Be,Noo),e(Be,Rh),e(Rh,EY),e(EY,qoo),e(Rh,Ooo),e(Rh,_R),e(_R,Goo),e(Rh,Xoo),e(Be,Voo),e(Be,Sh),e(Sh,yY),e(yY,zoo),e(Sh,Woo),e(Sh,uR),e(uR,Qoo),e(Sh,Hoo),e(Be,Uoo),e(Be,Ph),e(Ph,wY),e(wY,Joo),e(Ph,Yoo),e(Ph,bR),e(bR,Koo),e(Ph,Zoo),e(Ie,ero),g($h,Ie,null),e(Ie,oro),e(Ie,AY),e(AY,rro),e(Ie,tro),g(E4,Ie,null),e(Uo,aro),e(Uo,Ih),g(y4,Ih,null),e(Ih,nro),e(Ih,LY),e(LY,sro),b(d,pxe,u),b(d,Yi,u),e(Yi,jh),e(jh,BY),g(w4,BY,null),e(Yi,lro),e(Yi,xY),e(xY,iro),b(d,_xe,u),b(d,Jo,u),g(A4,Jo,null),e(Jo,dro),e(Jo,Ki),e(Ki,cro),e(Ki,kY),e(kY,fro),e(Ki,mro),e(Ki,RY),e(RY,gro),e(Ki,hro),e(Jo,pro),e(Jo,L4),e(L4,_ro),e(L4,SY),e(SY,uro),e(L4,bro),e(Jo,vro),e(Jo,Vr),g(B4,Vr,null),e(Vr,Tro),e(Vr,PY),e(PY,Fro),e(Vr,Cro),e(Vr,Zi),e(Zi,Mro),e(Zi,$Y),e($Y,Ero),e(Zi,yro),e(Zi,IY),e(IY,wro),e(Zi,Aro),e(Vr,Lro),e(Vr,jY),e(jY,Bro),e(Vr,xro),g(x4,Vr,null),e(Jo,kro),e(Jo,je),g(k4,je,null),e(je,Rro),e(je,DY),e(DY,Sro),e(je,Pro),e(je,Va),e(Va,$ro),e(Va,NY),e(NY,Iro),e(Va,jro),e(Va,qY),e(qY,Dro),e(Va,Nro),e(Va,OY),e(OY,qro),e(Va,Oro),e(je,Gro),e(je,F),e(F,Dh),e(Dh,GY),e(GY,Xro),e(Dh,Vro),e(Dh,vR),e(vR,zro),e(Dh,Wro),e(F,Qro),e(F,Nh),e(Nh,XY),e(XY,Hro),e(Nh,Uro),e(Nh,TR),e(TR,Jro),e(Nh,Yro),e(F,Kro),e(F,qh),e(qh,VY),e(VY,Zro),e(qh,eto),e(qh,FR),e(FR,oto),e(qh,rto),e(F,tto),e(F,Oh),e(Oh,zY),e(zY,ato),e(Oh,nto),e(Oh,CR),e(CR,sto),e(Oh,lto),e(F,ito),e(F,Gh),e(Gh,WY),e(WY,dto),e(Gh,cto),e(Gh,MR),e(MR,fto),e(Gh,mto),e(F,gto),e(F,Xh),e(Xh,QY),e(QY,hto),e(Xh,pto),e(Xh,ER),e(ER,_to),e(Xh,uto),e(F,bto),e(F,Vh),e(Vh,HY),e(HY,vto),e(Vh,Tto),e(Vh,yR),e(yR,Fto),e(Vh,Cto),e(F,Mto),e(F,zh),e(zh,UY),e(UY,Eto),e(zh,yto),e(zh,wR),e(wR,wto),e(zh,Ato),e(F,Lto),e(F,Wh),e(Wh,JY),e(JY,Bto),e(Wh,xto),e(Wh,AR),e(AR,kto),e(Wh,Rto),e(F,Sto),e(F,Qh),e(Qh,YY),e(YY,Pto),e(Qh,$to),e(Qh,LR),e(LR,Ito),e(Qh,jto),e(F,Dto),e(F,Hh),e(Hh,KY),e(KY,Nto),e(Hh,qto),e(Hh,BR),e(BR,Oto),e(Hh,Gto),e(F,Xto),e(F,Uh),e(Uh,ZY),e(ZY,Vto),e(Uh,zto),e(Uh,xR),e(xR,Wto),e(Uh,Qto),e(F,Hto),e(F,Jh),e(Jh,eK),e(eK,Uto),e(Jh,Jto),e(Jh,kR),e(kR,Yto),e(Jh,Kto),e(F,Zto),e(F,Yh),e(Yh,oK),e(oK,eao),e(Yh,oao),e(Yh,RR),e(RR,rao),e(Yh,tao),e(F,aao),e(F,Kh),e(Kh,rK),e(rK,nao),e(Kh,sao),e(Kh,SR),e(SR,lao),e(Kh,iao),e(F,dao),e(F,Zh),e(Zh,tK),e(tK,cao),e(Zh,fao),e(Zh,PR),e(PR,mao),e(Zh,gao),e(F,hao),e(F,ep),e(ep,aK),e(aK,pao),e(ep,_ao),e(ep,$R),e($R,uao),e(ep,bao),e(F,vao),e(F,op),e(op,nK),e(nK,Tao),e(op,Fao),e(op,IR),e(IR,Cao),e(op,Mao),e(F,Eao),e(F,rp),e(rp,sK),e(sK,yao),e(rp,wao),e(rp,jR),e(jR,Aao),e(rp,Lao),e(F,Bao),e(F,tp),e(tp,lK),e(lK,xao),e(tp,kao),e(tp,DR),e(DR,Rao),e(tp,Sao),e(F,Pao),e(F,ap),e(ap,iK),e(iK,$ao),e(ap,Iao),e(ap,NR),e(NR,jao),e(ap,Dao),e(F,Nao),e(F,np),e(np,dK),e(dK,qao),e(np,Oao),e(np,qR),e(qR,Gao),e(np,Xao),e(F,Vao),e(F,sp),e(sp,cK),e(cK,zao),e(sp,Wao),e(sp,OR),e(OR,Qao),e(sp,Hao),e(F,Uao),e(F,lp),e(lp,fK),e(fK,Jao),e(lp,Yao),e(lp,GR),e(GR,Kao),e(lp,Zao),e(F,eno),e(F,ip),e(ip,mK),e(mK,ono),e(ip,rno),e(ip,XR),e(XR,tno),e(ip,ano),e(F,nno),e(F,dp),e(dp,gK),e(gK,sno),e(dp,lno),e(dp,VR),e(VR,ino),e(dp,dno),e(F,cno),e(F,cp),e(cp,hK),e(hK,fno),e(cp,mno),e(cp,zR),e(zR,gno),e(cp,hno),e(F,pno),e(F,Ns),e(Ns,pK),e(pK,_no),e(Ns,uno),e(Ns,WR),e(WR,bno),e(Ns,vno),e(Ns,QR),e(QR,Tno),e(Ns,Fno),e(F,Cno),e(F,fp),e(fp,_K),e(_K,Mno),e(fp,Eno),e(fp,HR),e(HR,yno),e(fp,wno),e(F,Ano),e(F,mp),e(mp,uK),e(uK,Lno),e(mp,Bno),e(mp,UR),e(UR,xno),e(mp,kno),e(F,Rno),e(F,gp),e(gp,bK),e(bK,Sno),e(gp,Pno),e(gp,JR),e(JR,$no),e(gp,Ino),e(F,jno),e(F,hp),e(hp,vK),e(vK,Dno),e(hp,Nno),e(hp,YR),e(YR,qno),e(hp,Ono),e(F,Gno),e(F,pp),e(pp,TK),e(TK,Xno),e(pp,Vno),e(pp,KR),e(KR,zno),e(pp,Wno),e(F,Qno),e(F,_p),e(_p,FK),e(FK,Hno),e(_p,Uno),e(_p,ZR),e(ZR,Jno),e(_p,Yno),e(F,Kno),e(F,up),e(up,CK),e(CK,Zno),e(up,eso),e(up,eS),e(eS,oso),e(up,rso),e(F,tso),e(F,bp),e(bp,MK),e(MK,aso),e(bp,nso),e(bp,oS),e(oS,sso),e(bp,lso),e(F,iso),e(F,vp),e(vp,EK),e(EK,dso),e(vp,cso),e(vp,rS),e(rS,fso),e(vp,mso),e(F,gso),e(F,Tp),e(Tp,yK),e(yK,hso),e(Tp,pso),e(Tp,tS),e(tS,_so),e(Tp,uso),e(F,bso),e(F,Fp),e(Fp,wK),e(wK,vso),e(Fp,Tso),e(Fp,aS),e(aS,Fso),e(Fp,Cso),e(F,Mso),e(F,Cp),e(Cp,AK),e(AK,Eso),e(Cp,yso),e(Cp,nS),e(nS,wso),e(Cp,Aso),e(F,Lso),e(F,Mp),e(Mp,LK),e(LK,Bso),e(Mp,xso),e(Mp,sS),e(sS,kso),e(Mp,Rso),e(F,Sso),e(F,Ep),e(Ep,BK),e(BK,Pso),e(Ep,$so),e(Ep,lS),e(lS,Iso),e(Ep,jso),e(F,Dso),e(F,yp),e(yp,xK),e(xK,Nso),e(yp,qso),e(yp,iS),e(iS,Oso),e(yp,Gso),e(F,Xso),e(F,wp),e(wp,kK),e(kK,Vso),e(wp,zso),e(wp,dS),e(dS,Wso),e(wp,Qso),e(F,Hso),e(F,Ap),e(Ap,RK),e(RK,Uso),e(Ap,Jso),e(Ap,cS),e(cS,Yso),e(Ap,Kso),e(F,Zso),e(F,Lp),e(Lp,SK),e(SK,elo),e(Lp,olo),e(Lp,fS),e(fS,rlo),e(Lp,tlo),e(F,alo),e(F,Bp),e(Bp,PK),e(PK,nlo),e(Bp,slo),e(Bp,mS),e(mS,llo),e(Bp,ilo),e(F,dlo),e(F,xp),e(xp,$K),e($K,clo),e(xp,flo),e(xp,gS),e(gS,mlo),e(xp,glo),e(F,hlo),e(F,kp),e(kp,IK),e(IK,plo),e(kp,_lo),e(kp,hS),e(hS,ulo),e(kp,blo),e(F,vlo),e(F,Rp),e(Rp,jK),e(jK,Tlo),e(Rp,Flo),e(Rp,pS),e(pS,Clo),e(Rp,Mlo),e(F,Elo),e(F,Sp),e(Sp,DK),e(DK,ylo),e(Sp,wlo),e(Sp,_S),e(_S,Alo),e(Sp,Llo),e(F,Blo),e(F,Pp),e(Pp,NK),e(NK,xlo),e(Pp,klo),e(Pp,uS),e(uS,Rlo),e(Pp,Slo),e(F,Plo),e(F,$p),e($p,qK),e(qK,$lo),e($p,Ilo),e($p,bS),e(bS,jlo),e($p,Dlo),e(F,Nlo),e(F,Ip),e(Ip,OK),e(OK,qlo),e(Ip,Olo),e(Ip,vS),e(vS,Glo),e(Ip,Xlo),e(F,Vlo),e(F,jp),e(jp,GK),e(GK,zlo),e(jp,Wlo),e(jp,TS),e(TS,Qlo),e(jp,Hlo),e(F,Ulo),e(F,Dp),e(Dp,XK),e(XK,Jlo),e(Dp,Ylo),e(Dp,FS),e(FS,Klo),e(Dp,Zlo),e(F,eio),e(F,Np),e(Np,VK),e(VK,oio),e(Np,rio),e(Np,CS),e(CS,tio),e(Np,aio),e(F,nio),e(F,qp),e(qp,zK),e(zK,sio),e(qp,lio),e(qp,MS),e(MS,iio),e(qp,dio),e(F,cio),e(F,Op),e(Op,WK),e(WK,fio),e(Op,mio),e(Op,ES),e(ES,gio),e(Op,hio),e(F,pio),e(F,Gp),e(Gp,QK),e(QK,_io),e(Gp,uio),e(Gp,yS),e(yS,bio),e(Gp,vio),e(F,Tio),e(F,Xp),e(Xp,HK),e(HK,Fio),e(Xp,Cio),e(Xp,wS),e(wS,Mio),e(Xp,Eio),e(F,yio),e(F,Vp),e(Vp,UK),e(UK,wio),e(Vp,Aio),e(Vp,AS),e(AS,Lio),e(Vp,Bio),e(F,xio),e(F,zp),e(zp,JK),e(JK,kio),e(zp,Rio),e(zp,LS),e(LS,Sio),e(zp,Pio),e(F,$io),e(F,Wp),e(Wp,YK),e(YK,Iio),e(Wp,jio),e(Wp,BS),e(BS,Dio),e(Wp,Nio),e(F,qio),e(F,Qp),e(Qp,KK),e(KK,Oio),e(Qp,Gio),e(Qp,xS),e(xS,Xio),e(Qp,Vio),e(F,zio),e(F,Hp),e(Hp,ZK),e(ZK,Wio),e(Hp,Qio),e(Hp,kS),e(kS,Hio),e(Hp,Uio),e(F,Jio),e(F,Up),e(Up,eZ),e(eZ,Yio),e(Up,Kio),e(Up,RS),e(RS,Zio),e(Up,edo),e(F,odo),e(F,Jp),e(Jp,oZ),e(oZ,rdo),e(Jp,tdo),e(Jp,SS),e(SS,ado),e(Jp,ndo),e(F,sdo),e(F,Yp),e(Yp,rZ),e(rZ,ldo),e(Yp,ido),e(Yp,PS),e(PS,ddo),e(Yp,cdo),e(F,fdo),e(F,Kp),e(Kp,tZ),e(tZ,mdo),e(Kp,gdo),e(Kp,$S),e($S,hdo),e(Kp,pdo),e(F,_do),e(F,Zp),e(Zp,aZ),e(aZ,udo),e(Zp,bdo),e(Zp,IS),e(IS,vdo),e(Zp,Tdo),e(F,Fdo),e(F,e_),e(e_,nZ),e(nZ,Cdo),e(e_,Mdo),e(e_,jS),e(jS,Edo),e(e_,ydo),e(F,wdo),e(F,o_),e(o_,sZ),e(sZ,Ado),e(o_,Ldo),e(o_,DS),e(DS,Bdo),e(o_,xdo),e(F,kdo),e(F,r_),e(r_,lZ),e(lZ,Rdo),e(r_,Sdo),e(r_,NS),e(NS,Pdo),e(r_,$do),e(F,Ido),e(F,t_),e(t_,iZ),e(iZ,jdo),e(t_,Ddo),e(t_,qS),e(qS,Ndo),e(t_,qdo),e(F,Odo),e(F,a_),e(a_,dZ),e(dZ,Gdo),e(a_,Xdo),e(a_,OS),e(OS,Vdo),e(a_,zdo),e(F,Wdo),e(F,n_),e(n_,cZ),e(cZ,Qdo),e(n_,Hdo),e(n_,GS),e(GS,Udo),e(n_,Jdo),e(F,Ydo),e(F,s_),e(s_,fZ),e(fZ,Kdo),e(s_,Zdo),e(s_,XS),e(XS,eco),e(s_,oco),e(F,rco),e(F,l_),e(l_,mZ),e(mZ,tco),e(l_,aco),e(l_,VS),e(VS,nco),e(l_,sco),e(F,lco),e(F,i_),e(i_,gZ),e(gZ,ico),e(i_,dco),e(i_,zS),e(zS,cco),e(i_,fco),e(F,mco),e(F,d_),e(d_,hZ),e(hZ,gco),e(d_,hco),e(d_,WS),e(WS,pco),e(d_,_co),e(F,uco),e(F,c_),e(c_,pZ),e(pZ,bco),e(c_,vco),e(c_,QS),e(QS,Tco),e(c_,Fco),e(F,Cco),e(F,f_),e(f_,_Z),e(_Z,Mco),e(f_,Eco),e(f_,HS),e(HS,yco),e(f_,wco),e(F,Aco),e(F,m_),e(m_,uZ),e(uZ,Lco),e(m_,Bco),e(m_,US),e(US,xco),e(m_,kco),e(F,Rco),e(F,g_),e(g_,bZ),e(bZ,Sco),e(g_,Pco),e(g_,JS),e(JS,$co),e(g_,Ico),e(F,jco),e(F,h_),e(h_,vZ),e(vZ,Dco),e(h_,Nco),e(h_,YS),e(YS,qco),e(h_,Oco),e(F,Gco),e(F,p_),e(p_,TZ),e(TZ,Xco),e(p_,Vco),e(p_,KS),e(KS,zco),e(p_,Wco),e(je,Qco),e(je,__),e(__,Hco),e(__,FZ),e(FZ,Uco),e(__,Jco),e(__,CZ),e(CZ,Yco),e(je,Kco),e(je,MZ),e(MZ,Zco),e(je,efo),g(R4,je,null),b(d,uxe,u),b(d,ed,u),e(ed,u_),e(u_,EZ),g(S4,EZ,null),e(ed,ofo),e(ed,yZ),e(yZ,rfo),b(d,bxe,u),b(d,Yo,u),g(P4,Yo,null),e(Yo,tfo),e(Yo,od),e(od,afo),e(od,wZ),e(wZ,nfo),e(od,sfo),e(od,AZ),e(AZ,lfo),e(od,ifo),e(Yo,dfo),e(Yo,$4),e($4,cfo),e($4,LZ),e(LZ,ffo),e($4,mfo),e(Yo,gfo),e(Yo,zr),g(I4,zr,null),e(zr,hfo),e(zr,BZ),e(BZ,pfo),e(zr,_fo),e(zr,rd),e(rd,ufo),e(rd,xZ),e(xZ,bfo),e(rd,vfo),e(rd,kZ),e(kZ,Tfo),e(rd,Ffo),e(zr,Cfo),e(zr,RZ),e(RZ,Mfo),e(zr,Efo),g(j4,zr,null),e(Yo,yfo),e(Yo,De),g(D4,De,null),e(De,wfo),e(De,SZ),e(SZ,Afo),e(De,Lfo),e(De,za),e(za,Bfo),e(za,PZ),e(PZ,xfo),e(za,kfo),e(za,$Z),e($Z,Rfo),e(za,Sfo),e(za,IZ),e(IZ,Pfo),e(za,$fo),e(De,Ifo),e(De,k),e(k,b_),e(b_,jZ),e(jZ,jfo),e(b_,Dfo),e(b_,ZS),e(ZS,Nfo),e(b_,qfo),e(k,Ofo),e(k,v_),e(v_,DZ),e(DZ,Gfo),e(v_,Xfo),e(v_,eP),e(eP,Vfo),e(v_,zfo),e(k,Wfo),e(k,T_),e(T_,NZ),e(NZ,Qfo),e(T_,Hfo),e(T_,oP),e(oP,Ufo),e(T_,Jfo),e(k,Yfo),e(k,F_),e(F_,qZ),e(qZ,Kfo),e(F_,Zfo),e(F_,rP),e(rP,emo),e(F_,omo),e(k,rmo),e(k,C_),e(C_,OZ),e(OZ,tmo),e(C_,amo),e(C_,tP),e(tP,nmo),e(C_,smo),e(k,lmo),e(k,M_),e(M_,GZ),e(GZ,imo),e(M_,dmo),e(M_,aP),e(aP,cmo),e(M_,fmo),e(k,mmo),e(k,E_),e(E_,XZ),e(XZ,gmo),e(E_,hmo),e(E_,nP),e(nP,pmo),e(E_,_mo),e(k,umo),e(k,y_),e(y_,VZ),e(VZ,bmo),e(y_,vmo),e(y_,sP),e(sP,Tmo),e(y_,Fmo),e(k,Cmo),e(k,w_),e(w_,zZ),e(zZ,Mmo),e(w_,Emo),e(w_,lP),e(lP,ymo),e(w_,wmo),e(k,Amo),e(k,A_),e(A_,WZ),e(WZ,Lmo),e(A_,Bmo),e(A_,iP),e(iP,xmo),e(A_,kmo),e(k,Rmo),e(k,L_),e(L_,QZ),e(QZ,Smo),e(L_,Pmo),e(L_,dP),e(dP,$mo),e(L_,Imo),e(k,jmo),e(k,B_),e(B_,HZ),e(HZ,Dmo),e(B_,Nmo),e(B_,cP),e(cP,qmo),e(B_,Omo),e(k,Gmo),e(k,x_),e(x_,UZ),e(UZ,Xmo),e(x_,Vmo),e(x_,fP),e(fP,zmo),e(x_,Wmo),e(k,Qmo),e(k,k_),e(k_,JZ),e(JZ,Hmo),e(k_,Umo),e(k_,mP),e(mP,Jmo),e(k_,Ymo),e(k,Kmo),e(k,R_),e(R_,YZ),e(YZ,Zmo),e(R_,ego),e(R_,gP),e(gP,ogo),e(R_,rgo),e(k,tgo),e(k,S_),e(S_,KZ),e(KZ,ago),e(S_,ngo),e(S_,hP),e(hP,sgo),e(S_,lgo),e(k,igo),e(k,P_),e(P_,ZZ),e(ZZ,dgo),e(P_,cgo),e(P_,pP),e(pP,fgo),e(P_,mgo),e(k,ggo),e(k,$_),e($_,eee),e(eee,hgo),e($_,pgo),e($_,_P),e(_P,_go),e($_,ugo),e(k,bgo),e(k,I_),e(I_,oee),e(oee,vgo),e(I_,Tgo),e(I_,uP),e(uP,Fgo),e(I_,Cgo),e(k,Mgo),e(k,j_),e(j_,ree),e(ree,Ego),e(j_,ygo),e(j_,bP),e(bP,wgo),e(j_,Ago),e(k,Lgo),e(k,D_),e(D_,tee),e(tee,Bgo),e(D_,xgo),e(D_,vP),e(vP,kgo),e(D_,Rgo),e(k,Sgo),e(k,N_),e(N_,aee),e(aee,Pgo),e(N_,$go),e(N_,TP),e(TP,Igo),e(N_,jgo),e(k,Dgo),e(k,q_),e(q_,nee),e(nee,Ngo),e(q_,qgo),e(q_,FP),e(FP,Ogo),e(q_,Ggo),e(k,Xgo),e(k,O_),e(O_,see),e(see,Vgo),e(O_,zgo),e(O_,CP),e(CP,Wgo),e(O_,Qgo),e(k,Hgo),e(k,G_),e(G_,lee),e(lee,Ugo),e(G_,Jgo),e(G_,MP),e(MP,Ygo),e(G_,Kgo),e(k,Zgo),e(k,X_),e(X_,iee),e(iee,eho),e(X_,oho),e(X_,EP),e(EP,rho),e(X_,tho),e(k,aho),e(k,V_),e(V_,dee),e(dee,nho),e(V_,sho),e(V_,yP),e(yP,lho),e(V_,iho),e(k,dho),e(k,z_),e(z_,cee),e(cee,cho),e(z_,fho),e(z_,wP),e(wP,mho),e(z_,gho),e(k,hho),e(k,W_),e(W_,fee),e(fee,pho),e(W_,_ho),e(W_,AP),e(AP,uho),e(W_,bho),e(k,vho),e(k,Q_),e(Q_,mee),e(mee,Tho),e(Q_,Fho),e(Q_,LP),e(LP,Cho),e(Q_,Mho),e(k,Eho),e(k,H_),e(H_,gee),e(gee,yho),e(H_,who),e(H_,BP),e(BP,Aho),e(H_,Lho),e(k,Bho),e(k,U_),e(U_,hee),e(hee,xho),e(U_,kho),e(U_,xP),e(xP,Rho),e(U_,Sho),e(k,Pho),e(k,J_),e(J_,pee),e(pee,$ho),e(J_,Iho),e(J_,kP),e(kP,jho),e(J_,Dho),e(k,Nho),e(k,Y_),e(Y_,_ee),e(_ee,qho),e(Y_,Oho),e(Y_,RP),e(RP,Gho),e(Y_,Xho),e(k,Vho),e(k,K_),e(K_,uee),e(uee,zho),e(K_,Who),e(K_,SP),e(SP,Qho),e(K_,Hho),e(k,Uho),e(k,Z_),e(Z_,bee),e(bee,Jho),e(Z_,Yho),e(Z_,PP),e(PP,Kho),e(Z_,Zho),e(k,epo),e(k,eu),e(eu,vee),e(vee,opo),e(eu,rpo),e(eu,$P),e($P,tpo),e(eu,apo),e(k,npo),e(k,ou),e(ou,Tee),e(Tee,spo),e(ou,lpo),e(ou,IP),e(IP,ipo),e(ou,dpo),e(k,cpo),e(k,ru),e(ru,Fee),e(Fee,fpo),e(ru,mpo),e(ru,jP),e(jP,gpo),e(ru,hpo),e(De,ppo),e(De,tu),e(tu,_po),e(tu,Cee),e(Cee,upo),e(tu,bpo),e(tu,Mee),e(Mee,vpo),e(De,Tpo),e(De,Eee),e(Eee,Fpo),e(De,Cpo),g(N4,De,null),b(d,vxe,u),b(d,td,u),e(td,au),e(au,yee),g(q4,yee,null),e(td,Mpo),e(td,wee),e(wee,Epo),b(d,Txe,u),b(d,Ko,u),g(O4,Ko,null),e(Ko,ypo),e(Ko,ad),e(ad,wpo),e(ad,Aee),e(Aee,Apo),e(ad,Lpo),e(ad,Lee),e(Lee,Bpo),e(ad,xpo),e(Ko,kpo),e(Ko,G4),e(G4,Rpo),e(G4,Bee),e(Bee,Spo),e(G4,Ppo),e(Ko,$po),e(Ko,Wr),g(X4,Wr,null),e(Wr,Ipo),e(Wr,xee),e(xee,jpo),e(Wr,Dpo),e(Wr,nd),e(nd,Npo),e(nd,kee),e(kee,qpo),e(nd,Opo),e(nd,Ree),e(Ree,Gpo),e(nd,Xpo),e(Wr,Vpo),e(Wr,See),e(See,zpo),e(Wr,Wpo),g(V4,Wr,null),e(Ko,Qpo),e(Ko,Ne),g(z4,Ne,null),e(Ne,Hpo),e(Ne,Pee),e(Pee,Upo),e(Ne,Jpo),e(Ne,Wa),e(Wa,Ypo),e(Wa,$ee),e($ee,Kpo),e(Wa,Zpo),e(Wa,Iee),e(Iee,e_o),e(Wa,o_o),e(Wa,jee),e(jee,r_o),e(Wa,t_o),e(Ne,a_o),e(Ne,$),e($,nu),e(nu,Dee),e(Dee,n_o),e(nu,s_o),e(nu,DP),e(DP,l_o),e(nu,i_o),e($,d_o),e($,su),e(su,Nee),e(Nee,c_o),e(su,f_o),e(su,NP),e(NP,m_o),e(su,g_o),e($,h_o),e($,lu),e(lu,qee),e(qee,p_o),e(lu,__o),e(lu,qP),e(qP,u_o),e(lu,b_o),e($,v_o),e($,iu),e(iu,Oee),e(Oee,T_o),e(iu,F_o),e(iu,OP),e(OP,C_o),e(iu,M_o),e($,E_o),e($,du),e(du,Gee),e(Gee,y_o),e(du,w_o),e(du,GP),e(GP,A_o),e(du,L_o),e($,B_o),e($,cu),e(cu,Xee),e(Xee,x_o),e(cu,k_o),e(cu,XP),e(XP,R_o),e(cu,S_o),e($,P_o),e($,fu),e(fu,Vee),e(Vee,$_o),e(fu,I_o),e(fu,VP),e(VP,j_o),e(fu,D_o),e($,N_o),e($,mu),e(mu,zee),e(zee,q_o),e(mu,O_o),e(mu,zP),e(zP,G_o),e(mu,X_o),e($,V_o),e($,gu),e(gu,Wee),e(Wee,z_o),e(gu,W_o),e(gu,WP),e(WP,Q_o),e(gu,H_o),e($,U_o),e($,hu),e(hu,Qee),e(Qee,J_o),e(hu,Y_o),e(hu,QP),e(QP,K_o),e(hu,Z_o),e($,euo),e($,pu),e(pu,Hee),e(Hee,ouo),e(pu,ruo),e(pu,HP),e(HP,tuo),e(pu,auo),e($,nuo),e($,_u),e(_u,Uee),e(Uee,suo),e(_u,luo),e(_u,UP),e(UP,iuo),e(_u,duo),e($,cuo),e($,uu),e(uu,Jee),e(Jee,fuo),e(uu,muo),e(uu,JP),e(JP,guo),e(uu,huo),e($,puo),e($,bu),e(bu,Yee),e(Yee,_uo),e(bu,uuo),e(bu,YP),e(YP,buo),e(bu,vuo),e($,Tuo),e($,vu),e(vu,Kee),e(Kee,Fuo),e(vu,Cuo),e(vu,KP),e(KP,Muo),e(vu,Euo),e($,yuo),e($,Tu),e(Tu,Zee),e(Zee,wuo),e(Tu,Auo),e(Tu,ZP),e(ZP,Luo),e(Tu,Buo),e($,xuo),e($,Fu),e(Fu,eoe),e(eoe,kuo),e(Fu,Ruo),e(Fu,e$),e(e$,Suo),e(Fu,Puo),e($,$uo),e($,Cu),e(Cu,ooe),e(ooe,Iuo),e(Cu,juo),e(Cu,o$),e(o$,Duo),e(Cu,Nuo),e($,quo),e($,Mu),e(Mu,roe),e(roe,Ouo),e(Mu,Guo),e(Mu,r$),e(r$,Xuo),e(Mu,Vuo),e($,zuo),e($,Eu),e(Eu,toe),e(toe,Wuo),e(Eu,Quo),e(Eu,t$),e(t$,Huo),e(Eu,Uuo),e($,Juo),e($,yu),e(yu,aoe),e(aoe,Yuo),e(yu,Kuo),e(yu,a$),e(a$,Zuo),e(yu,e1o),e($,o1o),e($,wu),e(wu,noe),e(noe,r1o),e(wu,t1o),e(wu,n$),e(n$,a1o),e(wu,n1o),e($,s1o),e($,Au),e(Au,soe),e(soe,l1o),e(Au,i1o),e(Au,s$),e(s$,d1o),e(Au,c1o),e($,f1o),e($,Lu),e(Lu,loe),e(loe,m1o),e(Lu,g1o),e(Lu,l$),e(l$,h1o),e(Lu,p1o),e($,_1o),e($,Bu),e(Bu,ioe),e(ioe,u1o),e(Bu,b1o),e(Bu,i$),e(i$,v1o),e(Bu,T1o),e($,F1o),e($,xu),e(xu,doe),e(doe,C1o),e(xu,M1o),e(xu,d$),e(d$,E1o),e(xu,y1o),e($,w1o),e($,ku),e(ku,coe),e(coe,A1o),e(ku,L1o),e(ku,c$),e(c$,B1o),e(ku,x1o),e($,k1o),e($,Ru),e(Ru,foe),e(foe,R1o),e(Ru,S1o),e(Ru,f$),e(f$,P1o),e(Ru,$1o),e($,I1o),e($,Su),e(Su,moe),e(moe,j1o),e(Su,D1o),e(Su,m$),e(m$,N1o),e(Su,q1o),e($,O1o),e($,Pu),e(Pu,goe),e(goe,G1o),e(Pu,X1o),e(Pu,g$),e(g$,V1o),e(Pu,z1o),e($,W1o),e($,$u),e($u,hoe),e(hoe,Q1o),e($u,H1o),e($u,h$),e(h$,U1o),e($u,J1o),e($,Y1o),e($,Iu),e(Iu,poe),e(poe,K1o),e(Iu,Z1o),e(Iu,p$),e(p$,ebo),e(Iu,obo),e($,rbo),e($,ju),e(ju,_oe),e(_oe,tbo),e(ju,abo),e(ju,_$),e(_$,nbo),e(ju,sbo),e($,lbo),e($,Du),e(Du,uoe),e(uoe,ibo),e(Du,dbo),e(Du,u$),e(u$,cbo),e(Du,fbo),e($,mbo),e($,Nu),e(Nu,boe),e(boe,gbo),e(Nu,hbo),e(Nu,b$),e(b$,pbo),e(Nu,_bo),e(Ne,ubo),e(Ne,qu),e(qu,bbo),e(qu,voe),e(voe,vbo),e(qu,Tbo),e(qu,Toe),e(Toe,Fbo),e(Ne,Cbo),e(Ne,Foe),e(Foe,Mbo),e(Ne,Ebo),g(W4,Ne,null),b(d,Fxe,u),b(d,sd,u),e(sd,Ou),e(Ou,Coe),g(Q4,Coe,null),e(sd,ybo),e(sd,Moe),e(Moe,wbo),b(d,Cxe,u),b(d,Zo,u),g(H4,Zo,null),e(Zo,Abo),e(Zo,ld),e(ld,Lbo),e(ld,Eoe),e(Eoe,Bbo),e(ld,xbo),e(ld,yoe),e(yoe,kbo),e(ld,Rbo),e(Zo,Sbo),e(Zo,U4),e(U4,Pbo),e(U4,woe),e(woe,$bo),e(U4,Ibo),e(Zo,jbo),e(Zo,Qr),g(J4,Qr,null),e(Qr,Dbo),e(Qr,Aoe),e(Aoe,Nbo),e(Qr,qbo),e(Qr,id),e(id,Obo),e(id,Loe),e(Loe,Gbo),e(id,Xbo),e(id,Boe),e(Boe,Vbo),e(id,zbo),e(Qr,Wbo),e(Qr,xoe),e(xoe,Qbo),e(Qr,Hbo),g(Y4,Qr,null),e(Zo,Ubo),e(Zo,qe),g(K4,qe,null),e(qe,Jbo),e(qe,koe),e(koe,Ybo),e(qe,Kbo),e(qe,Qa),e(Qa,Zbo),e(Qa,Roe),e(Roe,e5o),e(Qa,o5o),e(Qa,Soe),e(Soe,r5o),e(Qa,t5o),e(Qa,Poe),e(Poe,a5o),e(Qa,n5o),e(qe,s5o),e(qe,I),e(I,Gu),e(Gu,$oe),e($oe,l5o),e(Gu,i5o),e(Gu,v$),e(v$,d5o),e(Gu,c5o),e(I,f5o),e(I,Xu),e(Xu,Ioe),e(Ioe,m5o),e(Xu,g5o),e(Xu,T$),e(T$,h5o),e(Xu,p5o),e(I,_5o),e(I,Vu),e(Vu,joe),e(joe,u5o),e(Vu,b5o),e(Vu,F$),e(F$,v5o),e(Vu,T5o),e(I,F5o),e(I,zu),e(zu,Doe),e(Doe,C5o),e(zu,M5o),e(zu,C$),e(C$,E5o),e(zu,y5o),e(I,w5o),e(I,Wu),e(Wu,Noe),e(Noe,A5o),e(Wu,L5o),e(Wu,M$),e(M$,B5o),e(Wu,x5o),e(I,k5o),e(I,Qu),e(Qu,qoe),e(qoe,R5o),e(Qu,S5o),e(Qu,E$),e(E$,P5o),e(Qu,$5o),e(I,I5o),e(I,Hu),e(Hu,Ooe),e(Ooe,j5o),e(Hu,D5o),e(Hu,y$),e(y$,N5o),e(Hu,q5o),e(I,O5o),e(I,Uu),e(Uu,Goe),e(Goe,G5o),e(Uu,X5o),e(Uu,w$),e(w$,V5o),e(Uu,z5o),e(I,W5o),e(I,Ju),e(Ju,Xoe),e(Xoe,Q5o),e(Ju,H5o),e(Ju,A$),e(A$,U5o),e(Ju,J5o),e(I,Y5o),e(I,Yu),e(Yu,Voe),e(Voe,K5o),e(Yu,Z5o),e(Yu,L$),e(L$,e2o),e(Yu,o2o),e(I,r2o),e(I,Ku),e(Ku,zoe),e(zoe,t2o),e(Ku,a2o),e(Ku,B$),e(B$,n2o),e(Ku,s2o),e(I,l2o),e(I,Zu),e(Zu,Woe),e(Woe,i2o),e(Zu,d2o),e(Zu,x$),e(x$,c2o),e(Zu,f2o),e(I,m2o),e(I,e1),e(e1,Qoe),e(Qoe,g2o),e(e1,h2o),e(e1,k$),e(k$,p2o),e(e1,_2o),e(I,u2o),e(I,o1),e(o1,Hoe),e(Hoe,b2o),e(o1,v2o),e(o1,R$),e(R$,T2o),e(o1,F2o),e(I,C2o),e(I,r1),e(r1,Uoe),e(Uoe,M2o),e(r1,E2o),e(r1,S$),e(S$,y2o),e(r1,w2o),e(I,A2o),e(I,t1),e(t1,Joe),e(Joe,L2o),e(t1,B2o),e(t1,P$),e(P$,x2o),e(t1,k2o),e(I,R2o),e(I,a1),e(a1,Yoe),e(Yoe,S2o),e(a1,P2o),e(a1,$$),e($$,$2o),e(a1,I2o),e(I,j2o),e(I,n1),e(n1,Koe),e(Koe,D2o),e(n1,N2o),e(n1,I$),e(I$,q2o),e(n1,O2o),e(I,G2o),e(I,s1),e(s1,Zoe),e(Zoe,X2o),e(s1,V2o),e(s1,j$),e(j$,z2o),e(s1,W2o),e(I,Q2o),e(I,l1),e(l1,ere),e(ere,H2o),e(l1,U2o),e(l1,D$),e(D$,J2o),e(l1,Y2o),e(I,K2o),e(I,i1),e(i1,ore),e(ore,Z2o),e(i1,evo),e(i1,N$),e(N$,ovo),e(i1,rvo),e(I,tvo),e(I,d1),e(d1,rre),e(rre,avo),e(d1,nvo),e(d1,q$),e(q$,svo),e(d1,lvo),e(I,ivo),e(I,c1),e(c1,tre),e(tre,dvo),e(c1,cvo),e(c1,O$),e(O$,fvo),e(c1,mvo),e(I,gvo),e(I,f1),e(f1,are),e(are,hvo),e(f1,pvo),e(f1,G$),e(G$,_vo),e(f1,uvo),e(I,bvo),e(I,m1),e(m1,nre),e(nre,vvo),e(m1,Tvo),e(m1,X$),e(X$,Fvo),e(m1,Cvo),e(I,Mvo),e(I,g1),e(g1,sre),e(sre,Evo),e(g1,yvo),e(g1,V$),e(V$,wvo),e(g1,Avo),e(I,Lvo),e(I,h1),e(h1,lre),e(lre,Bvo),e(h1,xvo),e(h1,z$),e(z$,kvo),e(h1,Rvo),e(I,Svo),e(I,p1),e(p1,ire),e(ire,Pvo),e(p1,$vo),e(p1,W$),e(W$,Ivo),e(p1,jvo),e(I,Dvo),e(I,_1),e(_1,dre),e(dre,Nvo),e(_1,qvo),e(_1,Q$),e(Q$,Ovo),e(_1,Gvo),e(I,Xvo),e(I,u1),e(u1,cre),e(cre,Vvo),e(u1,zvo),e(u1,H$),e(H$,Wvo),e(u1,Qvo),e(I,Hvo),e(I,b1),e(b1,fre),e(fre,Uvo),e(b1,Jvo),e(b1,mre),e(mre,Yvo),e(b1,Kvo),e(I,Zvo),e(I,v1),e(v1,gre),e(gre,e0o),e(v1,o0o),e(v1,U$),e(U$,r0o),e(v1,t0o),e(I,a0o),e(I,T1),e(T1,hre),e(hre,n0o),e(T1,s0o),e(T1,J$),e(J$,l0o),e(T1,i0o),e(I,d0o),e(I,F1),e(F1,pre),e(pre,c0o),e(F1,f0o),e(F1,Y$),e(Y$,m0o),e(F1,g0o),e(I,h0o),e(I,C1),e(C1,_re),e(_re,p0o),e(C1,_0o),e(C1,K$),e(K$,u0o),e(C1,b0o),e(qe,v0o),e(qe,M1),e(M1,T0o),e(M1,ure),e(ure,F0o),e(M1,C0o),e(M1,bre),e(bre,M0o),e(qe,E0o),e(qe,vre),e(vre,y0o),e(qe,w0o),g(Z4,qe,null),b(d,Mxe,u),b(d,dd,u),e(dd,E1),e(E1,Tre),g(eE,Tre,null),e(dd,A0o),e(dd,Fre),e(Fre,L0o),b(d,Exe,u),b(d,er,u),g(oE,er,null),e(er,B0o),e(er,cd),e(cd,x0o),e(cd,Cre),e(Cre,k0o),e(cd,R0o),e(cd,Mre),e(Mre,S0o),e(cd,P0o),e(er,$0o),e(er,rE),e(rE,I0o),e(rE,Ere),e(Ere,j0o),e(rE,D0o),e(er,N0o),e(er,Hr),g(tE,Hr,null),e(Hr,q0o),e(Hr,yre),e(yre,O0o),e(Hr,G0o),e(Hr,fd),e(fd,X0o),e(fd,wre),e(wre,V0o),e(fd,z0o),e(fd,Are),e(Are,W0o),e(fd,Q0o),e(Hr,H0o),e(Hr,Lre),e(Lre,U0o),e(Hr,J0o),g(aE,Hr,null),e(er,Y0o),e(er,Oe),g(nE,Oe,null),e(Oe,K0o),e(Oe,Bre),e(Bre,Z0o),e(Oe,eTo),e(Oe,Ha),e(Ha,oTo),e(Ha,xre),e(xre,rTo),e(Ha,tTo),e(Ha,kre),e(kre,aTo),e(Ha,nTo),e(Ha,Rre),e(Rre,sTo),e(Ha,lTo),e(Oe,iTo),e(Oe,ne),e(ne,y1),e(y1,Sre),e(Sre,dTo),e(y1,cTo),e(y1,Z$),e(Z$,fTo),e(y1,mTo),e(ne,gTo),e(ne,w1),e(w1,Pre),e(Pre,hTo),e(w1,pTo),e(w1,eI),e(eI,_To),e(w1,uTo),e(ne,bTo),e(ne,A1),e(A1,$re),e($re,vTo),e(A1,TTo),e(A1,oI),e(oI,FTo),e(A1,CTo),e(ne,MTo),e(ne,L1),e(L1,Ire),e(Ire,ETo),e(L1,yTo),e(L1,rI),e(rI,wTo),e(L1,ATo),e(ne,LTo),e(ne,B1),e(B1,jre),e(jre,BTo),e(B1,xTo),e(B1,tI),e(tI,kTo),e(B1,RTo),e(ne,STo),e(ne,x1),e(x1,Dre),e(Dre,PTo),e(x1,$To),e(x1,aI),e(aI,ITo),e(x1,jTo),e(ne,DTo),e(ne,k1),e(k1,Nre),e(Nre,NTo),e(k1,qTo),e(k1,nI),e(nI,OTo),e(k1,GTo),e(ne,XTo),e(ne,R1),e(R1,qre),e(qre,VTo),e(R1,zTo),e(R1,sI),e(sI,WTo),e(R1,QTo),e(ne,HTo),e(ne,S1),e(S1,Ore),e(Ore,UTo),e(S1,JTo),e(S1,lI),e(lI,YTo),e(S1,KTo),e(ne,ZTo),e(ne,P1),e(P1,Gre),e(Gre,e7o),e(P1,o7o),e(P1,iI),e(iI,r7o),e(P1,t7o),e(ne,a7o),e(ne,$1),e($1,Xre),e(Xre,n7o),e($1,s7o),e($1,dI),e(dI,l7o),e($1,i7o),e(ne,d7o),e(ne,I1),e(I1,Vre),e(Vre,c7o),e(I1,f7o),e(I1,cI),e(cI,m7o),e(I1,g7o),e(ne,h7o),e(ne,j1),e(j1,zre),e(zre,p7o),e(j1,_7o),e(j1,fI),e(fI,u7o),e(j1,b7o),e(ne,v7o),e(ne,D1),e(D1,Wre),e(Wre,T7o),e(D1,F7o),e(D1,mI),e(mI,C7o),e(D1,M7o),e(ne,E7o),e(ne,N1),e(N1,Qre),e(Qre,y7o),e(N1,w7o),e(N1,gI),e(gI,A7o),e(N1,L7o),e(ne,B7o),e(ne,q1),e(q1,Hre),e(Hre,x7o),e(q1,k7o),e(q1,hI),e(hI,R7o),e(q1,S7o),e(Oe,P7o),e(Oe,O1),e(O1,$7o),e(O1,Ure),e(Ure,I7o),e(O1,j7o),e(O1,Jre),e(Jre,D7o),e(Oe,N7o),e(Oe,Yre),e(Yre,q7o),e(Oe,O7o),g(sE,Oe,null),b(d,yxe,u),b(d,md,u),e(md,G1),e(G1,Kre),g(lE,Kre,null),e(md,G7o),e(md,Zre),e(Zre,X7o),b(d,wxe,u),b(d,or,u),g(iE,or,null),e(or,V7o),e(or,gd),e(gd,z7o),e(gd,ete),e(ete,W7o),e(gd,Q7o),e(gd,ote),e(ote,H7o),e(gd,U7o),e(or,J7o),e(or,dE),e(dE,Y7o),e(dE,rte),e(rte,K7o),e(dE,Z7o),e(or,eFo),e(or,Ur),g(cE,Ur,null),e(Ur,oFo),e(Ur,tte),e(tte,rFo),e(Ur,tFo),e(Ur,hd),e(hd,aFo),e(hd,ate),e(ate,nFo),e(hd,sFo),e(hd,nte),e(nte,lFo),e(hd,iFo),e(Ur,dFo),e(Ur,ste),e(ste,cFo),e(Ur,fFo),g(fE,Ur,null),e(or,mFo),e(or,Ge),g(mE,Ge,null),e(Ge,gFo),e(Ge,lte),e(lte,hFo),e(Ge,pFo),e(Ge,Ua),e(Ua,_Fo),e(Ua,ite),e(ite,uFo),e(Ua,bFo),e(Ua,dte),e(dte,vFo),e(Ua,TFo),e(Ua,cte),e(cte,FFo),e(Ua,CFo),e(Ge,MFo),e(Ge,A),e(A,X1),e(X1,fte),e(fte,EFo),e(X1,yFo),e(X1,pI),e(pI,wFo),e(X1,AFo),e(A,LFo),e(A,V1),e(V1,mte),e(mte,BFo),e(V1,xFo),e(V1,_I),e(_I,kFo),e(V1,RFo),e(A,SFo),e(A,z1),e(z1,gte),e(gte,PFo),e(z1,$Fo),e(z1,uI),e(uI,IFo),e(z1,jFo),e(A,DFo),e(A,W1),e(W1,hte),e(hte,NFo),e(W1,qFo),e(W1,bI),e(bI,OFo),e(W1,GFo),e(A,XFo),e(A,Q1),e(Q1,pte),e(pte,VFo),e(Q1,zFo),e(Q1,vI),e(vI,WFo),e(Q1,QFo),e(A,HFo),e(A,H1),e(H1,_te),e(_te,UFo),e(H1,JFo),e(H1,TI),e(TI,YFo),e(H1,KFo),e(A,ZFo),e(A,U1),e(U1,ute),e(ute,e9o),e(U1,o9o),e(U1,FI),e(FI,r9o),e(U1,t9o),e(A,a9o),e(A,J1),e(J1,bte),e(bte,n9o),e(J1,s9o),e(J1,CI),e(CI,l9o),e(J1,i9o),e(A,d9o),e(A,Y1),e(Y1,vte),e(vte,c9o),e(Y1,f9o),e(Y1,MI),e(MI,m9o),e(Y1,g9o),e(A,h9o),e(A,K1),e(K1,Tte),e(Tte,p9o),e(K1,_9o),e(K1,EI),e(EI,u9o),e(K1,b9o),e(A,v9o),e(A,Z1),e(Z1,Fte),e(Fte,T9o),e(Z1,F9o),e(Z1,yI),e(yI,C9o),e(Z1,M9o),e(A,E9o),e(A,eb),e(eb,Cte),e(Cte,y9o),e(eb,w9o),e(eb,wI),e(wI,A9o),e(eb,L9o),e(A,B9o),e(A,ob),e(ob,Mte),e(Mte,x9o),e(ob,k9o),e(ob,AI),e(AI,R9o),e(ob,S9o),e(A,P9o),e(A,rb),e(rb,Ete),e(Ete,$9o),e(rb,I9o),e(rb,LI),e(LI,j9o),e(rb,D9o),e(A,N9o),e(A,tb),e(tb,yte),e(yte,q9o),e(tb,O9o),e(tb,BI),e(BI,G9o),e(tb,X9o),e(A,V9o),e(A,ab),e(ab,wte),e(wte,z9o),e(ab,W9o),e(ab,xI),e(xI,Q9o),e(ab,H9o),e(A,U9o),e(A,nb),e(nb,Ate),e(Ate,J9o),e(nb,Y9o),e(nb,kI),e(kI,K9o),e(nb,Z9o),e(A,eCo),e(A,sb),e(sb,Lte),e(Lte,oCo),e(sb,rCo),e(sb,RI),e(RI,tCo),e(sb,aCo),e(A,nCo),e(A,lb),e(lb,Bte),e(Bte,sCo),e(lb,lCo),e(lb,SI),e(SI,iCo),e(lb,dCo),e(A,cCo),e(A,ib),e(ib,xte),e(xte,fCo),e(ib,mCo),e(ib,PI),e(PI,gCo),e(ib,hCo),e(A,pCo),e(A,db),e(db,kte),e(kte,_Co),e(db,uCo),e(db,$I),e($I,bCo),e(db,vCo),e(A,TCo),e(A,cb),e(cb,Rte),e(Rte,FCo),e(cb,CCo),e(cb,II),e(II,MCo),e(cb,ECo),e(A,yCo),e(A,fb),e(fb,Ste),e(Ste,wCo),e(fb,ACo),e(fb,jI),e(jI,LCo),e(fb,BCo),e(A,xCo),e(A,mb),e(mb,Pte),e(Pte,kCo),e(mb,RCo),e(mb,DI),e(DI,SCo),e(mb,PCo),e(A,$Co),e(A,gb),e(gb,$te),e($te,ICo),e(gb,jCo),e(gb,NI),e(NI,DCo),e(gb,NCo),e(A,qCo),e(A,hb),e(hb,Ite),e(Ite,OCo),e(hb,GCo),e(hb,qI),e(qI,XCo),e(hb,VCo),e(A,zCo),e(A,pb),e(pb,jte),e(jte,WCo),e(pb,QCo),e(pb,OI),e(OI,HCo),e(pb,UCo),e(A,JCo),e(A,_b),e(_b,Dte),e(Dte,YCo),e(_b,KCo),e(_b,GI),e(GI,ZCo),e(_b,eMo),e(A,oMo),e(A,ub),e(ub,Nte),e(Nte,rMo),e(ub,tMo),e(ub,XI),e(XI,aMo),e(ub,nMo),e(A,sMo),e(A,bb),e(bb,qte),e(qte,lMo),e(bb,iMo),e(bb,VI),e(VI,dMo),e(bb,cMo),e(A,fMo),e(A,vb),e(vb,Ote),e(Ote,mMo),e(vb,gMo),e(vb,zI),e(zI,hMo),e(vb,pMo),e(A,_Mo),e(A,Tb),e(Tb,Gte),e(Gte,uMo),e(Tb,bMo),e(Tb,WI),e(WI,vMo),e(Tb,TMo),e(A,FMo),e(A,Fb),e(Fb,Xte),e(Xte,CMo),e(Fb,MMo),e(Fb,QI),e(QI,EMo),e(Fb,yMo),e(A,wMo),e(A,Cb),e(Cb,Vte),e(Vte,AMo),e(Cb,LMo),e(Cb,HI),e(HI,BMo),e(Cb,xMo),e(A,kMo),e(A,Mb),e(Mb,zte),e(zte,RMo),e(Mb,SMo),e(Mb,UI),e(UI,PMo),e(Mb,$Mo),e(A,IMo),e(A,Eb),e(Eb,Wte),e(Wte,jMo),e(Eb,DMo),e(Eb,JI),e(JI,NMo),e(Eb,qMo),e(A,OMo),e(A,yb),e(yb,Qte),e(Qte,GMo),e(yb,XMo),e(yb,YI),e(YI,VMo),e(yb,zMo),e(A,WMo),e(A,wb),e(wb,Hte),e(Hte,QMo),e(wb,HMo),e(wb,KI),e(KI,UMo),e(wb,JMo),e(A,YMo),e(A,Ab),e(Ab,Ute),e(Ute,KMo),e(Ab,ZMo),e(Ab,ZI),e(ZI,e4o),e(Ab,o4o),e(A,r4o),e(A,Lb),e(Lb,Jte),e(Jte,t4o),e(Lb,a4o),e(Lb,ej),e(ej,n4o),e(Lb,s4o),e(A,l4o),e(A,Bb),e(Bb,Yte),e(Yte,i4o),e(Bb,d4o),e(Bb,oj),e(oj,c4o),e(Bb,f4o),e(A,m4o),e(A,xb),e(xb,Kte),e(Kte,g4o),e(xb,h4o),e(xb,rj),e(rj,p4o),e(xb,_4o),e(A,u4o),e(A,kb),e(kb,Zte),e(Zte,b4o),e(kb,v4o),e(kb,tj),e(tj,T4o),e(kb,F4o),e(A,C4o),e(A,Rb),e(Rb,eae),e(eae,M4o),e(Rb,E4o),e(Rb,aj),e(aj,y4o),e(Rb,w4o),e(A,A4o),e(A,Sb),e(Sb,oae),e(oae,L4o),e(Sb,B4o),e(Sb,nj),e(nj,x4o),e(Sb,k4o),e(A,R4o),e(A,Pb),e(Pb,rae),e(rae,S4o),e(Pb,P4o),e(Pb,sj),e(sj,$4o),e(Pb,I4o),e(Ge,j4o),e(Ge,$b),e($b,D4o),e($b,tae),e(tae,N4o),e($b,q4o),e($b,aae),e(aae,O4o),e(Ge,G4o),e(Ge,nae),e(nae,X4o),e(Ge,V4o),g(gE,Ge,null),b(d,Axe,u),b(d,pd,u),e(pd,Ib),e(Ib,sae),g(hE,sae,null),e(pd,z4o),e(pd,lae),e(lae,W4o),b(d,Lxe,u),b(d,rr,u),g(pE,rr,null),e(rr,Q4o),e(rr,_d),e(_d,H4o),e(_d,iae),e(iae,U4o),e(_d,J4o),e(_d,dae),e(dae,Y4o),e(_d,K4o),e(rr,Z4o),e(rr,_E),e(_E,eEo),e(_E,cae),e(cae,oEo),e(_E,rEo),e(rr,tEo),e(rr,Jr),g(uE,Jr,null),e(Jr,aEo),e(Jr,fae),e(fae,nEo),e(Jr,sEo),e(Jr,ud),e(ud,lEo),e(ud,mae),e(mae,iEo),e(ud,dEo),e(ud,gae),e(gae,cEo),e(ud,fEo),e(Jr,mEo),e(Jr,hae),e(hae,gEo),e(Jr,hEo),g(bE,Jr,null),e(rr,pEo),e(rr,Xe),g(vE,Xe,null),e(Xe,_Eo),e(Xe,pae),e(pae,uEo),e(Xe,bEo),e(Xe,Ja),e(Ja,vEo),e(Ja,_ae),e(_ae,TEo),e(Ja,FEo),e(Ja,uae),e(uae,CEo),e(Ja,MEo),e(Ja,bae),e(bae,EEo),e(Ja,yEo),e(Xe,wEo),e(Xe,O),e(O,jb),e(jb,vae),e(vae,AEo),e(jb,LEo),e(jb,lj),e(lj,BEo),e(jb,xEo),e(O,kEo),e(O,Db),e(Db,Tae),e(Tae,REo),e(Db,SEo),e(Db,ij),e(ij,PEo),e(Db,$Eo),e(O,IEo),e(O,Nb),e(Nb,Fae),e(Fae,jEo),e(Nb,DEo),e(Nb,dj),e(dj,NEo),e(Nb,qEo),e(O,OEo),e(O,qb),e(qb,Cae),e(Cae,GEo),e(qb,XEo),e(qb,cj),e(cj,VEo),e(qb,zEo),e(O,WEo),e(O,Ob),e(Ob,Mae),e(Mae,QEo),e(Ob,HEo),e(Ob,fj),e(fj,UEo),e(Ob,JEo),e(O,YEo),e(O,Gb),e(Gb,Eae),e(Eae,KEo),e(Gb,ZEo),e(Gb,mj),e(mj,e3o),e(Gb,o3o),e(O,r3o),e(O,Xb),e(Xb,yae),e(yae,t3o),e(Xb,a3o),e(Xb,gj),e(gj,n3o),e(Xb,s3o),e(O,l3o),e(O,Vb),e(Vb,wae),e(wae,i3o),e(Vb,d3o),e(Vb,hj),e(hj,c3o),e(Vb,f3o),e(O,m3o),e(O,zb),e(zb,Aae),e(Aae,g3o),e(zb,h3o),e(zb,pj),e(pj,p3o),e(zb,_3o),e(O,u3o),e(O,Wb),e(Wb,Lae),e(Lae,b3o),e(Wb,v3o),e(Wb,_j),e(_j,T3o),e(Wb,F3o),e(O,C3o),e(O,Qb),e(Qb,Bae),e(Bae,M3o),e(Qb,E3o),e(Qb,uj),e(uj,y3o),e(Qb,w3o),e(O,A3o),e(O,Hb),e(Hb,xae),e(xae,L3o),e(Hb,B3o),e(Hb,bj),e(bj,x3o),e(Hb,k3o),e(O,R3o),e(O,Ub),e(Ub,kae),e(kae,S3o),e(Ub,P3o),e(Ub,vj),e(vj,$3o),e(Ub,I3o),e(O,j3o),e(O,Jb),e(Jb,Rae),e(Rae,D3o),e(Jb,N3o),e(Jb,Tj),e(Tj,q3o),e(Jb,O3o),e(O,G3o),e(O,Yb),e(Yb,Sae),e(Sae,X3o),e(Yb,V3o),e(Yb,Fj),e(Fj,z3o),e(Yb,W3o),e(O,Q3o),e(O,Kb),e(Kb,Pae),e(Pae,H3o),e(Kb,U3o),e(Kb,Cj),e(Cj,J3o),e(Kb,Y3o),e(O,K3o),e(O,Zb),e(Zb,$ae),e($ae,Z3o),e(Zb,eyo),e(Zb,Mj),e(Mj,oyo),e(Zb,ryo),e(O,tyo),e(O,e5),e(e5,Iae),e(Iae,ayo),e(e5,nyo),e(e5,Ej),e(Ej,syo),e(e5,lyo),e(O,iyo),e(O,o5),e(o5,jae),e(jae,dyo),e(o5,cyo),e(o5,yj),e(yj,fyo),e(o5,myo),e(O,gyo),e(O,r5),e(r5,Dae),e(Dae,hyo),e(r5,pyo),e(r5,wj),e(wj,_yo),e(r5,uyo),e(O,byo),e(O,t5),e(t5,Nae),e(Nae,vyo),e(t5,Tyo),e(t5,Aj),e(Aj,Fyo),e(t5,Cyo),e(O,Myo),e(O,a5),e(a5,qae),e(qae,Eyo),e(a5,yyo),e(a5,Lj),e(Lj,wyo),e(a5,Ayo),e(O,Lyo),e(O,n5),e(n5,Oae),e(Oae,Byo),e(n5,xyo),e(n5,Bj),e(Bj,kyo),e(n5,Ryo),e(O,Syo),e(O,s5),e(s5,Gae),e(Gae,Pyo),e(s5,$yo),e(s5,xj),e(xj,Iyo),e(s5,jyo),e(O,Dyo),e(O,l5),e(l5,Xae),e(Xae,Nyo),e(l5,qyo),e(l5,kj),e(kj,Oyo),e(l5,Gyo),e(O,Xyo),e(O,i5),e(i5,Vae),e(Vae,Vyo),e(i5,zyo),e(i5,Rj),e(Rj,Wyo),e(i5,Qyo),e(O,Hyo),e(O,d5),e(d5,zae),e(zae,Uyo),e(d5,Jyo),e(d5,Sj),e(Sj,Yyo),e(d5,Kyo),e(O,Zyo),e(O,c5),e(c5,Wae),e(Wae,ewo),e(c5,owo),e(c5,Pj),e(Pj,rwo),e(c5,two),e(Xe,awo),e(Xe,f5),e(f5,nwo),e(f5,Qae),e(Qae,swo),e(f5,lwo),e(f5,Hae),e(Hae,iwo),e(Xe,dwo),e(Xe,Uae),e(Uae,cwo),e(Xe,fwo),g(TE,Xe,null),b(d,Bxe,u),b(d,bd,u),e(bd,m5),e(m5,Jae),g(FE,Jae,null),e(bd,mwo),e(bd,Yae),e(Yae,gwo),b(d,xxe,u),b(d,tr,u),g(CE,tr,null),e(tr,hwo),e(tr,vd),e(vd,pwo),e(vd,Kae),e(Kae,_wo),e(vd,uwo),e(vd,Zae),e(Zae,bwo),e(vd,vwo),e(tr,Two),e(tr,ME),e(ME,Fwo),e(ME,ene),e(ene,Cwo),e(ME,Mwo),e(tr,Ewo),e(tr,Yr),g(EE,Yr,null),e(Yr,ywo),e(Yr,one),e(one,wwo),e(Yr,Awo),e(Yr,Td),e(Td,Lwo),e(Td,rne),e(rne,Bwo),e(Td,xwo),e(Td,tne),e(tne,kwo),e(Td,Rwo),e(Yr,Swo),e(Yr,ane),e(ane,Pwo),e(Yr,$wo),g(yE,Yr,null),e(tr,Iwo),e(tr,Ve),g(wE,Ve,null),e(Ve,jwo),e(Ve,nne),e(nne,Dwo),e(Ve,Nwo),e(Ve,Ya),e(Ya,qwo),e(Ya,sne),e(sne,Owo),e(Ya,Gwo),e(Ya,lne),e(lne,Xwo),e(Ya,Vwo),e(Ya,ine),e(ine,zwo),e(Ya,Wwo),e(Ve,Qwo),e(Ve,da),e(da,g5),e(g5,dne),e(dne,Hwo),e(g5,Uwo),e(g5,$j),e($j,Jwo),e(g5,Ywo),e(da,Kwo),e(da,h5),e(h5,cne),e(cne,Zwo),e(h5,e6o),e(h5,Ij),e(Ij,o6o),e(h5,r6o),e(da,t6o),e(da,p5),e(p5,fne),e(fne,a6o),e(p5,n6o),e(p5,jj),e(jj,s6o),e(p5,l6o),e(da,i6o),e(da,_5),e(_5,mne),e(mne,d6o),e(_5,c6o),e(_5,Dj),e(Dj,f6o),e(_5,m6o),e(da,g6o),e(da,u5),e(u5,gne),e(gne,h6o),e(u5,p6o),e(u5,Nj),e(Nj,_6o),e(u5,u6o),e(Ve,b6o),e(Ve,b5),e(b5,v6o),e(b5,hne),e(hne,T6o),e(b5,F6o),e(b5,pne),e(pne,C6o),e(Ve,M6o),e(Ve,_ne),e(_ne,E6o),e(Ve,y6o),g(AE,Ve,null),b(d,kxe,u),b(d,Fd,u),e(Fd,v5),e(v5,une),g(LE,une,null),e(Fd,w6o),e(Fd,bne),e(bne,A6o),b(d,Rxe,u),b(d,ar,u),g(BE,ar,null),e(ar,L6o),e(ar,Cd),e(Cd,B6o),e(Cd,vne),e(vne,x6o),e(Cd,k6o),e(Cd,Tne),e(Tne,R6o),e(Cd,S6o),e(ar,P6o),e(ar,xE),e(xE,$6o),e(xE,Fne),e(Fne,I6o),e(xE,j6o),e(ar,D6o),e(ar,Kr),g(kE,Kr,null),e(Kr,N6o),e(Kr,Cne),e(Cne,q6o),e(Kr,O6o),e(Kr,Md),e(Md,G6o),e(Md,Mne),e(Mne,X6o),e(Md,V6o),e(Md,Ene),e(Ene,z6o),e(Md,W6o),e(Kr,Q6o),e(Kr,yne),e(yne,H6o),e(Kr,U6o),g(RE,Kr,null),e(ar,J6o),e(ar,ze),g(SE,ze,null),e(ze,Y6o),e(ze,wne),e(wne,K6o),e(ze,Z6o),e(ze,Ka),e(Ka,eAo),e(Ka,Ane),e(Ane,oAo),e(Ka,rAo),e(Ka,Lne),e(Lne,tAo),e(Ka,aAo),e(Ka,Bne),e(Bne,nAo),e(Ka,sAo),e(ze,lAo),e(ze,N),e(N,T5),e(T5,xne),e(xne,iAo),e(T5,dAo),e(T5,qj),e(qj,cAo),e(T5,fAo),e(N,mAo),e(N,F5),e(F5,kne),e(kne,gAo),e(F5,hAo),e(F5,Oj),e(Oj,pAo),e(F5,_Ao),e(N,uAo),e(N,C5),e(C5,Rne),e(Rne,bAo),e(C5,vAo),e(C5,Gj),e(Gj,TAo),e(C5,FAo),e(N,CAo),e(N,M5),e(M5,Sne),e(Sne,MAo),e(M5,EAo),e(M5,Xj),e(Xj,yAo),e(M5,wAo),e(N,AAo),e(N,E5),e(E5,Pne),e(Pne,LAo),e(E5,BAo),e(E5,Vj),e(Vj,xAo),e(E5,kAo),e(N,RAo),e(N,y5),e(y5,$ne),e($ne,SAo),e(y5,PAo),e(y5,zj),e(zj,$Ao),e(y5,IAo),e(N,jAo),e(N,w5),e(w5,Ine),e(Ine,DAo),e(w5,NAo),e(w5,Wj),e(Wj,qAo),e(w5,OAo),e(N,GAo),e(N,A5),e(A5,jne),e(jne,XAo),e(A5,VAo),e(A5,Qj),e(Qj,zAo),e(A5,WAo),e(N,QAo),e(N,L5),e(L5,Dne),e(Dne,HAo),e(L5,UAo),e(L5,Hj),e(Hj,JAo),e(L5,YAo),e(N,KAo),e(N,B5),e(B5,Nne),e(Nne,ZAo),e(B5,eLo),e(B5,Uj),e(Uj,oLo),e(B5,rLo),e(N,tLo),e(N,x5),e(x5,qne),e(qne,aLo),e(x5,nLo),e(x5,Jj),e(Jj,sLo),e(x5,lLo),e(N,iLo),e(N,k5),e(k5,One),e(One,dLo),e(k5,cLo),e(k5,Yj),e(Yj,fLo),e(k5,mLo),e(N,gLo),e(N,R5),e(R5,Gne),e(Gne,hLo),e(R5,pLo),e(R5,Kj),e(Kj,_Lo),e(R5,uLo),e(N,bLo),e(N,S5),e(S5,Xne),e(Xne,vLo),e(S5,TLo),e(S5,Zj),e(Zj,FLo),e(S5,CLo),e(N,MLo),e(N,P5),e(P5,Vne),e(Vne,ELo),e(P5,yLo),e(P5,eD),e(eD,wLo),e(P5,ALo),e(N,LLo),e(N,$5),e($5,zne),e(zne,BLo),e($5,xLo),e($5,oD),e(oD,kLo),e($5,RLo),e(N,SLo),e(N,I5),e(I5,Wne),e(Wne,PLo),e(I5,$Lo),e(I5,rD),e(rD,ILo),e(I5,jLo),e(N,DLo),e(N,j5),e(j5,Qne),e(Qne,NLo),e(j5,qLo),e(j5,tD),e(tD,OLo),e(j5,GLo),e(N,XLo),e(N,D5),e(D5,Hne),e(Hne,VLo),e(D5,zLo),e(D5,aD),e(aD,WLo),e(D5,QLo),e(N,HLo),e(N,N5),e(N5,Une),e(Une,ULo),e(N5,JLo),e(N5,nD),e(nD,YLo),e(N5,KLo),e(N,ZLo),e(N,q5),e(q5,Jne),e(Jne,e8o),e(q5,o8o),e(q5,sD),e(sD,r8o),e(q5,t8o),e(N,a8o),e(N,O5),e(O5,Yne),e(Yne,n8o),e(O5,s8o),e(O5,lD),e(lD,l8o),e(O5,i8o),e(N,d8o),e(N,G5),e(G5,Kne),e(Kne,c8o),e(G5,f8o),e(G5,iD),e(iD,m8o),e(G5,g8o),e(N,h8o),e(N,X5),e(X5,Zne),e(Zne,p8o),e(X5,_8o),e(X5,dD),e(dD,u8o),e(X5,b8o),e(N,v8o),e(N,V5),e(V5,ese),e(ese,T8o),e(V5,F8o),e(V5,cD),e(cD,C8o),e(V5,M8o),e(N,E8o),e(N,z5),e(z5,ose),e(ose,y8o),e(z5,w8o),e(z5,fD),e(fD,A8o),e(z5,L8o),e(N,B8o),e(N,W5),e(W5,rse),e(rse,x8o),e(W5,k8o),e(W5,mD),e(mD,R8o),e(W5,S8o),e(N,P8o),e(N,Q5),e(Q5,tse),e(tse,$8o),e(Q5,I8o),e(Q5,gD),e(gD,j8o),e(Q5,D8o),e(N,N8o),e(N,H5),e(H5,ase),e(ase,q8o),e(H5,O8o),e(H5,hD),e(hD,G8o),e(H5,X8o),e(N,V8o),e(N,U5),e(U5,nse),e(nse,z8o),e(U5,W8o),e(U5,pD),e(pD,Q8o),e(U5,H8o),e(N,U8o),e(N,J5),e(J5,sse),e(sse,J8o),e(J5,Y8o),e(J5,_D),e(_D,K8o),e(J5,Z8o),e(N,eBo),e(N,Y5),e(Y5,lse),e(lse,oBo),e(Y5,rBo),e(Y5,uD),e(uD,tBo),e(Y5,aBo),e(N,nBo),e(N,K5),e(K5,ise),e(ise,sBo),e(K5,lBo),e(K5,bD),e(bD,iBo),e(K5,dBo),e(ze,cBo),e(ze,Z5),e(Z5,fBo),e(Z5,dse),e(dse,mBo),e(Z5,gBo),e(Z5,cse),e(cse,hBo),e(ze,pBo),e(ze,fse),e(fse,_Bo),e(ze,uBo),g(PE,ze,null),b(d,Sxe,u),b(d,Ed,u),e(Ed,e2),e(e2,mse),g($E,mse,null),e(Ed,bBo),e(Ed,gse),e(gse,vBo),b(d,Pxe,u),b(d,nr,u),g(IE,nr,null),e(nr,TBo),e(nr,yd),e(yd,FBo),e(yd,hse),e(hse,CBo),e(yd,MBo),e(yd,pse),e(pse,EBo),e(yd,yBo),e(nr,wBo),e(nr,jE),e(jE,ABo),e(jE,_se),e(_se,LBo),e(jE,BBo),e(nr,xBo),e(nr,Zr),g(DE,Zr,null),e(Zr,kBo),e(Zr,use),e(use,RBo),e(Zr,SBo),e(Zr,wd),e(wd,PBo),e(wd,bse),e(bse,$Bo),e(wd,IBo),e(wd,vse),e(vse,jBo),e(wd,DBo),e(Zr,NBo),e(Zr,Tse),e(Tse,qBo),e(Zr,OBo),g(NE,Zr,null),e(nr,GBo),e(nr,We),g(qE,We,null),e(We,XBo),e(We,Fse),e(Fse,VBo),e(We,zBo),e(We,Za),e(Za,WBo),e(Za,Cse),e(Cse,QBo),e(Za,HBo),e(Za,Mse),e(Mse,UBo),e(Za,JBo),e(Za,Ese),e(Ese,YBo),e(Za,KBo),e(We,ZBo),e(We,R),e(R,o2),e(o2,yse),e(yse,exo),e(o2,oxo),e(o2,vD),e(vD,rxo),e(o2,txo),e(R,axo),e(R,r2),e(r2,wse),e(wse,nxo),e(r2,sxo),e(r2,TD),e(TD,lxo),e(r2,ixo),e(R,dxo),e(R,t2),e(t2,Ase),e(Ase,cxo),e(t2,fxo),e(t2,FD),e(FD,mxo),e(t2,gxo),e(R,hxo),e(R,a2),e(a2,Lse),e(Lse,pxo),e(a2,_xo),e(a2,CD),e(CD,uxo),e(a2,bxo),e(R,vxo),e(R,n2),e(n2,Bse),e(Bse,Txo),e(n2,Fxo),e(n2,MD),e(MD,Cxo),e(n2,Mxo),e(R,Exo),e(R,s2),e(s2,xse),e(xse,yxo),e(s2,wxo),e(s2,ED),e(ED,Axo),e(s2,Lxo),e(R,Bxo),e(R,l2),e(l2,kse),e(kse,xxo),e(l2,kxo),e(l2,yD),e(yD,Rxo),e(l2,Sxo),e(R,Pxo),e(R,i2),e(i2,Rse),e(Rse,$xo),e(i2,Ixo),e(i2,wD),e(wD,jxo),e(i2,Dxo),e(R,Nxo),e(R,d2),e(d2,Sse),e(Sse,qxo),e(d2,Oxo),e(d2,AD),e(AD,Gxo),e(d2,Xxo),e(R,Vxo),e(R,c2),e(c2,Pse),e(Pse,zxo),e(c2,Wxo),e(c2,LD),e(LD,Qxo),e(c2,Hxo),e(R,Uxo),e(R,f2),e(f2,$se),e($se,Jxo),e(f2,Yxo),e(f2,BD),e(BD,Kxo),e(f2,Zxo),e(R,eko),e(R,m2),e(m2,Ise),e(Ise,oko),e(m2,rko),e(m2,xD),e(xD,tko),e(m2,ako),e(R,nko),e(R,g2),e(g2,jse),e(jse,sko),e(g2,lko),e(g2,kD),e(kD,iko),e(g2,dko),e(R,cko),e(R,h2),e(h2,Dse),e(Dse,fko),e(h2,mko),e(h2,RD),e(RD,gko),e(h2,hko),e(R,pko),e(R,p2),e(p2,Nse),e(Nse,_ko),e(p2,uko),e(p2,SD),e(SD,bko),e(p2,vko),e(R,Tko),e(R,_2),e(_2,qse),e(qse,Fko),e(_2,Cko),e(_2,PD),e(PD,Mko),e(_2,Eko),e(R,yko),e(R,u2),e(u2,Ose),e(Ose,wko),e(u2,Ako),e(u2,$D),e($D,Lko),e(u2,Bko),e(R,xko),e(R,b2),e(b2,Gse),e(Gse,kko),e(b2,Rko),e(b2,ID),e(ID,Sko),e(b2,Pko),e(R,$ko),e(R,v2),e(v2,Xse),e(Xse,Iko),e(v2,jko),e(v2,jD),e(jD,Dko),e(v2,Nko),e(R,qko),e(R,T2),e(T2,Vse),e(Vse,Oko),e(T2,Gko),e(T2,DD),e(DD,Xko),e(T2,Vko),e(R,zko),e(R,F2),e(F2,zse),e(zse,Wko),e(F2,Qko),e(F2,ND),e(ND,Hko),e(F2,Uko),e(R,Jko),e(R,C2),e(C2,Wse),e(Wse,Yko),e(C2,Kko),e(C2,qD),e(qD,Zko),e(C2,eRo),e(R,oRo),e(R,M2),e(M2,Qse),e(Qse,rRo),e(M2,tRo),e(M2,OD),e(OD,aRo),e(M2,nRo),e(R,sRo),e(R,E2),e(E2,Hse),e(Hse,lRo),e(E2,iRo),e(E2,GD),e(GD,dRo),e(E2,cRo),e(R,fRo),e(R,y2),e(y2,Use),e(Use,mRo),e(y2,gRo),e(y2,XD),e(XD,hRo),e(y2,pRo),e(R,_Ro),e(R,w2),e(w2,Jse),e(Jse,uRo),e(w2,bRo),e(w2,VD),e(VD,vRo),e(w2,TRo),e(R,FRo),e(R,A2),e(A2,Yse),e(Yse,CRo),e(A2,MRo),e(A2,zD),e(zD,ERo),e(A2,yRo),e(R,wRo),e(R,L2),e(L2,Kse),e(Kse,ARo),e(L2,LRo),e(L2,WD),e(WD,BRo),e(L2,xRo),e(R,kRo),e(R,B2),e(B2,Zse),e(Zse,RRo),e(B2,SRo),e(B2,QD),e(QD,PRo),e(B2,$Ro),e(R,IRo),e(R,x2),e(x2,ele),e(ele,jRo),e(x2,DRo),e(x2,HD),e(HD,NRo),e(x2,qRo),e(R,ORo),e(R,k2),e(k2,ole),e(ole,GRo),e(k2,XRo),e(k2,UD),e(UD,VRo),e(k2,zRo),e(R,WRo),e(R,R2),e(R2,rle),e(rle,QRo),e(R2,HRo),e(R2,JD),e(JD,URo),e(R2,JRo),e(R,YRo),e(R,S2),e(S2,tle),e(tle,KRo),e(S2,ZRo),e(S2,YD),e(YD,eSo),e(S2,oSo),e(R,rSo),e(R,P2),e(P2,ale),e(ale,tSo),e(P2,aSo),e(P2,KD),e(KD,nSo),e(P2,sSo),e(R,lSo),e(R,$2),e($2,nle),e(nle,iSo),e($2,dSo),e($2,ZD),e(ZD,cSo),e($2,fSo),e(R,mSo),e(R,I2),e(I2,sle),e(sle,gSo),e(I2,hSo),e(I2,eN),e(eN,pSo),e(I2,_So),e(R,uSo),e(R,j2),e(j2,lle),e(lle,bSo),e(j2,vSo),e(j2,oN),e(oN,TSo),e(j2,FSo),e(R,CSo),e(R,D2),e(D2,ile),e(ile,MSo),e(D2,ESo),e(D2,rN),e(rN,ySo),e(D2,wSo),e(R,ASo),e(R,N2),e(N2,dle),e(dle,LSo),e(N2,BSo),e(N2,tN),e(tN,xSo),e(N2,kSo),e(We,RSo),e(We,q2),e(q2,SSo),e(q2,cle),e(cle,PSo),e(q2,$So),e(q2,fle),e(fle,ISo),e(We,jSo),e(We,mle),e(mle,DSo),e(We,NSo),g(OE,We,null),b(d,$xe,u),b(d,Ad,u),e(Ad,O2),e(O2,gle),g(GE,gle,null),e(Ad,qSo),e(Ad,hle),e(hle,OSo),b(d,Ixe,u),b(d,sr,u),g(XE,sr,null),e(sr,GSo),e(sr,Ld),e(Ld,XSo),e(Ld,ple),e(ple,VSo),e(Ld,zSo),e(Ld,_le),e(_le,WSo),e(Ld,QSo),e(sr,HSo),e(sr,VE),e(VE,USo),e(VE,ule),e(ule,JSo),e(VE,YSo),e(sr,KSo),e(sr,et),g(zE,et,null),e(et,ZSo),e(et,ble),e(ble,ePo),e(et,oPo),e(et,Bd),e(Bd,rPo),e(Bd,vle),e(vle,tPo),e(Bd,aPo),e(Bd,Tle),e(Tle,nPo),e(Bd,sPo),e(et,lPo),e(et,Fle),e(Fle,iPo),e(et,dPo),g(WE,et,null),e(sr,cPo),e(sr,Qe),g(QE,Qe,null),e(Qe,fPo),e(Qe,Cle),e(Cle,mPo),e(Qe,gPo),e(Qe,en),e(en,hPo),e(en,Mle),e(Mle,pPo),e(en,_Po),e(en,Ele),e(Ele,uPo),e(en,bPo),e(en,yle),e(yle,vPo),e(en,TPo),e(Qe,FPo),e(Qe,wle),e(wle,G2),e(G2,Ale),e(Ale,CPo),e(G2,MPo),e(G2,aN),e(aN,EPo),e(G2,yPo),e(Qe,wPo),e(Qe,X2),e(X2,APo),e(X2,Lle),e(Lle,LPo),e(X2,BPo),e(X2,Ble),e(Ble,xPo),e(Qe,kPo),e(Qe,xle),e(xle,RPo),e(Qe,SPo),g(HE,Qe,null),b(d,jxe,u),b(d,xd,u),e(xd,V2),e(V2,kle),g(UE,kle,null),e(xd,PPo),e(xd,Rle),e(Rle,$Po),b(d,Dxe,u),b(d,lr,u),g(JE,lr,null),e(lr,IPo),e(lr,kd),e(kd,jPo),e(kd,Sle),e(Sle,DPo),e(kd,NPo),e(kd,Ple),e(Ple,qPo),e(kd,OPo),e(lr,GPo),e(lr,YE),e(YE,XPo),e(YE,$le),e($le,VPo),e(YE,zPo),e(lr,WPo),e(lr,ot),g(KE,ot,null),e(ot,QPo),e(ot,Ile),e(Ile,HPo),e(ot,UPo),e(ot,Rd),e(Rd,JPo),e(Rd,jle),e(jle,YPo),e(Rd,KPo),e(Rd,Dle),e(Dle,ZPo),e(Rd,e$o),e(ot,o$o),e(ot,Nle),e(Nle,r$o),e(ot,t$o),g(ZE,ot,null),e(lr,a$o),e(lr,He),g(e3,He,null),e(He,n$o),e(He,qle),e(qle,s$o),e(He,l$o),e(He,on),e(on,i$o),e(on,Ole),e(Ole,d$o),e(on,c$o),e(on,Gle),e(Gle,f$o),e(on,m$o),e(on,Xle),e(Xle,g$o),e(on,h$o),e(He,p$o),e(He,Fe),e(Fe,z2),e(z2,Vle),e(Vle,_$o),e(z2,u$o),e(z2,nN),e(nN,b$o),e(z2,v$o),e(Fe,T$o),e(Fe,W2),e(W2,zle),e(zle,F$o),e(W2,C$o),e(W2,sN),e(sN,M$o),e(W2,E$o),e(Fe,y$o),e(Fe,qs),e(qs,Wle),e(Wle,w$o),e(qs,A$o),e(qs,lN),e(lN,L$o),e(qs,B$o),e(qs,iN),e(iN,x$o),e(qs,k$o),e(Fe,R$o),e(Fe,Q2),e(Q2,Qle),e(Qle,S$o),e(Q2,P$o),e(Q2,dN),e(dN,$$o),e(Q2,I$o),e(Fe,j$o),e(Fe,ma),e(ma,Hle),e(Hle,D$o),e(ma,N$o),e(ma,cN),e(cN,q$o),e(ma,O$o),e(ma,fN),e(fN,G$o),e(ma,X$o),e(ma,mN),e(mN,V$o),e(ma,z$o),e(Fe,W$o),e(Fe,H2),e(H2,Ule),e(Ule,Q$o),e(H2,H$o),e(H2,gN),e(gN,U$o),e(H2,J$o),e(Fe,Y$o),e(Fe,U2),e(U2,Jle),e(Jle,K$o),e(U2,Z$o),e(U2,hN),e(hN,eIo),e(U2,oIo),e(Fe,rIo),e(Fe,J2),e(J2,Yle),e(Yle,tIo),e(J2,aIo),e(J2,pN),e(pN,nIo),e(J2,sIo),e(Fe,lIo),e(Fe,Y2),e(Y2,Kle),e(Kle,iIo),e(Y2,dIo),e(Y2,_N),e(_N,cIo),e(Y2,fIo),e(He,mIo),e(He,K2),e(K2,gIo),e(K2,Zle),e(Zle,hIo),e(K2,pIo),e(K2,eie),e(eie,_Io),e(He,uIo),e(He,oie),e(oie,bIo),e(He,vIo),g(o3,He,null),b(d,Nxe,u),b(d,Sd,u),e(Sd,Z2),e(Z2,rie),g(r3,rie,null),e(Sd,TIo),e(Sd,tie),e(tie,FIo),b(d,qxe,u),b(d,ir,u),g(t3,ir,null),e(ir,CIo),e(ir,Pd),e(Pd,MIo),e(Pd,aie),e(aie,EIo),e(Pd,yIo),e(Pd,nie),e(nie,wIo),e(Pd,AIo),e(ir,LIo),e(ir,a3),e(a3,BIo),e(a3,sie),e(sie,xIo),e(a3,kIo),e(ir,RIo),e(ir,rt),g(n3,rt,null),e(rt,SIo),e(rt,lie),e(lie,PIo),e(rt,$Io),e(rt,$d),e($d,IIo),e($d,iie),e(iie,jIo),e($d,DIo),e($d,die),e(die,NIo),e($d,qIo),e(rt,OIo),e(rt,cie),e(cie,GIo),e(rt,XIo),g(s3,rt,null),e(ir,VIo),e(ir,Ue),g(l3,Ue,null),e(Ue,zIo),e(Ue,fie),e(fie,WIo),e(Ue,QIo),e(Ue,rn),e(rn,HIo),e(rn,mie),e(mie,UIo),e(rn,JIo),e(rn,gie),e(gie,YIo),e(rn,KIo),e(rn,hie),e(hie,ZIo),e(rn,ejo),e(Ue,ojo),e(Ue,pie),e(pie,ev),e(ev,_ie),e(_ie,rjo),e(ev,tjo),e(ev,uN),e(uN,ajo),e(ev,njo),e(Ue,sjo),e(Ue,ov),e(ov,ljo),e(ov,uie),e(uie,ijo),e(ov,djo),e(ov,bie),e(bie,cjo),e(Ue,fjo),e(Ue,vie),e(vie,mjo),e(Ue,gjo),g(i3,Ue,null),b(d,Oxe,u),b(d,Id,u),e(Id,rv),e(rv,Tie),g(d3,Tie,null),e(Id,hjo),e(Id,Fie),e(Fie,pjo),b(d,Gxe,u),b(d,dr,u),g(c3,dr,null),e(dr,_jo),e(dr,jd),e(jd,ujo),e(jd,Cie),e(Cie,bjo),e(jd,vjo),e(jd,Mie),e(Mie,Tjo),e(jd,Fjo),e(dr,Cjo),e(dr,f3),e(f3,Mjo),e(f3,Eie),e(Eie,Ejo),e(f3,yjo),e(dr,wjo),e(dr,tt),g(m3,tt,null),e(tt,Ajo),e(tt,yie),e(yie,Ljo),e(tt,Bjo),e(tt,Dd),e(Dd,xjo),e(Dd,wie),e(wie,kjo),e(Dd,Rjo),e(Dd,Aie),e(Aie,Sjo),e(Dd,Pjo),e(tt,$jo),e(tt,Lie),e(Lie,Ijo),e(tt,jjo),g(g3,tt,null),e(dr,Djo),e(dr,Je),g(h3,Je,null),e(Je,Njo),e(Je,Bie),e(Bie,qjo),e(Je,Ojo),e(Je,tn),e(tn,Gjo),e(tn,xie),e(xie,Xjo),e(tn,Vjo),e(tn,kie),e(kie,zjo),e(tn,Wjo),e(tn,Rie),e(Rie,Qjo),e(tn,Hjo),e(Je,Ujo),e(Je,xe),e(xe,tv),e(tv,Sie),e(Sie,Jjo),e(tv,Yjo),e(tv,bN),e(bN,Kjo),e(tv,Zjo),e(xe,eDo),e(xe,av),e(av,Pie),e(Pie,oDo),e(av,rDo),e(av,vN),e(vN,tDo),e(av,aDo),e(xe,nDo),e(xe,nv),e(nv,$ie),e($ie,sDo),e(nv,lDo),e(nv,TN),e(TN,iDo),e(nv,dDo),e(xe,cDo),e(xe,sv),e(sv,Iie),e(Iie,fDo),e(sv,mDo),e(sv,FN),e(FN,gDo),e(sv,hDo),e(xe,pDo),e(xe,lv),e(lv,jie),e(jie,_Do),e(lv,uDo),e(lv,CN),e(CN,bDo),e(lv,vDo),e(xe,TDo),e(xe,iv),e(iv,Die),e(Die,FDo),e(iv,CDo),e(iv,MN),e(MN,MDo),e(iv,EDo),e(xe,yDo),e(xe,dv),e(dv,Nie),e(Nie,wDo),e(dv,ADo),e(dv,EN),e(EN,LDo),e(dv,BDo),e(xe,xDo),e(xe,cv),e(cv,qie),e(qie,kDo),e(cv,RDo),e(cv,yN),e(yN,SDo),e(cv,PDo),e(Je,$Do),e(Je,fv),e(fv,IDo),e(fv,Oie),e(Oie,jDo),e(fv,DDo),e(fv,Gie),e(Gie,NDo),e(Je,qDo),e(Je,Xie),e(Xie,ODo),e(Je,GDo),g(p3,Je,null),b(d,Xxe,u),b(d,Nd,u),e(Nd,mv),e(mv,Vie),g(_3,Vie,null),e(Nd,XDo),e(Nd,zie),e(zie,VDo),b(d,Vxe,u),b(d,cr,u),g(u3,cr,null),e(cr,zDo),e(cr,qd),e(qd,WDo),e(qd,Wie),e(Wie,QDo),e(qd,HDo),e(qd,Qie),e(Qie,UDo),e(qd,JDo),e(cr,YDo),e(cr,b3),e(b3,KDo),e(b3,Hie),e(Hie,ZDo),e(b3,eNo),e(cr,oNo),e(cr,at),g(v3,at,null),e(at,rNo),e(at,Uie),e(Uie,tNo),e(at,aNo),e(at,Od),e(Od,nNo),e(Od,Jie),e(Jie,sNo),e(Od,lNo),e(Od,Yie),e(Yie,iNo),e(Od,dNo),e(at,cNo),e(at,Kie),e(Kie,fNo),e(at,mNo),g(T3,at,null),e(cr,gNo),e(cr,Ye),g(F3,Ye,null),e(Ye,hNo),e(Ye,Zie),e(Zie,pNo),e(Ye,_No),e(Ye,an),e(an,uNo),e(an,ede),e(ede,bNo),e(an,vNo),e(an,ode),e(ode,TNo),e(an,FNo),e(an,rde),e(rde,CNo),e(an,MNo),e(Ye,ENo),e(Ye,nn),e(nn,gv),e(gv,tde),e(tde,yNo),e(gv,wNo),e(gv,wN),e(wN,ANo),e(gv,LNo),e(nn,BNo),e(nn,hv),e(hv,ade),e(ade,xNo),e(hv,kNo),e(hv,AN),e(AN,RNo),e(hv,SNo),e(nn,PNo),e(nn,pv),e(pv,nde),e(nde,$No),e(pv,INo),e(pv,LN),e(LN,jNo),e(pv,DNo),e(nn,NNo),e(nn,_v),e(_v,sde),e(sde,qNo),e(_v,ONo),e(_v,BN),e(BN,GNo),e(_v,XNo),e(Ye,VNo),e(Ye,uv),e(uv,zNo),e(uv,lde),e(lde,WNo),e(uv,QNo),e(uv,ide),e(ide,HNo),e(Ye,UNo),e(Ye,dde),e(dde,JNo),e(Ye,YNo),g(C3,Ye,null),b(d,zxe,u),b(d,Gd,u),e(Gd,bv),e(bv,cde),g(M3,cde,null),e(Gd,KNo),e(Gd,fde),e(fde,ZNo),b(d,Wxe,u),b(d,fr,u),g(E3,fr,null),e(fr,eqo),e(fr,Xd),e(Xd,oqo),e(Xd,mde),e(mde,rqo),e(Xd,tqo),e(Xd,gde),e(gde,aqo),e(Xd,nqo),e(fr,sqo),e(fr,y3),e(y3,lqo),e(y3,hde),e(hde,iqo),e(y3,dqo),e(fr,cqo),e(fr,nt),g(w3,nt,null),e(nt,fqo),e(nt,pde),e(pde,mqo),e(nt,gqo),e(nt,Vd),e(Vd,hqo),e(Vd,_de),e(_de,pqo),e(Vd,_qo),e(Vd,ude),e(ude,uqo),e(Vd,bqo),e(nt,vqo),e(nt,bde),e(bde,Tqo),e(nt,Fqo),g(A3,nt,null),e(fr,Cqo),e(fr,Ke),g(L3,Ke,null),e(Ke,Mqo),e(Ke,vde),e(vde,Eqo),e(Ke,yqo),e(Ke,sn),e(sn,wqo),e(sn,Tde),e(Tde,Aqo),e(sn,Lqo),e(sn,Fde),e(Fde,Bqo),e(sn,xqo),e(sn,Cde),e(Cde,kqo),e(sn,Rqo),e(Ke,Sqo),e(Ke,ke),e(ke,vv),e(vv,Mde),e(Mde,Pqo),e(vv,$qo),e(vv,xN),e(xN,Iqo),e(vv,jqo),e(ke,Dqo),e(ke,Tv),e(Tv,Ede),e(Ede,Nqo),e(Tv,qqo),e(Tv,kN),e(kN,Oqo),e(Tv,Gqo),e(ke,Xqo),e(ke,Fv),e(Fv,yde),e(yde,Vqo),e(Fv,zqo),e(Fv,RN),e(RN,Wqo),e(Fv,Qqo),e(ke,Hqo),e(ke,Cv),e(Cv,wde),e(wde,Uqo),e(Cv,Jqo),e(Cv,SN),e(SN,Yqo),e(Cv,Kqo),e(ke,Zqo),e(ke,Mv),e(Mv,Ade),e(Ade,eOo),e(Mv,oOo),e(Mv,PN),e(PN,rOo),e(Mv,tOo),e(ke,aOo),e(ke,Ev),e(Ev,Lde),e(Lde,nOo),e(Ev,sOo),e(Ev,$N),e($N,lOo),e(Ev,iOo),e(ke,dOo),e(ke,yv),e(yv,Bde),e(Bde,cOo),e(yv,fOo),e(yv,IN),e(IN,mOo),e(yv,gOo),e(ke,hOo),e(ke,wv),e(wv,xde),e(xde,pOo),e(wv,_Oo),e(wv,jN),e(jN,uOo),e(wv,bOo),e(Ke,vOo),e(Ke,Av),e(Av,TOo),e(Av,kde),e(kde,FOo),e(Av,COo),e(Av,Rde),e(Rde,MOo),e(Ke,EOo),e(Ke,Sde),e(Sde,yOo),e(Ke,wOo),g(B3,Ke,null),b(d,Qxe,u),b(d,zd,u),e(zd,Lv),e(Lv,Pde),g(x3,Pde,null),e(zd,AOo),e(zd,$de),e($de,LOo),b(d,Hxe,u),b(d,mr,u),g(k3,mr,null),e(mr,BOo),e(mr,Wd),e(Wd,xOo),e(Wd,Ide),e(Ide,kOo),e(Wd,ROo),e(Wd,jde),e(jde,SOo),e(Wd,POo),e(mr,$Oo),e(mr,R3),e(R3,IOo),e(R3,Dde),e(Dde,jOo),e(R3,DOo),e(mr,NOo),e(mr,st),g(S3,st,null),e(st,qOo),e(st,Nde),e(Nde,OOo),e(st,GOo),e(st,Qd),e(Qd,XOo),e(Qd,qde),e(qde,VOo),e(Qd,zOo),e(Qd,Ode),e(Ode,WOo),e(Qd,QOo),e(st,HOo),e(st,Gde),e(Gde,UOo),e(st,JOo),g(P3,st,null),e(mr,YOo),e(mr,Ze),g($3,Ze,null),e(Ze,KOo),e(Ze,Xde),e(Xde,ZOo),e(Ze,eGo),e(Ze,ln),e(ln,oGo),e(ln,Vde),e(Vde,rGo),e(ln,tGo),e(ln,zde),e(zde,aGo),e(ln,nGo),e(ln,Wde),e(Wde,sGo),e(ln,lGo),e(Ze,iGo),e(Ze,I3),e(I3,Bv),e(Bv,Qde),e(Qde,dGo),e(Bv,cGo),e(Bv,DN),e(DN,fGo),e(Bv,mGo),e(I3,gGo),e(I3,xv),e(xv,Hde),e(Hde,hGo),e(xv,pGo),e(xv,NN),e(NN,_Go),e(xv,uGo),e(Ze,bGo),e(Ze,kv),e(kv,vGo),e(kv,Ude),e(Ude,TGo),e(kv,FGo),e(kv,Jde),e(Jde,CGo),e(Ze,MGo),e(Ze,Yde),e(Yde,EGo),e(Ze,yGo),g(j3,Ze,null),b(d,Uxe,u),b(d,Hd,u),e(Hd,Rv),e(Rv,Kde),g(D3,Kde,null),e(Hd,wGo),e(Hd,Zde),e(Zde,AGo),b(d,Jxe,u),b(d,gr,u),g(N3,gr,null),e(gr,LGo),e(gr,Ud),e(Ud,BGo),e(Ud,ece),e(ece,xGo),e(Ud,kGo),e(Ud,oce),e(oce,RGo),e(Ud,SGo),e(gr,PGo),e(gr,q3),e(q3,$Go),e(q3,rce),e(rce,IGo),e(q3,jGo),e(gr,DGo),e(gr,lt),g(O3,lt,null),e(lt,NGo),e(lt,tce),e(tce,qGo),e(lt,OGo),e(lt,Jd),e(Jd,GGo),e(Jd,ace),e(ace,XGo),e(Jd,VGo),e(Jd,nce),e(nce,zGo),e(Jd,WGo),e(lt,QGo),e(lt,sce),e(sce,HGo),e(lt,UGo),g(G3,lt,null),e(gr,JGo),e(gr,eo),g(X3,eo,null),e(eo,YGo),e(eo,lce),e(lce,KGo),e(eo,ZGo),e(eo,dn),e(dn,eXo),e(dn,ice),e(ice,oXo),e(dn,rXo),e(dn,dce),e(dce,tXo),e(dn,aXo),e(dn,cce),e(cce,nXo),e(dn,sXo),e(eo,lXo),e(eo,cn),e(cn,Sv),e(Sv,fce),e(fce,iXo),e(Sv,dXo),e(Sv,qN),e(qN,cXo),e(Sv,fXo),e(cn,mXo),e(cn,Pv),e(Pv,mce),e(mce,gXo),e(Pv,hXo),e(Pv,ON),e(ON,pXo),e(Pv,_Xo),e(cn,uXo),e(cn,$v),e($v,gce),e(gce,bXo),e($v,vXo),e($v,GN),e(GN,TXo),e($v,FXo),e(cn,CXo),e(cn,Iv),e(Iv,hce),e(hce,MXo),e(Iv,EXo),e(Iv,XN),e(XN,yXo),e(Iv,wXo),e(eo,AXo),e(eo,jv),e(jv,LXo),e(jv,pce),e(pce,BXo),e(jv,xXo),e(jv,_ce),e(_ce,kXo),e(eo,RXo),e(eo,uce),e(uce,SXo),e(eo,PXo),g(V3,eo,null),b(d,Yxe,u),b(d,Yd,u),e(Yd,Dv),e(Dv,bce),g(z3,bce,null),e(Yd,$Xo),e(Yd,vce),e(vce,IXo),b(d,Kxe,u),b(d,hr,u),g(W3,hr,null),e(hr,jXo),e(hr,Kd),e(Kd,DXo),e(Kd,Tce),e(Tce,NXo),e(Kd,qXo),e(Kd,Fce),e(Fce,OXo),e(Kd,GXo),e(hr,XXo),e(hr,Q3),e(Q3,VXo),e(Q3,Cce),e(Cce,zXo),e(Q3,WXo),e(hr,QXo),e(hr,it),g(H3,it,null),e(it,HXo),e(it,Mce),e(Mce,UXo),e(it,JXo),e(it,Zd),e(Zd,YXo),e(Zd,Ece),e(Ece,KXo),e(Zd,ZXo),e(Zd,yce),e(yce,eVo),e(Zd,oVo),e(it,rVo),e(it,wce),e(wce,tVo),e(it,aVo),g(U3,it,null),e(hr,nVo),e(hr,oo),g(J3,oo,null),e(oo,sVo),e(oo,Ace),e(Ace,lVo),e(oo,iVo),e(oo,fn),e(fn,dVo),e(fn,Lce),e(Lce,cVo),e(fn,fVo),e(fn,Bce),e(Bce,mVo),e(fn,gVo),e(fn,xce),e(xce,hVo),e(fn,pVo),e(oo,_Vo),e(oo,ec),e(ec,Nv),e(Nv,kce),e(kce,uVo),e(Nv,bVo),e(Nv,VN),e(VN,vVo),e(Nv,TVo),e(ec,FVo),e(ec,qv),e(qv,Rce),e(Rce,CVo),e(qv,MVo),e(qv,zN),e(zN,EVo),e(qv,yVo),e(ec,wVo),e(ec,Ov),e(Ov,Sce),e(Sce,AVo),e(Ov,LVo),e(Ov,WN),e(WN,BVo),e(Ov,xVo),e(oo,kVo),e(oo,Gv),e(Gv,RVo),e(Gv,Pce),e(Pce,SVo),e(Gv,PVo),e(Gv,$ce),e($ce,$Vo),e(oo,IVo),e(oo,Ice),e(Ice,jVo),e(oo,DVo),g(Y3,oo,null),b(d,Zxe,u),b(d,oc,u),e(oc,Xv),e(Xv,jce),g(K3,jce,null),e(oc,NVo),e(oc,Dce),e(Dce,qVo),b(d,eke,u),b(d,pr,u),g(Z3,pr,null),e(pr,OVo),e(pr,rc),e(rc,GVo),e(rc,Nce),e(Nce,XVo),e(rc,VVo),e(rc,qce),e(qce,zVo),e(rc,WVo),e(pr,QVo),e(pr,ey),e(ey,HVo),e(ey,Oce),e(Oce,UVo),e(ey,JVo),e(pr,YVo),e(pr,dt),g(oy,dt,null),e(dt,KVo),e(dt,Gce),e(Gce,ZVo),e(dt,ezo),e(dt,tc),e(tc,ozo),e(tc,Xce),e(Xce,rzo),e(tc,tzo),e(tc,Vce),e(Vce,azo),e(tc,nzo),e(dt,szo),e(dt,zce),e(zce,lzo),e(dt,izo),g(ry,dt,null),e(pr,dzo),e(pr,ro),g(ty,ro,null),e(ro,czo),e(ro,Wce),e(Wce,fzo),e(ro,mzo),e(ro,mn),e(mn,gzo),e(mn,Qce),e(Qce,hzo),e(mn,pzo),e(mn,Hce),e(Hce,_zo),e(mn,uzo),e(mn,Uce),e(Uce,bzo),e(mn,vzo),e(ro,Tzo),e(ro,Jce),e(Jce,Vv),e(Vv,Yce),e(Yce,Fzo),e(Vv,Czo),e(Vv,QN),e(QN,Mzo),e(Vv,Ezo),e(ro,yzo),e(ro,zv),e(zv,wzo),e(zv,Kce),e(Kce,Azo),e(zv,Lzo),e(zv,Zce),e(Zce,Bzo),e(ro,xzo),e(ro,efe),e(efe,kzo),e(ro,Rzo),g(ay,ro,null),b(d,oke,u),b(d,ac,u),e(ac,Wv),e(Wv,ofe),g(ny,ofe,null),e(ac,Szo),e(ac,rfe),e(rfe,Pzo),b(d,rke,u),b(d,_r,u),g(sy,_r,null),e(_r,$zo),e(_r,nc),e(nc,Izo),e(nc,tfe),e(tfe,jzo),e(nc,Dzo),e(nc,afe),e(afe,Nzo),e(nc,qzo),e(_r,Ozo),e(_r,ly),e(ly,Gzo),e(ly,nfe),e(nfe,Xzo),e(ly,Vzo),e(_r,zzo),e(_r,ct),g(iy,ct,null),e(ct,Wzo),e(ct,sfe),e(sfe,Qzo),e(ct,Hzo),e(ct,sc),e(sc,Uzo),e(sc,lfe),e(lfe,Jzo),e(sc,Yzo),e(sc,ife),e(ife,Kzo),e(sc,Zzo),e(ct,eWo),e(ct,dfe),e(dfe,oWo),e(ct,rWo),g(dy,ct,null),e(_r,tWo),e(_r,to),g(cy,to,null),e(to,aWo),e(to,cfe),e(cfe,nWo),e(to,sWo),e(to,gn),e(gn,lWo),e(gn,ffe),e(ffe,iWo),e(gn,dWo),e(gn,mfe),e(mfe,cWo),e(gn,fWo),e(gn,gfe),e(gfe,mWo),e(gn,gWo),e(to,hWo),e(to,hfe),e(hfe,Qv),e(Qv,pfe),e(pfe,pWo),e(Qv,_Wo),e(Qv,HN),e(HN,uWo),e(Qv,bWo),e(to,vWo),e(to,Hv),e(Hv,TWo),e(Hv,_fe),e(_fe,FWo),e(Hv,CWo),e(Hv,ufe),e(ufe,MWo),e(to,EWo),e(to,bfe),e(bfe,yWo),e(to,wWo),g(fy,to,null),b(d,tke,u),b(d,lc,u),e(lc,Uv),e(Uv,vfe),g(my,vfe,null),e(lc,AWo),e(lc,Tfe),e(Tfe,LWo),b(d,ake,u),b(d,ur,u),g(gy,ur,null),e(ur,BWo),e(ur,ic),e(ic,xWo),e(ic,Ffe),e(Ffe,kWo),e(ic,RWo),e(ic,Cfe),e(Cfe,SWo),e(ic,PWo),e(ur,$Wo),e(ur,hy),e(hy,IWo),e(hy,Mfe),e(Mfe,jWo),e(hy,DWo),e(ur,NWo),e(ur,ft),g(py,ft,null),e(ft,qWo),e(ft,Efe),e(Efe,OWo),e(ft,GWo),e(ft,dc),e(dc,XWo),e(dc,yfe),e(yfe,VWo),e(dc,zWo),e(dc,wfe),e(wfe,WWo),e(dc,QWo),e(ft,HWo),e(ft,Afe),e(Afe,UWo),e(ft,JWo),g(_y,ft,null),e(ur,YWo),e(ur,ao),g(uy,ao,null),e(ao,KWo),e(ao,Lfe),e(Lfe,ZWo),e(ao,eQo),e(ao,hn),e(hn,oQo),e(hn,Bfe),e(Bfe,rQo),e(hn,tQo),e(hn,xfe),e(xfe,aQo),e(hn,nQo),e(hn,kfe),e(kfe,sQo),e(hn,lQo),e(ao,iQo),e(ao,by),e(by,Jv),e(Jv,Rfe),e(Rfe,dQo),e(Jv,cQo),e(Jv,UN),e(UN,fQo),e(Jv,mQo),e(by,gQo),e(by,Yv),e(Yv,Sfe),e(Sfe,hQo),e(Yv,pQo),e(Yv,JN),e(JN,_Qo),e(Yv,uQo),e(ao,bQo),e(ao,Kv),e(Kv,vQo),e(Kv,Pfe),e(Pfe,TQo),e(Kv,FQo),e(Kv,$fe),e($fe,CQo),e(ao,MQo),e(ao,Ife),e(Ife,EQo),e(ao,yQo),g(vy,ao,null),b(d,nke,u),b(d,cc,u),e(cc,Zv),e(Zv,jfe),g(Ty,jfe,null),e(cc,wQo),e(cc,Dfe),e(Dfe,AQo),b(d,ske,u),b(d,br,u),g(Fy,br,null),e(br,LQo),e(br,fc),e(fc,BQo),e(fc,Nfe),e(Nfe,xQo),e(fc,kQo),e(fc,qfe),e(qfe,RQo),e(fc,SQo),e(br,PQo),e(br,Cy),e(Cy,$Qo),e(Cy,Ofe),e(Ofe,IQo),e(Cy,jQo),e(br,DQo),e(br,mt),g(My,mt,null),e(mt,NQo),e(mt,Gfe),e(Gfe,qQo),e(mt,OQo),e(mt,mc),e(mc,GQo),e(mc,Xfe),e(Xfe,XQo),e(mc,VQo),e(mc,Vfe),e(Vfe,zQo),e(mc,WQo),e(mt,QQo),e(mt,zfe),e(zfe,HQo),e(mt,UQo),g(Ey,mt,null),e(br,JQo),e(br,no),g(yy,no,null),e(no,YQo),e(no,Wfe),e(Wfe,KQo),e(no,ZQo),e(no,pn),e(pn,eHo),e(pn,Qfe),e(Qfe,oHo),e(pn,rHo),e(pn,Hfe),e(Hfe,tHo),e(pn,aHo),e(pn,Ufe),e(Ufe,nHo),e(pn,sHo),e(no,lHo),e(no,Jfe),e(Jfe,e0),e(e0,Yfe),e(Yfe,iHo),e(e0,dHo),e(e0,YN),e(YN,cHo),e(e0,fHo),e(no,mHo),e(no,o0),e(o0,gHo),e(o0,Kfe),e(Kfe,hHo),e(o0,pHo),e(o0,Zfe),e(Zfe,_Ho),e(no,uHo),e(no,eme),e(eme,bHo),e(no,vHo),g(wy,no,null),b(d,lke,u),b(d,gc,u),e(gc,r0),e(r0,ome),g(Ay,ome,null),e(gc,THo),e(gc,rme),e(rme,FHo),b(d,ike,u),b(d,vr,u),g(Ly,vr,null),e(vr,CHo),e(vr,hc),e(hc,MHo),e(hc,tme),e(tme,EHo),e(hc,yHo),e(hc,ame),e(ame,wHo),e(hc,AHo),e(vr,LHo),e(vr,By),e(By,BHo),e(By,nme),e(nme,xHo),e(By,kHo),e(vr,RHo),e(vr,gt),g(xy,gt,null),e(gt,SHo),e(gt,sme),e(sme,PHo),e(gt,$Ho),e(gt,pc),e(pc,IHo),e(pc,lme),e(lme,jHo),e(pc,DHo),e(pc,ime),e(ime,NHo),e(pc,qHo),e(gt,OHo),e(gt,dme),e(dme,GHo),e(gt,XHo),g(ky,gt,null),e(vr,VHo),e(vr,ho),g(Ry,ho,null),e(ho,zHo),e(ho,cme),e(cme,WHo),e(ho,QHo),e(ho,_n),e(_n,HHo),e(_n,fme),e(fme,UHo),e(_n,JHo),e(_n,mme),e(mme,YHo),e(_n,KHo),e(_n,gme),e(gme,ZHo),e(_n,eUo),e(ho,oUo),e(ho,B),e(B,t0),e(t0,hme),e(hme,rUo),e(t0,tUo),e(t0,KN),e(KN,aUo),e(t0,nUo),e(B,sUo),e(B,a0),e(a0,pme),e(pme,lUo),e(a0,iUo),e(a0,ZN),e(ZN,dUo),e(a0,cUo),e(B,fUo),e(B,n0),e(n0,_me),e(_me,mUo),e(n0,gUo),e(n0,eq),e(eq,hUo),e(n0,pUo),e(B,_Uo),e(B,s0),e(s0,ume),e(ume,uUo),e(s0,bUo),e(s0,oq),e(oq,vUo),e(s0,TUo),e(B,FUo),e(B,l0),e(l0,bme),e(bme,CUo),e(l0,MUo),e(l0,rq),e(rq,EUo),e(l0,yUo),e(B,wUo),e(B,i0),e(i0,vme),e(vme,AUo),e(i0,LUo),e(i0,tq),e(tq,BUo),e(i0,xUo),e(B,kUo),e(B,d0),e(d0,Tme),e(Tme,RUo),e(d0,SUo),e(d0,aq),e(aq,PUo),e(d0,$Uo),e(B,IUo),e(B,c0),e(c0,Fme),e(Fme,jUo),e(c0,DUo),e(c0,nq),e(nq,NUo),e(c0,qUo),e(B,OUo),e(B,f0),e(f0,Cme),e(Cme,GUo),e(f0,XUo),e(f0,sq),e(sq,VUo),e(f0,zUo),e(B,WUo),e(B,m0),e(m0,Mme),e(Mme,QUo),e(m0,HUo),e(m0,lq),e(lq,UUo),e(m0,JUo),e(B,YUo),e(B,g0),e(g0,Eme),e(Eme,KUo),e(g0,ZUo),e(g0,iq),e(iq,eJo),e(g0,oJo),e(B,rJo),e(B,h0),e(h0,yme),e(yme,tJo),e(h0,aJo),e(h0,dq),e(dq,nJo),e(h0,sJo),e(B,lJo),e(B,p0),e(p0,wme),e(wme,iJo),e(p0,dJo),e(p0,cq),e(cq,cJo),e(p0,fJo),e(B,mJo),e(B,_0),e(_0,Ame),e(Ame,gJo),e(_0,hJo),e(_0,fq),e(fq,pJo),e(_0,_Jo),e(B,uJo),e(B,u0),e(u0,Lme),e(Lme,bJo),e(u0,vJo),e(u0,mq),e(mq,TJo),e(u0,FJo),e(B,CJo),e(B,b0),e(b0,Bme),e(Bme,MJo),e(b0,EJo),e(b0,gq),e(gq,yJo),e(b0,wJo),e(B,AJo),e(B,Os),e(Os,xme),e(xme,LJo),e(Os,BJo),e(Os,hq),e(hq,xJo),e(Os,kJo),e(Os,pq),e(pq,RJo),e(Os,SJo),e(B,PJo),e(B,v0),e(v0,kme),e(kme,$Jo),e(v0,IJo),e(v0,_q),e(_q,jJo),e(v0,DJo),e(B,NJo),e(B,T0),e(T0,Rme),e(Rme,qJo),e(T0,OJo),e(T0,uq),e(uq,GJo),e(T0,XJo),e(B,VJo),e(B,F0),e(F0,Sme),e(Sme,zJo),e(F0,WJo),e(F0,bq),e(bq,QJo),e(F0,HJo),e(B,UJo),e(B,C0),e(C0,Pme),e(Pme,JJo),e(C0,YJo),e(C0,vq),e(vq,KJo),e(C0,ZJo),e(B,eYo),e(B,M0),e(M0,$me),e($me,oYo),e(M0,rYo),e(M0,Tq),e(Tq,tYo),e(M0,aYo),e(B,nYo),e(B,E0),e(E0,Ime),e(Ime,sYo),e(E0,lYo),e(E0,Fq),e(Fq,iYo),e(E0,dYo),e(B,cYo),e(B,y0),e(y0,jme),e(jme,fYo),e(y0,mYo),e(y0,Cq),e(Cq,gYo),e(y0,hYo),e(B,pYo),e(B,w0),e(w0,Dme),e(Dme,_Yo),e(w0,uYo),e(w0,Mq),e(Mq,bYo),e(w0,vYo),e(B,TYo),e(B,A0),e(A0,Nme),e(Nme,FYo),e(A0,CYo),e(A0,Eq),e(Eq,MYo),e(A0,EYo),e(B,yYo),e(B,L0),e(L0,qme),e(qme,wYo),e(L0,AYo),e(L0,yq),e(yq,LYo),e(L0,BYo),e(B,xYo),e(B,B0),e(B0,Ome),e(Ome,kYo),e(B0,RYo),e(B0,wq),e(wq,SYo),e(B0,PYo),e(B,$Yo),e(B,x0),e(x0,Gme),e(Gme,IYo),e(x0,jYo),e(x0,Aq),e(Aq,DYo),e(x0,NYo),e(B,qYo),e(B,k0),e(k0,Xme),e(Xme,OYo),e(k0,GYo),e(k0,Lq),e(Lq,XYo),e(k0,VYo),e(B,zYo),e(B,R0),e(R0,Vme),e(Vme,WYo),e(R0,QYo),e(R0,Bq),e(Bq,HYo),e(R0,UYo),e(B,JYo),e(B,S0),e(S0,zme),e(zme,YYo),e(S0,KYo),e(S0,xq),e(xq,ZYo),e(S0,eKo),e(B,oKo),e(B,P0),e(P0,Wme),e(Wme,rKo),e(P0,tKo),e(P0,kq),e(kq,aKo),e(P0,nKo),e(B,sKo),e(B,$0),e($0,Qme),e(Qme,lKo),e($0,iKo),e($0,Rq),e(Rq,dKo),e($0,cKo),e(B,fKo),e(B,I0),e(I0,Hme),e(Hme,mKo),e(I0,gKo),e(I0,Sq),e(Sq,hKo),e(I0,pKo),e(B,_Ko),e(B,j0),e(j0,Ume),e(Ume,uKo),e(j0,bKo),e(j0,Pq),e(Pq,vKo),e(j0,TKo),e(B,FKo),e(B,D0),e(D0,Jme),e(Jme,CKo),e(D0,MKo),e(D0,$q),e($q,EKo),e(D0,yKo),e(B,wKo),e(B,N0),e(N0,Yme),e(Yme,AKo),e(N0,LKo),e(N0,Iq),e(Iq,BKo),e(N0,xKo),e(B,kKo),e(B,q0),e(q0,Kme),e(Kme,RKo),e(q0,SKo),e(q0,jq),e(jq,PKo),e(q0,$Ko),e(B,IKo),e(B,O0),e(O0,Zme),e(Zme,jKo),e(O0,DKo),e(O0,Dq),e(Dq,NKo),e(O0,qKo),e(B,OKo),e(B,G0),e(G0,ege),e(ege,GKo),e(G0,XKo),e(G0,Nq),e(Nq,VKo),e(G0,zKo),e(B,WKo),e(B,X0),e(X0,oge),e(oge,QKo),e(X0,HKo),e(X0,qq),e(qq,UKo),e(X0,JKo),e(ho,YKo),e(ho,rge),e(rge,KKo),e(ho,ZKo),g(Sy,ho,null),b(d,dke,u),b(d,_c,u),e(_c,V0),e(V0,tge),g(Py,tge,null),e(_c,eZo),e(_c,age),e(age,oZo),b(d,cke,u),b(d,Tr,u),g($y,Tr,null),e(Tr,rZo),e(Tr,uc),e(uc,tZo),e(uc,nge),e(nge,aZo),e(uc,nZo),e(uc,sge),e(sge,sZo),e(uc,lZo),e(Tr,iZo),e(Tr,Iy),e(Iy,dZo),e(Iy,lge),e(lge,cZo),e(Iy,fZo),e(Tr,mZo),e(Tr,ht),g(jy,ht,null),e(ht,gZo),e(ht,ige),e(ige,hZo),e(ht,pZo),e(ht,bc),e(bc,_Zo),e(bc,dge),e(dge,uZo),e(bc,bZo),e(bc,cge),e(cge,vZo),e(bc,TZo),e(ht,FZo),e(ht,fge),e(fge,CZo),e(ht,MZo),g(Dy,ht,null),e(Tr,EZo),e(Tr,po),g(Ny,po,null),e(po,yZo),e(po,mge),e(mge,wZo),e(po,AZo),e(po,un),e(un,LZo),e(un,gge),e(gge,BZo),e(un,xZo),e(un,hge),e(hge,kZo),e(un,RZo),e(un,pge),e(pge,SZo),e(un,PZo),e(po,$Zo),e(po,H),e(H,z0),e(z0,_ge),e(_ge,IZo),e(z0,jZo),e(z0,Oq),e(Oq,DZo),e(z0,NZo),e(H,qZo),e(H,W0),e(W0,uge),e(uge,OZo),e(W0,GZo),e(W0,Gq),e(Gq,XZo),e(W0,VZo),e(H,zZo),e(H,Q0),e(Q0,bge),e(bge,WZo),e(Q0,QZo),e(Q0,Xq),e(Xq,HZo),e(Q0,UZo),e(H,JZo),e(H,H0),e(H0,vge),e(vge,YZo),e(H0,KZo),e(H0,Vq),e(Vq,ZZo),e(H0,eer),e(H,oer),e(H,U0),e(U0,Tge),e(Tge,rer),e(U0,ter),e(U0,zq),e(zq,aer),e(U0,ner),e(H,ser),e(H,J0),e(J0,Fge),e(Fge,ler),e(J0,ier),e(J0,Wq),e(Wq,der),e(J0,cer),e(H,fer),e(H,Y0),e(Y0,Cge),e(Cge,mer),e(Y0,ger),e(Y0,Qq),e(Qq,her),e(Y0,per),e(H,_er),e(H,K0),e(K0,Mge),e(Mge,uer),e(K0,ber),e(K0,Hq),e(Hq,ver),e(K0,Ter),e(H,Fer),e(H,Z0),e(Z0,Ege),e(Ege,Cer),e(Z0,Mer),e(Z0,Uq),e(Uq,Eer),e(Z0,yer),e(H,wer),e(H,eT),e(eT,yge),e(yge,Aer),e(eT,Ler),e(eT,Jq),e(Jq,Ber),e(eT,xer),e(H,ker),e(H,oT),e(oT,wge),e(wge,Rer),e(oT,Ser),e(oT,Yq),e(Yq,Per),e(oT,$er),e(H,Ier),e(H,rT),e(rT,Age),e(Age,jer),e(rT,Der),e(rT,Kq),e(Kq,Ner),e(rT,qer),e(H,Oer),e(H,tT),e(tT,Lge),e(Lge,Ger),e(tT,Xer),e(tT,Zq),e(Zq,Ver),e(tT,zer),e(H,Wer),e(H,aT),e(aT,Bge),e(Bge,Qer),e(aT,Her),e(aT,eO),e(eO,Uer),e(aT,Jer),e(H,Yer),e(H,nT),e(nT,xge),e(xge,Ker),e(nT,Zer),e(nT,oO),e(oO,eor),e(nT,oor),e(H,ror),e(H,sT),e(sT,kge),e(kge,tor),e(sT,aor),e(sT,rO),e(rO,nor),e(sT,sor),e(H,lor),e(H,lT),e(lT,Rge),e(Rge,ior),e(lT,dor),e(lT,tO),e(tO,cor),e(lT,mor),e(H,gor),e(H,iT),e(iT,Sge),e(Sge,hor),e(iT,por),e(iT,aO),e(aO,_or),e(iT,uor),e(H,bor),e(H,dT),e(dT,Pge),e(Pge,vor),e(dT,Tor),e(dT,nO),e(nO,For),e(dT,Cor),e(H,Mor),e(H,cT),e(cT,$ge),e($ge,Eor),e(cT,yor),e(cT,sO),e(sO,wor),e(cT,Aor),e(H,Lor),e(H,fT),e(fT,Ige),e(Ige,Bor),e(fT,xor),e(fT,lO),e(lO,kor),e(fT,Ror),e(H,Sor),e(H,mT),e(mT,jge),e(jge,Por),e(mT,$or),e(mT,iO),e(iO,Ior),e(mT,jor),e(po,Dor),e(po,Dge),e(Dge,Nor),e(po,qor),g(qy,po,null),b(d,fke,u),b(d,vc,u),e(vc,gT),e(gT,Nge),g(Oy,Nge,null),e(vc,Oor),e(vc,qge),e(qge,Gor),b(d,mke,u),b(d,Fr,u),g(Gy,Fr,null),e(Fr,Xor),e(Fr,Tc),e(Tc,Vor),e(Tc,Oge),e(Oge,zor),e(Tc,Wor),e(Tc,Gge),e(Gge,Qor),e(Tc,Hor),e(Fr,Uor),e(Fr,Xy),e(Xy,Jor),e(Xy,Xge),e(Xge,Yor),e(Xy,Kor),e(Fr,Zor),e(Fr,pt),g(Vy,pt,null),e(pt,err),e(pt,Vge),e(Vge,orr),e(pt,rrr),e(pt,Fc),e(Fc,trr),e(Fc,zge),e(zge,arr),e(Fc,nrr),e(Fc,Wge),e(Wge,srr),e(Fc,lrr),e(pt,irr),e(pt,Qge),e(Qge,drr),e(pt,crr),g(zy,pt,null),e(Fr,frr),e(Fr,_o),g(Wy,_o,null),e(_o,mrr),e(_o,Hge),e(Hge,grr),e(_o,hrr),e(_o,bn),e(bn,prr),e(bn,Uge),e(Uge,_rr),e(bn,urr),e(bn,Jge),e(Jge,brr),e(bn,vrr),e(bn,Yge),e(Yge,Trr),e(bn,Frr),e(_o,Crr),e(_o,pe),e(pe,hT),e(hT,Kge),e(Kge,Mrr),e(hT,Err),e(hT,dO),e(dO,yrr),e(hT,wrr),e(pe,Arr),e(pe,pT),e(pT,Zge),e(Zge,Lrr),e(pT,Brr),e(pT,cO),e(cO,xrr),e(pT,krr),e(pe,Rrr),e(pe,_T),e(_T,ehe),e(ehe,Srr),e(_T,Prr),e(_T,fO),e(fO,$rr),e(_T,Irr),e(pe,jrr),e(pe,uT),e(uT,ohe),e(ohe,Drr),e(uT,Nrr),e(uT,mO),e(mO,qrr),e(uT,Orr),e(pe,Grr),e(pe,bT),e(bT,rhe),e(rhe,Xrr),e(bT,Vrr),e(bT,gO),e(gO,zrr),e(bT,Wrr),e(pe,Qrr),e(pe,vT),e(vT,the),e(the,Hrr),e(vT,Urr),e(vT,hO),e(hO,Jrr),e(vT,Yrr),e(pe,Krr),e(pe,TT),e(TT,ahe),e(ahe,Zrr),e(TT,etr),e(TT,pO),e(pO,otr),e(TT,rtr),e(pe,ttr),e(pe,FT),e(FT,nhe),e(nhe,atr),e(FT,ntr),e(FT,_O),e(_O,str),e(FT,ltr),e(pe,itr),e(pe,CT),e(CT,she),e(she,dtr),e(CT,ctr),e(CT,uO),e(uO,ftr),e(CT,mtr),e(pe,gtr),e(pe,MT),e(MT,lhe),e(lhe,htr),e(MT,ptr),e(MT,bO),e(bO,_tr),e(MT,utr),e(_o,btr),e(_o,ihe),e(ihe,vtr),e(_o,Ttr),g(Qy,_o,null),b(d,gke,u),b(d,Cc,u),e(Cc,ET),e(ET,dhe),g(Hy,dhe,null),e(Cc,Ftr),e(Cc,che),e(che,Ctr),b(d,hke,u),b(d,Cr,u),g(Uy,Cr,null),e(Cr,Mtr),e(Cr,Mc),e(Mc,Etr),e(Mc,fhe),e(fhe,ytr),e(Mc,wtr),e(Mc,mhe),e(mhe,Atr),e(Mc,Ltr),e(Cr,Btr),e(Cr,Jy),e(Jy,xtr),e(Jy,ghe),e(ghe,ktr),e(Jy,Rtr),e(Cr,Str),e(Cr,_t),g(Yy,_t,null),e(_t,Ptr),e(_t,hhe),e(hhe,$tr),e(_t,Itr),e(_t,Ec),e(Ec,jtr),e(Ec,phe),e(phe,Dtr),e(Ec,Ntr),e(Ec,_he),e(_he,qtr),e(Ec,Otr),e(_t,Gtr),e(_t,uhe),e(uhe,Xtr),e(_t,Vtr),g(Ky,_t,null),e(Cr,ztr),e(Cr,uo),g(Zy,uo,null),e(uo,Wtr),e(uo,bhe),e(bhe,Qtr),e(uo,Htr),e(uo,vn),e(vn,Utr),e(vn,vhe),e(vhe,Jtr),e(vn,Ytr),e(vn,The),e(The,Ktr),e(vn,Ztr),e(vn,Fhe),e(Fhe,ear),e(vn,oar),e(uo,rar),e(uo,ew),e(ew,yT),e(yT,Che),e(Che,tar),e(yT,aar),e(yT,vO),e(vO,nar),e(yT,sar),e(ew,lar),e(ew,wT),e(wT,Mhe),e(Mhe,iar),e(wT,dar),e(wT,TO),e(TO,car),e(wT,far),e(uo,mar),e(uo,Ehe),e(Ehe,gar),e(uo,har),g(ow,uo,null),b(d,pke,u),b(d,yc,u),e(yc,AT),e(AT,yhe),g(rw,yhe,null),e(yc,par),e(yc,whe),e(whe,_ar),b(d,_ke,u),b(d,Mr,u),g(tw,Mr,null),e(Mr,uar),e(Mr,wc),e(wc,bar),e(wc,Ahe),e(Ahe,Tar),e(wc,Far),e(wc,Lhe),e(Lhe,Car),e(wc,Mar),e(Mr,Ear),e(Mr,aw),e(aw,yar),e(aw,Bhe),e(Bhe,war),e(aw,Aar),e(Mr,Lar),e(Mr,ut),g(nw,ut,null),e(ut,Bar),e(ut,xhe),e(xhe,xar),e(ut,kar),e(ut,Ac),e(Ac,Rar),e(Ac,khe),e(khe,Sar),e(Ac,Par),e(Ac,Rhe),e(Rhe,$ar),e(Ac,Iar),e(ut,jar),e(ut,She),e(She,Dar),e(ut,Nar),g(sw,ut,null),e(Mr,qar),e(Mr,bo),g(lw,bo,null),e(bo,Oar),e(bo,Phe),e(Phe,Gar),e(bo,Xar),e(bo,Tn),e(Tn,Var),e(Tn,$he),e($he,zar),e(Tn,War),e(Tn,Ihe),e(Ihe,Qar),e(Tn,Har),e(Tn,jhe),e(jhe,Uar),e(Tn,Jar),e(bo,Yar),e(bo,Y),e(Y,LT),e(LT,Dhe),e(Dhe,Kar),e(LT,Zar),e(LT,FO),e(FO,enr),e(LT,onr),e(Y,rnr),e(Y,BT),e(BT,Nhe),e(Nhe,tnr),e(BT,anr),e(BT,CO),e(CO,nnr),e(BT,snr),e(Y,lnr),e(Y,xT),e(xT,qhe),e(qhe,inr),e(xT,dnr),e(xT,MO),e(MO,cnr),e(xT,fnr),e(Y,mnr),e(Y,kT),e(kT,Ohe),e(Ohe,gnr),e(kT,hnr),e(kT,EO),e(EO,pnr),e(kT,_nr),e(Y,unr),e(Y,RT),e(RT,Ghe),e(Ghe,bnr),e(RT,vnr),e(RT,yO),e(yO,Tnr),e(RT,Fnr),e(Y,Cnr),e(Y,ST),e(ST,Xhe),e(Xhe,Mnr),e(ST,Enr),e(ST,wO),e(wO,ynr),e(ST,wnr),e(Y,Anr),e(Y,PT),e(PT,Vhe),e(Vhe,Lnr),e(PT,Bnr),e(PT,AO),e(AO,xnr),e(PT,knr),e(Y,Rnr),e(Y,$T),e($T,zhe),e(zhe,Snr),e($T,Pnr),e($T,LO),e(LO,$nr),e($T,Inr),e(Y,jnr),e(Y,IT),e(IT,Whe),e(Whe,Dnr),e(IT,Nnr),e(IT,BO),e(BO,qnr),e(IT,Onr),e(Y,Gnr),e(Y,jT),e(jT,Qhe),e(Qhe,Xnr),e(jT,Vnr),e(jT,xO),e(xO,znr),e(jT,Wnr),e(Y,Qnr),e(Y,DT),e(DT,Hhe),e(Hhe,Hnr),e(DT,Unr),e(DT,kO),e(kO,Jnr),e(DT,Ynr),e(Y,Knr),e(Y,NT),e(NT,Uhe),e(Uhe,Znr),e(NT,esr),e(NT,RO),e(RO,osr),e(NT,rsr),e(Y,tsr),e(Y,qT),e(qT,Jhe),e(Jhe,asr),e(qT,nsr),e(qT,SO),e(SO,ssr),e(qT,lsr),e(Y,isr),e(Y,OT),e(OT,Yhe),e(Yhe,dsr),e(OT,csr),e(OT,PO),e(PO,fsr),e(OT,msr),e(Y,gsr),e(Y,GT),e(GT,Khe),e(Khe,hsr),e(GT,psr),e(GT,$O),e($O,_sr),e(GT,usr),e(Y,bsr),e(Y,XT),e(XT,Zhe),e(Zhe,vsr),e(XT,Tsr),e(XT,IO),e(IO,Fsr),e(XT,Csr),e(Y,Msr),e(Y,VT),e(VT,epe),e(epe,Esr),e(VT,ysr),e(VT,jO),e(jO,wsr),e(VT,Asr),e(Y,Lsr),e(Y,zT),e(zT,ope),e(ope,Bsr),e(zT,xsr),e(zT,DO),e(DO,ksr),e(zT,Rsr),e(Y,Ssr),e(Y,WT),e(WT,rpe),e(rpe,Psr),e(WT,$sr),e(WT,NO),e(NO,Isr),e(WT,jsr),e(Y,Dsr),e(Y,QT),e(QT,tpe),e(tpe,Nsr),e(QT,qsr),e(QT,qO),e(qO,Osr),e(QT,Gsr),e(bo,Xsr),e(bo,ape),e(ape,Vsr),e(bo,zsr),g(iw,bo,null),b(d,uke,u),b(d,Lc,u),e(Lc,HT),e(HT,npe),g(dw,npe,null),e(Lc,Wsr),e(Lc,spe),e(spe,Qsr),b(d,bke,u),b(d,Er,u),g(cw,Er,null),e(Er,Hsr),e(Er,Bc),e(Bc,Usr),e(Bc,lpe),e(lpe,Jsr),e(Bc,Ysr),e(Bc,ipe),e(ipe,Ksr),e(Bc,Zsr),e(Er,elr),e(Er,fw),e(fw,olr),e(fw,dpe),e(dpe,rlr),e(fw,tlr),e(Er,alr),e(Er,bt),g(mw,bt,null),e(bt,nlr),e(bt,cpe),e(cpe,slr),e(bt,llr),e(bt,xc),e(xc,ilr),e(xc,fpe),e(fpe,dlr),e(xc,clr),e(xc,mpe),e(mpe,flr),e(xc,mlr),e(bt,glr),e(bt,gpe),e(gpe,hlr),e(bt,plr),g(gw,bt,null),e(Er,_lr),e(Er,vo),g(hw,vo,null),e(vo,ulr),e(vo,hpe),e(hpe,blr),e(vo,vlr),e(vo,Fn),e(Fn,Tlr),e(Fn,ppe),e(ppe,Flr),e(Fn,Clr),e(Fn,_pe),e(_pe,Mlr),e(Fn,Elr),e(Fn,upe),e(upe,ylr),e(Fn,wlr),e(vo,Alr),e(vo,_e),e(_e,UT),e(UT,bpe),e(bpe,Llr),e(UT,Blr),e(UT,OO),e(OO,xlr),e(UT,klr),e(_e,Rlr),e(_e,JT),e(JT,vpe),e(vpe,Slr),e(JT,Plr),e(JT,GO),e(GO,$lr),e(JT,Ilr),e(_e,jlr),e(_e,YT),e(YT,Tpe),e(Tpe,Dlr),e(YT,Nlr),e(YT,XO),e(XO,qlr),e(YT,Olr),e(_e,Glr),e(_e,KT),e(KT,Fpe),e(Fpe,Xlr),e(KT,Vlr),e(KT,VO),e(VO,zlr),e(KT,Wlr),e(_e,Qlr),e(_e,ZT),e(ZT,Cpe),e(Cpe,Hlr),e(ZT,Ulr),e(ZT,zO),e(zO,Jlr),e(ZT,Ylr),e(_e,Klr),e(_e,e7),e(e7,Mpe),e(Mpe,Zlr),e(e7,eir),e(e7,WO),e(WO,oir),e(e7,rir),e(_e,tir),e(_e,o7),e(o7,Epe),e(Epe,air),e(o7,nir),e(o7,QO),e(QO,sir),e(o7,lir),e(_e,iir),e(_e,r7),e(r7,ype),e(ype,dir),e(r7,cir),e(r7,HO),e(HO,fir),e(r7,mir),e(_e,gir),e(_e,t7),e(t7,wpe),e(wpe,hir),e(t7,pir),e(t7,UO),e(UO,_ir),e(t7,uir),e(_e,bir),e(_e,a7),e(a7,Ape),e(Ape,vir),e(a7,Tir),e(a7,JO),e(JO,Fir),e(a7,Cir),e(vo,Mir),e(vo,Lpe),e(Lpe,Eir),e(vo,yir),g(pw,vo,null),b(d,vke,u),b(d,kc,u),e(kc,n7),e(n7,Bpe),g(_w,Bpe,null),e(kc,wir),e(kc,xpe),e(xpe,Air),b(d,Tke,u),b(d,yr,u),g(uw,yr,null),e(yr,Lir),e(yr,Rc),e(Rc,Bir),e(Rc,kpe),e(kpe,xir),e(Rc,kir),e(Rc,Rpe),e(Rpe,Rir),e(Rc,Sir),e(yr,Pir),e(yr,bw),e(bw,$ir),e(bw,Spe),e(Spe,Iir),e(bw,jir),e(yr,Dir),e(yr,vt),g(vw,vt,null),e(vt,Nir),e(vt,Ppe),e(Ppe,qir),e(vt,Oir),e(vt,Sc),e(Sc,Gir),e(Sc,$pe),e($pe,Xir),e(Sc,Vir),e(Sc,Ipe),e(Ipe,zir),e(Sc,Wir),e(vt,Qir),e(vt,jpe),e(jpe,Hir),e(vt,Uir),g(Tw,vt,null),e(yr,Jir),e(yr,To),g(Fw,To,null),e(To,Yir),e(To,Dpe),e(Dpe,Kir),e(To,Zir),e(To,Cn),e(Cn,edr),e(Cn,Npe),e(Npe,odr),e(Cn,rdr),e(Cn,qpe),e(qpe,tdr),e(Cn,adr),e(Cn,Ope),e(Ope,ndr),e(Cn,sdr),e(To,ldr),e(To,V),e(V,s7),e(s7,Gpe),e(Gpe,idr),e(s7,ddr),e(s7,YO),e(YO,cdr),e(s7,fdr),e(V,mdr),e(V,l7),e(l7,Xpe),e(Xpe,gdr),e(l7,hdr),e(l7,KO),e(KO,pdr),e(l7,_dr),e(V,udr),e(V,i7),e(i7,Vpe),e(Vpe,bdr),e(i7,vdr),e(i7,ZO),e(ZO,Tdr),e(i7,Fdr),e(V,Cdr),e(V,d7),e(d7,zpe),e(zpe,Mdr),e(d7,Edr),e(d7,eG),e(eG,ydr),e(d7,wdr),e(V,Adr),e(V,c7),e(c7,Wpe),e(Wpe,Ldr),e(c7,Bdr),e(c7,oG),e(oG,xdr),e(c7,kdr),e(V,Rdr),e(V,f7),e(f7,Qpe),e(Qpe,Sdr),e(f7,Pdr),e(f7,rG),e(rG,$dr),e(f7,Idr),e(V,jdr),e(V,m7),e(m7,Hpe),e(Hpe,Ddr),e(m7,Ndr),e(m7,tG),e(tG,qdr),e(m7,Odr),e(V,Gdr),e(V,g7),e(g7,Upe),e(Upe,Xdr),e(g7,Vdr),e(g7,aG),e(aG,zdr),e(g7,Wdr),e(V,Qdr),e(V,h7),e(h7,Jpe),e(Jpe,Hdr),e(h7,Udr),e(h7,nG),e(nG,Jdr),e(h7,Ydr),e(V,Kdr),e(V,p7),e(p7,Ype),e(Ype,Zdr),e(p7,ecr),e(p7,sG),e(sG,ocr),e(p7,rcr),e(V,tcr),e(V,_7),e(_7,Kpe),e(Kpe,acr),e(_7,ncr),e(_7,lG),e(lG,scr),e(_7,lcr),e(V,icr),e(V,u7),e(u7,Zpe),e(Zpe,dcr),e(u7,ccr),e(u7,iG),e(iG,fcr),e(u7,mcr),e(V,gcr),e(V,b7),e(b7,e_e),e(e_e,hcr),e(b7,pcr),e(b7,dG),e(dG,_cr),e(b7,ucr),e(V,bcr),e(V,v7),e(v7,o_e),e(o_e,vcr),e(v7,Tcr),e(v7,cG),e(cG,Fcr),e(v7,Ccr),e(V,Mcr),e(V,T7),e(T7,r_e),e(r_e,Ecr),e(T7,ycr),e(T7,fG),e(fG,wcr),e(T7,Acr),e(V,Lcr),e(V,F7),e(F7,t_e),e(t_e,Bcr),e(F7,xcr),e(F7,mG),e(mG,kcr),e(F7,Rcr),e(V,Scr),e(V,C7),e(C7,a_e),e(a_e,Pcr),e(C7,$cr),e(C7,gG),e(gG,Icr),e(C7,jcr),e(V,Dcr),e(V,M7),e(M7,n_e),e(n_e,Ncr),e(M7,qcr),e(M7,hG),e(hG,Ocr),e(M7,Gcr),e(V,Xcr),e(V,E7),e(E7,s_e),e(s_e,Vcr),e(E7,zcr),e(E7,pG),e(pG,Wcr),e(E7,Qcr),e(V,Hcr),e(V,y7),e(y7,l_e),e(l_e,Ucr),e(y7,Jcr),e(y7,_G),e(_G,Ycr),e(y7,Kcr),e(V,Zcr),e(V,w7),e(w7,i_e),e(i_e,efr),e(w7,ofr),e(w7,uG),e(uG,rfr),e(w7,tfr),e(V,afr),e(V,A7),e(A7,d_e),e(d_e,nfr),e(A7,sfr),e(A7,bG),e(bG,lfr),e(A7,ifr),e(V,dfr),e(V,L7),e(L7,c_e),e(c_e,cfr),e(L7,ffr),e(L7,vG),e(vG,mfr),e(L7,gfr),e(V,hfr),e(V,B7),e(B7,f_e),e(f_e,pfr),e(B7,_fr),e(B7,TG),e(TG,ufr),e(B7,bfr),e(V,vfr),e(V,x7),e(x7,m_e),e(m_e,Tfr),e(x7,Ffr),e(x7,FG),e(FG,Cfr),e(x7,Mfr),e(To,Efr),e(To,g_e),e(g_e,yfr),e(To,wfr),g(Cw,To,null),b(d,Fke,u),b(d,Pc,u),e(Pc,k7),e(k7,h_e),g(Mw,h_e,null),e(Pc,Afr),e(Pc,p_e),e(p_e,Lfr),b(d,Cke,u),b(d,wr,u),g(Ew,wr,null),e(wr,Bfr),e(wr,$c),e($c,xfr),e($c,__e),e(__e,kfr),e($c,Rfr),e($c,u_e),e(u_e,Sfr),e($c,Pfr),e(wr,$fr),e(wr,yw),e(yw,Ifr),e(yw,b_e),e(b_e,jfr),e(yw,Dfr),e(wr,Nfr),e(wr,Tt),g(ww,Tt,null),e(Tt,qfr),e(Tt,v_e),e(v_e,Ofr),e(Tt,Gfr),e(Tt,Ic),e(Ic,Xfr),e(Ic,T_e),e(T_e,Vfr),e(Ic,zfr),e(Ic,F_e),e(F_e,Wfr),e(Ic,Qfr),e(Tt,Hfr),e(Tt,C_e),e(C_e,Ufr),e(Tt,Jfr),g(Aw,Tt,null),e(wr,Yfr),e(wr,Fo),g(Lw,Fo,null),e(Fo,Kfr),e(Fo,M_e),e(M_e,Zfr),e(Fo,emr),e(Fo,Mn),e(Mn,omr),e(Mn,E_e),e(E_e,rmr),e(Mn,tmr),e(Mn,y_e),e(y_e,amr),e(Mn,nmr),e(Mn,w_e),e(w_e,smr),e(Mn,lmr),e(Fo,imr),e(Fo,te),e(te,R7),e(R7,A_e),e(A_e,dmr),e(R7,cmr),e(R7,CG),e(CG,fmr),e(R7,mmr),e(te,gmr),e(te,S7),e(S7,L_e),e(L_e,hmr),e(S7,pmr),e(S7,MG),e(MG,_mr),e(S7,umr),e(te,bmr),e(te,P7),e(P7,B_e),e(B_e,vmr),e(P7,Tmr),e(P7,EG),e(EG,Fmr),e(P7,Cmr),e(te,Mmr),e(te,$7),e($7,x_e),e(x_e,Emr),e($7,ymr),e($7,yG),e(yG,wmr),e($7,Amr),e(te,Lmr),e(te,I7),e(I7,k_e),e(k_e,Bmr),e(I7,xmr),e(I7,wG),e(wG,kmr),e(I7,Rmr),e(te,Smr),e(te,j7),e(j7,R_e),e(R_e,Pmr),e(j7,$mr),e(j7,AG),e(AG,Imr),e(j7,jmr),e(te,Dmr),e(te,D7),e(D7,S_e),e(S_e,Nmr),e(D7,qmr),e(D7,LG),e(LG,Omr),e(D7,Gmr),e(te,Xmr),e(te,N7),e(N7,P_e),e(P_e,Vmr),e(N7,zmr),e(N7,BG),e(BG,Wmr),e(N7,Qmr),e(te,Hmr),e(te,q7),e(q7,$_e),e($_e,Umr),e(q7,Jmr),e(q7,xG),e(xG,Ymr),e(q7,Kmr),e(te,Zmr),e(te,O7),e(O7,I_e),e(I_e,egr),e(O7,ogr),e(O7,kG),e(kG,rgr),e(O7,tgr),e(te,agr),e(te,G7),e(G7,j_e),e(j_e,ngr),e(G7,sgr),e(G7,RG),e(RG,lgr),e(G7,igr),e(te,dgr),e(te,X7),e(X7,D_e),e(D_e,cgr),e(X7,fgr),e(X7,SG),e(SG,mgr),e(X7,ggr),e(te,hgr),e(te,V7),e(V7,N_e),e(N_e,pgr),e(V7,_gr),e(V7,PG),e(PG,ugr),e(V7,bgr),e(te,vgr),e(te,z7),e(z7,q_e),e(q_e,Tgr),e(z7,Fgr),e(z7,$G),e($G,Cgr),e(z7,Mgr),e(te,Egr),e(te,W7),e(W7,O_e),e(O_e,ygr),e(W7,wgr),e(W7,IG),e(IG,Agr),e(W7,Lgr),e(te,Bgr),e(te,Q7),e(Q7,G_e),e(G_e,xgr),e(Q7,kgr),e(Q7,jG),e(jG,Rgr),e(Q7,Sgr),e(te,Pgr),e(te,H7),e(H7,X_e),e(X_e,$gr),e(H7,Igr),e(H7,DG),e(DG,jgr),e(H7,Dgr),e(Fo,Ngr),e(Fo,V_e),e(V_e,qgr),e(Fo,Ogr),g(Bw,Fo,null),b(d,Mke,u),b(d,jc,u),e(jc,U7),e(U7,z_e),g(xw,z_e,null),e(jc,Ggr),e(jc,W_e),e(W_e,Xgr),b(d,Eke,u),b(d,Ar,u),g(kw,Ar,null),e(Ar,Vgr),e(Ar,Dc),e(Dc,zgr),e(Dc,Q_e),e(Q_e,Wgr),e(Dc,Qgr),e(Dc,H_e),e(H_e,Hgr),e(Dc,Ugr),e(Ar,Jgr),e(Ar,Rw),e(Rw,Ygr),e(Rw,U_e),e(U_e,Kgr),e(Rw,Zgr),e(Ar,ehr),e(Ar,Ft),g(Sw,Ft,null),e(Ft,ohr),e(Ft,J_e),e(J_e,rhr),e(Ft,thr),e(Ft,Nc),e(Nc,ahr),e(Nc,Y_e),e(Y_e,nhr),e(Nc,shr),e(Nc,K_e),e(K_e,lhr),e(Nc,ihr),e(Ft,dhr),e(Ft,Z_e),e(Z_e,chr),e(Ft,fhr),g(Pw,Ft,null),e(Ar,mhr),e(Ar,Co),g($w,Co,null),e(Co,ghr),e(Co,eue),e(eue,hhr),e(Co,phr),e(Co,En),e(En,_hr),e(En,oue),e(oue,uhr),e(En,bhr),e(En,rue),e(rue,vhr),e(En,Thr),e(En,tue),e(tue,Fhr),e(En,Chr),e(Co,Mhr),e(Co,aue),e(aue,J7),e(J7,nue),e(nue,Ehr),e(J7,yhr),e(J7,NG),e(NG,whr),e(J7,Ahr),e(Co,Lhr),e(Co,sue),e(sue,Bhr),e(Co,xhr),g(Iw,Co,null),b(d,yke,u),b(d,qc,u),e(qc,Y7),e(Y7,lue),g(jw,lue,null),e(qc,khr),e(qc,iue),e(iue,Rhr),b(d,wke,u),b(d,Lr,u),g(Dw,Lr,null),e(Lr,Shr),e(Lr,Oc),e(Oc,Phr),e(Oc,due),e(due,$hr),e(Oc,Ihr),e(Oc,cue),e(cue,jhr),e(Oc,Dhr),e(Lr,Nhr),e(Lr,Nw),e(Nw,qhr),e(Nw,fue),e(fue,Ohr),e(Nw,Ghr),e(Lr,Xhr),e(Lr,Ct),g(qw,Ct,null),e(Ct,Vhr),e(Ct,mue),e(mue,zhr),e(Ct,Whr),e(Ct,Gc),e(Gc,Qhr),e(Gc,gue),e(gue,Hhr),e(Gc,Uhr),e(Gc,hue),e(hue,Jhr),e(Gc,Yhr),e(Ct,Khr),e(Ct,pue),e(pue,Zhr),e(Ct,epr),g(Ow,Ct,null),e(Lr,opr),e(Lr,Mo),g(Gw,Mo,null),e(Mo,rpr),e(Mo,_ue),e(_ue,tpr),e(Mo,apr),e(Mo,yn),e(yn,npr),e(yn,uue),e(uue,spr),e(yn,lpr),e(yn,bue),e(bue,ipr),e(yn,dpr),e(yn,vue),e(vue,cpr),e(yn,fpr),e(Mo,mpr),e(Mo,K),e(K,K7),e(K7,Tue),e(Tue,gpr),e(K7,hpr),e(K7,qG),e(qG,ppr),e(K7,_pr),e(K,upr),e(K,Z7),e(Z7,Fue),e(Fue,bpr),e(Z7,vpr),e(Z7,OG),e(OG,Tpr),e(Z7,Fpr),e(K,Cpr),e(K,eF),e(eF,Cue),e(Cue,Mpr),e(eF,Epr),e(eF,GG),e(GG,ypr),e(eF,wpr),e(K,Apr),e(K,oF),e(oF,Mue),e(Mue,Lpr),e(oF,Bpr),e(oF,XG),e(XG,xpr),e(oF,kpr),e(K,Rpr),e(K,rF),e(rF,Eue),e(Eue,Spr),e(rF,Ppr),e(rF,VG),e(VG,$pr),e(rF,Ipr),e(K,jpr),e(K,tF),e(tF,yue),e(yue,Dpr),e(tF,Npr),e(tF,zG),e(zG,qpr),e(tF,Opr),e(K,Gpr),e(K,aF),e(aF,wue),e(wue,Xpr),e(aF,Vpr),e(aF,WG),e(WG,zpr),e(aF,Wpr),e(K,Qpr),e(K,nF),e(nF,Aue),e(Aue,Hpr),e(nF,Upr),e(nF,QG),e(QG,Jpr),e(nF,Ypr),e(K,Kpr),e(K,sF),e(sF,Lue),e(Lue,Zpr),e(sF,e_r),e(sF,HG),e(HG,o_r),e(sF,r_r),e(K,t_r),e(K,lF),e(lF,Bue),e(Bue,a_r),e(lF,n_r),e(lF,UG),e(UG,s_r),e(lF,l_r),e(K,i_r),e(K,iF),e(iF,xue),e(xue,d_r),e(iF,c_r),e(iF,JG),e(JG,f_r),e(iF,m_r),e(K,g_r),e(K,dF),e(dF,kue),e(kue,h_r),e(dF,p_r),e(dF,YG),e(YG,__r),e(dF,u_r),e(K,b_r),e(K,cF),e(cF,Rue),e(Rue,v_r),e(cF,T_r),e(cF,KG),e(KG,F_r),e(cF,C_r),e(K,M_r),e(K,fF),e(fF,Sue),e(Sue,E_r),e(fF,y_r),e(fF,ZG),e(ZG,w_r),e(fF,A_r),e(K,L_r),e(K,mF),e(mF,Pue),e(Pue,B_r),e(mF,x_r),e(mF,eX),e(eX,k_r),e(mF,R_r),e(K,S_r),e(K,gF),e(gF,$ue),e($ue,P_r),e(gF,$_r),e(gF,oX),e(oX,I_r),e(gF,j_r),e(K,D_r),e(K,hF),e(hF,Iue),e(Iue,N_r),e(hF,q_r),e(hF,rX),e(rX,O_r),e(hF,G_r),e(K,X_r),e(K,pF),e(pF,jue),e(jue,V_r),e(pF,z_r),e(pF,tX),e(tX,W_r),e(pF,Q_r),e(K,H_r),e(K,_F),e(_F,Due),e(Due,U_r),e(_F,J_r),e(_F,aX),e(aX,Y_r),e(_F,K_r),e(K,Z_r),e(K,uF),e(uF,Nue),e(Nue,eur),e(uF,our),e(uF,nX),e(nX,rur),e(uF,tur),e(Mo,aur),e(Mo,que),e(que,nur),e(Mo,sur),g(Xw,Mo,null),b(d,Ake,u),b(d,Xc,u),e(Xc,bF),e(bF,Oue),g(Vw,Oue,null),e(Xc,lur),e(Xc,Gue),e(Gue,iur),b(d,Lke,u),b(d,Br,u),g(zw,Br,null),e(Br,dur),e(Br,Vc),e(Vc,cur),e(Vc,Xue),e(Xue,fur),e(Vc,mur),e(Vc,Vue),e(Vue,gur),e(Vc,hur),e(Br,pur),e(Br,Ww),e(Ww,_ur),e(Ww,zue),e(zue,uur),e(Ww,bur),e(Br,vur),e(Br,Mt),g(Qw,Mt,null),e(Mt,Tur),e(Mt,Wue),e(Wue,Fur),e(Mt,Cur),e(Mt,zc),e(zc,Mur),e(zc,Que),e(Que,Eur),e(zc,yur),e(zc,Hue),e(Hue,wur),e(zc,Aur),e(Mt,Lur),e(Mt,Uue),e(Uue,Bur),e(Mt,xur),g(Hw,Mt,null),e(Br,kur),e(Br,Eo),g(Uw,Eo,null),e(Eo,Rur),e(Eo,Jue),e(Jue,Sur),e(Eo,Pur),e(Eo,wn),e(wn,$ur),e(wn,Yue),e(Yue,Iur),e(wn,jur),e(wn,Kue),e(Kue,Dur),e(wn,Nur),e(wn,Zue),e(Zue,qur),e(wn,Our),e(Eo,Gur),e(Eo,Z),e(Z,vF),e(vF,e1e),e(e1e,Xur),e(vF,Vur),e(vF,sX),e(sX,zur),e(vF,Wur),e(Z,Qur),e(Z,TF),e(TF,o1e),e(o1e,Hur),e(TF,Uur),e(TF,lX),e(lX,Jur),e(TF,Yur),e(Z,Kur),e(Z,FF),e(FF,r1e),e(r1e,Zur),e(FF,e1r),e(FF,iX),e(iX,o1r),e(FF,r1r),e(Z,t1r),e(Z,CF),e(CF,t1e),e(t1e,a1r),e(CF,n1r),e(CF,dX),e(dX,s1r),e(CF,l1r),e(Z,i1r),e(Z,MF),e(MF,a1e),e(a1e,d1r),e(MF,c1r),e(MF,cX),e(cX,f1r),e(MF,m1r),e(Z,g1r),e(Z,EF),e(EF,n1e),e(n1e,h1r),e(EF,p1r),e(EF,fX),e(fX,_1r),e(EF,u1r),e(Z,b1r),e(Z,yF),e(yF,s1e),e(s1e,v1r),e(yF,T1r),e(yF,mX),e(mX,F1r),e(yF,C1r),e(Z,M1r),e(Z,wF),e(wF,l1e),e(l1e,E1r),e(wF,y1r),e(wF,gX),e(gX,w1r),e(wF,A1r),e(Z,L1r),e(Z,AF),e(AF,i1e),e(i1e,B1r),e(AF,x1r),e(AF,hX),e(hX,k1r),e(AF,R1r),e(Z,S1r),e(Z,LF),e(LF,d1e),e(d1e,P1r),e(LF,$1r),e(LF,pX),e(pX,I1r),e(LF,j1r),e(Z,D1r),e(Z,BF),e(BF,c1e),e(c1e,N1r),e(BF,q1r),e(BF,_X),e(_X,O1r),e(BF,G1r),e(Z,X1r),e(Z,xF),e(xF,f1e),e(f1e,V1r),e(xF,z1r),e(xF,uX),e(uX,W1r),e(xF,Q1r),e(Z,H1r),e(Z,kF),e(kF,m1e),e(m1e,U1r),e(kF,J1r),e(kF,bX),e(bX,Y1r),e(kF,K1r),e(Z,Z1r),e(Z,RF),e(RF,g1e),e(g1e,ebr),e(RF,obr),e(RF,vX),e(vX,rbr),e(RF,tbr),e(Z,abr),e(Z,SF),e(SF,h1e),e(h1e,nbr),e(SF,sbr),e(SF,TX),e(TX,lbr),e(SF,ibr),e(Z,dbr),e(Z,PF),e(PF,p1e),e(p1e,cbr),e(PF,fbr),e(PF,FX),e(FX,mbr),e(PF,gbr),e(Z,hbr),e(Z,$F),e($F,_1e),e(_1e,pbr),e($F,_br),e($F,CX),e(CX,ubr),e($F,bbr),e(Z,vbr),e(Z,IF),e(IF,u1e),e(u1e,Tbr),e(IF,Fbr),e(IF,MX),e(MX,Cbr),e(IF,Mbr),e(Z,Ebr),e(Z,jF),e(jF,b1e),e(b1e,ybr),e(jF,wbr),e(jF,EX),e(EX,Abr),e(jF,Lbr),e(Eo,Bbr),e(Eo,v1e),e(v1e,xbr),e(Eo,kbr),g(Jw,Eo,null),b(d,Bke,u),b(d,Wc,u),e(Wc,DF),e(DF,T1e),g(Yw,T1e,null),e(Wc,Rbr),e(Wc,F1e),e(F1e,Sbr),b(d,xke,u),b(d,xr,u),g(Kw,xr,null),e(xr,Pbr),e(xr,Qc),e(Qc,$br),e(Qc,C1e),e(C1e,Ibr),e(Qc,jbr),e(Qc,M1e),e(M1e,Dbr),e(Qc,Nbr),e(xr,qbr),e(xr,Zw),e(Zw,Obr),e(Zw,E1e),e(E1e,Gbr),e(Zw,Xbr),e(xr,Vbr),e(xr,Et),g(e6,Et,null),e(Et,zbr),e(Et,y1e),e(y1e,Wbr),e(Et,Qbr),e(Et,Hc),e(Hc,Hbr),e(Hc,w1e),e(w1e,Ubr),e(Hc,Jbr),e(Hc,A1e),e(A1e,Ybr),e(Hc,Kbr),e(Et,Zbr),e(Et,L1e),e(L1e,e5r),e(Et,o5r),g(o6,Et,null),e(xr,r5r),e(xr,yo),g(r6,yo,null),e(yo,t5r),e(yo,B1e),e(B1e,a5r),e(yo,n5r),e(yo,An),e(An,s5r),e(An,x1e),e(x1e,l5r),e(An,i5r),e(An,k1e),e(k1e,d5r),e(An,c5r),e(An,R1e),e(R1e,f5r),e(An,m5r),e(yo,g5r),e(yo,S1e),e(S1e,NF),e(NF,P1e),e(P1e,h5r),e(NF,p5r),e(NF,yX),e(yX,_5r),e(NF,u5r),e(yo,b5r),e(yo,$1e),e($1e,v5r),e(yo,T5r),g(t6,yo,null),b(d,kke,u),b(d,Uc,u),e(Uc,qF),e(qF,I1e),g(a6,I1e,null),e(Uc,F5r),e(Uc,j1e),e(j1e,C5r),b(d,Rke,u),b(d,kr,u),g(n6,kr,null),e(kr,M5r),e(kr,Jc),e(Jc,E5r),e(Jc,D1e),e(D1e,y5r),e(Jc,w5r),e(Jc,N1e),e(N1e,A5r),e(Jc,L5r),e(kr,B5r),e(kr,s6),e(s6,x5r),e(s6,q1e),e(q1e,k5r),e(s6,R5r),e(kr,S5r),e(kr,yt),g(l6,yt,null),e(yt,P5r),e(yt,O1e),e(O1e,$5r),e(yt,I5r),e(yt,Yc),e(Yc,j5r),e(Yc,G1e),e(G1e,D5r),e(Yc,N5r),e(Yc,X1e),e(X1e,q5r),e(Yc,O5r),e(yt,G5r),e(yt,V1e),e(V1e,X5r),e(yt,V5r),g(i6,yt,null),e(kr,z5r),e(kr,wo),g(d6,wo,null),e(wo,W5r),e(wo,z1e),e(z1e,Q5r),e(wo,H5r),e(wo,Ln),e(Ln,U5r),e(Ln,W1e),e(W1e,J5r),e(Ln,Y5r),e(Ln,Q1e),e(Q1e,K5r),e(Ln,Z5r),e(Ln,H1e),e(H1e,e2r),e(Ln,o2r),e(wo,r2r),e(wo,U1e),e(U1e,OF),e(OF,J1e),e(J1e,t2r),e(OF,a2r),e(OF,wX),e(wX,n2r),e(OF,s2r),e(wo,l2r),e(wo,Y1e),e(Y1e,i2r),e(wo,d2r),g(c6,wo,null),b(d,Ske,u),b(d,Kc,u),e(Kc,GF),e(GF,K1e),g(f6,K1e,null),e(Kc,c2r),e(Kc,Z1e),e(Z1e,f2r),b(d,Pke,u),b(d,Rr,u),g(m6,Rr,null),e(Rr,m2r),e(Rr,Zc),e(Zc,g2r),e(Zc,ebe),e(ebe,h2r),e(Zc,p2r),e(Zc,obe),e(obe,_2r),e(Zc,u2r),e(Rr,b2r),e(Rr,g6),e(g6,v2r),e(g6,rbe),e(rbe,T2r),e(g6,F2r),e(Rr,C2r),e(Rr,wt),g(h6,wt,null),e(wt,M2r),e(wt,tbe),e(tbe,E2r),e(wt,y2r),e(wt,ef),e(ef,w2r),e(ef,abe),e(abe,A2r),e(ef,L2r),e(ef,nbe),e(nbe,B2r),e(ef,x2r),e(wt,k2r),e(wt,sbe),e(sbe,R2r),e(wt,S2r),g(p6,wt,null),e(Rr,P2r),e(Rr,Ao),g(_6,Ao,null),e(Ao,$2r),e(Ao,lbe),e(lbe,I2r),e(Ao,j2r),e(Ao,Bn),e(Bn,D2r),e(Bn,ibe),e(ibe,N2r),e(Bn,q2r),e(Bn,dbe),e(dbe,O2r),e(Bn,G2r),e(Bn,cbe),e(cbe,X2r),e(Bn,V2r),e(Ao,z2r),e(Ao,z),e(z,XF),e(XF,fbe),e(fbe,W2r),e(XF,Q2r),e(XF,AX),e(AX,H2r),e(XF,U2r),e(z,J2r),e(z,VF),e(VF,mbe),e(mbe,Y2r),e(VF,K2r),e(VF,LX),e(LX,Z2r),e(VF,evr),e(z,ovr),e(z,zF),e(zF,gbe),e(gbe,rvr),e(zF,tvr),e(zF,BX),e(BX,avr),e(zF,nvr),e(z,svr),e(z,WF),e(WF,hbe),e(hbe,lvr),e(WF,ivr),e(WF,xX),e(xX,dvr),e(WF,cvr),e(z,fvr),e(z,QF),e(QF,pbe),e(pbe,mvr),e(QF,gvr),e(QF,kX),e(kX,hvr),e(QF,pvr),e(z,_vr),e(z,HF),e(HF,_be),e(_be,uvr),e(HF,bvr),e(HF,RX),e(RX,vvr),e(HF,Tvr),e(z,Fvr),e(z,UF),e(UF,ube),e(ube,Cvr),e(UF,Mvr),e(UF,SX),e(SX,Evr),e(UF,yvr),e(z,wvr),e(z,JF),e(JF,bbe),e(bbe,Avr),e(JF,Lvr),e(JF,PX),e(PX,Bvr),e(JF,xvr),e(z,kvr),e(z,YF),e(YF,vbe),e(vbe,Rvr),e(YF,Svr),e(YF,$X),e($X,Pvr),e(YF,$vr),e(z,Ivr),e(z,KF),e(KF,Tbe),e(Tbe,jvr),e(KF,Dvr),e(KF,IX),e(IX,Nvr),e(KF,qvr),e(z,Ovr),e(z,ZF),e(ZF,Fbe),e(Fbe,Gvr),e(ZF,Xvr),e(ZF,jX),e(jX,Vvr),e(ZF,zvr),e(z,Wvr),e(z,e9),e(e9,Cbe),e(Cbe,Qvr),e(e9,Hvr),e(e9,DX),e(DX,Uvr),e(e9,Jvr),e(z,Yvr),e(z,o9),e(o9,Mbe),e(Mbe,Kvr),e(o9,Zvr),e(o9,NX),e(NX,e0r),e(o9,o0r),e(z,r0r),e(z,r9),e(r9,Ebe),e(Ebe,t0r),e(r9,a0r),e(r9,qX),e(qX,n0r),e(r9,s0r),e(z,l0r),e(z,t9),e(t9,ybe),e(ybe,i0r),e(t9,d0r),e(t9,OX),e(OX,c0r),e(t9,f0r),e(z,m0r),e(z,a9),e(a9,wbe),e(wbe,g0r),e(a9,h0r),e(a9,GX),e(GX,p0r),e(a9,_0r),e(z,u0r),e(z,n9),e(n9,Abe),e(Abe,b0r),e(n9,v0r),e(n9,XX),e(XX,T0r),e(n9,F0r),e(z,C0r),e(z,s9),e(s9,Lbe),e(Lbe,M0r),e(s9,E0r),e(s9,VX),e(VX,y0r),e(s9,w0r),e(z,A0r),e(z,l9),e(l9,Bbe),e(Bbe,L0r),e(l9,B0r),e(l9,zX),e(zX,x0r),e(l9,k0r),e(z,R0r),e(z,i9),e(i9,xbe),e(xbe,S0r),e(i9,P0r),e(i9,WX),e(WX,$0r),e(i9,I0r),e(z,j0r),e(z,d9),e(d9,kbe),e(kbe,D0r),e(d9,N0r),e(d9,QX),e(QX,q0r),e(d9,O0r),e(z,G0r),e(z,c9),e(c9,Rbe),e(Rbe,X0r),e(c9,V0r),e(c9,HX),e(HX,z0r),e(c9,W0r),e(z,Q0r),e(z,f9),e(f9,Sbe),e(Sbe,H0r),e(f9,U0r),e(f9,UX),e(UX,J0r),e(f9,Y0r),e(z,K0r),e(z,m9),e(m9,Pbe),e(Pbe,Z0r),e(m9,eTr),e(m9,JX),e(JX,oTr),e(m9,rTr),e(z,tTr),e(z,g9),e(g9,$be),e($be,aTr),e(g9,nTr),e(g9,YX),e(YX,sTr),e(g9,lTr),e(Ao,iTr),e(Ao,Ibe),e(Ibe,dTr),e(Ao,cTr),g(u6,Ao,null),b(d,$ke,u),b(d,of,u),e(of,h9),e(h9,jbe),g(b6,jbe,null),e(of,fTr),e(of,Dbe),e(Dbe,mTr),b(d,Ike,u),b(d,Sr,u),g(v6,Sr,null),e(Sr,gTr),e(Sr,rf),e(rf,hTr),e(rf,Nbe),e(Nbe,pTr),e(rf,_Tr),e(rf,qbe),e(qbe,uTr),e(rf,bTr),e(Sr,vTr),e(Sr,T6),e(T6,TTr),e(T6,Obe),e(Obe,FTr),e(T6,CTr),e(Sr,MTr),e(Sr,At),g(F6,At,null),e(At,ETr),e(At,Gbe),e(Gbe,yTr),e(At,wTr),e(At,tf),e(tf,ATr),e(tf,Xbe),e(Xbe,LTr),e(tf,BTr),e(tf,Vbe),e(Vbe,xTr),e(tf,kTr),e(At,RTr),e(At,zbe),e(zbe,STr),e(At,PTr),g(C6,At,null),e(Sr,$Tr),e(Sr,Lo),g(M6,Lo,null),e(Lo,ITr),e(Lo,Wbe),e(Wbe,jTr),e(Lo,DTr),e(Lo,xn),e(xn,NTr),e(xn,Qbe),e(Qbe,qTr),e(xn,OTr),e(xn,Hbe),e(Hbe,GTr),e(xn,XTr),e(xn,Ube),e(Ube,VTr),e(xn,zTr),e(Lo,WTr),e(Lo,ca),e(ca,p9),e(p9,Jbe),e(Jbe,QTr),e(p9,HTr),e(p9,KX),e(KX,UTr),e(p9,JTr),e(ca,YTr),e(ca,_9),e(_9,Ybe),e(Ybe,KTr),e(_9,ZTr),e(_9,ZX),e(ZX,e7r),e(_9,o7r),e(ca,r7r),e(ca,u9),e(u9,Kbe),e(Kbe,t7r),e(u9,a7r),e(u9,eV),e(eV,n7r),e(u9,s7r),e(ca,l7r),e(ca,b9),e(b9,Zbe),e(Zbe,i7r),e(b9,d7r),e(b9,oV),e(oV,c7r),e(b9,f7r),e(ca,m7r),e(ca,v9),e(v9,e5e),e(e5e,g7r),e(v9,h7r),e(v9,rV),e(rV,p7r),e(v9,_7r),e(Lo,u7r),e(Lo,o5e),e(o5e,b7r),e(Lo,v7r),g(E6,Lo,null),b(d,jke,u),b(d,af,u),e(af,T9),e(T9,r5e),g(y6,r5e,null),e(af,T7r),e(af,t5e),e(t5e,F7r),b(d,Dke,u),b(d,Pr,u),g(w6,Pr,null),e(Pr,C7r),e(Pr,nf),e(nf,M7r),e(nf,a5e),e(a5e,E7r),e(nf,y7r),e(nf,n5e),e(n5e,w7r),e(nf,A7r),e(Pr,L7r),e(Pr,A6),e(A6,B7r),e(A6,s5e),e(s5e,x7r),e(A6,k7r),e(Pr,R7r),e(Pr,Lt),g(L6,Lt,null),e(Lt,S7r),e(Lt,l5e),e(l5e,P7r),e(Lt,$7r),e(Lt,sf),e(sf,I7r),e(sf,i5e),e(i5e,j7r),e(sf,D7r),e(sf,d5e),e(d5e,N7r),e(sf,q7r),e(Lt,O7r),e(Lt,c5e),e(c5e,G7r),e(Lt,X7r),g(B6,Lt,null),e(Pr,V7r),e(Pr,Bo),g(x6,Bo,null),e(Bo,z7r),e(Bo,f5e),e(f5e,W7r),e(Bo,Q7r),e(Bo,kn),e(kn,H7r),e(kn,m5e),e(m5e,U7r),e(kn,J7r),e(kn,g5e),e(g5e,Y7r),e(kn,K7r),e(kn,h5e),e(h5e,Z7r),e(kn,eFr),e(Bo,oFr),e(Bo,ce),e(ce,F9),e(F9,p5e),e(p5e,rFr),e(F9,tFr),e(F9,tV),e(tV,aFr),e(F9,nFr),e(ce,sFr),e(ce,C9),e(C9,_5e),e(_5e,lFr),e(C9,iFr),e(C9,aV),e(aV,dFr),e(C9,cFr),e(ce,fFr),e(ce,M9),e(M9,u5e),e(u5e,mFr),e(M9,gFr),e(M9,nV),e(nV,hFr),e(M9,pFr),e(ce,_Fr),e(ce,E9),e(E9,b5e),e(b5e,uFr),e(E9,bFr),e(E9,sV),e(sV,vFr),e(E9,TFr),e(ce,FFr),e(ce,y9),e(y9,v5e),e(v5e,CFr),e(y9,MFr),e(y9,lV),e(lV,EFr),e(y9,yFr),e(ce,wFr),e(ce,w9),e(w9,T5e),e(T5e,AFr),e(w9,LFr),e(w9,iV),e(iV,BFr),e(w9,xFr),e(ce,kFr),e(ce,A9),e(A9,F5e),e(F5e,RFr),e(A9,SFr),e(A9,dV),e(dV,PFr),e(A9,$Fr),e(ce,IFr),e(ce,L9),e(L9,C5e),e(C5e,jFr),e(L9,DFr),e(L9,cV),e(cV,NFr),e(L9,qFr),e(ce,OFr),e(ce,B9),e(B9,M5e),e(M5e,GFr),e(B9,XFr),e(B9,fV),e(fV,VFr),e(B9,zFr),e(ce,WFr),e(ce,x9),e(x9,E5e),e(E5e,QFr),e(x9,HFr),e(x9,mV),e(mV,UFr),e(x9,JFr),e(ce,YFr),e(ce,k9),e(k9,y5e),e(y5e,KFr),e(k9,ZFr),e(k9,gV),e(gV,e9r),e(k9,o9r),e(ce,r9r),e(ce,R9),e(R9,w5e),e(w5e,t9r),e(R9,a9r),e(R9,hV),e(hV,n9r),e(R9,s9r),e(Bo,l9r),e(Bo,A5e),e(A5e,i9r),e(Bo,d9r),g(k6,Bo,null),b(d,Nke,u),b(d,lf,u),e(lf,S9),e(S9,L5e),g(R6,L5e,null),e(lf,c9r),e(lf,B5e),e(B5e,f9r),b(d,qke,u),b(d,$r,u),g(S6,$r,null),e($r,m9r),e($r,df),e(df,g9r),e(df,x5e),e(x5e,h9r),e(df,p9r),e(df,k5e),e(k5e,_9r),e(df,u9r),e($r,b9r),e($r,P6),e(P6,v9r),e(P6,R5e),e(R5e,T9r),e(P6,F9r),e($r,C9r),e($r,Bt),g($6,Bt,null),e(Bt,M9r),e(Bt,S5e),e(S5e,E9r),e(Bt,y9r),e(Bt,cf),e(cf,w9r),e(cf,P5e),e(P5e,A9r),e(cf,L9r),e(cf,$5e),e($5e,B9r),e(cf,x9r),e(Bt,k9r),e(Bt,I5e),e(I5e,R9r),e(Bt,S9r),g(I6,Bt,null),e($r,P9r),e($r,xo),g(j6,xo,null),e(xo,$9r),e(xo,j5e),e(j5e,I9r),e(xo,j9r),e(xo,Rn),e(Rn,D9r),e(Rn,D5e),e(D5e,N9r),e(Rn,q9r),e(Rn,N5e),e(N5e,O9r),e(Rn,G9r),e(Rn,q5e),e(q5e,X9r),e(Rn,V9r),e(xo,z9r),e(xo,ue),e(ue,P9),e(P9,O5e),e(O5e,W9r),e(P9,Q9r),e(P9,pV),e(pV,H9r),e(P9,U9r),e(ue,J9r),e(ue,$9),e($9,G5e),e(G5e,Y9r),e($9,K9r),e($9,_V),e(_V,Z9r),e($9,eCr),e(ue,oCr),e(ue,I9),e(I9,X5e),e(X5e,rCr),e(I9,tCr),e(I9,uV),e(uV,aCr),e(I9,nCr),e(ue,sCr),e(ue,j9),e(j9,V5e),e(V5e,lCr),e(j9,iCr),e(j9,bV),e(bV,dCr),e(j9,cCr),e(ue,fCr),e(ue,D9),e(D9,z5e),e(z5e,mCr),e(D9,gCr),e(D9,vV),e(vV,hCr),e(D9,pCr),e(ue,_Cr),e(ue,N9),e(N9,W5e),e(W5e,uCr),e(N9,bCr),e(N9,TV),e(TV,vCr),e(N9,TCr),e(ue,FCr),e(ue,q9),e(q9,Q5e),e(Q5e,CCr),e(q9,MCr),e(q9,FV),e(FV,ECr),e(q9,yCr),e(ue,wCr),e(ue,O9),e(O9,H5e),e(H5e,ACr),e(O9,LCr),e(O9,CV),e(CV,BCr),e(O9,xCr),e(ue,kCr),e(ue,G9),e(G9,U5e),e(U5e,RCr),e(G9,SCr),e(G9,MV),e(MV,PCr),e(G9,$Cr),e(ue,ICr),e(ue,X9),e(X9,J5e),e(J5e,jCr),e(X9,DCr),e(X9,EV),e(EV,NCr),e(X9,qCr),e(xo,OCr),e(xo,Y5e),e(Y5e,GCr),e(xo,XCr),g(D6,xo,null),b(d,Oke,u),b(d,ff,u),e(ff,V9),e(V9,K5e),g(N6,K5e,null),e(ff,VCr),e(ff,Z5e),e(Z5e,zCr),b(d,Gke,u),b(d,Ir,u),g(q6,Ir,null),e(Ir,WCr),e(Ir,mf),e(mf,QCr),e(mf,e2e),e(e2e,HCr),e(mf,UCr),e(mf,o2e),e(o2e,JCr),e(mf,YCr),e(Ir,KCr),e(Ir,O6),e(O6,ZCr),e(O6,r2e),e(r2e,eMr),e(O6,oMr),e(Ir,rMr),e(Ir,xt),g(G6,xt,null),e(xt,tMr),e(xt,t2e),e(t2e,aMr),e(xt,nMr),e(xt,gf),e(gf,sMr),e(gf,a2e),e(a2e,lMr),e(gf,iMr),e(gf,n2e),e(n2e,dMr),e(gf,cMr),e(xt,fMr),e(xt,s2e),e(s2e,mMr),e(xt,gMr),g(X6,xt,null),e(Ir,hMr),e(Ir,ko),g(V6,ko,null),e(ko,pMr),e(ko,l2e),e(l2e,_Mr),e(ko,uMr),e(ko,Sn),e(Sn,bMr),e(Sn,i2e),e(i2e,vMr),e(Sn,TMr),e(Sn,d2e),e(d2e,FMr),e(Sn,CMr),e(Sn,c2e),e(c2e,MMr),e(Sn,EMr),e(ko,yMr),e(ko,Ce),e(Ce,z9),e(z9,f2e),e(f2e,wMr),e(z9,AMr),e(z9,yV),e(yV,LMr),e(z9,BMr),e(Ce,xMr),e(Ce,W9),e(W9,m2e),e(m2e,kMr),e(W9,RMr),e(W9,wV),e(wV,SMr),e(W9,PMr),e(Ce,$Mr),e(Ce,Q9),e(Q9,g2e),e(g2e,IMr),e(Q9,jMr),e(Q9,AV),e(AV,DMr),e(Q9,NMr),e(Ce,qMr),e(Ce,H9),e(H9,h2e),e(h2e,OMr),e(H9,GMr),e(H9,LV),e(LV,XMr),e(H9,VMr),e(Ce,zMr),e(Ce,U9),e(U9,p2e),e(p2e,WMr),e(U9,QMr),e(U9,BV),e(BV,HMr),e(U9,UMr),e(Ce,JMr),e(Ce,J9),e(J9,_2e),e(_2e,YMr),e(J9,KMr),e(J9,xV),e(xV,ZMr),e(J9,e4r),e(Ce,o4r),e(Ce,Y9),e(Y9,u2e),e(u2e,r4r),e(Y9,t4r),e(Y9,kV),e(kV,a4r),e(Y9,n4r),e(Ce,s4r),e(Ce,K9),e(K9,b2e),e(b2e,l4r),e(K9,i4r),e(K9,RV),e(RV,d4r),e(K9,c4r),e(Ce,f4r),e(Ce,Z9),e(Z9,v2e),e(v2e,m4r),e(Z9,g4r),e(Z9,SV),e(SV,h4r),e(Z9,p4r),e(ko,_4r),e(ko,T2e),e(T2e,u4r),e(ko,b4r),g(z6,ko,null),b(d,Xke,u),b(d,hf,u),e(hf,eC),e(eC,F2e),g(W6,F2e,null),e(hf,v4r),e(hf,C2e),e(C2e,T4r),b(d,Vke,u),b(d,jr,u),g(Q6,jr,null),e(jr,F4r),e(jr,pf),e(pf,C4r),e(pf,M2e),e(M2e,M4r),e(pf,E4r),e(pf,E2e),e(E2e,y4r),e(pf,w4r),e(jr,A4r),e(jr,H6),e(H6,L4r),e(H6,y2e),e(y2e,B4r),e(H6,x4r),e(jr,k4r),e(jr,kt),g(U6,kt,null),e(kt,R4r),e(kt,w2e),e(w2e,S4r),e(kt,P4r),e(kt,_f),e(_f,$4r),e(_f,A2e),e(A2e,I4r),e(_f,j4r),e(_f,L2e),e(L2e,D4r),e(_f,N4r),e(kt,q4r),e(kt,B2e),e(B2e,O4r),e(kt,G4r),g(J6,kt,null),e(jr,X4r),e(jr,Ro),g(Y6,Ro,null),e(Ro,V4r),e(Ro,x2e),e(x2e,z4r),e(Ro,W4r),e(Ro,Pn),e(Pn,Q4r),e(Pn,k2e),e(k2e,H4r),e(Pn,U4r),e(Pn,R2e),e(R2e,J4r),e(Pn,Y4r),e(Pn,S2e),e(S2e,K4r),e(Pn,Z4r),e(Ro,eEr),e(Ro,be),e(be,oC),e(oC,P2e),e(P2e,oEr),e(oC,rEr),e(oC,PV),e(PV,tEr),e(oC,aEr),e(be,nEr),e(be,rC),e(rC,$2e),e($2e,sEr),e(rC,lEr),e(rC,$V),e($V,iEr),e(rC,dEr),e(be,cEr),e(be,tC),e(tC,I2e),e(I2e,fEr),e(tC,mEr),e(tC,IV),e(IV,gEr),e(tC,hEr),e(be,pEr),e(be,aC),e(aC,j2e),e(j2e,_Er),e(aC,uEr),e(aC,jV),e(jV,bEr),e(aC,vEr),e(be,TEr),e(be,nC),e(nC,D2e),e(D2e,FEr),e(nC,CEr),e(nC,DV),e(DV,MEr),e(nC,EEr),e(be,yEr),e(be,sC),e(sC,N2e),e(N2e,wEr),e(sC,AEr),e(sC,NV),e(NV,LEr),e(sC,BEr),e(be,xEr),e(be,lC),e(lC,q2e),e(q2e,kEr),e(lC,REr),e(lC,qV),e(qV,SEr),e(lC,PEr),e(be,$Er),e(be,iC),e(iC,O2e),e(O2e,IEr),e(iC,jEr),e(iC,OV),e(OV,DEr),e(iC,NEr),e(be,qEr),e(be,dC),e(dC,G2e),e(G2e,OEr),e(dC,GEr),e(dC,GV),e(GV,XEr),e(dC,VEr),e(be,zEr),e(be,cC),e(cC,X2e),e(X2e,WEr),e(cC,QEr),e(cC,XV),e(XV,HEr),e(cC,UEr),e(Ro,JEr),e(Ro,V2e),e(V2e,YEr),e(Ro,KEr),g(K6,Ro,null),b(d,zke,u),b(d,uf,u),e(uf,fC),e(fC,z2e),g(Z6,z2e,null),e(uf,ZEr),e(uf,W2e),e(W2e,e3r),b(d,Wke,u),b(d,Dr,u),g(eA,Dr,null),e(Dr,o3r),e(Dr,bf),e(bf,r3r),e(bf,Q2e),e(Q2e,t3r),e(bf,a3r),e(bf,H2e),e(H2e,n3r),e(bf,s3r),e(Dr,l3r),e(Dr,oA),e(oA,i3r),e(oA,U2e),e(U2e,d3r),e(oA,c3r),e(Dr,f3r),e(Dr,Rt),g(rA,Rt,null),e(Rt,m3r),e(Rt,J2e),e(J2e,g3r),e(Rt,h3r),e(Rt,vf),e(vf,p3r),e(vf,Y2e),e(Y2e,_3r),e(vf,u3r),e(vf,K2e),e(K2e,b3r),e(vf,v3r),e(Rt,T3r),e(Rt,Z2e),e(Z2e,F3r),e(Rt,C3r),g(tA,Rt,null),e(Dr,M3r),e(Dr,So),g(aA,So,null),e(So,E3r),e(So,eve),e(eve,y3r),e(So,w3r),e(So,$n),e($n,A3r),e($n,ove),e(ove,L3r),e($n,B3r),e($n,rve),e(rve,x3r),e($n,k3r),e($n,tve),e(tve,R3r),e($n,S3r),e(So,P3r),e(So,ve),e(ve,mC),e(mC,ave),e(ave,$3r),e(mC,I3r),e(mC,VV),e(VV,j3r),e(mC,D3r),e(ve,N3r),e(ve,gC),e(gC,nve),e(nve,q3r),e(gC,O3r),e(gC,zV),e(zV,G3r),e(gC,X3r),e(ve,V3r),e(ve,hC),e(hC,sve),e(sve,z3r),e(hC,W3r),e(hC,WV),e(WV,Q3r),e(hC,H3r),e(ve,U3r),e(ve,pC),e(pC,lve),e(lve,J3r),e(pC,Y3r),e(pC,QV),e(QV,K3r),e(pC,Z3r),e(ve,eyr),e(ve,_C),e(_C,ive),e(ive,oyr),e(_C,ryr),e(_C,HV),e(HV,tyr),e(_C,ayr),e(ve,nyr),e(ve,uC),e(uC,dve),e(dve,syr),e(uC,lyr),e(uC,UV),e(UV,iyr),e(uC,dyr),e(ve,cyr),e(ve,bC),e(bC,cve),e(cve,fyr),e(bC,myr),e(bC,JV),e(JV,gyr),e(bC,hyr),e(ve,pyr),e(ve,vC),e(vC,fve),e(fve,_yr),e(vC,uyr),e(vC,YV),e(YV,byr),e(vC,vyr),e(ve,Tyr),e(ve,TC),e(TC,mve),e(mve,Fyr),e(TC,Cyr),e(TC,KV),e(KV,Myr),e(TC,Eyr),e(ve,yyr),e(ve,FC),e(FC,gve),e(gve,wyr),e(FC,Ayr),e(FC,ZV),e(ZV,Lyr),e(FC,Byr),e(So,xyr),e(So,hve),e(hve,kyr),e(So,Ryr),g(nA,So,null),b(d,Qke,u),b(d,Tf,u),e(Tf,CC),e(CC,pve),g(sA,pve,null),e(Tf,Syr),e(Tf,_ve),e(_ve,Pyr),b(d,Hke,u),b(d,Nr,u),g(lA,Nr,null),e(Nr,$yr),e(Nr,Ff),e(Ff,Iyr),e(Ff,uve),e(uve,jyr),e(Ff,Dyr),e(Ff,bve),e(bve,Nyr),e(Ff,qyr),e(Nr,Oyr),e(Nr,iA),e(iA,Gyr),e(iA,vve),e(vve,Xyr),e(iA,Vyr),e(Nr,zyr),e(Nr,St),g(dA,St,null),e(St,Wyr),e(St,Tve),e(Tve,Qyr),e(St,Hyr),e(St,Cf),e(Cf,Uyr),e(Cf,Fve),e(Fve,Jyr),e(Cf,Yyr),e(Cf,Cve),e(Cve,Kyr),e(Cf,Zyr),e(St,ewr),e(St,Mve),e(Mve,owr),e(St,rwr),g(cA,St,null),e(Nr,twr),e(Nr,Po),g(fA,Po,null),e(Po,awr),e(Po,Eve),e(Eve,nwr),e(Po,swr),e(Po,In),e(In,lwr),e(In,yve),e(yve,iwr),e(In,dwr),e(In,wve),e(wve,cwr),e(In,fwr),e(In,Ave),e(Ave,mwr),e(In,gwr),e(Po,hwr),e(Po,Re),e(Re,MC),e(MC,Lve),e(Lve,pwr),e(MC,_wr),e(MC,ez),e(ez,uwr),e(MC,bwr),e(Re,vwr),e(Re,EC),e(EC,Bve),e(Bve,Twr),e(EC,Fwr),e(EC,oz),e(oz,Cwr),e(EC,Mwr),e(Re,Ewr),e(Re,yC),e(yC,xve),e(xve,ywr),e(yC,wwr),e(yC,rz),e(rz,Awr),e(yC,Lwr),e(Re,Bwr),e(Re,wC),e(wC,kve),e(kve,xwr),e(wC,kwr),e(wC,tz),e(tz,Rwr),e(wC,Swr),e(Re,Pwr),e(Re,AC),e(AC,Rve),e(Rve,$wr),e(AC,Iwr),e(AC,az),e(az,jwr),e(AC,Dwr),e(Re,Nwr),e(Re,LC),e(LC,Sve),e(Sve,qwr),e(LC,Owr),e(LC,nz),e(nz,Gwr),e(LC,Xwr),e(Re,Vwr),e(Re,BC),e(BC,Pve),e(Pve,zwr),e(BC,Wwr),e(BC,sz),e(sz,Qwr),e(BC,Hwr),e(Re,Uwr),e(Re,xC),e(xC,$ve),e($ve,Jwr),e(xC,Ywr),e(xC,lz),e(lz,Kwr),e(xC,Zwr),e(Po,e6r),e(Po,Ive),e(Ive,o6r),e(Po,r6r),g(mA,Po,null),b(d,Uke,u),b(d,Mf,u),e(Mf,kC),e(kC,jve),g(gA,jve,null),e(Mf,t6r),e(Mf,Dve),e(Dve,a6r),b(d,Jke,u),b(d,qr,u),g(hA,qr,null),e(qr,n6r),e(qr,Ef),e(Ef,s6r),e(Ef,Nve),e(Nve,l6r),e(Ef,i6r),e(Ef,qve),e(qve,d6r),e(Ef,c6r),e(qr,f6r),e(qr,pA),e(pA,m6r),e(pA,Ove),e(Ove,g6r),e(pA,h6r),e(qr,p6r),e(qr,Pt),g(_A,Pt,null),e(Pt,_6r),e(Pt,Gve),e(Gve,u6r),e(Pt,b6r),e(Pt,yf),e(yf,v6r),e(yf,Xve),e(Xve,T6r),e(yf,F6r),e(yf,Vve),e(Vve,C6r),e(yf,M6r),e(Pt,E6r),e(Pt,zve),e(zve,y6r),e(Pt,w6r),g(uA,Pt,null),e(qr,A6r),e(qr,$o),g(bA,$o,null),e($o,L6r),e($o,Wve),e(Wve,B6r),e($o,x6r),e($o,jn),e(jn,k6r),e(jn,Qve),e(Qve,R6r),e(jn,S6r),e(jn,Hve),e(Hve,P6r),e(jn,$6r),e(jn,Uve),e(Uve,I6r),e(jn,j6r),e($o,D6r),e($o,Se),e(Se,RC),e(RC,Jve),e(Jve,N6r),e(RC,q6r),e(RC,iz),e(iz,O6r),e(RC,G6r),e(Se,X6r),e(Se,SC),e(SC,Yve),e(Yve,V6r),e(SC,z6r),e(SC,dz),e(dz,W6r),e(SC,Q6r),e(Se,H6r),e(Se,PC),e(PC,Kve),e(Kve,U6r),e(PC,J6r),e(PC,cz),e(cz,Y6r),e(PC,K6r),e(Se,Z6r),e(Se,$C),e($C,Zve),e(Zve,eAr),e($C,oAr),e($C,fz),e(fz,rAr),e($C,tAr),e(Se,aAr),e(Se,IC),e(IC,e0e),e(e0e,nAr),e(IC,sAr),e(IC,mz),e(mz,lAr),e(IC,iAr),e(Se,dAr),e(Se,jC),e(jC,o0e),e(o0e,cAr),e(jC,fAr),e(jC,gz),e(gz,mAr),e(jC,gAr),e(Se,hAr),e(Se,DC),e(DC,r0e),e(r0e,pAr),e(DC,_Ar),e(DC,hz),e(hz,uAr),e(DC,bAr),e(Se,vAr),e(Se,NC),e(NC,t0e),e(t0e,TAr),e(NC,FAr),e(NC,pz),e(pz,CAr),e(NC,MAr),e($o,EAr),e($o,a0e),e(a0e,yAr),e($o,wAr),g(vA,$o,null),b(d,Yke,u),b(d,wf,u),e(wf,qC),e(qC,n0e),g(TA,n0e,null),e(wf,AAr),e(wf,s0e),e(s0e,LAr),b(d,Kke,u),b(d,Or,u),g(FA,Or,null),e(Or,BAr),e(Or,Af),e(Af,xAr),e(Af,l0e),e(l0e,kAr),e(Af,RAr),e(Af,i0e),e(i0e,SAr),e(Af,PAr),e(Or,$Ar),e(Or,CA),e(CA,IAr),e(CA,d0e),e(d0e,jAr),e(CA,DAr),e(Or,NAr),e(Or,$t),g(MA,$t,null),e($t,qAr),e($t,c0e),e(c0e,OAr),e($t,GAr),e($t,Lf),e(Lf,XAr),e(Lf,f0e),e(f0e,VAr),e(Lf,zAr),e(Lf,m0e),e(m0e,WAr),e(Lf,QAr),e($t,HAr),e($t,g0e),e(g0e,UAr),e($t,JAr),g(EA,$t,null),e(Or,YAr),e(Or,Io),g(yA,Io,null),e(Io,KAr),e(Io,h0e),e(h0e,ZAr),e(Io,eLr),e(Io,Dn),e(Dn,oLr),e(Dn,p0e),e(p0e,rLr),e(Dn,tLr),e(Dn,_0e),e(_0e,aLr),e(Dn,nLr),e(Dn,u0e),e(u0e,sLr),e(Dn,lLr),e(Io,iLr),e(Io,b0e),e(b0e,OC),e(OC,v0e),e(v0e,dLr),e(OC,cLr),e(OC,_z),e(_z,fLr),e(OC,mLr),e(Io,gLr),e(Io,T0e),e(T0e,hLr),e(Io,pLr),g(wA,Io,null),b(d,Zke,u),b(d,Bf,u),e(Bf,GC),e(GC,F0e),g(AA,F0e,null),e(Bf,_Lr),e(Bf,C0e),e(C0e,uLr),b(d,eRe,u),b(d,Gr,u),g(LA,Gr,null),e(Gr,bLr),e(Gr,xf),e(xf,vLr),e(xf,M0e),e(M0e,TLr),e(xf,FLr),e(xf,E0e),e(E0e,CLr),e(xf,MLr),e(Gr,ELr),e(Gr,BA),e(BA,yLr),e(BA,y0e),e(y0e,wLr),e(BA,ALr),e(Gr,LLr),e(Gr,It),g(xA,It,null),e(It,BLr),e(It,w0e),e(w0e,xLr),e(It,kLr),e(It,kf),e(kf,RLr),e(kf,A0e),e(A0e,SLr),e(kf,PLr),e(kf,L0e),e(L0e,$Lr),e(kf,ILr),e(It,jLr),e(It,B0e),e(B0e,DLr),e(It,NLr),g(kA,It,null),e(Gr,qLr),e(Gr,jo),g(RA,jo,null),e(jo,OLr),e(jo,x0e),e(x0e,GLr),e(jo,XLr),e(jo,Nn),e(Nn,VLr),e(Nn,k0e),e(k0e,zLr),e(Nn,WLr),e(Nn,R0e),e(R0e,QLr),e(Nn,HLr),e(Nn,S0e),e(S0e,ULr),e(Nn,JLr),e(jo,YLr),e(jo,SA),e(SA,XC),e(XC,P0e),e(P0e,KLr),e(XC,ZLr),e(XC,uz),e(uz,e8r),e(XC,o8r),e(SA,r8r),e(SA,VC),e(VC,$0e),e($0e,t8r),e(VC,a8r),e(VC,bz),e(bz,n8r),e(VC,s8r),e(jo,l8r),e(jo,I0e),e(I0e,i8r),e(jo,d8r),g(PA,jo,null),b(d,oRe,u),b(d,Rf,u),e(Rf,zC),e(zC,j0e),g($A,j0e,null),e(Rf,c8r),e(Rf,D0e),e(D0e,f8r),b(d,rRe,u),b(d,Xr,u),g(IA,Xr,null),e(Xr,m8r),e(Xr,Sf),e(Sf,g8r),e(Sf,N0e),e(N0e,h8r),e(Sf,p8r),e(Sf,q0e),e(q0e,_8r),e(Sf,u8r),e(Xr,b8r),e(Xr,jA),e(jA,v8r),e(jA,O0e),e(O0e,T8r),e(jA,F8r),e(Xr,C8r),e(Xr,jt),g(DA,jt,null),e(jt,M8r),e(jt,G0e),e(G0e,E8r),e(jt,y8r),e(jt,Pf),e(Pf,w8r),e(Pf,X0e),e(X0e,A8r),e(Pf,L8r),e(Pf,V0e),e(V0e,B8r),e(Pf,x8r),e(jt,k8r),e(jt,z0e),e(z0e,R8r),e(jt,S8r),g(NA,jt,null),e(Xr,P8r),e(Xr,Do),g(qA,Do,null),e(Do,$8r),e(Do,W0e),e(W0e,I8r),e(Do,j8r),e(Do,qn),e(qn,D8r),e(qn,Q0e),e(Q0e,N8r),e(qn,q8r),e(qn,H0e),e(H0e,O8r),e(qn,G8r),e(qn,U0e),e(U0e,X8r),e(qn,V8r),e(Do,z8r),e(Do,J0e),e(J0e,WC),e(WC,Y0e),e(Y0e,W8r),e(WC,Q8r),e(WC,vz),e(vz,H8r),e(WC,U8r),e(Do,J8r),e(Do,K0e),e(K0e,Y8r),e(Do,K8r),g(OA,Do,null),tRe=!0},p(d,[u]){const GA={};u&2&&(GA.$$scope={dirty:u,ctx:d}),Of.$set(GA);const Z0e={};u&2&&(Z0e.$$scope={dirty:u,ctx:d}),Eh.$set(Z0e);const eTe={};u&2&&(eTe.$$scope={dirty:u,ctx:d}),$h.$set(eTe)},i(d){tRe||(h(fe.$$.fragment,d),h(qa.$$.fragment,d),h(JM.$$.fragment,d),h(YM.$$.fragment,d),h(Of.$$.fragment,d),h(KM.$$.fragment,d),h(ZM.$$.fragment,d),h(r4.$$.fragment,d),h(t4.$$.fragment,d),h(a4.$$.fragment,d),h(n4.$$.fragment,d),h(s4.$$.fragment,d),h(d4.$$.fragment,d),h(c4.$$.fragment,d),h(f4.$$.fragment,d),h(m4.$$.fragment,d),h(g4.$$.fragment,d),h(_4.$$.fragment,d),h(Eh.$$.fragment,d),h(u4.$$.fragment,d),h(b4.$$.fragment,d),h(v4.$$.fragment,d),h(T4.$$.fragment,d),h(M4.$$.fragment,d),h($h.$$.fragment,d),h(E4.$$.fragment,d),h(y4.$$.fragment,d),h(w4.$$.fragment,d),h(A4.$$.fragment,d),h(B4.$$.fragment,d),h(x4.$$.fragment,d),h(k4.$$.fragment,d),h(R4.$$.fragment,d),h(S4.$$.fragment,d),h(P4.$$.fragment,d),h(I4.$$.fragment,d),h(j4.$$.fragment,d),h(D4.$$.fragment,d),h(N4.$$.fragment,d),h(q4.$$.fragment,d),h(O4.$$.fragment,d),h(X4.$$.fragment,d),h(V4.$$.fragment,d),h(z4.$$.fragment,d),h(W4.$$.fragment,d),h(Q4.$$.fragment,d),h(H4.$$.fragment,d),h(J4.$$.fragment,d),h(Y4.$$.fragment,d),h(K4.$$.fragment,d),h(Z4.$$.fragment,d),h(eE.$$.fragment,d),h(oE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(sE.$$.fragment,d),h(lE.$$.fragment,d),h(iE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(gE.$$.fragment,d),h(hE.$$.fragment,d),h(pE.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(TE.$$.fragment,d),h(FE.$$.fragment,d),h(CE.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(AE.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(kE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h(PE.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(DE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(OE.$$.fragment,d),h(GE.$$.fragment,d),h(XE.$$.fragment,d),h(zE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(t3.$$.fragment,d),h(n3.$$.fragment,d),h(s3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(c3.$$.fragment,d),h(m3.$$.fragment,d),h(g3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(_3.$$.fragment,d),h(u3.$$.fragment,d),h(v3.$$.fragment,d),h(T3.$$.fragment,d),h(F3.$$.fragment,d),h(C3.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(w3.$$.fragment,d),h(A3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(x3.$$.fragment,d),h(k3.$$.fragment,d),h(S3.$$.fragment,d),h(P3.$$.fragment,d),h($3.$$.fragment,d),h(j3.$$.fragment,d),h(D3.$$.fragment,d),h(N3.$$.fragment,d),h(O3.$$.fragment,d),h(G3.$$.fragment,d),h(X3.$$.fragment,d),h(V3.$$.fragment,d),h(z3.$$.fragment,d),h(W3.$$.fragment,d),h(H3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(iy.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(py.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Gy.$$.fragment,d),h(Vy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Dw.$$.fragment,d),h(qw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(Vw.$$.fragment,d),h(zw.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(t6.$$.fragment,d),h(a6.$$.fragment,d),h(n6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(d6.$$.fragment,d),h(c6.$$.fragment,d),h(f6.$$.fragment,d),h(m6.$$.fragment,d),h(h6.$$.fragment,d),h(p6.$$.fragment,d),h(_6.$$.fragment,d),h(u6.$$.fragment,d),h(b6.$$.fragment,d),h(v6.$$.fragment,d),h(F6.$$.fragment,d),h(C6.$$.fragment,d),h(M6.$$.fragment,d),h(E6.$$.fragment,d),h(y6.$$.fragment,d),h(w6.$$.fragment,d),h(L6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(k6.$$.fragment,d),h(R6.$$.fragment,d),h(S6.$$.fragment,d),h($6.$$.fragment,d),h(I6.$$.fragment,d),h(j6.$$.fragment,d),h(D6.$$.fragment,d),h(N6.$$.fragment,d),h(q6.$$.fragment,d),h(G6.$$.fragment,d),h(X6.$$.fragment,d),h(V6.$$.fragment,d),h(z6.$$.fragment,d),h(W6.$$.fragment,d),h(Q6.$$.fragment,d),h(U6.$$.fragment,d),h(J6.$$.fragment,d),h(Y6.$$.fragment,d),h(K6.$$.fragment,d),h(Z6.$$.fragment,d),h(eA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(_A.$$.fragment,d),h(uA.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(DA.$$.fragment,d),h(NA.$$.fragment,d),h(qA.$$.fragment,d),h(OA.$$.fragment,d),tRe=!0)},o(d){p(fe.$$.fragment,d),p(qa.$$.fragment,d),p(JM.$$.fragment,d),p(YM.$$.fragment,d),p(Of.$$.fragment,d),p(KM.$$.fragment,d),p(ZM.$$.fragment,d),p(r4.$$.fragment,d),p(t4.$$.fragment,d),p(a4.$$.fragment,d),p(n4.$$.fragment,d),p(s4.$$.fragment,d),p(d4.$$.fragment,d),p(c4.$$.fragment,d),p(f4.$$.fragment,d),p(m4.$$.fragment,d),p(g4.$$.fragment,d),p(_4.$$.fragment,d),p(Eh.$$.fragment,d),p(u4.$$.fragment,d),p(b4.$$.fragment,d),p(v4.$$.fragment,d),p(T4.$$.fragment,d),p(M4.$$.fragment,d),p($h.$$.fragment,d),p(E4.$$.fragment,d),p(y4.$$.fragment,d),p(w4.$$.fragment,d),p(A4.$$.fragment,d),p(B4.$$.fragment,d),p(x4.$$.fragment,d),p(k4.$$.fragment,d),p(R4.$$.fragment,d),p(S4.$$.fragment,d),p(P4.$$.fragment,d),p(I4.$$.fragment,d),p(j4.$$.fragment,d),p(D4.$$.fragment,d),p(N4.$$.fragment,d),p(q4.$$.fragment,d),p(O4.$$.fragment,d),p(X4.$$.fragment,d),p(V4.$$.fragment,d),p(z4.$$.fragment,d),p(W4.$$.fragment,d),p(Q4.$$.fragment,d),p(H4.$$.fragment,d),p(J4.$$.fragment,d),p(Y4.$$.fragment,d),p(K4.$$.fragment,d),p(Z4.$$.fragment,d),p(eE.$$.fragment,d),p(oE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(sE.$$.fragment,d),p(lE.$$.fragment,d),p(iE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(gE.$$.fragment,d),p(hE.$$.fragment,d),p(pE.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(TE.$$.fragment,d),p(FE.$$.fragment,d),p(CE.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(AE.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(kE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p(PE.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(DE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(OE.$$.fragment,d),p(GE.$$.fragment,d),p(XE.$$.fragment,d),p(zE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(t3.$$.fragment,d),p(n3.$$.fragment,d),p(s3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(c3.$$.fragment,d),p(m3.$$.fragment,d),p(g3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(_3.$$.fragment,d),p(u3.$$.fragment,d),p(v3.$$.fragment,d),p(T3.$$.fragment,d),p(F3.$$.fragment,d),p(C3.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(w3.$$.fragment,d),p(A3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(x3.$$.fragment,d),p(k3.$$.fragment,d),p(S3.$$.fragment,d),p(P3.$$.fragment,d),p($3.$$.fragment,d),p(j3.$$.fragment,d),p(D3.$$.fragment,d),p(N3.$$.fragment,d),p(O3.$$.fragment,d),p(G3.$$.fragment,d),p(X3.$$.fragment,d),p(V3.$$.fragment,d),p(z3.$$.fragment,d),p(W3.$$.fragment,d),p(H3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(oy.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(iy.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(py.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(jy.$$.fragment,d),p(Dy.$$.fragment,d),p(Ny.$$.fragment,d),p(qy.$$.fragment,d),p(Oy.$$.fragment,d),p(Gy.$$.fragment,d),p(Vy.$$.fragment,d),p(zy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(xw.$$.fragment,d),p(kw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Dw.$$.fragment,d),p(qw.$$.fragment,d),p(Ow.$$.fragment,d),p(Gw.$$.fragment,d),p(Xw.$$.fragment,d),p(Vw.$$.fragment,d),p(zw.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(e6.$$.fragment,d),p(o6.$$.fragment,d),p(r6.$$.fragment,d),p(t6.$$.fragment,d),p(a6.$$.fragment,d),p(n6.$$.fragment,d),p(l6.$$.fragment,d),p(i6.$$.fragment,d),p(d6.$$.fragment,d),p(c6.$$.fragment,d),p(f6.$$.fragment,d),p(m6.$$.fragment,d),p(h6.$$.fragment,d),p(p6.$$.fragment,d),p(_6.$$.fragment,d),p(u6.$$.fragment,d),p(b6.$$.fragment,d),p(v6.$$.fragment,d),p(F6.$$.fragment,d),p(C6.$$.fragment,d),p(M6.$$.fragment,d),p(E6.$$.fragment,d),p(y6.$$.fragment,d),p(w6.$$.fragment,d),p(L6.$$.fragment,d),p(B6.$$.fragment,d),p(x6.$$.fragment,d),p(k6.$$.fragment,d),p(R6.$$.fragment,d),p(S6.$$.fragment,d),p($6.$$.fragment,d),p(I6.$$.fragment,d),p(j6.$$.fragment,d),p(D6.$$.fragment,d),p(N6.$$.fragment,d),p(q6.$$.fragment,d),p(G6.$$.fragment,d),p(X6.$$.fragment,d),p(V6.$$.fragment,d),p(z6.$$.fragment,d),p(W6.$$.fragment,d),p(Q6.$$.fragment,d),p(U6.$$.fragment,d),p(J6.$$.fragment,d),p(Y6.$$.fragment,d),p(K6.$$.fragment,d),p(Z6.$$.fragment,d),p(eA.$$.fragment,d),p(rA.$$.fragment,d),p(tA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(dA.$$.fragment,d),p(cA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(_A.$$.fragment,d),p(uA.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(MA.$$.fragment,d),p(EA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(xA.$$.fragment,d),p(kA.$$.fragment,d),p(RA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(DA.$$.fragment,d),p(NA.$$.fragment,d),p(qA.$$.fragment,d),p(OA.$$.fragment,d),tRe=!1},d(d){t(J),d&&t(Pe),d&&t(de),_(fe),d&&t(If),d&&t(fa),d&&t(Le),d&&t(co),d&&t(Df),_(qa,d),d&&t(fo),d&&t(he),d&&t(zo),d&&t(Oa),d&&t(rxe),d&&t(Vi),_(JM),d&&t(txe),d&&t(zn),d&&t(axe),_(YM,d),d&&t(nxe),d&&t(VL),d&&t(sxe),_(Of,d),d&&t(lxe),d&&t(zi),_(KM),d&&t(ixe),d&&t(Wo),_(ZM),_(r4),_(t4),_(a4),d&&t(dxe),d&&t(Qi),_(n4),d&&t(cxe),d&&t(Qo),_(s4),_(d4),_(c4),_(f4),d&&t(fxe),d&&t(Hi),_(m4),d&&t(mxe),d&&t(Ho),_(g4),_(_4),_(Eh),_(u4),_(b4),d&&t(gxe),d&&t(Ui),_(v4),d&&t(hxe),d&&t(Uo),_(T4),_(M4),_($h),_(E4),_(y4),d&&t(pxe),d&&t(Yi),_(w4),d&&t(_xe),d&&t(Jo),_(A4),_(B4),_(x4),_(k4),_(R4),d&&t(uxe),d&&t(ed),_(S4),d&&t(bxe),d&&t(Yo),_(P4),_(I4),_(j4),_(D4),_(N4),d&&t(vxe),d&&t(td),_(q4),d&&t(Txe),d&&t(Ko),_(O4),_(X4),_(V4),_(z4),_(W4),d&&t(Fxe),d&&t(sd),_(Q4),d&&t(Cxe),d&&t(Zo),_(H4),_(J4),_(Y4),_(K4),_(Z4),d&&t(Mxe),d&&t(dd),_(eE),d&&t(Exe),d&&t(er),_(oE),_(tE),_(aE),_(nE),_(sE),d&&t(yxe),d&&t(md),_(lE),d&&t(wxe),d&&t(or),_(iE),_(cE),_(fE),_(mE),_(gE),d&&t(Axe),d&&t(pd),_(hE),d&&t(Lxe),d&&t(rr),_(pE),_(uE),_(bE),_(vE),_(TE),d&&t(Bxe),d&&t(bd),_(FE),d&&t(xxe),d&&t(tr),_(CE),_(EE),_(yE),_(wE),_(AE),d&&t(kxe),d&&t(Fd),_(LE),d&&t(Rxe),d&&t(ar),_(BE),_(kE),_(RE),_(SE),_(PE),d&&t(Sxe),d&&t(Ed),_($E),d&&t(Pxe),d&&t(nr),_(IE),_(DE),_(NE),_(qE),_(OE),d&&t($xe),d&&t(Ad),_(GE),d&&t(Ixe),d&&t(sr),_(XE),_(zE),_(WE),_(QE),_(HE),d&&t(jxe),d&&t(xd),_(UE),d&&t(Dxe),d&&t(lr),_(JE),_(KE),_(ZE),_(e3),_(o3),d&&t(Nxe),d&&t(Sd),_(r3),d&&t(qxe),d&&t(ir),_(t3),_(n3),_(s3),_(l3),_(i3),d&&t(Oxe),d&&t(Id),_(d3),d&&t(Gxe),d&&t(dr),_(c3),_(m3),_(g3),_(h3),_(p3),d&&t(Xxe),d&&t(Nd),_(_3),d&&t(Vxe),d&&t(cr),_(u3),_(v3),_(T3),_(F3),_(C3),d&&t(zxe),d&&t(Gd),_(M3),d&&t(Wxe),d&&t(fr),_(E3),_(w3),_(A3),_(L3),_(B3),d&&t(Qxe),d&&t(zd),_(x3),d&&t(Hxe),d&&t(mr),_(k3),_(S3),_(P3),_($3),_(j3),d&&t(Uxe),d&&t(Hd),_(D3),d&&t(Jxe),d&&t(gr),_(N3),_(O3),_(G3),_(X3),_(V3),d&&t(Yxe),d&&t(Yd),_(z3),d&&t(Kxe),d&&t(hr),_(W3),_(H3),_(U3),_(J3),_(Y3),d&&t(Zxe),d&&t(oc),_(K3),d&&t(eke),d&&t(pr),_(Z3),_(oy),_(ry),_(ty),_(ay),d&&t(oke),d&&t(ac),_(ny),d&&t(rke),d&&t(_r),_(sy),_(iy),_(dy),_(cy),_(fy),d&&t(tke),d&&t(lc),_(my),d&&t(ake),d&&t(ur),_(gy),_(py),_(_y),_(uy),_(vy),d&&t(nke),d&&t(cc),_(Ty),d&&t(ske),d&&t(br),_(Fy),_(My),_(Ey),_(yy),_(wy),d&&t(lke),d&&t(gc),_(Ay),d&&t(ike),d&&t(vr),_(Ly),_(xy),_(ky),_(Ry),_(Sy),d&&t(dke),d&&t(_c),_(Py),d&&t(cke),d&&t(Tr),_($y),_(jy),_(Dy),_(Ny),_(qy),d&&t(fke),d&&t(vc),_(Oy),d&&t(mke),d&&t(Fr),_(Gy),_(Vy),_(zy),_(Wy),_(Qy),d&&t(gke),d&&t(Cc),_(Hy),d&&t(hke),d&&t(Cr),_(Uy),_(Yy),_(Ky),_(Zy),_(ow),d&&t(pke),d&&t(yc),_(rw),d&&t(_ke),d&&t(Mr),_(tw),_(nw),_(sw),_(lw),_(iw),d&&t(uke),d&&t(Lc),_(dw),d&&t(bke),d&&t(Er),_(cw),_(mw),_(gw),_(hw),_(pw),d&&t(vke),d&&t(kc),_(_w),d&&t(Tke),d&&t(yr),_(uw),_(vw),_(Tw),_(Fw),_(Cw),d&&t(Fke),d&&t(Pc),_(Mw),d&&t(Cke),d&&t(wr),_(Ew),_(ww),_(Aw),_(Lw),_(Bw),d&&t(Mke),d&&t(jc),_(xw),d&&t(Eke),d&&t(Ar),_(kw),_(Sw),_(Pw),_($w),_(Iw),d&&t(yke),d&&t(qc),_(jw),d&&t(wke),d&&t(Lr),_(Dw),_(qw),_(Ow),_(Gw),_(Xw),d&&t(Ake),d&&t(Xc),_(Vw),d&&t(Lke),d&&t(Br),_(zw),_(Qw),_(Hw),_(Uw),_(Jw),d&&t(Bke),d&&t(Wc),_(Yw),d&&t(xke),d&&t(xr),_(Kw),_(e6),_(o6),_(r6),_(t6),d&&t(kke),d&&t(Uc),_(a6),d&&t(Rke),d&&t(kr),_(n6),_(l6),_(i6),_(d6),_(c6),d&&t(Ske),d&&t(Kc),_(f6),d&&t(Pke),d&&t(Rr),_(m6),_(h6),_(p6),_(_6),_(u6),d&&t($ke),d&&t(of),_(b6),d&&t(Ike),d&&t(Sr),_(v6),_(F6),_(C6),_(M6),_(E6),d&&t(jke),d&&t(af),_(y6),d&&t(Dke),d&&t(Pr),_(w6),_(L6),_(B6),_(x6),_(k6),d&&t(Nke),d&&t(lf),_(R6),d&&t(qke),d&&t($r),_(S6),_($6),_(I6),_(j6),_(D6),d&&t(Oke),d&&t(ff),_(N6),d&&t(Gke),d&&t(Ir),_(q6),_(G6),_(X6),_(V6),_(z6),d&&t(Xke),d&&t(hf),_(W6),d&&t(Vke),d&&t(jr),_(Q6),_(U6),_(J6),_(Y6),_(K6),d&&t(zke),d&&t(uf),_(Z6),d&&t(Wke),d&&t(Dr),_(eA),_(rA),_(tA),_(aA),_(nA),d&&t(Qke),d&&t(Tf),_(sA),d&&t(Hke),d&&t(Nr),_(lA),_(dA),_(cA),_(fA),_(mA),d&&t(Uke),d&&t(Mf),_(gA),d&&t(Jke),d&&t(qr),_(hA),_(_A),_(uA),_(bA),_(vA),d&&t(Yke),d&&t(wf),_(TA),d&&t(Kke),d&&t(Or),_(FA),_(MA),_(EA),_(yA),_(wA),d&&t(Zke),d&&t(Bf),_(AA),d&&t(eRe),d&&t(Gr),_(LA),_(xA),_(kA),_(RA),_(PA),d&&t(oRe),d&&t(Rf),_($A),d&&t(rRe),d&&t(Xr),_(IA),_(DA),_(NA),_(qA),_(OA)}}}const RTt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function STt(Ii,J,Pe){let{fw:de}=J;return Ii.$$set=ge=>{"fw"in ge&&Pe(0,de=ge.fw)},[de]}class qTt extends ETt{constructor(J){super();yTt(this,J,STt,kTt,wTt,{fw:0})}}export{qTt as default,RTt as metadata};
