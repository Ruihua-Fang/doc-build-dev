import{S as c5t,i as f5t,s as m5t,e as a,k as l,w as f,t as o,M as g5t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as w0r}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-7b52c3d4.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as V}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function h5t(Ai){let J,Be,ie,me,no,ce,ue,Go,Li,Ef,sa,Bi,xi,CE,yf,ye,io,ki,In,ME,Dn,jn,EE,Ri,Nn,yE,Si,wf,$a;return{c(){J=a("p"),Be=o("If your "),ie=a("code"),me=o("NewModelConfig"),no=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Go=o(`, make sure its
`),Li=a("code"),Ef=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Bi=a("code"),xi=o('"new-model"'),CE=o(")."),yf=l(),ye=a("p"),io=o("Likewise, if your "),ki=a("code"),In=o("NewModel"),ME=o(" is a subclass of "),Dn=a("a"),jn=o("PreTrainedModel"),EE=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),yE=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),wf=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Be=r(ge,"If your "),ie=n(ge,"CODE",{});var l8=s(ie);me=r(l8,"NewModelConfig"),l8.forEach(t),no=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Pi=s(ce);ue=r(Pi,"PretrainedConfig"),Pi.forEach(t),Go=r(ge,`, make sure its
`),Li=n(ge,"CODE",{});var i8=s(Li);Ef=r(i8,"model_type"),i8.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Bi=n(ge,"CODE",{});var d8=s(Bi);xi=r(d8,'"new-model"'),d8.forEach(t),CE=r(ge,")."),ge.forEach(t),yf=i(co),ye=n(co,"P",{});var Oo=s(ye);io=r(Oo,"Likewise, if your "),ki=n(Oo,"CODE",{});var Ia=s(ki);In=r(Ia,"NewModel"),Ia.forEach(t),ME=r(Oo," is a subclass of "),Dn=n(Oo,"A",{href:!0});var c8=s(Dn);jn=r(c8,"PreTrainedModel"),c8.forEach(t),EE=r(Oo,`, make sure its
`),Ri=n(Oo,"CODE",{});var Af=s(Ri);Nn=r(Af,"config_class"),Af.forEach(t),yE=r(Oo,` attribute is set to the same class you use when registering the model (here
`),Si=n(Oo,"CODE",{});var f8=s(Si);wf=r(f8,"NewModelConfig"),f8.forEach(t),$a=r(Oo,")."),Oo.forEach(t),this.h()},h(){d(Dn,"href","/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Be),e(J,ie),e(ie,me),e(J,no),e(J,ce),e(ce,ue),e(J,Go),e(J,Li),e(Li,Ef),e(J,sa),e(J,Bi),e(Bi,xi),e(J,CE),b(co,yf,ge),b(co,ye,ge),e(ye,io),e(ye,ki),e(ki,In),e(ye,ME),e(ye,Dn),e(Dn,jn),e(ye,EE),e(ye,Ri),e(Ri,Nn),e(ye,yE),e(ye,Si),e(Si,wf),e(ye,$a)},d(co){co&&t(J),co&&t(yf),co&&t(ye)}}}function p5t(Ai){let J,Be,ie,me,no;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),ie=n(ue,"CODE",{});var Go=s(ie);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,ie),e(ie,me),e(J,no)},d(ce){ce&&t(J)}}}function _5t(Ai){let J,Be,ie,me,no;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),ie=n(ue,"CODE",{});var Go=s(ie);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,ie),e(ie,me),e(J,no)},d(ce){ce&&t(J)}}}function u5t(Ai){let J,Be,ie,me,no,ce,ue,Go,Li,Ef,sa,Bi,xi,CE,yf,ye,io,ki,In,ME,Dn,jn,EE,Ri,Nn,yE,Si,wf,$a,co,ge,l8,Pi,i8,d8,Oo,Ia,c8,Af,f8,$Re,y7e,$i,Lf,TW,wE,IRe,FW,DRe,w7e,qn,jRe,CW,NRe,qRe,MW,GRe,ORe,A7e,AE,L7e,m8,XRe,B7e,Bf,x7e,Ii,xf,EW,LE,VRe,yW,zRe,k7e,Xo,BE,WRe,xE,QRe,g8,HRe,URe,JRe,kE,YRe,wW,KRe,ZRe,eSe,fo,RE,oSe,AW,rSe,tSe,Di,aSe,LW,nSe,sSe,BW,lSe,iSe,dSe,v,kf,xW,cSe,fSe,h8,mSe,gSe,hSe,Rf,kW,pSe,_Se,p8,uSe,bSe,vSe,Sf,RW,TSe,FSe,_8,CSe,MSe,ESe,Pf,SW,ySe,wSe,u8,ASe,LSe,BSe,$f,PW,xSe,kSe,b8,RSe,SSe,PSe,If,$W,$Se,ISe,v8,DSe,jSe,NSe,Df,IW,qSe,GSe,T8,OSe,XSe,VSe,jf,DW,zSe,WSe,F8,QSe,HSe,USe,Nf,jW,JSe,YSe,C8,KSe,ZSe,ePe,qf,NW,oPe,rPe,M8,tPe,aPe,nPe,Gf,qW,sPe,lPe,E8,iPe,dPe,cPe,Of,GW,fPe,mPe,y8,gPe,hPe,pPe,Xf,OW,_Pe,uPe,w8,bPe,vPe,TPe,Vf,XW,FPe,CPe,A8,MPe,EPe,yPe,zf,VW,wPe,APe,L8,LPe,BPe,xPe,Wf,zW,kPe,RPe,B8,SPe,PPe,$Pe,Qf,WW,IPe,DPe,x8,jPe,NPe,qPe,Hf,QW,GPe,OPe,k8,XPe,VPe,zPe,Uf,HW,WPe,QPe,R8,HPe,UPe,JPe,Jf,UW,YPe,KPe,S8,ZPe,e$e,o$e,Yf,JW,r$e,t$e,P8,a$e,n$e,s$e,Kf,YW,l$e,i$e,$8,d$e,c$e,f$e,Zf,KW,m$e,g$e,I8,h$e,p$e,_$e,em,ZW,u$e,b$e,D8,v$e,T$e,F$e,om,eQ,C$e,M$e,j8,E$e,y$e,w$e,rm,oQ,A$e,L$e,N8,B$e,x$e,k$e,tm,rQ,R$e,S$e,q8,P$e,$$e,I$e,am,tQ,D$e,j$e,G8,N$e,q$e,G$e,nm,aQ,O$e,X$e,O8,V$e,z$e,W$e,sm,nQ,Q$e,H$e,X8,U$e,J$e,Y$e,lm,sQ,K$e,Z$e,V8,eIe,oIe,rIe,im,lQ,tIe,aIe,z8,nIe,sIe,lIe,dm,iQ,iIe,dIe,W8,cIe,fIe,mIe,cm,dQ,gIe,hIe,Q8,pIe,_Ie,uIe,fm,cQ,bIe,vIe,H8,TIe,FIe,CIe,mm,fQ,MIe,EIe,U8,yIe,wIe,AIe,gm,mQ,LIe,BIe,J8,xIe,kIe,RIe,hm,gQ,SIe,PIe,Y8,$Ie,IIe,DIe,pm,hQ,jIe,NIe,K8,qIe,GIe,OIe,_m,pQ,XIe,VIe,Z8,zIe,WIe,QIe,um,_Q,HIe,UIe,e7,JIe,YIe,KIe,bm,uQ,ZIe,eDe,o7,oDe,rDe,tDe,vm,bQ,aDe,nDe,r7,sDe,lDe,iDe,Tm,vQ,dDe,cDe,t7,fDe,mDe,gDe,Fm,TQ,hDe,pDe,a7,_De,uDe,bDe,Cm,FQ,vDe,TDe,n7,FDe,CDe,MDe,Mm,CQ,EDe,yDe,s7,wDe,ADe,LDe,Em,MQ,BDe,xDe,l7,kDe,RDe,SDe,ym,EQ,PDe,$De,i7,IDe,DDe,jDe,wm,yQ,NDe,qDe,d7,GDe,ODe,XDe,Am,wQ,VDe,zDe,c7,WDe,QDe,HDe,Lm,AQ,UDe,JDe,f7,YDe,KDe,ZDe,Bm,LQ,eje,oje,m7,rje,tje,aje,xm,BQ,nje,sje,g7,lje,ije,dje,km,xQ,cje,fje,h7,mje,gje,hje,Rm,kQ,pje,_je,p7,uje,bje,vje,Sm,RQ,Tje,Fje,_7,Cje,Mje,Eje,Pm,SQ,yje,wje,u7,Aje,Lje,Bje,$m,PQ,xje,kje,b7,Rje,Sje,Pje,Im,$Q,$je,Ije,v7,Dje,jje,Nje,Dm,IQ,qje,Gje,T7,Oje,Xje,Vje,jm,DQ,zje,Wje,F7,Qje,Hje,Uje,Nm,jQ,Jje,Yje,C7,Kje,Zje,eNe,qm,NQ,oNe,rNe,M7,tNe,aNe,nNe,Gm,qQ,sNe,lNe,E7,iNe,dNe,cNe,Om,GQ,fNe,mNe,y7,gNe,hNe,pNe,Xm,OQ,_Ne,uNe,w7,bNe,vNe,TNe,Vm,XQ,FNe,CNe,A7,MNe,ENe,yNe,zm,VQ,wNe,ANe,L7,LNe,BNe,xNe,Wm,zQ,kNe,RNe,B7,SNe,PNe,$Ne,Qm,WQ,INe,DNe,x7,jNe,NNe,qNe,Hm,QQ,GNe,ONe,k7,XNe,VNe,zNe,Um,HQ,WNe,QNe,R7,HNe,UNe,JNe,Jm,UQ,YNe,KNe,S7,ZNe,eqe,oqe,Ym,JQ,rqe,tqe,P7,aqe,nqe,sqe,Km,YQ,lqe,iqe,$7,dqe,cqe,fqe,Zm,KQ,mqe,gqe,I7,hqe,pqe,_qe,eg,ZQ,uqe,bqe,D7,vqe,Tqe,Fqe,og,eH,Cqe,Mqe,j7,Eqe,yqe,wqe,rg,oH,Aqe,Lqe,N7,Bqe,xqe,kqe,tg,rH,Rqe,Sqe,q7,Pqe,$qe,Iqe,ag,tH,Dqe,jqe,G7,Nqe,qqe,Gqe,ng,aH,Oqe,Xqe,O7,Vqe,zqe,Wqe,sg,nH,Qqe,Hqe,X7,Uqe,Jqe,Yqe,lg,sH,Kqe,Zqe,V7,eGe,oGe,rGe,ig,lH,tGe,aGe,z7,nGe,sGe,lGe,dg,iH,iGe,dGe,W7,cGe,fGe,mGe,cg,dH,gGe,hGe,Q7,pGe,_Ge,uGe,fg,cH,bGe,vGe,H7,TGe,FGe,CGe,mg,fH,MGe,EGe,U7,yGe,wGe,AGe,gg,mH,LGe,BGe,J7,xGe,kGe,RGe,hg,gH,SGe,PGe,Y7,$Ge,IGe,DGe,pg,hH,jGe,NGe,K7,qGe,GGe,OGe,_g,pH,XGe,VGe,Z7,zGe,WGe,QGe,_H,HGe,UGe,SE,JGe,ug,PE,YGe,uH,KGe,R7e,ji,bg,bH,$E,ZGe,vH,eOe,S7e,Vo,IE,oOe,DE,rOe,eB,tOe,aOe,nOe,jE,sOe,TH,lOe,iOe,dOe,mo,NE,cOe,FH,fOe,mOe,Da,gOe,CH,hOe,pOe,MH,_Oe,uOe,EH,bOe,vOe,TOe,M,Gn,yH,FOe,COe,oB,MOe,EOe,rB,yOe,wOe,AOe,On,wH,LOe,BOe,tB,xOe,kOe,aB,ROe,SOe,POe,Xn,AH,$Oe,IOe,nB,DOe,jOe,sB,NOe,qOe,GOe,vg,LH,OOe,XOe,lB,VOe,zOe,WOe,Vn,BH,QOe,HOe,iB,UOe,JOe,dB,YOe,KOe,ZOe,Tg,xH,eXe,oXe,cB,rXe,tXe,aXe,Fg,kH,nXe,sXe,fB,lXe,iXe,dXe,Cg,RH,cXe,fXe,mB,mXe,gXe,hXe,zn,SH,pXe,_Xe,gB,uXe,bXe,hB,vXe,TXe,FXe,Wn,PH,CXe,MXe,pB,EXe,yXe,_B,wXe,AXe,LXe,Qn,$H,BXe,xXe,uB,kXe,RXe,bB,SXe,PXe,$Xe,Mg,IH,IXe,DXe,vB,jXe,NXe,qXe,Eg,DH,GXe,OXe,TB,XXe,VXe,zXe,Hn,jH,WXe,QXe,FB,HXe,UXe,CB,JXe,YXe,KXe,yg,NH,ZXe,eVe,MB,oVe,rVe,tVe,Un,qH,aVe,nVe,EB,sVe,lVe,yB,iVe,dVe,cVe,Jn,GH,fVe,mVe,wB,gVe,hVe,AB,pVe,_Ve,uVe,Yn,OH,bVe,vVe,LB,TVe,FVe,XH,CVe,MVe,EVe,wg,VH,yVe,wVe,BB,AVe,LVe,BVe,Kn,zH,xVe,kVe,xB,RVe,SVe,kB,PVe,$Ve,IVe,Ag,WH,DVe,jVe,RB,NVe,qVe,GVe,Zn,QH,OVe,XVe,SB,VVe,zVe,PB,WVe,QVe,HVe,es,HH,UVe,JVe,$B,YVe,KVe,IB,ZVe,eze,oze,os,UH,rze,tze,DB,aze,nze,jB,sze,lze,ize,Lg,JH,dze,cze,NB,fze,mze,gze,rs,YH,hze,pze,qB,_ze,uze,GB,bze,vze,Tze,Bg,KH,Fze,Cze,OB,Mze,Eze,yze,ts,ZH,wze,Aze,XB,Lze,Bze,VB,xze,kze,Rze,as,eU,Sze,Pze,zB,$ze,Ize,WB,Dze,jze,Nze,ns,oU,qze,Gze,QB,Oze,Xze,HB,Vze,zze,Wze,ss,rU,Qze,Hze,UB,Uze,Jze,JB,Yze,Kze,Zze,xg,tU,eWe,oWe,YB,rWe,tWe,aWe,ls,aU,nWe,sWe,KB,lWe,iWe,ZB,dWe,cWe,fWe,is,nU,mWe,gWe,ex,hWe,pWe,ox,_We,uWe,bWe,ds,sU,vWe,TWe,rx,FWe,CWe,tx,MWe,EWe,yWe,cs,lU,wWe,AWe,ax,LWe,BWe,nx,xWe,kWe,RWe,fs,iU,SWe,PWe,sx,$We,IWe,lx,DWe,jWe,NWe,ms,dU,qWe,GWe,ix,OWe,XWe,dx,VWe,zWe,WWe,kg,cU,QWe,HWe,cx,UWe,JWe,YWe,gs,fU,KWe,ZWe,fx,eQe,oQe,mx,rQe,tQe,aQe,Rg,mU,nQe,sQe,gx,lQe,iQe,dQe,Sg,gU,cQe,fQe,hx,mQe,gQe,hQe,hs,hU,pQe,_Qe,px,uQe,bQe,_x,vQe,TQe,FQe,ps,pU,CQe,MQe,ux,EQe,yQe,bx,wQe,AQe,LQe,Pg,_U,BQe,xQe,vx,kQe,RQe,SQe,_s,uU,PQe,$Qe,Tx,IQe,DQe,Fx,jQe,NQe,qQe,us,bU,GQe,OQe,Cx,XQe,VQe,Mx,zQe,WQe,QQe,bs,vU,HQe,UQe,Ex,JQe,YQe,yx,KQe,ZQe,eHe,vs,TU,oHe,rHe,wx,tHe,aHe,Ax,nHe,sHe,lHe,Ts,FU,iHe,dHe,Lx,cHe,fHe,Bx,mHe,gHe,hHe,$g,CU,pHe,_He,xx,uHe,bHe,vHe,Ig,MU,THe,FHe,kx,CHe,MHe,EHe,Dg,EU,yHe,wHe,Rx,AHe,LHe,BHe,jg,yU,xHe,kHe,Sx,RHe,SHe,PHe,Fs,wU,$He,IHe,Px,DHe,jHe,$x,NHe,qHe,GHe,Ng,AU,OHe,XHe,Ix,VHe,zHe,WHe,Cs,LU,QHe,HHe,Dx,UHe,JHe,jx,YHe,KHe,ZHe,Ms,BU,eUe,oUe,Nx,rUe,tUe,qx,aUe,nUe,sUe,Es,xU,lUe,iUe,Gx,dUe,cUe,Ox,fUe,mUe,gUe,ys,kU,hUe,pUe,Xx,_Ue,uUe,Vx,bUe,vUe,TUe,ws,RU,FUe,CUe,zx,MUe,EUe,Wx,yUe,wUe,AUe,qg,SU,LUe,BUe,Qx,xUe,kUe,RUe,Gg,PU,SUe,PUe,Hx,$Ue,IUe,DUe,As,$U,jUe,NUe,Ux,qUe,GUe,Jx,OUe,XUe,VUe,Ls,IU,zUe,WUe,Yx,QUe,HUe,Kx,UUe,JUe,YUe,Bs,DU,KUe,ZUe,Zx,eJe,oJe,ek,rJe,tJe,aJe,Og,jU,nJe,sJe,ok,lJe,iJe,dJe,Xg,NU,cJe,fJe,rk,mJe,gJe,hJe,Vg,qU,pJe,_Je,tk,uJe,bJe,vJe,zg,GU,TJe,FJe,ak,CJe,MJe,EJe,xs,OU,yJe,wJe,nk,AJe,LJe,sk,BJe,xJe,kJe,Wg,XU,RJe,SJe,lk,PJe,$Je,IJe,Qg,VU,DJe,jJe,ik,NJe,qJe,GJe,ks,zU,OJe,XJe,dk,VJe,zJe,ck,WJe,QJe,HJe,Rs,WU,UJe,JJe,fk,YJe,KJe,mk,ZJe,eYe,oYe,QU,rYe,tYe,qE,aYe,Hg,GE,nYe,HU,sYe,P7e,Ni,Ug,UU,OE,lYe,JU,iYe,$7e,zo,XE,dYe,VE,cYe,gk,fYe,mYe,gYe,zE,hYe,YU,pYe,_Ye,uYe,xe,WE,bYe,KU,vYe,TYe,ja,FYe,ZU,CYe,MYe,eJ,EYe,yYe,oJ,wYe,AYe,LYe,se,Jg,rJ,BYe,xYe,hk,kYe,RYe,SYe,Yg,tJ,PYe,$Ye,pk,IYe,DYe,jYe,Kg,aJ,NYe,qYe,_k,GYe,OYe,XYe,Zg,nJ,VYe,zYe,uk,WYe,QYe,HYe,eh,sJ,UYe,JYe,bk,YYe,KYe,ZYe,oh,lJ,eKe,oKe,vk,rKe,tKe,aKe,rh,iJ,nKe,sKe,Tk,lKe,iKe,dKe,th,dJ,cKe,fKe,Fk,mKe,gKe,hKe,ah,cJ,pKe,_Ke,Ck,uKe,bKe,vKe,nh,fJ,TKe,FKe,Mk,CKe,MKe,EKe,sh,mJ,yKe,wKe,Ek,AKe,LKe,BKe,lh,gJ,xKe,kKe,yk,RKe,SKe,PKe,ih,hJ,$Ke,IKe,wk,DKe,jKe,NKe,dh,pJ,qKe,GKe,Ak,OKe,XKe,VKe,ch,_J,zKe,WKe,Lk,QKe,HKe,UKe,fh,JKe,uJ,YKe,KKe,QE,ZKe,mh,HE,eZe,bJ,oZe,I7e,qi,gh,vJ,UE,rZe,TJ,tZe,D7e,Wo,JE,aZe,YE,nZe,Bk,sZe,lZe,iZe,KE,dZe,FJ,cZe,fZe,mZe,ke,ZE,gZe,CJ,hZe,pZe,Gi,_Ze,MJ,uZe,bZe,EJ,vZe,TZe,FZe,we,hh,yJ,CZe,MZe,xk,EZe,yZe,wZe,ph,wJ,AZe,LZe,kk,BZe,xZe,kZe,_h,AJ,RZe,SZe,Rk,PZe,$Ze,IZe,uh,LJ,DZe,jZe,Sk,NZe,qZe,GZe,bh,BJ,OZe,XZe,Pk,VZe,zZe,WZe,vh,xJ,QZe,HZe,$k,UZe,JZe,YZe,Th,kJ,KZe,ZZe,Ik,eeo,oeo,reo,Fh,RJ,teo,aeo,Dk,neo,seo,leo,Ch,ieo,SJ,deo,ceo,e3,feo,Mh,o3,meo,PJ,geo,j7e,Oi,Eh,$J,r3,heo,IJ,peo,N7e,Qo,t3,_eo,Xi,ueo,DJ,beo,veo,jJ,Teo,Feo,Ceo,a3,Meo,NJ,Eeo,yeo,weo,qr,n3,Aeo,qJ,Leo,Beo,Vi,xeo,GJ,keo,Reo,OJ,Seo,Peo,$eo,XJ,Ieo,Deo,s3,jeo,Re,l3,Neo,VJ,qeo,Geo,Na,Oeo,zJ,Xeo,Veo,WJ,zeo,Weo,QJ,Qeo,Heo,Ueo,F,yh,HJ,Jeo,Yeo,jk,Keo,Zeo,eoo,wh,UJ,ooo,roo,Nk,too,aoo,noo,Ah,JJ,soo,loo,qk,ioo,doo,coo,Lh,YJ,foo,moo,Gk,goo,hoo,poo,Bh,KJ,_oo,uoo,Ok,boo,voo,Too,xh,ZJ,Foo,Coo,Xk,Moo,Eoo,yoo,kh,eY,woo,Aoo,Vk,Loo,Boo,xoo,Rh,oY,koo,Roo,zk,Soo,Poo,$oo,Sh,rY,Ioo,Doo,Wk,joo,Noo,qoo,Ph,tY,Goo,Ooo,Qk,Xoo,Voo,zoo,$h,aY,Woo,Qoo,Hk,Hoo,Uoo,Joo,Ih,nY,Yoo,Koo,Uk,Zoo,ero,oro,Dh,sY,rro,tro,Jk,aro,nro,sro,jh,lY,lro,iro,Yk,dro,cro,fro,Nh,iY,mro,gro,Kk,hro,pro,_ro,qh,dY,uro,bro,Zk,vro,Tro,Fro,Gh,cY,Cro,Mro,eR,Ero,yro,wro,Oh,fY,Aro,Lro,oR,Bro,xro,kro,Xh,mY,Rro,Sro,rR,Pro,$ro,Iro,Vh,gY,Dro,jro,tR,Nro,qro,Gro,zh,hY,Oro,Xro,aR,Vro,zro,Wro,Wh,pY,Qro,Hro,nR,Uro,Jro,Yro,Qh,_Y,Kro,Zro,sR,eto,oto,rto,Hh,uY,tto,ato,lR,nto,sto,lto,Uh,bY,ito,dto,iR,cto,fto,mto,Jh,vY,gto,hto,dR,pto,_to,uto,Yh,TY,bto,vto,cR,Tto,Fto,Cto,Ss,FY,Mto,Eto,fR,yto,wto,mR,Ato,Lto,Bto,Kh,CY,xto,kto,gR,Rto,Sto,Pto,Zh,MY,$to,Ito,hR,Dto,jto,Nto,ep,EY,qto,Gto,pR,Oto,Xto,Vto,op,yY,zto,Wto,_R,Qto,Hto,Uto,rp,wY,Jto,Yto,uR,Kto,Zto,eao,tp,AY,oao,rao,bR,tao,aao,nao,ap,LY,sao,lao,vR,iao,dao,cao,np,BY,fao,mao,TR,gao,hao,pao,sp,xY,_ao,uao,FR,bao,vao,Tao,lp,kY,Fao,Cao,CR,Mao,Eao,yao,ip,RY,wao,Aao,MR,Lao,Bao,xao,dp,SY,kao,Rao,ER,Sao,Pao,$ao,cp,PY,Iao,Dao,yR,jao,Nao,qao,fp,$Y,Gao,Oao,wR,Xao,Vao,zao,mp,IY,Wao,Qao,AR,Hao,Uao,Jao,gp,DY,Yao,Kao,LR,Zao,eno,ono,hp,jY,rno,tno,BR,ano,nno,sno,pp,NY,lno,ino,xR,dno,cno,fno,_p,qY,mno,gno,kR,hno,pno,_no,up,GY,uno,bno,RR,vno,Tno,Fno,bp,OY,Cno,Mno,SR,Eno,yno,wno,vp,XY,Ano,Lno,PR,Bno,xno,kno,Tp,VY,Rno,Sno,$R,Pno,$no,Ino,Fp,zY,Dno,jno,IR,Nno,qno,Gno,Cp,WY,Ono,Xno,DR,Vno,zno,Wno,Mp,QY,Qno,Hno,jR,Uno,Jno,Yno,Ep,HY,Kno,Zno,NR,eso,oso,rso,yp,UY,tso,aso,qR,nso,sso,lso,wp,JY,iso,dso,GR,cso,fso,mso,Ap,YY,gso,hso,OR,pso,_so,uso,Lp,KY,bso,vso,XR,Tso,Fso,Cso,Bp,ZY,Mso,Eso,VR,yso,wso,Aso,xp,eK,Lso,Bso,zR,xso,kso,Rso,kp,oK,Sso,Pso,WR,$so,Iso,Dso,Rp,rK,jso,Nso,QR,qso,Gso,Oso,Sp,tK,Xso,Vso,HR,zso,Wso,Qso,Pp,aK,Hso,Uso,UR,Jso,Yso,Kso,$p,nK,Zso,elo,JR,olo,rlo,tlo,Ip,sK,alo,nlo,YR,slo,llo,ilo,Dp,lK,dlo,clo,KR,flo,mlo,glo,jp,iK,hlo,plo,ZR,_lo,ulo,blo,Np,dK,vlo,Tlo,eS,Flo,Clo,Mlo,qp,cK,Elo,ylo,oS,wlo,Alo,Llo,Gp,fK,Blo,xlo,rS,klo,Rlo,Slo,Op,mK,Plo,$lo,tS,Ilo,Dlo,jlo,Xp,gK,Nlo,qlo,aS,Glo,Olo,Xlo,Vp,hK,Vlo,zlo,nS,Wlo,Qlo,Hlo,zp,pK,Ulo,Jlo,sS,Ylo,Klo,Zlo,Wp,_K,eio,oio,lS,rio,tio,aio,Qp,uK,nio,sio,iS,lio,iio,dio,Hp,bK,cio,fio,dS,mio,gio,hio,Up,vK,pio,_io,cS,uio,bio,vio,Jp,TK,Tio,Fio,fS,Cio,Mio,Eio,Yp,FK,yio,wio,mS,Aio,Lio,Bio,Kp,CK,xio,kio,gS,Rio,Sio,Pio,Zp,MK,$io,Iio,hS,Dio,jio,Nio,e_,EK,qio,Gio,pS,Oio,Xio,Vio,o_,yK,zio,Wio,_S,Qio,Hio,Uio,r_,wK,Jio,Yio,uS,Kio,Zio,edo,t_,odo,AK,rdo,tdo,LK,ado,ndo,BK,sdo,ldo,i3,q7e,zi,a_,xK,d3,ido,kK,ddo,G7e,Ho,c3,cdo,Wi,fdo,RK,mdo,gdo,SK,hdo,pdo,_do,f3,udo,PK,bdo,vdo,Tdo,Gr,m3,Fdo,$K,Cdo,Mdo,Qi,Edo,IK,ydo,wdo,DK,Ado,Ldo,Bdo,jK,xdo,kdo,g3,Rdo,Se,h3,Sdo,NK,Pdo,$do,qa,Ido,qK,Ddo,jdo,GK,Ndo,qdo,OK,Gdo,Odo,Xdo,k,n_,XK,Vdo,zdo,bS,Wdo,Qdo,Hdo,s_,VK,Udo,Jdo,vS,Ydo,Kdo,Zdo,l_,zK,eco,oco,TS,rco,tco,aco,i_,WK,nco,sco,FS,lco,ico,dco,d_,QK,cco,fco,CS,mco,gco,hco,c_,HK,pco,_co,MS,uco,bco,vco,f_,UK,Tco,Fco,ES,Cco,Mco,Eco,m_,JK,yco,wco,yS,Aco,Lco,Bco,g_,YK,xco,kco,wS,Rco,Sco,Pco,h_,KK,$co,Ico,AS,Dco,jco,Nco,p_,ZK,qco,Gco,LS,Oco,Xco,Vco,__,eZ,zco,Wco,BS,Qco,Hco,Uco,u_,oZ,Jco,Yco,xS,Kco,Zco,efo,b_,rZ,ofo,rfo,kS,tfo,afo,nfo,v_,tZ,sfo,lfo,RS,ifo,dfo,cfo,T_,aZ,ffo,mfo,SS,gfo,hfo,pfo,F_,nZ,_fo,ufo,PS,bfo,vfo,Tfo,C_,sZ,Ffo,Cfo,$S,Mfo,Efo,yfo,M_,lZ,wfo,Afo,IS,Lfo,Bfo,xfo,E_,iZ,kfo,Rfo,DS,Sfo,Pfo,$fo,y_,dZ,Ifo,Dfo,jS,jfo,Nfo,qfo,w_,cZ,Gfo,Ofo,NS,Xfo,Vfo,zfo,A_,fZ,Wfo,Qfo,qS,Hfo,Ufo,Jfo,L_,mZ,Yfo,Kfo,GS,Zfo,emo,omo,B_,gZ,rmo,tmo,OS,amo,nmo,smo,x_,hZ,lmo,imo,XS,dmo,cmo,fmo,k_,pZ,mmo,gmo,VS,hmo,pmo,_mo,R_,_Z,umo,bmo,zS,vmo,Tmo,Fmo,S_,uZ,Cmo,Mmo,WS,Emo,ymo,wmo,P_,bZ,Amo,Lmo,QS,Bmo,xmo,kmo,$_,vZ,Rmo,Smo,HS,Pmo,$mo,Imo,I_,TZ,Dmo,jmo,US,Nmo,qmo,Gmo,D_,FZ,Omo,Xmo,JS,Vmo,zmo,Wmo,j_,CZ,Qmo,Hmo,YS,Umo,Jmo,Ymo,N_,MZ,Kmo,Zmo,KS,ego,ogo,rgo,q_,EZ,tgo,ago,ZS,ngo,sgo,lgo,G_,yZ,igo,dgo,eP,cgo,fgo,mgo,O_,wZ,ggo,hgo,oP,pgo,_go,ugo,X_,AZ,bgo,vgo,rP,Tgo,Fgo,Cgo,V_,Mgo,LZ,Ego,ygo,BZ,wgo,Ago,xZ,Lgo,Bgo,p3,O7e,Hi,z_,kZ,_3,xgo,RZ,kgo,X7e,Uo,u3,Rgo,Ui,Sgo,SZ,Pgo,$go,PZ,Igo,Dgo,jgo,b3,Ngo,$Z,qgo,Ggo,Ogo,Or,v3,Xgo,IZ,Vgo,zgo,Ji,Wgo,DZ,Qgo,Hgo,jZ,Ugo,Jgo,Ygo,NZ,Kgo,Zgo,T3,eho,Pe,F3,oho,qZ,rho,tho,Ga,aho,GZ,nho,sho,OZ,lho,iho,XZ,dho,cho,fho,$,W_,VZ,mho,gho,tP,hho,pho,_ho,Q_,zZ,uho,bho,aP,vho,Tho,Fho,H_,WZ,Cho,Mho,nP,Eho,yho,who,U_,QZ,Aho,Lho,sP,Bho,xho,kho,J_,HZ,Rho,Sho,lP,Pho,$ho,Iho,Y_,UZ,Dho,jho,iP,Nho,qho,Gho,K_,JZ,Oho,Xho,dP,Vho,zho,Who,Z_,YZ,Qho,Hho,cP,Uho,Jho,Yho,eu,KZ,Kho,Zho,fP,epo,opo,rpo,ou,ZZ,tpo,apo,mP,npo,spo,lpo,ru,eee,ipo,dpo,gP,cpo,fpo,mpo,tu,oee,gpo,hpo,hP,ppo,_po,upo,au,ree,bpo,vpo,pP,Tpo,Fpo,Cpo,nu,tee,Mpo,Epo,_P,ypo,wpo,Apo,su,aee,Lpo,Bpo,uP,xpo,kpo,Rpo,lu,nee,Spo,Ppo,bP,$po,Ipo,Dpo,iu,see,jpo,Npo,vP,qpo,Gpo,Opo,du,lee,Xpo,Vpo,TP,zpo,Wpo,Qpo,cu,iee,Hpo,Upo,FP,Jpo,Ypo,Kpo,fu,dee,Zpo,e_o,CP,o_o,r_o,t_o,mu,cee,a_o,n_o,MP,s_o,l_o,i_o,gu,fee,d_o,c_o,EP,f_o,m_o,g_o,hu,mee,h_o,p_o,yP,__o,u_o,b_o,pu,gee,v_o,T_o,wP,F_o,C_o,M_o,_u,hee,E_o,y_o,AP,w_o,A_o,L_o,uu,pee,B_o,x_o,LP,k_o,R_o,S_o,bu,_ee,P_o,$_o,BP,I_o,D_o,j_o,vu,uee,N_o,q_o,xP,G_o,O_o,X_o,Tu,bee,V_o,z_o,kP,W_o,Q_o,H_o,Fu,vee,U_o,J_o,RP,Y_o,K_o,Z_o,Cu,Tee,euo,ouo,SP,ruo,tuo,auo,Mu,Fee,nuo,suo,PP,luo,iuo,duo,Eu,Cee,cuo,fuo,$P,muo,guo,huo,yu,Mee,puo,_uo,IP,uuo,buo,vuo,wu,Eee,Tuo,Fuo,DP,Cuo,Muo,Euo,Au,yuo,yee,wuo,Auo,wee,Luo,Buo,Aee,xuo,kuo,C3,V7e,Yi,Lu,Lee,M3,Ruo,Bee,Suo,z7e,Jo,E3,Puo,Ki,$uo,xee,Iuo,Duo,kee,juo,Nuo,quo,y3,Guo,Ree,Ouo,Xuo,Vuo,Xr,w3,zuo,See,Wuo,Quo,Zi,Huo,Pee,Uuo,Juo,$ee,Yuo,Kuo,Zuo,Iee,e1o,o1o,A3,r1o,$e,L3,t1o,Dee,a1o,n1o,Oa,s1o,jee,l1o,i1o,Nee,d1o,c1o,qee,f1o,m1o,g1o,I,Bu,Gee,h1o,p1o,jP,_1o,u1o,b1o,xu,Oee,v1o,T1o,NP,F1o,C1o,M1o,ku,Xee,E1o,y1o,qP,w1o,A1o,L1o,Ru,Vee,B1o,x1o,GP,k1o,R1o,S1o,Su,zee,P1o,$1o,OP,I1o,D1o,j1o,Pu,Wee,N1o,q1o,XP,G1o,O1o,X1o,$u,Qee,V1o,z1o,VP,W1o,Q1o,H1o,Iu,Hee,U1o,J1o,zP,Y1o,K1o,Z1o,Du,Uee,ebo,obo,WP,rbo,tbo,abo,ju,Jee,nbo,sbo,QP,lbo,ibo,dbo,Nu,Yee,cbo,fbo,HP,mbo,gbo,hbo,qu,Kee,pbo,_bo,UP,ubo,bbo,vbo,Gu,Zee,Tbo,Fbo,JP,Cbo,Mbo,Ebo,Ou,eoe,ybo,wbo,YP,Abo,Lbo,Bbo,Xu,ooe,xbo,kbo,KP,Rbo,Sbo,Pbo,Vu,roe,$bo,Ibo,ZP,Dbo,jbo,Nbo,zu,toe,qbo,Gbo,e$,Obo,Xbo,Vbo,Wu,aoe,zbo,Wbo,o$,Qbo,Hbo,Ubo,Qu,noe,Jbo,Ybo,r$,Kbo,Zbo,e5o,Hu,soe,o5o,r5o,t$,t5o,a5o,n5o,Uu,loe,s5o,l5o,a$,i5o,d5o,c5o,Ju,ioe,f5o,m5o,n$,g5o,h5o,p5o,Yu,doe,_5o,u5o,s$,b5o,v5o,T5o,Ku,coe,F5o,C5o,l$,M5o,E5o,y5o,Zu,foe,w5o,A5o,i$,L5o,B5o,x5o,e1,moe,k5o,R5o,d$,S5o,P5o,$5o,o1,goe,I5o,D5o,c$,j5o,N5o,q5o,r1,hoe,G5o,O5o,f$,X5o,V5o,z5o,t1,poe,W5o,Q5o,m$,H5o,U5o,J5o,a1,_oe,Y5o,K5o,g$,Z5o,e2o,o2o,n1,uoe,r2o,t2o,boe,a2o,n2o,s2o,s1,voe,l2o,i2o,h$,d2o,c2o,f2o,l1,Toe,m2o,g2o,p$,h2o,p2o,_2o,i1,Foe,u2o,b2o,_$,v2o,T2o,F2o,d1,Coe,C2o,M2o,u$,E2o,y2o,w2o,c1,A2o,Moe,L2o,B2o,Eoe,x2o,k2o,yoe,R2o,S2o,B3,W7e,ed,f1,woe,x3,P2o,Aoe,$2o,Q7e,Yo,k3,I2o,od,D2o,Loe,j2o,N2o,Boe,q2o,G2o,O2o,R3,X2o,xoe,V2o,z2o,W2o,Vr,S3,Q2o,koe,H2o,U2o,rd,J2o,Roe,Y2o,K2o,Soe,Z2o,evo,ovo,Poe,rvo,tvo,P3,avo,Ie,$3,nvo,$oe,svo,lvo,Xa,ivo,Ioe,dvo,cvo,Doe,fvo,mvo,joe,gvo,hvo,pvo,ae,m1,Noe,_vo,uvo,b$,bvo,vvo,Tvo,g1,qoe,Fvo,Cvo,v$,Mvo,Evo,yvo,h1,Goe,wvo,Avo,T$,Lvo,Bvo,xvo,p1,Ooe,kvo,Rvo,F$,Svo,Pvo,$vo,_1,Xoe,Ivo,Dvo,C$,jvo,Nvo,qvo,u1,Voe,Gvo,Ovo,M$,Xvo,Vvo,zvo,b1,zoe,Wvo,Qvo,E$,Hvo,Uvo,Jvo,v1,Woe,Yvo,Kvo,y$,Zvo,eTo,oTo,T1,Qoe,rTo,tTo,w$,aTo,nTo,sTo,F1,Hoe,lTo,iTo,A$,dTo,cTo,fTo,C1,Uoe,mTo,gTo,L$,hTo,pTo,_To,M1,Joe,uTo,bTo,B$,vTo,TTo,FTo,E1,Yoe,CTo,MTo,x$,ETo,yTo,wTo,y1,Koe,ATo,LTo,k$,BTo,xTo,kTo,w1,Zoe,RTo,STo,R$,PTo,$To,ITo,A1,ere,DTo,jTo,S$,NTo,qTo,GTo,L1,OTo,ore,XTo,VTo,rre,zTo,WTo,tre,QTo,HTo,I3,H7e,td,B1,are,D3,UTo,nre,JTo,U7e,Ko,j3,YTo,ad,KTo,sre,ZTo,eFo,lre,oFo,rFo,tFo,N3,aFo,ire,nFo,sFo,lFo,zr,q3,iFo,dre,dFo,cFo,nd,fFo,cre,mFo,gFo,fre,hFo,pFo,_Fo,mre,uFo,bFo,G3,vFo,De,O3,TFo,gre,FFo,CFo,Va,MFo,hre,EFo,yFo,pre,wFo,AFo,_re,LFo,BFo,xFo,A,x1,ure,kFo,RFo,P$,SFo,PFo,$Fo,k1,bre,IFo,DFo,$$,jFo,NFo,qFo,R1,vre,GFo,OFo,I$,XFo,VFo,zFo,S1,Tre,WFo,QFo,D$,HFo,UFo,JFo,P1,Fre,YFo,KFo,j$,ZFo,e9o,o9o,$1,Cre,r9o,t9o,N$,a9o,n9o,s9o,I1,Mre,l9o,i9o,q$,d9o,c9o,f9o,D1,Ere,m9o,g9o,G$,h9o,p9o,_9o,j1,yre,u9o,b9o,O$,v9o,T9o,F9o,N1,wre,C9o,M9o,X$,E9o,y9o,w9o,q1,Are,A9o,L9o,V$,B9o,x9o,k9o,G1,Lre,R9o,S9o,z$,P9o,$9o,I9o,O1,Bre,D9o,j9o,W$,N9o,q9o,G9o,X1,xre,O9o,X9o,Q$,V9o,z9o,W9o,V1,kre,Q9o,H9o,H$,U9o,J9o,Y9o,z1,Rre,K9o,Z9o,U$,eCo,oCo,rCo,W1,Sre,tCo,aCo,J$,nCo,sCo,lCo,Q1,Pre,iCo,dCo,Y$,cCo,fCo,mCo,H1,$re,gCo,hCo,K$,pCo,_Co,uCo,U1,Ire,bCo,vCo,Z$,TCo,FCo,CCo,J1,Dre,MCo,ECo,eI,yCo,wCo,ACo,Y1,jre,LCo,BCo,oI,xCo,kCo,RCo,K1,Nre,SCo,PCo,rI,$Co,ICo,DCo,Z1,qre,jCo,NCo,tI,qCo,GCo,OCo,eb,Gre,XCo,VCo,aI,zCo,WCo,QCo,ob,Ore,HCo,UCo,nI,JCo,YCo,KCo,rb,Xre,ZCo,e4o,sI,o4o,r4o,t4o,tb,Vre,a4o,n4o,lI,s4o,l4o,i4o,ab,zre,d4o,c4o,iI,f4o,m4o,g4o,nb,Wre,h4o,p4o,dI,_4o,u4o,b4o,sb,Qre,v4o,T4o,cI,F4o,C4o,M4o,lb,Hre,E4o,y4o,fI,w4o,A4o,L4o,ib,Ure,B4o,x4o,mI,k4o,R4o,S4o,db,Jre,P4o,$4o,gI,I4o,D4o,j4o,cb,Yre,N4o,q4o,hI,G4o,O4o,X4o,fb,Kre,V4o,z4o,pI,W4o,Q4o,H4o,mb,Zre,U4o,J4o,_I,Y4o,K4o,Z4o,gb,ete,eMo,oMo,uI,rMo,tMo,aMo,hb,ote,nMo,sMo,bI,lMo,iMo,dMo,pb,rte,cMo,fMo,vI,mMo,gMo,hMo,_b,tte,pMo,_Mo,TI,uMo,bMo,vMo,ub,ate,TMo,FMo,FI,CMo,MMo,EMo,bb,nte,yMo,wMo,CI,AMo,LMo,BMo,vb,ste,xMo,kMo,MI,RMo,SMo,PMo,Tb,lte,$Mo,IMo,EI,DMo,jMo,NMo,Fb,ite,qMo,GMo,yI,OMo,XMo,VMo,Cb,zMo,dte,WMo,QMo,cte,HMo,UMo,fte,JMo,YMo,X3,J7e,sd,Mb,mte,V3,KMo,gte,ZMo,Y7e,Zo,z3,eEo,ld,oEo,hte,rEo,tEo,pte,aEo,nEo,sEo,W3,lEo,_te,iEo,dEo,cEo,Wr,Q3,fEo,ute,mEo,gEo,id,hEo,bte,pEo,_Eo,vte,uEo,bEo,vEo,Tte,TEo,FEo,H3,CEo,je,U3,MEo,Fte,EEo,yEo,za,wEo,Cte,AEo,LEo,Mte,BEo,xEo,Ete,kEo,REo,SEo,G,Eb,yte,PEo,$Eo,wI,IEo,DEo,jEo,yb,wte,NEo,qEo,AI,GEo,OEo,XEo,wb,Ate,VEo,zEo,LI,WEo,QEo,HEo,Ab,Lte,UEo,JEo,BI,YEo,KEo,ZEo,Lb,Bte,e3o,o3o,xI,r3o,t3o,a3o,Bb,xte,n3o,s3o,kI,l3o,i3o,d3o,xb,kte,c3o,f3o,RI,m3o,g3o,h3o,kb,Rte,p3o,_3o,SI,u3o,b3o,v3o,Rb,Ste,T3o,F3o,PI,C3o,M3o,E3o,Sb,Pte,y3o,w3o,$I,A3o,L3o,B3o,Pb,$te,x3o,k3o,II,R3o,S3o,P3o,$b,Ite,$3o,I3o,DI,D3o,j3o,N3o,Ib,Dte,q3o,G3o,jI,O3o,X3o,V3o,Db,jte,z3o,W3o,NI,Q3o,H3o,U3o,jb,Nte,J3o,Y3o,qI,K3o,Z3o,eyo,Nb,qte,oyo,ryo,GI,tyo,ayo,nyo,qb,Gte,syo,lyo,OI,iyo,dyo,cyo,Gb,Ote,fyo,myo,XI,gyo,hyo,pyo,Ob,Xte,_yo,uyo,VI,byo,vyo,Tyo,Xb,Vte,Fyo,Cyo,zI,Myo,Eyo,yyo,Vb,zte,wyo,Ayo,WI,Lyo,Byo,xyo,zb,Wte,kyo,Ryo,QI,Syo,Pyo,$yo,Wb,Qte,Iyo,Dyo,HI,jyo,Nyo,qyo,Qb,Hte,Gyo,Oyo,UI,Xyo,Vyo,zyo,Hb,Ute,Wyo,Qyo,JI,Hyo,Uyo,Jyo,Ub,Jte,Yyo,Kyo,YI,Zyo,ewo,owo,Jb,Yte,rwo,two,KI,awo,nwo,swo,Yb,Kte,lwo,iwo,ZI,dwo,cwo,fwo,Kb,mwo,Zte,gwo,hwo,eae,pwo,_wo,oae,uwo,bwo,J3,K7e,dd,Zb,rae,Y3,vwo,tae,Two,Z7e,er,K3,Fwo,cd,Cwo,aae,Mwo,Ewo,nae,ywo,wwo,Awo,Z3,Lwo,sae,Bwo,xwo,kwo,Qr,ey,Rwo,lae,Swo,Pwo,fd,$wo,iae,Iwo,Dwo,dae,jwo,Nwo,qwo,cae,Gwo,Owo,oy,Xwo,Ne,ry,Vwo,fae,zwo,Wwo,Wa,Qwo,mae,Hwo,Uwo,gae,Jwo,Ywo,hae,Kwo,Zwo,e6o,na,e5,pae,o6o,r6o,eD,t6o,a6o,n6o,o5,_ae,s6o,l6o,oD,i6o,d6o,c6o,r5,uae,f6o,m6o,rD,g6o,h6o,p6o,t5,bae,_6o,u6o,tD,b6o,v6o,T6o,a5,vae,F6o,C6o,aD,M6o,E6o,y6o,n5,w6o,Tae,A6o,L6o,Fae,B6o,x6o,Cae,k6o,R6o,ty,eBe,md,s5,Mae,ay,S6o,Eae,P6o,oBe,or,ny,$6o,gd,I6o,yae,D6o,j6o,wae,N6o,q6o,G6o,sy,O6o,Aae,X6o,V6o,z6o,Hr,ly,W6o,Lae,Q6o,H6o,hd,U6o,Bae,J6o,Y6o,xae,K6o,Z6o,eAo,kae,oAo,rAo,iy,tAo,qe,dy,aAo,Rae,nAo,sAo,Qa,lAo,Sae,iAo,dAo,Pae,cAo,fAo,$ae,mAo,gAo,hAo,N,l5,Iae,pAo,_Ao,nD,uAo,bAo,vAo,i5,Dae,TAo,FAo,sD,CAo,MAo,EAo,d5,jae,yAo,wAo,lD,AAo,LAo,BAo,c5,Nae,xAo,kAo,iD,RAo,SAo,PAo,f5,qae,$Ao,IAo,dD,DAo,jAo,NAo,m5,Gae,qAo,GAo,cD,OAo,XAo,VAo,g5,Oae,zAo,WAo,fD,QAo,HAo,UAo,h5,Xae,JAo,YAo,mD,KAo,ZAo,e0o,p5,Vae,o0o,r0o,gD,t0o,a0o,n0o,_5,zae,s0o,l0o,hD,i0o,d0o,c0o,u5,Wae,f0o,m0o,pD,g0o,h0o,p0o,b5,Qae,_0o,u0o,_D,b0o,v0o,T0o,v5,Hae,F0o,C0o,uD,M0o,E0o,y0o,T5,Uae,w0o,A0o,bD,L0o,B0o,x0o,F5,Jae,k0o,R0o,vD,S0o,P0o,$0o,C5,Yae,I0o,D0o,TD,j0o,N0o,q0o,M5,Kae,G0o,O0o,FD,X0o,V0o,z0o,E5,Zae,W0o,Q0o,CD,H0o,U0o,J0o,y5,ene,Y0o,K0o,MD,Z0o,eLo,oLo,w5,one,rLo,tLo,ED,aLo,nLo,sLo,A5,rne,lLo,iLo,yD,dLo,cLo,fLo,L5,tne,mLo,gLo,wD,hLo,pLo,_Lo,B5,ane,uLo,bLo,AD,vLo,TLo,FLo,x5,nne,CLo,MLo,LD,ELo,yLo,wLo,k5,sne,ALo,LLo,BD,BLo,xLo,kLo,R5,lne,RLo,SLo,xD,PLo,$Lo,ILo,S5,ine,DLo,jLo,kD,NLo,qLo,GLo,P5,dne,OLo,XLo,RD,VLo,zLo,WLo,$5,cne,QLo,HLo,SD,ULo,JLo,YLo,I5,fne,KLo,ZLo,PD,e8o,o8o,r8o,D5,mne,t8o,a8o,$D,n8o,s8o,l8o,j5,gne,i8o,d8o,ID,c8o,f8o,m8o,N5,hne,g8o,h8o,DD,p8o,_8o,u8o,q5,b8o,pne,v8o,T8o,_ne,F8o,C8o,une,M8o,E8o,cy,rBe,pd,G5,bne,fy,y8o,vne,w8o,tBe,rr,my,A8o,_d,L8o,Tne,B8o,x8o,Fne,k8o,R8o,S8o,gy,P8o,Cne,$8o,I8o,D8o,Ur,hy,j8o,Mne,N8o,q8o,ud,G8o,Ene,O8o,X8o,yne,V8o,z8o,W8o,wne,Q8o,H8o,py,U8o,Ge,_y,J8o,Ane,Y8o,K8o,Ha,Z8o,Lne,e7o,o7o,Bne,r7o,t7o,xne,a7o,n7o,s7o,R,O5,kne,l7o,i7o,jD,d7o,c7o,f7o,X5,Rne,m7o,g7o,ND,h7o,p7o,_7o,V5,Sne,u7o,b7o,qD,v7o,T7o,F7o,z5,Pne,C7o,M7o,GD,E7o,y7o,w7o,W5,$ne,A7o,L7o,OD,B7o,x7o,k7o,Q5,Ine,R7o,S7o,XD,P7o,$7o,I7o,H5,Dne,D7o,j7o,VD,N7o,q7o,G7o,U5,jne,O7o,X7o,zD,V7o,z7o,W7o,J5,Nne,Q7o,H7o,WD,U7o,J7o,Y7o,Y5,qne,K7o,Z7o,QD,eBo,oBo,rBo,K5,Gne,tBo,aBo,HD,nBo,sBo,lBo,Z5,One,iBo,dBo,UD,cBo,fBo,mBo,e2,Xne,gBo,hBo,JD,pBo,_Bo,uBo,o2,Vne,bBo,vBo,YD,TBo,FBo,CBo,r2,zne,MBo,EBo,KD,yBo,wBo,ABo,t2,Wne,LBo,BBo,ZD,xBo,kBo,RBo,a2,Qne,SBo,PBo,ej,$Bo,IBo,DBo,n2,Hne,jBo,NBo,oj,qBo,GBo,OBo,s2,Une,XBo,VBo,rj,zBo,WBo,QBo,l2,Jne,HBo,UBo,tj,JBo,YBo,KBo,i2,Yne,ZBo,exo,aj,oxo,rxo,txo,d2,Kne,axo,nxo,nj,sxo,lxo,ixo,c2,Zne,dxo,cxo,sj,fxo,mxo,gxo,f2,ese,hxo,pxo,lj,_xo,uxo,bxo,m2,ose,vxo,Txo,ij,Fxo,Cxo,Mxo,g2,rse,Exo,yxo,dj,wxo,Axo,Lxo,h2,tse,Bxo,xxo,cj,kxo,Rxo,Sxo,p2,ase,Pxo,$xo,fj,Ixo,Dxo,jxo,_2,nse,Nxo,qxo,mj,Gxo,Oxo,Xxo,u2,sse,Vxo,zxo,gj,Wxo,Qxo,Hxo,b2,lse,Uxo,Jxo,hj,Yxo,Kxo,Zxo,v2,ise,eko,oko,pj,rko,tko,ako,T2,dse,nko,sko,_j,lko,iko,dko,F2,cse,cko,fko,uj,mko,gko,hko,C2,fse,pko,_ko,bj,uko,bko,vko,M2,mse,Tko,Fko,vj,Cko,Mko,Eko,E2,gse,yko,wko,Tj,Ako,Lko,Bko,y2,hse,xko,kko,Fj,Rko,Sko,Pko,w2,pse,$ko,Iko,Cj,Dko,jko,Nko,A2,qko,_se,Gko,Oko,use,Xko,Vko,bse,zko,Wko,uy,aBe,bd,L2,vse,by,Qko,Tse,Hko,nBe,tr,vy,Uko,vd,Jko,Fse,Yko,Kko,Cse,Zko,eRo,oRo,Ty,rRo,Mse,tRo,aRo,nRo,Jr,Fy,sRo,Ese,lRo,iRo,Td,dRo,yse,cRo,fRo,wse,mRo,gRo,hRo,Ase,pRo,_Ro,Cy,uRo,Oe,My,bRo,Lse,vRo,TRo,Ua,FRo,Bse,CRo,MRo,xse,ERo,yRo,kse,wRo,ARo,LRo,Rse,B2,Sse,BRo,xRo,Mj,kRo,RRo,SRo,x2,PRo,Pse,$Ro,IRo,$se,DRo,jRo,Ise,NRo,qRo,Ey,sBe,Fd,k2,Dse,yy,GRo,jse,ORo,lBe,ar,wy,XRo,Cd,VRo,Nse,zRo,WRo,qse,QRo,HRo,URo,Ay,JRo,Gse,YRo,KRo,ZRo,Yr,Ly,eSo,Ose,oSo,rSo,Md,tSo,Xse,aSo,nSo,Vse,sSo,lSo,iSo,zse,dSo,cSo,By,fSo,Xe,xy,mSo,Wse,gSo,hSo,Ja,pSo,Qse,_So,uSo,Hse,bSo,vSo,Use,TSo,FSo,CSo,be,R2,Jse,MSo,ESo,Ej,ySo,wSo,ASo,S2,Yse,LSo,BSo,yj,xSo,kSo,RSo,Ps,Kse,SSo,PSo,wj,$So,ISo,Aj,DSo,jSo,NSo,P2,Zse,qSo,GSo,Lj,OSo,XSo,VSo,la,ele,zSo,WSo,Bj,QSo,HSo,xj,USo,JSo,kj,YSo,KSo,ZSo,$2,ole,ePo,oPo,Rj,rPo,tPo,aPo,I2,rle,nPo,sPo,Sj,lPo,iPo,dPo,D2,tle,cPo,fPo,Pj,mPo,gPo,hPo,j2,ale,pPo,_Po,$j,uPo,bPo,vPo,N2,TPo,nle,FPo,CPo,sle,MPo,EPo,lle,yPo,wPo,ky,iBe,Ed,q2,ile,Ry,APo,dle,LPo,dBe,nr,Sy,BPo,yd,xPo,cle,kPo,RPo,fle,SPo,PPo,$Po,Py,IPo,mle,DPo,jPo,NPo,Kr,$y,qPo,gle,GPo,OPo,wd,XPo,hle,VPo,zPo,ple,WPo,QPo,HPo,_le,UPo,JPo,Iy,YPo,Ve,Dy,KPo,ule,ZPo,e$o,Ya,o$o,ble,r$o,t$o,vle,a$o,n$o,Tle,s$o,l$o,i$o,Fle,G2,Cle,d$o,c$o,Ij,f$o,m$o,g$o,O2,h$o,Mle,p$o,_$o,Ele,u$o,b$o,yle,v$o,T$o,jy,cBe,Ad,X2,wle,Ny,F$o,Ale,C$o,fBe,sr,qy,M$o,Ld,E$o,Lle,y$o,w$o,Ble,A$o,L$o,B$o,Gy,x$o,xle,k$o,R$o,S$o,Zr,Oy,P$o,kle,$$o,I$o,Bd,D$o,Rle,j$o,N$o,Sle,q$o,G$o,O$o,Ple,X$o,V$o,Xy,z$o,ze,Vy,W$o,$le,Q$o,H$o,Ka,U$o,Ile,J$o,Y$o,Dle,K$o,Z$o,jle,eIo,oIo,rIo,Ae,V2,Nle,tIo,aIo,Dj,nIo,sIo,lIo,z2,qle,iIo,dIo,jj,cIo,fIo,mIo,W2,Gle,gIo,hIo,Nj,pIo,_Io,uIo,Q2,Ole,bIo,vIo,qj,TIo,FIo,CIo,H2,Xle,MIo,EIo,Gj,yIo,wIo,AIo,U2,Vle,LIo,BIo,Oj,xIo,kIo,RIo,J2,zle,SIo,PIo,Xj,$Io,IIo,DIo,Y2,Wle,jIo,NIo,Vj,qIo,GIo,OIo,K2,XIo,Qle,VIo,zIo,Hle,WIo,QIo,Ule,HIo,UIo,zy,mBe,xd,Z2,Jle,Wy,JIo,Yle,YIo,gBe,lr,Qy,KIo,kd,ZIo,Kle,eDo,oDo,Zle,rDo,tDo,aDo,Hy,nDo,eie,sDo,lDo,iDo,et,Uy,dDo,oie,cDo,fDo,Rd,mDo,rie,gDo,hDo,tie,pDo,_Do,uDo,aie,bDo,vDo,Jy,TDo,We,Yy,FDo,nie,CDo,MDo,Za,EDo,sie,yDo,wDo,lie,ADo,LDo,iie,BDo,xDo,kDo,en,ev,die,RDo,SDo,zj,PDo,$Do,IDo,ov,cie,DDo,jDo,Wj,NDo,qDo,GDo,rv,fie,ODo,XDo,Qj,VDo,zDo,WDo,tv,mie,QDo,HDo,Hj,UDo,JDo,YDo,av,KDo,gie,ZDo,ejo,hie,ojo,rjo,pie,tjo,ajo,Ky,hBe,Sd,nv,_ie,Zy,njo,uie,sjo,pBe,ir,ew,ljo,Pd,ijo,bie,djo,cjo,vie,fjo,mjo,gjo,ow,hjo,Tie,pjo,_jo,ujo,ot,rw,bjo,Fie,vjo,Tjo,$d,Fjo,Cie,Cjo,Mjo,Mie,Ejo,yjo,wjo,Eie,Ajo,Ljo,tw,Bjo,Qe,aw,xjo,yie,kjo,Rjo,on,Sjo,wie,Pjo,$jo,Aie,Ijo,Djo,Lie,jjo,Njo,qjo,Le,sv,Bie,Gjo,Ojo,Uj,Xjo,Vjo,zjo,lv,xie,Wjo,Qjo,Jj,Hjo,Ujo,Jjo,iv,kie,Yjo,Kjo,Yj,Zjo,eNo,oNo,dv,Rie,rNo,tNo,Kj,aNo,nNo,sNo,cv,Sie,lNo,iNo,Zj,dNo,cNo,fNo,fv,Pie,mNo,gNo,eN,hNo,pNo,_No,mv,$ie,uNo,bNo,oN,vNo,TNo,FNo,gv,Iie,CNo,MNo,rN,ENo,yNo,wNo,hv,ANo,Die,LNo,BNo,jie,xNo,kNo,Nie,RNo,SNo,nw,_Be,Id,pv,qie,sw,PNo,Gie,$No,uBe,dr,lw,INo,Dd,DNo,Oie,jNo,NNo,Xie,qNo,GNo,ONo,iw,XNo,Vie,VNo,zNo,WNo,rt,dw,QNo,zie,HNo,UNo,jd,JNo,Wie,YNo,KNo,Qie,ZNo,eqo,oqo,Hie,rqo,tqo,cw,aqo,He,fw,nqo,Uie,sqo,lqo,rn,iqo,Jie,dqo,cqo,Yie,fqo,mqo,Kie,gqo,hqo,pqo,mw,_v,Zie,_qo,uqo,tN,bqo,vqo,Tqo,uv,ede,Fqo,Cqo,aN,Mqo,Eqo,yqo,bv,wqo,ode,Aqo,Lqo,rde,Bqo,xqo,tde,kqo,Rqo,gw,bBe,Nd,vv,ade,hw,Sqo,nde,Pqo,vBe,cr,pw,$qo,qd,Iqo,sde,Dqo,jqo,lde,Nqo,qqo,Gqo,_w,Oqo,ide,Xqo,Vqo,zqo,tt,uw,Wqo,dde,Qqo,Hqo,Gd,Uqo,cde,Jqo,Yqo,fde,Kqo,Zqo,eGo,mde,oGo,rGo,bw,tGo,Ue,vw,aGo,gde,nGo,sGo,tn,lGo,hde,iGo,dGo,pde,cGo,fGo,_de,mGo,gGo,hGo,an,Tv,ude,pGo,_Go,nN,uGo,bGo,vGo,Fv,bde,TGo,FGo,sN,CGo,MGo,EGo,Cv,vde,yGo,wGo,lN,AGo,LGo,BGo,Mv,Tde,xGo,kGo,iN,RGo,SGo,PGo,Ev,$Go,Fde,IGo,DGo,Cde,jGo,NGo,Mde,qGo,GGo,Tw,TBe,Od,yv,Ede,Fw,OGo,yde,XGo,FBe,fr,Cw,VGo,Xd,zGo,wde,WGo,QGo,Ade,HGo,UGo,JGo,Mw,YGo,Lde,KGo,ZGo,eOo,at,Ew,oOo,Bde,rOo,tOo,Vd,aOo,xde,nOo,sOo,kde,lOo,iOo,dOo,Rde,cOo,fOo,yw,mOo,Je,ww,gOo,Sde,hOo,pOo,nn,_Oo,Pde,uOo,bOo,$de,vOo,TOo,Ide,FOo,COo,MOo,zd,wv,Dde,EOo,yOo,dN,wOo,AOo,LOo,Av,jde,BOo,xOo,cN,kOo,ROo,SOo,Lv,Nde,POo,$Oo,fN,IOo,DOo,jOo,Bv,NOo,qde,qOo,GOo,Gde,OOo,XOo,Ode,VOo,zOo,Aw,CBe,Wd,xv,Xde,Lw,WOo,Vde,QOo,MBe,mr,Bw,HOo,Qd,UOo,zde,JOo,YOo,Wde,KOo,ZOo,eXo,xw,oXo,Qde,rXo,tXo,aXo,nt,kw,nXo,Hde,sXo,lXo,Hd,iXo,Ude,dXo,cXo,Jde,fXo,mXo,gXo,Yde,hXo,pXo,Rw,_Xo,Ye,Sw,uXo,Kde,bXo,vXo,sn,TXo,Zde,FXo,CXo,ece,MXo,EXo,oce,yXo,wXo,AXo,rce,kv,tce,LXo,BXo,mN,xXo,kXo,RXo,Rv,SXo,ace,PXo,$Xo,nce,IXo,DXo,sce,jXo,NXo,Pw,EBe,Ud,Sv,lce,$w,qXo,ice,GXo,yBe,gr,Iw,OXo,Jd,XXo,dce,VXo,zXo,cce,WXo,QXo,HXo,Dw,UXo,fce,JXo,YXo,KXo,st,jw,ZXo,mce,eVo,oVo,Yd,rVo,gce,tVo,aVo,hce,nVo,sVo,lVo,pce,iVo,dVo,Nw,cVo,Ke,qw,fVo,_ce,mVo,gVo,ln,hVo,uce,pVo,_Vo,bce,uVo,bVo,vce,vVo,TVo,FVo,Tce,Pv,Fce,CVo,MVo,gN,EVo,yVo,wVo,$v,AVo,Cce,LVo,BVo,Mce,xVo,kVo,Ece,RVo,SVo,Gw,wBe,Kd,Iv,yce,Ow,PVo,wce,$Vo,ABe,hr,Xw,IVo,Zd,DVo,Ace,jVo,NVo,Lce,qVo,GVo,OVo,Vw,XVo,Bce,VVo,zVo,WVo,lt,zw,QVo,xce,HVo,UVo,ec,JVo,kce,YVo,KVo,Rce,ZVo,ezo,ozo,Sce,rzo,tzo,Ww,azo,Ze,Qw,nzo,Pce,szo,lzo,dn,izo,$ce,dzo,czo,Ice,fzo,mzo,Dce,gzo,hzo,pzo,Hw,Dv,jce,_zo,uzo,hN,bzo,vzo,Tzo,jv,Nce,Fzo,Czo,pN,Mzo,Ezo,yzo,Nv,wzo,qce,Azo,Lzo,Gce,Bzo,xzo,Oce,kzo,Rzo,Uw,LBe,oc,qv,Xce,Jw,Szo,Vce,Pzo,BBe,pr,Yw,$zo,rc,Izo,zce,Dzo,jzo,Wce,Nzo,qzo,Gzo,Kw,Ozo,Qce,Xzo,Vzo,zzo,it,Zw,Wzo,Hce,Qzo,Hzo,tc,Uzo,Uce,Jzo,Yzo,Jce,Kzo,Zzo,eWo,Yce,oWo,rWo,e6,tWo,go,o6,aWo,Kce,nWo,sWo,cn,lWo,Zce,iWo,dWo,efe,cWo,fWo,ofe,mWo,gWo,hWo,B,Gv,rfe,pWo,_Wo,_N,uWo,bWo,vWo,Ov,tfe,TWo,FWo,uN,CWo,MWo,EWo,Xv,afe,yWo,wWo,bN,AWo,LWo,BWo,Vv,nfe,xWo,kWo,vN,RWo,SWo,PWo,zv,sfe,$Wo,IWo,TN,DWo,jWo,NWo,Wv,lfe,qWo,GWo,FN,OWo,XWo,VWo,Qv,ife,zWo,WWo,CN,QWo,HWo,UWo,Hv,dfe,JWo,YWo,MN,KWo,ZWo,eQo,Uv,cfe,oQo,rQo,EN,tQo,aQo,nQo,Jv,ffe,sQo,lQo,yN,iQo,dQo,cQo,Yv,mfe,fQo,mQo,wN,gQo,hQo,pQo,Kv,gfe,_Qo,uQo,AN,bQo,vQo,TQo,Zv,hfe,FQo,CQo,LN,MQo,EQo,yQo,eT,pfe,wQo,AQo,BN,LQo,BQo,xQo,oT,_fe,kQo,RQo,xN,SQo,PQo,$Qo,rT,ufe,IQo,DQo,kN,jQo,NQo,qQo,$s,bfe,GQo,OQo,RN,XQo,VQo,SN,zQo,WQo,QQo,tT,vfe,HQo,UQo,PN,JQo,YQo,KQo,aT,Tfe,ZQo,eHo,$N,oHo,rHo,tHo,nT,Ffe,aHo,nHo,IN,sHo,lHo,iHo,sT,Cfe,dHo,cHo,DN,fHo,mHo,gHo,lT,Mfe,hHo,pHo,jN,_Ho,uHo,bHo,iT,Efe,vHo,THo,NN,FHo,CHo,MHo,dT,yfe,EHo,yHo,qN,wHo,AHo,LHo,cT,wfe,BHo,xHo,GN,kHo,RHo,SHo,fT,Afe,PHo,$Ho,ON,IHo,DHo,jHo,mT,Lfe,NHo,qHo,XN,GHo,OHo,XHo,gT,Bfe,VHo,zHo,VN,WHo,QHo,HHo,hT,xfe,UHo,JHo,zN,YHo,KHo,ZHo,pT,kfe,eUo,oUo,WN,rUo,tUo,aUo,_T,Rfe,nUo,sUo,QN,lUo,iUo,dUo,uT,Sfe,cUo,fUo,HN,mUo,gUo,hUo,bT,Pfe,pUo,_Uo,UN,uUo,bUo,vUo,vT,$fe,TUo,FUo,JN,CUo,MUo,EUo,TT,Ife,yUo,wUo,YN,AUo,LUo,BUo,FT,Dfe,xUo,kUo,KN,RUo,SUo,PUo,CT,jfe,$Uo,IUo,ZN,DUo,jUo,NUo,MT,Nfe,qUo,GUo,eq,OUo,XUo,VUo,ET,qfe,zUo,WUo,oq,QUo,HUo,UUo,yT,Gfe,JUo,YUo,rq,KUo,ZUo,eJo,wT,Ofe,oJo,rJo,tq,tJo,aJo,nJo,AT,Xfe,sJo,lJo,aq,iJo,dJo,cJo,Vfe,fJo,mJo,r6,xBe,ac,LT,zfe,t6,gJo,Wfe,hJo,kBe,_r,a6,pJo,nc,_Jo,Qfe,uJo,bJo,Hfe,vJo,TJo,FJo,n6,CJo,Ufe,MJo,EJo,yJo,dt,s6,wJo,Jfe,AJo,LJo,sc,BJo,Yfe,xJo,kJo,Kfe,RJo,SJo,PJo,Zfe,$Jo,IJo,l6,DJo,ho,i6,jJo,eme,NJo,qJo,fn,GJo,ome,OJo,XJo,rme,VJo,zJo,tme,WJo,QJo,HJo,H,BT,ame,UJo,JJo,nq,YJo,KJo,ZJo,xT,nme,eYo,oYo,sq,rYo,tYo,aYo,kT,sme,nYo,sYo,lq,lYo,iYo,dYo,RT,lme,cYo,fYo,iq,mYo,gYo,hYo,ST,ime,pYo,_Yo,dq,uYo,bYo,vYo,PT,dme,TYo,FYo,cq,CYo,MYo,EYo,$T,cme,yYo,wYo,fq,AYo,LYo,BYo,IT,fme,xYo,kYo,mq,RYo,SYo,PYo,DT,mme,$Yo,IYo,gq,DYo,jYo,NYo,jT,gme,qYo,GYo,hq,OYo,XYo,VYo,NT,hme,zYo,WYo,pq,QYo,HYo,UYo,qT,pme,JYo,YYo,_q,KYo,ZYo,eKo,GT,_me,oKo,rKo,uq,tKo,aKo,nKo,OT,ume,sKo,lKo,bq,iKo,dKo,cKo,XT,bme,fKo,mKo,vq,gKo,hKo,pKo,VT,vme,_Ko,uKo,Tq,bKo,vKo,TKo,zT,Tme,FKo,CKo,Fq,MKo,EKo,yKo,WT,Fme,wKo,AKo,Cq,LKo,BKo,xKo,QT,Cme,kKo,RKo,Mq,SKo,PKo,$Ko,HT,Mme,IKo,DKo,Eq,jKo,NKo,qKo,UT,Eme,GKo,OKo,yq,XKo,VKo,zKo,JT,yme,WKo,QKo,wq,HKo,UKo,JKo,wme,YKo,KKo,d6,RBe,lc,YT,Ame,c6,ZKo,Lme,eZo,SBe,ur,f6,oZo,ic,rZo,Bme,tZo,aZo,xme,nZo,sZo,lZo,m6,iZo,kme,dZo,cZo,fZo,ct,g6,mZo,Rme,gZo,hZo,dc,pZo,Sme,_Zo,uZo,Pme,bZo,vZo,TZo,$me,FZo,CZo,h6,MZo,po,p6,EZo,Ime,yZo,wZo,mn,AZo,Dme,LZo,BZo,jme,xZo,kZo,Nme,RZo,SZo,PZo,he,KT,qme,$Zo,IZo,Aq,DZo,jZo,NZo,ZT,Gme,qZo,GZo,Lq,OZo,XZo,VZo,eF,Ome,zZo,WZo,Bq,QZo,HZo,UZo,oF,Xme,JZo,YZo,xq,KZo,ZZo,eer,rF,Vme,oer,rer,kq,ter,aer,ner,tF,zme,ser,ler,Rq,ier,der,cer,aF,Wme,fer,mer,Sq,ger,her,per,nF,Qme,_er,uer,Pq,ber,ver,Ter,sF,Hme,Fer,Cer,$q,Mer,Eer,yer,lF,Ume,wer,Aer,Iq,Ler,Ber,xer,Jme,ker,Rer,_6,PBe,cc,iF,Yme,u6,Ser,Kme,Per,$Be,br,b6,$er,fc,Ier,Zme,Der,jer,ege,Ner,qer,Ger,v6,Oer,oge,Xer,Ver,zer,ft,T6,Wer,rge,Qer,Her,mc,Uer,tge,Jer,Yer,age,Ker,Zer,eor,nge,oor,ror,F6,tor,_o,C6,aor,sge,nor,sor,gn,lor,lge,ior,dor,ige,cor,mor,dge,gor,hor,por,M6,dF,cge,_or,uor,Dq,bor,vor,Tor,cF,fge,For,Cor,jq,Mor,Eor,yor,mge,wor,Aor,E6,IBe,gc,fF,gge,y6,Lor,hge,Bor,DBe,vr,w6,xor,hc,kor,pge,Ror,Sor,_ge,Por,$or,Ior,A6,Dor,uge,jor,Nor,qor,mt,L6,Gor,bge,Oor,Xor,pc,Vor,vge,zor,Wor,Tge,Qor,Hor,Uor,Fge,Jor,Yor,B6,Kor,uo,x6,Zor,Cge,err,orr,hn,rrr,Mge,trr,arr,Ege,nrr,srr,yge,lrr,irr,drr,Y,mF,wge,crr,frr,Nq,mrr,grr,hrr,gF,Age,prr,_rr,qq,urr,brr,vrr,hF,Lge,Trr,Frr,Gq,Crr,Mrr,Err,pF,Bge,yrr,wrr,Oq,Arr,Lrr,Brr,_F,xge,xrr,krr,Xq,Rrr,Srr,Prr,uF,kge,$rr,Irr,Vq,Drr,jrr,Nrr,bF,Rge,qrr,Grr,zq,Orr,Xrr,Vrr,vF,Sge,zrr,Wrr,Wq,Qrr,Hrr,Urr,TF,Pge,Jrr,Yrr,Qq,Krr,Zrr,etr,FF,$ge,otr,rtr,Hq,ttr,atr,ntr,CF,Ige,str,ltr,Uq,itr,dtr,ctr,MF,Dge,ftr,mtr,Jq,gtr,htr,ptr,EF,jge,_tr,utr,Yq,btr,vtr,Ttr,yF,Nge,Ftr,Ctr,Kq,Mtr,Etr,ytr,wF,qge,wtr,Atr,Zq,Ltr,Btr,xtr,AF,Gge,ktr,Rtr,eG,Str,Ptr,$tr,LF,Oge,Itr,Dtr,oG,jtr,Ntr,qtr,BF,Xge,Gtr,Otr,rG,Xtr,Vtr,ztr,xF,Vge,Wtr,Qtr,tG,Htr,Utr,Jtr,kF,zge,Ytr,Ktr,aG,Ztr,ear,oar,Wge,rar,tar,k6,jBe,_c,RF,Qge,R6,aar,Hge,nar,NBe,Tr,S6,sar,uc,lar,Uge,iar,dar,Jge,car,far,mar,P6,gar,Yge,har,par,_ar,gt,$6,uar,Kge,bar,Tar,bc,Far,Zge,Car,Mar,ehe,Ear,yar,war,ohe,Aar,Lar,I6,Bar,bo,D6,xar,rhe,kar,Rar,pn,Sar,the,Par,$ar,ahe,Iar,Dar,nhe,jar,Nar,qar,pe,SF,she,Gar,Oar,nG,Xar,Var,zar,PF,lhe,War,Qar,sG,Har,Uar,Jar,$F,ihe,Yar,Kar,lG,Zar,enr,onr,IF,dhe,rnr,tnr,iG,anr,nnr,snr,DF,che,lnr,inr,dG,dnr,cnr,fnr,jF,fhe,mnr,gnr,cG,hnr,pnr,_nr,NF,mhe,unr,bnr,fG,vnr,Tnr,Fnr,qF,ghe,Cnr,Mnr,mG,Enr,ynr,wnr,GF,hhe,Anr,Lnr,gG,Bnr,xnr,knr,OF,phe,Rnr,Snr,hG,Pnr,$nr,Inr,_he,Dnr,jnr,j6,qBe,vc,XF,uhe,N6,Nnr,bhe,qnr,GBe,Fr,q6,Gnr,Tc,Onr,vhe,Xnr,Vnr,The,znr,Wnr,Qnr,G6,Hnr,Fhe,Unr,Jnr,Ynr,ht,O6,Knr,Che,Znr,esr,Fc,osr,Mhe,rsr,tsr,Ehe,asr,nsr,ssr,yhe,lsr,isr,X6,dsr,vo,V6,csr,whe,fsr,msr,_n,gsr,Ahe,hsr,psr,Lhe,_sr,usr,Bhe,bsr,vsr,Tsr,X,VF,xhe,Fsr,Csr,pG,Msr,Esr,ysr,zF,khe,wsr,Asr,_G,Lsr,Bsr,xsr,WF,Rhe,ksr,Rsr,uG,Ssr,Psr,$sr,QF,She,Isr,Dsr,bG,jsr,Nsr,qsr,HF,Phe,Gsr,Osr,vG,Xsr,Vsr,zsr,UF,$he,Wsr,Qsr,TG,Hsr,Usr,Jsr,JF,Ihe,Ysr,Ksr,FG,Zsr,elr,olr,YF,Dhe,rlr,tlr,CG,alr,nlr,slr,KF,jhe,llr,ilr,MG,dlr,clr,flr,ZF,Nhe,mlr,glr,EG,hlr,plr,_lr,e9,qhe,ulr,blr,yG,vlr,Tlr,Flr,o9,Ghe,Clr,Mlr,wG,Elr,ylr,wlr,r9,Ohe,Alr,Llr,AG,Blr,xlr,klr,t9,Xhe,Rlr,Slr,LG,Plr,$lr,Ilr,a9,Vhe,Dlr,jlr,BG,Nlr,qlr,Glr,n9,zhe,Olr,Xlr,xG,Vlr,zlr,Wlr,s9,Whe,Qlr,Hlr,kG,Ulr,Jlr,Ylr,l9,Qhe,Klr,Zlr,RG,eir,oir,rir,i9,Hhe,tir,air,SG,nir,sir,lir,d9,Uhe,iir,dir,PG,cir,fir,mir,c9,Jhe,gir,hir,$G,pir,_ir,uir,f9,Yhe,bir,vir,IG,Tir,Fir,Cir,m9,Khe,Mir,Eir,DG,yir,wir,Air,g9,Zhe,Lir,Bir,jG,xir,kir,Rir,h9,epe,Sir,Pir,NG,$ir,Iir,Dir,ope,jir,Nir,z6,OBe,Cc,p9,rpe,W6,qir,tpe,Gir,XBe,Cr,Q6,Oir,Mc,Xir,ape,Vir,zir,npe,Wir,Qir,Hir,H6,Uir,spe,Jir,Yir,Kir,pt,U6,Zir,lpe,edr,odr,Ec,rdr,ipe,tdr,adr,dpe,ndr,sdr,ldr,cpe,idr,ddr,J6,cdr,To,Y6,fdr,fpe,mdr,gdr,un,hdr,mpe,pdr,_dr,gpe,udr,bdr,hpe,vdr,Tdr,Fdr,te,_9,ppe,Cdr,Mdr,qG,Edr,ydr,wdr,u9,_pe,Adr,Ldr,GG,Bdr,xdr,kdr,b9,upe,Rdr,Sdr,OG,Pdr,$dr,Idr,v9,bpe,Ddr,jdr,XG,Ndr,qdr,Gdr,T9,vpe,Odr,Xdr,VG,Vdr,zdr,Wdr,F9,Tpe,Qdr,Hdr,zG,Udr,Jdr,Ydr,C9,Fpe,Kdr,Zdr,WG,ecr,ocr,rcr,M9,Cpe,tcr,acr,QG,ncr,scr,lcr,E9,Mpe,icr,dcr,HG,ccr,fcr,mcr,y9,Epe,gcr,hcr,UG,pcr,_cr,ucr,w9,ype,bcr,vcr,JG,Tcr,Fcr,Ccr,A9,wpe,Mcr,Ecr,YG,ycr,wcr,Acr,L9,Ape,Lcr,Bcr,KG,xcr,kcr,Rcr,B9,Lpe,Scr,Pcr,ZG,$cr,Icr,Dcr,x9,Bpe,jcr,Ncr,eO,qcr,Gcr,Ocr,k9,xpe,Xcr,Vcr,oO,zcr,Wcr,Qcr,R9,kpe,Hcr,Ucr,rO,Jcr,Ycr,Kcr,Rpe,Zcr,efr,K6,VBe,yc,S9,Spe,Z6,ofr,Ppe,rfr,zBe,Mr,eA,tfr,wc,afr,$pe,nfr,sfr,Ipe,lfr,ifr,dfr,oA,cfr,Dpe,ffr,mfr,gfr,_t,rA,hfr,jpe,pfr,_fr,Ac,ufr,Npe,bfr,vfr,qpe,Tfr,Ffr,Cfr,Gpe,Mfr,Efr,tA,yfr,Fo,aA,wfr,Ope,Afr,Lfr,bn,Bfr,Xpe,xfr,kfr,Vpe,Rfr,Sfr,zpe,Pfr,$fr,Ifr,Wpe,P9,Qpe,Dfr,jfr,tO,Nfr,qfr,Gfr,Hpe,Ofr,Xfr,nA,WBe,Lc,$9,Upe,sA,Vfr,Jpe,zfr,QBe,Er,lA,Wfr,Bc,Qfr,Ype,Hfr,Ufr,Kpe,Jfr,Yfr,Kfr,iA,Zfr,Zpe,emr,omr,rmr,ut,dA,tmr,e_e,amr,nmr,xc,smr,o_e,lmr,imr,r_e,dmr,cmr,fmr,t_e,mmr,gmr,cA,hmr,Co,fA,pmr,a_e,_mr,umr,vn,bmr,n_e,vmr,Tmr,s_e,Fmr,Cmr,l_e,Mmr,Emr,ymr,K,I9,i_e,wmr,Amr,aO,Lmr,Bmr,xmr,D9,d_e,kmr,Rmr,nO,Smr,Pmr,$mr,j9,c_e,Imr,Dmr,sO,jmr,Nmr,qmr,N9,f_e,Gmr,Omr,lO,Xmr,Vmr,zmr,q9,m_e,Wmr,Qmr,iO,Hmr,Umr,Jmr,G9,g_e,Ymr,Kmr,dO,Zmr,egr,ogr,O9,h_e,rgr,tgr,cO,agr,ngr,sgr,X9,p_e,lgr,igr,fO,dgr,cgr,fgr,V9,__e,mgr,ggr,mO,hgr,pgr,_gr,z9,u_e,ugr,bgr,gO,vgr,Tgr,Fgr,W9,b_e,Cgr,Mgr,hO,Egr,ygr,wgr,Q9,v_e,Agr,Lgr,pO,Bgr,xgr,kgr,H9,T_e,Rgr,Sgr,_O,Pgr,$gr,Igr,U9,F_e,Dgr,jgr,uO,Ngr,qgr,Ggr,J9,C_e,Ogr,Xgr,bO,Vgr,zgr,Wgr,Y9,M_e,Qgr,Hgr,vO,Ugr,Jgr,Ygr,K9,E_e,Kgr,Zgr,TO,ehr,ohr,rhr,Z9,y_e,thr,ahr,FO,nhr,shr,lhr,eC,w_e,ihr,dhr,CO,chr,fhr,mhr,oC,A_e,ghr,hhr,MO,phr,_hr,uhr,L_e,bhr,vhr,mA,HBe,kc,rC,B_e,gA,Thr,x_e,Fhr,UBe,yr,hA,Chr,Rc,Mhr,k_e,Ehr,yhr,R_e,whr,Ahr,Lhr,pA,Bhr,S_e,xhr,khr,Rhr,bt,_A,Shr,P_e,Phr,$hr,Sc,Ihr,$_e,Dhr,jhr,I_e,Nhr,qhr,Ghr,D_e,Ohr,Xhr,uA,Vhr,Mo,bA,zhr,j_e,Whr,Qhr,Tn,Hhr,N_e,Uhr,Jhr,q_e,Yhr,Khr,G_e,Zhr,epr,opr,Z,tC,O_e,rpr,tpr,EO,apr,npr,spr,aC,X_e,lpr,ipr,yO,dpr,cpr,fpr,nC,V_e,mpr,gpr,wO,hpr,ppr,_pr,sC,z_e,upr,bpr,AO,vpr,Tpr,Fpr,lC,W_e,Cpr,Mpr,LO,Epr,ypr,wpr,iC,Q_e,Apr,Lpr,BO,Bpr,xpr,kpr,dC,H_e,Rpr,Spr,xO,Ppr,$pr,Ipr,cC,U_e,Dpr,jpr,kO,Npr,qpr,Gpr,fC,J_e,Opr,Xpr,RO,Vpr,zpr,Wpr,mC,Y_e,Qpr,Hpr,SO,Upr,Jpr,Ypr,gC,K_e,Kpr,Zpr,PO,e_r,o_r,r_r,hC,Z_e,t_r,a_r,$O,n_r,s_r,l_r,pC,eue,i_r,d_r,IO,c_r,f_r,m_r,_C,oue,g_r,h_r,DO,p_r,__r,u_r,uC,rue,b_r,v_r,jO,T_r,F_r,C_r,bC,tue,M_r,E_r,NO,y_r,w_r,A_r,vC,aue,L_r,B_r,qO,x_r,k_r,R_r,TC,nue,S_r,P_r,GO,$_r,I_r,D_r,FC,sue,j_r,N_r,OO,q_r,G_r,O_r,lue,X_r,V_r,vA,JBe,Pc,CC,iue,TA,z_r,due,W_r,YBe,wr,FA,Q_r,$c,H_r,cue,U_r,J_r,fue,Y_r,K_r,Z_r,CA,eur,mue,our,rur,tur,vt,MA,aur,gue,nur,sur,Ic,lur,hue,iur,dur,pue,cur,fur,mur,_ue,gur,hur,EA,pur,Eo,yA,_ur,uue,uur,bur,Fn,vur,bue,Tur,Fur,vue,Cur,Mur,Tue,Eur,yur,wur,Fue,MC,Cue,Aur,Lur,XO,Bur,xur,kur,Mue,Rur,Sur,wA,KBe,Dc,EC,Eue,AA,Pur,yue,$ur,ZBe,Ar,LA,Iur,jc,Dur,wue,jur,Nur,Aue,qur,Gur,Our,BA,Xur,Lue,Vur,zur,Wur,Tt,xA,Qur,Bue,Hur,Uur,Nc,Jur,xue,Yur,Kur,kue,Zur,e1r,o1r,Rue,r1r,t1r,kA,a1r,yo,RA,n1r,Sue,s1r,l1r,Cn,i1r,Pue,d1r,c1r,$ue,f1r,m1r,Iue,g1r,h1r,p1r,Due,yC,jue,_1r,u1r,VO,b1r,v1r,T1r,Nue,F1r,C1r,SA,exe,qc,wC,que,PA,M1r,Gue,E1r,oxe,Lr,$A,y1r,Gc,w1r,Oue,A1r,L1r,Xue,B1r,x1r,k1r,IA,R1r,Vue,S1r,P1r,$1r,Ft,DA,I1r,zue,D1r,j1r,Oc,N1r,Wue,q1r,G1r,Que,O1r,X1r,V1r,Hue,z1r,W1r,jA,Q1r,wo,NA,H1r,Uue,U1r,J1r,Mn,Y1r,Jue,K1r,Z1r,Yue,ebr,obr,Kue,rbr,tbr,abr,z,AC,Zue,nbr,sbr,zO,lbr,ibr,dbr,LC,e1e,cbr,fbr,WO,mbr,gbr,hbr,BC,o1e,pbr,_br,QO,ubr,bbr,vbr,xC,r1e,Tbr,Fbr,HO,Cbr,Mbr,Ebr,kC,t1e,ybr,wbr,UO,Abr,Lbr,Bbr,RC,a1e,xbr,kbr,JO,Rbr,Sbr,Pbr,SC,n1e,$br,Ibr,YO,Dbr,jbr,Nbr,PC,s1e,qbr,Gbr,KO,Obr,Xbr,Vbr,$C,l1e,zbr,Wbr,ZO,Qbr,Hbr,Ubr,IC,i1e,Jbr,Ybr,eX,Kbr,Zbr,e5r,DC,d1e,o5r,r5r,oX,t5r,a5r,n5r,jC,c1e,s5r,l5r,rX,i5r,d5r,c5r,NC,f1e,f5r,m5r,tX,g5r,h5r,p5r,qC,m1e,_5r,u5r,aX,b5r,v5r,T5r,GC,g1e,F5r,C5r,nX,M5r,E5r,y5r,OC,h1e,w5r,A5r,sX,L5r,B5r,x5r,XC,p1e,k5r,R5r,lX,S5r,P5r,$5r,VC,_1e,I5r,D5r,iX,j5r,N5r,q5r,zC,u1e,G5r,O5r,dX,X5r,V5r,z5r,WC,b1e,W5r,Q5r,cX,H5r,U5r,J5r,QC,v1e,Y5r,K5r,fX,Z5r,e2r,o2r,HC,T1e,r2r,t2r,mX,a2r,n2r,s2r,UC,F1e,l2r,i2r,gX,d2r,c2r,f2r,JC,C1e,m2r,g2r,hX,h2r,p2r,_2r,M1e,u2r,b2r,qA,rxe,Xc,YC,E1e,GA,v2r,y1e,T2r,txe,Br,OA,F2r,Vc,C2r,w1e,M2r,E2r,A1e,y2r,w2r,A2r,XA,L2r,L1e,B2r,x2r,k2r,Ct,VA,R2r,B1e,S2r,P2r,zc,$2r,x1e,I2r,D2r,k1e,j2r,N2r,q2r,R1e,G2r,O2r,zA,X2r,Ao,WA,V2r,S1e,z2r,W2r,En,Q2r,P1e,H2r,U2r,$1e,J2r,Y2r,I1e,K2r,Z2r,evr,yn,KC,D1e,ovr,rvr,pX,tvr,avr,nvr,ZC,j1e,svr,lvr,_X,ivr,dvr,cvr,e4,N1e,fvr,mvr,uX,gvr,hvr,pvr,o4,q1e,_vr,uvr,bX,bvr,vvr,Tvr,G1e,Fvr,Cvr,QA,axe,Wc,r4,O1e,HA,Mvr,X1e,Evr,nxe,xr,UA,yvr,Qc,wvr,V1e,Avr,Lvr,z1e,Bvr,xvr,kvr,JA,Rvr,W1e,Svr,Pvr,$vr,Mt,YA,Ivr,Q1e,Dvr,jvr,Hc,Nvr,H1e,qvr,Gvr,U1e,Ovr,Xvr,Vvr,J1e,zvr,Wvr,KA,Qvr,Lo,ZA,Hvr,Y1e,Uvr,Jvr,wn,Yvr,K1e,Kvr,Zvr,Z1e,eTr,oTr,ebe,rTr,tTr,aTr,fe,t4,obe,nTr,sTr,vX,lTr,iTr,dTr,a4,rbe,cTr,fTr,TX,mTr,gTr,hTr,n4,tbe,pTr,_Tr,FX,uTr,bTr,vTr,s4,abe,TTr,FTr,CX,CTr,MTr,ETr,l4,nbe,yTr,wTr,MX,ATr,LTr,BTr,i4,sbe,xTr,kTr,EX,RTr,STr,PTr,d4,lbe,$Tr,ITr,yX,DTr,jTr,NTr,c4,ibe,qTr,GTr,wX,OTr,XTr,VTr,f4,dbe,zTr,WTr,AX,QTr,HTr,UTr,m4,cbe,JTr,YTr,LX,KTr,ZTr,eFr,g4,fbe,oFr,rFr,BX,tFr,aFr,nFr,mbe,sFr,lFr,e0,sxe,Uc,h4,gbe,o0,iFr,hbe,dFr,lxe,kr,r0,cFr,Jc,fFr,pbe,mFr,gFr,_be,hFr,pFr,_Fr,t0,uFr,ube,bFr,vFr,TFr,Et,a0,FFr,bbe,CFr,MFr,Yc,EFr,vbe,yFr,wFr,Tbe,AFr,LFr,BFr,Fbe,xFr,kFr,n0,RFr,Bo,s0,SFr,Cbe,PFr,$Fr,An,IFr,Mbe,DFr,jFr,Ebe,NFr,qFr,ybe,GFr,OFr,XFr,ve,p4,wbe,VFr,zFr,xX,WFr,QFr,HFr,_4,Abe,UFr,JFr,kX,YFr,KFr,ZFr,u4,Lbe,e9r,o9r,RX,r9r,t9r,a9r,b4,Bbe,n9r,s9r,SX,l9r,i9r,d9r,v4,xbe,c9r,f9r,PX,m9r,g9r,h9r,T4,kbe,p9r,_9r,$X,u9r,b9r,v9r,F4,Rbe,T9r,F9r,IX,C9r,M9r,E9r,C4,Sbe,y9r,w9r,DX,A9r,L9r,B9r,M4,Pbe,x9r,k9r,jX,R9r,S9r,P9r,$be,$9r,I9r,l0,ixe,Kc,E4,Ibe,i0,D9r,Dbe,j9r,dxe,Rr,d0,N9r,Zc,q9r,jbe,G9r,O9r,Nbe,X9r,V9r,z9r,c0,W9r,qbe,Q9r,H9r,U9r,yt,f0,J9r,Gbe,Y9r,K9r,ef,Z9r,Obe,eCr,oCr,Xbe,rCr,tCr,aCr,Vbe,nCr,sCr,m0,lCr,xo,g0,iCr,zbe,dCr,cCr,Ln,fCr,Wbe,mCr,gCr,Qbe,hCr,pCr,Hbe,_Cr,uCr,bCr,Te,y4,Ube,vCr,TCr,NX,FCr,CCr,MCr,w4,Jbe,ECr,yCr,qX,wCr,ACr,LCr,A4,Ybe,BCr,xCr,GX,kCr,RCr,SCr,L4,Kbe,PCr,$Cr,OX,ICr,DCr,jCr,B4,Zbe,NCr,qCr,XX,GCr,OCr,XCr,x4,e5e,VCr,zCr,VX,WCr,QCr,HCr,k4,o5e,UCr,JCr,zX,YCr,KCr,ZCr,R4,r5e,e4r,o4r,WX,r4r,t4r,a4r,S4,t5e,n4r,s4r,QX,l4r,i4r,d4r,a5e,c4r,f4r,h0,cxe,of,P4,n5e,p0,m4r,s5e,g4r,fxe,Sr,_0,h4r,rf,p4r,l5e,_4r,u4r,i5e,b4r,v4r,T4r,u0,F4r,d5e,C4r,M4r,E4r,wt,b0,y4r,c5e,w4r,A4r,tf,L4r,f5e,B4r,x4r,m5e,k4r,R4r,S4r,g5e,P4r,$4r,v0,I4r,ko,T0,D4r,h5e,j4r,N4r,Bn,q4r,p5e,G4r,O4r,_5e,X4r,V4r,u5e,z4r,W4r,Q4r,Fe,$4,b5e,H4r,U4r,HX,J4r,Y4r,K4r,I4,v5e,Z4r,eMr,UX,oMr,rMr,tMr,D4,T5e,aMr,nMr,JX,sMr,lMr,iMr,j4,F5e,dMr,cMr,YX,fMr,mMr,gMr,N4,C5e,hMr,pMr,KX,_Mr,uMr,bMr,q4,M5e,vMr,TMr,ZX,FMr,CMr,MMr,G4,E5e,EMr,yMr,eV,wMr,AMr,LMr,O4,y5e,BMr,xMr,oV,kMr,RMr,SMr,X4,w5e,PMr,$Mr,rV,IMr,DMr,jMr,A5e,NMr,qMr,F0,mxe,af,V4,L5e,C0,GMr,B5e,OMr,gxe,Pr,M0,XMr,nf,VMr,x5e,zMr,WMr,k5e,QMr,HMr,UMr,E0,JMr,R5e,YMr,KMr,ZMr,At,y0,eEr,S5e,oEr,rEr,sf,tEr,P5e,aEr,nEr,$5e,sEr,lEr,iEr,I5e,dEr,cEr,w0,fEr,Ro,A0,mEr,D5e,gEr,hEr,xn,pEr,j5e,_Er,uEr,N5e,bEr,vEr,q5e,TEr,FEr,CEr,Ce,z4,G5e,MEr,EEr,tV,yEr,wEr,AEr,W4,O5e,LEr,BEr,aV,xEr,kEr,REr,Q4,X5e,SEr,PEr,nV,$Er,IEr,DEr,H4,V5e,jEr,NEr,sV,qEr,GEr,OEr,U4,z5e,XEr,VEr,lV,zEr,WEr,QEr,J4,W5e,HEr,UEr,iV,JEr,YEr,KEr,Y4,Q5e,ZEr,e3r,dV,o3r,r3r,t3r,K4,H5e,a3r,n3r,cV,s3r,l3r,i3r,Z4,U5e,d3r,c3r,fV,f3r,m3r,g3r,J5e,h3r,p3r,L0,hxe,lf,eM,Y5e,B0,_3r,K5e,u3r,pxe,$r,x0,b3r,df,v3r,Z5e,T3r,F3r,e2e,C3r,M3r,E3r,k0,y3r,o2e,w3r,A3r,L3r,Lt,R0,B3r,r2e,x3r,k3r,cf,R3r,t2e,S3r,P3r,a2e,$3r,I3r,D3r,n2e,j3r,N3r,S0,q3r,So,P0,G3r,s2e,O3r,X3r,kn,V3r,l2e,z3r,W3r,i2e,Q3r,H3r,d2e,U3r,J3r,Y3r,so,oM,c2e,K3r,Z3r,mV,eyr,oyr,ryr,rM,f2e,tyr,ayr,gV,nyr,syr,lyr,tM,m2e,iyr,dyr,hV,cyr,fyr,myr,aM,g2e,gyr,hyr,pV,pyr,_yr,uyr,nM,h2e,byr,vyr,_V,Tyr,Fyr,Cyr,sM,p2e,Myr,Eyr,uV,yyr,wyr,Ayr,lM,_2e,Lyr,Byr,bV,xyr,kyr,Ryr,u2e,Syr,Pyr,$0,_xe,ff,iM,b2e,I0,$yr,v2e,Iyr,uxe,Ir,D0,Dyr,mf,jyr,T2e,Nyr,qyr,F2e,Gyr,Oyr,Xyr,j0,Vyr,C2e,zyr,Wyr,Qyr,Bt,N0,Hyr,M2e,Uyr,Jyr,gf,Yyr,E2e,Kyr,Zyr,y2e,ewr,owr,rwr,w2e,twr,awr,q0,nwr,Po,G0,swr,A2e,lwr,iwr,Rn,dwr,L2e,cwr,fwr,B2e,mwr,gwr,x2e,hwr,pwr,_wr,lo,dM,k2e,uwr,bwr,vV,vwr,Twr,Fwr,cM,R2e,Cwr,Mwr,TV,Ewr,ywr,wwr,fM,S2e,Awr,Lwr,FV,Bwr,xwr,kwr,mM,P2e,Rwr,Swr,CV,Pwr,$wr,Iwr,gM,$2e,Dwr,jwr,MV,Nwr,qwr,Gwr,hM,I2e,Owr,Xwr,EV,Vwr,zwr,Wwr,pM,D2e,Qwr,Hwr,yV,Uwr,Jwr,Ywr,j2e,Kwr,Zwr,O0,bxe,hf,_M,N2e,X0,e6r,q2e,o6r,vxe,Dr,V0,r6r,pf,t6r,G2e,a6r,n6r,O2e,s6r,l6r,i6r,z0,d6r,X2e,c6r,f6r,m6r,xt,W0,g6r,V2e,h6r,p6r,_f,_6r,z2e,u6r,b6r,W2e,v6r,T6r,F6r,Q2e,C6r,M6r,Q0,E6r,$o,H0,y6r,H2e,w6r,A6r,Sn,L6r,U2e,B6r,x6r,J2e,k6r,R6r,Y2e,S6r,P6r,$6r,K2e,uM,Z2e,I6r,D6r,wV,j6r,N6r,q6r,eve,G6r,O6r,U0,Txe,uf,bM,ove,J0,X6r,rve,V6r,Fxe,jr,Y0,z6r,bf,W6r,tve,Q6r,H6r,ave,U6r,J6r,Y6r,K0,K6r,nve,Z6r,eAr,oAr,kt,Z0,rAr,sve,tAr,aAr,vf,nAr,lve,sAr,lAr,ive,iAr,dAr,cAr,dve,fAr,mAr,eL,gAr,Io,oL,hAr,cve,pAr,_Ar,Pn,uAr,fve,bAr,vAr,mve,TAr,FAr,gve,CAr,MAr,EAr,rL,vM,hve,yAr,wAr,AV,AAr,LAr,BAr,TM,pve,xAr,kAr,LV,RAr,SAr,PAr,_ve,$Ar,IAr,tL,Cxe,Tf,FM,uve,aL,DAr,bve,jAr,Mxe,Nr,nL,NAr,Ff,qAr,vve,GAr,OAr,Tve,XAr,VAr,zAr,sL,WAr,Fve,QAr,HAr,UAr,Rt,lL,JAr,Cve,YAr,KAr,Cf,ZAr,Mve,e0r,o0r,Eve,r0r,t0r,a0r,yve,n0r,s0r,iL,l0r,Do,dL,i0r,wve,d0r,c0r,$n,f0r,Ave,m0r,g0r,Lve,h0r,p0r,Bve,_0r,u0r,b0r,xve,CM,kve,v0r,T0r,BV,F0r,C0r,M0r,Rve,E0r,y0r,cL,Exe;return ce=new V({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),wE=new V({}),AE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new w0r({props:{warning:"&lcub;true}",$$slots:{default:[h5t]},$$scope:{ctx:Ai}}}),LE=new V({}),BE=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/configuration_auto.py#L526"}}),RE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),SE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),PE=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),$E=new V({}),IE=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/tokenization_auto.py#L351"}}),NE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15911/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),qE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),GE=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),OE=new V({}),XE=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),WE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15911/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),fh=new w0r({props:{$$slots:{default:[p5t]},$$scope:{ctx:Ai}}}),QE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),HE=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),UE=new V({}),JE=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/processing_auto.py#L71"}}),ZE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ch=new w0r({props:{$$slots:{default:[_5t]},$$scope:{ctx:Ai}}}),e3=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),o3=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),r3=new V({}),t3=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L687"}}),n3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),s3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),l3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d3=new V({}),c3=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L694"}}),m3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),g3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),h3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_3=new V({}),u3=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L709"}}),v3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),T3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),F3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M3=new V({}),E3=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L716"}}),w3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),A3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),L3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x3=new V({}),k3=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L723"}}),S3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),P3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),$3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D3=new V({}),j3=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L732"}}),q3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),G3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),O3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V3=new V({}),z3=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L766"}}),Q3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),H3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),U3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y3=new V({}),K3=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L773"}}),ey=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),ry=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new V({}),ny=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L759"}}),ly=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),dy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new V({}),my=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L741"}}),hy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),py=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),_y=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new V({}),vy=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L748"}}),Fy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),My=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new V({}),wy=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L782"}}),Ly=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),xy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new V({}),Sy=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L812"}}),$y=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Dy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new V({}),qy=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L819"}}),Oy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Vy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new V({}),Qy=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L842"}}),Uy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Yy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new V({}),ew=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L826"}}),rw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),aw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new V({}),lw=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L833"}}),dw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),fw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hw=new V({}),pw=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L851"}}),uw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),vw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new V({}),Cw=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L858"}}),Ew=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),ww=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Lw=new V({}),Bw=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L805"}}),kw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Sw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$w=new V({}),Iw=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L789"}}),jw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),qw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new V({}),Xw=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_auto.py#L796"}}),zw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Qw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jw=new V({}),Yw=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),Zw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),e6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),o6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t6=new V({}),a6=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),s6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),l6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),i6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c6=new V({}),f6=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),g6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),h6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),p6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u6=new V({}),b6=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),T6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),F6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),C6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y6=new V({}),w6=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),L6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),B6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),x6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R6=new V({}),S6=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),$6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),I6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),D6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N6=new V({}),q6=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),O6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),X6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),V6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W6=new V({}),Q6=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),U6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),J6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Y6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z6=new V({}),eA=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),rA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),tA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),aA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sA=new V({}),lA=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),dA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),fA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gA=new V({}),hA=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),_A=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),bA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TA=new V({}),FA=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),MA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),yA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AA=new V({}),LA=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),xA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),RA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PA=new V({}),$A=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),DA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),NA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GA=new V({}),OA=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),VA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),WA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HA=new V({}),UA=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),YA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),ZA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o0=new V({}),r0=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),a0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),n0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),s0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i0=new V({}),d0=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),f0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),m0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),g0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p0=new V({}),_0=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),b0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),T0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C0=new V({}),M0=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),y0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),A0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B0=new V({}),x0=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),R0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),P0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I0=new V({}),D0=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),N0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),G0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X0=new V({}),V0=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),W0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),Q0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),H0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J0=new V({}),Y0=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),Z0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),oL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new V({}),nL=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),lL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15911/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15911/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),iL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),dL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15911/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15911/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15911/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Be=l(),ie=a("h1"),me=a("a"),no=a("span"),f(ce.$$.fragment),ue=l(),Go=a("span"),Li=o("Auto Classes"),Ef=l(),sa=a("p"),Bi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),CE=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),ki=o("Instantiating one of "),In=a("a"),ME=o("AutoConfig"),Dn=o(", "),jn=a("a"),EE=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),yE=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),f($a.$$.fragment),co=l(),ge=a("p"),l8=o("will create a model that is an instance of "),Pi=a("a"),i8=o("BertModel"),d8=o("."),Oo=l(),Ia=a("p"),c8=o("There is one class of "),Af=a("code"),f8=o("AutoModel"),$Re=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),y7e=l(),$i=a("h2"),Lf=a("a"),TW=a("span"),f(wE.$$.fragment),IRe=l(),FW=a("span"),DRe=o("Extending the Auto Classes"),w7e=l(),qn=a("p"),jRe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),CW=a("code"),NRe=o("NewModel"),qRe=o(", make sure you have a "),MW=a("code"),GRe=o("NewModelConfig"),ORe=o(` then you can add those to the auto
classes like this:`),A7e=l(),f(AE.$$.fragment),L7e=l(),m8=a("p"),XRe=o("You will then be able to use the auto classes like you would usually do!"),B7e=l(),f(Bf.$$.fragment),x7e=l(),Ii=a("h2"),xf=a("a"),EW=a("span"),f(LE.$$.fragment),VRe=l(),yW=a("span"),zRe=o("AutoConfig"),k7e=l(),Xo=a("div"),f(BE.$$.fragment),WRe=l(),xE=a("p"),QRe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),g8=a("a"),HRe=o("from_pretrained()"),URe=o(" class method."),JRe=l(),kE=a("p"),YRe=o("This class cannot be instantiated directly using "),wW=a("code"),KRe=o("__init__()"),ZRe=o(" (throws an error)."),eSe=l(),fo=a("div"),f(RE.$$.fragment),oSe=l(),AW=a("p"),rSe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),tSe=l(),Di=a("p"),aSe=o("The configuration class to instantiate is selected based on the "),LW=a("code"),nSe=o("model_type"),sSe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),BW=a("code"),lSe=o("pretrained_model_name_or_path"),iSe=o(":"),dSe=l(),v=a("ul"),kf=a("li"),xW=a("strong"),cSe=o("albert"),fSe=o(" \u2014 "),h8=a("a"),mSe=o("AlbertConfig"),gSe=o(" (ALBERT model)"),hSe=l(),Rf=a("li"),kW=a("strong"),pSe=o("bart"),_Se=o(" \u2014 "),p8=a("a"),uSe=o("BartConfig"),bSe=o(" (BART model)"),vSe=l(),Sf=a("li"),RW=a("strong"),TSe=o("beit"),FSe=o(" \u2014 "),_8=a("a"),CSe=o("BeitConfig"),MSe=o(" (BEiT model)"),ESe=l(),Pf=a("li"),SW=a("strong"),ySe=o("bert"),wSe=o(" \u2014 "),u8=a("a"),ASe=o("BertConfig"),LSe=o(" (BERT model)"),BSe=l(),$f=a("li"),PW=a("strong"),xSe=o("bert-generation"),kSe=o(" \u2014 "),b8=a("a"),RSe=o("BertGenerationConfig"),SSe=o(" (Bert Generation model)"),PSe=l(),If=a("li"),$W=a("strong"),$Se=o("big_bird"),ISe=o(" \u2014 "),v8=a("a"),DSe=o("BigBirdConfig"),jSe=o(" (BigBird model)"),NSe=l(),Df=a("li"),IW=a("strong"),qSe=o("bigbird_pegasus"),GSe=o(" \u2014 "),T8=a("a"),OSe=o("BigBirdPegasusConfig"),XSe=o(" (BigBirdPegasus model)"),VSe=l(),jf=a("li"),DW=a("strong"),zSe=o("blenderbot"),WSe=o(" \u2014 "),F8=a("a"),QSe=o("BlenderbotConfig"),HSe=o(" (Blenderbot model)"),USe=l(),Nf=a("li"),jW=a("strong"),JSe=o("blenderbot-small"),YSe=o(" \u2014 "),C8=a("a"),KSe=o("BlenderbotSmallConfig"),ZSe=o(" (BlenderbotSmall model)"),ePe=l(),qf=a("li"),NW=a("strong"),oPe=o("camembert"),rPe=o(" \u2014 "),M8=a("a"),tPe=o("CamembertConfig"),aPe=o(" (CamemBERT model)"),nPe=l(),Gf=a("li"),qW=a("strong"),sPe=o("canine"),lPe=o(" \u2014 "),E8=a("a"),iPe=o("CanineConfig"),dPe=o(" (Canine model)"),cPe=l(),Of=a("li"),GW=a("strong"),fPe=o("clip"),mPe=o(" \u2014 "),y8=a("a"),gPe=o("CLIPConfig"),hPe=o(" (CLIP model)"),pPe=l(),Xf=a("li"),OW=a("strong"),_Pe=o("convbert"),uPe=o(" \u2014 "),w8=a("a"),bPe=o("ConvBertConfig"),vPe=o(" (ConvBERT model)"),TPe=l(),Vf=a("li"),XW=a("strong"),FPe=o("convnext"),CPe=o(" \u2014 "),A8=a("a"),MPe=o("ConvNextConfig"),EPe=o(" (ConvNext model)"),yPe=l(),zf=a("li"),VW=a("strong"),wPe=o("ctrl"),APe=o(" \u2014 "),L8=a("a"),LPe=o("CTRLConfig"),BPe=o(" (CTRL model)"),xPe=l(),Wf=a("li"),zW=a("strong"),kPe=o("data2vec-audio"),RPe=o(" \u2014 "),B8=a("a"),SPe=o("Data2VecAudioConfig"),PPe=o(" (Data2VecAudio model)"),$Pe=l(),Qf=a("li"),WW=a("strong"),IPe=o("data2vec-text"),DPe=o(" \u2014 "),x8=a("a"),jPe=o("Data2VecTextConfig"),NPe=o(" (Data2VecText model)"),qPe=l(),Hf=a("li"),QW=a("strong"),GPe=o("deberta"),OPe=o(" \u2014 "),k8=a("a"),XPe=o("DebertaConfig"),VPe=o(" (DeBERTa model)"),zPe=l(),Uf=a("li"),HW=a("strong"),WPe=o("deberta-v2"),QPe=o(" \u2014 "),R8=a("a"),HPe=o("DebertaV2Config"),UPe=o(" (DeBERTa-v2 model)"),JPe=l(),Jf=a("li"),UW=a("strong"),YPe=o("deit"),KPe=o(" \u2014 "),S8=a("a"),ZPe=o("DeiTConfig"),e$e=o(" (DeiT model)"),o$e=l(),Yf=a("li"),JW=a("strong"),r$e=o("detr"),t$e=o(" \u2014 "),P8=a("a"),a$e=o("DetrConfig"),n$e=o(" (DETR model)"),s$e=l(),Kf=a("li"),YW=a("strong"),l$e=o("distilbert"),i$e=o(" \u2014 "),$8=a("a"),d$e=o("DistilBertConfig"),c$e=o(" (DistilBERT model)"),f$e=l(),Zf=a("li"),KW=a("strong"),m$e=o("dpr"),g$e=o(" \u2014 "),I8=a("a"),h$e=o("DPRConfig"),p$e=o(" (DPR model)"),_$e=l(),em=a("li"),ZW=a("strong"),u$e=o("electra"),b$e=o(" \u2014 "),D8=a("a"),v$e=o("ElectraConfig"),T$e=o(" (ELECTRA model)"),F$e=l(),om=a("li"),eQ=a("strong"),C$e=o("encoder-decoder"),M$e=o(" \u2014 "),j8=a("a"),E$e=o("EncoderDecoderConfig"),y$e=o(" (Encoder decoder model)"),w$e=l(),rm=a("li"),oQ=a("strong"),A$e=o("flaubert"),L$e=o(" \u2014 "),N8=a("a"),B$e=o("FlaubertConfig"),x$e=o(" (FlauBERT model)"),k$e=l(),tm=a("li"),rQ=a("strong"),R$e=o("fnet"),S$e=o(" \u2014 "),q8=a("a"),P$e=o("FNetConfig"),$$e=o(" (FNet model)"),I$e=l(),am=a("li"),tQ=a("strong"),D$e=o("fsmt"),j$e=o(" \u2014 "),G8=a("a"),N$e=o("FSMTConfig"),q$e=o(" (FairSeq Machine-Translation model)"),G$e=l(),nm=a("li"),aQ=a("strong"),O$e=o("funnel"),X$e=o(" \u2014 "),O8=a("a"),V$e=o("FunnelConfig"),z$e=o(" (Funnel Transformer model)"),W$e=l(),sm=a("li"),nQ=a("strong"),Q$e=o("gpt2"),H$e=o(" \u2014 "),X8=a("a"),U$e=o("GPT2Config"),J$e=o(" (OpenAI GPT-2 model)"),Y$e=l(),lm=a("li"),sQ=a("strong"),K$e=o("gpt_neo"),Z$e=o(" \u2014 "),V8=a("a"),eIe=o("GPTNeoConfig"),oIe=o(" (GPT Neo model)"),rIe=l(),im=a("li"),lQ=a("strong"),tIe=o("gptj"),aIe=o(" \u2014 "),z8=a("a"),nIe=o("GPTJConfig"),sIe=o(" (GPT-J model)"),lIe=l(),dm=a("li"),iQ=a("strong"),iIe=o("hubert"),dIe=o(" \u2014 "),W8=a("a"),cIe=o("HubertConfig"),fIe=o(" (Hubert model)"),mIe=l(),cm=a("li"),dQ=a("strong"),gIe=o("ibert"),hIe=o(" \u2014 "),Q8=a("a"),pIe=o("IBertConfig"),_Ie=o(" (I-BERT model)"),uIe=l(),fm=a("li"),cQ=a("strong"),bIe=o("imagegpt"),vIe=o(" \u2014 "),H8=a("a"),TIe=o("ImageGPTConfig"),FIe=o(" (ImageGPT model)"),CIe=l(),mm=a("li"),fQ=a("strong"),MIe=o("layoutlm"),EIe=o(" \u2014 "),U8=a("a"),yIe=o("LayoutLMConfig"),wIe=o(" (LayoutLM model)"),AIe=l(),gm=a("li"),mQ=a("strong"),LIe=o("layoutlmv2"),BIe=o(" \u2014 "),J8=a("a"),xIe=o("LayoutLMv2Config"),kIe=o(" (LayoutLMv2 model)"),RIe=l(),hm=a("li"),gQ=a("strong"),SIe=o("led"),PIe=o(" \u2014 "),Y8=a("a"),$Ie=o("LEDConfig"),IIe=o(" (LED model)"),DIe=l(),pm=a("li"),hQ=a("strong"),jIe=o("longformer"),NIe=o(" \u2014 "),K8=a("a"),qIe=o("LongformerConfig"),GIe=o(" (Longformer model)"),OIe=l(),_m=a("li"),pQ=a("strong"),XIe=o("luke"),VIe=o(" \u2014 "),Z8=a("a"),zIe=o("LukeConfig"),WIe=o(" (LUKE model)"),QIe=l(),um=a("li"),_Q=a("strong"),HIe=o("lxmert"),UIe=o(" \u2014 "),e7=a("a"),JIe=o("LxmertConfig"),YIe=o(" (LXMERT model)"),KIe=l(),bm=a("li"),uQ=a("strong"),ZIe=o("m2m_100"),eDe=o(" \u2014 "),o7=a("a"),oDe=o("M2M100Config"),rDe=o(" (M2M100 model)"),tDe=l(),vm=a("li"),bQ=a("strong"),aDe=o("marian"),nDe=o(" \u2014 "),r7=a("a"),sDe=o("MarianConfig"),lDe=o(" (Marian model)"),iDe=l(),Tm=a("li"),vQ=a("strong"),dDe=o("maskformer"),cDe=o(" \u2014 "),t7=a("a"),fDe=o("MaskFormerConfig"),mDe=o(" (MaskFormer model)"),gDe=l(),Fm=a("li"),TQ=a("strong"),hDe=o("mbart"),pDe=o(" \u2014 "),a7=a("a"),_De=o("MBartConfig"),uDe=o(" (mBART model)"),bDe=l(),Cm=a("li"),FQ=a("strong"),vDe=o("megatron-bert"),TDe=o(" \u2014 "),n7=a("a"),FDe=o("MegatronBertConfig"),CDe=o(" (MegatronBert model)"),MDe=l(),Mm=a("li"),CQ=a("strong"),EDe=o("mobilebert"),yDe=o(" \u2014 "),s7=a("a"),wDe=o("MobileBertConfig"),ADe=o(" (MobileBERT model)"),LDe=l(),Em=a("li"),MQ=a("strong"),BDe=o("mpnet"),xDe=o(" \u2014 "),l7=a("a"),kDe=o("MPNetConfig"),RDe=o(" (MPNet model)"),SDe=l(),ym=a("li"),EQ=a("strong"),PDe=o("mt5"),$De=o(" \u2014 "),i7=a("a"),IDe=o("MT5Config"),DDe=o(" (mT5 model)"),jDe=l(),wm=a("li"),yQ=a("strong"),NDe=o("nystromformer"),qDe=o(" \u2014 "),d7=a("a"),GDe=o("NystromformerConfig"),ODe=o(" (Nystromformer model)"),XDe=l(),Am=a("li"),wQ=a("strong"),VDe=o("openai-gpt"),zDe=o(" \u2014 "),c7=a("a"),WDe=o("OpenAIGPTConfig"),QDe=o(" (OpenAI GPT model)"),HDe=l(),Lm=a("li"),AQ=a("strong"),UDe=o("pegasus"),JDe=o(" \u2014 "),f7=a("a"),YDe=o("PegasusConfig"),KDe=o(" (Pegasus model)"),ZDe=l(),Bm=a("li"),LQ=a("strong"),eje=o("perceiver"),oje=o(" \u2014 "),m7=a("a"),rje=o("PerceiverConfig"),tje=o(" (Perceiver model)"),aje=l(),xm=a("li"),BQ=a("strong"),nje=o("plbart"),sje=o(" \u2014 "),g7=a("a"),lje=o("PLBartConfig"),ije=o(" (PLBart model)"),dje=l(),km=a("li"),xQ=a("strong"),cje=o("poolformer"),fje=o(" \u2014 "),h7=a("a"),mje=o("PoolFormerConfig"),gje=o(" (PoolFormer model)"),hje=l(),Rm=a("li"),kQ=a("strong"),pje=o("prophetnet"),_je=o(" \u2014 "),p7=a("a"),uje=o("ProphetNetConfig"),bje=o(" (ProphetNet model)"),vje=l(),Sm=a("li"),RQ=a("strong"),Tje=o("qdqbert"),Fje=o(" \u2014 "),_7=a("a"),Cje=o("QDQBertConfig"),Mje=o(" (QDQBert model)"),Eje=l(),Pm=a("li"),SQ=a("strong"),yje=o("rag"),wje=o(" \u2014 "),u7=a("a"),Aje=o("RagConfig"),Lje=o(" (RAG model)"),Bje=l(),$m=a("li"),PQ=a("strong"),xje=o("realm"),kje=o(" \u2014 "),b7=a("a"),Rje=o("RealmConfig"),Sje=o(" (Realm model)"),Pje=l(),Im=a("li"),$Q=a("strong"),$je=o("reformer"),Ije=o(" \u2014 "),v7=a("a"),Dje=o("ReformerConfig"),jje=o(" (Reformer model)"),Nje=l(),Dm=a("li"),IQ=a("strong"),qje=o("rembert"),Gje=o(" \u2014 "),T7=a("a"),Oje=o("RemBertConfig"),Xje=o(" (RemBERT model)"),Vje=l(),jm=a("li"),DQ=a("strong"),zje=o("retribert"),Wje=o(" \u2014 "),F7=a("a"),Qje=o("RetriBertConfig"),Hje=o(" (RetriBERT model)"),Uje=l(),Nm=a("li"),jQ=a("strong"),Jje=o("roberta"),Yje=o(" \u2014 "),C7=a("a"),Kje=o("RobertaConfig"),Zje=o(" (RoBERTa model)"),eNe=l(),qm=a("li"),NQ=a("strong"),oNe=o("roformer"),rNe=o(" \u2014 "),M7=a("a"),tNe=o("RoFormerConfig"),aNe=o(" (RoFormer model)"),nNe=l(),Gm=a("li"),qQ=a("strong"),sNe=o("segformer"),lNe=o(" \u2014 "),E7=a("a"),iNe=o("SegformerConfig"),dNe=o(" (SegFormer model)"),cNe=l(),Om=a("li"),GQ=a("strong"),fNe=o("sew"),mNe=o(" \u2014 "),y7=a("a"),gNe=o("SEWConfig"),hNe=o(" (SEW model)"),pNe=l(),Xm=a("li"),OQ=a("strong"),_Ne=o("sew-d"),uNe=o(" \u2014 "),w7=a("a"),bNe=o("SEWDConfig"),vNe=o(" (SEW-D model)"),TNe=l(),Vm=a("li"),XQ=a("strong"),FNe=o("speech-encoder-decoder"),CNe=o(" \u2014 "),A7=a("a"),MNe=o("SpeechEncoderDecoderConfig"),ENe=o(" (Speech Encoder decoder model)"),yNe=l(),zm=a("li"),VQ=a("strong"),wNe=o("speech_to_text"),ANe=o(" \u2014 "),L7=a("a"),LNe=o("Speech2TextConfig"),BNe=o(" (Speech2Text model)"),xNe=l(),Wm=a("li"),zQ=a("strong"),kNe=o("speech_to_text_2"),RNe=o(" \u2014 "),B7=a("a"),SNe=o("Speech2Text2Config"),PNe=o(" (Speech2Text2 model)"),$Ne=l(),Qm=a("li"),WQ=a("strong"),INe=o("splinter"),DNe=o(" \u2014 "),x7=a("a"),jNe=o("SplinterConfig"),NNe=o(" (Splinter model)"),qNe=l(),Hm=a("li"),QQ=a("strong"),GNe=o("squeezebert"),ONe=o(" \u2014 "),k7=a("a"),XNe=o("SqueezeBertConfig"),VNe=o(" (SqueezeBERT model)"),zNe=l(),Um=a("li"),HQ=a("strong"),WNe=o("swin"),QNe=o(" \u2014 "),R7=a("a"),HNe=o("SwinConfig"),UNe=o(" (Swin model)"),JNe=l(),Jm=a("li"),UQ=a("strong"),YNe=o("t5"),KNe=o(" \u2014 "),S7=a("a"),ZNe=o("T5Config"),eqe=o(" (T5 model)"),oqe=l(),Ym=a("li"),JQ=a("strong"),rqe=o("tapas"),tqe=o(" \u2014 "),P7=a("a"),aqe=o("TapasConfig"),nqe=o(" (TAPAS model)"),sqe=l(),Km=a("li"),YQ=a("strong"),lqe=o("transfo-xl"),iqe=o(" \u2014 "),$7=a("a"),dqe=o("TransfoXLConfig"),cqe=o(" (Transformer-XL model)"),fqe=l(),Zm=a("li"),KQ=a("strong"),mqe=o("trocr"),gqe=o(" \u2014 "),I7=a("a"),hqe=o("TrOCRConfig"),pqe=o(" (TrOCR model)"),_qe=l(),eg=a("li"),ZQ=a("strong"),uqe=o("unispeech"),bqe=o(" \u2014 "),D7=a("a"),vqe=o("UniSpeechConfig"),Tqe=o(" (UniSpeech model)"),Fqe=l(),og=a("li"),eH=a("strong"),Cqe=o("unispeech-sat"),Mqe=o(" \u2014 "),j7=a("a"),Eqe=o("UniSpeechSatConfig"),yqe=o(" (UniSpeechSat model)"),wqe=l(),rg=a("li"),oH=a("strong"),Aqe=o("vilt"),Lqe=o(" \u2014 "),N7=a("a"),Bqe=o("ViltConfig"),xqe=o(" (ViLT model)"),kqe=l(),tg=a("li"),rH=a("strong"),Rqe=o("vision-encoder-decoder"),Sqe=o(" \u2014 "),q7=a("a"),Pqe=o("VisionEncoderDecoderConfig"),$qe=o(" (Vision Encoder decoder model)"),Iqe=l(),ag=a("li"),tH=a("strong"),Dqe=o("vision-text-dual-encoder"),jqe=o(" \u2014 "),G7=a("a"),Nqe=o("VisionTextDualEncoderConfig"),qqe=o(" (VisionTextDualEncoder model)"),Gqe=l(),ng=a("li"),aH=a("strong"),Oqe=o("visual_bert"),Xqe=o(" \u2014 "),O7=a("a"),Vqe=o("VisualBertConfig"),zqe=o(" (VisualBert model)"),Wqe=l(),sg=a("li"),nH=a("strong"),Qqe=o("vit"),Hqe=o(" \u2014 "),X7=a("a"),Uqe=o("ViTConfig"),Jqe=o(" (ViT model)"),Yqe=l(),lg=a("li"),sH=a("strong"),Kqe=o("vit_mae"),Zqe=o(" \u2014 "),V7=a("a"),eGe=o("ViTMAEConfig"),oGe=o(" (ViTMAE model)"),rGe=l(),ig=a("li"),lH=a("strong"),tGe=o("wav2vec2"),aGe=o(" \u2014 "),z7=a("a"),nGe=o("Wav2Vec2Config"),sGe=o(" (Wav2Vec2 model)"),lGe=l(),dg=a("li"),iH=a("strong"),iGe=o("wavlm"),dGe=o(" \u2014 "),W7=a("a"),cGe=o("WavLMConfig"),fGe=o(" (WavLM model)"),mGe=l(),cg=a("li"),dH=a("strong"),gGe=o("xglm"),hGe=o(" \u2014 "),Q7=a("a"),pGe=o("XGLMConfig"),_Ge=o(" (XGLM model)"),uGe=l(),fg=a("li"),cH=a("strong"),bGe=o("xlm"),vGe=o(" \u2014 "),H7=a("a"),TGe=o("XLMConfig"),FGe=o(" (XLM model)"),CGe=l(),mg=a("li"),fH=a("strong"),MGe=o("xlm-prophetnet"),EGe=o(" \u2014 "),U7=a("a"),yGe=o("XLMProphetNetConfig"),wGe=o(" (XLMProphetNet model)"),AGe=l(),gg=a("li"),mH=a("strong"),LGe=o("xlm-roberta"),BGe=o(" \u2014 "),J7=a("a"),xGe=o("XLMRobertaConfig"),kGe=o(" (XLM-RoBERTa model)"),RGe=l(),hg=a("li"),gH=a("strong"),SGe=o("xlm-roberta-xl"),PGe=o(" \u2014 "),Y7=a("a"),$Ge=o("XLMRobertaXLConfig"),IGe=o(" (XLM-RoBERTa-XL model)"),DGe=l(),pg=a("li"),hH=a("strong"),jGe=o("xlnet"),NGe=o(" \u2014 "),K7=a("a"),qGe=o("XLNetConfig"),GGe=o(" (XLNet model)"),OGe=l(),_g=a("li"),pH=a("strong"),XGe=o("yoso"),VGe=o(" \u2014 "),Z7=a("a"),zGe=o("YosoConfig"),WGe=o(" (YOSO model)"),QGe=l(),_H=a("p"),HGe=o("Examples:"),UGe=l(),f(SE.$$.fragment),JGe=l(),ug=a("div"),f(PE.$$.fragment),YGe=l(),uH=a("p"),KGe=o("Register a new configuration for this class."),R7e=l(),ji=a("h2"),bg=a("a"),bH=a("span"),f($E.$$.fragment),ZGe=l(),vH=a("span"),eOe=o("AutoTokenizer"),S7e=l(),Vo=a("div"),f(IE.$$.fragment),oOe=l(),DE=a("p"),rOe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=a("a"),tOe=o("AutoTokenizer.from_pretrained()"),aOe=o(" class method."),nOe=l(),jE=a("p"),sOe=o("This class cannot be instantiated directly using "),TH=a("code"),lOe=o("__init__()"),iOe=o(" (throws an error)."),dOe=l(),mo=a("div"),f(NE.$$.fragment),cOe=l(),FH=a("p"),fOe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mOe=l(),Da=a("p"),gOe=o("The tokenizer class to instantiate is selected based on the "),CH=a("code"),hOe=o("model_type"),pOe=o(` property of the config object (either
passed as an argument or loaded from `),MH=a("code"),_Oe=o("pretrained_model_name_or_path"),uOe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EH=a("code"),bOe=o("pretrained_model_name_or_path"),vOe=o(":"),TOe=l(),M=a("ul"),Gn=a("li"),yH=a("strong"),FOe=o("albert"),COe=o(" \u2014 "),oB=a("a"),MOe=o("AlbertTokenizer"),EOe=o(" or "),rB=a("a"),yOe=o("AlbertTokenizerFast"),wOe=o(" (ALBERT model)"),AOe=l(),On=a("li"),wH=a("strong"),LOe=o("bart"),BOe=o(" \u2014 "),tB=a("a"),xOe=o("BartTokenizer"),kOe=o(" or "),aB=a("a"),ROe=o("BartTokenizerFast"),SOe=o(" (BART model)"),POe=l(),Xn=a("li"),AH=a("strong"),$Oe=o("barthez"),IOe=o(" \u2014 "),nB=a("a"),DOe=o("BarthezTokenizer"),jOe=o(" or "),sB=a("a"),NOe=o("BarthezTokenizerFast"),qOe=o(" (BARThez model)"),GOe=l(),vg=a("li"),LH=a("strong"),OOe=o("bartpho"),XOe=o(" \u2014 "),lB=a("a"),VOe=o("BartphoTokenizer"),zOe=o(" (BARTpho model)"),WOe=l(),Vn=a("li"),BH=a("strong"),QOe=o("bert"),HOe=o(" \u2014 "),iB=a("a"),UOe=o("BertTokenizer"),JOe=o(" or "),dB=a("a"),YOe=o("BertTokenizerFast"),KOe=o(" (BERT model)"),ZOe=l(),Tg=a("li"),xH=a("strong"),eXe=o("bert-generation"),oXe=o(" \u2014 "),cB=a("a"),rXe=o("BertGenerationTokenizer"),tXe=o(" (Bert Generation model)"),aXe=l(),Fg=a("li"),kH=a("strong"),nXe=o("bert-japanese"),sXe=o(" \u2014 "),fB=a("a"),lXe=o("BertJapaneseTokenizer"),iXe=o(" (BertJapanese model)"),dXe=l(),Cg=a("li"),RH=a("strong"),cXe=o("bertweet"),fXe=o(" \u2014 "),mB=a("a"),mXe=o("BertweetTokenizer"),gXe=o(" (Bertweet model)"),hXe=l(),zn=a("li"),SH=a("strong"),pXe=o("big_bird"),_Xe=o(" \u2014 "),gB=a("a"),uXe=o("BigBirdTokenizer"),bXe=o(" or "),hB=a("a"),vXe=o("BigBirdTokenizerFast"),TXe=o(" (BigBird model)"),FXe=l(),Wn=a("li"),PH=a("strong"),CXe=o("bigbird_pegasus"),MXe=o(" \u2014 "),pB=a("a"),EXe=o("PegasusTokenizer"),yXe=o(" or "),_B=a("a"),wXe=o("PegasusTokenizerFast"),AXe=o(" (BigBirdPegasus model)"),LXe=l(),Qn=a("li"),$H=a("strong"),BXe=o("blenderbot"),xXe=o(" \u2014 "),uB=a("a"),kXe=o("BlenderbotTokenizer"),RXe=o(" or "),bB=a("a"),SXe=o("BlenderbotTokenizerFast"),PXe=o(" (Blenderbot model)"),$Xe=l(),Mg=a("li"),IH=a("strong"),IXe=o("blenderbot-small"),DXe=o(" \u2014 "),vB=a("a"),jXe=o("BlenderbotSmallTokenizer"),NXe=o(" (BlenderbotSmall model)"),qXe=l(),Eg=a("li"),DH=a("strong"),GXe=o("byt5"),OXe=o(" \u2014 "),TB=a("a"),XXe=o("ByT5Tokenizer"),VXe=o(" (ByT5 model)"),zXe=l(),Hn=a("li"),jH=a("strong"),WXe=o("camembert"),QXe=o(" \u2014 "),FB=a("a"),HXe=o("CamembertTokenizer"),UXe=o(" or "),CB=a("a"),JXe=o("CamembertTokenizerFast"),YXe=o(" (CamemBERT model)"),KXe=l(),yg=a("li"),NH=a("strong"),ZXe=o("canine"),eVe=o(" \u2014 "),MB=a("a"),oVe=o("CanineTokenizer"),rVe=o(" (Canine model)"),tVe=l(),Un=a("li"),qH=a("strong"),aVe=o("clip"),nVe=o(" \u2014 "),EB=a("a"),sVe=o("CLIPTokenizer"),lVe=o(" or "),yB=a("a"),iVe=o("CLIPTokenizerFast"),dVe=o(" (CLIP model)"),cVe=l(),Jn=a("li"),GH=a("strong"),fVe=o("convbert"),mVe=o(" \u2014 "),wB=a("a"),gVe=o("ConvBertTokenizer"),hVe=o(" or "),AB=a("a"),pVe=o("ConvBertTokenizerFast"),_Ve=o(" (ConvBERT model)"),uVe=l(),Yn=a("li"),OH=a("strong"),bVe=o("cpm"),vVe=o(" \u2014 "),LB=a("a"),TVe=o("CpmTokenizer"),FVe=o(" or "),XH=a("code"),CVe=o("CpmTokenizerFast"),MVe=o(" (CPM model)"),EVe=l(),wg=a("li"),VH=a("strong"),yVe=o("ctrl"),wVe=o(" \u2014 "),BB=a("a"),AVe=o("CTRLTokenizer"),LVe=o(" (CTRL model)"),BVe=l(),Kn=a("li"),zH=a("strong"),xVe=o("deberta"),kVe=o(" \u2014 "),xB=a("a"),RVe=o("DebertaTokenizer"),SVe=o(" or "),kB=a("a"),PVe=o("DebertaTokenizerFast"),$Ve=o(" (DeBERTa model)"),IVe=l(),Ag=a("li"),WH=a("strong"),DVe=o("deberta-v2"),jVe=o(" \u2014 "),RB=a("a"),NVe=o("DebertaV2Tokenizer"),qVe=o(" (DeBERTa-v2 model)"),GVe=l(),Zn=a("li"),QH=a("strong"),OVe=o("distilbert"),XVe=o(" \u2014 "),SB=a("a"),VVe=o("DistilBertTokenizer"),zVe=o(" or "),PB=a("a"),WVe=o("DistilBertTokenizerFast"),QVe=o(" (DistilBERT model)"),HVe=l(),es=a("li"),HH=a("strong"),UVe=o("dpr"),JVe=o(" \u2014 "),$B=a("a"),YVe=o("DPRQuestionEncoderTokenizer"),KVe=o(" or "),IB=a("a"),ZVe=o("DPRQuestionEncoderTokenizerFast"),eze=o(" (DPR model)"),oze=l(),os=a("li"),UH=a("strong"),rze=o("electra"),tze=o(" \u2014 "),DB=a("a"),aze=o("ElectraTokenizer"),nze=o(" or "),jB=a("a"),sze=o("ElectraTokenizerFast"),lze=o(" (ELECTRA model)"),ize=l(),Lg=a("li"),JH=a("strong"),dze=o("flaubert"),cze=o(" \u2014 "),NB=a("a"),fze=o("FlaubertTokenizer"),mze=o(" (FlauBERT model)"),gze=l(),rs=a("li"),YH=a("strong"),hze=o("fnet"),pze=o(" \u2014 "),qB=a("a"),_ze=o("FNetTokenizer"),uze=o(" or "),GB=a("a"),bze=o("FNetTokenizerFast"),vze=o(" (FNet model)"),Tze=l(),Bg=a("li"),KH=a("strong"),Fze=o("fsmt"),Cze=o(" \u2014 "),OB=a("a"),Mze=o("FSMTTokenizer"),Eze=o(" (FairSeq Machine-Translation model)"),yze=l(),ts=a("li"),ZH=a("strong"),wze=o("funnel"),Aze=o(" \u2014 "),XB=a("a"),Lze=o("FunnelTokenizer"),Bze=o(" or "),VB=a("a"),xze=o("FunnelTokenizerFast"),kze=o(" (Funnel Transformer model)"),Rze=l(),as=a("li"),eU=a("strong"),Sze=o("gpt2"),Pze=o(" \u2014 "),zB=a("a"),$ze=o("GPT2Tokenizer"),Ize=o(" or "),WB=a("a"),Dze=o("GPT2TokenizerFast"),jze=o(" (OpenAI GPT-2 model)"),Nze=l(),ns=a("li"),oU=a("strong"),qze=o("gpt_neo"),Gze=o(" \u2014 "),QB=a("a"),Oze=o("GPT2Tokenizer"),Xze=o(" or "),HB=a("a"),Vze=o("GPT2TokenizerFast"),zze=o(" (GPT Neo model)"),Wze=l(),ss=a("li"),rU=a("strong"),Qze=o("herbert"),Hze=o(" \u2014 "),UB=a("a"),Uze=o("HerbertTokenizer"),Jze=o(" or "),JB=a("a"),Yze=o("HerbertTokenizerFast"),Kze=o(" (HerBERT model)"),Zze=l(),xg=a("li"),tU=a("strong"),eWe=o("hubert"),oWe=o(" \u2014 "),YB=a("a"),rWe=o("Wav2Vec2CTCTokenizer"),tWe=o(" (Hubert model)"),aWe=l(),ls=a("li"),aU=a("strong"),nWe=o("ibert"),sWe=o(" \u2014 "),KB=a("a"),lWe=o("RobertaTokenizer"),iWe=o(" or "),ZB=a("a"),dWe=o("RobertaTokenizerFast"),cWe=o(" (I-BERT model)"),fWe=l(),is=a("li"),nU=a("strong"),mWe=o("layoutlm"),gWe=o(" \u2014 "),ex=a("a"),hWe=o("LayoutLMTokenizer"),pWe=o(" or "),ox=a("a"),_We=o("LayoutLMTokenizerFast"),uWe=o(" (LayoutLM model)"),bWe=l(),ds=a("li"),sU=a("strong"),vWe=o("layoutlmv2"),TWe=o(" \u2014 "),rx=a("a"),FWe=o("LayoutLMv2Tokenizer"),CWe=o(" or "),tx=a("a"),MWe=o("LayoutLMv2TokenizerFast"),EWe=o(" (LayoutLMv2 model)"),yWe=l(),cs=a("li"),lU=a("strong"),wWe=o("layoutxlm"),AWe=o(" \u2014 "),ax=a("a"),LWe=o("LayoutXLMTokenizer"),BWe=o(" or "),nx=a("a"),xWe=o("LayoutXLMTokenizerFast"),kWe=o(" (LayoutXLM model)"),RWe=l(),fs=a("li"),iU=a("strong"),SWe=o("led"),PWe=o(" \u2014 "),sx=a("a"),$We=o("LEDTokenizer"),IWe=o(" or "),lx=a("a"),DWe=o("LEDTokenizerFast"),jWe=o(" (LED model)"),NWe=l(),ms=a("li"),dU=a("strong"),qWe=o("longformer"),GWe=o(" \u2014 "),ix=a("a"),OWe=o("LongformerTokenizer"),XWe=o(" or "),dx=a("a"),VWe=o("LongformerTokenizerFast"),zWe=o(" (Longformer model)"),WWe=l(),kg=a("li"),cU=a("strong"),QWe=o("luke"),HWe=o(" \u2014 "),cx=a("a"),UWe=o("LukeTokenizer"),JWe=o(" (LUKE model)"),YWe=l(),gs=a("li"),fU=a("strong"),KWe=o("lxmert"),ZWe=o(" \u2014 "),fx=a("a"),eQe=o("LxmertTokenizer"),oQe=o(" or "),mx=a("a"),rQe=o("LxmertTokenizerFast"),tQe=o(" (LXMERT model)"),aQe=l(),Rg=a("li"),mU=a("strong"),nQe=o("m2m_100"),sQe=o(" \u2014 "),gx=a("a"),lQe=o("M2M100Tokenizer"),iQe=o(" (M2M100 model)"),dQe=l(),Sg=a("li"),gU=a("strong"),cQe=o("marian"),fQe=o(" \u2014 "),hx=a("a"),mQe=o("MarianTokenizer"),gQe=o(" (Marian model)"),hQe=l(),hs=a("li"),hU=a("strong"),pQe=o("mbart"),_Qe=o(" \u2014 "),px=a("a"),uQe=o("MBartTokenizer"),bQe=o(" or "),_x=a("a"),vQe=o("MBartTokenizerFast"),TQe=o(" (mBART model)"),FQe=l(),ps=a("li"),pU=a("strong"),CQe=o("mbart50"),MQe=o(" \u2014 "),ux=a("a"),EQe=o("MBart50Tokenizer"),yQe=o(" or "),bx=a("a"),wQe=o("MBart50TokenizerFast"),AQe=o(" (mBART-50 model)"),LQe=l(),Pg=a("li"),_U=a("strong"),BQe=o("mluke"),xQe=o(" \u2014 "),vx=a("a"),kQe=o("MLukeTokenizer"),RQe=o(" (mLUKE model)"),SQe=l(),_s=a("li"),uU=a("strong"),PQe=o("mobilebert"),$Qe=o(" \u2014 "),Tx=a("a"),IQe=o("MobileBertTokenizer"),DQe=o(" or "),Fx=a("a"),jQe=o("MobileBertTokenizerFast"),NQe=o(" (MobileBERT model)"),qQe=l(),us=a("li"),bU=a("strong"),GQe=o("mpnet"),OQe=o(" \u2014 "),Cx=a("a"),XQe=o("MPNetTokenizer"),VQe=o(" or "),Mx=a("a"),zQe=o("MPNetTokenizerFast"),WQe=o(" (MPNet model)"),QQe=l(),bs=a("li"),vU=a("strong"),HQe=o("mt5"),UQe=o(" \u2014 "),Ex=a("a"),JQe=o("MT5Tokenizer"),YQe=o(" or "),yx=a("a"),KQe=o("MT5TokenizerFast"),ZQe=o(" (mT5 model)"),eHe=l(),vs=a("li"),TU=a("strong"),oHe=o("openai-gpt"),rHe=o(" \u2014 "),wx=a("a"),tHe=o("OpenAIGPTTokenizer"),aHe=o(" or "),Ax=a("a"),nHe=o("OpenAIGPTTokenizerFast"),sHe=o(" (OpenAI GPT model)"),lHe=l(),Ts=a("li"),FU=a("strong"),iHe=o("pegasus"),dHe=o(" \u2014 "),Lx=a("a"),cHe=o("PegasusTokenizer"),fHe=o(" or "),Bx=a("a"),mHe=o("PegasusTokenizerFast"),gHe=o(" (Pegasus model)"),hHe=l(),$g=a("li"),CU=a("strong"),pHe=o("perceiver"),_He=o(" \u2014 "),xx=a("a"),uHe=o("PerceiverTokenizer"),bHe=o(" (Perceiver model)"),vHe=l(),Ig=a("li"),MU=a("strong"),THe=o("phobert"),FHe=o(" \u2014 "),kx=a("a"),CHe=o("PhobertTokenizer"),MHe=o(" (PhoBERT model)"),EHe=l(),Dg=a("li"),EU=a("strong"),yHe=o("plbart"),wHe=o(" \u2014 "),Rx=a("a"),AHe=o("PLBartTokenizer"),LHe=o(" (PLBart model)"),BHe=l(),jg=a("li"),yU=a("strong"),xHe=o("prophetnet"),kHe=o(" \u2014 "),Sx=a("a"),RHe=o("ProphetNetTokenizer"),SHe=o(" (ProphetNet model)"),PHe=l(),Fs=a("li"),wU=a("strong"),$He=o("qdqbert"),IHe=o(" \u2014 "),Px=a("a"),DHe=o("BertTokenizer"),jHe=o(" or "),$x=a("a"),NHe=o("BertTokenizerFast"),qHe=o(" (QDQBert model)"),GHe=l(),Ng=a("li"),AU=a("strong"),OHe=o("rag"),XHe=o(" \u2014 "),Ix=a("a"),VHe=o("RagTokenizer"),zHe=o(" (RAG model)"),WHe=l(),Cs=a("li"),LU=a("strong"),QHe=o("reformer"),HHe=o(" \u2014 "),Dx=a("a"),UHe=o("ReformerTokenizer"),JHe=o(" or "),jx=a("a"),YHe=o("ReformerTokenizerFast"),KHe=o(" (Reformer model)"),ZHe=l(),Ms=a("li"),BU=a("strong"),eUe=o("rembert"),oUe=o(" \u2014 "),Nx=a("a"),rUe=o("RemBertTokenizer"),tUe=o(" or "),qx=a("a"),aUe=o("RemBertTokenizerFast"),nUe=o(" (RemBERT model)"),sUe=l(),Es=a("li"),xU=a("strong"),lUe=o("retribert"),iUe=o(" \u2014 "),Gx=a("a"),dUe=o("RetriBertTokenizer"),cUe=o(" or "),Ox=a("a"),fUe=o("RetriBertTokenizerFast"),mUe=o(" (RetriBERT model)"),gUe=l(),ys=a("li"),kU=a("strong"),hUe=o("roberta"),pUe=o(" \u2014 "),Xx=a("a"),_Ue=o("RobertaTokenizer"),uUe=o(" or "),Vx=a("a"),bUe=o("RobertaTokenizerFast"),vUe=o(" (RoBERTa model)"),TUe=l(),ws=a("li"),RU=a("strong"),FUe=o("roformer"),CUe=o(" \u2014 "),zx=a("a"),MUe=o("RoFormerTokenizer"),EUe=o(" or "),Wx=a("a"),yUe=o("RoFormerTokenizerFast"),wUe=o(" (RoFormer model)"),AUe=l(),qg=a("li"),SU=a("strong"),LUe=o("speech_to_text"),BUe=o(" \u2014 "),Qx=a("a"),xUe=o("Speech2TextTokenizer"),kUe=o(" (Speech2Text model)"),RUe=l(),Gg=a("li"),PU=a("strong"),SUe=o("speech_to_text_2"),PUe=o(" \u2014 "),Hx=a("a"),$Ue=o("Speech2Text2Tokenizer"),IUe=o(" (Speech2Text2 model)"),DUe=l(),As=a("li"),$U=a("strong"),jUe=o("splinter"),NUe=o(" \u2014 "),Ux=a("a"),qUe=o("SplinterTokenizer"),GUe=o(" or "),Jx=a("a"),OUe=o("SplinterTokenizerFast"),XUe=o(" (Splinter model)"),VUe=l(),Ls=a("li"),IU=a("strong"),zUe=o("squeezebert"),WUe=o(" \u2014 "),Yx=a("a"),QUe=o("SqueezeBertTokenizer"),HUe=o(" or "),Kx=a("a"),UUe=o("SqueezeBertTokenizerFast"),JUe=o(" (SqueezeBERT model)"),YUe=l(),Bs=a("li"),DU=a("strong"),KUe=o("t5"),ZUe=o(" \u2014 "),Zx=a("a"),eJe=o("T5Tokenizer"),oJe=o(" or "),ek=a("a"),rJe=o("T5TokenizerFast"),tJe=o(" (T5 model)"),aJe=l(),Og=a("li"),jU=a("strong"),nJe=o("tapas"),sJe=o(" \u2014 "),ok=a("a"),lJe=o("TapasTokenizer"),iJe=o(" (TAPAS model)"),dJe=l(),Xg=a("li"),NU=a("strong"),cJe=o("transfo-xl"),fJe=o(" \u2014 "),rk=a("a"),mJe=o("TransfoXLTokenizer"),gJe=o(" (Transformer-XL model)"),hJe=l(),Vg=a("li"),qU=a("strong"),pJe=o("wav2vec2"),_Je=o(" \u2014 "),tk=a("a"),uJe=o("Wav2Vec2CTCTokenizer"),bJe=o(" (Wav2Vec2 model)"),vJe=l(),zg=a("li"),GU=a("strong"),TJe=o("wav2vec2_phoneme"),FJe=o(" \u2014 "),ak=a("a"),CJe=o("Wav2Vec2PhonemeCTCTokenizer"),MJe=o(" (Wav2Vec2Phoneme model)"),EJe=l(),xs=a("li"),OU=a("strong"),yJe=o("xglm"),wJe=o(" \u2014 "),nk=a("a"),AJe=o("XGLMTokenizer"),LJe=o(" or "),sk=a("a"),BJe=o("XGLMTokenizerFast"),xJe=o(" (XGLM model)"),kJe=l(),Wg=a("li"),XU=a("strong"),RJe=o("xlm"),SJe=o(" \u2014 "),lk=a("a"),PJe=o("XLMTokenizer"),$Je=o(" (XLM model)"),IJe=l(),Qg=a("li"),VU=a("strong"),DJe=o("xlm-prophetnet"),jJe=o(" \u2014 "),ik=a("a"),NJe=o("XLMProphetNetTokenizer"),qJe=o(" (XLMProphetNet model)"),GJe=l(),ks=a("li"),zU=a("strong"),OJe=o("xlm-roberta"),XJe=o(" \u2014 "),dk=a("a"),VJe=o("XLMRobertaTokenizer"),zJe=o(" or "),ck=a("a"),WJe=o("XLMRobertaTokenizerFast"),QJe=o(" (XLM-RoBERTa model)"),HJe=l(),Rs=a("li"),WU=a("strong"),UJe=o("xlnet"),JJe=o(" \u2014 "),fk=a("a"),YJe=o("XLNetTokenizer"),KJe=o(" or "),mk=a("a"),ZJe=o("XLNetTokenizerFast"),eYe=o(" (XLNet model)"),oYe=l(),QU=a("p"),rYe=o("Examples:"),tYe=l(),f(qE.$$.fragment),aYe=l(),Hg=a("div"),f(GE.$$.fragment),nYe=l(),HU=a("p"),sYe=o("Register a new tokenizer in this mapping."),P7e=l(),Ni=a("h2"),Ug=a("a"),UU=a("span"),f(OE.$$.fragment),lYe=l(),JU=a("span"),iYe=o("AutoFeatureExtractor"),$7e=l(),zo=a("div"),f(XE.$$.fragment),dYe=l(),VE=a("p"),cYe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gk=a("a"),fYe=o("AutoFeatureExtractor.from_pretrained()"),mYe=o(" class method."),gYe=l(),zE=a("p"),hYe=o("This class cannot be instantiated directly using "),YU=a("code"),pYe=o("__init__()"),_Ye=o(" (throws an error)."),uYe=l(),xe=a("div"),f(WE.$$.fragment),bYe=l(),KU=a("p"),vYe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),TYe=l(),ja=a("p"),FYe=o("The feature extractor class to instantiate is selected based on the "),ZU=a("code"),CYe=o("model_type"),MYe=o(` property of the config object
(either passed as an argument or loaded from `),eJ=a("code"),EYe=o("pretrained_model_name_or_path"),yYe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),oJ=a("code"),wYe=o("pretrained_model_name_or_path"),AYe=o(":"),LYe=l(),se=a("ul"),Jg=a("li"),rJ=a("strong"),BYe=o("beit"),xYe=o(" \u2014 "),hk=a("a"),kYe=o("BeitFeatureExtractor"),RYe=o(" (BEiT model)"),SYe=l(),Yg=a("li"),tJ=a("strong"),PYe=o("clip"),$Ye=o(" \u2014 "),pk=a("a"),IYe=o("CLIPFeatureExtractor"),DYe=o(" (CLIP model)"),jYe=l(),Kg=a("li"),aJ=a("strong"),NYe=o("convnext"),qYe=o(" \u2014 "),_k=a("a"),GYe=o("ConvNextFeatureExtractor"),OYe=o(" (ConvNext model)"),XYe=l(),Zg=a("li"),nJ=a("strong"),VYe=o("deit"),zYe=o(" \u2014 "),uk=a("a"),WYe=o("DeiTFeatureExtractor"),QYe=o(" (DeiT model)"),HYe=l(),eh=a("li"),sJ=a("strong"),UYe=o("detr"),JYe=o(" \u2014 "),bk=a("a"),YYe=o("DetrFeatureExtractor"),KYe=o(" (DETR model)"),ZYe=l(),oh=a("li"),lJ=a("strong"),eKe=o("hubert"),oKe=o(" \u2014 "),vk=a("a"),rKe=o("Wav2Vec2FeatureExtractor"),tKe=o(" (Hubert model)"),aKe=l(),rh=a("li"),iJ=a("strong"),nKe=o("layoutlmv2"),sKe=o(" \u2014 "),Tk=a("a"),lKe=o("LayoutLMv2FeatureExtractor"),iKe=o(" (LayoutLMv2 model)"),dKe=l(),th=a("li"),dJ=a("strong"),cKe=o("perceiver"),fKe=o(" \u2014 "),Fk=a("a"),mKe=o("PerceiverFeatureExtractor"),gKe=o(" (Perceiver model)"),hKe=l(),ah=a("li"),cJ=a("strong"),pKe=o("poolformer"),_Ke=o(" \u2014 "),Ck=a("a"),uKe=o("PoolFormerFeatureExtractor"),bKe=o(" (PoolFormer model)"),vKe=l(),nh=a("li"),fJ=a("strong"),TKe=o("segformer"),FKe=o(" \u2014 "),Mk=a("a"),CKe=o("SegformerFeatureExtractor"),MKe=o(" (SegFormer model)"),EKe=l(),sh=a("li"),mJ=a("strong"),yKe=o("speech_to_text"),wKe=o(" \u2014 "),Ek=a("a"),AKe=o("Speech2TextFeatureExtractor"),LKe=o(" (Speech2Text model)"),BKe=l(),lh=a("li"),gJ=a("strong"),xKe=o("swin"),kKe=o(" \u2014 "),yk=a("a"),RKe=o("ViTFeatureExtractor"),SKe=o(" (Swin model)"),PKe=l(),ih=a("li"),hJ=a("strong"),$Ke=o("vit"),IKe=o(" \u2014 "),wk=a("a"),DKe=o("ViTFeatureExtractor"),jKe=o(" (ViT model)"),NKe=l(),dh=a("li"),pJ=a("strong"),qKe=o("vit_mae"),GKe=o(" \u2014 "),Ak=a("a"),OKe=o("ViTFeatureExtractor"),XKe=o(" (ViTMAE model)"),VKe=l(),ch=a("li"),_J=a("strong"),zKe=o("wav2vec2"),WKe=o(" \u2014 "),Lk=a("a"),QKe=o("Wav2Vec2FeatureExtractor"),HKe=o(" (Wav2Vec2 model)"),UKe=l(),f(fh.$$.fragment),JKe=l(),uJ=a("p"),YKe=o("Examples:"),KKe=l(),f(QE.$$.fragment),ZKe=l(),mh=a("div"),f(HE.$$.fragment),eZe=l(),bJ=a("p"),oZe=o("Register a new feature extractor for this class."),I7e=l(),qi=a("h2"),gh=a("a"),vJ=a("span"),f(UE.$$.fragment),rZe=l(),TJ=a("span"),tZe=o("AutoProcessor"),D7e=l(),Wo=a("div"),f(JE.$$.fragment),aZe=l(),YE=a("p"),nZe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Bk=a("a"),sZe=o("AutoProcessor.from_pretrained()"),lZe=o(" class method."),iZe=l(),KE=a("p"),dZe=o("This class cannot be instantiated directly using "),FJ=a("code"),cZe=o("__init__()"),fZe=o(" (throws an error)."),mZe=l(),ke=a("div"),f(ZE.$$.fragment),gZe=l(),CJ=a("p"),hZe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pZe=l(),Gi=a("p"),_Ze=o("The processor class to instantiate is selected based on the "),MJ=a("code"),uZe=o("model_type"),bZe=o(` property of the config object (either
passed as an argument or loaded from `),EJ=a("code"),vZe=o("pretrained_model_name_or_path"),TZe=o(" if possible):"),FZe=l(),we=a("ul"),hh=a("li"),yJ=a("strong"),CZe=o("clip"),MZe=o(" \u2014 "),xk=a("a"),EZe=o("CLIPProcessor"),yZe=o(" (CLIP model)"),wZe=l(),ph=a("li"),wJ=a("strong"),AZe=o("layoutlmv2"),LZe=o(" \u2014 "),kk=a("a"),BZe=o("LayoutLMv2Processor"),xZe=o(" (LayoutLMv2 model)"),kZe=l(),_h=a("li"),AJ=a("strong"),RZe=o("layoutxlm"),SZe=o(" \u2014 "),Rk=a("a"),PZe=o("LayoutXLMProcessor"),$Ze=o(" (LayoutXLM model)"),IZe=l(),uh=a("li"),LJ=a("strong"),DZe=o("speech_to_text"),jZe=o(" \u2014 "),Sk=a("a"),NZe=o("Speech2TextProcessor"),qZe=o(" (Speech2Text model)"),GZe=l(),bh=a("li"),BJ=a("strong"),OZe=o("speech_to_text_2"),XZe=o(" \u2014 "),Pk=a("a"),VZe=o("Speech2Text2Processor"),zZe=o(" (Speech2Text2 model)"),WZe=l(),vh=a("li"),xJ=a("strong"),QZe=o("trocr"),HZe=o(" \u2014 "),$k=a("a"),UZe=o("TrOCRProcessor"),JZe=o(" (TrOCR model)"),YZe=l(),Th=a("li"),kJ=a("strong"),KZe=o("vision-text-dual-encoder"),ZZe=o(" \u2014 "),Ik=a("a"),eeo=o("VisionTextDualEncoderProcessor"),oeo=o(" (VisionTextDualEncoder model)"),reo=l(),Fh=a("li"),RJ=a("strong"),teo=o("wav2vec2"),aeo=o(" \u2014 "),Dk=a("a"),neo=o("Wav2Vec2Processor"),seo=o(" (Wav2Vec2 model)"),leo=l(),f(Ch.$$.fragment),ieo=l(),SJ=a("p"),deo=o("Examples:"),ceo=l(),f(e3.$$.fragment),feo=l(),Mh=a("div"),f(o3.$$.fragment),meo=l(),PJ=a("p"),geo=o("Register a new processor for this class."),j7e=l(),Oi=a("h2"),Eh=a("a"),$J=a("span"),f(r3.$$.fragment),heo=l(),IJ=a("span"),peo=o("AutoModel"),N7e=l(),Qo=a("div"),f(t3.$$.fragment),_eo=l(),Xi=a("p"),ueo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DJ=a("code"),beo=o("from_pretrained()"),veo=o("class method or the "),jJ=a("code"),Teo=o("from_config()"),Feo=o(`class
method.`),Ceo=l(),a3=a("p"),Meo=o("This class cannot be instantiated directly using "),NJ=a("code"),Eeo=o("__init__()"),yeo=o(" (throws an error)."),weo=l(),qr=a("div"),f(n3.$$.fragment),Aeo=l(),qJ=a("p"),Leo=o("Instantiates one of the base model classes of the library from a configuration."),Beo=l(),Vi=a("p"),xeo=o(`Note:
Loading a model from its configuration file does `),GJ=a("strong"),keo=o("not"),Reo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("code"),Seo=o("from_pretrained()"),Peo=o("to load the model weights."),$eo=l(),XJ=a("p"),Ieo=o("Examples:"),Deo=l(),f(s3.$$.fragment),jeo=l(),Re=a("div"),f(l3.$$.fragment),Neo=l(),VJ=a("p"),qeo=o("Instantiate one of the base model classes of the library from a pretrained model."),Geo=l(),Na=a("p"),Oeo=o("The model class to instantiate is selected based on the "),zJ=a("code"),Xeo=o("model_type"),Veo=o(` property of the config object (either
passed as an argument or loaded from `),WJ=a("code"),zeo=o("pretrained_model_name_or_path"),Weo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QJ=a("code"),Qeo=o("pretrained_model_name_or_path"),Heo=o(":"),Ueo=l(),F=a("ul"),yh=a("li"),HJ=a("strong"),Jeo=o("albert"),Yeo=o(" \u2014 "),jk=a("a"),Keo=o("AlbertModel"),Zeo=o(" (ALBERT model)"),eoo=l(),wh=a("li"),UJ=a("strong"),ooo=o("bart"),roo=o(" \u2014 "),Nk=a("a"),too=o("BartModel"),aoo=o(" (BART model)"),noo=l(),Ah=a("li"),JJ=a("strong"),soo=o("beit"),loo=o(" \u2014 "),qk=a("a"),ioo=o("BeitModel"),doo=o(" (BEiT model)"),coo=l(),Lh=a("li"),YJ=a("strong"),foo=o("bert"),moo=o(" \u2014 "),Gk=a("a"),goo=o("BertModel"),hoo=o(" (BERT model)"),poo=l(),Bh=a("li"),KJ=a("strong"),_oo=o("bert-generation"),uoo=o(" \u2014 "),Ok=a("a"),boo=o("BertGenerationEncoder"),voo=o(" (Bert Generation model)"),Too=l(),xh=a("li"),ZJ=a("strong"),Foo=o("big_bird"),Coo=o(" \u2014 "),Xk=a("a"),Moo=o("BigBirdModel"),Eoo=o(" (BigBird model)"),yoo=l(),kh=a("li"),eY=a("strong"),woo=o("bigbird_pegasus"),Aoo=o(" \u2014 "),Vk=a("a"),Loo=o("BigBirdPegasusModel"),Boo=o(" (BigBirdPegasus model)"),xoo=l(),Rh=a("li"),oY=a("strong"),koo=o("blenderbot"),Roo=o(" \u2014 "),zk=a("a"),Soo=o("BlenderbotModel"),Poo=o(" (Blenderbot model)"),$oo=l(),Sh=a("li"),rY=a("strong"),Ioo=o("blenderbot-small"),Doo=o(" \u2014 "),Wk=a("a"),joo=o("BlenderbotSmallModel"),Noo=o(" (BlenderbotSmall model)"),qoo=l(),Ph=a("li"),tY=a("strong"),Goo=o("camembert"),Ooo=o(" \u2014 "),Qk=a("a"),Xoo=o("CamembertModel"),Voo=o(" (CamemBERT model)"),zoo=l(),$h=a("li"),aY=a("strong"),Woo=o("canine"),Qoo=o(" \u2014 "),Hk=a("a"),Hoo=o("CanineModel"),Uoo=o(" (Canine model)"),Joo=l(),Ih=a("li"),nY=a("strong"),Yoo=o("clip"),Koo=o(" \u2014 "),Uk=a("a"),Zoo=o("CLIPModel"),ero=o(" (CLIP model)"),oro=l(),Dh=a("li"),sY=a("strong"),rro=o("convbert"),tro=o(" \u2014 "),Jk=a("a"),aro=o("ConvBertModel"),nro=o(" (ConvBERT model)"),sro=l(),jh=a("li"),lY=a("strong"),lro=o("convnext"),iro=o(" \u2014 "),Yk=a("a"),dro=o("ConvNextModel"),cro=o(" (ConvNext model)"),fro=l(),Nh=a("li"),iY=a("strong"),mro=o("ctrl"),gro=o(" \u2014 "),Kk=a("a"),hro=o("CTRLModel"),pro=o(" (CTRL model)"),_ro=l(),qh=a("li"),dY=a("strong"),uro=o("data2vec-audio"),bro=o(" \u2014 "),Zk=a("a"),vro=o("Data2VecAudioModel"),Tro=o(" (Data2VecAudio model)"),Fro=l(),Gh=a("li"),cY=a("strong"),Cro=o("data2vec-text"),Mro=o(" \u2014 "),eR=a("a"),Ero=o("Data2VecTextModel"),yro=o(" (Data2VecText model)"),wro=l(),Oh=a("li"),fY=a("strong"),Aro=o("deberta"),Lro=o(" \u2014 "),oR=a("a"),Bro=o("DebertaModel"),xro=o(" (DeBERTa model)"),kro=l(),Xh=a("li"),mY=a("strong"),Rro=o("deberta-v2"),Sro=o(" \u2014 "),rR=a("a"),Pro=o("DebertaV2Model"),$ro=o(" (DeBERTa-v2 model)"),Iro=l(),Vh=a("li"),gY=a("strong"),Dro=o("deit"),jro=o(" \u2014 "),tR=a("a"),Nro=o("DeiTModel"),qro=o(" (DeiT model)"),Gro=l(),zh=a("li"),hY=a("strong"),Oro=o("detr"),Xro=o(" \u2014 "),aR=a("a"),Vro=o("DetrModel"),zro=o(" (DETR model)"),Wro=l(),Wh=a("li"),pY=a("strong"),Qro=o("distilbert"),Hro=o(" \u2014 "),nR=a("a"),Uro=o("DistilBertModel"),Jro=o(" (DistilBERT model)"),Yro=l(),Qh=a("li"),_Y=a("strong"),Kro=o("dpr"),Zro=o(" \u2014 "),sR=a("a"),eto=o("DPRQuestionEncoder"),oto=o(" (DPR model)"),rto=l(),Hh=a("li"),uY=a("strong"),tto=o("electra"),ato=o(" \u2014 "),lR=a("a"),nto=o("ElectraModel"),sto=o(" (ELECTRA model)"),lto=l(),Uh=a("li"),bY=a("strong"),ito=o("flaubert"),dto=o(" \u2014 "),iR=a("a"),cto=o("FlaubertModel"),fto=o(" (FlauBERT model)"),mto=l(),Jh=a("li"),vY=a("strong"),gto=o("fnet"),hto=o(" \u2014 "),dR=a("a"),pto=o("FNetModel"),_to=o(" (FNet model)"),uto=l(),Yh=a("li"),TY=a("strong"),bto=o("fsmt"),vto=o(" \u2014 "),cR=a("a"),Tto=o("FSMTModel"),Fto=o(" (FairSeq Machine-Translation model)"),Cto=l(),Ss=a("li"),FY=a("strong"),Mto=o("funnel"),Eto=o(" \u2014 "),fR=a("a"),yto=o("FunnelModel"),wto=o(" or "),mR=a("a"),Ato=o("FunnelBaseModel"),Lto=o(" (Funnel Transformer model)"),Bto=l(),Kh=a("li"),CY=a("strong"),xto=o("gpt2"),kto=o(" \u2014 "),gR=a("a"),Rto=o("GPT2Model"),Sto=o(" (OpenAI GPT-2 model)"),Pto=l(),Zh=a("li"),MY=a("strong"),$to=o("gpt_neo"),Ito=o(" \u2014 "),hR=a("a"),Dto=o("GPTNeoModel"),jto=o(" (GPT Neo model)"),Nto=l(),ep=a("li"),EY=a("strong"),qto=o("gptj"),Gto=o(" \u2014 "),pR=a("a"),Oto=o("GPTJModel"),Xto=o(" (GPT-J model)"),Vto=l(),op=a("li"),yY=a("strong"),zto=o("hubert"),Wto=o(" \u2014 "),_R=a("a"),Qto=o("HubertModel"),Hto=o(" (Hubert model)"),Uto=l(),rp=a("li"),wY=a("strong"),Jto=o("ibert"),Yto=o(" \u2014 "),uR=a("a"),Kto=o("IBertModel"),Zto=o(" (I-BERT model)"),eao=l(),tp=a("li"),AY=a("strong"),oao=o("imagegpt"),rao=o(" \u2014 "),bR=a("a"),tao=o("ImageGPTModel"),aao=o(" (ImageGPT model)"),nao=l(),ap=a("li"),LY=a("strong"),sao=o("layoutlm"),lao=o(" \u2014 "),vR=a("a"),iao=o("LayoutLMModel"),dao=o(" (LayoutLM model)"),cao=l(),np=a("li"),BY=a("strong"),fao=o("layoutlmv2"),mao=o(" \u2014 "),TR=a("a"),gao=o("LayoutLMv2Model"),hao=o(" (LayoutLMv2 model)"),pao=l(),sp=a("li"),xY=a("strong"),_ao=o("led"),uao=o(" \u2014 "),FR=a("a"),bao=o("LEDModel"),vao=o(" (LED model)"),Tao=l(),lp=a("li"),kY=a("strong"),Fao=o("longformer"),Cao=o(" \u2014 "),CR=a("a"),Mao=o("LongformerModel"),Eao=o(" (Longformer model)"),yao=l(),ip=a("li"),RY=a("strong"),wao=o("luke"),Aao=o(" \u2014 "),MR=a("a"),Lao=o("LukeModel"),Bao=o(" (LUKE model)"),xao=l(),dp=a("li"),SY=a("strong"),kao=o("lxmert"),Rao=o(" \u2014 "),ER=a("a"),Sao=o("LxmertModel"),Pao=o(" (LXMERT model)"),$ao=l(),cp=a("li"),PY=a("strong"),Iao=o("m2m_100"),Dao=o(" \u2014 "),yR=a("a"),jao=o("M2M100Model"),Nao=o(" (M2M100 model)"),qao=l(),fp=a("li"),$Y=a("strong"),Gao=o("marian"),Oao=o(" \u2014 "),wR=a("a"),Xao=o("MarianModel"),Vao=o(" (Marian model)"),zao=l(),mp=a("li"),IY=a("strong"),Wao=o("maskformer"),Qao=o(" \u2014 "),AR=a("a"),Hao=o("MaskFormerModel"),Uao=o(" (MaskFormer model)"),Jao=l(),gp=a("li"),DY=a("strong"),Yao=o("mbart"),Kao=o(" \u2014 "),LR=a("a"),Zao=o("MBartModel"),eno=o(" (mBART model)"),ono=l(),hp=a("li"),jY=a("strong"),rno=o("megatron-bert"),tno=o(" \u2014 "),BR=a("a"),ano=o("MegatronBertModel"),nno=o(" (MegatronBert model)"),sno=l(),pp=a("li"),NY=a("strong"),lno=o("mobilebert"),ino=o(" \u2014 "),xR=a("a"),dno=o("MobileBertModel"),cno=o(" (MobileBERT model)"),fno=l(),_p=a("li"),qY=a("strong"),mno=o("mpnet"),gno=o(" \u2014 "),kR=a("a"),hno=o("MPNetModel"),pno=o(" (MPNet model)"),_no=l(),up=a("li"),GY=a("strong"),uno=o("mt5"),bno=o(" \u2014 "),RR=a("a"),vno=o("MT5Model"),Tno=o(" (mT5 model)"),Fno=l(),bp=a("li"),OY=a("strong"),Cno=o("nystromformer"),Mno=o(" \u2014 "),SR=a("a"),Eno=o("NystromformerModel"),yno=o(" (Nystromformer model)"),wno=l(),vp=a("li"),XY=a("strong"),Ano=o("openai-gpt"),Lno=o(" \u2014 "),PR=a("a"),Bno=o("OpenAIGPTModel"),xno=o(" (OpenAI GPT model)"),kno=l(),Tp=a("li"),VY=a("strong"),Rno=o("pegasus"),Sno=o(" \u2014 "),$R=a("a"),Pno=o("PegasusModel"),$no=o(" (Pegasus model)"),Ino=l(),Fp=a("li"),zY=a("strong"),Dno=o("perceiver"),jno=o(" \u2014 "),IR=a("a"),Nno=o("PerceiverModel"),qno=o(" (Perceiver model)"),Gno=l(),Cp=a("li"),WY=a("strong"),Ono=o("plbart"),Xno=o(" \u2014 "),DR=a("a"),Vno=o("PLBartModel"),zno=o(" (PLBart model)"),Wno=l(),Mp=a("li"),QY=a("strong"),Qno=o("poolformer"),Hno=o(" \u2014 "),jR=a("a"),Uno=o("PoolFormerModel"),Jno=o(" (PoolFormer model)"),Yno=l(),Ep=a("li"),HY=a("strong"),Kno=o("prophetnet"),Zno=o(" \u2014 "),NR=a("a"),eso=o("ProphetNetModel"),oso=o(" (ProphetNet model)"),rso=l(),yp=a("li"),UY=a("strong"),tso=o("qdqbert"),aso=o(" \u2014 "),qR=a("a"),nso=o("QDQBertModel"),sso=o(" (QDQBert model)"),lso=l(),wp=a("li"),JY=a("strong"),iso=o("reformer"),dso=o(" \u2014 "),GR=a("a"),cso=o("ReformerModel"),fso=o(" (Reformer model)"),mso=l(),Ap=a("li"),YY=a("strong"),gso=o("rembert"),hso=o(" \u2014 "),OR=a("a"),pso=o("RemBertModel"),_so=o(" (RemBERT model)"),uso=l(),Lp=a("li"),KY=a("strong"),bso=o("retribert"),vso=o(" \u2014 "),XR=a("a"),Tso=o("RetriBertModel"),Fso=o(" (RetriBERT model)"),Cso=l(),Bp=a("li"),ZY=a("strong"),Mso=o("roberta"),Eso=o(" \u2014 "),VR=a("a"),yso=o("RobertaModel"),wso=o(" (RoBERTa model)"),Aso=l(),xp=a("li"),eK=a("strong"),Lso=o("roformer"),Bso=o(" \u2014 "),zR=a("a"),xso=o("RoFormerModel"),kso=o(" (RoFormer model)"),Rso=l(),kp=a("li"),oK=a("strong"),Sso=o("segformer"),Pso=o(" \u2014 "),WR=a("a"),$so=o("SegformerModel"),Iso=o(" (SegFormer model)"),Dso=l(),Rp=a("li"),rK=a("strong"),jso=o("sew"),Nso=o(" \u2014 "),QR=a("a"),qso=o("SEWModel"),Gso=o(" (SEW model)"),Oso=l(),Sp=a("li"),tK=a("strong"),Xso=o("sew-d"),Vso=o(" \u2014 "),HR=a("a"),zso=o("SEWDModel"),Wso=o(" (SEW-D model)"),Qso=l(),Pp=a("li"),aK=a("strong"),Hso=o("speech_to_text"),Uso=o(" \u2014 "),UR=a("a"),Jso=o("Speech2TextModel"),Yso=o(" (Speech2Text model)"),Kso=l(),$p=a("li"),nK=a("strong"),Zso=o("splinter"),elo=o(" \u2014 "),JR=a("a"),olo=o("SplinterModel"),rlo=o(" (Splinter model)"),tlo=l(),Ip=a("li"),sK=a("strong"),alo=o("squeezebert"),nlo=o(" \u2014 "),YR=a("a"),slo=o("SqueezeBertModel"),llo=o(" (SqueezeBERT model)"),ilo=l(),Dp=a("li"),lK=a("strong"),dlo=o("swin"),clo=o(" \u2014 "),KR=a("a"),flo=o("SwinModel"),mlo=o(" (Swin model)"),glo=l(),jp=a("li"),iK=a("strong"),hlo=o("t5"),plo=o(" \u2014 "),ZR=a("a"),_lo=o("T5Model"),ulo=o(" (T5 model)"),blo=l(),Np=a("li"),dK=a("strong"),vlo=o("tapas"),Tlo=o(" \u2014 "),eS=a("a"),Flo=o("TapasModel"),Clo=o(" (TAPAS model)"),Mlo=l(),qp=a("li"),cK=a("strong"),Elo=o("transfo-xl"),ylo=o(" \u2014 "),oS=a("a"),wlo=o("TransfoXLModel"),Alo=o(" (Transformer-XL model)"),Llo=l(),Gp=a("li"),fK=a("strong"),Blo=o("unispeech"),xlo=o(" \u2014 "),rS=a("a"),klo=o("UniSpeechModel"),Rlo=o(" (UniSpeech model)"),Slo=l(),Op=a("li"),mK=a("strong"),Plo=o("unispeech-sat"),$lo=o(" \u2014 "),tS=a("a"),Ilo=o("UniSpeechSatModel"),Dlo=o(" (UniSpeechSat model)"),jlo=l(),Xp=a("li"),gK=a("strong"),Nlo=o("vilt"),qlo=o(" \u2014 "),aS=a("a"),Glo=o("ViltModel"),Olo=o(" (ViLT model)"),Xlo=l(),Vp=a("li"),hK=a("strong"),Vlo=o("vision-text-dual-encoder"),zlo=o(" \u2014 "),nS=a("a"),Wlo=o("VisionTextDualEncoderModel"),Qlo=o(" (VisionTextDualEncoder model)"),Hlo=l(),zp=a("li"),pK=a("strong"),Ulo=o("visual_bert"),Jlo=o(" \u2014 "),sS=a("a"),Ylo=o("VisualBertModel"),Klo=o(" (VisualBert model)"),Zlo=l(),Wp=a("li"),_K=a("strong"),eio=o("vit"),oio=o(" \u2014 "),lS=a("a"),rio=o("ViTModel"),tio=o(" (ViT model)"),aio=l(),Qp=a("li"),uK=a("strong"),nio=o("vit_mae"),sio=o(" \u2014 "),iS=a("a"),lio=o("ViTMAEModel"),iio=o(" (ViTMAE model)"),dio=l(),Hp=a("li"),bK=a("strong"),cio=o("wav2vec2"),fio=o(" \u2014 "),dS=a("a"),mio=o("Wav2Vec2Model"),gio=o(" (Wav2Vec2 model)"),hio=l(),Up=a("li"),vK=a("strong"),pio=o("wavlm"),_io=o(" \u2014 "),cS=a("a"),uio=o("WavLMModel"),bio=o(" (WavLM model)"),vio=l(),Jp=a("li"),TK=a("strong"),Tio=o("xglm"),Fio=o(" \u2014 "),fS=a("a"),Cio=o("XGLMModel"),Mio=o(" (XGLM model)"),Eio=l(),Yp=a("li"),FK=a("strong"),yio=o("xlm"),wio=o(" \u2014 "),mS=a("a"),Aio=o("XLMModel"),Lio=o(" (XLM model)"),Bio=l(),Kp=a("li"),CK=a("strong"),xio=o("xlm-prophetnet"),kio=o(" \u2014 "),gS=a("a"),Rio=o("XLMProphetNetModel"),Sio=o(" (XLMProphetNet model)"),Pio=l(),Zp=a("li"),MK=a("strong"),$io=o("xlm-roberta"),Iio=o(" \u2014 "),hS=a("a"),Dio=o("XLMRobertaModel"),jio=o(" (XLM-RoBERTa model)"),Nio=l(),e_=a("li"),EK=a("strong"),qio=o("xlm-roberta-xl"),Gio=o(" \u2014 "),pS=a("a"),Oio=o("XLMRobertaXLModel"),Xio=o(" (XLM-RoBERTa-XL model)"),Vio=l(),o_=a("li"),yK=a("strong"),zio=o("xlnet"),Wio=o(" \u2014 "),_S=a("a"),Qio=o("XLNetModel"),Hio=o(" (XLNet model)"),Uio=l(),r_=a("li"),wK=a("strong"),Jio=o("yoso"),Yio=o(" \u2014 "),uS=a("a"),Kio=o("YosoModel"),Zio=o(" (YOSO model)"),edo=l(),t_=a("p"),odo=o("The model is set in evaluation mode by default using "),AK=a("code"),rdo=o("model.eval()"),tdo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LK=a("code"),ado=o("model.train()"),ndo=l(),BK=a("p"),sdo=o("Examples:"),ldo=l(),f(i3.$$.fragment),q7e=l(),zi=a("h2"),a_=a("a"),xK=a("span"),f(d3.$$.fragment),ido=l(),kK=a("span"),ddo=o("AutoModelForPreTraining"),G7e=l(),Ho=a("div"),f(c3.$$.fragment),cdo=l(),Wi=a("p"),fdo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RK=a("code"),mdo=o("from_pretrained()"),gdo=o("class method or the "),SK=a("code"),hdo=o("from_config()"),pdo=o(`class
method.`),_do=l(),f3=a("p"),udo=o("This class cannot be instantiated directly using "),PK=a("code"),bdo=o("__init__()"),vdo=o(" (throws an error)."),Tdo=l(),Gr=a("div"),f(m3.$$.fragment),Fdo=l(),$K=a("p"),Cdo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mdo=l(),Qi=a("p"),Edo=o(`Note:
Loading a model from its configuration file does `),IK=a("strong"),ydo=o("not"),wdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("code"),Ado=o("from_pretrained()"),Ldo=o("to load the model weights."),Bdo=l(),jK=a("p"),xdo=o("Examples:"),kdo=l(),f(g3.$$.fragment),Rdo=l(),Se=a("div"),f(h3.$$.fragment),Sdo=l(),NK=a("p"),Pdo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$do=l(),qa=a("p"),Ido=o("The model class to instantiate is selected based on the "),qK=a("code"),Ddo=o("model_type"),jdo=o(` property of the config object (either
passed as an argument or loaded from `),GK=a("code"),Ndo=o("pretrained_model_name_or_path"),qdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OK=a("code"),Gdo=o("pretrained_model_name_or_path"),Odo=o(":"),Xdo=l(),k=a("ul"),n_=a("li"),XK=a("strong"),Vdo=o("albert"),zdo=o(" \u2014 "),bS=a("a"),Wdo=o("AlbertForPreTraining"),Qdo=o(" (ALBERT model)"),Hdo=l(),s_=a("li"),VK=a("strong"),Udo=o("bart"),Jdo=o(" \u2014 "),vS=a("a"),Ydo=o("BartForConditionalGeneration"),Kdo=o(" (BART model)"),Zdo=l(),l_=a("li"),zK=a("strong"),eco=o("bert"),oco=o(" \u2014 "),TS=a("a"),rco=o("BertForPreTraining"),tco=o(" (BERT model)"),aco=l(),i_=a("li"),WK=a("strong"),nco=o("big_bird"),sco=o(" \u2014 "),FS=a("a"),lco=o("BigBirdForPreTraining"),ico=o(" (BigBird model)"),dco=l(),d_=a("li"),QK=a("strong"),cco=o("camembert"),fco=o(" \u2014 "),CS=a("a"),mco=o("CamembertForMaskedLM"),gco=o(" (CamemBERT model)"),hco=l(),c_=a("li"),HK=a("strong"),pco=o("ctrl"),_co=o(" \u2014 "),MS=a("a"),uco=o("CTRLLMHeadModel"),bco=o(" (CTRL model)"),vco=l(),f_=a("li"),UK=a("strong"),Tco=o("data2vec-text"),Fco=o(" \u2014 "),ES=a("a"),Cco=o("Data2VecTextForMaskedLM"),Mco=o(" (Data2VecText model)"),Eco=l(),m_=a("li"),JK=a("strong"),yco=o("deberta"),wco=o(" \u2014 "),yS=a("a"),Aco=o("DebertaForMaskedLM"),Lco=o(" (DeBERTa model)"),Bco=l(),g_=a("li"),YK=a("strong"),xco=o("deberta-v2"),kco=o(" \u2014 "),wS=a("a"),Rco=o("DebertaV2ForMaskedLM"),Sco=o(" (DeBERTa-v2 model)"),Pco=l(),h_=a("li"),KK=a("strong"),$co=o("distilbert"),Ico=o(" \u2014 "),AS=a("a"),Dco=o("DistilBertForMaskedLM"),jco=o(" (DistilBERT model)"),Nco=l(),p_=a("li"),ZK=a("strong"),qco=o("electra"),Gco=o(" \u2014 "),LS=a("a"),Oco=o("ElectraForPreTraining"),Xco=o(" (ELECTRA model)"),Vco=l(),__=a("li"),eZ=a("strong"),zco=o("flaubert"),Wco=o(" \u2014 "),BS=a("a"),Qco=o("FlaubertWithLMHeadModel"),Hco=o(" (FlauBERT model)"),Uco=l(),u_=a("li"),oZ=a("strong"),Jco=o("fnet"),Yco=o(" \u2014 "),xS=a("a"),Kco=o("FNetForPreTraining"),Zco=o(" (FNet model)"),efo=l(),b_=a("li"),rZ=a("strong"),ofo=o("fsmt"),rfo=o(" \u2014 "),kS=a("a"),tfo=o("FSMTForConditionalGeneration"),afo=o(" (FairSeq Machine-Translation model)"),nfo=l(),v_=a("li"),tZ=a("strong"),sfo=o("funnel"),lfo=o(" \u2014 "),RS=a("a"),ifo=o("FunnelForPreTraining"),dfo=o(" (Funnel Transformer model)"),cfo=l(),T_=a("li"),aZ=a("strong"),ffo=o("gpt2"),mfo=o(" \u2014 "),SS=a("a"),gfo=o("GPT2LMHeadModel"),hfo=o(" (OpenAI GPT-2 model)"),pfo=l(),F_=a("li"),nZ=a("strong"),_fo=o("ibert"),ufo=o(" \u2014 "),PS=a("a"),bfo=o("IBertForMaskedLM"),vfo=o(" (I-BERT model)"),Tfo=l(),C_=a("li"),sZ=a("strong"),Ffo=o("layoutlm"),Cfo=o(" \u2014 "),$S=a("a"),Mfo=o("LayoutLMForMaskedLM"),Efo=o(" (LayoutLM model)"),yfo=l(),M_=a("li"),lZ=a("strong"),wfo=o("longformer"),Afo=o(" \u2014 "),IS=a("a"),Lfo=o("LongformerForMaskedLM"),Bfo=o(" (Longformer model)"),xfo=l(),E_=a("li"),iZ=a("strong"),kfo=o("lxmert"),Rfo=o(" \u2014 "),DS=a("a"),Sfo=o("LxmertForPreTraining"),Pfo=o(" (LXMERT model)"),$fo=l(),y_=a("li"),dZ=a("strong"),Ifo=o("megatron-bert"),Dfo=o(" \u2014 "),jS=a("a"),jfo=o("MegatronBertForPreTraining"),Nfo=o(" (MegatronBert model)"),qfo=l(),w_=a("li"),cZ=a("strong"),Gfo=o("mobilebert"),Ofo=o(" \u2014 "),NS=a("a"),Xfo=o("MobileBertForPreTraining"),Vfo=o(" (MobileBERT model)"),zfo=l(),A_=a("li"),fZ=a("strong"),Wfo=o("mpnet"),Qfo=o(" \u2014 "),qS=a("a"),Hfo=o("MPNetForMaskedLM"),Ufo=o(" (MPNet model)"),Jfo=l(),L_=a("li"),mZ=a("strong"),Yfo=o("openai-gpt"),Kfo=o(" \u2014 "),GS=a("a"),Zfo=o("OpenAIGPTLMHeadModel"),emo=o(" (OpenAI GPT model)"),omo=l(),B_=a("li"),gZ=a("strong"),rmo=o("retribert"),tmo=o(" \u2014 "),OS=a("a"),amo=o("RetriBertModel"),nmo=o(" (RetriBERT model)"),smo=l(),x_=a("li"),hZ=a("strong"),lmo=o("roberta"),imo=o(" \u2014 "),XS=a("a"),dmo=o("RobertaForMaskedLM"),cmo=o(" (RoBERTa model)"),fmo=l(),k_=a("li"),pZ=a("strong"),mmo=o("squeezebert"),gmo=o(" \u2014 "),VS=a("a"),hmo=o("SqueezeBertForMaskedLM"),pmo=o(" (SqueezeBERT model)"),_mo=l(),R_=a("li"),_Z=a("strong"),umo=o("t5"),bmo=o(" \u2014 "),zS=a("a"),vmo=o("T5ForConditionalGeneration"),Tmo=o(" (T5 model)"),Fmo=l(),S_=a("li"),uZ=a("strong"),Cmo=o("tapas"),Mmo=o(" \u2014 "),WS=a("a"),Emo=o("TapasForMaskedLM"),ymo=o(" (TAPAS model)"),wmo=l(),P_=a("li"),bZ=a("strong"),Amo=o("transfo-xl"),Lmo=o(" \u2014 "),QS=a("a"),Bmo=o("TransfoXLLMHeadModel"),xmo=o(" (Transformer-XL model)"),kmo=l(),$_=a("li"),vZ=a("strong"),Rmo=o("unispeech"),Smo=o(" \u2014 "),HS=a("a"),Pmo=o("UniSpeechForPreTraining"),$mo=o(" (UniSpeech model)"),Imo=l(),I_=a("li"),TZ=a("strong"),Dmo=o("unispeech-sat"),jmo=o(" \u2014 "),US=a("a"),Nmo=o("UniSpeechSatForPreTraining"),qmo=o(" (UniSpeechSat model)"),Gmo=l(),D_=a("li"),FZ=a("strong"),Omo=o("visual_bert"),Xmo=o(" \u2014 "),JS=a("a"),Vmo=o("VisualBertForPreTraining"),zmo=o(" (VisualBert model)"),Wmo=l(),j_=a("li"),CZ=a("strong"),Qmo=o("vit_mae"),Hmo=o(" \u2014 "),YS=a("a"),Umo=o("ViTMAEForPreTraining"),Jmo=o(" (ViTMAE model)"),Ymo=l(),N_=a("li"),MZ=a("strong"),Kmo=o("wav2vec2"),Zmo=o(" \u2014 "),KS=a("a"),ego=o("Wav2Vec2ForPreTraining"),ogo=o(" (Wav2Vec2 model)"),rgo=l(),q_=a("li"),EZ=a("strong"),tgo=o("xlm"),ago=o(" \u2014 "),ZS=a("a"),ngo=o("XLMWithLMHeadModel"),sgo=o(" (XLM model)"),lgo=l(),G_=a("li"),yZ=a("strong"),igo=o("xlm-roberta"),dgo=o(" \u2014 "),eP=a("a"),cgo=o("XLMRobertaForMaskedLM"),fgo=o(" (XLM-RoBERTa model)"),mgo=l(),O_=a("li"),wZ=a("strong"),ggo=o("xlm-roberta-xl"),hgo=o(" \u2014 "),oP=a("a"),pgo=o("XLMRobertaXLForMaskedLM"),_go=o(" (XLM-RoBERTa-XL model)"),ugo=l(),X_=a("li"),AZ=a("strong"),bgo=o("xlnet"),vgo=o(" \u2014 "),rP=a("a"),Tgo=o("XLNetLMHeadModel"),Fgo=o(" (XLNet model)"),Cgo=l(),V_=a("p"),Mgo=o("The model is set in evaluation mode by default using "),LZ=a("code"),Ego=o("model.eval()"),ygo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BZ=a("code"),wgo=o("model.train()"),Ago=l(),xZ=a("p"),Lgo=o("Examples:"),Bgo=l(),f(p3.$$.fragment),O7e=l(),Hi=a("h2"),z_=a("a"),kZ=a("span"),f(_3.$$.fragment),xgo=l(),RZ=a("span"),kgo=o("AutoModelForCausalLM"),X7e=l(),Uo=a("div"),f(u3.$$.fragment),Rgo=l(),Ui=a("p"),Sgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SZ=a("code"),Pgo=o("from_pretrained()"),$go=o("class method or the "),PZ=a("code"),Igo=o("from_config()"),Dgo=o(`class
method.`),jgo=l(),b3=a("p"),Ngo=o("This class cannot be instantiated directly using "),$Z=a("code"),qgo=o("__init__()"),Ggo=o(" (throws an error)."),Ogo=l(),Or=a("div"),f(v3.$$.fragment),Xgo=l(),IZ=a("p"),Vgo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zgo=l(),Ji=a("p"),Wgo=o(`Note:
Loading a model from its configuration file does `),DZ=a("strong"),Qgo=o("not"),Hgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("code"),Ugo=o("from_pretrained()"),Jgo=o("to load the model weights."),Ygo=l(),NZ=a("p"),Kgo=o("Examples:"),Zgo=l(),f(T3.$$.fragment),eho=l(),Pe=a("div"),f(F3.$$.fragment),oho=l(),qZ=a("p"),rho=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tho=l(),Ga=a("p"),aho=o("The model class to instantiate is selected based on the "),GZ=a("code"),nho=o("model_type"),sho=o(` property of the config object (either
passed as an argument or loaded from `),OZ=a("code"),lho=o("pretrained_model_name_or_path"),iho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XZ=a("code"),dho=o("pretrained_model_name_or_path"),cho=o(":"),fho=l(),$=a("ul"),W_=a("li"),VZ=a("strong"),mho=o("bart"),gho=o(" \u2014 "),tP=a("a"),hho=o("BartForCausalLM"),pho=o(" (BART model)"),_ho=l(),Q_=a("li"),zZ=a("strong"),uho=o("bert"),bho=o(" \u2014 "),aP=a("a"),vho=o("BertLMHeadModel"),Tho=o(" (BERT model)"),Fho=l(),H_=a("li"),WZ=a("strong"),Cho=o("bert-generation"),Mho=o(" \u2014 "),nP=a("a"),Eho=o("BertGenerationDecoder"),yho=o(" (Bert Generation model)"),who=l(),U_=a("li"),QZ=a("strong"),Aho=o("big_bird"),Lho=o(" \u2014 "),sP=a("a"),Bho=o("BigBirdForCausalLM"),xho=o(" (BigBird model)"),kho=l(),J_=a("li"),HZ=a("strong"),Rho=o("bigbird_pegasus"),Sho=o(" \u2014 "),lP=a("a"),Pho=o("BigBirdPegasusForCausalLM"),$ho=o(" (BigBirdPegasus model)"),Iho=l(),Y_=a("li"),UZ=a("strong"),Dho=o("blenderbot"),jho=o(" \u2014 "),iP=a("a"),Nho=o("BlenderbotForCausalLM"),qho=o(" (Blenderbot model)"),Gho=l(),K_=a("li"),JZ=a("strong"),Oho=o("blenderbot-small"),Xho=o(" \u2014 "),dP=a("a"),Vho=o("BlenderbotSmallForCausalLM"),zho=o(" (BlenderbotSmall model)"),Who=l(),Z_=a("li"),YZ=a("strong"),Qho=o("camembert"),Hho=o(" \u2014 "),cP=a("a"),Uho=o("CamembertForCausalLM"),Jho=o(" (CamemBERT model)"),Yho=l(),eu=a("li"),KZ=a("strong"),Kho=o("ctrl"),Zho=o(" \u2014 "),fP=a("a"),epo=o("CTRLLMHeadModel"),opo=o(" (CTRL model)"),rpo=l(),ou=a("li"),ZZ=a("strong"),tpo=o("data2vec-text"),apo=o(" \u2014 "),mP=a("a"),npo=o("Data2VecTextForCausalLM"),spo=o(" (Data2VecText model)"),lpo=l(),ru=a("li"),eee=a("strong"),ipo=o("electra"),dpo=o(" \u2014 "),gP=a("a"),cpo=o("ElectraForCausalLM"),fpo=o(" (ELECTRA model)"),mpo=l(),tu=a("li"),oee=a("strong"),gpo=o("gpt2"),hpo=o(" \u2014 "),hP=a("a"),ppo=o("GPT2LMHeadModel"),_po=o(" (OpenAI GPT-2 model)"),upo=l(),au=a("li"),ree=a("strong"),bpo=o("gpt_neo"),vpo=o(" \u2014 "),pP=a("a"),Tpo=o("GPTNeoForCausalLM"),Fpo=o(" (GPT Neo model)"),Cpo=l(),nu=a("li"),tee=a("strong"),Mpo=o("gptj"),Epo=o(" \u2014 "),_P=a("a"),ypo=o("GPTJForCausalLM"),wpo=o(" (GPT-J model)"),Apo=l(),su=a("li"),aee=a("strong"),Lpo=o("marian"),Bpo=o(" \u2014 "),uP=a("a"),xpo=o("MarianForCausalLM"),kpo=o(" (Marian model)"),Rpo=l(),lu=a("li"),nee=a("strong"),Spo=o("mbart"),Ppo=o(" \u2014 "),bP=a("a"),$po=o("MBartForCausalLM"),Ipo=o(" (mBART model)"),Dpo=l(),iu=a("li"),see=a("strong"),jpo=o("megatron-bert"),Npo=o(" \u2014 "),vP=a("a"),qpo=o("MegatronBertForCausalLM"),Gpo=o(" (MegatronBert model)"),Opo=l(),du=a("li"),lee=a("strong"),Xpo=o("openai-gpt"),Vpo=o(" \u2014 "),TP=a("a"),zpo=o("OpenAIGPTLMHeadModel"),Wpo=o(" (OpenAI GPT model)"),Qpo=l(),cu=a("li"),iee=a("strong"),Hpo=o("pegasus"),Upo=o(" \u2014 "),FP=a("a"),Jpo=o("PegasusForCausalLM"),Ypo=o(" (Pegasus model)"),Kpo=l(),fu=a("li"),dee=a("strong"),Zpo=o("plbart"),e_o=o(" \u2014 "),CP=a("a"),o_o=o("PLBartForCausalLM"),r_o=o(" (PLBart model)"),t_o=l(),mu=a("li"),cee=a("strong"),a_o=o("prophetnet"),n_o=o(" \u2014 "),MP=a("a"),s_o=o("ProphetNetForCausalLM"),l_o=o(" (ProphetNet model)"),i_o=l(),gu=a("li"),fee=a("strong"),d_o=o("qdqbert"),c_o=o(" \u2014 "),EP=a("a"),f_o=o("QDQBertLMHeadModel"),m_o=o(" (QDQBert model)"),g_o=l(),hu=a("li"),mee=a("strong"),h_o=o("reformer"),p_o=o(" \u2014 "),yP=a("a"),__o=o("ReformerModelWithLMHead"),u_o=o(" (Reformer model)"),b_o=l(),pu=a("li"),gee=a("strong"),v_o=o("rembert"),T_o=o(" \u2014 "),wP=a("a"),F_o=o("RemBertForCausalLM"),C_o=o(" (RemBERT model)"),M_o=l(),_u=a("li"),hee=a("strong"),E_o=o("roberta"),y_o=o(" \u2014 "),AP=a("a"),w_o=o("RobertaForCausalLM"),A_o=o(" (RoBERTa model)"),L_o=l(),uu=a("li"),pee=a("strong"),B_o=o("roformer"),x_o=o(" \u2014 "),LP=a("a"),k_o=o("RoFormerForCausalLM"),R_o=o(" (RoFormer model)"),S_o=l(),bu=a("li"),_ee=a("strong"),P_o=o("speech_to_text_2"),$_o=o(" \u2014 "),BP=a("a"),I_o=o("Speech2Text2ForCausalLM"),D_o=o(" (Speech2Text2 model)"),j_o=l(),vu=a("li"),uee=a("strong"),N_o=o("transfo-xl"),q_o=o(" \u2014 "),xP=a("a"),G_o=o("TransfoXLLMHeadModel"),O_o=o(" (Transformer-XL model)"),X_o=l(),Tu=a("li"),bee=a("strong"),V_o=o("trocr"),z_o=o(" \u2014 "),kP=a("a"),W_o=o("TrOCRForCausalLM"),Q_o=o(" (TrOCR model)"),H_o=l(),Fu=a("li"),vee=a("strong"),U_o=o("xglm"),J_o=o(" \u2014 "),RP=a("a"),Y_o=o("XGLMForCausalLM"),K_o=o(" (XGLM model)"),Z_o=l(),Cu=a("li"),Tee=a("strong"),euo=o("xlm"),ouo=o(" \u2014 "),SP=a("a"),ruo=o("XLMWithLMHeadModel"),tuo=o(" (XLM model)"),auo=l(),Mu=a("li"),Fee=a("strong"),nuo=o("xlm-prophetnet"),suo=o(" \u2014 "),PP=a("a"),luo=o("XLMProphetNetForCausalLM"),iuo=o(" (XLMProphetNet model)"),duo=l(),Eu=a("li"),Cee=a("strong"),cuo=o("xlm-roberta"),fuo=o(" \u2014 "),$P=a("a"),muo=o("XLMRobertaForCausalLM"),guo=o(" (XLM-RoBERTa model)"),huo=l(),yu=a("li"),Mee=a("strong"),puo=o("xlm-roberta-xl"),_uo=o(" \u2014 "),IP=a("a"),uuo=o("XLMRobertaXLForCausalLM"),buo=o(" (XLM-RoBERTa-XL model)"),vuo=l(),wu=a("li"),Eee=a("strong"),Tuo=o("xlnet"),Fuo=o(" \u2014 "),DP=a("a"),Cuo=o("XLNetLMHeadModel"),Muo=o(" (XLNet model)"),Euo=l(),Au=a("p"),yuo=o("The model is set in evaluation mode by default using "),yee=a("code"),wuo=o("model.eval()"),Auo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wee=a("code"),Luo=o("model.train()"),Buo=l(),Aee=a("p"),xuo=o("Examples:"),kuo=l(),f(C3.$$.fragment),V7e=l(),Yi=a("h2"),Lu=a("a"),Lee=a("span"),f(M3.$$.fragment),Ruo=l(),Bee=a("span"),Suo=o("AutoModelForMaskedLM"),z7e=l(),Jo=a("div"),f(E3.$$.fragment),Puo=l(),Ki=a("p"),$uo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xee=a("code"),Iuo=o("from_pretrained()"),Duo=o("class method or the "),kee=a("code"),juo=o("from_config()"),Nuo=o(`class
method.`),quo=l(),y3=a("p"),Guo=o("This class cannot be instantiated directly using "),Ree=a("code"),Ouo=o("__init__()"),Xuo=o(" (throws an error)."),Vuo=l(),Xr=a("div"),f(w3.$$.fragment),zuo=l(),See=a("p"),Wuo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Quo=l(),Zi=a("p"),Huo=o(`Note:
Loading a model from its configuration file does `),Pee=a("strong"),Uuo=o("not"),Juo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=a("code"),Yuo=o("from_pretrained()"),Kuo=o("to load the model weights."),Zuo=l(),Iee=a("p"),e1o=o("Examples:"),o1o=l(),f(A3.$$.fragment),r1o=l(),$e=a("div"),f(L3.$$.fragment),t1o=l(),Dee=a("p"),a1o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),n1o=l(),Oa=a("p"),s1o=o("The model class to instantiate is selected based on the "),jee=a("code"),l1o=o("model_type"),i1o=o(` property of the config object (either
passed as an argument or loaded from `),Nee=a("code"),d1o=o("pretrained_model_name_or_path"),c1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qee=a("code"),f1o=o("pretrained_model_name_or_path"),m1o=o(":"),g1o=l(),I=a("ul"),Bu=a("li"),Gee=a("strong"),h1o=o("albert"),p1o=o(" \u2014 "),jP=a("a"),_1o=o("AlbertForMaskedLM"),u1o=o(" (ALBERT model)"),b1o=l(),xu=a("li"),Oee=a("strong"),v1o=o("bart"),T1o=o(" \u2014 "),NP=a("a"),F1o=o("BartForConditionalGeneration"),C1o=o(" (BART model)"),M1o=l(),ku=a("li"),Xee=a("strong"),E1o=o("bert"),y1o=o(" \u2014 "),qP=a("a"),w1o=o("BertForMaskedLM"),A1o=o(" (BERT model)"),L1o=l(),Ru=a("li"),Vee=a("strong"),B1o=o("big_bird"),x1o=o(" \u2014 "),GP=a("a"),k1o=o("BigBirdForMaskedLM"),R1o=o(" (BigBird model)"),S1o=l(),Su=a("li"),zee=a("strong"),P1o=o("camembert"),$1o=o(" \u2014 "),OP=a("a"),I1o=o("CamembertForMaskedLM"),D1o=o(" (CamemBERT model)"),j1o=l(),Pu=a("li"),Wee=a("strong"),N1o=o("convbert"),q1o=o(" \u2014 "),XP=a("a"),G1o=o("ConvBertForMaskedLM"),O1o=o(" (ConvBERT model)"),X1o=l(),$u=a("li"),Qee=a("strong"),V1o=o("data2vec-text"),z1o=o(" \u2014 "),VP=a("a"),W1o=o("Data2VecTextForMaskedLM"),Q1o=o(" (Data2VecText model)"),H1o=l(),Iu=a("li"),Hee=a("strong"),U1o=o("deberta"),J1o=o(" \u2014 "),zP=a("a"),Y1o=o("DebertaForMaskedLM"),K1o=o(" (DeBERTa model)"),Z1o=l(),Du=a("li"),Uee=a("strong"),ebo=o("deberta-v2"),obo=o(" \u2014 "),WP=a("a"),rbo=o("DebertaV2ForMaskedLM"),tbo=o(" (DeBERTa-v2 model)"),abo=l(),ju=a("li"),Jee=a("strong"),nbo=o("distilbert"),sbo=o(" \u2014 "),QP=a("a"),lbo=o("DistilBertForMaskedLM"),ibo=o(" (DistilBERT model)"),dbo=l(),Nu=a("li"),Yee=a("strong"),cbo=o("electra"),fbo=o(" \u2014 "),HP=a("a"),mbo=o("ElectraForMaskedLM"),gbo=o(" (ELECTRA model)"),hbo=l(),qu=a("li"),Kee=a("strong"),pbo=o("flaubert"),_bo=o(" \u2014 "),UP=a("a"),ubo=o("FlaubertWithLMHeadModel"),bbo=o(" (FlauBERT model)"),vbo=l(),Gu=a("li"),Zee=a("strong"),Tbo=o("fnet"),Fbo=o(" \u2014 "),JP=a("a"),Cbo=o("FNetForMaskedLM"),Mbo=o(" (FNet model)"),Ebo=l(),Ou=a("li"),eoe=a("strong"),ybo=o("funnel"),wbo=o(" \u2014 "),YP=a("a"),Abo=o("FunnelForMaskedLM"),Lbo=o(" (Funnel Transformer model)"),Bbo=l(),Xu=a("li"),ooe=a("strong"),xbo=o("ibert"),kbo=o(" \u2014 "),KP=a("a"),Rbo=o("IBertForMaskedLM"),Sbo=o(" (I-BERT model)"),Pbo=l(),Vu=a("li"),roe=a("strong"),$bo=o("layoutlm"),Ibo=o(" \u2014 "),ZP=a("a"),Dbo=o("LayoutLMForMaskedLM"),jbo=o(" (LayoutLM model)"),Nbo=l(),zu=a("li"),toe=a("strong"),qbo=o("longformer"),Gbo=o(" \u2014 "),e$=a("a"),Obo=o("LongformerForMaskedLM"),Xbo=o(" (Longformer model)"),Vbo=l(),Wu=a("li"),aoe=a("strong"),zbo=o("mbart"),Wbo=o(" \u2014 "),o$=a("a"),Qbo=o("MBartForConditionalGeneration"),Hbo=o(" (mBART model)"),Ubo=l(),Qu=a("li"),noe=a("strong"),Jbo=o("megatron-bert"),Ybo=o(" \u2014 "),r$=a("a"),Kbo=o("MegatronBertForMaskedLM"),Zbo=o(" (MegatronBert model)"),e5o=l(),Hu=a("li"),soe=a("strong"),o5o=o("mobilebert"),r5o=o(" \u2014 "),t$=a("a"),t5o=o("MobileBertForMaskedLM"),a5o=o(" (MobileBERT model)"),n5o=l(),Uu=a("li"),loe=a("strong"),s5o=o("mpnet"),l5o=o(" \u2014 "),a$=a("a"),i5o=o("MPNetForMaskedLM"),d5o=o(" (MPNet model)"),c5o=l(),Ju=a("li"),ioe=a("strong"),f5o=o("nystromformer"),m5o=o(" \u2014 "),n$=a("a"),g5o=o("NystromformerForMaskedLM"),h5o=o(" (Nystromformer model)"),p5o=l(),Yu=a("li"),doe=a("strong"),_5o=o("perceiver"),u5o=o(" \u2014 "),s$=a("a"),b5o=o("PerceiverForMaskedLM"),v5o=o(" (Perceiver model)"),T5o=l(),Ku=a("li"),coe=a("strong"),F5o=o("qdqbert"),C5o=o(" \u2014 "),l$=a("a"),M5o=o("QDQBertForMaskedLM"),E5o=o(" (QDQBert model)"),y5o=l(),Zu=a("li"),foe=a("strong"),w5o=o("reformer"),A5o=o(" \u2014 "),i$=a("a"),L5o=o("ReformerForMaskedLM"),B5o=o(" (Reformer model)"),x5o=l(),e1=a("li"),moe=a("strong"),k5o=o("rembert"),R5o=o(" \u2014 "),d$=a("a"),S5o=o("RemBertForMaskedLM"),P5o=o(" (RemBERT model)"),$5o=l(),o1=a("li"),goe=a("strong"),I5o=o("roberta"),D5o=o(" \u2014 "),c$=a("a"),j5o=o("RobertaForMaskedLM"),N5o=o(" (RoBERTa model)"),q5o=l(),r1=a("li"),hoe=a("strong"),G5o=o("roformer"),O5o=o(" \u2014 "),f$=a("a"),X5o=o("RoFormerForMaskedLM"),V5o=o(" (RoFormer model)"),z5o=l(),t1=a("li"),poe=a("strong"),W5o=o("squeezebert"),Q5o=o(" \u2014 "),m$=a("a"),H5o=o("SqueezeBertForMaskedLM"),U5o=o(" (SqueezeBERT model)"),J5o=l(),a1=a("li"),_oe=a("strong"),Y5o=o("tapas"),K5o=o(" \u2014 "),g$=a("a"),Z5o=o("TapasForMaskedLM"),e2o=o(" (TAPAS model)"),o2o=l(),n1=a("li"),uoe=a("strong"),r2o=o("wav2vec2"),t2o=o(" \u2014 "),boe=a("code"),a2o=o("Wav2Vec2ForMaskedLM"),n2o=o("(Wav2Vec2 model)"),s2o=l(),s1=a("li"),voe=a("strong"),l2o=o("xlm"),i2o=o(" \u2014 "),h$=a("a"),d2o=o("XLMWithLMHeadModel"),c2o=o(" (XLM model)"),f2o=l(),l1=a("li"),Toe=a("strong"),m2o=o("xlm-roberta"),g2o=o(" \u2014 "),p$=a("a"),h2o=o("XLMRobertaForMaskedLM"),p2o=o(" (XLM-RoBERTa model)"),_2o=l(),i1=a("li"),Foe=a("strong"),u2o=o("xlm-roberta-xl"),b2o=o(" \u2014 "),_$=a("a"),v2o=o("XLMRobertaXLForMaskedLM"),T2o=o(" (XLM-RoBERTa-XL model)"),F2o=l(),d1=a("li"),Coe=a("strong"),C2o=o("yoso"),M2o=o(" \u2014 "),u$=a("a"),E2o=o("YosoForMaskedLM"),y2o=o(" (YOSO model)"),w2o=l(),c1=a("p"),A2o=o("The model is set in evaluation mode by default using "),Moe=a("code"),L2o=o("model.eval()"),B2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eoe=a("code"),x2o=o("model.train()"),k2o=l(),yoe=a("p"),R2o=o("Examples:"),S2o=l(),f(B3.$$.fragment),W7e=l(),ed=a("h2"),f1=a("a"),woe=a("span"),f(x3.$$.fragment),P2o=l(),Aoe=a("span"),$2o=o("AutoModelForSeq2SeqLM"),Q7e=l(),Yo=a("div"),f(k3.$$.fragment),I2o=l(),od=a("p"),D2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Loe=a("code"),j2o=o("from_pretrained()"),N2o=o("class method or the "),Boe=a("code"),q2o=o("from_config()"),G2o=o(`class
method.`),O2o=l(),R3=a("p"),X2o=o("This class cannot be instantiated directly using "),xoe=a("code"),V2o=o("__init__()"),z2o=o(" (throws an error)."),W2o=l(),Vr=a("div"),f(S3.$$.fragment),Q2o=l(),koe=a("p"),H2o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),U2o=l(),rd=a("p"),J2o=o(`Note:
Loading a model from its configuration file does `),Roe=a("strong"),Y2o=o("not"),K2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("code"),Z2o=o("from_pretrained()"),evo=o("to load the model weights."),ovo=l(),Poe=a("p"),rvo=o("Examples:"),tvo=l(),f(P3.$$.fragment),avo=l(),Ie=a("div"),f($3.$$.fragment),nvo=l(),$oe=a("p"),svo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lvo=l(),Xa=a("p"),ivo=o("The model class to instantiate is selected based on the "),Ioe=a("code"),dvo=o("model_type"),cvo=o(` property of the config object (either
passed as an argument or loaded from `),Doe=a("code"),fvo=o("pretrained_model_name_or_path"),mvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),joe=a("code"),gvo=o("pretrained_model_name_or_path"),hvo=o(":"),pvo=l(),ae=a("ul"),m1=a("li"),Noe=a("strong"),_vo=o("bart"),uvo=o(" \u2014 "),b$=a("a"),bvo=o("BartForConditionalGeneration"),vvo=o(" (BART model)"),Tvo=l(),g1=a("li"),qoe=a("strong"),Fvo=o("bigbird_pegasus"),Cvo=o(" \u2014 "),v$=a("a"),Mvo=o("BigBirdPegasusForConditionalGeneration"),Evo=o(" (BigBirdPegasus model)"),yvo=l(),h1=a("li"),Goe=a("strong"),wvo=o("blenderbot"),Avo=o(" \u2014 "),T$=a("a"),Lvo=o("BlenderbotForConditionalGeneration"),Bvo=o(" (Blenderbot model)"),xvo=l(),p1=a("li"),Ooe=a("strong"),kvo=o("blenderbot-small"),Rvo=o(" \u2014 "),F$=a("a"),Svo=o("BlenderbotSmallForConditionalGeneration"),Pvo=o(" (BlenderbotSmall model)"),$vo=l(),_1=a("li"),Xoe=a("strong"),Ivo=o("encoder-decoder"),Dvo=o(" \u2014 "),C$=a("a"),jvo=o("EncoderDecoderModel"),Nvo=o(" (Encoder decoder model)"),qvo=l(),u1=a("li"),Voe=a("strong"),Gvo=o("fsmt"),Ovo=o(" \u2014 "),M$=a("a"),Xvo=o("FSMTForConditionalGeneration"),Vvo=o(" (FairSeq Machine-Translation model)"),zvo=l(),b1=a("li"),zoe=a("strong"),Wvo=o("led"),Qvo=o(" \u2014 "),E$=a("a"),Hvo=o("LEDForConditionalGeneration"),Uvo=o(" (LED model)"),Jvo=l(),v1=a("li"),Woe=a("strong"),Yvo=o("m2m_100"),Kvo=o(" \u2014 "),y$=a("a"),Zvo=o("M2M100ForConditionalGeneration"),eTo=o(" (M2M100 model)"),oTo=l(),T1=a("li"),Qoe=a("strong"),rTo=o("marian"),tTo=o(" \u2014 "),w$=a("a"),aTo=o("MarianMTModel"),nTo=o(" (Marian model)"),sTo=l(),F1=a("li"),Hoe=a("strong"),lTo=o("mbart"),iTo=o(" \u2014 "),A$=a("a"),dTo=o("MBartForConditionalGeneration"),cTo=o(" (mBART model)"),fTo=l(),C1=a("li"),Uoe=a("strong"),mTo=o("mt5"),gTo=o(" \u2014 "),L$=a("a"),hTo=o("MT5ForConditionalGeneration"),pTo=o(" (mT5 model)"),_To=l(),M1=a("li"),Joe=a("strong"),uTo=o("pegasus"),bTo=o(" \u2014 "),B$=a("a"),vTo=o("PegasusForConditionalGeneration"),TTo=o(" (Pegasus model)"),FTo=l(),E1=a("li"),Yoe=a("strong"),CTo=o("plbart"),MTo=o(" \u2014 "),x$=a("a"),ETo=o("PLBartForConditionalGeneration"),yTo=o(" (PLBart model)"),wTo=l(),y1=a("li"),Koe=a("strong"),ATo=o("prophetnet"),LTo=o(" \u2014 "),k$=a("a"),BTo=o("ProphetNetForConditionalGeneration"),xTo=o(" (ProphetNet model)"),kTo=l(),w1=a("li"),Zoe=a("strong"),RTo=o("t5"),STo=o(" \u2014 "),R$=a("a"),PTo=o("T5ForConditionalGeneration"),$To=o(" (T5 model)"),ITo=l(),A1=a("li"),ere=a("strong"),DTo=o("xlm-prophetnet"),jTo=o(" \u2014 "),S$=a("a"),NTo=o("XLMProphetNetForConditionalGeneration"),qTo=o(" (XLMProphetNet model)"),GTo=l(),L1=a("p"),OTo=o("The model is set in evaluation mode by default using "),ore=a("code"),XTo=o("model.eval()"),VTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=a("code"),zTo=o("model.train()"),WTo=l(),tre=a("p"),QTo=o("Examples:"),HTo=l(),f(I3.$$.fragment),H7e=l(),td=a("h2"),B1=a("a"),are=a("span"),f(D3.$$.fragment),UTo=l(),nre=a("span"),JTo=o("AutoModelForSequenceClassification"),U7e=l(),Ko=a("div"),f(j3.$$.fragment),YTo=l(),ad=a("p"),KTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sre=a("code"),ZTo=o("from_pretrained()"),eFo=o("class method or the "),lre=a("code"),oFo=o("from_config()"),rFo=o(`class
method.`),tFo=l(),N3=a("p"),aFo=o("This class cannot be instantiated directly using "),ire=a("code"),nFo=o("__init__()"),sFo=o(" (throws an error)."),lFo=l(),zr=a("div"),f(q3.$$.fragment),iFo=l(),dre=a("p"),dFo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cFo=l(),nd=a("p"),fFo=o(`Note:
Loading a model from its configuration file does `),cre=a("strong"),mFo=o("not"),gFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("code"),hFo=o("from_pretrained()"),pFo=o("to load the model weights."),_Fo=l(),mre=a("p"),uFo=o("Examples:"),bFo=l(),f(G3.$$.fragment),vFo=l(),De=a("div"),f(O3.$$.fragment),TFo=l(),gre=a("p"),FFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CFo=l(),Va=a("p"),MFo=o("The model class to instantiate is selected based on the "),hre=a("code"),EFo=o("model_type"),yFo=o(` property of the config object (either
passed as an argument or loaded from `),pre=a("code"),wFo=o("pretrained_model_name_or_path"),AFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_re=a("code"),LFo=o("pretrained_model_name_or_path"),BFo=o(":"),xFo=l(),A=a("ul"),x1=a("li"),ure=a("strong"),kFo=o("albert"),RFo=o(" \u2014 "),P$=a("a"),SFo=o("AlbertForSequenceClassification"),PFo=o(" (ALBERT model)"),$Fo=l(),k1=a("li"),bre=a("strong"),IFo=o("bart"),DFo=o(" \u2014 "),$$=a("a"),jFo=o("BartForSequenceClassification"),NFo=o(" (BART model)"),qFo=l(),R1=a("li"),vre=a("strong"),GFo=o("bert"),OFo=o(" \u2014 "),I$=a("a"),XFo=o("BertForSequenceClassification"),VFo=o(" (BERT model)"),zFo=l(),S1=a("li"),Tre=a("strong"),WFo=o("big_bird"),QFo=o(" \u2014 "),D$=a("a"),HFo=o("BigBirdForSequenceClassification"),UFo=o(" (BigBird model)"),JFo=l(),P1=a("li"),Fre=a("strong"),YFo=o("bigbird_pegasus"),KFo=o(" \u2014 "),j$=a("a"),ZFo=o("BigBirdPegasusForSequenceClassification"),e9o=o(" (BigBirdPegasus model)"),o9o=l(),$1=a("li"),Cre=a("strong"),r9o=o("camembert"),t9o=o(" \u2014 "),N$=a("a"),a9o=o("CamembertForSequenceClassification"),n9o=o(" (CamemBERT model)"),s9o=l(),I1=a("li"),Mre=a("strong"),l9o=o("canine"),i9o=o(" \u2014 "),q$=a("a"),d9o=o("CanineForSequenceClassification"),c9o=o(" (Canine model)"),f9o=l(),D1=a("li"),Ere=a("strong"),m9o=o("convbert"),g9o=o(" \u2014 "),G$=a("a"),h9o=o("ConvBertForSequenceClassification"),p9o=o(" (ConvBERT model)"),_9o=l(),j1=a("li"),yre=a("strong"),u9o=o("ctrl"),b9o=o(" \u2014 "),O$=a("a"),v9o=o("CTRLForSequenceClassification"),T9o=o(" (CTRL model)"),F9o=l(),N1=a("li"),wre=a("strong"),C9o=o("data2vec-text"),M9o=o(" \u2014 "),X$=a("a"),E9o=o("Data2VecTextForSequenceClassification"),y9o=o(" (Data2VecText model)"),w9o=l(),q1=a("li"),Are=a("strong"),A9o=o("deberta"),L9o=o(" \u2014 "),V$=a("a"),B9o=o("DebertaForSequenceClassification"),x9o=o(" (DeBERTa model)"),k9o=l(),G1=a("li"),Lre=a("strong"),R9o=o("deberta-v2"),S9o=o(" \u2014 "),z$=a("a"),P9o=o("DebertaV2ForSequenceClassification"),$9o=o(" (DeBERTa-v2 model)"),I9o=l(),O1=a("li"),Bre=a("strong"),D9o=o("distilbert"),j9o=o(" \u2014 "),W$=a("a"),N9o=o("DistilBertForSequenceClassification"),q9o=o(" (DistilBERT model)"),G9o=l(),X1=a("li"),xre=a("strong"),O9o=o("electra"),X9o=o(" \u2014 "),Q$=a("a"),V9o=o("ElectraForSequenceClassification"),z9o=o(" (ELECTRA model)"),W9o=l(),V1=a("li"),kre=a("strong"),Q9o=o("flaubert"),H9o=o(" \u2014 "),H$=a("a"),U9o=o("FlaubertForSequenceClassification"),J9o=o(" (FlauBERT model)"),Y9o=l(),z1=a("li"),Rre=a("strong"),K9o=o("fnet"),Z9o=o(" \u2014 "),U$=a("a"),eCo=o("FNetForSequenceClassification"),oCo=o(" (FNet model)"),rCo=l(),W1=a("li"),Sre=a("strong"),tCo=o("funnel"),aCo=o(" \u2014 "),J$=a("a"),nCo=o("FunnelForSequenceClassification"),sCo=o(" (Funnel Transformer model)"),lCo=l(),Q1=a("li"),Pre=a("strong"),iCo=o("gpt2"),dCo=o(" \u2014 "),Y$=a("a"),cCo=o("GPT2ForSequenceClassification"),fCo=o(" (OpenAI GPT-2 model)"),mCo=l(),H1=a("li"),$re=a("strong"),gCo=o("gpt_neo"),hCo=o(" \u2014 "),K$=a("a"),pCo=o("GPTNeoForSequenceClassification"),_Co=o(" (GPT Neo model)"),uCo=l(),U1=a("li"),Ire=a("strong"),bCo=o("gptj"),vCo=o(" \u2014 "),Z$=a("a"),TCo=o("GPTJForSequenceClassification"),FCo=o(" (GPT-J model)"),CCo=l(),J1=a("li"),Dre=a("strong"),MCo=o("ibert"),ECo=o(" \u2014 "),eI=a("a"),yCo=o("IBertForSequenceClassification"),wCo=o(" (I-BERT model)"),ACo=l(),Y1=a("li"),jre=a("strong"),LCo=o("layoutlm"),BCo=o(" \u2014 "),oI=a("a"),xCo=o("LayoutLMForSequenceClassification"),kCo=o(" (LayoutLM model)"),RCo=l(),K1=a("li"),Nre=a("strong"),SCo=o("layoutlmv2"),PCo=o(" \u2014 "),rI=a("a"),$Co=o("LayoutLMv2ForSequenceClassification"),ICo=o(" (LayoutLMv2 model)"),DCo=l(),Z1=a("li"),qre=a("strong"),jCo=o("led"),NCo=o(" \u2014 "),tI=a("a"),qCo=o("LEDForSequenceClassification"),GCo=o(" (LED model)"),OCo=l(),eb=a("li"),Gre=a("strong"),XCo=o("longformer"),VCo=o(" \u2014 "),aI=a("a"),zCo=o("LongformerForSequenceClassification"),WCo=o(" (Longformer model)"),QCo=l(),ob=a("li"),Ore=a("strong"),HCo=o("mbart"),UCo=o(" \u2014 "),nI=a("a"),JCo=o("MBartForSequenceClassification"),YCo=o(" (mBART model)"),KCo=l(),rb=a("li"),Xre=a("strong"),ZCo=o("megatron-bert"),e4o=o(" \u2014 "),sI=a("a"),o4o=o("MegatronBertForSequenceClassification"),r4o=o(" (MegatronBert model)"),t4o=l(),tb=a("li"),Vre=a("strong"),a4o=o("mobilebert"),n4o=o(" \u2014 "),lI=a("a"),s4o=o("MobileBertForSequenceClassification"),l4o=o(" (MobileBERT model)"),i4o=l(),ab=a("li"),zre=a("strong"),d4o=o("mpnet"),c4o=o(" \u2014 "),iI=a("a"),f4o=o("MPNetForSequenceClassification"),m4o=o(" (MPNet model)"),g4o=l(),nb=a("li"),Wre=a("strong"),h4o=o("nystromformer"),p4o=o(" \u2014 "),dI=a("a"),_4o=o("NystromformerForSequenceClassification"),u4o=o(" (Nystromformer model)"),b4o=l(),sb=a("li"),Qre=a("strong"),v4o=o("openai-gpt"),T4o=o(" \u2014 "),cI=a("a"),F4o=o("OpenAIGPTForSequenceClassification"),C4o=o(" (OpenAI GPT model)"),M4o=l(),lb=a("li"),Hre=a("strong"),E4o=o("perceiver"),y4o=o(" \u2014 "),fI=a("a"),w4o=o("PerceiverForSequenceClassification"),A4o=o(" (Perceiver model)"),L4o=l(),ib=a("li"),Ure=a("strong"),B4o=o("plbart"),x4o=o(" \u2014 "),mI=a("a"),k4o=o("PLBartForSequenceClassification"),R4o=o(" (PLBart model)"),S4o=l(),db=a("li"),Jre=a("strong"),P4o=o("qdqbert"),$4o=o(" \u2014 "),gI=a("a"),I4o=o("QDQBertForSequenceClassification"),D4o=o(" (QDQBert model)"),j4o=l(),cb=a("li"),Yre=a("strong"),N4o=o("reformer"),q4o=o(" \u2014 "),hI=a("a"),G4o=o("ReformerForSequenceClassification"),O4o=o(" (Reformer model)"),X4o=l(),fb=a("li"),Kre=a("strong"),V4o=o("rembert"),z4o=o(" \u2014 "),pI=a("a"),W4o=o("RemBertForSequenceClassification"),Q4o=o(" (RemBERT model)"),H4o=l(),mb=a("li"),Zre=a("strong"),U4o=o("roberta"),J4o=o(" \u2014 "),_I=a("a"),Y4o=o("RobertaForSequenceClassification"),K4o=o(" (RoBERTa model)"),Z4o=l(),gb=a("li"),ete=a("strong"),eMo=o("roformer"),oMo=o(" \u2014 "),uI=a("a"),rMo=o("RoFormerForSequenceClassification"),tMo=o(" (RoFormer model)"),aMo=l(),hb=a("li"),ote=a("strong"),nMo=o("squeezebert"),sMo=o(" \u2014 "),bI=a("a"),lMo=o("SqueezeBertForSequenceClassification"),iMo=o(" (SqueezeBERT model)"),dMo=l(),pb=a("li"),rte=a("strong"),cMo=o("tapas"),fMo=o(" \u2014 "),vI=a("a"),mMo=o("TapasForSequenceClassification"),gMo=o(" (TAPAS model)"),hMo=l(),_b=a("li"),tte=a("strong"),pMo=o("transfo-xl"),_Mo=o(" \u2014 "),TI=a("a"),uMo=o("TransfoXLForSequenceClassification"),bMo=o(" (Transformer-XL model)"),vMo=l(),ub=a("li"),ate=a("strong"),TMo=o("xlm"),FMo=o(" \u2014 "),FI=a("a"),CMo=o("XLMForSequenceClassification"),MMo=o(" (XLM model)"),EMo=l(),bb=a("li"),nte=a("strong"),yMo=o("xlm-roberta"),wMo=o(" \u2014 "),CI=a("a"),AMo=o("XLMRobertaForSequenceClassification"),LMo=o(" (XLM-RoBERTa model)"),BMo=l(),vb=a("li"),ste=a("strong"),xMo=o("xlm-roberta-xl"),kMo=o(" \u2014 "),MI=a("a"),RMo=o("XLMRobertaXLForSequenceClassification"),SMo=o(" (XLM-RoBERTa-XL model)"),PMo=l(),Tb=a("li"),lte=a("strong"),$Mo=o("xlnet"),IMo=o(" \u2014 "),EI=a("a"),DMo=o("XLNetForSequenceClassification"),jMo=o(" (XLNet model)"),NMo=l(),Fb=a("li"),ite=a("strong"),qMo=o("yoso"),GMo=o(" \u2014 "),yI=a("a"),OMo=o("YosoForSequenceClassification"),XMo=o(" (YOSO model)"),VMo=l(),Cb=a("p"),zMo=o("The model is set in evaluation mode by default using "),dte=a("code"),WMo=o("model.eval()"),QMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cte=a("code"),HMo=o("model.train()"),UMo=l(),fte=a("p"),JMo=o("Examples:"),YMo=l(),f(X3.$$.fragment),J7e=l(),sd=a("h2"),Mb=a("a"),mte=a("span"),f(V3.$$.fragment),KMo=l(),gte=a("span"),ZMo=o("AutoModelForMultipleChoice"),Y7e=l(),Zo=a("div"),f(z3.$$.fragment),eEo=l(),ld=a("p"),oEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hte=a("code"),rEo=o("from_pretrained()"),tEo=o("class method or the "),pte=a("code"),aEo=o("from_config()"),nEo=o(`class
method.`),sEo=l(),W3=a("p"),lEo=o("This class cannot be instantiated directly using "),_te=a("code"),iEo=o("__init__()"),dEo=o(" (throws an error)."),cEo=l(),Wr=a("div"),f(Q3.$$.fragment),fEo=l(),ute=a("p"),mEo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gEo=l(),id=a("p"),hEo=o(`Note:
Loading a model from its configuration file does `),bte=a("strong"),pEo=o("not"),_Eo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vte=a("code"),uEo=o("from_pretrained()"),bEo=o("to load the model weights."),vEo=l(),Tte=a("p"),TEo=o("Examples:"),FEo=l(),f(H3.$$.fragment),CEo=l(),je=a("div"),f(U3.$$.fragment),MEo=l(),Fte=a("p"),EEo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yEo=l(),za=a("p"),wEo=o("The model class to instantiate is selected based on the "),Cte=a("code"),AEo=o("model_type"),LEo=o(` property of the config object (either
passed as an argument or loaded from `),Mte=a("code"),BEo=o("pretrained_model_name_or_path"),xEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ete=a("code"),kEo=o("pretrained_model_name_or_path"),REo=o(":"),SEo=l(),G=a("ul"),Eb=a("li"),yte=a("strong"),PEo=o("albert"),$Eo=o(" \u2014 "),wI=a("a"),IEo=o("AlbertForMultipleChoice"),DEo=o(" (ALBERT model)"),jEo=l(),yb=a("li"),wte=a("strong"),NEo=o("bert"),qEo=o(" \u2014 "),AI=a("a"),GEo=o("BertForMultipleChoice"),OEo=o(" (BERT model)"),XEo=l(),wb=a("li"),Ate=a("strong"),VEo=o("big_bird"),zEo=o(" \u2014 "),LI=a("a"),WEo=o("BigBirdForMultipleChoice"),QEo=o(" (BigBird model)"),HEo=l(),Ab=a("li"),Lte=a("strong"),UEo=o("camembert"),JEo=o(" \u2014 "),BI=a("a"),YEo=o("CamembertForMultipleChoice"),KEo=o(" (CamemBERT model)"),ZEo=l(),Lb=a("li"),Bte=a("strong"),e3o=o("canine"),o3o=o(" \u2014 "),xI=a("a"),r3o=o("CanineForMultipleChoice"),t3o=o(" (Canine model)"),a3o=l(),Bb=a("li"),xte=a("strong"),n3o=o("convbert"),s3o=o(" \u2014 "),kI=a("a"),l3o=o("ConvBertForMultipleChoice"),i3o=o(" (ConvBERT model)"),d3o=l(),xb=a("li"),kte=a("strong"),c3o=o("data2vec-text"),f3o=o(" \u2014 "),RI=a("a"),m3o=o("Data2VecTextForMultipleChoice"),g3o=o(" (Data2VecText model)"),h3o=l(),kb=a("li"),Rte=a("strong"),p3o=o("distilbert"),_3o=o(" \u2014 "),SI=a("a"),u3o=o("DistilBertForMultipleChoice"),b3o=o(" (DistilBERT model)"),v3o=l(),Rb=a("li"),Ste=a("strong"),T3o=o("electra"),F3o=o(" \u2014 "),PI=a("a"),C3o=o("ElectraForMultipleChoice"),M3o=o(" (ELECTRA model)"),E3o=l(),Sb=a("li"),Pte=a("strong"),y3o=o("flaubert"),w3o=o(" \u2014 "),$I=a("a"),A3o=o("FlaubertForMultipleChoice"),L3o=o(" (FlauBERT model)"),B3o=l(),Pb=a("li"),$te=a("strong"),x3o=o("fnet"),k3o=o(" \u2014 "),II=a("a"),R3o=o("FNetForMultipleChoice"),S3o=o(" (FNet model)"),P3o=l(),$b=a("li"),Ite=a("strong"),$3o=o("funnel"),I3o=o(" \u2014 "),DI=a("a"),D3o=o("FunnelForMultipleChoice"),j3o=o(" (Funnel Transformer model)"),N3o=l(),Ib=a("li"),Dte=a("strong"),q3o=o("ibert"),G3o=o(" \u2014 "),jI=a("a"),O3o=o("IBertForMultipleChoice"),X3o=o(" (I-BERT model)"),V3o=l(),Db=a("li"),jte=a("strong"),z3o=o("longformer"),W3o=o(" \u2014 "),NI=a("a"),Q3o=o("LongformerForMultipleChoice"),H3o=o(" (Longformer model)"),U3o=l(),jb=a("li"),Nte=a("strong"),J3o=o("megatron-bert"),Y3o=o(" \u2014 "),qI=a("a"),K3o=o("MegatronBertForMultipleChoice"),Z3o=o(" (MegatronBert model)"),eyo=l(),Nb=a("li"),qte=a("strong"),oyo=o("mobilebert"),ryo=o(" \u2014 "),GI=a("a"),tyo=o("MobileBertForMultipleChoice"),ayo=o(" (MobileBERT model)"),nyo=l(),qb=a("li"),Gte=a("strong"),syo=o("mpnet"),lyo=o(" \u2014 "),OI=a("a"),iyo=o("MPNetForMultipleChoice"),dyo=o(" (MPNet model)"),cyo=l(),Gb=a("li"),Ote=a("strong"),fyo=o("nystromformer"),myo=o(" \u2014 "),XI=a("a"),gyo=o("NystromformerForMultipleChoice"),hyo=o(" (Nystromformer model)"),pyo=l(),Ob=a("li"),Xte=a("strong"),_yo=o("qdqbert"),uyo=o(" \u2014 "),VI=a("a"),byo=o("QDQBertForMultipleChoice"),vyo=o(" (QDQBert model)"),Tyo=l(),Xb=a("li"),Vte=a("strong"),Fyo=o("rembert"),Cyo=o(" \u2014 "),zI=a("a"),Myo=o("RemBertForMultipleChoice"),Eyo=o(" (RemBERT model)"),yyo=l(),Vb=a("li"),zte=a("strong"),wyo=o("roberta"),Ayo=o(" \u2014 "),WI=a("a"),Lyo=o("RobertaForMultipleChoice"),Byo=o(" (RoBERTa model)"),xyo=l(),zb=a("li"),Wte=a("strong"),kyo=o("roformer"),Ryo=o(" \u2014 "),QI=a("a"),Syo=o("RoFormerForMultipleChoice"),Pyo=o(" (RoFormer model)"),$yo=l(),Wb=a("li"),Qte=a("strong"),Iyo=o("squeezebert"),Dyo=o(" \u2014 "),HI=a("a"),jyo=o("SqueezeBertForMultipleChoice"),Nyo=o(" (SqueezeBERT model)"),qyo=l(),Qb=a("li"),Hte=a("strong"),Gyo=o("xlm"),Oyo=o(" \u2014 "),UI=a("a"),Xyo=o("XLMForMultipleChoice"),Vyo=o(" (XLM model)"),zyo=l(),Hb=a("li"),Ute=a("strong"),Wyo=o("xlm-roberta"),Qyo=o(" \u2014 "),JI=a("a"),Hyo=o("XLMRobertaForMultipleChoice"),Uyo=o(" (XLM-RoBERTa model)"),Jyo=l(),Ub=a("li"),Jte=a("strong"),Yyo=o("xlm-roberta-xl"),Kyo=o(" \u2014 "),YI=a("a"),Zyo=o("XLMRobertaXLForMultipleChoice"),ewo=o(" (XLM-RoBERTa-XL model)"),owo=l(),Jb=a("li"),Yte=a("strong"),rwo=o("xlnet"),two=o(" \u2014 "),KI=a("a"),awo=o("XLNetForMultipleChoice"),nwo=o(" (XLNet model)"),swo=l(),Yb=a("li"),Kte=a("strong"),lwo=o("yoso"),iwo=o(" \u2014 "),ZI=a("a"),dwo=o("YosoForMultipleChoice"),cwo=o(" (YOSO model)"),fwo=l(),Kb=a("p"),mwo=o("The model is set in evaluation mode by default using "),Zte=a("code"),gwo=o("model.eval()"),hwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eae=a("code"),pwo=o("model.train()"),_wo=l(),oae=a("p"),uwo=o("Examples:"),bwo=l(),f(J3.$$.fragment),K7e=l(),dd=a("h2"),Zb=a("a"),rae=a("span"),f(Y3.$$.fragment),vwo=l(),tae=a("span"),Two=o("AutoModelForNextSentencePrediction"),Z7e=l(),er=a("div"),f(K3.$$.fragment),Fwo=l(),cd=a("p"),Cwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aae=a("code"),Mwo=o("from_pretrained()"),Ewo=o("class method or the "),nae=a("code"),ywo=o("from_config()"),wwo=o(`class
method.`),Awo=l(),Z3=a("p"),Lwo=o("This class cannot be instantiated directly using "),sae=a("code"),Bwo=o("__init__()"),xwo=o(" (throws an error)."),kwo=l(),Qr=a("div"),f(ey.$$.fragment),Rwo=l(),lae=a("p"),Swo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Pwo=l(),fd=a("p"),$wo=o(`Note:
Loading a model from its configuration file does `),iae=a("strong"),Iwo=o("not"),Dwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=a("code"),jwo=o("from_pretrained()"),Nwo=o("to load the model weights."),qwo=l(),cae=a("p"),Gwo=o("Examples:"),Owo=l(),f(oy.$$.fragment),Xwo=l(),Ne=a("div"),f(ry.$$.fragment),Vwo=l(),fae=a("p"),zwo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wwo=l(),Wa=a("p"),Qwo=o("The model class to instantiate is selected based on the "),mae=a("code"),Hwo=o("model_type"),Uwo=o(` property of the config object (either
passed as an argument or loaded from `),gae=a("code"),Jwo=o("pretrained_model_name_or_path"),Ywo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hae=a("code"),Kwo=o("pretrained_model_name_or_path"),Zwo=o(":"),e6o=l(),na=a("ul"),e5=a("li"),pae=a("strong"),o6o=o("bert"),r6o=o(" \u2014 "),eD=a("a"),t6o=o("BertForNextSentencePrediction"),a6o=o(" (BERT model)"),n6o=l(),o5=a("li"),_ae=a("strong"),s6o=o("fnet"),l6o=o(" \u2014 "),oD=a("a"),i6o=o("FNetForNextSentencePrediction"),d6o=o(" (FNet model)"),c6o=l(),r5=a("li"),uae=a("strong"),f6o=o("megatron-bert"),m6o=o(" \u2014 "),rD=a("a"),g6o=o("MegatronBertForNextSentencePrediction"),h6o=o(" (MegatronBert model)"),p6o=l(),t5=a("li"),bae=a("strong"),_6o=o("mobilebert"),u6o=o(" \u2014 "),tD=a("a"),b6o=o("MobileBertForNextSentencePrediction"),v6o=o(" (MobileBERT model)"),T6o=l(),a5=a("li"),vae=a("strong"),F6o=o("qdqbert"),C6o=o(" \u2014 "),aD=a("a"),M6o=o("QDQBertForNextSentencePrediction"),E6o=o(" (QDQBert model)"),y6o=l(),n5=a("p"),w6o=o("The model is set in evaluation mode by default using "),Tae=a("code"),A6o=o("model.eval()"),L6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fae=a("code"),B6o=o("model.train()"),x6o=l(),Cae=a("p"),k6o=o("Examples:"),R6o=l(),f(ty.$$.fragment),eBe=l(),md=a("h2"),s5=a("a"),Mae=a("span"),f(ay.$$.fragment),S6o=l(),Eae=a("span"),P6o=o("AutoModelForTokenClassification"),oBe=l(),or=a("div"),f(ny.$$.fragment),$6o=l(),gd=a("p"),I6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yae=a("code"),D6o=o("from_pretrained()"),j6o=o("class method or the "),wae=a("code"),N6o=o("from_config()"),q6o=o(`class
method.`),G6o=l(),sy=a("p"),O6o=o("This class cannot be instantiated directly using "),Aae=a("code"),X6o=o("__init__()"),V6o=o(" (throws an error)."),z6o=l(),Hr=a("div"),f(ly.$$.fragment),W6o=l(),Lae=a("p"),Q6o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),H6o=l(),hd=a("p"),U6o=o(`Note:
Loading a model from its configuration file does `),Bae=a("strong"),J6o=o("not"),Y6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=a("code"),K6o=o("from_pretrained()"),Z6o=o("to load the model weights."),eAo=l(),kae=a("p"),oAo=o("Examples:"),rAo=l(),f(iy.$$.fragment),tAo=l(),qe=a("div"),f(dy.$$.fragment),aAo=l(),Rae=a("p"),nAo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sAo=l(),Qa=a("p"),lAo=o("The model class to instantiate is selected based on the "),Sae=a("code"),iAo=o("model_type"),dAo=o(` property of the config object (either
passed as an argument or loaded from `),Pae=a("code"),cAo=o("pretrained_model_name_or_path"),fAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ae=a("code"),mAo=o("pretrained_model_name_or_path"),gAo=o(":"),hAo=l(),N=a("ul"),l5=a("li"),Iae=a("strong"),pAo=o("albert"),_Ao=o(" \u2014 "),nD=a("a"),uAo=o("AlbertForTokenClassification"),bAo=o(" (ALBERT model)"),vAo=l(),i5=a("li"),Dae=a("strong"),TAo=o("bert"),FAo=o(" \u2014 "),sD=a("a"),CAo=o("BertForTokenClassification"),MAo=o(" (BERT model)"),EAo=l(),d5=a("li"),jae=a("strong"),yAo=o("big_bird"),wAo=o(" \u2014 "),lD=a("a"),AAo=o("BigBirdForTokenClassification"),LAo=o(" (BigBird model)"),BAo=l(),c5=a("li"),Nae=a("strong"),xAo=o("camembert"),kAo=o(" \u2014 "),iD=a("a"),RAo=o("CamembertForTokenClassification"),SAo=o(" (CamemBERT model)"),PAo=l(),f5=a("li"),qae=a("strong"),$Ao=o("canine"),IAo=o(" \u2014 "),dD=a("a"),DAo=o("CanineForTokenClassification"),jAo=o(" (Canine model)"),NAo=l(),m5=a("li"),Gae=a("strong"),qAo=o("convbert"),GAo=o(" \u2014 "),cD=a("a"),OAo=o("ConvBertForTokenClassification"),XAo=o(" (ConvBERT model)"),VAo=l(),g5=a("li"),Oae=a("strong"),zAo=o("data2vec-text"),WAo=o(" \u2014 "),fD=a("a"),QAo=o("Data2VecTextForTokenClassification"),HAo=o(" (Data2VecText model)"),UAo=l(),h5=a("li"),Xae=a("strong"),JAo=o("deberta"),YAo=o(" \u2014 "),mD=a("a"),KAo=o("DebertaForTokenClassification"),ZAo=o(" (DeBERTa model)"),e0o=l(),p5=a("li"),Vae=a("strong"),o0o=o("deberta-v2"),r0o=o(" \u2014 "),gD=a("a"),t0o=o("DebertaV2ForTokenClassification"),a0o=o(" (DeBERTa-v2 model)"),n0o=l(),_5=a("li"),zae=a("strong"),s0o=o("distilbert"),l0o=o(" \u2014 "),hD=a("a"),i0o=o("DistilBertForTokenClassification"),d0o=o(" (DistilBERT model)"),c0o=l(),u5=a("li"),Wae=a("strong"),f0o=o("electra"),m0o=o(" \u2014 "),pD=a("a"),g0o=o("ElectraForTokenClassification"),h0o=o(" (ELECTRA model)"),p0o=l(),b5=a("li"),Qae=a("strong"),_0o=o("flaubert"),u0o=o(" \u2014 "),_D=a("a"),b0o=o("FlaubertForTokenClassification"),v0o=o(" (FlauBERT model)"),T0o=l(),v5=a("li"),Hae=a("strong"),F0o=o("fnet"),C0o=o(" \u2014 "),uD=a("a"),M0o=o("FNetForTokenClassification"),E0o=o(" (FNet model)"),y0o=l(),T5=a("li"),Uae=a("strong"),w0o=o("funnel"),A0o=o(" \u2014 "),bD=a("a"),L0o=o("FunnelForTokenClassification"),B0o=o(" (Funnel Transformer model)"),x0o=l(),F5=a("li"),Jae=a("strong"),k0o=o("gpt2"),R0o=o(" \u2014 "),vD=a("a"),S0o=o("GPT2ForTokenClassification"),P0o=o(" (OpenAI GPT-2 model)"),$0o=l(),C5=a("li"),Yae=a("strong"),I0o=o("ibert"),D0o=o(" \u2014 "),TD=a("a"),j0o=o("IBertForTokenClassification"),N0o=o(" (I-BERT model)"),q0o=l(),M5=a("li"),Kae=a("strong"),G0o=o("layoutlm"),O0o=o(" \u2014 "),FD=a("a"),X0o=o("LayoutLMForTokenClassification"),V0o=o(" (LayoutLM model)"),z0o=l(),E5=a("li"),Zae=a("strong"),W0o=o("layoutlmv2"),Q0o=o(" \u2014 "),CD=a("a"),H0o=o("LayoutLMv2ForTokenClassification"),U0o=o(" (LayoutLMv2 model)"),J0o=l(),y5=a("li"),ene=a("strong"),Y0o=o("longformer"),K0o=o(" \u2014 "),MD=a("a"),Z0o=o("LongformerForTokenClassification"),eLo=o(" (Longformer model)"),oLo=l(),w5=a("li"),one=a("strong"),rLo=o("megatron-bert"),tLo=o(" \u2014 "),ED=a("a"),aLo=o("MegatronBertForTokenClassification"),nLo=o(" (MegatronBert model)"),sLo=l(),A5=a("li"),rne=a("strong"),lLo=o("mobilebert"),iLo=o(" \u2014 "),yD=a("a"),dLo=o("MobileBertForTokenClassification"),cLo=o(" (MobileBERT model)"),fLo=l(),L5=a("li"),tne=a("strong"),mLo=o("mpnet"),gLo=o(" \u2014 "),wD=a("a"),hLo=o("MPNetForTokenClassification"),pLo=o(" (MPNet model)"),_Lo=l(),B5=a("li"),ane=a("strong"),uLo=o("nystromformer"),bLo=o(" \u2014 "),AD=a("a"),vLo=o("NystromformerForTokenClassification"),TLo=o(" (Nystromformer model)"),FLo=l(),x5=a("li"),nne=a("strong"),CLo=o("qdqbert"),MLo=o(" \u2014 "),LD=a("a"),ELo=o("QDQBertForTokenClassification"),yLo=o(" (QDQBert model)"),wLo=l(),k5=a("li"),sne=a("strong"),ALo=o("rembert"),LLo=o(" \u2014 "),BD=a("a"),BLo=o("RemBertForTokenClassification"),xLo=o(" (RemBERT model)"),kLo=l(),R5=a("li"),lne=a("strong"),RLo=o("roberta"),SLo=o(" \u2014 "),xD=a("a"),PLo=o("RobertaForTokenClassification"),$Lo=o(" (RoBERTa model)"),ILo=l(),S5=a("li"),ine=a("strong"),DLo=o("roformer"),jLo=o(" \u2014 "),kD=a("a"),NLo=o("RoFormerForTokenClassification"),qLo=o(" (RoFormer model)"),GLo=l(),P5=a("li"),dne=a("strong"),OLo=o("squeezebert"),XLo=o(" \u2014 "),RD=a("a"),VLo=o("SqueezeBertForTokenClassification"),zLo=o(" (SqueezeBERT model)"),WLo=l(),$5=a("li"),cne=a("strong"),QLo=o("xlm"),HLo=o(" \u2014 "),SD=a("a"),ULo=o("XLMForTokenClassification"),JLo=o(" (XLM model)"),YLo=l(),I5=a("li"),fne=a("strong"),KLo=o("xlm-roberta"),ZLo=o(" \u2014 "),PD=a("a"),e8o=o("XLMRobertaForTokenClassification"),o8o=o(" (XLM-RoBERTa model)"),r8o=l(),D5=a("li"),mne=a("strong"),t8o=o("xlm-roberta-xl"),a8o=o(" \u2014 "),$D=a("a"),n8o=o("XLMRobertaXLForTokenClassification"),s8o=o(" (XLM-RoBERTa-XL model)"),l8o=l(),j5=a("li"),gne=a("strong"),i8o=o("xlnet"),d8o=o(" \u2014 "),ID=a("a"),c8o=o("XLNetForTokenClassification"),f8o=o(" (XLNet model)"),m8o=l(),N5=a("li"),hne=a("strong"),g8o=o("yoso"),h8o=o(" \u2014 "),DD=a("a"),p8o=o("YosoForTokenClassification"),_8o=o(" (YOSO model)"),u8o=l(),q5=a("p"),b8o=o("The model is set in evaluation mode by default using "),pne=a("code"),v8o=o("model.eval()"),T8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ne=a("code"),F8o=o("model.train()"),C8o=l(),une=a("p"),M8o=o("Examples:"),E8o=l(),f(cy.$$.fragment),rBe=l(),pd=a("h2"),G5=a("a"),bne=a("span"),f(fy.$$.fragment),y8o=l(),vne=a("span"),w8o=o("AutoModelForQuestionAnswering"),tBe=l(),rr=a("div"),f(my.$$.fragment),A8o=l(),_d=a("p"),L8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Tne=a("code"),B8o=o("from_pretrained()"),x8o=o("class method or the "),Fne=a("code"),k8o=o("from_config()"),R8o=o(`class
method.`),S8o=l(),gy=a("p"),P8o=o("This class cannot be instantiated directly using "),Cne=a("code"),$8o=o("__init__()"),I8o=o(" (throws an error)."),D8o=l(),Ur=a("div"),f(hy.$$.fragment),j8o=l(),Mne=a("p"),N8o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q8o=l(),ud=a("p"),G8o=o(`Note:
Loading a model from its configuration file does `),Ene=a("strong"),O8o=o("not"),X8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yne=a("code"),V8o=o("from_pretrained()"),z8o=o("to load the model weights."),W8o=l(),wne=a("p"),Q8o=o("Examples:"),H8o=l(),f(py.$$.fragment),U8o=l(),Ge=a("div"),f(_y.$$.fragment),J8o=l(),Ane=a("p"),Y8o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),K8o=l(),Ha=a("p"),Z8o=o("The model class to instantiate is selected based on the "),Lne=a("code"),e7o=o("model_type"),o7o=o(` property of the config object (either
passed as an argument or loaded from `),Bne=a("code"),r7o=o("pretrained_model_name_or_path"),t7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xne=a("code"),a7o=o("pretrained_model_name_or_path"),n7o=o(":"),s7o=l(),R=a("ul"),O5=a("li"),kne=a("strong"),l7o=o("albert"),i7o=o(" \u2014 "),jD=a("a"),d7o=o("AlbertForQuestionAnswering"),c7o=o(" (ALBERT model)"),f7o=l(),X5=a("li"),Rne=a("strong"),m7o=o("bart"),g7o=o(" \u2014 "),ND=a("a"),h7o=o("BartForQuestionAnswering"),p7o=o(" (BART model)"),_7o=l(),V5=a("li"),Sne=a("strong"),u7o=o("bert"),b7o=o(" \u2014 "),qD=a("a"),v7o=o("BertForQuestionAnswering"),T7o=o(" (BERT model)"),F7o=l(),z5=a("li"),Pne=a("strong"),C7o=o("big_bird"),M7o=o(" \u2014 "),GD=a("a"),E7o=o("BigBirdForQuestionAnswering"),y7o=o(" (BigBird model)"),w7o=l(),W5=a("li"),$ne=a("strong"),A7o=o("bigbird_pegasus"),L7o=o(" \u2014 "),OD=a("a"),B7o=o("BigBirdPegasusForQuestionAnswering"),x7o=o(" (BigBirdPegasus model)"),k7o=l(),Q5=a("li"),Ine=a("strong"),R7o=o("camembert"),S7o=o(" \u2014 "),XD=a("a"),P7o=o("CamembertForQuestionAnswering"),$7o=o(" (CamemBERT model)"),I7o=l(),H5=a("li"),Dne=a("strong"),D7o=o("canine"),j7o=o(" \u2014 "),VD=a("a"),N7o=o("CanineForQuestionAnswering"),q7o=o(" (Canine model)"),G7o=l(),U5=a("li"),jne=a("strong"),O7o=o("convbert"),X7o=o(" \u2014 "),zD=a("a"),V7o=o("ConvBertForQuestionAnswering"),z7o=o(" (ConvBERT model)"),W7o=l(),J5=a("li"),Nne=a("strong"),Q7o=o("data2vec-text"),H7o=o(" \u2014 "),WD=a("a"),U7o=o("Data2VecTextForQuestionAnswering"),J7o=o(" (Data2VecText model)"),Y7o=l(),Y5=a("li"),qne=a("strong"),K7o=o("deberta"),Z7o=o(" \u2014 "),QD=a("a"),eBo=o("DebertaForQuestionAnswering"),oBo=o(" (DeBERTa model)"),rBo=l(),K5=a("li"),Gne=a("strong"),tBo=o("deberta-v2"),aBo=o(" \u2014 "),HD=a("a"),nBo=o("DebertaV2ForQuestionAnswering"),sBo=o(" (DeBERTa-v2 model)"),lBo=l(),Z5=a("li"),One=a("strong"),iBo=o("distilbert"),dBo=o(" \u2014 "),UD=a("a"),cBo=o("DistilBertForQuestionAnswering"),fBo=o(" (DistilBERT model)"),mBo=l(),e2=a("li"),Xne=a("strong"),gBo=o("electra"),hBo=o(" \u2014 "),JD=a("a"),pBo=o("ElectraForQuestionAnswering"),_Bo=o(" (ELECTRA model)"),uBo=l(),o2=a("li"),Vne=a("strong"),bBo=o("flaubert"),vBo=o(" \u2014 "),YD=a("a"),TBo=o("FlaubertForQuestionAnsweringSimple"),FBo=o(" (FlauBERT model)"),CBo=l(),r2=a("li"),zne=a("strong"),MBo=o("fnet"),EBo=o(" \u2014 "),KD=a("a"),yBo=o("FNetForQuestionAnswering"),wBo=o(" (FNet model)"),ABo=l(),t2=a("li"),Wne=a("strong"),LBo=o("funnel"),BBo=o(" \u2014 "),ZD=a("a"),xBo=o("FunnelForQuestionAnswering"),kBo=o(" (Funnel Transformer model)"),RBo=l(),a2=a("li"),Qne=a("strong"),SBo=o("gptj"),PBo=o(" \u2014 "),ej=a("a"),$Bo=o("GPTJForQuestionAnswering"),IBo=o(" (GPT-J model)"),DBo=l(),n2=a("li"),Hne=a("strong"),jBo=o("ibert"),NBo=o(" \u2014 "),oj=a("a"),qBo=o("IBertForQuestionAnswering"),GBo=o(" (I-BERT model)"),OBo=l(),s2=a("li"),Une=a("strong"),XBo=o("layoutlmv2"),VBo=o(" \u2014 "),rj=a("a"),zBo=o("LayoutLMv2ForQuestionAnswering"),WBo=o(" (LayoutLMv2 model)"),QBo=l(),l2=a("li"),Jne=a("strong"),HBo=o("led"),UBo=o(" \u2014 "),tj=a("a"),JBo=o("LEDForQuestionAnswering"),YBo=o(" (LED model)"),KBo=l(),i2=a("li"),Yne=a("strong"),ZBo=o("longformer"),exo=o(" \u2014 "),aj=a("a"),oxo=o("LongformerForQuestionAnswering"),rxo=o(" (Longformer model)"),txo=l(),d2=a("li"),Kne=a("strong"),axo=o("lxmert"),nxo=o(" \u2014 "),nj=a("a"),sxo=o("LxmertForQuestionAnswering"),lxo=o(" (LXMERT model)"),ixo=l(),c2=a("li"),Zne=a("strong"),dxo=o("mbart"),cxo=o(" \u2014 "),sj=a("a"),fxo=o("MBartForQuestionAnswering"),mxo=o(" (mBART model)"),gxo=l(),f2=a("li"),ese=a("strong"),hxo=o("megatron-bert"),pxo=o(" \u2014 "),lj=a("a"),_xo=o("MegatronBertForQuestionAnswering"),uxo=o(" (MegatronBert model)"),bxo=l(),m2=a("li"),ose=a("strong"),vxo=o("mobilebert"),Txo=o(" \u2014 "),ij=a("a"),Fxo=o("MobileBertForQuestionAnswering"),Cxo=o(" (MobileBERT model)"),Mxo=l(),g2=a("li"),rse=a("strong"),Exo=o("mpnet"),yxo=o(" \u2014 "),dj=a("a"),wxo=o("MPNetForQuestionAnswering"),Axo=o(" (MPNet model)"),Lxo=l(),h2=a("li"),tse=a("strong"),Bxo=o("nystromformer"),xxo=o(" \u2014 "),cj=a("a"),kxo=o("NystromformerForQuestionAnswering"),Rxo=o(" (Nystromformer model)"),Sxo=l(),p2=a("li"),ase=a("strong"),Pxo=o("qdqbert"),$xo=o(" \u2014 "),fj=a("a"),Ixo=o("QDQBertForQuestionAnswering"),Dxo=o(" (QDQBert model)"),jxo=l(),_2=a("li"),nse=a("strong"),Nxo=o("reformer"),qxo=o(" \u2014 "),mj=a("a"),Gxo=o("ReformerForQuestionAnswering"),Oxo=o(" (Reformer model)"),Xxo=l(),u2=a("li"),sse=a("strong"),Vxo=o("rembert"),zxo=o(" \u2014 "),gj=a("a"),Wxo=o("RemBertForQuestionAnswering"),Qxo=o(" (RemBERT model)"),Hxo=l(),b2=a("li"),lse=a("strong"),Uxo=o("roberta"),Jxo=o(" \u2014 "),hj=a("a"),Yxo=o("RobertaForQuestionAnswering"),Kxo=o(" (RoBERTa model)"),Zxo=l(),v2=a("li"),ise=a("strong"),eko=o("roformer"),oko=o(" \u2014 "),pj=a("a"),rko=o("RoFormerForQuestionAnswering"),tko=o(" (RoFormer model)"),ako=l(),T2=a("li"),dse=a("strong"),nko=o("splinter"),sko=o(" \u2014 "),_j=a("a"),lko=o("SplinterForQuestionAnswering"),iko=o(" (Splinter model)"),dko=l(),F2=a("li"),cse=a("strong"),cko=o("squeezebert"),fko=o(" \u2014 "),uj=a("a"),mko=o("SqueezeBertForQuestionAnswering"),gko=o(" (SqueezeBERT model)"),hko=l(),C2=a("li"),fse=a("strong"),pko=o("xlm"),_ko=o(" \u2014 "),bj=a("a"),uko=o("XLMForQuestionAnsweringSimple"),bko=o(" (XLM model)"),vko=l(),M2=a("li"),mse=a("strong"),Tko=o("xlm-roberta"),Fko=o(" \u2014 "),vj=a("a"),Cko=o("XLMRobertaForQuestionAnswering"),Mko=o(" (XLM-RoBERTa model)"),Eko=l(),E2=a("li"),gse=a("strong"),yko=o("xlm-roberta-xl"),wko=o(" \u2014 "),Tj=a("a"),Ako=o("XLMRobertaXLForQuestionAnswering"),Lko=o(" (XLM-RoBERTa-XL model)"),Bko=l(),y2=a("li"),hse=a("strong"),xko=o("xlnet"),kko=o(" \u2014 "),Fj=a("a"),Rko=o("XLNetForQuestionAnsweringSimple"),Sko=o(" (XLNet model)"),Pko=l(),w2=a("li"),pse=a("strong"),$ko=o("yoso"),Iko=o(" \u2014 "),Cj=a("a"),Dko=o("YosoForQuestionAnswering"),jko=o(" (YOSO model)"),Nko=l(),A2=a("p"),qko=o("The model is set in evaluation mode by default using "),_se=a("code"),Gko=o("model.eval()"),Oko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=a("code"),Xko=o("model.train()"),Vko=l(),bse=a("p"),zko=o("Examples:"),Wko=l(),f(uy.$$.fragment),aBe=l(),bd=a("h2"),L2=a("a"),vse=a("span"),f(by.$$.fragment),Qko=l(),Tse=a("span"),Hko=o("AutoModelForTableQuestionAnswering"),nBe=l(),tr=a("div"),f(vy.$$.fragment),Uko=l(),vd=a("p"),Jko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Fse=a("code"),Yko=o("from_pretrained()"),Kko=o("class method or the "),Cse=a("code"),Zko=o("from_config()"),eRo=o(`class
method.`),oRo=l(),Ty=a("p"),rRo=o("This class cannot be instantiated directly using "),Mse=a("code"),tRo=o("__init__()"),aRo=o(" (throws an error)."),nRo=l(),Jr=a("div"),f(Fy.$$.fragment),sRo=l(),Ese=a("p"),lRo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iRo=l(),Td=a("p"),dRo=o(`Note:
Loading a model from its configuration file does `),yse=a("strong"),cRo=o("not"),fRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=a("code"),mRo=o("from_pretrained()"),gRo=o("to load the model weights."),hRo=l(),Ase=a("p"),pRo=o("Examples:"),_Ro=l(),f(Cy.$$.fragment),uRo=l(),Oe=a("div"),f(My.$$.fragment),bRo=l(),Lse=a("p"),vRo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TRo=l(),Ua=a("p"),FRo=o("The model class to instantiate is selected based on the "),Bse=a("code"),CRo=o("model_type"),MRo=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),ERo=o("pretrained_model_name_or_path"),yRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=a("code"),wRo=o("pretrained_model_name_or_path"),ARo=o(":"),LRo=l(),Rse=a("ul"),B2=a("li"),Sse=a("strong"),BRo=o("tapas"),xRo=o(" \u2014 "),Mj=a("a"),kRo=o("TapasForQuestionAnswering"),RRo=o(" (TAPAS model)"),SRo=l(),x2=a("p"),PRo=o("The model is set in evaluation mode by default using "),Pse=a("code"),$Ro=o("model.eval()"),IRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$se=a("code"),DRo=o("model.train()"),jRo=l(),Ise=a("p"),NRo=o("Examples:"),qRo=l(),f(Ey.$$.fragment),sBe=l(),Fd=a("h2"),k2=a("a"),Dse=a("span"),f(yy.$$.fragment),GRo=l(),jse=a("span"),ORo=o("AutoModelForImageClassification"),lBe=l(),ar=a("div"),f(wy.$$.fragment),XRo=l(),Cd=a("p"),VRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nse=a("code"),zRo=o("from_pretrained()"),WRo=o("class method or the "),qse=a("code"),QRo=o("from_config()"),HRo=o(`class
method.`),URo=l(),Ay=a("p"),JRo=o("This class cannot be instantiated directly using "),Gse=a("code"),YRo=o("__init__()"),KRo=o(" (throws an error)."),ZRo=l(),Yr=a("div"),f(Ly.$$.fragment),eSo=l(),Ose=a("p"),oSo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rSo=l(),Md=a("p"),tSo=o(`Note:
Loading a model from its configuration file does `),Xse=a("strong"),aSo=o("not"),nSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vse=a("code"),sSo=o("from_pretrained()"),lSo=o("to load the model weights."),iSo=l(),zse=a("p"),dSo=o("Examples:"),cSo=l(),f(By.$$.fragment),fSo=l(),Xe=a("div"),f(xy.$$.fragment),mSo=l(),Wse=a("p"),gSo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hSo=l(),Ja=a("p"),pSo=o("The model class to instantiate is selected based on the "),Qse=a("code"),_So=o("model_type"),uSo=o(` property of the config object (either
passed as an argument or loaded from `),Hse=a("code"),bSo=o("pretrained_model_name_or_path"),vSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Use=a("code"),TSo=o("pretrained_model_name_or_path"),FSo=o(":"),CSo=l(),be=a("ul"),R2=a("li"),Jse=a("strong"),MSo=o("beit"),ESo=o(" \u2014 "),Ej=a("a"),ySo=o("BeitForImageClassification"),wSo=o(" (BEiT model)"),ASo=l(),S2=a("li"),Yse=a("strong"),LSo=o("convnext"),BSo=o(" \u2014 "),yj=a("a"),xSo=o("ConvNextForImageClassification"),kSo=o(" (ConvNext model)"),RSo=l(),Ps=a("li"),Kse=a("strong"),SSo=o("deit"),PSo=o(" \u2014 "),wj=a("a"),$So=o("DeiTForImageClassification"),ISo=o(" or "),Aj=a("a"),DSo=o("DeiTForImageClassificationWithTeacher"),jSo=o(" (DeiT model)"),NSo=l(),P2=a("li"),Zse=a("strong"),qSo=o("imagegpt"),GSo=o(" \u2014 "),Lj=a("a"),OSo=o("ImageGPTForImageClassification"),XSo=o(" (ImageGPT model)"),VSo=l(),la=a("li"),ele=a("strong"),zSo=o("perceiver"),WSo=o(" \u2014 "),Bj=a("a"),QSo=o("PerceiverForImageClassificationLearned"),HSo=o(" or "),xj=a("a"),USo=o("PerceiverForImageClassificationFourier"),JSo=o(" or "),kj=a("a"),YSo=o("PerceiverForImageClassificationConvProcessing"),KSo=o(" (Perceiver model)"),ZSo=l(),$2=a("li"),ole=a("strong"),ePo=o("poolformer"),oPo=o(" \u2014 "),Rj=a("a"),rPo=o("PoolFormerForImageClassification"),tPo=o(" (PoolFormer model)"),aPo=l(),I2=a("li"),rle=a("strong"),nPo=o("segformer"),sPo=o(" \u2014 "),Sj=a("a"),lPo=o("SegformerForImageClassification"),iPo=o(" (SegFormer model)"),dPo=l(),D2=a("li"),tle=a("strong"),cPo=o("swin"),fPo=o(" \u2014 "),Pj=a("a"),mPo=o("SwinForImageClassification"),gPo=o(" (Swin model)"),hPo=l(),j2=a("li"),ale=a("strong"),pPo=o("vit"),_Po=o(" \u2014 "),$j=a("a"),uPo=o("ViTForImageClassification"),bPo=o(" (ViT model)"),vPo=l(),N2=a("p"),TPo=o("The model is set in evaluation mode by default using "),nle=a("code"),FPo=o("model.eval()"),CPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sle=a("code"),MPo=o("model.train()"),EPo=l(),lle=a("p"),yPo=o("Examples:"),wPo=l(),f(ky.$$.fragment),iBe=l(),Ed=a("h2"),q2=a("a"),ile=a("span"),f(Ry.$$.fragment),APo=l(),dle=a("span"),LPo=o("AutoModelForVision2Seq"),dBe=l(),nr=a("div"),f(Sy.$$.fragment),BPo=l(),yd=a("p"),xPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cle=a("code"),kPo=o("from_pretrained()"),RPo=o("class method or the "),fle=a("code"),SPo=o("from_config()"),PPo=o(`class
method.`),$Po=l(),Py=a("p"),IPo=o("This class cannot be instantiated directly using "),mle=a("code"),DPo=o("__init__()"),jPo=o(" (throws an error)."),NPo=l(),Kr=a("div"),f($y.$$.fragment),qPo=l(),gle=a("p"),GPo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OPo=l(),wd=a("p"),XPo=o(`Note:
Loading a model from its configuration file does `),hle=a("strong"),VPo=o("not"),zPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ple=a("code"),WPo=o("from_pretrained()"),QPo=o("to load the model weights."),HPo=l(),_le=a("p"),UPo=o("Examples:"),JPo=l(),f(Iy.$$.fragment),YPo=l(),Ve=a("div"),f(Dy.$$.fragment),KPo=l(),ule=a("p"),ZPo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),e$o=l(),Ya=a("p"),o$o=o("The model class to instantiate is selected based on the "),ble=a("code"),r$o=o("model_type"),t$o=o(` property of the config object (either
passed as an argument or loaded from `),vle=a("code"),a$o=o("pretrained_model_name_or_path"),n$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=a("code"),s$o=o("pretrained_model_name_or_path"),l$o=o(":"),i$o=l(),Fle=a("ul"),G2=a("li"),Cle=a("strong"),d$o=o("vision-encoder-decoder"),c$o=o(" \u2014 "),Ij=a("a"),f$o=o("VisionEncoderDecoderModel"),m$o=o(" (Vision Encoder decoder model)"),g$o=l(),O2=a("p"),h$o=o("The model is set in evaluation mode by default using "),Mle=a("code"),p$o=o("model.eval()"),_$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=a("code"),u$o=o("model.train()"),b$o=l(),yle=a("p"),v$o=o("Examples:"),T$o=l(),f(jy.$$.fragment),cBe=l(),Ad=a("h2"),X2=a("a"),wle=a("span"),f(Ny.$$.fragment),F$o=l(),Ale=a("span"),C$o=o("AutoModelForAudioClassification"),fBe=l(),sr=a("div"),f(qy.$$.fragment),M$o=l(),Ld=a("p"),E$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Lle=a("code"),y$o=o("from_pretrained()"),w$o=o("class method or the "),Ble=a("code"),A$o=o("from_config()"),L$o=o(`class
method.`),B$o=l(),Gy=a("p"),x$o=o("This class cannot be instantiated directly using "),xle=a("code"),k$o=o("__init__()"),R$o=o(" (throws an error)."),S$o=l(),Zr=a("div"),f(Oy.$$.fragment),P$o=l(),kle=a("p"),$$o=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),I$o=l(),Bd=a("p"),D$o=o(`Note:
Loading a model from its configuration file does `),Rle=a("strong"),j$o=o("not"),N$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=a("code"),q$o=o("from_pretrained()"),G$o=o("to load the model weights."),O$o=l(),Ple=a("p"),X$o=o("Examples:"),V$o=l(),f(Xy.$$.fragment),z$o=l(),ze=a("div"),f(Vy.$$.fragment),W$o=l(),$le=a("p"),Q$o=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),H$o=l(),Ka=a("p"),U$o=o("The model class to instantiate is selected based on the "),Ile=a("code"),J$o=o("model_type"),Y$o=o(` property of the config object (either
passed as an argument or loaded from `),Dle=a("code"),K$o=o("pretrained_model_name_or_path"),Z$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jle=a("code"),eIo=o("pretrained_model_name_or_path"),oIo=o(":"),rIo=l(),Ae=a("ul"),V2=a("li"),Nle=a("strong"),tIo=o("data2vec-audio"),aIo=o(" \u2014 "),Dj=a("a"),nIo=o("Data2VecAudioForSequenceClassification"),sIo=o(" (Data2VecAudio model)"),lIo=l(),z2=a("li"),qle=a("strong"),iIo=o("hubert"),dIo=o(" \u2014 "),jj=a("a"),cIo=o("HubertForSequenceClassification"),fIo=o(" (Hubert model)"),mIo=l(),W2=a("li"),Gle=a("strong"),gIo=o("sew"),hIo=o(" \u2014 "),Nj=a("a"),pIo=o("SEWForSequenceClassification"),_Io=o(" (SEW model)"),uIo=l(),Q2=a("li"),Ole=a("strong"),bIo=o("sew-d"),vIo=o(" \u2014 "),qj=a("a"),TIo=o("SEWDForSequenceClassification"),FIo=o(" (SEW-D model)"),CIo=l(),H2=a("li"),Xle=a("strong"),MIo=o("unispeech"),EIo=o(" \u2014 "),Gj=a("a"),yIo=o("UniSpeechForSequenceClassification"),wIo=o(" (UniSpeech model)"),AIo=l(),U2=a("li"),Vle=a("strong"),LIo=o("unispeech-sat"),BIo=o(" \u2014 "),Oj=a("a"),xIo=o("UniSpeechSatForSequenceClassification"),kIo=o(" (UniSpeechSat model)"),RIo=l(),J2=a("li"),zle=a("strong"),SIo=o("wav2vec2"),PIo=o(" \u2014 "),Xj=a("a"),$Io=o("Wav2Vec2ForSequenceClassification"),IIo=o(" (Wav2Vec2 model)"),DIo=l(),Y2=a("li"),Wle=a("strong"),jIo=o("wavlm"),NIo=o(" \u2014 "),Vj=a("a"),qIo=o("WavLMForSequenceClassification"),GIo=o(" (WavLM model)"),OIo=l(),K2=a("p"),XIo=o("The model is set in evaluation mode by default using "),Qle=a("code"),VIo=o("model.eval()"),zIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=a("code"),WIo=o("model.train()"),QIo=l(),Ule=a("p"),HIo=o("Examples:"),UIo=l(),f(zy.$$.fragment),mBe=l(),xd=a("h2"),Z2=a("a"),Jle=a("span"),f(Wy.$$.fragment),JIo=l(),Yle=a("span"),YIo=o("AutoModelForAudioFrameClassification"),gBe=l(),lr=a("div"),f(Qy.$$.fragment),KIo=l(),kd=a("p"),ZIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Kle=a("code"),eDo=o("from_pretrained()"),oDo=o("class method or the "),Zle=a("code"),rDo=o("from_config()"),tDo=o(`class
method.`),aDo=l(),Hy=a("p"),nDo=o("This class cannot be instantiated directly using "),eie=a("code"),sDo=o("__init__()"),lDo=o(" (throws an error)."),iDo=l(),et=a("div"),f(Uy.$$.fragment),dDo=l(),oie=a("p"),cDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fDo=l(),Rd=a("p"),mDo=o(`Note:
Loading a model from its configuration file does `),rie=a("strong"),gDo=o("not"),hDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tie=a("code"),pDo=o("from_pretrained()"),_Do=o("to load the model weights."),uDo=l(),aie=a("p"),bDo=o("Examples:"),vDo=l(),f(Jy.$$.fragment),TDo=l(),We=a("div"),f(Yy.$$.fragment),FDo=l(),nie=a("p"),CDo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),MDo=l(),Za=a("p"),EDo=o("The model class to instantiate is selected based on the "),sie=a("code"),yDo=o("model_type"),wDo=o(` property of the config object (either
passed as an argument or loaded from `),lie=a("code"),ADo=o("pretrained_model_name_or_path"),LDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=a("code"),BDo=o("pretrained_model_name_or_path"),xDo=o(":"),kDo=l(),en=a("ul"),ev=a("li"),die=a("strong"),RDo=o("data2vec-audio"),SDo=o(" \u2014 "),zj=a("a"),PDo=o("Data2VecAudioForAudioFrameClassification"),$Do=o(" (Data2VecAudio model)"),IDo=l(),ov=a("li"),cie=a("strong"),DDo=o("unispeech-sat"),jDo=o(" \u2014 "),Wj=a("a"),NDo=o("UniSpeechSatForAudioFrameClassification"),qDo=o(" (UniSpeechSat model)"),GDo=l(),rv=a("li"),fie=a("strong"),ODo=o("wav2vec2"),XDo=o(" \u2014 "),Qj=a("a"),VDo=o("Wav2Vec2ForAudioFrameClassification"),zDo=o(" (Wav2Vec2 model)"),WDo=l(),tv=a("li"),mie=a("strong"),QDo=o("wavlm"),HDo=o(" \u2014 "),Hj=a("a"),UDo=o("WavLMForAudioFrameClassification"),JDo=o(" (WavLM model)"),YDo=l(),av=a("p"),KDo=o("The model is set in evaluation mode by default using "),gie=a("code"),ZDo=o("model.eval()"),ejo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),ojo=o("model.train()"),rjo=l(),pie=a("p"),tjo=o("Examples:"),ajo=l(),f(Ky.$$.fragment),hBe=l(),Sd=a("h2"),nv=a("a"),_ie=a("span"),f(Zy.$$.fragment),njo=l(),uie=a("span"),sjo=o("AutoModelForCTC"),pBe=l(),ir=a("div"),f(ew.$$.fragment),ljo=l(),Pd=a("p"),ijo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bie=a("code"),djo=o("from_pretrained()"),cjo=o("class method or the "),vie=a("code"),fjo=o("from_config()"),mjo=o(`class
method.`),gjo=l(),ow=a("p"),hjo=o("This class cannot be instantiated directly using "),Tie=a("code"),pjo=o("__init__()"),_jo=o(" (throws an error)."),ujo=l(),ot=a("div"),f(rw.$$.fragment),bjo=l(),Fie=a("p"),vjo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Tjo=l(),$d=a("p"),Fjo=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),Cjo=o("not"),Mjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=a("code"),Ejo=o("from_pretrained()"),yjo=o("to load the model weights."),wjo=l(),Eie=a("p"),Ajo=o("Examples:"),Ljo=l(),f(tw.$$.fragment),Bjo=l(),Qe=a("div"),f(aw.$$.fragment),xjo=l(),yie=a("p"),kjo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rjo=l(),on=a("p"),Sjo=o("The model class to instantiate is selected based on the "),wie=a("code"),Pjo=o("model_type"),$jo=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),Ijo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=a("code"),jjo=o("pretrained_model_name_or_path"),Njo=o(":"),qjo=l(),Le=a("ul"),sv=a("li"),Bie=a("strong"),Gjo=o("data2vec-audio"),Ojo=o(" \u2014 "),Uj=a("a"),Xjo=o("Data2VecAudioForCTC"),Vjo=o(" (Data2VecAudio model)"),zjo=l(),lv=a("li"),xie=a("strong"),Wjo=o("hubert"),Qjo=o(" \u2014 "),Jj=a("a"),Hjo=o("HubertForCTC"),Ujo=o(" (Hubert model)"),Jjo=l(),iv=a("li"),kie=a("strong"),Yjo=o("sew"),Kjo=o(" \u2014 "),Yj=a("a"),Zjo=o("SEWForCTC"),eNo=o(" (SEW model)"),oNo=l(),dv=a("li"),Rie=a("strong"),rNo=o("sew-d"),tNo=o(" \u2014 "),Kj=a("a"),aNo=o("SEWDForCTC"),nNo=o(" (SEW-D model)"),sNo=l(),cv=a("li"),Sie=a("strong"),lNo=o("unispeech"),iNo=o(" \u2014 "),Zj=a("a"),dNo=o("UniSpeechForCTC"),cNo=o(" (UniSpeech model)"),fNo=l(),fv=a("li"),Pie=a("strong"),mNo=o("unispeech-sat"),gNo=o(" \u2014 "),eN=a("a"),hNo=o("UniSpeechSatForCTC"),pNo=o(" (UniSpeechSat model)"),_No=l(),mv=a("li"),$ie=a("strong"),uNo=o("wav2vec2"),bNo=o(" \u2014 "),oN=a("a"),vNo=o("Wav2Vec2ForCTC"),TNo=o(" (Wav2Vec2 model)"),FNo=l(),gv=a("li"),Iie=a("strong"),CNo=o("wavlm"),MNo=o(" \u2014 "),rN=a("a"),ENo=o("WavLMForCTC"),yNo=o(" (WavLM model)"),wNo=l(),hv=a("p"),ANo=o("The model is set in evaluation mode by default using "),Die=a("code"),LNo=o("model.eval()"),BNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),xNo=o("model.train()"),kNo=l(),Nie=a("p"),RNo=o("Examples:"),SNo=l(),f(nw.$$.fragment),_Be=l(),Id=a("h2"),pv=a("a"),qie=a("span"),f(sw.$$.fragment),PNo=l(),Gie=a("span"),$No=o("AutoModelForSpeechSeq2Seq"),uBe=l(),dr=a("div"),f(lw.$$.fragment),INo=l(),Dd=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Oie=a("code"),jNo=o("from_pretrained()"),NNo=o("class method or the "),Xie=a("code"),qNo=o("from_config()"),GNo=o(`class
method.`),ONo=l(),iw=a("p"),XNo=o("This class cannot be instantiated directly using "),Vie=a("code"),VNo=o("__init__()"),zNo=o(" (throws an error)."),WNo=l(),rt=a("div"),f(dw.$$.fragment),QNo=l(),zie=a("p"),HNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UNo=l(),jd=a("p"),JNo=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),YNo=o("not"),KNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qie=a("code"),ZNo=o("from_pretrained()"),eqo=o("to load the model weights."),oqo=l(),Hie=a("p"),rqo=o("Examples:"),tqo=l(),f(cw.$$.fragment),aqo=l(),He=a("div"),f(fw.$$.fragment),nqo=l(),Uie=a("p"),sqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lqo=l(),rn=a("p"),iqo=o("The model class to instantiate is selected based on the "),Jie=a("code"),dqo=o("model_type"),cqo=o(` property of the config object (either
passed as an argument or loaded from `),Yie=a("code"),fqo=o("pretrained_model_name_or_path"),mqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=a("code"),gqo=o("pretrained_model_name_or_path"),hqo=o(":"),pqo=l(),mw=a("ul"),_v=a("li"),Zie=a("strong"),_qo=o("speech-encoder-decoder"),uqo=o(" \u2014 "),tN=a("a"),bqo=o("SpeechEncoderDecoderModel"),vqo=o(" (Speech Encoder decoder model)"),Tqo=l(),uv=a("li"),ede=a("strong"),Fqo=o("speech_to_text"),Cqo=o(" \u2014 "),aN=a("a"),Mqo=o("Speech2TextForConditionalGeneration"),Eqo=o(" (Speech2Text model)"),yqo=l(),bv=a("p"),wqo=o("The model is set in evaluation mode by default using "),ode=a("code"),Aqo=o("model.eval()"),Lqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),Bqo=o("model.train()"),xqo=l(),tde=a("p"),kqo=o("Examples:"),Rqo=l(),f(gw.$$.fragment),bBe=l(),Nd=a("h2"),vv=a("a"),ade=a("span"),f(hw.$$.fragment),Sqo=l(),nde=a("span"),Pqo=o("AutoModelForAudioXVector"),vBe=l(),cr=a("div"),f(pw.$$.fragment),$qo=l(),qd=a("p"),Iqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),sde=a("code"),Dqo=o("from_pretrained()"),jqo=o("class method or the "),lde=a("code"),Nqo=o("from_config()"),qqo=o(`class
method.`),Gqo=l(),_w=a("p"),Oqo=o("This class cannot be instantiated directly using "),ide=a("code"),Xqo=o("__init__()"),Vqo=o(" (throws an error)."),zqo=l(),tt=a("div"),f(uw.$$.fragment),Wqo=l(),dde=a("p"),Qqo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Hqo=l(),Gd=a("p"),Uqo=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),Jqo=o("not"),Yqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fde=a("code"),Kqo=o("from_pretrained()"),Zqo=o("to load the model weights."),eGo=l(),mde=a("p"),oGo=o("Examples:"),rGo=l(),f(bw.$$.fragment),tGo=l(),Ue=a("div"),f(vw.$$.fragment),aGo=l(),gde=a("p"),nGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),sGo=l(),tn=a("p"),lGo=o("The model class to instantiate is selected based on the "),hde=a("code"),iGo=o("model_type"),dGo=o(` property of the config object (either
passed as an argument or loaded from `),pde=a("code"),cGo=o("pretrained_model_name_or_path"),fGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_de=a("code"),mGo=o("pretrained_model_name_or_path"),gGo=o(":"),hGo=l(),an=a("ul"),Tv=a("li"),ude=a("strong"),pGo=o("data2vec-audio"),_Go=o(" \u2014 "),nN=a("a"),uGo=o("Data2VecAudioForXVector"),bGo=o(" (Data2VecAudio model)"),vGo=l(),Fv=a("li"),bde=a("strong"),TGo=o("unispeech-sat"),FGo=o(" \u2014 "),sN=a("a"),CGo=o("UniSpeechSatForXVector"),MGo=o(" (UniSpeechSat model)"),EGo=l(),Cv=a("li"),vde=a("strong"),yGo=o("wav2vec2"),wGo=o(" \u2014 "),lN=a("a"),AGo=o("Wav2Vec2ForXVector"),LGo=o(" (Wav2Vec2 model)"),BGo=l(),Mv=a("li"),Tde=a("strong"),xGo=o("wavlm"),kGo=o(" \u2014 "),iN=a("a"),RGo=o("WavLMForXVector"),SGo=o(" (WavLM model)"),PGo=l(),Ev=a("p"),$Go=o("The model is set in evaluation mode by default using "),Fde=a("code"),IGo=o("model.eval()"),DGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),jGo=o("model.train()"),NGo=l(),Mde=a("p"),qGo=o("Examples:"),GGo=l(),f(Tw.$$.fragment),TBe=l(),Od=a("h2"),yv=a("a"),Ede=a("span"),f(Fw.$$.fragment),OGo=l(),yde=a("span"),XGo=o("AutoModelForMaskedImageModeling"),FBe=l(),fr=a("div"),f(Cw.$$.fragment),VGo=l(),Xd=a("p"),zGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wde=a("code"),WGo=o("from_pretrained()"),QGo=o("class method or the "),Ade=a("code"),HGo=o("from_config()"),UGo=o(`class
method.`),JGo=l(),Mw=a("p"),YGo=o("This class cannot be instantiated directly using "),Lde=a("code"),KGo=o("__init__()"),ZGo=o(" (throws an error)."),eOo=l(),at=a("div"),f(Ew.$$.fragment),oOo=l(),Bde=a("p"),rOo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),tOo=l(),Vd=a("p"),aOo=o(`Note:
Loading a model from its configuration file does `),xde=a("strong"),nOo=o("not"),sOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=a("code"),lOo=o("from_pretrained()"),iOo=o("to load the model weights."),dOo=l(),Rde=a("p"),cOo=o("Examples:"),fOo=l(),f(yw.$$.fragment),mOo=l(),Je=a("div"),f(ww.$$.fragment),gOo=l(),Sde=a("p"),hOo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pOo=l(),nn=a("p"),_Oo=o("The model class to instantiate is selected based on the "),Pde=a("code"),uOo=o("model_type"),bOo=o(` property of the config object (either
passed as an argument or loaded from `),$de=a("code"),vOo=o("pretrained_model_name_or_path"),TOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),FOo=o("pretrained_model_name_or_path"),COo=o(":"),MOo=l(),zd=a("ul"),wv=a("li"),Dde=a("strong"),EOo=o("deit"),yOo=o(" \u2014 "),dN=a("a"),wOo=o("DeiTForMaskedImageModeling"),AOo=o(" (DeiT model)"),LOo=l(),Av=a("li"),jde=a("strong"),BOo=o("swin"),xOo=o(" \u2014 "),cN=a("a"),kOo=o("SwinForMaskedImageModeling"),ROo=o(" (Swin model)"),SOo=l(),Lv=a("li"),Nde=a("strong"),POo=o("vit"),$Oo=o(" \u2014 "),fN=a("a"),IOo=o("ViTForMaskedImageModeling"),DOo=o(" (ViT model)"),jOo=l(),Bv=a("p"),NOo=o("The model is set in evaluation mode by default using "),qde=a("code"),qOo=o("model.eval()"),GOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gde=a("code"),OOo=o("model.train()"),XOo=l(),Ode=a("p"),VOo=o("Examples:"),zOo=l(),f(Aw.$$.fragment),CBe=l(),Wd=a("h2"),xv=a("a"),Xde=a("span"),f(Lw.$$.fragment),WOo=l(),Vde=a("span"),QOo=o("AutoModelForObjectDetection"),MBe=l(),mr=a("div"),f(Bw.$$.fragment),HOo=l(),Qd=a("p"),UOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zde=a("code"),JOo=o("from_pretrained()"),YOo=o("class method or the "),Wde=a("code"),KOo=o("from_config()"),ZOo=o(`class
method.`),eXo=l(),xw=a("p"),oXo=o("This class cannot be instantiated directly using "),Qde=a("code"),rXo=o("__init__()"),tXo=o(" (throws an error)."),aXo=l(),nt=a("div"),f(kw.$$.fragment),nXo=l(),Hde=a("p"),sXo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),lXo=l(),Hd=a("p"),iXo=o(`Note:
Loading a model from its configuration file does `),Ude=a("strong"),dXo=o("not"),cXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jde=a("code"),fXo=o("from_pretrained()"),mXo=o("to load the model weights."),gXo=l(),Yde=a("p"),hXo=o("Examples:"),pXo=l(),f(Rw.$$.fragment),_Xo=l(),Ye=a("div"),f(Sw.$$.fragment),uXo=l(),Kde=a("p"),bXo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vXo=l(),sn=a("p"),TXo=o("The model class to instantiate is selected based on the "),Zde=a("code"),FXo=o("model_type"),CXo=o(` property of the config object (either
passed as an argument or loaded from `),ece=a("code"),MXo=o("pretrained_model_name_or_path"),EXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oce=a("code"),yXo=o("pretrained_model_name_or_path"),wXo=o(":"),AXo=l(),rce=a("ul"),kv=a("li"),tce=a("strong"),LXo=o("detr"),BXo=o(" \u2014 "),mN=a("a"),xXo=o("DetrForObjectDetection"),kXo=o(" (DETR model)"),RXo=l(),Rv=a("p"),SXo=o("The model is set in evaluation mode by default using "),ace=a("code"),PXo=o("model.eval()"),$Xo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=a("code"),IXo=o("model.train()"),DXo=l(),sce=a("p"),jXo=o("Examples:"),NXo=l(),f(Pw.$$.fragment),EBe=l(),Ud=a("h2"),Sv=a("a"),lce=a("span"),f($w.$$.fragment),qXo=l(),ice=a("span"),GXo=o("AutoModelForImageSegmentation"),yBe=l(),gr=a("div"),f(Iw.$$.fragment),OXo=l(),Jd=a("p"),XXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),dce=a("code"),VXo=o("from_pretrained()"),zXo=o("class method or the "),cce=a("code"),WXo=o("from_config()"),QXo=o(`class
method.`),HXo=l(),Dw=a("p"),UXo=o("This class cannot be instantiated directly using "),fce=a("code"),JXo=o("__init__()"),YXo=o(" (throws an error)."),KXo=l(),st=a("div"),f(jw.$$.fragment),ZXo=l(),mce=a("p"),eVo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),oVo=l(),Yd=a("p"),rVo=o(`Note:
Loading a model from its configuration file does `),gce=a("strong"),tVo=o("not"),aVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hce=a("code"),nVo=o("from_pretrained()"),sVo=o("to load the model weights."),lVo=l(),pce=a("p"),iVo=o("Examples:"),dVo=l(),f(Nw.$$.fragment),cVo=l(),Ke=a("div"),f(qw.$$.fragment),fVo=l(),_ce=a("p"),mVo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),gVo=l(),ln=a("p"),hVo=o("The model class to instantiate is selected based on the "),uce=a("code"),pVo=o("model_type"),_Vo=o(` property of the config object (either
passed as an argument or loaded from `),bce=a("code"),uVo=o("pretrained_model_name_or_path"),bVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=a("code"),vVo=o("pretrained_model_name_or_path"),TVo=o(":"),FVo=l(),Tce=a("ul"),Pv=a("li"),Fce=a("strong"),CVo=o("detr"),MVo=o(" \u2014 "),gN=a("a"),EVo=o("DetrForSegmentation"),yVo=o(" (DETR model)"),wVo=l(),$v=a("p"),AVo=o("The model is set in evaluation mode by default using "),Cce=a("code"),LVo=o("model.eval()"),BVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),xVo=o("model.train()"),kVo=l(),Ece=a("p"),RVo=o("Examples:"),SVo=l(),f(Gw.$$.fragment),wBe=l(),Kd=a("h2"),Iv=a("a"),yce=a("span"),f(Ow.$$.fragment),PVo=l(),wce=a("span"),$Vo=o("AutoModelForSemanticSegmentation"),ABe=l(),hr=a("div"),f(Xw.$$.fragment),IVo=l(),Zd=a("p"),DVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ace=a("code"),jVo=o("from_pretrained()"),NVo=o("class method or the "),Lce=a("code"),qVo=o("from_config()"),GVo=o(`class
method.`),OVo=l(),Vw=a("p"),XVo=o("This class cannot be instantiated directly using "),Bce=a("code"),VVo=o("__init__()"),zVo=o(" (throws an error)."),WVo=l(),lt=a("div"),f(zw.$$.fragment),QVo=l(),xce=a("p"),HVo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),UVo=l(),ec=a("p"),JVo=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),YVo=o("not"),KVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rce=a("code"),ZVo=o("from_pretrained()"),ezo=o("to load the model weights."),ozo=l(),Sce=a("p"),rzo=o("Examples:"),tzo=l(),f(Ww.$$.fragment),azo=l(),Ze=a("div"),f(Qw.$$.fragment),nzo=l(),Pce=a("p"),szo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lzo=l(),dn=a("p"),izo=o("The model class to instantiate is selected based on the "),$ce=a("code"),dzo=o("model_type"),czo=o(` property of the config object (either
passed as an argument or loaded from `),Ice=a("code"),fzo=o("pretrained_model_name_or_path"),mzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=a("code"),gzo=o("pretrained_model_name_or_path"),hzo=o(":"),pzo=l(),Hw=a("ul"),Dv=a("li"),jce=a("strong"),_zo=o("beit"),uzo=o(" \u2014 "),hN=a("a"),bzo=o("BeitForSemanticSegmentation"),vzo=o(" (BEiT model)"),Tzo=l(),jv=a("li"),Nce=a("strong"),Fzo=o("segformer"),Czo=o(" \u2014 "),pN=a("a"),Mzo=o("SegformerForSemanticSegmentation"),Ezo=o(" (SegFormer model)"),yzo=l(),Nv=a("p"),wzo=o("The model is set in evaluation mode by default using "),qce=a("code"),Azo=o("model.eval()"),Lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=a("code"),Bzo=o("model.train()"),xzo=l(),Oce=a("p"),kzo=o("Examples:"),Rzo=l(),f(Uw.$$.fragment),LBe=l(),oc=a("h2"),qv=a("a"),Xce=a("span"),f(Jw.$$.fragment),Szo=l(),Vce=a("span"),Pzo=o("TFAutoModel"),BBe=l(),pr=a("div"),f(Yw.$$.fragment),$zo=l(),rc=a("p"),Izo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zce=a("code"),Dzo=o("from_pretrained()"),jzo=o("class method or the "),Wce=a("code"),Nzo=o("from_config()"),qzo=o(`class
method.`),Gzo=l(),Kw=a("p"),Ozo=o("This class cannot be instantiated directly using "),Qce=a("code"),Xzo=o("__init__()"),Vzo=o(" (throws an error)."),zzo=l(),it=a("div"),f(Zw.$$.fragment),Wzo=l(),Hce=a("p"),Qzo=o("Instantiates one of the base model classes of the library from a configuration."),Hzo=l(),tc=a("p"),Uzo=o(`Note:
Loading a model from its configuration file does `),Uce=a("strong"),Jzo=o("not"),Yzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jce=a("code"),Kzo=o("from_pretrained()"),Zzo=o("to load the model weights."),eWo=l(),Yce=a("p"),oWo=o("Examples:"),rWo=l(),f(e6.$$.fragment),tWo=l(),go=a("div"),f(o6.$$.fragment),aWo=l(),Kce=a("p"),nWo=o("Instantiate one of the base model classes of the library from a pretrained model."),sWo=l(),cn=a("p"),lWo=o("The model class to instantiate is selected based on the "),Zce=a("code"),iWo=o("model_type"),dWo=o(` property of the config object (either
passed as an argument or loaded from `),efe=a("code"),cWo=o("pretrained_model_name_or_path"),fWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=a("code"),mWo=o("pretrained_model_name_or_path"),gWo=o(":"),hWo=l(),B=a("ul"),Gv=a("li"),rfe=a("strong"),pWo=o("albert"),_Wo=o(" \u2014 "),_N=a("a"),uWo=o("TFAlbertModel"),bWo=o(" (ALBERT model)"),vWo=l(),Ov=a("li"),tfe=a("strong"),TWo=o("bart"),FWo=o(" \u2014 "),uN=a("a"),CWo=o("TFBartModel"),MWo=o(" (BART model)"),EWo=l(),Xv=a("li"),afe=a("strong"),yWo=o("bert"),wWo=o(" \u2014 "),bN=a("a"),AWo=o("TFBertModel"),LWo=o(" (BERT model)"),BWo=l(),Vv=a("li"),nfe=a("strong"),xWo=o("blenderbot"),kWo=o(" \u2014 "),vN=a("a"),RWo=o("TFBlenderbotModel"),SWo=o(" (Blenderbot model)"),PWo=l(),zv=a("li"),sfe=a("strong"),$Wo=o("blenderbot-small"),IWo=o(" \u2014 "),TN=a("a"),DWo=o("TFBlenderbotSmallModel"),jWo=o(" (BlenderbotSmall model)"),NWo=l(),Wv=a("li"),lfe=a("strong"),qWo=o("camembert"),GWo=o(" \u2014 "),FN=a("a"),OWo=o("TFCamembertModel"),XWo=o(" (CamemBERT model)"),VWo=l(),Qv=a("li"),ife=a("strong"),zWo=o("clip"),WWo=o(" \u2014 "),CN=a("a"),QWo=o("TFCLIPModel"),HWo=o(" (CLIP model)"),UWo=l(),Hv=a("li"),dfe=a("strong"),JWo=o("convbert"),YWo=o(" \u2014 "),MN=a("a"),KWo=o("TFConvBertModel"),ZWo=o(" (ConvBERT model)"),eQo=l(),Uv=a("li"),cfe=a("strong"),oQo=o("convnext"),rQo=o(" \u2014 "),EN=a("a"),tQo=o("TFConvNextModel"),aQo=o(" (ConvNext model)"),nQo=l(),Jv=a("li"),ffe=a("strong"),sQo=o("ctrl"),lQo=o(" \u2014 "),yN=a("a"),iQo=o("TFCTRLModel"),dQo=o(" (CTRL model)"),cQo=l(),Yv=a("li"),mfe=a("strong"),fQo=o("deberta"),mQo=o(" \u2014 "),wN=a("a"),gQo=o("TFDebertaModel"),hQo=o(" (DeBERTa model)"),pQo=l(),Kv=a("li"),gfe=a("strong"),_Qo=o("deberta-v2"),uQo=o(" \u2014 "),AN=a("a"),bQo=o("TFDebertaV2Model"),vQo=o(" (DeBERTa-v2 model)"),TQo=l(),Zv=a("li"),hfe=a("strong"),FQo=o("distilbert"),CQo=o(" \u2014 "),LN=a("a"),MQo=o("TFDistilBertModel"),EQo=o(" (DistilBERT model)"),yQo=l(),eT=a("li"),pfe=a("strong"),wQo=o("dpr"),AQo=o(" \u2014 "),BN=a("a"),LQo=o("TFDPRQuestionEncoder"),BQo=o(" (DPR model)"),xQo=l(),oT=a("li"),_fe=a("strong"),kQo=o("electra"),RQo=o(" \u2014 "),xN=a("a"),SQo=o("TFElectraModel"),PQo=o(" (ELECTRA model)"),$Qo=l(),rT=a("li"),ufe=a("strong"),IQo=o("flaubert"),DQo=o(" \u2014 "),kN=a("a"),jQo=o("TFFlaubertModel"),NQo=o(" (FlauBERT model)"),qQo=l(),$s=a("li"),bfe=a("strong"),GQo=o("funnel"),OQo=o(" \u2014 "),RN=a("a"),XQo=o("TFFunnelModel"),VQo=o(" or "),SN=a("a"),zQo=o("TFFunnelBaseModel"),WQo=o(" (Funnel Transformer model)"),QQo=l(),tT=a("li"),vfe=a("strong"),HQo=o("gpt2"),UQo=o(" \u2014 "),PN=a("a"),JQo=o("TFGPT2Model"),YQo=o(" (OpenAI GPT-2 model)"),KQo=l(),aT=a("li"),Tfe=a("strong"),ZQo=o("hubert"),eHo=o(" \u2014 "),$N=a("a"),oHo=o("TFHubertModel"),rHo=o(" (Hubert model)"),tHo=l(),nT=a("li"),Ffe=a("strong"),aHo=o("layoutlm"),nHo=o(" \u2014 "),IN=a("a"),sHo=o("TFLayoutLMModel"),lHo=o(" (LayoutLM model)"),iHo=l(),sT=a("li"),Cfe=a("strong"),dHo=o("led"),cHo=o(" \u2014 "),DN=a("a"),fHo=o("TFLEDModel"),mHo=o(" (LED model)"),gHo=l(),lT=a("li"),Mfe=a("strong"),hHo=o("longformer"),pHo=o(" \u2014 "),jN=a("a"),_Ho=o("TFLongformerModel"),uHo=o(" (Longformer model)"),bHo=l(),iT=a("li"),Efe=a("strong"),vHo=o("lxmert"),THo=o(" \u2014 "),NN=a("a"),FHo=o("TFLxmertModel"),CHo=o(" (LXMERT model)"),MHo=l(),dT=a("li"),yfe=a("strong"),EHo=o("marian"),yHo=o(" \u2014 "),qN=a("a"),wHo=o("TFMarianModel"),AHo=o(" (Marian model)"),LHo=l(),cT=a("li"),wfe=a("strong"),BHo=o("mbart"),xHo=o(" \u2014 "),GN=a("a"),kHo=o("TFMBartModel"),RHo=o(" (mBART model)"),SHo=l(),fT=a("li"),Afe=a("strong"),PHo=o("mobilebert"),$Ho=o(" \u2014 "),ON=a("a"),IHo=o("TFMobileBertModel"),DHo=o(" (MobileBERT model)"),jHo=l(),mT=a("li"),Lfe=a("strong"),NHo=o("mpnet"),qHo=o(" \u2014 "),XN=a("a"),GHo=o("TFMPNetModel"),OHo=o(" (MPNet model)"),XHo=l(),gT=a("li"),Bfe=a("strong"),VHo=o("mt5"),zHo=o(" \u2014 "),VN=a("a"),WHo=o("TFMT5Model"),QHo=o(" (mT5 model)"),HHo=l(),hT=a("li"),xfe=a("strong"),UHo=o("openai-gpt"),JHo=o(" \u2014 "),zN=a("a"),YHo=o("TFOpenAIGPTModel"),KHo=o(" (OpenAI GPT model)"),ZHo=l(),pT=a("li"),kfe=a("strong"),eUo=o("pegasus"),oUo=o(" \u2014 "),WN=a("a"),rUo=o("TFPegasusModel"),tUo=o(" (Pegasus model)"),aUo=l(),_T=a("li"),Rfe=a("strong"),nUo=o("rembert"),sUo=o(" \u2014 "),QN=a("a"),lUo=o("TFRemBertModel"),iUo=o(" (RemBERT model)"),dUo=l(),uT=a("li"),Sfe=a("strong"),cUo=o("roberta"),fUo=o(" \u2014 "),HN=a("a"),mUo=o("TFRobertaModel"),gUo=o(" (RoBERTa model)"),hUo=l(),bT=a("li"),Pfe=a("strong"),pUo=o("roformer"),_Uo=o(" \u2014 "),UN=a("a"),uUo=o("TFRoFormerModel"),bUo=o(" (RoFormer model)"),vUo=l(),vT=a("li"),$fe=a("strong"),TUo=o("speech_to_text"),FUo=o(" \u2014 "),JN=a("a"),CUo=o("TFSpeech2TextModel"),MUo=o(" (Speech2Text model)"),EUo=l(),TT=a("li"),Ife=a("strong"),yUo=o("t5"),wUo=o(" \u2014 "),YN=a("a"),AUo=o("TFT5Model"),LUo=o(" (T5 model)"),BUo=l(),FT=a("li"),Dfe=a("strong"),xUo=o("tapas"),kUo=o(" \u2014 "),KN=a("a"),RUo=o("TFTapasModel"),SUo=o(" (TAPAS model)"),PUo=l(),CT=a("li"),jfe=a("strong"),$Uo=o("transfo-xl"),IUo=o(" \u2014 "),ZN=a("a"),DUo=o("TFTransfoXLModel"),jUo=o(" (Transformer-XL model)"),NUo=l(),MT=a("li"),Nfe=a("strong"),qUo=o("vit"),GUo=o(" \u2014 "),eq=a("a"),OUo=o("TFViTModel"),XUo=o(" (ViT model)"),VUo=l(),ET=a("li"),qfe=a("strong"),zUo=o("wav2vec2"),WUo=o(" \u2014 "),oq=a("a"),QUo=o("TFWav2Vec2Model"),HUo=o(" (Wav2Vec2 model)"),UUo=l(),yT=a("li"),Gfe=a("strong"),JUo=o("xlm"),YUo=o(" \u2014 "),rq=a("a"),KUo=o("TFXLMModel"),ZUo=o(" (XLM model)"),eJo=l(),wT=a("li"),Ofe=a("strong"),oJo=o("xlm-roberta"),rJo=o(" \u2014 "),tq=a("a"),tJo=o("TFXLMRobertaModel"),aJo=o(" (XLM-RoBERTa model)"),nJo=l(),AT=a("li"),Xfe=a("strong"),sJo=o("xlnet"),lJo=o(" \u2014 "),aq=a("a"),iJo=o("TFXLNetModel"),dJo=o(" (XLNet model)"),cJo=l(),Vfe=a("p"),fJo=o("Examples:"),mJo=l(),f(r6.$$.fragment),xBe=l(),ac=a("h2"),LT=a("a"),zfe=a("span"),f(t6.$$.fragment),gJo=l(),Wfe=a("span"),hJo=o("TFAutoModelForPreTraining"),kBe=l(),_r=a("div"),f(a6.$$.fragment),pJo=l(),nc=a("p"),_Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qfe=a("code"),uJo=o("from_pretrained()"),bJo=o("class method or the "),Hfe=a("code"),vJo=o("from_config()"),TJo=o(`class
method.`),FJo=l(),n6=a("p"),CJo=o("This class cannot be instantiated directly using "),Ufe=a("code"),MJo=o("__init__()"),EJo=o(" (throws an error)."),yJo=l(),dt=a("div"),f(s6.$$.fragment),wJo=l(),Jfe=a("p"),AJo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LJo=l(),sc=a("p"),BJo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),xJo=o("not"),kJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kfe=a("code"),RJo=o("from_pretrained()"),SJo=o("to load the model weights."),PJo=l(),Zfe=a("p"),$Jo=o("Examples:"),IJo=l(),f(l6.$$.fragment),DJo=l(),ho=a("div"),f(i6.$$.fragment),jJo=l(),eme=a("p"),NJo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qJo=l(),fn=a("p"),GJo=o("The model class to instantiate is selected based on the "),ome=a("code"),OJo=o("model_type"),XJo=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),VJo=o("pretrained_model_name_or_path"),zJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),WJo=o("pretrained_model_name_or_path"),QJo=o(":"),HJo=l(),H=a("ul"),BT=a("li"),ame=a("strong"),UJo=o("albert"),JJo=o(" \u2014 "),nq=a("a"),YJo=o("TFAlbertForPreTraining"),KJo=o(" (ALBERT model)"),ZJo=l(),xT=a("li"),nme=a("strong"),eYo=o("bart"),oYo=o(" \u2014 "),sq=a("a"),rYo=o("TFBartForConditionalGeneration"),tYo=o(" (BART model)"),aYo=l(),kT=a("li"),sme=a("strong"),nYo=o("bert"),sYo=o(" \u2014 "),lq=a("a"),lYo=o("TFBertForPreTraining"),iYo=o(" (BERT model)"),dYo=l(),RT=a("li"),lme=a("strong"),cYo=o("camembert"),fYo=o(" \u2014 "),iq=a("a"),mYo=o("TFCamembertForMaskedLM"),gYo=o(" (CamemBERT model)"),hYo=l(),ST=a("li"),ime=a("strong"),pYo=o("ctrl"),_Yo=o(" \u2014 "),dq=a("a"),uYo=o("TFCTRLLMHeadModel"),bYo=o(" (CTRL model)"),vYo=l(),PT=a("li"),dme=a("strong"),TYo=o("distilbert"),FYo=o(" \u2014 "),cq=a("a"),CYo=o("TFDistilBertForMaskedLM"),MYo=o(" (DistilBERT model)"),EYo=l(),$T=a("li"),cme=a("strong"),yYo=o("electra"),wYo=o(" \u2014 "),fq=a("a"),AYo=o("TFElectraForPreTraining"),LYo=o(" (ELECTRA model)"),BYo=l(),IT=a("li"),fme=a("strong"),xYo=o("flaubert"),kYo=o(" \u2014 "),mq=a("a"),RYo=o("TFFlaubertWithLMHeadModel"),SYo=o(" (FlauBERT model)"),PYo=l(),DT=a("li"),mme=a("strong"),$Yo=o("funnel"),IYo=o(" \u2014 "),gq=a("a"),DYo=o("TFFunnelForPreTraining"),jYo=o(" (Funnel Transformer model)"),NYo=l(),jT=a("li"),gme=a("strong"),qYo=o("gpt2"),GYo=o(" \u2014 "),hq=a("a"),OYo=o("TFGPT2LMHeadModel"),XYo=o(" (OpenAI GPT-2 model)"),VYo=l(),NT=a("li"),hme=a("strong"),zYo=o("layoutlm"),WYo=o(" \u2014 "),pq=a("a"),QYo=o("TFLayoutLMForMaskedLM"),HYo=o(" (LayoutLM model)"),UYo=l(),qT=a("li"),pme=a("strong"),JYo=o("lxmert"),YYo=o(" \u2014 "),_q=a("a"),KYo=o("TFLxmertForPreTraining"),ZYo=o(" (LXMERT model)"),eKo=l(),GT=a("li"),_me=a("strong"),oKo=o("mobilebert"),rKo=o(" \u2014 "),uq=a("a"),tKo=o("TFMobileBertForPreTraining"),aKo=o(" (MobileBERT model)"),nKo=l(),OT=a("li"),ume=a("strong"),sKo=o("mpnet"),lKo=o(" \u2014 "),bq=a("a"),iKo=o("TFMPNetForMaskedLM"),dKo=o(" (MPNet model)"),cKo=l(),XT=a("li"),bme=a("strong"),fKo=o("openai-gpt"),mKo=o(" \u2014 "),vq=a("a"),gKo=o("TFOpenAIGPTLMHeadModel"),hKo=o(" (OpenAI GPT model)"),pKo=l(),VT=a("li"),vme=a("strong"),_Ko=o("roberta"),uKo=o(" \u2014 "),Tq=a("a"),bKo=o("TFRobertaForMaskedLM"),vKo=o(" (RoBERTa model)"),TKo=l(),zT=a("li"),Tme=a("strong"),FKo=o("t5"),CKo=o(" \u2014 "),Fq=a("a"),MKo=o("TFT5ForConditionalGeneration"),EKo=o(" (T5 model)"),yKo=l(),WT=a("li"),Fme=a("strong"),wKo=o("tapas"),AKo=o(" \u2014 "),Cq=a("a"),LKo=o("TFTapasForMaskedLM"),BKo=o(" (TAPAS model)"),xKo=l(),QT=a("li"),Cme=a("strong"),kKo=o("transfo-xl"),RKo=o(" \u2014 "),Mq=a("a"),SKo=o("TFTransfoXLLMHeadModel"),PKo=o(" (Transformer-XL model)"),$Ko=l(),HT=a("li"),Mme=a("strong"),IKo=o("xlm"),DKo=o(" \u2014 "),Eq=a("a"),jKo=o("TFXLMWithLMHeadModel"),NKo=o(" (XLM model)"),qKo=l(),UT=a("li"),Eme=a("strong"),GKo=o("xlm-roberta"),OKo=o(" \u2014 "),yq=a("a"),XKo=o("TFXLMRobertaForMaskedLM"),VKo=o(" (XLM-RoBERTa model)"),zKo=l(),JT=a("li"),yme=a("strong"),WKo=o("xlnet"),QKo=o(" \u2014 "),wq=a("a"),HKo=o("TFXLNetLMHeadModel"),UKo=o(" (XLNet model)"),JKo=l(),wme=a("p"),YKo=o("Examples:"),KKo=l(),f(d6.$$.fragment),RBe=l(),lc=a("h2"),YT=a("a"),Ame=a("span"),f(c6.$$.fragment),ZKo=l(),Lme=a("span"),eZo=o("TFAutoModelForCausalLM"),SBe=l(),ur=a("div"),f(f6.$$.fragment),oZo=l(),ic=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bme=a("code"),tZo=o("from_pretrained()"),aZo=o("class method or the "),xme=a("code"),nZo=o("from_config()"),sZo=o(`class
method.`),lZo=l(),m6=a("p"),iZo=o("This class cannot be instantiated directly using "),kme=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),fZo=l(),ct=a("div"),f(g6.$$.fragment),mZo=l(),Rme=a("p"),gZo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hZo=l(),dc=a("p"),pZo=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),_Zo=o("not"),uZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pme=a("code"),bZo=o("from_pretrained()"),vZo=o("to load the model weights."),TZo=l(),$me=a("p"),FZo=o("Examples:"),CZo=l(),f(h6.$$.fragment),MZo=l(),po=a("div"),f(p6.$$.fragment),EZo=l(),Ime=a("p"),yZo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wZo=l(),mn=a("p"),AZo=o("The model class to instantiate is selected based on the "),Dme=a("code"),LZo=o("model_type"),BZo=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),xZo=o("pretrained_model_name_or_path"),kZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),RZo=o("pretrained_model_name_or_path"),SZo=o(":"),PZo=l(),he=a("ul"),KT=a("li"),qme=a("strong"),$Zo=o("bert"),IZo=o(" \u2014 "),Aq=a("a"),DZo=o("TFBertLMHeadModel"),jZo=o(" (BERT model)"),NZo=l(),ZT=a("li"),Gme=a("strong"),qZo=o("ctrl"),GZo=o(" \u2014 "),Lq=a("a"),OZo=o("TFCTRLLMHeadModel"),XZo=o(" (CTRL model)"),VZo=l(),eF=a("li"),Ome=a("strong"),zZo=o("gpt2"),WZo=o(" \u2014 "),Bq=a("a"),QZo=o("TFGPT2LMHeadModel"),HZo=o(" (OpenAI GPT-2 model)"),UZo=l(),oF=a("li"),Xme=a("strong"),JZo=o("openai-gpt"),YZo=o(" \u2014 "),xq=a("a"),KZo=o("TFOpenAIGPTLMHeadModel"),ZZo=o(" (OpenAI GPT model)"),eer=l(),rF=a("li"),Vme=a("strong"),oer=o("rembert"),rer=o(" \u2014 "),kq=a("a"),ter=o("TFRemBertForCausalLM"),aer=o(" (RemBERT model)"),ner=l(),tF=a("li"),zme=a("strong"),ser=o("roberta"),ler=o(" \u2014 "),Rq=a("a"),ier=o("TFRobertaForCausalLM"),der=o(" (RoBERTa model)"),cer=l(),aF=a("li"),Wme=a("strong"),fer=o("roformer"),mer=o(" \u2014 "),Sq=a("a"),ger=o("TFRoFormerForCausalLM"),her=o(" (RoFormer model)"),per=l(),nF=a("li"),Qme=a("strong"),_er=o("transfo-xl"),uer=o(" \u2014 "),Pq=a("a"),ber=o("TFTransfoXLLMHeadModel"),ver=o(" (Transformer-XL model)"),Ter=l(),sF=a("li"),Hme=a("strong"),Fer=o("xlm"),Cer=o(" \u2014 "),$q=a("a"),Mer=o("TFXLMWithLMHeadModel"),Eer=o(" (XLM model)"),yer=l(),lF=a("li"),Ume=a("strong"),wer=o("xlnet"),Aer=o(" \u2014 "),Iq=a("a"),Ler=o("TFXLNetLMHeadModel"),Ber=o(" (XLNet model)"),xer=l(),Jme=a("p"),ker=o("Examples:"),Rer=l(),f(_6.$$.fragment),PBe=l(),cc=a("h2"),iF=a("a"),Yme=a("span"),f(u6.$$.fragment),Ser=l(),Kme=a("span"),Per=o("TFAutoModelForImageClassification"),$Be=l(),br=a("div"),f(b6.$$.fragment),$er=l(),fc=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Zme=a("code"),Der=o("from_pretrained()"),jer=o("class method or the "),ege=a("code"),Ner=o("from_config()"),qer=o(`class
method.`),Ger=l(),v6=a("p"),Oer=o("This class cannot be instantiated directly using "),oge=a("code"),Xer=o("__init__()"),Ver=o(" (throws an error)."),zer=l(),ft=a("div"),f(T6.$$.fragment),Wer=l(),rge=a("p"),Qer=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Her=l(),mc=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),age=a("code"),Ker=o("from_pretrained()"),Zer=o("to load the model weights."),eor=l(),nge=a("p"),oor=o("Examples:"),ror=l(),f(F6.$$.fragment),tor=l(),_o=a("div"),f(C6.$$.fragment),aor=l(),sge=a("p"),nor=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sor=l(),gn=a("p"),lor=o("The model class to instantiate is selected based on the "),lge=a("code"),ior=o("model_type"),dor=o(` property of the config object (either
passed as an argument or loaded from `),ige=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=a("code"),gor=o("pretrained_model_name_or_path"),hor=o(":"),por=l(),M6=a("ul"),dF=a("li"),cge=a("strong"),_or=o("convnext"),uor=o(" \u2014 "),Dq=a("a"),bor=o("TFConvNextForImageClassification"),vor=o(" (ConvNext model)"),Tor=l(),cF=a("li"),fge=a("strong"),For=o("vit"),Cor=o(" \u2014 "),jq=a("a"),Mor=o("TFViTForImageClassification"),Eor=o(" (ViT model)"),yor=l(),mge=a("p"),wor=o("Examples:"),Aor=l(),f(E6.$$.fragment),IBe=l(),gc=a("h2"),fF=a("a"),gge=a("span"),f(y6.$$.fragment),Lor=l(),hge=a("span"),Bor=o("TFAutoModelForMaskedLM"),DBe=l(),vr=a("div"),f(w6.$$.fragment),xor=l(),hc=a("p"),kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pge=a("code"),Ror=o("from_pretrained()"),Sor=o("class method or the "),_ge=a("code"),Por=o("from_config()"),$or=o(`class
method.`),Ior=l(),A6=a("p"),Dor=o("This class cannot be instantiated directly using "),uge=a("code"),jor=o("__init__()"),Nor=o(" (throws an error)."),qor=l(),mt=a("div"),f(L6.$$.fragment),Gor=l(),bge=a("p"),Oor=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xor=l(),pc=a("p"),Vor=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),zor=o("not"),Wor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tge=a("code"),Qor=o("from_pretrained()"),Hor=o("to load the model weights."),Uor=l(),Fge=a("p"),Jor=o("Examples:"),Yor=l(),f(B6.$$.fragment),Kor=l(),uo=a("div"),f(x6.$$.fragment),Zor=l(),Cge=a("p"),err=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),orr=l(),hn=a("p"),rrr=o("The model class to instantiate is selected based on the "),Mge=a("code"),trr=o("model_type"),arr=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),nrr=o("pretrained_model_name_or_path"),srr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(":"),drr=l(),Y=a("ul"),mF=a("li"),wge=a("strong"),crr=o("albert"),frr=o(" \u2014 "),Nq=a("a"),mrr=o("TFAlbertForMaskedLM"),grr=o(" (ALBERT model)"),hrr=l(),gF=a("li"),Age=a("strong"),prr=o("bert"),_rr=o(" \u2014 "),qq=a("a"),urr=o("TFBertForMaskedLM"),brr=o(" (BERT model)"),vrr=l(),hF=a("li"),Lge=a("strong"),Trr=o("camembert"),Frr=o(" \u2014 "),Gq=a("a"),Crr=o("TFCamembertForMaskedLM"),Mrr=o(" (CamemBERT model)"),Err=l(),pF=a("li"),Bge=a("strong"),yrr=o("convbert"),wrr=o(" \u2014 "),Oq=a("a"),Arr=o("TFConvBertForMaskedLM"),Lrr=o(" (ConvBERT model)"),Brr=l(),_F=a("li"),xge=a("strong"),xrr=o("deberta"),krr=o(" \u2014 "),Xq=a("a"),Rrr=o("TFDebertaForMaskedLM"),Srr=o(" (DeBERTa model)"),Prr=l(),uF=a("li"),kge=a("strong"),$rr=o("deberta-v2"),Irr=o(" \u2014 "),Vq=a("a"),Drr=o("TFDebertaV2ForMaskedLM"),jrr=o(" (DeBERTa-v2 model)"),Nrr=l(),bF=a("li"),Rge=a("strong"),qrr=o("distilbert"),Grr=o(" \u2014 "),zq=a("a"),Orr=o("TFDistilBertForMaskedLM"),Xrr=o(" (DistilBERT model)"),Vrr=l(),vF=a("li"),Sge=a("strong"),zrr=o("electra"),Wrr=o(" \u2014 "),Wq=a("a"),Qrr=o("TFElectraForMaskedLM"),Hrr=o(" (ELECTRA model)"),Urr=l(),TF=a("li"),Pge=a("strong"),Jrr=o("flaubert"),Yrr=o(" \u2014 "),Qq=a("a"),Krr=o("TFFlaubertWithLMHeadModel"),Zrr=o(" (FlauBERT model)"),etr=l(),FF=a("li"),$ge=a("strong"),otr=o("funnel"),rtr=o(" \u2014 "),Hq=a("a"),ttr=o("TFFunnelForMaskedLM"),atr=o(" (Funnel Transformer model)"),ntr=l(),CF=a("li"),Ige=a("strong"),str=o("layoutlm"),ltr=o(" \u2014 "),Uq=a("a"),itr=o("TFLayoutLMForMaskedLM"),dtr=o(" (LayoutLM model)"),ctr=l(),MF=a("li"),Dge=a("strong"),ftr=o("longformer"),mtr=o(" \u2014 "),Jq=a("a"),gtr=o("TFLongformerForMaskedLM"),htr=o(" (Longformer model)"),ptr=l(),EF=a("li"),jge=a("strong"),_tr=o("mobilebert"),utr=o(" \u2014 "),Yq=a("a"),btr=o("TFMobileBertForMaskedLM"),vtr=o(" (MobileBERT model)"),Ttr=l(),yF=a("li"),Nge=a("strong"),Ftr=o("mpnet"),Ctr=o(" \u2014 "),Kq=a("a"),Mtr=o("TFMPNetForMaskedLM"),Etr=o(" (MPNet model)"),ytr=l(),wF=a("li"),qge=a("strong"),wtr=o("rembert"),Atr=o(" \u2014 "),Zq=a("a"),Ltr=o("TFRemBertForMaskedLM"),Btr=o(" (RemBERT model)"),xtr=l(),AF=a("li"),Gge=a("strong"),ktr=o("roberta"),Rtr=o(" \u2014 "),eG=a("a"),Str=o("TFRobertaForMaskedLM"),Ptr=o(" (RoBERTa model)"),$tr=l(),LF=a("li"),Oge=a("strong"),Itr=o("roformer"),Dtr=o(" \u2014 "),oG=a("a"),jtr=o("TFRoFormerForMaskedLM"),Ntr=o(" (RoFormer model)"),qtr=l(),BF=a("li"),Xge=a("strong"),Gtr=o("tapas"),Otr=o(" \u2014 "),rG=a("a"),Xtr=o("TFTapasForMaskedLM"),Vtr=o(" (TAPAS model)"),ztr=l(),xF=a("li"),Vge=a("strong"),Wtr=o("xlm"),Qtr=o(" \u2014 "),tG=a("a"),Htr=o("TFXLMWithLMHeadModel"),Utr=o(" (XLM model)"),Jtr=l(),kF=a("li"),zge=a("strong"),Ytr=o("xlm-roberta"),Ktr=o(" \u2014 "),aG=a("a"),Ztr=o("TFXLMRobertaForMaskedLM"),ear=o(" (XLM-RoBERTa model)"),oar=l(),Wge=a("p"),rar=o("Examples:"),tar=l(),f(k6.$$.fragment),jBe=l(),_c=a("h2"),RF=a("a"),Qge=a("span"),f(R6.$$.fragment),aar=l(),Hge=a("span"),nar=o("TFAutoModelForSeq2SeqLM"),NBe=l(),Tr=a("div"),f(S6.$$.fragment),sar=l(),uc=a("p"),lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Uge=a("code"),iar=o("from_pretrained()"),dar=o("class method or the "),Jge=a("code"),car=o("from_config()"),far=o(`class
method.`),mar=l(),P6=a("p"),gar=o("This class cannot be instantiated directly using "),Yge=a("code"),har=o("__init__()"),par=o(" (throws an error)."),_ar=l(),gt=a("div"),f($6.$$.fragment),uar=l(),Kge=a("p"),bar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tar=l(),bc=a("p"),Far=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),Car=o("not"),Mar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ehe=a("code"),Ear=o("from_pretrained()"),yar=o("to load the model weights."),war=l(),ohe=a("p"),Aar=o("Examples:"),Lar=l(),f(I6.$$.fragment),Bar=l(),bo=a("div"),f(D6.$$.fragment),xar=l(),rhe=a("p"),kar=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rar=l(),pn=a("p"),Sar=o("The model class to instantiate is selected based on the "),the=a("code"),Par=o("model_type"),$ar=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),Iar=o("pretrained_model_name_or_path"),Dar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),jar=o("pretrained_model_name_or_path"),Nar=o(":"),qar=l(),pe=a("ul"),SF=a("li"),she=a("strong"),Gar=o("bart"),Oar=o(" \u2014 "),nG=a("a"),Xar=o("TFBartForConditionalGeneration"),Var=o(" (BART model)"),zar=l(),PF=a("li"),lhe=a("strong"),War=o("blenderbot"),Qar=o(" \u2014 "),sG=a("a"),Har=o("TFBlenderbotForConditionalGeneration"),Uar=o(" (Blenderbot model)"),Jar=l(),$F=a("li"),ihe=a("strong"),Yar=o("blenderbot-small"),Kar=o(" \u2014 "),lG=a("a"),Zar=o("TFBlenderbotSmallForConditionalGeneration"),enr=o(" (BlenderbotSmall model)"),onr=l(),IF=a("li"),dhe=a("strong"),rnr=o("encoder-decoder"),tnr=o(" \u2014 "),iG=a("a"),anr=o("TFEncoderDecoderModel"),nnr=o(" (Encoder decoder model)"),snr=l(),DF=a("li"),che=a("strong"),lnr=o("led"),inr=o(" \u2014 "),dG=a("a"),dnr=o("TFLEDForConditionalGeneration"),cnr=o(" (LED model)"),fnr=l(),jF=a("li"),fhe=a("strong"),mnr=o("marian"),gnr=o(" \u2014 "),cG=a("a"),hnr=o("TFMarianMTModel"),pnr=o(" (Marian model)"),_nr=l(),NF=a("li"),mhe=a("strong"),unr=o("mbart"),bnr=o(" \u2014 "),fG=a("a"),vnr=o("TFMBartForConditionalGeneration"),Tnr=o(" (mBART model)"),Fnr=l(),qF=a("li"),ghe=a("strong"),Cnr=o("mt5"),Mnr=o(" \u2014 "),mG=a("a"),Enr=o("TFMT5ForConditionalGeneration"),ynr=o(" (mT5 model)"),wnr=l(),GF=a("li"),hhe=a("strong"),Anr=o("pegasus"),Lnr=o(" \u2014 "),gG=a("a"),Bnr=o("TFPegasusForConditionalGeneration"),xnr=o(" (Pegasus model)"),knr=l(),OF=a("li"),phe=a("strong"),Rnr=o("t5"),Snr=o(" \u2014 "),hG=a("a"),Pnr=o("TFT5ForConditionalGeneration"),$nr=o(" (T5 model)"),Inr=l(),_he=a("p"),Dnr=o("Examples:"),jnr=l(),f(j6.$$.fragment),qBe=l(),vc=a("h2"),XF=a("a"),uhe=a("span"),f(N6.$$.fragment),Nnr=l(),bhe=a("span"),qnr=o("TFAutoModelForSequenceClassification"),GBe=l(),Fr=a("div"),f(q6.$$.fragment),Gnr=l(),Tc=a("p"),Onr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vhe=a("code"),Xnr=o("from_pretrained()"),Vnr=o("class method or the "),The=a("code"),znr=o("from_config()"),Wnr=o(`class
method.`),Qnr=l(),G6=a("p"),Hnr=o("This class cannot be instantiated directly using "),Fhe=a("code"),Unr=o("__init__()"),Jnr=o(" (throws an error)."),Ynr=l(),ht=a("div"),f(O6.$$.fragment),Knr=l(),Che=a("p"),Znr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),esr=l(),Fc=a("p"),osr=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),rsr=o("not"),tsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ehe=a("code"),asr=o("from_pretrained()"),nsr=o("to load the model weights."),ssr=l(),yhe=a("p"),lsr=o("Examples:"),isr=l(),f(X6.$$.fragment),dsr=l(),vo=a("div"),f(V6.$$.fragment),csr=l(),whe=a("p"),fsr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),msr=l(),_n=a("p"),gsr=o("The model class to instantiate is selected based on the "),Ahe=a("code"),hsr=o("model_type"),psr=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),_sr=o("pretrained_model_name_or_path"),usr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),bsr=o("pretrained_model_name_or_path"),vsr=o(":"),Tsr=l(),X=a("ul"),VF=a("li"),xhe=a("strong"),Fsr=o("albert"),Csr=o(" \u2014 "),pG=a("a"),Msr=o("TFAlbertForSequenceClassification"),Esr=o(" (ALBERT model)"),ysr=l(),zF=a("li"),khe=a("strong"),wsr=o("bert"),Asr=o(" \u2014 "),_G=a("a"),Lsr=o("TFBertForSequenceClassification"),Bsr=o(" (BERT model)"),xsr=l(),WF=a("li"),Rhe=a("strong"),ksr=o("camembert"),Rsr=o(" \u2014 "),uG=a("a"),Ssr=o("TFCamembertForSequenceClassification"),Psr=o(" (CamemBERT model)"),$sr=l(),QF=a("li"),She=a("strong"),Isr=o("convbert"),Dsr=o(" \u2014 "),bG=a("a"),jsr=o("TFConvBertForSequenceClassification"),Nsr=o(" (ConvBERT model)"),qsr=l(),HF=a("li"),Phe=a("strong"),Gsr=o("ctrl"),Osr=o(" \u2014 "),vG=a("a"),Xsr=o("TFCTRLForSequenceClassification"),Vsr=o(" (CTRL model)"),zsr=l(),UF=a("li"),$he=a("strong"),Wsr=o("deberta"),Qsr=o(" \u2014 "),TG=a("a"),Hsr=o("TFDebertaForSequenceClassification"),Usr=o(" (DeBERTa model)"),Jsr=l(),JF=a("li"),Ihe=a("strong"),Ysr=o("deberta-v2"),Ksr=o(" \u2014 "),FG=a("a"),Zsr=o("TFDebertaV2ForSequenceClassification"),elr=o(" (DeBERTa-v2 model)"),olr=l(),YF=a("li"),Dhe=a("strong"),rlr=o("distilbert"),tlr=o(" \u2014 "),CG=a("a"),alr=o("TFDistilBertForSequenceClassification"),nlr=o(" (DistilBERT model)"),slr=l(),KF=a("li"),jhe=a("strong"),llr=o("electra"),ilr=o(" \u2014 "),MG=a("a"),dlr=o("TFElectraForSequenceClassification"),clr=o(" (ELECTRA model)"),flr=l(),ZF=a("li"),Nhe=a("strong"),mlr=o("flaubert"),glr=o(" \u2014 "),EG=a("a"),hlr=o("TFFlaubertForSequenceClassification"),plr=o(" (FlauBERT model)"),_lr=l(),e9=a("li"),qhe=a("strong"),ulr=o("funnel"),blr=o(" \u2014 "),yG=a("a"),vlr=o("TFFunnelForSequenceClassification"),Tlr=o(" (Funnel Transformer model)"),Flr=l(),o9=a("li"),Ghe=a("strong"),Clr=o("gpt2"),Mlr=o(" \u2014 "),wG=a("a"),Elr=o("TFGPT2ForSequenceClassification"),ylr=o(" (OpenAI GPT-2 model)"),wlr=l(),r9=a("li"),Ohe=a("strong"),Alr=o("layoutlm"),Llr=o(" \u2014 "),AG=a("a"),Blr=o("TFLayoutLMForSequenceClassification"),xlr=o(" (LayoutLM model)"),klr=l(),t9=a("li"),Xhe=a("strong"),Rlr=o("longformer"),Slr=o(" \u2014 "),LG=a("a"),Plr=o("TFLongformerForSequenceClassification"),$lr=o(" (Longformer model)"),Ilr=l(),a9=a("li"),Vhe=a("strong"),Dlr=o("mobilebert"),jlr=o(" \u2014 "),BG=a("a"),Nlr=o("TFMobileBertForSequenceClassification"),qlr=o(" (MobileBERT model)"),Glr=l(),n9=a("li"),zhe=a("strong"),Olr=o("mpnet"),Xlr=o(" \u2014 "),xG=a("a"),Vlr=o("TFMPNetForSequenceClassification"),zlr=o(" (MPNet model)"),Wlr=l(),s9=a("li"),Whe=a("strong"),Qlr=o("openai-gpt"),Hlr=o(" \u2014 "),kG=a("a"),Ulr=o("TFOpenAIGPTForSequenceClassification"),Jlr=o(" (OpenAI GPT model)"),Ylr=l(),l9=a("li"),Qhe=a("strong"),Klr=o("rembert"),Zlr=o(" \u2014 "),RG=a("a"),eir=o("TFRemBertForSequenceClassification"),oir=o(" (RemBERT model)"),rir=l(),i9=a("li"),Hhe=a("strong"),tir=o("roberta"),air=o(" \u2014 "),SG=a("a"),nir=o("TFRobertaForSequenceClassification"),sir=o(" (RoBERTa model)"),lir=l(),d9=a("li"),Uhe=a("strong"),iir=o("roformer"),dir=o(" \u2014 "),PG=a("a"),cir=o("TFRoFormerForSequenceClassification"),fir=o(" (RoFormer model)"),mir=l(),c9=a("li"),Jhe=a("strong"),gir=o("tapas"),hir=o(" \u2014 "),$G=a("a"),pir=o("TFTapasForSequenceClassification"),_ir=o(" (TAPAS model)"),uir=l(),f9=a("li"),Yhe=a("strong"),bir=o("transfo-xl"),vir=o(" \u2014 "),IG=a("a"),Tir=o("TFTransfoXLForSequenceClassification"),Fir=o(" (Transformer-XL model)"),Cir=l(),m9=a("li"),Khe=a("strong"),Mir=o("xlm"),Eir=o(" \u2014 "),DG=a("a"),yir=o("TFXLMForSequenceClassification"),wir=o(" (XLM model)"),Air=l(),g9=a("li"),Zhe=a("strong"),Lir=o("xlm-roberta"),Bir=o(" \u2014 "),jG=a("a"),xir=o("TFXLMRobertaForSequenceClassification"),kir=o(" (XLM-RoBERTa model)"),Rir=l(),h9=a("li"),epe=a("strong"),Sir=o("xlnet"),Pir=o(" \u2014 "),NG=a("a"),$ir=o("TFXLNetForSequenceClassification"),Iir=o(" (XLNet model)"),Dir=l(),ope=a("p"),jir=o("Examples:"),Nir=l(),f(z6.$$.fragment),OBe=l(),Cc=a("h2"),p9=a("a"),rpe=a("span"),f(W6.$$.fragment),qir=l(),tpe=a("span"),Gir=o("TFAutoModelForMultipleChoice"),XBe=l(),Cr=a("div"),f(Q6.$$.fragment),Oir=l(),Mc=a("p"),Xir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ape=a("code"),Vir=o("from_pretrained()"),zir=o("class method or the "),npe=a("code"),Wir=o("from_config()"),Qir=o(`class
method.`),Hir=l(),H6=a("p"),Uir=o("This class cannot be instantiated directly using "),spe=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),pt=a("div"),f(U6.$$.fragment),Zir=l(),lpe=a("p"),edr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),odr=l(),Ec=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dpe=a("code"),ndr=o("from_pretrained()"),sdr=o("to load the model weights."),ldr=l(),cpe=a("p"),idr=o("Examples:"),ddr=l(),f(J6.$$.fragment),cdr=l(),To=a("div"),f(Y6.$$.fragment),fdr=l(),fpe=a("p"),mdr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gdr=l(),un=a("p"),hdr=o("The model class to instantiate is selected based on the "),mpe=a("code"),pdr=o("model_type"),_dr=o(` property of the config object (either
passed as an argument or loaded from `),gpe=a("code"),udr=o("pretrained_model_name_or_path"),bdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=a("code"),vdr=o("pretrained_model_name_or_path"),Tdr=o(":"),Fdr=l(),te=a("ul"),_9=a("li"),ppe=a("strong"),Cdr=o("albert"),Mdr=o(" \u2014 "),qG=a("a"),Edr=o("TFAlbertForMultipleChoice"),ydr=o(" (ALBERT model)"),wdr=l(),u9=a("li"),_pe=a("strong"),Adr=o("bert"),Ldr=o(" \u2014 "),GG=a("a"),Bdr=o("TFBertForMultipleChoice"),xdr=o(" (BERT model)"),kdr=l(),b9=a("li"),upe=a("strong"),Rdr=o("camembert"),Sdr=o(" \u2014 "),OG=a("a"),Pdr=o("TFCamembertForMultipleChoice"),$dr=o(" (CamemBERT model)"),Idr=l(),v9=a("li"),bpe=a("strong"),Ddr=o("convbert"),jdr=o(" \u2014 "),XG=a("a"),Ndr=o("TFConvBertForMultipleChoice"),qdr=o(" (ConvBERT model)"),Gdr=l(),T9=a("li"),vpe=a("strong"),Odr=o("distilbert"),Xdr=o(" \u2014 "),VG=a("a"),Vdr=o("TFDistilBertForMultipleChoice"),zdr=o(" (DistilBERT model)"),Wdr=l(),F9=a("li"),Tpe=a("strong"),Qdr=o("electra"),Hdr=o(" \u2014 "),zG=a("a"),Udr=o("TFElectraForMultipleChoice"),Jdr=o(" (ELECTRA model)"),Ydr=l(),C9=a("li"),Fpe=a("strong"),Kdr=o("flaubert"),Zdr=o(" \u2014 "),WG=a("a"),ecr=o("TFFlaubertForMultipleChoice"),ocr=o(" (FlauBERT model)"),rcr=l(),M9=a("li"),Cpe=a("strong"),tcr=o("funnel"),acr=o(" \u2014 "),QG=a("a"),ncr=o("TFFunnelForMultipleChoice"),scr=o(" (Funnel Transformer model)"),lcr=l(),E9=a("li"),Mpe=a("strong"),icr=o("longformer"),dcr=o(" \u2014 "),HG=a("a"),ccr=o("TFLongformerForMultipleChoice"),fcr=o(" (Longformer model)"),mcr=l(),y9=a("li"),Epe=a("strong"),gcr=o("mobilebert"),hcr=o(" \u2014 "),UG=a("a"),pcr=o("TFMobileBertForMultipleChoice"),_cr=o(" (MobileBERT model)"),ucr=l(),w9=a("li"),ype=a("strong"),bcr=o("mpnet"),vcr=o(" \u2014 "),JG=a("a"),Tcr=o("TFMPNetForMultipleChoice"),Fcr=o(" (MPNet model)"),Ccr=l(),A9=a("li"),wpe=a("strong"),Mcr=o("rembert"),Ecr=o(" \u2014 "),YG=a("a"),ycr=o("TFRemBertForMultipleChoice"),wcr=o(" (RemBERT model)"),Acr=l(),L9=a("li"),Ape=a("strong"),Lcr=o("roberta"),Bcr=o(" \u2014 "),KG=a("a"),xcr=o("TFRobertaForMultipleChoice"),kcr=o(" (RoBERTa model)"),Rcr=l(),B9=a("li"),Lpe=a("strong"),Scr=o("roformer"),Pcr=o(" \u2014 "),ZG=a("a"),$cr=o("TFRoFormerForMultipleChoice"),Icr=o(" (RoFormer model)"),Dcr=l(),x9=a("li"),Bpe=a("strong"),jcr=o("xlm"),Ncr=o(" \u2014 "),eO=a("a"),qcr=o("TFXLMForMultipleChoice"),Gcr=o(" (XLM model)"),Ocr=l(),k9=a("li"),xpe=a("strong"),Xcr=o("xlm-roberta"),Vcr=o(" \u2014 "),oO=a("a"),zcr=o("TFXLMRobertaForMultipleChoice"),Wcr=o(" (XLM-RoBERTa model)"),Qcr=l(),R9=a("li"),kpe=a("strong"),Hcr=o("xlnet"),Ucr=o(" \u2014 "),rO=a("a"),Jcr=o("TFXLNetForMultipleChoice"),Ycr=o(" (XLNet model)"),Kcr=l(),Rpe=a("p"),Zcr=o("Examples:"),efr=l(),f(K6.$$.fragment),VBe=l(),yc=a("h2"),S9=a("a"),Spe=a("span"),f(Z6.$$.fragment),ofr=l(),Ppe=a("span"),rfr=o("TFAutoModelForTableQuestionAnswering"),zBe=l(),Mr=a("div"),f(eA.$$.fragment),tfr=l(),wc=a("p"),afr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$pe=a("code"),nfr=o("from_pretrained()"),sfr=o("class method or the "),Ipe=a("code"),lfr=o("from_config()"),ifr=o(`class
method.`),dfr=l(),oA=a("p"),cfr=o("This class cannot be instantiated directly using "),Dpe=a("code"),ffr=o("__init__()"),mfr=o(" (throws an error)."),gfr=l(),_t=a("div"),f(rA.$$.fragment),hfr=l(),jpe=a("p"),pfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_fr=l(),Ac=a("p"),ufr=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),bfr=o("not"),vfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qpe=a("code"),Tfr=o("from_pretrained()"),Ffr=o("to load the model weights."),Cfr=l(),Gpe=a("p"),Mfr=o("Examples:"),Efr=l(),f(tA.$$.fragment),yfr=l(),Fo=a("div"),f(aA.$$.fragment),wfr=l(),Ope=a("p"),Afr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lfr=l(),bn=a("p"),Bfr=o("The model class to instantiate is selected based on the "),Xpe=a("code"),xfr=o("model_type"),kfr=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),Rfr=o("pretrained_model_name_or_path"),Sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=a("code"),Pfr=o("pretrained_model_name_or_path"),$fr=o(":"),Ifr=l(),Wpe=a("ul"),P9=a("li"),Qpe=a("strong"),Dfr=o("tapas"),jfr=o(" \u2014 "),tO=a("a"),Nfr=o("TFTapasForQuestionAnswering"),qfr=o(" (TAPAS model)"),Gfr=l(),Hpe=a("p"),Ofr=o("Examples:"),Xfr=l(),f(nA.$$.fragment),WBe=l(),Lc=a("h2"),$9=a("a"),Upe=a("span"),f(sA.$$.fragment),Vfr=l(),Jpe=a("span"),zfr=o("TFAutoModelForTokenClassification"),QBe=l(),Er=a("div"),f(lA.$$.fragment),Wfr=l(),Bc=a("p"),Qfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ype=a("code"),Hfr=o("from_pretrained()"),Ufr=o("class method or the "),Kpe=a("code"),Jfr=o("from_config()"),Yfr=o(`class
method.`),Kfr=l(),iA=a("p"),Zfr=o("This class cannot be instantiated directly using "),Zpe=a("code"),emr=o("__init__()"),omr=o(" (throws an error)."),rmr=l(),ut=a("div"),f(dA.$$.fragment),tmr=l(),e_e=a("p"),amr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nmr=l(),xc=a("p"),smr=o(`Note:
Loading a model from its configuration file does `),o_e=a("strong"),lmr=o("not"),imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),r_e=a("code"),dmr=o("from_pretrained()"),cmr=o("to load the model weights."),fmr=l(),t_e=a("p"),mmr=o("Examples:"),gmr=l(),f(cA.$$.fragment),hmr=l(),Co=a("div"),f(fA.$$.fragment),pmr=l(),a_e=a("p"),_mr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),umr=l(),vn=a("p"),bmr=o("The model class to instantiate is selected based on the "),n_e=a("code"),vmr=o("model_type"),Tmr=o(` property of the config object (either
passed as an argument or loaded from `),s_e=a("code"),Fmr=o("pretrained_model_name_or_path"),Cmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=a("code"),Mmr=o("pretrained_model_name_or_path"),Emr=o(":"),ymr=l(),K=a("ul"),I9=a("li"),i_e=a("strong"),wmr=o("albert"),Amr=o(" \u2014 "),aO=a("a"),Lmr=o("TFAlbertForTokenClassification"),Bmr=o(" (ALBERT model)"),xmr=l(),D9=a("li"),d_e=a("strong"),kmr=o("bert"),Rmr=o(" \u2014 "),nO=a("a"),Smr=o("TFBertForTokenClassification"),Pmr=o(" (BERT model)"),$mr=l(),j9=a("li"),c_e=a("strong"),Imr=o("camembert"),Dmr=o(" \u2014 "),sO=a("a"),jmr=o("TFCamembertForTokenClassification"),Nmr=o(" (CamemBERT model)"),qmr=l(),N9=a("li"),f_e=a("strong"),Gmr=o("convbert"),Omr=o(" \u2014 "),lO=a("a"),Xmr=o("TFConvBertForTokenClassification"),Vmr=o(" (ConvBERT model)"),zmr=l(),q9=a("li"),m_e=a("strong"),Wmr=o("deberta"),Qmr=o(" \u2014 "),iO=a("a"),Hmr=o("TFDebertaForTokenClassification"),Umr=o(" (DeBERTa model)"),Jmr=l(),G9=a("li"),g_e=a("strong"),Ymr=o("deberta-v2"),Kmr=o(" \u2014 "),dO=a("a"),Zmr=o("TFDebertaV2ForTokenClassification"),egr=o(" (DeBERTa-v2 model)"),ogr=l(),O9=a("li"),h_e=a("strong"),rgr=o("distilbert"),tgr=o(" \u2014 "),cO=a("a"),agr=o("TFDistilBertForTokenClassification"),ngr=o(" (DistilBERT model)"),sgr=l(),X9=a("li"),p_e=a("strong"),lgr=o("electra"),igr=o(" \u2014 "),fO=a("a"),dgr=o("TFElectraForTokenClassification"),cgr=o(" (ELECTRA model)"),fgr=l(),V9=a("li"),__e=a("strong"),mgr=o("flaubert"),ggr=o(" \u2014 "),mO=a("a"),hgr=o("TFFlaubertForTokenClassification"),pgr=o(" (FlauBERT model)"),_gr=l(),z9=a("li"),u_e=a("strong"),ugr=o("funnel"),bgr=o(" \u2014 "),gO=a("a"),vgr=o("TFFunnelForTokenClassification"),Tgr=o(" (Funnel Transformer model)"),Fgr=l(),W9=a("li"),b_e=a("strong"),Cgr=o("layoutlm"),Mgr=o(" \u2014 "),hO=a("a"),Egr=o("TFLayoutLMForTokenClassification"),ygr=o(" (LayoutLM model)"),wgr=l(),Q9=a("li"),v_e=a("strong"),Agr=o("longformer"),Lgr=o(" \u2014 "),pO=a("a"),Bgr=o("TFLongformerForTokenClassification"),xgr=o(" (Longformer model)"),kgr=l(),H9=a("li"),T_e=a("strong"),Rgr=o("mobilebert"),Sgr=o(" \u2014 "),_O=a("a"),Pgr=o("TFMobileBertForTokenClassification"),$gr=o(" (MobileBERT model)"),Igr=l(),U9=a("li"),F_e=a("strong"),Dgr=o("mpnet"),jgr=o(" \u2014 "),uO=a("a"),Ngr=o("TFMPNetForTokenClassification"),qgr=o(" (MPNet model)"),Ggr=l(),J9=a("li"),C_e=a("strong"),Ogr=o("rembert"),Xgr=o(" \u2014 "),bO=a("a"),Vgr=o("TFRemBertForTokenClassification"),zgr=o(" (RemBERT model)"),Wgr=l(),Y9=a("li"),M_e=a("strong"),Qgr=o("roberta"),Hgr=o(" \u2014 "),vO=a("a"),Ugr=o("TFRobertaForTokenClassification"),Jgr=o(" (RoBERTa model)"),Ygr=l(),K9=a("li"),E_e=a("strong"),Kgr=o("roformer"),Zgr=o(" \u2014 "),TO=a("a"),ehr=o("TFRoFormerForTokenClassification"),ohr=o(" (RoFormer model)"),rhr=l(),Z9=a("li"),y_e=a("strong"),thr=o("xlm"),ahr=o(" \u2014 "),FO=a("a"),nhr=o("TFXLMForTokenClassification"),shr=o(" (XLM model)"),lhr=l(),eC=a("li"),w_e=a("strong"),ihr=o("xlm-roberta"),dhr=o(" \u2014 "),CO=a("a"),chr=o("TFXLMRobertaForTokenClassification"),fhr=o(" (XLM-RoBERTa model)"),mhr=l(),oC=a("li"),A_e=a("strong"),ghr=o("xlnet"),hhr=o(" \u2014 "),MO=a("a"),phr=o("TFXLNetForTokenClassification"),_hr=o(" (XLNet model)"),uhr=l(),L_e=a("p"),bhr=o("Examples:"),vhr=l(),f(mA.$$.fragment),HBe=l(),kc=a("h2"),rC=a("a"),B_e=a("span"),f(gA.$$.fragment),Thr=l(),x_e=a("span"),Fhr=o("TFAutoModelForQuestionAnswering"),UBe=l(),yr=a("div"),f(hA.$$.fragment),Chr=l(),Rc=a("p"),Mhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),k_e=a("code"),Ehr=o("from_pretrained()"),yhr=o("class method or the "),R_e=a("code"),whr=o("from_config()"),Ahr=o(`class
method.`),Lhr=l(),pA=a("p"),Bhr=o("This class cannot be instantiated directly using "),S_e=a("code"),xhr=o("__init__()"),khr=o(" (throws an error)."),Rhr=l(),bt=a("div"),f(_A.$$.fragment),Shr=l(),P_e=a("p"),Phr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$hr=l(),Sc=a("p"),Ihr=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),Dhr=o("not"),jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),I_e=a("code"),Nhr=o("from_pretrained()"),qhr=o("to load the model weights."),Ghr=l(),D_e=a("p"),Ohr=o("Examples:"),Xhr=l(),f(uA.$$.fragment),Vhr=l(),Mo=a("div"),f(bA.$$.fragment),zhr=l(),j_e=a("p"),Whr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qhr=l(),Tn=a("p"),Hhr=o("The model class to instantiate is selected based on the "),N_e=a("code"),Uhr=o("model_type"),Jhr=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),Yhr=o("pretrained_model_name_or_path"),Khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),Zhr=o("pretrained_model_name_or_path"),epr=o(":"),opr=l(),Z=a("ul"),tC=a("li"),O_e=a("strong"),rpr=o("albert"),tpr=o(" \u2014 "),EO=a("a"),apr=o("TFAlbertForQuestionAnswering"),npr=o(" (ALBERT model)"),spr=l(),aC=a("li"),X_e=a("strong"),lpr=o("bert"),ipr=o(" \u2014 "),yO=a("a"),dpr=o("TFBertForQuestionAnswering"),cpr=o(" (BERT model)"),fpr=l(),nC=a("li"),V_e=a("strong"),mpr=o("camembert"),gpr=o(" \u2014 "),wO=a("a"),hpr=o("TFCamembertForQuestionAnswering"),ppr=o(" (CamemBERT model)"),_pr=l(),sC=a("li"),z_e=a("strong"),upr=o("convbert"),bpr=o(" \u2014 "),AO=a("a"),vpr=o("TFConvBertForQuestionAnswering"),Tpr=o(" (ConvBERT model)"),Fpr=l(),lC=a("li"),W_e=a("strong"),Cpr=o("deberta"),Mpr=o(" \u2014 "),LO=a("a"),Epr=o("TFDebertaForQuestionAnswering"),ypr=o(" (DeBERTa model)"),wpr=l(),iC=a("li"),Q_e=a("strong"),Apr=o("deberta-v2"),Lpr=o(" \u2014 "),BO=a("a"),Bpr=o("TFDebertaV2ForQuestionAnswering"),xpr=o(" (DeBERTa-v2 model)"),kpr=l(),dC=a("li"),H_e=a("strong"),Rpr=o("distilbert"),Spr=o(" \u2014 "),xO=a("a"),Ppr=o("TFDistilBertForQuestionAnswering"),$pr=o(" (DistilBERT model)"),Ipr=l(),cC=a("li"),U_e=a("strong"),Dpr=o("electra"),jpr=o(" \u2014 "),kO=a("a"),Npr=o("TFElectraForQuestionAnswering"),qpr=o(" (ELECTRA model)"),Gpr=l(),fC=a("li"),J_e=a("strong"),Opr=o("flaubert"),Xpr=o(" \u2014 "),RO=a("a"),Vpr=o("TFFlaubertForQuestionAnsweringSimple"),zpr=o(" (FlauBERT model)"),Wpr=l(),mC=a("li"),Y_e=a("strong"),Qpr=o("funnel"),Hpr=o(" \u2014 "),SO=a("a"),Upr=o("TFFunnelForQuestionAnswering"),Jpr=o(" (Funnel Transformer model)"),Ypr=l(),gC=a("li"),K_e=a("strong"),Kpr=o("longformer"),Zpr=o(" \u2014 "),PO=a("a"),e_r=o("TFLongformerForQuestionAnswering"),o_r=o(" (Longformer model)"),r_r=l(),hC=a("li"),Z_e=a("strong"),t_r=o("mobilebert"),a_r=o(" \u2014 "),$O=a("a"),n_r=o("TFMobileBertForQuestionAnswering"),s_r=o(" (MobileBERT model)"),l_r=l(),pC=a("li"),eue=a("strong"),i_r=o("mpnet"),d_r=o(" \u2014 "),IO=a("a"),c_r=o("TFMPNetForQuestionAnswering"),f_r=o(" (MPNet model)"),m_r=l(),_C=a("li"),oue=a("strong"),g_r=o("rembert"),h_r=o(" \u2014 "),DO=a("a"),p_r=o("TFRemBertForQuestionAnswering"),__r=o(" (RemBERT model)"),u_r=l(),uC=a("li"),rue=a("strong"),b_r=o("roberta"),v_r=o(" \u2014 "),jO=a("a"),T_r=o("TFRobertaForQuestionAnswering"),F_r=o(" (RoBERTa model)"),C_r=l(),bC=a("li"),tue=a("strong"),M_r=o("roformer"),E_r=o(" \u2014 "),NO=a("a"),y_r=o("TFRoFormerForQuestionAnswering"),w_r=o(" (RoFormer model)"),A_r=l(),vC=a("li"),aue=a("strong"),L_r=o("xlm"),B_r=o(" \u2014 "),qO=a("a"),x_r=o("TFXLMForQuestionAnsweringSimple"),k_r=o(" (XLM model)"),R_r=l(),TC=a("li"),nue=a("strong"),S_r=o("xlm-roberta"),P_r=o(" \u2014 "),GO=a("a"),$_r=o("TFXLMRobertaForQuestionAnswering"),I_r=o(" (XLM-RoBERTa model)"),D_r=l(),FC=a("li"),sue=a("strong"),j_r=o("xlnet"),N_r=o(" \u2014 "),OO=a("a"),q_r=o("TFXLNetForQuestionAnsweringSimple"),G_r=o(" (XLNet model)"),O_r=l(),lue=a("p"),X_r=o("Examples:"),V_r=l(),f(vA.$$.fragment),JBe=l(),Pc=a("h2"),CC=a("a"),iue=a("span"),f(TA.$$.fragment),z_r=l(),due=a("span"),W_r=o("TFAutoModelForVision2Seq"),YBe=l(),wr=a("div"),f(FA.$$.fragment),Q_r=l(),$c=a("p"),H_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cue=a("code"),U_r=o("from_pretrained()"),J_r=o("class method or the "),fue=a("code"),Y_r=o("from_config()"),K_r=o(`class
method.`),Z_r=l(),CA=a("p"),eur=o("This class cannot be instantiated directly using "),mue=a("code"),our=o("__init__()"),rur=o(" (throws an error)."),tur=l(),vt=a("div"),f(MA.$$.fragment),aur=l(),gue=a("p"),nur=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sur=l(),Ic=a("p"),lur=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),iur=o("not"),dur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pue=a("code"),cur=o("from_pretrained()"),fur=o("to load the model weights."),mur=l(),_ue=a("p"),gur=o("Examples:"),hur=l(),f(EA.$$.fragment),pur=l(),Eo=a("div"),f(yA.$$.fragment),_ur=l(),uue=a("p"),uur=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bur=l(),Fn=a("p"),vur=o("The model class to instantiate is selected based on the "),bue=a("code"),Tur=o("model_type"),Fur=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),Cur=o("pretrained_model_name_or_path"),Mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),Eur=o("pretrained_model_name_or_path"),yur=o(":"),wur=l(),Fue=a("ul"),MC=a("li"),Cue=a("strong"),Aur=o("vision-encoder-decoder"),Lur=o(" \u2014 "),XO=a("a"),Bur=o("TFVisionEncoderDecoderModel"),xur=o(" (Vision Encoder decoder model)"),kur=l(),Mue=a("p"),Rur=o("Examples:"),Sur=l(),f(wA.$$.fragment),KBe=l(),Dc=a("h2"),EC=a("a"),Eue=a("span"),f(AA.$$.fragment),Pur=l(),yue=a("span"),$ur=o("TFAutoModelForSpeechSeq2Seq"),ZBe=l(),Ar=a("div"),f(LA.$$.fragment),Iur=l(),jc=a("p"),Dur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wue=a("code"),jur=o("from_pretrained()"),Nur=o("class method or the "),Aue=a("code"),qur=o("from_config()"),Gur=o(`class
method.`),Our=l(),BA=a("p"),Xur=o("This class cannot be instantiated directly using "),Lue=a("code"),Vur=o("__init__()"),zur=o(" (throws an error)."),Wur=l(),Tt=a("div"),f(xA.$$.fragment),Qur=l(),Bue=a("p"),Hur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Uur=l(),Nc=a("p"),Jur=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),Yur=o("not"),Kur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kue=a("code"),Zur=o("from_pretrained()"),e1r=o("to load the model weights."),o1r=l(),Rue=a("p"),r1r=o("Examples:"),t1r=l(),f(kA.$$.fragment),a1r=l(),yo=a("div"),f(RA.$$.fragment),n1r=l(),Sue=a("p"),s1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),l1r=l(),Cn=a("p"),i1r=o("The model class to instantiate is selected based on the "),Pue=a("code"),d1r=o("model_type"),c1r=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),f1r=o("pretrained_model_name_or_path"),m1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),g1r=o("pretrained_model_name_or_path"),h1r=o(":"),p1r=l(),Due=a("ul"),yC=a("li"),jue=a("strong"),_1r=o("speech_to_text"),u1r=o(" \u2014 "),VO=a("a"),b1r=o("TFSpeech2TextForConditionalGeneration"),v1r=o(" (Speech2Text model)"),T1r=l(),Nue=a("p"),F1r=o("Examples:"),C1r=l(),f(SA.$$.fragment),exe=l(),qc=a("h2"),wC=a("a"),que=a("span"),f(PA.$$.fragment),M1r=l(),Gue=a("span"),E1r=o("FlaxAutoModel"),oxe=l(),Lr=a("div"),f($A.$$.fragment),y1r=l(),Gc=a("p"),w1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Oue=a("code"),A1r=o("from_pretrained()"),L1r=o("class method or the "),Xue=a("code"),B1r=o("from_config()"),x1r=o(`class
method.`),k1r=l(),IA=a("p"),R1r=o("This class cannot be instantiated directly using "),Vue=a("code"),S1r=o("__init__()"),P1r=o(" (throws an error)."),$1r=l(),Ft=a("div"),f(DA.$$.fragment),I1r=l(),zue=a("p"),D1r=o("Instantiates one of the base model classes of the library from a configuration."),j1r=l(),Oc=a("p"),N1r=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),q1r=o("not"),G1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Que=a("code"),O1r=o("from_pretrained()"),X1r=o("to load the model weights."),V1r=l(),Hue=a("p"),z1r=o("Examples:"),W1r=l(),f(jA.$$.fragment),Q1r=l(),wo=a("div"),f(NA.$$.fragment),H1r=l(),Uue=a("p"),U1r=o("Instantiate one of the base model classes of the library from a pretrained model."),J1r=l(),Mn=a("p"),Y1r=o("The model class to instantiate is selected based on the "),Jue=a("code"),K1r=o("model_type"),Z1r=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),ebr=o("pretrained_model_name_or_path"),obr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),rbr=o("pretrained_model_name_or_path"),tbr=o(":"),abr=l(),z=a("ul"),AC=a("li"),Zue=a("strong"),nbr=o("albert"),sbr=o(" \u2014 "),zO=a("a"),lbr=o("FlaxAlbertModel"),ibr=o(" (ALBERT model)"),dbr=l(),LC=a("li"),e1e=a("strong"),cbr=o("bart"),fbr=o(" \u2014 "),WO=a("a"),mbr=o("FlaxBartModel"),gbr=o(" (BART model)"),hbr=l(),BC=a("li"),o1e=a("strong"),pbr=o("beit"),_br=o(" \u2014 "),QO=a("a"),ubr=o("FlaxBeitModel"),bbr=o(" (BEiT model)"),vbr=l(),xC=a("li"),r1e=a("strong"),Tbr=o("bert"),Fbr=o(" \u2014 "),HO=a("a"),Cbr=o("FlaxBertModel"),Mbr=o(" (BERT model)"),Ebr=l(),kC=a("li"),t1e=a("strong"),ybr=o("big_bird"),wbr=o(" \u2014 "),UO=a("a"),Abr=o("FlaxBigBirdModel"),Lbr=o(" (BigBird model)"),Bbr=l(),RC=a("li"),a1e=a("strong"),xbr=o("blenderbot"),kbr=o(" \u2014 "),JO=a("a"),Rbr=o("FlaxBlenderbotModel"),Sbr=o(" (Blenderbot model)"),Pbr=l(),SC=a("li"),n1e=a("strong"),$br=o("blenderbot-small"),Ibr=o(" \u2014 "),YO=a("a"),Dbr=o("FlaxBlenderbotSmallModel"),jbr=o(" (BlenderbotSmall model)"),Nbr=l(),PC=a("li"),s1e=a("strong"),qbr=o("clip"),Gbr=o(" \u2014 "),KO=a("a"),Obr=o("FlaxCLIPModel"),Xbr=o(" (CLIP model)"),Vbr=l(),$C=a("li"),l1e=a("strong"),zbr=o("distilbert"),Wbr=o(" \u2014 "),ZO=a("a"),Qbr=o("FlaxDistilBertModel"),Hbr=o(" (DistilBERT model)"),Ubr=l(),IC=a("li"),i1e=a("strong"),Jbr=o("electra"),Ybr=o(" \u2014 "),eX=a("a"),Kbr=o("FlaxElectraModel"),Zbr=o(" (ELECTRA model)"),e5r=l(),DC=a("li"),d1e=a("strong"),o5r=o("gpt2"),r5r=o(" \u2014 "),oX=a("a"),t5r=o("FlaxGPT2Model"),a5r=o(" (OpenAI GPT-2 model)"),n5r=l(),jC=a("li"),c1e=a("strong"),s5r=o("gpt_neo"),l5r=o(" \u2014 "),rX=a("a"),i5r=o("FlaxGPTNeoModel"),d5r=o(" (GPT Neo model)"),c5r=l(),NC=a("li"),f1e=a("strong"),f5r=o("gptj"),m5r=o(" \u2014 "),tX=a("a"),g5r=o("FlaxGPTJModel"),h5r=o(" (GPT-J model)"),p5r=l(),qC=a("li"),m1e=a("strong"),_5r=o("marian"),u5r=o(" \u2014 "),aX=a("a"),b5r=o("FlaxMarianModel"),v5r=o(" (Marian model)"),T5r=l(),GC=a("li"),g1e=a("strong"),F5r=o("mbart"),C5r=o(" \u2014 "),nX=a("a"),M5r=o("FlaxMBartModel"),E5r=o(" (mBART model)"),y5r=l(),OC=a("li"),h1e=a("strong"),w5r=o("mt5"),A5r=o(" \u2014 "),sX=a("a"),L5r=o("FlaxMT5Model"),B5r=o(" (mT5 model)"),x5r=l(),XC=a("li"),p1e=a("strong"),k5r=o("pegasus"),R5r=o(" \u2014 "),lX=a("a"),S5r=o("FlaxPegasusModel"),P5r=o(" (Pegasus model)"),$5r=l(),VC=a("li"),_1e=a("strong"),I5r=o("roberta"),D5r=o(" \u2014 "),iX=a("a"),j5r=o("FlaxRobertaModel"),N5r=o(" (RoBERTa model)"),q5r=l(),zC=a("li"),u1e=a("strong"),G5r=o("roformer"),O5r=o(" \u2014 "),dX=a("a"),X5r=o("FlaxRoFormerModel"),V5r=o(" (RoFormer model)"),z5r=l(),WC=a("li"),b1e=a("strong"),W5r=o("t5"),Q5r=o(" \u2014 "),cX=a("a"),H5r=o("FlaxT5Model"),U5r=o(" (T5 model)"),J5r=l(),QC=a("li"),v1e=a("strong"),Y5r=o("vision-text-dual-encoder"),K5r=o(" \u2014 "),fX=a("a"),Z5r=o("FlaxVisionTextDualEncoderModel"),e2r=o(" (VisionTextDualEncoder model)"),o2r=l(),HC=a("li"),T1e=a("strong"),r2r=o("vit"),t2r=o(" \u2014 "),mX=a("a"),a2r=o("FlaxViTModel"),n2r=o(" (ViT model)"),s2r=l(),UC=a("li"),F1e=a("strong"),l2r=o("wav2vec2"),i2r=o(" \u2014 "),gX=a("a"),d2r=o("FlaxWav2Vec2Model"),c2r=o(" (Wav2Vec2 model)"),f2r=l(),JC=a("li"),C1e=a("strong"),m2r=o("xglm"),g2r=o(" \u2014 "),hX=a("a"),h2r=o("FlaxXGLMModel"),p2r=o(" (XGLM model)"),_2r=l(),M1e=a("p"),u2r=o("Examples:"),b2r=l(),f(qA.$$.fragment),rxe=l(),Xc=a("h2"),YC=a("a"),E1e=a("span"),f(GA.$$.fragment),v2r=l(),y1e=a("span"),T2r=o("FlaxAutoModelForCausalLM"),txe=l(),Br=a("div"),f(OA.$$.fragment),F2r=l(),Vc=a("p"),C2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),w1e=a("code"),M2r=o("from_pretrained()"),E2r=o("class method or the "),A1e=a("code"),y2r=o("from_config()"),w2r=o(`class
method.`),A2r=l(),XA=a("p"),L2r=o("This class cannot be instantiated directly using "),L1e=a("code"),B2r=o("__init__()"),x2r=o(" (throws an error)."),k2r=l(),Ct=a("div"),f(VA.$$.fragment),R2r=l(),B1e=a("p"),S2r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),P2r=l(),zc=a("p"),$2r=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),I2r=o("not"),D2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k1e=a("code"),j2r=o("from_pretrained()"),N2r=o("to load the model weights."),q2r=l(),R1e=a("p"),G2r=o("Examples:"),O2r=l(),f(zA.$$.fragment),X2r=l(),Ao=a("div"),f(WA.$$.fragment),V2r=l(),S1e=a("p"),z2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W2r=l(),En=a("p"),Q2r=o("The model class to instantiate is selected based on the "),P1e=a("code"),H2r=o("model_type"),U2r=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),J2r=o("pretrained_model_name_or_path"),Y2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),K2r=o("pretrained_model_name_or_path"),Z2r=o(":"),evr=l(),yn=a("ul"),KC=a("li"),D1e=a("strong"),ovr=o("gpt2"),rvr=o(" \u2014 "),pX=a("a"),tvr=o("FlaxGPT2LMHeadModel"),avr=o(" (OpenAI GPT-2 model)"),nvr=l(),ZC=a("li"),j1e=a("strong"),svr=o("gpt_neo"),lvr=o(" \u2014 "),_X=a("a"),ivr=o("FlaxGPTNeoForCausalLM"),dvr=o(" (GPT Neo model)"),cvr=l(),e4=a("li"),N1e=a("strong"),fvr=o("gptj"),mvr=o(" \u2014 "),uX=a("a"),gvr=o("FlaxGPTJForCausalLM"),hvr=o(" (GPT-J model)"),pvr=l(),o4=a("li"),q1e=a("strong"),_vr=o("xglm"),uvr=o(" \u2014 "),bX=a("a"),bvr=o("FlaxXGLMForCausalLM"),vvr=o(" (XGLM model)"),Tvr=l(),G1e=a("p"),Fvr=o("Examples:"),Cvr=l(),f(QA.$$.fragment),axe=l(),Wc=a("h2"),r4=a("a"),O1e=a("span"),f(HA.$$.fragment),Mvr=l(),X1e=a("span"),Evr=o("FlaxAutoModelForPreTraining"),nxe=l(),xr=a("div"),f(UA.$$.fragment),yvr=l(),Qc=a("p"),wvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),V1e=a("code"),Avr=o("from_pretrained()"),Lvr=o("class method or the "),z1e=a("code"),Bvr=o("from_config()"),xvr=o(`class
method.`),kvr=l(),JA=a("p"),Rvr=o("This class cannot be instantiated directly using "),W1e=a("code"),Svr=o("__init__()"),Pvr=o(" (throws an error)."),$vr=l(),Mt=a("div"),f(YA.$$.fragment),Ivr=l(),Q1e=a("p"),Dvr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jvr=l(),Hc=a("p"),Nvr=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),qvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),U1e=a("code"),Ovr=o("from_pretrained()"),Xvr=o("to load the model weights."),Vvr=l(),J1e=a("p"),zvr=o("Examples:"),Wvr=l(),f(KA.$$.fragment),Qvr=l(),Lo=a("div"),f(ZA.$$.fragment),Hvr=l(),Y1e=a("p"),Uvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Jvr=l(),wn=a("p"),Yvr=o("The model class to instantiate is selected based on the "),K1e=a("code"),Kvr=o("model_type"),Zvr=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),rTr=o("pretrained_model_name_or_path"),tTr=o(":"),aTr=l(),fe=a("ul"),t4=a("li"),obe=a("strong"),nTr=o("albert"),sTr=o(" \u2014 "),vX=a("a"),lTr=o("FlaxAlbertForPreTraining"),iTr=o(" (ALBERT model)"),dTr=l(),a4=a("li"),rbe=a("strong"),cTr=o("bart"),fTr=o(" \u2014 "),TX=a("a"),mTr=o("FlaxBartForConditionalGeneration"),gTr=o(" (BART model)"),hTr=l(),n4=a("li"),tbe=a("strong"),pTr=o("bert"),_Tr=o(" \u2014 "),FX=a("a"),uTr=o("FlaxBertForPreTraining"),bTr=o(" (BERT model)"),vTr=l(),s4=a("li"),abe=a("strong"),TTr=o("big_bird"),FTr=o(" \u2014 "),CX=a("a"),CTr=o("FlaxBigBirdForPreTraining"),MTr=o(" (BigBird model)"),ETr=l(),l4=a("li"),nbe=a("strong"),yTr=o("electra"),wTr=o(" \u2014 "),MX=a("a"),ATr=o("FlaxElectraForPreTraining"),LTr=o(" (ELECTRA model)"),BTr=l(),i4=a("li"),sbe=a("strong"),xTr=o("mbart"),kTr=o(" \u2014 "),EX=a("a"),RTr=o("FlaxMBartForConditionalGeneration"),STr=o(" (mBART model)"),PTr=l(),d4=a("li"),lbe=a("strong"),$Tr=o("mt5"),ITr=o(" \u2014 "),yX=a("a"),DTr=o("FlaxMT5ForConditionalGeneration"),jTr=o(" (mT5 model)"),NTr=l(),c4=a("li"),ibe=a("strong"),qTr=o("roberta"),GTr=o(" \u2014 "),wX=a("a"),OTr=o("FlaxRobertaForMaskedLM"),XTr=o(" (RoBERTa model)"),VTr=l(),f4=a("li"),dbe=a("strong"),zTr=o("roformer"),WTr=o(" \u2014 "),AX=a("a"),QTr=o("FlaxRoFormerForMaskedLM"),HTr=o(" (RoFormer model)"),UTr=l(),m4=a("li"),cbe=a("strong"),JTr=o("t5"),YTr=o(" \u2014 "),LX=a("a"),KTr=o("FlaxT5ForConditionalGeneration"),ZTr=o(" (T5 model)"),eFr=l(),g4=a("li"),fbe=a("strong"),oFr=o("wav2vec2"),rFr=o(" \u2014 "),BX=a("a"),tFr=o("FlaxWav2Vec2ForPreTraining"),aFr=o(" (Wav2Vec2 model)"),nFr=l(),mbe=a("p"),sFr=o("Examples:"),lFr=l(),f(e0.$$.fragment),sxe=l(),Uc=a("h2"),h4=a("a"),gbe=a("span"),f(o0.$$.fragment),iFr=l(),hbe=a("span"),dFr=o("FlaxAutoModelForMaskedLM"),lxe=l(),kr=a("div"),f(r0.$$.fragment),cFr=l(),Jc=a("p"),fFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pbe=a("code"),mFr=o("from_pretrained()"),gFr=o("class method or the "),_be=a("code"),hFr=o("from_config()"),pFr=o(`class
method.`),_Fr=l(),t0=a("p"),uFr=o("This class cannot be instantiated directly using "),ube=a("code"),bFr=o("__init__()"),vFr=o(" (throws an error)."),TFr=l(),Et=a("div"),f(a0.$$.fragment),FFr=l(),bbe=a("p"),CFr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MFr=l(),Yc=a("p"),EFr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),yFr=o("not"),wFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tbe=a("code"),AFr=o("from_pretrained()"),LFr=o("to load the model weights."),BFr=l(),Fbe=a("p"),xFr=o("Examples:"),kFr=l(),f(n0.$$.fragment),RFr=l(),Bo=a("div"),f(s0.$$.fragment),SFr=l(),Cbe=a("p"),PFr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Fr=l(),An=a("p"),IFr=o("The model class to instantiate is selected based on the "),Mbe=a("code"),DFr=o("model_type"),jFr=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),NFr=o("pretrained_model_name_or_path"),qFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),GFr=o("pretrained_model_name_or_path"),OFr=o(":"),XFr=l(),ve=a("ul"),p4=a("li"),wbe=a("strong"),VFr=o("albert"),zFr=o(" \u2014 "),xX=a("a"),WFr=o("FlaxAlbertForMaskedLM"),QFr=o(" (ALBERT model)"),HFr=l(),_4=a("li"),Abe=a("strong"),UFr=o("bart"),JFr=o(" \u2014 "),kX=a("a"),YFr=o("FlaxBartForConditionalGeneration"),KFr=o(" (BART model)"),ZFr=l(),u4=a("li"),Lbe=a("strong"),e9r=o("bert"),o9r=o(" \u2014 "),RX=a("a"),r9r=o("FlaxBertForMaskedLM"),t9r=o(" (BERT model)"),a9r=l(),b4=a("li"),Bbe=a("strong"),n9r=o("big_bird"),s9r=o(" \u2014 "),SX=a("a"),l9r=o("FlaxBigBirdForMaskedLM"),i9r=o(" (BigBird model)"),d9r=l(),v4=a("li"),xbe=a("strong"),c9r=o("distilbert"),f9r=o(" \u2014 "),PX=a("a"),m9r=o("FlaxDistilBertForMaskedLM"),g9r=o(" (DistilBERT model)"),h9r=l(),T4=a("li"),kbe=a("strong"),p9r=o("electra"),_9r=o(" \u2014 "),$X=a("a"),u9r=o("FlaxElectraForMaskedLM"),b9r=o(" (ELECTRA model)"),v9r=l(),F4=a("li"),Rbe=a("strong"),T9r=o("mbart"),F9r=o(" \u2014 "),IX=a("a"),C9r=o("FlaxMBartForConditionalGeneration"),M9r=o(" (mBART model)"),E9r=l(),C4=a("li"),Sbe=a("strong"),y9r=o("roberta"),w9r=o(" \u2014 "),DX=a("a"),A9r=o("FlaxRobertaForMaskedLM"),L9r=o(" (RoBERTa model)"),B9r=l(),M4=a("li"),Pbe=a("strong"),x9r=o("roformer"),k9r=o(" \u2014 "),jX=a("a"),R9r=o("FlaxRoFormerForMaskedLM"),S9r=o(" (RoFormer model)"),P9r=l(),$be=a("p"),$9r=o("Examples:"),I9r=l(),f(l0.$$.fragment),ixe=l(),Kc=a("h2"),E4=a("a"),Ibe=a("span"),f(i0.$$.fragment),D9r=l(),Dbe=a("span"),j9r=o("FlaxAutoModelForSeq2SeqLM"),dxe=l(),Rr=a("div"),f(d0.$$.fragment),N9r=l(),Zc=a("p"),q9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jbe=a("code"),G9r=o("from_pretrained()"),O9r=o("class method or the "),Nbe=a("code"),X9r=o("from_config()"),V9r=o(`class
method.`),z9r=l(),c0=a("p"),W9r=o("This class cannot be instantiated directly using "),qbe=a("code"),Q9r=o("__init__()"),H9r=o(" (throws an error)."),U9r=l(),yt=a("div"),f(f0.$$.fragment),J9r=l(),Gbe=a("p"),Y9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),K9r=l(),ef=a("p"),Z9r=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),eCr=o("not"),oCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xbe=a("code"),rCr=o("from_pretrained()"),tCr=o("to load the model weights."),aCr=l(),Vbe=a("p"),nCr=o("Examples:"),sCr=l(),f(m0.$$.fragment),lCr=l(),xo=a("div"),f(g0.$$.fragment),iCr=l(),zbe=a("p"),dCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cCr=l(),Ln=a("p"),fCr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),mCr=o("model_type"),gCr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),hCr=o("pretrained_model_name_or_path"),pCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),_Cr=o("pretrained_model_name_or_path"),uCr=o(":"),bCr=l(),Te=a("ul"),y4=a("li"),Ube=a("strong"),vCr=o("bart"),TCr=o(" \u2014 "),NX=a("a"),FCr=o("FlaxBartForConditionalGeneration"),CCr=o(" (BART model)"),MCr=l(),w4=a("li"),Jbe=a("strong"),ECr=o("blenderbot"),yCr=o(" \u2014 "),qX=a("a"),wCr=o("FlaxBlenderbotForConditionalGeneration"),ACr=o(" (Blenderbot model)"),LCr=l(),A4=a("li"),Ybe=a("strong"),BCr=o("blenderbot-small"),xCr=o(" \u2014 "),GX=a("a"),kCr=o("FlaxBlenderbotSmallForConditionalGeneration"),RCr=o(" (BlenderbotSmall model)"),SCr=l(),L4=a("li"),Kbe=a("strong"),PCr=o("encoder-decoder"),$Cr=o(" \u2014 "),OX=a("a"),ICr=o("FlaxEncoderDecoderModel"),DCr=o(" (Encoder decoder model)"),jCr=l(),B4=a("li"),Zbe=a("strong"),NCr=o("marian"),qCr=o(" \u2014 "),XX=a("a"),GCr=o("FlaxMarianMTModel"),OCr=o(" (Marian model)"),XCr=l(),x4=a("li"),e5e=a("strong"),VCr=o("mbart"),zCr=o(" \u2014 "),VX=a("a"),WCr=o("FlaxMBartForConditionalGeneration"),QCr=o(" (mBART model)"),HCr=l(),k4=a("li"),o5e=a("strong"),UCr=o("mt5"),JCr=o(" \u2014 "),zX=a("a"),YCr=o("FlaxMT5ForConditionalGeneration"),KCr=o(" (mT5 model)"),ZCr=l(),R4=a("li"),r5e=a("strong"),e4r=o("pegasus"),o4r=o(" \u2014 "),WX=a("a"),r4r=o("FlaxPegasusForConditionalGeneration"),t4r=o(" (Pegasus model)"),a4r=l(),S4=a("li"),t5e=a("strong"),n4r=o("t5"),s4r=o(" \u2014 "),QX=a("a"),l4r=o("FlaxT5ForConditionalGeneration"),i4r=o(" (T5 model)"),d4r=l(),a5e=a("p"),c4r=o("Examples:"),f4r=l(),f(h0.$$.fragment),cxe=l(),of=a("h2"),P4=a("a"),n5e=a("span"),f(p0.$$.fragment),m4r=l(),s5e=a("span"),g4r=o("FlaxAutoModelForSequenceClassification"),fxe=l(),Sr=a("div"),f(_0.$$.fragment),h4r=l(),rf=a("p"),p4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),l5e=a("code"),_4r=o("from_pretrained()"),u4r=o("class method or the "),i5e=a("code"),b4r=o("from_config()"),v4r=o(`class
method.`),T4r=l(),u0=a("p"),F4r=o("This class cannot be instantiated directly using "),d5e=a("code"),C4r=o("__init__()"),M4r=o(" (throws an error)."),E4r=l(),wt=a("div"),f(b0.$$.fragment),y4r=l(),c5e=a("p"),w4r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),A4r=l(),tf=a("p"),L4r=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),B4r=o("not"),x4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m5e=a("code"),k4r=o("from_pretrained()"),R4r=o("to load the model weights."),S4r=l(),g5e=a("p"),P4r=o("Examples:"),$4r=l(),f(v0.$$.fragment),I4r=l(),ko=a("div"),f(T0.$$.fragment),D4r=l(),h5e=a("p"),j4r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),N4r=l(),Bn=a("p"),q4r=o("The model class to instantiate is selected based on the "),p5e=a("code"),G4r=o("model_type"),O4r=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),X4r=o("pretrained_model_name_or_path"),V4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),z4r=o("pretrained_model_name_or_path"),W4r=o(":"),Q4r=l(),Fe=a("ul"),$4=a("li"),b5e=a("strong"),H4r=o("albert"),U4r=o(" \u2014 "),HX=a("a"),J4r=o("FlaxAlbertForSequenceClassification"),Y4r=o(" (ALBERT model)"),K4r=l(),I4=a("li"),v5e=a("strong"),Z4r=o("bart"),eMr=o(" \u2014 "),UX=a("a"),oMr=o("FlaxBartForSequenceClassification"),rMr=o(" (BART model)"),tMr=l(),D4=a("li"),T5e=a("strong"),aMr=o("bert"),nMr=o(" \u2014 "),JX=a("a"),sMr=o("FlaxBertForSequenceClassification"),lMr=o(" (BERT model)"),iMr=l(),j4=a("li"),F5e=a("strong"),dMr=o("big_bird"),cMr=o(" \u2014 "),YX=a("a"),fMr=o("FlaxBigBirdForSequenceClassification"),mMr=o(" (BigBird model)"),gMr=l(),N4=a("li"),C5e=a("strong"),hMr=o("distilbert"),pMr=o(" \u2014 "),KX=a("a"),_Mr=o("FlaxDistilBertForSequenceClassification"),uMr=o(" (DistilBERT model)"),bMr=l(),q4=a("li"),M5e=a("strong"),vMr=o("electra"),TMr=o(" \u2014 "),ZX=a("a"),FMr=o("FlaxElectraForSequenceClassification"),CMr=o(" (ELECTRA model)"),MMr=l(),G4=a("li"),E5e=a("strong"),EMr=o("mbart"),yMr=o(" \u2014 "),eV=a("a"),wMr=o("FlaxMBartForSequenceClassification"),AMr=o(" (mBART model)"),LMr=l(),O4=a("li"),y5e=a("strong"),BMr=o("roberta"),xMr=o(" \u2014 "),oV=a("a"),kMr=o("FlaxRobertaForSequenceClassification"),RMr=o(" (RoBERTa model)"),SMr=l(),X4=a("li"),w5e=a("strong"),PMr=o("roformer"),$Mr=o(" \u2014 "),rV=a("a"),IMr=o("FlaxRoFormerForSequenceClassification"),DMr=o(" (RoFormer model)"),jMr=l(),A5e=a("p"),NMr=o("Examples:"),qMr=l(),f(F0.$$.fragment),mxe=l(),af=a("h2"),V4=a("a"),L5e=a("span"),f(C0.$$.fragment),GMr=l(),B5e=a("span"),OMr=o("FlaxAutoModelForQuestionAnswering"),gxe=l(),Pr=a("div"),f(M0.$$.fragment),XMr=l(),nf=a("p"),VMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),x5e=a("code"),zMr=o("from_pretrained()"),WMr=o("class method or the "),k5e=a("code"),QMr=o("from_config()"),HMr=o(`class
method.`),UMr=l(),E0=a("p"),JMr=o("This class cannot be instantiated directly using "),R5e=a("code"),YMr=o("__init__()"),KMr=o(" (throws an error)."),ZMr=l(),At=a("div"),f(y0.$$.fragment),eEr=l(),S5e=a("p"),oEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rEr=l(),sf=a("p"),tEr=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),aEr=o("not"),nEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$5e=a("code"),sEr=o("from_pretrained()"),lEr=o("to load the model weights."),iEr=l(),I5e=a("p"),dEr=o("Examples:"),cEr=l(),f(w0.$$.fragment),fEr=l(),Ro=a("div"),f(A0.$$.fragment),mEr=l(),D5e=a("p"),gEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hEr=l(),xn=a("p"),pEr=o("The model class to instantiate is selected based on the "),j5e=a("code"),_Er=o("model_type"),uEr=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),bEr=o("pretrained_model_name_or_path"),vEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=a("code"),TEr=o("pretrained_model_name_or_path"),FEr=o(":"),CEr=l(),Ce=a("ul"),z4=a("li"),G5e=a("strong"),MEr=o("albert"),EEr=o(" \u2014 "),tV=a("a"),yEr=o("FlaxAlbertForQuestionAnswering"),wEr=o(" (ALBERT model)"),AEr=l(),W4=a("li"),O5e=a("strong"),LEr=o("bart"),BEr=o(" \u2014 "),aV=a("a"),xEr=o("FlaxBartForQuestionAnswering"),kEr=o(" (BART model)"),REr=l(),Q4=a("li"),X5e=a("strong"),SEr=o("bert"),PEr=o(" \u2014 "),nV=a("a"),$Er=o("FlaxBertForQuestionAnswering"),IEr=o(" (BERT model)"),DEr=l(),H4=a("li"),V5e=a("strong"),jEr=o("big_bird"),NEr=o(" \u2014 "),sV=a("a"),qEr=o("FlaxBigBirdForQuestionAnswering"),GEr=o(" (BigBird model)"),OEr=l(),U4=a("li"),z5e=a("strong"),XEr=o("distilbert"),VEr=o(" \u2014 "),lV=a("a"),zEr=o("FlaxDistilBertForQuestionAnswering"),WEr=o(" (DistilBERT model)"),QEr=l(),J4=a("li"),W5e=a("strong"),HEr=o("electra"),UEr=o(" \u2014 "),iV=a("a"),JEr=o("FlaxElectraForQuestionAnswering"),YEr=o(" (ELECTRA model)"),KEr=l(),Y4=a("li"),Q5e=a("strong"),ZEr=o("mbart"),e3r=o(" \u2014 "),dV=a("a"),o3r=o("FlaxMBartForQuestionAnswering"),r3r=o(" (mBART model)"),t3r=l(),K4=a("li"),H5e=a("strong"),a3r=o("roberta"),n3r=o(" \u2014 "),cV=a("a"),s3r=o("FlaxRobertaForQuestionAnswering"),l3r=o(" (RoBERTa model)"),i3r=l(),Z4=a("li"),U5e=a("strong"),d3r=o("roformer"),c3r=o(" \u2014 "),fV=a("a"),f3r=o("FlaxRoFormerForQuestionAnswering"),m3r=o(" (RoFormer model)"),g3r=l(),J5e=a("p"),h3r=o("Examples:"),p3r=l(),f(L0.$$.fragment),hxe=l(),lf=a("h2"),eM=a("a"),Y5e=a("span"),f(B0.$$.fragment),_3r=l(),K5e=a("span"),u3r=o("FlaxAutoModelForTokenClassification"),pxe=l(),$r=a("div"),f(x0.$$.fragment),b3r=l(),df=a("p"),v3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Z5e=a("code"),T3r=o("from_pretrained()"),F3r=o("class method or the "),e2e=a("code"),C3r=o("from_config()"),M3r=o(`class
method.`),E3r=l(),k0=a("p"),y3r=o("This class cannot be instantiated directly using "),o2e=a("code"),w3r=o("__init__()"),A3r=o(" (throws an error)."),L3r=l(),Lt=a("div"),f(R0.$$.fragment),B3r=l(),r2e=a("p"),x3r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k3r=l(),cf=a("p"),R3r=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),S3r=o("not"),P3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a2e=a("code"),$3r=o("from_pretrained()"),I3r=o("to load the model weights."),D3r=l(),n2e=a("p"),j3r=o("Examples:"),N3r=l(),f(S0.$$.fragment),q3r=l(),So=a("div"),f(P0.$$.fragment),G3r=l(),s2e=a("p"),O3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),X3r=l(),kn=a("p"),V3r=o("The model class to instantiate is selected based on the "),l2e=a("code"),z3r=o("model_type"),W3r=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),Q3r=o("pretrained_model_name_or_path"),H3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),U3r=o("pretrained_model_name_or_path"),J3r=o(":"),Y3r=l(),so=a("ul"),oM=a("li"),c2e=a("strong"),K3r=o("albert"),Z3r=o(" \u2014 "),mV=a("a"),eyr=o("FlaxAlbertForTokenClassification"),oyr=o(" (ALBERT model)"),ryr=l(),rM=a("li"),f2e=a("strong"),tyr=o("bert"),ayr=o(" \u2014 "),gV=a("a"),nyr=o("FlaxBertForTokenClassification"),syr=o(" (BERT model)"),lyr=l(),tM=a("li"),m2e=a("strong"),iyr=o("big_bird"),dyr=o(" \u2014 "),hV=a("a"),cyr=o("FlaxBigBirdForTokenClassification"),fyr=o(" (BigBird model)"),myr=l(),aM=a("li"),g2e=a("strong"),gyr=o("distilbert"),hyr=o(" \u2014 "),pV=a("a"),pyr=o("FlaxDistilBertForTokenClassification"),_yr=o(" (DistilBERT model)"),uyr=l(),nM=a("li"),h2e=a("strong"),byr=o("electra"),vyr=o(" \u2014 "),_V=a("a"),Tyr=o("FlaxElectraForTokenClassification"),Fyr=o(" (ELECTRA model)"),Cyr=l(),sM=a("li"),p2e=a("strong"),Myr=o("roberta"),Eyr=o(" \u2014 "),uV=a("a"),yyr=o("FlaxRobertaForTokenClassification"),wyr=o(" (RoBERTa model)"),Ayr=l(),lM=a("li"),_2e=a("strong"),Lyr=o("roformer"),Byr=o(" \u2014 "),bV=a("a"),xyr=o("FlaxRoFormerForTokenClassification"),kyr=o(" (RoFormer model)"),Ryr=l(),u2e=a("p"),Syr=o("Examples:"),Pyr=l(),f($0.$$.fragment),_xe=l(),ff=a("h2"),iM=a("a"),b2e=a("span"),f(I0.$$.fragment),$yr=l(),v2e=a("span"),Iyr=o("FlaxAutoModelForMultipleChoice"),uxe=l(),Ir=a("div"),f(D0.$$.fragment),Dyr=l(),mf=a("p"),jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),T2e=a("code"),Nyr=o("from_pretrained()"),qyr=o("class method or the "),F2e=a("code"),Gyr=o("from_config()"),Oyr=o(`class
method.`),Xyr=l(),j0=a("p"),Vyr=o("This class cannot be instantiated directly using "),C2e=a("code"),zyr=o("__init__()"),Wyr=o(" (throws an error)."),Qyr=l(),Bt=a("div"),f(N0.$$.fragment),Hyr=l(),M2e=a("p"),Uyr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jyr=l(),gf=a("p"),Yyr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),Kyr=o("not"),Zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y2e=a("code"),ewr=o("from_pretrained()"),owr=o("to load the model weights."),rwr=l(),w2e=a("p"),twr=o("Examples:"),awr=l(),f(q0.$$.fragment),nwr=l(),Po=a("div"),f(G0.$$.fragment),swr=l(),A2e=a("p"),lwr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iwr=l(),Rn=a("p"),dwr=o("The model class to instantiate is selected based on the "),L2e=a("code"),cwr=o("model_type"),fwr=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),mwr=o("pretrained_model_name_or_path"),gwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),hwr=o("pretrained_model_name_or_path"),pwr=o(":"),_wr=l(),lo=a("ul"),dM=a("li"),k2e=a("strong"),uwr=o("albert"),bwr=o(" \u2014 "),vV=a("a"),vwr=o("FlaxAlbertForMultipleChoice"),Twr=o(" (ALBERT model)"),Fwr=l(),cM=a("li"),R2e=a("strong"),Cwr=o("bert"),Mwr=o(" \u2014 "),TV=a("a"),Ewr=o("FlaxBertForMultipleChoice"),ywr=o(" (BERT model)"),wwr=l(),fM=a("li"),S2e=a("strong"),Awr=o("big_bird"),Lwr=o(" \u2014 "),FV=a("a"),Bwr=o("FlaxBigBirdForMultipleChoice"),xwr=o(" (BigBird model)"),kwr=l(),mM=a("li"),P2e=a("strong"),Rwr=o("distilbert"),Swr=o(" \u2014 "),CV=a("a"),Pwr=o("FlaxDistilBertForMultipleChoice"),$wr=o(" (DistilBERT model)"),Iwr=l(),gM=a("li"),$2e=a("strong"),Dwr=o("electra"),jwr=o(" \u2014 "),MV=a("a"),Nwr=o("FlaxElectraForMultipleChoice"),qwr=o(" (ELECTRA model)"),Gwr=l(),hM=a("li"),I2e=a("strong"),Owr=o("roberta"),Xwr=o(" \u2014 "),EV=a("a"),Vwr=o("FlaxRobertaForMultipleChoice"),zwr=o(" (RoBERTa model)"),Wwr=l(),pM=a("li"),D2e=a("strong"),Qwr=o("roformer"),Hwr=o(" \u2014 "),yV=a("a"),Uwr=o("FlaxRoFormerForMultipleChoice"),Jwr=o(" (RoFormer model)"),Ywr=l(),j2e=a("p"),Kwr=o("Examples:"),Zwr=l(),f(O0.$$.fragment),bxe=l(),hf=a("h2"),_M=a("a"),N2e=a("span"),f(X0.$$.fragment),e6r=l(),q2e=a("span"),o6r=o("FlaxAutoModelForNextSentencePrediction"),vxe=l(),Dr=a("div"),f(V0.$$.fragment),r6r=l(),pf=a("p"),t6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),G2e=a("code"),a6r=o("from_pretrained()"),n6r=o("class method or the "),O2e=a("code"),s6r=o("from_config()"),l6r=o(`class
method.`),i6r=l(),z0=a("p"),d6r=o("This class cannot be instantiated directly using "),X2e=a("code"),c6r=o("__init__()"),f6r=o(" (throws an error)."),m6r=l(),xt=a("div"),f(W0.$$.fragment),g6r=l(),V2e=a("p"),h6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),p6r=l(),_f=a("p"),_6r=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),u6r=o("not"),b6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W2e=a("code"),v6r=o("from_pretrained()"),T6r=o("to load the model weights."),F6r=l(),Q2e=a("p"),C6r=o("Examples:"),M6r=l(),f(Q0.$$.fragment),E6r=l(),$o=a("div"),f(H0.$$.fragment),y6r=l(),H2e=a("p"),w6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),A6r=l(),Sn=a("p"),L6r=o("The model class to instantiate is selected based on the "),U2e=a("code"),B6r=o("model_type"),x6r=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),k6r=o("pretrained_model_name_or_path"),R6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),S6r=o("pretrained_model_name_or_path"),P6r=o(":"),$6r=l(),K2e=a("ul"),uM=a("li"),Z2e=a("strong"),I6r=o("bert"),D6r=o(" \u2014 "),wV=a("a"),j6r=o("FlaxBertForNextSentencePrediction"),N6r=o(" (BERT model)"),q6r=l(),eve=a("p"),G6r=o("Examples:"),O6r=l(),f(U0.$$.fragment),Txe=l(),uf=a("h2"),bM=a("a"),ove=a("span"),f(J0.$$.fragment),X6r=l(),rve=a("span"),V6r=o("FlaxAutoModelForImageClassification"),Fxe=l(),jr=a("div"),f(Y0.$$.fragment),z6r=l(),bf=a("p"),W6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tve=a("code"),Q6r=o("from_pretrained()"),H6r=o("class method or the "),ave=a("code"),U6r=o("from_config()"),J6r=o(`class
method.`),Y6r=l(),K0=a("p"),K6r=o("This class cannot be instantiated directly using "),nve=a("code"),Z6r=o("__init__()"),eAr=o(" (throws an error)."),oAr=l(),kt=a("div"),f(Z0.$$.fragment),rAr=l(),sve=a("p"),tAr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aAr=l(),vf=a("p"),nAr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),sAr=o("not"),lAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ive=a("code"),iAr=o("from_pretrained()"),dAr=o("to load the model weights."),cAr=l(),dve=a("p"),fAr=o("Examples:"),mAr=l(),f(eL.$$.fragment),gAr=l(),Io=a("div"),f(oL.$$.fragment),hAr=l(),cve=a("p"),pAr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Ar=l(),Pn=a("p"),uAr=o("The model class to instantiate is selected based on the "),fve=a("code"),bAr=o("model_type"),vAr=o(` property of the config object (either
passed as an argument or loaded from `),mve=a("code"),TAr=o("pretrained_model_name_or_path"),FAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=a("code"),CAr=o("pretrained_model_name_or_path"),MAr=o(":"),EAr=l(),rL=a("ul"),vM=a("li"),hve=a("strong"),yAr=o("beit"),wAr=o(" \u2014 "),AV=a("a"),AAr=o("FlaxBeitForImageClassification"),LAr=o(" (BEiT model)"),BAr=l(),TM=a("li"),pve=a("strong"),xAr=o("vit"),kAr=o(" \u2014 "),LV=a("a"),RAr=o("FlaxViTForImageClassification"),SAr=o(" (ViT model)"),PAr=l(),_ve=a("p"),$Ar=o("Examples:"),IAr=l(),f(tL.$$.fragment),Cxe=l(),Tf=a("h2"),FM=a("a"),uve=a("span"),f(aL.$$.fragment),DAr=l(),bve=a("span"),jAr=o("FlaxAutoModelForVision2Seq"),Mxe=l(),Nr=a("div"),f(nL.$$.fragment),NAr=l(),Ff=a("p"),qAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vve=a("code"),GAr=o("from_pretrained()"),OAr=o("class method or the "),Tve=a("code"),XAr=o("from_config()"),VAr=o(`class
method.`),zAr=l(),sL=a("p"),WAr=o("This class cannot be instantiated directly using "),Fve=a("code"),QAr=o("__init__()"),HAr=o(" (throws an error)."),UAr=l(),Rt=a("div"),f(lL.$$.fragment),JAr=l(),Cve=a("p"),YAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KAr=l(),Cf=a("p"),ZAr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),e0r=o("not"),o0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eve=a("code"),r0r=o("from_pretrained()"),t0r=o("to load the model weights."),a0r=l(),yve=a("p"),n0r=o("Examples:"),s0r=l(),f(iL.$$.fragment),l0r=l(),Do=a("div"),f(dL.$$.fragment),i0r=l(),wve=a("p"),d0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),c0r=l(),$n=a("p"),f0r=o("The model class to instantiate is selected based on the "),Ave=a("code"),m0r=o("model_type"),g0r=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),h0r=o("pretrained_model_name_or_path"),p0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),_0r=o("pretrained_model_name_or_path"),u0r=o(":"),b0r=l(),xve=a("ul"),CM=a("li"),kve=a("strong"),v0r=o("vision-encoder-decoder"),T0r=o(" \u2014 "),BV=a("a"),F0r=o("FlaxVisionEncoderDecoderModel"),C0r=o(" (Vision Encoder decoder model)"),M0r=l(),Rve=a("p"),E0r=o("Examples:"),y0r=l(),f(cL.$$.fragment),this.h()},l(c){const u=g5t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Be=i(c),ie=n(c,"H1",{class:!0});var fL=s(ie);me=n(fL,"A",{id:!0,class:!0,href:!0});var Sve=s(me);no=n(Sve,"SPAN",{});var Pve=s(no);m(ce.$$.fragment,Pve),Pve.forEach(t),Sve.forEach(t),ue=i(fL),Go=n(fL,"SPAN",{});var A0r=s(Go);Li=r(A0r,"Auto Classes"),A0r.forEach(t),fL.forEach(t),Ef=i(c),sa=n(c,"P",{});var yxe=s(sa);Bi=r(yxe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(yxe,"CODE",{});var L0r=s(xi);CE=r(L0r,"from_pretrained()"),L0r.forEach(t),yf=r(yxe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),yxe.forEach(t),ye=i(c),io=n(c,"P",{});var MM=s(io);ki=r(MM,"Instantiating one of "),In=n(MM,"A",{href:!0});var B0r=s(In);ME=r(B0r,"AutoConfig"),B0r.forEach(t),Dn=r(MM,", "),jn=n(MM,"A",{href:!0});var x0r=s(jn);EE=r(x0r,"AutoModel"),x0r.forEach(t),Ri=r(MM,`, and
`),Nn=n(MM,"A",{href:!0});var k0r=s(Nn);yE=r(k0r,"AutoTokenizer"),k0r.forEach(t),Si=r(MM," will directly create a class of the relevant architecture. For instance"),MM.forEach(t),wf=i(c),m($a.$$.fragment,c),co=i(c),ge=n(c,"P",{});var wxe=s(ge);l8=r(wxe,"will create a model that is an instance of "),Pi=n(wxe,"A",{href:!0});var R0r=s(Pi);i8=r(R0r,"BertModel"),R0r.forEach(t),d8=r(wxe,"."),wxe.forEach(t),Oo=i(c),Ia=n(c,"P",{});var Axe=s(Ia);c8=r(Axe,"There is one class of "),Af=n(Axe,"CODE",{});var S0r=s(Af);f8=r(S0r,"AutoModel"),S0r.forEach(t),$Re=r(Axe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Axe.forEach(t),y7e=i(c),$i=n(c,"H2",{class:!0});var Lxe=s($i);Lf=n(Lxe,"A",{id:!0,class:!0,href:!0});var P0r=s(Lf);TW=n(P0r,"SPAN",{});var $0r=s(TW);m(wE.$$.fragment,$0r),$0r.forEach(t),P0r.forEach(t),IRe=i(Lxe),FW=n(Lxe,"SPAN",{});var I0r=s(FW);DRe=r(I0r,"Extending the Auto Classes"),I0r.forEach(t),Lxe.forEach(t),w7e=i(c),qn=n(c,"P",{});var xV=s(qn);jRe=r(xV,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),CW=n(xV,"CODE",{});var D0r=s(CW);NRe=r(D0r,"NewModel"),D0r.forEach(t),qRe=r(xV,", make sure you have a "),MW=n(xV,"CODE",{});var j0r=s(MW);GRe=r(j0r,"NewModelConfig"),j0r.forEach(t),ORe=r(xV,` then you can add those to the auto
classes like this:`),xV.forEach(t),A7e=i(c),m(AE.$$.fragment,c),L7e=i(c),m8=n(c,"P",{});var N0r=s(m8);XRe=r(N0r,"You will then be able to use the auto classes like you would usually do!"),N0r.forEach(t),B7e=i(c),m(Bf.$$.fragment,c),x7e=i(c),Ii=n(c,"H2",{class:!0});var Bxe=s(Ii);xf=n(Bxe,"A",{id:!0,class:!0,href:!0});var q0r=s(xf);EW=n(q0r,"SPAN",{});var G0r=s(EW);m(LE.$$.fragment,G0r),G0r.forEach(t),q0r.forEach(t),VRe=i(Bxe),yW=n(Bxe,"SPAN",{});var O0r=s(yW);zRe=r(O0r,"AutoConfig"),O0r.forEach(t),Bxe.forEach(t),k7e=i(c),Xo=n(c,"DIV",{class:!0});var Is=s(Xo);m(BE.$$.fragment,Is),WRe=i(Is),xE=n(Is,"P",{});var xxe=s(xE);QRe=r(xxe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),g8=n(xxe,"A",{href:!0});var X0r=s(g8);HRe=r(X0r,"from_pretrained()"),X0r.forEach(t),URe=r(xxe," class method."),xxe.forEach(t),JRe=i(Is),kE=n(Is,"P",{});var kxe=s(kE);YRe=r(kxe,"This class cannot be instantiated directly using "),wW=n(kxe,"CODE",{});var V0r=s(wW);KRe=r(V0r,"__init__()"),V0r.forEach(t),ZRe=r(kxe," (throws an error)."),kxe.forEach(t),eSe=i(Is),fo=n(Is,"DIV",{class:!0});var ia=s(fo);m(RE.$$.fragment,ia),oSe=i(ia),AW=n(ia,"P",{});var z0r=s(AW);rSe=r(z0r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),z0r.forEach(t),tSe=i(ia),Di=n(ia,"P",{});var kV=s(Di);aSe=r(kV,"The configuration class to instantiate is selected based on the "),LW=n(kV,"CODE",{});var W0r=s(LW);nSe=r(W0r,"model_type"),W0r.forEach(t),sSe=r(kV,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),BW=n(kV,"CODE",{});var Q0r=s(BW);lSe=r(Q0r,"pretrained_model_name_or_path"),Q0r.forEach(t),iSe=r(kV,":"),kV.forEach(t),dSe=i(ia),v=n(ia,"UL",{});var T=s(v);kf=n(T,"LI",{});var $ve=s(kf);xW=n($ve,"STRONG",{});var H0r=s(xW);cSe=r(H0r,"albert"),H0r.forEach(t),fSe=r($ve," \u2014 "),h8=n($ve,"A",{href:!0});var U0r=s(h8);mSe=r(U0r,"AlbertConfig"),U0r.forEach(t),gSe=r($ve," (ALBERT model)"),$ve.forEach(t),hSe=i(T),Rf=n(T,"LI",{});var Ive=s(Rf);kW=n(Ive,"STRONG",{});var J0r=s(kW);pSe=r(J0r,"bart"),J0r.forEach(t),_Se=r(Ive," \u2014 "),p8=n(Ive,"A",{href:!0});var Y0r=s(p8);uSe=r(Y0r,"BartConfig"),Y0r.forEach(t),bSe=r(Ive," (BART model)"),Ive.forEach(t),vSe=i(T),Sf=n(T,"LI",{});var Dve=s(Sf);RW=n(Dve,"STRONG",{});var K0r=s(RW);TSe=r(K0r,"beit"),K0r.forEach(t),FSe=r(Dve," \u2014 "),_8=n(Dve,"A",{href:!0});var Z0r=s(_8);CSe=r(Z0r,"BeitConfig"),Z0r.forEach(t),MSe=r(Dve," (BEiT model)"),Dve.forEach(t),ESe=i(T),Pf=n(T,"LI",{});var jve=s(Pf);SW=n(jve,"STRONG",{});var eLr=s(SW);ySe=r(eLr,"bert"),eLr.forEach(t),wSe=r(jve," \u2014 "),u8=n(jve,"A",{href:!0});var oLr=s(u8);ASe=r(oLr,"BertConfig"),oLr.forEach(t),LSe=r(jve," (BERT model)"),jve.forEach(t),BSe=i(T),$f=n(T,"LI",{});var Nve=s($f);PW=n(Nve,"STRONG",{});var rLr=s(PW);xSe=r(rLr,"bert-generation"),rLr.forEach(t),kSe=r(Nve," \u2014 "),b8=n(Nve,"A",{href:!0});var tLr=s(b8);RSe=r(tLr,"BertGenerationConfig"),tLr.forEach(t),SSe=r(Nve," (Bert Generation model)"),Nve.forEach(t),PSe=i(T),If=n(T,"LI",{});var qve=s(If);$W=n(qve,"STRONG",{});var aLr=s($W);$Se=r(aLr,"big_bird"),aLr.forEach(t),ISe=r(qve," \u2014 "),v8=n(qve,"A",{href:!0});var nLr=s(v8);DSe=r(nLr,"BigBirdConfig"),nLr.forEach(t),jSe=r(qve," (BigBird model)"),qve.forEach(t),NSe=i(T),Df=n(T,"LI",{});var Gve=s(Df);IW=n(Gve,"STRONG",{});var sLr=s(IW);qSe=r(sLr,"bigbird_pegasus"),sLr.forEach(t),GSe=r(Gve," \u2014 "),T8=n(Gve,"A",{href:!0});var lLr=s(T8);OSe=r(lLr,"BigBirdPegasusConfig"),lLr.forEach(t),XSe=r(Gve," (BigBirdPegasus model)"),Gve.forEach(t),VSe=i(T),jf=n(T,"LI",{});var Ove=s(jf);DW=n(Ove,"STRONG",{});var iLr=s(DW);zSe=r(iLr,"blenderbot"),iLr.forEach(t),WSe=r(Ove," \u2014 "),F8=n(Ove,"A",{href:!0});var dLr=s(F8);QSe=r(dLr,"BlenderbotConfig"),dLr.forEach(t),HSe=r(Ove," (Blenderbot model)"),Ove.forEach(t),USe=i(T),Nf=n(T,"LI",{});var Xve=s(Nf);jW=n(Xve,"STRONG",{});var cLr=s(jW);JSe=r(cLr,"blenderbot-small"),cLr.forEach(t),YSe=r(Xve," \u2014 "),C8=n(Xve,"A",{href:!0});var fLr=s(C8);KSe=r(fLr,"BlenderbotSmallConfig"),fLr.forEach(t),ZSe=r(Xve," (BlenderbotSmall model)"),Xve.forEach(t),ePe=i(T),qf=n(T,"LI",{});var Vve=s(qf);NW=n(Vve,"STRONG",{});var mLr=s(NW);oPe=r(mLr,"camembert"),mLr.forEach(t),rPe=r(Vve," \u2014 "),M8=n(Vve,"A",{href:!0});var gLr=s(M8);tPe=r(gLr,"CamembertConfig"),gLr.forEach(t),aPe=r(Vve," (CamemBERT model)"),Vve.forEach(t),nPe=i(T),Gf=n(T,"LI",{});var zve=s(Gf);qW=n(zve,"STRONG",{});var hLr=s(qW);sPe=r(hLr,"canine"),hLr.forEach(t),lPe=r(zve," \u2014 "),E8=n(zve,"A",{href:!0});var pLr=s(E8);iPe=r(pLr,"CanineConfig"),pLr.forEach(t),dPe=r(zve," (Canine model)"),zve.forEach(t),cPe=i(T),Of=n(T,"LI",{});var Wve=s(Of);GW=n(Wve,"STRONG",{});var _Lr=s(GW);fPe=r(_Lr,"clip"),_Lr.forEach(t),mPe=r(Wve," \u2014 "),y8=n(Wve,"A",{href:!0});var uLr=s(y8);gPe=r(uLr,"CLIPConfig"),uLr.forEach(t),hPe=r(Wve," (CLIP model)"),Wve.forEach(t),pPe=i(T),Xf=n(T,"LI",{});var Qve=s(Xf);OW=n(Qve,"STRONG",{});var bLr=s(OW);_Pe=r(bLr,"convbert"),bLr.forEach(t),uPe=r(Qve," \u2014 "),w8=n(Qve,"A",{href:!0});var vLr=s(w8);bPe=r(vLr,"ConvBertConfig"),vLr.forEach(t),vPe=r(Qve," (ConvBERT model)"),Qve.forEach(t),TPe=i(T),Vf=n(T,"LI",{});var Hve=s(Vf);XW=n(Hve,"STRONG",{});var TLr=s(XW);FPe=r(TLr,"convnext"),TLr.forEach(t),CPe=r(Hve," \u2014 "),A8=n(Hve,"A",{href:!0});var FLr=s(A8);MPe=r(FLr,"ConvNextConfig"),FLr.forEach(t),EPe=r(Hve," (ConvNext model)"),Hve.forEach(t),yPe=i(T),zf=n(T,"LI",{});var Uve=s(zf);VW=n(Uve,"STRONG",{});var CLr=s(VW);wPe=r(CLr,"ctrl"),CLr.forEach(t),APe=r(Uve," \u2014 "),L8=n(Uve,"A",{href:!0});var MLr=s(L8);LPe=r(MLr,"CTRLConfig"),MLr.forEach(t),BPe=r(Uve," (CTRL model)"),Uve.forEach(t),xPe=i(T),Wf=n(T,"LI",{});var Jve=s(Wf);zW=n(Jve,"STRONG",{});var ELr=s(zW);kPe=r(ELr,"data2vec-audio"),ELr.forEach(t),RPe=r(Jve," \u2014 "),B8=n(Jve,"A",{href:!0});var yLr=s(B8);SPe=r(yLr,"Data2VecAudioConfig"),yLr.forEach(t),PPe=r(Jve," (Data2VecAudio model)"),Jve.forEach(t),$Pe=i(T),Qf=n(T,"LI",{});var Yve=s(Qf);WW=n(Yve,"STRONG",{});var wLr=s(WW);IPe=r(wLr,"data2vec-text"),wLr.forEach(t),DPe=r(Yve," \u2014 "),x8=n(Yve,"A",{href:!0});var ALr=s(x8);jPe=r(ALr,"Data2VecTextConfig"),ALr.forEach(t),NPe=r(Yve," (Data2VecText model)"),Yve.forEach(t),qPe=i(T),Hf=n(T,"LI",{});var Kve=s(Hf);QW=n(Kve,"STRONG",{});var LLr=s(QW);GPe=r(LLr,"deberta"),LLr.forEach(t),OPe=r(Kve," \u2014 "),k8=n(Kve,"A",{href:!0});var BLr=s(k8);XPe=r(BLr,"DebertaConfig"),BLr.forEach(t),VPe=r(Kve," (DeBERTa model)"),Kve.forEach(t),zPe=i(T),Uf=n(T,"LI",{});var Zve=s(Uf);HW=n(Zve,"STRONG",{});var xLr=s(HW);WPe=r(xLr,"deberta-v2"),xLr.forEach(t),QPe=r(Zve," \u2014 "),R8=n(Zve,"A",{href:!0});var kLr=s(R8);HPe=r(kLr,"DebertaV2Config"),kLr.forEach(t),UPe=r(Zve," (DeBERTa-v2 model)"),Zve.forEach(t),JPe=i(T),Jf=n(T,"LI",{});var eTe=s(Jf);UW=n(eTe,"STRONG",{});var RLr=s(UW);YPe=r(RLr,"deit"),RLr.forEach(t),KPe=r(eTe," \u2014 "),S8=n(eTe,"A",{href:!0});var SLr=s(S8);ZPe=r(SLr,"DeiTConfig"),SLr.forEach(t),e$e=r(eTe," (DeiT model)"),eTe.forEach(t),o$e=i(T),Yf=n(T,"LI",{});var oTe=s(Yf);JW=n(oTe,"STRONG",{});var PLr=s(JW);r$e=r(PLr,"detr"),PLr.forEach(t),t$e=r(oTe," \u2014 "),P8=n(oTe,"A",{href:!0});var $Lr=s(P8);a$e=r($Lr,"DetrConfig"),$Lr.forEach(t),n$e=r(oTe," (DETR model)"),oTe.forEach(t),s$e=i(T),Kf=n(T,"LI",{});var rTe=s(Kf);YW=n(rTe,"STRONG",{});var ILr=s(YW);l$e=r(ILr,"distilbert"),ILr.forEach(t),i$e=r(rTe," \u2014 "),$8=n(rTe,"A",{href:!0});var DLr=s($8);d$e=r(DLr,"DistilBertConfig"),DLr.forEach(t),c$e=r(rTe," (DistilBERT model)"),rTe.forEach(t),f$e=i(T),Zf=n(T,"LI",{});var tTe=s(Zf);KW=n(tTe,"STRONG",{});var jLr=s(KW);m$e=r(jLr,"dpr"),jLr.forEach(t),g$e=r(tTe," \u2014 "),I8=n(tTe,"A",{href:!0});var NLr=s(I8);h$e=r(NLr,"DPRConfig"),NLr.forEach(t),p$e=r(tTe," (DPR model)"),tTe.forEach(t),_$e=i(T),em=n(T,"LI",{});var aTe=s(em);ZW=n(aTe,"STRONG",{});var qLr=s(ZW);u$e=r(qLr,"electra"),qLr.forEach(t),b$e=r(aTe," \u2014 "),D8=n(aTe,"A",{href:!0});var GLr=s(D8);v$e=r(GLr,"ElectraConfig"),GLr.forEach(t),T$e=r(aTe," (ELECTRA model)"),aTe.forEach(t),F$e=i(T),om=n(T,"LI",{});var nTe=s(om);eQ=n(nTe,"STRONG",{});var OLr=s(eQ);C$e=r(OLr,"encoder-decoder"),OLr.forEach(t),M$e=r(nTe," \u2014 "),j8=n(nTe,"A",{href:!0});var XLr=s(j8);E$e=r(XLr,"EncoderDecoderConfig"),XLr.forEach(t),y$e=r(nTe," (Encoder decoder model)"),nTe.forEach(t),w$e=i(T),rm=n(T,"LI",{});var sTe=s(rm);oQ=n(sTe,"STRONG",{});var VLr=s(oQ);A$e=r(VLr,"flaubert"),VLr.forEach(t),L$e=r(sTe," \u2014 "),N8=n(sTe,"A",{href:!0});var zLr=s(N8);B$e=r(zLr,"FlaubertConfig"),zLr.forEach(t),x$e=r(sTe," (FlauBERT model)"),sTe.forEach(t),k$e=i(T),tm=n(T,"LI",{});var lTe=s(tm);rQ=n(lTe,"STRONG",{});var WLr=s(rQ);R$e=r(WLr,"fnet"),WLr.forEach(t),S$e=r(lTe," \u2014 "),q8=n(lTe,"A",{href:!0});var QLr=s(q8);P$e=r(QLr,"FNetConfig"),QLr.forEach(t),$$e=r(lTe," (FNet model)"),lTe.forEach(t),I$e=i(T),am=n(T,"LI",{});var iTe=s(am);tQ=n(iTe,"STRONG",{});var HLr=s(tQ);D$e=r(HLr,"fsmt"),HLr.forEach(t),j$e=r(iTe," \u2014 "),G8=n(iTe,"A",{href:!0});var ULr=s(G8);N$e=r(ULr,"FSMTConfig"),ULr.forEach(t),q$e=r(iTe," (FairSeq Machine-Translation model)"),iTe.forEach(t),G$e=i(T),nm=n(T,"LI",{});var dTe=s(nm);aQ=n(dTe,"STRONG",{});var JLr=s(aQ);O$e=r(JLr,"funnel"),JLr.forEach(t),X$e=r(dTe," \u2014 "),O8=n(dTe,"A",{href:!0});var YLr=s(O8);V$e=r(YLr,"FunnelConfig"),YLr.forEach(t),z$e=r(dTe," (Funnel Transformer model)"),dTe.forEach(t),W$e=i(T),sm=n(T,"LI",{});var cTe=s(sm);nQ=n(cTe,"STRONG",{});var KLr=s(nQ);Q$e=r(KLr,"gpt2"),KLr.forEach(t),H$e=r(cTe," \u2014 "),X8=n(cTe,"A",{href:!0});var ZLr=s(X8);U$e=r(ZLr,"GPT2Config"),ZLr.forEach(t),J$e=r(cTe," (OpenAI GPT-2 model)"),cTe.forEach(t),Y$e=i(T),lm=n(T,"LI",{});var fTe=s(lm);sQ=n(fTe,"STRONG",{});var e8r=s(sQ);K$e=r(e8r,"gpt_neo"),e8r.forEach(t),Z$e=r(fTe," \u2014 "),V8=n(fTe,"A",{href:!0});var o8r=s(V8);eIe=r(o8r,"GPTNeoConfig"),o8r.forEach(t),oIe=r(fTe," (GPT Neo model)"),fTe.forEach(t),rIe=i(T),im=n(T,"LI",{});var mTe=s(im);lQ=n(mTe,"STRONG",{});var r8r=s(lQ);tIe=r(r8r,"gptj"),r8r.forEach(t),aIe=r(mTe," \u2014 "),z8=n(mTe,"A",{href:!0});var t8r=s(z8);nIe=r(t8r,"GPTJConfig"),t8r.forEach(t),sIe=r(mTe," (GPT-J model)"),mTe.forEach(t),lIe=i(T),dm=n(T,"LI",{});var gTe=s(dm);iQ=n(gTe,"STRONG",{});var a8r=s(iQ);iIe=r(a8r,"hubert"),a8r.forEach(t),dIe=r(gTe," \u2014 "),W8=n(gTe,"A",{href:!0});var n8r=s(W8);cIe=r(n8r,"HubertConfig"),n8r.forEach(t),fIe=r(gTe," (Hubert model)"),gTe.forEach(t),mIe=i(T),cm=n(T,"LI",{});var hTe=s(cm);dQ=n(hTe,"STRONG",{});var s8r=s(dQ);gIe=r(s8r,"ibert"),s8r.forEach(t),hIe=r(hTe," \u2014 "),Q8=n(hTe,"A",{href:!0});var l8r=s(Q8);pIe=r(l8r,"IBertConfig"),l8r.forEach(t),_Ie=r(hTe," (I-BERT model)"),hTe.forEach(t),uIe=i(T),fm=n(T,"LI",{});var pTe=s(fm);cQ=n(pTe,"STRONG",{});var i8r=s(cQ);bIe=r(i8r,"imagegpt"),i8r.forEach(t),vIe=r(pTe," \u2014 "),H8=n(pTe,"A",{href:!0});var d8r=s(H8);TIe=r(d8r,"ImageGPTConfig"),d8r.forEach(t),FIe=r(pTe," (ImageGPT model)"),pTe.forEach(t),CIe=i(T),mm=n(T,"LI",{});var _Te=s(mm);fQ=n(_Te,"STRONG",{});var c8r=s(fQ);MIe=r(c8r,"layoutlm"),c8r.forEach(t),EIe=r(_Te," \u2014 "),U8=n(_Te,"A",{href:!0});var f8r=s(U8);yIe=r(f8r,"LayoutLMConfig"),f8r.forEach(t),wIe=r(_Te," (LayoutLM model)"),_Te.forEach(t),AIe=i(T),gm=n(T,"LI",{});var uTe=s(gm);mQ=n(uTe,"STRONG",{});var m8r=s(mQ);LIe=r(m8r,"layoutlmv2"),m8r.forEach(t),BIe=r(uTe," \u2014 "),J8=n(uTe,"A",{href:!0});var g8r=s(J8);xIe=r(g8r,"LayoutLMv2Config"),g8r.forEach(t),kIe=r(uTe," (LayoutLMv2 model)"),uTe.forEach(t),RIe=i(T),hm=n(T,"LI",{});var bTe=s(hm);gQ=n(bTe,"STRONG",{});var h8r=s(gQ);SIe=r(h8r,"led"),h8r.forEach(t),PIe=r(bTe," \u2014 "),Y8=n(bTe,"A",{href:!0});var p8r=s(Y8);$Ie=r(p8r,"LEDConfig"),p8r.forEach(t),IIe=r(bTe," (LED model)"),bTe.forEach(t),DIe=i(T),pm=n(T,"LI",{});var vTe=s(pm);hQ=n(vTe,"STRONG",{});var _8r=s(hQ);jIe=r(_8r,"longformer"),_8r.forEach(t),NIe=r(vTe," \u2014 "),K8=n(vTe,"A",{href:!0});var u8r=s(K8);qIe=r(u8r,"LongformerConfig"),u8r.forEach(t),GIe=r(vTe," (Longformer model)"),vTe.forEach(t),OIe=i(T),_m=n(T,"LI",{});var TTe=s(_m);pQ=n(TTe,"STRONG",{});var b8r=s(pQ);XIe=r(b8r,"luke"),b8r.forEach(t),VIe=r(TTe," \u2014 "),Z8=n(TTe,"A",{href:!0});var v8r=s(Z8);zIe=r(v8r,"LukeConfig"),v8r.forEach(t),WIe=r(TTe," (LUKE model)"),TTe.forEach(t),QIe=i(T),um=n(T,"LI",{});var FTe=s(um);_Q=n(FTe,"STRONG",{});var T8r=s(_Q);HIe=r(T8r,"lxmert"),T8r.forEach(t),UIe=r(FTe," \u2014 "),e7=n(FTe,"A",{href:!0});var F8r=s(e7);JIe=r(F8r,"LxmertConfig"),F8r.forEach(t),YIe=r(FTe," (LXMERT model)"),FTe.forEach(t),KIe=i(T),bm=n(T,"LI",{});var CTe=s(bm);uQ=n(CTe,"STRONG",{});var C8r=s(uQ);ZIe=r(C8r,"m2m_100"),C8r.forEach(t),eDe=r(CTe," \u2014 "),o7=n(CTe,"A",{href:!0});var M8r=s(o7);oDe=r(M8r,"M2M100Config"),M8r.forEach(t),rDe=r(CTe," (M2M100 model)"),CTe.forEach(t),tDe=i(T),vm=n(T,"LI",{});var MTe=s(vm);bQ=n(MTe,"STRONG",{});var E8r=s(bQ);aDe=r(E8r,"marian"),E8r.forEach(t),nDe=r(MTe," \u2014 "),r7=n(MTe,"A",{href:!0});var y8r=s(r7);sDe=r(y8r,"MarianConfig"),y8r.forEach(t),lDe=r(MTe," (Marian model)"),MTe.forEach(t),iDe=i(T),Tm=n(T,"LI",{});var ETe=s(Tm);vQ=n(ETe,"STRONG",{});var w8r=s(vQ);dDe=r(w8r,"maskformer"),w8r.forEach(t),cDe=r(ETe," \u2014 "),t7=n(ETe,"A",{href:!0});var A8r=s(t7);fDe=r(A8r,"MaskFormerConfig"),A8r.forEach(t),mDe=r(ETe," (MaskFormer model)"),ETe.forEach(t),gDe=i(T),Fm=n(T,"LI",{});var yTe=s(Fm);TQ=n(yTe,"STRONG",{});var L8r=s(TQ);hDe=r(L8r,"mbart"),L8r.forEach(t),pDe=r(yTe," \u2014 "),a7=n(yTe,"A",{href:!0});var B8r=s(a7);_De=r(B8r,"MBartConfig"),B8r.forEach(t),uDe=r(yTe," (mBART model)"),yTe.forEach(t),bDe=i(T),Cm=n(T,"LI",{});var wTe=s(Cm);FQ=n(wTe,"STRONG",{});var x8r=s(FQ);vDe=r(x8r,"megatron-bert"),x8r.forEach(t),TDe=r(wTe," \u2014 "),n7=n(wTe,"A",{href:!0});var k8r=s(n7);FDe=r(k8r,"MegatronBertConfig"),k8r.forEach(t),CDe=r(wTe," (MegatronBert model)"),wTe.forEach(t),MDe=i(T),Mm=n(T,"LI",{});var ATe=s(Mm);CQ=n(ATe,"STRONG",{});var R8r=s(CQ);EDe=r(R8r,"mobilebert"),R8r.forEach(t),yDe=r(ATe," \u2014 "),s7=n(ATe,"A",{href:!0});var S8r=s(s7);wDe=r(S8r,"MobileBertConfig"),S8r.forEach(t),ADe=r(ATe," (MobileBERT model)"),ATe.forEach(t),LDe=i(T),Em=n(T,"LI",{});var LTe=s(Em);MQ=n(LTe,"STRONG",{});var P8r=s(MQ);BDe=r(P8r,"mpnet"),P8r.forEach(t),xDe=r(LTe," \u2014 "),l7=n(LTe,"A",{href:!0});var $8r=s(l7);kDe=r($8r,"MPNetConfig"),$8r.forEach(t),RDe=r(LTe," (MPNet model)"),LTe.forEach(t),SDe=i(T),ym=n(T,"LI",{});var BTe=s(ym);EQ=n(BTe,"STRONG",{});var I8r=s(EQ);PDe=r(I8r,"mt5"),I8r.forEach(t),$De=r(BTe," \u2014 "),i7=n(BTe,"A",{href:!0});var D8r=s(i7);IDe=r(D8r,"MT5Config"),D8r.forEach(t),DDe=r(BTe," (mT5 model)"),BTe.forEach(t),jDe=i(T),wm=n(T,"LI",{});var xTe=s(wm);yQ=n(xTe,"STRONG",{});var j8r=s(yQ);NDe=r(j8r,"nystromformer"),j8r.forEach(t),qDe=r(xTe," \u2014 "),d7=n(xTe,"A",{href:!0});var N8r=s(d7);GDe=r(N8r,"NystromformerConfig"),N8r.forEach(t),ODe=r(xTe," (Nystromformer model)"),xTe.forEach(t),XDe=i(T),Am=n(T,"LI",{});var kTe=s(Am);wQ=n(kTe,"STRONG",{});var q8r=s(wQ);VDe=r(q8r,"openai-gpt"),q8r.forEach(t),zDe=r(kTe," \u2014 "),c7=n(kTe,"A",{href:!0});var G8r=s(c7);WDe=r(G8r,"OpenAIGPTConfig"),G8r.forEach(t),QDe=r(kTe," (OpenAI GPT model)"),kTe.forEach(t),HDe=i(T),Lm=n(T,"LI",{});var RTe=s(Lm);AQ=n(RTe,"STRONG",{});var O8r=s(AQ);UDe=r(O8r,"pegasus"),O8r.forEach(t),JDe=r(RTe," \u2014 "),f7=n(RTe,"A",{href:!0});var X8r=s(f7);YDe=r(X8r,"PegasusConfig"),X8r.forEach(t),KDe=r(RTe," (Pegasus model)"),RTe.forEach(t),ZDe=i(T),Bm=n(T,"LI",{});var STe=s(Bm);LQ=n(STe,"STRONG",{});var V8r=s(LQ);eje=r(V8r,"perceiver"),V8r.forEach(t),oje=r(STe," \u2014 "),m7=n(STe,"A",{href:!0});var z8r=s(m7);rje=r(z8r,"PerceiverConfig"),z8r.forEach(t),tje=r(STe," (Perceiver model)"),STe.forEach(t),aje=i(T),xm=n(T,"LI",{});var PTe=s(xm);BQ=n(PTe,"STRONG",{});var W8r=s(BQ);nje=r(W8r,"plbart"),W8r.forEach(t),sje=r(PTe," \u2014 "),g7=n(PTe,"A",{href:!0});var Q8r=s(g7);lje=r(Q8r,"PLBartConfig"),Q8r.forEach(t),ije=r(PTe," (PLBart model)"),PTe.forEach(t),dje=i(T),km=n(T,"LI",{});var $Te=s(km);xQ=n($Te,"STRONG",{});var H8r=s(xQ);cje=r(H8r,"poolformer"),H8r.forEach(t),fje=r($Te," \u2014 "),h7=n($Te,"A",{href:!0});var U8r=s(h7);mje=r(U8r,"PoolFormerConfig"),U8r.forEach(t),gje=r($Te," (PoolFormer model)"),$Te.forEach(t),hje=i(T),Rm=n(T,"LI",{});var ITe=s(Rm);kQ=n(ITe,"STRONG",{});var J8r=s(kQ);pje=r(J8r,"prophetnet"),J8r.forEach(t),_je=r(ITe," \u2014 "),p7=n(ITe,"A",{href:!0});var Y8r=s(p7);uje=r(Y8r,"ProphetNetConfig"),Y8r.forEach(t),bje=r(ITe," (ProphetNet model)"),ITe.forEach(t),vje=i(T),Sm=n(T,"LI",{});var DTe=s(Sm);RQ=n(DTe,"STRONG",{});var K8r=s(RQ);Tje=r(K8r,"qdqbert"),K8r.forEach(t),Fje=r(DTe," \u2014 "),_7=n(DTe,"A",{href:!0});var Z8r=s(_7);Cje=r(Z8r,"QDQBertConfig"),Z8r.forEach(t),Mje=r(DTe," (QDQBert model)"),DTe.forEach(t),Eje=i(T),Pm=n(T,"LI",{});var jTe=s(Pm);SQ=n(jTe,"STRONG",{});var e7r=s(SQ);yje=r(e7r,"rag"),e7r.forEach(t),wje=r(jTe," \u2014 "),u7=n(jTe,"A",{href:!0});var o7r=s(u7);Aje=r(o7r,"RagConfig"),o7r.forEach(t),Lje=r(jTe," (RAG model)"),jTe.forEach(t),Bje=i(T),$m=n(T,"LI",{});var NTe=s($m);PQ=n(NTe,"STRONG",{});var r7r=s(PQ);xje=r(r7r,"realm"),r7r.forEach(t),kje=r(NTe," \u2014 "),b7=n(NTe,"A",{href:!0});var t7r=s(b7);Rje=r(t7r,"RealmConfig"),t7r.forEach(t),Sje=r(NTe," (Realm model)"),NTe.forEach(t),Pje=i(T),Im=n(T,"LI",{});var qTe=s(Im);$Q=n(qTe,"STRONG",{});var a7r=s($Q);$je=r(a7r,"reformer"),a7r.forEach(t),Ije=r(qTe," \u2014 "),v7=n(qTe,"A",{href:!0});var n7r=s(v7);Dje=r(n7r,"ReformerConfig"),n7r.forEach(t),jje=r(qTe," (Reformer model)"),qTe.forEach(t),Nje=i(T),Dm=n(T,"LI",{});var GTe=s(Dm);IQ=n(GTe,"STRONG",{});var s7r=s(IQ);qje=r(s7r,"rembert"),s7r.forEach(t),Gje=r(GTe," \u2014 "),T7=n(GTe,"A",{href:!0});var l7r=s(T7);Oje=r(l7r,"RemBertConfig"),l7r.forEach(t),Xje=r(GTe," (RemBERT model)"),GTe.forEach(t),Vje=i(T),jm=n(T,"LI",{});var OTe=s(jm);DQ=n(OTe,"STRONG",{});var i7r=s(DQ);zje=r(i7r,"retribert"),i7r.forEach(t),Wje=r(OTe," \u2014 "),F7=n(OTe,"A",{href:!0});var d7r=s(F7);Qje=r(d7r,"RetriBertConfig"),d7r.forEach(t),Hje=r(OTe," (RetriBERT model)"),OTe.forEach(t),Uje=i(T),Nm=n(T,"LI",{});var XTe=s(Nm);jQ=n(XTe,"STRONG",{});var c7r=s(jQ);Jje=r(c7r,"roberta"),c7r.forEach(t),Yje=r(XTe," \u2014 "),C7=n(XTe,"A",{href:!0});var f7r=s(C7);Kje=r(f7r,"RobertaConfig"),f7r.forEach(t),Zje=r(XTe," (RoBERTa model)"),XTe.forEach(t),eNe=i(T),qm=n(T,"LI",{});var VTe=s(qm);NQ=n(VTe,"STRONG",{});var m7r=s(NQ);oNe=r(m7r,"roformer"),m7r.forEach(t),rNe=r(VTe," \u2014 "),M7=n(VTe,"A",{href:!0});var g7r=s(M7);tNe=r(g7r,"RoFormerConfig"),g7r.forEach(t),aNe=r(VTe," (RoFormer model)"),VTe.forEach(t),nNe=i(T),Gm=n(T,"LI",{});var zTe=s(Gm);qQ=n(zTe,"STRONG",{});var h7r=s(qQ);sNe=r(h7r,"segformer"),h7r.forEach(t),lNe=r(zTe," \u2014 "),E7=n(zTe,"A",{href:!0});var p7r=s(E7);iNe=r(p7r,"SegformerConfig"),p7r.forEach(t),dNe=r(zTe," (SegFormer model)"),zTe.forEach(t),cNe=i(T),Om=n(T,"LI",{});var WTe=s(Om);GQ=n(WTe,"STRONG",{});var _7r=s(GQ);fNe=r(_7r,"sew"),_7r.forEach(t),mNe=r(WTe," \u2014 "),y7=n(WTe,"A",{href:!0});var u7r=s(y7);gNe=r(u7r,"SEWConfig"),u7r.forEach(t),hNe=r(WTe," (SEW model)"),WTe.forEach(t),pNe=i(T),Xm=n(T,"LI",{});var QTe=s(Xm);OQ=n(QTe,"STRONG",{});var b7r=s(OQ);_Ne=r(b7r,"sew-d"),b7r.forEach(t),uNe=r(QTe," \u2014 "),w7=n(QTe,"A",{href:!0});var v7r=s(w7);bNe=r(v7r,"SEWDConfig"),v7r.forEach(t),vNe=r(QTe," (SEW-D model)"),QTe.forEach(t),TNe=i(T),Vm=n(T,"LI",{});var HTe=s(Vm);XQ=n(HTe,"STRONG",{});var T7r=s(XQ);FNe=r(T7r,"speech-encoder-decoder"),T7r.forEach(t),CNe=r(HTe," \u2014 "),A7=n(HTe,"A",{href:!0});var F7r=s(A7);MNe=r(F7r,"SpeechEncoderDecoderConfig"),F7r.forEach(t),ENe=r(HTe," (Speech Encoder decoder model)"),HTe.forEach(t),yNe=i(T),zm=n(T,"LI",{});var UTe=s(zm);VQ=n(UTe,"STRONG",{});var C7r=s(VQ);wNe=r(C7r,"speech_to_text"),C7r.forEach(t),ANe=r(UTe," \u2014 "),L7=n(UTe,"A",{href:!0});var M7r=s(L7);LNe=r(M7r,"Speech2TextConfig"),M7r.forEach(t),BNe=r(UTe," (Speech2Text model)"),UTe.forEach(t),xNe=i(T),Wm=n(T,"LI",{});var JTe=s(Wm);zQ=n(JTe,"STRONG",{});var E7r=s(zQ);kNe=r(E7r,"speech_to_text_2"),E7r.forEach(t),RNe=r(JTe," \u2014 "),B7=n(JTe,"A",{href:!0});var y7r=s(B7);SNe=r(y7r,"Speech2Text2Config"),y7r.forEach(t),PNe=r(JTe," (Speech2Text2 model)"),JTe.forEach(t),$Ne=i(T),Qm=n(T,"LI",{});var YTe=s(Qm);WQ=n(YTe,"STRONG",{});var w7r=s(WQ);INe=r(w7r,"splinter"),w7r.forEach(t),DNe=r(YTe," \u2014 "),x7=n(YTe,"A",{href:!0});var A7r=s(x7);jNe=r(A7r,"SplinterConfig"),A7r.forEach(t),NNe=r(YTe," (Splinter model)"),YTe.forEach(t),qNe=i(T),Hm=n(T,"LI",{});var KTe=s(Hm);QQ=n(KTe,"STRONG",{});var L7r=s(QQ);GNe=r(L7r,"squeezebert"),L7r.forEach(t),ONe=r(KTe," \u2014 "),k7=n(KTe,"A",{href:!0});var B7r=s(k7);XNe=r(B7r,"SqueezeBertConfig"),B7r.forEach(t),VNe=r(KTe," (SqueezeBERT model)"),KTe.forEach(t),zNe=i(T),Um=n(T,"LI",{});var ZTe=s(Um);HQ=n(ZTe,"STRONG",{});var x7r=s(HQ);WNe=r(x7r,"swin"),x7r.forEach(t),QNe=r(ZTe," \u2014 "),R7=n(ZTe,"A",{href:!0});var k7r=s(R7);HNe=r(k7r,"SwinConfig"),k7r.forEach(t),UNe=r(ZTe," (Swin model)"),ZTe.forEach(t),JNe=i(T),Jm=n(T,"LI",{});var eFe=s(Jm);UQ=n(eFe,"STRONG",{});var R7r=s(UQ);YNe=r(R7r,"t5"),R7r.forEach(t),KNe=r(eFe," \u2014 "),S7=n(eFe,"A",{href:!0});var S7r=s(S7);ZNe=r(S7r,"T5Config"),S7r.forEach(t),eqe=r(eFe," (T5 model)"),eFe.forEach(t),oqe=i(T),Ym=n(T,"LI",{});var oFe=s(Ym);JQ=n(oFe,"STRONG",{});var P7r=s(JQ);rqe=r(P7r,"tapas"),P7r.forEach(t),tqe=r(oFe," \u2014 "),P7=n(oFe,"A",{href:!0});var $7r=s(P7);aqe=r($7r,"TapasConfig"),$7r.forEach(t),nqe=r(oFe," (TAPAS model)"),oFe.forEach(t),sqe=i(T),Km=n(T,"LI",{});var rFe=s(Km);YQ=n(rFe,"STRONG",{});var I7r=s(YQ);lqe=r(I7r,"transfo-xl"),I7r.forEach(t),iqe=r(rFe," \u2014 "),$7=n(rFe,"A",{href:!0});var D7r=s($7);dqe=r(D7r,"TransfoXLConfig"),D7r.forEach(t),cqe=r(rFe," (Transformer-XL model)"),rFe.forEach(t),fqe=i(T),Zm=n(T,"LI",{});var tFe=s(Zm);KQ=n(tFe,"STRONG",{});var j7r=s(KQ);mqe=r(j7r,"trocr"),j7r.forEach(t),gqe=r(tFe," \u2014 "),I7=n(tFe,"A",{href:!0});var N7r=s(I7);hqe=r(N7r,"TrOCRConfig"),N7r.forEach(t),pqe=r(tFe," (TrOCR model)"),tFe.forEach(t),_qe=i(T),eg=n(T,"LI",{});var aFe=s(eg);ZQ=n(aFe,"STRONG",{});var q7r=s(ZQ);uqe=r(q7r,"unispeech"),q7r.forEach(t),bqe=r(aFe," \u2014 "),D7=n(aFe,"A",{href:!0});var G7r=s(D7);vqe=r(G7r,"UniSpeechConfig"),G7r.forEach(t),Tqe=r(aFe," (UniSpeech model)"),aFe.forEach(t),Fqe=i(T),og=n(T,"LI",{});var nFe=s(og);eH=n(nFe,"STRONG",{});var O7r=s(eH);Cqe=r(O7r,"unispeech-sat"),O7r.forEach(t),Mqe=r(nFe," \u2014 "),j7=n(nFe,"A",{href:!0});var X7r=s(j7);Eqe=r(X7r,"UniSpeechSatConfig"),X7r.forEach(t),yqe=r(nFe," (UniSpeechSat model)"),nFe.forEach(t),wqe=i(T),rg=n(T,"LI",{});var sFe=s(rg);oH=n(sFe,"STRONG",{});var V7r=s(oH);Aqe=r(V7r,"vilt"),V7r.forEach(t),Lqe=r(sFe," \u2014 "),N7=n(sFe,"A",{href:!0});var z7r=s(N7);Bqe=r(z7r,"ViltConfig"),z7r.forEach(t),xqe=r(sFe," (ViLT model)"),sFe.forEach(t),kqe=i(T),tg=n(T,"LI",{});var lFe=s(tg);rH=n(lFe,"STRONG",{});var W7r=s(rH);Rqe=r(W7r,"vision-encoder-decoder"),W7r.forEach(t),Sqe=r(lFe," \u2014 "),q7=n(lFe,"A",{href:!0});var Q7r=s(q7);Pqe=r(Q7r,"VisionEncoderDecoderConfig"),Q7r.forEach(t),$qe=r(lFe," (Vision Encoder decoder model)"),lFe.forEach(t),Iqe=i(T),ag=n(T,"LI",{});var iFe=s(ag);tH=n(iFe,"STRONG",{});var H7r=s(tH);Dqe=r(H7r,"vision-text-dual-encoder"),H7r.forEach(t),jqe=r(iFe," \u2014 "),G7=n(iFe,"A",{href:!0});var U7r=s(G7);Nqe=r(U7r,"VisionTextDualEncoderConfig"),U7r.forEach(t),qqe=r(iFe," (VisionTextDualEncoder model)"),iFe.forEach(t),Gqe=i(T),ng=n(T,"LI",{});var dFe=s(ng);aH=n(dFe,"STRONG",{});var J7r=s(aH);Oqe=r(J7r,"visual_bert"),J7r.forEach(t),Xqe=r(dFe," \u2014 "),O7=n(dFe,"A",{href:!0});var Y7r=s(O7);Vqe=r(Y7r,"VisualBertConfig"),Y7r.forEach(t),zqe=r(dFe," (VisualBert model)"),dFe.forEach(t),Wqe=i(T),sg=n(T,"LI",{});var cFe=s(sg);nH=n(cFe,"STRONG",{});var K7r=s(nH);Qqe=r(K7r,"vit"),K7r.forEach(t),Hqe=r(cFe," \u2014 "),X7=n(cFe,"A",{href:!0});var Z7r=s(X7);Uqe=r(Z7r,"ViTConfig"),Z7r.forEach(t),Jqe=r(cFe," (ViT model)"),cFe.forEach(t),Yqe=i(T),lg=n(T,"LI",{});var fFe=s(lg);sH=n(fFe,"STRONG",{});var eBr=s(sH);Kqe=r(eBr,"vit_mae"),eBr.forEach(t),Zqe=r(fFe," \u2014 "),V7=n(fFe,"A",{href:!0});var oBr=s(V7);eGe=r(oBr,"ViTMAEConfig"),oBr.forEach(t),oGe=r(fFe," (ViTMAE model)"),fFe.forEach(t),rGe=i(T),ig=n(T,"LI",{});var mFe=s(ig);lH=n(mFe,"STRONG",{});var rBr=s(lH);tGe=r(rBr,"wav2vec2"),rBr.forEach(t),aGe=r(mFe," \u2014 "),z7=n(mFe,"A",{href:!0});var tBr=s(z7);nGe=r(tBr,"Wav2Vec2Config"),tBr.forEach(t),sGe=r(mFe," (Wav2Vec2 model)"),mFe.forEach(t),lGe=i(T),dg=n(T,"LI",{});var gFe=s(dg);iH=n(gFe,"STRONG",{});var aBr=s(iH);iGe=r(aBr,"wavlm"),aBr.forEach(t),dGe=r(gFe," \u2014 "),W7=n(gFe,"A",{href:!0});var nBr=s(W7);cGe=r(nBr,"WavLMConfig"),nBr.forEach(t),fGe=r(gFe," (WavLM model)"),gFe.forEach(t),mGe=i(T),cg=n(T,"LI",{});var hFe=s(cg);dH=n(hFe,"STRONG",{});var sBr=s(dH);gGe=r(sBr,"xglm"),sBr.forEach(t),hGe=r(hFe," \u2014 "),Q7=n(hFe,"A",{href:!0});var lBr=s(Q7);pGe=r(lBr,"XGLMConfig"),lBr.forEach(t),_Ge=r(hFe," (XGLM model)"),hFe.forEach(t),uGe=i(T),fg=n(T,"LI",{});var pFe=s(fg);cH=n(pFe,"STRONG",{});var iBr=s(cH);bGe=r(iBr,"xlm"),iBr.forEach(t),vGe=r(pFe," \u2014 "),H7=n(pFe,"A",{href:!0});var dBr=s(H7);TGe=r(dBr,"XLMConfig"),dBr.forEach(t),FGe=r(pFe," (XLM model)"),pFe.forEach(t),CGe=i(T),mg=n(T,"LI",{});var _Fe=s(mg);fH=n(_Fe,"STRONG",{});var cBr=s(fH);MGe=r(cBr,"xlm-prophetnet"),cBr.forEach(t),EGe=r(_Fe," \u2014 "),U7=n(_Fe,"A",{href:!0});var fBr=s(U7);yGe=r(fBr,"XLMProphetNetConfig"),fBr.forEach(t),wGe=r(_Fe," (XLMProphetNet model)"),_Fe.forEach(t),AGe=i(T),gg=n(T,"LI",{});var uFe=s(gg);mH=n(uFe,"STRONG",{});var mBr=s(mH);LGe=r(mBr,"xlm-roberta"),mBr.forEach(t),BGe=r(uFe," \u2014 "),J7=n(uFe,"A",{href:!0});var gBr=s(J7);xGe=r(gBr,"XLMRobertaConfig"),gBr.forEach(t),kGe=r(uFe," (XLM-RoBERTa model)"),uFe.forEach(t),RGe=i(T),hg=n(T,"LI",{});var bFe=s(hg);gH=n(bFe,"STRONG",{});var hBr=s(gH);SGe=r(hBr,"xlm-roberta-xl"),hBr.forEach(t),PGe=r(bFe," \u2014 "),Y7=n(bFe,"A",{href:!0});var pBr=s(Y7);$Ge=r(pBr,"XLMRobertaXLConfig"),pBr.forEach(t),IGe=r(bFe," (XLM-RoBERTa-XL model)"),bFe.forEach(t),DGe=i(T),pg=n(T,"LI",{});var vFe=s(pg);hH=n(vFe,"STRONG",{});var _Br=s(hH);jGe=r(_Br,"xlnet"),_Br.forEach(t),NGe=r(vFe," \u2014 "),K7=n(vFe,"A",{href:!0});var uBr=s(K7);qGe=r(uBr,"XLNetConfig"),uBr.forEach(t),GGe=r(vFe," (XLNet model)"),vFe.forEach(t),OGe=i(T),_g=n(T,"LI",{});var TFe=s(_g);pH=n(TFe,"STRONG",{});var bBr=s(pH);XGe=r(bBr,"yoso"),bBr.forEach(t),VGe=r(TFe," \u2014 "),Z7=n(TFe,"A",{href:!0});var vBr=s(Z7);zGe=r(vBr,"YosoConfig"),vBr.forEach(t),WGe=r(TFe," (YOSO model)"),TFe.forEach(t),T.forEach(t),QGe=i(ia),_H=n(ia,"P",{});var TBr=s(_H);HGe=r(TBr,"Examples:"),TBr.forEach(t),UGe=i(ia),m(SE.$$.fragment,ia),ia.forEach(t),JGe=i(Is),ug=n(Is,"DIV",{class:!0});var Rxe=s(ug);m(PE.$$.fragment,Rxe),YGe=i(Rxe),uH=n(Rxe,"P",{});var FBr=s(uH);KGe=r(FBr,"Register a new configuration for this class."),FBr.forEach(t),Rxe.forEach(t),Is.forEach(t),R7e=i(c),ji=n(c,"H2",{class:!0});var Sxe=s(ji);bg=n(Sxe,"A",{id:!0,class:!0,href:!0});var CBr=s(bg);bH=n(CBr,"SPAN",{});var MBr=s(bH);m($E.$$.fragment,MBr),MBr.forEach(t),CBr.forEach(t),ZGe=i(Sxe),vH=n(Sxe,"SPAN",{});var EBr=s(vH);eOe=r(EBr,"AutoTokenizer"),EBr.forEach(t),Sxe.forEach(t),S7e=i(c),Vo=n(c,"DIV",{class:!0});var Ds=s(Vo);m(IE.$$.fragment,Ds),oOe=i(Ds),DE=n(Ds,"P",{});var Pxe=s(DE);rOe=r(Pxe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),eB=n(Pxe,"A",{href:!0});var yBr=s(eB);tOe=r(yBr,"AutoTokenizer.from_pretrained()"),yBr.forEach(t),aOe=r(Pxe," class method."),Pxe.forEach(t),nOe=i(Ds),jE=n(Ds,"P",{});var $xe=s(jE);sOe=r($xe,"This class cannot be instantiated directly using "),TH=n($xe,"CODE",{});var wBr=s(TH);lOe=r(wBr,"__init__()"),wBr.forEach(t),iOe=r($xe," (throws an error)."),$xe.forEach(t),dOe=i(Ds),mo=n(Ds,"DIV",{class:!0});var da=s(mo);m(NE.$$.fragment,da),cOe=i(da),FH=n(da,"P",{});var ABr=s(FH);fOe=r(ABr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ABr.forEach(t),mOe=i(da),Da=n(da,"P",{});var EM=s(Da);gOe=r(EM,"The tokenizer class to instantiate is selected based on the "),CH=n(EM,"CODE",{});var LBr=s(CH);hOe=r(LBr,"model_type"),LBr.forEach(t),pOe=r(EM,` property of the config object (either
passed as an argument or loaded from `),MH=n(EM,"CODE",{});var BBr=s(MH);_Oe=r(BBr,"pretrained_model_name_or_path"),BBr.forEach(t),uOe=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EH=n(EM,"CODE",{});var xBr=s(EH);bOe=r(xBr,"pretrained_model_name_or_path"),xBr.forEach(t),vOe=r(EM,":"),EM.forEach(t),TOe=i(da),M=n(da,"UL",{});var y=s(M);Gn=n(y,"LI",{});var mL=s(Gn);yH=n(mL,"STRONG",{});var kBr=s(yH);FOe=r(kBr,"albert"),kBr.forEach(t),COe=r(mL," \u2014 "),oB=n(mL,"A",{href:!0});var RBr=s(oB);MOe=r(RBr,"AlbertTokenizer"),RBr.forEach(t),EOe=r(mL," or "),rB=n(mL,"A",{href:!0});var SBr=s(rB);yOe=r(SBr,"AlbertTokenizerFast"),SBr.forEach(t),wOe=r(mL," (ALBERT model)"),mL.forEach(t),AOe=i(y),On=n(y,"LI",{});var gL=s(On);wH=n(gL,"STRONG",{});var PBr=s(wH);LOe=r(PBr,"bart"),PBr.forEach(t),BOe=r(gL," \u2014 "),tB=n(gL,"A",{href:!0});var $Br=s(tB);xOe=r($Br,"BartTokenizer"),$Br.forEach(t),kOe=r(gL," or "),aB=n(gL,"A",{href:!0});var IBr=s(aB);ROe=r(IBr,"BartTokenizerFast"),IBr.forEach(t),SOe=r(gL," (BART model)"),gL.forEach(t),POe=i(y),Xn=n(y,"LI",{});var hL=s(Xn);AH=n(hL,"STRONG",{});var DBr=s(AH);$Oe=r(DBr,"barthez"),DBr.forEach(t),IOe=r(hL," \u2014 "),nB=n(hL,"A",{href:!0});var jBr=s(nB);DOe=r(jBr,"BarthezTokenizer"),jBr.forEach(t),jOe=r(hL," or "),sB=n(hL,"A",{href:!0});var NBr=s(sB);NOe=r(NBr,"BarthezTokenizerFast"),NBr.forEach(t),qOe=r(hL," (BARThez model)"),hL.forEach(t),GOe=i(y),vg=n(y,"LI",{});var FFe=s(vg);LH=n(FFe,"STRONG",{});var qBr=s(LH);OOe=r(qBr,"bartpho"),qBr.forEach(t),XOe=r(FFe," \u2014 "),lB=n(FFe,"A",{href:!0});var GBr=s(lB);VOe=r(GBr,"BartphoTokenizer"),GBr.forEach(t),zOe=r(FFe," (BARTpho model)"),FFe.forEach(t),WOe=i(y),Vn=n(y,"LI",{});var pL=s(Vn);BH=n(pL,"STRONG",{});var OBr=s(BH);QOe=r(OBr,"bert"),OBr.forEach(t),HOe=r(pL," \u2014 "),iB=n(pL,"A",{href:!0});var XBr=s(iB);UOe=r(XBr,"BertTokenizer"),XBr.forEach(t),JOe=r(pL," or "),dB=n(pL,"A",{href:!0});var VBr=s(dB);YOe=r(VBr,"BertTokenizerFast"),VBr.forEach(t),KOe=r(pL," (BERT model)"),pL.forEach(t),ZOe=i(y),Tg=n(y,"LI",{});var CFe=s(Tg);xH=n(CFe,"STRONG",{});var zBr=s(xH);eXe=r(zBr,"bert-generation"),zBr.forEach(t),oXe=r(CFe," \u2014 "),cB=n(CFe,"A",{href:!0});var WBr=s(cB);rXe=r(WBr,"BertGenerationTokenizer"),WBr.forEach(t),tXe=r(CFe," (Bert Generation model)"),CFe.forEach(t),aXe=i(y),Fg=n(y,"LI",{});var MFe=s(Fg);kH=n(MFe,"STRONG",{});var QBr=s(kH);nXe=r(QBr,"bert-japanese"),QBr.forEach(t),sXe=r(MFe," \u2014 "),fB=n(MFe,"A",{href:!0});var HBr=s(fB);lXe=r(HBr,"BertJapaneseTokenizer"),HBr.forEach(t),iXe=r(MFe," (BertJapanese model)"),MFe.forEach(t),dXe=i(y),Cg=n(y,"LI",{});var EFe=s(Cg);RH=n(EFe,"STRONG",{});var UBr=s(RH);cXe=r(UBr,"bertweet"),UBr.forEach(t),fXe=r(EFe," \u2014 "),mB=n(EFe,"A",{href:!0});var JBr=s(mB);mXe=r(JBr,"BertweetTokenizer"),JBr.forEach(t),gXe=r(EFe," (Bertweet model)"),EFe.forEach(t),hXe=i(y),zn=n(y,"LI",{});var _L=s(zn);SH=n(_L,"STRONG",{});var YBr=s(SH);pXe=r(YBr,"big_bird"),YBr.forEach(t),_Xe=r(_L," \u2014 "),gB=n(_L,"A",{href:!0});var KBr=s(gB);uXe=r(KBr,"BigBirdTokenizer"),KBr.forEach(t),bXe=r(_L," or "),hB=n(_L,"A",{href:!0});var ZBr=s(hB);vXe=r(ZBr,"BigBirdTokenizerFast"),ZBr.forEach(t),TXe=r(_L," (BigBird model)"),_L.forEach(t),FXe=i(y),Wn=n(y,"LI",{});var uL=s(Wn);PH=n(uL,"STRONG",{});var exr=s(PH);CXe=r(exr,"bigbird_pegasus"),exr.forEach(t),MXe=r(uL," \u2014 "),pB=n(uL,"A",{href:!0});var oxr=s(pB);EXe=r(oxr,"PegasusTokenizer"),oxr.forEach(t),yXe=r(uL," or "),_B=n(uL,"A",{href:!0});var rxr=s(_B);wXe=r(rxr,"PegasusTokenizerFast"),rxr.forEach(t),AXe=r(uL," (BigBirdPegasus model)"),uL.forEach(t),LXe=i(y),Qn=n(y,"LI",{});var bL=s(Qn);$H=n(bL,"STRONG",{});var txr=s($H);BXe=r(txr,"blenderbot"),txr.forEach(t),xXe=r(bL," \u2014 "),uB=n(bL,"A",{href:!0});var axr=s(uB);kXe=r(axr,"BlenderbotTokenizer"),axr.forEach(t),RXe=r(bL," or "),bB=n(bL,"A",{href:!0});var nxr=s(bB);SXe=r(nxr,"BlenderbotTokenizerFast"),nxr.forEach(t),PXe=r(bL," (Blenderbot model)"),bL.forEach(t),$Xe=i(y),Mg=n(y,"LI",{});var yFe=s(Mg);IH=n(yFe,"STRONG",{});var sxr=s(IH);IXe=r(sxr,"blenderbot-small"),sxr.forEach(t),DXe=r(yFe," \u2014 "),vB=n(yFe,"A",{href:!0});var lxr=s(vB);jXe=r(lxr,"BlenderbotSmallTokenizer"),lxr.forEach(t),NXe=r(yFe," (BlenderbotSmall model)"),yFe.forEach(t),qXe=i(y),Eg=n(y,"LI",{});var wFe=s(Eg);DH=n(wFe,"STRONG",{});var ixr=s(DH);GXe=r(ixr,"byt5"),ixr.forEach(t),OXe=r(wFe," \u2014 "),TB=n(wFe,"A",{href:!0});var dxr=s(TB);XXe=r(dxr,"ByT5Tokenizer"),dxr.forEach(t),VXe=r(wFe," (ByT5 model)"),wFe.forEach(t),zXe=i(y),Hn=n(y,"LI",{});var vL=s(Hn);jH=n(vL,"STRONG",{});var cxr=s(jH);WXe=r(cxr,"camembert"),cxr.forEach(t),QXe=r(vL," \u2014 "),FB=n(vL,"A",{href:!0});var fxr=s(FB);HXe=r(fxr,"CamembertTokenizer"),fxr.forEach(t),UXe=r(vL," or "),CB=n(vL,"A",{href:!0});var mxr=s(CB);JXe=r(mxr,"CamembertTokenizerFast"),mxr.forEach(t),YXe=r(vL," (CamemBERT model)"),vL.forEach(t),KXe=i(y),yg=n(y,"LI",{});var AFe=s(yg);NH=n(AFe,"STRONG",{});var gxr=s(NH);ZXe=r(gxr,"canine"),gxr.forEach(t),eVe=r(AFe," \u2014 "),MB=n(AFe,"A",{href:!0});var hxr=s(MB);oVe=r(hxr,"CanineTokenizer"),hxr.forEach(t),rVe=r(AFe," (Canine model)"),AFe.forEach(t),tVe=i(y),Un=n(y,"LI",{});var TL=s(Un);qH=n(TL,"STRONG",{});var pxr=s(qH);aVe=r(pxr,"clip"),pxr.forEach(t),nVe=r(TL," \u2014 "),EB=n(TL,"A",{href:!0});var _xr=s(EB);sVe=r(_xr,"CLIPTokenizer"),_xr.forEach(t),lVe=r(TL," or "),yB=n(TL,"A",{href:!0});var uxr=s(yB);iVe=r(uxr,"CLIPTokenizerFast"),uxr.forEach(t),dVe=r(TL," (CLIP model)"),TL.forEach(t),cVe=i(y),Jn=n(y,"LI",{});var FL=s(Jn);GH=n(FL,"STRONG",{});var bxr=s(GH);fVe=r(bxr,"convbert"),bxr.forEach(t),mVe=r(FL," \u2014 "),wB=n(FL,"A",{href:!0});var vxr=s(wB);gVe=r(vxr,"ConvBertTokenizer"),vxr.forEach(t),hVe=r(FL," or "),AB=n(FL,"A",{href:!0});var Txr=s(AB);pVe=r(Txr,"ConvBertTokenizerFast"),Txr.forEach(t),_Ve=r(FL," (ConvBERT model)"),FL.forEach(t),uVe=i(y),Yn=n(y,"LI",{});var CL=s(Yn);OH=n(CL,"STRONG",{});var Fxr=s(OH);bVe=r(Fxr,"cpm"),Fxr.forEach(t),vVe=r(CL," \u2014 "),LB=n(CL,"A",{href:!0});var Cxr=s(LB);TVe=r(Cxr,"CpmTokenizer"),Cxr.forEach(t),FVe=r(CL," or "),XH=n(CL,"CODE",{});var Mxr=s(XH);CVe=r(Mxr,"CpmTokenizerFast"),Mxr.forEach(t),MVe=r(CL," (CPM model)"),CL.forEach(t),EVe=i(y),wg=n(y,"LI",{});var LFe=s(wg);VH=n(LFe,"STRONG",{});var Exr=s(VH);yVe=r(Exr,"ctrl"),Exr.forEach(t),wVe=r(LFe," \u2014 "),BB=n(LFe,"A",{href:!0});var yxr=s(BB);AVe=r(yxr,"CTRLTokenizer"),yxr.forEach(t),LVe=r(LFe," (CTRL model)"),LFe.forEach(t),BVe=i(y),Kn=n(y,"LI",{});var ML=s(Kn);zH=n(ML,"STRONG",{});var wxr=s(zH);xVe=r(wxr,"deberta"),wxr.forEach(t),kVe=r(ML," \u2014 "),xB=n(ML,"A",{href:!0});var Axr=s(xB);RVe=r(Axr,"DebertaTokenizer"),Axr.forEach(t),SVe=r(ML," or "),kB=n(ML,"A",{href:!0});var Lxr=s(kB);PVe=r(Lxr,"DebertaTokenizerFast"),Lxr.forEach(t),$Ve=r(ML," (DeBERTa model)"),ML.forEach(t),IVe=i(y),Ag=n(y,"LI",{});var BFe=s(Ag);WH=n(BFe,"STRONG",{});var Bxr=s(WH);DVe=r(Bxr,"deberta-v2"),Bxr.forEach(t),jVe=r(BFe," \u2014 "),RB=n(BFe,"A",{href:!0});var xxr=s(RB);NVe=r(xxr,"DebertaV2Tokenizer"),xxr.forEach(t),qVe=r(BFe," (DeBERTa-v2 model)"),BFe.forEach(t),GVe=i(y),Zn=n(y,"LI",{});var EL=s(Zn);QH=n(EL,"STRONG",{});var kxr=s(QH);OVe=r(kxr,"distilbert"),kxr.forEach(t),XVe=r(EL," \u2014 "),SB=n(EL,"A",{href:!0});var Rxr=s(SB);VVe=r(Rxr,"DistilBertTokenizer"),Rxr.forEach(t),zVe=r(EL," or "),PB=n(EL,"A",{href:!0});var Sxr=s(PB);WVe=r(Sxr,"DistilBertTokenizerFast"),Sxr.forEach(t),QVe=r(EL," (DistilBERT model)"),EL.forEach(t),HVe=i(y),es=n(y,"LI",{});var yL=s(es);HH=n(yL,"STRONG",{});var Pxr=s(HH);UVe=r(Pxr,"dpr"),Pxr.forEach(t),JVe=r(yL," \u2014 "),$B=n(yL,"A",{href:!0});var $xr=s($B);YVe=r($xr,"DPRQuestionEncoderTokenizer"),$xr.forEach(t),KVe=r(yL," or "),IB=n(yL,"A",{href:!0});var Ixr=s(IB);ZVe=r(Ixr,"DPRQuestionEncoderTokenizerFast"),Ixr.forEach(t),eze=r(yL," (DPR model)"),yL.forEach(t),oze=i(y),os=n(y,"LI",{});var wL=s(os);UH=n(wL,"STRONG",{});var Dxr=s(UH);rze=r(Dxr,"electra"),Dxr.forEach(t),tze=r(wL," \u2014 "),DB=n(wL,"A",{href:!0});var jxr=s(DB);aze=r(jxr,"ElectraTokenizer"),jxr.forEach(t),nze=r(wL," or "),jB=n(wL,"A",{href:!0});var Nxr=s(jB);sze=r(Nxr,"ElectraTokenizerFast"),Nxr.forEach(t),lze=r(wL," (ELECTRA model)"),wL.forEach(t),ize=i(y),Lg=n(y,"LI",{});var xFe=s(Lg);JH=n(xFe,"STRONG",{});var qxr=s(JH);dze=r(qxr,"flaubert"),qxr.forEach(t),cze=r(xFe," \u2014 "),NB=n(xFe,"A",{href:!0});var Gxr=s(NB);fze=r(Gxr,"FlaubertTokenizer"),Gxr.forEach(t),mze=r(xFe," (FlauBERT model)"),xFe.forEach(t),gze=i(y),rs=n(y,"LI",{});var AL=s(rs);YH=n(AL,"STRONG",{});var Oxr=s(YH);hze=r(Oxr,"fnet"),Oxr.forEach(t),pze=r(AL," \u2014 "),qB=n(AL,"A",{href:!0});var Xxr=s(qB);_ze=r(Xxr,"FNetTokenizer"),Xxr.forEach(t),uze=r(AL," or "),GB=n(AL,"A",{href:!0});var Vxr=s(GB);bze=r(Vxr,"FNetTokenizerFast"),Vxr.forEach(t),vze=r(AL," (FNet model)"),AL.forEach(t),Tze=i(y),Bg=n(y,"LI",{});var kFe=s(Bg);KH=n(kFe,"STRONG",{});var zxr=s(KH);Fze=r(zxr,"fsmt"),zxr.forEach(t),Cze=r(kFe," \u2014 "),OB=n(kFe,"A",{href:!0});var Wxr=s(OB);Mze=r(Wxr,"FSMTTokenizer"),Wxr.forEach(t),Eze=r(kFe," (FairSeq Machine-Translation model)"),kFe.forEach(t),yze=i(y),ts=n(y,"LI",{});var LL=s(ts);ZH=n(LL,"STRONG",{});var Qxr=s(ZH);wze=r(Qxr,"funnel"),Qxr.forEach(t),Aze=r(LL," \u2014 "),XB=n(LL,"A",{href:!0});var Hxr=s(XB);Lze=r(Hxr,"FunnelTokenizer"),Hxr.forEach(t),Bze=r(LL," or "),VB=n(LL,"A",{href:!0});var Uxr=s(VB);xze=r(Uxr,"FunnelTokenizerFast"),Uxr.forEach(t),kze=r(LL," (Funnel Transformer model)"),LL.forEach(t),Rze=i(y),as=n(y,"LI",{});var BL=s(as);eU=n(BL,"STRONG",{});var Jxr=s(eU);Sze=r(Jxr,"gpt2"),Jxr.forEach(t),Pze=r(BL," \u2014 "),zB=n(BL,"A",{href:!0});var Yxr=s(zB);$ze=r(Yxr,"GPT2Tokenizer"),Yxr.forEach(t),Ize=r(BL," or "),WB=n(BL,"A",{href:!0});var Kxr=s(WB);Dze=r(Kxr,"GPT2TokenizerFast"),Kxr.forEach(t),jze=r(BL," (OpenAI GPT-2 model)"),BL.forEach(t),Nze=i(y),ns=n(y,"LI",{});var xL=s(ns);oU=n(xL,"STRONG",{});var Zxr=s(oU);qze=r(Zxr,"gpt_neo"),Zxr.forEach(t),Gze=r(xL," \u2014 "),QB=n(xL,"A",{href:!0});var ekr=s(QB);Oze=r(ekr,"GPT2Tokenizer"),ekr.forEach(t),Xze=r(xL," or "),HB=n(xL,"A",{href:!0});var okr=s(HB);Vze=r(okr,"GPT2TokenizerFast"),okr.forEach(t),zze=r(xL," (GPT Neo model)"),xL.forEach(t),Wze=i(y),ss=n(y,"LI",{});var kL=s(ss);rU=n(kL,"STRONG",{});var rkr=s(rU);Qze=r(rkr,"herbert"),rkr.forEach(t),Hze=r(kL," \u2014 "),UB=n(kL,"A",{href:!0});var tkr=s(UB);Uze=r(tkr,"HerbertTokenizer"),tkr.forEach(t),Jze=r(kL," or "),JB=n(kL,"A",{href:!0});var akr=s(JB);Yze=r(akr,"HerbertTokenizerFast"),akr.forEach(t),Kze=r(kL," (HerBERT model)"),kL.forEach(t),Zze=i(y),xg=n(y,"LI",{});var RFe=s(xg);tU=n(RFe,"STRONG",{});var nkr=s(tU);eWe=r(nkr,"hubert"),nkr.forEach(t),oWe=r(RFe," \u2014 "),YB=n(RFe,"A",{href:!0});var skr=s(YB);rWe=r(skr,"Wav2Vec2CTCTokenizer"),skr.forEach(t),tWe=r(RFe," (Hubert model)"),RFe.forEach(t),aWe=i(y),ls=n(y,"LI",{});var RL=s(ls);aU=n(RL,"STRONG",{});var lkr=s(aU);nWe=r(lkr,"ibert"),lkr.forEach(t),sWe=r(RL," \u2014 "),KB=n(RL,"A",{href:!0});var ikr=s(KB);lWe=r(ikr,"RobertaTokenizer"),ikr.forEach(t),iWe=r(RL," or "),ZB=n(RL,"A",{href:!0});var dkr=s(ZB);dWe=r(dkr,"RobertaTokenizerFast"),dkr.forEach(t),cWe=r(RL," (I-BERT model)"),RL.forEach(t),fWe=i(y),is=n(y,"LI",{});var SL=s(is);nU=n(SL,"STRONG",{});var ckr=s(nU);mWe=r(ckr,"layoutlm"),ckr.forEach(t),gWe=r(SL," \u2014 "),ex=n(SL,"A",{href:!0});var fkr=s(ex);hWe=r(fkr,"LayoutLMTokenizer"),fkr.forEach(t),pWe=r(SL," or "),ox=n(SL,"A",{href:!0});var mkr=s(ox);_We=r(mkr,"LayoutLMTokenizerFast"),mkr.forEach(t),uWe=r(SL," (LayoutLM model)"),SL.forEach(t),bWe=i(y),ds=n(y,"LI",{});var PL=s(ds);sU=n(PL,"STRONG",{});var gkr=s(sU);vWe=r(gkr,"layoutlmv2"),gkr.forEach(t),TWe=r(PL," \u2014 "),rx=n(PL,"A",{href:!0});var hkr=s(rx);FWe=r(hkr,"LayoutLMv2Tokenizer"),hkr.forEach(t),CWe=r(PL," or "),tx=n(PL,"A",{href:!0});var pkr=s(tx);MWe=r(pkr,"LayoutLMv2TokenizerFast"),pkr.forEach(t),EWe=r(PL," (LayoutLMv2 model)"),PL.forEach(t),yWe=i(y),cs=n(y,"LI",{});var $L=s(cs);lU=n($L,"STRONG",{});var _kr=s(lU);wWe=r(_kr,"layoutxlm"),_kr.forEach(t),AWe=r($L," \u2014 "),ax=n($L,"A",{href:!0});var ukr=s(ax);LWe=r(ukr,"LayoutXLMTokenizer"),ukr.forEach(t),BWe=r($L," or "),nx=n($L,"A",{href:!0});var bkr=s(nx);xWe=r(bkr,"LayoutXLMTokenizerFast"),bkr.forEach(t),kWe=r($L," (LayoutXLM model)"),$L.forEach(t),RWe=i(y),fs=n(y,"LI",{});var IL=s(fs);iU=n(IL,"STRONG",{});var vkr=s(iU);SWe=r(vkr,"led"),vkr.forEach(t),PWe=r(IL," \u2014 "),sx=n(IL,"A",{href:!0});var Tkr=s(sx);$We=r(Tkr,"LEDTokenizer"),Tkr.forEach(t),IWe=r(IL," or "),lx=n(IL,"A",{href:!0});var Fkr=s(lx);DWe=r(Fkr,"LEDTokenizerFast"),Fkr.forEach(t),jWe=r(IL," (LED model)"),IL.forEach(t),NWe=i(y),ms=n(y,"LI",{});var DL=s(ms);dU=n(DL,"STRONG",{});var Ckr=s(dU);qWe=r(Ckr,"longformer"),Ckr.forEach(t),GWe=r(DL," \u2014 "),ix=n(DL,"A",{href:!0});var Mkr=s(ix);OWe=r(Mkr,"LongformerTokenizer"),Mkr.forEach(t),XWe=r(DL," or "),dx=n(DL,"A",{href:!0});var Ekr=s(dx);VWe=r(Ekr,"LongformerTokenizerFast"),Ekr.forEach(t),zWe=r(DL," (Longformer model)"),DL.forEach(t),WWe=i(y),kg=n(y,"LI",{});var SFe=s(kg);cU=n(SFe,"STRONG",{});var ykr=s(cU);QWe=r(ykr,"luke"),ykr.forEach(t),HWe=r(SFe," \u2014 "),cx=n(SFe,"A",{href:!0});var wkr=s(cx);UWe=r(wkr,"LukeTokenizer"),wkr.forEach(t),JWe=r(SFe," (LUKE model)"),SFe.forEach(t),YWe=i(y),gs=n(y,"LI",{});var jL=s(gs);fU=n(jL,"STRONG",{});var Akr=s(fU);KWe=r(Akr,"lxmert"),Akr.forEach(t),ZWe=r(jL," \u2014 "),fx=n(jL,"A",{href:!0});var Lkr=s(fx);eQe=r(Lkr,"LxmertTokenizer"),Lkr.forEach(t),oQe=r(jL," or "),mx=n(jL,"A",{href:!0});var Bkr=s(mx);rQe=r(Bkr,"LxmertTokenizerFast"),Bkr.forEach(t),tQe=r(jL," (LXMERT model)"),jL.forEach(t),aQe=i(y),Rg=n(y,"LI",{});var PFe=s(Rg);mU=n(PFe,"STRONG",{});var xkr=s(mU);nQe=r(xkr,"m2m_100"),xkr.forEach(t),sQe=r(PFe," \u2014 "),gx=n(PFe,"A",{href:!0});var kkr=s(gx);lQe=r(kkr,"M2M100Tokenizer"),kkr.forEach(t),iQe=r(PFe," (M2M100 model)"),PFe.forEach(t),dQe=i(y),Sg=n(y,"LI",{});var $Fe=s(Sg);gU=n($Fe,"STRONG",{});var Rkr=s(gU);cQe=r(Rkr,"marian"),Rkr.forEach(t),fQe=r($Fe," \u2014 "),hx=n($Fe,"A",{href:!0});var Skr=s(hx);mQe=r(Skr,"MarianTokenizer"),Skr.forEach(t),gQe=r($Fe," (Marian model)"),$Fe.forEach(t),hQe=i(y),hs=n(y,"LI",{});var NL=s(hs);hU=n(NL,"STRONG",{});var Pkr=s(hU);pQe=r(Pkr,"mbart"),Pkr.forEach(t),_Qe=r(NL," \u2014 "),px=n(NL,"A",{href:!0});var $kr=s(px);uQe=r($kr,"MBartTokenizer"),$kr.forEach(t),bQe=r(NL," or "),_x=n(NL,"A",{href:!0});var Ikr=s(_x);vQe=r(Ikr,"MBartTokenizerFast"),Ikr.forEach(t),TQe=r(NL," (mBART model)"),NL.forEach(t),FQe=i(y),ps=n(y,"LI",{});var qL=s(ps);pU=n(qL,"STRONG",{});var Dkr=s(pU);CQe=r(Dkr,"mbart50"),Dkr.forEach(t),MQe=r(qL," \u2014 "),ux=n(qL,"A",{href:!0});var jkr=s(ux);EQe=r(jkr,"MBart50Tokenizer"),jkr.forEach(t),yQe=r(qL," or "),bx=n(qL,"A",{href:!0});var Nkr=s(bx);wQe=r(Nkr,"MBart50TokenizerFast"),Nkr.forEach(t),AQe=r(qL," (mBART-50 model)"),qL.forEach(t),LQe=i(y),Pg=n(y,"LI",{});var IFe=s(Pg);_U=n(IFe,"STRONG",{});var qkr=s(_U);BQe=r(qkr,"mluke"),qkr.forEach(t),xQe=r(IFe," \u2014 "),vx=n(IFe,"A",{href:!0});var Gkr=s(vx);kQe=r(Gkr,"MLukeTokenizer"),Gkr.forEach(t),RQe=r(IFe," (mLUKE model)"),IFe.forEach(t),SQe=i(y),_s=n(y,"LI",{});var GL=s(_s);uU=n(GL,"STRONG",{});var Okr=s(uU);PQe=r(Okr,"mobilebert"),Okr.forEach(t),$Qe=r(GL," \u2014 "),Tx=n(GL,"A",{href:!0});var Xkr=s(Tx);IQe=r(Xkr,"MobileBertTokenizer"),Xkr.forEach(t),DQe=r(GL," or "),Fx=n(GL,"A",{href:!0});var Vkr=s(Fx);jQe=r(Vkr,"MobileBertTokenizerFast"),Vkr.forEach(t),NQe=r(GL," (MobileBERT model)"),GL.forEach(t),qQe=i(y),us=n(y,"LI",{});var OL=s(us);bU=n(OL,"STRONG",{});var zkr=s(bU);GQe=r(zkr,"mpnet"),zkr.forEach(t),OQe=r(OL," \u2014 "),Cx=n(OL,"A",{href:!0});var Wkr=s(Cx);XQe=r(Wkr,"MPNetTokenizer"),Wkr.forEach(t),VQe=r(OL," or "),Mx=n(OL,"A",{href:!0});var Qkr=s(Mx);zQe=r(Qkr,"MPNetTokenizerFast"),Qkr.forEach(t),WQe=r(OL," (MPNet model)"),OL.forEach(t),QQe=i(y),bs=n(y,"LI",{});var XL=s(bs);vU=n(XL,"STRONG",{});var Hkr=s(vU);HQe=r(Hkr,"mt5"),Hkr.forEach(t),UQe=r(XL," \u2014 "),Ex=n(XL,"A",{href:!0});var Ukr=s(Ex);JQe=r(Ukr,"MT5Tokenizer"),Ukr.forEach(t),YQe=r(XL," or "),yx=n(XL,"A",{href:!0});var Jkr=s(yx);KQe=r(Jkr,"MT5TokenizerFast"),Jkr.forEach(t),ZQe=r(XL," (mT5 model)"),XL.forEach(t),eHe=i(y),vs=n(y,"LI",{});var VL=s(vs);TU=n(VL,"STRONG",{});var Ykr=s(TU);oHe=r(Ykr,"openai-gpt"),Ykr.forEach(t),rHe=r(VL," \u2014 "),wx=n(VL,"A",{href:!0});var Kkr=s(wx);tHe=r(Kkr,"OpenAIGPTTokenizer"),Kkr.forEach(t),aHe=r(VL," or "),Ax=n(VL,"A",{href:!0});var Zkr=s(Ax);nHe=r(Zkr,"OpenAIGPTTokenizerFast"),Zkr.forEach(t),sHe=r(VL," (OpenAI GPT model)"),VL.forEach(t),lHe=i(y),Ts=n(y,"LI",{});var zL=s(Ts);FU=n(zL,"STRONG",{});var eRr=s(FU);iHe=r(eRr,"pegasus"),eRr.forEach(t),dHe=r(zL," \u2014 "),Lx=n(zL,"A",{href:!0});var oRr=s(Lx);cHe=r(oRr,"PegasusTokenizer"),oRr.forEach(t),fHe=r(zL," or "),Bx=n(zL,"A",{href:!0});var rRr=s(Bx);mHe=r(rRr,"PegasusTokenizerFast"),rRr.forEach(t),gHe=r(zL," (Pegasus model)"),zL.forEach(t),hHe=i(y),$g=n(y,"LI",{});var DFe=s($g);CU=n(DFe,"STRONG",{});var tRr=s(CU);pHe=r(tRr,"perceiver"),tRr.forEach(t),_He=r(DFe," \u2014 "),xx=n(DFe,"A",{href:!0});var aRr=s(xx);uHe=r(aRr,"PerceiverTokenizer"),aRr.forEach(t),bHe=r(DFe," (Perceiver model)"),DFe.forEach(t),vHe=i(y),Ig=n(y,"LI",{});var jFe=s(Ig);MU=n(jFe,"STRONG",{});var nRr=s(MU);THe=r(nRr,"phobert"),nRr.forEach(t),FHe=r(jFe," \u2014 "),kx=n(jFe,"A",{href:!0});var sRr=s(kx);CHe=r(sRr,"PhobertTokenizer"),sRr.forEach(t),MHe=r(jFe," (PhoBERT model)"),jFe.forEach(t),EHe=i(y),Dg=n(y,"LI",{});var NFe=s(Dg);EU=n(NFe,"STRONG",{});var lRr=s(EU);yHe=r(lRr,"plbart"),lRr.forEach(t),wHe=r(NFe," \u2014 "),Rx=n(NFe,"A",{href:!0});var iRr=s(Rx);AHe=r(iRr,"PLBartTokenizer"),iRr.forEach(t),LHe=r(NFe," (PLBart model)"),NFe.forEach(t),BHe=i(y),jg=n(y,"LI",{});var qFe=s(jg);yU=n(qFe,"STRONG",{});var dRr=s(yU);xHe=r(dRr,"prophetnet"),dRr.forEach(t),kHe=r(qFe," \u2014 "),Sx=n(qFe,"A",{href:!0});var cRr=s(Sx);RHe=r(cRr,"ProphetNetTokenizer"),cRr.forEach(t),SHe=r(qFe," (ProphetNet model)"),qFe.forEach(t),PHe=i(y),Fs=n(y,"LI",{});var WL=s(Fs);wU=n(WL,"STRONG",{});var fRr=s(wU);$He=r(fRr,"qdqbert"),fRr.forEach(t),IHe=r(WL," \u2014 "),Px=n(WL,"A",{href:!0});var mRr=s(Px);DHe=r(mRr,"BertTokenizer"),mRr.forEach(t),jHe=r(WL," or "),$x=n(WL,"A",{href:!0});var gRr=s($x);NHe=r(gRr,"BertTokenizerFast"),gRr.forEach(t),qHe=r(WL," (QDQBert model)"),WL.forEach(t),GHe=i(y),Ng=n(y,"LI",{});var GFe=s(Ng);AU=n(GFe,"STRONG",{});var hRr=s(AU);OHe=r(hRr,"rag"),hRr.forEach(t),XHe=r(GFe," \u2014 "),Ix=n(GFe,"A",{href:!0});var pRr=s(Ix);VHe=r(pRr,"RagTokenizer"),pRr.forEach(t),zHe=r(GFe," (RAG model)"),GFe.forEach(t),WHe=i(y),Cs=n(y,"LI",{});var QL=s(Cs);LU=n(QL,"STRONG",{});var _Rr=s(LU);QHe=r(_Rr,"reformer"),_Rr.forEach(t),HHe=r(QL," \u2014 "),Dx=n(QL,"A",{href:!0});var uRr=s(Dx);UHe=r(uRr,"ReformerTokenizer"),uRr.forEach(t),JHe=r(QL," or "),jx=n(QL,"A",{href:!0});var bRr=s(jx);YHe=r(bRr,"ReformerTokenizerFast"),bRr.forEach(t),KHe=r(QL," (Reformer model)"),QL.forEach(t),ZHe=i(y),Ms=n(y,"LI",{});var HL=s(Ms);BU=n(HL,"STRONG",{});var vRr=s(BU);eUe=r(vRr,"rembert"),vRr.forEach(t),oUe=r(HL," \u2014 "),Nx=n(HL,"A",{href:!0});var TRr=s(Nx);rUe=r(TRr,"RemBertTokenizer"),TRr.forEach(t),tUe=r(HL," or "),qx=n(HL,"A",{href:!0});var FRr=s(qx);aUe=r(FRr,"RemBertTokenizerFast"),FRr.forEach(t),nUe=r(HL," (RemBERT model)"),HL.forEach(t),sUe=i(y),Es=n(y,"LI",{});var UL=s(Es);xU=n(UL,"STRONG",{});var CRr=s(xU);lUe=r(CRr,"retribert"),CRr.forEach(t),iUe=r(UL," \u2014 "),Gx=n(UL,"A",{href:!0});var MRr=s(Gx);dUe=r(MRr,"RetriBertTokenizer"),MRr.forEach(t),cUe=r(UL," or "),Ox=n(UL,"A",{href:!0});var ERr=s(Ox);fUe=r(ERr,"RetriBertTokenizerFast"),ERr.forEach(t),mUe=r(UL," (RetriBERT model)"),UL.forEach(t),gUe=i(y),ys=n(y,"LI",{});var JL=s(ys);kU=n(JL,"STRONG",{});var yRr=s(kU);hUe=r(yRr,"roberta"),yRr.forEach(t),pUe=r(JL," \u2014 "),Xx=n(JL,"A",{href:!0});var wRr=s(Xx);_Ue=r(wRr,"RobertaTokenizer"),wRr.forEach(t),uUe=r(JL," or "),Vx=n(JL,"A",{href:!0});var ARr=s(Vx);bUe=r(ARr,"RobertaTokenizerFast"),ARr.forEach(t),vUe=r(JL," (RoBERTa model)"),JL.forEach(t),TUe=i(y),ws=n(y,"LI",{});var YL=s(ws);RU=n(YL,"STRONG",{});var LRr=s(RU);FUe=r(LRr,"roformer"),LRr.forEach(t),CUe=r(YL," \u2014 "),zx=n(YL,"A",{href:!0});var BRr=s(zx);MUe=r(BRr,"RoFormerTokenizer"),BRr.forEach(t),EUe=r(YL," or "),Wx=n(YL,"A",{href:!0});var xRr=s(Wx);yUe=r(xRr,"RoFormerTokenizerFast"),xRr.forEach(t),wUe=r(YL," (RoFormer model)"),YL.forEach(t),AUe=i(y),qg=n(y,"LI",{});var OFe=s(qg);SU=n(OFe,"STRONG",{});var kRr=s(SU);LUe=r(kRr,"speech_to_text"),kRr.forEach(t),BUe=r(OFe," \u2014 "),Qx=n(OFe,"A",{href:!0});var RRr=s(Qx);xUe=r(RRr,"Speech2TextTokenizer"),RRr.forEach(t),kUe=r(OFe," (Speech2Text model)"),OFe.forEach(t),RUe=i(y),Gg=n(y,"LI",{});var XFe=s(Gg);PU=n(XFe,"STRONG",{});var SRr=s(PU);SUe=r(SRr,"speech_to_text_2"),SRr.forEach(t),PUe=r(XFe," \u2014 "),Hx=n(XFe,"A",{href:!0});var PRr=s(Hx);$Ue=r(PRr,"Speech2Text2Tokenizer"),PRr.forEach(t),IUe=r(XFe," (Speech2Text2 model)"),XFe.forEach(t),DUe=i(y),As=n(y,"LI",{});var KL=s(As);$U=n(KL,"STRONG",{});var $Rr=s($U);jUe=r($Rr,"splinter"),$Rr.forEach(t),NUe=r(KL," \u2014 "),Ux=n(KL,"A",{href:!0});var IRr=s(Ux);qUe=r(IRr,"SplinterTokenizer"),IRr.forEach(t),GUe=r(KL," or "),Jx=n(KL,"A",{href:!0});var DRr=s(Jx);OUe=r(DRr,"SplinterTokenizerFast"),DRr.forEach(t),XUe=r(KL," (Splinter model)"),KL.forEach(t),VUe=i(y),Ls=n(y,"LI",{});var ZL=s(Ls);IU=n(ZL,"STRONG",{});var jRr=s(IU);zUe=r(jRr,"squeezebert"),jRr.forEach(t),WUe=r(ZL," \u2014 "),Yx=n(ZL,"A",{href:!0});var NRr=s(Yx);QUe=r(NRr,"SqueezeBertTokenizer"),NRr.forEach(t),HUe=r(ZL," or "),Kx=n(ZL,"A",{href:!0});var qRr=s(Kx);UUe=r(qRr,"SqueezeBertTokenizerFast"),qRr.forEach(t),JUe=r(ZL," (SqueezeBERT model)"),ZL.forEach(t),YUe=i(y),Bs=n(y,"LI",{});var e8=s(Bs);DU=n(e8,"STRONG",{});var GRr=s(DU);KUe=r(GRr,"t5"),GRr.forEach(t),ZUe=r(e8," \u2014 "),Zx=n(e8,"A",{href:!0});var ORr=s(Zx);eJe=r(ORr,"T5Tokenizer"),ORr.forEach(t),oJe=r(e8," or "),ek=n(e8,"A",{href:!0});var XRr=s(ek);rJe=r(XRr,"T5TokenizerFast"),XRr.forEach(t),tJe=r(e8," (T5 model)"),e8.forEach(t),aJe=i(y),Og=n(y,"LI",{});var VFe=s(Og);jU=n(VFe,"STRONG",{});var VRr=s(jU);nJe=r(VRr,"tapas"),VRr.forEach(t),sJe=r(VFe," \u2014 "),ok=n(VFe,"A",{href:!0});var zRr=s(ok);lJe=r(zRr,"TapasTokenizer"),zRr.forEach(t),iJe=r(VFe," (TAPAS model)"),VFe.forEach(t),dJe=i(y),Xg=n(y,"LI",{});var zFe=s(Xg);NU=n(zFe,"STRONG",{});var WRr=s(NU);cJe=r(WRr,"transfo-xl"),WRr.forEach(t),fJe=r(zFe," \u2014 "),rk=n(zFe,"A",{href:!0});var QRr=s(rk);mJe=r(QRr,"TransfoXLTokenizer"),QRr.forEach(t),gJe=r(zFe," (Transformer-XL model)"),zFe.forEach(t),hJe=i(y),Vg=n(y,"LI",{});var WFe=s(Vg);qU=n(WFe,"STRONG",{});var HRr=s(qU);pJe=r(HRr,"wav2vec2"),HRr.forEach(t),_Je=r(WFe," \u2014 "),tk=n(WFe,"A",{href:!0});var URr=s(tk);uJe=r(URr,"Wav2Vec2CTCTokenizer"),URr.forEach(t),bJe=r(WFe," (Wav2Vec2 model)"),WFe.forEach(t),vJe=i(y),zg=n(y,"LI",{});var QFe=s(zg);GU=n(QFe,"STRONG",{});var JRr=s(GU);TJe=r(JRr,"wav2vec2_phoneme"),JRr.forEach(t),FJe=r(QFe," \u2014 "),ak=n(QFe,"A",{href:!0});var YRr=s(ak);CJe=r(YRr,"Wav2Vec2PhonemeCTCTokenizer"),YRr.forEach(t),MJe=r(QFe," (Wav2Vec2Phoneme model)"),QFe.forEach(t),EJe=i(y),xs=n(y,"LI",{});var o8=s(xs);OU=n(o8,"STRONG",{});var KRr=s(OU);yJe=r(KRr,"xglm"),KRr.forEach(t),wJe=r(o8," \u2014 "),nk=n(o8,"A",{href:!0});var ZRr=s(nk);AJe=r(ZRr,"XGLMTokenizer"),ZRr.forEach(t),LJe=r(o8," or "),sk=n(o8,"A",{href:!0});var eSr=s(sk);BJe=r(eSr,"XGLMTokenizerFast"),eSr.forEach(t),xJe=r(o8," (XGLM model)"),o8.forEach(t),kJe=i(y),Wg=n(y,"LI",{});var HFe=s(Wg);XU=n(HFe,"STRONG",{});var oSr=s(XU);RJe=r(oSr,"xlm"),oSr.forEach(t),SJe=r(HFe," \u2014 "),lk=n(HFe,"A",{href:!0});var rSr=s(lk);PJe=r(rSr,"XLMTokenizer"),rSr.forEach(t),$Je=r(HFe," (XLM model)"),HFe.forEach(t),IJe=i(y),Qg=n(y,"LI",{});var UFe=s(Qg);VU=n(UFe,"STRONG",{});var tSr=s(VU);DJe=r(tSr,"xlm-prophetnet"),tSr.forEach(t),jJe=r(UFe," \u2014 "),ik=n(UFe,"A",{href:!0});var aSr=s(ik);NJe=r(aSr,"XLMProphetNetTokenizer"),aSr.forEach(t),qJe=r(UFe," (XLMProphetNet model)"),UFe.forEach(t),GJe=i(y),ks=n(y,"LI",{});var r8=s(ks);zU=n(r8,"STRONG",{});var nSr=s(zU);OJe=r(nSr,"xlm-roberta"),nSr.forEach(t),XJe=r(r8," \u2014 "),dk=n(r8,"A",{href:!0});var sSr=s(dk);VJe=r(sSr,"XLMRobertaTokenizer"),sSr.forEach(t),zJe=r(r8," or "),ck=n(r8,"A",{href:!0});var lSr=s(ck);WJe=r(lSr,"XLMRobertaTokenizerFast"),lSr.forEach(t),QJe=r(r8," (XLM-RoBERTa model)"),r8.forEach(t),HJe=i(y),Rs=n(y,"LI",{});var t8=s(Rs);WU=n(t8,"STRONG",{});var iSr=s(WU);UJe=r(iSr,"xlnet"),iSr.forEach(t),JJe=r(t8," \u2014 "),fk=n(t8,"A",{href:!0});var dSr=s(fk);YJe=r(dSr,"XLNetTokenizer"),dSr.forEach(t),KJe=r(t8," or "),mk=n(t8,"A",{href:!0});var cSr=s(mk);ZJe=r(cSr,"XLNetTokenizerFast"),cSr.forEach(t),eYe=r(t8," (XLNet model)"),t8.forEach(t),y.forEach(t),oYe=i(da),QU=n(da,"P",{});var fSr=s(QU);rYe=r(fSr,"Examples:"),fSr.forEach(t),tYe=i(da),m(qE.$$.fragment,da),da.forEach(t),aYe=i(Ds),Hg=n(Ds,"DIV",{class:!0});var Ixe=s(Hg);m(GE.$$.fragment,Ixe),nYe=i(Ixe),HU=n(Ixe,"P",{});var mSr=s(HU);sYe=r(mSr,"Register a new tokenizer in this mapping."),mSr.forEach(t),Ixe.forEach(t),Ds.forEach(t),P7e=i(c),Ni=n(c,"H2",{class:!0});var Dxe=s(Ni);Ug=n(Dxe,"A",{id:!0,class:!0,href:!0});var gSr=s(Ug);UU=n(gSr,"SPAN",{});var hSr=s(UU);m(OE.$$.fragment,hSr),hSr.forEach(t),gSr.forEach(t),lYe=i(Dxe),JU=n(Dxe,"SPAN",{});var pSr=s(JU);iYe=r(pSr,"AutoFeatureExtractor"),pSr.forEach(t),Dxe.forEach(t),$7e=i(c),zo=n(c,"DIV",{class:!0});var js=s(zo);m(XE.$$.fragment,js),dYe=i(js),VE=n(js,"P",{});var jxe=s(VE);cYe=r(jxe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gk=n(jxe,"A",{href:!0});var _Sr=s(gk);fYe=r(_Sr,"AutoFeatureExtractor.from_pretrained()"),_Sr.forEach(t),mYe=r(jxe," class method."),jxe.forEach(t),gYe=i(js),zE=n(js,"P",{});var Nxe=s(zE);hYe=r(Nxe,"This class cannot be instantiated directly using "),YU=n(Nxe,"CODE",{});var uSr=s(YU);pYe=r(uSr,"__init__()"),uSr.forEach(t),_Ye=r(Nxe," (throws an error)."),Nxe.forEach(t),uYe=i(js),xe=n(js,"DIV",{class:!0});var St=s(xe);m(WE.$$.fragment,St),bYe=i(St),KU=n(St,"P",{});var bSr=s(KU);vYe=r(bSr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bSr.forEach(t),TYe=i(St),ja=n(St,"P",{});var yM=s(ja);FYe=r(yM,"The feature extractor class to instantiate is selected based on the "),ZU=n(yM,"CODE",{});var vSr=s(ZU);CYe=r(vSr,"model_type"),vSr.forEach(t),MYe=r(yM,` property of the config object
(either passed as an argument or loaded from `),eJ=n(yM,"CODE",{});var TSr=s(eJ);EYe=r(TSr,"pretrained_model_name_or_path"),TSr.forEach(t),yYe=r(yM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),oJ=n(yM,"CODE",{});var FSr=s(oJ);wYe=r(FSr,"pretrained_model_name_or_path"),FSr.forEach(t),AYe=r(yM,":"),yM.forEach(t),LYe=i(St),se=n(St,"UL",{});var de=s(se);Jg=n(de,"LI",{});var JFe=s(Jg);rJ=n(JFe,"STRONG",{});var CSr=s(rJ);BYe=r(CSr,"beit"),CSr.forEach(t),xYe=r(JFe," \u2014 "),hk=n(JFe,"A",{href:!0});var MSr=s(hk);kYe=r(MSr,"BeitFeatureExtractor"),MSr.forEach(t),RYe=r(JFe," (BEiT model)"),JFe.forEach(t),SYe=i(de),Yg=n(de,"LI",{});var YFe=s(Yg);tJ=n(YFe,"STRONG",{});var ESr=s(tJ);PYe=r(ESr,"clip"),ESr.forEach(t),$Ye=r(YFe," \u2014 "),pk=n(YFe,"A",{href:!0});var ySr=s(pk);IYe=r(ySr,"CLIPFeatureExtractor"),ySr.forEach(t),DYe=r(YFe," (CLIP model)"),YFe.forEach(t),jYe=i(de),Kg=n(de,"LI",{});var KFe=s(Kg);aJ=n(KFe,"STRONG",{});var wSr=s(aJ);NYe=r(wSr,"convnext"),wSr.forEach(t),qYe=r(KFe," \u2014 "),_k=n(KFe,"A",{href:!0});var ASr=s(_k);GYe=r(ASr,"ConvNextFeatureExtractor"),ASr.forEach(t),OYe=r(KFe," (ConvNext model)"),KFe.forEach(t),XYe=i(de),Zg=n(de,"LI",{});var ZFe=s(Zg);nJ=n(ZFe,"STRONG",{});var LSr=s(nJ);VYe=r(LSr,"deit"),LSr.forEach(t),zYe=r(ZFe," \u2014 "),uk=n(ZFe,"A",{href:!0});var BSr=s(uk);WYe=r(BSr,"DeiTFeatureExtractor"),BSr.forEach(t),QYe=r(ZFe," (DeiT model)"),ZFe.forEach(t),HYe=i(de),eh=n(de,"LI",{});var e9e=s(eh);sJ=n(e9e,"STRONG",{});var xSr=s(sJ);UYe=r(xSr,"detr"),xSr.forEach(t),JYe=r(e9e," \u2014 "),bk=n(e9e,"A",{href:!0});var kSr=s(bk);YYe=r(kSr,"DetrFeatureExtractor"),kSr.forEach(t),KYe=r(e9e," (DETR model)"),e9e.forEach(t),ZYe=i(de),oh=n(de,"LI",{});var o9e=s(oh);lJ=n(o9e,"STRONG",{});var RSr=s(lJ);eKe=r(RSr,"hubert"),RSr.forEach(t),oKe=r(o9e," \u2014 "),vk=n(o9e,"A",{href:!0});var SSr=s(vk);rKe=r(SSr,"Wav2Vec2FeatureExtractor"),SSr.forEach(t),tKe=r(o9e," (Hubert model)"),o9e.forEach(t),aKe=i(de),rh=n(de,"LI",{});var r9e=s(rh);iJ=n(r9e,"STRONG",{});var PSr=s(iJ);nKe=r(PSr,"layoutlmv2"),PSr.forEach(t),sKe=r(r9e," \u2014 "),Tk=n(r9e,"A",{href:!0});var $Sr=s(Tk);lKe=r($Sr,"LayoutLMv2FeatureExtractor"),$Sr.forEach(t),iKe=r(r9e," (LayoutLMv2 model)"),r9e.forEach(t),dKe=i(de),th=n(de,"LI",{});var t9e=s(th);dJ=n(t9e,"STRONG",{});var ISr=s(dJ);cKe=r(ISr,"perceiver"),ISr.forEach(t),fKe=r(t9e," \u2014 "),Fk=n(t9e,"A",{href:!0});var DSr=s(Fk);mKe=r(DSr,"PerceiverFeatureExtractor"),DSr.forEach(t),gKe=r(t9e," (Perceiver model)"),t9e.forEach(t),hKe=i(de),ah=n(de,"LI",{});var a9e=s(ah);cJ=n(a9e,"STRONG",{});var jSr=s(cJ);pKe=r(jSr,"poolformer"),jSr.forEach(t),_Ke=r(a9e," \u2014 "),Ck=n(a9e,"A",{href:!0});var NSr=s(Ck);uKe=r(NSr,"PoolFormerFeatureExtractor"),NSr.forEach(t),bKe=r(a9e," (PoolFormer model)"),a9e.forEach(t),vKe=i(de),nh=n(de,"LI",{});var n9e=s(nh);fJ=n(n9e,"STRONG",{});var qSr=s(fJ);TKe=r(qSr,"segformer"),qSr.forEach(t),FKe=r(n9e," \u2014 "),Mk=n(n9e,"A",{href:!0});var GSr=s(Mk);CKe=r(GSr,"SegformerFeatureExtractor"),GSr.forEach(t),MKe=r(n9e," (SegFormer model)"),n9e.forEach(t),EKe=i(de),sh=n(de,"LI",{});var s9e=s(sh);mJ=n(s9e,"STRONG",{});var OSr=s(mJ);yKe=r(OSr,"speech_to_text"),OSr.forEach(t),wKe=r(s9e," \u2014 "),Ek=n(s9e,"A",{href:!0});var XSr=s(Ek);AKe=r(XSr,"Speech2TextFeatureExtractor"),XSr.forEach(t),LKe=r(s9e," (Speech2Text model)"),s9e.forEach(t),BKe=i(de),lh=n(de,"LI",{});var l9e=s(lh);gJ=n(l9e,"STRONG",{});var VSr=s(gJ);xKe=r(VSr,"swin"),VSr.forEach(t),kKe=r(l9e," \u2014 "),yk=n(l9e,"A",{href:!0});var zSr=s(yk);RKe=r(zSr,"ViTFeatureExtractor"),zSr.forEach(t),SKe=r(l9e," (Swin model)"),l9e.forEach(t),PKe=i(de),ih=n(de,"LI",{});var i9e=s(ih);hJ=n(i9e,"STRONG",{});var WSr=s(hJ);$Ke=r(WSr,"vit"),WSr.forEach(t),IKe=r(i9e," \u2014 "),wk=n(i9e,"A",{href:!0});var QSr=s(wk);DKe=r(QSr,"ViTFeatureExtractor"),QSr.forEach(t),jKe=r(i9e," (ViT model)"),i9e.forEach(t),NKe=i(de),dh=n(de,"LI",{});var d9e=s(dh);pJ=n(d9e,"STRONG",{});var HSr=s(pJ);qKe=r(HSr,"vit_mae"),HSr.forEach(t),GKe=r(d9e," \u2014 "),Ak=n(d9e,"A",{href:!0});var USr=s(Ak);OKe=r(USr,"ViTFeatureExtractor"),USr.forEach(t),XKe=r(d9e," (ViTMAE model)"),d9e.forEach(t),VKe=i(de),ch=n(de,"LI",{});var c9e=s(ch);_J=n(c9e,"STRONG",{});var JSr=s(_J);zKe=r(JSr,"wav2vec2"),JSr.forEach(t),WKe=r(c9e," \u2014 "),Lk=n(c9e,"A",{href:!0});var YSr=s(Lk);QKe=r(YSr,"Wav2Vec2FeatureExtractor"),YSr.forEach(t),HKe=r(c9e," (Wav2Vec2 model)"),c9e.forEach(t),de.forEach(t),UKe=i(St),m(fh.$$.fragment,St),JKe=i(St),uJ=n(St,"P",{});var KSr=s(uJ);YKe=r(KSr,"Examples:"),KSr.forEach(t),KKe=i(St),m(QE.$$.fragment,St),St.forEach(t),ZKe=i(js),mh=n(js,"DIV",{class:!0});var qxe=s(mh);m(HE.$$.fragment,qxe),eZe=i(qxe),bJ=n(qxe,"P",{});var ZSr=s(bJ);oZe=r(ZSr,"Register a new feature extractor for this class."),ZSr.forEach(t),qxe.forEach(t),js.forEach(t),I7e=i(c),qi=n(c,"H2",{class:!0});var Gxe=s(qi);gh=n(Gxe,"A",{id:!0,class:!0,href:!0});var ePr=s(gh);vJ=n(ePr,"SPAN",{});var oPr=s(vJ);m(UE.$$.fragment,oPr),oPr.forEach(t),ePr.forEach(t),rZe=i(Gxe),TJ=n(Gxe,"SPAN",{});var rPr=s(TJ);tZe=r(rPr,"AutoProcessor"),rPr.forEach(t),Gxe.forEach(t),D7e=i(c),Wo=n(c,"DIV",{class:!0});var Ns=s(Wo);m(JE.$$.fragment,Ns),aZe=i(Ns),YE=n(Ns,"P",{});var Oxe=s(YE);nZe=r(Oxe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Bk=n(Oxe,"A",{href:!0});var tPr=s(Bk);sZe=r(tPr,"AutoProcessor.from_pretrained()"),tPr.forEach(t),lZe=r(Oxe," class method."),Oxe.forEach(t),iZe=i(Ns),KE=n(Ns,"P",{});var Xxe=s(KE);dZe=r(Xxe,"This class cannot be instantiated directly using "),FJ=n(Xxe,"CODE",{});var aPr=s(FJ);cZe=r(aPr,"__init__()"),aPr.forEach(t),fZe=r(Xxe," (throws an error)."),Xxe.forEach(t),mZe=i(Ns),ke=n(Ns,"DIV",{class:!0});var Pt=s(ke);m(ZE.$$.fragment,Pt),gZe=i(Pt),CJ=n(Pt,"P",{});var nPr=s(CJ);hZe=r(nPr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nPr.forEach(t),pZe=i(Pt),Gi=n(Pt,"P",{});var RV=s(Gi);_Ze=r(RV,"The processor class to instantiate is selected based on the "),MJ=n(RV,"CODE",{});var sPr=s(MJ);uZe=r(sPr,"model_type"),sPr.forEach(t),bZe=r(RV,` property of the config object (either
passed as an argument or loaded from `),EJ=n(RV,"CODE",{});var lPr=s(EJ);vZe=r(lPr,"pretrained_model_name_or_path"),lPr.forEach(t),TZe=r(RV," if possible):"),RV.forEach(t),FZe=i(Pt),we=n(Pt,"UL",{});var jo=s(we);hh=n(jo,"LI",{});var f9e=s(hh);yJ=n(f9e,"STRONG",{});var iPr=s(yJ);CZe=r(iPr,"clip"),iPr.forEach(t),MZe=r(f9e," \u2014 "),xk=n(f9e,"A",{href:!0});var dPr=s(xk);EZe=r(dPr,"CLIPProcessor"),dPr.forEach(t),yZe=r(f9e," (CLIP model)"),f9e.forEach(t),wZe=i(jo),ph=n(jo,"LI",{});var m9e=s(ph);wJ=n(m9e,"STRONG",{});var cPr=s(wJ);AZe=r(cPr,"layoutlmv2"),cPr.forEach(t),LZe=r(m9e," \u2014 "),kk=n(m9e,"A",{href:!0});var fPr=s(kk);BZe=r(fPr,"LayoutLMv2Processor"),fPr.forEach(t),xZe=r(m9e," (LayoutLMv2 model)"),m9e.forEach(t),kZe=i(jo),_h=n(jo,"LI",{});var g9e=s(_h);AJ=n(g9e,"STRONG",{});var mPr=s(AJ);RZe=r(mPr,"layoutxlm"),mPr.forEach(t),SZe=r(g9e," \u2014 "),Rk=n(g9e,"A",{href:!0});var gPr=s(Rk);PZe=r(gPr,"LayoutXLMProcessor"),gPr.forEach(t),$Ze=r(g9e," (LayoutXLM model)"),g9e.forEach(t),IZe=i(jo),uh=n(jo,"LI",{});var h9e=s(uh);LJ=n(h9e,"STRONG",{});var hPr=s(LJ);DZe=r(hPr,"speech_to_text"),hPr.forEach(t),jZe=r(h9e," \u2014 "),Sk=n(h9e,"A",{href:!0});var pPr=s(Sk);NZe=r(pPr,"Speech2TextProcessor"),pPr.forEach(t),qZe=r(h9e," (Speech2Text model)"),h9e.forEach(t),GZe=i(jo),bh=n(jo,"LI",{});var p9e=s(bh);BJ=n(p9e,"STRONG",{});var _Pr=s(BJ);OZe=r(_Pr,"speech_to_text_2"),_Pr.forEach(t),XZe=r(p9e," \u2014 "),Pk=n(p9e,"A",{href:!0});var uPr=s(Pk);VZe=r(uPr,"Speech2Text2Processor"),uPr.forEach(t),zZe=r(p9e," (Speech2Text2 model)"),p9e.forEach(t),WZe=i(jo),vh=n(jo,"LI",{});var _9e=s(vh);xJ=n(_9e,"STRONG",{});var bPr=s(xJ);QZe=r(bPr,"trocr"),bPr.forEach(t),HZe=r(_9e," \u2014 "),$k=n(_9e,"A",{href:!0});var vPr=s($k);UZe=r(vPr,"TrOCRProcessor"),vPr.forEach(t),JZe=r(_9e," (TrOCR model)"),_9e.forEach(t),YZe=i(jo),Th=n(jo,"LI",{});var u9e=s(Th);kJ=n(u9e,"STRONG",{});var TPr=s(kJ);KZe=r(TPr,"vision-text-dual-encoder"),TPr.forEach(t),ZZe=r(u9e," \u2014 "),Ik=n(u9e,"A",{href:!0});var FPr=s(Ik);eeo=r(FPr,"VisionTextDualEncoderProcessor"),FPr.forEach(t),oeo=r(u9e," (VisionTextDualEncoder model)"),u9e.forEach(t),reo=i(jo),Fh=n(jo,"LI",{});var b9e=s(Fh);RJ=n(b9e,"STRONG",{});var CPr=s(RJ);teo=r(CPr,"wav2vec2"),CPr.forEach(t),aeo=r(b9e," \u2014 "),Dk=n(b9e,"A",{href:!0});var MPr=s(Dk);neo=r(MPr,"Wav2Vec2Processor"),MPr.forEach(t),seo=r(b9e," (Wav2Vec2 model)"),b9e.forEach(t),jo.forEach(t),leo=i(Pt),m(Ch.$$.fragment,Pt),ieo=i(Pt),SJ=n(Pt,"P",{});var EPr=s(SJ);deo=r(EPr,"Examples:"),EPr.forEach(t),ceo=i(Pt),m(e3.$$.fragment,Pt),Pt.forEach(t),feo=i(Ns),Mh=n(Ns,"DIV",{class:!0});var Vxe=s(Mh);m(o3.$$.fragment,Vxe),meo=i(Vxe),PJ=n(Vxe,"P",{});var yPr=s(PJ);geo=r(yPr,"Register a new processor for this class."),yPr.forEach(t),Vxe.forEach(t),Ns.forEach(t),j7e=i(c),Oi=n(c,"H2",{class:!0});var zxe=s(Oi);Eh=n(zxe,"A",{id:!0,class:!0,href:!0});var wPr=s(Eh);$J=n(wPr,"SPAN",{});var APr=s($J);m(r3.$$.fragment,APr),APr.forEach(t),wPr.forEach(t),heo=i(zxe),IJ=n(zxe,"SPAN",{});var LPr=s(IJ);peo=r(LPr,"AutoModel"),LPr.forEach(t),zxe.forEach(t),N7e=i(c),Qo=n(c,"DIV",{class:!0});var qs=s(Qo);m(t3.$$.fragment,qs),_eo=i(qs),Xi=n(qs,"P",{});var SV=s(Xi);ueo=r(SV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DJ=n(SV,"CODE",{});var BPr=s(DJ);beo=r(BPr,"from_pretrained()"),BPr.forEach(t),veo=r(SV,"class method or the "),jJ=n(SV,"CODE",{});var xPr=s(jJ);Teo=r(xPr,"from_config()"),xPr.forEach(t),Feo=r(SV,`class
method.`),SV.forEach(t),Ceo=i(qs),a3=n(qs,"P",{});var Wxe=s(a3);Meo=r(Wxe,"This class cannot be instantiated directly using "),NJ=n(Wxe,"CODE",{});var kPr=s(NJ);Eeo=r(kPr,"__init__()"),kPr.forEach(t),yeo=r(Wxe," (throws an error)."),Wxe.forEach(t),weo=i(qs),qr=n(qs,"DIV",{class:!0});var Gs=s(qr);m(n3.$$.fragment,Gs),Aeo=i(Gs),qJ=n(Gs,"P",{});var RPr=s(qJ);Leo=r(RPr,"Instantiates one of the base model classes of the library from a configuration."),RPr.forEach(t),Beo=i(Gs),Vi=n(Gs,"P",{});var PV=s(Vi);xeo=r(PV,`Note:
Loading a model from its configuration file does `),GJ=n(PV,"STRONG",{});var SPr=s(GJ);keo=r(SPr,"not"),SPr.forEach(t),Reo=r(PV,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(PV,"CODE",{});var PPr=s(OJ);Seo=r(PPr,"from_pretrained()"),PPr.forEach(t),Peo=r(PV,"to load the model weights."),PV.forEach(t),$eo=i(Gs),XJ=n(Gs,"P",{});var $Pr=s(XJ);Ieo=r($Pr,"Examples:"),$Pr.forEach(t),Deo=i(Gs),m(s3.$$.fragment,Gs),Gs.forEach(t),jeo=i(qs),Re=n(qs,"DIV",{class:!0});var $t=s(Re);m(l3.$$.fragment,$t),Neo=i($t),VJ=n($t,"P",{});var IPr=s(VJ);qeo=r(IPr,"Instantiate one of the base model classes of the library from a pretrained model."),IPr.forEach(t),Geo=i($t),Na=n($t,"P",{});var wM=s(Na);Oeo=r(wM,"The model class to instantiate is selected based on the "),zJ=n(wM,"CODE",{});var DPr=s(zJ);Xeo=r(DPr,"model_type"),DPr.forEach(t),Veo=r(wM,` property of the config object (either
passed as an argument or loaded from `),WJ=n(wM,"CODE",{});var jPr=s(WJ);zeo=r(jPr,"pretrained_model_name_or_path"),jPr.forEach(t),Weo=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QJ=n(wM,"CODE",{});var NPr=s(QJ);Qeo=r(NPr,"pretrained_model_name_or_path"),NPr.forEach(t),Heo=r(wM,":"),wM.forEach(t),Ueo=i($t),F=n($t,"UL",{});var C=s(F);yh=n(C,"LI",{});var v9e=s(yh);HJ=n(v9e,"STRONG",{});var qPr=s(HJ);Jeo=r(qPr,"albert"),qPr.forEach(t),Yeo=r(v9e," \u2014 "),jk=n(v9e,"A",{href:!0});var GPr=s(jk);Keo=r(GPr,"AlbertModel"),GPr.forEach(t),Zeo=r(v9e," (ALBERT model)"),v9e.forEach(t),eoo=i(C),wh=n(C,"LI",{});var T9e=s(wh);UJ=n(T9e,"STRONG",{});var OPr=s(UJ);ooo=r(OPr,"bart"),OPr.forEach(t),roo=r(T9e," \u2014 "),Nk=n(T9e,"A",{href:!0});var XPr=s(Nk);too=r(XPr,"BartModel"),XPr.forEach(t),aoo=r(T9e," (BART model)"),T9e.forEach(t),noo=i(C),Ah=n(C,"LI",{});var F9e=s(Ah);JJ=n(F9e,"STRONG",{});var VPr=s(JJ);soo=r(VPr,"beit"),VPr.forEach(t),loo=r(F9e," \u2014 "),qk=n(F9e,"A",{href:!0});var zPr=s(qk);ioo=r(zPr,"BeitModel"),zPr.forEach(t),doo=r(F9e," (BEiT model)"),F9e.forEach(t),coo=i(C),Lh=n(C,"LI",{});var C9e=s(Lh);YJ=n(C9e,"STRONG",{});var WPr=s(YJ);foo=r(WPr,"bert"),WPr.forEach(t),moo=r(C9e," \u2014 "),Gk=n(C9e,"A",{href:!0});var QPr=s(Gk);goo=r(QPr,"BertModel"),QPr.forEach(t),hoo=r(C9e," (BERT model)"),C9e.forEach(t),poo=i(C),Bh=n(C,"LI",{});var M9e=s(Bh);KJ=n(M9e,"STRONG",{});var HPr=s(KJ);_oo=r(HPr,"bert-generation"),HPr.forEach(t),uoo=r(M9e," \u2014 "),Ok=n(M9e,"A",{href:!0});var UPr=s(Ok);boo=r(UPr,"BertGenerationEncoder"),UPr.forEach(t),voo=r(M9e," (Bert Generation model)"),M9e.forEach(t),Too=i(C),xh=n(C,"LI",{});var E9e=s(xh);ZJ=n(E9e,"STRONG",{});var JPr=s(ZJ);Foo=r(JPr,"big_bird"),JPr.forEach(t),Coo=r(E9e," \u2014 "),Xk=n(E9e,"A",{href:!0});var YPr=s(Xk);Moo=r(YPr,"BigBirdModel"),YPr.forEach(t),Eoo=r(E9e," (BigBird model)"),E9e.forEach(t),yoo=i(C),kh=n(C,"LI",{});var y9e=s(kh);eY=n(y9e,"STRONG",{});var KPr=s(eY);woo=r(KPr,"bigbird_pegasus"),KPr.forEach(t),Aoo=r(y9e," \u2014 "),Vk=n(y9e,"A",{href:!0});var ZPr=s(Vk);Loo=r(ZPr,"BigBirdPegasusModel"),ZPr.forEach(t),Boo=r(y9e," (BigBirdPegasus model)"),y9e.forEach(t),xoo=i(C),Rh=n(C,"LI",{});var w9e=s(Rh);oY=n(w9e,"STRONG",{});var e$r=s(oY);koo=r(e$r,"blenderbot"),e$r.forEach(t),Roo=r(w9e," \u2014 "),zk=n(w9e,"A",{href:!0});var o$r=s(zk);Soo=r(o$r,"BlenderbotModel"),o$r.forEach(t),Poo=r(w9e," (Blenderbot model)"),w9e.forEach(t),$oo=i(C),Sh=n(C,"LI",{});var A9e=s(Sh);rY=n(A9e,"STRONG",{});var r$r=s(rY);Ioo=r(r$r,"blenderbot-small"),r$r.forEach(t),Doo=r(A9e," \u2014 "),Wk=n(A9e,"A",{href:!0});var t$r=s(Wk);joo=r(t$r,"BlenderbotSmallModel"),t$r.forEach(t),Noo=r(A9e," (BlenderbotSmall model)"),A9e.forEach(t),qoo=i(C),Ph=n(C,"LI",{});var L9e=s(Ph);tY=n(L9e,"STRONG",{});var a$r=s(tY);Goo=r(a$r,"camembert"),a$r.forEach(t),Ooo=r(L9e," \u2014 "),Qk=n(L9e,"A",{href:!0});var n$r=s(Qk);Xoo=r(n$r,"CamembertModel"),n$r.forEach(t),Voo=r(L9e," (CamemBERT model)"),L9e.forEach(t),zoo=i(C),$h=n(C,"LI",{});var B9e=s($h);aY=n(B9e,"STRONG",{});var s$r=s(aY);Woo=r(s$r,"canine"),s$r.forEach(t),Qoo=r(B9e," \u2014 "),Hk=n(B9e,"A",{href:!0});var l$r=s(Hk);Hoo=r(l$r,"CanineModel"),l$r.forEach(t),Uoo=r(B9e," (Canine model)"),B9e.forEach(t),Joo=i(C),Ih=n(C,"LI",{});var x9e=s(Ih);nY=n(x9e,"STRONG",{});var i$r=s(nY);Yoo=r(i$r,"clip"),i$r.forEach(t),Koo=r(x9e," \u2014 "),Uk=n(x9e,"A",{href:!0});var d$r=s(Uk);Zoo=r(d$r,"CLIPModel"),d$r.forEach(t),ero=r(x9e," (CLIP model)"),x9e.forEach(t),oro=i(C),Dh=n(C,"LI",{});var k9e=s(Dh);sY=n(k9e,"STRONG",{});var c$r=s(sY);rro=r(c$r,"convbert"),c$r.forEach(t),tro=r(k9e," \u2014 "),Jk=n(k9e,"A",{href:!0});var f$r=s(Jk);aro=r(f$r,"ConvBertModel"),f$r.forEach(t),nro=r(k9e," (ConvBERT model)"),k9e.forEach(t),sro=i(C),jh=n(C,"LI",{});var R9e=s(jh);lY=n(R9e,"STRONG",{});var m$r=s(lY);lro=r(m$r,"convnext"),m$r.forEach(t),iro=r(R9e," \u2014 "),Yk=n(R9e,"A",{href:!0});var g$r=s(Yk);dro=r(g$r,"ConvNextModel"),g$r.forEach(t),cro=r(R9e," (ConvNext model)"),R9e.forEach(t),fro=i(C),Nh=n(C,"LI",{});var S9e=s(Nh);iY=n(S9e,"STRONG",{});var h$r=s(iY);mro=r(h$r,"ctrl"),h$r.forEach(t),gro=r(S9e," \u2014 "),Kk=n(S9e,"A",{href:!0});var p$r=s(Kk);hro=r(p$r,"CTRLModel"),p$r.forEach(t),pro=r(S9e," (CTRL model)"),S9e.forEach(t),_ro=i(C),qh=n(C,"LI",{});var P9e=s(qh);dY=n(P9e,"STRONG",{});var _$r=s(dY);uro=r(_$r,"data2vec-audio"),_$r.forEach(t),bro=r(P9e," \u2014 "),Zk=n(P9e,"A",{href:!0});var u$r=s(Zk);vro=r(u$r,"Data2VecAudioModel"),u$r.forEach(t),Tro=r(P9e," (Data2VecAudio model)"),P9e.forEach(t),Fro=i(C),Gh=n(C,"LI",{});var $9e=s(Gh);cY=n($9e,"STRONG",{});var b$r=s(cY);Cro=r(b$r,"data2vec-text"),b$r.forEach(t),Mro=r($9e," \u2014 "),eR=n($9e,"A",{href:!0});var v$r=s(eR);Ero=r(v$r,"Data2VecTextModel"),v$r.forEach(t),yro=r($9e," (Data2VecText model)"),$9e.forEach(t),wro=i(C),Oh=n(C,"LI",{});var I9e=s(Oh);fY=n(I9e,"STRONG",{});var T$r=s(fY);Aro=r(T$r,"deberta"),T$r.forEach(t),Lro=r(I9e," \u2014 "),oR=n(I9e,"A",{href:!0});var F$r=s(oR);Bro=r(F$r,"DebertaModel"),F$r.forEach(t),xro=r(I9e," (DeBERTa model)"),I9e.forEach(t),kro=i(C),Xh=n(C,"LI",{});var D9e=s(Xh);mY=n(D9e,"STRONG",{});var C$r=s(mY);Rro=r(C$r,"deberta-v2"),C$r.forEach(t),Sro=r(D9e," \u2014 "),rR=n(D9e,"A",{href:!0});var M$r=s(rR);Pro=r(M$r,"DebertaV2Model"),M$r.forEach(t),$ro=r(D9e," (DeBERTa-v2 model)"),D9e.forEach(t),Iro=i(C),Vh=n(C,"LI",{});var j9e=s(Vh);gY=n(j9e,"STRONG",{});var E$r=s(gY);Dro=r(E$r,"deit"),E$r.forEach(t),jro=r(j9e," \u2014 "),tR=n(j9e,"A",{href:!0});var y$r=s(tR);Nro=r(y$r,"DeiTModel"),y$r.forEach(t),qro=r(j9e," (DeiT model)"),j9e.forEach(t),Gro=i(C),zh=n(C,"LI",{});var N9e=s(zh);hY=n(N9e,"STRONG",{});var w$r=s(hY);Oro=r(w$r,"detr"),w$r.forEach(t),Xro=r(N9e," \u2014 "),aR=n(N9e,"A",{href:!0});var A$r=s(aR);Vro=r(A$r,"DetrModel"),A$r.forEach(t),zro=r(N9e," (DETR model)"),N9e.forEach(t),Wro=i(C),Wh=n(C,"LI",{});var q9e=s(Wh);pY=n(q9e,"STRONG",{});var L$r=s(pY);Qro=r(L$r,"distilbert"),L$r.forEach(t),Hro=r(q9e," \u2014 "),nR=n(q9e,"A",{href:!0});var B$r=s(nR);Uro=r(B$r,"DistilBertModel"),B$r.forEach(t),Jro=r(q9e," (DistilBERT model)"),q9e.forEach(t),Yro=i(C),Qh=n(C,"LI",{});var G9e=s(Qh);_Y=n(G9e,"STRONG",{});var x$r=s(_Y);Kro=r(x$r,"dpr"),x$r.forEach(t),Zro=r(G9e," \u2014 "),sR=n(G9e,"A",{href:!0});var k$r=s(sR);eto=r(k$r,"DPRQuestionEncoder"),k$r.forEach(t),oto=r(G9e," (DPR model)"),G9e.forEach(t),rto=i(C),Hh=n(C,"LI",{});var O9e=s(Hh);uY=n(O9e,"STRONG",{});var R$r=s(uY);tto=r(R$r,"electra"),R$r.forEach(t),ato=r(O9e," \u2014 "),lR=n(O9e,"A",{href:!0});var S$r=s(lR);nto=r(S$r,"ElectraModel"),S$r.forEach(t),sto=r(O9e," (ELECTRA model)"),O9e.forEach(t),lto=i(C),Uh=n(C,"LI",{});var X9e=s(Uh);bY=n(X9e,"STRONG",{});var P$r=s(bY);ito=r(P$r,"flaubert"),P$r.forEach(t),dto=r(X9e," \u2014 "),iR=n(X9e,"A",{href:!0});var $$r=s(iR);cto=r($$r,"FlaubertModel"),$$r.forEach(t),fto=r(X9e," (FlauBERT model)"),X9e.forEach(t),mto=i(C),Jh=n(C,"LI",{});var V9e=s(Jh);vY=n(V9e,"STRONG",{});var I$r=s(vY);gto=r(I$r,"fnet"),I$r.forEach(t),hto=r(V9e," \u2014 "),dR=n(V9e,"A",{href:!0});var D$r=s(dR);pto=r(D$r,"FNetModel"),D$r.forEach(t),_to=r(V9e," (FNet model)"),V9e.forEach(t),uto=i(C),Yh=n(C,"LI",{});var z9e=s(Yh);TY=n(z9e,"STRONG",{});var j$r=s(TY);bto=r(j$r,"fsmt"),j$r.forEach(t),vto=r(z9e," \u2014 "),cR=n(z9e,"A",{href:!0});var N$r=s(cR);Tto=r(N$r,"FSMTModel"),N$r.forEach(t),Fto=r(z9e," (FairSeq Machine-Translation model)"),z9e.forEach(t),Cto=i(C),Ss=n(C,"LI",{});var a8=s(Ss);FY=n(a8,"STRONG",{});var q$r=s(FY);Mto=r(q$r,"funnel"),q$r.forEach(t),Eto=r(a8," \u2014 "),fR=n(a8,"A",{href:!0});var G$r=s(fR);yto=r(G$r,"FunnelModel"),G$r.forEach(t),wto=r(a8," or "),mR=n(a8,"A",{href:!0});var O$r=s(mR);Ato=r(O$r,"FunnelBaseModel"),O$r.forEach(t),Lto=r(a8," (Funnel Transformer model)"),a8.forEach(t),Bto=i(C),Kh=n(C,"LI",{});var W9e=s(Kh);CY=n(W9e,"STRONG",{});var X$r=s(CY);xto=r(X$r,"gpt2"),X$r.forEach(t),kto=r(W9e," \u2014 "),gR=n(W9e,"A",{href:!0});var V$r=s(gR);Rto=r(V$r,"GPT2Model"),V$r.forEach(t),Sto=r(W9e," (OpenAI GPT-2 model)"),W9e.forEach(t),Pto=i(C),Zh=n(C,"LI",{});var Q9e=s(Zh);MY=n(Q9e,"STRONG",{});var z$r=s(MY);$to=r(z$r,"gpt_neo"),z$r.forEach(t),Ito=r(Q9e," \u2014 "),hR=n(Q9e,"A",{href:!0});var W$r=s(hR);Dto=r(W$r,"GPTNeoModel"),W$r.forEach(t),jto=r(Q9e," (GPT Neo model)"),Q9e.forEach(t),Nto=i(C),ep=n(C,"LI",{});var H9e=s(ep);EY=n(H9e,"STRONG",{});var Q$r=s(EY);qto=r(Q$r,"gptj"),Q$r.forEach(t),Gto=r(H9e," \u2014 "),pR=n(H9e,"A",{href:!0});var H$r=s(pR);Oto=r(H$r,"GPTJModel"),H$r.forEach(t),Xto=r(H9e," (GPT-J model)"),H9e.forEach(t),Vto=i(C),op=n(C,"LI",{});var U9e=s(op);yY=n(U9e,"STRONG",{});var U$r=s(yY);zto=r(U$r,"hubert"),U$r.forEach(t),Wto=r(U9e," \u2014 "),_R=n(U9e,"A",{href:!0});var J$r=s(_R);Qto=r(J$r,"HubertModel"),J$r.forEach(t),Hto=r(U9e," (Hubert model)"),U9e.forEach(t),Uto=i(C),rp=n(C,"LI",{});var J9e=s(rp);wY=n(J9e,"STRONG",{});var Y$r=s(wY);Jto=r(Y$r,"ibert"),Y$r.forEach(t),Yto=r(J9e," \u2014 "),uR=n(J9e,"A",{href:!0});var K$r=s(uR);Kto=r(K$r,"IBertModel"),K$r.forEach(t),Zto=r(J9e," (I-BERT model)"),J9e.forEach(t),eao=i(C),tp=n(C,"LI",{});var Y9e=s(tp);AY=n(Y9e,"STRONG",{});var Z$r=s(AY);oao=r(Z$r,"imagegpt"),Z$r.forEach(t),rao=r(Y9e," \u2014 "),bR=n(Y9e,"A",{href:!0});var eIr=s(bR);tao=r(eIr,"ImageGPTModel"),eIr.forEach(t),aao=r(Y9e," (ImageGPT model)"),Y9e.forEach(t),nao=i(C),ap=n(C,"LI",{});var K9e=s(ap);LY=n(K9e,"STRONG",{});var oIr=s(LY);sao=r(oIr,"layoutlm"),oIr.forEach(t),lao=r(K9e," \u2014 "),vR=n(K9e,"A",{href:!0});var rIr=s(vR);iao=r(rIr,"LayoutLMModel"),rIr.forEach(t),dao=r(K9e," (LayoutLM model)"),K9e.forEach(t),cao=i(C),np=n(C,"LI",{});var Z9e=s(np);BY=n(Z9e,"STRONG",{});var tIr=s(BY);fao=r(tIr,"layoutlmv2"),tIr.forEach(t),mao=r(Z9e," \u2014 "),TR=n(Z9e,"A",{href:!0});var aIr=s(TR);gao=r(aIr,"LayoutLMv2Model"),aIr.forEach(t),hao=r(Z9e," (LayoutLMv2 model)"),Z9e.forEach(t),pao=i(C),sp=n(C,"LI",{});var eCe=s(sp);xY=n(eCe,"STRONG",{});var nIr=s(xY);_ao=r(nIr,"led"),nIr.forEach(t),uao=r(eCe," \u2014 "),FR=n(eCe,"A",{href:!0});var sIr=s(FR);bao=r(sIr,"LEDModel"),sIr.forEach(t),vao=r(eCe," (LED model)"),eCe.forEach(t),Tao=i(C),lp=n(C,"LI",{});var oCe=s(lp);kY=n(oCe,"STRONG",{});var lIr=s(kY);Fao=r(lIr,"longformer"),lIr.forEach(t),Cao=r(oCe," \u2014 "),CR=n(oCe,"A",{href:!0});var iIr=s(CR);Mao=r(iIr,"LongformerModel"),iIr.forEach(t),Eao=r(oCe," (Longformer model)"),oCe.forEach(t),yao=i(C),ip=n(C,"LI",{});var rCe=s(ip);RY=n(rCe,"STRONG",{});var dIr=s(RY);wao=r(dIr,"luke"),dIr.forEach(t),Aao=r(rCe," \u2014 "),MR=n(rCe,"A",{href:!0});var cIr=s(MR);Lao=r(cIr,"LukeModel"),cIr.forEach(t),Bao=r(rCe," (LUKE model)"),rCe.forEach(t),xao=i(C),dp=n(C,"LI",{});var tCe=s(dp);SY=n(tCe,"STRONG",{});var fIr=s(SY);kao=r(fIr,"lxmert"),fIr.forEach(t),Rao=r(tCe," \u2014 "),ER=n(tCe,"A",{href:!0});var mIr=s(ER);Sao=r(mIr,"LxmertModel"),mIr.forEach(t),Pao=r(tCe," (LXMERT model)"),tCe.forEach(t),$ao=i(C),cp=n(C,"LI",{});var aCe=s(cp);PY=n(aCe,"STRONG",{});var gIr=s(PY);Iao=r(gIr,"m2m_100"),gIr.forEach(t),Dao=r(aCe," \u2014 "),yR=n(aCe,"A",{href:!0});var hIr=s(yR);jao=r(hIr,"M2M100Model"),hIr.forEach(t),Nao=r(aCe," (M2M100 model)"),aCe.forEach(t),qao=i(C),fp=n(C,"LI",{});var nCe=s(fp);$Y=n(nCe,"STRONG",{});var pIr=s($Y);Gao=r(pIr,"marian"),pIr.forEach(t),Oao=r(nCe," \u2014 "),wR=n(nCe,"A",{href:!0});var _Ir=s(wR);Xao=r(_Ir,"MarianModel"),_Ir.forEach(t),Vao=r(nCe," (Marian model)"),nCe.forEach(t),zao=i(C),mp=n(C,"LI",{});var sCe=s(mp);IY=n(sCe,"STRONG",{});var uIr=s(IY);Wao=r(uIr,"maskformer"),uIr.forEach(t),Qao=r(sCe," \u2014 "),AR=n(sCe,"A",{href:!0});var bIr=s(AR);Hao=r(bIr,"MaskFormerModel"),bIr.forEach(t),Uao=r(sCe," (MaskFormer model)"),sCe.forEach(t),Jao=i(C),gp=n(C,"LI",{});var lCe=s(gp);DY=n(lCe,"STRONG",{});var vIr=s(DY);Yao=r(vIr,"mbart"),vIr.forEach(t),Kao=r(lCe," \u2014 "),LR=n(lCe,"A",{href:!0});var TIr=s(LR);Zao=r(TIr,"MBartModel"),TIr.forEach(t),eno=r(lCe," (mBART model)"),lCe.forEach(t),ono=i(C),hp=n(C,"LI",{});var iCe=s(hp);jY=n(iCe,"STRONG",{});var FIr=s(jY);rno=r(FIr,"megatron-bert"),FIr.forEach(t),tno=r(iCe," \u2014 "),BR=n(iCe,"A",{href:!0});var CIr=s(BR);ano=r(CIr,"MegatronBertModel"),CIr.forEach(t),nno=r(iCe," (MegatronBert model)"),iCe.forEach(t),sno=i(C),pp=n(C,"LI",{});var dCe=s(pp);NY=n(dCe,"STRONG",{});var MIr=s(NY);lno=r(MIr,"mobilebert"),MIr.forEach(t),ino=r(dCe," \u2014 "),xR=n(dCe,"A",{href:!0});var EIr=s(xR);dno=r(EIr,"MobileBertModel"),EIr.forEach(t),cno=r(dCe," (MobileBERT model)"),dCe.forEach(t),fno=i(C),_p=n(C,"LI",{});var cCe=s(_p);qY=n(cCe,"STRONG",{});var yIr=s(qY);mno=r(yIr,"mpnet"),yIr.forEach(t),gno=r(cCe," \u2014 "),kR=n(cCe,"A",{href:!0});var wIr=s(kR);hno=r(wIr,"MPNetModel"),wIr.forEach(t),pno=r(cCe," (MPNet model)"),cCe.forEach(t),_no=i(C),up=n(C,"LI",{});var fCe=s(up);GY=n(fCe,"STRONG",{});var AIr=s(GY);uno=r(AIr,"mt5"),AIr.forEach(t),bno=r(fCe," \u2014 "),RR=n(fCe,"A",{href:!0});var LIr=s(RR);vno=r(LIr,"MT5Model"),LIr.forEach(t),Tno=r(fCe," (mT5 model)"),fCe.forEach(t),Fno=i(C),bp=n(C,"LI",{});var mCe=s(bp);OY=n(mCe,"STRONG",{});var BIr=s(OY);Cno=r(BIr,"nystromformer"),BIr.forEach(t),Mno=r(mCe," \u2014 "),SR=n(mCe,"A",{href:!0});var xIr=s(SR);Eno=r(xIr,"NystromformerModel"),xIr.forEach(t),yno=r(mCe," (Nystromformer model)"),mCe.forEach(t),wno=i(C),vp=n(C,"LI",{});var gCe=s(vp);XY=n(gCe,"STRONG",{});var kIr=s(XY);Ano=r(kIr,"openai-gpt"),kIr.forEach(t),Lno=r(gCe," \u2014 "),PR=n(gCe,"A",{href:!0});var RIr=s(PR);Bno=r(RIr,"OpenAIGPTModel"),RIr.forEach(t),xno=r(gCe," (OpenAI GPT model)"),gCe.forEach(t),kno=i(C),Tp=n(C,"LI",{});var hCe=s(Tp);VY=n(hCe,"STRONG",{});var SIr=s(VY);Rno=r(SIr,"pegasus"),SIr.forEach(t),Sno=r(hCe," \u2014 "),$R=n(hCe,"A",{href:!0});var PIr=s($R);Pno=r(PIr,"PegasusModel"),PIr.forEach(t),$no=r(hCe," (Pegasus model)"),hCe.forEach(t),Ino=i(C),Fp=n(C,"LI",{});var pCe=s(Fp);zY=n(pCe,"STRONG",{});var $Ir=s(zY);Dno=r($Ir,"perceiver"),$Ir.forEach(t),jno=r(pCe," \u2014 "),IR=n(pCe,"A",{href:!0});var IIr=s(IR);Nno=r(IIr,"PerceiverModel"),IIr.forEach(t),qno=r(pCe," (Perceiver model)"),pCe.forEach(t),Gno=i(C),Cp=n(C,"LI",{});var _Ce=s(Cp);WY=n(_Ce,"STRONG",{});var DIr=s(WY);Ono=r(DIr,"plbart"),DIr.forEach(t),Xno=r(_Ce," \u2014 "),DR=n(_Ce,"A",{href:!0});var jIr=s(DR);Vno=r(jIr,"PLBartModel"),jIr.forEach(t),zno=r(_Ce," (PLBart model)"),_Ce.forEach(t),Wno=i(C),Mp=n(C,"LI",{});var uCe=s(Mp);QY=n(uCe,"STRONG",{});var NIr=s(QY);Qno=r(NIr,"poolformer"),NIr.forEach(t),Hno=r(uCe," \u2014 "),jR=n(uCe,"A",{href:!0});var qIr=s(jR);Uno=r(qIr,"PoolFormerModel"),qIr.forEach(t),Jno=r(uCe," (PoolFormer model)"),uCe.forEach(t),Yno=i(C),Ep=n(C,"LI",{});var bCe=s(Ep);HY=n(bCe,"STRONG",{});var GIr=s(HY);Kno=r(GIr,"prophetnet"),GIr.forEach(t),Zno=r(bCe," \u2014 "),NR=n(bCe,"A",{href:!0});var OIr=s(NR);eso=r(OIr,"ProphetNetModel"),OIr.forEach(t),oso=r(bCe," (ProphetNet model)"),bCe.forEach(t),rso=i(C),yp=n(C,"LI",{});var vCe=s(yp);UY=n(vCe,"STRONG",{});var XIr=s(UY);tso=r(XIr,"qdqbert"),XIr.forEach(t),aso=r(vCe," \u2014 "),qR=n(vCe,"A",{href:!0});var VIr=s(qR);nso=r(VIr,"QDQBertModel"),VIr.forEach(t),sso=r(vCe," (QDQBert model)"),vCe.forEach(t),lso=i(C),wp=n(C,"LI",{});var TCe=s(wp);JY=n(TCe,"STRONG",{});var zIr=s(JY);iso=r(zIr,"reformer"),zIr.forEach(t),dso=r(TCe," \u2014 "),GR=n(TCe,"A",{href:!0});var WIr=s(GR);cso=r(WIr,"ReformerModel"),WIr.forEach(t),fso=r(TCe," (Reformer model)"),TCe.forEach(t),mso=i(C),Ap=n(C,"LI",{});var FCe=s(Ap);YY=n(FCe,"STRONG",{});var QIr=s(YY);gso=r(QIr,"rembert"),QIr.forEach(t),hso=r(FCe," \u2014 "),OR=n(FCe,"A",{href:!0});var HIr=s(OR);pso=r(HIr,"RemBertModel"),HIr.forEach(t),_so=r(FCe," (RemBERT model)"),FCe.forEach(t),uso=i(C),Lp=n(C,"LI",{});var CCe=s(Lp);KY=n(CCe,"STRONG",{});var UIr=s(KY);bso=r(UIr,"retribert"),UIr.forEach(t),vso=r(CCe," \u2014 "),XR=n(CCe,"A",{href:!0});var JIr=s(XR);Tso=r(JIr,"RetriBertModel"),JIr.forEach(t),Fso=r(CCe," (RetriBERT model)"),CCe.forEach(t),Cso=i(C),Bp=n(C,"LI",{});var MCe=s(Bp);ZY=n(MCe,"STRONG",{});var YIr=s(ZY);Mso=r(YIr,"roberta"),YIr.forEach(t),Eso=r(MCe," \u2014 "),VR=n(MCe,"A",{href:!0});var KIr=s(VR);yso=r(KIr,"RobertaModel"),KIr.forEach(t),wso=r(MCe," (RoBERTa model)"),MCe.forEach(t),Aso=i(C),xp=n(C,"LI",{});var ECe=s(xp);eK=n(ECe,"STRONG",{});var ZIr=s(eK);Lso=r(ZIr,"roformer"),ZIr.forEach(t),Bso=r(ECe," \u2014 "),zR=n(ECe,"A",{href:!0});var eDr=s(zR);xso=r(eDr,"RoFormerModel"),eDr.forEach(t),kso=r(ECe," (RoFormer model)"),ECe.forEach(t),Rso=i(C),kp=n(C,"LI",{});var yCe=s(kp);oK=n(yCe,"STRONG",{});var oDr=s(oK);Sso=r(oDr,"segformer"),oDr.forEach(t),Pso=r(yCe," \u2014 "),WR=n(yCe,"A",{href:!0});var rDr=s(WR);$so=r(rDr,"SegformerModel"),rDr.forEach(t),Iso=r(yCe," (SegFormer model)"),yCe.forEach(t),Dso=i(C),Rp=n(C,"LI",{});var wCe=s(Rp);rK=n(wCe,"STRONG",{});var tDr=s(rK);jso=r(tDr,"sew"),tDr.forEach(t),Nso=r(wCe," \u2014 "),QR=n(wCe,"A",{href:!0});var aDr=s(QR);qso=r(aDr,"SEWModel"),aDr.forEach(t),Gso=r(wCe," (SEW model)"),wCe.forEach(t),Oso=i(C),Sp=n(C,"LI",{});var ACe=s(Sp);tK=n(ACe,"STRONG",{});var nDr=s(tK);Xso=r(nDr,"sew-d"),nDr.forEach(t),Vso=r(ACe," \u2014 "),HR=n(ACe,"A",{href:!0});var sDr=s(HR);zso=r(sDr,"SEWDModel"),sDr.forEach(t),Wso=r(ACe," (SEW-D model)"),ACe.forEach(t),Qso=i(C),Pp=n(C,"LI",{});var LCe=s(Pp);aK=n(LCe,"STRONG",{});var lDr=s(aK);Hso=r(lDr,"speech_to_text"),lDr.forEach(t),Uso=r(LCe," \u2014 "),UR=n(LCe,"A",{href:!0});var iDr=s(UR);Jso=r(iDr,"Speech2TextModel"),iDr.forEach(t),Yso=r(LCe," (Speech2Text model)"),LCe.forEach(t),Kso=i(C),$p=n(C,"LI",{});var BCe=s($p);nK=n(BCe,"STRONG",{});var dDr=s(nK);Zso=r(dDr,"splinter"),dDr.forEach(t),elo=r(BCe," \u2014 "),JR=n(BCe,"A",{href:!0});var cDr=s(JR);olo=r(cDr,"SplinterModel"),cDr.forEach(t),rlo=r(BCe," (Splinter model)"),BCe.forEach(t),tlo=i(C),Ip=n(C,"LI",{});var xCe=s(Ip);sK=n(xCe,"STRONG",{});var fDr=s(sK);alo=r(fDr,"squeezebert"),fDr.forEach(t),nlo=r(xCe," \u2014 "),YR=n(xCe,"A",{href:!0});var mDr=s(YR);slo=r(mDr,"SqueezeBertModel"),mDr.forEach(t),llo=r(xCe," (SqueezeBERT model)"),xCe.forEach(t),ilo=i(C),Dp=n(C,"LI",{});var kCe=s(Dp);lK=n(kCe,"STRONG",{});var gDr=s(lK);dlo=r(gDr,"swin"),gDr.forEach(t),clo=r(kCe," \u2014 "),KR=n(kCe,"A",{href:!0});var hDr=s(KR);flo=r(hDr,"SwinModel"),hDr.forEach(t),mlo=r(kCe," (Swin model)"),kCe.forEach(t),glo=i(C),jp=n(C,"LI",{});var RCe=s(jp);iK=n(RCe,"STRONG",{});var pDr=s(iK);hlo=r(pDr,"t5"),pDr.forEach(t),plo=r(RCe," \u2014 "),ZR=n(RCe,"A",{href:!0});var _Dr=s(ZR);_lo=r(_Dr,"T5Model"),_Dr.forEach(t),ulo=r(RCe," (T5 model)"),RCe.forEach(t),blo=i(C),Np=n(C,"LI",{});var SCe=s(Np);dK=n(SCe,"STRONG",{});var uDr=s(dK);vlo=r(uDr,"tapas"),uDr.forEach(t),Tlo=r(SCe," \u2014 "),eS=n(SCe,"A",{href:!0});var bDr=s(eS);Flo=r(bDr,"TapasModel"),bDr.forEach(t),Clo=r(SCe," (TAPAS model)"),SCe.forEach(t),Mlo=i(C),qp=n(C,"LI",{});var PCe=s(qp);cK=n(PCe,"STRONG",{});var vDr=s(cK);Elo=r(vDr,"transfo-xl"),vDr.forEach(t),ylo=r(PCe," \u2014 "),oS=n(PCe,"A",{href:!0});var TDr=s(oS);wlo=r(TDr,"TransfoXLModel"),TDr.forEach(t),Alo=r(PCe," (Transformer-XL model)"),PCe.forEach(t),Llo=i(C),Gp=n(C,"LI",{});var $Ce=s(Gp);fK=n($Ce,"STRONG",{});var FDr=s(fK);Blo=r(FDr,"unispeech"),FDr.forEach(t),xlo=r($Ce," \u2014 "),rS=n($Ce,"A",{href:!0});var CDr=s(rS);klo=r(CDr,"UniSpeechModel"),CDr.forEach(t),Rlo=r($Ce," (UniSpeech model)"),$Ce.forEach(t),Slo=i(C),Op=n(C,"LI",{});var ICe=s(Op);mK=n(ICe,"STRONG",{});var MDr=s(mK);Plo=r(MDr,"unispeech-sat"),MDr.forEach(t),$lo=r(ICe," \u2014 "),tS=n(ICe,"A",{href:!0});var EDr=s(tS);Ilo=r(EDr,"UniSpeechSatModel"),EDr.forEach(t),Dlo=r(ICe," (UniSpeechSat model)"),ICe.forEach(t),jlo=i(C),Xp=n(C,"LI",{});var DCe=s(Xp);gK=n(DCe,"STRONG",{});var yDr=s(gK);Nlo=r(yDr,"vilt"),yDr.forEach(t),qlo=r(DCe," \u2014 "),aS=n(DCe,"A",{href:!0});var wDr=s(aS);Glo=r(wDr,"ViltModel"),wDr.forEach(t),Olo=r(DCe," (ViLT model)"),DCe.forEach(t),Xlo=i(C),Vp=n(C,"LI",{});var jCe=s(Vp);hK=n(jCe,"STRONG",{});var ADr=s(hK);Vlo=r(ADr,"vision-text-dual-encoder"),ADr.forEach(t),zlo=r(jCe," \u2014 "),nS=n(jCe,"A",{href:!0});var LDr=s(nS);Wlo=r(LDr,"VisionTextDualEncoderModel"),LDr.forEach(t),Qlo=r(jCe," (VisionTextDualEncoder model)"),jCe.forEach(t),Hlo=i(C),zp=n(C,"LI",{});var NCe=s(zp);pK=n(NCe,"STRONG",{});var BDr=s(pK);Ulo=r(BDr,"visual_bert"),BDr.forEach(t),Jlo=r(NCe," \u2014 "),sS=n(NCe,"A",{href:!0});var xDr=s(sS);Ylo=r(xDr,"VisualBertModel"),xDr.forEach(t),Klo=r(NCe," (VisualBert model)"),NCe.forEach(t),Zlo=i(C),Wp=n(C,"LI",{});var qCe=s(Wp);_K=n(qCe,"STRONG",{});var kDr=s(_K);eio=r(kDr,"vit"),kDr.forEach(t),oio=r(qCe," \u2014 "),lS=n(qCe,"A",{href:!0});var RDr=s(lS);rio=r(RDr,"ViTModel"),RDr.forEach(t),tio=r(qCe," (ViT model)"),qCe.forEach(t),aio=i(C),Qp=n(C,"LI",{});var GCe=s(Qp);uK=n(GCe,"STRONG",{});var SDr=s(uK);nio=r(SDr,"vit_mae"),SDr.forEach(t),sio=r(GCe," \u2014 "),iS=n(GCe,"A",{href:!0});var PDr=s(iS);lio=r(PDr,"ViTMAEModel"),PDr.forEach(t),iio=r(GCe," (ViTMAE model)"),GCe.forEach(t),dio=i(C),Hp=n(C,"LI",{});var OCe=s(Hp);bK=n(OCe,"STRONG",{});var $Dr=s(bK);cio=r($Dr,"wav2vec2"),$Dr.forEach(t),fio=r(OCe," \u2014 "),dS=n(OCe,"A",{href:!0});var IDr=s(dS);mio=r(IDr,"Wav2Vec2Model"),IDr.forEach(t),gio=r(OCe," (Wav2Vec2 model)"),OCe.forEach(t),hio=i(C),Up=n(C,"LI",{});var XCe=s(Up);vK=n(XCe,"STRONG",{});var DDr=s(vK);pio=r(DDr,"wavlm"),DDr.forEach(t),_io=r(XCe," \u2014 "),cS=n(XCe,"A",{href:!0});var jDr=s(cS);uio=r(jDr,"WavLMModel"),jDr.forEach(t),bio=r(XCe," (WavLM model)"),XCe.forEach(t),vio=i(C),Jp=n(C,"LI",{});var VCe=s(Jp);TK=n(VCe,"STRONG",{});var NDr=s(TK);Tio=r(NDr,"xglm"),NDr.forEach(t),Fio=r(VCe," \u2014 "),fS=n(VCe,"A",{href:!0});var qDr=s(fS);Cio=r(qDr,"XGLMModel"),qDr.forEach(t),Mio=r(VCe," (XGLM model)"),VCe.forEach(t),Eio=i(C),Yp=n(C,"LI",{});var zCe=s(Yp);FK=n(zCe,"STRONG",{});var GDr=s(FK);yio=r(GDr,"xlm"),GDr.forEach(t),wio=r(zCe," \u2014 "),mS=n(zCe,"A",{href:!0});var ODr=s(mS);Aio=r(ODr,"XLMModel"),ODr.forEach(t),Lio=r(zCe," (XLM model)"),zCe.forEach(t),Bio=i(C),Kp=n(C,"LI",{});var WCe=s(Kp);CK=n(WCe,"STRONG",{});var XDr=s(CK);xio=r(XDr,"xlm-prophetnet"),XDr.forEach(t),kio=r(WCe," \u2014 "),gS=n(WCe,"A",{href:!0});var VDr=s(gS);Rio=r(VDr,"XLMProphetNetModel"),VDr.forEach(t),Sio=r(WCe," (XLMProphetNet model)"),WCe.forEach(t),Pio=i(C),Zp=n(C,"LI",{});var QCe=s(Zp);MK=n(QCe,"STRONG",{});var zDr=s(MK);$io=r(zDr,"xlm-roberta"),zDr.forEach(t),Iio=r(QCe," \u2014 "),hS=n(QCe,"A",{href:!0});var WDr=s(hS);Dio=r(WDr,"XLMRobertaModel"),WDr.forEach(t),jio=r(QCe," (XLM-RoBERTa model)"),QCe.forEach(t),Nio=i(C),e_=n(C,"LI",{});var HCe=s(e_);EK=n(HCe,"STRONG",{});var QDr=s(EK);qio=r(QDr,"xlm-roberta-xl"),QDr.forEach(t),Gio=r(HCe," \u2014 "),pS=n(HCe,"A",{href:!0});var HDr=s(pS);Oio=r(HDr,"XLMRobertaXLModel"),HDr.forEach(t),Xio=r(HCe," (XLM-RoBERTa-XL model)"),HCe.forEach(t),Vio=i(C),o_=n(C,"LI",{});var UCe=s(o_);yK=n(UCe,"STRONG",{});var UDr=s(yK);zio=r(UDr,"xlnet"),UDr.forEach(t),Wio=r(UCe," \u2014 "),_S=n(UCe,"A",{href:!0});var JDr=s(_S);Qio=r(JDr,"XLNetModel"),JDr.forEach(t),Hio=r(UCe," (XLNet model)"),UCe.forEach(t),Uio=i(C),r_=n(C,"LI",{});var JCe=s(r_);wK=n(JCe,"STRONG",{});var YDr=s(wK);Jio=r(YDr,"yoso"),YDr.forEach(t),Yio=r(JCe," \u2014 "),uS=n(JCe,"A",{href:!0});var KDr=s(uS);Kio=r(KDr,"YosoModel"),KDr.forEach(t),Zio=r(JCe," (YOSO model)"),JCe.forEach(t),C.forEach(t),edo=i($t),t_=n($t,"P",{});var YCe=s(t_);odo=r(YCe,"The model is set in evaluation mode by default using "),AK=n(YCe,"CODE",{});var ZDr=s(AK);rdo=r(ZDr,"model.eval()"),ZDr.forEach(t),tdo=r(YCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LK=n(YCe,"CODE",{});var ejr=s(LK);ado=r(ejr,"model.train()"),ejr.forEach(t),YCe.forEach(t),ndo=i($t),BK=n($t,"P",{});var ojr=s(BK);sdo=r(ojr,"Examples:"),ojr.forEach(t),ldo=i($t),m(i3.$$.fragment,$t),$t.forEach(t),qs.forEach(t),q7e=i(c),zi=n(c,"H2",{class:!0});var Qxe=s(zi);a_=n(Qxe,"A",{id:!0,class:!0,href:!0});var rjr=s(a_);xK=n(rjr,"SPAN",{});var tjr=s(xK);m(d3.$$.fragment,tjr),tjr.forEach(t),rjr.forEach(t),ido=i(Qxe),kK=n(Qxe,"SPAN",{});var ajr=s(kK);ddo=r(ajr,"AutoModelForPreTraining"),ajr.forEach(t),Qxe.forEach(t),G7e=i(c),Ho=n(c,"DIV",{class:!0});var Os=s(Ho);m(c3.$$.fragment,Os),cdo=i(Os),Wi=n(Os,"P",{});var $V=s(Wi);fdo=r($V,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RK=n($V,"CODE",{});var njr=s(RK);mdo=r(njr,"from_pretrained()"),njr.forEach(t),gdo=r($V,"class method or the "),SK=n($V,"CODE",{});var sjr=s(SK);hdo=r(sjr,"from_config()"),sjr.forEach(t),pdo=r($V,`class
method.`),$V.forEach(t),_do=i(Os),f3=n(Os,"P",{});var Hxe=s(f3);udo=r(Hxe,"This class cannot be instantiated directly using "),PK=n(Hxe,"CODE",{});var ljr=s(PK);bdo=r(ljr,"__init__()"),ljr.forEach(t),vdo=r(Hxe," (throws an error)."),Hxe.forEach(t),Tdo=i(Os),Gr=n(Os,"DIV",{class:!0});var Xs=s(Gr);m(m3.$$.fragment,Xs),Fdo=i(Xs),$K=n(Xs,"P",{});var ijr=s($K);Cdo=r(ijr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ijr.forEach(t),Mdo=i(Xs),Qi=n(Xs,"P",{});var IV=s(Qi);Edo=r(IV,`Note:
Loading a model from its configuration file does `),IK=n(IV,"STRONG",{});var djr=s(IK);ydo=r(djr,"not"),djr.forEach(t),wdo=r(IV,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(IV,"CODE",{});var cjr=s(DK);Ado=r(cjr,"from_pretrained()"),cjr.forEach(t),Ldo=r(IV,"to load the model weights."),IV.forEach(t),Bdo=i(Xs),jK=n(Xs,"P",{});var fjr=s(jK);xdo=r(fjr,"Examples:"),fjr.forEach(t),kdo=i(Xs),m(g3.$$.fragment,Xs),Xs.forEach(t),Rdo=i(Os),Se=n(Os,"DIV",{class:!0});var It=s(Se);m(h3.$$.fragment,It),Sdo=i(It),NK=n(It,"P",{});var mjr=s(NK);Pdo=r(mjr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mjr.forEach(t),$do=i(It),qa=n(It,"P",{});var AM=s(qa);Ido=r(AM,"The model class to instantiate is selected based on the "),qK=n(AM,"CODE",{});var gjr=s(qK);Ddo=r(gjr,"model_type"),gjr.forEach(t),jdo=r(AM,` property of the config object (either
passed as an argument or loaded from `),GK=n(AM,"CODE",{});var hjr=s(GK);Ndo=r(hjr,"pretrained_model_name_or_path"),hjr.forEach(t),qdo=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OK=n(AM,"CODE",{});var pjr=s(OK);Gdo=r(pjr,"pretrained_model_name_or_path"),pjr.forEach(t),Odo=r(AM,":"),AM.forEach(t),Xdo=i(It),k=n(It,"UL",{});var S=s(k);n_=n(S,"LI",{});var KCe=s(n_);XK=n(KCe,"STRONG",{});var _jr=s(XK);Vdo=r(_jr,"albert"),_jr.forEach(t),zdo=r(KCe," \u2014 "),bS=n(KCe,"A",{href:!0});var ujr=s(bS);Wdo=r(ujr,"AlbertForPreTraining"),ujr.forEach(t),Qdo=r(KCe," (ALBERT model)"),KCe.forEach(t),Hdo=i(S),s_=n(S,"LI",{});var ZCe=s(s_);VK=n(ZCe,"STRONG",{});var bjr=s(VK);Udo=r(bjr,"bart"),bjr.forEach(t),Jdo=r(ZCe," \u2014 "),vS=n(ZCe,"A",{href:!0});var vjr=s(vS);Ydo=r(vjr,"BartForConditionalGeneration"),vjr.forEach(t),Kdo=r(ZCe," (BART model)"),ZCe.forEach(t),Zdo=i(S),l_=n(S,"LI",{});var e4e=s(l_);zK=n(e4e,"STRONG",{});var Tjr=s(zK);eco=r(Tjr,"bert"),Tjr.forEach(t),oco=r(e4e," \u2014 "),TS=n(e4e,"A",{href:!0});var Fjr=s(TS);rco=r(Fjr,"BertForPreTraining"),Fjr.forEach(t),tco=r(e4e," (BERT model)"),e4e.forEach(t),aco=i(S),i_=n(S,"LI",{});var o4e=s(i_);WK=n(o4e,"STRONG",{});var Cjr=s(WK);nco=r(Cjr,"big_bird"),Cjr.forEach(t),sco=r(o4e," \u2014 "),FS=n(o4e,"A",{href:!0});var Mjr=s(FS);lco=r(Mjr,"BigBirdForPreTraining"),Mjr.forEach(t),ico=r(o4e," (BigBird model)"),o4e.forEach(t),dco=i(S),d_=n(S,"LI",{});var r4e=s(d_);QK=n(r4e,"STRONG",{});var Ejr=s(QK);cco=r(Ejr,"camembert"),Ejr.forEach(t),fco=r(r4e," \u2014 "),CS=n(r4e,"A",{href:!0});var yjr=s(CS);mco=r(yjr,"CamembertForMaskedLM"),yjr.forEach(t),gco=r(r4e," (CamemBERT model)"),r4e.forEach(t),hco=i(S),c_=n(S,"LI",{});var t4e=s(c_);HK=n(t4e,"STRONG",{});var wjr=s(HK);pco=r(wjr,"ctrl"),wjr.forEach(t),_co=r(t4e," \u2014 "),MS=n(t4e,"A",{href:!0});var Ajr=s(MS);uco=r(Ajr,"CTRLLMHeadModel"),Ajr.forEach(t),bco=r(t4e," (CTRL model)"),t4e.forEach(t),vco=i(S),f_=n(S,"LI",{});var a4e=s(f_);UK=n(a4e,"STRONG",{});var Ljr=s(UK);Tco=r(Ljr,"data2vec-text"),Ljr.forEach(t),Fco=r(a4e," \u2014 "),ES=n(a4e,"A",{href:!0});var Bjr=s(ES);Cco=r(Bjr,"Data2VecTextForMaskedLM"),Bjr.forEach(t),Mco=r(a4e," (Data2VecText model)"),a4e.forEach(t),Eco=i(S),m_=n(S,"LI",{});var n4e=s(m_);JK=n(n4e,"STRONG",{});var xjr=s(JK);yco=r(xjr,"deberta"),xjr.forEach(t),wco=r(n4e," \u2014 "),yS=n(n4e,"A",{href:!0});var kjr=s(yS);Aco=r(kjr,"DebertaForMaskedLM"),kjr.forEach(t),Lco=r(n4e," (DeBERTa model)"),n4e.forEach(t),Bco=i(S),g_=n(S,"LI",{});var s4e=s(g_);YK=n(s4e,"STRONG",{});var Rjr=s(YK);xco=r(Rjr,"deberta-v2"),Rjr.forEach(t),kco=r(s4e," \u2014 "),wS=n(s4e,"A",{href:!0});var Sjr=s(wS);Rco=r(Sjr,"DebertaV2ForMaskedLM"),Sjr.forEach(t),Sco=r(s4e," (DeBERTa-v2 model)"),s4e.forEach(t),Pco=i(S),h_=n(S,"LI",{});var l4e=s(h_);KK=n(l4e,"STRONG",{});var Pjr=s(KK);$co=r(Pjr,"distilbert"),Pjr.forEach(t),Ico=r(l4e," \u2014 "),AS=n(l4e,"A",{href:!0});var $jr=s(AS);Dco=r($jr,"DistilBertForMaskedLM"),$jr.forEach(t),jco=r(l4e," (DistilBERT model)"),l4e.forEach(t),Nco=i(S),p_=n(S,"LI",{});var i4e=s(p_);ZK=n(i4e,"STRONG",{});var Ijr=s(ZK);qco=r(Ijr,"electra"),Ijr.forEach(t),Gco=r(i4e," \u2014 "),LS=n(i4e,"A",{href:!0});var Djr=s(LS);Oco=r(Djr,"ElectraForPreTraining"),Djr.forEach(t),Xco=r(i4e," (ELECTRA model)"),i4e.forEach(t),Vco=i(S),__=n(S,"LI",{});var d4e=s(__);eZ=n(d4e,"STRONG",{});var jjr=s(eZ);zco=r(jjr,"flaubert"),jjr.forEach(t),Wco=r(d4e," \u2014 "),BS=n(d4e,"A",{href:!0});var Njr=s(BS);Qco=r(Njr,"FlaubertWithLMHeadModel"),Njr.forEach(t),Hco=r(d4e," (FlauBERT model)"),d4e.forEach(t),Uco=i(S),u_=n(S,"LI",{});var c4e=s(u_);oZ=n(c4e,"STRONG",{});var qjr=s(oZ);Jco=r(qjr,"fnet"),qjr.forEach(t),Yco=r(c4e," \u2014 "),xS=n(c4e,"A",{href:!0});var Gjr=s(xS);Kco=r(Gjr,"FNetForPreTraining"),Gjr.forEach(t),Zco=r(c4e," (FNet model)"),c4e.forEach(t),efo=i(S),b_=n(S,"LI",{});var f4e=s(b_);rZ=n(f4e,"STRONG",{});var Ojr=s(rZ);ofo=r(Ojr,"fsmt"),Ojr.forEach(t),rfo=r(f4e," \u2014 "),kS=n(f4e,"A",{href:!0});var Xjr=s(kS);tfo=r(Xjr,"FSMTForConditionalGeneration"),Xjr.forEach(t),afo=r(f4e," (FairSeq Machine-Translation model)"),f4e.forEach(t),nfo=i(S),v_=n(S,"LI",{});var m4e=s(v_);tZ=n(m4e,"STRONG",{});var Vjr=s(tZ);sfo=r(Vjr,"funnel"),Vjr.forEach(t),lfo=r(m4e," \u2014 "),RS=n(m4e,"A",{href:!0});var zjr=s(RS);ifo=r(zjr,"FunnelForPreTraining"),zjr.forEach(t),dfo=r(m4e," (Funnel Transformer model)"),m4e.forEach(t),cfo=i(S),T_=n(S,"LI",{});var g4e=s(T_);aZ=n(g4e,"STRONG",{});var Wjr=s(aZ);ffo=r(Wjr,"gpt2"),Wjr.forEach(t),mfo=r(g4e," \u2014 "),SS=n(g4e,"A",{href:!0});var Qjr=s(SS);gfo=r(Qjr,"GPT2LMHeadModel"),Qjr.forEach(t),hfo=r(g4e," (OpenAI GPT-2 model)"),g4e.forEach(t),pfo=i(S),F_=n(S,"LI",{});var h4e=s(F_);nZ=n(h4e,"STRONG",{});var Hjr=s(nZ);_fo=r(Hjr,"ibert"),Hjr.forEach(t),ufo=r(h4e," \u2014 "),PS=n(h4e,"A",{href:!0});var Ujr=s(PS);bfo=r(Ujr,"IBertForMaskedLM"),Ujr.forEach(t),vfo=r(h4e," (I-BERT model)"),h4e.forEach(t),Tfo=i(S),C_=n(S,"LI",{});var p4e=s(C_);sZ=n(p4e,"STRONG",{});var Jjr=s(sZ);Ffo=r(Jjr,"layoutlm"),Jjr.forEach(t),Cfo=r(p4e," \u2014 "),$S=n(p4e,"A",{href:!0});var Yjr=s($S);Mfo=r(Yjr,"LayoutLMForMaskedLM"),Yjr.forEach(t),Efo=r(p4e," (LayoutLM model)"),p4e.forEach(t),yfo=i(S),M_=n(S,"LI",{});var _4e=s(M_);lZ=n(_4e,"STRONG",{});var Kjr=s(lZ);wfo=r(Kjr,"longformer"),Kjr.forEach(t),Afo=r(_4e," \u2014 "),IS=n(_4e,"A",{href:!0});var Zjr=s(IS);Lfo=r(Zjr,"LongformerForMaskedLM"),Zjr.forEach(t),Bfo=r(_4e," (Longformer model)"),_4e.forEach(t),xfo=i(S),E_=n(S,"LI",{});var u4e=s(E_);iZ=n(u4e,"STRONG",{});var eNr=s(iZ);kfo=r(eNr,"lxmert"),eNr.forEach(t),Rfo=r(u4e," \u2014 "),DS=n(u4e,"A",{href:!0});var oNr=s(DS);Sfo=r(oNr,"LxmertForPreTraining"),oNr.forEach(t),Pfo=r(u4e," (LXMERT model)"),u4e.forEach(t),$fo=i(S),y_=n(S,"LI",{});var b4e=s(y_);dZ=n(b4e,"STRONG",{});var rNr=s(dZ);Ifo=r(rNr,"megatron-bert"),rNr.forEach(t),Dfo=r(b4e," \u2014 "),jS=n(b4e,"A",{href:!0});var tNr=s(jS);jfo=r(tNr,"MegatronBertForPreTraining"),tNr.forEach(t),Nfo=r(b4e," (MegatronBert model)"),b4e.forEach(t),qfo=i(S),w_=n(S,"LI",{});var v4e=s(w_);cZ=n(v4e,"STRONG",{});var aNr=s(cZ);Gfo=r(aNr,"mobilebert"),aNr.forEach(t),Ofo=r(v4e," \u2014 "),NS=n(v4e,"A",{href:!0});var nNr=s(NS);Xfo=r(nNr,"MobileBertForPreTraining"),nNr.forEach(t),Vfo=r(v4e," (MobileBERT model)"),v4e.forEach(t),zfo=i(S),A_=n(S,"LI",{});var T4e=s(A_);fZ=n(T4e,"STRONG",{});var sNr=s(fZ);Wfo=r(sNr,"mpnet"),sNr.forEach(t),Qfo=r(T4e," \u2014 "),qS=n(T4e,"A",{href:!0});var lNr=s(qS);Hfo=r(lNr,"MPNetForMaskedLM"),lNr.forEach(t),Ufo=r(T4e," (MPNet model)"),T4e.forEach(t),Jfo=i(S),L_=n(S,"LI",{});var F4e=s(L_);mZ=n(F4e,"STRONG",{});var iNr=s(mZ);Yfo=r(iNr,"openai-gpt"),iNr.forEach(t),Kfo=r(F4e," \u2014 "),GS=n(F4e,"A",{href:!0});var dNr=s(GS);Zfo=r(dNr,"OpenAIGPTLMHeadModel"),dNr.forEach(t),emo=r(F4e," (OpenAI GPT model)"),F4e.forEach(t),omo=i(S),B_=n(S,"LI",{});var C4e=s(B_);gZ=n(C4e,"STRONG",{});var cNr=s(gZ);rmo=r(cNr,"retribert"),cNr.forEach(t),tmo=r(C4e," \u2014 "),OS=n(C4e,"A",{href:!0});var fNr=s(OS);amo=r(fNr,"RetriBertModel"),fNr.forEach(t),nmo=r(C4e," (RetriBERT model)"),C4e.forEach(t),smo=i(S),x_=n(S,"LI",{});var M4e=s(x_);hZ=n(M4e,"STRONG",{});var mNr=s(hZ);lmo=r(mNr,"roberta"),mNr.forEach(t),imo=r(M4e," \u2014 "),XS=n(M4e,"A",{href:!0});var gNr=s(XS);dmo=r(gNr,"RobertaForMaskedLM"),gNr.forEach(t),cmo=r(M4e," (RoBERTa model)"),M4e.forEach(t),fmo=i(S),k_=n(S,"LI",{});var E4e=s(k_);pZ=n(E4e,"STRONG",{});var hNr=s(pZ);mmo=r(hNr,"squeezebert"),hNr.forEach(t),gmo=r(E4e," \u2014 "),VS=n(E4e,"A",{href:!0});var pNr=s(VS);hmo=r(pNr,"SqueezeBertForMaskedLM"),pNr.forEach(t),pmo=r(E4e," (SqueezeBERT model)"),E4e.forEach(t),_mo=i(S),R_=n(S,"LI",{});var y4e=s(R_);_Z=n(y4e,"STRONG",{});var _Nr=s(_Z);umo=r(_Nr,"t5"),_Nr.forEach(t),bmo=r(y4e," \u2014 "),zS=n(y4e,"A",{href:!0});var uNr=s(zS);vmo=r(uNr,"T5ForConditionalGeneration"),uNr.forEach(t),Tmo=r(y4e," (T5 model)"),y4e.forEach(t),Fmo=i(S),S_=n(S,"LI",{});var w4e=s(S_);uZ=n(w4e,"STRONG",{});var bNr=s(uZ);Cmo=r(bNr,"tapas"),bNr.forEach(t),Mmo=r(w4e," \u2014 "),WS=n(w4e,"A",{href:!0});var vNr=s(WS);Emo=r(vNr,"TapasForMaskedLM"),vNr.forEach(t),ymo=r(w4e," (TAPAS model)"),w4e.forEach(t),wmo=i(S),P_=n(S,"LI",{});var A4e=s(P_);bZ=n(A4e,"STRONG",{});var TNr=s(bZ);Amo=r(TNr,"transfo-xl"),TNr.forEach(t),Lmo=r(A4e," \u2014 "),QS=n(A4e,"A",{href:!0});var FNr=s(QS);Bmo=r(FNr,"TransfoXLLMHeadModel"),FNr.forEach(t),xmo=r(A4e," (Transformer-XL model)"),A4e.forEach(t),kmo=i(S),$_=n(S,"LI",{});var L4e=s($_);vZ=n(L4e,"STRONG",{});var CNr=s(vZ);Rmo=r(CNr,"unispeech"),CNr.forEach(t),Smo=r(L4e," \u2014 "),HS=n(L4e,"A",{href:!0});var MNr=s(HS);Pmo=r(MNr,"UniSpeechForPreTraining"),MNr.forEach(t),$mo=r(L4e," (UniSpeech model)"),L4e.forEach(t),Imo=i(S),I_=n(S,"LI",{});var B4e=s(I_);TZ=n(B4e,"STRONG",{});var ENr=s(TZ);Dmo=r(ENr,"unispeech-sat"),ENr.forEach(t),jmo=r(B4e," \u2014 "),US=n(B4e,"A",{href:!0});var yNr=s(US);Nmo=r(yNr,"UniSpeechSatForPreTraining"),yNr.forEach(t),qmo=r(B4e," (UniSpeechSat model)"),B4e.forEach(t),Gmo=i(S),D_=n(S,"LI",{});var x4e=s(D_);FZ=n(x4e,"STRONG",{});var wNr=s(FZ);Omo=r(wNr,"visual_bert"),wNr.forEach(t),Xmo=r(x4e," \u2014 "),JS=n(x4e,"A",{href:!0});var ANr=s(JS);Vmo=r(ANr,"VisualBertForPreTraining"),ANr.forEach(t),zmo=r(x4e," (VisualBert model)"),x4e.forEach(t),Wmo=i(S),j_=n(S,"LI",{});var k4e=s(j_);CZ=n(k4e,"STRONG",{});var LNr=s(CZ);Qmo=r(LNr,"vit_mae"),LNr.forEach(t),Hmo=r(k4e," \u2014 "),YS=n(k4e,"A",{href:!0});var BNr=s(YS);Umo=r(BNr,"ViTMAEForPreTraining"),BNr.forEach(t),Jmo=r(k4e," (ViTMAE model)"),k4e.forEach(t),Ymo=i(S),N_=n(S,"LI",{});var R4e=s(N_);MZ=n(R4e,"STRONG",{});var xNr=s(MZ);Kmo=r(xNr,"wav2vec2"),xNr.forEach(t),Zmo=r(R4e," \u2014 "),KS=n(R4e,"A",{href:!0});var kNr=s(KS);ego=r(kNr,"Wav2Vec2ForPreTraining"),kNr.forEach(t),ogo=r(R4e," (Wav2Vec2 model)"),R4e.forEach(t),rgo=i(S),q_=n(S,"LI",{});var S4e=s(q_);EZ=n(S4e,"STRONG",{});var RNr=s(EZ);tgo=r(RNr,"xlm"),RNr.forEach(t),ago=r(S4e," \u2014 "),ZS=n(S4e,"A",{href:!0});var SNr=s(ZS);ngo=r(SNr,"XLMWithLMHeadModel"),SNr.forEach(t),sgo=r(S4e," (XLM model)"),S4e.forEach(t),lgo=i(S),G_=n(S,"LI",{});var P4e=s(G_);yZ=n(P4e,"STRONG",{});var PNr=s(yZ);igo=r(PNr,"xlm-roberta"),PNr.forEach(t),dgo=r(P4e," \u2014 "),eP=n(P4e,"A",{href:!0});var $Nr=s(eP);cgo=r($Nr,"XLMRobertaForMaskedLM"),$Nr.forEach(t),fgo=r(P4e," (XLM-RoBERTa model)"),P4e.forEach(t),mgo=i(S),O_=n(S,"LI",{});var $4e=s(O_);wZ=n($4e,"STRONG",{});var INr=s(wZ);ggo=r(INr,"xlm-roberta-xl"),INr.forEach(t),hgo=r($4e," \u2014 "),oP=n($4e,"A",{href:!0});var DNr=s(oP);pgo=r(DNr,"XLMRobertaXLForMaskedLM"),DNr.forEach(t),_go=r($4e," (XLM-RoBERTa-XL model)"),$4e.forEach(t),ugo=i(S),X_=n(S,"LI",{});var I4e=s(X_);AZ=n(I4e,"STRONG",{});var jNr=s(AZ);bgo=r(jNr,"xlnet"),jNr.forEach(t),vgo=r(I4e," \u2014 "),rP=n(I4e,"A",{href:!0});var NNr=s(rP);Tgo=r(NNr,"XLNetLMHeadModel"),NNr.forEach(t),Fgo=r(I4e," (XLNet model)"),I4e.forEach(t),S.forEach(t),Cgo=i(It),V_=n(It,"P",{});var D4e=s(V_);Mgo=r(D4e,"The model is set in evaluation mode by default using "),LZ=n(D4e,"CODE",{});var qNr=s(LZ);Ego=r(qNr,"model.eval()"),qNr.forEach(t),ygo=r(D4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BZ=n(D4e,"CODE",{});var GNr=s(BZ);wgo=r(GNr,"model.train()"),GNr.forEach(t),D4e.forEach(t),Ago=i(It),xZ=n(It,"P",{});var ONr=s(xZ);Lgo=r(ONr,"Examples:"),ONr.forEach(t),Bgo=i(It),m(p3.$$.fragment,It),It.forEach(t),Os.forEach(t),O7e=i(c),Hi=n(c,"H2",{class:!0});var Uxe=s(Hi);z_=n(Uxe,"A",{id:!0,class:!0,href:!0});var XNr=s(z_);kZ=n(XNr,"SPAN",{});var VNr=s(kZ);m(_3.$$.fragment,VNr),VNr.forEach(t),XNr.forEach(t),xgo=i(Uxe),RZ=n(Uxe,"SPAN",{});var zNr=s(RZ);kgo=r(zNr,"AutoModelForCausalLM"),zNr.forEach(t),Uxe.forEach(t),X7e=i(c),Uo=n(c,"DIV",{class:!0});var Vs=s(Uo);m(u3.$$.fragment,Vs),Rgo=i(Vs),Ui=n(Vs,"P",{});var DV=s(Ui);Sgo=r(DV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SZ=n(DV,"CODE",{});var WNr=s(SZ);Pgo=r(WNr,"from_pretrained()"),WNr.forEach(t),$go=r(DV,"class method or the "),PZ=n(DV,"CODE",{});var QNr=s(PZ);Igo=r(QNr,"from_config()"),QNr.forEach(t),Dgo=r(DV,`class
method.`),DV.forEach(t),jgo=i(Vs),b3=n(Vs,"P",{});var Jxe=s(b3);Ngo=r(Jxe,"This class cannot be instantiated directly using "),$Z=n(Jxe,"CODE",{});var HNr=s($Z);qgo=r(HNr,"__init__()"),HNr.forEach(t),Ggo=r(Jxe," (throws an error)."),Jxe.forEach(t),Ogo=i(Vs),Or=n(Vs,"DIV",{class:!0});var zs=s(Or);m(v3.$$.fragment,zs),Xgo=i(zs),IZ=n(zs,"P",{});var UNr=s(IZ);Vgo=r(UNr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UNr.forEach(t),zgo=i(zs),Ji=n(zs,"P",{});var jV=s(Ji);Wgo=r(jV,`Note:
Loading a model from its configuration file does `),DZ=n(jV,"STRONG",{});var JNr=s(DZ);Qgo=r(JNr,"not"),JNr.forEach(t),Hgo=r(jV,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(jV,"CODE",{});var YNr=s(jZ);Ugo=r(YNr,"from_pretrained()"),YNr.forEach(t),Jgo=r(jV,"to load the model weights."),jV.forEach(t),Ygo=i(zs),NZ=n(zs,"P",{});var KNr=s(NZ);Kgo=r(KNr,"Examples:"),KNr.forEach(t),Zgo=i(zs),m(T3.$$.fragment,zs),zs.forEach(t),eho=i(Vs),Pe=n(Vs,"DIV",{class:!0});var Dt=s(Pe);m(F3.$$.fragment,Dt),oho=i(Dt),qZ=n(Dt,"P",{});var ZNr=s(qZ);rho=r(ZNr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZNr.forEach(t),tho=i(Dt),Ga=n(Dt,"P",{});var LM=s(Ga);aho=r(LM,"The model class to instantiate is selected based on the "),GZ=n(LM,"CODE",{});var eqr=s(GZ);nho=r(eqr,"model_type"),eqr.forEach(t),sho=r(LM,` property of the config object (either
passed as an argument or loaded from `),OZ=n(LM,"CODE",{});var oqr=s(OZ);lho=r(oqr,"pretrained_model_name_or_path"),oqr.forEach(t),iho=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XZ=n(LM,"CODE",{});var rqr=s(XZ);dho=r(rqr,"pretrained_model_name_or_path"),rqr.forEach(t),cho=r(LM,":"),LM.forEach(t),fho=i(Dt),$=n(Dt,"UL",{});var D=s($);W_=n(D,"LI",{});var j4e=s(W_);VZ=n(j4e,"STRONG",{});var tqr=s(VZ);mho=r(tqr,"bart"),tqr.forEach(t),gho=r(j4e," \u2014 "),tP=n(j4e,"A",{href:!0});var aqr=s(tP);hho=r(aqr,"BartForCausalLM"),aqr.forEach(t),pho=r(j4e," (BART model)"),j4e.forEach(t),_ho=i(D),Q_=n(D,"LI",{});var N4e=s(Q_);zZ=n(N4e,"STRONG",{});var nqr=s(zZ);uho=r(nqr,"bert"),nqr.forEach(t),bho=r(N4e," \u2014 "),aP=n(N4e,"A",{href:!0});var sqr=s(aP);vho=r(sqr,"BertLMHeadModel"),sqr.forEach(t),Tho=r(N4e," (BERT model)"),N4e.forEach(t),Fho=i(D),H_=n(D,"LI",{});var q4e=s(H_);WZ=n(q4e,"STRONG",{});var lqr=s(WZ);Cho=r(lqr,"bert-generation"),lqr.forEach(t),Mho=r(q4e," \u2014 "),nP=n(q4e,"A",{href:!0});var iqr=s(nP);Eho=r(iqr,"BertGenerationDecoder"),iqr.forEach(t),yho=r(q4e," (Bert Generation model)"),q4e.forEach(t),who=i(D),U_=n(D,"LI",{});var G4e=s(U_);QZ=n(G4e,"STRONG",{});var dqr=s(QZ);Aho=r(dqr,"big_bird"),dqr.forEach(t),Lho=r(G4e," \u2014 "),sP=n(G4e,"A",{href:!0});var cqr=s(sP);Bho=r(cqr,"BigBirdForCausalLM"),cqr.forEach(t),xho=r(G4e," (BigBird model)"),G4e.forEach(t),kho=i(D),J_=n(D,"LI",{});var O4e=s(J_);HZ=n(O4e,"STRONG",{});var fqr=s(HZ);Rho=r(fqr,"bigbird_pegasus"),fqr.forEach(t),Sho=r(O4e," \u2014 "),lP=n(O4e,"A",{href:!0});var mqr=s(lP);Pho=r(mqr,"BigBirdPegasusForCausalLM"),mqr.forEach(t),$ho=r(O4e," (BigBirdPegasus model)"),O4e.forEach(t),Iho=i(D),Y_=n(D,"LI",{});var X4e=s(Y_);UZ=n(X4e,"STRONG",{});var gqr=s(UZ);Dho=r(gqr,"blenderbot"),gqr.forEach(t),jho=r(X4e," \u2014 "),iP=n(X4e,"A",{href:!0});var hqr=s(iP);Nho=r(hqr,"BlenderbotForCausalLM"),hqr.forEach(t),qho=r(X4e," (Blenderbot model)"),X4e.forEach(t),Gho=i(D),K_=n(D,"LI",{});var V4e=s(K_);JZ=n(V4e,"STRONG",{});var pqr=s(JZ);Oho=r(pqr,"blenderbot-small"),pqr.forEach(t),Xho=r(V4e," \u2014 "),dP=n(V4e,"A",{href:!0});var _qr=s(dP);Vho=r(_qr,"BlenderbotSmallForCausalLM"),_qr.forEach(t),zho=r(V4e," (BlenderbotSmall model)"),V4e.forEach(t),Who=i(D),Z_=n(D,"LI",{});var z4e=s(Z_);YZ=n(z4e,"STRONG",{});var uqr=s(YZ);Qho=r(uqr,"camembert"),uqr.forEach(t),Hho=r(z4e," \u2014 "),cP=n(z4e,"A",{href:!0});var bqr=s(cP);Uho=r(bqr,"CamembertForCausalLM"),bqr.forEach(t),Jho=r(z4e," (CamemBERT model)"),z4e.forEach(t),Yho=i(D),eu=n(D,"LI",{});var W4e=s(eu);KZ=n(W4e,"STRONG",{});var vqr=s(KZ);Kho=r(vqr,"ctrl"),vqr.forEach(t),Zho=r(W4e," \u2014 "),fP=n(W4e,"A",{href:!0});var Tqr=s(fP);epo=r(Tqr,"CTRLLMHeadModel"),Tqr.forEach(t),opo=r(W4e," (CTRL model)"),W4e.forEach(t),rpo=i(D),ou=n(D,"LI",{});var Q4e=s(ou);ZZ=n(Q4e,"STRONG",{});var Fqr=s(ZZ);tpo=r(Fqr,"data2vec-text"),Fqr.forEach(t),apo=r(Q4e," \u2014 "),mP=n(Q4e,"A",{href:!0});var Cqr=s(mP);npo=r(Cqr,"Data2VecTextForCausalLM"),Cqr.forEach(t),spo=r(Q4e," (Data2VecText model)"),Q4e.forEach(t),lpo=i(D),ru=n(D,"LI",{});var H4e=s(ru);eee=n(H4e,"STRONG",{});var Mqr=s(eee);ipo=r(Mqr,"electra"),Mqr.forEach(t),dpo=r(H4e," \u2014 "),gP=n(H4e,"A",{href:!0});var Eqr=s(gP);cpo=r(Eqr,"ElectraForCausalLM"),Eqr.forEach(t),fpo=r(H4e," (ELECTRA model)"),H4e.forEach(t),mpo=i(D),tu=n(D,"LI",{});var U4e=s(tu);oee=n(U4e,"STRONG",{});var yqr=s(oee);gpo=r(yqr,"gpt2"),yqr.forEach(t),hpo=r(U4e," \u2014 "),hP=n(U4e,"A",{href:!0});var wqr=s(hP);ppo=r(wqr,"GPT2LMHeadModel"),wqr.forEach(t),_po=r(U4e," (OpenAI GPT-2 model)"),U4e.forEach(t),upo=i(D),au=n(D,"LI",{});var J4e=s(au);ree=n(J4e,"STRONG",{});var Aqr=s(ree);bpo=r(Aqr,"gpt_neo"),Aqr.forEach(t),vpo=r(J4e," \u2014 "),pP=n(J4e,"A",{href:!0});var Lqr=s(pP);Tpo=r(Lqr,"GPTNeoForCausalLM"),Lqr.forEach(t),Fpo=r(J4e," (GPT Neo model)"),J4e.forEach(t),Cpo=i(D),nu=n(D,"LI",{});var Y4e=s(nu);tee=n(Y4e,"STRONG",{});var Bqr=s(tee);Mpo=r(Bqr,"gptj"),Bqr.forEach(t),Epo=r(Y4e," \u2014 "),_P=n(Y4e,"A",{href:!0});var xqr=s(_P);ypo=r(xqr,"GPTJForCausalLM"),xqr.forEach(t),wpo=r(Y4e," (GPT-J model)"),Y4e.forEach(t),Apo=i(D),su=n(D,"LI",{});var K4e=s(su);aee=n(K4e,"STRONG",{});var kqr=s(aee);Lpo=r(kqr,"marian"),kqr.forEach(t),Bpo=r(K4e," \u2014 "),uP=n(K4e,"A",{href:!0});var Rqr=s(uP);xpo=r(Rqr,"MarianForCausalLM"),Rqr.forEach(t),kpo=r(K4e," (Marian model)"),K4e.forEach(t),Rpo=i(D),lu=n(D,"LI",{});var Z4e=s(lu);nee=n(Z4e,"STRONG",{});var Sqr=s(nee);Spo=r(Sqr,"mbart"),Sqr.forEach(t),Ppo=r(Z4e," \u2014 "),bP=n(Z4e,"A",{href:!0});var Pqr=s(bP);$po=r(Pqr,"MBartForCausalLM"),Pqr.forEach(t),Ipo=r(Z4e," (mBART model)"),Z4e.forEach(t),Dpo=i(D),iu=n(D,"LI",{});var eMe=s(iu);see=n(eMe,"STRONG",{});var $qr=s(see);jpo=r($qr,"megatron-bert"),$qr.forEach(t),Npo=r(eMe," \u2014 "),vP=n(eMe,"A",{href:!0});var Iqr=s(vP);qpo=r(Iqr,"MegatronBertForCausalLM"),Iqr.forEach(t),Gpo=r(eMe," (MegatronBert model)"),eMe.forEach(t),Opo=i(D),du=n(D,"LI",{});var oMe=s(du);lee=n(oMe,"STRONG",{});var Dqr=s(lee);Xpo=r(Dqr,"openai-gpt"),Dqr.forEach(t),Vpo=r(oMe," \u2014 "),TP=n(oMe,"A",{href:!0});var jqr=s(TP);zpo=r(jqr,"OpenAIGPTLMHeadModel"),jqr.forEach(t),Wpo=r(oMe," (OpenAI GPT model)"),oMe.forEach(t),Qpo=i(D),cu=n(D,"LI",{});var rMe=s(cu);iee=n(rMe,"STRONG",{});var Nqr=s(iee);Hpo=r(Nqr,"pegasus"),Nqr.forEach(t),Upo=r(rMe," \u2014 "),FP=n(rMe,"A",{href:!0});var qqr=s(FP);Jpo=r(qqr,"PegasusForCausalLM"),qqr.forEach(t),Ypo=r(rMe," (Pegasus model)"),rMe.forEach(t),Kpo=i(D),fu=n(D,"LI",{});var tMe=s(fu);dee=n(tMe,"STRONG",{});var Gqr=s(dee);Zpo=r(Gqr,"plbart"),Gqr.forEach(t),e_o=r(tMe," \u2014 "),CP=n(tMe,"A",{href:!0});var Oqr=s(CP);o_o=r(Oqr,"PLBartForCausalLM"),Oqr.forEach(t),r_o=r(tMe," (PLBart model)"),tMe.forEach(t),t_o=i(D),mu=n(D,"LI",{});var aMe=s(mu);cee=n(aMe,"STRONG",{});var Xqr=s(cee);a_o=r(Xqr,"prophetnet"),Xqr.forEach(t),n_o=r(aMe," \u2014 "),MP=n(aMe,"A",{href:!0});var Vqr=s(MP);s_o=r(Vqr,"ProphetNetForCausalLM"),Vqr.forEach(t),l_o=r(aMe," (ProphetNet model)"),aMe.forEach(t),i_o=i(D),gu=n(D,"LI",{});var nMe=s(gu);fee=n(nMe,"STRONG",{});var zqr=s(fee);d_o=r(zqr,"qdqbert"),zqr.forEach(t),c_o=r(nMe," \u2014 "),EP=n(nMe,"A",{href:!0});var Wqr=s(EP);f_o=r(Wqr,"QDQBertLMHeadModel"),Wqr.forEach(t),m_o=r(nMe," (QDQBert model)"),nMe.forEach(t),g_o=i(D),hu=n(D,"LI",{});var sMe=s(hu);mee=n(sMe,"STRONG",{});var Qqr=s(mee);h_o=r(Qqr,"reformer"),Qqr.forEach(t),p_o=r(sMe," \u2014 "),yP=n(sMe,"A",{href:!0});var Hqr=s(yP);__o=r(Hqr,"ReformerModelWithLMHead"),Hqr.forEach(t),u_o=r(sMe," (Reformer model)"),sMe.forEach(t),b_o=i(D),pu=n(D,"LI",{});var lMe=s(pu);gee=n(lMe,"STRONG",{});var Uqr=s(gee);v_o=r(Uqr,"rembert"),Uqr.forEach(t),T_o=r(lMe," \u2014 "),wP=n(lMe,"A",{href:!0});var Jqr=s(wP);F_o=r(Jqr,"RemBertForCausalLM"),Jqr.forEach(t),C_o=r(lMe," (RemBERT model)"),lMe.forEach(t),M_o=i(D),_u=n(D,"LI",{});var iMe=s(_u);hee=n(iMe,"STRONG",{});var Yqr=s(hee);E_o=r(Yqr,"roberta"),Yqr.forEach(t),y_o=r(iMe," \u2014 "),AP=n(iMe,"A",{href:!0});var Kqr=s(AP);w_o=r(Kqr,"RobertaForCausalLM"),Kqr.forEach(t),A_o=r(iMe," (RoBERTa model)"),iMe.forEach(t),L_o=i(D),uu=n(D,"LI",{});var dMe=s(uu);pee=n(dMe,"STRONG",{});var Zqr=s(pee);B_o=r(Zqr,"roformer"),Zqr.forEach(t),x_o=r(dMe," \u2014 "),LP=n(dMe,"A",{href:!0});var eGr=s(LP);k_o=r(eGr,"RoFormerForCausalLM"),eGr.forEach(t),R_o=r(dMe," (RoFormer model)"),dMe.forEach(t),S_o=i(D),bu=n(D,"LI",{});var cMe=s(bu);_ee=n(cMe,"STRONG",{});var oGr=s(_ee);P_o=r(oGr,"speech_to_text_2"),oGr.forEach(t),$_o=r(cMe," \u2014 "),BP=n(cMe,"A",{href:!0});var rGr=s(BP);I_o=r(rGr,"Speech2Text2ForCausalLM"),rGr.forEach(t),D_o=r(cMe," (Speech2Text2 model)"),cMe.forEach(t),j_o=i(D),vu=n(D,"LI",{});var fMe=s(vu);uee=n(fMe,"STRONG",{});var tGr=s(uee);N_o=r(tGr,"transfo-xl"),tGr.forEach(t),q_o=r(fMe," \u2014 "),xP=n(fMe,"A",{href:!0});var aGr=s(xP);G_o=r(aGr,"TransfoXLLMHeadModel"),aGr.forEach(t),O_o=r(fMe," (Transformer-XL model)"),fMe.forEach(t),X_o=i(D),Tu=n(D,"LI",{});var mMe=s(Tu);bee=n(mMe,"STRONG",{});var nGr=s(bee);V_o=r(nGr,"trocr"),nGr.forEach(t),z_o=r(mMe," \u2014 "),kP=n(mMe,"A",{href:!0});var sGr=s(kP);W_o=r(sGr,"TrOCRForCausalLM"),sGr.forEach(t),Q_o=r(mMe," (TrOCR model)"),mMe.forEach(t),H_o=i(D),Fu=n(D,"LI",{});var gMe=s(Fu);vee=n(gMe,"STRONG",{});var lGr=s(vee);U_o=r(lGr,"xglm"),lGr.forEach(t),J_o=r(gMe," \u2014 "),RP=n(gMe,"A",{href:!0});var iGr=s(RP);Y_o=r(iGr,"XGLMForCausalLM"),iGr.forEach(t),K_o=r(gMe," (XGLM model)"),gMe.forEach(t),Z_o=i(D),Cu=n(D,"LI",{});var hMe=s(Cu);Tee=n(hMe,"STRONG",{});var dGr=s(Tee);euo=r(dGr,"xlm"),dGr.forEach(t),ouo=r(hMe," \u2014 "),SP=n(hMe,"A",{href:!0});var cGr=s(SP);ruo=r(cGr,"XLMWithLMHeadModel"),cGr.forEach(t),tuo=r(hMe," (XLM model)"),hMe.forEach(t),auo=i(D),Mu=n(D,"LI",{});var pMe=s(Mu);Fee=n(pMe,"STRONG",{});var fGr=s(Fee);nuo=r(fGr,"xlm-prophetnet"),fGr.forEach(t),suo=r(pMe," \u2014 "),PP=n(pMe,"A",{href:!0});var mGr=s(PP);luo=r(mGr,"XLMProphetNetForCausalLM"),mGr.forEach(t),iuo=r(pMe," (XLMProphetNet model)"),pMe.forEach(t),duo=i(D),Eu=n(D,"LI",{});var _Me=s(Eu);Cee=n(_Me,"STRONG",{});var gGr=s(Cee);cuo=r(gGr,"xlm-roberta"),gGr.forEach(t),fuo=r(_Me," \u2014 "),$P=n(_Me,"A",{href:!0});var hGr=s($P);muo=r(hGr,"XLMRobertaForCausalLM"),hGr.forEach(t),guo=r(_Me," (XLM-RoBERTa model)"),_Me.forEach(t),huo=i(D),yu=n(D,"LI",{});var uMe=s(yu);Mee=n(uMe,"STRONG",{});var pGr=s(Mee);puo=r(pGr,"xlm-roberta-xl"),pGr.forEach(t),_uo=r(uMe," \u2014 "),IP=n(uMe,"A",{href:!0});var _Gr=s(IP);uuo=r(_Gr,"XLMRobertaXLForCausalLM"),_Gr.forEach(t),buo=r(uMe," (XLM-RoBERTa-XL model)"),uMe.forEach(t),vuo=i(D),wu=n(D,"LI",{});var bMe=s(wu);Eee=n(bMe,"STRONG",{});var uGr=s(Eee);Tuo=r(uGr,"xlnet"),uGr.forEach(t),Fuo=r(bMe," \u2014 "),DP=n(bMe,"A",{href:!0});var bGr=s(DP);Cuo=r(bGr,"XLNetLMHeadModel"),bGr.forEach(t),Muo=r(bMe," (XLNet model)"),bMe.forEach(t),D.forEach(t),Euo=i(Dt),Au=n(Dt,"P",{});var vMe=s(Au);yuo=r(vMe,"The model is set in evaluation mode by default using "),yee=n(vMe,"CODE",{});var vGr=s(yee);wuo=r(vGr,"model.eval()"),vGr.forEach(t),Auo=r(vMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wee=n(vMe,"CODE",{});var TGr=s(wee);Luo=r(TGr,"model.train()"),TGr.forEach(t),vMe.forEach(t),Buo=i(Dt),Aee=n(Dt,"P",{});var FGr=s(Aee);xuo=r(FGr,"Examples:"),FGr.forEach(t),kuo=i(Dt),m(C3.$$.fragment,Dt),Dt.forEach(t),Vs.forEach(t),V7e=i(c),Yi=n(c,"H2",{class:!0});var Yxe=s(Yi);Lu=n(Yxe,"A",{id:!0,class:!0,href:!0});var CGr=s(Lu);Lee=n(CGr,"SPAN",{});var MGr=s(Lee);m(M3.$$.fragment,MGr),MGr.forEach(t),CGr.forEach(t),Ruo=i(Yxe),Bee=n(Yxe,"SPAN",{});var EGr=s(Bee);Suo=r(EGr,"AutoModelForMaskedLM"),EGr.forEach(t),Yxe.forEach(t),z7e=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(E3.$$.fragment,Ws),Puo=i(Ws),Ki=n(Ws,"P",{});var NV=s(Ki);$uo=r(NV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xee=n(NV,"CODE",{});var yGr=s(xee);Iuo=r(yGr,"from_pretrained()"),yGr.forEach(t),Duo=r(NV,"class method or the "),kee=n(NV,"CODE",{});var wGr=s(kee);juo=r(wGr,"from_config()"),wGr.forEach(t),Nuo=r(NV,`class
method.`),NV.forEach(t),quo=i(Ws),y3=n(Ws,"P",{});var Kxe=s(y3);Guo=r(Kxe,"This class cannot be instantiated directly using "),Ree=n(Kxe,"CODE",{});var AGr=s(Ree);Ouo=r(AGr,"__init__()"),AGr.forEach(t),Xuo=r(Kxe," (throws an error)."),Kxe.forEach(t),Vuo=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Qs=s(Xr);m(w3.$$.fragment,Qs),zuo=i(Qs),See=n(Qs,"P",{});var LGr=s(See);Wuo=r(LGr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LGr.forEach(t),Quo=i(Qs),Zi=n(Qs,"P",{});var qV=s(Zi);Huo=r(qV,`Note:
Loading a model from its configuration file does `),Pee=n(qV,"STRONG",{});var BGr=s(Pee);Uuo=r(BGr,"not"),BGr.forEach(t),Juo=r(qV,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=n(qV,"CODE",{});var xGr=s($ee);Yuo=r(xGr,"from_pretrained()"),xGr.forEach(t),Kuo=r(qV,"to load the model weights."),qV.forEach(t),Zuo=i(Qs),Iee=n(Qs,"P",{});var kGr=s(Iee);e1o=r(kGr,"Examples:"),kGr.forEach(t),o1o=i(Qs),m(A3.$$.fragment,Qs),Qs.forEach(t),r1o=i(Ws),$e=n(Ws,"DIV",{class:!0});var jt=s($e);m(L3.$$.fragment,jt),t1o=i(jt),Dee=n(jt,"P",{});var RGr=s(Dee);a1o=r(RGr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RGr.forEach(t),n1o=i(jt),Oa=n(jt,"P",{});var BM=s(Oa);s1o=r(BM,"The model class to instantiate is selected based on the "),jee=n(BM,"CODE",{});var SGr=s(jee);l1o=r(SGr,"model_type"),SGr.forEach(t),i1o=r(BM,` property of the config object (either
passed as an argument or loaded from `),Nee=n(BM,"CODE",{});var PGr=s(Nee);d1o=r(PGr,"pretrained_model_name_or_path"),PGr.forEach(t),c1o=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qee=n(BM,"CODE",{});var $Gr=s(qee);f1o=r($Gr,"pretrained_model_name_or_path"),$Gr.forEach(t),m1o=r(BM,":"),BM.forEach(t),g1o=i(jt),I=n(jt,"UL",{});var j=s(I);Bu=n(j,"LI",{});var TMe=s(Bu);Gee=n(TMe,"STRONG",{});var IGr=s(Gee);h1o=r(IGr,"albert"),IGr.forEach(t),p1o=r(TMe," \u2014 "),jP=n(TMe,"A",{href:!0});var DGr=s(jP);_1o=r(DGr,"AlbertForMaskedLM"),DGr.forEach(t),u1o=r(TMe," (ALBERT model)"),TMe.forEach(t),b1o=i(j),xu=n(j,"LI",{});var FMe=s(xu);Oee=n(FMe,"STRONG",{});var jGr=s(Oee);v1o=r(jGr,"bart"),jGr.forEach(t),T1o=r(FMe," \u2014 "),NP=n(FMe,"A",{href:!0});var NGr=s(NP);F1o=r(NGr,"BartForConditionalGeneration"),NGr.forEach(t),C1o=r(FMe," (BART model)"),FMe.forEach(t),M1o=i(j),ku=n(j,"LI",{});var CMe=s(ku);Xee=n(CMe,"STRONG",{});var qGr=s(Xee);E1o=r(qGr,"bert"),qGr.forEach(t),y1o=r(CMe," \u2014 "),qP=n(CMe,"A",{href:!0});var GGr=s(qP);w1o=r(GGr,"BertForMaskedLM"),GGr.forEach(t),A1o=r(CMe," (BERT model)"),CMe.forEach(t),L1o=i(j),Ru=n(j,"LI",{});var MMe=s(Ru);Vee=n(MMe,"STRONG",{});var OGr=s(Vee);B1o=r(OGr,"big_bird"),OGr.forEach(t),x1o=r(MMe," \u2014 "),GP=n(MMe,"A",{href:!0});var XGr=s(GP);k1o=r(XGr,"BigBirdForMaskedLM"),XGr.forEach(t),R1o=r(MMe," (BigBird model)"),MMe.forEach(t),S1o=i(j),Su=n(j,"LI",{});var EMe=s(Su);zee=n(EMe,"STRONG",{});var VGr=s(zee);P1o=r(VGr,"camembert"),VGr.forEach(t),$1o=r(EMe," \u2014 "),OP=n(EMe,"A",{href:!0});var zGr=s(OP);I1o=r(zGr,"CamembertForMaskedLM"),zGr.forEach(t),D1o=r(EMe," (CamemBERT model)"),EMe.forEach(t),j1o=i(j),Pu=n(j,"LI",{});var yMe=s(Pu);Wee=n(yMe,"STRONG",{});var WGr=s(Wee);N1o=r(WGr,"convbert"),WGr.forEach(t),q1o=r(yMe," \u2014 "),XP=n(yMe,"A",{href:!0});var QGr=s(XP);G1o=r(QGr,"ConvBertForMaskedLM"),QGr.forEach(t),O1o=r(yMe," (ConvBERT model)"),yMe.forEach(t),X1o=i(j),$u=n(j,"LI",{});var wMe=s($u);Qee=n(wMe,"STRONG",{});var HGr=s(Qee);V1o=r(HGr,"data2vec-text"),HGr.forEach(t),z1o=r(wMe," \u2014 "),VP=n(wMe,"A",{href:!0});var UGr=s(VP);W1o=r(UGr,"Data2VecTextForMaskedLM"),UGr.forEach(t),Q1o=r(wMe," (Data2VecText model)"),wMe.forEach(t),H1o=i(j),Iu=n(j,"LI",{});var AMe=s(Iu);Hee=n(AMe,"STRONG",{});var JGr=s(Hee);U1o=r(JGr,"deberta"),JGr.forEach(t),J1o=r(AMe," \u2014 "),zP=n(AMe,"A",{href:!0});var YGr=s(zP);Y1o=r(YGr,"DebertaForMaskedLM"),YGr.forEach(t),K1o=r(AMe," (DeBERTa model)"),AMe.forEach(t),Z1o=i(j),Du=n(j,"LI",{});var LMe=s(Du);Uee=n(LMe,"STRONG",{});var KGr=s(Uee);ebo=r(KGr,"deberta-v2"),KGr.forEach(t),obo=r(LMe," \u2014 "),WP=n(LMe,"A",{href:!0});var ZGr=s(WP);rbo=r(ZGr,"DebertaV2ForMaskedLM"),ZGr.forEach(t),tbo=r(LMe," (DeBERTa-v2 model)"),LMe.forEach(t),abo=i(j),ju=n(j,"LI",{});var BMe=s(ju);Jee=n(BMe,"STRONG",{});var eOr=s(Jee);nbo=r(eOr,"distilbert"),eOr.forEach(t),sbo=r(BMe," \u2014 "),QP=n(BMe,"A",{href:!0});var oOr=s(QP);lbo=r(oOr,"DistilBertForMaskedLM"),oOr.forEach(t),ibo=r(BMe," (DistilBERT model)"),BMe.forEach(t),dbo=i(j),Nu=n(j,"LI",{});var xMe=s(Nu);Yee=n(xMe,"STRONG",{});var rOr=s(Yee);cbo=r(rOr,"electra"),rOr.forEach(t),fbo=r(xMe," \u2014 "),HP=n(xMe,"A",{href:!0});var tOr=s(HP);mbo=r(tOr,"ElectraForMaskedLM"),tOr.forEach(t),gbo=r(xMe," (ELECTRA model)"),xMe.forEach(t),hbo=i(j),qu=n(j,"LI",{});var kMe=s(qu);Kee=n(kMe,"STRONG",{});var aOr=s(Kee);pbo=r(aOr,"flaubert"),aOr.forEach(t),_bo=r(kMe," \u2014 "),UP=n(kMe,"A",{href:!0});var nOr=s(UP);ubo=r(nOr,"FlaubertWithLMHeadModel"),nOr.forEach(t),bbo=r(kMe," (FlauBERT model)"),kMe.forEach(t),vbo=i(j),Gu=n(j,"LI",{});var RMe=s(Gu);Zee=n(RMe,"STRONG",{});var sOr=s(Zee);Tbo=r(sOr,"fnet"),sOr.forEach(t),Fbo=r(RMe," \u2014 "),JP=n(RMe,"A",{href:!0});var lOr=s(JP);Cbo=r(lOr,"FNetForMaskedLM"),lOr.forEach(t),Mbo=r(RMe," (FNet model)"),RMe.forEach(t),Ebo=i(j),Ou=n(j,"LI",{});var SMe=s(Ou);eoe=n(SMe,"STRONG",{});var iOr=s(eoe);ybo=r(iOr,"funnel"),iOr.forEach(t),wbo=r(SMe," \u2014 "),YP=n(SMe,"A",{href:!0});var dOr=s(YP);Abo=r(dOr,"FunnelForMaskedLM"),dOr.forEach(t),Lbo=r(SMe," (Funnel Transformer model)"),SMe.forEach(t),Bbo=i(j),Xu=n(j,"LI",{});var PMe=s(Xu);ooe=n(PMe,"STRONG",{});var cOr=s(ooe);xbo=r(cOr,"ibert"),cOr.forEach(t),kbo=r(PMe," \u2014 "),KP=n(PMe,"A",{href:!0});var fOr=s(KP);Rbo=r(fOr,"IBertForMaskedLM"),fOr.forEach(t),Sbo=r(PMe," (I-BERT model)"),PMe.forEach(t),Pbo=i(j),Vu=n(j,"LI",{});var $Me=s(Vu);roe=n($Me,"STRONG",{});var mOr=s(roe);$bo=r(mOr,"layoutlm"),mOr.forEach(t),Ibo=r($Me," \u2014 "),ZP=n($Me,"A",{href:!0});var gOr=s(ZP);Dbo=r(gOr,"LayoutLMForMaskedLM"),gOr.forEach(t),jbo=r($Me," (LayoutLM model)"),$Me.forEach(t),Nbo=i(j),zu=n(j,"LI",{});var IMe=s(zu);toe=n(IMe,"STRONG",{});var hOr=s(toe);qbo=r(hOr,"longformer"),hOr.forEach(t),Gbo=r(IMe," \u2014 "),e$=n(IMe,"A",{href:!0});var pOr=s(e$);Obo=r(pOr,"LongformerForMaskedLM"),pOr.forEach(t),Xbo=r(IMe," (Longformer model)"),IMe.forEach(t),Vbo=i(j),Wu=n(j,"LI",{});var DMe=s(Wu);aoe=n(DMe,"STRONG",{});var _Or=s(aoe);zbo=r(_Or,"mbart"),_Or.forEach(t),Wbo=r(DMe," \u2014 "),o$=n(DMe,"A",{href:!0});var uOr=s(o$);Qbo=r(uOr,"MBartForConditionalGeneration"),uOr.forEach(t),Hbo=r(DMe," (mBART model)"),DMe.forEach(t),Ubo=i(j),Qu=n(j,"LI",{});var jMe=s(Qu);noe=n(jMe,"STRONG",{});var bOr=s(noe);Jbo=r(bOr,"megatron-bert"),bOr.forEach(t),Ybo=r(jMe," \u2014 "),r$=n(jMe,"A",{href:!0});var vOr=s(r$);Kbo=r(vOr,"MegatronBertForMaskedLM"),vOr.forEach(t),Zbo=r(jMe," (MegatronBert model)"),jMe.forEach(t),e5o=i(j),Hu=n(j,"LI",{});var NMe=s(Hu);soe=n(NMe,"STRONG",{});var TOr=s(soe);o5o=r(TOr,"mobilebert"),TOr.forEach(t),r5o=r(NMe," \u2014 "),t$=n(NMe,"A",{href:!0});var FOr=s(t$);t5o=r(FOr,"MobileBertForMaskedLM"),FOr.forEach(t),a5o=r(NMe," (MobileBERT model)"),NMe.forEach(t),n5o=i(j),Uu=n(j,"LI",{});var qMe=s(Uu);loe=n(qMe,"STRONG",{});var COr=s(loe);s5o=r(COr,"mpnet"),COr.forEach(t),l5o=r(qMe," \u2014 "),a$=n(qMe,"A",{href:!0});var MOr=s(a$);i5o=r(MOr,"MPNetForMaskedLM"),MOr.forEach(t),d5o=r(qMe," (MPNet model)"),qMe.forEach(t),c5o=i(j),Ju=n(j,"LI",{});var GMe=s(Ju);ioe=n(GMe,"STRONG",{});var EOr=s(ioe);f5o=r(EOr,"nystromformer"),EOr.forEach(t),m5o=r(GMe," \u2014 "),n$=n(GMe,"A",{href:!0});var yOr=s(n$);g5o=r(yOr,"NystromformerForMaskedLM"),yOr.forEach(t),h5o=r(GMe," (Nystromformer model)"),GMe.forEach(t),p5o=i(j),Yu=n(j,"LI",{});var OMe=s(Yu);doe=n(OMe,"STRONG",{});var wOr=s(doe);_5o=r(wOr,"perceiver"),wOr.forEach(t),u5o=r(OMe," \u2014 "),s$=n(OMe,"A",{href:!0});var AOr=s(s$);b5o=r(AOr,"PerceiverForMaskedLM"),AOr.forEach(t),v5o=r(OMe," (Perceiver model)"),OMe.forEach(t),T5o=i(j),Ku=n(j,"LI",{});var XMe=s(Ku);coe=n(XMe,"STRONG",{});var LOr=s(coe);F5o=r(LOr,"qdqbert"),LOr.forEach(t),C5o=r(XMe," \u2014 "),l$=n(XMe,"A",{href:!0});var BOr=s(l$);M5o=r(BOr,"QDQBertForMaskedLM"),BOr.forEach(t),E5o=r(XMe," (QDQBert model)"),XMe.forEach(t),y5o=i(j),Zu=n(j,"LI",{});var VMe=s(Zu);foe=n(VMe,"STRONG",{});var xOr=s(foe);w5o=r(xOr,"reformer"),xOr.forEach(t),A5o=r(VMe," \u2014 "),i$=n(VMe,"A",{href:!0});var kOr=s(i$);L5o=r(kOr,"ReformerForMaskedLM"),kOr.forEach(t),B5o=r(VMe," (Reformer model)"),VMe.forEach(t),x5o=i(j),e1=n(j,"LI",{});var zMe=s(e1);moe=n(zMe,"STRONG",{});var ROr=s(moe);k5o=r(ROr,"rembert"),ROr.forEach(t),R5o=r(zMe," \u2014 "),d$=n(zMe,"A",{href:!0});var SOr=s(d$);S5o=r(SOr,"RemBertForMaskedLM"),SOr.forEach(t),P5o=r(zMe," (RemBERT model)"),zMe.forEach(t),$5o=i(j),o1=n(j,"LI",{});var WMe=s(o1);goe=n(WMe,"STRONG",{});var POr=s(goe);I5o=r(POr,"roberta"),POr.forEach(t),D5o=r(WMe," \u2014 "),c$=n(WMe,"A",{href:!0});var $Or=s(c$);j5o=r($Or,"RobertaForMaskedLM"),$Or.forEach(t),N5o=r(WMe," (RoBERTa model)"),WMe.forEach(t),q5o=i(j),r1=n(j,"LI",{});var QMe=s(r1);hoe=n(QMe,"STRONG",{});var IOr=s(hoe);G5o=r(IOr,"roformer"),IOr.forEach(t),O5o=r(QMe," \u2014 "),f$=n(QMe,"A",{href:!0});var DOr=s(f$);X5o=r(DOr,"RoFormerForMaskedLM"),DOr.forEach(t),V5o=r(QMe," (RoFormer model)"),QMe.forEach(t),z5o=i(j),t1=n(j,"LI",{});var HMe=s(t1);poe=n(HMe,"STRONG",{});var jOr=s(poe);W5o=r(jOr,"squeezebert"),jOr.forEach(t),Q5o=r(HMe," \u2014 "),m$=n(HMe,"A",{href:!0});var NOr=s(m$);H5o=r(NOr,"SqueezeBertForMaskedLM"),NOr.forEach(t),U5o=r(HMe," (SqueezeBERT model)"),HMe.forEach(t),J5o=i(j),a1=n(j,"LI",{});var UMe=s(a1);_oe=n(UMe,"STRONG",{});var qOr=s(_oe);Y5o=r(qOr,"tapas"),qOr.forEach(t),K5o=r(UMe," \u2014 "),g$=n(UMe,"A",{href:!0});var GOr=s(g$);Z5o=r(GOr,"TapasForMaskedLM"),GOr.forEach(t),e2o=r(UMe," (TAPAS model)"),UMe.forEach(t),o2o=i(j),n1=n(j,"LI",{});var JMe=s(n1);uoe=n(JMe,"STRONG",{});var OOr=s(uoe);r2o=r(OOr,"wav2vec2"),OOr.forEach(t),t2o=r(JMe," \u2014 "),boe=n(JMe,"CODE",{});var XOr=s(boe);a2o=r(XOr,"Wav2Vec2ForMaskedLM"),XOr.forEach(t),n2o=r(JMe,"(Wav2Vec2 model)"),JMe.forEach(t),s2o=i(j),s1=n(j,"LI",{});var YMe=s(s1);voe=n(YMe,"STRONG",{});var VOr=s(voe);l2o=r(VOr,"xlm"),VOr.forEach(t),i2o=r(YMe," \u2014 "),h$=n(YMe,"A",{href:!0});var zOr=s(h$);d2o=r(zOr,"XLMWithLMHeadModel"),zOr.forEach(t),c2o=r(YMe," (XLM model)"),YMe.forEach(t),f2o=i(j),l1=n(j,"LI",{});var KMe=s(l1);Toe=n(KMe,"STRONG",{});var WOr=s(Toe);m2o=r(WOr,"xlm-roberta"),WOr.forEach(t),g2o=r(KMe," \u2014 "),p$=n(KMe,"A",{href:!0});var QOr=s(p$);h2o=r(QOr,"XLMRobertaForMaskedLM"),QOr.forEach(t),p2o=r(KMe," (XLM-RoBERTa model)"),KMe.forEach(t),_2o=i(j),i1=n(j,"LI",{});var ZMe=s(i1);Foe=n(ZMe,"STRONG",{});var HOr=s(Foe);u2o=r(HOr,"xlm-roberta-xl"),HOr.forEach(t),b2o=r(ZMe," \u2014 "),_$=n(ZMe,"A",{href:!0});var UOr=s(_$);v2o=r(UOr,"XLMRobertaXLForMaskedLM"),UOr.forEach(t),T2o=r(ZMe," (XLM-RoBERTa-XL model)"),ZMe.forEach(t),F2o=i(j),d1=n(j,"LI",{});var eEe=s(d1);Coe=n(eEe,"STRONG",{});var JOr=s(Coe);C2o=r(JOr,"yoso"),JOr.forEach(t),M2o=r(eEe," \u2014 "),u$=n(eEe,"A",{href:!0});var YOr=s(u$);E2o=r(YOr,"YosoForMaskedLM"),YOr.forEach(t),y2o=r(eEe," (YOSO model)"),eEe.forEach(t),j.forEach(t),w2o=i(jt),c1=n(jt,"P",{});var oEe=s(c1);A2o=r(oEe,"The model is set in evaluation mode by default using "),Moe=n(oEe,"CODE",{});var KOr=s(Moe);L2o=r(KOr,"model.eval()"),KOr.forEach(t),B2o=r(oEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eoe=n(oEe,"CODE",{});var ZOr=s(Eoe);x2o=r(ZOr,"model.train()"),ZOr.forEach(t),oEe.forEach(t),k2o=i(jt),yoe=n(jt,"P",{});var eXr=s(yoe);R2o=r(eXr,"Examples:"),eXr.forEach(t),S2o=i(jt),m(B3.$$.fragment,jt),jt.forEach(t),Ws.forEach(t),W7e=i(c),ed=n(c,"H2",{class:!0});var Zxe=s(ed);f1=n(Zxe,"A",{id:!0,class:!0,href:!0});var oXr=s(f1);woe=n(oXr,"SPAN",{});var rXr=s(woe);m(x3.$$.fragment,rXr),rXr.forEach(t),oXr.forEach(t),P2o=i(Zxe),Aoe=n(Zxe,"SPAN",{});var tXr=s(Aoe);$2o=r(tXr,"AutoModelForSeq2SeqLM"),tXr.forEach(t),Zxe.forEach(t),Q7e=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(k3.$$.fragment,Hs),I2o=i(Hs),od=n(Hs,"P",{});var GV=s(od);D2o=r(GV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Loe=n(GV,"CODE",{});var aXr=s(Loe);j2o=r(aXr,"from_pretrained()"),aXr.forEach(t),N2o=r(GV,"class method or the "),Boe=n(GV,"CODE",{});var nXr=s(Boe);q2o=r(nXr,"from_config()"),nXr.forEach(t),G2o=r(GV,`class
method.`),GV.forEach(t),O2o=i(Hs),R3=n(Hs,"P",{});var eke=s(R3);X2o=r(eke,"This class cannot be instantiated directly using "),xoe=n(eke,"CODE",{});var sXr=s(xoe);V2o=r(sXr,"__init__()"),sXr.forEach(t),z2o=r(eke," (throws an error)."),eke.forEach(t),W2o=i(Hs),Vr=n(Hs,"DIV",{class:!0});var Us=s(Vr);m(S3.$$.fragment,Us),Q2o=i(Us),koe=n(Us,"P",{});var lXr=s(koe);H2o=r(lXr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lXr.forEach(t),U2o=i(Us),rd=n(Us,"P",{});var OV=s(rd);J2o=r(OV,`Note:
Loading a model from its configuration file does `),Roe=n(OV,"STRONG",{});var iXr=s(Roe);Y2o=r(iXr,"not"),iXr.forEach(t),K2o=r(OV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(OV,"CODE",{});var dXr=s(Soe);Z2o=r(dXr,"from_pretrained()"),dXr.forEach(t),evo=r(OV,"to load the model weights."),OV.forEach(t),ovo=i(Us),Poe=n(Us,"P",{});var cXr=s(Poe);rvo=r(cXr,"Examples:"),cXr.forEach(t),tvo=i(Us),m(P3.$$.fragment,Us),Us.forEach(t),avo=i(Hs),Ie=n(Hs,"DIV",{class:!0});var Nt=s(Ie);m($3.$$.fragment,Nt),nvo=i(Nt),$oe=n(Nt,"P",{});var fXr=s($oe);svo=r(fXr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fXr.forEach(t),lvo=i(Nt),Xa=n(Nt,"P",{});var xM=s(Xa);ivo=r(xM,"The model class to instantiate is selected based on the "),Ioe=n(xM,"CODE",{});var mXr=s(Ioe);dvo=r(mXr,"model_type"),mXr.forEach(t),cvo=r(xM,` property of the config object (either
passed as an argument or loaded from `),Doe=n(xM,"CODE",{});var gXr=s(Doe);fvo=r(gXr,"pretrained_model_name_or_path"),gXr.forEach(t),mvo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),joe=n(xM,"CODE",{});var hXr=s(joe);gvo=r(hXr,"pretrained_model_name_or_path"),hXr.forEach(t),hvo=r(xM,":"),xM.forEach(t),pvo=i(Nt),ae=n(Nt,"UL",{});var le=s(ae);m1=n(le,"LI",{});var rEe=s(m1);Noe=n(rEe,"STRONG",{});var pXr=s(Noe);_vo=r(pXr,"bart"),pXr.forEach(t),uvo=r(rEe," \u2014 "),b$=n(rEe,"A",{href:!0});var _Xr=s(b$);bvo=r(_Xr,"BartForConditionalGeneration"),_Xr.forEach(t),vvo=r(rEe," (BART model)"),rEe.forEach(t),Tvo=i(le),g1=n(le,"LI",{});var tEe=s(g1);qoe=n(tEe,"STRONG",{});var uXr=s(qoe);Fvo=r(uXr,"bigbird_pegasus"),uXr.forEach(t),Cvo=r(tEe," \u2014 "),v$=n(tEe,"A",{href:!0});var bXr=s(v$);Mvo=r(bXr,"BigBirdPegasusForConditionalGeneration"),bXr.forEach(t),Evo=r(tEe," (BigBirdPegasus model)"),tEe.forEach(t),yvo=i(le),h1=n(le,"LI",{});var aEe=s(h1);Goe=n(aEe,"STRONG",{});var vXr=s(Goe);wvo=r(vXr,"blenderbot"),vXr.forEach(t),Avo=r(aEe," \u2014 "),T$=n(aEe,"A",{href:!0});var TXr=s(T$);Lvo=r(TXr,"BlenderbotForConditionalGeneration"),TXr.forEach(t),Bvo=r(aEe," (Blenderbot model)"),aEe.forEach(t),xvo=i(le),p1=n(le,"LI",{});var nEe=s(p1);Ooe=n(nEe,"STRONG",{});var FXr=s(Ooe);kvo=r(FXr,"blenderbot-small"),FXr.forEach(t),Rvo=r(nEe," \u2014 "),F$=n(nEe,"A",{href:!0});var CXr=s(F$);Svo=r(CXr,"BlenderbotSmallForConditionalGeneration"),CXr.forEach(t),Pvo=r(nEe," (BlenderbotSmall model)"),nEe.forEach(t),$vo=i(le),_1=n(le,"LI",{});var sEe=s(_1);Xoe=n(sEe,"STRONG",{});var MXr=s(Xoe);Ivo=r(MXr,"encoder-decoder"),MXr.forEach(t),Dvo=r(sEe," \u2014 "),C$=n(sEe,"A",{href:!0});var EXr=s(C$);jvo=r(EXr,"EncoderDecoderModel"),EXr.forEach(t),Nvo=r(sEe," (Encoder decoder model)"),sEe.forEach(t),qvo=i(le),u1=n(le,"LI",{});var lEe=s(u1);Voe=n(lEe,"STRONG",{});var yXr=s(Voe);Gvo=r(yXr,"fsmt"),yXr.forEach(t),Ovo=r(lEe," \u2014 "),M$=n(lEe,"A",{href:!0});var wXr=s(M$);Xvo=r(wXr,"FSMTForConditionalGeneration"),wXr.forEach(t),Vvo=r(lEe," (FairSeq Machine-Translation model)"),lEe.forEach(t),zvo=i(le),b1=n(le,"LI",{});var iEe=s(b1);zoe=n(iEe,"STRONG",{});var AXr=s(zoe);Wvo=r(AXr,"led"),AXr.forEach(t),Qvo=r(iEe," \u2014 "),E$=n(iEe,"A",{href:!0});var LXr=s(E$);Hvo=r(LXr,"LEDForConditionalGeneration"),LXr.forEach(t),Uvo=r(iEe," (LED model)"),iEe.forEach(t),Jvo=i(le),v1=n(le,"LI",{});var dEe=s(v1);Woe=n(dEe,"STRONG",{});var BXr=s(Woe);Yvo=r(BXr,"m2m_100"),BXr.forEach(t),Kvo=r(dEe," \u2014 "),y$=n(dEe,"A",{href:!0});var xXr=s(y$);Zvo=r(xXr,"M2M100ForConditionalGeneration"),xXr.forEach(t),eTo=r(dEe," (M2M100 model)"),dEe.forEach(t),oTo=i(le),T1=n(le,"LI",{});var cEe=s(T1);Qoe=n(cEe,"STRONG",{});var kXr=s(Qoe);rTo=r(kXr,"marian"),kXr.forEach(t),tTo=r(cEe," \u2014 "),w$=n(cEe,"A",{href:!0});var RXr=s(w$);aTo=r(RXr,"MarianMTModel"),RXr.forEach(t),nTo=r(cEe," (Marian model)"),cEe.forEach(t),sTo=i(le),F1=n(le,"LI",{});var fEe=s(F1);Hoe=n(fEe,"STRONG",{});var SXr=s(Hoe);lTo=r(SXr,"mbart"),SXr.forEach(t),iTo=r(fEe," \u2014 "),A$=n(fEe,"A",{href:!0});var PXr=s(A$);dTo=r(PXr,"MBartForConditionalGeneration"),PXr.forEach(t),cTo=r(fEe," (mBART model)"),fEe.forEach(t),fTo=i(le),C1=n(le,"LI",{});var mEe=s(C1);Uoe=n(mEe,"STRONG",{});var $Xr=s(Uoe);mTo=r($Xr,"mt5"),$Xr.forEach(t),gTo=r(mEe," \u2014 "),L$=n(mEe,"A",{href:!0});var IXr=s(L$);hTo=r(IXr,"MT5ForConditionalGeneration"),IXr.forEach(t),pTo=r(mEe," (mT5 model)"),mEe.forEach(t),_To=i(le),M1=n(le,"LI",{});var gEe=s(M1);Joe=n(gEe,"STRONG",{});var DXr=s(Joe);uTo=r(DXr,"pegasus"),DXr.forEach(t),bTo=r(gEe," \u2014 "),B$=n(gEe,"A",{href:!0});var jXr=s(B$);vTo=r(jXr,"PegasusForConditionalGeneration"),jXr.forEach(t),TTo=r(gEe," (Pegasus model)"),gEe.forEach(t),FTo=i(le),E1=n(le,"LI",{});var hEe=s(E1);Yoe=n(hEe,"STRONG",{});var NXr=s(Yoe);CTo=r(NXr,"plbart"),NXr.forEach(t),MTo=r(hEe," \u2014 "),x$=n(hEe,"A",{href:!0});var qXr=s(x$);ETo=r(qXr,"PLBartForConditionalGeneration"),qXr.forEach(t),yTo=r(hEe," (PLBart model)"),hEe.forEach(t),wTo=i(le),y1=n(le,"LI",{});var pEe=s(y1);Koe=n(pEe,"STRONG",{});var GXr=s(Koe);ATo=r(GXr,"prophetnet"),GXr.forEach(t),LTo=r(pEe," \u2014 "),k$=n(pEe,"A",{href:!0});var OXr=s(k$);BTo=r(OXr,"ProphetNetForConditionalGeneration"),OXr.forEach(t),xTo=r(pEe," (ProphetNet model)"),pEe.forEach(t),kTo=i(le),w1=n(le,"LI",{});var _Ee=s(w1);Zoe=n(_Ee,"STRONG",{});var XXr=s(Zoe);RTo=r(XXr,"t5"),XXr.forEach(t),STo=r(_Ee," \u2014 "),R$=n(_Ee,"A",{href:!0});var VXr=s(R$);PTo=r(VXr,"T5ForConditionalGeneration"),VXr.forEach(t),$To=r(_Ee," (T5 model)"),_Ee.forEach(t),ITo=i(le),A1=n(le,"LI",{});var uEe=s(A1);ere=n(uEe,"STRONG",{});var zXr=s(ere);DTo=r(zXr,"xlm-prophetnet"),zXr.forEach(t),jTo=r(uEe," \u2014 "),S$=n(uEe,"A",{href:!0});var WXr=s(S$);NTo=r(WXr,"XLMProphetNetForConditionalGeneration"),WXr.forEach(t),qTo=r(uEe," (XLMProphetNet model)"),uEe.forEach(t),le.forEach(t),GTo=i(Nt),L1=n(Nt,"P",{});var bEe=s(L1);OTo=r(bEe,"The model is set in evaluation mode by default using "),ore=n(bEe,"CODE",{});var QXr=s(ore);XTo=r(QXr,"model.eval()"),QXr.forEach(t),VTo=r(bEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=n(bEe,"CODE",{});var HXr=s(rre);zTo=r(HXr,"model.train()"),HXr.forEach(t),bEe.forEach(t),WTo=i(Nt),tre=n(Nt,"P",{});var UXr=s(tre);QTo=r(UXr,"Examples:"),UXr.forEach(t),HTo=i(Nt),m(I3.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),H7e=i(c),td=n(c,"H2",{class:!0});var oke=s(td);B1=n(oke,"A",{id:!0,class:!0,href:!0});var JXr=s(B1);are=n(JXr,"SPAN",{});var YXr=s(are);m(D3.$$.fragment,YXr),YXr.forEach(t),JXr.forEach(t),UTo=i(oke),nre=n(oke,"SPAN",{});var KXr=s(nre);JTo=r(KXr,"AutoModelForSequenceClassification"),KXr.forEach(t),oke.forEach(t),U7e=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(j3.$$.fragment,Js),YTo=i(Js),ad=n(Js,"P",{});var XV=s(ad);KTo=r(XV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sre=n(XV,"CODE",{});var ZXr=s(sre);ZTo=r(ZXr,"from_pretrained()"),ZXr.forEach(t),eFo=r(XV,"class method or the "),lre=n(XV,"CODE",{});var eVr=s(lre);oFo=r(eVr,"from_config()"),eVr.forEach(t),rFo=r(XV,`class
method.`),XV.forEach(t),tFo=i(Js),N3=n(Js,"P",{});var rke=s(N3);aFo=r(rke,"This class cannot be instantiated directly using "),ire=n(rke,"CODE",{});var oVr=s(ire);nFo=r(oVr,"__init__()"),oVr.forEach(t),sFo=r(rke," (throws an error)."),rke.forEach(t),lFo=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(q3.$$.fragment,Ys),iFo=i(Ys),dre=n(Ys,"P",{});var rVr=s(dre);dFo=r(rVr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rVr.forEach(t),cFo=i(Ys),nd=n(Ys,"P",{});var VV=s(nd);fFo=r(VV,`Note:
Loading a model from its configuration file does `),cre=n(VV,"STRONG",{});var tVr=s(cre);mFo=r(tVr,"not"),tVr.forEach(t),gFo=r(VV,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n(VV,"CODE",{});var aVr=s(fre);hFo=r(aVr,"from_pretrained()"),aVr.forEach(t),pFo=r(VV,"to load the model weights."),VV.forEach(t),_Fo=i(Ys),mre=n(Ys,"P",{});var nVr=s(mre);uFo=r(nVr,"Examples:"),nVr.forEach(t),bFo=i(Ys),m(G3.$$.fragment,Ys),Ys.forEach(t),vFo=i(Js),De=n(Js,"DIV",{class:!0});var qt=s(De);m(O3.$$.fragment,qt),TFo=i(qt),gre=n(qt,"P",{});var sVr=s(gre);FFo=r(sVr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sVr.forEach(t),CFo=i(qt),Va=n(qt,"P",{});var kM=s(Va);MFo=r(kM,"The model class to instantiate is selected based on the "),hre=n(kM,"CODE",{});var lVr=s(hre);EFo=r(lVr,"model_type"),lVr.forEach(t),yFo=r(kM,` property of the config object (either
passed as an argument or loaded from `),pre=n(kM,"CODE",{});var iVr=s(pre);wFo=r(iVr,"pretrained_model_name_or_path"),iVr.forEach(t),AFo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_re=n(kM,"CODE",{});var dVr=s(_re);LFo=r(dVr,"pretrained_model_name_or_path"),dVr.forEach(t),BFo=r(kM,":"),kM.forEach(t),xFo=i(qt),A=n(qt,"UL",{});var L=s(A);x1=n(L,"LI",{});var vEe=s(x1);ure=n(vEe,"STRONG",{});var cVr=s(ure);kFo=r(cVr,"albert"),cVr.forEach(t),RFo=r(vEe," \u2014 "),P$=n(vEe,"A",{href:!0});var fVr=s(P$);SFo=r(fVr,"AlbertForSequenceClassification"),fVr.forEach(t),PFo=r(vEe," (ALBERT model)"),vEe.forEach(t),$Fo=i(L),k1=n(L,"LI",{});var TEe=s(k1);bre=n(TEe,"STRONG",{});var mVr=s(bre);IFo=r(mVr,"bart"),mVr.forEach(t),DFo=r(TEe," \u2014 "),$$=n(TEe,"A",{href:!0});var gVr=s($$);jFo=r(gVr,"BartForSequenceClassification"),gVr.forEach(t),NFo=r(TEe," (BART model)"),TEe.forEach(t),qFo=i(L),R1=n(L,"LI",{});var FEe=s(R1);vre=n(FEe,"STRONG",{});var hVr=s(vre);GFo=r(hVr,"bert"),hVr.forEach(t),OFo=r(FEe," \u2014 "),I$=n(FEe,"A",{href:!0});var pVr=s(I$);XFo=r(pVr,"BertForSequenceClassification"),pVr.forEach(t),VFo=r(FEe," (BERT model)"),FEe.forEach(t),zFo=i(L),S1=n(L,"LI",{});var CEe=s(S1);Tre=n(CEe,"STRONG",{});var _Vr=s(Tre);WFo=r(_Vr,"big_bird"),_Vr.forEach(t),QFo=r(CEe," \u2014 "),D$=n(CEe,"A",{href:!0});var uVr=s(D$);HFo=r(uVr,"BigBirdForSequenceClassification"),uVr.forEach(t),UFo=r(CEe," (BigBird model)"),CEe.forEach(t),JFo=i(L),P1=n(L,"LI",{});var MEe=s(P1);Fre=n(MEe,"STRONG",{});var bVr=s(Fre);YFo=r(bVr,"bigbird_pegasus"),bVr.forEach(t),KFo=r(MEe," \u2014 "),j$=n(MEe,"A",{href:!0});var vVr=s(j$);ZFo=r(vVr,"BigBirdPegasusForSequenceClassification"),vVr.forEach(t),e9o=r(MEe," (BigBirdPegasus model)"),MEe.forEach(t),o9o=i(L),$1=n(L,"LI",{});var EEe=s($1);Cre=n(EEe,"STRONG",{});var TVr=s(Cre);r9o=r(TVr,"camembert"),TVr.forEach(t),t9o=r(EEe," \u2014 "),N$=n(EEe,"A",{href:!0});var FVr=s(N$);a9o=r(FVr,"CamembertForSequenceClassification"),FVr.forEach(t),n9o=r(EEe," (CamemBERT model)"),EEe.forEach(t),s9o=i(L),I1=n(L,"LI",{});var yEe=s(I1);Mre=n(yEe,"STRONG",{});var CVr=s(Mre);l9o=r(CVr,"canine"),CVr.forEach(t),i9o=r(yEe," \u2014 "),q$=n(yEe,"A",{href:!0});var MVr=s(q$);d9o=r(MVr,"CanineForSequenceClassification"),MVr.forEach(t),c9o=r(yEe," (Canine model)"),yEe.forEach(t),f9o=i(L),D1=n(L,"LI",{});var wEe=s(D1);Ere=n(wEe,"STRONG",{});var EVr=s(Ere);m9o=r(EVr,"convbert"),EVr.forEach(t),g9o=r(wEe," \u2014 "),G$=n(wEe,"A",{href:!0});var yVr=s(G$);h9o=r(yVr,"ConvBertForSequenceClassification"),yVr.forEach(t),p9o=r(wEe," (ConvBERT model)"),wEe.forEach(t),_9o=i(L),j1=n(L,"LI",{});var AEe=s(j1);yre=n(AEe,"STRONG",{});var wVr=s(yre);u9o=r(wVr,"ctrl"),wVr.forEach(t),b9o=r(AEe," \u2014 "),O$=n(AEe,"A",{href:!0});var AVr=s(O$);v9o=r(AVr,"CTRLForSequenceClassification"),AVr.forEach(t),T9o=r(AEe," (CTRL model)"),AEe.forEach(t),F9o=i(L),N1=n(L,"LI",{});var LEe=s(N1);wre=n(LEe,"STRONG",{});var LVr=s(wre);C9o=r(LVr,"data2vec-text"),LVr.forEach(t),M9o=r(LEe," \u2014 "),X$=n(LEe,"A",{href:!0});var BVr=s(X$);E9o=r(BVr,"Data2VecTextForSequenceClassification"),BVr.forEach(t),y9o=r(LEe," (Data2VecText model)"),LEe.forEach(t),w9o=i(L),q1=n(L,"LI",{});var BEe=s(q1);Are=n(BEe,"STRONG",{});var xVr=s(Are);A9o=r(xVr,"deberta"),xVr.forEach(t),L9o=r(BEe," \u2014 "),V$=n(BEe,"A",{href:!0});var kVr=s(V$);B9o=r(kVr,"DebertaForSequenceClassification"),kVr.forEach(t),x9o=r(BEe," (DeBERTa model)"),BEe.forEach(t),k9o=i(L),G1=n(L,"LI",{});var xEe=s(G1);Lre=n(xEe,"STRONG",{});var RVr=s(Lre);R9o=r(RVr,"deberta-v2"),RVr.forEach(t),S9o=r(xEe," \u2014 "),z$=n(xEe,"A",{href:!0});var SVr=s(z$);P9o=r(SVr,"DebertaV2ForSequenceClassification"),SVr.forEach(t),$9o=r(xEe," (DeBERTa-v2 model)"),xEe.forEach(t),I9o=i(L),O1=n(L,"LI",{});var kEe=s(O1);Bre=n(kEe,"STRONG",{});var PVr=s(Bre);D9o=r(PVr,"distilbert"),PVr.forEach(t),j9o=r(kEe," \u2014 "),W$=n(kEe,"A",{href:!0});var $Vr=s(W$);N9o=r($Vr,"DistilBertForSequenceClassification"),$Vr.forEach(t),q9o=r(kEe," (DistilBERT model)"),kEe.forEach(t),G9o=i(L),X1=n(L,"LI",{});var REe=s(X1);xre=n(REe,"STRONG",{});var IVr=s(xre);O9o=r(IVr,"electra"),IVr.forEach(t),X9o=r(REe," \u2014 "),Q$=n(REe,"A",{href:!0});var DVr=s(Q$);V9o=r(DVr,"ElectraForSequenceClassification"),DVr.forEach(t),z9o=r(REe," (ELECTRA model)"),REe.forEach(t),W9o=i(L),V1=n(L,"LI",{});var SEe=s(V1);kre=n(SEe,"STRONG",{});var jVr=s(kre);Q9o=r(jVr,"flaubert"),jVr.forEach(t),H9o=r(SEe," \u2014 "),H$=n(SEe,"A",{href:!0});var NVr=s(H$);U9o=r(NVr,"FlaubertForSequenceClassification"),NVr.forEach(t),J9o=r(SEe," (FlauBERT model)"),SEe.forEach(t),Y9o=i(L),z1=n(L,"LI",{});var PEe=s(z1);Rre=n(PEe,"STRONG",{});var qVr=s(Rre);K9o=r(qVr,"fnet"),qVr.forEach(t),Z9o=r(PEe," \u2014 "),U$=n(PEe,"A",{href:!0});var GVr=s(U$);eCo=r(GVr,"FNetForSequenceClassification"),GVr.forEach(t),oCo=r(PEe," (FNet model)"),PEe.forEach(t),rCo=i(L),W1=n(L,"LI",{});var $Ee=s(W1);Sre=n($Ee,"STRONG",{});var OVr=s(Sre);tCo=r(OVr,"funnel"),OVr.forEach(t),aCo=r($Ee," \u2014 "),J$=n($Ee,"A",{href:!0});var XVr=s(J$);nCo=r(XVr,"FunnelForSequenceClassification"),XVr.forEach(t),sCo=r($Ee," (Funnel Transformer model)"),$Ee.forEach(t),lCo=i(L),Q1=n(L,"LI",{});var IEe=s(Q1);Pre=n(IEe,"STRONG",{});var VVr=s(Pre);iCo=r(VVr,"gpt2"),VVr.forEach(t),dCo=r(IEe," \u2014 "),Y$=n(IEe,"A",{href:!0});var zVr=s(Y$);cCo=r(zVr,"GPT2ForSequenceClassification"),zVr.forEach(t),fCo=r(IEe," (OpenAI GPT-2 model)"),IEe.forEach(t),mCo=i(L),H1=n(L,"LI",{});var DEe=s(H1);$re=n(DEe,"STRONG",{});var WVr=s($re);gCo=r(WVr,"gpt_neo"),WVr.forEach(t),hCo=r(DEe," \u2014 "),K$=n(DEe,"A",{href:!0});var QVr=s(K$);pCo=r(QVr,"GPTNeoForSequenceClassification"),QVr.forEach(t),_Co=r(DEe," (GPT Neo model)"),DEe.forEach(t),uCo=i(L),U1=n(L,"LI",{});var jEe=s(U1);Ire=n(jEe,"STRONG",{});var HVr=s(Ire);bCo=r(HVr,"gptj"),HVr.forEach(t),vCo=r(jEe," \u2014 "),Z$=n(jEe,"A",{href:!0});var UVr=s(Z$);TCo=r(UVr,"GPTJForSequenceClassification"),UVr.forEach(t),FCo=r(jEe," (GPT-J model)"),jEe.forEach(t),CCo=i(L),J1=n(L,"LI",{});var NEe=s(J1);Dre=n(NEe,"STRONG",{});var JVr=s(Dre);MCo=r(JVr,"ibert"),JVr.forEach(t),ECo=r(NEe," \u2014 "),eI=n(NEe,"A",{href:!0});var YVr=s(eI);yCo=r(YVr,"IBertForSequenceClassification"),YVr.forEach(t),wCo=r(NEe," (I-BERT model)"),NEe.forEach(t),ACo=i(L),Y1=n(L,"LI",{});var qEe=s(Y1);jre=n(qEe,"STRONG",{});var KVr=s(jre);LCo=r(KVr,"layoutlm"),KVr.forEach(t),BCo=r(qEe," \u2014 "),oI=n(qEe,"A",{href:!0});var ZVr=s(oI);xCo=r(ZVr,"LayoutLMForSequenceClassification"),ZVr.forEach(t),kCo=r(qEe," (LayoutLM model)"),qEe.forEach(t),RCo=i(L),K1=n(L,"LI",{});var GEe=s(K1);Nre=n(GEe,"STRONG",{});var ezr=s(Nre);SCo=r(ezr,"layoutlmv2"),ezr.forEach(t),PCo=r(GEe," \u2014 "),rI=n(GEe,"A",{href:!0});var ozr=s(rI);$Co=r(ozr,"LayoutLMv2ForSequenceClassification"),ozr.forEach(t),ICo=r(GEe," (LayoutLMv2 model)"),GEe.forEach(t),DCo=i(L),Z1=n(L,"LI",{});var OEe=s(Z1);qre=n(OEe,"STRONG",{});var rzr=s(qre);jCo=r(rzr,"led"),rzr.forEach(t),NCo=r(OEe," \u2014 "),tI=n(OEe,"A",{href:!0});var tzr=s(tI);qCo=r(tzr,"LEDForSequenceClassification"),tzr.forEach(t),GCo=r(OEe," (LED model)"),OEe.forEach(t),OCo=i(L),eb=n(L,"LI",{});var XEe=s(eb);Gre=n(XEe,"STRONG",{});var azr=s(Gre);XCo=r(azr,"longformer"),azr.forEach(t),VCo=r(XEe," \u2014 "),aI=n(XEe,"A",{href:!0});var nzr=s(aI);zCo=r(nzr,"LongformerForSequenceClassification"),nzr.forEach(t),WCo=r(XEe," (Longformer model)"),XEe.forEach(t),QCo=i(L),ob=n(L,"LI",{});var VEe=s(ob);Ore=n(VEe,"STRONG",{});var szr=s(Ore);HCo=r(szr,"mbart"),szr.forEach(t),UCo=r(VEe," \u2014 "),nI=n(VEe,"A",{href:!0});var lzr=s(nI);JCo=r(lzr,"MBartForSequenceClassification"),lzr.forEach(t),YCo=r(VEe," (mBART model)"),VEe.forEach(t),KCo=i(L),rb=n(L,"LI",{});var zEe=s(rb);Xre=n(zEe,"STRONG",{});var izr=s(Xre);ZCo=r(izr,"megatron-bert"),izr.forEach(t),e4o=r(zEe," \u2014 "),sI=n(zEe,"A",{href:!0});var dzr=s(sI);o4o=r(dzr,"MegatronBertForSequenceClassification"),dzr.forEach(t),r4o=r(zEe," (MegatronBert model)"),zEe.forEach(t),t4o=i(L),tb=n(L,"LI",{});var WEe=s(tb);Vre=n(WEe,"STRONG",{});var czr=s(Vre);a4o=r(czr,"mobilebert"),czr.forEach(t),n4o=r(WEe," \u2014 "),lI=n(WEe,"A",{href:!0});var fzr=s(lI);s4o=r(fzr,"MobileBertForSequenceClassification"),fzr.forEach(t),l4o=r(WEe," (MobileBERT model)"),WEe.forEach(t),i4o=i(L),ab=n(L,"LI",{});var QEe=s(ab);zre=n(QEe,"STRONG",{});var mzr=s(zre);d4o=r(mzr,"mpnet"),mzr.forEach(t),c4o=r(QEe," \u2014 "),iI=n(QEe,"A",{href:!0});var gzr=s(iI);f4o=r(gzr,"MPNetForSequenceClassification"),gzr.forEach(t),m4o=r(QEe," (MPNet model)"),QEe.forEach(t),g4o=i(L),nb=n(L,"LI",{});var HEe=s(nb);Wre=n(HEe,"STRONG",{});var hzr=s(Wre);h4o=r(hzr,"nystromformer"),hzr.forEach(t),p4o=r(HEe," \u2014 "),dI=n(HEe,"A",{href:!0});var pzr=s(dI);_4o=r(pzr,"NystromformerForSequenceClassification"),pzr.forEach(t),u4o=r(HEe," (Nystromformer model)"),HEe.forEach(t),b4o=i(L),sb=n(L,"LI",{});var UEe=s(sb);Qre=n(UEe,"STRONG",{});var _zr=s(Qre);v4o=r(_zr,"openai-gpt"),_zr.forEach(t),T4o=r(UEe," \u2014 "),cI=n(UEe,"A",{href:!0});var uzr=s(cI);F4o=r(uzr,"OpenAIGPTForSequenceClassification"),uzr.forEach(t),C4o=r(UEe," (OpenAI GPT model)"),UEe.forEach(t),M4o=i(L),lb=n(L,"LI",{});var JEe=s(lb);Hre=n(JEe,"STRONG",{});var bzr=s(Hre);E4o=r(bzr,"perceiver"),bzr.forEach(t),y4o=r(JEe," \u2014 "),fI=n(JEe,"A",{href:!0});var vzr=s(fI);w4o=r(vzr,"PerceiverForSequenceClassification"),vzr.forEach(t),A4o=r(JEe," (Perceiver model)"),JEe.forEach(t),L4o=i(L),ib=n(L,"LI",{});var YEe=s(ib);Ure=n(YEe,"STRONG",{});var Tzr=s(Ure);B4o=r(Tzr,"plbart"),Tzr.forEach(t),x4o=r(YEe," \u2014 "),mI=n(YEe,"A",{href:!0});var Fzr=s(mI);k4o=r(Fzr,"PLBartForSequenceClassification"),Fzr.forEach(t),R4o=r(YEe," (PLBart model)"),YEe.forEach(t),S4o=i(L),db=n(L,"LI",{});var KEe=s(db);Jre=n(KEe,"STRONG",{});var Czr=s(Jre);P4o=r(Czr,"qdqbert"),Czr.forEach(t),$4o=r(KEe," \u2014 "),gI=n(KEe,"A",{href:!0});var Mzr=s(gI);I4o=r(Mzr,"QDQBertForSequenceClassification"),Mzr.forEach(t),D4o=r(KEe," (QDQBert model)"),KEe.forEach(t),j4o=i(L),cb=n(L,"LI",{});var ZEe=s(cb);Yre=n(ZEe,"STRONG",{});var Ezr=s(Yre);N4o=r(Ezr,"reformer"),Ezr.forEach(t),q4o=r(ZEe," \u2014 "),hI=n(ZEe,"A",{href:!0});var yzr=s(hI);G4o=r(yzr,"ReformerForSequenceClassification"),yzr.forEach(t),O4o=r(ZEe," (Reformer model)"),ZEe.forEach(t),X4o=i(L),fb=n(L,"LI",{});var e3e=s(fb);Kre=n(e3e,"STRONG",{});var wzr=s(Kre);V4o=r(wzr,"rembert"),wzr.forEach(t),z4o=r(e3e," \u2014 "),pI=n(e3e,"A",{href:!0});var Azr=s(pI);W4o=r(Azr,"RemBertForSequenceClassification"),Azr.forEach(t),Q4o=r(e3e," (RemBERT model)"),e3e.forEach(t),H4o=i(L),mb=n(L,"LI",{});var o3e=s(mb);Zre=n(o3e,"STRONG",{});var Lzr=s(Zre);U4o=r(Lzr,"roberta"),Lzr.forEach(t),J4o=r(o3e," \u2014 "),_I=n(o3e,"A",{href:!0});var Bzr=s(_I);Y4o=r(Bzr,"RobertaForSequenceClassification"),Bzr.forEach(t),K4o=r(o3e," (RoBERTa model)"),o3e.forEach(t),Z4o=i(L),gb=n(L,"LI",{});var r3e=s(gb);ete=n(r3e,"STRONG",{});var xzr=s(ete);eMo=r(xzr,"roformer"),xzr.forEach(t),oMo=r(r3e," \u2014 "),uI=n(r3e,"A",{href:!0});var kzr=s(uI);rMo=r(kzr,"RoFormerForSequenceClassification"),kzr.forEach(t),tMo=r(r3e," (RoFormer model)"),r3e.forEach(t),aMo=i(L),hb=n(L,"LI",{});var t3e=s(hb);ote=n(t3e,"STRONG",{});var Rzr=s(ote);nMo=r(Rzr,"squeezebert"),Rzr.forEach(t),sMo=r(t3e," \u2014 "),bI=n(t3e,"A",{href:!0});var Szr=s(bI);lMo=r(Szr,"SqueezeBertForSequenceClassification"),Szr.forEach(t),iMo=r(t3e," (SqueezeBERT model)"),t3e.forEach(t),dMo=i(L),pb=n(L,"LI",{});var a3e=s(pb);rte=n(a3e,"STRONG",{});var Pzr=s(rte);cMo=r(Pzr,"tapas"),Pzr.forEach(t),fMo=r(a3e," \u2014 "),vI=n(a3e,"A",{href:!0});var $zr=s(vI);mMo=r($zr,"TapasForSequenceClassification"),$zr.forEach(t),gMo=r(a3e," (TAPAS model)"),a3e.forEach(t),hMo=i(L),_b=n(L,"LI",{});var n3e=s(_b);tte=n(n3e,"STRONG",{});var Izr=s(tte);pMo=r(Izr,"transfo-xl"),Izr.forEach(t),_Mo=r(n3e," \u2014 "),TI=n(n3e,"A",{href:!0});var Dzr=s(TI);uMo=r(Dzr,"TransfoXLForSequenceClassification"),Dzr.forEach(t),bMo=r(n3e," (Transformer-XL model)"),n3e.forEach(t),vMo=i(L),ub=n(L,"LI",{});var s3e=s(ub);ate=n(s3e,"STRONG",{});var jzr=s(ate);TMo=r(jzr,"xlm"),jzr.forEach(t),FMo=r(s3e," \u2014 "),FI=n(s3e,"A",{href:!0});var Nzr=s(FI);CMo=r(Nzr,"XLMForSequenceClassification"),Nzr.forEach(t),MMo=r(s3e," (XLM model)"),s3e.forEach(t),EMo=i(L),bb=n(L,"LI",{});var l3e=s(bb);nte=n(l3e,"STRONG",{});var qzr=s(nte);yMo=r(qzr,"xlm-roberta"),qzr.forEach(t),wMo=r(l3e," \u2014 "),CI=n(l3e,"A",{href:!0});var Gzr=s(CI);AMo=r(Gzr,"XLMRobertaForSequenceClassification"),Gzr.forEach(t),LMo=r(l3e," (XLM-RoBERTa model)"),l3e.forEach(t),BMo=i(L),vb=n(L,"LI",{});var i3e=s(vb);ste=n(i3e,"STRONG",{});var Ozr=s(ste);xMo=r(Ozr,"xlm-roberta-xl"),Ozr.forEach(t),kMo=r(i3e," \u2014 "),MI=n(i3e,"A",{href:!0});var Xzr=s(MI);RMo=r(Xzr,"XLMRobertaXLForSequenceClassification"),Xzr.forEach(t),SMo=r(i3e," (XLM-RoBERTa-XL model)"),i3e.forEach(t),PMo=i(L),Tb=n(L,"LI",{});var d3e=s(Tb);lte=n(d3e,"STRONG",{});var Vzr=s(lte);$Mo=r(Vzr,"xlnet"),Vzr.forEach(t),IMo=r(d3e," \u2014 "),EI=n(d3e,"A",{href:!0});var zzr=s(EI);DMo=r(zzr,"XLNetForSequenceClassification"),zzr.forEach(t),jMo=r(d3e," (XLNet model)"),d3e.forEach(t),NMo=i(L),Fb=n(L,"LI",{});var c3e=s(Fb);ite=n(c3e,"STRONG",{});var Wzr=s(ite);qMo=r(Wzr,"yoso"),Wzr.forEach(t),GMo=r(c3e," \u2014 "),yI=n(c3e,"A",{href:!0});var Qzr=s(yI);OMo=r(Qzr,"YosoForSequenceClassification"),Qzr.forEach(t),XMo=r(c3e," (YOSO model)"),c3e.forEach(t),L.forEach(t),VMo=i(qt),Cb=n(qt,"P",{});var f3e=s(Cb);zMo=r(f3e,"The model is set in evaluation mode by default using "),dte=n(f3e,"CODE",{});var Hzr=s(dte);WMo=r(Hzr,"model.eval()"),Hzr.forEach(t),QMo=r(f3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cte=n(f3e,"CODE",{});var Uzr=s(cte);HMo=r(Uzr,"model.train()"),Uzr.forEach(t),f3e.forEach(t),UMo=i(qt),fte=n(qt,"P",{});var Jzr=s(fte);JMo=r(Jzr,"Examples:"),Jzr.forEach(t),YMo=i(qt),m(X3.$$.fragment,qt),qt.forEach(t),Js.forEach(t),J7e=i(c),sd=n(c,"H2",{class:!0});var tke=s(sd);Mb=n(tke,"A",{id:!0,class:!0,href:!0});var Yzr=s(Mb);mte=n(Yzr,"SPAN",{});var Kzr=s(mte);m(V3.$$.fragment,Kzr),Kzr.forEach(t),Yzr.forEach(t),KMo=i(tke),gte=n(tke,"SPAN",{});var Zzr=s(gte);ZMo=r(Zzr,"AutoModelForMultipleChoice"),Zzr.forEach(t),tke.forEach(t),Y7e=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(z3.$$.fragment,Ks),eEo=i(Ks),ld=n(Ks,"P",{});var zV=s(ld);oEo=r(zV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hte=n(zV,"CODE",{});var eWr=s(hte);rEo=r(eWr,"from_pretrained()"),eWr.forEach(t),tEo=r(zV,"class method or the "),pte=n(zV,"CODE",{});var oWr=s(pte);aEo=r(oWr,"from_config()"),oWr.forEach(t),nEo=r(zV,`class
method.`),zV.forEach(t),sEo=i(Ks),W3=n(Ks,"P",{});var ake=s(W3);lEo=r(ake,"This class cannot be instantiated directly using "),_te=n(ake,"CODE",{});var rWr=s(_te);iEo=r(rWr,"__init__()"),rWr.forEach(t),dEo=r(ake," (throws an error)."),ake.forEach(t),cEo=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(Q3.$$.fragment,Zs),fEo=i(Zs),ute=n(Zs,"P",{});var tWr=s(ute);mEo=r(tWr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tWr.forEach(t),gEo=i(Zs),id=n(Zs,"P",{});var WV=s(id);hEo=r(WV,`Note:
Loading a model from its configuration file does `),bte=n(WV,"STRONG",{});var aWr=s(bte);pEo=r(aWr,"not"),aWr.forEach(t),_Eo=r(WV,` load the model weights. It only affects the
model\u2019s configuration. Use `),vte=n(WV,"CODE",{});var nWr=s(vte);uEo=r(nWr,"from_pretrained()"),nWr.forEach(t),bEo=r(WV,"to load the model weights."),WV.forEach(t),vEo=i(Zs),Tte=n(Zs,"P",{});var sWr=s(Tte);TEo=r(sWr,"Examples:"),sWr.forEach(t),FEo=i(Zs),m(H3.$$.fragment,Zs),Zs.forEach(t),CEo=i(Ks),je=n(Ks,"DIV",{class:!0});var Gt=s(je);m(U3.$$.fragment,Gt),MEo=i(Gt),Fte=n(Gt,"P",{});var lWr=s(Fte);EEo=r(lWr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lWr.forEach(t),yEo=i(Gt),za=n(Gt,"P",{});var RM=s(za);wEo=r(RM,"The model class to instantiate is selected based on the "),Cte=n(RM,"CODE",{});var iWr=s(Cte);AEo=r(iWr,"model_type"),iWr.forEach(t),LEo=r(RM,` property of the config object (either
passed as an argument or loaded from `),Mte=n(RM,"CODE",{});var dWr=s(Mte);BEo=r(dWr,"pretrained_model_name_or_path"),dWr.forEach(t),xEo=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ete=n(RM,"CODE",{});var cWr=s(Ete);kEo=r(cWr,"pretrained_model_name_or_path"),cWr.forEach(t),REo=r(RM,":"),RM.forEach(t),SEo=i(Gt),G=n(Gt,"UL",{});var O=s(G);Eb=n(O,"LI",{});var m3e=s(Eb);yte=n(m3e,"STRONG",{});var fWr=s(yte);PEo=r(fWr,"albert"),fWr.forEach(t),$Eo=r(m3e," \u2014 "),wI=n(m3e,"A",{href:!0});var mWr=s(wI);IEo=r(mWr,"AlbertForMultipleChoice"),mWr.forEach(t),DEo=r(m3e," (ALBERT model)"),m3e.forEach(t),jEo=i(O),yb=n(O,"LI",{});var g3e=s(yb);wte=n(g3e,"STRONG",{});var gWr=s(wte);NEo=r(gWr,"bert"),gWr.forEach(t),qEo=r(g3e," \u2014 "),AI=n(g3e,"A",{href:!0});var hWr=s(AI);GEo=r(hWr,"BertForMultipleChoice"),hWr.forEach(t),OEo=r(g3e," (BERT model)"),g3e.forEach(t),XEo=i(O),wb=n(O,"LI",{});var h3e=s(wb);Ate=n(h3e,"STRONG",{});var pWr=s(Ate);VEo=r(pWr,"big_bird"),pWr.forEach(t),zEo=r(h3e," \u2014 "),LI=n(h3e,"A",{href:!0});var _Wr=s(LI);WEo=r(_Wr,"BigBirdForMultipleChoice"),_Wr.forEach(t),QEo=r(h3e," (BigBird model)"),h3e.forEach(t),HEo=i(O),Ab=n(O,"LI",{});var p3e=s(Ab);Lte=n(p3e,"STRONG",{});var uWr=s(Lte);UEo=r(uWr,"camembert"),uWr.forEach(t),JEo=r(p3e," \u2014 "),BI=n(p3e,"A",{href:!0});var bWr=s(BI);YEo=r(bWr,"CamembertForMultipleChoice"),bWr.forEach(t),KEo=r(p3e," (CamemBERT model)"),p3e.forEach(t),ZEo=i(O),Lb=n(O,"LI",{});var _3e=s(Lb);Bte=n(_3e,"STRONG",{});var vWr=s(Bte);e3o=r(vWr,"canine"),vWr.forEach(t),o3o=r(_3e," \u2014 "),xI=n(_3e,"A",{href:!0});var TWr=s(xI);r3o=r(TWr,"CanineForMultipleChoice"),TWr.forEach(t),t3o=r(_3e," (Canine model)"),_3e.forEach(t),a3o=i(O),Bb=n(O,"LI",{});var u3e=s(Bb);xte=n(u3e,"STRONG",{});var FWr=s(xte);n3o=r(FWr,"convbert"),FWr.forEach(t),s3o=r(u3e," \u2014 "),kI=n(u3e,"A",{href:!0});var CWr=s(kI);l3o=r(CWr,"ConvBertForMultipleChoice"),CWr.forEach(t),i3o=r(u3e," (ConvBERT model)"),u3e.forEach(t),d3o=i(O),xb=n(O,"LI",{});var b3e=s(xb);kte=n(b3e,"STRONG",{});var MWr=s(kte);c3o=r(MWr,"data2vec-text"),MWr.forEach(t),f3o=r(b3e," \u2014 "),RI=n(b3e,"A",{href:!0});var EWr=s(RI);m3o=r(EWr,"Data2VecTextForMultipleChoice"),EWr.forEach(t),g3o=r(b3e," (Data2VecText model)"),b3e.forEach(t),h3o=i(O),kb=n(O,"LI",{});var v3e=s(kb);Rte=n(v3e,"STRONG",{});var yWr=s(Rte);p3o=r(yWr,"distilbert"),yWr.forEach(t),_3o=r(v3e," \u2014 "),SI=n(v3e,"A",{href:!0});var wWr=s(SI);u3o=r(wWr,"DistilBertForMultipleChoice"),wWr.forEach(t),b3o=r(v3e," (DistilBERT model)"),v3e.forEach(t),v3o=i(O),Rb=n(O,"LI",{});var T3e=s(Rb);Ste=n(T3e,"STRONG",{});var AWr=s(Ste);T3o=r(AWr,"electra"),AWr.forEach(t),F3o=r(T3e," \u2014 "),PI=n(T3e,"A",{href:!0});var LWr=s(PI);C3o=r(LWr,"ElectraForMultipleChoice"),LWr.forEach(t),M3o=r(T3e," (ELECTRA model)"),T3e.forEach(t),E3o=i(O),Sb=n(O,"LI",{});var F3e=s(Sb);Pte=n(F3e,"STRONG",{});var BWr=s(Pte);y3o=r(BWr,"flaubert"),BWr.forEach(t),w3o=r(F3e," \u2014 "),$I=n(F3e,"A",{href:!0});var xWr=s($I);A3o=r(xWr,"FlaubertForMultipleChoice"),xWr.forEach(t),L3o=r(F3e," (FlauBERT model)"),F3e.forEach(t),B3o=i(O),Pb=n(O,"LI",{});var C3e=s(Pb);$te=n(C3e,"STRONG",{});var kWr=s($te);x3o=r(kWr,"fnet"),kWr.forEach(t),k3o=r(C3e," \u2014 "),II=n(C3e,"A",{href:!0});var RWr=s(II);R3o=r(RWr,"FNetForMultipleChoice"),RWr.forEach(t),S3o=r(C3e," (FNet model)"),C3e.forEach(t),P3o=i(O),$b=n(O,"LI",{});var M3e=s($b);Ite=n(M3e,"STRONG",{});var SWr=s(Ite);$3o=r(SWr,"funnel"),SWr.forEach(t),I3o=r(M3e," \u2014 "),DI=n(M3e,"A",{href:!0});var PWr=s(DI);D3o=r(PWr,"FunnelForMultipleChoice"),PWr.forEach(t),j3o=r(M3e," (Funnel Transformer model)"),M3e.forEach(t),N3o=i(O),Ib=n(O,"LI",{});var E3e=s(Ib);Dte=n(E3e,"STRONG",{});var $Wr=s(Dte);q3o=r($Wr,"ibert"),$Wr.forEach(t),G3o=r(E3e," \u2014 "),jI=n(E3e,"A",{href:!0});var IWr=s(jI);O3o=r(IWr,"IBertForMultipleChoice"),IWr.forEach(t),X3o=r(E3e," (I-BERT model)"),E3e.forEach(t),V3o=i(O),Db=n(O,"LI",{});var y3e=s(Db);jte=n(y3e,"STRONG",{});var DWr=s(jte);z3o=r(DWr,"longformer"),DWr.forEach(t),W3o=r(y3e," \u2014 "),NI=n(y3e,"A",{href:!0});var jWr=s(NI);Q3o=r(jWr,"LongformerForMultipleChoice"),jWr.forEach(t),H3o=r(y3e," (Longformer model)"),y3e.forEach(t),U3o=i(O),jb=n(O,"LI",{});var w3e=s(jb);Nte=n(w3e,"STRONG",{});var NWr=s(Nte);J3o=r(NWr,"megatron-bert"),NWr.forEach(t),Y3o=r(w3e," \u2014 "),qI=n(w3e,"A",{href:!0});var qWr=s(qI);K3o=r(qWr,"MegatronBertForMultipleChoice"),qWr.forEach(t),Z3o=r(w3e," (MegatronBert model)"),w3e.forEach(t),eyo=i(O),Nb=n(O,"LI",{});var A3e=s(Nb);qte=n(A3e,"STRONG",{});var GWr=s(qte);oyo=r(GWr,"mobilebert"),GWr.forEach(t),ryo=r(A3e," \u2014 "),GI=n(A3e,"A",{href:!0});var OWr=s(GI);tyo=r(OWr,"MobileBertForMultipleChoice"),OWr.forEach(t),ayo=r(A3e," (MobileBERT model)"),A3e.forEach(t),nyo=i(O),qb=n(O,"LI",{});var L3e=s(qb);Gte=n(L3e,"STRONG",{});var XWr=s(Gte);syo=r(XWr,"mpnet"),XWr.forEach(t),lyo=r(L3e," \u2014 "),OI=n(L3e,"A",{href:!0});var VWr=s(OI);iyo=r(VWr,"MPNetForMultipleChoice"),VWr.forEach(t),dyo=r(L3e," (MPNet model)"),L3e.forEach(t),cyo=i(O),Gb=n(O,"LI",{});var B3e=s(Gb);Ote=n(B3e,"STRONG",{});var zWr=s(Ote);fyo=r(zWr,"nystromformer"),zWr.forEach(t),myo=r(B3e," \u2014 "),XI=n(B3e,"A",{href:!0});var WWr=s(XI);gyo=r(WWr,"NystromformerForMultipleChoice"),WWr.forEach(t),hyo=r(B3e," (Nystromformer model)"),B3e.forEach(t),pyo=i(O),Ob=n(O,"LI",{});var x3e=s(Ob);Xte=n(x3e,"STRONG",{});var QWr=s(Xte);_yo=r(QWr,"qdqbert"),QWr.forEach(t),uyo=r(x3e," \u2014 "),VI=n(x3e,"A",{href:!0});var HWr=s(VI);byo=r(HWr,"QDQBertForMultipleChoice"),HWr.forEach(t),vyo=r(x3e," (QDQBert model)"),x3e.forEach(t),Tyo=i(O),Xb=n(O,"LI",{});var k3e=s(Xb);Vte=n(k3e,"STRONG",{});var UWr=s(Vte);Fyo=r(UWr,"rembert"),UWr.forEach(t),Cyo=r(k3e," \u2014 "),zI=n(k3e,"A",{href:!0});var JWr=s(zI);Myo=r(JWr,"RemBertForMultipleChoice"),JWr.forEach(t),Eyo=r(k3e," (RemBERT model)"),k3e.forEach(t),yyo=i(O),Vb=n(O,"LI",{});var R3e=s(Vb);zte=n(R3e,"STRONG",{});var YWr=s(zte);wyo=r(YWr,"roberta"),YWr.forEach(t),Ayo=r(R3e," \u2014 "),WI=n(R3e,"A",{href:!0});var KWr=s(WI);Lyo=r(KWr,"RobertaForMultipleChoice"),KWr.forEach(t),Byo=r(R3e," (RoBERTa model)"),R3e.forEach(t),xyo=i(O),zb=n(O,"LI",{});var S3e=s(zb);Wte=n(S3e,"STRONG",{});var ZWr=s(Wte);kyo=r(ZWr,"roformer"),ZWr.forEach(t),Ryo=r(S3e," \u2014 "),QI=n(S3e,"A",{href:!0});var eQr=s(QI);Syo=r(eQr,"RoFormerForMultipleChoice"),eQr.forEach(t),Pyo=r(S3e," (RoFormer model)"),S3e.forEach(t),$yo=i(O),Wb=n(O,"LI",{});var P3e=s(Wb);Qte=n(P3e,"STRONG",{});var oQr=s(Qte);Iyo=r(oQr,"squeezebert"),oQr.forEach(t),Dyo=r(P3e," \u2014 "),HI=n(P3e,"A",{href:!0});var rQr=s(HI);jyo=r(rQr,"SqueezeBertForMultipleChoice"),rQr.forEach(t),Nyo=r(P3e," (SqueezeBERT model)"),P3e.forEach(t),qyo=i(O),Qb=n(O,"LI",{});var $3e=s(Qb);Hte=n($3e,"STRONG",{});var tQr=s(Hte);Gyo=r(tQr,"xlm"),tQr.forEach(t),Oyo=r($3e," \u2014 "),UI=n($3e,"A",{href:!0});var aQr=s(UI);Xyo=r(aQr,"XLMForMultipleChoice"),aQr.forEach(t),Vyo=r($3e," (XLM model)"),$3e.forEach(t),zyo=i(O),Hb=n(O,"LI",{});var I3e=s(Hb);Ute=n(I3e,"STRONG",{});var nQr=s(Ute);Wyo=r(nQr,"xlm-roberta"),nQr.forEach(t),Qyo=r(I3e," \u2014 "),JI=n(I3e,"A",{href:!0});var sQr=s(JI);Hyo=r(sQr,"XLMRobertaForMultipleChoice"),sQr.forEach(t),Uyo=r(I3e," (XLM-RoBERTa model)"),I3e.forEach(t),Jyo=i(O),Ub=n(O,"LI",{});var D3e=s(Ub);Jte=n(D3e,"STRONG",{});var lQr=s(Jte);Yyo=r(lQr,"xlm-roberta-xl"),lQr.forEach(t),Kyo=r(D3e," \u2014 "),YI=n(D3e,"A",{href:!0});var iQr=s(YI);Zyo=r(iQr,"XLMRobertaXLForMultipleChoice"),iQr.forEach(t),ewo=r(D3e," (XLM-RoBERTa-XL model)"),D3e.forEach(t),owo=i(O),Jb=n(O,"LI",{});var j3e=s(Jb);Yte=n(j3e,"STRONG",{});var dQr=s(Yte);rwo=r(dQr,"xlnet"),dQr.forEach(t),two=r(j3e," \u2014 "),KI=n(j3e,"A",{href:!0});var cQr=s(KI);awo=r(cQr,"XLNetForMultipleChoice"),cQr.forEach(t),nwo=r(j3e," (XLNet model)"),j3e.forEach(t),swo=i(O),Yb=n(O,"LI",{});var N3e=s(Yb);Kte=n(N3e,"STRONG",{});var fQr=s(Kte);lwo=r(fQr,"yoso"),fQr.forEach(t),iwo=r(N3e," \u2014 "),ZI=n(N3e,"A",{href:!0});var mQr=s(ZI);dwo=r(mQr,"YosoForMultipleChoice"),mQr.forEach(t),cwo=r(N3e," (YOSO model)"),N3e.forEach(t),O.forEach(t),fwo=i(Gt),Kb=n(Gt,"P",{});var q3e=s(Kb);mwo=r(q3e,"The model is set in evaluation mode by default using "),Zte=n(q3e,"CODE",{});var gQr=s(Zte);gwo=r(gQr,"model.eval()"),gQr.forEach(t),hwo=r(q3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eae=n(q3e,"CODE",{});var hQr=s(eae);pwo=r(hQr,"model.train()"),hQr.forEach(t),q3e.forEach(t),_wo=i(Gt),oae=n(Gt,"P",{});var pQr=s(oae);uwo=r(pQr,"Examples:"),pQr.forEach(t),bwo=i(Gt),m(J3.$$.fragment,Gt),Gt.forEach(t),Ks.forEach(t),K7e=i(c),dd=n(c,"H2",{class:!0});var nke=s(dd);Zb=n(nke,"A",{id:!0,class:!0,href:!0});var _Qr=s(Zb);rae=n(_Qr,"SPAN",{});var uQr=s(rae);m(Y3.$$.fragment,uQr),uQr.forEach(t),_Qr.forEach(t),vwo=i(nke),tae=n(nke,"SPAN",{});var bQr=s(tae);Two=r(bQr,"AutoModelForNextSentencePrediction"),bQr.forEach(t),nke.forEach(t),Z7e=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(K3.$$.fragment,el),Fwo=i(el),cd=n(el,"P",{});var QV=s(cd);Cwo=r(QV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aae=n(QV,"CODE",{});var vQr=s(aae);Mwo=r(vQr,"from_pretrained()"),vQr.forEach(t),Ewo=r(QV,"class method or the "),nae=n(QV,"CODE",{});var TQr=s(nae);ywo=r(TQr,"from_config()"),TQr.forEach(t),wwo=r(QV,`class
method.`),QV.forEach(t),Awo=i(el),Z3=n(el,"P",{});var ske=s(Z3);Lwo=r(ske,"This class cannot be instantiated directly using "),sae=n(ske,"CODE",{});var FQr=s(sae);Bwo=r(FQr,"__init__()"),FQr.forEach(t),xwo=r(ske," (throws an error)."),ske.forEach(t),kwo=i(el),Qr=n(el,"DIV",{class:!0});var ol=s(Qr);m(ey.$$.fragment,ol),Rwo=i(ol),lae=n(ol,"P",{});var CQr=s(lae);Swo=r(CQr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CQr.forEach(t),Pwo=i(ol),fd=n(ol,"P",{});var HV=s(fd);$wo=r(HV,`Note:
Loading a model from its configuration file does `),iae=n(HV,"STRONG",{});var MQr=s(iae);Iwo=r(MQr,"not"),MQr.forEach(t),Dwo=r(HV,` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=n(HV,"CODE",{});var EQr=s(dae);jwo=r(EQr,"from_pretrained()"),EQr.forEach(t),Nwo=r(HV,"to load the model weights."),HV.forEach(t),qwo=i(ol),cae=n(ol,"P",{});var yQr=s(cae);Gwo=r(yQr,"Examples:"),yQr.forEach(t),Owo=i(ol),m(oy.$$.fragment,ol),ol.forEach(t),Xwo=i(el),Ne=n(el,"DIV",{class:!0});var Ot=s(Ne);m(ry.$$.fragment,Ot),Vwo=i(Ot),fae=n(Ot,"P",{});var wQr=s(fae);zwo=r(wQr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wQr.forEach(t),Wwo=i(Ot),Wa=n(Ot,"P",{});var SM=s(Wa);Qwo=r(SM,"The model class to instantiate is selected based on the "),mae=n(SM,"CODE",{});var AQr=s(mae);Hwo=r(AQr,"model_type"),AQr.forEach(t),Uwo=r(SM,` property of the config object (either
passed as an argument or loaded from `),gae=n(SM,"CODE",{});var LQr=s(gae);Jwo=r(LQr,"pretrained_model_name_or_path"),LQr.forEach(t),Ywo=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hae=n(SM,"CODE",{});var BQr=s(hae);Kwo=r(BQr,"pretrained_model_name_or_path"),BQr.forEach(t),Zwo=r(SM,":"),SM.forEach(t),e6o=i(Ot),na=n(Ot,"UL",{});var rl=s(na);e5=n(rl,"LI",{});var G3e=s(e5);pae=n(G3e,"STRONG",{});var xQr=s(pae);o6o=r(xQr,"bert"),xQr.forEach(t),r6o=r(G3e," \u2014 "),eD=n(G3e,"A",{href:!0});var kQr=s(eD);t6o=r(kQr,"BertForNextSentencePrediction"),kQr.forEach(t),a6o=r(G3e," (BERT model)"),G3e.forEach(t),n6o=i(rl),o5=n(rl,"LI",{});var O3e=s(o5);_ae=n(O3e,"STRONG",{});var RQr=s(_ae);s6o=r(RQr,"fnet"),RQr.forEach(t),l6o=r(O3e," \u2014 "),oD=n(O3e,"A",{href:!0});var SQr=s(oD);i6o=r(SQr,"FNetForNextSentencePrediction"),SQr.forEach(t),d6o=r(O3e," (FNet model)"),O3e.forEach(t),c6o=i(rl),r5=n(rl,"LI",{});var X3e=s(r5);uae=n(X3e,"STRONG",{});var PQr=s(uae);f6o=r(PQr,"megatron-bert"),PQr.forEach(t),m6o=r(X3e," \u2014 "),rD=n(X3e,"A",{href:!0});var $Qr=s(rD);g6o=r($Qr,"MegatronBertForNextSentencePrediction"),$Qr.forEach(t),h6o=r(X3e," (MegatronBert model)"),X3e.forEach(t),p6o=i(rl),t5=n(rl,"LI",{});var V3e=s(t5);bae=n(V3e,"STRONG",{});var IQr=s(bae);_6o=r(IQr,"mobilebert"),IQr.forEach(t),u6o=r(V3e," \u2014 "),tD=n(V3e,"A",{href:!0});var DQr=s(tD);b6o=r(DQr,"MobileBertForNextSentencePrediction"),DQr.forEach(t),v6o=r(V3e," (MobileBERT model)"),V3e.forEach(t),T6o=i(rl),a5=n(rl,"LI",{});var z3e=s(a5);vae=n(z3e,"STRONG",{});var jQr=s(vae);F6o=r(jQr,"qdqbert"),jQr.forEach(t),C6o=r(z3e," \u2014 "),aD=n(z3e,"A",{href:!0});var NQr=s(aD);M6o=r(NQr,"QDQBertForNextSentencePrediction"),NQr.forEach(t),E6o=r(z3e," (QDQBert model)"),z3e.forEach(t),rl.forEach(t),y6o=i(Ot),n5=n(Ot,"P",{});var W3e=s(n5);w6o=r(W3e,"The model is set in evaluation mode by default using "),Tae=n(W3e,"CODE",{});var qQr=s(Tae);A6o=r(qQr,"model.eval()"),qQr.forEach(t),L6o=r(W3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fae=n(W3e,"CODE",{});var GQr=s(Fae);B6o=r(GQr,"model.train()"),GQr.forEach(t),W3e.forEach(t),x6o=i(Ot),Cae=n(Ot,"P",{});var OQr=s(Cae);k6o=r(OQr,"Examples:"),OQr.forEach(t),R6o=i(Ot),m(ty.$$.fragment,Ot),Ot.forEach(t),el.forEach(t),eBe=i(c),md=n(c,"H2",{class:!0});var lke=s(md);s5=n(lke,"A",{id:!0,class:!0,href:!0});var XQr=s(s5);Mae=n(XQr,"SPAN",{});var VQr=s(Mae);m(ay.$$.fragment,VQr),VQr.forEach(t),XQr.forEach(t),S6o=i(lke),Eae=n(lke,"SPAN",{});var zQr=s(Eae);P6o=r(zQr,"AutoModelForTokenClassification"),zQr.forEach(t),lke.forEach(t),oBe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(ny.$$.fragment,tl),$6o=i(tl),gd=n(tl,"P",{});var UV=s(gd);I6o=r(UV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yae=n(UV,"CODE",{});var WQr=s(yae);D6o=r(WQr,"from_pretrained()"),WQr.forEach(t),j6o=r(UV,"class method or the "),wae=n(UV,"CODE",{});var QQr=s(wae);N6o=r(QQr,"from_config()"),QQr.forEach(t),q6o=r(UV,`class
method.`),UV.forEach(t),G6o=i(tl),sy=n(tl,"P",{});var ike=s(sy);O6o=r(ike,"This class cannot be instantiated directly using "),Aae=n(ike,"CODE",{});var HQr=s(Aae);X6o=r(HQr,"__init__()"),HQr.forEach(t),V6o=r(ike," (throws an error)."),ike.forEach(t),z6o=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);m(ly.$$.fragment,al),W6o=i(al),Lae=n(al,"P",{});var UQr=s(Lae);Q6o=r(UQr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UQr.forEach(t),H6o=i(al),hd=n(al,"P",{});var JV=s(hd);U6o=r(JV,`Note:
Loading a model from its configuration file does `),Bae=n(JV,"STRONG",{});var JQr=s(Bae);J6o=r(JQr,"not"),JQr.forEach(t),Y6o=r(JV,` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=n(JV,"CODE",{});var YQr=s(xae);K6o=r(YQr,"from_pretrained()"),YQr.forEach(t),Z6o=r(JV,"to load the model weights."),JV.forEach(t),eAo=i(al),kae=n(al,"P",{});var KQr=s(kae);oAo=r(KQr,"Examples:"),KQr.forEach(t),rAo=i(al),m(iy.$$.fragment,al),al.forEach(t),tAo=i(tl),qe=n(tl,"DIV",{class:!0});var Xt=s(qe);m(dy.$$.fragment,Xt),aAo=i(Xt),Rae=n(Xt,"P",{});var ZQr=s(Rae);nAo=r(ZQr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZQr.forEach(t),sAo=i(Xt),Qa=n(Xt,"P",{});var PM=s(Qa);lAo=r(PM,"The model class to instantiate is selected based on the "),Sae=n(PM,"CODE",{});var eHr=s(Sae);iAo=r(eHr,"model_type"),eHr.forEach(t),dAo=r(PM,` property of the config object (either
passed as an argument or loaded from `),Pae=n(PM,"CODE",{});var oHr=s(Pae);cAo=r(oHr,"pretrained_model_name_or_path"),oHr.forEach(t),fAo=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ae=n(PM,"CODE",{});var rHr=s($ae);mAo=r(rHr,"pretrained_model_name_or_path"),rHr.forEach(t),gAo=r(PM,":"),PM.forEach(t),hAo=i(Xt),N=n(Xt,"UL",{});var q=s(N);l5=n(q,"LI",{});var Q3e=s(l5);Iae=n(Q3e,"STRONG",{});var tHr=s(Iae);pAo=r(tHr,"albert"),tHr.forEach(t),_Ao=r(Q3e," \u2014 "),nD=n(Q3e,"A",{href:!0});var aHr=s(nD);uAo=r(aHr,"AlbertForTokenClassification"),aHr.forEach(t),bAo=r(Q3e," (ALBERT model)"),Q3e.forEach(t),vAo=i(q),i5=n(q,"LI",{});var H3e=s(i5);Dae=n(H3e,"STRONG",{});var nHr=s(Dae);TAo=r(nHr,"bert"),nHr.forEach(t),FAo=r(H3e," \u2014 "),sD=n(H3e,"A",{href:!0});var sHr=s(sD);CAo=r(sHr,"BertForTokenClassification"),sHr.forEach(t),MAo=r(H3e," (BERT model)"),H3e.forEach(t),EAo=i(q),d5=n(q,"LI",{});var U3e=s(d5);jae=n(U3e,"STRONG",{});var lHr=s(jae);yAo=r(lHr,"big_bird"),lHr.forEach(t),wAo=r(U3e," \u2014 "),lD=n(U3e,"A",{href:!0});var iHr=s(lD);AAo=r(iHr,"BigBirdForTokenClassification"),iHr.forEach(t),LAo=r(U3e," (BigBird model)"),U3e.forEach(t),BAo=i(q),c5=n(q,"LI",{});var J3e=s(c5);Nae=n(J3e,"STRONG",{});var dHr=s(Nae);xAo=r(dHr,"camembert"),dHr.forEach(t),kAo=r(J3e," \u2014 "),iD=n(J3e,"A",{href:!0});var cHr=s(iD);RAo=r(cHr,"CamembertForTokenClassification"),cHr.forEach(t),SAo=r(J3e," (CamemBERT model)"),J3e.forEach(t),PAo=i(q),f5=n(q,"LI",{});var Y3e=s(f5);qae=n(Y3e,"STRONG",{});var fHr=s(qae);$Ao=r(fHr,"canine"),fHr.forEach(t),IAo=r(Y3e," \u2014 "),dD=n(Y3e,"A",{href:!0});var mHr=s(dD);DAo=r(mHr,"CanineForTokenClassification"),mHr.forEach(t),jAo=r(Y3e," (Canine model)"),Y3e.forEach(t),NAo=i(q),m5=n(q,"LI",{});var K3e=s(m5);Gae=n(K3e,"STRONG",{});var gHr=s(Gae);qAo=r(gHr,"convbert"),gHr.forEach(t),GAo=r(K3e," \u2014 "),cD=n(K3e,"A",{href:!0});var hHr=s(cD);OAo=r(hHr,"ConvBertForTokenClassification"),hHr.forEach(t),XAo=r(K3e," (ConvBERT model)"),K3e.forEach(t),VAo=i(q),g5=n(q,"LI",{});var Z3e=s(g5);Oae=n(Z3e,"STRONG",{});var pHr=s(Oae);zAo=r(pHr,"data2vec-text"),pHr.forEach(t),WAo=r(Z3e," \u2014 "),fD=n(Z3e,"A",{href:!0});var _Hr=s(fD);QAo=r(_Hr,"Data2VecTextForTokenClassification"),_Hr.forEach(t),HAo=r(Z3e," (Data2VecText model)"),Z3e.forEach(t),UAo=i(q),h5=n(q,"LI",{});var eye=s(h5);Xae=n(eye,"STRONG",{});var uHr=s(Xae);JAo=r(uHr,"deberta"),uHr.forEach(t),YAo=r(eye," \u2014 "),mD=n(eye,"A",{href:!0});var bHr=s(mD);KAo=r(bHr,"DebertaForTokenClassification"),bHr.forEach(t),ZAo=r(eye," (DeBERTa model)"),eye.forEach(t),e0o=i(q),p5=n(q,"LI",{});var oye=s(p5);Vae=n(oye,"STRONG",{});var vHr=s(Vae);o0o=r(vHr,"deberta-v2"),vHr.forEach(t),r0o=r(oye," \u2014 "),gD=n(oye,"A",{href:!0});var THr=s(gD);t0o=r(THr,"DebertaV2ForTokenClassification"),THr.forEach(t),a0o=r(oye," (DeBERTa-v2 model)"),oye.forEach(t),n0o=i(q),_5=n(q,"LI",{});var rye=s(_5);zae=n(rye,"STRONG",{});var FHr=s(zae);s0o=r(FHr,"distilbert"),FHr.forEach(t),l0o=r(rye," \u2014 "),hD=n(rye,"A",{href:!0});var CHr=s(hD);i0o=r(CHr,"DistilBertForTokenClassification"),CHr.forEach(t),d0o=r(rye," (DistilBERT model)"),rye.forEach(t),c0o=i(q),u5=n(q,"LI",{});var tye=s(u5);Wae=n(tye,"STRONG",{});var MHr=s(Wae);f0o=r(MHr,"electra"),MHr.forEach(t),m0o=r(tye," \u2014 "),pD=n(tye,"A",{href:!0});var EHr=s(pD);g0o=r(EHr,"ElectraForTokenClassification"),EHr.forEach(t),h0o=r(tye," (ELECTRA model)"),tye.forEach(t),p0o=i(q),b5=n(q,"LI",{});var aye=s(b5);Qae=n(aye,"STRONG",{});var yHr=s(Qae);_0o=r(yHr,"flaubert"),yHr.forEach(t),u0o=r(aye," \u2014 "),_D=n(aye,"A",{href:!0});var wHr=s(_D);b0o=r(wHr,"FlaubertForTokenClassification"),wHr.forEach(t),v0o=r(aye," (FlauBERT model)"),aye.forEach(t),T0o=i(q),v5=n(q,"LI",{});var nye=s(v5);Hae=n(nye,"STRONG",{});var AHr=s(Hae);F0o=r(AHr,"fnet"),AHr.forEach(t),C0o=r(nye," \u2014 "),uD=n(nye,"A",{href:!0});var LHr=s(uD);M0o=r(LHr,"FNetForTokenClassification"),LHr.forEach(t),E0o=r(nye," (FNet model)"),nye.forEach(t),y0o=i(q),T5=n(q,"LI",{});var sye=s(T5);Uae=n(sye,"STRONG",{});var BHr=s(Uae);w0o=r(BHr,"funnel"),BHr.forEach(t),A0o=r(sye," \u2014 "),bD=n(sye,"A",{href:!0});var xHr=s(bD);L0o=r(xHr,"FunnelForTokenClassification"),xHr.forEach(t),B0o=r(sye," (Funnel Transformer model)"),sye.forEach(t),x0o=i(q),F5=n(q,"LI",{});var lye=s(F5);Jae=n(lye,"STRONG",{});var kHr=s(Jae);k0o=r(kHr,"gpt2"),kHr.forEach(t),R0o=r(lye," \u2014 "),vD=n(lye,"A",{href:!0});var RHr=s(vD);S0o=r(RHr,"GPT2ForTokenClassification"),RHr.forEach(t),P0o=r(lye," (OpenAI GPT-2 model)"),lye.forEach(t),$0o=i(q),C5=n(q,"LI",{});var iye=s(C5);Yae=n(iye,"STRONG",{});var SHr=s(Yae);I0o=r(SHr,"ibert"),SHr.forEach(t),D0o=r(iye," \u2014 "),TD=n(iye,"A",{href:!0});var PHr=s(TD);j0o=r(PHr,"IBertForTokenClassification"),PHr.forEach(t),N0o=r(iye," (I-BERT model)"),iye.forEach(t),q0o=i(q),M5=n(q,"LI",{});var dye=s(M5);Kae=n(dye,"STRONG",{});var $Hr=s(Kae);G0o=r($Hr,"layoutlm"),$Hr.forEach(t),O0o=r(dye," \u2014 "),FD=n(dye,"A",{href:!0});var IHr=s(FD);X0o=r(IHr,"LayoutLMForTokenClassification"),IHr.forEach(t),V0o=r(dye," (LayoutLM model)"),dye.forEach(t),z0o=i(q),E5=n(q,"LI",{});var cye=s(E5);Zae=n(cye,"STRONG",{});var DHr=s(Zae);W0o=r(DHr,"layoutlmv2"),DHr.forEach(t),Q0o=r(cye," \u2014 "),CD=n(cye,"A",{href:!0});var jHr=s(CD);H0o=r(jHr,"LayoutLMv2ForTokenClassification"),jHr.forEach(t),U0o=r(cye," (LayoutLMv2 model)"),cye.forEach(t),J0o=i(q),y5=n(q,"LI",{});var fye=s(y5);ene=n(fye,"STRONG",{});var NHr=s(ene);Y0o=r(NHr,"longformer"),NHr.forEach(t),K0o=r(fye," \u2014 "),MD=n(fye,"A",{href:!0});var qHr=s(MD);Z0o=r(qHr,"LongformerForTokenClassification"),qHr.forEach(t),eLo=r(fye," (Longformer model)"),fye.forEach(t),oLo=i(q),w5=n(q,"LI",{});var mye=s(w5);one=n(mye,"STRONG",{});var GHr=s(one);rLo=r(GHr,"megatron-bert"),GHr.forEach(t),tLo=r(mye," \u2014 "),ED=n(mye,"A",{href:!0});var OHr=s(ED);aLo=r(OHr,"MegatronBertForTokenClassification"),OHr.forEach(t),nLo=r(mye," (MegatronBert model)"),mye.forEach(t),sLo=i(q),A5=n(q,"LI",{});var gye=s(A5);rne=n(gye,"STRONG",{});var XHr=s(rne);lLo=r(XHr,"mobilebert"),XHr.forEach(t),iLo=r(gye," \u2014 "),yD=n(gye,"A",{href:!0});var VHr=s(yD);dLo=r(VHr,"MobileBertForTokenClassification"),VHr.forEach(t),cLo=r(gye," (MobileBERT model)"),gye.forEach(t),fLo=i(q),L5=n(q,"LI",{});var hye=s(L5);tne=n(hye,"STRONG",{});var zHr=s(tne);mLo=r(zHr,"mpnet"),zHr.forEach(t),gLo=r(hye," \u2014 "),wD=n(hye,"A",{href:!0});var WHr=s(wD);hLo=r(WHr,"MPNetForTokenClassification"),WHr.forEach(t),pLo=r(hye," (MPNet model)"),hye.forEach(t),_Lo=i(q),B5=n(q,"LI",{});var pye=s(B5);ane=n(pye,"STRONG",{});var QHr=s(ane);uLo=r(QHr,"nystromformer"),QHr.forEach(t),bLo=r(pye," \u2014 "),AD=n(pye,"A",{href:!0});var HHr=s(AD);vLo=r(HHr,"NystromformerForTokenClassification"),HHr.forEach(t),TLo=r(pye," (Nystromformer model)"),pye.forEach(t),FLo=i(q),x5=n(q,"LI",{});var _ye=s(x5);nne=n(_ye,"STRONG",{});var UHr=s(nne);CLo=r(UHr,"qdqbert"),UHr.forEach(t),MLo=r(_ye," \u2014 "),LD=n(_ye,"A",{href:!0});var JHr=s(LD);ELo=r(JHr,"QDQBertForTokenClassification"),JHr.forEach(t),yLo=r(_ye," (QDQBert model)"),_ye.forEach(t),wLo=i(q),k5=n(q,"LI",{});var uye=s(k5);sne=n(uye,"STRONG",{});var YHr=s(sne);ALo=r(YHr,"rembert"),YHr.forEach(t),LLo=r(uye," \u2014 "),BD=n(uye,"A",{href:!0});var KHr=s(BD);BLo=r(KHr,"RemBertForTokenClassification"),KHr.forEach(t),xLo=r(uye," (RemBERT model)"),uye.forEach(t),kLo=i(q),R5=n(q,"LI",{});var bye=s(R5);lne=n(bye,"STRONG",{});var ZHr=s(lne);RLo=r(ZHr,"roberta"),ZHr.forEach(t),SLo=r(bye," \u2014 "),xD=n(bye,"A",{href:!0});var eUr=s(xD);PLo=r(eUr,"RobertaForTokenClassification"),eUr.forEach(t),$Lo=r(bye," (RoBERTa model)"),bye.forEach(t),ILo=i(q),S5=n(q,"LI",{});var vye=s(S5);ine=n(vye,"STRONG",{});var oUr=s(ine);DLo=r(oUr,"roformer"),oUr.forEach(t),jLo=r(vye," \u2014 "),kD=n(vye,"A",{href:!0});var rUr=s(kD);NLo=r(rUr,"RoFormerForTokenClassification"),rUr.forEach(t),qLo=r(vye," (RoFormer model)"),vye.forEach(t),GLo=i(q),P5=n(q,"LI",{});var Tye=s(P5);dne=n(Tye,"STRONG",{});var tUr=s(dne);OLo=r(tUr,"squeezebert"),tUr.forEach(t),XLo=r(Tye," \u2014 "),RD=n(Tye,"A",{href:!0});var aUr=s(RD);VLo=r(aUr,"SqueezeBertForTokenClassification"),aUr.forEach(t),zLo=r(Tye," (SqueezeBERT model)"),Tye.forEach(t),WLo=i(q),$5=n(q,"LI",{});var Fye=s($5);cne=n(Fye,"STRONG",{});var nUr=s(cne);QLo=r(nUr,"xlm"),nUr.forEach(t),HLo=r(Fye," \u2014 "),SD=n(Fye,"A",{href:!0});var sUr=s(SD);ULo=r(sUr,"XLMForTokenClassification"),sUr.forEach(t),JLo=r(Fye," (XLM model)"),Fye.forEach(t),YLo=i(q),I5=n(q,"LI",{});var Cye=s(I5);fne=n(Cye,"STRONG",{});var lUr=s(fne);KLo=r(lUr,"xlm-roberta"),lUr.forEach(t),ZLo=r(Cye," \u2014 "),PD=n(Cye,"A",{href:!0});var iUr=s(PD);e8o=r(iUr,"XLMRobertaForTokenClassification"),iUr.forEach(t),o8o=r(Cye," (XLM-RoBERTa model)"),Cye.forEach(t),r8o=i(q),D5=n(q,"LI",{});var Mye=s(D5);mne=n(Mye,"STRONG",{});var dUr=s(mne);t8o=r(dUr,"xlm-roberta-xl"),dUr.forEach(t),a8o=r(Mye," \u2014 "),$D=n(Mye,"A",{href:!0});var cUr=s($D);n8o=r(cUr,"XLMRobertaXLForTokenClassification"),cUr.forEach(t),s8o=r(Mye," (XLM-RoBERTa-XL model)"),Mye.forEach(t),l8o=i(q),j5=n(q,"LI",{});var Eye=s(j5);gne=n(Eye,"STRONG",{});var fUr=s(gne);i8o=r(fUr,"xlnet"),fUr.forEach(t),d8o=r(Eye," \u2014 "),ID=n(Eye,"A",{href:!0});var mUr=s(ID);c8o=r(mUr,"XLNetForTokenClassification"),mUr.forEach(t),f8o=r(Eye," (XLNet model)"),Eye.forEach(t),m8o=i(q),N5=n(q,"LI",{});var yye=s(N5);hne=n(yye,"STRONG",{});var gUr=s(hne);g8o=r(gUr,"yoso"),gUr.forEach(t),h8o=r(yye," \u2014 "),DD=n(yye,"A",{href:!0});var hUr=s(DD);p8o=r(hUr,"YosoForTokenClassification"),hUr.forEach(t),_8o=r(yye," (YOSO model)"),yye.forEach(t),q.forEach(t),u8o=i(Xt),q5=n(Xt,"P",{});var wye=s(q5);b8o=r(wye,"The model is set in evaluation mode by default using "),pne=n(wye,"CODE",{});var pUr=s(pne);v8o=r(pUr,"model.eval()"),pUr.forEach(t),T8o=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ne=n(wye,"CODE",{});var _Ur=s(_ne);F8o=r(_Ur,"model.train()"),_Ur.forEach(t),wye.forEach(t),C8o=i(Xt),une=n(Xt,"P",{});var uUr=s(une);M8o=r(uUr,"Examples:"),uUr.forEach(t),E8o=i(Xt),m(cy.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),rBe=i(c),pd=n(c,"H2",{class:!0});var dke=s(pd);G5=n(dke,"A",{id:!0,class:!0,href:!0});var bUr=s(G5);bne=n(bUr,"SPAN",{});var vUr=s(bne);m(fy.$$.fragment,vUr),vUr.forEach(t),bUr.forEach(t),y8o=i(dke),vne=n(dke,"SPAN",{});var TUr=s(vne);w8o=r(TUr,"AutoModelForQuestionAnswering"),TUr.forEach(t),dke.forEach(t),tBe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(my.$$.fragment,nl),A8o=i(nl),_d=n(nl,"P",{});var YV=s(_d);L8o=r(YV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Tne=n(YV,"CODE",{});var FUr=s(Tne);B8o=r(FUr,"from_pretrained()"),FUr.forEach(t),x8o=r(YV,"class method or the "),Fne=n(YV,"CODE",{});var CUr=s(Fne);k8o=r(CUr,"from_config()"),CUr.forEach(t),R8o=r(YV,`class
method.`),YV.forEach(t),S8o=i(nl),gy=n(nl,"P",{});var cke=s(gy);P8o=r(cke,"This class cannot be instantiated directly using "),Cne=n(cke,"CODE",{});var MUr=s(Cne);$8o=r(MUr,"__init__()"),MUr.forEach(t),I8o=r(cke," (throws an error)."),cke.forEach(t),D8o=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);m(hy.$$.fragment,sl),j8o=i(sl),Mne=n(sl,"P",{});var EUr=s(Mne);N8o=r(EUr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),EUr.forEach(t),q8o=i(sl),ud=n(sl,"P",{});var KV=s(ud);G8o=r(KV,`Note:
Loading a model from its configuration file does `),Ene=n(KV,"STRONG",{});var yUr=s(Ene);O8o=r(yUr,"not"),yUr.forEach(t),X8o=r(KV,` load the model weights. It only affects the
model\u2019s configuration. Use `),yne=n(KV,"CODE",{});var wUr=s(yne);V8o=r(wUr,"from_pretrained()"),wUr.forEach(t),z8o=r(KV,"to load the model weights."),KV.forEach(t),W8o=i(sl),wne=n(sl,"P",{});var AUr=s(wne);Q8o=r(AUr,"Examples:"),AUr.forEach(t),H8o=i(sl),m(py.$$.fragment,sl),sl.forEach(t),U8o=i(nl),Ge=n(nl,"DIV",{class:!0});var Vt=s(Ge);m(_y.$$.fragment,Vt),J8o=i(Vt),Ane=n(Vt,"P",{});var LUr=s(Ane);Y8o=r(LUr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LUr.forEach(t),K8o=i(Vt),Ha=n(Vt,"P",{});var $M=s(Ha);Z8o=r($M,"The model class to instantiate is selected based on the "),Lne=n($M,"CODE",{});var BUr=s(Lne);e7o=r(BUr,"model_type"),BUr.forEach(t),o7o=r($M,` property of the config object (either
passed as an argument or loaded from `),Bne=n($M,"CODE",{});var xUr=s(Bne);r7o=r(xUr,"pretrained_model_name_or_path"),xUr.forEach(t),t7o=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xne=n($M,"CODE",{});var kUr=s(xne);a7o=r(kUr,"pretrained_model_name_or_path"),kUr.forEach(t),n7o=r($M,":"),$M.forEach(t),s7o=i(Vt),R=n(Vt,"UL",{});var P=s(R);O5=n(P,"LI",{});var Aye=s(O5);kne=n(Aye,"STRONG",{});var RUr=s(kne);l7o=r(RUr,"albert"),RUr.forEach(t),i7o=r(Aye," \u2014 "),jD=n(Aye,"A",{href:!0});var SUr=s(jD);d7o=r(SUr,"AlbertForQuestionAnswering"),SUr.forEach(t),c7o=r(Aye," (ALBERT model)"),Aye.forEach(t),f7o=i(P),X5=n(P,"LI",{});var Lye=s(X5);Rne=n(Lye,"STRONG",{});var PUr=s(Rne);m7o=r(PUr,"bart"),PUr.forEach(t),g7o=r(Lye," \u2014 "),ND=n(Lye,"A",{href:!0});var $Ur=s(ND);h7o=r($Ur,"BartForQuestionAnswering"),$Ur.forEach(t),p7o=r(Lye," (BART model)"),Lye.forEach(t),_7o=i(P),V5=n(P,"LI",{});var Bye=s(V5);Sne=n(Bye,"STRONG",{});var IUr=s(Sne);u7o=r(IUr,"bert"),IUr.forEach(t),b7o=r(Bye," \u2014 "),qD=n(Bye,"A",{href:!0});var DUr=s(qD);v7o=r(DUr,"BertForQuestionAnswering"),DUr.forEach(t),T7o=r(Bye," (BERT model)"),Bye.forEach(t),F7o=i(P),z5=n(P,"LI",{});var xye=s(z5);Pne=n(xye,"STRONG",{});var jUr=s(Pne);C7o=r(jUr,"big_bird"),jUr.forEach(t),M7o=r(xye," \u2014 "),GD=n(xye,"A",{href:!0});var NUr=s(GD);E7o=r(NUr,"BigBirdForQuestionAnswering"),NUr.forEach(t),y7o=r(xye," (BigBird model)"),xye.forEach(t),w7o=i(P),W5=n(P,"LI",{});var kye=s(W5);$ne=n(kye,"STRONG",{});var qUr=s($ne);A7o=r(qUr,"bigbird_pegasus"),qUr.forEach(t),L7o=r(kye," \u2014 "),OD=n(kye,"A",{href:!0});var GUr=s(OD);B7o=r(GUr,"BigBirdPegasusForQuestionAnswering"),GUr.forEach(t),x7o=r(kye," (BigBirdPegasus model)"),kye.forEach(t),k7o=i(P),Q5=n(P,"LI",{});var Rye=s(Q5);Ine=n(Rye,"STRONG",{});var OUr=s(Ine);R7o=r(OUr,"camembert"),OUr.forEach(t),S7o=r(Rye," \u2014 "),XD=n(Rye,"A",{href:!0});var XUr=s(XD);P7o=r(XUr,"CamembertForQuestionAnswering"),XUr.forEach(t),$7o=r(Rye," (CamemBERT model)"),Rye.forEach(t),I7o=i(P),H5=n(P,"LI",{});var Sye=s(H5);Dne=n(Sye,"STRONG",{});var VUr=s(Dne);D7o=r(VUr,"canine"),VUr.forEach(t),j7o=r(Sye," \u2014 "),VD=n(Sye,"A",{href:!0});var zUr=s(VD);N7o=r(zUr,"CanineForQuestionAnswering"),zUr.forEach(t),q7o=r(Sye," (Canine model)"),Sye.forEach(t),G7o=i(P),U5=n(P,"LI",{});var Pye=s(U5);jne=n(Pye,"STRONG",{});var WUr=s(jne);O7o=r(WUr,"convbert"),WUr.forEach(t),X7o=r(Pye," \u2014 "),zD=n(Pye,"A",{href:!0});var QUr=s(zD);V7o=r(QUr,"ConvBertForQuestionAnswering"),QUr.forEach(t),z7o=r(Pye," (ConvBERT model)"),Pye.forEach(t),W7o=i(P),J5=n(P,"LI",{});var $ye=s(J5);Nne=n($ye,"STRONG",{});var HUr=s(Nne);Q7o=r(HUr,"data2vec-text"),HUr.forEach(t),H7o=r($ye," \u2014 "),WD=n($ye,"A",{href:!0});var UUr=s(WD);U7o=r(UUr,"Data2VecTextForQuestionAnswering"),UUr.forEach(t),J7o=r($ye," (Data2VecText model)"),$ye.forEach(t),Y7o=i(P),Y5=n(P,"LI",{});var Iye=s(Y5);qne=n(Iye,"STRONG",{});var JUr=s(qne);K7o=r(JUr,"deberta"),JUr.forEach(t),Z7o=r(Iye," \u2014 "),QD=n(Iye,"A",{href:!0});var YUr=s(QD);eBo=r(YUr,"DebertaForQuestionAnswering"),YUr.forEach(t),oBo=r(Iye," (DeBERTa model)"),Iye.forEach(t),rBo=i(P),K5=n(P,"LI",{});var Dye=s(K5);Gne=n(Dye,"STRONG",{});var KUr=s(Gne);tBo=r(KUr,"deberta-v2"),KUr.forEach(t),aBo=r(Dye," \u2014 "),HD=n(Dye,"A",{href:!0});var ZUr=s(HD);nBo=r(ZUr,"DebertaV2ForQuestionAnswering"),ZUr.forEach(t),sBo=r(Dye," (DeBERTa-v2 model)"),Dye.forEach(t),lBo=i(P),Z5=n(P,"LI",{});var jye=s(Z5);One=n(jye,"STRONG",{});var eJr=s(One);iBo=r(eJr,"distilbert"),eJr.forEach(t),dBo=r(jye," \u2014 "),UD=n(jye,"A",{href:!0});var oJr=s(UD);cBo=r(oJr,"DistilBertForQuestionAnswering"),oJr.forEach(t),fBo=r(jye," (DistilBERT model)"),jye.forEach(t),mBo=i(P),e2=n(P,"LI",{});var Nye=s(e2);Xne=n(Nye,"STRONG",{});var rJr=s(Xne);gBo=r(rJr,"electra"),rJr.forEach(t),hBo=r(Nye," \u2014 "),JD=n(Nye,"A",{href:!0});var tJr=s(JD);pBo=r(tJr,"ElectraForQuestionAnswering"),tJr.forEach(t),_Bo=r(Nye," (ELECTRA model)"),Nye.forEach(t),uBo=i(P),o2=n(P,"LI",{});var qye=s(o2);Vne=n(qye,"STRONG",{});var aJr=s(Vne);bBo=r(aJr,"flaubert"),aJr.forEach(t),vBo=r(qye," \u2014 "),YD=n(qye,"A",{href:!0});var nJr=s(YD);TBo=r(nJr,"FlaubertForQuestionAnsweringSimple"),nJr.forEach(t),FBo=r(qye," (FlauBERT model)"),qye.forEach(t),CBo=i(P),r2=n(P,"LI",{});var Gye=s(r2);zne=n(Gye,"STRONG",{});var sJr=s(zne);MBo=r(sJr,"fnet"),sJr.forEach(t),EBo=r(Gye," \u2014 "),KD=n(Gye,"A",{href:!0});var lJr=s(KD);yBo=r(lJr,"FNetForQuestionAnswering"),lJr.forEach(t),wBo=r(Gye," (FNet model)"),Gye.forEach(t),ABo=i(P),t2=n(P,"LI",{});var Oye=s(t2);Wne=n(Oye,"STRONG",{});var iJr=s(Wne);LBo=r(iJr,"funnel"),iJr.forEach(t),BBo=r(Oye," \u2014 "),ZD=n(Oye,"A",{href:!0});var dJr=s(ZD);xBo=r(dJr,"FunnelForQuestionAnswering"),dJr.forEach(t),kBo=r(Oye," (Funnel Transformer model)"),Oye.forEach(t),RBo=i(P),a2=n(P,"LI",{});var Xye=s(a2);Qne=n(Xye,"STRONG",{});var cJr=s(Qne);SBo=r(cJr,"gptj"),cJr.forEach(t),PBo=r(Xye," \u2014 "),ej=n(Xye,"A",{href:!0});var fJr=s(ej);$Bo=r(fJr,"GPTJForQuestionAnswering"),fJr.forEach(t),IBo=r(Xye," (GPT-J model)"),Xye.forEach(t),DBo=i(P),n2=n(P,"LI",{});var Vye=s(n2);Hne=n(Vye,"STRONG",{});var mJr=s(Hne);jBo=r(mJr,"ibert"),mJr.forEach(t),NBo=r(Vye," \u2014 "),oj=n(Vye,"A",{href:!0});var gJr=s(oj);qBo=r(gJr,"IBertForQuestionAnswering"),gJr.forEach(t),GBo=r(Vye," (I-BERT model)"),Vye.forEach(t),OBo=i(P),s2=n(P,"LI",{});var zye=s(s2);Une=n(zye,"STRONG",{});var hJr=s(Une);XBo=r(hJr,"layoutlmv2"),hJr.forEach(t),VBo=r(zye," \u2014 "),rj=n(zye,"A",{href:!0});var pJr=s(rj);zBo=r(pJr,"LayoutLMv2ForQuestionAnswering"),pJr.forEach(t),WBo=r(zye," (LayoutLMv2 model)"),zye.forEach(t),QBo=i(P),l2=n(P,"LI",{});var Wye=s(l2);Jne=n(Wye,"STRONG",{});var _Jr=s(Jne);HBo=r(_Jr,"led"),_Jr.forEach(t),UBo=r(Wye," \u2014 "),tj=n(Wye,"A",{href:!0});var uJr=s(tj);JBo=r(uJr,"LEDForQuestionAnswering"),uJr.forEach(t),YBo=r(Wye," (LED model)"),Wye.forEach(t),KBo=i(P),i2=n(P,"LI",{});var Qye=s(i2);Yne=n(Qye,"STRONG",{});var bJr=s(Yne);ZBo=r(bJr,"longformer"),bJr.forEach(t),exo=r(Qye," \u2014 "),aj=n(Qye,"A",{href:!0});var vJr=s(aj);oxo=r(vJr,"LongformerForQuestionAnswering"),vJr.forEach(t),rxo=r(Qye," (Longformer model)"),Qye.forEach(t),txo=i(P),d2=n(P,"LI",{});var Hye=s(d2);Kne=n(Hye,"STRONG",{});var TJr=s(Kne);axo=r(TJr,"lxmert"),TJr.forEach(t),nxo=r(Hye," \u2014 "),nj=n(Hye,"A",{href:!0});var FJr=s(nj);sxo=r(FJr,"LxmertForQuestionAnswering"),FJr.forEach(t),lxo=r(Hye," (LXMERT model)"),Hye.forEach(t),ixo=i(P),c2=n(P,"LI",{});var Uye=s(c2);Zne=n(Uye,"STRONG",{});var CJr=s(Zne);dxo=r(CJr,"mbart"),CJr.forEach(t),cxo=r(Uye," \u2014 "),sj=n(Uye,"A",{href:!0});var MJr=s(sj);fxo=r(MJr,"MBartForQuestionAnswering"),MJr.forEach(t),mxo=r(Uye," (mBART model)"),Uye.forEach(t),gxo=i(P),f2=n(P,"LI",{});var Jye=s(f2);ese=n(Jye,"STRONG",{});var EJr=s(ese);hxo=r(EJr,"megatron-bert"),EJr.forEach(t),pxo=r(Jye," \u2014 "),lj=n(Jye,"A",{href:!0});var yJr=s(lj);_xo=r(yJr,"MegatronBertForQuestionAnswering"),yJr.forEach(t),uxo=r(Jye," (MegatronBert model)"),Jye.forEach(t),bxo=i(P),m2=n(P,"LI",{});var Yye=s(m2);ose=n(Yye,"STRONG",{});var wJr=s(ose);vxo=r(wJr,"mobilebert"),wJr.forEach(t),Txo=r(Yye," \u2014 "),ij=n(Yye,"A",{href:!0});var AJr=s(ij);Fxo=r(AJr,"MobileBertForQuestionAnswering"),AJr.forEach(t),Cxo=r(Yye," (MobileBERT model)"),Yye.forEach(t),Mxo=i(P),g2=n(P,"LI",{});var Kye=s(g2);rse=n(Kye,"STRONG",{});var LJr=s(rse);Exo=r(LJr,"mpnet"),LJr.forEach(t),yxo=r(Kye," \u2014 "),dj=n(Kye,"A",{href:!0});var BJr=s(dj);wxo=r(BJr,"MPNetForQuestionAnswering"),BJr.forEach(t),Axo=r(Kye," (MPNet model)"),Kye.forEach(t),Lxo=i(P),h2=n(P,"LI",{});var Zye=s(h2);tse=n(Zye,"STRONG",{});var xJr=s(tse);Bxo=r(xJr,"nystromformer"),xJr.forEach(t),xxo=r(Zye," \u2014 "),cj=n(Zye,"A",{href:!0});var kJr=s(cj);kxo=r(kJr,"NystromformerForQuestionAnswering"),kJr.forEach(t),Rxo=r(Zye," (Nystromformer model)"),Zye.forEach(t),Sxo=i(P),p2=n(P,"LI",{});var ewe=s(p2);ase=n(ewe,"STRONG",{});var RJr=s(ase);Pxo=r(RJr,"qdqbert"),RJr.forEach(t),$xo=r(ewe," \u2014 "),fj=n(ewe,"A",{href:!0});var SJr=s(fj);Ixo=r(SJr,"QDQBertForQuestionAnswering"),SJr.forEach(t),Dxo=r(ewe," (QDQBert model)"),ewe.forEach(t),jxo=i(P),_2=n(P,"LI",{});var owe=s(_2);nse=n(owe,"STRONG",{});var PJr=s(nse);Nxo=r(PJr,"reformer"),PJr.forEach(t),qxo=r(owe," \u2014 "),mj=n(owe,"A",{href:!0});var $Jr=s(mj);Gxo=r($Jr,"ReformerForQuestionAnswering"),$Jr.forEach(t),Oxo=r(owe," (Reformer model)"),owe.forEach(t),Xxo=i(P),u2=n(P,"LI",{});var rwe=s(u2);sse=n(rwe,"STRONG",{});var IJr=s(sse);Vxo=r(IJr,"rembert"),IJr.forEach(t),zxo=r(rwe," \u2014 "),gj=n(rwe,"A",{href:!0});var DJr=s(gj);Wxo=r(DJr,"RemBertForQuestionAnswering"),DJr.forEach(t),Qxo=r(rwe," (RemBERT model)"),rwe.forEach(t),Hxo=i(P),b2=n(P,"LI",{});var twe=s(b2);lse=n(twe,"STRONG",{});var jJr=s(lse);Uxo=r(jJr,"roberta"),jJr.forEach(t),Jxo=r(twe," \u2014 "),hj=n(twe,"A",{href:!0});var NJr=s(hj);Yxo=r(NJr,"RobertaForQuestionAnswering"),NJr.forEach(t),Kxo=r(twe," (RoBERTa model)"),twe.forEach(t),Zxo=i(P),v2=n(P,"LI",{});var awe=s(v2);ise=n(awe,"STRONG",{});var qJr=s(ise);eko=r(qJr,"roformer"),qJr.forEach(t),oko=r(awe," \u2014 "),pj=n(awe,"A",{href:!0});var GJr=s(pj);rko=r(GJr,"RoFormerForQuestionAnswering"),GJr.forEach(t),tko=r(awe," (RoFormer model)"),awe.forEach(t),ako=i(P),T2=n(P,"LI",{});var nwe=s(T2);dse=n(nwe,"STRONG",{});var OJr=s(dse);nko=r(OJr,"splinter"),OJr.forEach(t),sko=r(nwe," \u2014 "),_j=n(nwe,"A",{href:!0});var XJr=s(_j);lko=r(XJr,"SplinterForQuestionAnswering"),XJr.forEach(t),iko=r(nwe," (Splinter model)"),nwe.forEach(t),dko=i(P),F2=n(P,"LI",{});var swe=s(F2);cse=n(swe,"STRONG",{});var VJr=s(cse);cko=r(VJr,"squeezebert"),VJr.forEach(t),fko=r(swe," \u2014 "),uj=n(swe,"A",{href:!0});var zJr=s(uj);mko=r(zJr,"SqueezeBertForQuestionAnswering"),zJr.forEach(t),gko=r(swe," (SqueezeBERT model)"),swe.forEach(t),hko=i(P),C2=n(P,"LI",{});var lwe=s(C2);fse=n(lwe,"STRONG",{});var WJr=s(fse);pko=r(WJr,"xlm"),WJr.forEach(t),_ko=r(lwe," \u2014 "),bj=n(lwe,"A",{href:!0});var QJr=s(bj);uko=r(QJr,"XLMForQuestionAnsweringSimple"),QJr.forEach(t),bko=r(lwe," (XLM model)"),lwe.forEach(t),vko=i(P),M2=n(P,"LI",{});var iwe=s(M2);mse=n(iwe,"STRONG",{});var HJr=s(mse);Tko=r(HJr,"xlm-roberta"),HJr.forEach(t),Fko=r(iwe," \u2014 "),vj=n(iwe,"A",{href:!0});var UJr=s(vj);Cko=r(UJr,"XLMRobertaForQuestionAnswering"),UJr.forEach(t),Mko=r(iwe," (XLM-RoBERTa model)"),iwe.forEach(t),Eko=i(P),E2=n(P,"LI",{});var dwe=s(E2);gse=n(dwe,"STRONG",{});var JJr=s(gse);yko=r(JJr,"xlm-roberta-xl"),JJr.forEach(t),wko=r(dwe," \u2014 "),Tj=n(dwe,"A",{href:!0});var YJr=s(Tj);Ako=r(YJr,"XLMRobertaXLForQuestionAnswering"),YJr.forEach(t),Lko=r(dwe," (XLM-RoBERTa-XL model)"),dwe.forEach(t),Bko=i(P),y2=n(P,"LI",{});var cwe=s(y2);hse=n(cwe,"STRONG",{});var KJr=s(hse);xko=r(KJr,"xlnet"),KJr.forEach(t),kko=r(cwe," \u2014 "),Fj=n(cwe,"A",{href:!0});var ZJr=s(Fj);Rko=r(ZJr,"XLNetForQuestionAnsweringSimple"),ZJr.forEach(t),Sko=r(cwe," (XLNet model)"),cwe.forEach(t),Pko=i(P),w2=n(P,"LI",{});var fwe=s(w2);pse=n(fwe,"STRONG",{});var eYr=s(pse);$ko=r(eYr,"yoso"),eYr.forEach(t),Iko=r(fwe," \u2014 "),Cj=n(fwe,"A",{href:!0});var oYr=s(Cj);Dko=r(oYr,"YosoForQuestionAnswering"),oYr.forEach(t),jko=r(fwe," (YOSO model)"),fwe.forEach(t),P.forEach(t),Nko=i(Vt),A2=n(Vt,"P",{});var mwe=s(A2);qko=r(mwe,"The model is set in evaluation mode by default using "),_se=n(mwe,"CODE",{});var rYr=s(_se);Gko=r(rYr,"model.eval()"),rYr.forEach(t),Oko=r(mwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=n(mwe,"CODE",{});var tYr=s(use);Xko=r(tYr,"model.train()"),tYr.forEach(t),mwe.forEach(t),Vko=i(Vt),bse=n(Vt,"P",{});var aYr=s(bse);zko=r(aYr,"Examples:"),aYr.forEach(t),Wko=i(Vt),m(uy.$$.fragment,Vt),Vt.forEach(t),nl.forEach(t),aBe=i(c),bd=n(c,"H2",{class:!0});var fke=s(bd);L2=n(fke,"A",{id:!0,class:!0,href:!0});var nYr=s(L2);vse=n(nYr,"SPAN",{});var sYr=s(vse);m(by.$$.fragment,sYr),sYr.forEach(t),nYr.forEach(t),Qko=i(fke),Tse=n(fke,"SPAN",{});var lYr=s(Tse);Hko=r(lYr,"AutoModelForTableQuestionAnswering"),lYr.forEach(t),fke.forEach(t),nBe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(vy.$$.fragment,ll),Uko=i(ll),vd=n(ll,"P",{});var ZV=s(vd);Jko=r(ZV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Fse=n(ZV,"CODE",{});var iYr=s(Fse);Yko=r(iYr,"from_pretrained()"),iYr.forEach(t),Kko=r(ZV,"class method or the "),Cse=n(ZV,"CODE",{});var dYr=s(Cse);Zko=r(dYr,"from_config()"),dYr.forEach(t),eRo=r(ZV,`class
method.`),ZV.forEach(t),oRo=i(ll),Ty=n(ll,"P",{});var mke=s(Ty);rRo=r(mke,"This class cannot be instantiated directly using "),Mse=n(mke,"CODE",{});var cYr=s(Mse);tRo=r(cYr,"__init__()"),cYr.forEach(t),aRo=r(mke," (throws an error)."),mke.forEach(t),nRo=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);m(Fy.$$.fragment,il),sRo=i(il),Ese=n(il,"P",{});var fYr=s(Ese);lRo=r(fYr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fYr.forEach(t),iRo=i(il),Td=n(il,"P",{});var ez=s(Td);dRo=r(ez,`Note:
Loading a model from its configuration file does `),yse=n(ez,"STRONG",{});var mYr=s(yse);cRo=r(mYr,"not"),mYr.forEach(t),fRo=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=n(ez,"CODE",{});var gYr=s(wse);mRo=r(gYr,"from_pretrained()"),gYr.forEach(t),gRo=r(ez,"to load the model weights."),ez.forEach(t),hRo=i(il),Ase=n(il,"P",{});var hYr=s(Ase);pRo=r(hYr,"Examples:"),hYr.forEach(t),_Ro=i(il),m(Cy.$$.fragment,il),il.forEach(t),uRo=i(ll),Oe=n(ll,"DIV",{class:!0});var zt=s(Oe);m(My.$$.fragment,zt),bRo=i(zt),Lse=n(zt,"P",{});var pYr=s(Lse);vRo=r(pYr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pYr.forEach(t),TRo=i(zt),Ua=n(zt,"P",{});var IM=s(Ua);FRo=r(IM,"The model class to instantiate is selected based on the "),Bse=n(IM,"CODE",{});var _Yr=s(Bse);CRo=r(_Yr,"model_type"),_Yr.forEach(t),MRo=r(IM,` property of the config object (either
passed as an argument or loaded from `),xse=n(IM,"CODE",{});var uYr=s(xse);ERo=r(uYr,"pretrained_model_name_or_path"),uYr.forEach(t),yRo=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=n(IM,"CODE",{});var bYr=s(kse);wRo=r(bYr,"pretrained_model_name_or_path"),bYr.forEach(t),ARo=r(IM,":"),IM.forEach(t),LRo=i(zt),Rse=n(zt,"UL",{});var vYr=s(Rse);B2=n(vYr,"LI",{});var gwe=s(B2);Sse=n(gwe,"STRONG",{});var TYr=s(Sse);BRo=r(TYr,"tapas"),TYr.forEach(t),xRo=r(gwe," \u2014 "),Mj=n(gwe,"A",{href:!0});var FYr=s(Mj);kRo=r(FYr,"TapasForQuestionAnswering"),FYr.forEach(t),RRo=r(gwe," (TAPAS model)"),gwe.forEach(t),vYr.forEach(t),SRo=i(zt),x2=n(zt,"P",{});var hwe=s(x2);PRo=r(hwe,"The model is set in evaluation mode by default using "),Pse=n(hwe,"CODE",{});var CYr=s(Pse);$Ro=r(CYr,"model.eval()"),CYr.forEach(t),IRo=r(hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$se=n(hwe,"CODE",{});var MYr=s($se);DRo=r(MYr,"model.train()"),MYr.forEach(t),hwe.forEach(t),jRo=i(zt),Ise=n(zt,"P",{});var EYr=s(Ise);NRo=r(EYr,"Examples:"),EYr.forEach(t),qRo=i(zt),m(Ey.$$.fragment,zt),zt.forEach(t),ll.forEach(t),sBe=i(c),Fd=n(c,"H2",{class:!0});var gke=s(Fd);k2=n(gke,"A",{id:!0,class:!0,href:!0});var yYr=s(k2);Dse=n(yYr,"SPAN",{});var wYr=s(Dse);m(yy.$$.fragment,wYr),wYr.forEach(t),yYr.forEach(t),GRo=i(gke),jse=n(gke,"SPAN",{});var AYr=s(jse);ORo=r(AYr,"AutoModelForImageClassification"),AYr.forEach(t),gke.forEach(t),lBe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(wy.$$.fragment,dl),XRo=i(dl),Cd=n(dl,"P",{});var oz=s(Cd);VRo=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nse=n(oz,"CODE",{});var LYr=s(Nse);zRo=r(LYr,"from_pretrained()"),LYr.forEach(t),WRo=r(oz,"class method or the "),qse=n(oz,"CODE",{});var BYr=s(qse);QRo=r(BYr,"from_config()"),BYr.forEach(t),HRo=r(oz,`class
method.`),oz.forEach(t),URo=i(dl),Ay=n(dl,"P",{});var hke=s(Ay);JRo=r(hke,"This class cannot be instantiated directly using "),Gse=n(hke,"CODE",{});var xYr=s(Gse);YRo=r(xYr,"__init__()"),xYr.forEach(t),KRo=r(hke," (throws an error)."),hke.forEach(t),ZRo=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);m(Ly.$$.fragment,cl),eSo=i(cl),Ose=n(cl,"P",{});var kYr=s(Ose);oSo=r(kYr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kYr.forEach(t),rSo=i(cl),Md=n(cl,"P",{});var rz=s(Md);tSo=r(rz,`Note:
Loading a model from its configuration file does `),Xse=n(rz,"STRONG",{});var RYr=s(Xse);aSo=r(RYr,"not"),RYr.forEach(t),nSo=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vse=n(rz,"CODE",{});var SYr=s(Vse);sSo=r(SYr,"from_pretrained()"),SYr.forEach(t),lSo=r(rz,"to load the model weights."),rz.forEach(t),iSo=i(cl),zse=n(cl,"P",{});var PYr=s(zse);dSo=r(PYr,"Examples:"),PYr.forEach(t),cSo=i(cl),m(By.$$.fragment,cl),cl.forEach(t),fSo=i(dl),Xe=n(dl,"DIV",{class:!0});var Wt=s(Xe);m(xy.$$.fragment,Wt),mSo=i(Wt),Wse=n(Wt,"P",{});var $Yr=s(Wse);gSo=r($Yr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Yr.forEach(t),hSo=i(Wt),Ja=n(Wt,"P",{});var DM=s(Ja);pSo=r(DM,"The model class to instantiate is selected based on the "),Qse=n(DM,"CODE",{});var IYr=s(Qse);_So=r(IYr,"model_type"),IYr.forEach(t),uSo=r(DM,` property of the config object (either
passed as an argument or loaded from `),Hse=n(DM,"CODE",{});var DYr=s(Hse);bSo=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),vSo=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Use=n(DM,"CODE",{});var jYr=s(Use);TSo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),FSo=r(DM,":"),DM.forEach(t),CSo=i(Wt),be=n(Wt,"UL",{});var eo=s(be);R2=n(eo,"LI",{});var pwe=s(R2);Jse=n(pwe,"STRONG",{});var NYr=s(Jse);MSo=r(NYr,"beit"),NYr.forEach(t),ESo=r(pwe," \u2014 "),Ej=n(pwe,"A",{href:!0});var qYr=s(Ej);ySo=r(qYr,"BeitForImageClassification"),qYr.forEach(t),wSo=r(pwe," (BEiT model)"),pwe.forEach(t),ASo=i(eo),S2=n(eo,"LI",{});var _we=s(S2);Yse=n(_we,"STRONG",{});var GYr=s(Yse);LSo=r(GYr,"convnext"),GYr.forEach(t),BSo=r(_we," \u2014 "),yj=n(_we,"A",{href:!0});var OYr=s(yj);xSo=r(OYr,"ConvNextForImageClassification"),OYr.forEach(t),kSo=r(_we," (ConvNext model)"),_we.forEach(t),RSo=i(eo),Ps=n(eo,"LI",{});var n8=s(Ps);Kse=n(n8,"STRONG",{});var XYr=s(Kse);SSo=r(XYr,"deit"),XYr.forEach(t),PSo=r(n8," \u2014 "),wj=n(n8,"A",{href:!0});var VYr=s(wj);$So=r(VYr,"DeiTForImageClassification"),VYr.forEach(t),ISo=r(n8," or "),Aj=n(n8,"A",{href:!0});var zYr=s(Aj);DSo=r(zYr,"DeiTForImageClassificationWithTeacher"),zYr.forEach(t),jSo=r(n8," (DeiT model)"),n8.forEach(t),NSo=i(eo),P2=n(eo,"LI",{});var uwe=s(P2);Zse=n(uwe,"STRONG",{});var WYr=s(Zse);qSo=r(WYr,"imagegpt"),WYr.forEach(t),GSo=r(uwe," \u2014 "),Lj=n(uwe,"A",{href:!0});var QYr=s(Lj);OSo=r(QYr,"ImageGPTForImageClassification"),QYr.forEach(t),XSo=r(uwe," (ImageGPT model)"),uwe.forEach(t),VSo=i(eo),la=n(eo,"LI",{});var Mf=s(la);ele=n(Mf,"STRONG",{});var HYr=s(ele);zSo=r(HYr,"perceiver"),HYr.forEach(t),WSo=r(Mf," \u2014 "),Bj=n(Mf,"A",{href:!0});var UYr=s(Bj);QSo=r(UYr,"PerceiverForImageClassificationLearned"),UYr.forEach(t),HSo=r(Mf," or "),xj=n(Mf,"A",{href:!0});var JYr=s(xj);USo=r(JYr,"PerceiverForImageClassificationFourier"),JYr.forEach(t),JSo=r(Mf," or "),kj=n(Mf,"A",{href:!0});var YYr=s(kj);YSo=r(YYr,"PerceiverForImageClassificationConvProcessing"),YYr.forEach(t),KSo=r(Mf," (Perceiver model)"),Mf.forEach(t),ZSo=i(eo),$2=n(eo,"LI",{});var bwe=s($2);ole=n(bwe,"STRONG",{});var KYr=s(ole);ePo=r(KYr,"poolformer"),KYr.forEach(t),oPo=r(bwe," \u2014 "),Rj=n(bwe,"A",{href:!0});var ZYr=s(Rj);rPo=r(ZYr,"PoolFormerForImageClassification"),ZYr.forEach(t),tPo=r(bwe," (PoolFormer model)"),bwe.forEach(t),aPo=i(eo),I2=n(eo,"LI",{});var vwe=s(I2);rle=n(vwe,"STRONG",{});var eKr=s(rle);nPo=r(eKr,"segformer"),eKr.forEach(t),sPo=r(vwe," \u2014 "),Sj=n(vwe,"A",{href:!0});var oKr=s(Sj);lPo=r(oKr,"SegformerForImageClassification"),oKr.forEach(t),iPo=r(vwe," (SegFormer model)"),vwe.forEach(t),dPo=i(eo),D2=n(eo,"LI",{});var Twe=s(D2);tle=n(Twe,"STRONG",{});var rKr=s(tle);cPo=r(rKr,"swin"),rKr.forEach(t),fPo=r(Twe," \u2014 "),Pj=n(Twe,"A",{href:!0});var tKr=s(Pj);mPo=r(tKr,"SwinForImageClassification"),tKr.forEach(t),gPo=r(Twe," (Swin model)"),Twe.forEach(t),hPo=i(eo),j2=n(eo,"LI",{});var Fwe=s(j2);ale=n(Fwe,"STRONG",{});var aKr=s(ale);pPo=r(aKr,"vit"),aKr.forEach(t),_Po=r(Fwe," \u2014 "),$j=n(Fwe,"A",{href:!0});var nKr=s($j);uPo=r(nKr,"ViTForImageClassification"),nKr.forEach(t),bPo=r(Fwe," (ViT model)"),Fwe.forEach(t),eo.forEach(t),vPo=i(Wt),N2=n(Wt,"P",{});var Cwe=s(N2);TPo=r(Cwe,"The model is set in evaluation mode by default using "),nle=n(Cwe,"CODE",{});var sKr=s(nle);FPo=r(sKr,"model.eval()"),sKr.forEach(t),CPo=r(Cwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sle=n(Cwe,"CODE",{});var lKr=s(sle);MPo=r(lKr,"model.train()"),lKr.forEach(t),Cwe.forEach(t),EPo=i(Wt),lle=n(Wt,"P",{});var iKr=s(lle);yPo=r(iKr,"Examples:"),iKr.forEach(t),wPo=i(Wt),m(ky.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),iBe=i(c),Ed=n(c,"H2",{class:!0});var pke=s(Ed);q2=n(pke,"A",{id:!0,class:!0,href:!0});var dKr=s(q2);ile=n(dKr,"SPAN",{});var cKr=s(ile);m(Ry.$$.fragment,cKr),cKr.forEach(t),dKr.forEach(t),APo=i(pke),dle=n(pke,"SPAN",{});var fKr=s(dle);LPo=r(fKr,"AutoModelForVision2Seq"),fKr.forEach(t),pke.forEach(t),dBe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(Sy.$$.fragment,fl),BPo=i(fl),yd=n(fl,"P",{});var tz=s(yd);xPo=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cle=n(tz,"CODE",{});var mKr=s(cle);kPo=r(mKr,"from_pretrained()"),mKr.forEach(t),RPo=r(tz,"class method or the "),fle=n(tz,"CODE",{});var gKr=s(fle);SPo=r(gKr,"from_config()"),gKr.forEach(t),PPo=r(tz,`class
method.`),tz.forEach(t),$Po=i(fl),Py=n(fl,"P",{});var _ke=s(Py);IPo=r(_ke,"This class cannot be instantiated directly using "),mle=n(_ke,"CODE",{});var hKr=s(mle);DPo=r(hKr,"__init__()"),hKr.forEach(t),jPo=r(_ke," (throws an error)."),_ke.forEach(t),NPo=i(fl),Kr=n(fl,"DIV",{class:!0});var ml=s(Kr);m($y.$$.fragment,ml),qPo=i(ml),gle=n(ml,"P",{});var pKr=s(gle);GPo=r(pKr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pKr.forEach(t),OPo=i(ml),wd=n(ml,"P",{});var az=s(wd);XPo=r(az,`Note:
Loading a model from its configuration file does `),hle=n(az,"STRONG",{});var _Kr=s(hle);VPo=r(_Kr,"not"),_Kr.forEach(t),zPo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),ple=n(az,"CODE",{});var uKr=s(ple);WPo=r(uKr,"from_pretrained()"),uKr.forEach(t),QPo=r(az,"to load the model weights."),az.forEach(t),HPo=i(ml),_le=n(ml,"P",{});var bKr=s(_le);UPo=r(bKr,"Examples:"),bKr.forEach(t),JPo=i(ml),m(Iy.$$.fragment,ml),ml.forEach(t),YPo=i(fl),Ve=n(fl,"DIV",{class:!0});var Qt=s(Ve);m(Dy.$$.fragment,Qt),KPo=i(Qt),ule=n(Qt,"P",{});var vKr=s(ule);ZPo=r(vKr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vKr.forEach(t),e$o=i(Qt),Ya=n(Qt,"P",{});var jM=s(Ya);o$o=r(jM,"The model class to instantiate is selected based on the "),ble=n(jM,"CODE",{});var TKr=s(ble);r$o=r(TKr,"model_type"),TKr.forEach(t),t$o=r(jM,` property of the config object (either
passed as an argument or loaded from `),vle=n(jM,"CODE",{});var FKr=s(vle);a$o=r(FKr,"pretrained_model_name_or_path"),FKr.forEach(t),n$o=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tle=n(jM,"CODE",{});var CKr=s(Tle);s$o=r(CKr,"pretrained_model_name_or_path"),CKr.forEach(t),l$o=r(jM,":"),jM.forEach(t),i$o=i(Qt),Fle=n(Qt,"UL",{});var MKr=s(Fle);G2=n(MKr,"LI",{});var Mwe=s(G2);Cle=n(Mwe,"STRONG",{});var EKr=s(Cle);d$o=r(EKr,"vision-encoder-decoder"),EKr.forEach(t),c$o=r(Mwe," \u2014 "),Ij=n(Mwe,"A",{href:!0});var yKr=s(Ij);f$o=r(yKr,"VisionEncoderDecoderModel"),yKr.forEach(t),m$o=r(Mwe," (Vision Encoder decoder model)"),Mwe.forEach(t),MKr.forEach(t),g$o=i(Qt),O2=n(Qt,"P",{});var Ewe=s(O2);h$o=r(Ewe,"The model is set in evaluation mode by default using "),Mle=n(Ewe,"CODE",{});var wKr=s(Mle);p$o=r(wKr,"model.eval()"),wKr.forEach(t),_$o=r(Ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=n(Ewe,"CODE",{});var AKr=s(Ele);u$o=r(AKr,"model.train()"),AKr.forEach(t),Ewe.forEach(t),b$o=i(Qt),yle=n(Qt,"P",{});var LKr=s(yle);v$o=r(LKr,"Examples:"),LKr.forEach(t),T$o=i(Qt),m(jy.$$.fragment,Qt),Qt.forEach(t),fl.forEach(t),cBe=i(c),Ad=n(c,"H2",{class:!0});var uke=s(Ad);X2=n(uke,"A",{id:!0,class:!0,href:!0});var BKr=s(X2);wle=n(BKr,"SPAN",{});var xKr=s(wle);m(Ny.$$.fragment,xKr),xKr.forEach(t),BKr.forEach(t),F$o=i(uke),Ale=n(uke,"SPAN",{});var kKr=s(Ale);C$o=r(kKr,"AutoModelForAudioClassification"),kKr.forEach(t),uke.forEach(t),fBe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(qy.$$.fragment,gl),M$o=i(gl),Ld=n(gl,"P",{});var nz=s(Ld);E$o=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Lle=n(nz,"CODE",{});var RKr=s(Lle);y$o=r(RKr,"from_pretrained()"),RKr.forEach(t),w$o=r(nz,"class method or the "),Ble=n(nz,"CODE",{});var SKr=s(Ble);A$o=r(SKr,"from_config()"),SKr.forEach(t),L$o=r(nz,`class
method.`),nz.forEach(t),B$o=i(gl),Gy=n(gl,"P",{});var bke=s(Gy);x$o=r(bke,"This class cannot be instantiated directly using "),xle=n(bke,"CODE",{});var PKr=s(xle);k$o=r(PKr,"__init__()"),PKr.forEach(t),R$o=r(bke," (throws an error)."),bke.forEach(t),S$o=i(gl),Zr=n(gl,"DIV",{class:!0});var hl=s(Zr);m(Oy.$$.fragment,hl),P$o=i(hl),kle=n(hl,"P",{});var $Kr=s(kle);$$o=r($Kr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$Kr.forEach(t),I$o=i(hl),Bd=n(hl,"P",{});var sz=s(Bd);D$o=r(sz,`Note:
Loading a model from its configuration file does `),Rle=n(sz,"STRONG",{});var IKr=s(Rle);j$o=r(IKr,"not"),IKr.forEach(t),N$o=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sle=n(sz,"CODE",{});var DKr=s(Sle);q$o=r(DKr,"from_pretrained()"),DKr.forEach(t),G$o=r(sz,"to load the model weights."),sz.forEach(t),O$o=i(hl),Ple=n(hl,"P",{});var jKr=s(Ple);X$o=r(jKr,"Examples:"),jKr.forEach(t),V$o=i(hl),m(Xy.$$.fragment,hl),hl.forEach(t),z$o=i(gl),ze=n(gl,"DIV",{class:!0});var Ht=s(ze);m(Vy.$$.fragment,Ht),W$o=i(Ht),$le=n(Ht,"P",{});var NKr=s($le);Q$o=r(NKr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NKr.forEach(t),H$o=i(Ht),Ka=n(Ht,"P",{});var NM=s(Ka);U$o=r(NM,"The model class to instantiate is selected based on the "),Ile=n(NM,"CODE",{});var qKr=s(Ile);J$o=r(qKr,"model_type"),qKr.forEach(t),Y$o=r(NM,` property of the config object (either
passed as an argument or loaded from `),Dle=n(NM,"CODE",{});var GKr=s(Dle);K$o=r(GKr,"pretrained_model_name_or_path"),GKr.forEach(t),Z$o=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jle=n(NM,"CODE",{});var OKr=s(jle);eIo=r(OKr,"pretrained_model_name_or_path"),OKr.forEach(t),oIo=r(NM,":"),NM.forEach(t),rIo=i(Ht),Ae=n(Ht,"UL",{});var No=s(Ae);V2=n(No,"LI",{});var ywe=s(V2);Nle=n(ywe,"STRONG",{});var XKr=s(Nle);tIo=r(XKr,"data2vec-audio"),XKr.forEach(t),aIo=r(ywe," \u2014 "),Dj=n(ywe,"A",{href:!0});var VKr=s(Dj);nIo=r(VKr,"Data2VecAudioForSequenceClassification"),VKr.forEach(t),sIo=r(ywe," (Data2VecAudio model)"),ywe.forEach(t),lIo=i(No),z2=n(No,"LI",{});var wwe=s(z2);qle=n(wwe,"STRONG",{});var zKr=s(qle);iIo=r(zKr,"hubert"),zKr.forEach(t),dIo=r(wwe," \u2014 "),jj=n(wwe,"A",{href:!0});var WKr=s(jj);cIo=r(WKr,"HubertForSequenceClassification"),WKr.forEach(t),fIo=r(wwe," (Hubert model)"),wwe.forEach(t),mIo=i(No),W2=n(No,"LI",{});var Awe=s(W2);Gle=n(Awe,"STRONG",{});var QKr=s(Gle);gIo=r(QKr,"sew"),QKr.forEach(t),hIo=r(Awe," \u2014 "),Nj=n(Awe,"A",{href:!0});var HKr=s(Nj);pIo=r(HKr,"SEWForSequenceClassification"),HKr.forEach(t),_Io=r(Awe," (SEW model)"),Awe.forEach(t),uIo=i(No),Q2=n(No,"LI",{});var Lwe=s(Q2);Ole=n(Lwe,"STRONG",{});var UKr=s(Ole);bIo=r(UKr,"sew-d"),UKr.forEach(t),vIo=r(Lwe," \u2014 "),qj=n(Lwe,"A",{href:!0});var JKr=s(qj);TIo=r(JKr,"SEWDForSequenceClassification"),JKr.forEach(t),FIo=r(Lwe," (SEW-D model)"),Lwe.forEach(t),CIo=i(No),H2=n(No,"LI",{});var Bwe=s(H2);Xle=n(Bwe,"STRONG",{});var YKr=s(Xle);MIo=r(YKr,"unispeech"),YKr.forEach(t),EIo=r(Bwe," \u2014 "),Gj=n(Bwe,"A",{href:!0});var KKr=s(Gj);yIo=r(KKr,"UniSpeechForSequenceClassification"),KKr.forEach(t),wIo=r(Bwe," (UniSpeech model)"),Bwe.forEach(t),AIo=i(No),U2=n(No,"LI",{});var xwe=s(U2);Vle=n(xwe,"STRONG",{});var ZKr=s(Vle);LIo=r(ZKr,"unispeech-sat"),ZKr.forEach(t),BIo=r(xwe," \u2014 "),Oj=n(xwe,"A",{href:!0});var eZr=s(Oj);xIo=r(eZr,"UniSpeechSatForSequenceClassification"),eZr.forEach(t),kIo=r(xwe," (UniSpeechSat model)"),xwe.forEach(t),RIo=i(No),J2=n(No,"LI",{});var kwe=s(J2);zle=n(kwe,"STRONG",{});var oZr=s(zle);SIo=r(oZr,"wav2vec2"),oZr.forEach(t),PIo=r(kwe," \u2014 "),Xj=n(kwe,"A",{href:!0});var rZr=s(Xj);$Io=r(rZr,"Wav2Vec2ForSequenceClassification"),rZr.forEach(t),IIo=r(kwe," (Wav2Vec2 model)"),kwe.forEach(t),DIo=i(No),Y2=n(No,"LI",{});var Rwe=s(Y2);Wle=n(Rwe,"STRONG",{});var tZr=s(Wle);jIo=r(tZr,"wavlm"),tZr.forEach(t),NIo=r(Rwe," \u2014 "),Vj=n(Rwe,"A",{href:!0});var aZr=s(Vj);qIo=r(aZr,"WavLMForSequenceClassification"),aZr.forEach(t),GIo=r(Rwe," (WavLM model)"),Rwe.forEach(t),No.forEach(t),OIo=i(Ht),K2=n(Ht,"P",{});var Swe=s(K2);XIo=r(Swe,"The model is set in evaluation mode by default using "),Qle=n(Swe,"CODE",{});var nZr=s(Qle);VIo=r(nZr,"model.eval()"),nZr.forEach(t),zIo=r(Swe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=n(Swe,"CODE",{});var sZr=s(Hle);WIo=r(sZr,"model.train()"),sZr.forEach(t),Swe.forEach(t),QIo=i(Ht),Ule=n(Ht,"P",{});var lZr=s(Ule);HIo=r(lZr,"Examples:"),lZr.forEach(t),UIo=i(Ht),m(zy.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),mBe=i(c),xd=n(c,"H2",{class:!0});var vke=s(xd);Z2=n(vke,"A",{id:!0,class:!0,href:!0});var iZr=s(Z2);Jle=n(iZr,"SPAN",{});var dZr=s(Jle);m(Wy.$$.fragment,dZr),dZr.forEach(t),iZr.forEach(t),JIo=i(vke),Yle=n(vke,"SPAN",{});var cZr=s(Yle);YIo=r(cZr,"AutoModelForAudioFrameClassification"),cZr.forEach(t),vke.forEach(t),gBe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(Qy.$$.fragment,pl),KIo=i(pl),kd=n(pl,"P",{});var lz=s(kd);ZIo=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Kle=n(lz,"CODE",{});var fZr=s(Kle);eDo=r(fZr,"from_pretrained()"),fZr.forEach(t),oDo=r(lz,"class method or the "),Zle=n(lz,"CODE",{});var mZr=s(Zle);rDo=r(mZr,"from_config()"),mZr.forEach(t),tDo=r(lz,`class
method.`),lz.forEach(t),aDo=i(pl),Hy=n(pl,"P",{});var Tke=s(Hy);nDo=r(Tke,"This class cannot be instantiated directly using "),eie=n(Tke,"CODE",{});var gZr=s(eie);sDo=r(gZr,"__init__()"),gZr.forEach(t),lDo=r(Tke," (throws an error)."),Tke.forEach(t),iDo=i(pl),et=n(pl,"DIV",{class:!0});var _l=s(et);m(Uy.$$.fragment,_l),dDo=i(_l),oie=n(_l,"P",{});var hZr=s(oie);cDo=r(hZr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),hZr.forEach(t),fDo=i(_l),Rd=n(_l,"P",{});var iz=s(Rd);mDo=r(iz,`Note:
Loading a model from its configuration file does `),rie=n(iz,"STRONG",{});var pZr=s(rie);gDo=r(pZr,"not"),pZr.forEach(t),hDo=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tie=n(iz,"CODE",{});var _Zr=s(tie);pDo=r(_Zr,"from_pretrained()"),_Zr.forEach(t),_Do=r(iz,"to load the model weights."),iz.forEach(t),uDo=i(_l),aie=n(_l,"P",{});var uZr=s(aie);bDo=r(uZr,"Examples:"),uZr.forEach(t),vDo=i(_l),m(Jy.$$.fragment,_l),_l.forEach(t),TDo=i(pl),We=n(pl,"DIV",{class:!0});var Ut=s(We);m(Yy.$$.fragment,Ut),FDo=i(Ut),nie=n(Ut,"P",{});var bZr=s(nie);CDo=r(bZr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),bZr.forEach(t),MDo=i(Ut),Za=n(Ut,"P",{});var qM=s(Za);EDo=r(qM,"The model class to instantiate is selected based on the "),sie=n(qM,"CODE",{});var vZr=s(sie);yDo=r(vZr,"model_type"),vZr.forEach(t),wDo=r(qM,` property of the config object (either
passed as an argument or loaded from `),lie=n(qM,"CODE",{});var TZr=s(lie);ADo=r(TZr,"pretrained_model_name_or_path"),TZr.forEach(t),LDo=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iie=n(qM,"CODE",{});var FZr=s(iie);BDo=r(FZr,"pretrained_model_name_or_path"),FZr.forEach(t),xDo=r(qM,":"),qM.forEach(t),kDo=i(Ut),en=n(Ut,"UL",{});var GM=s(en);ev=n(GM,"LI",{});var Pwe=s(ev);die=n(Pwe,"STRONG",{});var CZr=s(die);RDo=r(CZr,"data2vec-audio"),CZr.forEach(t),SDo=r(Pwe," \u2014 "),zj=n(Pwe,"A",{href:!0});var MZr=s(zj);PDo=r(MZr,"Data2VecAudioForAudioFrameClassification"),MZr.forEach(t),$Do=r(Pwe," (Data2VecAudio model)"),Pwe.forEach(t),IDo=i(GM),ov=n(GM,"LI",{});var $we=s(ov);cie=n($we,"STRONG",{});var EZr=s(cie);DDo=r(EZr,"unispeech-sat"),EZr.forEach(t),jDo=r($we," \u2014 "),Wj=n($we,"A",{href:!0});var yZr=s(Wj);NDo=r(yZr,"UniSpeechSatForAudioFrameClassification"),yZr.forEach(t),qDo=r($we," (UniSpeechSat model)"),$we.forEach(t),GDo=i(GM),rv=n(GM,"LI",{});var Iwe=s(rv);fie=n(Iwe,"STRONG",{});var wZr=s(fie);ODo=r(wZr,"wav2vec2"),wZr.forEach(t),XDo=r(Iwe," \u2014 "),Qj=n(Iwe,"A",{href:!0});var AZr=s(Qj);VDo=r(AZr,"Wav2Vec2ForAudioFrameClassification"),AZr.forEach(t),zDo=r(Iwe," (Wav2Vec2 model)"),Iwe.forEach(t),WDo=i(GM),tv=n(GM,"LI",{});var Dwe=s(tv);mie=n(Dwe,"STRONG",{});var LZr=s(mie);QDo=r(LZr,"wavlm"),LZr.forEach(t),HDo=r(Dwe," \u2014 "),Hj=n(Dwe,"A",{href:!0});var BZr=s(Hj);UDo=r(BZr,"WavLMForAudioFrameClassification"),BZr.forEach(t),JDo=r(Dwe," (WavLM model)"),Dwe.forEach(t),GM.forEach(t),YDo=i(Ut),av=n(Ut,"P",{});var jwe=s(av);KDo=r(jwe,"The model is set in evaluation mode by default using "),gie=n(jwe,"CODE",{});var xZr=s(gie);ZDo=r(xZr,"model.eval()"),xZr.forEach(t),ejo=r(jwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(jwe,"CODE",{});var kZr=s(hie);ojo=r(kZr,"model.train()"),kZr.forEach(t),jwe.forEach(t),rjo=i(Ut),pie=n(Ut,"P",{});var RZr=s(pie);tjo=r(RZr,"Examples:"),RZr.forEach(t),ajo=i(Ut),m(Ky.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),hBe=i(c),Sd=n(c,"H2",{class:!0});var Fke=s(Sd);nv=n(Fke,"A",{id:!0,class:!0,href:!0});var SZr=s(nv);_ie=n(SZr,"SPAN",{});var PZr=s(_ie);m(Zy.$$.fragment,PZr),PZr.forEach(t),SZr.forEach(t),njo=i(Fke),uie=n(Fke,"SPAN",{});var $Zr=s(uie);sjo=r($Zr,"AutoModelForCTC"),$Zr.forEach(t),Fke.forEach(t),pBe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(ew.$$.fragment,ul),ljo=i(ul),Pd=n(ul,"P",{});var dz=s(Pd);ijo=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bie=n(dz,"CODE",{});var IZr=s(bie);djo=r(IZr,"from_pretrained()"),IZr.forEach(t),cjo=r(dz,"class method or the "),vie=n(dz,"CODE",{});var DZr=s(vie);fjo=r(DZr,"from_config()"),DZr.forEach(t),mjo=r(dz,`class
method.`),dz.forEach(t),gjo=i(ul),ow=n(ul,"P",{});var Cke=s(ow);hjo=r(Cke,"This class cannot be instantiated directly using "),Tie=n(Cke,"CODE",{});var jZr=s(Tie);pjo=r(jZr,"__init__()"),jZr.forEach(t),_jo=r(Cke," (throws an error)."),Cke.forEach(t),ujo=i(ul),ot=n(ul,"DIV",{class:!0});var bl=s(ot);m(rw.$$.fragment,bl),bjo=i(bl),Fie=n(bl,"P",{});var NZr=s(Fie);vjo=r(NZr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NZr.forEach(t),Tjo=i(bl),$d=n(bl,"P",{});var cz=s($d);Fjo=r(cz,`Note:
Loading a model from its configuration file does `),Cie=n(cz,"STRONG",{});var qZr=s(Cie);Cjo=r(qZr,"not"),qZr.forEach(t),Mjo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=n(cz,"CODE",{});var GZr=s(Mie);Ejo=r(GZr,"from_pretrained()"),GZr.forEach(t),yjo=r(cz,"to load the model weights."),cz.forEach(t),wjo=i(bl),Eie=n(bl,"P",{});var OZr=s(Eie);Ajo=r(OZr,"Examples:"),OZr.forEach(t),Ljo=i(bl),m(tw.$$.fragment,bl),bl.forEach(t),Bjo=i(ul),Qe=n(ul,"DIV",{class:!0});var Jt=s(Qe);m(aw.$$.fragment,Jt),xjo=i(Jt),yie=n(Jt,"P",{});var XZr=s(yie);kjo=r(XZr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),XZr.forEach(t),Rjo=i(Jt),on=n(Jt,"P",{});var OM=s(on);Sjo=r(OM,"The model class to instantiate is selected based on the "),wie=n(OM,"CODE",{});var VZr=s(wie);Pjo=r(VZr,"model_type"),VZr.forEach(t),$jo=r(OM,` property of the config object (either
passed as an argument or loaded from `),Aie=n(OM,"CODE",{});var zZr=s(Aie);Ijo=r(zZr,"pretrained_model_name_or_path"),zZr.forEach(t),Djo=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=n(OM,"CODE",{});var WZr=s(Lie);jjo=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),Njo=r(OM,":"),OM.forEach(t),qjo=i(Jt),Le=n(Jt,"UL",{});var qo=s(Le);sv=n(qo,"LI",{});var Nwe=s(sv);Bie=n(Nwe,"STRONG",{});var QZr=s(Bie);Gjo=r(QZr,"data2vec-audio"),QZr.forEach(t),Ojo=r(Nwe," \u2014 "),Uj=n(Nwe,"A",{href:!0});var HZr=s(Uj);Xjo=r(HZr,"Data2VecAudioForCTC"),HZr.forEach(t),Vjo=r(Nwe," (Data2VecAudio model)"),Nwe.forEach(t),zjo=i(qo),lv=n(qo,"LI",{});var qwe=s(lv);xie=n(qwe,"STRONG",{});var UZr=s(xie);Wjo=r(UZr,"hubert"),UZr.forEach(t),Qjo=r(qwe," \u2014 "),Jj=n(qwe,"A",{href:!0});var JZr=s(Jj);Hjo=r(JZr,"HubertForCTC"),JZr.forEach(t),Ujo=r(qwe," (Hubert model)"),qwe.forEach(t),Jjo=i(qo),iv=n(qo,"LI",{});var Gwe=s(iv);kie=n(Gwe,"STRONG",{});var YZr=s(kie);Yjo=r(YZr,"sew"),YZr.forEach(t),Kjo=r(Gwe," \u2014 "),Yj=n(Gwe,"A",{href:!0});var KZr=s(Yj);Zjo=r(KZr,"SEWForCTC"),KZr.forEach(t),eNo=r(Gwe," (SEW model)"),Gwe.forEach(t),oNo=i(qo),dv=n(qo,"LI",{});var Owe=s(dv);Rie=n(Owe,"STRONG",{});var ZZr=s(Rie);rNo=r(ZZr,"sew-d"),ZZr.forEach(t),tNo=r(Owe," \u2014 "),Kj=n(Owe,"A",{href:!0});var eet=s(Kj);aNo=r(eet,"SEWDForCTC"),eet.forEach(t),nNo=r(Owe," (SEW-D model)"),Owe.forEach(t),sNo=i(qo),cv=n(qo,"LI",{});var Xwe=s(cv);Sie=n(Xwe,"STRONG",{});var oet=s(Sie);lNo=r(oet,"unispeech"),oet.forEach(t),iNo=r(Xwe," \u2014 "),Zj=n(Xwe,"A",{href:!0});var ret=s(Zj);dNo=r(ret,"UniSpeechForCTC"),ret.forEach(t),cNo=r(Xwe," (UniSpeech model)"),Xwe.forEach(t),fNo=i(qo),fv=n(qo,"LI",{});var Vwe=s(fv);Pie=n(Vwe,"STRONG",{});var tet=s(Pie);mNo=r(tet,"unispeech-sat"),tet.forEach(t),gNo=r(Vwe," \u2014 "),eN=n(Vwe,"A",{href:!0});var aet=s(eN);hNo=r(aet,"UniSpeechSatForCTC"),aet.forEach(t),pNo=r(Vwe," (UniSpeechSat model)"),Vwe.forEach(t),_No=i(qo),mv=n(qo,"LI",{});var zwe=s(mv);$ie=n(zwe,"STRONG",{});var net=s($ie);uNo=r(net,"wav2vec2"),net.forEach(t),bNo=r(zwe," \u2014 "),oN=n(zwe,"A",{href:!0});var set=s(oN);vNo=r(set,"Wav2Vec2ForCTC"),set.forEach(t),TNo=r(zwe," (Wav2Vec2 model)"),zwe.forEach(t),FNo=i(qo),gv=n(qo,"LI",{});var Wwe=s(gv);Iie=n(Wwe,"STRONG",{});var iet=s(Iie);CNo=r(iet,"wavlm"),iet.forEach(t),MNo=r(Wwe," \u2014 "),rN=n(Wwe,"A",{href:!0});var det=s(rN);ENo=r(det,"WavLMForCTC"),det.forEach(t),yNo=r(Wwe," (WavLM model)"),Wwe.forEach(t),qo.forEach(t),wNo=i(Jt),hv=n(Jt,"P",{});var Qwe=s(hv);ANo=r(Qwe,"The model is set in evaluation mode by default using "),Die=n(Qwe,"CODE",{});var cet=s(Die);LNo=r(cet,"model.eval()"),cet.forEach(t),BNo=r(Qwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(Qwe,"CODE",{});var fet=s(jie);xNo=r(fet,"model.train()"),fet.forEach(t),Qwe.forEach(t),kNo=i(Jt),Nie=n(Jt,"P",{});var met=s(Nie);RNo=r(met,"Examples:"),met.forEach(t),SNo=i(Jt),m(nw.$$.fragment,Jt),Jt.forEach(t),ul.forEach(t),_Be=i(c),Id=n(c,"H2",{class:!0});var Mke=s(Id);pv=n(Mke,"A",{id:!0,class:!0,href:!0});var get=s(pv);qie=n(get,"SPAN",{});var het=s(qie);m(sw.$$.fragment,het),het.forEach(t),get.forEach(t),PNo=i(Mke),Gie=n(Mke,"SPAN",{});var pet=s(Gie);$No=r(pet,"AutoModelForSpeechSeq2Seq"),pet.forEach(t),Mke.forEach(t),uBe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(lw.$$.fragment,vl),INo=i(vl),Dd=n(vl,"P",{});var fz=s(Dd);DNo=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Oie=n(fz,"CODE",{});var _et=s(Oie);jNo=r(_et,"from_pretrained()"),_et.forEach(t),NNo=r(fz,"class method or the "),Xie=n(fz,"CODE",{});var uet=s(Xie);qNo=r(uet,"from_config()"),uet.forEach(t),GNo=r(fz,`class
method.`),fz.forEach(t),ONo=i(vl),iw=n(vl,"P",{});var Eke=s(iw);XNo=r(Eke,"This class cannot be instantiated directly using "),Vie=n(Eke,"CODE",{});var bet=s(Vie);VNo=r(bet,"__init__()"),bet.forEach(t),zNo=r(Eke," (throws an error)."),Eke.forEach(t),WNo=i(vl),rt=n(vl,"DIV",{class:!0});var Tl=s(rt);m(dw.$$.fragment,Tl),QNo=i(Tl),zie=n(Tl,"P",{});var vet=s(zie);HNo=r(vet,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vet.forEach(t),UNo=i(Tl),jd=n(Tl,"P",{});var mz=s(jd);JNo=r(mz,`Note:
Loading a model from its configuration file does `),Wie=n(mz,"STRONG",{});var Tet=s(Wie);YNo=r(Tet,"not"),Tet.forEach(t),KNo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qie=n(mz,"CODE",{});var Fet=s(Qie);ZNo=r(Fet,"from_pretrained()"),Fet.forEach(t),eqo=r(mz,"to load the model weights."),mz.forEach(t),oqo=i(Tl),Hie=n(Tl,"P",{});var Cet=s(Hie);rqo=r(Cet,"Examples:"),Cet.forEach(t),tqo=i(Tl),m(cw.$$.fragment,Tl),Tl.forEach(t),aqo=i(vl),He=n(vl,"DIV",{class:!0});var Yt=s(He);m(fw.$$.fragment,Yt),nqo=i(Yt),Uie=n(Yt,"P",{});var Met=s(Uie);sqo=r(Met,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Met.forEach(t),lqo=i(Yt),rn=n(Yt,"P",{});var XM=s(rn);iqo=r(XM,"The model class to instantiate is selected based on the "),Jie=n(XM,"CODE",{});var Eet=s(Jie);dqo=r(Eet,"model_type"),Eet.forEach(t),cqo=r(XM,` property of the config object (either
passed as an argument or loaded from `),Yie=n(XM,"CODE",{});var yet=s(Yie);fqo=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),mqo=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=n(XM,"CODE",{});var wet=s(Kie);gqo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),hqo=r(XM,":"),XM.forEach(t),pqo=i(Yt),mw=n(Yt,"UL",{});var yke=s(mw);_v=n(yke,"LI",{});var Hwe=s(_v);Zie=n(Hwe,"STRONG",{});var Aet=s(Zie);_qo=r(Aet,"speech-encoder-decoder"),Aet.forEach(t),uqo=r(Hwe," \u2014 "),tN=n(Hwe,"A",{href:!0});var Let=s(tN);bqo=r(Let,"SpeechEncoderDecoderModel"),Let.forEach(t),vqo=r(Hwe," (Speech Encoder decoder model)"),Hwe.forEach(t),Tqo=i(yke),uv=n(yke,"LI",{});var Uwe=s(uv);ede=n(Uwe,"STRONG",{});var Bet=s(ede);Fqo=r(Bet,"speech_to_text"),Bet.forEach(t),Cqo=r(Uwe," \u2014 "),aN=n(Uwe,"A",{href:!0});var xet=s(aN);Mqo=r(xet,"Speech2TextForConditionalGeneration"),xet.forEach(t),Eqo=r(Uwe," (Speech2Text model)"),Uwe.forEach(t),yke.forEach(t),yqo=i(Yt),bv=n(Yt,"P",{});var Jwe=s(bv);wqo=r(Jwe,"The model is set in evaluation mode by default using "),ode=n(Jwe,"CODE",{});var ket=s(ode);Aqo=r(ket,"model.eval()"),ket.forEach(t),Lqo=r(Jwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=n(Jwe,"CODE",{});var Ret=s(rde);Bqo=r(Ret,"model.train()"),Ret.forEach(t),Jwe.forEach(t),xqo=i(Yt),tde=n(Yt,"P",{});var Set=s(tde);kqo=r(Set,"Examples:"),Set.forEach(t),Rqo=i(Yt),m(gw.$$.fragment,Yt),Yt.forEach(t),vl.forEach(t),bBe=i(c),Nd=n(c,"H2",{class:!0});var wke=s(Nd);vv=n(wke,"A",{id:!0,class:!0,href:!0});var Pet=s(vv);ade=n(Pet,"SPAN",{});var $et=s(ade);m(hw.$$.fragment,$et),$et.forEach(t),Pet.forEach(t),Sqo=i(wke),nde=n(wke,"SPAN",{});var Iet=s(nde);Pqo=r(Iet,"AutoModelForAudioXVector"),Iet.forEach(t),wke.forEach(t),vBe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(pw.$$.fragment,Fl),$qo=i(Fl),qd=n(Fl,"P",{});var gz=s(qd);Iqo=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),sde=n(gz,"CODE",{});var Det=s(sde);Dqo=r(Det,"from_pretrained()"),Det.forEach(t),jqo=r(gz,"class method or the "),lde=n(gz,"CODE",{});var jet=s(lde);Nqo=r(jet,"from_config()"),jet.forEach(t),qqo=r(gz,`class
method.`),gz.forEach(t),Gqo=i(Fl),_w=n(Fl,"P",{});var Ake=s(_w);Oqo=r(Ake,"This class cannot be instantiated directly using "),ide=n(Ake,"CODE",{});var Net=s(ide);Xqo=r(Net,"__init__()"),Net.forEach(t),Vqo=r(Ake," (throws an error)."),Ake.forEach(t),zqo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Cl=s(tt);m(uw.$$.fragment,Cl),Wqo=i(Cl),dde=n(Cl,"P",{});var qet=s(dde);Qqo=r(qet,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qet.forEach(t),Hqo=i(Cl),Gd=n(Cl,"P",{});var hz=s(Gd);Uqo=r(hz,`Note:
Loading a model from its configuration file does `),cde=n(hz,"STRONG",{});var Get=s(cde);Jqo=r(Get,"not"),Get.forEach(t),Yqo=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),fde=n(hz,"CODE",{});var Oet=s(fde);Kqo=r(Oet,"from_pretrained()"),Oet.forEach(t),Zqo=r(hz,"to load the model weights."),hz.forEach(t),eGo=i(Cl),mde=n(Cl,"P",{});var Xet=s(mde);oGo=r(Xet,"Examples:"),Xet.forEach(t),rGo=i(Cl),m(bw.$$.fragment,Cl),Cl.forEach(t),tGo=i(Fl),Ue=n(Fl,"DIV",{class:!0});var Kt=s(Ue);m(vw.$$.fragment,Kt),aGo=i(Kt),gde=n(Kt,"P",{});var Vet=s(gde);nGo=r(Vet,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Vet.forEach(t),sGo=i(Kt),tn=n(Kt,"P",{});var VM=s(tn);lGo=r(VM,"The model class to instantiate is selected based on the "),hde=n(VM,"CODE",{});var zet=s(hde);iGo=r(zet,"model_type"),zet.forEach(t),dGo=r(VM,` property of the config object (either
passed as an argument or loaded from `),pde=n(VM,"CODE",{});var Wet=s(pde);cGo=r(Wet,"pretrained_model_name_or_path"),Wet.forEach(t),fGo=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_de=n(VM,"CODE",{});var Qet=s(_de);mGo=r(Qet,"pretrained_model_name_or_path"),Qet.forEach(t),gGo=r(VM,":"),VM.forEach(t),hGo=i(Kt),an=n(Kt,"UL",{});var zM=s(an);Tv=n(zM,"LI",{});var Ywe=s(Tv);ude=n(Ywe,"STRONG",{});var Het=s(ude);pGo=r(Het,"data2vec-audio"),Het.forEach(t),_Go=r(Ywe," \u2014 "),nN=n(Ywe,"A",{href:!0});var Uet=s(nN);uGo=r(Uet,"Data2VecAudioForXVector"),Uet.forEach(t),bGo=r(Ywe," (Data2VecAudio model)"),Ywe.forEach(t),vGo=i(zM),Fv=n(zM,"LI",{});var Kwe=s(Fv);bde=n(Kwe,"STRONG",{});var Jet=s(bde);TGo=r(Jet,"unispeech-sat"),Jet.forEach(t),FGo=r(Kwe," \u2014 "),sN=n(Kwe,"A",{href:!0});var Yet=s(sN);CGo=r(Yet,"UniSpeechSatForXVector"),Yet.forEach(t),MGo=r(Kwe," (UniSpeechSat model)"),Kwe.forEach(t),EGo=i(zM),Cv=n(zM,"LI",{});var Zwe=s(Cv);vde=n(Zwe,"STRONG",{});var Ket=s(vde);yGo=r(Ket,"wav2vec2"),Ket.forEach(t),wGo=r(Zwe," \u2014 "),lN=n(Zwe,"A",{href:!0});var Zet=s(lN);AGo=r(Zet,"Wav2Vec2ForXVector"),Zet.forEach(t),LGo=r(Zwe," (Wav2Vec2 model)"),Zwe.forEach(t),BGo=i(zM),Mv=n(zM,"LI",{});var e6e=s(Mv);Tde=n(e6e,"STRONG",{});var eot=s(Tde);xGo=r(eot,"wavlm"),eot.forEach(t),kGo=r(e6e," \u2014 "),iN=n(e6e,"A",{href:!0});var oot=s(iN);RGo=r(oot,"WavLMForXVector"),oot.forEach(t),SGo=r(e6e," (WavLM model)"),e6e.forEach(t),zM.forEach(t),PGo=i(Kt),Ev=n(Kt,"P",{});var o6e=s(Ev);$Go=r(o6e,"The model is set in evaluation mode by default using "),Fde=n(o6e,"CODE",{});var rot=s(Fde);IGo=r(rot,"model.eval()"),rot.forEach(t),DGo=r(o6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=n(o6e,"CODE",{});var tot=s(Cde);jGo=r(tot,"model.train()"),tot.forEach(t),o6e.forEach(t),NGo=i(Kt),Mde=n(Kt,"P",{});var aot=s(Mde);qGo=r(aot,"Examples:"),aot.forEach(t),GGo=i(Kt),m(Tw.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),TBe=i(c),Od=n(c,"H2",{class:!0});var Lke=s(Od);yv=n(Lke,"A",{id:!0,class:!0,href:!0});var not=s(yv);Ede=n(not,"SPAN",{});var sot=s(Ede);m(Fw.$$.fragment,sot),sot.forEach(t),not.forEach(t),OGo=i(Lke),yde=n(Lke,"SPAN",{});var lot=s(yde);XGo=r(lot,"AutoModelForMaskedImageModeling"),lot.forEach(t),Lke.forEach(t),FBe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Cw.$$.fragment,Ml),VGo=i(Ml),Xd=n(Ml,"P",{});var pz=s(Xd);zGo=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wde=n(pz,"CODE",{});var iot=s(wde);WGo=r(iot,"from_pretrained()"),iot.forEach(t),QGo=r(pz,"class method or the "),Ade=n(pz,"CODE",{});var dot=s(Ade);HGo=r(dot,"from_config()"),dot.forEach(t),UGo=r(pz,`class
method.`),pz.forEach(t),JGo=i(Ml),Mw=n(Ml,"P",{});var Bke=s(Mw);YGo=r(Bke,"This class cannot be instantiated directly using "),Lde=n(Bke,"CODE",{});var cot=s(Lde);KGo=r(cot,"__init__()"),cot.forEach(t),ZGo=r(Bke," (throws an error)."),Bke.forEach(t),eOo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(Ew.$$.fragment,El),oOo=i(El),Bde=n(El,"P",{});var fot=s(Bde);rOo=r(fot,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fot.forEach(t),tOo=i(El),Vd=n(El,"P",{});var _z=s(Vd);aOo=r(_z,`Note:
Loading a model from its configuration file does `),xde=n(_z,"STRONG",{});var mot=s(xde);nOo=r(mot,"not"),mot.forEach(t),sOo=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=n(_z,"CODE",{});var got=s(kde);lOo=r(got,"from_pretrained()"),got.forEach(t),iOo=r(_z,"to load the model weights."),_z.forEach(t),dOo=i(El),Rde=n(El,"P",{});var hot=s(Rde);cOo=r(hot,"Examples:"),hot.forEach(t),fOo=i(El),m(yw.$$.fragment,El),El.forEach(t),mOo=i(Ml),Je=n(Ml,"DIV",{class:!0});var Zt=s(Je);m(ww.$$.fragment,Zt),gOo=i(Zt),Sde=n(Zt,"P",{});var pot=s(Sde);hOo=r(pot,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pot.forEach(t),pOo=i(Zt),nn=n(Zt,"P",{});var WM=s(nn);_Oo=r(WM,"The model class to instantiate is selected based on the "),Pde=n(WM,"CODE",{});var _ot=s(Pde);uOo=r(_ot,"model_type"),_ot.forEach(t),bOo=r(WM,` property of the config object (either
passed as an argument or loaded from `),$de=n(WM,"CODE",{});var uot=s($de);vOo=r(uot,"pretrained_model_name_or_path"),uot.forEach(t),TOo=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(WM,"CODE",{});var bot=s(Ide);FOo=r(bot,"pretrained_model_name_or_path"),bot.forEach(t),COo=r(WM,":"),WM.forEach(t),MOo=i(Zt),zd=n(Zt,"UL",{});var uz=s(zd);wv=n(uz,"LI",{});var r6e=s(wv);Dde=n(r6e,"STRONG",{});var vot=s(Dde);EOo=r(vot,"deit"),vot.forEach(t),yOo=r(r6e," \u2014 "),dN=n(r6e,"A",{href:!0});var Tot=s(dN);wOo=r(Tot,"DeiTForMaskedImageModeling"),Tot.forEach(t),AOo=r(r6e," (DeiT model)"),r6e.forEach(t),LOo=i(uz),Av=n(uz,"LI",{});var t6e=s(Av);jde=n(t6e,"STRONG",{});var Fot=s(jde);BOo=r(Fot,"swin"),Fot.forEach(t),xOo=r(t6e," \u2014 "),cN=n(t6e,"A",{href:!0});var Cot=s(cN);kOo=r(Cot,"SwinForMaskedImageModeling"),Cot.forEach(t),ROo=r(t6e," (Swin model)"),t6e.forEach(t),SOo=i(uz),Lv=n(uz,"LI",{});var a6e=s(Lv);Nde=n(a6e,"STRONG",{});var Mot=s(Nde);POo=r(Mot,"vit"),Mot.forEach(t),$Oo=r(a6e," \u2014 "),fN=n(a6e,"A",{href:!0});var Eot=s(fN);IOo=r(Eot,"ViTForMaskedImageModeling"),Eot.forEach(t),DOo=r(a6e," (ViT model)"),a6e.forEach(t),uz.forEach(t),jOo=i(Zt),Bv=n(Zt,"P",{});var n6e=s(Bv);NOo=r(n6e,"The model is set in evaluation mode by default using "),qde=n(n6e,"CODE",{});var yot=s(qde);qOo=r(yot,"model.eval()"),yot.forEach(t),GOo=r(n6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gde=n(n6e,"CODE",{});var wot=s(Gde);OOo=r(wot,"model.train()"),wot.forEach(t),n6e.forEach(t),XOo=i(Zt),Ode=n(Zt,"P",{});var Aot=s(Ode);VOo=r(Aot,"Examples:"),Aot.forEach(t),zOo=i(Zt),m(Aw.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),CBe=i(c),Wd=n(c,"H2",{class:!0});var xke=s(Wd);xv=n(xke,"A",{id:!0,class:!0,href:!0});var Lot=s(xv);Xde=n(Lot,"SPAN",{});var Bot=s(Xde);m(Lw.$$.fragment,Bot),Bot.forEach(t),Lot.forEach(t),WOo=i(xke),Vde=n(xke,"SPAN",{});var xot=s(Vde);QOo=r(xot,"AutoModelForObjectDetection"),xot.forEach(t),xke.forEach(t),MBe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Bw.$$.fragment,yl),HOo=i(yl),Qd=n(yl,"P",{});var bz=s(Qd);UOo=r(bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zde=n(bz,"CODE",{});var kot=s(zde);JOo=r(kot,"from_pretrained()"),kot.forEach(t),YOo=r(bz,"class method or the "),Wde=n(bz,"CODE",{});var Rot=s(Wde);KOo=r(Rot,"from_config()"),Rot.forEach(t),ZOo=r(bz,`class
method.`),bz.forEach(t),eXo=i(yl),xw=n(yl,"P",{});var kke=s(xw);oXo=r(kke,"This class cannot be instantiated directly using "),Qde=n(kke,"CODE",{});var Sot=s(Qde);rXo=r(Sot,"__init__()"),Sot.forEach(t),tXo=r(kke," (throws an error)."),kke.forEach(t),aXo=i(yl),nt=n(yl,"DIV",{class:!0});var wl=s(nt);m(kw.$$.fragment,wl),nXo=i(wl),Hde=n(wl,"P",{});var Pot=s(Hde);sXo=r(Pot,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Pot.forEach(t),lXo=i(wl),Hd=n(wl,"P",{});var vz=s(Hd);iXo=r(vz,`Note:
Loading a model from its configuration file does `),Ude=n(vz,"STRONG",{});var $ot=s(Ude);dXo=r($ot,"not"),$ot.forEach(t),cXo=r(vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jde=n(vz,"CODE",{});var Iot=s(Jde);fXo=r(Iot,"from_pretrained()"),Iot.forEach(t),mXo=r(vz,"to load the model weights."),vz.forEach(t),gXo=i(wl),Yde=n(wl,"P",{});var Dot=s(Yde);hXo=r(Dot,"Examples:"),Dot.forEach(t),pXo=i(wl),m(Rw.$$.fragment,wl),wl.forEach(t),_Xo=i(yl),Ye=n(yl,"DIV",{class:!0});var ea=s(Ye);m(Sw.$$.fragment,ea),uXo=i(ea),Kde=n(ea,"P",{});var jot=s(Kde);bXo=r(jot,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jot.forEach(t),vXo=i(ea),sn=n(ea,"P",{});var QM=s(sn);TXo=r(QM,"The model class to instantiate is selected based on the "),Zde=n(QM,"CODE",{});var Not=s(Zde);FXo=r(Not,"model_type"),Not.forEach(t),CXo=r(QM,` property of the config object (either
passed as an argument or loaded from `),ece=n(QM,"CODE",{});var qot=s(ece);MXo=r(qot,"pretrained_model_name_or_path"),qot.forEach(t),EXo=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oce=n(QM,"CODE",{});var Got=s(oce);yXo=r(Got,"pretrained_model_name_or_path"),Got.forEach(t),wXo=r(QM,":"),QM.forEach(t),AXo=i(ea),rce=n(ea,"UL",{});var Oot=s(rce);kv=n(Oot,"LI",{});var s6e=s(kv);tce=n(s6e,"STRONG",{});var Xot=s(tce);LXo=r(Xot,"detr"),Xot.forEach(t),BXo=r(s6e," \u2014 "),mN=n(s6e,"A",{href:!0});var Vot=s(mN);xXo=r(Vot,"DetrForObjectDetection"),Vot.forEach(t),kXo=r(s6e," (DETR model)"),s6e.forEach(t),Oot.forEach(t),RXo=i(ea),Rv=n(ea,"P",{});var l6e=s(Rv);SXo=r(l6e,"The model is set in evaluation mode by default using "),ace=n(l6e,"CODE",{});var zot=s(ace);PXo=r(zot,"model.eval()"),zot.forEach(t),$Xo=r(l6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nce=n(l6e,"CODE",{});var Wot=s(nce);IXo=r(Wot,"model.train()"),Wot.forEach(t),l6e.forEach(t),DXo=i(ea),sce=n(ea,"P",{});var Qot=s(sce);jXo=r(Qot,"Examples:"),Qot.forEach(t),NXo=i(ea),m(Pw.$$.fragment,ea),ea.forEach(t),yl.forEach(t),EBe=i(c),Ud=n(c,"H2",{class:!0});var Rke=s(Ud);Sv=n(Rke,"A",{id:!0,class:!0,href:!0});var Hot=s(Sv);lce=n(Hot,"SPAN",{});var Uot=s(lce);m($w.$$.fragment,Uot),Uot.forEach(t),Hot.forEach(t),qXo=i(Rke),ice=n(Rke,"SPAN",{});var Jot=s(ice);GXo=r(Jot,"AutoModelForImageSegmentation"),Jot.forEach(t),Rke.forEach(t),yBe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(Iw.$$.fragment,Al),OXo=i(Al),Jd=n(Al,"P",{});var Tz=s(Jd);XXo=r(Tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),dce=n(Tz,"CODE",{});var Yot=s(dce);VXo=r(Yot,"from_pretrained()"),Yot.forEach(t),zXo=r(Tz,"class method or the "),cce=n(Tz,"CODE",{});var Kot=s(cce);WXo=r(Kot,"from_config()"),Kot.forEach(t),QXo=r(Tz,`class
method.`),Tz.forEach(t),HXo=i(Al),Dw=n(Al,"P",{});var Ske=s(Dw);UXo=r(Ske,"This class cannot be instantiated directly using "),fce=n(Ske,"CODE",{});var Zot=s(fce);JXo=r(Zot,"__init__()"),Zot.forEach(t),YXo=r(Ske," (throws an error)."),Ske.forEach(t),KXo=i(Al),st=n(Al,"DIV",{class:!0});var Ll=s(st);m(jw.$$.fragment,Ll),ZXo=i(Ll),mce=n(Ll,"P",{});var ert=s(mce);eVo=r(ert,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ert.forEach(t),oVo=i(Ll),Yd=n(Ll,"P",{});var Fz=s(Yd);rVo=r(Fz,`Note:
Loading a model from its configuration file does `),gce=n(Fz,"STRONG",{});var ort=s(gce);tVo=r(ort,"not"),ort.forEach(t),aVo=r(Fz,` load the model weights. It only affects the
model\u2019s configuration. Use `),hce=n(Fz,"CODE",{});var rrt=s(hce);nVo=r(rrt,"from_pretrained()"),rrt.forEach(t),sVo=r(Fz,"to load the model weights."),Fz.forEach(t),lVo=i(Ll),pce=n(Ll,"P",{});var trt=s(pce);iVo=r(trt,"Examples:"),trt.forEach(t),dVo=i(Ll),m(Nw.$$.fragment,Ll),Ll.forEach(t),cVo=i(Al),Ke=n(Al,"DIV",{class:!0});var oa=s(Ke);m(qw.$$.fragment,oa),fVo=i(oa),_ce=n(oa,"P",{});var art=s(_ce);mVo=r(art,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),art.forEach(t),gVo=i(oa),ln=n(oa,"P",{});var HM=s(ln);hVo=r(HM,"The model class to instantiate is selected based on the "),uce=n(HM,"CODE",{});var nrt=s(uce);pVo=r(nrt,"model_type"),nrt.forEach(t),_Vo=r(HM,` property of the config object (either
passed as an argument or loaded from `),bce=n(HM,"CODE",{});var srt=s(bce);uVo=r(srt,"pretrained_model_name_or_path"),srt.forEach(t),bVo=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=n(HM,"CODE",{});var lrt=s(vce);vVo=r(lrt,"pretrained_model_name_or_path"),lrt.forEach(t),TVo=r(HM,":"),HM.forEach(t),FVo=i(oa),Tce=n(oa,"UL",{});var irt=s(Tce);Pv=n(irt,"LI",{});var i6e=s(Pv);Fce=n(i6e,"STRONG",{});var drt=s(Fce);CVo=r(drt,"detr"),drt.forEach(t),MVo=r(i6e," \u2014 "),gN=n(i6e,"A",{href:!0});var crt=s(gN);EVo=r(crt,"DetrForSegmentation"),crt.forEach(t),yVo=r(i6e," (DETR model)"),i6e.forEach(t),irt.forEach(t),wVo=i(oa),$v=n(oa,"P",{});var d6e=s($v);AVo=r(d6e,"The model is set in evaluation mode by default using "),Cce=n(d6e,"CODE",{});var frt=s(Cce);LVo=r(frt,"model.eval()"),frt.forEach(t),BVo=r(d6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(d6e,"CODE",{});var mrt=s(Mce);xVo=r(mrt,"model.train()"),mrt.forEach(t),d6e.forEach(t),kVo=i(oa),Ece=n(oa,"P",{});var grt=s(Ece);RVo=r(grt,"Examples:"),grt.forEach(t),SVo=i(oa),m(Gw.$$.fragment,oa),oa.forEach(t),Al.forEach(t),wBe=i(c),Kd=n(c,"H2",{class:!0});var Pke=s(Kd);Iv=n(Pke,"A",{id:!0,class:!0,href:!0});var hrt=s(Iv);yce=n(hrt,"SPAN",{});var prt=s(yce);m(Ow.$$.fragment,prt),prt.forEach(t),hrt.forEach(t),PVo=i(Pke),wce=n(Pke,"SPAN",{});var _rt=s(wce);$Vo=r(_rt,"AutoModelForSemanticSegmentation"),_rt.forEach(t),Pke.forEach(t),ABe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(Xw.$$.fragment,Bl),IVo=i(Bl),Zd=n(Bl,"P",{});var Cz=s(Zd);DVo=r(Cz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ace=n(Cz,"CODE",{});var urt=s(Ace);jVo=r(urt,"from_pretrained()"),urt.forEach(t),NVo=r(Cz,"class method or the "),Lce=n(Cz,"CODE",{});var brt=s(Lce);qVo=r(brt,"from_config()"),brt.forEach(t),GVo=r(Cz,`class
method.`),Cz.forEach(t),OVo=i(Bl),Vw=n(Bl,"P",{});var $ke=s(Vw);XVo=r($ke,"This class cannot be instantiated directly using "),Bce=n($ke,"CODE",{});var vrt=s(Bce);VVo=r(vrt,"__init__()"),vrt.forEach(t),zVo=r($ke," (throws an error)."),$ke.forEach(t),WVo=i(Bl),lt=n(Bl,"DIV",{class:!0});var xl=s(lt);m(zw.$$.fragment,xl),QVo=i(xl),xce=n(xl,"P",{});var Trt=s(xce);HVo=r(Trt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Trt.forEach(t),UVo=i(xl),ec=n(xl,"P",{});var Mz=s(ec);JVo=r(Mz,`Note:
Loading a model from its configuration file does `),kce=n(Mz,"STRONG",{});var Frt=s(kce);YVo=r(Frt,"not"),Frt.forEach(t),KVo=r(Mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rce=n(Mz,"CODE",{});var Crt=s(Rce);ZVo=r(Crt,"from_pretrained()"),Crt.forEach(t),ezo=r(Mz,"to load the model weights."),Mz.forEach(t),ozo=i(xl),Sce=n(xl,"P",{});var Mrt=s(Sce);rzo=r(Mrt,"Examples:"),Mrt.forEach(t),tzo=i(xl),m(Ww.$$.fragment,xl),xl.forEach(t),azo=i(Bl),Ze=n(Bl,"DIV",{class:!0});var ra=s(Ze);m(Qw.$$.fragment,ra),nzo=i(ra),Pce=n(ra,"P",{});var Ert=s(Pce);szo=r(Ert,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ert.forEach(t),lzo=i(ra),dn=n(ra,"P",{});var UM=s(dn);izo=r(UM,"The model class to instantiate is selected based on the "),$ce=n(UM,"CODE",{});var yrt=s($ce);dzo=r(yrt,"model_type"),yrt.forEach(t),czo=r(UM,` property of the config object (either
passed as an argument or loaded from `),Ice=n(UM,"CODE",{});var wrt=s(Ice);fzo=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),mzo=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=n(UM,"CODE",{});var Art=s(Dce);gzo=r(Art,"pretrained_model_name_or_path"),Art.forEach(t),hzo=r(UM,":"),UM.forEach(t),pzo=i(ra),Hw=n(ra,"UL",{});var Ike=s(Hw);Dv=n(Ike,"LI",{});var c6e=s(Dv);jce=n(c6e,"STRONG",{});var Lrt=s(jce);_zo=r(Lrt,"beit"),Lrt.forEach(t),uzo=r(c6e," \u2014 "),hN=n(c6e,"A",{href:!0});var Brt=s(hN);bzo=r(Brt,"BeitForSemanticSegmentation"),Brt.forEach(t),vzo=r(c6e," (BEiT model)"),c6e.forEach(t),Tzo=i(Ike),jv=n(Ike,"LI",{});var f6e=s(jv);Nce=n(f6e,"STRONG",{});var xrt=s(Nce);Fzo=r(xrt,"segformer"),xrt.forEach(t),Czo=r(f6e," \u2014 "),pN=n(f6e,"A",{href:!0});var krt=s(pN);Mzo=r(krt,"SegformerForSemanticSegmentation"),krt.forEach(t),Ezo=r(f6e," (SegFormer model)"),f6e.forEach(t),Ike.forEach(t),yzo=i(ra),Nv=n(ra,"P",{});var m6e=s(Nv);wzo=r(m6e,"The model is set in evaluation mode by default using "),qce=n(m6e,"CODE",{});var Rrt=s(qce);Azo=r(Rrt,"model.eval()"),Rrt.forEach(t),Lzo=r(m6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=n(m6e,"CODE",{});var Srt=s(Gce);Bzo=r(Srt,"model.train()"),Srt.forEach(t),m6e.forEach(t),xzo=i(ra),Oce=n(ra,"P",{});var Prt=s(Oce);kzo=r(Prt,"Examples:"),Prt.forEach(t),Rzo=i(ra),m(Uw.$$.fragment,ra),ra.forEach(t),Bl.forEach(t),LBe=i(c),oc=n(c,"H2",{class:!0});var Dke=s(oc);qv=n(Dke,"A",{id:!0,class:!0,href:!0});var $rt=s(qv);Xce=n($rt,"SPAN",{});var Irt=s(Xce);m(Jw.$$.fragment,Irt),Irt.forEach(t),$rt.forEach(t),Szo=i(Dke),Vce=n(Dke,"SPAN",{});var Drt=s(Vce);Pzo=r(Drt,"TFAutoModel"),Drt.forEach(t),Dke.forEach(t),BBe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(Yw.$$.fragment,kl),$zo=i(kl),rc=n(kl,"P",{});var Ez=s(rc);Izo=r(Ez,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zce=n(Ez,"CODE",{});var jrt=s(zce);Dzo=r(jrt,"from_pretrained()"),jrt.forEach(t),jzo=r(Ez,"class method or the "),Wce=n(Ez,"CODE",{});var Nrt=s(Wce);Nzo=r(Nrt,"from_config()"),Nrt.forEach(t),qzo=r(Ez,`class
method.`),Ez.forEach(t),Gzo=i(kl),Kw=n(kl,"P",{});var jke=s(Kw);Ozo=r(jke,"This class cannot be instantiated directly using "),Qce=n(jke,"CODE",{});var qrt=s(Qce);Xzo=r(qrt,"__init__()"),qrt.forEach(t),Vzo=r(jke," (throws an error)."),jke.forEach(t),zzo=i(kl),it=n(kl,"DIV",{class:!0});var Rl=s(it);m(Zw.$$.fragment,Rl),Wzo=i(Rl),Hce=n(Rl,"P",{});var Grt=s(Hce);Qzo=r(Grt,"Instantiates one of the base model classes of the library from a configuration."),Grt.forEach(t),Hzo=i(Rl),tc=n(Rl,"P",{});var yz=s(tc);Uzo=r(yz,`Note:
Loading a model from its configuration file does `),Uce=n(yz,"STRONG",{});var Ort=s(Uce);Jzo=r(Ort,"not"),Ort.forEach(t),Yzo=r(yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jce=n(yz,"CODE",{});var Xrt=s(Jce);Kzo=r(Xrt,"from_pretrained()"),Xrt.forEach(t),Zzo=r(yz,"to load the model weights."),yz.forEach(t),eWo=i(Rl),Yce=n(Rl,"P",{});var Vrt=s(Yce);oWo=r(Vrt,"Examples:"),Vrt.forEach(t),rWo=i(Rl),m(e6.$$.fragment,Rl),Rl.forEach(t),tWo=i(kl),go=n(kl,"DIV",{class:!0});var ca=s(go);m(o6.$$.fragment,ca),aWo=i(ca),Kce=n(ca,"P",{});var zrt=s(Kce);nWo=r(zrt,"Instantiate one of the base model classes of the library from a pretrained model."),zrt.forEach(t),sWo=i(ca),cn=n(ca,"P",{});var JM=s(cn);lWo=r(JM,"The model class to instantiate is selected based on the "),Zce=n(JM,"CODE",{});var Wrt=s(Zce);iWo=r(Wrt,"model_type"),Wrt.forEach(t),dWo=r(JM,` property of the config object (either
passed as an argument or loaded from `),efe=n(JM,"CODE",{});var Qrt=s(efe);cWo=r(Qrt,"pretrained_model_name_or_path"),Qrt.forEach(t),fWo=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=n(JM,"CODE",{});var Hrt=s(ofe);mWo=r(Hrt,"pretrained_model_name_or_path"),Hrt.forEach(t),gWo=r(JM,":"),JM.forEach(t),hWo=i(ca),B=n(ca,"UL",{});var x=s(B);Gv=n(x,"LI",{});var g6e=s(Gv);rfe=n(g6e,"STRONG",{});var Urt=s(rfe);pWo=r(Urt,"albert"),Urt.forEach(t),_Wo=r(g6e," \u2014 "),_N=n(g6e,"A",{href:!0});var Jrt=s(_N);uWo=r(Jrt,"TFAlbertModel"),Jrt.forEach(t),bWo=r(g6e," (ALBERT model)"),g6e.forEach(t),vWo=i(x),Ov=n(x,"LI",{});var h6e=s(Ov);tfe=n(h6e,"STRONG",{});var Yrt=s(tfe);TWo=r(Yrt,"bart"),Yrt.forEach(t),FWo=r(h6e," \u2014 "),uN=n(h6e,"A",{href:!0});var Krt=s(uN);CWo=r(Krt,"TFBartModel"),Krt.forEach(t),MWo=r(h6e," (BART model)"),h6e.forEach(t),EWo=i(x),Xv=n(x,"LI",{});var p6e=s(Xv);afe=n(p6e,"STRONG",{});var Zrt=s(afe);yWo=r(Zrt,"bert"),Zrt.forEach(t),wWo=r(p6e," \u2014 "),bN=n(p6e,"A",{href:!0});var ett=s(bN);AWo=r(ett,"TFBertModel"),ett.forEach(t),LWo=r(p6e," (BERT model)"),p6e.forEach(t),BWo=i(x),Vv=n(x,"LI",{});var _6e=s(Vv);nfe=n(_6e,"STRONG",{});var ott=s(nfe);xWo=r(ott,"blenderbot"),ott.forEach(t),kWo=r(_6e," \u2014 "),vN=n(_6e,"A",{href:!0});var rtt=s(vN);RWo=r(rtt,"TFBlenderbotModel"),rtt.forEach(t),SWo=r(_6e," (Blenderbot model)"),_6e.forEach(t),PWo=i(x),zv=n(x,"LI",{});var u6e=s(zv);sfe=n(u6e,"STRONG",{});var ttt=s(sfe);$Wo=r(ttt,"blenderbot-small"),ttt.forEach(t),IWo=r(u6e," \u2014 "),TN=n(u6e,"A",{href:!0});var att=s(TN);DWo=r(att,"TFBlenderbotSmallModel"),att.forEach(t),jWo=r(u6e," (BlenderbotSmall model)"),u6e.forEach(t),NWo=i(x),Wv=n(x,"LI",{});var b6e=s(Wv);lfe=n(b6e,"STRONG",{});var ntt=s(lfe);qWo=r(ntt,"camembert"),ntt.forEach(t),GWo=r(b6e," \u2014 "),FN=n(b6e,"A",{href:!0});var stt=s(FN);OWo=r(stt,"TFCamembertModel"),stt.forEach(t),XWo=r(b6e," (CamemBERT model)"),b6e.forEach(t),VWo=i(x),Qv=n(x,"LI",{});var v6e=s(Qv);ife=n(v6e,"STRONG",{});var ltt=s(ife);zWo=r(ltt,"clip"),ltt.forEach(t),WWo=r(v6e," \u2014 "),CN=n(v6e,"A",{href:!0});var itt=s(CN);QWo=r(itt,"TFCLIPModel"),itt.forEach(t),HWo=r(v6e," (CLIP model)"),v6e.forEach(t),UWo=i(x),Hv=n(x,"LI",{});var T6e=s(Hv);dfe=n(T6e,"STRONG",{});var dtt=s(dfe);JWo=r(dtt,"convbert"),dtt.forEach(t),YWo=r(T6e," \u2014 "),MN=n(T6e,"A",{href:!0});var ctt=s(MN);KWo=r(ctt,"TFConvBertModel"),ctt.forEach(t),ZWo=r(T6e," (ConvBERT model)"),T6e.forEach(t),eQo=i(x),Uv=n(x,"LI",{});var F6e=s(Uv);cfe=n(F6e,"STRONG",{});var ftt=s(cfe);oQo=r(ftt,"convnext"),ftt.forEach(t),rQo=r(F6e," \u2014 "),EN=n(F6e,"A",{href:!0});var mtt=s(EN);tQo=r(mtt,"TFConvNextModel"),mtt.forEach(t),aQo=r(F6e," (ConvNext model)"),F6e.forEach(t),nQo=i(x),Jv=n(x,"LI",{});var C6e=s(Jv);ffe=n(C6e,"STRONG",{});var gtt=s(ffe);sQo=r(gtt,"ctrl"),gtt.forEach(t),lQo=r(C6e," \u2014 "),yN=n(C6e,"A",{href:!0});var htt=s(yN);iQo=r(htt,"TFCTRLModel"),htt.forEach(t),dQo=r(C6e," (CTRL model)"),C6e.forEach(t),cQo=i(x),Yv=n(x,"LI",{});var M6e=s(Yv);mfe=n(M6e,"STRONG",{});var ptt=s(mfe);fQo=r(ptt,"deberta"),ptt.forEach(t),mQo=r(M6e," \u2014 "),wN=n(M6e,"A",{href:!0});var _tt=s(wN);gQo=r(_tt,"TFDebertaModel"),_tt.forEach(t),hQo=r(M6e," (DeBERTa model)"),M6e.forEach(t),pQo=i(x),Kv=n(x,"LI",{});var E6e=s(Kv);gfe=n(E6e,"STRONG",{});var utt=s(gfe);_Qo=r(utt,"deberta-v2"),utt.forEach(t),uQo=r(E6e," \u2014 "),AN=n(E6e,"A",{href:!0});var btt=s(AN);bQo=r(btt,"TFDebertaV2Model"),btt.forEach(t),vQo=r(E6e," (DeBERTa-v2 model)"),E6e.forEach(t),TQo=i(x),Zv=n(x,"LI",{});var y6e=s(Zv);hfe=n(y6e,"STRONG",{});var vtt=s(hfe);FQo=r(vtt,"distilbert"),vtt.forEach(t),CQo=r(y6e," \u2014 "),LN=n(y6e,"A",{href:!0});var Ttt=s(LN);MQo=r(Ttt,"TFDistilBertModel"),Ttt.forEach(t),EQo=r(y6e," (DistilBERT model)"),y6e.forEach(t),yQo=i(x),eT=n(x,"LI",{});var w6e=s(eT);pfe=n(w6e,"STRONG",{});var Ftt=s(pfe);wQo=r(Ftt,"dpr"),Ftt.forEach(t),AQo=r(w6e," \u2014 "),BN=n(w6e,"A",{href:!0});var Ctt=s(BN);LQo=r(Ctt,"TFDPRQuestionEncoder"),Ctt.forEach(t),BQo=r(w6e," (DPR model)"),w6e.forEach(t),xQo=i(x),oT=n(x,"LI",{});var A6e=s(oT);_fe=n(A6e,"STRONG",{});var Mtt=s(_fe);kQo=r(Mtt,"electra"),Mtt.forEach(t),RQo=r(A6e," \u2014 "),xN=n(A6e,"A",{href:!0});var Ett=s(xN);SQo=r(Ett,"TFElectraModel"),Ett.forEach(t),PQo=r(A6e," (ELECTRA model)"),A6e.forEach(t),$Qo=i(x),rT=n(x,"LI",{});var L6e=s(rT);ufe=n(L6e,"STRONG",{});var ytt=s(ufe);IQo=r(ytt,"flaubert"),ytt.forEach(t),DQo=r(L6e," \u2014 "),kN=n(L6e,"A",{href:!0});var wtt=s(kN);jQo=r(wtt,"TFFlaubertModel"),wtt.forEach(t),NQo=r(L6e," (FlauBERT model)"),L6e.forEach(t),qQo=i(x),$s=n(x,"LI",{});var s8=s($s);bfe=n(s8,"STRONG",{});var Att=s(bfe);GQo=r(Att,"funnel"),Att.forEach(t),OQo=r(s8," \u2014 "),RN=n(s8,"A",{href:!0});var Ltt=s(RN);XQo=r(Ltt,"TFFunnelModel"),Ltt.forEach(t),VQo=r(s8," or "),SN=n(s8,"A",{href:!0});var Btt=s(SN);zQo=r(Btt,"TFFunnelBaseModel"),Btt.forEach(t),WQo=r(s8," (Funnel Transformer model)"),s8.forEach(t),QQo=i(x),tT=n(x,"LI",{});var B6e=s(tT);vfe=n(B6e,"STRONG",{});var xtt=s(vfe);HQo=r(xtt,"gpt2"),xtt.forEach(t),UQo=r(B6e," \u2014 "),PN=n(B6e,"A",{href:!0});var ktt=s(PN);JQo=r(ktt,"TFGPT2Model"),ktt.forEach(t),YQo=r(B6e," (OpenAI GPT-2 model)"),B6e.forEach(t),KQo=i(x),aT=n(x,"LI",{});var x6e=s(aT);Tfe=n(x6e,"STRONG",{});var Rtt=s(Tfe);ZQo=r(Rtt,"hubert"),Rtt.forEach(t),eHo=r(x6e," \u2014 "),$N=n(x6e,"A",{href:!0});var Stt=s($N);oHo=r(Stt,"TFHubertModel"),Stt.forEach(t),rHo=r(x6e," (Hubert model)"),x6e.forEach(t),tHo=i(x),nT=n(x,"LI",{});var k6e=s(nT);Ffe=n(k6e,"STRONG",{});var Ptt=s(Ffe);aHo=r(Ptt,"layoutlm"),Ptt.forEach(t),nHo=r(k6e," \u2014 "),IN=n(k6e,"A",{href:!0});var $tt=s(IN);sHo=r($tt,"TFLayoutLMModel"),$tt.forEach(t),lHo=r(k6e," (LayoutLM model)"),k6e.forEach(t),iHo=i(x),sT=n(x,"LI",{});var R6e=s(sT);Cfe=n(R6e,"STRONG",{});var Itt=s(Cfe);dHo=r(Itt,"led"),Itt.forEach(t),cHo=r(R6e," \u2014 "),DN=n(R6e,"A",{href:!0});var Dtt=s(DN);fHo=r(Dtt,"TFLEDModel"),Dtt.forEach(t),mHo=r(R6e," (LED model)"),R6e.forEach(t),gHo=i(x),lT=n(x,"LI",{});var S6e=s(lT);Mfe=n(S6e,"STRONG",{});var jtt=s(Mfe);hHo=r(jtt,"longformer"),jtt.forEach(t),pHo=r(S6e," \u2014 "),jN=n(S6e,"A",{href:!0});var Ntt=s(jN);_Ho=r(Ntt,"TFLongformerModel"),Ntt.forEach(t),uHo=r(S6e," (Longformer model)"),S6e.forEach(t),bHo=i(x),iT=n(x,"LI",{});var P6e=s(iT);Efe=n(P6e,"STRONG",{});var qtt=s(Efe);vHo=r(qtt,"lxmert"),qtt.forEach(t),THo=r(P6e," \u2014 "),NN=n(P6e,"A",{href:!0});var Gtt=s(NN);FHo=r(Gtt,"TFLxmertModel"),Gtt.forEach(t),CHo=r(P6e," (LXMERT model)"),P6e.forEach(t),MHo=i(x),dT=n(x,"LI",{});var $6e=s(dT);yfe=n($6e,"STRONG",{});var Ott=s(yfe);EHo=r(Ott,"marian"),Ott.forEach(t),yHo=r($6e," \u2014 "),qN=n($6e,"A",{href:!0});var Xtt=s(qN);wHo=r(Xtt,"TFMarianModel"),Xtt.forEach(t),AHo=r($6e," (Marian model)"),$6e.forEach(t),LHo=i(x),cT=n(x,"LI",{});var I6e=s(cT);wfe=n(I6e,"STRONG",{});var Vtt=s(wfe);BHo=r(Vtt,"mbart"),Vtt.forEach(t),xHo=r(I6e," \u2014 "),GN=n(I6e,"A",{href:!0});var ztt=s(GN);kHo=r(ztt,"TFMBartModel"),ztt.forEach(t),RHo=r(I6e," (mBART model)"),I6e.forEach(t),SHo=i(x),fT=n(x,"LI",{});var D6e=s(fT);Afe=n(D6e,"STRONG",{});var Wtt=s(Afe);PHo=r(Wtt,"mobilebert"),Wtt.forEach(t),$Ho=r(D6e," \u2014 "),ON=n(D6e,"A",{href:!0});var Qtt=s(ON);IHo=r(Qtt,"TFMobileBertModel"),Qtt.forEach(t),DHo=r(D6e," (MobileBERT model)"),D6e.forEach(t),jHo=i(x),mT=n(x,"LI",{});var j6e=s(mT);Lfe=n(j6e,"STRONG",{});var Htt=s(Lfe);NHo=r(Htt,"mpnet"),Htt.forEach(t),qHo=r(j6e," \u2014 "),XN=n(j6e,"A",{href:!0});var Utt=s(XN);GHo=r(Utt,"TFMPNetModel"),Utt.forEach(t),OHo=r(j6e," (MPNet model)"),j6e.forEach(t),XHo=i(x),gT=n(x,"LI",{});var N6e=s(gT);Bfe=n(N6e,"STRONG",{});var Jtt=s(Bfe);VHo=r(Jtt,"mt5"),Jtt.forEach(t),zHo=r(N6e," \u2014 "),VN=n(N6e,"A",{href:!0});var Ytt=s(VN);WHo=r(Ytt,"TFMT5Model"),Ytt.forEach(t),QHo=r(N6e," (mT5 model)"),N6e.forEach(t),HHo=i(x),hT=n(x,"LI",{});var q6e=s(hT);xfe=n(q6e,"STRONG",{});var Ktt=s(xfe);UHo=r(Ktt,"openai-gpt"),Ktt.forEach(t),JHo=r(q6e," \u2014 "),zN=n(q6e,"A",{href:!0});var Ztt=s(zN);YHo=r(Ztt,"TFOpenAIGPTModel"),Ztt.forEach(t),KHo=r(q6e," (OpenAI GPT model)"),q6e.forEach(t),ZHo=i(x),pT=n(x,"LI",{});var G6e=s(pT);kfe=n(G6e,"STRONG",{});var eat=s(kfe);eUo=r(eat,"pegasus"),eat.forEach(t),oUo=r(G6e," \u2014 "),WN=n(G6e,"A",{href:!0});var oat=s(WN);rUo=r(oat,"TFPegasusModel"),oat.forEach(t),tUo=r(G6e," (Pegasus model)"),G6e.forEach(t),aUo=i(x),_T=n(x,"LI",{});var O6e=s(_T);Rfe=n(O6e,"STRONG",{});var rat=s(Rfe);nUo=r(rat,"rembert"),rat.forEach(t),sUo=r(O6e," \u2014 "),QN=n(O6e,"A",{href:!0});var tat=s(QN);lUo=r(tat,"TFRemBertModel"),tat.forEach(t),iUo=r(O6e," (RemBERT model)"),O6e.forEach(t),dUo=i(x),uT=n(x,"LI",{});var X6e=s(uT);Sfe=n(X6e,"STRONG",{});var aat=s(Sfe);cUo=r(aat,"roberta"),aat.forEach(t),fUo=r(X6e," \u2014 "),HN=n(X6e,"A",{href:!0});var nat=s(HN);mUo=r(nat,"TFRobertaModel"),nat.forEach(t),gUo=r(X6e," (RoBERTa model)"),X6e.forEach(t),hUo=i(x),bT=n(x,"LI",{});var V6e=s(bT);Pfe=n(V6e,"STRONG",{});var sat=s(Pfe);pUo=r(sat,"roformer"),sat.forEach(t),_Uo=r(V6e," \u2014 "),UN=n(V6e,"A",{href:!0});var lat=s(UN);uUo=r(lat,"TFRoFormerModel"),lat.forEach(t),bUo=r(V6e," (RoFormer model)"),V6e.forEach(t),vUo=i(x),vT=n(x,"LI",{});var z6e=s(vT);$fe=n(z6e,"STRONG",{});var iat=s($fe);TUo=r(iat,"speech_to_text"),iat.forEach(t),FUo=r(z6e," \u2014 "),JN=n(z6e,"A",{href:!0});var dat=s(JN);CUo=r(dat,"TFSpeech2TextModel"),dat.forEach(t),MUo=r(z6e," (Speech2Text model)"),z6e.forEach(t),EUo=i(x),TT=n(x,"LI",{});var W6e=s(TT);Ife=n(W6e,"STRONG",{});var cat=s(Ife);yUo=r(cat,"t5"),cat.forEach(t),wUo=r(W6e," \u2014 "),YN=n(W6e,"A",{href:!0});var fat=s(YN);AUo=r(fat,"TFT5Model"),fat.forEach(t),LUo=r(W6e," (T5 model)"),W6e.forEach(t),BUo=i(x),FT=n(x,"LI",{});var Q6e=s(FT);Dfe=n(Q6e,"STRONG",{});var mat=s(Dfe);xUo=r(mat,"tapas"),mat.forEach(t),kUo=r(Q6e," \u2014 "),KN=n(Q6e,"A",{href:!0});var gat=s(KN);RUo=r(gat,"TFTapasModel"),gat.forEach(t),SUo=r(Q6e," (TAPAS model)"),Q6e.forEach(t),PUo=i(x),CT=n(x,"LI",{});var H6e=s(CT);jfe=n(H6e,"STRONG",{});var hat=s(jfe);$Uo=r(hat,"transfo-xl"),hat.forEach(t),IUo=r(H6e," \u2014 "),ZN=n(H6e,"A",{href:!0});var pat=s(ZN);DUo=r(pat,"TFTransfoXLModel"),pat.forEach(t),jUo=r(H6e," (Transformer-XL model)"),H6e.forEach(t),NUo=i(x),MT=n(x,"LI",{});var U6e=s(MT);Nfe=n(U6e,"STRONG",{});var _at=s(Nfe);qUo=r(_at,"vit"),_at.forEach(t),GUo=r(U6e," \u2014 "),eq=n(U6e,"A",{href:!0});var uat=s(eq);OUo=r(uat,"TFViTModel"),uat.forEach(t),XUo=r(U6e," (ViT model)"),U6e.forEach(t),VUo=i(x),ET=n(x,"LI",{});var J6e=s(ET);qfe=n(J6e,"STRONG",{});var bat=s(qfe);zUo=r(bat,"wav2vec2"),bat.forEach(t),WUo=r(J6e," \u2014 "),oq=n(J6e,"A",{href:!0});var vat=s(oq);QUo=r(vat,"TFWav2Vec2Model"),vat.forEach(t),HUo=r(J6e," (Wav2Vec2 model)"),J6e.forEach(t),UUo=i(x),yT=n(x,"LI",{});var Y6e=s(yT);Gfe=n(Y6e,"STRONG",{});var Tat=s(Gfe);JUo=r(Tat,"xlm"),Tat.forEach(t),YUo=r(Y6e," \u2014 "),rq=n(Y6e,"A",{href:!0});var Fat=s(rq);KUo=r(Fat,"TFXLMModel"),Fat.forEach(t),ZUo=r(Y6e," (XLM model)"),Y6e.forEach(t),eJo=i(x),wT=n(x,"LI",{});var K6e=s(wT);Ofe=n(K6e,"STRONG",{});var Cat=s(Ofe);oJo=r(Cat,"xlm-roberta"),Cat.forEach(t),rJo=r(K6e," \u2014 "),tq=n(K6e,"A",{href:!0});var Mat=s(tq);tJo=r(Mat,"TFXLMRobertaModel"),Mat.forEach(t),aJo=r(K6e," (XLM-RoBERTa model)"),K6e.forEach(t),nJo=i(x),AT=n(x,"LI",{});var Z6e=s(AT);Xfe=n(Z6e,"STRONG",{});var Eat=s(Xfe);sJo=r(Eat,"xlnet"),Eat.forEach(t),lJo=r(Z6e," \u2014 "),aq=n(Z6e,"A",{href:!0});var yat=s(aq);iJo=r(yat,"TFXLNetModel"),yat.forEach(t),dJo=r(Z6e," (XLNet model)"),Z6e.forEach(t),x.forEach(t),cJo=i(ca),Vfe=n(ca,"P",{});var wat=s(Vfe);fJo=r(wat,"Examples:"),wat.forEach(t),mJo=i(ca),m(r6.$$.fragment,ca),ca.forEach(t),kl.forEach(t),xBe=i(c),ac=n(c,"H2",{class:!0});var Nke=s(ac);LT=n(Nke,"A",{id:!0,class:!0,href:!0});var Aat=s(LT);zfe=n(Aat,"SPAN",{});var Lat=s(zfe);m(t6.$$.fragment,Lat),Lat.forEach(t),Aat.forEach(t),gJo=i(Nke),Wfe=n(Nke,"SPAN",{});var Bat=s(Wfe);hJo=r(Bat,"TFAutoModelForPreTraining"),Bat.forEach(t),Nke.forEach(t),kBe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(a6.$$.fragment,Sl),pJo=i(Sl),nc=n(Sl,"P",{});var wz=s(nc);_Jo=r(wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qfe=n(wz,"CODE",{});var xat=s(Qfe);uJo=r(xat,"from_pretrained()"),xat.forEach(t),bJo=r(wz,"class method or the "),Hfe=n(wz,"CODE",{});var kat=s(Hfe);vJo=r(kat,"from_config()"),kat.forEach(t),TJo=r(wz,`class
method.`),wz.forEach(t),FJo=i(Sl),n6=n(Sl,"P",{});var qke=s(n6);CJo=r(qke,"This class cannot be instantiated directly using "),Ufe=n(qke,"CODE",{});var Rat=s(Ufe);MJo=r(Rat,"__init__()"),Rat.forEach(t),EJo=r(qke," (throws an error)."),qke.forEach(t),yJo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Pl=s(dt);m(s6.$$.fragment,Pl),wJo=i(Pl),Jfe=n(Pl,"P",{});var Sat=s(Jfe);AJo=r(Sat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Sat.forEach(t),LJo=i(Pl),sc=n(Pl,"P",{});var Az=s(sc);BJo=r(Az,`Note:
Loading a model from its configuration file does `),Yfe=n(Az,"STRONG",{});var Pat=s(Yfe);xJo=r(Pat,"not"),Pat.forEach(t),kJo=r(Az,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kfe=n(Az,"CODE",{});var $at=s(Kfe);RJo=r($at,"from_pretrained()"),$at.forEach(t),SJo=r(Az,"to load the model weights."),Az.forEach(t),PJo=i(Pl),Zfe=n(Pl,"P",{});var Iat=s(Zfe);$Jo=r(Iat,"Examples:"),Iat.forEach(t),IJo=i(Pl),m(l6.$$.fragment,Pl),Pl.forEach(t),DJo=i(Sl),ho=n(Sl,"DIV",{class:!0});var fa=s(ho);m(i6.$$.fragment,fa),jJo=i(fa),eme=n(fa,"P",{});var Dat=s(eme);NJo=r(Dat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dat.forEach(t),qJo=i(fa),fn=n(fa,"P",{});var YM=s(fn);GJo=r(YM,"The model class to instantiate is selected based on the "),ome=n(YM,"CODE",{});var jat=s(ome);OJo=r(jat,"model_type"),jat.forEach(t),XJo=r(YM,` property of the config object (either
passed as an argument or loaded from `),rme=n(YM,"CODE",{});var Nat=s(rme);VJo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),zJo=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(YM,"CODE",{});var qat=s(tme);WJo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),QJo=r(YM,":"),YM.forEach(t),HJo=i(fa),H=n(fa,"UL",{});var U=s(H);BT=n(U,"LI",{});var eAe=s(BT);ame=n(eAe,"STRONG",{});var Gat=s(ame);UJo=r(Gat,"albert"),Gat.forEach(t),JJo=r(eAe," \u2014 "),nq=n(eAe,"A",{href:!0});var Oat=s(nq);YJo=r(Oat,"TFAlbertForPreTraining"),Oat.forEach(t),KJo=r(eAe," (ALBERT model)"),eAe.forEach(t),ZJo=i(U),xT=n(U,"LI",{});var oAe=s(xT);nme=n(oAe,"STRONG",{});var Xat=s(nme);eYo=r(Xat,"bart"),Xat.forEach(t),oYo=r(oAe," \u2014 "),sq=n(oAe,"A",{href:!0});var Vat=s(sq);rYo=r(Vat,"TFBartForConditionalGeneration"),Vat.forEach(t),tYo=r(oAe," (BART model)"),oAe.forEach(t),aYo=i(U),kT=n(U,"LI",{});var rAe=s(kT);sme=n(rAe,"STRONG",{});var zat=s(sme);nYo=r(zat,"bert"),zat.forEach(t),sYo=r(rAe," \u2014 "),lq=n(rAe,"A",{href:!0});var Wat=s(lq);lYo=r(Wat,"TFBertForPreTraining"),Wat.forEach(t),iYo=r(rAe," (BERT model)"),rAe.forEach(t),dYo=i(U),RT=n(U,"LI",{});var tAe=s(RT);lme=n(tAe,"STRONG",{});var Qat=s(lme);cYo=r(Qat,"camembert"),Qat.forEach(t),fYo=r(tAe," \u2014 "),iq=n(tAe,"A",{href:!0});var Hat=s(iq);mYo=r(Hat,"TFCamembertForMaskedLM"),Hat.forEach(t),gYo=r(tAe," (CamemBERT model)"),tAe.forEach(t),hYo=i(U),ST=n(U,"LI",{});var aAe=s(ST);ime=n(aAe,"STRONG",{});var Uat=s(ime);pYo=r(Uat,"ctrl"),Uat.forEach(t),_Yo=r(aAe," \u2014 "),dq=n(aAe,"A",{href:!0});var Jat=s(dq);uYo=r(Jat,"TFCTRLLMHeadModel"),Jat.forEach(t),bYo=r(aAe," (CTRL model)"),aAe.forEach(t),vYo=i(U),PT=n(U,"LI",{});var nAe=s(PT);dme=n(nAe,"STRONG",{});var Yat=s(dme);TYo=r(Yat,"distilbert"),Yat.forEach(t),FYo=r(nAe," \u2014 "),cq=n(nAe,"A",{href:!0});var Kat=s(cq);CYo=r(Kat,"TFDistilBertForMaskedLM"),Kat.forEach(t),MYo=r(nAe," (DistilBERT model)"),nAe.forEach(t),EYo=i(U),$T=n(U,"LI",{});var sAe=s($T);cme=n(sAe,"STRONG",{});var Zat=s(cme);yYo=r(Zat,"electra"),Zat.forEach(t),wYo=r(sAe," \u2014 "),fq=n(sAe,"A",{href:!0});var ent=s(fq);AYo=r(ent,"TFElectraForPreTraining"),ent.forEach(t),LYo=r(sAe," (ELECTRA model)"),sAe.forEach(t),BYo=i(U),IT=n(U,"LI",{});var lAe=s(IT);fme=n(lAe,"STRONG",{});var ont=s(fme);xYo=r(ont,"flaubert"),ont.forEach(t),kYo=r(lAe," \u2014 "),mq=n(lAe,"A",{href:!0});var rnt=s(mq);RYo=r(rnt,"TFFlaubertWithLMHeadModel"),rnt.forEach(t),SYo=r(lAe," (FlauBERT model)"),lAe.forEach(t),PYo=i(U),DT=n(U,"LI",{});var iAe=s(DT);mme=n(iAe,"STRONG",{});var tnt=s(mme);$Yo=r(tnt,"funnel"),tnt.forEach(t),IYo=r(iAe," \u2014 "),gq=n(iAe,"A",{href:!0});var ant=s(gq);DYo=r(ant,"TFFunnelForPreTraining"),ant.forEach(t),jYo=r(iAe," (Funnel Transformer model)"),iAe.forEach(t),NYo=i(U),jT=n(U,"LI",{});var dAe=s(jT);gme=n(dAe,"STRONG",{});var nnt=s(gme);qYo=r(nnt,"gpt2"),nnt.forEach(t),GYo=r(dAe," \u2014 "),hq=n(dAe,"A",{href:!0});var snt=s(hq);OYo=r(snt,"TFGPT2LMHeadModel"),snt.forEach(t),XYo=r(dAe," (OpenAI GPT-2 model)"),dAe.forEach(t),VYo=i(U),NT=n(U,"LI",{});var cAe=s(NT);hme=n(cAe,"STRONG",{});var lnt=s(hme);zYo=r(lnt,"layoutlm"),lnt.forEach(t),WYo=r(cAe," \u2014 "),pq=n(cAe,"A",{href:!0});var int=s(pq);QYo=r(int,"TFLayoutLMForMaskedLM"),int.forEach(t),HYo=r(cAe," (LayoutLM model)"),cAe.forEach(t),UYo=i(U),qT=n(U,"LI",{});var fAe=s(qT);pme=n(fAe,"STRONG",{});var dnt=s(pme);JYo=r(dnt,"lxmert"),dnt.forEach(t),YYo=r(fAe," \u2014 "),_q=n(fAe,"A",{href:!0});var cnt=s(_q);KYo=r(cnt,"TFLxmertForPreTraining"),cnt.forEach(t),ZYo=r(fAe," (LXMERT model)"),fAe.forEach(t),eKo=i(U),GT=n(U,"LI",{});var mAe=s(GT);_me=n(mAe,"STRONG",{});var fnt=s(_me);oKo=r(fnt,"mobilebert"),fnt.forEach(t),rKo=r(mAe," \u2014 "),uq=n(mAe,"A",{href:!0});var mnt=s(uq);tKo=r(mnt,"TFMobileBertForPreTraining"),mnt.forEach(t),aKo=r(mAe," (MobileBERT model)"),mAe.forEach(t),nKo=i(U),OT=n(U,"LI",{});var gAe=s(OT);ume=n(gAe,"STRONG",{});var gnt=s(ume);sKo=r(gnt,"mpnet"),gnt.forEach(t),lKo=r(gAe," \u2014 "),bq=n(gAe,"A",{href:!0});var hnt=s(bq);iKo=r(hnt,"TFMPNetForMaskedLM"),hnt.forEach(t),dKo=r(gAe," (MPNet model)"),gAe.forEach(t),cKo=i(U),XT=n(U,"LI",{});var hAe=s(XT);bme=n(hAe,"STRONG",{});var pnt=s(bme);fKo=r(pnt,"openai-gpt"),pnt.forEach(t),mKo=r(hAe," \u2014 "),vq=n(hAe,"A",{href:!0});var _nt=s(vq);gKo=r(_nt,"TFOpenAIGPTLMHeadModel"),_nt.forEach(t),hKo=r(hAe," (OpenAI GPT model)"),hAe.forEach(t),pKo=i(U),VT=n(U,"LI",{});var pAe=s(VT);vme=n(pAe,"STRONG",{});var unt=s(vme);_Ko=r(unt,"roberta"),unt.forEach(t),uKo=r(pAe," \u2014 "),Tq=n(pAe,"A",{href:!0});var bnt=s(Tq);bKo=r(bnt,"TFRobertaForMaskedLM"),bnt.forEach(t),vKo=r(pAe," (RoBERTa model)"),pAe.forEach(t),TKo=i(U),zT=n(U,"LI",{});var _Ae=s(zT);Tme=n(_Ae,"STRONG",{});var vnt=s(Tme);FKo=r(vnt,"t5"),vnt.forEach(t),CKo=r(_Ae," \u2014 "),Fq=n(_Ae,"A",{href:!0});var Tnt=s(Fq);MKo=r(Tnt,"TFT5ForConditionalGeneration"),Tnt.forEach(t),EKo=r(_Ae," (T5 model)"),_Ae.forEach(t),yKo=i(U),WT=n(U,"LI",{});var uAe=s(WT);Fme=n(uAe,"STRONG",{});var Fnt=s(Fme);wKo=r(Fnt,"tapas"),Fnt.forEach(t),AKo=r(uAe," \u2014 "),Cq=n(uAe,"A",{href:!0});var Cnt=s(Cq);LKo=r(Cnt,"TFTapasForMaskedLM"),Cnt.forEach(t),BKo=r(uAe," (TAPAS model)"),uAe.forEach(t),xKo=i(U),QT=n(U,"LI",{});var bAe=s(QT);Cme=n(bAe,"STRONG",{});var Mnt=s(Cme);kKo=r(Mnt,"transfo-xl"),Mnt.forEach(t),RKo=r(bAe," \u2014 "),Mq=n(bAe,"A",{href:!0});var Ent=s(Mq);SKo=r(Ent,"TFTransfoXLLMHeadModel"),Ent.forEach(t),PKo=r(bAe," (Transformer-XL model)"),bAe.forEach(t),$Ko=i(U),HT=n(U,"LI",{});var vAe=s(HT);Mme=n(vAe,"STRONG",{});var ynt=s(Mme);IKo=r(ynt,"xlm"),ynt.forEach(t),DKo=r(vAe," \u2014 "),Eq=n(vAe,"A",{href:!0});var wnt=s(Eq);jKo=r(wnt,"TFXLMWithLMHeadModel"),wnt.forEach(t),NKo=r(vAe," (XLM model)"),vAe.forEach(t),qKo=i(U),UT=n(U,"LI",{});var TAe=s(UT);Eme=n(TAe,"STRONG",{});var Ant=s(Eme);GKo=r(Ant,"xlm-roberta"),Ant.forEach(t),OKo=r(TAe," \u2014 "),yq=n(TAe,"A",{href:!0});var Lnt=s(yq);XKo=r(Lnt,"TFXLMRobertaForMaskedLM"),Lnt.forEach(t),VKo=r(TAe," (XLM-RoBERTa model)"),TAe.forEach(t),zKo=i(U),JT=n(U,"LI",{});var FAe=s(JT);yme=n(FAe,"STRONG",{});var Bnt=s(yme);WKo=r(Bnt,"xlnet"),Bnt.forEach(t),QKo=r(FAe," \u2014 "),wq=n(FAe,"A",{href:!0});var xnt=s(wq);HKo=r(xnt,"TFXLNetLMHeadModel"),xnt.forEach(t),UKo=r(FAe," (XLNet model)"),FAe.forEach(t),U.forEach(t),JKo=i(fa),wme=n(fa,"P",{});var knt=s(wme);YKo=r(knt,"Examples:"),knt.forEach(t),KKo=i(fa),m(d6.$$.fragment,fa),fa.forEach(t),Sl.forEach(t),RBe=i(c),lc=n(c,"H2",{class:!0});var Gke=s(lc);YT=n(Gke,"A",{id:!0,class:!0,href:!0});var Rnt=s(YT);Ame=n(Rnt,"SPAN",{});var Snt=s(Ame);m(c6.$$.fragment,Snt),Snt.forEach(t),Rnt.forEach(t),ZKo=i(Gke),Lme=n(Gke,"SPAN",{});var Pnt=s(Lme);eZo=r(Pnt,"TFAutoModelForCausalLM"),Pnt.forEach(t),Gke.forEach(t),SBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(f6.$$.fragment,$l),oZo=i($l),ic=n($l,"P",{});var Lz=s(ic);rZo=r(Lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bme=n(Lz,"CODE",{});var $nt=s(Bme);tZo=r($nt,"from_pretrained()"),$nt.forEach(t),aZo=r(Lz,"class method or the "),xme=n(Lz,"CODE",{});var Int=s(xme);nZo=r(Int,"from_config()"),Int.forEach(t),sZo=r(Lz,`class
method.`),Lz.forEach(t),lZo=i($l),m6=n($l,"P",{});var Oke=s(m6);iZo=r(Oke,"This class cannot be instantiated directly using "),kme=n(Oke,"CODE",{});var Dnt=s(kme);dZo=r(Dnt,"__init__()"),Dnt.forEach(t),cZo=r(Oke," (throws an error)."),Oke.forEach(t),fZo=i($l),ct=n($l,"DIV",{class:!0});var Il=s(ct);m(g6.$$.fragment,Il),mZo=i(Il),Rme=n(Il,"P",{});var jnt=s(Rme);gZo=r(jnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jnt.forEach(t),hZo=i(Il),dc=n(Il,"P",{});var Bz=s(dc);pZo=r(Bz,`Note:
Loading a model from its configuration file does `),Sme=n(Bz,"STRONG",{});var Nnt=s(Sme);_Zo=r(Nnt,"not"),Nnt.forEach(t),uZo=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pme=n(Bz,"CODE",{});var qnt=s(Pme);bZo=r(qnt,"from_pretrained()"),qnt.forEach(t),vZo=r(Bz,"to load the model weights."),Bz.forEach(t),TZo=i(Il),$me=n(Il,"P",{});var Gnt=s($me);FZo=r(Gnt,"Examples:"),Gnt.forEach(t),CZo=i(Il),m(h6.$$.fragment,Il),Il.forEach(t),MZo=i($l),po=n($l,"DIV",{class:!0});var ma=s(po);m(p6.$$.fragment,ma),EZo=i(ma),Ime=n(ma,"P",{});var Ont=s(Ime);yZo=r(Ont,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ont.forEach(t),wZo=i(ma),mn=n(ma,"P",{});var KM=s(mn);AZo=r(KM,"The model class to instantiate is selected based on the "),Dme=n(KM,"CODE",{});var Xnt=s(Dme);LZo=r(Xnt,"model_type"),Xnt.forEach(t),BZo=r(KM,` property of the config object (either
passed as an argument or loaded from `),jme=n(KM,"CODE",{});var Vnt=s(jme);xZo=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),kZo=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(KM,"CODE",{});var znt=s(Nme);RZo=r(znt,"pretrained_model_name_or_path"),znt.forEach(t),SZo=r(KM,":"),KM.forEach(t),PZo=i(ma),he=n(ma,"UL",{});var Me=s(he);KT=n(Me,"LI",{});var CAe=s(KT);qme=n(CAe,"STRONG",{});var Wnt=s(qme);$Zo=r(Wnt,"bert"),Wnt.forEach(t),IZo=r(CAe," \u2014 "),Aq=n(CAe,"A",{href:!0});var Qnt=s(Aq);DZo=r(Qnt,"TFBertLMHeadModel"),Qnt.forEach(t),jZo=r(CAe," (BERT model)"),CAe.forEach(t),NZo=i(Me),ZT=n(Me,"LI",{});var MAe=s(ZT);Gme=n(MAe,"STRONG",{});var Hnt=s(Gme);qZo=r(Hnt,"ctrl"),Hnt.forEach(t),GZo=r(MAe," \u2014 "),Lq=n(MAe,"A",{href:!0});var Unt=s(Lq);OZo=r(Unt,"TFCTRLLMHeadModel"),Unt.forEach(t),XZo=r(MAe," (CTRL model)"),MAe.forEach(t),VZo=i(Me),eF=n(Me,"LI",{});var EAe=s(eF);Ome=n(EAe,"STRONG",{});var Jnt=s(Ome);zZo=r(Jnt,"gpt2"),Jnt.forEach(t),WZo=r(EAe," \u2014 "),Bq=n(EAe,"A",{href:!0});var Ynt=s(Bq);QZo=r(Ynt,"TFGPT2LMHeadModel"),Ynt.forEach(t),HZo=r(EAe," (OpenAI GPT-2 model)"),EAe.forEach(t),UZo=i(Me),oF=n(Me,"LI",{});var yAe=s(oF);Xme=n(yAe,"STRONG",{});var Knt=s(Xme);JZo=r(Knt,"openai-gpt"),Knt.forEach(t),YZo=r(yAe," \u2014 "),xq=n(yAe,"A",{href:!0});var Znt=s(xq);KZo=r(Znt,"TFOpenAIGPTLMHeadModel"),Znt.forEach(t),ZZo=r(yAe," (OpenAI GPT model)"),yAe.forEach(t),eer=i(Me),rF=n(Me,"LI",{});var wAe=s(rF);Vme=n(wAe,"STRONG",{});var est=s(Vme);oer=r(est,"rembert"),est.forEach(t),rer=r(wAe," \u2014 "),kq=n(wAe,"A",{href:!0});var ost=s(kq);ter=r(ost,"TFRemBertForCausalLM"),ost.forEach(t),aer=r(wAe," (RemBERT model)"),wAe.forEach(t),ner=i(Me),tF=n(Me,"LI",{});var AAe=s(tF);zme=n(AAe,"STRONG",{});var rst=s(zme);ser=r(rst,"roberta"),rst.forEach(t),ler=r(AAe," \u2014 "),Rq=n(AAe,"A",{href:!0});var tst=s(Rq);ier=r(tst,"TFRobertaForCausalLM"),tst.forEach(t),der=r(AAe," (RoBERTa model)"),AAe.forEach(t),cer=i(Me),aF=n(Me,"LI",{});var LAe=s(aF);Wme=n(LAe,"STRONG",{});var ast=s(Wme);fer=r(ast,"roformer"),ast.forEach(t),mer=r(LAe," \u2014 "),Sq=n(LAe,"A",{href:!0});var nst=s(Sq);ger=r(nst,"TFRoFormerForCausalLM"),nst.forEach(t),her=r(LAe," (RoFormer model)"),LAe.forEach(t),per=i(Me),nF=n(Me,"LI",{});var BAe=s(nF);Qme=n(BAe,"STRONG",{});var sst=s(Qme);_er=r(sst,"transfo-xl"),sst.forEach(t),uer=r(BAe," \u2014 "),Pq=n(BAe,"A",{href:!0});var lst=s(Pq);ber=r(lst,"TFTransfoXLLMHeadModel"),lst.forEach(t),ver=r(BAe," (Transformer-XL model)"),BAe.forEach(t),Ter=i(Me),sF=n(Me,"LI",{});var xAe=s(sF);Hme=n(xAe,"STRONG",{});var ist=s(Hme);Fer=r(ist,"xlm"),ist.forEach(t),Cer=r(xAe," \u2014 "),$q=n(xAe,"A",{href:!0});var dst=s($q);Mer=r(dst,"TFXLMWithLMHeadModel"),dst.forEach(t),Eer=r(xAe," (XLM model)"),xAe.forEach(t),yer=i(Me),lF=n(Me,"LI",{});var kAe=s(lF);Ume=n(kAe,"STRONG",{});var cst=s(Ume);wer=r(cst,"xlnet"),cst.forEach(t),Aer=r(kAe," \u2014 "),Iq=n(kAe,"A",{href:!0});var fst=s(Iq);Ler=r(fst,"TFXLNetLMHeadModel"),fst.forEach(t),Ber=r(kAe," (XLNet model)"),kAe.forEach(t),Me.forEach(t),xer=i(ma),Jme=n(ma,"P",{});var mst=s(Jme);ker=r(mst,"Examples:"),mst.forEach(t),Rer=i(ma),m(_6.$$.fragment,ma),ma.forEach(t),$l.forEach(t),PBe=i(c),cc=n(c,"H2",{class:!0});var Xke=s(cc);iF=n(Xke,"A",{id:!0,class:!0,href:!0});var gst=s(iF);Yme=n(gst,"SPAN",{});var hst=s(Yme);m(u6.$$.fragment,hst),hst.forEach(t),gst.forEach(t),Ser=i(Xke),Kme=n(Xke,"SPAN",{});var pst=s(Kme);Per=r(pst,"TFAutoModelForImageClassification"),pst.forEach(t),Xke.forEach(t),$Be=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(b6.$$.fragment,Dl),$er=i(Dl),fc=n(Dl,"P",{});var xz=s(fc);Ier=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Zme=n(xz,"CODE",{});var _st=s(Zme);Der=r(_st,"from_pretrained()"),_st.forEach(t),jer=r(xz,"class method or the "),ege=n(xz,"CODE",{});var ust=s(ege);Ner=r(ust,"from_config()"),ust.forEach(t),qer=r(xz,`class
method.`),xz.forEach(t),Ger=i(Dl),v6=n(Dl,"P",{});var Vke=s(v6);Oer=r(Vke,"This class cannot be instantiated directly using "),oge=n(Vke,"CODE",{});var bst=s(oge);Xer=r(bst,"__init__()"),bst.forEach(t),Ver=r(Vke," (throws an error)."),Vke.forEach(t),zer=i(Dl),ft=n(Dl,"DIV",{class:!0});var jl=s(ft);m(T6.$$.fragment,jl),Wer=i(jl),rge=n(jl,"P",{});var vst=s(rge);Qer=r(vst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vst.forEach(t),Her=i(jl),mc=n(jl,"P",{});var kz=s(mc);Uer=r(kz,`Note:
Loading a model from its configuration file does `),tge=n(kz,"STRONG",{});var Tst=s(tge);Jer=r(Tst,"not"),Tst.forEach(t),Yer=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),age=n(kz,"CODE",{});var Fst=s(age);Ker=r(Fst,"from_pretrained()"),Fst.forEach(t),Zer=r(kz,"to load the model weights."),kz.forEach(t),eor=i(jl),nge=n(jl,"P",{});var Cst=s(nge);oor=r(Cst,"Examples:"),Cst.forEach(t),ror=i(jl),m(F6.$$.fragment,jl),jl.forEach(t),tor=i(Dl),_o=n(Dl,"DIV",{class:!0});var ga=s(_o);m(C6.$$.fragment,ga),aor=i(ga),sge=n(ga,"P",{});var Mst=s(sge);nor=r(Mst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mst.forEach(t),sor=i(ga),gn=n(ga,"P",{});var ZM=s(gn);lor=r(ZM,"The model class to instantiate is selected based on the "),lge=n(ZM,"CODE",{});var Est=s(lge);ior=r(Est,"model_type"),Est.forEach(t),dor=r(ZM,` property of the config object (either
passed as an argument or loaded from `),ige=n(ZM,"CODE",{});var yst=s(ige);cor=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),mor=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dge=n(ZM,"CODE",{});var wst=s(dge);gor=r(wst,"pretrained_model_name_or_path"),wst.forEach(t),hor=r(ZM,":"),ZM.forEach(t),por=i(ga),M6=n(ga,"UL",{});var zke=s(M6);dF=n(zke,"LI",{});var RAe=s(dF);cge=n(RAe,"STRONG",{});var Ast=s(cge);_or=r(Ast,"convnext"),Ast.forEach(t),uor=r(RAe," \u2014 "),Dq=n(RAe,"A",{href:!0});var Lst=s(Dq);bor=r(Lst,"TFConvNextForImageClassification"),Lst.forEach(t),vor=r(RAe," (ConvNext model)"),RAe.forEach(t),Tor=i(zke),cF=n(zke,"LI",{});var SAe=s(cF);fge=n(SAe,"STRONG",{});var Bst=s(fge);For=r(Bst,"vit"),Bst.forEach(t),Cor=r(SAe," \u2014 "),jq=n(SAe,"A",{href:!0});var xst=s(jq);Mor=r(xst,"TFViTForImageClassification"),xst.forEach(t),Eor=r(SAe," (ViT model)"),SAe.forEach(t),zke.forEach(t),yor=i(ga),mge=n(ga,"P",{});var kst=s(mge);wor=r(kst,"Examples:"),kst.forEach(t),Aor=i(ga),m(E6.$$.fragment,ga),ga.forEach(t),Dl.forEach(t),IBe=i(c),gc=n(c,"H2",{class:!0});var Wke=s(gc);fF=n(Wke,"A",{id:!0,class:!0,href:!0});var Rst=s(fF);gge=n(Rst,"SPAN",{});var Sst=s(gge);m(y6.$$.fragment,Sst),Sst.forEach(t),Rst.forEach(t),Lor=i(Wke),hge=n(Wke,"SPAN",{});var Pst=s(hge);Bor=r(Pst,"TFAutoModelForMaskedLM"),Pst.forEach(t),Wke.forEach(t),DBe=i(c),vr=n(c,"DIV",{class:!0});var Nl=s(vr);m(w6.$$.fragment,Nl),xor=i(Nl),hc=n(Nl,"P",{});var Rz=s(hc);kor=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pge=n(Rz,"CODE",{});var $st=s(pge);Ror=r($st,"from_pretrained()"),$st.forEach(t),Sor=r(Rz,"class method or the "),_ge=n(Rz,"CODE",{});var Ist=s(_ge);Por=r(Ist,"from_config()"),Ist.forEach(t),$or=r(Rz,`class
method.`),Rz.forEach(t),Ior=i(Nl),A6=n(Nl,"P",{});var Qke=s(A6);Dor=r(Qke,"This class cannot be instantiated directly using "),uge=n(Qke,"CODE",{});var Dst=s(uge);jor=r(Dst,"__init__()"),Dst.forEach(t),Nor=r(Qke," (throws an error)."),Qke.forEach(t),qor=i(Nl),mt=n(Nl,"DIV",{class:!0});var ql=s(mt);m(L6.$$.fragment,ql),Gor=i(ql),bge=n(ql,"P",{});var jst=s(bge);Oor=r(jst,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jst.forEach(t),Xor=i(ql),pc=n(ql,"P",{});var Sz=s(pc);Vor=r(Sz,`Note:
Loading a model from its configuration file does `),vge=n(Sz,"STRONG",{});var Nst=s(vge);zor=r(Nst,"not"),Nst.forEach(t),Wor=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tge=n(Sz,"CODE",{});var qst=s(Tge);Qor=r(qst,"from_pretrained()"),qst.forEach(t),Hor=r(Sz,"to load the model weights."),Sz.forEach(t),Uor=i(ql),Fge=n(ql,"P",{});var Gst=s(Fge);Jor=r(Gst,"Examples:"),Gst.forEach(t),Yor=i(ql),m(B6.$$.fragment,ql),ql.forEach(t),Kor=i(Nl),uo=n(Nl,"DIV",{class:!0});var ha=s(uo);m(x6.$$.fragment,ha),Zor=i(ha),Cge=n(ha,"P",{});var Ost=s(Cge);err=r(Ost,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ost.forEach(t),orr=i(ha),hn=n(ha,"P",{});var eE=s(hn);rrr=r(eE,"The model class to instantiate is selected based on the "),Mge=n(eE,"CODE",{});var Xst=s(Mge);trr=r(Xst,"model_type"),Xst.forEach(t),arr=r(eE,` property of the config object (either
passed as an argument or loaded from `),Ege=n(eE,"CODE",{});var Vst=s(Ege);nrr=r(Vst,"pretrained_model_name_or_path"),Vst.forEach(t),srr=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(eE,"CODE",{});var zst=s(yge);lrr=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),irr=r(eE,":"),eE.forEach(t),drr=i(ha),Y=n(ha,"UL",{});var ee=s(Y);mF=n(ee,"LI",{});var PAe=s(mF);wge=n(PAe,"STRONG",{});var Wst=s(wge);crr=r(Wst,"albert"),Wst.forEach(t),frr=r(PAe," \u2014 "),Nq=n(PAe,"A",{href:!0});var Qst=s(Nq);mrr=r(Qst,"TFAlbertForMaskedLM"),Qst.forEach(t),grr=r(PAe," (ALBERT model)"),PAe.forEach(t),hrr=i(ee),gF=n(ee,"LI",{});var $Ae=s(gF);Age=n($Ae,"STRONG",{});var Hst=s(Age);prr=r(Hst,"bert"),Hst.forEach(t),_rr=r($Ae," \u2014 "),qq=n($Ae,"A",{href:!0});var Ust=s(qq);urr=r(Ust,"TFBertForMaskedLM"),Ust.forEach(t),brr=r($Ae," (BERT model)"),$Ae.forEach(t),vrr=i(ee),hF=n(ee,"LI",{});var IAe=s(hF);Lge=n(IAe,"STRONG",{});var Jst=s(Lge);Trr=r(Jst,"camembert"),Jst.forEach(t),Frr=r(IAe," \u2014 "),Gq=n(IAe,"A",{href:!0});var Yst=s(Gq);Crr=r(Yst,"TFCamembertForMaskedLM"),Yst.forEach(t),Mrr=r(IAe," (CamemBERT model)"),IAe.forEach(t),Err=i(ee),pF=n(ee,"LI",{});var DAe=s(pF);Bge=n(DAe,"STRONG",{});var Kst=s(Bge);yrr=r(Kst,"convbert"),Kst.forEach(t),wrr=r(DAe," \u2014 "),Oq=n(DAe,"A",{href:!0});var Zst=s(Oq);Arr=r(Zst,"TFConvBertForMaskedLM"),Zst.forEach(t),Lrr=r(DAe," (ConvBERT model)"),DAe.forEach(t),Brr=i(ee),_F=n(ee,"LI",{});var jAe=s(_F);xge=n(jAe,"STRONG",{});var elt=s(xge);xrr=r(elt,"deberta"),elt.forEach(t),krr=r(jAe," \u2014 "),Xq=n(jAe,"A",{href:!0});var olt=s(Xq);Rrr=r(olt,"TFDebertaForMaskedLM"),olt.forEach(t),Srr=r(jAe," (DeBERTa model)"),jAe.forEach(t),Prr=i(ee),uF=n(ee,"LI",{});var NAe=s(uF);kge=n(NAe,"STRONG",{});var rlt=s(kge);$rr=r(rlt,"deberta-v2"),rlt.forEach(t),Irr=r(NAe," \u2014 "),Vq=n(NAe,"A",{href:!0});var tlt=s(Vq);Drr=r(tlt,"TFDebertaV2ForMaskedLM"),tlt.forEach(t),jrr=r(NAe," (DeBERTa-v2 model)"),NAe.forEach(t),Nrr=i(ee),bF=n(ee,"LI",{});var qAe=s(bF);Rge=n(qAe,"STRONG",{});var alt=s(Rge);qrr=r(alt,"distilbert"),alt.forEach(t),Grr=r(qAe," \u2014 "),zq=n(qAe,"A",{href:!0});var nlt=s(zq);Orr=r(nlt,"TFDistilBertForMaskedLM"),nlt.forEach(t),Xrr=r(qAe," (DistilBERT model)"),qAe.forEach(t),Vrr=i(ee),vF=n(ee,"LI",{});var GAe=s(vF);Sge=n(GAe,"STRONG",{});var slt=s(Sge);zrr=r(slt,"electra"),slt.forEach(t),Wrr=r(GAe," \u2014 "),Wq=n(GAe,"A",{href:!0});var llt=s(Wq);Qrr=r(llt,"TFElectraForMaskedLM"),llt.forEach(t),Hrr=r(GAe," (ELECTRA model)"),GAe.forEach(t),Urr=i(ee),TF=n(ee,"LI",{});var OAe=s(TF);Pge=n(OAe,"STRONG",{});var ilt=s(Pge);Jrr=r(ilt,"flaubert"),ilt.forEach(t),Yrr=r(OAe," \u2014 "),Qq=n(OAe,"A",{href:!0});var dlt=s(Qq);Krr=r(dlt,"TFFlaubertWithLMHeadModel"),dlt.forEach(t),Zrr=r(OAe," (FlauBERT model)"),OAe.forEach(t),etr=i(ee),FF=n(ee,"LI",{});var XAe=s(FF);$ge=n(XAe,"STRONG",{});var clt=s($ge);otr=r(clt,"funnel"),clt.forEach(t),rtr=r(XAe," \u2014 "),Hq=n(XAe,"A",{href:!0});var flt=s(Hq);ttr=r(flt,"TFFunnelForMaskedLM"),flt.forEach(t),atr=r(XAe," (Funnel Transformer model)"),XAe.forEach(t),ntr=i(ee),CF=n(ee,"LI",{});var VAe=s(CF);Ige=n(VAe,"STRONG",{});var mlt=s(Ige);str=r(mlt,"layoutlm"),mlt.forEach(t),ltr=r(VAe," \u2014 "),Uq=n(VAe,"A",{href:!0});var glt=s(Uq);itr=r(glt,"TFLayoutLMForMaskedLM"),glt.forEach(t),dtr=r(VAe," (LayoutLM model)"),VAe.forEach(t),ctr=i(ee),MF=n(ee,"LI",{});var zAe=s(MF);Dge=n(zAe,"STRONG",{});var hlt=s(Dge);ftr=r(hlt,"longformer"),hlt.forEach(t),mtr=r(zAe," \u2014 "),Jq=n(zAe,"A",{href:!0});var plt=s(Jq);gtr=r(plt,"TFLongformerForMaskedLM"),plt.forEach(t),htr=r(zAe," (Longformer model)"),zAe.forEach(t),ptr=i(ee),EF=n(ee,"LI",{});var WAe=s(EF);jge=n(WAe,"STRONG",{});var _lt=s(jge);_tr=r(_lt,"mobilebert"),_lt.forEach(t),utr=r(WAe," \u2014 "),Yq=n(WAe,"A",{href:!0});var ult=s(Yq);btr=r(ult,"TFMobileBertForMaskedLM"),ult.forEach(t),vtr=r(WAe," (MobileBERT model)"),WAe.forEach(t),Ttr=i(ee),yF=n(ee,"LI",{});var QAe=s(yF);Nge=n(QAe,"STRONG",{});var blt=s(Nge);Ftr=r(blt,"mpnet"),blt.forEach(t),Ctr=r(QAe," \u2014 "),Kq=n(QAe,"A",{href:!0});var vlt=s(Kq);Mtr=r(vlt,"TFMPNetForMaskedLM"),vlt.forEach(t),Etr=r(QAe," (MPNet model)"),QAe.forEach(t),ytr=i(ee),wF=n(ee,"LI",{});var HAe=s(wF);qge=n(HAe,"STRONG",{});var Tlt=s(qge);wtr=r(Tlt,"rembert"),Tlt.forEach(t),Atr=r(HAe," \u2014 "),Zq=n(HAe,"A",{href:!0});var Flt=s(Zq);Ltr=r(Flt,"TFRemBertForMaskedLM"),Flt.forEach(t),Btr=r(HAe," (RemBERT model)"),HAe.forEach(t),xtr=i(ee),AF=n(ee,"LI",{});var UAe=s(AF);Gge=n(UAe,"STRONG",{});var Clt=s(Gge);ktr=r(Clt,"roberta"),Clt.forEach(t),Rtr=r(UAe," \u2014 "),eG=n(UAe,"A",{href:!0});var Mlt=s(eG);Str=r(Mlt,"TFRobertaForMaskedLM"),Mlt.forEach(t),Ptr=r(UAe," (RoBERTa model)"),UAe.forEach(t),$tr=i(ee),LF=n(ee,"LI",{});var JAe=s(LF);Oge=n(JAe,"STRONG",{});var Elt=s(Oge);Itr=r(Elt,"roformer"),Elt.forEach(t),Dtr=r(JAe," \u2014 "),oG=n(JAe,"A",{href:!0});var ylt=s(oG);jtr=r(ylt,"TFRoFormerForMaskedLM"),ylt.forEach(t),Ntr=r(JAe," (RoFormer model)"),JAe.forEach(t),qtr=i(ee),BF=n(ee,"LI",{});var YAe=s(BF);Xge=n(YAe,"STRONG",{});var wlt=s(Xge);Gtr=r(wlt,"tapas"),wlt.forEach(t),Otr=r(YAe," \u2014 "),rG=n(YAe,"A",{href:!0});var Alt=s(rG);Xtr=r(Alt,"TFTapasForMaskedLM"),Alt.forEach(t),Vtr=r(YAe," (TAPAS model)"),YAe.forEach(t),ztr=i(ee),xF=n(ee,"LI",{});var KAe=s(xF);Vge=n(KAe,"STRONG",{});var Llt=s(Vge);Wtr=r(Llt,"xlm"),Llt.forEach(t),Qtr=r(KAe," \u2014 "),tG=n(KAe,"A",{href:!0});var Blt=s(tG);Htr=r(Blt,"TFXLMWithLMHeadModel"),Blt.forEach(t),Utr=r(KAe," (XLM model)"),KAe.forEach(t),Jtr=i(ee),kF=n(ee,"LI",{});var ZAe=s(kF);zge=n(ZAe,"STRONG",{});var xlt=s(zge);Ytr=r(xlt,"xlm-roberta"),xlt.forEach(t),Ktr=r(ZAe," \u2014 "),aG=n(ZAe,"A",{href:!0});var klt=s(aG);Ztr=r(klt,"TFXLMRobertaForMaskedLM"),klt.forEach(t),ear=r(ZAe," (XLM-RoBERTa model)"),ZAe.forEach(t),ee.forEach(t),oar=i(ha),Wge=n(ha,"P",{});var Rlt=s(Wge);rar=r(Rlt,"Examples:"),Rlt.forEach(t),tar=i(ha),m(k6.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),jBe=i(c),_c=n(c,"H2",{class:!0});var Hke=s(_c);RF=n(Hke,"A",{id:!0,class:!0,href:!0});var Slt=s(RF);Qge=n(Slt,"SPAN",{});var Plt=s(Qge);m(R6.$$.fragment,Plt),Plt.forEach(t),Slt.forEach(t),aar=i(Hke),Hge=n(Hke,"SPAN",{});var $lt=s(Hge);nar=r($lt,"TFAutoModelForSeq2SeqLM"),$lt.forEach(t),Hke.forEach(t),NBe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(S6.$$.fragment,Gl),sar=i(Gl),uc=n(Gl,"P",{});var Pz=s(uc);lar=r(Pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Uge=n(Pz,"CODE",{});var Ilt=s(Uge);iar=r(Ilt,"from_pretrained()"),Ilt.forEach(t),dar=r(Pz,"class method or the "),Jge=n(Pz,"CODE",{});var Dlt=s(Jge);car=r(Dlt,"from_config()"),Dlt.forEach(t),far=r(Pz,`class
method.`),Pz.forEach(t),mar=i(Gl),P6=n(Gl,"P",{});var Uke=s(P6);gar=r(Uke,"This class cannot be instantiated directly using "),Yge=n(Uke,"CODE",{});var jlt=s(Yge);har=r(jlt,"__init__()"),jlt.forEach(t),par=r(Uke," (throws an error)."),Uke.forEach(t),_ar=i(Gl),gt=n(Gl,"DIV",{class:!0});var Ol=s(gt);m($6.$$.fragment,Ol),uar=i(Ol),Kge=n(Ol,"P",{});var Nlt=s(Kge);bar=r(Nlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nlt.forEach(t),Tar=i(Ol),bc=n(Ol,"P",{});var $z=s(bc);Far=r($z,`Note:
Loading a model from its configuration file does `),Zge=n($z,"STRONG",{});var qlt=s(Zge);Car=r(qlt,"not"),qlt.forEach(t),Mar=r($z,` load the model weights. It only affects the
model\u2019s configuration. Use `),ehe=n($z,"CODE",{});var Glt=s(ehe);Ear=r(Glt,"from_pretrained()"),Glt.forEach(t),yar=r($z,"to load the model weights."),$z.forEach(t),war=i(Ol),ohe=n(Ol,"P",{});var Olt=s(ohe);Aar=r(Olt,"Examples:"),Olt.forEach(t),Lar=i(Ol),m(I6.$$.fragment,Ol),Ol.forEach(t),Bar=i(Gl),bo=n(Gl,"DIV",{class:!0});var pa=s(bo);m(D6.$$.fragment,pa),xar=i(pa),rhe=n(pa,"P",{});var Xlt=s(rhe);kar=r(Xlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xlt.forEach(t),Rar=i(pa),pn=n(pa,"P",{});var oE=s(pn);Sar=r(oE,"The model class to instantiate is selected based on the "),the=n(oE,"CODE",{});var Vlt=s(the);Par=r(Vlt,"model_type"),Vlt.forEach(t),$ar=r(oE,` property of the config object (either
passed as an argument or loaded from `),ahe=n(oE,"CODE",{});var zlt=s(ahe);Iar=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),Dar=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(oE,"CODE",{});var Wlt=s(nhe);jar=r(Wlt,"pretrained_model_name_or_path"),Wlt.forEach(t),Nar=r(oE,":"),oE.forEach(t),qar=i(pa),pe=n(pa,"UL",{});var Ee=s(pe);SF=n(Ee,"LI",{});var e0e=s(SF);she=n(e0e,"STRONG",{});var Qlt=s(she);Gar=r(Qlt,"bart"),Qlt.forEach(t),Oar=r(e0e," \u2014 "),nG=n(e0e,"A",{href:!0});var Hlt=s(nG);Xar=r(Hlt,"TFBartForConditionalGeneration"),Hlt.forEach(t),Var=r(e0e," (BART model)"),e0e.forEach(t),zar=i(Ee),PF=n(Ee,"LI",{});var o0e=s(PF);lhe=n(o0e,"STRONG",{});var Ult=s(lhe);War=r(Ult,"blenderbot"),Ult.forEach(t),Qar=r(o0e," \u2014 "),sG=n(o0e,"A",{href:!0});var Jlt=s(sG);Har=r(Jlt,"TFBlenderbotForConditionalGeneration"),Jlt.forEach(t),Uar=r(o0e," (Blenderbot model)"),o0e.forEach(t),Jar=i(Ee),$F=n(Ee,"LI",{});var r0e=s($F);ihe=n(r0e,"STRONG",{});var Ylt=s(ihe);Yar=r(Ylt,"blenderbot-small"),Ylt.forEach(t),Kar=r(r0e," \u2014 "),lG=n(r0e,"A",{href:!0});var Klt=s(lG);Zar=r(Klt,"TFBlenderbotSmallForConditionalGeneration"),Klt.forEach(t),enr=r(r0e," (BlenderbotSmall model)"),r0e.forEach(t),onr=i(Ee),IF=n(Ee,"LI",{});var t0e=s(IF);dhe=n(t0e,"STRONG",{});var Zlt=s(dhe);rnr=r(Zlt,"encoder-decoder"),Zlt.forEach(t),tnr=r(t0e," \u2014 "),iG=n(t0e,"A",{href:!0});var eit=s(iG);anr=r(eit,"TFEncoderDecoderModel"),eit.forEach(t),nnr=r(t0e," (Encoder decoder model)"),t0e.forEach(t),snr=i(Ee),DF=n(Ee,"LI",{});var a0e=s(DF);che=n(a0e,"STRONG",{});var oit=s(che);lnr=r(oit,"led"),oit.forEach(t),inr=r(a0e," \u2014 "),dG=n(a0e,"A",{href:!0});var rit=s(dG);dnr=r(rit,"TFLEDForConditionalGeneration"),rit.forEach(t),cnr=r(a0e," (LED model)"),a0e.forEach(t),fnr=i(Ee),jF=n(Ee,"LI",{});var n0e=s(jF);fhe=n(n0e,"STRONG",{});var tit=s(fhe);mnr=r(tit,"marian"),tit.forEach(t),gnr=r(n0e," \u2014 "),cG=n(n0e,"A",{href:!0});var ait=s(cG);hnr=r(ait,"TFMarianMTModel"),ait.forEach(t),pnr=r(n0e," (Marian model)"),n0e.forEach(t),_nr=i(Ee),NF=n(Ee,"LI",{});var s0e=s(NF);mhe=n(s0e,"STRONG",{});var nit=s(mhe);unr=r(nit,"mbart"),nit.forEach(t),bnr=r(s0e," \u2014 "),fG=n(s0e,"A",{href:!0});var sit=s(fG);vnr=r(sit,"TFMBartForConditionalGeneration"),sit.forEach(t),Tnr=r(s0e," (mBART model)"),s0e.forEach(t),Fnr=i(Ee),qF=n(Ee,"LI",{});var l0e=s(qF);ghe=n(l0e,"STRONG",{});var lit=s(ghe);Cnr=r(lit,"mt5"),lit.forEach(t),Mnr=r(l0e," \u2014 "),mG=n(l0e,"A",{href:!0});var iit=s(mG);Enr=r(iit,"TFMT5ForConditionalGeneration"),iit.forEach(t),ynr=r(l0e," (mT5 model)"),l0e.forEach(t),wnr=i(Ee),GF=n(Ee,"LI",{});var i0e=s(GF);hhe=n(i0e,"STRONG",{});var dit=s(hhe);Anr=r(dit,"pegasus"),dit.forEach(t),Lnr=r(i0e," \u2014 "),gG=n(i0e,"A",{href:!0});var cit=s(gG);Bnr=r(cit,"TFPegasusForConditionalGeneration"),cit.forEach(t),xnr=r(i0e," (Pegasus model)"),i0e.forEach(t),knr=i(Ee),OF=n(Ee,"LI",{});var d0e=s(OF);phe=n(d0e,"STRONG",{});var fit=s(phe);Rnr=r(fit,"t5"),fit.forEach(t),Snr=r(d0e," \u2014 "),hG=n(d0e,"A",{href:!0});var mit=s(hG);Pnr=r(mit,"TFT5ForConditionalGeneration"),mit.forEach(t),$nr=r(d0e," (T5 model)"),d0e.forEach(t),Ee.forEach(t),Inr=i(pa),_he=n(pa,"P",{});var git=s(_he);Dnr=r(git,"Examples:"),git.forEach(t),jnr=i(pa),m(j6.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),qBe=i(c),vc=n(c,"H2",{class:!0});var Jke=s(vc);XF=n(Jke,"A",{id:!0,class:!0,href:!0});var hit=s(XF);uhe=n(hit,"SPAN",{});var pit=s(uhe);m(N6.$$.fragment,pit),pit.forEach(t),hit.forEach(t),Nnr=i(Jke),bhe=n(Jke,"SPAN",{});var _it=s(bhe);qnr=r(_it,"TFAutoModelForSequenceClassification"),_it.forEach(t),Jke.forEach(t),GBe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(q6.$$.fragment,Xl),Gnr=i(Xl),Tc=n(Xl,"P",{});var Iz=s(Tc);Onr=r(Iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vhe=n(Iz,"CODE",{});var uit=s(vhe);Xnr=r(uit,"from_pretrained()"),uit.forEach(t),Vnr=r(Iz,"class method or the "),The=n(Iz,"CODE",{});var bit=s(The);znr=r(bit,"from_config()"),bit.forEach(t),Wnr=r(Iz,`class
method.`),Iz.forEach(t),Qnr=i(Xl),G6=n(Xl,"P",{});var Yke=s(G6);Hnr=r(Yke,"This class cannot be instantiated directly using "),Fhe=n(Yke,"CODE",{});var vit=s(Fhe);Unr=r(vit,"__init__()"),vit.forEach(t),Jnr=r(Yke," (throws an error)."),Yke.forEach(t),Ynr=i(Xl),ht=n(Xl,"DIV",{class:!0});var Vl=s(ht);m(O6.$$.fragment,Vl),Knr=i(Vl),Che=n(Vl,"P",{});var Tit=s(Che);Znr=r(Tit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Tit.forEach(t),esr=i(Vl),Fc=n(Vl,"P",{});var Dz=s(Fc);osr=r(Dz,`Note:
Loading a model from its configuration file does `),Mhe=n(Dz,"STRONG",{});var Fit=s(Mhe);rsr=r(Fit,"not"),Fit.forEach(t),tsr=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ehe=n(Dz,"CODE",{});var Cit=s(Ehe);asr=r(Cit,"from_pretrained()"),Cit.forEach(t),nsr=r(Dz,"to load the model weights."),Dz.forEach(t),ssr=i(Vl),yhe=n(Vl,"P",{});var Mit=s(yhe);lsr=r(Mit,"Examples:"),Mit.forEach(t),isr=i(Vl),m(X6.$$.fragment,Vl),Vl.forEach(t),dsr=i(Xl),vo=n(Xl,"DIV",{class:!0});var _a=s(vo);m(V6.$$.fragment,_a),csr=i(_a),whe=n(_a,"P",{});var Eit=s(whe);fsr=r(Eit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Eit.forEach(t),msr=i(_a),_n=n(_a,"P",{});var rE=s(_n);gsr=r(rE,"The model class to instantiate is selected based on the "),Ahe=n(rE,"CODE",{});var yit=s(Ahe);hsr=r(yit,"model_type"),yit.forEach(t),psr=r(rE,` property of the config object (either
passed as an argument or loaded from `),Lhe=n(rE,"CODE",{});var wit=s(Lhe);_sr=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),usr=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(rE,"CODE",{});var Ait=s(Bhe);bsr=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),vsr=r(rE,":"),rE.forEach(t),Tsr=i(_a),X=n(_a,"UL",{});var W=s(X);VF=n(W,"LI",{});var c0e=s(VF);xhe=n(c0e,"STRONG",{});var Lit=s(xhe);Fsr=r(Lit,"albert"),Lit.forEach(t),Csr=r(c0e," \u2014 "),pG=n(c0e,"A",{href:!0});var Bit=s(pG);Msr=r(Bit,"TFAlbertForSequenceClassification"),Bit.forEach(t),Esr=r(c0e," (ALBERT model)"),c0e.forEach(t),ysr=i(W),zF=n(W,"LI",{});var f0e=s(zF);khe=n(f0e,"STRONG",{});var xit=s(khe);wsr=r(xit,"bert"),xit.forEach(t),Asr=r(f0e," \u2014 "),_G=n(f0e,"A",{href:!0});var kit=s(_G);Lsr=r(kit,"TFBertForSequenceClassification"),kit.forEach(t),Bsr=r(f0e," (BERT model)"),f0e.forEach(t),xsr=i(W),WF=n(W,"LI",{});var m0e=s(WF);Rhe=n(m0e,"STRONG",{});var Rit=s(Rhe);ksr=r(Rit,"camembert"),Rit.forEach(t),Rsr=r(m0e," \u2014 "),uG=n(m0e,"A",{href:!0});var Sit=s(uG);Ssr=r(Sit,"TFCamembertForSequenceClassification"),Sit.forEach(t),Psr=r(m0e," (CamemBERT model)"),m0e.forEach(t),$sr=i(W),QF=n(W,"LI",{});var g0e=s(QF);She=n(g0e,"STRONG",{});var Pit=s(She);Isr=r(Pit,"convbert"),Pit.forEach(t),Dsr=r(g0e," \u2014 "),bG=n(g0e,"A",{href:!0});var $it=s(bG);jsr=r($it,"TFConvBertForSequenceClassification"),$it.forEach(t),Nsr=r(g0e," (ConvBERT model)"),g0e.forEach(t),qsr=i(W),HF=n(W,"LI",{});var h0e=s(HF);Phe=n(h0e,"STRONG",{});var Iit=s(Phe);Gsr=r(Iit,"ctrl"),Iit.forEach(t),Osr=r(h0e," \u2014 "),vG=n(h0e,"A",{href:!0});var Dit=s(vG);Xsr=r(Dit,"TFCTRLForSequenceClassification"),Dit.forEach(t),Vsr=r(h0e," (CTRL model)"),h0e.forEach(t),zsr=i(W),UF=n(W,"LI",{});var p0e=s(UF);$he=n(p0e,"STRONG",{});var jit=s($he);Wsr=r(jit,"deberta"),jit.forEach(t),Qsr=r(p0e," \u2014 "),TG=n(p0e,"A",{href:!0});var Nit=s(TG);Hsr=r(Nit,"TFDebertaForSequenceClassification"),Nit.forEach(t),Usr=r(p0e," (DeBERTa model)"),p0e.forEach(t),Jsr=i(W),JF=n(W,"LI",{});var _0e=s(JF);Ihe=n(_0e,"STRONG",{});var qit=s(Ihe);Ysr=r(qit,"deberta-v2"),qit.forEach(t),Ksr=r(_0e," \u2014 "),FG=n(_0e,"A",{href:!0});var Git=s(FG);Zsr=r(Git,"TFDebertaV2ForSequenceClassification"),Git.forEach(t),elr=r(_0e," (DeBERTa-v2 model)"),_0e.forEach(t),olr=i(W),YF=n(W,"LI",{});var u0e=s(YF);Dhe=n(u0e,"STRONG",{});var Oit=s(Dhe);rlr=r(Oit,"distilbert"),Oit.forEach(t),tlr=r(u0e," \u2014 "),CG=n(u0e,"A",{href:!0});var Xit=s(CG);alr=r(Xit,"TFDistilBertForSequenceClassification"),Xit.forEach(t),nlr=r(u0e," (DistilBERT model)"),u0e.forEach(t),slr=i(W),KF=n(W,"LI",{});var b0e=s(KF);jhe=n(b0e,"STRONG",{});var Vit=s(jhe);llr=r(Vit,"electra"),Vit.forEach(t),ilr=r(b0e," \u2014 "),MG=n(b0e,"A",{href:!0});var zit=s(MG);dlr=r(zit,"TFElectraForSequenceClassification"),zit.forEach(t),clr=r(b0e," (ELECTRA model)"),b0e.forEach(t),flr=i(W),ZF=n(W,"LI",{});var v0e=s(ZF);Nhe=n(v0e,"STRONG",{});var Wit=s(Nhe);mlr=r(Wit,"flaubert"),Wit.forEach(t),glr=r(v0e," \u2014 "),EG=n(v0e,"A",{href:!0});var Qit=s(EG);hlr=r(Qit,"TFFlaubertForSequenceClassification"),Qit.forEach(t),plr=r(v0e," (FlauBERT model)"),v0e.forEach(t),_lr=i(W),e9=n(W,"LI",{});var T0e=s(e9);qhe=n(T0e,"STRONG",{});var Hit=s(qhe);ulr=r(Hit,"funnel"),Hit.forEach(t),blr=r(T0e," \u2014 "),yG=n(T0e,"A",{href:!0});var Uit=s(yG);vlr=r(Uit,"TFFunnelForSequenceClassification"),Uit.forEach(t),Tlr=r(T0e," (Funnel Transformer model)"),T0e.forEach(t),Flr=i(W),o9=n(W,"LI",{});var F0e=s(o9);Ghe=n(F0e,"STRONG",{});var Jit=s(Ghe);Clr=r(Jit,"gpt2"),Jit.forEach(t),Mlr=r(F0e," \u2014 "),wG=n(F0e,"A",{href:!0});var Yit=s(wG);Elr=r(Yit,"TFGPT2ForSequenceClassification"),Yit.forEach(t),ylr=r(F0e," (OpenAI GPT-2 model)"),F0e.forEach(t),wlr=i(W),r9=n(W,"LI",{});var C0e=s(r9);Ohe=n(C0e,"STRONG",{});var Kit=s(Ohe);Alr=r(Kit,"layoutlm"),Kit.forEach(t),Llr=r(C0e," \u2014 "),AG=n(C0e,"A",{href:!0});var Zit=s(AG);Blr=r(Zit,"TFLayoutLMForSequenceClassification"),Zit.forEach(t),xlr=r(C0e," (LayoutLM model)"),C0e.forEach(t),klr=i(W),t9=n(W,"LI",{});var M0e=s(t9);Xhe=n(M0e,"STRONG",{});var edt=s(Xhe);Rlr=r(edt,"longformer"),edt.forEach(t),Slr=r(M0e," \u2014 "),LG=n(M0e,"A",{href:!0});var odt=s(LG);Plr=r(odt,"TFLongformerForSequenceClassification"),odt.forEach(t),$lr=r(M0e," (Longformer model)"),M0e.forEach(t),Ilr=i(W),a9=n(W,"LI",{});var E0e=s(a9);Vhe=n(E0e,"STRONG",{});var rdt=s(Vhe);Dlr=r(rdt,"mobilebert"),rdt.forEach(t),jlr=r(E0e," \u2014 "),BG=n(E0e,"A",{href:!0});var tdt=s(BG);Nlr=r(tdt,"TFMobileBertForSequenceClassification"),tdt.forEach(t),qlr=r(E0e," (MobileBERT model)"),E0e.forEach(t),Glr=i(W),n9=n(W,"LI",{});var y0e=s(n9);zhe=n(y0e,"STRONG",{});var adt=s(zhe);Olr=r(adt,"mpnet"),adt.forEach(t),Xlr=r(y0e," \u2014 "),xG=n(y0e,"A",{href:!0});var ndt=s(xG);Vlr=r(ndt,"TFMPNetForSequenceClassification"),ndt.forEach(t),zlr=r(y0e," (MPNet model)"),y0e.forEach(t),Wlr=i(W),s9=n(W,"LI",{});var w0e=s(s9);Whe=n(w0e,"STRONG",{});var sdt=s(Whe);Qlr=r(sdt,"openai-gpt"),sdt.forEach(t),Hlr=r(w0e," \u2014 "),kG=n(w0e,"A",{href:!0});var ldt=s(kG);Ulr=r(ldt,"TFOpenAIGPTForSequenceClassification"),ldt.forEach(t),Jlr=r(w0e," (OpenAI GPT model)"),w0e.forEach(t),Ylr=i(W),l9=n(W,"LI",{});var A0e=s(l9);Qhe=n(A0e,"STRONG",{});var idt=s(Qhe);Klr=r(idt,"rembert"),idt.forEach(t),Zlr=r(A0e," \u2014 "),RG=n(A0e,"A",{href:!0});var ddt=s(RG);eir=r(ddt,"TFRemBertForSequenceClassification"),ddt.forEach(t),oir=r(A0e," (RemBERT model)"),A0e.forEach(t),rir=i(W),i9=n(W,"LI",{});var L0e=s(i9);Hhe=n(L0e,"STRONG",{});var cdt=s(Hhe);tir=r(cdt,"roberta"),cdt.forEach(t),air=r(L0e," \u2014 "),SG=n(L0e,"A",{href:!0});var fdt=s(SG);nir=r(fdt,"TFRobertaForSequenceClassification"),fdt.forEach(t),sir=r(L0e," (RoBERTa model)"),L0e.forEach(t),lir=i(W),d9=n(W,"LI",{});var B0e=s(d9);Uhe=n(B0e,"STRONG",{});var mdt=s(Uhe);iir=r(mdt,"roformer"),mdt.forEach(t),dir=r(B0e," \u2014 "),PG=n(B0e,"A",{href:!0});var gdt=s(PG);cir=r(gdt,"TFRoFormerForSequenceClassification"),gdt.forEach(t),fir=r(B0e," (RoFormer model)"),B0e.forEach(t),mir=i(W),c9=n(W,"LI",{});var x0e=s(c9);Jhe=n(x0e,"STRONG",{});var hdt=s(Jhe);gir=r(hdt,"tapas"),hdt.forEach(t),hir=r(x0e," \u2014 "),$G=n(x0e,"A",{href:!0});var pdt=s($G);pir=r(pdt,"TFTapasForSequenceClassification"),pdt.forEach(t),_ir=r(x0e," (TAPAS model)"),x0e.forEach(t),uir=i(W),f9=n(W,"LI",{});var k0e=s(f9);Yhe=n(k0e,"STRONG",{});var _dt=s(Yhe);bir=r(_dt,"transfo-xl"),_dt.forEach(t),vir=r(k0e," \u2014 "),IG=n(k0e,"A",{href:!0});var udt=s(IG);Tir=r(udt,"TFTransfoXLForSequenceClassification"),udt.forEach(t),Fir=r(k0e," (Transformer-XL model)"),k0e.forEach(t),Cir=i(W),m9=n(W,"LI",{});var R0e=s(m9);Khe=n(R0e,"STRONG",{});var bdt=s(Khe);Mir=r(bdt,"xlm"),bdt.forEach(t),Eir=r(R0e," \u2014 "),DG=n(R0e,"A",{href:!0});var vdt=s(DG);yir=r(vdt,"TFXLMForSequenceClassification"),vdt.forEach(t),wir=r(R0e," (XLM model)"),R0e.forEach(t),Air=i(W),g9=n(W,"LI",{});var S0e=s(g9);Zhe=n(S0e,"STRONG",{});var Tdt=s(Zhe);Lir=r(Tdt,"xlm-roberta"),Tdt.forEach(t),Bir=r(S0e," \u2014 "),jG=n(S0e,"A",{href:!0});var Fdt=s(jG);xir=r(Fdt,"TFXLMRobertaForSequenceClassification"),Fdt.forEach(t),kir=r(S0e," (XLM-RoBERTa model)"),S0e.forEach(t),Rir=i(W),h9=n(W,"LI",{});var P0e=s(h9);epe=n(P0e,"STRONG",{});var Cdt=s(epe);Sir=r(Cdt,"xlnet"),Cdt.forEach(t),Pir=r(P0e," \u2014 "),NG=n(P0e,"A",{href:!0});var Mdt=s(NG);$ir=r(Mdt,"TFXLNetForSequenceClassification"),Mdt.forEach(t),Iir=r(P0e," (XLNet model)"),P0e.forEach(t),W.forEach(t),Dir=i(_a),ope=n(_a,"P",{});var Edt=s(ope);jir=r(Edt,"Examples:"),Edt.forEach(t),Nir=i(_a),m(z6.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),OBe=i(c),Cc=n(c,"H2",{class:!0});var Kke=s(Cc);p9=n(Kke,"A",{id:!0,class:!0,href:!0});var ydt=s(p9);rpe=n(ydt,"SPAN",{});var wdt=s(rpe);m(W6.$$.fragment,wdt),wdt.forEach(t),ydt.forEach(t),qir=i(Kke),tpe=n(Kke,"SPAN",{});var Adt=s(tpe);Gir=r(Adt,"TFAutoModelForMultipleChoice"),Adt.forEach(t),Kke.forEach(t),XBe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(Q6.$$.fragment,zl),Oir=i(zl),Mc=n(zl,"P",{});var jz=s(Mc);Xir=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ape=n(jz,"CODE",{});var Ldt=s(ape);Vir=r(Ldt,"from_pretrained()"),Ldt.forEach(t),zir=r(jz,"class method or the "),npe=n(jz,"CODE",{});var Bdt=s(npe);Wir=r(Bdt,"from_config()"),Bdt.forEach(t),Qir=r(jz,`class
method.`),jz.forEach(t),Hir=i(zl),H6=n(zl,"P",{});var Zke=s(H6);Uir=r(Zke,"This class cannot be instantiated directly using "),spe=n(Zke,"CODE",{});var xdt=s(spe);Jir=r(xdt,"__init__()"),xdt.forEach(t),Yir=r(Zke," (throws an error)."),Zke.forEach(t),Kir=i(zl),pt=n(zl,"DIV",{class:!0});var Wl=s(pt);m(U6.$$.fragment,Wl),Zir=i(Wl),lpe=n(Wl,"P",{});var kdt=s(lpe);edr=r(kdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kdt.forEach(t),odr=i(Wl),Ec=n(Wl,"P",{});var Nz=s(Ec);rdr=r(Nz,`Note:
Loading a model from its configuration file does `),ipe=n(Nz,"STRONG",{});var Rdt=s(ipe);tdr=r(Rdt,"not"),Rdt.forEach(t),adr=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),dpe=n(Nz,"CODE",{});var Sdt=s(dpe);ndr=r(Sdt,"from_pretrained()"),Sdt.forEach(t),sdr=r(Nz,"to load the model weights."),Nz.forEach(t),ldr=i(Wl),cpe=n(Wl,"P",{});var Pdt=s(cpe);idr=r(Pdt,"Examples:"),Pdt.forEach(t),ddr=i(Wl),m(J6.$$.fragment,Wl),Wl.forEach(t),cdr=i(zl),To=n(zl,"DIV",{class:!0});var ua=s(To);m(Y6.$$.fragment,ua),fdr=i(ua),fpe=n(ua,"P",{});var $dt=s(fpe);mdr=r($dt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$dt.forEach(t),gdr=i(ua),un=n(ua,"P",{});var tE=s(un);hdr=r(tE,"The model class to instantiate is selected based on the "),mpe=n(tE,"CODE",{});var Idt=s(mpe);pdr=r(Idt,"model_type"),Idt.forEach(t),_dr=r(tE,` property of the config object (either
passed as an argument or loaded from `),gpe=n(tE,"CODE",{});var Ddt=s(gpe);udr=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),bdr=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=n(tE,"CODE",{});var jdt=s(hpe);vdr=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),Tdr=r(tE,":"),tE.forEach(t),Fdr=i(ua),te=n(ua,"UL",{});var ne=s(te);_9=n(ne,"LI",{});var $0e=s(_9);ppe=n($0e,"STRONG",{});var Ndt=s(ppe);Cdr=r(Ndt,"albert"),Ndt.forEach(t),Mdr=r($0e," \u2014 "),qG=n($0e,"A",{href:!0});var qdt=s(qG);Edr=r(qdt,"TFAlbertForMultipleChoice"),qdt.forEach(t),ydr=r($0e," (ALBERT model)"),$0e.forEach(t),wdr=i(ne),u9=n(ne,"LI",{});var I0e=s(u9);_pe=n(I0e,"STRONG",{});var Gdt=s(_pe);Adr=r(Gdt,"bert"),Gdt.forEach(t),Ldr=r(I0e," \u2014 "),GG=n(I0e,"A",{href:!0});var Odt=s(GG);Bdr=r(Odt,"TFBertForMultipleChoice"),Odt.forEach(t),xdr=r(I0e," (BERT model)"),I0e.forEach(t),kdr=i(ne),b9=n(ne,"LI",{});var D0e=s(b9);upe=n(D0e,"STRONG",{});var Xdt=s(upe);Rdr=r(Xdt,"camembert"),Xdt.forEach(t),Sdr=r(D0e," \u2014 "),OG=n(D0e,"A",{href:!0});var Vdt=s(OG);Pdr=r(Vdt,"TFCamembertForMultipleChoice"),Vdt.forEach(t),$dr=r(D0e," (CamemBERT model)"),D0e.forEach(t),Idr=i(ne),v9=n(ne,"LI",{});var j0e=s(v9);bpe=n(j0e,"STRONG",{});var zdt=s(bpe);Ddr=r(zdt,"convbert"),zdt.forEach(t),jdr=r(j0e," \u2014 "),XG=n(j0e,"A",{href:!0});var Wdt=s(XG);Ndr=r(Wdt,"TFConvBertForMultipleChoice"),Wdt.forEach(t),qdr=r(j0e," (ConvBERT model)"),j0e.forEach(t),Gdr=i(ne),T9=n(ne,"LI",{});var N0e=s(T9);vpe=n(N0e,"STRONG",{});var Qdt=s(vpe);Odr=r(Qdt,"distilbert"),Qdt.forEach(t),Xdr=r(N0e," \u2014 "),VG=n(N0e,"A",{href:!0});var Hdt=s(VG);Vdr=r(Hdt,"TFDistilBertForMultipleChoice"),Hdt.forEach(t),zdr=r(N0e," (DistilBERT model)"),N0e.forEach(t),Wdr=i(ne),F9=n(ne,"LI",{});var q0e=s(F9);Tpe=n(q0e,"STRONG",{});var Udt=s(Tpe);Qdr=r(Udt,"electra"),Udt.forEach(t),Hdr=r(q0e," \u2014 "),zG=n(q0e,"A",{href:!0});var Jdt=s(zG);Udr=r(Jdt,"TFElectraForMultipleChoice"),Jdt.forEach(t),Jdr=r(q0e," (ELECTRA model)"),q0e.forEach(t),Ydr=i(ne),C9=n(ne,"LI",{});var G0e=s(C9);Fpe=n(G0e,"STRONG",{});var Ydt=s(Fpe);Kdr=r(Ydt,"flaubert"),Ydt.forEach(t),Zdr=r(G0e," \u2014 "),WG=n(G0e,"A",{href:!0});var Kdt=s(WG);ecr=r(Kdt,"TFFlaubertForMultipleChoice"),Kdt.forEach(t),ocr=r(G0e," (FlauBERT model)"),G0e.forEach(t),rcr=i(ne),M9=n(ne,"LI",{});var O0e=s(M9);Cpe=n(O0e,"STRONG",{});var Zdt=s(Cpe);tcr=r(Zdt,"funnel"),Zdt.forEach(t),acr=r(O0e," \u2014 "),QG=n(O0e,"A",{href:!0});var ect=s(QG);ncr=r(ect,"TFFunnelForMultipleChoice"),ect.forEach(t),scr=r(O0e," (Funnel Transformer model)"),O0e.forEach(t),lcr=i(ne),E9=n(ne,"LI",{});var X0e=s(E9);Mpe=n(X0e,"STRONG",{});var oct=s(Mpe);icr=r(oct,"longformer"),oct.forEach(t),dcr=r(X0e," \u2014 "),HG=n(X0e,"A",{href:!0});var rct=s(HG);ccr=r(rct,"TFLongformerForMultipleChoice"),rct.forEach(t),fcr=r(X0e," (Longformer model)"),X0e.forEach(t),mcr=i(ne),y9=n(ne,"LI",{});var V0e=s(y9);Epe=n(V0e,"STRONG",{});var tct=s(Epe);gcr=r(tct,"mobilebert"),tct.forEach(t),hcr=r(V0e," \u2014 "),UG=n(V0e,"A",{href:!0});var act=s(UG);pcr=r(act,"TFMobileBertForMultipleChoice"),act.forEach(t),_cr=r(V0e," (MobileBERT model)"),V0e.forEach(t),ucr=i(ne),w9=n(ne,"LI",{});var z0e=s(w9);ype=n(z0e,"STRONG",{});var nct=s(ype);bcr=r(nct,"mpnet"),nct.forEach(t),vcr=r(z0e," \u2014 "),JG=n(z0e,"A",{href:!0});var sct=s(JG);Tcr=r(sct,"TFMPNetForMultipleChoice"),sct.forEach(t),Fcr=r(z0e," (MPNet model)"),z0e.forEach(t),Ccr=i(ne),A9=n(ne,"LI",{});var W0e=s(A9);wpe=n(W0e,"STRONG",{});var lct=s(wpe);Mcr=r(lct,"rembert"),lct.forEach(t),Ecr=r(W0e," \u2014 "),YG=n(W0e,"A",{href:!0});var ict=s(YG);ycr=r(ict,"TFRemBertForMultipleChoice"),ict.forEach(t),wcr=r(W0e," (RemBERT model)"),W0e.forEach(t),Acr=i(ne),L9=n(ne,"LI",{});var Q0e=s(L9);Ape=n(Q0e,"STRONG",{});var dct=s(Ape);Lcr=r(dct,"roberta"),dct.forEach(t),Bcr=r(Q0e," \u2014 "),KG=n(Q0e,"A",{href:!0});var cct=s(KG);xcr=r(cct,"TFRobertaForMultipleChoice"),cct.forEach(t),kcr=r(Q0e," (RoBERTa model)"),Q0e.forEach(t),Rcr=i(ne),B9=n(ne,"LI",{});var H0e=s(B9);Lpe=n(H0e,"STRONG",{});var fct=s(Lpe);Scr=r(fct,"roformer"),fct.forEach(t),Pcr=r(H0e," \u2014 "),ZG=n(H0e,"A",{href:!0});var mct=s(ZG);$cr=r(mct,"TFRoFormerForMultipleChoice"),mct.forEach(t),Icr=r(H0e," (RoFormer model)"),H0e.forEach(t),Dcr=i(ne),x9=n(ne,"LI",{});var U0e=s(x9);Bpe=n(U0e,"STRONG",{});var gct=s(Bpe);jcr=r(gct,"xlm"),gct.forEach(t),Ncr=r(U0e," \u2014 "),eO=n(U0e,"A",{href:!0});var hct=s(eO);qcr=r(hct,"TFXLMForMultipleChoice"),hct.forEach(t),Gcr=r(U0e," (XLM model)"),U0e.forEach(t),Ocr=i(ne),k9=n(ne,"LI",{});var J0e=s(k9);xpe=n(J0e,"STRONG",{});var pct=s(xpe);Xcr=r(pct,"xlm-roberta"),pct.forEach(t),Vcr=r(J0e," \u2014 "),oO=n(J0e,"A",{href:!0});var _ct=s(oO);zcr=r(_ct,"TFXLMRobertaForMultipleChoice"),_ct.forEach(t),Wcr=r(J0e," (XLM-RoBERTa model)"),J0e.forEach(t),Qcr=i(ne),R9=n(ne,"LI",{});var Y0e=s(R9);kpe=n(Y0e,"STRONG",{});var uct=s(kpe);Hcr=r(uct,"xlnet"),uct.forEach(t),Ucr=r(Y0e," \u2014 "),rO=n(Y0e,"A",{href:!0});var bct=s(rO);Jcr=r(bct,"TFXLNetForMultipleChoice"),bct.forEach(t),Ycr=r(Y0e," (XLNet model)"),Y0e.forEach(t),ne.forEach(t),Kcr=i(ua),Rpe=n(ua,"P",{});var vct=s(Rpe);Zcr=r(vct,"Examples:"),vct.forEach(t),efr=i(ua),m(K6.$$.fragment,ua),ua.forEach(t),zl.forEach(t),VBe=i(c),yc=n(c,"H2",{class:!0});var eRe=s(yc);S9=n(eRe,"A",{id:!0,class:!0,href:!0});var Tct=s(S9);Spe=n(Tct,"SPAN",{});var Fct=s(Spe);m(Z6.$$.fragment,Fct),Fct.forEach(t),Tct.forEach(t),ofr=i(eRe),Ppe=n(eRe,"SPAN",{});var Cct=s(Ppe);rfr=r(Cct,"TFAutoModelForTableQuestionAnswering"),Cct.forEach(t),eRe.forEach(t),zBe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(eA.$$.fragment,Ql),tfr=i(Ql),wc=n(Ql,"P",{});var qz=s(wc);afr=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$pe=n(qz,"CODE",{});var Mct=s($pe);nfr=r(Mct,"from_pretrained()"),Mct.forEach(t),sfr=r(qz,"class method or the "),Ipe=n(qz,"CODE",{});var Ect=s(Ipe);lfr=r(Ect,"from_config()"),Ect.forEach(t),ifr=r(qz,`class
method.`),qz.forEach(t),dfr=i(Ql),oA=n(Ql,"P",{});var oRe=s(oA);cfr=r(oRe,"This class cannot be instantiated directly using "),Dpe=n(oRe,"CODE",{});var yct=s(Dpe);ffr=r(yct,"__init__()"),yct.forEach(t),mfr=r(oRe," (throws an error)."),oRe.forEach(t),gfr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Hl=s(_t);m(rA.$$.fragment,Hl),hfr=i(Hl),jpe=n(Hl,"P",{});var wct=s(jpe);pfr=r(wct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wct.forEach(t),_fr=i(Hl),Ac=n(Hl,"P",{});var Gz=s(Ac);ufr=r(Gz,`Note:
Loading a model from its configuration file does `),Npe=n(Gz,"STRONG",{});var Act=s(Npe);bfr=r(Act,"not"),Act.forEach(t),vfr=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qpe=n(Gz,"CODE",{});var Lct=s(qpe);Tfr=r(Lct,"from_pretrained()"),Lct.forEach(t),Ffr=r(Gz,"to load the model weights."),Gz.forEach(t),Cfr=i(Hl),Gpe=n(Hl,"P",{});var Bct=s(Gpe);Mfr=r(Bct,"Examples:"),Bct.forEach(t),Efr=i(Hl),m(tA.$$.fragment,Hl),Hl.forEach(t),yfr=i(Ql),Fo=n(Ql,"DIV",{class:!0});var ba=s(Fo);m(aA.$$.fragment,ba),wfr=i(ba),Ope=n(ba,"P",{});var xct=s(Ope);Afr=r(xct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xct.forEach(t),Lfr=i(ba),bn=n(ba,"P",{});var aE=s(bn);Bfr=r(aE,"The model class to instantiate is selected based on the "),Xpe=n(aE,"CODE",{});var kct=s(Xpe);xfr=r(kct,"model_type"),kct.forEach(t),kfr=r(aE,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(aE,"CODE",{});var Rct=s(Vpe);Rfr=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),Sfr=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zpe=n(aE,"CODE",{});var Sct=s(zpe);Pfr=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),$fr=r(aE,":"),aE.forEach(t),Ifr=i(ba),Wpe=n(ba,"UL",{});var Pct=s(Wpe);P9=n(Pct,"LI",{});var K0e=s(P9);Qpe=n(K0e,"STRONG",{});var $ct=s(Qpe);Dfr=r($ct,"tapas"),$ct.forEach(t),jfr=r(K0e," \u2014 "),tO=n(K0e,"A",{href:!0});var Ict=s(tO);Nfr=r(Ict,"TFTapasForQuestionAnswering"),Ict.forEach(t),qfr=r(K0e," (TAPAS model)"),K0e.forEach(t),Pct.forEach(t),Gfr=i(ba),Hpe=n(ba,"P",{});var Dct=s(Hpe);Ofr=r(Dct,"Examples:"),Dct.forEach(t),Xfr=i(ba),m(nA.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),WBe=i(c),Lc=n(c,"H2",{class:!0});var rRe=s(Lc);$9=n(rRe,"A",{id:!0,class:!0,href:!0});var jct=s($9);Upe=n(jct,"SPAN",{});var Nct=s(Upe);m(sA.$$.fragment,Nct),Nct.forEach(t),jct.forEach(t),Vfr=i(rRe),Jpe=n(rRe,"SPAN",{});var qct=s(Jpe);zfr=r(qct,"TFAutoModelForTokenClassification"),qct.forEach(t),rRe.forEach(t),QBe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(lA.$$.fragment,Ul),Wfr=i(Ul),Bc=n(Ul,"P",{});var Oz=s(Bc);Qfr=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ype=n(Oz,"CODE",{});var Gct=s(Ype);Hfr=r(Gct,"from_pretrained()"),Gct.forEach(t),Ufr=r(Oz,"class method or the "),Kpe=n(Oz,"CODE",{});var Oct=s(Kpe);Jfr=r(Oct,"from_config()"),Oct.forEach(t),Yfr=r(Oz,`class
method.`),Oz.forEach(t),Kfr=i(Ul),iA=n(Ul,"P",{});var tRe=s(iA);Zfr=r(tRe,"This class cannot be instantiated directly using "),Zpe=n(tRe,"CODE",{});var Xct=s(Zpe);emr=r(Xct,"__init__()"),Xct.forEach(t),omr=r(tRe," (throws an error)."),tRe.forEach(t),rmr=i(Ul),ut=n(Ul,"DIV",{class:!0});var Jl=s(ut);m(dA.$$.fragment,Jl),tmr=i(Jl),e_e=n(Jl,"P",{});var Vct=s(e_e);amr=r(Vct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vct.forEach(t),nmr=i(Jl),xc=n(Jl,"P",{});var Xz=s(xc);smr=r(Xz,`Note:
Loading a model from its configuration file does `),o_e=n(Xz,"STRONG",{});var zct=s(o_e);lmr=r(zct,"not"),zct.forEach(t),imr=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),r_e=n(Xz,"CODE",{});var Wct=s(r_e);dmr=r(Wct,"from_pretrained()"),Wct.forEach(t),cmr=r(Xz,"to load the model weights."),Xz.forEach(t),fmr=i(Jl),t_e=n(Jl,"P",{});var Qct=s(t_e);mmr=r(Qct,"Examples:"),Qct.forEach(t),gmr=i(Jl),m(cA.$$.fragment,Jl),Jl.forEach(t),hmr=i(Ul),Co=n(Ul,"DIV",{class:!0});var va=s(Co);m(fA.$$.fragment,va),pmr=i(va),a_e=n(va,"P",{});var Hct=s(a_e);_mr=r(Hct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hct.forEach(t),umr=i(va),vn=n(va,"P",{});var nE=s(vn);bmr=r(nE,"The model class to instantiate is selected based on the "),n_e=n(nE,"CODE",{});var Uct=s(n_e);vmr=r(Uct,"model_type"),Uct.forEach(t),Tmr=r(nE,` property of the config object (either
passed as an argument or loaded from `),s_e=n(nE,"CODE",{});var Jct=s(s_e);Fmr=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),Cmr=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=n(nE,"CODE",{});var Yct=s(l_e);Mmr=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),Emr=r(nE,":"),nE.forEach(t),ymr=i(va),K=n(va,"UL",{});var oe=s(K);I9=n(oe,"LI",{});var Z0e=s(I9);i_e=n(Z0e,"STRONG",{});var Kct=s(i_e);wmr=r(Kct,"albert"),Kct.forEach(t),Amr=r(Z0e," \u2014 "),aO=n(Z0e,"A",{href:!0});var Zct=s(aO);Lmr=r(Zct,"TFAlbertForTokenClassification"),Zct.forEach(t),Bmr=r(Z0e," (ALBERT model)"),Z0e.forEach(t),xmr=i(oe),D9=n(oe,"LI",{});var eLe=s(D9);d_e=n(eLe,"STRONG",{});var eft=s(d_e);kmr=r(eft,"bert"),eft.forEach(t),Rmr=r(eLe," \u2014 "),nO=n(eLe,"A",{href:!0});var oft=s(nO);Smr=r(oft,"TFBertForTokenClassification"),oft.forEach(t),Pmr=r(eLe," (BERT model)"),eLe.forEach(t),$mr=i(oe),j9=n(oe,"LI",{});var oLe=s(j9);c_e=n(oLe,"STRONG",{});var rft=s(c_e);Imr=r(rft,"camembert"),rft.forEach(t),Dmr=r(oLe," \u2014 "),sO=n(oLe,"A",{href:!0});var tft=s(sO);jmr=r(tft,"TFCamembertForTokenClassification"),tft.forEach(t),Nmr=r(oLe," (CamemBERT model)"),oLe.forEach(t),qmr=i(oe),N9=n(oe,"LI",{});var rLe=s(N9);f_e=n(rLe,"STRONG",{});var aft=s(f_e);Gmr=r(aft,"convbert"),aft.forEach(t),Omr=r(rLe," \u2014 "),lO=n(rLe,"A",{href:!0});var nft=s(lO);Xmr=r(nft,"TFConvBertForTokenClassification"),nft.forEach(t),Vmr=r(rLe," (ConvBERT model)"),rLe.forEach(t),zmr=i(oe),q9=n(oe,"LI",{});var tLe=s(q9);m_e=n(tLe,"STRONG",{});var sft=s(m_e);Wmr=r(sft,"deberta"),sft.forEach(t),Qmr=r(tLe," \u2014 "),iO=n(tLe,"A",{href:!0});var lft=s(iO);Hmr=r(lft,"TFDebertaForTokenClassification"),lft.forEach(t),Umr=r(tLe," (DeBERTa model)"),tLe.forEach(t),Jmr=i(oe),G9=n(oe,"LI",{});var aLe=s(G9);g_e=n(aLe,"STRONG",{});var ift=s(g_e);Ymr=r(ift,"deberta-v2"),ift.forEach(t),Kmr=r(aLe," \u2014 "),dO=n(aLe,"A",{href:!0});var dft=s(dO);Zmr=r(dft,"TFDebertaV2ForTokenClassification"),dft.forEach(t),egr=r(aLe," (DeBERTa-v2 model)"),aLe.forEach(t),ogr=i(oe),O9=n(oe,"LI",{});var nLe=s(O9);h_e=n(nLe,"STRONG",{});var cft=s(h_e);rgr=r(cft,"distilbert"),cft.forEach(t),tgr=r(nLe," \u2014 "),cO=n(nLe,"A",{href:!0});var fft=s(cO);agr=r(fft,"TFDistilBertForTokenClassification"),fft.forEach(t),ngr=r(nLe," (DistilBERT model)"),nLe.forEach(t),sgr=i(oe),X9=n(oe,"LI",{});var sLe=s(X9);p_e=n(sLe,"STRONG",{});var mft=s(p_e);lgr=r(mft,"electra"),mft.forEach(t),igr=r(sLe," \u2014 "),fO=n(sLe,"A",{href:!0});var gft=s(fO);dgr=r(gft,"TFElectraForTokenClassification"),gft.forEach(t),cgr=r(sLe," (ELECTRA model)"),sLe.forEach(t),fgr=i(oe),V9=n(oe,"LI",{});var lLe=s(V9);__e=n(lLe,"STRONG",{});var hft=s(__e);mgr=r(hft,"flaubert"),hft.forEach(t),ggr=r(lLe," \u2014 "),mO=n(lLe,"A",{href:!0});var pft=s(mO);hgr=r(pft,"TFFlaubertForTokenClassification"),pft.forEach(t),pgr=r(lLe," (FlauBERT model)"),lLe.forEach(t),_gr=i(oe),z9=n(oe,"LI",{});var iLe=s(z9);u_e=n(iLe,"STRONG",{});var _ft=s(u_e);ugr=r(_ft,"funnel"),_ft.forEach(t),bgr=r(iLe," \u2014 "),gO=n(iLe,"A",{href:!0});var uft=s(gO);vgr=r(uft,"TFFunnelForTokenClassification"),uft.forEach(t),Tgr=r(iLe," (Funnel Transformer model)"),iLe.forEach(t),Fgr=i(oe),W9=n(oe,"LI",{});var dLe=s(W9);b_e=n(dLe,"STRONG",{});var bft=s(b_e);Cgr=r(bft,"layoutlm"),bft.forEach(t),Mgr=r(dLe," \u2014 "),hO=n(dLe,"A",{href:!0});var vft=s(hO);Egr=r(vft,"TFLayoutLMForTokenClassification"),vft.forEach(t),ygr=r(dLe," (LayoutLM model)"),dLe.forEach(t),wgr=i(oe),Q9=n(oe,"LI",{});var cLe=s(Q9);v_e=n(cLe,"STRONG",{});var Tft=s(v_e);Agr=r(Tft,"longformer"),Tft.forEach(t),Lgr=r(cLe," \u2014 "),pO=n(cLe,"A",{href:!0});var Fft=s(pO);Bgr=r(Fft,"TFLongformerForTokenClassification"),Fft.forEach(t),xgr=r(cLe," (Longformer model)"),cLe.forEach(t),kgr=i(oe),H9=n(oe,"LI",{});var fLe=s(H9);T_e=n(fLe,"STRONG",{});var Cft=s(T_e);Rgr=r(Cft,"mobilebert"),Cft.forEach(t),Sgr=r(fLe," \u2014 "),_O=n(fLe,"A",{href:!0});var Mft=s(_O);Pgr=r(Mft,"TFMobileBertForTokenClassification"),Mft.forEach(t),$gr=r(fLe," (MobileBERT model)"),fLe.forEach(t),Igr=i(oe),U9=n(oe,"LI",{});var mLe=s(U9);F_e=n(mLe,"STRONG",{});var Eft=s(F_e);Dgr=r(Eft,"mpnet"),Eft.forEach(t),jgr=r(mLe," \u2014 "),uO=n(mLe,"A",{href:!0});var yft=s(uO);Ngr=r(yft,"TFMPNetForTokenClassification"),yft.forEach(t),qgr=r(mLe," (MPNet model)"),mLe.forEach(t),Ggr=i(oe),J9=n(oe,"LI",{});var gLe=s(J9);C_e=n(gLe,"STRONG",{});var wft=s(C_e);Ogr=r(wft,"rembert"),wft.forEach(t),Xgr=r(gLe," \u2014 "),bO=n(gLe,"A",{href:!0});var Aft=s(bO);Vgr=r(Aft,"TFRemBertForTokenClassification"),Aft.forEach(t),zgr=r(gLe," (RemBERT model)"),gLe.forEach(t),Wgr=i(oe),Y9=n(oe,"LI",{});var hLe=s(Y9);M_e=n(hLe,"STRONG",{});var Lft=s(M_e);Qgr=r(Lft,"roberta"),Lft.forEach(t),Hgr=r(hLe," \u2014 "),vO=n(hLe,"A",{href:!0});var Bft=s(vO);Ugr=r(Bft,"TFRobertaForTokenClassification"),Bft.forEach(t),Jgr=r(hLe," (RoBERTa model)"),hLe.forEach(t),Ygr=i(oe),K9=n(oe,"LI",{});var pLe=s(K9);E_e=n(pLe,"STRONG",{});var xft=s(E_e);Kgr=r(xft,"roformer"),xft.forEach(t),Zgr=r(pLe," \u2014 "),TO=n(pLe,"A",{href:!0});var kft=s(TO);ehr=r(kft,"TFRoFormerForTokenClassification"),kft.forEach(t),ohr=r(pLe," (RoFormer model)"),pLe.forEach(t),rhr=i(oe),Z9=n(oe,"LI",{});var _Le=s(Z9);y_e=n(_Le,"STRONG",{});var Rft=s(y_e);thr=r(Rft,"xlm"),Rft.forEach(t),ahr=r(_Le," \u2014 "),FO=n(_Le,"A",{href:!0});var Sft=s(FO);nhr=r(Sft,"TFXLMForTokenClassification"),Sft.forEach(t),shr=r(_Le," (XLM model)"),_Le.forEach(t),lhr=i(oe),eC=n(oe,"LI",{});var uLe=s(eC);w_e=n(uLe,"STRONG",{});var Pft=s(w_e);ihr=r(Pft,"xlm-roberta"),Pft.forEach(t),dhr=r(uLe," \u2014 "),CO=n(uLe,"A",{href:!0});var $ft=s(CO);chr=r($ft,"TFXLMRobertaForTokenClassification"),$ft.forEach(t),fhr=r(uLe," (XLM-RoBERTa model)"),uLe.forEach(t),mhr=i(oe),oC=n(oe,"LI",{});var bLe=s(oC);A_e=n(bLe,"STRONG",{});var Ift=s(A_e);ghr=r(Ift,"xlnet"),Ift.forEach(t),hhr=r(bLe," \u2014 "),MO=n(bLe,"A",{href:!0});var Dft=s(MO);phr=r(Dft,"TFXLNetForTokenClassification"),Dft.forEach(t),_hr=r(bLe," (XLNet model)"),bLe.forEach(t),oe.forEach(t),uhr=i(va),L_e=n(va,"P",{});var jft=s(L_e);bhr=r(jft,"Examples:"),jft.forEach(t),vhr=i(va),m(mA.$$.fragment,va),va.forEach(t),Ul.forEach(t),HBe=i(c),kc=n(c,"H2",{class:!0});var aRe=s(kc);rC=n(aRe,"A",{id:!0,class:!0,href:!0});var Nft=s(rC);B_e=n(Nft,"SPAN",{});var qft=s(B_e);m(gA.$$.fragment,qft),qft.forEach(t),Nft.forEach(t),Thr=i(aRe),x_e=n(aRe,"SPAN",{});var Gft=s(x_e);Fhr=r(Gft,"TFAutoModelForQuestionAnswering"),Gft.forEach(t),aRe.forEach(t),UBe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(hA.$$.fragment,Yl),Chr=i(Yl),Rc=n(Yl,"P",{});var Vz=s(Rc);Mhr=r(Vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),k_e=n(Vz,"CODE",{});var Oft=s(k_e);Ehr=r(Oft,"from_pretrained()"),Oft.forEach(t),yhr=r(Vz,"class method or the "),R_e=n(Vz,"CODE",{});var Xft=s(R_e);whr=r(Xft,"from_config()"),Xft.forEach(t),Ahr=r(Vz,`class
method.`),Vz.forEach(t),Lhr=i(Yl),pA=n(Yl,"P",{});var nRe=s(pA);Bhr=r(nRe,"This class cannot be instantiated directly using "),S_e=n(nRe,"CODE",{});var Vft=s(S_e);xhr=r(Vft,"__init__()"),Vft.forEach(t),khr=r(nRe," (throws an error)."),nRe.forEach(t),Rhr=i(Yl),bt=n(Yl,"DIV",{class:!0});var Kl=s(bt);m(_A.$$.fragment,Kl),Shr=i(Kl),P_e=n(Kl,"P",{});var zft=s(P_e);Phr=r(zft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zft.forEach(t),$hr=i(Kl),Sc=n(Kl,"P",{});var zz=s(Sc);Ihr=r(zz,`Note:
Loading a model from its configuration file does `),$_e=n(zz,"STRONG",{});var Wft=s($_e);Dhr=r(Wft,"not"),Wft.forEach(t),jhr=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),I_e=n(zz,"CODE",{});var Qft=s(I_e);Nhr=r(Qft,"from_pretrained()"),Qft.forEach(t),qhr=r(zz,"to load the model weights."),zz.forEach(t),Ghr=i(Kl),D_e=n(Kl,"P",{});var Hft=s(D_e);Ohr=r(Hft,"Examples:"),Hft.forEach(t),Xhr=i(Kl),m(uA.$$.fragment,Kl),Kl.forEach(t),Vhr=i(Yl),Mo=n(Yl,"DIV",{class:!0});var Ta=s(Mo);m(bA.$$.fragment,Ta),zhr=i(Ta),j_e=n(Ta,"P",{});var Uft=s(j_e);Whr=r(Uft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Uft.forEach(t),Qhr=i(Ta),Tn=n(Ta,"P",{});var sE=s(Tn);Hhr=r(sE,"The model class to instantiate is selected based on the "),N_e=n(sE,"CODE",{});var Jft=s(N_e);Uhr=r(Jft,"model_type"),Jft.forEach(t),Jhr=r(sE,` property of the config object (either
passed as an argument or loaded from `),q_e=n(sE,"CODE",{});var Yft=s(q_e);Yhr=r(Yft,"pretrained_model_name_or_path"),Yft.forEach(t),Khr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(sE,"CODE",{});var Kft=s(G_e);Zhr=r(Kft,"pretrained_model_name_or_path"),Kft.forEach(t),epr=r(sE,":"),sE.forEach(t),opr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);tC=n(re,"LI",{});var vLe=s(tC);O_e=n(vLe,"STRONG",{});var Zft=s(O_e);rpr=r(Zft,"albert"),Zft.forEach(t),tpr=r(vLe," \u2014 "),EO=n(vLe,"A",{href:!0});var emt=s(EO);apr=r(emt,"TFAlbertForQuestionAnswering"),emt.forEach(t),npr=r(vLe," (ALBERT model)"),vLe.forEach(t),spr=i(re),aC=n(re,"LI",{});var TLe=s(aC);X_e=n(TLe,"STRONG",{});var omt=s(X_e);lpr=r(omt,"bert"),omt.forEach(t),ipr=r(TLe," \u2014 "),yO=n(TLe,"A",{href:!0});var rmt=s(yO);dpr=r(rmt,"TFBertForQuestionAnswering"),rmt.forEach(t),cpr=r(TLe," (BERT model)"),TLe.forEach(t),fpr=i(re),nC=n(re,"LI",{});var FLe=s(nC);V_e=n(FLe,"STRONG",{});var tmt=s(V_e);mpr=r(tmt,"camembert"),tmt.forEach(t),gpr=r(FLe," \u2014 "),wO=n(FLe,"A",{href:!0});var amt=s(wO);hpr=r(amt,"TFCamembertForQuestionAnswering"),amt.forEach(t),ppr=r(FLe," (CamemBERT model)"),FLe.forEach(t),_pr=i(re),sC=n(re,"LI",{});var CLe=s(sC);z_e=n(CLe,"STRONG",{});var nmt=s(z_e);upr=r(nmt,"convbert"),nmt.forEach(t),bpr=r(CLe," \u2014 "),AO=n(CLe,"A",{href:!0});var smt=s(AO);vpr=r(smt,"TFConvBertForQuestionAnswering"),smt.forEach(t),Tpr=r(CLe," (ConvBERT model)"),CLe.forEach(t),Fpr=i(re),lC=n(re,"LI",{});var MLe=s(lC);W_e=n(MLe,"STRONG",{});var lmt=s(W_e);Cpr=r(lmt,"deberta"),lmt.forEach(t),Mpr=r(MLe," \u2014 "),LO=n(MLe,"A",{href:!0});var imt=s(LO);Epr=r(imt,"TFDebertaForQuestionAnswering"),imt.forEach(t),ypr=r(MLe," (DeBERTa model)"),MLe.forEach(t),wpr=i(re),iC=n(re,"LI",{});var ELe=s(iC);Q_e=n(ELe,"STRONG",{});var dmt=s(Q_e);Apr=r(dmt,"deberta-v2"),dmt.forEach(t),Lpr=r(ELe," \u2014 "),BO=n(ELe,"A",{href:!0});var cmt=s(BO);Bpr=r(cmt,"TFDebertaV2ForQuestionAnswering"),cmt.forEach(t),xpr=r(ELe," (DeBERTa-v2 model)"),ELe.forEach(t),kpr=i(re),dC=n(re,"LI",{});var yLe=s(dC);H_e=n(yLe,"STRONG",{});var fmt=s(H_e);Rpr=r(fmt,"distilbert"),fmt.forEach(t),Spr=r(yLe," \u2014 "),xO=n(yLe,"A",{href:!0});var mmt=s(xO);Ppr=r(mmt,"TFDistilBertForQuestionAnswering"),mmt.forEach(t),$pr=r(yLe," (DistilBERT model)"),yLe.forEach(t),Ipr=i(re),cC=n(re,"LI",{});var wLe=s(cC);U_e=n(wLe,"STRONG",{});var gmt=s(U_e);Dpr=r(gmt,"electra"),gmt.forEach(t),jpr=r(wLe," \u2014 "),kO=n(wLe,"A",{href:!0});var hmt=s(kO);Npr=r(hmt,"TFElectraForQuestionAnswering"),hmt.forEach(t),qpr=r(wLe," (ELECTRA model)"),wLe.forEach(t),Gpr=i(re),fC=n(re,"LI",{});var ALe=s(fC);J_e=n(ALe,"STRONG",{});var pmt=s(J_e);Opr=r(pmt,"flaubert"),pmt.forEach(t),Xpr=r(ALe," \u2014 "),RO=n(ALe,"A",{href:!0});var _mt=s(RO);Vpr=r(_mt,"TFFlaubertForQuestionAnsweringSimple"),_mt.forEach(t),zpr=r(ALe," (FlauBERT model)"),ALe.forEach(t),Wpr=i(re),mC=n(re,"LI",{});var LLe=s(mC);Y_e=n(LLe,"STRONG",{});var umt=s(Y_e);Qpr=r(umt,"funnel"),umt.forEach(t),Hpr=r(LLe," \u2014 "),SO=n(LLe,"A",{href:!0});var bmt=s(SO);Upr=r(bmt,"TFFunnelForQuestionAnswering"),bmt.forEach(t),Jpr=r(LLe," (Funnel Transformer model)"),LLe.forEach(t),Ypr=i(re),gC=n(re,"LI",{});var BLe=s(gC);K_e=n(BLe,"STRONG",{});var vmt=s(K_e);Kpr=r(vmt,"longformer"),vmt.forEach(t),Zpr=r(BLe," \u2014 "),PO=n(BLe,"A",{href:!0});var Tmt=s(PO);e_r=r(Tmt,"TFLongformerForQuestionAnswering"),Tmt.forEach(t),o_r=r(BLe," (Longformer model)"),BLe.forEach(t),r_r=i(re),hC=n(re,"LI",{});var xLe=s(hC);Z_e=n(xLe,"STRONG",{});var Fmt=s(Z_e);t_r=r(Fmt,"mobilebert"),Fmt.forEach(t),a_r=r(xLe," \u2014 "),$O=n(xLe,"A",{href:!0});var Cmt=s($O);n_r=r(Cmt,"TFMobileBertForQuestionAnswering"),Cmt.forEach(t),s_r=r(xLe," (MobileBERT model)"),xLe.forEach(t),l_r=i(re),pC=n(re,"LI",{});var kLe=s(pC);eue=n(kLe,"STRONG",{});var Mmt=s(eue);i_r=r(Mmt,"mpnet"),Mmt.forEach(t),d_r=r(kLe," \u2014 "),IO=n(kLe,"A",{href:!0});var Emt=s(IO);c_r=r(Emt,"TFMPNetForQuestionAnswering"),Emt.forEach(t),f_r=r(kLe," (MPNet model)"),kLe.forEach(t),m_r=i(re),_C=n(re,"LI",{});var RLe=s(_C);oue=n(RLe,"STRONG",{});var ymt=s(oue);g_r=r(ymt,"rembert"),ymt.forEach(t),h_r=r(RLe," \u2014 "),DO=n(RLe,"A",{href:!0});var wmt=s(DO);p_r=r(wmt,"TFRemBertForQuestionAnswering"),wmt.forEach(t),__r=r(RLe," (RemBERT model)"),RLe.forEach(t),u_r=i(re),uC=n(re,"LI",{});var SLe=s(uC);rue=n(SLe,"STRONG",{});var Amt=s(rue);b_r=r(Amt,"roberta"),Amt.forEach(t),v_r=r(SLe," \u2014 "),jO=n(SLe,"A",{href:!0});var Lmt=s(jO);T_r=r(Lmt,"TFRobertaForQuestionAnswering"),Lmt.forEach(t),F_r=r(SLe," (RoBERTa model)"),SLe.forEach(t),C_r=i(re),bC=n(re,"LI",{});var PLe=s(bC);tue=n(PLe,"STRONG",{});var Bmt=s(tue);M_r=r(Bmt,"roformer"),Bmt.forEach(t),E_r=r(PLe," \u2014 "),NO=n(PLe,"A",{href:!0});var xmt=s(NO);y_r=r(xmt,"TFRoFormerForQuestionAnswering"),xmt.forEach(t),w_r=r(PLe," (RoFormer model)"),PLe.forEach(t),A_r=i(re),vC=n(re,"LI",{});var $Le=s(vC);aue=n($Le,"STRONG",{});var kmt=s(aue);L_r=r(kmt,"xlm"),kmt.forEach(t),B_r=r($Le," \u2014 "),qO=n($Le,"A",{href:!0});var Rmt=s(qO);x_r=r(Rmt,"TFXLMForQuestionAnsweringSimple"),Rmt.forEach(t),k_r=r($Le," (XLM model)"),$Le.forEach(t),R_r=i(re),TC=n(re,"LI",{});var ILe=s(TC);nue=n(ILe,"STRONG",{});var Smt=s(nue);S_r=r(Smt,"xlm-roberta"),Smt.forEach(t),P_r=r(ILe," \u2014 "),GO=n(ILe,"A",{href:!0});var Pmt=s(GO);$_r=r(Pmt,"TFXLMRobertaForQuestionAnswering"),Pmt.forEach(t),I_r=r(ILe," (XLM-RoBERTa model)"),ILe.forEach(t),D_r=i(re),FC=n(re,"LI",{});var DLe=s(FC);sue=n(DLe,"STRONG",{});var $mt=s(sue);j_r=r($mt,"xlnet"),$mt.forEach(t),N_r=r(DLe," \u2014 "),OO=n(DLe,"A",{href:!0});var Imt=s(OO);q_r=r(Imt,"TFXLNetForQuestionAnsweringSimple"),Imt.forEach(t),G_r=r(DLe," (XLNet model)"),DLe.forEach(t),re.forEach(t),O_r=i(Ta),lue=n(Ta,"P",{});var Dmt=s(lue);X_r=r(Dmt,"Examples:"),Dmt.forEach(t),V_r=i(Ta),m(vA.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),JBe=i(c),Pc=n(c,"H2",{class:!0});var sRe=s(Pc);CC=n(sRe,"A",{id:!0,class:!0,href:!0});var jmt=s(CC);iue=n(jmt,"SPAN",{});var Nmt=s(iue);m(TA.$$.fragment,Nmt),Nmt.forEach(t),jmt.forEach(t),z_r=i(sRe),due=n(sRe,"SPAN",{});var qmt=s(due);W_r=r(qmt,"TFAutoModelForVision2Seq"),qmt.forEach(t),sRe.forEach(t),YBe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(FA.$$.fragment,Zl),Q_r=i(Zl),$c=n(Zl,"P",{});var Wz=s($c);H_r=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cue=n(Wz,"CODE",{});var Gmt=s(cue);U_r=r(Gmt,"from_pretrained()"),Gmt.forEach(t),J_r=r(Wz,"class method or the "),fue=n(Wz,"CODE",{});var Omt=s(fue);Y_r=r(Omt,"from_config()"),Omt.forEach(t),K_r=r(Wz,`class
method.`),Wz.forEach(t),Z_r=i(Zl),CA=n(Zl,"P",{});var lRe=s(CA);eur=r(lRe,"This class cannot be instantiated directly using "),mue=n(lRe,"CODE",{});var Xmt=s(mue);our=r(Xmt,"__init__()"),Xmt.forEach(t),rur=r(lRe," (throws an error)."),lRe.forEach(t),tur=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(MA.$$.fragment,ei),aur=i(ei),gue=n(ei,"P",{});var Vmt=s(gue);nur=r(Vmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vmt.forEach(t),sur=i(ei),Ic=n(ei,"P",{});var Qz=s(Ic);lur=r(Qz,`Note:
Loading a model from its configuration file does `),hue=n(Qz,"STRONG",{});var zmt=s(hue);iur=r(zmt,"not"),zmt.forEach(t),dur=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),pue=n(Qz,"CODE",{});var Wmt=s(pue);cur=r(Wmt,"from_pretrained()"),Wmt.forEach(t),fur=r(Qz,"to load the model weights."),Qz.forEach(t),mur=i(ei),_ue=n(ei,"P",{});var Qmt=s(_ue);gur=r(Qmt,"Examples:"),Qmt.forEach(t),hur=i(ei),m(EA.$$.fragment,ei),ei.forEach(t),pur=i(Zl),Eo=n(Zl,"DIV",{class:!0});var Fa=s(Eo);m(yA.$$.fragment,Fa),_ur=i(Fa),uue=n(Fa,"P",{});var Hmt=s(uue);uur=r(Hmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hmt.forEach(t),bur=i(Fa),Fn=n(Fa,"P",{});var lE=s(Fn);vur=r(lE,"The model class to instantiate is selected based on the "),bue=n(lE,"CODE",{});var Umt=s(bue);Tur=r(Umt,"model_type"),Umt.forEach(t),Fur=r(lE,` property of the config object (either
passed as an argument or loaded from `),vue=n(lE,"CODE",{});var Jmt=s(vue);Cur=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),Mur=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n(lE,"CODE",{});var Ymt=s(Tue);Eur=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),yur=r(lE,":"),lE.forEach(t),wur=i(Fa),Fue=n(Fa,"UL",{});var Kmt=s(Fue);MC=n(Kmt,"LI",{});var jLe=s(MC);Cue=n(jLe,"STRONG",{});var Zmt=s(Cue);Aur=r(Zmt,"vision-encoder-decoder"),Zmt.forEach(t),Lur=r(jLe," \u2014 "),XO=n(jLe,"A",{href:!0});var egt=s(XO);Bur=r(egt,"TFVisionEncoderDecoderModel"),egt.forEach(t),xur=r(jLe," (Vision Encoder decoder model)"),jLe.forEach(t),Kmt.forEach(t),kur=i(Fa),Mue=n(Fa,"P",{});var ogt=s(Mue);Rur=r(ogt,"Examples:"),ogt.forEach(t),Sur=i(Fa),m(wA.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),KBe=i(c),Dc=n(c,"H2",{class:!0});var iRe=s(Dc);EC=n(iRe,"A",{id:!0,class:!0,href:!0});var rgt=s(EC);Eue=n(rgt,"SPAN",{});var tgt=s(Eue);m(AA.$$.fragment,tgt),tgt.forEach(t),rgt.forEach(t),Pur=i(iRe),yue=n(iRe,"SPAN",{});var agt=s(yue);$ur=r(agt,"TFAutoModelForSpeechSeq2Seq"),agt.forEach(t),iRe.forEach(t),ZBe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(LA.$$.fragment,oi),Iur=i(oi),jc=n(oi,"P",{});var Hz=s(jc);Dur=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wue=n(Hz,"CODE",{});var ngt=s(wue);jur=r(ngt,"from_pretrained()"),ngt.forEach(t),Nur=r(Hz,"class method or the "),Aue=n(Hz,"CODE",{});var sgt=s(Aue);qur=r(sgt,"from_config()"),sgt.forEach(t),Gur=r(Hz,`class
method.`),Hz.forEach(t),Our=i(oi),BA=n(oi,"P",{});var dRe=s(BA);Xur=r(dRe,"This class cannot be instantiated directly using "),Lue=n(dRe,"CODE",{});var lgt=s(Lue);Vur=r(lgt,"__init__()"),lgt.forEach(t),zur=r(dRe," (throws an error)."),dRe.forEach(t),Wur=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(xA.$$.fragment,ri),Qur=i(ri),Bue=n(ri,"P",{});var igt=s(Bue);Hur=r(igt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),igt.forEach(t),Uur=i(ri),Nc=n(ri,"P",{});var Uz=s(Nc);Jur=r(Uz,`Note:
Loading a model from its configuration file does `),xue=n(Uz,"STRONG",{});var dgt=s(xue);Yur=r(dgt,"not"),dgt.forEach(t),Kur=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kue=n(Uz,"CODE",{});var cgt=s(kue);Zur=r(cgt,"from_pretrained()"),cgt.forEach(t),e1r=r(Uz,"to load the model weights."),Uz.forEach(t),o1r=i(ri),Rue=n(ri,"P",{});var fgt=s(Rue);r1r=r(fgt,"Examples:"),fgt.forEach(t),t1r=i(ri),m(kA.$$.fragment,ri),ri.forEach(t),a1r=i(oi),yo=n(oi,"DIV",{class:!0});var Ca=s(yo);m(RA.$$.fragment,Ca),n1r=i(Ca),Sue=n(Ca,"P",{});var mgt=s(Sue);s1r=r(mgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mgt.forEach(t),l1r=i(Ca),Cn=n(Ca,"P",{});var iE=s(Cn);i1r=r(iE,"The model class to instantiate is selected based on the "),Pue=n(iE,"CODE",{});var ggt=s(Pue);d1r=r(ggt,"model_type"),ggt.forEach(t),c1r=r(iE,` property of the config object (either
passed as an argument or loaded from `),$ue=n(iE,"CODE",{});var hgt=s($ue);f1r=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),m1r=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(iE,"CODE",{});var pgt=s(Iue);g1r=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),h1r=r(iE,":"),iE.forEach(t),p1r=i(Ca),Due=n(Ca,"UL",{});var _gt=s(Due);yC=n(_gt,"LI",{});var NLe=s(yC);jue=n(NLe,"STRONG",{});var ugt=s(jue);_1r=r(ugt,"speech_to_text"),ugt.forEach(t),u1r=r(NLe," \u2014 "),VO=n(NLe,"A",{href:!0});var bgt=s(VO);b1r=r(bgt,"TFSpeech2TextForConditionalGeneration"),bgt.forEach(t),v1r=r(NLe," (Speech2Text model)"),NLe.forEach(t),_gt.forEach(t),T1r=i(Ca),Nue=n(Ca,"P",{});var vgt=s(Nue);F1r=r(vgt,"Examples:"),vgt.forEach(t),C1r=i(Ca),m(SA.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),exe=i(c),qc=n(c,"H2",{class:!0});var cRe=s(qc);wC=n(cRe,"A",{id:!0,class:!0,href:!0});var Tgt=s(wC);que=n(Tgt,"SPAN",{});var Fgt=s(que);m(PA.$$.fragment,Fgt),Fgt.forEach(t),Tgt.forEach(t),M1r=i(cRe),Gue=n(cRe,"SPAN",{});var Cgt=s(Gue);E1r=r(Cgt,"FlaxAutoModel"),Cgt.forEach(t),cRe.forEach(t),oxe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m($A.$$.fragment,ti),y1r=i(ti),Gc=n(ti,"P",{});var Jz=s(Gc);w1r=r(Jz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Oue=n(Jz,"CODE",{});var Mgt=s(Oue);A1r=r(Mgt,"from_pretrained()"),Mgt.forEach(t),L1r=r(Jz,"class method or the "),Xue=n(Jz,"CODE",{});var Egt=s(Xue);B1r=r(Egt,"from_config()"),Egt.forEach(t),x1r=r(Jz,`class
method.`),Jz.forEach(t),k1r=i(ti),IA=n(ti,"P",{});var fRe=s(IA);R1r=r(fRe,"This class cannot be instantiated directly using "),Vue=n(fRe,"CODE",{});var ygt=s(Vue);S1r=r(ygt,"__init__()"),ygt.forEach(t),P1r=r(fRe," (throws an error)."),fRe.forEach(t),$1r=i(ti),Ft=n(ti,"DIV",{class:!0});var ai=s(Ft);m(DA.$$.fragment,ai),I1r=i(ai),zue=n(ai,"P",{});var wgt=s(zue);D1r=r(wgt,"Instantiates one of the base model classes of the library from a configuration."),wgt.forEach(t),j1r=i(ai),Oc=n(ai,"P",{});var Yz=s(Oc);N1r=r(Yz,`Note:
Loading a model from its configuration file does `),Wue=n(Yz,"STRONG",{});var Agt=s(Wue);q1r=r(Agt,"not"),Agt.forEach(t),G1r=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Que=n(Yz,"CODE",{});var Lgt=s(Que);O1r=r(Lgt,"from_pretrained()"),Lgt.forEach(t),X1r=r(Yz,"to load the model weights."),Yz.forEach(t),V1r=i(ai),Hue=n(ai,"P",{});var Bgt=s(Hue);z1r=r(Bgt,"Examples:"),Bgt.forEach(t),W1r=i(ai),m(jA.$$.fragment,ai),ai.forEach(t),Q1r=i(ti),wo=n(ti,"DIV",{class:!0});var Ma=s(wo);m(NA.$$.fragment,Ma),H1r=i(Ma),Uue=n(Ma,"P",{});var xgt=s(Uue);U1r=r(xgt,"Instantiate one of the base model classes of the library from a pretrained model."),xgt.forEach(t),J1r=i(Ma),Mn=n(Ma,"P",{});var dE=s(Mn);Y1r=r(dE,"The model class to instantiate is selected based on the "),Jue=n(dE,"CODE",{});var kgt=s(Jue);K1r=r(kgt,"model_type"),kgt.forEach(t),Z1r=r(dE,` property of the config object (either
passed as an argument or loaded from `),Yue=n(dE,"CODE",{});var Rgt=s(Yue);ebr=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),obr=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(dE,"CODE",{});var Sgt=s(Kue);rbr=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),tbr=r(dE,":"),dE.forEach(t),abr=i(Ma),z=n(Ma,"UL",{});var Q=s(z);AC=n(Q,"LI",{});var qLe=s(AC);Zue=n(qLe,"STRONG",{});var Pgt=s(Zue);nbr=r(Pgt,"albert"),Pgt.forEach(t),sbr=r(qLe," \u2014 "),zO=n(qLe,"A",{href:!0});var $gt=s(zO);lbr=r($gt,"FlaxAlbertModel"),$gt.forEach(t),ibr=r(qLe," (ALBERT model)"),qLe.forEach(t),dbr=i(Q),LC=n(Q,"LI",{});var GLe=s(LC);e1e=n(GLe,"STRONG",{});var Igt=s(e1e);cbr=r(Igt,"bart"),Igt.forEach(t),fbr=r(GLe," \u2014 "),WO=n(GLe,"A",{href:!0});var Dgt=s(WO);mbr=r(Dgt,"FlaxBartModel"),Dgt.forEach(t),gbr=r(GLe," (BART model)"),GLe.forEach(t),hbr=i(Q),BC=n(Q,"LI",{});var OLe=s(BC);o1e=n(OLe,"STRONG",{});var jgt=s(o1e);pbr=r(jgt,"beit"),jgt.forEach(t),_br=r(OLe," \u2014 "),QO=n(OLe,"A",{href:!0});var Ngt=s(QO);ubr=r(Ngt,"FlaxBeitModel"),Ngt.forEach(t),bbr=r(OLe," (BEiT model)"),OLe.forEach(t),vbr=i(Q),xC=n(Q,"LI",{});var XLe=s(xC);r1e=n(XLe,"STRONG",{});var qgt=s(r1e);Tbr=r(qgt,"bert"),qgt.forEach(t),Fbr=r(XLe," \u2014 "),HO=n(XLe,"A",{href:!0});var Ggt=s(HO);Cbr=r(Ggt,"FlaxBertModel"),Ggt.forEach(t),Mbr=r(XLe," (BERT model)"),XLe.forEach(t),Ebr=i(Q),kC=n(Q,"LI",{});var VLe=s(kC);t1e=n(VLe,"STRONG",{});var Ogt=s(t1e);ybr=r(Ogt,"big_bird"),Ogt.forEach(t),wbr=r(VLe," \u2014 "),UO=n(VLe,"A",{href:!0});var Xgt=s(UO);Abr=r(Xgt,"FlaxBigBirdModel"),Xgt.forEach(t),Lbr=r(VLe," (BigBird model)"),VLe.forEach(t),Bbr=i(Q),RC=n(Q,"LI",{});var zLe=s(RC);a1e=n(zLe,"STRONG",{});var Vgt=s(a1e);xbr=r(Vgt,"blenderbot"),Vgt.forEach(t),kbr=r(zLe," \u2014 "),JO=n(zLe,"A",{href:!0});var zgt=s(JO);Rbr=r(zgt,"FlaxBlenderbotModel"),zgt.forEach(t),Sbr=r(zLe," (Blenderbot model)"),zLe.forEach(t),Pbr=i(Q),SC=n(Q,"LI",{});var WLe=s(SC);n1e=n(WLe,"STRONG",{});var Wgt=s(n1e);$br=r(Wgt,"blenderbot-small"),Wgt.forEach(t),Ibr=r(WLe," \u2014 "),YO=n(WLe,"A",{href:!0});var Qgt=s(YO);Dbr=r(Qgt,"FlaxBlenderbotSmallModel"),Qgt.forEach(t),jbr=r(WLe," (BlenderbotSmall model)"),WLe.forEach(t),Nbr=i(Q),PC=n(Q,"LI",{});var QLe=s(PC);s1e=n(QLe,"STRONG",{});var Hgt=s(s1e);qbr=r(Hgt,"clip"),Hgt.forEach(t),Gbr=r(QLe," \u2014 "),KO=n(QLe,"A",{href:!0});var Ugt=s(KO);Obr=r(Ugt,"FlaxCLIPModel"),Ugt.forEach(t),Xbr=r(QLe," (CLIP model)"),QLe.forEach(t),Vbr=i(Q),$C=n(Q,"LI",{});var HLe=s($C);l1e=n(HLe,"STRONG",{});var Jgt=s(l1e);zbr=r(Jgt,"distilbert"),Jgt.forEach(t),Wbr=r(HLe," \u2014 "),ZO=n(HLe,"A",{href:!0});var Ygt=s(ZO);Qbr=r(Ygt,"FlaxDistilBertModel"),Ygt.forEach(t),Hbr=r(HLe," (DistilBERT model)"),HLe.forEach(t),Ubr=i(Q),IC=n(Q,"LI",{});var ULe=s(IC);i1e=n(ULe,"STRONG",{});var Kgt=s(i1e);Jbr=r(Kgt,"electra"),Kgt.forEach(t),Ybr=r(ULe," \u2014 "),eX=n(ULe,"A",{href:!0});var Zgt=s(eX);Kbr=r(Zgt,"FlaxElectraModel"),Zgt.forEach(t),Zbr=r(ULe," (ELECTRA model)"),ULe.forEach(t),e5r=i(Q),DC=n(Q,"LI",{});var JLe=s(DC);d1e=n(JLe,"STRONG",{});var eht=s(d1e);o5r=r(eht,"gpt2"),eht.forEach(t),r5r=r(JLe," \u2014 "),oX=n(JLe,"A",{href:!0});var oht=s(oX);t5r=r(oht,"FlaxGPT2Model"),oht.forEach(t),a5r=r(JLe," (OpenAI GPT-2 model)"),JLe.forEach(t),n5r=i(Q),jC=n(Q,"LI",{});var YLe=s(jC);c1e=n(YLe,"STRONG",{});var rht=s(c1e);s5r=r(rht,"gpt_neo"),rht.forEach(t),l5r=r(YLe," \u2014 "),rX=n(YLe,"A",{href:!0});var tht=s(rX);i5r=r(tht,"FlaxGPTNeoModel"),tht.forEach(t),d5r=r(YLe," (GPT Neo model)"),YLe.forEach(t),c5r=i(Q),NC=n(Q,"LI",{});var KLe=s(NC);f1e=n(KLe,"STRONG",{});var aht=s(f1e);f5r=r(aht,"gptj"),aht.forEach(t),m5r=r(KLe," \u2014 "),tX=n(KLe,"A",{href:!0});var nht=s(tX);g5r=r(nht,"FlaxGPTJModel"),nht.forEach(t),h5r=r(KLe," (GPT-J model)"),KLe.forEach(t),p5r=i(Q),qC=n(Q,"LI",{});var ZLe=s(qC);m1e=n(ZLe,"STRONG",{});var sht=s(m1e);_5r=r(sht,"marian"),sht.forEach(t),u5r=r(ZLe," \u2014 "),aX=n(ZLe,"A",{href:!0});var lht=s(aX);b5r=r(lht,"FlaxMarianModel"),lht.forEach(t),v5r=r(ZLe," (Marian model)"),ZLe.forEach(t),T5r=i(Q),GC=n(Q,"LI",{});var e8e=s(GC);g1e=n(e8e,"STRONG",{});var iht=s(g1e);F5r=r(iht,"mbart"),iht.forEach(t),C5r=r(e8e," \u2014 "),nX=n(e8e,"A",{href:!0});var dht=s(nX);M5r=r(dht,"FlaxMBartModel"),dht.forEach(t),E5r=r(e8e," (mBART model)"),e8e.forEach(t),y5r=i(Q),OC=n(Q,"LI",{});var o8e=s(OC);h1e=n(o8e,"STRONG",{});var cht=s(h1e);w5r=r(cht,"mt5"),cht.forEach(t),A5r=r(o8e," \u2014 "),sX=n(o8e,"A",{href:!0});var fht=s(sX);L5r=r(fht,"FlaxMT5Model"),fht.forEach(t),B5r=r(o8e," (mT5 model)"),o8e.forEach(t),x5r=i(Q),XC=n(Q,"LI",{});var r8e=s(XC);p1e=n(r8e,"STRONG",{});var mht=s(p1e);k5r=r(mht,"pegasus"),mht.forEach(t),R5r=r(r8e," \u2014 "),lX=n(r8e,"A",{href:!0});var ght=s(lX);S5r=r(ght,"FlaxPegasusModel"),ght.forEach(t),P5r=r(r8e," (Pegasus model)"),r8e.forEach(t),$5r=i(Q),VC=n(Q,"LI",{});var t8e=s(VC);_1e=n(t8e,"STRONG",{});var hht=s(_1e);I5r=r(hht,"roberta"),hht.forEach(t),D5r=r(t8e," \u2014 "),iX=n(t8e,"A",{href:!0});var pht=s(iX);j5r=r(pht,"FlaxRobertaModel"),pht.forEach(t),N5r=r(t8e," (RoBERTa model)"),t8e.forEach(t),q5r=i(Q),zC=n(Q,"LI",{});var a8e=s(zC);u1e=n(a8e,"STRONG",{});var _ht=s(u1e);G5r=r(_ht,"roformer"),_ht.forEach(t),O5r=r(a8e," \u2014 "),dX=n(a8e,"A",{href:!0});var uht=s(dX);X5r=r(uht,"FlaxRoFormerModel"),uht.forEach(t),V5r=r(a8e," (RoFormer model)"),a8e.forEach(t),z5r=i(Q),WC=n(Q,"LI",{});var n8e=s(WC);b1e=n(n8e,"STRONG",{});var bht=s(b1e);W5r=r(bht,"t5"),bht.forEach(t),Q5r=r(n8e," \u2014 "),cX=n(n8e,"A",{href:!0});var vht=s(cX);H5r=r(vht,"FlaxT5Model"),vht.forEach(t),U5r=r(n8e," (T5 model)"),n8e.forEach(t),J5r=i(Q),QC=n(Q,"LI",{});var s8e=s(QC);v1e=n(s8e,"STRONG",{});var Tht=s(v1e);Y5r=r(Tht,"vision-text-dual-encoder"),Tht.forEach(t),K5r=r(s8e," \u2014 "),fX=n(s8e,"A",{href:!0});var Fht=s(fX);Z5r=r(Fht,"FlaxVisionTextDualEncoderModel"),Fht.forEach(t),e2r=r(s8e," (VisionTextDualEncoder model)"),s8e.forEach(t),o2r=i(Q),HC=n(Q,"LI",{});var l8e=s(HC);T1e=n(l8e,"STRONG",{});var Cht=s(T1e);r2r=r(Cht,"vit"),Cht.forEach(t),t2r=r(l8e," \u2014 "),mX=n(l8e,"A",{href:!0});var Mht=s(mX);a2r=r(Mht,"FlaxViTModel"),Mht.forEach(t),n2r=r(l8e," (ViT model)"),l8e.forEach(t),s2r=i(Q),UC=n(Q,"LI",{});var i8e=s(UC);F1e=n(i8e,"STRONG",{});var Eht=s(F1e);l2r=r(Eht,"wav2vec2"),Eht.forEach(t),i2r=r(i8e," \u2014 "),gX=n(i8e,"A",{href:!0});var yht=s(gX);d2r=r(yht,"FlaxWav2Vec2Model"),yht.forEach(t),c2r=r(i8e," (Wav2Vec2 model)"),i8e.forEach(t),f2r=i(Q),JC=n(Q,"LI",{});var d8e=s(JC);C1e=n(d8e,"STRONG",{});var wht=s(C1e);m2r=r(wht,"xglm"),wht.forEach(t),g2r=r(d8e," \u2014 "),hX=n(d8e,"A",{href:!0});var Aht=s(hX);h2r=r(Aht,"FlaxXGLMModel"),Aht.forEach(t),p2r=r(d8e," (XGLM model)"),d8e.forEach(t),Q.forEach(t),_2r=i(Ma),M1e=n(Ma,"P",{});var Lht=s(M1e);u2r=r(Lht,"Examples:"),Lht.forEach(t),b2r=i(Ma),m(qA.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),rxe=i(c),Xc=n(c,"H2",{class:!0});var mRe=s(Xc);YC=n(mRe,"A",{id:!0,class:!0,href:!0});var Bht=s(YC);E1e=n(Bht,"SPAN",{});var xht=s(E1e);m(GA.$$.fragment,xht),xht.forEach(t),Bht.forEach(t),v2r=i(mRe),y1e=n(mRe,"SPAN",{});var kht=s(y1e);T2r=r(kht,"FlaxAutoModelForCausalLM"),kht.forEach(t),mRe.forEach(t),txe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(OA.$$.fragment,ni),F2r=i(ni),Vc=n(ni,"P",{});var Kz=s(Vc);C2r=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),w1e=n(Kz,"CODE",{});var Rht=s(w1e);M2r=r(Rht,"from_pretrained()"),Rht.forEach(t),E2r=r(Kz,"class method or the "),A1e=n(Kz,"CODE",{});var Sht=s(A1e);y2r=r(Sht,"from_config()"),Sht.forEach(t),w2r=r(Kz,`class
method.`),Kz.forEach(t),A2r=i(ni),XA=n(ni,"P",{});var gRe=s(XA);L2r=r(gRe,"This class cannot be instantiated directly using "),L1e=n(gRe,"CODE",{});var Pht=s(L1e);B2r=r(Pht,"__init__()"),Pht.forEach(t),x2r=r(gRe," (throws an error)."),gRe.forEach(t),k2r=i(ni),Ct=n(ni,"DIV",{class:!0});var si=s(Ct);m(VA.$$.fragment,si),R2r=i(si),B1e=n(si,"P",{});var $ht=s(B1e);S2r=r($ht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$ht.forEach(t),P2r=i(si),zc=n(si,"P",{});var Zz=s(zc);$2r=r(Zz,`Note:
Loading a model from its configuration file does `),x1e=n(Zz,"STRONG",{});var Iht=s(x1e);I2r=r(Iht,"not"),Iht.forEach(t),D2r=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),k1e=n(Zz,"CODE",{});var Dht=s(k1e);j2r=r(Dht,"from_pretrained()"),Dht.forEach(t),N2r=r(Zz,"to load the model weights."),Zz.forEach(t),q2r=i(si),R1e=n(si,"P",{});var jht=s(R1e);G2r=r(jht,"Examples:"),jht.forEach(t),O2r=i(si),m(zA.$$.fragment,si),si.forEach(t),X2r=i(ni),Ao=n(ni,"DIV",{class:!0});var Ea=s(Ao);m(WA.$$.fragment,Ea),V2r=i(Ea),S1e=n(Ea,"P",{});var Nht=s(S1e);z2r=r(Nht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nht.forEach(t),W2r=i(Ea),En=n(Ea,"P",{});var cE=s(En);Q2r=r(cE,"The model class to instantiate is selected based on the "),P1e=n(cE,"CODE",{});var qht=s(P1e);H2r=r(qht,"model_type"),qht.forEach(t),U2r=r(cE,` property of the config object (either
passed as an argument or loaded from `),$1e=n(cE,"CODE",{});var Ght=s($1e);J2r=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),Y2r=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(cE,"CODE",{});var Oht=s(I1e);K2r=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),Z2r=r(cE,":"),cE.forEach(t),evr=i(Ea),yn=n(Ea,"UL",{});var fE=s(yn);KC=n(fE,"LI",{});var c8e=s(KC);D1e=n(c8e,"STRONG",{});var Xht=s(D1e);ovr=r(Xht,"gpt2"),Xht.forEach(t),rvr=r(c8e," \u2014 "),pX=n(c8e,"A",{href:!0});var Vht=s(pX);tvr=r(Vht,"FlaxGPT2LMHeadModel"),Vht.forEach(t),avr=r(c8e," (OpenAI GPT-2 model)"),c8e.forEach(t),nvr=i(fE),ZC=n(fE,"LI",{});var f8e=s(ZC);j1e=n(f8e,"STRONG",{});var zht=s(j1e);svr=r(zht,"gpt_neo"),zht.forEach(t),lvr=r(f8e," \u2014 "),_X=n(f8e,"A",{href:!0});var Wht=s(_X);ivr=r(Wht,"FlaxGPTNeoForCausalLM"),Wht.forEach(t),dvr=r(f8e," (GPT Neo model)"),f8e.forEach(t),cvr=i(fE),e4=n(fE,"LI",{});var m8e=s(e4);N1e=n(m8e,"STRONG",{});var Qht=s(N1e);fvr=r(Qht,"gptj"),Qht.forEach(t),mvr=r(m8e," \u2014 "),uX=n(m8e,"A",{href:!0});var Hht=s(uX);gvr=r(Hht,"FlaxGPTJForCausalLM"),Hht.forEach(t),hvr=r(m8e," (GPT-J model)"),m8e.forEach(t),pvr=i(fE),o4=n(fE,"LI",{});var g8e=s(o4);q1e=n(g8e,"STRONG",{});var Uht=s(q1e);_vr=r(Uht,"xglm"),Uht.forEach(t),uvr=r(g8e," \u2014 "),bX=n(g8e,"A",{href:!0});var Jht=s(bX);bvr=r(Jht,"FlaxXGLMForCausalLM"),Jht.forEach(t),vvr=r(g8e," (XGLM model)"),g8e.forEach(t),fE.forEach(t),Tvr=i(Ea),G1e=n(Ea,"P",{});var Yht=s(G1e);Fvr=r(Yht,"Examples:"),Yht.forEach(t),Cvr=i(Ea),m(QA.$$.fragment,Ea),Ea.forEach(t),ni.forEach(t),axe=i(c),Wc=n(c,"H2",{class:!0});var hRe=s(Wc);r4=n(hRe,"A",{id:!0,class:!0,href:!0});var Kht=s(r4);O1e=n(Kht,"SPAN",{});var Zht=s(O1e);m(HA.$$.fragment,Zht),Zht.forEach(t),Kht.forEach(t),Mvr=i(hRe),X1e=n(hRe,"SPAN",{});var ept=s(X1e);Evr=r(ept,"FlaxAutoModelForPreTraining"),ept.forEach(t),hRe.forEach(t),nxe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(UA.$$.fragment,li),yvr=i(li),Qc=n(li,"P",{});var eW=s(Qc);wvr=r(eW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),V1e=n(eW,"CODE",{});var opt=s(V1e);Avr=r(opt,"from_pretrained()"),opt.forEach(t),Lvr=r(eW,"class method or the "),z1e=n(eW,"CODE",{});var rpt=s(z1e);Bvr=r(rpt,"from_config()"),rpt.forEach(t),xvr=r(eW,`class
method.`),eW.forEach(t),kvr=i(li),JA=n(li,"P",{});var pRe=s(JA);Rvr=r(pRe,"This class cannot be instantiated directly using "),W1e=n(pRe,"CODE",{});var tpt=s(W1e);Svr=r(tpt,"__init__()"),tpt.forEach(t),Pvr=r(pRe," (throws an error)."),pRe.forEach(t),$vr=i(li),Mt=n(li,"DIV",{class:!0});var ii=s(Mt);m(YA.$$.fragment,ii),Ivr=i(ii),Q1e=n(ii,"P",{});var apt=s(Q1e);Dvr=r(apt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),apt.forEach(t),jvr=i(ii),Hc=n(ii,"P",{});var oW=s(Hc);Nvr=r(oW,`Note:
Loading a model from its configuration file does `),H1e=n(oW,"STRONG",{});var npt=s(H1e);qvr=r(npt,"not"),npt.forEach(t),Gvr=r(oW,` load the model weights. It only affects the
model\u2019s configuration. Use `),U1e=n(oW,"CODE",{});var spt=s(U1e);Ovr=r(spt,"from_pretrained()"),spt.forEach(t),Xvr=r(oW,"to load the model weights."),oW.forEach(t),Vvr=i(ii),J1e=n(ii,"P",{});var lpt=s(J1e);zvr=r(lpt,"Examples:"),lpt.forEach(t),Wvr=i(ii),m(KA.$$.fragment,ii),ii.forEach(t),Qvr=i(li),Lo=n(li,"DIV",{class:!0});var ya=s(Lo);m(ZA.$$.fragment,ya),Hvr=i(ya),Y1e=n(ya,"P",{});var ipt=s(Y1e);Uvr=r(ipt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ipt.forEach(t),Jvr=i(ya),wn=n(ya,"P",{});var mE=s(wn);Yvr=r(mE,"The model class to instantiate is selected based on the "),K1e=n(mE,"CODE",{});var dpt=s(K1e);Kvr=r(dpt,"model_type"),dpt.forEach(t),Zvr=r(mE,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(mE,"CODE",{});var cpt=s(Z1e);eTr=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),oTr=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(mE,"CODE",{});var fpt=s(ebe);rTr=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),tTr=r(mE,":"),mE.forEach(t),aTr=i(ya),fe=n(ya,"UL",{});var _e=s(fe);t4=n(_e,"LI",{});var h8e=s(t4);obe=n(h8e,"STRONG",{});var mpt=s(obe);nTr=r(mpt,"albert"),mpt.forEach(t),sTr=r(h8e," \u2014 "),vX=n(h8e,"A",{href:!0});var gpt=s(vX);lTr=r(gpt,"FlaxAlbertForPreTraining"),gpt.forEach(t),iTr=r(h8e," (ALBERT model)"),h8e.forEach(t),dTr=i(_e),a4=n(_e,"LI",{});var p8e=s(a4);rbe=n(p8e,"STRONG",{});var hpt=s(rbe);cTr=r(hpt,"bart"),hpt.forEach(t),fTr=r(p8e," \u2014 "),TX=n(p8e,"A",{href:!0});var ppt=s(TX);mTr=r(ppt,"FlaxBartForConditionalGeneration"),ppt.forEach(t),gTr=r(p8e," (BART model)"),p8e.forEach(t),hTr=i(_e),n4=n(_e,"LI",{});var _8e=s(n4);tbe=n(_8e,"STRONG",{});var _pt=s(tbe);pTr=r(_pt,"bert"),_pt.forEach(t),_Tr=r(_8e," \u2014 "),FX=n(_8e,"A",{href:!0});var upt=s(FX);uTr=r(upt,"FlaxBertForPreTraining"),upt.forEach(t),bTr=r(_8e," (BERT model)"),_8e.forEach(t),vTr=i(_e),s4=n(_e,"LI",{});var u8e=s(s4);abe=n(u8e,"STRONG",{});var bpt=s(abe);TTr=r(bpt,"big_bird"),bpt.forEach(t),FTr=r(u8e," \u2014 "),CX=n(u8e,"A",{href:!0});var vpt=s(CX);CTr=r(vpt,"FlaxBigBirdForPreTraining"),vpt.forEach(t),MTr=r(u8e," (BigBird model)"),u8e.forEach(t),ETr=i(_e),l4=n(_e,"LI",{});var b8e=s(l4);nbe=n(b8e,"STRONG",{});var Tpt=s(nbe);yTr=r(Tpt,"electra"),Tpt.forEach(t),wTr=r(b8e," \u2014 "),MX=n(b8e,"A",{href:!0});var Fpt=s(MX);ATr=r(Fpt,"FlaxElectraForPreTraining"),Fpt.forEach(t),LTr=r(b8e," (ELECTRA model)"),b8e.forEach(t),BTr=i(_e),i4=n(_e,"LI",{});var v8e=s(i4);sbe=n(v8e,"STRONG",{});var Cpt=s(sbe);xTr=r(Cpt,"mbart"),Cpt.forEach(t),kTr=r(v8e," \u2014 "),EX=n(v8e,"A",{href:!0});var Mpt=s(EX);RTr=r(Mpt,"FlaxMBartForConditionalGeneration"),Mpt.forEach(t),STr=r(v8e," (mBART model)"),v8e.forEach(t),PTr=i(_e),d4=n(_e,"LI",{});var T8e=s(d4);lbe=n(T8e,"STRONG",{});var Ept=s(lbe);$Tr=r(Ept,"mt5"),Ept.forEach(t),ITr=r(T8e," \u2014 "),yX=n(T8e,"A",{href:!0});var ypt=s(yX);DTr=r(ypt,"FlaxMT5ForConditionalGeneration"),ypt.forEach(t),jTr=r(T8e," (mT5 model)"),T8e.forEach(t),NTr=i(_e),c4=n(_e,"LI",{});var F8e=s(c4);ibe=n(F8e,"STRONG",{});var wpt=s(ibe);qTr=r(wpt,"roberta"),wpt.forEach(t),GTr=r(F8e," \u2014 "),wX=n(F8e,"A",{href:!0});var Apt=s(wX);OTr=r(Apt,"FlaxRobertaForMaskedLM"),Apt.forEach(t),XTr=r(F8e," (RoBERTa model)"),F8e.forEach(t),VTr=i(_e),f4=n(_e,"LI",{});var C8e=s(f4);dbe=n(C8e,"STRONG",{});var Lpt=s(dbe);zTr=r(Lpt,"roformer"),Lpt.forEach(t),WTr=r(C8e," \u2014 "),AX=n(C8e,"A",{href:!0});var Bpt=s(AX);QTr=r(Bpt,"FlaxRoFormerForMaskedLM"),Bpt.forEach(t),HTr=r(C8e," (RoFormer model)"),C8e.forEach(t),UTr=i(_e),m4=n(_e,"LI",{});var M8e=s(m4);cbe=n(M8e,"STRONG",{});var xpt=s(cbe);JTr=r(xpt,"t5"),xpt.forEach(t),YTr=r(M8e," \u2014 "),LX=n(M8e,"A",{href:!0});var kpt=s(LX);KTr=r(kpt,"FlaxT5ForConditionalGeneration"),kpt.forEach(t),ZTr=r(M8e," (T5 model)"),M8e.forEach(t),eFr=i(_e),g4=n(_e,"LI",{});var E8e=s(g4);fbe=n(E8e,"STRONG",{});var Rpt=s(fbe);oFr=r(Rpt,"wav2vec2"),Rpt.forEach(t),rFr=r(E8e," \u2014 "),BX=n(E8e,"A",{href:!0});var Spt=s(BX);tFr=r(Spt,"FlaxWav2Vec2ForPreTraining"),Spt.forEach(t),aFr=r(E8e," (Wav2Vec2 model)"),E8e.forEach(t),_e.forEach(t),nFr=i(ya),mbe=n(ya,"P",{});var Ppt=s(mbe);sFr=r(Ppt,"Examples:"),Ppt.forEach(t),lFr=i(ya),m(e0.$$.fragment,ya),ya.forEach(t),li.forEach(t),sxe=i(c),Uc=n(c,"H2",{class:!0});var _Re=s(Uc);h4=n(_Re,"A",{id:!0,class:!0,href:!0});var $pt=s(h4);gbe=n($pt,"SPAN",{});var Ipt=s(gbe);m(o0.$$.fragment,Ipt),Ipt.forEach(t),$pt.forEach(t),iFr=i(_Re),hbe=n(_Re,"SPAN",{});var Dpt=s(hbe);dFr=r(Dpt,"FlaxAutoModelForMaskedLM"),Dpt.forEach(t),_Re.forEach(t),lxe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(r0.$$.fragment,di),cFr=i(di),Jc=n(di,"P",{});var rW=s(Jc);fFr=r(rW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pbe=n(rW,"CODE",{});var jpt=s(pbe);mFr=r(jpt,"from_pretrained()"),jpt.forEach(t),gFr=r(rW,"class method or the "),_be=n(rW,"CODE",{});var Npt=s(_be);hFr=r(Npt,"from_config()"),Npt.forEach(t),pFr=r(rW,`class
method.`),rW.forEach(t),_Fr=i(di),t0=n(di,"P",{});var uRe=s(t0);uFr=r(uRe,"This class cannot be instantiated directly using "),ube=n(uRe,"CODE",{});var qpt=s(ube);bFr=r(qpt,"__init__()"),qpt.forEach(t),vFr=r(uRe," (throws an error)."),uRe.forEach(t),TFr=i(di),Et=n(di,"DIV",{class:!0});var ci=s(Et);m(a0.$$.fragment,ci),FFr=i(ci),bbe=n(ci,"P",{});var Gpt=s(bbe);CFr=r(Gpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Gpt.forEach(t),MFr=i(ci),Yc=n(ci,"P",{});var tW=s(Yc);EFr=r(tW,`Note:
Loading a model from its configuration file does `),vbe=n(tW,"STRONG",{});var Opt=s(vbe);yFr=r(Opt,"not"),Opt.forEach(t),wFr=r(tW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tbe=n(tW,"CODE",{});var Xpt=s(Tbe);AFr=r(Xpt,"from_pretrained()"),Xpt.forEach(t),LFr=r(tW,"to load the model weights."),tW.forEach(t),BFr=i(ci),Fbe=n(ci,"P",{});var Vpt=s(Fbe);xFr=r(Vpt,"Examples:"),Vpt.forEach(t),kFr=i(ci),m(n0.$$.fragment,ci),ci.forEach(t),RFr=i(di),Bo=n(di,"DIV",{class:!0});var wa=s(Bo);m(s0.$$.fragment,wa),SFr=i(wa),Cbe=n(wa,"P",{});var zpt=s(Cbe);PFr=r(zpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zpt.forEach(t),$Fr=i(wa),An=n(wa,"P",{});var gE=s(An);IFr=r(gE,"The model class to instantiate is selected based on the "),Mbe=n(gE,"CODE",{});var Wpt=s(Mbe);DFr=r(Wpt,"model_type"),Wpt.forEach(t),jFr=r(gE,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(gE,"CODE",{});var Qpt=s(Ebe);NFr=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),qFr=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(gE,"CODE",{});var Hpt=s(ybe);GFr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),OFr=r(gE,":"),gE.forEach(t),XFr=i(wa),ve=n(wa,"UL",{});var oo=s(ve);p4=n(oo,"LI",{});var y8e=s(p4);wbe=n(y8e,"STRONG",{});var Upt=s(wbe);VFr=r(Upt,"albert"),Upt.forEach(t),zFr=r(y8e," \u2014 "),xX=n(y8e,"A",{href:!0});var Jpt=s(xX);WFr=r(Jpt,"FlaxAlbertForMaskedLM"),Jpt.forEach(t),QFr=r(y8e," (ALBERT model)"),y8e.forEach(t),HFr=i(oo),_4=n(oo,"LI",{});var w8e=s(_4);Abe=n(w8e,"STRONG",{});var Ypt=s(Abe);UFr=r(Ypt,"bart"),Ypt.forEach(t),JFr=r(w8e," \u2014 "),kX=n(w8e,"A",{href:!0});var Kpt=s(kX);YFr=r(Kpt,"FlaxBartForConditionalGeneration"),Kpt.forEach(t),KFr=r(w8e," (BART model)"),w8e.forEach(t),ZFr=i(oo),u4=n(oo,"LI",{});var A8e=s(u4);Lbe=n(A8e,"STRONG",{});var Zpt=s(Lbe);e9r=r(Zpt,"bert"),Zpt.forEach(t),o9r=r(A8e," \u2014 "),RX=n(A8e,"A",{href:!0});var e_t=s(RX);r9r=r(e_t,"FlaxBertForMaskedLM"),e_t.forEach(t),t9r=r(A8e," (BERT model)"),A8e.forEach(t),a9r=i(oo),b4=n(oo,"LI",{});var L8e=s(b4);Bbe=n(L8e,"STRONG",{});var o_t=s(Bbe);n9r=r(o_t,"big_bird"),o_t.forEach(t),s9r=r(L8e," \u2014 "),SX=n(L8e,"A",{href:!0});var r_t=s(SX);l9r=r(r_t,"FlaxBigBirdForMaskedLM"),r_t.forEach(t),i9r=r(L8e," (BigBird model)"),L8e.forEach(t),d9r=i(oo),v4=n(oo,"LI",{});var B8e=s(v4);xbe=n(B8e,"STRONG",{});var t_t=s(xbe);c9r=r(t_t,"distilbert"),t_t.forEach(t),f9r=r(B8e," \u2014 "),PX=n(B8e,"A",{href:!0});var a_t=s(PX);m9r=r(a_t,"FlaxDistilBertForMaskedLM"),a_t.forEach(t),g9r=r(B8e," (DistilBERT model)"),B8e.forEach(t),h9r=i(oo),T4=n(oo,"LI",{});var x8e=s(T4);kbe=n(x8e,"STRONG",{});var n_t=s(kbe);p9r=r(n_t,"electra"),n_t.forEach(t),_9r=r(x8e," \u2014 "),$X=n(x8e,"A",{href:!0});var s_t=s($X);u9r=r(s_t,"FlaxElectraForMaskedLM"),s_t.forEach(t),b9r=r(x8e," (ELECTRA model)"),x8e.forEach(t),v9r=i(oo),F4=n(oo,"LI",{});var k8e=s(F4);Rbe=n(k8e,"STRONG",{});var l_t=s(Rbe);T9r=r(l_t,"mbart"),l_t.forEach(t),F9r=r(k8e," \u2014 "),IX=n(k8e,"A",{href:!0});var i_t=s(IX);C9r=r(i_t,"FlaxMBartForConditionalGeneration"),i_t.forEach(t),M9r=r(k8e," (mBART model)"),k8e.forEach(t),E9r=i(oo),C4=n(oo,"LI",{});var R8e=s(C4);Sbe=n(R8e,"STRONG",{});var d_t=s(Sbe);y9r=r(d_t,"roberta"),d_t.forEach(t),w9r=r(R8e," \u2014 "),DX=n(R8e,"A",{href:!0});var c_t=s(DX);A9r=r(c_t,"FlaxRobertaForMaskedLM"),c_t.forEach(t),L9r=r(R8e," (RoBERTa model)"),R8e.forEach(t),B9r=i(oo),M4=n(oo,"LI",{});var S8e=s(M4);Pbe=n(S8e,"STRONG",{});var f_t=s(Pbe);x9r=r(f_t,"roformer"),f_t.forEach(t),k9r=r(S8e," \u2014 "),jX=n(S8e,"A",{href:!0});var m_t=s(jX);R9r=r(m_t,"FlaxRoFormerForMaskedLM"),m_t.forEach(t),S9r=r(S8e," (RoFormer model)"),S8e.forEach(t),oo.forEach(t),P9r=i(wa),$be=n(wa,"P",{});var g_t=s($be);$9r=r(g_t,"Examples:"),g_t.forEach(t),I9r=i(wa),m(l0.$$.fragment,wa),wa.forEach(t),di.forEach(t),ixe=i(c),Kc=n(c,"H2",{class:!0});var bRe=s(Kc);E4=n(bRe,"A",{id:!0,class:!0,href:!0});var h_t=s(E4);Ibe=n(h_t,"SPAN",{});var p_t=s(Ibe);m(i0.$$.fragment,p_t),p_t.forEach(t),h_t.forEach(t),D9r=i(bRe),Dbe=n(bRe,"SPAN",{});var __t=s(Dbe);j9r=r(__t,"FlaxAutoModelForSeq2SeqLM"),__t.forEach(t),bRe.forEach(t),dxe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(d0.$$.fragment,fi),N9r=i(fi),Zc=n(fi,"P",{});var aW=s(Zc);q9r=r(aW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jbe=n(aW,"CODE",{});var u_t=s(jbe);G9r=r(u_t,"from_pretrained()"),u_t.forEach(t),O9r=r(aW,"class method or the "),Nbe=n(aW,"CODE",{});var b_t=s(Nbe);X9r=r(b_t,"from_config()"),b_t.forEach(t),V9r=r(aW,`class
method.`),aW.forEach(t),z9r=i(fi),c0=n(fi,"P",{});var vRe=s(c0);W9r=r(vRe,"This class cannot be instantiated directly using "),qbe=n(vRe,"CODE",{});var v_t=s(qbe);Q9r=r(v_t,"__init__()"),v_t.forEach(t),H9r=r(vRe," (throws an error)."),vRe.forEach(t),U9r=i(fi),yt=n(fi,"DIV",{class:!0});var mi=s(yt);m(f0.$$.fragment,mi),J9r=i(mi),Gbe=n(mi,"P",{});var T_t=s(Gbe);Y9r=r(T_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T_t.forEach(t),K9r=i(mi),ef=n(mi,"P",{});var nW=s(ef);Z9r=r(nW,`Note:
Loading a model from its configuration file does `),Obe=n(nW,"STRONG",{});var F_t=s(Obe);eCr=r(F_t,"not"),F_t.forEach(t),oCr=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xbe=n(nW,"CODE",{});var C_t=s(Xbe);rCr=r(C_t,"from_pretrained()"),C_t.forEach(t),tCr=r(nW,"to load the model weights."),nW.forEach(t),aCr=i(mi),Vbe=n(mi,"P",{});var M_t=s(Vbe);nCr=r(M_t,"Examples:"),M_t.forEach(t),sCr=i(mi),m(m0.$$.fragment,mi),mi.forEach(t),lCr=i(fi),xo=n(fi,"DIV",{class:!0});var Aa=s(xo);m(g0.$$.fragment,Aa),iCr=i(Aa),zbe=n(Aa,"P",{});var E_t=s(zbe);dCr=r(E_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),E_t.forEach(t),cCr=i(Aa),Ln=n(Aa,"P",{});var hE=s(Ln);fCr=r(hE,"The model class to instantiate is selected based on the "),Wbe=n(hE,"CODE",{});var y_t=s(Wbe);mCr=r(y_t,"model_type"),y_t.forEach(t),gCr=r(hE,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(hE,"CODE",{});var w_t=s(Qbe);hCr=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),pCr=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(hE,"CODE",{});var A_t=s(Hbe);_Cr=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),uCr=r(hE,":"),hE.forEach(t),bCr=i(Aa),Te=n(Aa,"UL",{});var ro=s(Te);y4=n(ro,"LI",{});var P8e=s(y4);Ube=n(P8e,"STRONG",{});var L_t=s(Ube);vCr=r(L_t,"bart"),L_t.forEach(t),TCr=r(P8e," \u2014 "),NX=n(P8e,"A",{href:!0});var B_t=s(NX);FCr=r(B_t,"FlaxBartForConditionalGeneration"),B_t.forEach(t),CCr=r(P8e," (BART model)"),P8e.forEach(t),MCr=i(ro),w4=n(ro,"LI",{});var $8e=s(w4);Jbe=n($8e,"STRONG",{});var x_t=s(Jbe);ECr=r(x_t,"blenderbot"),x_t.forEach(t),yCr=r($8e," \u2014 "),qX=n($8e,"A",{href:!0});var k_t=s(qX);wCr=r(k_t,"FlaxBlenderbotForConditionalGeneration"),k_t.forEach(t),ACr=r($8e," (Blenderbot model)"),$8e.forEach(t),LCr=i(ro),A4=n(ro,"LI",{});var I8e=s(A4);Ybe=n(I8e,"STRONG",{});var R_t=s(Ybe);BCr=r(R_t,"blenderbot-small"),R_t.forEach(t),xCr=r(I8e," \u2014 "),GX=n(I8e,"A",{href:!0});var S_t=s(GX);kCr=r(S_t,"FlaxBlenderbotSmallForConditionalGeneration"),S_t.forEach(t),RCr=r(I8e," (BlenderbotSmall model)"),I8e.forEach(t),SCr=i(ro),L4=n(ro,"LI",{});var D8e=s(L4);Kbe=n(D8e,"STRONG",{});var P_t=s(Kbe);PCr=r(P_t,"encoder-decoder"),P_t.forEach(t),$Cr=r(D8e," \u2014 "),OX=n(D8e,"A",{href:!0});var $_t=s(OX);ICr=r($_t,"FlaxEncoderDecoderModel"),$_t.forEach(t),DCr=r(D8e," (Encoder decoder model)"),D8e.forEach(t),jCr=i(ro),B4=n(ro,"LI",{});var j8e=s(B4);Zbe=n(j8e,"STRONG",{});var I_t=s(Zbe);NCr=r(I_t,"marian"),I_t.forEach(t),qCr=r(j8e," \u2014 "),XX=n(j8e,"A",{href:!0});var D_t=s(XX);GCr=r(D_t,"FlaxMarianMTModel"),D_t.forEach(t),OCr=r(j8e," (Marian model)"),j8e.forEach(t),XCr=i(ro),x4=n(ro,"LI",{});var N8e=s(x4);e5e=n(N8e,"STRONG",{});var j_t=s(e5e);VCr=r(j_t,"mbart"),j_t.forEach(t),zCr=r(N8e," \u2014 "),VX=n(N8e,"A",{href:!0});var N_t=s(VX);WCr=r(N_t,"FlaxMBartForConditionalGeneration"),N_t.forEach(t),QCr=r(N8e," (mBART model)"),N8e.forEach(t),HCr=i(ro),k4=n(ro,"LI",{});var q8e=s(k4);o5e=n(q8e,"STRONG",{});var q_t=s(o5e);UCr=r(q_t,"mt5"),q_t.forEach(t),JCr=r(q8e," \u2014 "),zX=n(q8e,"A",{href:!0});var G_t=s(zX);YCr=r(G_t,"FlaxMT5ForConditionalGeneration"),G_t.forEach(t),KCr=r(q8e," (mT5 model)"),q8e.forEach(t),ZCr=i(ro),R4=n(ro,"LI",{});var G8e=s(R4);r5e=n(G8e,"STRONG",{});var O_t=s(r5e);e4r=r(O_t,"pegasus"),O_t.forEach(t),o4r=r(G8e," \u2014 "),WX=n(G8e,"A",{href:!0});var X_t=s(WX);r4r=r(X_t,"FlaxPegasusForConditionalGeneration"),X_t.forEach(t),t4r=r(G8e," (Pegasus model)"),G8e.forEach(t),a4r=i(ro),S4=n(ro,"LI",{});var O8e=s(S4);t5e=n(O8e,"STRONG",{});var V_t=s(t5e);n4r=r(V_t,"t5"),V_t.forEach(t),s4r=r(O8e," \u2014 "),QX=n(O8e,"A",{href:!0});var z_t=s(QX);l4r=r(z_t,"FlaxT5ForConditionalGeneration"),z_t.forEach(t),i4r=r(O8e," (T5 model)"),O8e.forEach(t),ro.forEach(t),d4r=i(Aa),a5e=n(Aa,"P",{});var W_t=s(a5e);c4r=r(W_t,"Examples:"),W_t.forEach(t),f4r=i(Aa),m(h0.$$.fragment,Aa),Aa.forEach(t),fi.forEach(t),cxe=i(c),of=n(c,"H2",{class:!0});var TRe=s(of);P4=n(TRe,"A",{id:!0,class:!0,href:!0});var Q_t=s(P4);n5e=n(Q_t,"SPAN",{});var H_t=s(n5e);m(p0.$$.fragment,H_t),H_t.forEach(t),Q_t.forEach(t),m4r=i(TRe),s5e=n(TRe,"SPAN",{});var U_t=s(s5e);g4r=r(U_t,"FlaxAutoModelForSequenceClassification"),U_t.forEach(t),TRe.forEach(t),fxe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(_0.$$.fragment,gi),h4r=i(gi),rf=n(gi,"P",{});var sW=s(rf);p4r=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),l5e=n(sW,"CODE",{});var J_t=s(l5e);_4r=r(J_t,"from_pretrained()"),J_t.forEach(t),u4r=r(sW,"class method or the "),i5e=n(sW,"CODE",{});var Y_t=s(i5e);b4r=r(Y_t,"from_config()"),Y_t.forEach(t),v4r=r(sW,`class
method.`),sW.forEach(t),T4r=i(gi),u0=n(gi,"P",{});var FRe=s(u0);F4r=r(FRe,"This class cannot be instantiated directly using "),d5e=n(FRe,"CODE",{});var K_t=s(d5e);C4r=r(K_t,"__init__()"),K_t.forEach(t),M4r=r(FRe," (throws an error)."),FRe.forEach(t),E4r=i(gi),wt=n(gi,"DIV",{class:!0});var hi=s(wt);m(b0.$$.fragment,hi),y4r=i(hi),c5e=n(hi,"P",{});var Z_t=s(c5e);w4r=r(Z_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z_t.forEach(t),A4r=i(hi),tf=n(hi,"P",{});var lW=s(tf);L4r=r(lW,`Note:
Loading a model from its configuration file does `),f5e=n(lW,"STRONG",{});var eut=s(f5e);B4r=r(eut,"not"),eut.forEach(t),x4r=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),m5e=n(lW,"CODE",{});var out=s(m5e);k4r=r(out,"from_pretrained()"),out.forEach(t),R4r=r(lW,"to load the model weights."),lW.forEach(t),S4r=i(hi),g5e=n(hi,"P",{});var rut=s(g5e);P4r=r(rut,"Examples:"),rut.forEach(t),$4r=i(hi),m(v0.$$.fragment,hi),hi.forEach(t),I4r=i(gi),ko=n(gi,"DIV",{class:!0});var La=s(ko);m(T0.$$.fragment,La),D4r=i(La),h5e=n(La,"P",{});var tut=s(h5e);j4r=r(tut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tut.forEach(t),N4r=i(La),Bn=n(La,"P",{});var pE=s(Bn);q4r=r(pE,"The model class to instantiate is selected based on the "),p5e=n(pE,"CODE",{});var aut=s(p5e);G4r=r(aut,"model_type"),aut.forEach(t),O4r=r(pE,` property of the config object (either
passed as an argument or loaded from `),_5e=n(pE,"CODE",{});var nut=s(_5e);X4r=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),V4r=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(pE,"CODE",{});var sut=s(u5e);z4r=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),W4r=r(pE,":"),pE.forEach(t),Q4r=i(La),Fe=n(La,"UL",{});var to=s(Fe);$4=n(to,"LI",{});var X8e=s($4);b5e=n(X8e,"STRONG",{});var lut=s(b5e);H4r=r(lut,"albert"),lut.forEach(t),U4r=r(X8e," \u2014 "),HX=n(X8e,"A",{href:!0});var iut=s(HX);J4r=r(iut,"FlaxAlbertForSequenceClassification"),iut.forEach(t),Y4r=r(X8e," (ALBERT model)"),X8e.forEach(t),K4r=i(to),I4=n(to,"LI",{});var V8e=s(I4);v5e=n(V8e,"STRONG",{});var dut=s(v5e);Z4r=r(dut,"bart"),dut.forEach(t),eMr=r(V8e," \u2014 "),UX=n(V8e,"A",{href:!0});var cut=s(UX);oMr=r(cut,"FlaxBartForSequenceClassification"),cut.forEach(t),rMr=r(V8e," (BART model)"),V8e.forEach(t),tMr=i(to),D4=n(to,"LI",{});var z8e=s(D4);T5e=n(z8e,"STRONG",{});var fut=s(T5e);aMr=r(fut,"bert"),fut.forEach(t),nMr=r(z8e," \u2014 "),JX=n(z8e,"A",{href:!0});var mut=s(JX);sMr=r(mut,"FlaxBertForSequenceClassification"),mut.forEach(t),lMr=r(z8e," (BERT model)"),z8e.forEach(t),iMr=i(to),j4=n(to,"LI",{});var W8e=s(j4);F5e=n(W8e,"STRONG",{});var gut=s(F5e);dMr=r(gut,"big_bird"),gut.forEach(t),cMr=r(W8e," \u2014 "),YX=n(W8e,"A",{href:!0});var hut=s(YX);fMr=r(hut,"FlaxBigBirdForSequenceClassification"),hut.forEach(t),mMr=r(W8e," (BigBird model)"),W8e.forEach(t),gMr=i(to),N4=n(to,"LI",{});var Q8e=s(N4);C5e=n(Q8e,"STRONG",{});var put=s(C5e);hMr=r(put,"distilbert"),put.forEach(t),pMr=r(Q8e," \u2014 "),KX=n(Q8e,"A",{href:!0});var _ut=s(KX);_Mr=r(_ut,"FlaxDistilBertForSequenceClassification"),_ut.forEach(t),uMr=r(Q8e," (DistilBERT model)"),Q8e.forEach(t),bMr=i(to),q4=n(to,"LI",{});var H8e=s(q4);M5e=n(H8e,"STRONG",{});var uut=s(M5e);vMr=r(uut,"electra"),uut.forEach(t),TMr=r(H8e," \u2014 "),ZX=n(H8e,"A",{href:!0});var but=s(ZX);FMr=r(but,"FlaxElectraForSequenceClassification"),but.forEach(t),CMr=r(H8e," (ELECTRA model)"),H8e.forEach(t),MMr=i(to),G4=n(to,"LI",{});var U8e=s(G4);E5e=n(U8e,"STRONG",{});var vut=s(E5e);EMr=r(vut,"mbart"),vut.forEach(t),yMr=r(U8e," \u2014 "),eV=n(U8e,"A",{href:!0});var Tut=s(eV);wMr=r(Tut,"FlaxMBartForSequenceClassification"),Tut.forEach(t),AMr=r(U8e," (mBART model)"),U8e.forEach(t),LMr=i(to),O4=n(to,"LI",{});var J8e=s(O4);y5e=n(J8e,"STRONG",{});var Fut=s(y5e);BMr=r(Fut,"roberta"),Fut.forEach(t),xMr=r(J8e," \u2014 "),oV=n(J8e,"A",{href:!0});var Cut=s(oV);kMr=r(Cut,"FlaxRobertaForSequenceClassification"),Cut.forEach(t),RMr=r(J8e," (RoBERTa model)"),J8e.forEach(t),SMr=i(to),X4=n(to,"LI",{});var Y8e=s(X4);w5e=n(Y8e,"STRONG",{});var Mut=s(w5e);PMr=r(Mut,"roformer"),Mut.forEach(t),$Mr=r(Y8e," \u2014 "),rV=n(Y8e,"A",{href:!0});var Eut=s(rV);IMr=r(Eut,"FlaxRoFormerForSequenceClassification"),Eut.forEach(t),DMr=r(Y8e," (RoFormer model)"),Y8e.forEach(t),to.forEach(t),jMr=i(La),A5e=n(La,"P",{});var yut=s(A5e);NMr=r(yut,"Examples:"),yut.forEach(t),qMr=i(La),m(F0.$$.fragment,La),La.forEach(t),gi.forEach(t),mxe=i(c),af=n(c,"H2",{class:!0});var CRe=s(af);V4=n(CRe,"A",{id:!0,class:!0,href:!0});var wut=s(V4);L5e=n(wut,"SPAN",{});var Aut=s(L5e);m(C0.$$.fragment,Aut),Aut.forEach(t),wut.forEach(t),GMr=i(CRe),B5e=n(CRe,"SPAN",{});var Lut=s(B5e);OMr=r(Lut,"FlaxAutoModelForQuestionAnswering"),Lut.forEach(t),CRe.forEach(t),gxe=i(c),Pr=n(c,"DIV",{class:!0});var pi=s(Pr);m(M0.$$.fragment,pi),XMr=i(pi),nf=n(pi,"P",{});var iW=s(nf);VMr=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),x5e=n(iW,"CODE",{});var But=s(x5e);zMr=r(But,"from_pretrained()"),But.forEach(t),WMr=r(iW,"class method or the "),k5e=n(iW,"CODE",{});var xut=s(k5e);QMr=r(xut,"from_config()"),xut.forEach(t),HMr=r(iW,`class
method.`),iW.forEach(t),UMr=i(pi),E0=n(pi,"P",{});var MRe=s(E0);JMr=r(MRe,"This class cannot be instantiated directly using "),R5e=n(MRe,"CODE",{});var kut=s(R5e);YMr=r(kut,"__init__()"),kut.forEach(t),KMr=r(MRe," (throws an error)."),MRe.forEach(t),ZMr=i(pi),At=n(pi,"DIV",{class:!0});var _i=s(At);m(y0.$$.fragment,_i),eEr=i(_i),S5e=n(_i,"P",{});var Rut=s(S5e);oEr=r(Rut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rut.forEach(t),rEr=i(_i),sf=n(_i,"P",{});var dW=s(sf);tEr=r(dW,`Note:
Loading a model from its configuration file does `),P5e=n(dW,"STRONG",{});var Sut=s(P5e);aEr=r(Sut,"not"),Sut.forEach(t),nEr=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$5e=n(dW,"CODE",{});var Put=s($5e);sEr=r(Put,"from_pretrained()"),Put.forEach(t),lEr=r(dW,"to load the model weights."),dW.forEach(t),iEr=i(_i),I5e=n(_i,"P",{});var $ut=s(I5e);dEr=r($ut,"Examples:"),$ut.forEach(t),cEr=i(_i),m(w0.$$.fragment,_i),_i.forEach(t),fEr=i(pi),Ro=n(pi,"DIV",{class:!0});var Ba=s(Ro);m(A0.$$.fragment,Ba),mEr=i(Ba),D5e=n(Ba,"P",{});var Iut=s(D5e);gEr=r(Iut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Iut.forEach(t),hEr=i(Ba),xn=n(Ba,"P",{});var _E=s(xn);pEr=r(_E,"The model class to instantiate is selected based on the "),j5e=n(_E,"CODE",{});var Dut=s(j5e);_Er=r(Dut,"model_type"),Dut.forEach(t),uEr=r(_E,` property of the config object (either
passed as an argument or loaded from `),N5e=n(_E,"CODE",{});var jut=s(N5e);bEr=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),vEr=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=n(_E,"CODE",{});var Nut=s(q5e);TEr=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),FEr=r(_E,":"),_E.forEach(t),CEr=i(Ba),Ce=n(Ba,"UL",{});var ao=s(Ce);z4=n(ao,"LI",{});var K8e=s(z4);G5e=n(K8e,"STRONG",{});var qut=s(G5e);MEr=r(qut,"albert"),qut.forEach(t),EEr=r(K8e," \u2014 "),tV=n(K8e,"A",{href:!0});var Gut=s(tV);yEr=r(Gut,"FlaxAlbertForQuestionAnswering"),Gut.forEach(t),wEr=r(K8e," (ALBERT model)"),K8e.forEach(t),AEr=i(ao),W4=n(ao,"LI",{});var Z8e=s(W4);O5e=n(Z8e,"STRONG",{});var Out=s(O5e);LEr=r(Out,"bart"),Out.forEach(t),BEr=r(Z8e," \u2014 "),aV=n(Z8e,"A",{href:!0});var Xut=s(aV);xEr=r(Xut,"FlaxBartForQuestionAnswering"),Xut.forEach(t),kEr=r(Z8e," (BART model)"),Z8e.forEach(t),REr=i(ao),Q4=n(ao,"LI",{});var e7e=s(Q4);X5e=n(e7e,"STRONG",{});var Vut=s(X5e);SEr=r(Vut,"bert"),Vut.forEach(t),PEr=r(e7e," \u2014 "),nV=n(e7e,"A",{href:!0});var zut=s(nV);$Er=r(zut,"FlaxBertForQuestionAnswering"),zut.forEach(t),IEr=r(e7e," (BERT model)"),e7e.forEach(t),DEr=i(ao),H4=n(ao,"LI",{});var o7e=s(H4);V5e=n(o7e,"STRONG",{});var Wut=s(V5e);jEr=r(Wut,"big_bird"),Wut.forEach(t),NEr=r(o7e," \u2014 "),sV=n(o7e,"A",{href:!0});var Qut=s(sV);qEr=r(Qut,"FlaxBigBirdForQuestionAnswering"),Qut.forEach(t),GEr=r(o7e," (BigBird model)"),o7e.forEach(t),OEr=i(ao),U4=n(ao,"LI",{});var r7e=s(U4);z5e=n(r7e,"STRONG",{});var Hut=s(z5e);XEr=r(Hut,"distilbert"),Hut.forEach(t),VEr=r(r7e," \u2014 "),lV=n(r7e,"A",{href:!0});var Uut=s(lV);zEr=r(Uut,"FlaxDistilBertForQuestionAnswering"),Uut.forEach(t),WEr=r(r7e," (DistilBERT model)"),r7e.forEach(t),QEr=i(ao),J4=n(ao,"LI",{});var t7e=s(J4);W5e=n(t7e,"STRONG",{});var Jut=s(W5e);HEr=r(Jut,"electra"),Jut.forEach(t),UEr=r(t7e," \u2014 "),iV=n(t7e,"A",{href:!0});var Yut=s(iV);JEr=r(Yut,"FlaxElectraForQuestionAnswering"),Yut.forEach(t),YEr=r(t7e," (ELECTRA model)"),t7e.forEach(t),KEr=i(ao),Y4=n(ao,"LI",{});var a7e=s(Y4);Q5e=n(a7e,"STRONG",{});var Kut=s(Q5e);ZEr=r(Kut,"mbart"),Kut.forEach(t),e3r=r(a7e," \u2014 "),dV=n(a7e,"A",{href:!0});var Zut=s(dV);o3r=r(Zut,"FlaxMBartForQuestionAnswering"),Zut.forEach(t),r3r=r(a7e," (mBART model)"),a7e.forEach(t),t3r=i(ao),K4=n(ao,"LI",{});var n7e=s(K4);H5e=n(n7e,"STRONG",{});var e1t=s(H5e);a3r=r(e1t,"roberta"),e1t.forEach(t),n3r=r(n7e," \u2014 "),cV=n(n7e,"A",{href:!0});var o1t=s(cV);s3r=r(o1t,"FlaxRobertaForQuestionAnswering"),o1t.forEach(t),l3r=r(n7e," (RoBERTa model)"),n7e.forEach(t),i3r=i(ao),Z4=n(ao,"LI",{});var s7e=s(Z4);U5e=n(s7e,"STRONG",{});var r1t=s(U5e);d3r=r(r1t,"roformer"),r1t.forEach(t),c3r=r(s7e," \u2014 "),fV=n(s7e,"A",{href:!0});var t1t=s(fV);f3r=r(t1t,"FlaxRoFormerForQuestionAnswering"),t1t.forEach(t),m3r=r(s7e," (RoFormer model)"),s7e.forEach(t),ao.forEach(t),g3r=i(Ba),J5e=n(Ba,"P",{});var a1t=s(J5e);h3r=r(a1t,"Examples:"),a1t.forEach(t),p3r=i(Ba),m(L0.$$.fragment,Ba),Ba.forEach(t),pi.forEach(t),hxe=i(c),lf=n(c,"H2",{class:!0});var ERe=s(lf);eM=n(ERe,"A",{id:!0,class:!0,href:!0});var n1t=s(eM);Y5e=n(n1t,"SPAN",{});var s1t=s(Y5e);m(B0.$$.fragment,s1t),s1t.forEach(t),n1t.forEach(t),_3r=i(ERe),K5e=n(ERe,"SPAN",{});var l1t=s(K5e);u3r=r(l1t,"FlaxAutoModelForTokenClassification"),l1t.forEach(t),ERe.forEach(t),pxe=i(c),$r=n(c,"DIV",{class:!0});var ui=s($r);m(x0.$$.fragment,ui),b3r=i(ui),df=n(ui,"P",{});var cW=s(df);v3r=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Z5e=n(cW,"CODE",{});var i1t=s(Z5e);T3r=r(i1t,"from_pretrained()"),i1t.forEach(t),F3r=r(cW,"class method or the "),e2e=n(cW,"CODE",{});var d1t=s(e2e);C3r=r(d1t,"from_config()"),d1t.forEach(t),M3r=r(cW,`class
method.`),cW.forEach(t),E3r=i(ui),k0=n(ui,"P",{});var yRe=s(k0);y3r=r(yRe,"This class cannot be instantiated directly using "),o2e=n(yRe,"CODE",{});var c1t=s(o2e);w3r=r(c1t,"__init__()"),c1t.forEach(t),A3r=r(yRe," (throws an error)."),yRe.forEach(t),L3r=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(R0.$$.fragment,bi),B3r=i(bi),r2e=n(bi,"P",{});var f1t=s(r2e);x3r=r(f1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f1t.forEach(t),k3r=i(bi),cf=n(bi,"P",{});var fW=s(cf);R3r=r(fW,`Note:
Loading a model from its configuration file does `),t2e=n(fW,"STRONG",{});var m1t=s(t2e);S3r=r(m1t,"not"),m1t.forEach(t),P3r=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),a2e=n(fW,"CODE",{});var g1t=s(a2e);$3r=r(g1t,"from_pretrained()"),g1t.forEach(t),I3r=r(fW,"to load the model weights."),fW.forEach(t),D3r=i(bi),n2e=n(bi,"P",{});var h1t=s(n2e);j3r=r(h1t,"Examples:"),h1t.forEach(t),N3r=i(bi),m(S0.$$.fragment,bi),bi.forEach(t),q3r=i(ui),So=n(ui,"DIV",{class:!0});var xa=s(So);m(P0.$$.fragment,xa),G3r=i(xa),s2e=n(xa,"P",{});var p1t=s(s2e);O3r=r(p1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p1t.forEach(t),X3r=i(xa),kn=n(xa,"P",{});var uE=s(kn);V3r=r(uE,"The model class to instantiate is selected based on the "),l2e=n(uE,"CODE",{});var _1t=s(l2e);z3r=r(_1t,"model_type"),_1t.forEach(t),W3r=r(uE,` property of the config object (either
passed as an argument or loaded from `),i2e=n(uE,"CODE",{});var u1t=s(i2e);Q3r=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),H3r=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(uE,"CODE",{});var b1t=s(d2e);U3r=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),J3r=r(uE,":"),uE.forEach(t),Y3r=i(xa),so=n(xa,"UL",{});var ta=s(so);oM=n(ta,"LI",{});var l7e=s(oM);c2e=n(l7e,"STRONG",{});var v1t=s(c2e);K3r=r(v1t,"albert"),v1t.forEach(t),Z3r=r(l7e," \u2014 "),mV=n(l7e,"A",{href:!0});var T1t=s(mV);eyr=r(T1t,"FlaxAlbertForTokenClassification"),T1t.forEach(t),oyr=r(l7e," (ALBERT model)"),l7e.forEach(t),ryr=i(ta),rM=n(ta,"LI",{});var i7e=s(rM);f2e=n(i7e,"STRONG",{});var F1t=s(f2e);tyr=r(F1t,"bert"),F1t.forEach(t),ayr=r(i7e," \u2014 "),gV=n(i7e,"A",{href:!0});var C1t=s(gV);nyr=r(C1t,"FlaxBertForTokenClassification"),C1t.forEach(t),syr=r(i7e," (BERT model)"),i7e.forEach(t),lyr=i(ta),tM=n(ta,"LI",{});var d7e=s(tM);m2e=n(d7e,"STRONG",{});var M1t=s(m2e);iyr=r(M1t,"big_bird"),M1t.forEach(t),dyr=r(d7e," \u2014 "),hV=n(d7e,"A",{href:!0});var E1t=s(hV);cyr=r(E1t,"FlaxBigBirdForTokenClassification"),E1t.forEach(t),fyr=r(d7e," (BigBird model)"),d7e.forEach(t),myr=i(ta),aM=n(ta,"LI",{});var c7e=s(aM);g2e=n(c7e,"STRONG",{});var y1t=s(g2e);gyr=r(y1t,"distilbert"),y1t.forEach(t),hyr=r(c7e," \u2014 "),pV=n(c7e,"A",{href:!0});var w1t=s(pV);pyr=r(w1t,"FlaxDistilBertForTokenClassification"),w1t.forEach(t),_yr=r(c7e," (DistilBERT model)"),c7e.forEach(t),uyr=i(ta),nM=n(ta,"LI",{});var f7e=s(nM);h2e=n(f7e,"STRONG",{});var A1t=s(h2e);byr=r(A1t,"electra"),A1t.forEach(t),vyr=r(f7e," \u2014 "),_V=n(f7e,"A",{href:!0});var L1t=s(_V);Tyr=r(L1t,"FlaxElectraForTokenClassification"),L1t.forEach(t),Fyr=r(f7e," (ELECTRA model)"),f7e.forEach(t),Cyr=i(ta),sM=n(ta,"LI",{});var m7e=s(sM);p2e=n(m7e,"STRONG",{});var B1t=s(p2e);Myr=r(B1t,"roberta"),B1t.forEach(t),Eyr=r(m7e," \u2014 "),uV=n(m7e,"A",{href:!0});var x1t=s(uV);yyr=r(x1t,"FlaxRobertaForTokenClassification"),x1t.forEach(t),wyr=r(m7e," (RoBERTa model)"),m7e.forEach(t),Ayr=i(ta),lM=n(ta,"LI",{});var g7e=s(lM);_2e=n(g7e,"STRONG",{});var k1t=s(_2e);Lyr=r(k1t,"roformer"),k1t.forEach(t),Byr=r(g7e," \u2014 "),bV=n(g7e,"A",{href:!0});var R1t=s(bV);xyr=r(R1t,"FlaxRoFormerForTokenClassification"),R1t.forEach(t),kyr=r(g7e," (RoFormer model)"),g7e.forEach(t),ta.forEach(t),Ryr=i(xa),u2e=n(xa,"P",{});var S1t=s(u2e);Syr=r(S1t,"Examples:"),S1t.forEach(t),Pyr=i(xa),m($0.$$.fragment,xa),xa.forEach(t),ui.forEach(t),_xe=i(c),ff=n(c,"H2",{class:!0});var wRe=s(ff);iM=n(wRe,"A",{id:!0,class:!0,href:!0});var P1t=s(iM);b2e=n(P1t,"SPAN",{});var $1t=s(b2e);m(I0.$$.fragment,$1t),$1t.forEach(t),P1t.forEach(t),$yr=i(wRe),v2e=n(wRe,"SPAN",{});var I1t=s(v2e);Iyr=r(I1t,"FlaxAutoModelForMultipleChoice"),I1t.forEach(t),wRe.forEach(t),uxe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(D0.$$.fragment,vi),Dyr=i(vi),mf=n(vi,"P",{});var mW=s(mf);jyr=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),T2e=n(mW,"CODE",{});var D1t=s(T2e);Nyr=r(D1t,"from_pretrained()"),D1t.forEach(t),qyr=r(mW,"class method or the "),F2e=n(mW,"CODE",{});var j1t=s(F2e);Gyr=r(j1t,"from_config()"),j1t.forEach(t),Oyr=r(mW,`class
method.`),mW.forEach(t),Xyr=i(vi),j0=n(vi,"P",{});var ARe=s(j0);Vyr=r(ARe,"This class cannot be instantiated directly using "),C2e=n(ARe,"CODE",{});var N1t=s(C2e);zyr=r(N1t,"__init__()"),N1t.forEach(t),Wyr=r(ARe," (throws an error)."),ARe.forEach(t),Qyr=i(vi),Bt=n(vi,"DIV",{class:!0});var Ti=s(Bt);m(N0.$$.fragment,Ti),Hyr=i(Ti),M2e=n(Ti,"P",{});var q1t=s(M2e);Uyr=r(q1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),q1t.forEach(t),Jyr=i(Ti),gf=n(Ti,"P",{});var gW=s(gf);Yyr=r(gW,`Note:
Loading a model from its configuration file does `),E2e=n(gW,"STRONG",{});var G1t=s(E2e);Kyr=r(G1t,"not"),G1t.forEach(t),Zyr=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),y2e=n(gW,"CODE",{});var O1t=s(y2e);ewr=r(O1t,"from_pretrained()"),O1t.forEach(t),owr=r(gW,"to load the model weights."),gW.forEach(t),rwr=i(Ti),w2e=n(Ti,"P",{});var X1t=s(w2e);twr=r(X1t,"Examples:"),X1t.forEach(t),awr=i(Ti),m(q0.$$.fragment,Ti),Ti.forEach(t),nwr=i(vi),Po=n(vi,"DIV",{class:!0});var ka=s(Po);m(G0.$$.fragment,ka),swr=i(ka),A2e=n(ka,"P",{});var V1t=s(A2e);lwr=r(V1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),V1t.forEach(t),iwr=i(ka),Rn=n(ka,"P",{});var bE=s(Rn);dwr=r(bE,"The model class to instantiate is selected based on the "),L2e=n(bE,"CODE",{});var z1t=s(L2e);cwr=r(z1t,"model_type"),z1t.forEach(t),fwr=r(bE,` property of the config object (either
passed as an argument or loaded from `),B2e=n(bE,"CODE",{});var W1t=s(B2e);mwr=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),gwr=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(bE,"CODE",{});var Q1t=s(x2e);hwr=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),pwr=r(bE,":"),bE.forEach(t),_wr=i(ka),lo=n(ka,"UL",{});var aa=s(lo);dM=n(aa,"LI",{});var h7e=s(dM);k2e=n(h7e,"STRONG",{});var H1t=s(k2e);uwr=r(H1t,"albert"),H1t.forEach(t),bwr=r(h7e," \u2014 "),vV=n(h7e,"A",{href:!0});var U1t=s(vV);vwr=r(U1t,"FlaxAlbertForMultipleChoice"),U1t.forEach(t),Twr=r(h7e," (ALBERT model)"),h7e.forEach(t),Fwr=i(aa),cM=n(aa,"LI",{});var p7e=s(cM);R2e=n(p7e,"STRONG",{});var J1t=s(R2e);Cwr=r(J1t,"bert"),J1t.forEach(t),Mwr=r(p7e," \u2014 "),TV=n(p7e,"A",{href:!0});var Y1t=s(TV);Ewr=r(Y1t,"FlaxBertForMultipleChoice"),Y1t.forEach(t),ywr=r(p7e," (BERT model)"),p7e.forEach(t),wwr=i(aa),fM=n(aa,"LI",{});var _7e=s(fM);S2e=n(_7e,"STRONG",{});var K1t=s(S2e);Awr=r(K1t,"big_bird"),K1t.forEach(t),Lwr=r(_7e," \u2014 "),FV=n(_7e,"A",{href:!0});var Z1t=s(FV);Bwr=r(Z1t,"FlaxBigBirdForMultipleChoice"),Z1t.forEach(t),xwr=r(_7e," (BigBird model)"),_7e.forEach(t),kwr=i(aa),mM=n(aa,"LI",{});var u7e=s(mM);P2e=n(u7e,"STRONG",{});var ebt=s(P2e);Rwr=r(ebt,"distilbert"),ebt.forEach(t),Swr=r(u7e," \u2014 "),CV=n(u7e,"A",{href:!0});var obt=s(CV);Pwr=r(obt,"FlaxDistilBertForMultipleChoice"),obt.forEach(t),$wr=r(u7e," (DistilBERT model)"),u7e.forEach(t),Iwr=i(aa),gM=n(aa,"LI",{});var b7e=s(gM);$2e=n(b7e,"STRONG",{});var rbt=s($2e);Dwr=r(rbt,"electra"),rbt.forEach(t),jwr=r(b7e," \u2014 "),MV=n(b7e,"A",{href:!0});var tbt=s(MV);Nwr=r(tbt,"FlaxElectraForMultipleChoice"),tbt.forEach(t),qwr=r(b7e," (ELECTRA model)"),b7e.forEach(t),Gwr=i(aa),hM=n(aa,"LI",{});var v7e=s(hM);I2e=n(v7e,"STRONG",{});var abt=s(I2e);Owr=r(abt,"roberta"),abt.forEach(t),Xwr=r(v7e," \u2014 "),EV=n(v7e,"A",{href:!0});var nbt=s(EV);Vwr=r(nbt,"FlaxRobertaForMultipleChoice"),nbt.forEach(t),zwr=r(v7e," (RoBERTa model)"),v7e.forEach(t),Wwr=i(aa),pM=n(aa,"LI",{});var T7e=s(pM);D2e=n(T7e,"STRONG",{});var sbt=s(D2e);Qwr=r(sbt,"roformer"),sbt.forEach(t),Hwr=r(T7e," \u2014 "),yV=n(T7e,"A",{href:!0});var lbt=s(yV);Uwr=r(lbt,"FlaxRoFormerForMultipleChoice"),lbt.forEach(t),Jwr=r(T7e," (RoFormer model)"),T7e.forEach(t),aa.forEach(t),Ywr=i(ka),j2e=n(ka,"P",{});var ibt=s(j2e);Kwr=r(ibt,"Examples:"),ibt.forEach(t),Zwr=i(ka),m(O0.$$.fragment,ka),ka.forEach(t),vi.forEach(t),bxe=i(c),hf=n(c,"H2",{class:!0});var LRe=s(hf);_M=n(LRe,"A",{id:!0,class:!0,href:!0});var dbt=s(_M);N2e=n(dbt,"SPAN",{});var cbt=s(N2e);m(X0.$$.fragment,cbt),cbt.forEach(t),dbt.forEach(t),e6r=i(LRe),q2e=n(LRe,"SPAN",{});var fbt=s(q2e);o6r=r(fbt,"FlaxAutoModelForNextSentencePrediction"),fbt.forEach(t),LRe.forEach(t),vxe=i(c),Dr=n(c,"DIV",{class:!0});var Fi=s(Dr);m(V0.$$.fragment,Fi),r6r=i(Fi),pf=n(Fi,"P",{});var hW=s(pf);t6r=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),G2e=n(hW,"CODE",{});var mbt=s(G2e);a6r=r(mbt,"from_pretrained()"),mbt.forEach(t),n6r=r(hW,"class method or the "),O2e=n(hW,"CODE",{});var gbt=s(O2e);s6r=r(gbt,"from_config()"),gbt.forEach(t),l6r=r(hW,`class
method.`),hW.forEach(t),i6r=i(Fi),z0=n(Fi,"P",{});var BRe=s(z0);d6r=r(BRe,"This class cannot be instantiated directly using "),X2e=n(BRe,"CODE",{});var hbt=s(X2e);c6r=r(hbt,"__init__()"),hbt.forEach(t),f6r=r(BRe," (throws an error)."),BRe.forEach(t),m6r=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ci=s(xt);m(W0.$$.fragment,Ci),g6r=i(Ci),V2e=n(Ci,"P",{});var pbt=s(V2e);h6r=r(pbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pbt.forEach(t),p6r=i(Ci),_f=n(Ci,"P",{});var pW=s(_f);_6r=r(pW,`Note:
Loading a model from its configuration file does `),z2e=n(pW,"STRONG",{});var _bt=s(z2e);u6r=r(_bt,"not"),_bt.forEach(t),b6r=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),W2e=n(pW,"CODE",{});var ubt=s(W2e);v6r=r(ubt,"from_pretrained()"),ubt.forEach(t),T6r=r(pW,"to load the model weights."),pW.forEach(t),F6r=i(Ci),Q2e=n(Ci,"P",{});var bbt=s(Q2e);C6r=r(bbt,"Examples:"),bbt.forEach(t),M6r=i(Ci),m(Q0.$$.fragment,Ci),Ci.forEach(t),E6r=i(Fi),$o=n(Fi,"DIV",{class:!0});var Ra=s($o);m(H0.$$.fragment,Ra),y6r=i(Ra),H2e=n(Ra,"P",{});var vbt=s(H2e);w6r=r(vbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vbt.forEach(t),A6r=i(Ra),Sn=n(Ra,"P",{});var vE=s(Sn);L6r=r(vE,"The model class to instantiate is selected based on the "),U2e=n(vE,"CODE",{});var Tbt=s(U2e);B6r=r(Tbt,"model_type"),Tbt.forEach(t),x6r=r(vE,` property of the config object (either
passed as an argument or loaded from `),J2e=n(vE,"CODE",{});var Fbt=s(J2e);k6r=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),R6r=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(vE,"CODE",{});var Cbt=s(Y2e);S6r=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),P6r=r(vE,":"),vE.forEach(t),$6r=i(Ra),K2e=n(Ra,"UL",{});var Mbt=s(K2e);uM=n(Mbt,"LI",{});var F7e=s(uM);Z2e=n(F7e,"STRONG",{});var Ebt=s(Z2e);I6r=r(Ebt,"bert"),Ebt.forEach(t),D6r=r(F7e," \u2014 "),wV=n(F7e,"A",{href:!0});var ybt=s(wV);j6r=r(ybt,"FlaxBertForNextSentencePrediction"),ybt.forEach(t),N6r=r(F7e," (BERT model)"),F7e.forEach(t),Mbt.forEach(t),q6r=i(Ra),eve=n(Ra,"P",{});var wbt=s(eve);G6r=r(wbt,"Examples:"),wbt.forEach(t),O6r=i(Ra),m(U0.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),Txe=i(c),uf=n(c,"H2",{class:!0});var xRe=s(uf);bM=n(xRe,"A",{id:!0,class:!0,href:!0});var Abt=s(bM);ove=n(Abt,"SPAN",{});var Lbt=s(ove);m(J0.$$.fragment,Lbt),Lbt.forEach(t),Abt.forEach(t),X6r=i(xRe),rve=n(xRe,"SPAN",{});var Bbt=s(rve);V6r=r(Bbt,"FlaxAutoModelForImageClassification"),Bbt.forEach(t),xRe.forEach(t),Fxe=i(c),jr=n(c,"DIV",{class:!0});var Mi=s(jr);m(Y0.$$.fragment,Mi),z6r=i(Mi),bf=n(Mi,"P",{});var _W=s(bf);W6r=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tve=n(_W,"CODE",{});var xbt=s(tve);Q6r=r(xbt,"from_pretrained()"),xbt.forEach(t),H6r=r(_W,"class method or the "),ave=n(_W,"CODE",{});var kbt=s(ave);U6r=r(kbt,"from_config()"),kbt.forEach(t),J6r=r(_W,`class
method.`),_W.forEach(t),Y6r=i(Mi),K0=n(Mi,"P",{});var kRe=s(K0);K6r=r(kRe,"This class cannot be instantiated directly using "),nve=n(kRe,"CODE",{});var Rbt=s(nve);Z6r=r(Rbt,"__init__()"),Rbt.forEach(t),eAr=r(kRe," (throws an error)."),kRe.forEach(t),oAr=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(Z0.$$.fragment,Ei),rAr=i(Ei),sve=n(Ei,"P",{});var Sbt=s(sve);tAr=r(Sbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Sbt.forEach(t),aAr=i(Ei),vf=n(Ei,"P",{});var uW=s(vf);nAr=r(uW,`Note:
Loading a model from its configuration file does `),lve=n(uW,"STRONG",{});var Pbt=s(lve);sAr=r(Pbt,"not"),Pbt.forEach(t),lAr=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ive=n(uW,"CODE",{});var $bt=s(ive);iAr=r($bt,"from_pretrained()"),$bt.forEach(t),dAr=r(uW,"to load the model weights."),uW.forEach(t),cAr=i(Ei),dve=n(Ei,"P",{});var Ibt=s(dve);fAr=r(Ibt,"Examples:"),Ibt.forEach(t),mAr=i(Ei),m(eL.$$.fragment,Ei),Ei.forEach(t),gAr=i(Mi),Io=n(Mi,"DIV",{class:!0});var Sa=s(Io);m(oL.$$.fragment,Sa),hAr=i(Sa),cve=n(Sa,"P",{});var Dbt=s(cve);pAr=r(Dbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dbt.forEach(t),_Ar=i(Sa),Pn=n(Sa,"P",{});var TE=s(Pn);uAr=r(TE,"The model class to instantiate is selected based on the "),fve=n(TE,"CODE",{});var jbt=s(fve);bAr=r(jbt,"model_type"),jbt.forEach(t),vAr=r(TE,` property of the config object (either
passed as an argument or loaded from `),mve=n(TE,"CODE",{});var Nbt=s(mve);TAr=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),FAr=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gve=n(TE,"CODE",{});var qbt=s(gve);CAr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),MAr=r(TE,":"),TE.forEach(t),EAr=i(Sa),rL=n(Sa,"UL",{});var RRe=s(rL);vM=n(RRe,"LI",{});var C7e=s(vM);hve=n(C7e,"STRONG",{});var Gbt=s(hve);yAr=r(Gbt,"beit"),Gbt.forEach(t),wAr=r(C7e," \u2014 "),AV=n(C7e,"A",{href:!0});var Obt=s(AV);AAr=r(Obt,"FlaxBeitForImageClassification"),Obt.forEach(t),LAr=r(C7e," (BEiT model)"),C7e.forEach(t),BAr=i(RRe),TM=n(RRe,"LI",{});var M7e=s(TM);pve=n(M7e,"STRONG",{});var Xbt=s(pve);xAr=r(Xbt,"vit"),Xbt.forEach(t),kAr=r(M7e," \u2014 "),LV=n(M7e,"A",{href:!0});var Vbt=s(LV);RAr=r(Vbt,"FlaxViTForImageClassification"),Vbt.forEach(t),SAr=r(M7e," (ViT model)"),M7e.forEach(t),RRe.forEach(t),PAr=i(Sa),_ve=n(Sa,"P",{});var zbt=s(_ve);$Ar=r(zbt,"Examples:"),zbt.forEach(t),IAr=i(Sa),m(tL.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),Cxe=i(c),Tf=n(c,"H2",{class:!0});var SRe=s(Tf);FM=n(SRe,"A",{id:!0,class:!0,href:!0});var Wbt=s(FM);uve=n(Wbt,"SPAN",{});var Qbt=s(uve);m(aL.$$.fragment,Qbt),Qbt.forEach(t),Wbt.forEach(t),DAr=i(SRe),bve=n(SRe,"SPAN",{});var Hbt=s(bve);jAr=r(Hbt,"FlaxAutoModelForVision2Seq"),Hbt.forEach(t),SRe.forEach(t),Mxe=i(c),Nr=n(c,"DIV",{class:!0});var yi=s(Nr);m(nL.$$.fragment,yi),NAr=i(yi),Ff=n(yi,"P",{});var bW=s(Ff);qAr=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vve=n(bW,"CODE",{});var Ubt=s(vve);GAr=r(Ubt,"from_pretrained()"),Ubt.forEach(t),OAr=r(bW,"class method or the "),Tve=n(bW,"CODE",{});var Jbt=s(Tve);XAr=r(Jbt,"from_config()"),Jbt.forEach(t),VAr=r(bW,`class
method.`),bW.forEach(t),zAr=i(yi),sL=n(yi,"P",{});var PRe=s(sL);WAr=r(PRe,"This class cannot be instantiated directly using "),Fve=n(PRe,"CODE",{});var Ybt=s(Fve);QAr=r(Ybt,"__init__()"),Ybt.forEach(t),HAr=r(PRe," (throws an error)."),PRe.forEach(t),UAr=i(yi),Rt=n(yi,"DIV",{class:!0});var wi=s(Rt);m(lL.$$.fragment,wi),JAr=i(wi),Cve=n(wi,"P",{});var Kbt=s(Cve);YAr=r(Kbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kbt.forEach(t),KAr=i(wi),Cf=n(wi,"P",{});var vW=s(Cf);ZAr=r(vW,`Note:
Loading a model from its configuration file does `),Mve=n(vW,"STRONG",{});var Zbt=s(Mve);e0r=r(Zbt,"not"),Zbt.forEach(t),o0r=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eve=n(vW,"CODE",{});var e5t=s(Eve);r0r=r(e5t,"from_pretrained()"),e5t.forEach(t),t0r=r(vW,"to load the model weights."),vW.forEach(t),a0r=i(wi),yve=n(wi,"P",{});var o5t=s(yve);n0r=r(o5t,"Examples:"),o5t.forEach(t),s0r=i(wi),m(iL.$$.fragment,wi),wi.forEach(t),l0r=i(yi),Do=n(yi,"DIV",{class:!0});var Pa=s(Do);m(dL.$$.fragment,Pa),i0r=i(Pa),wve=n(Pa,"P",{});var r5t=s(wve);d0r=r(r5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r5t.forEach(t),c0r=i(Pa),$n=n(Pa,"P",{});var FE=s($n);f0r=r(FE,"The model class to instantiate is selected based on the "),Ave=n(FE,"CODE",{});var t5t=s(Ave);m0r=r(t5t,"model_type"),t5t.forEach(t),g0r=r(FE,` property of the config object (either
passed as an argument or loaded from `),Lve=n(FE,"CODE",{});var a5t=s(Lve);h0r=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),p0r=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(FE,"CODE",{});var n5t=s(Bve);_0r=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),u0r=r(FE,":"),FE.forEach(t),b0r=i(Pa),xve=n(Pa,"UL",{});var s5t=s(xve);CM=n(s5t,"LI",{});var E7e=s(CM);kve=n(E7e,"STRONG",{});var l5t=s(kve);v0r=r(l5t,"vision-encoder-decoder"),l5t.forEach(t),T0r=r(E7e," \u2014 "),BV=n(E7e,"A",{href:!0});var i5t=s(BV);F0r=r(i5t,"FlaxVisionEncoderDecoderModel"),i5t.forEach(t),C0r=r(E7e," (Vision Encoder decoder model)"),E7e.forEach(t),s5t.forEach(t),M0r=i(Pa),Rve=n(Pa,"P",{});var d5t=s(Rve);E0r=r(d5t,"Examples:"),d5t.forEach(t),y0r=i(Pa),m(cL.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(b5t)),d(me,"id","auto-classes"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#auto-classes"),d(ie,"class","relative group"),d(In,"href","/docs/transformers/pr_15911/en/model_doc/auto#transformers.AutoConfig"),d(jn,"href","/docs/transformers/pr_15911/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/pr_15911/en/model_doc/auto#transformers.AutoTokenizer"),d(Pi,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertModel"),d(Lf,"id","extending-the-auto-classes"),d(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lf,"href","#extending-the-auto-classes"),d($i,"class","relative group"),d(xf,"id","transformers.AutoConfig"),d(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xf,"href","#transformers.AutoConfig"),d(Ii,"class","relative group"),d(g8,"href","/docs/transformers/pr_15911/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(h8,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertConfig"),d(p8,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartConfig"),d(_8,"href","/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitConfig"),d(u8,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertConfig"),d(b8,"href","/docs/transformers/pr_15911/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(v8,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdConfig"),d(T8,"href","/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(F8,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(C8,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(M8,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertConfig"),d(E8,"href","/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineConfig"),d(y8,"href","/docs/transformers/pr_15911/en/model_doc/clip#transformers.CLIPConfig"),d(w8,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertConfig"),d(A8,"href","/docs/transformers/pr_15911/en/model_doc/convnext#transformers.ConvNextConfig"),d(L8,"href","/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLConfig"),d(B8,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(x8,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(k8,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaConfig"),d(R8,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(S8,"href","/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTConfig"),d(P8,"href","/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrConfig"),d($8,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertConfig"),d(I8,"href","/docs/transformers/pr_15911/en/model_doc/dpr#transformers.DPRConfig"),d(D8,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraConfig"),d(j8,"href","/docs/transformers/pr_15911/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(N8,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertConfig"),d(q8,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetConfig"),d(G8,"href","/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTConfig"),d(O8,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelConfig"),d(X8,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Config"),d(V8,"href","/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(z8,"href","/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJConfig"),d(W8,"href","/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertConfig"),d(Q8,"href","/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertConfig"),d(H8,"href","/docs/transformers/pr_15911/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(U8,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(J8,"href","/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Y8,"href","/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDConfig"),d(K8,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerConfig"),d(Z8,"href","/docs/transformers/pr_15911/en/model_doc/luke#transformers.LukeConfig"),d(e7,"href","/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertConfig"),d(o7,"href","/docs/transformers/pr_15911/en/model_doc/m2m_100#transformers.M2M100Config"),d(r7,"href","/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianConfig"),d(t7,"href","/docs/transformers/pr_15911/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(a7,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartConfig"),d(n7,"href","/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(s7,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(l7,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetConfig"),d(i7,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5Config"),d(d7,"href","/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(c7,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(f7,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusConfig"),d(m7,"href","/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverConfig"),d(g7,"href","/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartConfig"),d(h7,"href","/docs/transformers/pr_15911/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(p7,"href","/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(_7,"href","/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(u7,"href","/docs/transformers/pr_15911/en/model_doc/rag#transformers.RagConfig"),d(b7,"href","/docs/transformers/pr_15911/en/model_doc/realm#transformers.RealmConfig"),d(v7,"href","/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerConfig"),d(T7,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertConfig"),d(F7,"href","/docs/transformers/pr_15911/en/model_doc/retribert#transformers.RetriBertConfig"),d(C7,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaConfig"),d(M7,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerConfig"),d(E7,"href","/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerConfig"),d(y7,"href","/docs/transformers/pr_15911/en/model_doc/sew#transformers.SEWConfig"),d(w7,"href","/docs/transformers/pr_15911/en/model_doc/sew-d#transformers.SEWDConfig"),d(A7,"href","/docs/transformers/pr_15911/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(L7,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(B7,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(x7,"href","/docs/transformers/pr_15911/en/model_doc/splinter#transformers.SplinterConfig"),d(k7,"href","/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(R7,"href","/docs/transformers/pr_15911/en/model_doc/swin#transformers.SwinConfig"),d(S7,"href","/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Config"),d(P7,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasConfig"),d($7,"href","/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(I7,"href","/docs/transformers/pr_15911/en/model_doc/trocr#transformers.TrOCRConfig"),d(D7,"href","/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(j7,"href","/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(N7,"href","/docs/transformers/pr_15911/en/model_doc/vilt#transformers.ViltConfig"),d(q7,"href","/docs/transformers/pr_15911/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(G7,"href","/docs/transformers/pr_15911/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(O7,"href","/docs/transformers/pr_15911/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(X7,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTConfig"),d(V7,"href","/docs/transformers/pr_15911/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(z7,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(W7,"href","/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMConfig"),d(Q7,"href","/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMConfig"),d(H7,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMConfig"),d(U7,"href","/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(J7,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Y7,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(K7,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetConfig"),d(Z7,"href","/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(ug,"class","docstring"),d(Xo,"class","docstring"),d(bg,"id","transformers.AutoTokenizer"),d(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bg,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(eB,"href","/docs/transformers/pr_15911/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(oB,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertTokenizer"),d(rB,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(tB,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartTokenizer"),d(aB,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartTokenizerFast"),d(nB,"href","/docs/transformers/pr_15911/en/model_doc/barthez#transformers.BarthezTokenizer"),d(sB,"href","/docs/transformers/pr_15911/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(lB,"href","/docs/transformers/pr_15911/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(iB,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertTokenizer"),d(dB,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertTokenizerFast"),d(cB,"href","/docs/transformers/pr_15911/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(fB,"href","/docs/transformers/pr_15911/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(mB,"href","/docs/transformers/pr_15911/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(gB,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(hB,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(pB,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(_B,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(uB,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(bB,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(vB,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(TB,"href","/docs/transformers/pr_15911/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(FB,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertTokenizer"),d(CB,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(MB,"href","/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineTokenizer"),d(EB,"href","/docs/transformers/pr_15911/en/model_doc/clip#transformers.CLIPTokenizer"),d(yB,"href","/docs/transformers/pr_15911/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(wB,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(AB,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(LB,"href","/docs/transformers/pr_15911/en/model_doc/cpm#transformers.CpmTokenizer"),d(BB,"href","/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(xB,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaTokenizer"),d(kB,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(RB,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(SB,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(PB,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d($B,"href","/docs/transformers/pr_15911/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(IB,"href","/docs/transformers/pr_15911/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(DB,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraTokenizer"),d(jB,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(NB,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(qB,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetTokenizer"),d(GB,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(OB,"href","/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(XB,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelTokenizer"),d(VB,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(zB,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(WB,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(QB,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(HB,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(UB,"href","/docs/transformers/pr_15911/en/model_doc/herbert#transformers.HerbertTokenizer"),d(JB,"href","/docs/transformers/pr_15911/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(YB,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(KB,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ZB,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ex,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ox,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(rx,"href","/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(tx,"href","/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(ax,"href","/docs/transformers/pr_15911/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(nx,"href","/docs/transformers/pr_15911/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(sx,"href","/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDTokenizer"),d(lx,"href","/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDTokenizerFast"),d(ix,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerTokenizer"),d(dx,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(cx,"href","/docs/transformers/pr_15911/en/model_doc/luke#transformers.LukeTokenizer"),d(fx,"href","/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(mx,"href","/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(gx,"href","/docs/transformers/pr_15911/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(hx,"href","/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianTokenizer"),d(px,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartTokenizer"),d(_x,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(ux,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(bx,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(vx,"href","/docs/transformers/pr_15911/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Tx,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Fx,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Cx,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Mx,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Ex,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.T5Tokenizer"),d(yx,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.T5TokenizerFast"),d(wx,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Ax,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Lx,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Bx,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(xx,"href","/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(kx,"href","/docs/transformers/pr_15911/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Rx,"href","/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Sx,"href","/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Px,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertTokenizer"),d($x,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertTokenizerFast"),d(Ix,"href","/docs/transformers/pr_15911/en/model_doc/rag#transformers.RagTokenizer"),d(Dx,"href","/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerTokenizer"),d(jx,"href","/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Nx,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertTokenizer"),d(qx,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Gx,"href","/docs/transformers/pr_15911/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Ox,"href","/docs/transformers/pr_15911/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Xx,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Vx,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(zx,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Wx,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Qx,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Hx,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Ux,"href","/docs/transformers/pr_15911/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Jx,"href","/docs/transformers/pr_15911/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Yx,"href","/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Kx,"href","/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Zx,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.T5Tokenizer"),d(ek,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ok,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasTokenizer"),d(rk,"href","/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(tk,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ak,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(nk,"href","/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMTokenizer"),d(sk,"href","/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(lk,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMTokenizer"),d(ik,"href","/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(dk,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(ck,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(fk,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(mk,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(mo,"class","docstring"),d(Hg,"class","docstring"),d(Vo,"class","docstring"),d(Ug,"id","transformers.AutoFeatureExtractor"),d(Ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ug,"href","#transformers.AutoFeatureExtractor"),d(Ni,"class","relative group"),d(gk,"href","/docs/transformers/pr_15911/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(hk,"href","/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(pk,"href","/docs/transformers/pr_15911/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(_k,"href","/docs/transformers/pr_15911/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(uk,"href","/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(bk,"href","/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(vk,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Tk,"href","/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Fk,"href","/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Ck,"href","/docs/transformers/pr_15911/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Mk,"href","/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Ek,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(yk,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(wk,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Ak,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Lk,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(xe,"class","docstring"),d(mh,"class","docstring"),d(zo,"class","docstring"),d(gh,"id","transformers.AutoProcessor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoProcessor"),d(qi,"class","relative group"),d(Bk,"href","/docs/transformers/pr_15911/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(xk,"href","/docs/transformers/pr_15911/en/model_doc/clip#transformers.CLIPProcessor"),d(kk,"href","/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(Rk,"href","/docs/transformers/pr_15911/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(Sk,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(Pk,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d($k,"href","/docs/transformers/pr_15911/en/model_doc/trocr#transformers.TrOCRProcessor"),d(Ik,"href","/docs/transformers/pr_15911/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(Dk,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ke,"class","docstring"),d(Mh,"class","docstring"),d(Wo,"class","docstring"),d(Eh,"id","transformers.AutoModel"),d(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Eh,"href","#transformers.AutoModel"),d(Oi,"class","relative group"),d(qr,"class","docstring"),d(jk,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertModel"),d(Nk,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartModel"),d(qk,"href","/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitModel"),d(Gk,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertModel"),d(Ok,"href","/docs/transformers/pr_15911/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Xk,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdModel"),d(Vk,"href","/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(zk,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Wk,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Qk,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertModel"),d(Hk,"href","/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineModel"),d(Uk,"href","/docs/transformers/pr_15911/en/model_doc/clip#transformers.CLIPModel"),d(Jk,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertModel"),d(Yk,"href","/docs/transformers/pr_15911/en/model_doc/convnext#transformers.ConvNextModel"),d(Kk,"href","/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLModel"),d(Zk,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(eR,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(oR,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaModel"),d(rR,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(tR,"href","/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTModel"),d(aR,"href","/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrModel"),d(nR,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertModel"),d(sR,"href","/docs/transformers/pr_15911/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(lR,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraModel"),d(iR,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertModel"),d(dR,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetModel"),d(cR,"href","/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTModel"),d(fR,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelModel"),d(mR,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelBaseModel"),d(gR,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2Model"),d(hR,"href","/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(pR,"href","/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJModel"),d(_R,"href","/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertModel"),d(uR,"href","/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertModel"),d(bR,"href","/docs/transformers/pr_15911/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(vR,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(TR,"href","/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(FR,"href","/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDModel"),d(CR,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerModel"),d(MR,"href","/docs/transformers/pr_15911/en/model_doc/luke#transformers.LukeModel"),d(ER,"href","/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertModel"),d(yR,"href","/docs/transformers/pr_15911/en/model_doc/m2m_100#transformers.M2M100Model"),d(wR,"href","/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianModel"),d(AR,"href","/docs/transformers/pr_15911/en/model_doc/maskformer#transformers.MaskFormerModel"),d(LR,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartModel"),d(BR,"href","/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(xR,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertModel"),d(kR,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetModel"),d(RR,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5Model"),d(SR,"href","/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerModel"),d(PR,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d($R,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusModel"),d(IR,"href","/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverModel"),d(DR,"href","/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartModel"),d(jR,"href","/docs/transformers/pr_15911/en/model_doc/poolformer#transformers.PoolFormerModel"),d(NR,"href","/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(qR,"href","/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertModel"),d(GR,"href","/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerModel"),d(OR,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertModel"),d(XR,"href","/docs/transformers/pr_15911/en/model_doc/retribert#transformers.RetriBertModel"),d(VR,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaModel"),d(zR,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerModel"),d(WR,"href","/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerModel"),d(QR,"href","/docs/transformers/pr_15911/en/model_doc/sew#transformers.SEWModel"),d(HR,"href","/docs/transformers/pr_15911/en/model_doc/sew-d#transformers.SEWDModel"),d(UR,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(JR,"href","/docs/transformers/pr_15911/en/model_doc/splinter#transformers.SplinterModel"),d(YR,"href","/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(KR,"href","/docs/transformers/pr_15911/en/model_doc/swin#transformers.SwinModel"),d(ZR,"href","/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5Model"),d(eS,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasModel"),d(oS,"href","/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(rS,"href","/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechModel"),d(tS,"href","/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(aS,"href","/docs/transformers/pr_15911/en/model_doc/vilt#transformers.ViltModel"),d(nS,"href","/docs/transformers/pr_15911/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(sS,"href","/docs/transformers/pr_15911/en/model_doc/visual_bert#transformers.VisualBertModel"),d(lS,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTModel"),d(iS,"href","/docs/transformers/pr_15911/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(dS,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(cS,"href","/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMModel"),d(fS,"href","/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMModel"),d(mS,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMModel"),d(gS,"href","/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(hS,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(pS,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(_S,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetModel"),d(uS,"href","/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoModel"),d(Re,"class","docstring"),d(Qo,"class","docstring"),d(a_,"id","transformers.AutoModelForPreTraining"),d(a_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a_,"href","#transformers.AutoModelForPreTraining"),d(zi,"class","relative group"),d(Gr,"class","docstring"),d(bS,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForPreTraining"),d(vS,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(TS,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForPreTraining"),d(FS,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(CS,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(MS,"href","/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(ES,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(yS,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(wS,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(AS,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(LS,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForPreTraining"),d(BS,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(xS,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForPreTraining"),d(kS,"href","/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(RS,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(SS,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(PS,"href","/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForMaskedLM"),d($S,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(IS,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(DS,"href","/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(jS,"href","/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(NS,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(qS,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(GS,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(OS,"href","/docs/transformers/pr_15911/en/model_doc/retribert#transformers.RetriBertModel"),d(XS,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(VS,"href","/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(zS,"href","/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(WS,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(QS,"href","/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(HS,"href","/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(US,"href","/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(JS,"href","/docs/transformers/pr_15911/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(YS,"href","/docs/transformers/pr_15911/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(KS,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(ZS,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(eP,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(oP,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(rP,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Se,"class","docstring"),d(Ho,"class","docstring"),d(z_,"id","transformers.AutoModelForCausalLM"),d(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z_,"href","#transformers.AutoModelForCausalLM"),d(Hi,"class","relative group"),d(Or,"class","docstring"),d(tP,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForCausalLM"),d(aP,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertLMHeadModel"),d(nP,"href","/docs/transformers/pr_15911/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(sP,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(lP,"href","/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(iP,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(dP,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(cP,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(fP,"href","/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(mP,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(gP,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForCausalLM"),d(hP,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(pP,"href","/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(_P,"href","/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(uP,"href","/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianForCausalLM"),d(bP,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartForCausalLM"),d(vP,"href","/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(TP,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(FP,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(CP,"href","/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(MP,"href","/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(EP,"href","/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(yP,"href","/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(wP,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(AP,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(LP,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(BP,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(xP,"href","/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(kP,"href","/docs/transformers/pr_15911/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(RP,"href","/docs/transformers/pr_15911/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(SP,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(PP,"href","/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d($P,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(IP,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(DP,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Pe,"class","docstring"),d(Uo,"class","docstring"),d(Lu,"id","transformers.AutoModelForMaskedLM"),d(Lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lu,"href","#transformers.AutoModelForMaskedLM"),d(Yi,"class","relative group"),d(Xr,"class","docstring"),d(jP,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(NP,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(qP,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForMaskedLM"),d(GP,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(OP,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(XP,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(VP,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(zP,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(WP,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(QP,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(HP,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(UP,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(JP,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(YP,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(KP,"href","/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(ZP,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(e$,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(o$,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(r$,"href","/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(t$,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(a$,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(n$,"href","/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(s$,"href","/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(l$,"href","/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(i$,"href","/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(d$,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(c$,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(f$,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(m$,"href","/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(g$,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(h$,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(p$,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(_$,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(u$,"href","/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoForMaskedLM"),d($e,"class","docstring"),d(Jo,"class","docstring"),d(f1,"id","transformers.AutoModelForSeq2SeqLM"),d(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f1,"href","#transformers.AutoModelForSeq2SeqLM"),d(ed,"class","relative group"),d(Vr,"class","docstring"),d(b$,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(v$,"href","/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(T$,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(F$,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(C$,"href","/docs/transformers/pr_15911/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(M$,"href","/docs/transformers/pr_15911/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(E$,"href","/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(y$,"href","/docs/transformers/pr_15911/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(w$,"href","/docs/transformers/pr_15911/en/model_doc/marian#transformers.MarianMTModel"),d(A$,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(L$,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(B$,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(x$,"href","/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(k$,"href","/docs/transformers/pr_15911/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(R$,"href","/docs/transformers/pr_15911/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(S$,"href","/docs/transformers/pr_15911/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ie,"class","docstring"),d(Yo,"class","docstring"),d(B1,"id","transformers.AutoModelForSequenceClassification"),d(B1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B1,"href","#transformers.AutoModelForSequenceClassification"),d(td,"class","relative group"),d(zr,"class","docstring"),d(P$,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d($$,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForSequenceClassification"),d(I$,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForSequenceClassification"),d(D$,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(j$,"href","/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(N$,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(q$,"href","/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(G$,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(O$,"href","/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(X$,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(V$,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(z$,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(W$,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Q$,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(H$,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(U$,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(J$,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Y$,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(K$,"href","/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Z$,"href","/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(eI,"href","/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(oI,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(rI,"href","/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(tI,"href","/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDForSequenceClassification"),d(aI,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(nI,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(sI,"href","/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(lI,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(iI,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(dI,"href","/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(cI,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(fI,"href","/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(mI,"href","/docs/transformers/pr_15911/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(gI,"href","/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(hI,"href","/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(pI,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(_I,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(uI,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(bI,"href","/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(vI,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(TI,"href","/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(FI,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(CI,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(MI,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(EI,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(yI,"href","/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(De,"class","docstring"),d(Ko,"class","docstring"),d(Mb,"id","transformers.AutoModelForMultipleChoice"),d(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mb,"href","#transformers.AutoModelForMultipleChoice"),d(sd,"class","relative group"),d(Wr,"class","docstring"),d(wI,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(AI,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForMultipleChoice"),d(LI,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(BI,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(xI,"href","/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(kI,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(RI,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(SI,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(PI,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d($I,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(II,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(DI,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(jI,"href","/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(NI,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(qI,"href","/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(GI,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(OI,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(XI,"href","/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(VI,"href","/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(zI,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(WI,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(QI,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(HI,"href","/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(UI,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(JI,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(YI,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(KI,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(ZI,"href","/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(je,"class","docstring"),d(Zo,"class","docstring"),d(Zb,"id","transformers.AutoModelForNextSentencePrediction"),d(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zb,"href","#transformers.AutoModelForNextSentencePrediction"),d(dd,"class","relative group"),d(Qr,"class","docstring"),d(eD,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(oD,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(rD,"href","/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(tD,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(aD,"href","/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ne,"class","docstring"),d(er,"class","docstring"),d(s5,"id","transformers.AutoModelForTokenClassification"),d(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s5,"href","#transformers.AutoModelForTokenClassification"),d(md,"class","relative group"),d(Hr,"class","docstring"),d(nD,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(sD,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForTokenClassification"),d(lD,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(iD,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(dD,"href","/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineForTokenClassification"),d(cD,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(fD,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(mD,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(gD,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(hD,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(pD,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(_D,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(uD,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(bD,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(vD,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(TD,"href","/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(FD,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(CD,"href","/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(MD,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(ED,"href","/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(yD,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(wD,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(AD,"href","/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(LD,"href","/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(BD,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(xD,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(kD,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(RD,"href","/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(SD,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(PD,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d($D,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(ID,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(DD,"href","/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(qe,"class","docstring"),d(or,"class","docstring"),d(G5,"id","transformers.AutoModelForQuestionAnswering"),d(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G5,"href","#transformers.AutoModelForQuestionAnswering"),d(pd,"class","relative group"),d(Ur,"class","docstring"),d(jD,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(OD,"href","/docs/transformers/pr_15911/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_15911/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(KD,"href","/docs/transformers/pr_15911/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_15911/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_15911/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_15911/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_15911/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_15911/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_15911/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_15911/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_15911/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_15911/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_15911/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(vj,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(Cj,"href","/docs/transformers/pr_15911/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Ge,"class","docstring"),d(rr,"class","docstring"),d(L2,"id","transformers.AutoModelForTableQuestionAnswering"),d(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(bd,"class","relative group"),d(Jr,"class","docstring"),d(Mj,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Oe,"class","docstring"),d(tr,"class","docstring"),d(k2,"id","transformers.AutoModelForImageClassification"),d(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k2,"href","#transformers.AutoModelForImageClassification"),d(Fd,"class","relative group"),d(Yr,"class","docstring"),d(Ej,"href","/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitForImageClassification"),d(yj,"href","/docs/transformers/pr_15911/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(wj,"href","/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Aj,"href","/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Lj,"href","/docs/transformers/pr_15911/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Bj,"href","/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(xj,"href","/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(kj,"href","/docs/transformers/pr_15911/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Rj,"href","/docs/transformers/pr_15911/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Sj,"href","/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(Pj,"href","/docs/transformers/pr_15911/en/model_doc/swin#transformers.SwinForImageClassification"),d($j,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTForImageClassification"),d(Xe,"class","docstring"),d(ar,"class","docstring"),d(q2,"id","transformers.AutoModelForVision2Seq"),d(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q2,"href","#transformers.AutoModelForVision2Seq"),d(Ed,"class","relative group"),d(Kr,"class","docstring"),d(Ij,"href","/docs/transformers/pr_15911/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ve,"class","docstring"),d(nr,"class","docstring"),d(X2,"id","transformers.AutoModelForAudioClassification"),d(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X2,"href","#transformers.AutoModelForAudioClassification"),d(Ad,"class","relative group"),d(Zr,"class","docstring"),d(Dj,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(jj,"href","/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(Nj,"href","/docs/transformers/pr_15911/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(qj,"href","/docs/transformers/pr_15911/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Gj,"href","/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Oj,"href","/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Xj,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Vj,"href","/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(ze,"class","docstring"),d(sr,"class","docstring"),d(Z2,"id","transformers.AutoModelForAudioFrameClassification"),d(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z2,"href","#transformers.AutoModelForAudioFrameClassification"),d(xd,"class","relative group"),d(et,"class","docstring"),d(zj,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Wj,"href","/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(Qj,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(Hj,"href","/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(We,"class","docstring"),d(lr,"class","docstring"),d(nv,"id","transformers.AutoModelForCTC"),d(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nv,"href","#transformers.AutoModelForCTC"),d(Sd,"class","relative group"),d(ot,"class","docstring"),d(Uj,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(Jj,"href","/docs/transformers/pr_15911/en/model_doc/hubert#transformers.HubertForCTC"),d(Yj,"href","/docs/transformers/pr_15911/en/model_doc/sew#transformers.SEWForCTC"),d(Kj,"href","/docs/transformers/pr_15911/en/model_doc/sew-d#transformers.SEWDForCTC"),d(Zj,"href","/docs/transformers/pr_15911/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(eN,"href","/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(oN,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(rN,"href","/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Qe,"class","docstring"),d(ir,"class","docstring"),d(pv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Id,"class","relative group"),d(rt,"class","docstring"),d(tN,"href","/docs/transformers/pr_15911/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(aN,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(He,"class","docstring"),d(dr,"class","docstring"),d(vv,"id","transformers.AutoModelForAudioXVector"),d(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vv,"href","#transformers.AutoModelForAudioXVector"),d(Nd,"class","relative group"),d(tt,"class","docstring"),d(nN,"href","/docs/transformers/pr_15911/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(sN,"href","/docs/transformers/pr_15911/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(lN,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(iN,"href","/docs/transformers/pr_15911/en/model_doc/wavlm#transformers.WavLMForXVector"),d(Ue,"class","docstring"),d(cr,"class","docstring"),d(yv,"id","transformers.AutoModelForMaskedImageModeling"),d(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Od,"class","relative group"),d(at,"class","docstring"),d(dN,"href","/docs/transformers/pr_15911/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(cN,"href","/docs/transformers/pr_15911/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(fN,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(Je,"class","docstring"),d(fr,"class","docstring"),d(xv,"id","transformers.AutoModelForObjectDetection"),d(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xv,"href","#transformers.AutoModelForObjectDetection"),d(Wd,"class","relative group"),d(nt,"class","docstring"),d(mN,"href","/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrForObjectDetection"),d(Ye,"class","docstring"),d(mr,"class","docstring"),d(Sv,"id","transformers.AutoModelForImageSegmentation"),d(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sv,"href","#transformers.AutoModelForImageSegmentation"),d(Ud,"class","relative group"),d(st,"class","docstring"),d(gN,"href","/docs/transformers/pr_15911/en/model_doc/detr#transformers.DetrForSegmentation"),d(Ke,"class","docstring"),d(gr,"class","docstring"),d(Iv,"id","transformers.AutoModelForSemanticSegmentation"),d(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Iv,"href","#transformers.AutoModelForSemanticSegmentation"),d(Kd,"class","relative group"),d(lt,"class","docstring"),d(hN,"href","/docs/transformers/pr_15911/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(pN,"href","/docs/transformers/pr_15911/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Ze,"class","docstring"),d(hr,"class","docstring"),d(qv,"id","transformers.TFAutoModel"),d(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qv,"href","#transformers.TFAutoModel"),d(oc,"class","relative group"),d(it,"class","docstring"),d(_N,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertModel"),d(uN,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.TFBartModel"),d(bN,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertModel"),d(vN,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(TN,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(FN,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertModel"),d(CN,"href","/docs/transformers/pr_15911/en/model_doc/clip#transformers.TFCLIPModel"),d(MN,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertModel"),d(EN,"href","/docs/transformers/pr_15911/en/model_doc/convnext#transformers.TFConvNextModel"),d(yN,"href","/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.TFCTRLModel"),d(wN,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.TFDebertaModel"),d(AN,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(LN,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(BN,"href","/docs/transformers/pr_15911/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(xN,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraModel"),d(kN,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(RN,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelModel"),d(SN,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(PN,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.TFGPT2Model"),d($N,"href","/docs/transformers/pr_15911/en/model_doc/hubert#transformers.TFHubertModel"),d(IN,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(DN,"href","/docs/transformers/pr_15911/en/model_doc/led#transformers.TFLEDModel"),d(jN,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerModel"),d(NN,"href","/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.TFLxmertModel"),d(qN,"href","/docs/transformers/pr_15911/en/model_doc/marian#transformers.TFMarianModel"),d(GN,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.TFMBartModel"),d(ON,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(XN,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetModel"),d(VN,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.TFMT5Model"),d(zN,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(WN,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.TFPegasusModel"),d(QN,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertModel"),d(HN,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaModel"),d(UN,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerModel"),d(JN,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(YN,"href","/docs/transformers/pr_15911/en/model_doc/t5#transformers.TFT5Model"),d(KN,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TFTapasModel"),d(ZN,"href","/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(eq,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.TFViTModel"),d(oq,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(rq,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMModel"),d(tq,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(aq,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetModel"),d(go,"class","docstring"),d(pr,"class","docstring"),d(LT,"id","transformers.TFAutoModelForPreTraining"),d(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LT,"href","#transformers.TFAutoModelForPreTraining"),d(ac,"class","relative group"),d(dt,"class","docstring"),d(nq,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(sq,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(lq,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForPreTraining"),d(iq,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(dq,"href","/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(cq,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(fq,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(mq,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(gq,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(hq,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(pq,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(_q,"href","/docs/transformers/pr_15911/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(uq,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(bq,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(vq,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(Tq,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Fq,"href","/docs/transformers/pr_15911/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Mq,"href","/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Eq,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(yq,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(wq,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(ho,"class","docstring"),d(_r,"class","docstring"),d(YT,"id","transformers.TFAutoModelForCausalLM"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.TFAutoModelForCausalLM"),d(lc,"class","relative group"),d(ct,"class","docstring"),d(Aq,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(Lq,"href","/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(Bq,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(xq,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(kq,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(Rq,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(Sq,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(Pq,"href","/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d($q,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Iq,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(ur,"class","docstring"),d(iF,"id","transformers.TFAutoModelForImageClassification"),d(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iF,"href","#transformers.TFAutoModelForImageClassification"),d(cc,"class","relative group"),d(ft,"class","docstring"),d(Dq,"href","/docs/transformers/pr_15911/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(jq,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(br,"class","docstring"),d(fF,"id","transformers.TFAutoModelForMaskedLM"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.TFAutoModelForMaskedLM"),d(gc,"class","relative group"),d(mt,"class","docstring"),d(Nq,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(qq,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(Gq,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(Oq,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(Xq,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(Vq,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(zq,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(Wq,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(Qq,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(Hq,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(Uq,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(Jq,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(Yq,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(Kq,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Zq,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(eG,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(oG,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(rG,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(tG,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(aG,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uo,"class","docstring"),d(vr,"class","docstring"),d(RF,"id","transformers.TFAutoModelForSeq2SeqLM"),d(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RF,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(_c,"class","relative group"),d(gt,"class","docstring"),d(nG,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(sG,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(lG,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(iG,"href","/docs/transformers/pr_15911/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(dG,"href","/docs/transformers/pr_15911/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(cG,"href","/docs/transformers/pr_15911/en/model_doc/marian#transformers.TFMarianMTModel"),d(fG,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(mG,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(gG,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(hG,"href","/docs/transformers/pr_15911/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bo,"class","docstring"),d(Tr,"class","docstring"),d(XF,"id","transformers.TFAutoModelForSequenceClassification"),d(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XF,"href","#transformers.TFAutoModelForSequenceClassification"),d(vc,"class","relative group"),d(ht,"class","docstring"),d(pG,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(_G,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(uG,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(bG,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(vG,"href","/docs/transformers/pr_15911/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(TG,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(FG,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(CG,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(MG,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(EG,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(yG,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(wG,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(AG,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(LG,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(BG,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(xG,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(kG,"href","/docs/transformers/pr_15911/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(RG,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(SG,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(PG,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d($G,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(IG,"href","/docs/transformers/pr_15911/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(DG,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(jG,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(NG,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(Fr,"class","docstring"),d(p9,"id","transformers.TFAutoModelForMultipleChoice"),d(p9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p9,"href","#transformers.TFAutoModelForMultipleChoice"),d(Cc,"class","relative group"),d(pt,"class","docstring"),d(qG,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(GG,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(OG,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(XG,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(VG,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(zG,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(WG,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(QG,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(HG,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(UG,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(JG,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(YG,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(KG,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(ZG,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(eO,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(oO,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(rO,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Cr,"class","docstring"),d(S9,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(S9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(yc,"class","relative group"),d(_t,"class","docstring"),d(tO,"href","/docs/transformers/pr_15911/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Fo,"class","docstring"),d(Mr,"class","docstring"),d($9,"id","transformers.TFAutoModelForTokenClassification"),d($9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($9,"href","#transformers.TFAutoModelForTokenClassification"),d(Lc,"class","relative group"),d(ut,"class","docstring"),d(aO,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(nO,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(sO,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(lO,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(iO,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(dO,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(cO,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(fO,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(mO,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(gO,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(hO,"href","/docs/transformers/pr_15911/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(pO,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(_O,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(uO,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(bO,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(vO,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(TO,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(FO,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(CO,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(MO,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring"),d(Er,"class","docstring"),d(rC,"id","transformers.TFAutoModelForQuestionAnswering"),d(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rC,"href","#transformers.TFAutoModelForQuestionAnswering"),d(kc,"class","relative group"),d(bt,"class","docstring"),d(EO,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(yO,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(wO,"href","/docs/transformers/pr_15911/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(AO,"href","/docs/transformers/pr_15911/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(LO,"href","/docs/transformers/pr_15911/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(BO,"href","/docs/transformers/pr_15911/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(xO,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(kO,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(RO,"href","/docs/transformers/pr_15911/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(SO,"href","/docs/transformers/pr_15911/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(PO,"href","/docs/transformers/pr_15911/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d($O,"href","/docs/transformers/pr_15911/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(IO,"href","/docs/transformers/pr_15911/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(DO,"href","/docs/transformers/pr_15911/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(jO,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(NO,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(qO,"href","/docs/transformers/pr_15911/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(GO,"href","/docs/transformers/pr_15911/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(OO,"href","/docs/transformers/pr_15911/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(CC,"id","transformers.TFAutoModelForVision2Seq"),d(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CC,"href","#transformers.TFAutoModelForVision2Seq"),d(Pc,"class","relative group"),d(vt,"class","docstring"),d(XO,"href","/docs/transformers/pr_15911/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Eo,"class","docstring"),d(wr,"class","docstring"),d(EC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Dc,"class","relative group"),d(Tt,"class","docstring"),d(VO,"href","/docs/transformers/pr_15911/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring"),d(Ar,"class","docstring"),d(wC,"id","transformers.FlaxAutoModel"),d(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wC,"href","#transformers.FlaxAutoModel"),d(qc,"class","relative group"),d(Ft,"class","docstring"),d(zO,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertModel"),d(WO,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartModel"),d(QO,"href","/docs/transformers/pr_15911/en/model_doc/beit#transformers.FlaxBeitModel"),d(HO,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertModel"),d(UO,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(JO,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(YO,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(KO,"href","/docs/transformers/pr_15911/en/model_doc/clip#transformers.FlaxCLIPModel"),d(ZO,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(eX,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraModel"),d(oX,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(rX,"href","/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(tX,"href","/docs/transformers/pr_15911/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(aX,"href","/docs/transformers/pr_15911/en/model_doc/marian#transformers.FlaxMarianModel"),d(nX,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartModel"),d(sX,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.FlaxMT5Model"),d(lX,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(iX,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(dX,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(cX,"href","/docs/transformers/pr_15911/en/model_doc/t5#transformers.FlaxT5Model"),d(fX,"href","/docs/transformers/pr_15911/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(mX,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.FlaxViTModel"),d(gX,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(hX,"href","/docs/transformers/pr_15911/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(wo,"class","docstring"),d(Lr,"class","docstring"),d(YC,"id","transformers.FlaxAutoModelForCausalLM"),d(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YC,"href","#transformers.FlaxAutoModelForCausalLM"),d(Xc,"class","relative group"),d(Ct,"class","docstring"),d(pX,"href","/docs/transformers/pr_15911/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(_X,"href","/docs/transformers/pr_15911/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(uX,"href","/docs/transformers/pr_15911/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(bX,"href","/docs/transformers/pr_15911/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Ao,"class","docstring"),d(Br,"class","docstring"),d(r4,"id","transformers.FlaxAutoModelForPreTraining"),d(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r4,"href","#transformers.FlaxAutoModelForPreTraining"),d(Wc,"class","relative group"),d(Mt,"class","docstring"),d(vX,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(TX,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(FX,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(CX,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(MX,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(EX,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(yX,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(wX,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(AX,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(LX,"href","/docs/transformers/pr_15911/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_15911/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Lo,"class","docstring"),d(xr,"class","docstring"),d(h4,"id","transformers.FlaxAutoModelForMaskedLM"),d(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(Uc,"class","relative group"),d(Et,"class","docstring"),d(xX,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(kX,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(RX,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(SX,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(PX,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d($X,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(IX,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(DX,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(jX,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Bo,"class","docstring"),d(kr,"class","docstring"),d(E4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(Kc,"class","relative group"),d(yt,"class","docstring"),d(NX,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(qX,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(GX,"href","/docs/transformers/pr_15911/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(OX,"href","/docs/transformers/pr_15911/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(XX,"href","/docs/transformers/pr_15911/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(VX,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(zX,"href","/docs/transformers/pr_15911/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(WX,"href","/docs/transformers/pr_15911/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(QX,"href","/docs/transformers/pr_15911/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(xo,"class","docstring"),d(Rr,"class","docstring"),d(P4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(of,"class","relative group"),d(wt,"class","docstring"),d(HX,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(UX,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(JX,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(YX,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(KX,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(eV,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(oV,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(rV,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ko,"class","docstring"),d(Sr,"class","docstring"),d(V4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(af,"class","relative group"),d(At,"class","docstring"),d(tV,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(aV,"href","/docs/transformers/pr_15911/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(nV,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(sV,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(lV,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(iV,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(dV,"href","/docs/transformers/pr_15911/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(cV,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(fV,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Ro,"class","docstring"),d(Pr,"class","docstring"),d(eM,"id","transformers.FlaxAutoModelForTokenClassification"),d(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(lf,"class","relative group"),d(Lt,"class","docstring"),d(mV,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(gV,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(hV,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(pV,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(_V,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(uV,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(bV,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(So,"class","docstring"),d($r,"class","docstring"),d(iM,"id","transformers.FlaxAutoModelForMultipleChoice"),d(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iM,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(ff,"class","relative group"),d(Bt,"class","docstring"),d(vV,"href","/docs/transformers/pr_15911/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(TV,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(FV,"href","/docs/transformers/pr_15911/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(CV,"href","/docs/transformers/pr_15911/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(MV,"href","/docs/transformers/pr_15911/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(EV,"href","/docs/transformers/pr_15911/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(yV,"href","/docs/transformers/pr_15911/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Po,"class","docstring"),d(Ir,"class","docstring"),d(_M,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_M,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(hf,"class","relative group"),d(xt,"class","docstring"),d(wV,"href","/docs/transformers/pr_15911/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(bM,"id","transformers.FlaxAutoModelForImageClassification"),d(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bM,"href","#transformers.FlaxAutoModelForImageClassification"),d(uf,"class","relative group"),d(kt,"class","docstring"),d(AV,"href","/docs/transformers/pr_15911/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(LV,"href","/docs/transformers/pr_15911/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Io,"class","docstring"),d(jr,"class","docstring"),d(FM,"id","transformers.FlaxAutoModelForVision2Seq"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Tf,"class","relative group"),d(Rt,"class","docstring"),d(BV,"href","/docs/transformers/pr_15911/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Nr,"class","docstring")},m(c,u){e(document.head,J),b(c,Be,u),b(c,ie,u),e(ie,me),e(me,no),g(ce,no,null),e(ie,ue),e(ie,Go),e(Go,Li),b(c,Ef,u),b(c,sa,u),e(sa,Bi),e(sa,xi),e(xi,CE),e(sa,yf),b(c,ye,u),b(c,io,u),e(io,ki),e(io,In),e(In,ME),e(io,Dn),e(io,jn),e(jn,EE),e(io,Ri),e(io,Nn),e(Nn,yE),e(io,Si),b(c,wf,u),g($a,c,u),b(c,co,u),b(c,ge,u),e(ge,l8),e(ge,Pi),e(Pi,i8),e(ge,d8),b(c,Oo,u),b(c,Ia,u),e(Ia,c8),e(Ia,Af),e(Af,f8),e(Ia,$Re),b(c,y7e,u),b(c,$i,u),e($i,Lf),e(Lf,TW),g(wE,TW,null),e($i,IRe),e($i,FW),e(FW,DRe),b(c,w7e,u),b(c,qn,u),e(qn,jRe),e(qn,CW),e(CW,NRe),e(qn,qRe),e(qn,MW),e(MW,GRe),e(qn,ORe),b(c,A7e,u),g(AE,c,u),b(c,L7e,u),b(c,m8,u),e(m8,XRe),b(c,B7e,u),g(Bf,c,u),b(c,x7e,u),b(c,Ii,u),e(Ii,xf),e(xf,EW),g(LE,EW,null),e(Ii,VRe),e(Ii,yW),e(yW,zRe),b(c,k7e,u),b(c,Xo,u),g(BE,Xo,null),e(Xo,WRe),e(Xo,xE),e(xE,QRe),e(xE,g8),e(g8,HRe),e(xE,URe),e(Xo,JRe),e(Xo,kE),e(kE,YRe),e(kE,wW),e(wW,KRe),e(kE,ZRe),e(Xo,eSe),e(Xo,fo),g(RE,fo,null),e(fo,oSe),e(fo,AW),e(AW,rSe),e(fo,tSe),e(fo,Di),e(Di,aSe),e(Di,LW),e(LW,nSe),e(Di,sSe),e(Di,BW),e(BW,lSe),e(Di,iSe),e(fo,dSe),e(fo,v),e(v,kf),e(kf,xW),e(xW,cSe),e(kf,fSe),e(kf,h8),e(h8,mSe),e(kf,gSe),e(v,hSe),e(v,Rf),e(Rf,kW),e(kW,pSe),e(Rf,_Se),e(Rf,p8),e(p8,uSe),e(Rf,bSe),e(v,vSe),e(v,Sf),e(Sf,RW),e(RW,TSe),e(Sf,FSe),e(Sf,_8),e(_8,CSe),e(Sf,MSe),e(v,ESe),e(v,Pf),e(Pf,SW),e(SW,ySe),e(Pf,wSe),e(Pf,u8),e(u8,ASe),e(Pf,LSe),e(v,BSe),e(v,$f),e($f,PW),e(PW,xSe),e($f,kSe),e($f,b8),e(b8,RSe),e($f,SSe),e(v,PSe),e(v,If),e(If,$W),e($W,$Se),e(If,ISe),e(If,v8),e(v8,DSe),e(If,jSe),e(v,NSe),e(v,Df),e(Df,IW),e(IW,qSe),e(Df,GSe),e(Df,T8),e(T8,OSe),e(Df,XSe),e(v,VSe),e(v,jf),e(jf,DW),e(DW,zSe),e(jf,WSe),e(jf,F8),e(F8,QSe),e(jf,HSe),e(v,USe),e(v,Nf),e(Nf,jW),e(jW,JSe),e(Nf,YSe),e(Nf,C8),e(C8,KSe),e(Nf,ZSe),e(v,ePe),e(v,qf),e(qf,NW),e(NW,oPe),e(qf,rPe),e(qf,M8),e(M8,tPe),e(qf,aPe),e(v,nPe),e(v,Gf),e(Gf,qW),e(qW,sPe),e(Gf,lPe),e(Gf,E8),e(E8,iPe),e(Gf,dPe),e(v,cPe),e(v,Of),e(Of,GW),e(GW,fPe),e(Of,mPe),e(Of,y8),e(y8,gPe),e(Of,hPe),e(v,pPe),e(v,Xf),e(Xf,OW),e(OW,_Pe),e(Xf,uPe),e(Xf,w8),e(w8,bPe),e(Xf,vPe),e(v,TPe),e(v,Vf),e(Vf,XW),e(XW,FPe),e(Vf,CPe),e(Vf,A8),e(A8,MPe),e(Vf,EPe),e(v,yPe),e(v,zf),e(zf,VW),e(VW,wPe),e(zf,APe),e(zf,L8),e(L8,LPe),e(zf,BPe),e(v,xPe),e(v,Wf),e(Wf,zW),e(zW,kPe),e(Wf,RPe),e(Wf,B8),e(B8,SPe),e(Wf,PPe),e(v,$Pe),e(v,Qf),e(Qf,WW),e(WW,IPe),e(Qf,DPe),e(Qf,x8),e(x8,jPe),e(Qf,NPe),e(v,qPe),e(v,Hf),e(Hf,QW),e(QW,GPe),e(Hf,OPe),e(Hf,k8),e(k8,XPe),e(Hf,VPe),e(v,zPe),e(v,Uf),e(Uf,HW),e(HW,WPe),e(Uf,QPe),e(Uf,R8),e(R8,HPe),e(Uf,UPe),e(v,JPe),e(v,Jf),e(Jf,UW),e(UW,YPe),e(Jf,KPe),e(Jf,S8),e(S8,ZPe),e(Jf,e$e),e(v,o$e),e(v,Yf),e(Yf,JW),e(JW,r$e),e(Yf,t$e),e(Yf,P8),e(P8,a$e),e(Yf,n$e),e(v,s$e),e(v,Kf),e(Kf,YW),e(YW,l$e),e(Kf,i$e),e(Kf,$8),e($8,d$e),e(Kf,c$e),e(v,f$e),e(v,Zf),e(Zf,KW),e(KW,m$e),e(Zf,g$e),e(Zf,I8),e(I8,h$e),e(Zf,p$e),e(v,_$e),e(v,em),e(em,ZW),e(ZW,u$e),e(em,b$e),e(em,D8),e(D8,v$e),e(em,T$e),e(v,F$e),e(v,om),e(om,eQ),e(eQ,C$e),e(om,M$e),e(om,j8),e(j8,E$e),e(om,y$e),e(v,w$e),e(v,rm),e(rm,oQ),e(oQ,A$e),e(rm,L$e),e(rm,N8),e(N8,B$e),e(rm,x$e),e(v,k$e),e(v,tm),e(tm,rQ),e(rQ,R$e),e(tm,S$e),e(tm,q8),e(q8,P$e),e(tm,$$e),e(v,I$e),e(v,am),e(am,tQ),e(tQ,D$e),e(am,j$e),e(am,G8),e(G8,N$e),e(am,q$e),e(v,G$e),e(v,nm),e(nm,aQ),e(aQ,O$e),e(nm,X$e),e(nm,O8),e(O8,V$e),e(nm,z$e),e(v,W$e),e(v,sm),e(sm,nQ),e(nQ,Q$e),e(sm,H$e),e(sm,X8),e(X8,U$e),e(sm,J$e),e(v,Y$e),e(v,lm),e(lm,sQ),e(sQ,K$e),e(lm,Z$e),e(lm,V8),e(V8,eIe),e(lm,oIe),e(v,rIe),e(v,im),e(im,lQ),e(lQ,tIe),e(im,aIe),e(im,z8),e(z8,nIe),e(im,sIe),e(v,lIe),e(v,dm),e(dm,iQ),e(iQ,iIe),e(dm,dIe),e(dm,W8),e(W8,cIe),e(dm,fIe),e(v,mIe),e(v,cm),e(cm,dQ),e(dQ,gIe),e(cm,hIe),e(cm,Q8),e(Q8,pIe),e(cm,_Ie),e(v,uIe),e(v,fm),e(fm,cQ),e(cQ,bIe),e(fm,vIe),e(fm,H8),e(H8,TIe),e(fm,FIe),e(v,CIe),e(v,mm),e(mm,fQ),e(fQ,MIe),e(mm,EIe),e(mm,U8),e(U8,yIe),e(mm,wIe),e(v,AIe),e(v,gm),e(gm,mQ),e(mQ,LIe),e(gm,BIe),e(gm,J8),e(J8,xIe),e(gm,kIe),e(v,RIe),e(v,hm),e(hm,gQ),e(gQ,SIe),e(hm,PIe),e(hm,Y8),e(Y8,$Ie),e(hm,IIe),e(v,DIe),e(v,pm),e(pm,hQ),e(hQ,jIe),e(pm,NIe),e(pm,K8),e(K8,qIe),e(pm,GIe),e(v,OIe),e(v,_m),e(_m,pQ),e(pQ,XIe),e(_m,VIe),e(_m,Z8),e(Z8,zIe),e(_m,WIe),e(v,QIe),e(v,um),e(um,_Q),e(_Q,HIe),e(um,UIe),e(um,e7),e(e7,JIe),e(um,YIe),e(v,KIe),e(v,bm),e(bm,uQ),e(uQ,ZIe),e(bm,eDe),e(bm,o7),e(o7,oDe),e(bm,rDe),e(v,tDe),e(v,vm),e(vm,bQ),e(bQ,aDe),e(vm,nDe),e(vm,r7),e(r7,sDe),e(vm,lDe),e(v,iDe),e(v,Tm),e(Tm,vQ),e(vQ,dDe),e(Tm,cDe),e(Tm,t7),e(t7,fDe),e(Tm,mDe),e(v,gDe),e(v,Fm),e(Fm,TQ),e(TQ,hDe),e(Fm,pDe),e(Fm,a7),e(a7,_De),e(Fm,uDe),e(v,bDe),e(v,Cm),e(Cm,FQ),e(FQ,vDe),e(Cm,TDe),e(Cm,n7),e(n7,FDe),e(Cm,CDe),e(v,MDe),e(v,Mm),e(Mm,CQ),e(CQ,EDe),e(Mm,yDe),e(Mm,s7),e(s7,wDe),e(Mm,ADe),e(v,LDe),e(v,Em),e(Em,MQ),e(MQ,BDe),e(Em,xDe),e(Em,l7),e(l7,kDe),e(Em,RDe),e(v,SDe),e(v,ym),e(ym,EQ),e(EQ,PDe),e(ym,$De),e(ym,i7),e(i7,IDe),e(ym,DDe),e(v,jDe),e(v,wm),e(wm,yQ),e(yQ,NDe),e(wm,qDe),e(wm,d7),e(d7,GDe),e(wm,ODe),e(v,XDe),e(v,Am),e(Am,wQ),e(wQ,VDe),e(Am,zDe),e(Am,c7),e(c7,WDe),e(Am,QDe),e(v,HDe),e(v,Lm),e(Lm,AQ),e(AQ,UDe),e(Lm,JDe),e(Lm,f7),e(f7,YDe),e(Lm,KDe),e(v,ZDe),e(v,Bm),e(Bm,LQ),e(LQ,eje),e(Bm,oje),e(Bm,m7),e(m7,rje),e(Bm,tje),e(v,aje),e(v,xm),e(xm,BQ),e(BQ,nje),e(xm,sje),e(xm,g7),e(g7,lje),e(xm,ije),e(v,dje),e(v,km),e(km,xQ),e(xQ,cje),e(km,fje),e(km,h7),e(h7,mje),e(km,gje),e(v,hje),e(v,Rm),e(Rm,kQ),e(kQ,pje),e(Rm,_je),e(Rm,p7),e(p7,uje),e(Rm,bje),e(v,vje),e(v,Sm),e(Sm,RQ),e(RQ,Tje),e(Sm,Fje),e(Sm,_7),e(_7,Cje),e(Sm,Mje),e(v,Eje),e(v,Pm),e(Pm,SQ),e(SQ,yje),e(Pm,wje),e(Pm,u7),e(u7,Aje),e(Pm,Lje),e(v,Bje),e(v,$m),e($m,PQ),e(PQ,xje),e($m,kje),e($m,b7),e(b7,Rje),e($m,Sje),e(v,Pje),e(v,Im),e(Im,$Q),e($Q,$je),e(Im,Ije),e(Im,v7),e(v7,Dje),e(Im,jje),e(v,Nje),e(v,Dm),e(Dm,IQ),e(IQ,qje),e(Dm,Gje),e(Dm,T7),e(T7,Oje),e(Dm,Xje),e(v,Vje),e(v,jm),e(jm,DQ),e(DQ,zje),e(jm,Wje),e(jm,F7),e(F7,Qje),e(jm,Hje),e(v,Uje),e(v,Nm),e(Nm,jQ),e(jQ,Jje),e(Nm,Yje),e(Nm,C7),e(C7,Kje),e(Nm,Zje),e(v,eNe),e(v,qm),e(qm,NQ),e(NQ,oNe),e(qm,rNe),e(qm,M7),e(M7,tNe),e(qm,aNe),e(v,nNe),e(v,Gm),e(Gm,qQ),e(qQ,sNe),e(Gm,lNe),e(Gm,E7),e(E7,iNe),e(Gm,dNe),e(v,cNe),e(v,Om),e(Om,GQ),e(GQ,fNe),e(Om,mNe),e(Om,y7),e(y7,gNe),e(Om,hNe),e(v,pNe),e(v,Xm),e(Xm,OQ),e(OQ,_Ne),e(Xm,uNe),e(Xm,w7),e(w7,bNe),e(Xm,vNe),e(v,TNe),e(v,Vm),e(Vm,XQ),e(XQ,FNe),e(Vm,CNe),e(Vm,A7),e(A7,MNe),e(Vm,ENe),e(v,yNe),e(v,zm),e(zm,VQ),e(VQ,wNe),e(zm,ANe),e(zm,L7),e(L7,LNe),e(zm,BNe),e(v,xNe),e(v,Wm),e(Wm,zQ),e(zQ,kNe),e(Wm,RNe),e(Wm,B7),e(B7,SNe),e(Wm,PNe),e(v,$Ne),e(v,Qm),e(Qm,WQ),e(WQ,INe),e(Qm,DNe),e(Qm,x7),e(x7,jNe),e(Qm,NNe),e(v,qNe),e(v,Hm),e(Hm,QQ),e(QQ,GNe),e(Hm,ONe),e(Hm,k7),e(k7,XNe),e(Hm,VNe),e(v,zNe),e(v,Um),e(Um,HQ),e(HQ,WNe),e(Um,QNe),e(Um,R7),e(R7,HNe),e(Um,UNe),e(v,JNe),e(v,Jm),e(Jm,UQ),e(UQ,YNe),e(Jm,KNe),e(Jm,S7),e(S7,ZNe),e(Jm,eqe),e(v,oqe),e(v,Ym),e(Ym,JQ),e(JQ,rqe),e(Ym,tqe),e(Ym,P7),e(P7,aqe),e(Ym,nqe),e(v,sqe),e(v,Km),e(Km,YQ),e(YQ,lqe),e(Km,iqe),e(Km,$7),e($7,dqe),e(Km,cqe),e(v,fqe),e(v,Zm),e(Zm,KQ),e(KQ,mqe),e(Zm,gqe),e(Zm,I7),e(I7,hqe),e(Zm,pqe),e(v,_qe),e(v,eg),e(eg,ZQ),e(ZQ,uqe),e(eg,bqe),e(eg,D7),e(D7,vqe),e(eg,Tqe),e(v,Fqe),e(v,og),e(og,eH),e(eH,Cqe),e(og,Mqe),e(og,j7),e(j7,Eqe),e(og,yqe),e(v,wqe),e(v,rg),e(rg,oH),e(oH,Aqe),e(rg,Lqe),e(rg,N7),e(N7,Bqe),e(rg,xqe),e(v,kqe),e(v,tg),e(tg,rH),e(rH,Rqe),e(tg,Sqe),e(tg,q7),e(q7,Pqe),e(tg,$qe),e(v,Iqe),e(v,ag),e(ag,tH),e(tH,Dqe),e(ag,jqe),e(ag,G7),e(G7,Nqe),e(ag,qqe),e(v,Gqe),e(v,ng),e(ng,aH),e(aH,Oqe),e(ng,Xqe),e(ng,O7),e(O7,Vqe),e(ng,zqe),e(v,Wqe),e(v,sg),e(sg,nH),e(nH,Qqe),e(sg,Hqe),e(sg,X7),e(X7,Uqe),e(sg,Jqe),e(v,Yqe),e(v,lg),e(lg,sH),e(sH,Kqe),e(lg,Zqe),e(lg,V7),e(V7,eGe),e(lg,oGe),e(v,rGe),e(v,ig),e(ig,lH),e(lH,tGe),e(ig,aGe),e(ig,z7),e(z7,nGe),e(ig,sGe),e(v,lGe),e(v,dg),e(dg,iH),e(iH,iGe),e(dg,dGe),e(dg,W7),e(W7,cGe),e(dg,fGe),e(v,mGe),e(v,cg),e(cg,dH),e(dH,gGe),e(cg,hGe),e(cg,Q7),e(Q7,pGe),e(cg,_Ge),e(v,uGe),e(v,fg),e(fg,cH),e(cH,bGe),e(fg,vGe),e(fg,H7),e(H7,TGe),e(fg,FGe),e(v,CGe),e(v,mg),e(mg,fH),e(fH,MGe),e(mg,EGe),e(mg,U7),e(U7,yGe),e(mg,wGe),e(v,AGe),e(v,gg),e(gg,mH),e(mH,LGe),e(gg,BGe),e(gg,J7),e(J7,xGe),e(gg,kGe),e(v,RGe),e(v,hg),e(hg,gH),e(gH,SGe),e(hg,PGe),e(hg,Y7),e(Y7,$Ge),e(hg,IGe),e(v,DGe),e(v,pg),e(pg,hH),e(hH,jGe),e(pg,NGe),e(pg,K7),e(K7,qGe),e(pg,GGe),e(v,OGe),e(v,_g),e(_g,pH),e(pH,XGe),e(_g,VGe),e(_g,Z7),e(Z7,zGe),e(_g,WGe),e(fo,QGe),e(fo,_H),e(_H,HGe),e(fo,UGe),g(SE,fo,null),e(Xo,JGe),e(Xo,ug),g(PE,ug,null),e(ug,YGe),e(ug,uH),e(uH,KGe),b(c,R7e,u),b(c,ji,u),e(ji,bg),e(bg,bH),g($E,bH,null),e(ji,ZGe),e(ji,vH),e(vH,eOe),b(c,S7e,u),b(c,Vo,u),g(IE,Vo,null),e(Vo,oOe),e(Vo,DE),e(DE,rOe),e(DE,eB),e(eB,tOe),e(DE,aOe),e(Vo,nOe),e(Vo,jE),e(jE,sOe),e(jE,TH),e(TH,lOe),e(jE,iOe),e(Vo,dOe),e(Vo,mo),g(NE,mo,null),e(mo,cOe),e(mo,FH),e(FH,fOe),e(mo,mOe),e(mo,Da),e(Da,gOe),e(Da,CH),e(CH,hOe),e(Da,pOe),e(Da,MH),e(MH,_Oe),e(Da,uOe),e(Da,EH),e(EH,bOe),e(Da,vOe),e(mo,TOe),e(mo,M),e(M,Gn),e(Gn,yH),e(yH,FOe),e(Gn,COe),e(Gn,oB),e(oB,MOe),e(Gn,EOe),e(Gn,rB),e(rB,yOe),e(Gn,wOe),e(M,AOe),e(M,On),e(On,wH),e(wH,LOe),e(On,BOe),e(On,tB),e(tB,xOe),e(On,kOe),e(On,aB),e(aB,ROe),e(On,SOe),e(M,POe),e(M,Xn),e(Xn,AH),e(AH,$Oe),e(Xn,IOe),e(Xn,nB),e(nB,DOe),e(Xn,jOe),e(Xn,sB),e(sB,NOe),e(Xn,qOe),e(M,GOe),e(M,vg),e(vg,LH),e(LH,OOe),e(vg,XOe),e(vg,lB),e(lB,VOe),e(vg,zOe),e(M,WOe),e(M,Vn),e(Vn,BH),e(BH,QOe),e(Vn,HOe),e(Vn,iB),e(iB,UOe),e(Vn,JOe),e(Vn,dB),e(dB,YOe),e(Vn,KOe),e(M,ZOe),e(M,Tg),e(Tg,xH),e(xH,eXe),e(Tg,oXe),e(Tg,cB),e(cB,rXe),e(Tg,tXe),e(M,aXe),e(M,Fg),e(Fg,kH),e(kH,nXe),e(Fg,sXe),e(Fg,fB),e(fB,lXe),e(Fg,iXe),e(M,dXe),e(M,Cg),e(Cg,RH),e(RH,cXe),e(Cg,fXe),e(Cg,mB),e(mB,mXe),e(Cg,gXe),e(M,hXe),e(M,zn),e(zn,SH),e(SH,pXe),e(zn,_Xe),e(zn,gB),e(gB,uXe),e(zn,bXe),e(zn,hB),e(hB,vXe),e(zn,TXe),e(M,FXe),e(M,Wn),e(Wn,PH),e(PH,CXe),e(Wn,MXe),e(Wn,pB),e(pB,EXe),e(Wn,yXe),e(Wn,_B),e(_B,wXe),e(Wn,AXe),e(M,LXe),e(M,Qn),e(Qn,$H),e($H,BXe),e(Qn,xXe),e(Qn,uB),e(uB,kXe),e(Qn,RXe),e(Qn,bB),e(bB,SXe),e(Qn,PXe),e(M,$Xe),e(M,Mg),e(Mg,IH),e(IH,IXe),e(Mg,DXe),e(Mg,vB),e(vB,jXe),e(Mg,NXe),e(M,qXe),e(M,Eg),e(Eg,DH),e(DH,GXe),e(Eg,OXe),e(Eg,TB),e(TB,XXe),e(Eg,VXe),e(M,zXe),e(M,Hn),e(Hn,jH),e(jH,WXe),e(Hn,QXe),e(Hn,FB),e(FB,HXe),e(Hn,UXe),e(Hn,CB),e(CB,JXe),e(Hn,YXe),e(M,KXe),e(M,yg),e(yg,NH),e(NH,ZXe),e(yg,eVe),e(yg,MB),e(MB,oVe),e(yg,rVe),e(M,tVe),e(M,Un),e(Un,qH),e(qH,aVe),e(Un,nVe),e(Un,EB),e(EB,sVe),e(Un,lVe),e(Un,yB),e(yB,iVe),e(Un,dVe),e(M,cVe),e(M,Jn),e(Jn,GH),e(GH,fVe),e(Jn,mVe),e(Jn,wB),e(wB,gVe),e(Jn,hVe),e(Jn,AB),e(AB,pVe),e(Jn,_Ve),e(M,uVe),e(M,Yn),e(Yn,OH),e(OH,bVe),e(Yn,vVe),e(Yn,LB),e(LB,TVe),e(Yn,FVe),e(Yn,XH),e(XH,CVe),e(Yn,MVe),e(M,EVe),e(M,wg),e(wg,VH),e(VH,yVe),e(wg,wVe),e(wg,BB),e(BB,AVe),e(wg,LVe),e(M,BVe),e(M,Kn),e(Kn,zH),e(zH,xVe),e(Kn,kVe),e(Kn,xB),e(xB,RVe),e(Kn,SVe),e(Kn,kB),e(kB,PVe),e(Kn,$Ve),e(M,IVe),e(M,Ag),e(Ag,WH),e(WH,DVe),e(Ag,jVe),e(Ag,RB),e(RB,NVe),e(Ag,qVe),e(M,GVe),e(M,Zn),e(Zn,QH),e(QH,OVe),e(Zn,XVe),e(Zn,SB),e(SB,VVe),e(Zn,zVe),e(Zn,PB),e(PB,WVe),e(Zn,QVe),e(M,HVe),e(M,es),e(es,HH),e(HH,UVe),e(es,JVe),e(es,$B),e($B,YVe),e(es,KVe),e(es,IB),e(IB,ZVe),e(es,eze),e(M,oze),e(M,os),e(os,UH),e(UH,rze),e(os,tze),e(os,DB),e(DB,aze),e(os,nze),e(os,jB),e(jB,sze),e(os,lze),e(M,ize),e(M,Lg),e(Lg,JH),e(JH,dze),e(Lg,cze),e(Lg,NB),e(NB,fze),e(Lg,mze),e(M,gze),e(M,rs),e(rs,YH),e(YH,hze),e(rs,pze),e(rs,qB),e(qB,_ze),e(rs,uze),e(rs,GB),e(GB,bze),e(rs,vze),e(M,Tze),e(M,Bg),e(Bg,KH),e(KH,Fze),e(Bg,Cze),e(Bg,OB),e(OB,Mze),e(Bg,Eze),e(M,yze),e(M,ts),e(ts,ZH),e(ZH,wze),e(ts,Aze),e(ts,XB),e(XB,Lze),e(ts,Bze),e(ts,VB),e(VB,xze),e(ts,kze),e(M,Rze),e(M,as),e(as,eU),e(eU,Sze),e(as,Pze),e(as,zB),e(zB,$ze),e(as,Ize),e(as,WB),e(WB,Dze),e(as,jze),e(M,Nze),e(M,ns),e(ns,oU),e(oU,qze),e(ns,Gze),e(ns,QB),e(QB,Oze),e(ns,Xze),e(ns,HB),e(HB,Vze),e(ns,zze),e(M,Wze),e(M,ss),e(ss,rU),e(rU,Qze),e(ss,Hze),e(ss,UB),e(UB,Uze),e(ss,Jze),e(ss,JB),e(JB,Yze),e(ss,Kze),e(M,Zze),e(M,xg),e(xg,tU),e(tU,eWe),e(xg,oWe),e(xg,YB),e(YB,rWe),e(xg,tWe),e(M,aWe),e(M,ls),e(ls,aU),e(aU,nWe),e(ls,sWe),e(ls,KB),e(KB,lWe),e(ls,iWe),e(ls,ZB),e(ZB,dWe),e(ls,cWe),e(M,fWe),e(M,is),e(is,nU),e(nU,mWe),e(is,gWe),e(is,ex),e(ex,hWe),e(is,pWe),e(is,ox),e(ox,_We),e(is,uWe),e(M,bWe),e(M,ds),e(ds,sU),e(sU,vWe),e(ds,TWe),e(ds,rx),e(rx,FWe),e(ds,CWe),e(ds,tx),e(tx,MWe),e(ds,EWe),e(M,yWe),e(M,cs),e(cs,lU),e(lU,wWe),e(cs,AWe),e(cs,ax),e(ax,LWe),e(cs,BWe),e(cs,nx),e(nx,xWe),e(cs,kWe),e(M,RWe),e(M,fs),e(fs,iU),e(iU,SWe),e(fs,PWe),e(fs,sx),e(sx,$We),e(fs,IWe),e(fs,lx),e(lx,DWe),e(fs,jWe),e(M,NWe),e(M,ms),e(ms,dU),e(dU,qWe),e(ms,GWe),e(ms,ix),e(ix,OWe),e(ms,XWe),e(ms,dx),e(dx,VWe),e(ms,zWe),e(M,WWe),e(M,kg),e(kg,cU),e(cU,QWe),e(kg,HWe),e(kg,cx),e(cx,UWe),e(kg,JWe),e(M,YWe),e(M,gs),e(gs,fU),e(fU,KWe),e(gs,ZWe),e(gs,fx),e(fx,eQe),e(gs,oQe),e(gs,mx),e(mx,rQe),e(gs,tQe),e(M,aQe),e(M,Rg),e(Rg,mU),e(mU,nQe),e(Rg,sQe),e(Rg,gx),e(gx,lQe),e(Rg,iQe),e(M,dQe),e(M,Sg),e(Sg,gU),e(gU,cQe),e(Sg,fQe),e(Sg,hx),e(hx,mQe),e(Sg,gQe),e(M,hQe),e(M,hs),e(hs,hU),e(hU,pQe),e(hs,_Qe),e(hs,px),e(px,uQe),e(hs,bQe),e(hs,_x),e(_x,vQe),e(hs,TQe),e(M,FQe),e(M,ps),e(ps,pU),e(pU,CQe),e(ps,MQe),e(ps,ux),e(ux,EQe),e(ps,yQe),e(ps,bx),e(bx,wQe),e(ps,AQe),e(M,LQe),e(M,Pg),e(Pg,_U),e(_U,BQe),e(Pg,xQe),e(Pg,vx),e(vx,kQe),e(Pg,RQe),e(M,SQe),e(M,_s),e(_s,uU),e(uU,PQe),e(_s,$Qe),e(_s,Tx),e(Tx,IQe),e(_s,DQe),e(_s,Fx),e(Fx,jQe),e(_s,NQe),e(M,qQe),e(M,us),e(us,bU),e(bU,GQe),e(us,OQe),e(us,Cx),e(Cx,XQe),e(us,VQe),e(us,Mx),e(Mx,zQe),e(us,WQe),e(M,QQe),e(M,bs),e(bs,vU),e(vU,HQe),e(bs,UQe),e(bs,Ex),e(Ex,JQe),e(bs,YQe),e(bs,yx),e(yx,KQe),e(bs,ZQe),e(M,eHe),e(M,vs),e(vs,TU),e(TU,oHe),e(vs,rHe),e(vs,wx),e(wx,tHe),e(vs,aHe),e(vs,Ax),e(Ax,nHe),e(vs,sHe),e(M,lHe),e(M,Ts),e(Ts,FU),e(FU,iHe),e(Ts,dHe),e(Ts,Lx),e(Lx,cHe),e(Ts,fHe),e(Ts,Bx),e(Bx,mHe),e(Ts,gHe),e(M,hHe),e(M,$g),e($g,CU),e(CU,pHe),e($g,_He),e($g,xx),e(xx,uHe),e($g,bHe),e(M,vHe),e(M,Ig),e(Ig,MU),e(MU,THe),e(Ig,FHe),e(Ig,kx),e(kx,CHe),e(Ig,MHe),e(M,EHe),e(M,Dg),e(Dg,EU),e(EU,yHe),e(Dg,wHe),e(Dg,Rx),e(Rx,AHe),e(Dg,LHe),e(M,BHe),e(M,jg),e(jg,yU),e(yU,xHe),e(jg,kHe),e(jg,Sx),e(Sx,RHe),e(jg,SHe),e(M,PHe),e(M,Fs),e(Fs,wU),e(wU,$He),e(Fs,IHe),e(Fs,Px),e(Px,DHe),e(Fs,jHe),e(Fs,$x),e($x,NHe),e(Fs,qHe),e(M,GHe),e(M,Ng),e(Ng,AU),e(AU,OHe),e(Ng,XHe),e(Ng,Ix),e(Ix,VHe),e(Ng,zHe),e(M,WHe),e(M,Cs),e(Cs,LU),e(LU,QHe),e(Cs,HHe),e(Cs,Dx),e(Dx,UHe),e(Cs,JHe),e(Cs,jx),e(jx,YHe),e(Cs,KHe),e(M,ZHe),e(M,Ms),e(Ms,BU),e(BU,eUe),e(Ms,oUe),e(Ms,Nx),e(Nx,rUe),e(Ms,tUe),e(Ms,qx),e(qx,aUe),e(Ms,nUe),e(M,sUe),e(M,Es),e(Es,xU),e(xU,lUe),e(Es,iUe),e(Es,Gx),e(Gx,dUe),e(Es,cUe),e(Es,Ox),e(Ox,fUe),e(Es,mUe),e(M,gUe),e(M,ys),e(ys,kU),e(kU,hUe),e(ys,pUe),e(ys,Xx),e(Xx,_Ue),e(ys,uUe),e(ys,Vx),e(Vx,bUe),e(ys,vUe),e(M,TUe),e(M,ws),e(ws,RU),e(RU,FUe),e(ws,CUe),e(ws,zx),e(zx,MUe),e(ws,EUe),e(ws,Wx),e(Wx,yUe),e(ws,wUe),e(M,AUe),e(M,qg),e(qg,SU),e(SU,LUe),e(qg,BUe),e(qg,Qx),e(Qx,xUe),e(qg,kUe),e(M,RUe),e(M,Gg),e(Gg,PU),e(PU,SUe),e(Gg,PUe),e(Gg,Hx),e(Hx,$Ue),e(Gg,IUe),e(M,DUe),e(M,As),e(As,$U),e($U,jUe),e(As,NUe),e(As,Ux),e(Ux,qUe),e(As,GUe),e(As,Jx),e(Jx,OUe),e(As,XUe),e(M,VUe),e(M,Ls),e(Ls,IU),e(IU,zUe),e(Ls,WUe),e(Ls,Yx),e(Yx,QUe),e(Ls,HUe),e(Ls,Kx),e(Kx,UUe),e(Ls,JUe),e(M,YUe),e(M,Bs),e(Bs,DU),e(DU,KUe),e(Bs,ZUe),e(Bs,Zx),e(Zx,eJe),e(Bs,oJe),e(Bs,ek),e(ek,rJe),e(Bs,tJe),e(M,aJe),e(M,Og),e(Og,jU),e(jU,nJe),e(Og,sJe),e(Og,ok),e(ok,lJe),e(Og,iJe),e(M,dJe),e(M,Xg),e(Xg,NU),e(NU,cJe),e(Xg,fJe),e(Xg,rk),e(rk,mJe),e(Xg,gJe),e(M,hJe),e(M,Vg),e(Vg,qU),e(qU,pJe),e(Vg,_Je),e(Vg,tk),e(tk,uJe),e(Vg,bJe),e(M,vJe),e(M,zg),e(zg,GU),e(GU,TJe),e(zg,FJe),e(zg,ak),e(ak,CJe),e(zg,MJe),e(M,EJe),e(M,xs),e(xs,OU),e(OU,yJe),e(xs,wJe),e(xs,nk),e(nk,AJe),e(xs,LJe),e(xs,sk),e(sk,BJe),e(xs,xJe),e(M,kJe),e(M,Wg),e(Wg,XU),e(XU,RJe),e(Wg,SJe),e(Wg,lk),e(lk,PJe),e(Wg,$Je),e(M,IJe),e(M,Qg),e(Qg,VU),e(VU,DJe),e(Qg,jJe),e(Qg,ik),e(ik,NJe),e(Qg,qJe),e(M,GJe),e(M,ks),e(ks,zU),e(zU,OJe),e(ks,XJe),e(ks,dk),e(dk,VJe),e(ks,zJe),e(ks,ck),e(ck,WJe),e(ks,QJe),e(M,HJe),e(M,Rs),e(Rs,WU),e(WU,UJe),e(Rs,JJe),e(Rs,fk),e(fk,YJe),e(Rs,KJe),e(Rs,mk),e(mk,ZJe),e(Rs,eYe),e(mo,oYe),e(mo,QU),e(QU,rYe),e(mo,tYe),g(qE,mo,null),e(Vo,aYe),e(Vo,Hg),g(GE,Hg,null),e(Hg,nYe),e(Hg,HU),e(HU,sYe),b(c,P7e,u),b(c,Ni,u),e(Ni,Ug),e(Ug,UU),g(OE,UU,null),e(Ni,lYe),e(Ni,JU),e(JU,iYe),b(c,$7e,u),b(c,zo,u),g(XE,zo,null),e(zo,dYe),e(zo,VE),e(VE,cYe),e(VE,gk),e(gk,fYe),e(VE,mYe),e(zo,gYe),e(zo,zE),e(zE,hYe),e(zE,YU),e(YU,pYe),e(zE,_Ye),e(zo,uYe),e(zo,xe),g(WE,xe,null),e(xe,bYe),e(xe,KU),e(KU,vYe),e(xe,TYe),e(xe,ja),e(ja,FYe),e(ja,ZU),e(ZU,CYe),e(ja,MYe),e(ja,eJ),e(eJ,EYe),e(ja,yYe),e(ja,oJ),e(oJ,wYe),e(ja,AYe),e(xe,LYe),e(xe,se),e(se,Jg),e(Jg,rJ),e(rJ,BYe),e(Jg,xYe),e(Jg,hk),e(hk,kYe),e(Jg,RYe),e(se,SYe),e(se,Yg),e(Yg,tJ),e(tJ,PYe),e(Yg,$Ye),e(Yg,pk),e(pk,IYe),e(Yg,DYe),e(se,jYe),e(se,Kg),e(Kg,aJ),e(aJ,NYe),e(Kg,qYe),e(Kg,_k),e(_k,GYe),e(Kg,OYe),e(se,XYe),e(se,Zg),e(Zg,nJ),e(nJ,VYe),e(Zg,zYe),e(Zg,uk),e(uk,WYe),e(Zg,QYe),e(se,HYe),e(se,eh),e(eh,sJ),e(sJ,UYe),e(eh,JYe),e(eh,bk),e(bk,YYe),e(eh,KYe),e(se,ZYe),e(se,oh),e(oh,lJ),e(lJ,eKe),e(oh,oKe),e(oh,vk),e(vk,rKe),e(oh,tKe),e(se,aKe),e(se,rh),e(rh,iJ),e(iJ,nKe),e(rh,sKe),e(rh,Tk),e(Tk,lKe),e(rh,iKe),e(se,dKe),e(se,th),e(th,dJ),e(dJ,cKe),e(th,fKe),e(th,Fk),e(Fk,mKe),e(th,gKe),e(se,hKe),e(se,ah),e(ah,cJ),e(cJ,pKe),e(ah,_Ke),e(ah,Ck),e(Ck,uKe),e(ah,bKe),e(se,vKe),e(se,nh),e(nh,fJ),e(fJ,TKe),e(nh,FKe),e(nh,Mk),e(Mk,CKe),e(nh,MKe),e(se,EKe),e(se,sh),e(sh,mJ),e(mJ,yKe),e(sh,wKe),e(sh,Ek),e(Ek,AKe),e(sh,LKe),e(se,BKe),e(se,lh),e(lh,gJ),e(gJ,xKe),e(lh,kKe),e(lh,yk),e(yk,RKe),e(lh,SKe),e(se,PKe),e(se,ih),e(ih,hJ),e(hJ,$Ke),e(ih,IKe),e(ih,wk),e(wk,DKe),e(ih,jKe),e(se,NKe),e(se,dh),e(dh,pJ),e(pJ,qKe),e(dh,GKe),e(dh,Ak),e(Ak,OKe),e(dh,XKe),e(se,VKe),e(se,ch),e(ch,_J),e(_J,zKe),e(ch,WKe),e(ch,Lk),e(Lk,QKe),e(ch,HKe),e(xe,UKe),g(fh,xe,null),e(xe,JKe),e(xe,uJ),e(uJ,YKe),e(xe,KKe),g(QE,xe,null),e(zo,ZKe),e(zo,mh),g(HE,mh,null),e(mh,eZe),e(mh,bJ),e(bJ,oZe),b(c,I7e,u),b(c,qi,u),e(qi,gh),e(gh,vJ),g(UE,vJ,null),e(qi,rZe),e(qi,TJ),e(TJ,tZe),b(c,D7e,u),b(c,Wo,u),g(JE,Wo,null),e(Wo,aZe),e(Wo,YE),e(YE,nZe),e(YE,Bk),e(Bk,sZe),e(YE,lZe),e(Wo,iZe),e(Wo,KE),e(KE,dZe),e(KE,FJ),e(FJ,cZe),e(KE,fZe),e(Wo,mZe),e(Wo,ke),g(ZE,ke,null),e(ke,gZe),e(ke,CJ),e(CJ,hZe),e(ke,pZe),e(ke,Gi),e(Gi,_Ze),e(Gi,MJ),e(MJ,uZe),e(Gi,bZe),e(Gi,EJ),e(EJ,vZe),e(Gi,TZe),e(ke,FZe),e(ke,we),e(we,hh),e(hh,yJ),e(yJ,CZe),e(hh,MZe),e(hh,xk),e(xk,EZe),e(hh,yZe),e(we,wZe),e(we,ph),e(ph,wJ),e(wJ,AZe),e(ph,LZe),e(ph,kk),e(kk,BZe),e(ph,xZe),e(we,kZe),e(we,_h),e(_h,AJ),e(AJ,RZe),e(_h,SZe),e(_h,Rk),e(Rk,PZe),e(_h,$Ze),e(we,IZe),e(we,uh),e(uh,LJ),e(LJ,DZe),e(uh,jZe),e(uh,Sk),e(Sk,NZe),e(uh,qZe),e(we,GZe),e(we,bh),e(bh,BJ),e(BJ,OZe),e(bh,XZe),e(bh,Pk),e(Pk,VZe),e(bh,zZe),e(we,WZe),e(we,vh),e(vh,xJ),e(xJ,QZe),e(vh,HZe),e(vh,$k),e($k,UZe),e(vh,JZe),e(we,YZe),e(we,Th),e(Th,kJ),e(kJ,KZe),e(Th,ZZe),e(Th,Ik),e(Ik,eeo),e(Th,oeo),e(we,reo),e(we,Fh),e(Fh,RJ),e(RJ,teo),e(Fh,aeo),e(Fh,Dk),e(Dk,neo),e(Fh,seo),e(ke,leo),g(Ch,ke,null),e(ke,ieo),e(ke,SJ),e(SJ,deo),e(ke,ceo),g(e3,ke,null),e(Wo,feo),e(Wo,Mh),g(o3,Mh,null),e(Mh,meo),e(Mh,PJ),e(PJ,geo),b(c,j7e,u),b(c,Oi,u),e(Oi,Eh),e(Eh,$J),g(r3,$J,null),e(Oi,heo),e(Oi,IJ),e(IJ,peo),b(c,N7e,u),b(c,Qo,u),g(t3,Qo,null),e(Qo,_eo),e(Qo,Xi),e(Xi,ueo),e(Xi,DJ),e(DJ,beo),e(Xi,veo),e(Xi,jJ),e(jJ,Teo),e(Xi,Feo),e(Qo,Ceo),e(Qo,a3),e(a3,Meo),e(a3,NJ),e(NJ,Eeo),e(a3,yeo),e(Qo,weo),e(Qo,qr),g(n3,qr,null),e(qr,Aeo),e(qr,qJ),e(qJ,Leo),e(qr,Beo),e(qr,Vi),e(Vi,xeo),e(Vi,GJ),e(GJ,keo),e(Vi,Reo),e(Vi,OJ),e(OJ,Seo),e(Vi,Peo),e(qr,$eo),e(qr,XJ),e(XJ,Ieo),e(qr,Deo),g(s3,qr,null),e(Qo,jeo),e(Qo,Re),g(l3,Re,null),e(Re,Neo),e(Re,VJ),e(VJ,qeo),e(Re,Geo),e(Re,Na),e(Na,Oeo),e(Na,zJ),e(zJ,Xeo),e(Na,Veo),e(Na,WJ),e(WJ,zeo),e(Na,Weo),e(Na,QJ),e(QJ,Qeo),e(Na,Heo),e(Re,Ueo),e(Re,F),e(F,yh),e(yh,HJ),e(HJ,Jeo),e(yh,Yeo),e(yh,jk),e(jk,Keo),e(yh,Zeo),e(F,eoo),e(F,wh),e(wh,UJ),e(UJ,ooo),e(wh,roo),e(wh,Nk),e(Nk,too),e(wh,aoo),e(F,noo),e(F,Ah),e(Ah,JJ),e(JJ,soo),e(Ah,loo),e(Ah,qk),e(qk,ioo),e(Ah,doo),e(F,coo),e(F,Lh),e(Lh,YJ),e(YJ,foo),e(Lh,moo),e(Lh,Gk),e(Gk,goo),e(Lh,hoo),e(F,poo),e(F,Bh),e(Bh,KJ),e(KJ,_oo),e(Bh,uoo),e(Bh,Ok),e(Ok,boo),e(Bh,voo),e(F,Too),e(F,xh),e(xh,ZJ),e(ZJ,Foo),e(xh,Coo),e(xh,Xk),e(Xk,Moo),e(xh,Eoo),e(F,yoo),e(F,kh),e(kh,eY),e(eY,woo),e(kh,Aoo),e(kh,Vk),e(Vk,Loo),e(kh,Boo),e(F,xoo),e(F,Rh),e(Rh,oY),e(oY,koo),e(Rh,Roo),e(Rh,zk),e(zk,Soo),e(Rh,Poo),e(F,$oo),e(F,Sh),e(Sh,rY),e(rY,Ioo),e(Sh,Doo),e(Sh,Wk),e(Wk,joo),e(Sh,Noo),e(F,qoo),e(F,Ph),e(Ph,tY),e(tY,Goo),e(Ph,Ooo),e(Ph,Qk),e(Qk,Xoo),e(Ph,Voo),e(F,zoo),e(F,$h),e($h,aY),e(aY,Woo),e($h,Qoo),e($h,Hk),e(Hk,Hoo),e($h,Uoo),e(F,Joo),e(F,Ih),e(Ih,nY),e(nY,Yoo),e(Ih,Koo),e(Ih,Uk),e(Uk,Zoo),e(Ih,ero),e(F,oro),e(F,Dh),e(Dh,sY),e(sY,rro),e(Dh,tro),e(Dh,Jk),e(Jk,aro),e(Dh,nro),e(F,sro),e(F,jh),e(jh,lY),e(lY,lro),e(jh,iro),e(jh,Yk),e(Yk,dro),e(jh,cro),e(F,fro),e(F,Nh),e(Nh,iY),e(iY,mro),e(Nh,gro),e(Nh,Kk),e(Kk,hro),e(Nh,pro),e(F,_ro),e(F,qh),e(qh,dY),e(dY,uro),e(qh,bro),e(qh,Zk),e(Zk,vro),e(qh,Tro),e(F,Fro),e(F,Gh),e(Gh,cY),e(cY,Cro),e(Gh,Mro),e(Gh,eR),e(eR,Ero),e(Gh,yro),e(F,wro),e(F,Oh),e(Oh,fY),e(fY,Aro),e(Oh,Lro),e(Oh,oR),e(oR,Bro),e(Oh,xro),e(F,kro),e(F,Xh),e(Xh,mY),e(mY,Rro),e(Xh,Sro),e(Xh,rR),e(rR,Pro),e(Xh,$ro),e(F,Iro),e(F,Vh),e(Vh,gY),e(gY,Dro),e(Vh,jro),e(Vh,tR),e(tR,Nro),e(Vh,qro),e(F,Gro),e(F,zh),e(zh,hY),e(hY,Oro),e(zh,Xro),e(zh,aR),e(aR,Vro),e(zh,zro),e(F,Wro),e(F,Wh),e(Wh,pY),e(pY,Qro),e(Wh,Hro),e(Wh,nR),e(nR,Uro),e(Wh,Jro),e(F,Yro),e(F,Qh),e(Qh,_Y),e(_Y,Kro),e(Qh,Zro),e(Qh,sR),e(sR,eto),e(Qh,oto),e(F,rto),e(F,Hh),e(Hh,uY),e(uY,tto),e(Hh,ato),e(Hh,lR),e(lR,nto),e(Hh,sto),e(F,lto),e(F,Uh),e(Uh,bY),e(bY,ito),e(Uh,dto),e(Uh,iR),e(iR,cto),e(Uh,fto),e(F,mto),e(F,Jh),e(Jh,vY),e(vY,gto),e(Jh,hto),e(Jh,dR),e(dR,pto),e(Jh,_to),e(F,uto),e(F,Yh),e(Yh,TY),e(TY,bto),e(Yh,vto),e(Yh,cR),e(cR,Tto),e(Yh,Fto),e(F,Cto),e(F,Ss),e(Ss,FY),e(FY,Mto),e(Ss,Eto),e(Ss,fR),e(fR,yto),e(Ss,wto),e(Ss,mR),e(mR,Ato),e(Ss,Lto),e(F,Bto),e(F,Kh),e(Kh,CY),e(CY,xto),e(Kh,kto),e(Kh,gR),e(gR,Rto),e(Kh,Sto),e(F,Pto),e(F,Zh),e(Zh,MY),e(MY,$to),e(Zh,Ito),e(Zh,hR),e(hR,Dto),e(Zh,jto),e(F,Nto),e(F,ep),e(ep,EY),e(EY,qto),e(ep,Gto),e(ep,pR),e(pR,Oto),e(ep,Xto),e(F,Vto),e(F,op),e(op,yY),e(yY,zto),e(op,Wto),e(op,_R),e(_R,Qto),e(op,Hto),e(F,Uto),e(F,rp),e(rp,wY),e(wY,Jto),e(rp,Yto),e(rp,uR),e(uR,Kto),e(rp,Zto),e(F,eao),e(F,tp),e(tp,AY),e(AY,oao),e(tp,rao),e(tp,bR),e(bR,tao),e(tp,aao),e(F,nao),e(F,ap),e(ap,LY),e(LY,sao),e(ap,lao),e(ap,vR),e(vR,iao),e(ap,dao),e(F,cao),e(F,np),e(np,BY),e(BY,fao),e(np,mao),e(np,TR),e(TR,gao),e(np,hao),e(F,pao),e(F,sp),e(sp,xY),e(xY,_ao),e(sp,uao),e(sp,FR),e(FR,bao),e(sp,vao),e(F,Tao),e(F,lp),e(lp,kY),e(kY,Fao),e(lp,Cao),e(lp,CR),e(CR,Mao),e(lp,Eao),e(F,yao),e(F,ip),e(ip,RY),e(RY,wao),e(ip,Aao),e(ip,MR),e(MR,Lao),e(ip,Bao),e(F,xao),e(F,dp),e(dp,SY),e(SY,kao),e(dp,Rao),e(dp,ER),e(ER,Sao),e(dp,Pao),e(F,$ao),e(F,cp),e(cp,PY),e(PY,Iao),e(cp,Dao),e(cp,yR),e(yR,jao),e(cp,Nao),e(F,qao),e(F,fp),e(fp,$Y),e($Y,Gao),e(fp,Oao),e(fp,wR),e(wR,Xao),e(fp,Vao),e(F,zao),e(F,mp),e(mp,IY),e(IY,Wao),e(mp,Qao),e(mp,AR),e(AR,Hao),e(mp,Uao),e(F,Jao),e(F,gp),e(gp,DY),e(DY,Yao),e(gp,Kao),e(gp,LR),e(LR,Zao),e(gp,eno),e(F,ono),e(F,hp),e(hp,jY),e(jY,rno),e(hp,tno),e(hp,BR),e(BR,ano),e(hp,nno),e(F,sno),e(F,pp),e(pp,NY),e(NY,lno),e(pp,ino),e(pp,xR),e(xR,dno),e(pp,cno),e(F,fno),e(F,_p),e(_p,qY),e(qY,mno),e(_p,gno),e(_p,kR),e(kR,hno),e(_p,pno),e(F,_no),e(F,up),e(up,GY),e(GY,uno),e(up,bno),e(up,RR),e(RR,vno),e(up,Tno),e(F,Fno),e(F,bp),e(bp,OY),e(OY,Cno),e(bp,Mno),e(bp,SR),e(SR,Eno),e(bp,yno),e(F,wno),e(F,vp),e(vp,XY),e(XY,Ano),e(vp,Lno),e(vp,PR),e(PR,Bno),e(vp,xno),e(F,kno),e(F,Tp),e(Tp,VY),e(VY,Rno),e(Tp,Sno),e(Tp,$R),e($R,Pno),e(Tp,$no),e(F,Ino),e(F,Fp),e(Fp,zY),e(zY,Dno),e(Fp,jno),e(Fp,IR),e(IR,Nno),e(Fp,qno),e(F,Gno),e(F,Cp),e(Cp,WY),e(WY,Ono),e(Cp,Xno),e(Cp,DR),e(DR,Vno),e(Cp,zno),e(F,Wno),e(F,Mp),e(Mp,QY),e(QY,Qno),e(Mp,Hno),e(Mp,jR),e(jR,Uno),e(Mp,Jno),e(F,Yno),e(F,Ep),e(Ep,HY),e(HY,Kno),e(Ep,Zno),e(Ep,NR),e(NR,eso),e(Ep,oso),e(F,rso),e(F,yp),e(yp,UY),e(UY,tso),e(yp,aso),e(yp,qR),e(qR,nso),e(yp,sso),e(F,lso),e(F,wp),e(wp,JY),e(JY,iso),e(wp,dso),e(wp,GR),e(GR,cso),e(wp,fso),e(F,mso),e(F,Ap),e(Ap,YY),e(YY,gso),e(Ap,hso),e(Ap,OR),e(OR,pso),e(Ap,_so),e(F,uso),e(F,Lp),e(Lp,KY),e(KY,bso),e(Lp,vso),e(Lp,XR),e(XR,Tso),e(Lp,Fso),e(F,Cso),e(F,Bp),e(Bp,ZY),e(ZY,Mso),e(Bp,Eso),e(Bp,VR),e(VR,yso),e(Bp,wso),e(F,Aso),e(F,xp),e(xp,eK),e(eK,Lso),e(xp,Bso),e(xp,zR),e(zR,xso),e(xp,kso),e(F,Rso),e(F,kp),e(kp,oK),e(oK,Sso),e(kp,Pso),e(kp,WR),e(WR,$so),e(kp,Iso),e(F,Dso),e(F,Rp),e(Rp,rK),e(rK,jso),e(Rp,Nso),e(Rp,QR),e(QR,qso),e(Rp,Gso),e(F,Oso),e(F,Sp),e(Sp,tK),e(tK,Xso),e(Sp,Vso),e(Sp,HR),e(HR,zso),e(Sp,Wso),e(F,Qso),e(F,Pp),e(Pp,aK),e(aK,Hso),e(Pp,Uso),e(Pp,UR),e(UR,Jso),e(Pp,Yso),e(F,Kso),e(F,$p),e($p,nK),e(nK,Zso),e($p,elo),e($p,JR),e(JR,olo),e($p,rlo),e(F,tlo),e(F,Ip),e(Ip,sK),e(sK,alo),e(Ip,nlo),e(Ip,YR),e(YR,slo),e(Ip,llo),e(F,ilo),e(F,Dp),e(Dp,lK),e(lK,dlo),e(Dp,clo),e(Dp,KR),e(KR,flo),e(Dp,mlo),e(F,glo),e(F,jp),e(jp,iK),e(iK,hlo),e(jp,plo),e(jp,ZR),e(ZR,_lo),e(jp,ulo),e(F,blo),e(F,Np),e(Np,dK),e(dK,vlo),e(Np,Tlo),e(Np,eS),e(eS,Flo),e(Np,Clo),e(F,Mlo),e(F,qp),e(qp,cK),e(cK,Elo),e(qp,ylo),e(qp,oS),e(oS,wlo),e(qp,Alo),e(F,Llo),e(F,Gp),e(Gp,fK),e(fK,Blo),e(Gp,xlo),e(Gp,rS),e(rS,klo),e(Gp,Rlo),e(F,Slo),e(F,Op),e(Op,mK),e(mK,Plo),e(Op,$lo),e(Op,tS),e(tS,Ilo),e(Op,Dlo),e(F,jlo),e(F,Xp),e(Xp,gK),e(gK,Nlo),e(Xp,qlo),e(Xp,aS),e(aS,Glo),e(Xp,Olo),e(F,Xlo),e(F,Vp),e(Vp,hK),e(hK,Vlo),e(Vp,zlo),e(Vp,nS),e(nS,Wlo),e(Vp,Qlo),e(F,Hlo),e(F,zp),e(zp,pK),e(pK,Ulo),e(zp,Jlo),e(zp,sS),e(sS,Ylo),e(zp,Klo),e(F,Zlo),e(F,Wp),e(Wp,_K),e(_K,eio),e(Wp,oio),e(Wp,lS),e(lS,rio),e(Wp,tio),e(F,aio),e(F,Qp),e(Qp,uK),e(uK,nio),e(Qp,sio),e(Qp,iS),e(iS,lio),e(Qp,iio),e(F,dio),e(F,Hp),e(Hp,bK),e(bK,cio),e(Hp,fio),e(Hp,dS),e(dS,mio),e(Hp,gio),e(F,hio),e(F,Up),e(Up,vK),e(vK,pio),e(Up,_io),e(Up,cS),e(cS,uio),e(Up,bio),e(F,vio),e(F,Jp),e(Jp,TK),e(TK,Tio),e(Jp,Fio),e(Jp,fS),e(fS,Cio),e(Jp,Mio),e(F,Eio),e(F,Yp),e(Yp,FK),e(FK,yio),e(Yp,wio),e(Yp,mS),e(mS,Aio),e(Yp,Lio),e(F,Bio),e(F,Kp),e(Kp,CK),e(CK,xio),e(Kp,kio),e(Kp,gS),e(gS,Rio),e(Kp,Sio),e(F,Pio),e(F,Zp),e(Zp,MK),e(MK,$io),e(Zp,Iio),e(Zp,hS),e(hS,Dio),e(Zp,jio),e(F,Nio),e(F,e_),e(e_,EK),e(EK,qio),e(e_,Gio),e(e_,pS),e(pS,Oio),e(e_,Xio),e(F,Vio),e(F,o_),e(o_,yK),e(yK,zio),e(o_,Wio),e(o_,_S),e(_S,Qio),e(o_,Hio),e(F,Uio),e(F,r_),e(r_,wK),e(wK,Jio),e(r_,Yio),e(r_,uS),e(uS,Kio),e(r_,Zio),e(Re,edo),e(Re,t_),e(t_,odo),e(t_,AK),e(AK,rdo),e(t_,tdo),e(t_,LK),e(LK,ado),e(Re,ndo),e(Re,BK),e(BK,sdo),e(Re,ldo),g(i3,Re,null),b(c,q7e,u),b(c,zi,u),e(zi,a_),e(a_,xK),g(d3,xK,null),e(zi,ido),e(zi,kK),e(kK,ddo),b(c,G7e,u),b(c,Ho,u),g(c3,Ho,null),e(Ho,cdo),e(Ho,Wi),e(Wi,fdo),e(Wi,RK),e(RK,mdo),e(Wi,gdo),e(Wi,SK),e(SK,hdo),e(Wi,pdo),e(Ho,_do),e(Ho,f3),e(f3,udo),e(f3,PK),e(PK,bdo),e(f3,vdo),e(Ho,Tdo),e(Ho,Gr),g(m3,Gr,null),e(Gr,Fdo),e(Gr,$K),e($K,Cdo),e(Gr,Mdo),e(Gr,Qi),e(Qi,Edo),e(Qi,IK),e(IK,ydo),e(Qi,wdo),e(Qi,DK),e(DK,Ado),e(Qi,Ldo),e(Gr,Bdo),e(Gr,jK),e(jK,xdo),e(Gr,kdo),g(g3,Gr,null),e(Ho,Rdo),e(Ho,Se),g(h3,Se,null),e(Se,Sdo),e(Se,NK),e(NK,Pdo),e(Se,$do),e(Se,qa),e(qa,Ido),e(qa,qK),e(qK,Ddo),e(qa,jdo),e(qa,GK),e(GK,Ndo),e(qa,qdo),e(qa,OK),e(OK,Gdo),e(qa,Odo),e(Se,Xdo),e(Se,k),e(k,n_),e(n_,XK),e(XK,Vdo),e(n_,zdo),e(n_,bS),e(bS,Wdo),e(n_,Qdo),e(k,Hdo),e(k,s_),e(s_,VK),e(VK,Udo),e(s_,Jdo),e(s_,vS),e(vS,Ydo),e(s_,Kdo),e(k,Zdo),e(k,l_),e(l_,zK),e(zK,eco),e(l_,oco),e(l_,TS),e(TS,rco),e(l_,tco),e(k,aco),e(k,i_),e(i_,WK),e(WK,nco),e(i_,sco),e(i_,FS),e(FS,lco),e(i_,ico),e(k,dco),e(k,d_),e(d_,QK),e(QK,cco),e(d_,fco),e(d_,CS),e(CS,mco),e(d_,gco),e(k,hco),e(k,c_),e(c_,HK),e(HK,pco),e(c_,_co),e(c_,MS),e(MS,uco),e(c_,bco),e(k,vco),e(k,f_),e(f_,UK),e(UK,Tco),e(f_,Fco),e(f_,ES),e(ES,Cco),e(f_,Mco),e(k,Eco),e(k,m_),e(m_,JK),e(JK,yco),e(m_,wco),e(m_,yS),e(yS,Aco),e(m_,Lco),e(k,Bco),e(k,g_),e(g_,YK),e(YK,xco),e(g_,kco),e(g_,wS),e(wS,Rco),e(g_,Sco),e(k,Pco),e(k,h_),e(h_,KK),e(KK,$co),e(h_,Ico),e(h_,AS),e(AS,Dco),e(h_,jco),e(k,Nco),e(k,p_),e(p_,ZK),e(ZK,qco),e(p_,Gco),e(p_,LS),e(LS,Oco),e(p_,Xco),e(k,Vco),e(k,__),e(__,eZ),e(eZ,zco),e(__,Wco),e(__,BS),e(BS,Qco),e(__,Hco),e(k,Uco),e(k,u_),e(u_,oZ),e(oZ,Jco),e(u_,Yco),e(u_,xS),e(xS,Kco),e(u_,Zco),e(k,efo),e(k,b_),e(b_,rZ),e(rZ,ofo),e(b_,rfo),e(b_,kS),e(kS,tfo),e(b_,afo),e(k,nfo),e(k,v_),e(v_,tZ),e(tZ,sfo),e(v_,lfo),e(v_,RS),e(RS,ifo),e(v_,dfo),e(k,cfo),e(k,T_),e(T_,aZ),e(aZ,ffo),e(T_,mfo),e(T_,SS),e(SS,gfo),e(T_,hfo),e(k,pfo),e(k,F_),e(F_,nZ),e(nZ,_fo),e(F_,ufo),e(F_,PS),e(PS,bfo),e(F_,vfo),e(k,Tfo),e(k,C_),e(C_,sZ),e(sZ,Ffo),e(C_,Cfo),e(C_,$S),e($S,Mfo),e(C_,Efo),e(k,yfo),e(k,M_),e(M_,lZ),e(lZ,wfo),e(M_,Afo),e(M_,IS),e(IS,Lfo),e(M_,Bfo),e(k,xfo),e(k,E_),e(E_,iZ),e(iZ,kfo),e(E_,Rfo),e(E_,DS),e(DS,Sfo),e(E_,Pfo),e(k,$fo),e(k,y_),e(y_,dZ),e(dZ,Ifo),e(y_,Dfo),e(y_,jS),e(jS,jfo),e(y_,Nfo),e(k,qfo),e(k,w_),e(w_,cZ),e(cZ,Gfo),e(w_,Ofo),e(w_,NS),e(NS,Xfo),e(w_,Vfo),e(k,zfo),e(k,A_),e(A_,fZ),e(fZ,Wfo),e(A_,Qfo),e(A_,qS),e(qS,Hfo),e(A_,Ufo),e(k,Jfo),e(k,L_),e(L_,mZ),e(mZ,Yfo),e(L_,Kfo),e(L_,GS),e(GS,Zfo),e(L_,emo),e(k,omo),e(k,B_),e(B_,gZ),e(gZ,rmo),e(B_,tmo),e(B_,OS),e(OS,amo),e(B_,nmo),e(k,smo),e(k,x_),e(x_,hZ),e(hZ,lmo),e(x_,imo),e(x_,XS),e(XS,dmo),e(x_,cmo),e(k,fmo),e(k,k_),e(k_,pZ),e(pZ,mmo),e(k_,gmo),e(k_,VS),e(VS,hmo),e(k_,pmo),e(k,_mo),e(k,R_),e(R_,_Z),e(_Z,umo),e(R_,bmo),e(R_,zS),e(zS,vmo),e(R_,Tmo),e(k,Fmo),e(k,S_),e(S_,uZ),e(uZ,Cmo),e(S_,Mmo),e(S_,WS),e(WS,Emo),e(S_,ymo),e(k,wmo),e(k,P_),e(P_,bZ),e(bZ,Amo),e(P_,Lmo),e(P_,QS),e(QS,Bmo),e(P_,xmo),e(k,kmo),e(k,$_),e($_,vZ),e(vZ,Rmo),e($_,Smo),e($_,HS),e(HS,Pmo),e($_,$mo),e(k,Imo),e(k,I_),e(I_,TZ),e(TZ,Dmo),e(I_,jmo),e(I_,US),e(US,Nmo),e(I_,qmo),e(k,Gmo),e(k,D_),e(D_,FZ),e(FZ,Omo),e(D_,Xmo),e(D_,JS),e(JS,Vmo),e(D_,zmo),e(k,Wmo),e(k,j_),e(j_,CZ),e(CZ,Qmo),e(j_,Hmo),e(j_,YS),e(YS,Umo),e(j_,Jmo),e(k,Ymo),e(k,N_),e(N_,MZ),e(MZ,Kmo),e(N_,Zmo),e(N_,KS),e(KS,ego),e(N_,ogo),e(k,rgo),e(k,q_),e(q_,EZ),e(EZ,tgo),e(q_,ago),e(q_,ZS),e(ZS,ngo),e(q_,sgo),e(k,lgo),e(k,G_),e(G_,yZ),e(yZ,igo),e(G_,dgo),e(G_,eP),e(eP,cgo),e(G_,fgo),e(k,mgo),e(k,O_),e(O_,wZ),e(wZ,ggo),e(O_,hgo),e(O_,oP),e(oP,pgo),e(O_,_go),e(k,ugo),e(k,X_),e(X_,AZ),e(AZ,bgo),e(X_,vgo),e(X_,rP),e(rP,Tgo),e(X_,Fgo),e(Se,Cgo),e(Se,V_),e(V_,Mgo),e(V_,LZ),e(LZ,Ego),e(V_,ygo),e(V_,BZ),e(BZ,wgo),e(Se,Ago),e(Se,xZ),e(xZ,Lgo),e(Se,Bgo),g(p3,Se,null),b(c,O7e,u),b(c,Hi,u),e(Hi,z_),e(z_,kZ),g(_3,kZ,null),e(Hi,xgo),e(Hi,RZ),e(RZ,kgo),b(c,X7e,u),b(c,Uo,u),g(u3,Uo,null),e(Uo,Rgo),e(Uo,Ui),e(Ui,Sgo),e(Ui,SZ),e(SZ,Pgo),e(Ui,$go),e(Ui,PZ),e(PZ,Igo),e(Ui,Dgo),e(Uo,jgo),e(Uo,b3),e(b3,Ngo),e(b3,$Z),e($Z,qgo),e(b3,Ggo),e(Uo,Ogo),e(Uo,Or),g(v3,Or,null),e(Or,Xgo),e(Or,IZ),e(IZ,Vgo),e(Or,zgo),e(Or,Ji),e(Ji,Wgo),e(Ji,DZ),e(DZ,Qgo),e(Ji,Hgo),e(Ji,jZ),e(jZ,Ugo),e(Ji,Jgo),e(Or,Ygo),e(Or,NZ),e(NZ,Kgo),e(Or,Zgo),g(T3,Or,null),e(Uo,eho),e(Uo,Pe),g(F3,Pe,null),e(Pe,oho),e(Pe,qZ),e(qZ,rho),e(Pe,tho),e(Pe,Ga),e(Ga,aho),e(Ga,GZ),e(GZ,nho),e(Ga,sho),e(Ga,OZ),e(OZ,lho),e(Ga,iho),e(Ga,XZ),e(XZ,dho),e(Ga,cho),e(Pe,fho),e(Pe,$),e($,W_),e(W_,VZ),e(VZ,mho),e(W_,gho),e(W_,tP),e(tP,hho),e(W_,pho),e($,_ho),e($,Q_),e(Q_,zZ),e(zZ,uho),e(Q_,bho),e(Q_,aP),e(aP,vho),e(Q_,Tho),e($,Fho),e($,H_),e(H_,WZ),e(WZ,Cho),e(H_,Mho),e(H_,nP),e(nP,Eho),e(H_,yho),e($,who),e($,U_),e(U_,QZ),e(QZ,Aho),e(U_,Lho),e(U_,sP),e(sP,Bho),e(U_,xho),e($,kho),e($,J_),e(J_,HZ),e(HZ,Rho),e(J_,Sho),e(J_,lP),e(lP,Pho),e(J_,$ho),e($,Iho),e($,Y_),e(Y_,UZ),e(UZ,Dho),e(Y_,jho),e(Y_,iP),e(iP,Nho),e(Y_,qho),e($,Gho),e($,K_),e(K_,JZ),e(JZ,Oho),e(K_,Xho),e(K_,dP),e(dP,Vho),e(K_,zho),e($,Who),e($,Z_),e(Z_,YZ),e(YZ,Qho),e(Z_,Hho),e(Z_,cP),e(cP,Uho),e(Z_,Jho),e($,Yho),e($,eu),e(eu,KZ),e(KZ,Kho),e(eu,Zho),e(eu,fP),e(fP,epo),e(eu,opo),e($,rpo),e($,ou),e(ou,ZZ),e(ZZ,tpo),e(ou,apo),e(ou,mP),e(mP,npo),e(ou,spo),e($,lpo),e($,ru),e(ru,eee),e(eee,ipo),e(ru,dpo),e(ru,gP),e(gP,cpo),e(ru,fpo),e($,mpo),e($,tu),e(tu,oee),e(oee,gpo),e(tu,hpo),e(tu,hP),e(hP,ppo),e(tu,_po),e($,upo),e($,au),e(au,ree),e(ree,bpo),e(au,vpo),e(au,pP),e(pP,Tpo),e(au,Fpo),e($,Cpo),e($,nu),e(nu,tee),e(tee,Mpo),e(nu,Epo),e(nu,_P),e(_P,ypo),e(nu,wpo),e($,Apo),e($,su),e(su,aee),e(aee,Lpo),e(su,Bpo),e(su,uP),e(uP,xpo),e(su,kpo),e($,Rpo),e($,lu),e(lu,nee),e(nee,Spo),e(lu,Ppo),e(lu,bP),e(bP,$po),e(lu,Ipo),e($,Dpo),e($,iu),e(iu,see),e(see,jpo),e(iu,Npo),e(iu,vP),e(vP,qpo),e(iu,Gpo),e($,Opo),e($,du),e(du,lee),e(lee,Xpo),e(du,Vpo),e(du,TP),e(TP,zpo),e(du,Wpo),e($,Qpo),e($,cu),e(cu,iee),e(iee,Hpo),e(cu,Upo),e(cu,FP),e(FP,Jpo),e(cu,Ypo),e($,Kpo),e($,fu),e(fu,dee),e(dee,Zpo),e(fu,e_o),e(fu,CP),e(CP,o_o),e(fu,r_o),e($,t_o),e($,mu),e(mu,cee),e(cee,a_o),e(mu,n_o),e(mu,MP),e(MP,s_o),e(mu,l_o),e($,i_o),e($,gu),e(gu,fee),e(fee,d_o),e(gu,c_o),e(gu,EP),e(EP,f_o),e(gu,m_o),e($,g_o),e($,hu),e(hu,mee),e(mee,h_o),e(hu,p_o),e(hu,yP),e(yP,__o),e(hu,u_o),e($,b_o),e($,pu),e(pu,gee),e(gee,v_o),e(pu,T_o),e(pu,wP),e(wP,F_o),e(pu,C_o),e($,M_o),e($,_u),e(_u,hee),e(hee,E_o),e(_u,y_o),e(_u,AP),e(AP,w_o),e(_u,A_o),e($,L_o),e($,uu),e(uu,pee),e(pee,B_o),e(uu,x_o),e(uu,LP),e(LP,k_o),e(uu,R_o),e($,S_o),e($,bu),e(bu,_ee),e(_ee,P_o),e(bu,$_o),e(bu,BP),e(BP,I_o),e(bu,D_o),e($,j_o),e($,vu),e(vu,uee),e(uee,N_o),e(vu,q_o),e(vu,xP),e(xP,G_o),e(vu,O_o),e($,X_o),e($,Tu),e(Tu,bee),e(bee,V_o),e(Tu,z_o),e(Tu,kP),e(kP,W_o),e(Tu,Q_o),e($,H_o),e($,Fu),e(Fu,vee),e(vee,U_o),e(Fu,J_o),e(Fu,RP),e(RP,Y_o),e(Fu,K_o),e($,Z_o),e($,Cu),e(Cu,Tee),e(Tee,euo),e(Cu,ouo),e(Cu,SP),e(SP,ruo),e(Cu,tuo),e($,auo),e($,Mu),e(Mu,Fee),e(Fee,nuo),e(Mu,suo),e(Mu,PP),e(PP,luo),e(Mu,iuo),e($,duo),e($,Eu),e(Eu,Cee),e(Cee,cuo),e(Eu,fuo),e(Eu,$P),e($P,muo),e(Eu,guo),e($,huo),e($,yu),e(yu,Mee),e(Mee,puo),e(yu,_uo),e(yu,IP),e(IP,uuo),e(yu,buo),e($,vuo),e($,wu),e(wu,Eee),e(Eee,Tuo),e(wu,Fuo),e(wu,DP),e(DP,Cuo),e(wu,Muo),e(Pe,Euo),e(Pe,Au),e(Au,yuo),e(Au,yee),e(yee,wuo),e(Au,Auo),e(Au,wee),e(wee,Luo),e(Pe,Buo),e(Pe,Aee),e(Aee,xuo),e(Pe,kuo),g(C3,Pe,null),b(c,V7e,u),b(c,Yi,u),e(Yi,Lu),e(Lu,Lee),g(M3,Lee,null),e(Yi,Ruo),e(Yi,Bee),e(Bee,Suo),b(c,z7e,u),b(c,Jo,u),g(E3,Jo,null),e(Jo,Puo),e(Jo,Ki),e(Ki,$uo),e(Ki,xee),e(xee,Iuo),e(Ki,Duo),e(Ki,kee),e(kee,juo),e(Ki,Nuo),e(Jo,quo),e(Jo,y3),e(y3,Guo),e(y3,Ree),e(Ree,Ouo),e(y3,Xuo),e(Jo,Vuo),e(Jo,Xr),g(w3,Xr,null),e(Xr,zuo),e(Xr,See),e(See,Wuo),e(Xr,Quo),e(Xr,Zi),e(Zi,Huo),e(Zi,Pee),e(Pee,Uuo),e(Zi,Juo),e(Zi,$ee),e($ee,Yuo),e(Zi,Kuo),e(Xr,Zuo),e(Xr,Iee),e(Iee,e1o),e(Xr,o1o),g(A3,Xr,null),e(Jo,r1o),e(Jo,$e),g(L3,$e,null),e($e,t1o),e($e,Dee),e(Dee,a1o),e($e,n1o),e($e,Oa),e(Oa,s1o),e(Oa,jee),e(jee,l1o),e(Oa,i1o),e(Oa,Nee),e(Nee,d1o),e(Oa,c1o),e(Oa,qee),e(qee,f1o),e(Oa,m1o),e($e,g1o),e($e,I),e(I,Bu),e(Bu,Gee),e(Gee,h1o),e(Bu,p1o),e(Bu,jP),e(jP,_1o),e(Bu,u1o),e(I,b1o),e(I,xu),e(xu,Oee),e(Oee,v1o),e(xu,T1o),e(xu,NP),e(NP,F1o),e(xu,C1o),e(I,M1o),e(I,ku),e(ku,Xee),e(Xee,E1o),e(ku,y1o),e(ku,qP),e(qP,w1o),e(ku,A1o),e(I,L1o),e(I,Ru),e(Ru,Vee),e(Vee,B1o),e(Ru,x1o),e(Ru,GP),e(GP,k1o),e(Ru,R1o),e(I,S1o),e(I,Su),e(Su,zee),e(zee,P1o),e(Su,$1o),e(Su,OP),e(OP,I1o),e(Su,D1o),e(I,j1o),e(I,Pu),e(Pu,Wee),e(Wee,N1o),e(Pu,q1o),e(Pu,XP),e(XP,G1o),e(Pu,O1o),e(I,X1o),e(I,$u),e($u,Qee),e(Qee,V1o),e($u,z1o),e($u,VP),e(VP,W1o),e($u,Q1o),e(I,H1o),e(I,Iu),e(Iu,Hee),e(Hee,U1o),e(Iu,J1o),e(Iu,zP),e(zP,Y1o),e(Iu,K1o),e(I,Z1o),e(I,Du),e(Du,Uee),e(Uee,ebo),e(Du,obo),e(Du,WP),e(WP,rbo),e(Du,tbo),e(I,abo),e(I,ju),e(ju,Jee),e(Jee,nbo),e(ju,sbo),e(ju,QP),e(QP,lbo),e(ju,ibo),e(I,dbo),e(I,Nu),e(Nu,Yee),e(Yee,cbo),e(Nu,fbo),e(Nu,HP),e(HP,mbo),e(Nu,gbo),e(I,hbo),e(I,qu),e(qu,Kee),e(Kee,pbo),e(qu,_bo),e(qu,UP),e(UP,ubo),e(qu,bbo),e(I,vbo),e(I,Gu),e(Gu,Zee),e(Zee,Tbo),e(Gu,Fbo),e(Gu,JP),e(JP,Cbo),e(Gu,Mbo),e(I,Ebo),e(I,Ou),e(Ou,eoe),e(eoe,ybo),e(Ou,wbo),e(Ou,YP),e(YP,Abo),e(Ou,Lbo),e(I,Bbo),e(I,Xu),e(Xu,ooe),e(ooe,xbo),e(Xu,kbo),e(Xu,KP),e(KP,Rbo),e(Xu,Sbo),e(I,Pbo),e(I,Vu),e(Vu,roe),e(roe,$bo),e(Vu,Ibo),e(Vu,ZP),e(ZP,Dbo),e(Vu,jbo),e(I,Nbo),e(I,zu),e(zu,toe),e(toe,qbo),e(zu,Gbo),e(zu,e$),e(e$,Obo),e(zu,Xbo),e(I,Vbo),e(I,Wu),e(Wu,aoe),e(aoe,zbo),e(Wu,Wbo),e(Wu,o$),e(o$,Qbo),e(Wu,Hbo),e(I,Ubo),e(I,Qu),e(Qu,noe),e(noe,Jbo),e(Qu,Ybo),e(Qu,r$),e(r$,Kbo),e(Qu,Zbo),e(I,e5o),e(I,Hu),e(Hu,soe),e(soe,o5o),e(Hu,r5o),e(Hu,t$),e(t$,t5o),e(Hu,a5o),e(I,n5o),e(I,Uu),e(Uu,loe),e(loe,s5o),e(Uu,l5o),e(Uu,a$),e(a$,i5o),e(Uu,d5o),e(I,c5o),e(I,Ju),e(Ju,ioe),e(ioe,f5o),e(Ju,m5o),e(Ju,n$),e(n$,g5o),e(Ju,h5o),e(I,p5o),e(I,Yu),e(Yu,doe),e(doe,_5o),e(Yu,u5o),e(Yu,s$),e(s$,b5o),e(Yu,v5o),e(I,T5o),e(I,Ku),e(Ku,coe),e(coe,F5o),e(Ku,C5o),e(Ku,l$),e(l$,M5o),e(Ku,E5o),e(I,y5o),e(I,Zu),e(Zu,foe),e(foe,w5o),e(Zu,A5o),e(Zu,i$),e(i$,L5o),e(Zu,B5o),e(I,x5o),e(I,e1),e(e1,moe),e(moe,k5o),e(e1,R5o),e(e1,d$),e(d$,S5o),e(e1,P5o),e(I,$5o),e(I,o1),e(o1,goe),e(goe,I5o),e(o1,D5o),e(o1,c$),e(c$,j5o),e(o1,N5o),e(I,q5o),e(I,r1),e(r1,hoe),e(hoe,G5o),e(r1,O5o),e(r1,f$),e(f$,X5o),e(r1,V5o),e(I,z5o),e(I,t1),e(t1,poe),e(poe,W5o),e(t1,Q5o),e(t1,m$),e(m$,H5o),e(t1,U5o),e(I,J5o),e(I,a1),e(a1,_oe),e(_oe,Y5o),e(a1,K5o),e(a1,g$),e(g$,Z5o),e(a1,e2o),e(I,o2o),e(I,n1),e(n1,uoe),e(uoe,r2o),e(n1,t2o),e(n1,boe),e(boe,a2o),e(n1,n2o),e(I,s2o),e(I,s1),e(s1,voe),e(voe,l2o),e(s1,i2o),e(s1,h$),e(h$,d2o),e(s1,c2o),e(I,f2o),e(I,l1),e(l1,Toe),e(Toe,m2o),e(l1,g2o),e(l1,p$),e(p$,h2o),e(l1,p2o),e(I,_2o),e(I,i1),e(i1,Foe),e(Foe,u2o),e(i1,b2o),e(i1,_$),e(_$,v2o),e(i1,T2o),e(I,F2o),e(I,d1),e(d1,Coe),e(Coe,C2o),e(d1,M2o),e(d1,u$),e(u$,E2o),e(d1,y2o),e($e,w2o),e($e,c1),e(c1,A2o),e(c1,Moe),e(Moe,L2o),e(c1,B2o),e(c1,Eoe),e(Eoe,x2o),e($e,k2o),e($e,yoe),e(yoe,R2o),e($e,S2o),g(B3,$e,null),b(c,W7e,u),b(c,ed,u),e(ed,f1),e(f1,woe),g(x3,woe,null),e(ed,P2o),e(ed,Aoe),e(Aoe,$2o),b(c,Q7e,u),b(c,Yo,u),g(k3,Yo,null),e(Yo,I2o),e(Yo,od),e(od,D2o),e(od,Loe),e(Loe,j2o),e(od,N2o),e(od,Boe),e(Boe,q2o),e(od,G2o),e(Yo,O2o),e(Yo,R3),e(R3,X2o),e(R3,xoe),e(xoe,V2o),e(R3,z2o),e(Yo,W2o),e(Yo,Vr),g(S3,Vr,null),e(Vr,Q2o),e(Vr,koe),e(koe,H2o),e(Vr,U2o),e(Vr,rd),e(rd,J2o),e(rd,Roe),e(Roe,Y2o),e(rd,K2o),e(rd,Soe),e(Soe,Z2o),e(rd,evo),e(Vr,ovo),e(Vr,Poe),e(Poe,rvo),e(Vr,tvo),g(P3,Vr,null),e(Yo,avo),e(Yo,Ie),g($3,Ie,null),e(Ie,nvo),e(Ie,$oe),e($oe,svo),e(Ie,lvo),e(Ie,Xa),e(Xa,ivo),e(Xa,Ioe),e(Ioe,dvo),e(Xa,cvo),e(Xa,Doe),e(Doe,fvo),e(Xa,mvo),e(Xa,joe),e(joe,gvo),e(Xa,hvo),e(Ie,pvo),e(Ie,ae),e(ae,m1),e(m1,Noe),e(Noe,_vo),e(m1,uvo),e(m1,b$),e(b$,bvo),e(m1,vvo),e(ae,Tvo),e(ae,g1),e(g1,qoe),e(qoe,Fvo),e(g1,Cvo),e(g1,v$),e(v$,Mvo),e(g1,Evo),e(ae,yvo),e(ae,h1),e(h1,Goe),e(Goe,wvo),e(h1,Avo),e(h1,T$),e(T$,Lvo),e(h1,Bvo),e(ae,xvo),e(ae,p1),e(p1,Ooe),e(Ooe,kvo),e(p1,Rvo),e(p1,F$),e(F$,Svo),e(p1,Pvo),e(ae,$vo),e(ae,_1),e(_1,Xoe),e(Xoe,Ivo),e(_1,Dvo),e(_1,C$),e(C$,jvo),e(_1,Nvo),e(ae,qvo),e(ae,u1),e(u1,Voe),e(Voe,Gvo),e(u1,Ovo),e(u1,M$),e(M$,Xvo),e(u1,Vvo),e(ae,zvo),e(ae,b1),e(b1,zoe),e(zoe,Wvo),e(b1,Qvo),e(b1,E$),e(E$,Hvo),e(b1,Uvo),e(ae,Jvo),e(ae,v1),e(v1,Woe),e(Woe,Yvo),e(v1,Kvo),e(v1,y$),e(y$,Zvo),e(v1,eTo),e(ae,oTo),e(ae,T1),e(T1,Qoe),e(Qoe,rTo),e(T1,tTo),e(T1,w$),e(w$,aTo),e(T1,nTo),e(ae,sTo),e(ae,F1),e(F1,Hoe),e(Hoe,lTo),e(F1,iTo),e(F1,A$),e(A$,dTo),e(F1,cTo),e(ae,fTo),e(ae,C1),e(C1,Uoe),e(Uoe,mTo),e(C1,gTo),e(C1,L$),e(L$,hTo),e(C1,pTo),e(ae,_To),e(ae,M1),e(M1,Joe),e(Joe,uTo),e(M1,bTo),e(M1,B$),e(B$,vTo),e(M1,TTo),e(ae,FTo),e(ae,E1),e(E1,Yoe),e(Yoe,CTo),e(E1,MTo),e(E1,x$),e(x$,ETo),e(E1,yTo),e(ae,wTo),e(ae,y1),e(y1,Koe),e(Koe,ATo),e(y1,LTo),e(y1,k$),e(k$,BTo),e(y1,xTo),e(ae,kTo),e(ae,w1),e(w1,Zoe),e(Zoe,RTo),e(w1,STo),e(w1,R$),e(R$,PTo),e(w1,$To),e(ae,ITo),e(ae,A1),e(A1,ere),e(ere,DTo),e(A1,jTo),e(A1,S$),e(S$,NTo),e(A1,qTo),e(Ie,GTo),e(Ie,L1),e(L1,OTo),e(L1,ore),e(ore,XTo),e(L1,VTo),e(L1,rre),e(rre,zTo),e(Ie,WTo),e(Ie,tre),e(tre,QTo),e(Ie,HTo),g(I3,Ie,null),b(c,H7e,u),b(c,td,u),e(td,B1),e(B1,are),g(D3,are,null),e(td,UTo),e(td,nre),e(nre,JTo),b(c,U7e,u),b(c,Ko,u),g(j3,Ko,null),e(Ko,YTo),e(Ko,ad),e(ad,KTo),e(ad,sre),e(sre,ZTo),e(ad,eFo),e(ad,lre),e(lre,oFo),e(ad,rFo),e(Ko,tFo),e(Ko,N3),e(N3,aFo),e(N3,ire),e(ire,nFo),e(N3,sFo),e(Ko,lFo),e(Ko,zr),g(q3,zr,null),e(zr,iFo),e(zr,dre),e(dre,dFo),e(zr,cFo),e(zr,nd),e(nd,fFo),e(nd,cre),e(cre,mFo),e(nd,gFo),e(nd,fre),e(fre,hFo),e(nd,pFo),e(zr,_Fo),e(zr,mre),e(mre,uFo),e(zr,bFo),g(G3,zr,null),e(Ko,vFo),e(Ko,De),g(O3,De,null),e(De,TFo),e(De,gre),e(gre,FFo),e(De,CFo),e(De,Va),e(Va,MFo),e(Va,hre),e(hre,EFo),e(Va,yFo),e(Va,pre),e(pre,wFo),e(Va,AFo),e(Va,_re),e(_re,LFo),e(Va,BFo),e(De,xFo),e(De,A),e(A,x1),e(x1,ure),e(ure,kFo),e(x1,RFo),e(x1,P$),e(P$,SFo),e(x1,PFo),e(A,$Fo),e(A,k1),e(k1,bre),e(bre,IFo),e(k1,DFo),e(k1,$$),e($$,jFo),e(k1,NFo),e(A,qFo),e(A,R1),e(R1,vre),e(vre,GFo),e(R1,OFo),e(R1,I$),e(I$,XFo),e(R1,VFo),e(A,zFo),e(A,S1),e(S1,Tre),e(Tre,WFo),e(S1,QFo),e(S1,D$),e(D$,HFo),e(S1,UFo),e(A,JFo),e(A,P1),e(P1,Fre),e(Fre,YFo),e(P1,KFo),e(P1,j$),e(j$,ZFo),e(P1,e9o),e(A,o9o),e(A,$1),e($1,Cre),e(Cre,r9o),e($1,t9o),e($1,N$),e(N$,a9o),e($1,n9o),e(A,s9o),e(A,I1),e(I1,Mre),e(Mre,l9o),e(I1,i9o),e(I1,q$),e(q$,d9o),e(I1,c9o),e(A,f9o),e(A,D1),e(D1,Ere),e(Ere,m9o),e(D1,g9o),e(D1,G$),e(G$,h9o),e(D1,p9o),e(A,_9o),e(A,j1),e(j1,yre),e(yre,u9o),e(j1,b9o),e(j1,O$),e(O$,v9o),e(j1,T9o),e(A,F9o),e(A,N1),e(N1,wre),e(wre,C9o),e(N1,M9o),e(N1,X$),e(X$,E9o),e(N1,y9o),e(A,w9o),e(A,q1),e(q1,Are),e(Are,A9o),e(q1,L9o),e(q1,V$),e(V$,B9o),e(q1,x9o),e(A,k9o),e(A,G1),e(G1,Lre),e(Lre,R9o),e(G1,S9o),e(G1,z$),e(z$,P9o),e(G1,$9o),e(A,I9o),e(A,O1),e(O1,Bre),e(Bre,D9o),e(O1,j9o),e(O1,W$),e(W$,N9o),e(O1,q9o),e(A,G9o),e(A,X1),e(X1,xre),e(xre,O9o),e(X1,X9o),e(X1,Q$),e(Q$,V9o),e(X1,z9o),e(A,W9o),e(A,V1),e(V1,kre),e(kre,Q9o),e(V1,H9o),e(V1,H$),e(H$,U9o),e(V1,J9o),e(A,Y9o),e(A,z1),e(z1,Rre),e(Rre,K9o),e(z1,Z9o),e(z1,U$),e(U$,eCo),e(z1,oCo),e(A,rCo),e(A,W1),e(W1,Sre),e(Sre,tCo),e(W1,aCo),e(W1,J$),e(J$,nCo),e(W1,sCo),e(A,lCo),e(A,Q1),e(Q1,Pre),e(Pre,iCo),e(Q1,dCo),e(Q1,Y$),e(Y$,cCo),e(Q1,fCo),e(A,mCo),e(A,H1),e(H1,$re),e($re,gCo),e(H1,hCo),e(H1,K$),e(K$,pCo),e(H1,_Co),e(A,uCo),e(A,U1),e(U1,Ire),e(Ire,bCo),e(U1,vCo),e(U1,Z$),e(Z$,TCo),e(U1,FCo),e(A,CCo),e(A,J1),e(J1,Dre),e(Dre,MCo),e(J1,ECo),e(J1,eI),e(eI,yCo),e(J1,wCo),e(A,ACo),e(A,Y1),e(Y1,jre),e(jre,LCo),e(Y1,BCo),e(Y1,oI),e(oI,xCo),e(Y1,kCo),e(A,RCo),e(A,K1),e(K1,Nre),e(Nre,SCo),e(K1,PCo),e(K1,rI),e(rI,$Co),e(K1,ICo),e(A,DCo),e(A,Z1),e(Z1,qre),e(qre,jCo),e(Z1,NCo),e(Z1,tI),e(tI,qCo),e(Z1,GCo),e(A,OCo),e(A,eb),e(eb,Gre),e(Gre,XCo),e(eb,VCo),e(eb,aI),e(aI,zCo),e(eb,WCo),e(A,QCo),e(A,ob),e(ob,Ore),e(Ore,HCo),e(ob,UCo),e(ob,nI),e(nI,JCo),e(ob,YCo),e(A,KCo),e(A,rb),e(rb,Xre),e(Xre,ZCo),e(rb,e4o),e(rb,sI),e(sI,o4o),e(rb,r4o),e(A,t4o),e(A,tb),e(tb,Vre),e(Vre,a4o),e(tb,n4o),e(tb,lI),e(lI,s4o),e(tb,l4o),e(A,i4o),e(A,ab),e(ab,zre),e(zre,d4o),e(ab,c4o),e(ab,iI),e(iI,f4o),e(ab,m4o),e(A,g4o),e(A,nb),e(nb,Wre),e(Wre,h4o),e(nb,p4o),e(nb,dI),e(dI,_4o),e(nb,u4o),e(A,b4o),e(A,sb),e(sb,Qre),e(Qre,v4o),e(sb,T4o),e(sb,cI),e(cI,F4o),e(sb,C4o),e(A,M4o),e(A,lb),e(lb,Hre),e(Hre,E4o),e(lb,y4o),e(lb,fI),e(fI,w4o),e(lb,A4o),e(A,L4o),e(A,ib),e(ib,Ure),e(Ure,B4o),e(ib,x4o),e(ib,mI),e(mI,k4o),e(ib,R4o),e(A,S4o),e(A,db),e(db,Jre),e(Jre,P4o),e(db,$4o),e(db,gI),e(gI,I4o),e(db,D4o),e(A,j4o),e(A,cb),e(cb,Yre),e(Yre,N4o),e(cb,q4o),e(cb,hI),e(hI,G4o),e(cb,O4o),e(A,X4o),e(A,fb),e(fb,Kre),e(Kre,V4o),e(fb,z4o),e(fb,pI),e(pI,W4o),e(fb,Q4o),e(A,H4o),e(A,mb),e(mb,Zre),e(Zre,U4o),e(mb,J4o),e(mb,_I),e(_I,Y4o),e(mb,K4o),e(A,Z4o),e(A,gb),e(gb,ete),e(ete,eMo),e(gb,oMo),e(gb,uI),e(uI,rMo),e(gb,tMo),e(A,aMo),e(A,hb),e(hb,ote),e(ote,nMo),e(hb,sMo),e(hb,bI),e(bI,lMo),e(hb,iMo),e(A,dMo),e(A,pb),e(pb,rte),e(rte,cMo),e(pb,fMo),e(pb,vI),e(vI,mMo),e(pb,gMo),e(A,hMo),e(A,_b),e(_b,tte),e(tte,pMo),e(_b,_Mo),e(_b,TI),e(TI,uMo),e(_b,bMo),e(A,vMo),e(A,ub),e(ub,ate),e(ate,TMo),e(ub,FMo),e(ub,FI),e(FI,CMo),e(ub,MMo),e(A,EMo),e(A,bb),e(bb,nte),e(nte,yMo),e(bb,wMo),e(bb,CI),e(CI,AMo),e(bb,LMo),e(A,BMo),e(A,vb),e(vb,ste),e(ste,xMo),e(vb,kMo),e(vb,MI),e(MI,RMo),e(vb,SMo),e(A,PMo),e(A,Tb),e(Tb,lte),e(lte,$Mo),e(Tb,IMo),e(Tb,EI),e(EI,DMo),e(Tb,jMo),e(A,NMo),e(A,Fb),e(Fb,ite),e(ite,qMo),e(Fb,GMo),e(Fb,yI),e(yI,OMo),e(Fb,XMo),e(De,VMo),e(De,Cb),e(Cb,zMo),e(Cb,dte),e(dte,WMo),e(Cb,QMo),e(Cb,cte),e(cte,HMo),e(De,UMo),e(De,fte),e(fte,JMo),e(De,YMo),g(X3,De,null),b(c,J7e,u),b(c,sd,u),e(sd,Mb),e(Mb,mte),g(V3,mte,null),e(sd,KMo),e(sd,gte),e(gte,ZMo),b(c,Y7e,u),b(c,Zo,u),g(z3,Zo,null),e(Zo,eEo),e(Zo,ld),e(ld,oEo),e(ld,hte),e(hte,rEo),e(ld,tEo),e(ld,pte),e(pte,aEo),e(ld,nEo),e(Zo,sEo),e(Zo,W3),e(W3,lEo),e(W3,_te),e(_te,iEo),e(W3,dEo),e(Zo,cEo),e(Zo,Wr),g(Q3,Wr,null),e(Wr,fEo),e(Wr,ute),e(ute,mEo),e(Wr,gEo),e(Wr,id),e(id,hEo),e(id,bte),e(bte,pEo),e(id,_Eo),e(id,vte),e(vte,uEo),e(id,bEo),e(Wr,vEo),e(Wr,Tte),e(Tte,TEo),e(Wr,FEo),g(H3,Wr,null),e(Zo,CEo),e(Zo,je),g(U3,je,null),e(je,MEo),e(je,Fte),e(Fte,EEo),e(je,yEo),e(je,za),e(za,wEo),e(za,Cte),e(Cte,AEo),e(za,LEo),e(za,Mte),e(Mte,BEo),e(za,xEo),e(za,Ete),e(Ete,kEo),e(za,REo),e(je,SEo),e(je,G),e(G,Eb),e(Eb,yte),e(yte,PEo),e(Eb,$Eo),e(Eb,wI),e(wI,IEo),e(Eb,DEo),e(G,jEo),e(G,yb),e(yb,wte),e(wte,NEo),e(yb,qEo),e(yb,AI),e(AI,GEo),e(yb,OEo),e(G,XEo),e(G,wb),e(wb,Ate),e(Ate,VEo),e(wb,zEo),e(wb,LI),e(LI,WEo),e(wb,QEo),e(G,HEo),e(G,Ab),e(Ab,Lte),e(Lte,UEo),e(Ab,JEo),e(Ab,BI),e(BI,YEo),e(Ab,KEo),e(G,ZEo),e(G,Lb),e(Lb,Bte),e(Bte,e3o),e(Lb,o3o),e(Lb,xI),e(xI,r3o),e(Lb,t3o),e(G,a3o),e(G,Bb),e(Bb,xte),e(xte,n3o),e(Bb,s3o),e(Bb,kI),e(kI,l3o),e(Bb,i3o),e(G,d3o),e(G,xb),e(xb,kte),e(kte,c3o),e(xb,f3o),e(xb,RI),e(RI,m3o),e(xb,g3o),e(G,h3o),e(G,kb),e(kb,Rte),e(Rte,p3o),e(kb,_3o),e(kb,SI),e(SI,u3o),e(kb,b3o),e(G,v3o),e(G,Rb),e(Rb,Ste),e(Ste,T3o),e(Rb,F3o),e(Rb,PI),e(PI,C3o),e(Rb,M3o),e(G,E3o),e(G,Sb),e(Sb,Pte),e(Pte,y3o),e(Sb,w3o),e(Sb,$I),e($I,A3o),e(Sb,L3o),e(G,B3o),e(G,Pb),e(Pb,$te),e($te,x3o),e(Pb,k3o),e(Pb,II),e(II,R3o),e(Pb,S3o),e(G,P3o),e(G,$b),e($b,Ite),e(Ite,$3o),e($b,I3o),e($b,DI),e(DI,D3o),e($b,j3o),e(G,N3o),e(G,Ib),e(Ib,Dte),e(Dte,q3o),e(Ib,G3o),e(Ib,jI),e(jI,O3o),e(Ib,X3o),e(G,V3o),e(G,Db),e(Db,jte),e(jte,z3o),e(Db,W3o),e(Db,NI),e(NI,Q3o),e(Db,H3o),e(G,U3o),e(G,jb),e(jb,Nte),e(Nte,J3o),e(jb,Y3o),e(jb,qI),e(qI,K3o),e(jb,Z3o),e(G,eyo),e(G,Nb),e(Nb,qte),e(qte,oyo),e(Nb,ryo),e(Nb,GI),e(GI,tyo),e(Nb,ayo),e(G,nyo),e(G,qb),e(qb,Gte),e(Gte,syo),e(qb,lyo),e(qb,OI),e(OI,iyo),e(qb,dyo),e(G,cyo),e(G,Gb),e(Gb,Ote),e(Ote,fyo),e(Gb,myo),e(Gb,XI),e(XI,gyo),e(Gb,hyo),e(G,pyo),e(G,Ob),e(Ob,Xte),e(Xte,_yo),e(Ob,uyo),e(Ob,VI),e(VI,byo),e(Ob,vyo),e(G,Tyo),e(G,Xb),e(Xb,Vte),e(Vte,Fyo),e(Xb,Cyo),e(Xb,zI),e(zI,Myo),e(Xb,Eyo),e(G,yyo),e(G,Vb),e(Vb,zte),e(zte,wyo),e(Vb,Ayo),e(Vb,WI),e(WI,Lyo),e(Vb,Byo),e(G,xyo),e(G,zb),e(zb,Wte),e(Wte,kyo),e(zb,Ryo),e(zb,QI),e(QI,Syo),e(zb,Pyo),e(G,$yo),e(G,Wb),e(Wb,Qte),e(Qte,Iyo),e(Wb,Dyo),e(Wb,HI),e(HI,jyo),e(Wb,Nyo),e(G,qyo),e(G,Qb),e(Qb,Hte),e(Hte,Gyo),e(Qb,Oyo),e(Qb,UI),e(UI,Xyo),e(Qb,Vyo),e(G,zyo),e(G,Hb),e(Hb,Ute),e(Ute,Wyo),e(Hb,Qyo),e(Hb,JI),e(JI,Hyo),e(Hb,Uyo),e(G,Jyo),e(G,Ub),e(Ub,Jte),e(Jte,Yyo),e(Ub,Kyo),e(Ub,YI),e(YI,Zyo),e(Ub,ewo),e(G,owo),e(G,Jb),e(Jb,Yte),e(Yte,rwo),e(Jb,two),e(Jb,KI),e(KI,awo),e(Jb,nwo),e(G,swo),e(G,Yb),e(Yb,Kte),e(Kte,lwo),e(Yb,iwo),e(Yb,ZI),e(ZI,dwo),e(Yb,cwo),e(je,fwo),e(je,Kb),e(Kb,mwo),e(Kb,Zte),e(Zte,gwo),e(Kb,hwo),e(Kb,eae),e(eae,pwo),e(je,_wo),e(je,oae),e(oae,uwo),e(je,bwo),g(J3,je,null),b(c,K7e,u),b(c,dd,u),e(dd,Zb),e(Zb,rae),g(Y3,rae,null),e(dd,vwo),e(dd,tae),e(tae,Two),b(c,Z7e,u),b(c,er,u),g(K3,er,null),e(er,Fwo),e(er,cd),e(cd,Cwo),e(cd,aae),e(aae,Mwo),e(cd,Ewo),e(cd,nae),e(nae,ywo),e(cd,wwo),e(er,Awo),e(er,Z3),e(Z3,Lwo),e(Z3,sae),e(sae,Bwo),e(Z3,xwo),e(er,kwo),e(er,Qr),g(ey,Qr,null),e(Qr,Rwo),e(Qr,lae),e(lae,Swo),e(Qr,Pwo),e(Qr,fd),e(fd,$wo),e(fd,iae),e(iae,Iwo),e(fd,Dwo),e(fd,dae),e(dae,jwo),e(fd,Nwo),e(Qr,qwo),e(Qr,cae),e(cae,Gwo),e(Qr,Owo),g(oy,Qr,null),e(er,Xwo),e(er,Ne),g(ry,Ne,null),e(Ne,Vwo),e(Ne,fae),e(fae,zwo),e(Ne,Wwo),e(Ne,Wa),e(Wa,Qwo),e(Wa,mae),e(mae,Hwo),e(Wa,Uwo),e(Wa,gae),e(gae,Jwo),e(Wa,Ywo),e(Wa,hae),e(hae,Kwo),e(Wa,Zwo),e(Ne,e6o),e(Ne,na),e(na,e5),e(e5,pae),e(pae,o6o),e(e5,r6o),e(e5,eD),e(eD,t6o),e(e5,a6o),e(na,n6o),e(na,o5),e(o5,_ae),e(_ae,s6o),e(o5,l6o),e(o5,oD),e(oD,i6o),e(o5,d6o),e(na,c6o),e(na,r5),e(r5,uae),e(uae,f6o),e(r5,m6o),e(r5,rD),e(rD,g6o),e(r5,h6o),e(na,p6o),e(na,t5),e(t5,bae),e(bae,_6o),e(t5,u6o),e(t5,tD),e(tD,b6o),e(t5,v6o),e(na,T6o),e(na,a5),e(a5,vae),e(vae,F6o),e(a5,C6o),e(a5,aD),e(aD,M6o),e(a5,E6o),e(Ne,y6o),e(Ne,n5),e(n5,w6o),e(n5,Tae),e(Tae,A6o),e(n5,L6o),e(n5,Fae),e(Fae,B6o),e(Ne,x6o),e(Ne,Cae),e(Cae,k6o),e(Ne,R6o),g(ty,Ne,null),b(c,eBe,u),b(c,md,u),e(md,s5),e(s5,Mae),g(ay,Mae,null),e(md,S6o),e(md,Eae),e(Eae,P6o),b(c,oBe,u),b(c,or,u),g(ny,or,null),e(or,$6o),e(or,gd),e(gd,I6o),e(gd,yae),e(yae,D6o),e(gd,j6o),e(gd,wae),e(wae,N6o),e(gd,q6o),e(or,G6o),e(or,sy),e(sy,O6o),e(sy,Aae),e(Aae,X6o),e(sy,V6o),e(or,z6o),e(or,Hr),g(ly,Hr,null),e(Hr,W6o),e(Hr,Lae),e(Lae,Q6o),e(Hr,H6o),e(Hr,hd),e(hd,U6o),e(hd,Bae),e(Bae,J6o),e(hd,Y6o),e(hd,xae),e(xae,K6o),e(hd,Z6o),e(Hr,eAo),e(Hr,kae),e(kae,oAo),e(Hr,rAo),g(iy,Hr,null),e(or,tAo),e(or,qe),g(dy,qe,null),e(qe,aAo),e(qe,Rae),e(Rae,nAo),e(qe,sAo),e(qe,Qa),e(Qa,lAo),e(Qa,Sae),e(Sae,iAo),e(Qa,dAo),e(Qa,Pae),e(Pae,cAo),e(Qa,fAo),e(Qa,$ae),e($ae,mAo),e(Qa,gAo),e(qe,hAo),e(qe,N),e(N,l5),e(l5,Iae),e(Iae,pAo),e(l5,_Ao),e(l5,nD),e(nD,uAo),e(l5,bAo),e(N,vAo),e(N,i5),e(i5,Dae),e(Dae,TAo),e(i5,FAo),e(i5,sD),e(sD,CAo),e(i5,MAo),e(N,EAo),e(N,d5),e(d5,jae),e(jae,yAo),e(d5,wAo),e(d5,lD),e(lD,AAo),e(d5,LAo),e(N,BAo),e(N,c5),e(c5,Nae),e(Nae,xAo),e(c5,kAo),e(c5,iD),e(iD,RAo),e(c5,SAo),e(N,PAo),e(N,f5),e(f5,qae),e(qae,$Ao),e(f5,IAo),e(f5,dD),e(dD,DAo),e(f5,jAo),e(N,NAo),e(N,m5),e(m5,Gae),e(Gae,qAo),e(m5,GAo),e(m5,cD),e(cD,OAo),e(m5,XAo),e(N,VAo),e(N,g5),e(g5,Oae),e(Oae,zAo),e(g5,WAo),e(g5,fD),e(fD,QAo),e(g5,HAo),e(N,UAo),e(N,h5),e(h5,Xae),e(Xae,JAo),e(h5,YAo),e(h5,mD),e(mD,KAo),e(h5,ZAo),e(N,e0o),e(N,p5),e(p5,Vae),e(Vae,o0o),e(p5,r0o),e(p5,gD),e(gD,t0o),e(p5,a0o),e(N,n0o),e(N,_5),e(_5,zae),e(zae,s0o),e(_5,l0o),e(_5,hD),e(hD,i0o),e(_5,d0o),e(N,c0o),e(N,u5),e(u5,Wae),e(Wae,f0o),e(u5,m0o),e(u5,pD),e(pD,g0o),e(u5,h0o),e(N,p0o),e(N,b5),e(b5,Qae),e(Qae,_0o),e(b5,u0o),e(b5,_D),e(_D,b0o),e(b5,v0o),e(N,T0o),e(N,v5),e(v5,Hae),e(Hae,F0o),e(v5,C0o),e(v5,uD),e(uD,M0o),e(v5,E0o),e(N,y0o),e(N,T5),e(T5,Uae),e(Uae,w0o),e(T5,A0o),e(T5,bD),e(bD,L0o),e(T5,B0o),e(N,x0o),e(N,F5),e(F5,Jae),e(Jae,k0o),e(F5,R0o),e(F5,vD),e(vD,S0o),e(F5,P0o),e(N,$0o),e(N,C5),e(C5,Yae),e(Yae,I0o),e(C5,D0o),e(C5,TD),e(TD,j0o),e(C5,N0o),e(N,q0o),e(N,M5),e(M5,Kae),e(Kae,G0o),e(M5,O0o),e(M5,FD),e(FD,X0o),e(M5,V0o),e(N,z0o),e(N,E5),e(E5,Zae),e(Zae,W0o),e(E5,Q0o),e(E5,CD),e(CD,H0o),e(E5,U0o),e(N,J0o),e(N,y5),e(y5,ene),e(ene,Y0o),e(y5,K0o),e(y5,MD),e(MD,Z0o),e(y5,eLo),e(N,oLo),e(N,w5),e(w5,one),e(one,rLo),e(w5,tLo),e(w5,ED),e(ED,aLo),e(w5,nLo),e(N,sLo),e(N,A5),e(A5,rne),e(rne,lLo),e(A5,iLo),e(A5,yD),e(yD,dLo),e(A5,cLo),e(N,fLo),e(N,L5),e(L5,tne),e(tne,mLo),e(L5,gLo),e(L5,wD),e(wD,hLo),e(L5,pLo),e(N,_Lo),e(N,B5),e(B5,ane),e(ane,uLo),e(B5,bLo),e(B5,AD),e(AD,vLo),e(B5,TLo),e(N,FLo),e(N,x5),e(x5,nne),e(nne,CLo),e(x5,MLo),e(x5,LD),e(LD,ELo),e(x5,yLo),e(N,wLo),e(N,k5),e(k5,sne),e(sne,ALo),e(k5,LLo),e(k5,BD),e(BD,BLo),e(k5,xLo),e(N,kLo),e(N,R5),e(R5,lne),e(lne,RLo),e(R5,SLo),e(R5,xD),e(xD,PLo),e(R5,$Lo),e(N,ILo),e(N,S5),e(S5,ine),e(ine,DLo),e(S5,jLo),e(S5,kD),e(kD,NLo),e(S5,qLo),e(N,GLo),e(N,P5),e(P5,dne),e(dne,OLo),e(P5,XLo),e(P5,RD),e(RD,VLo),e(P5,zLo),e(N,WLo),e(N,$5),e($5,cne),e(cne,QLo),e($5,HLo),e($5,SD),e(SD,ULo),e($5,JLo),e(N,YLo),e(N,I5),e(I5,fne),e(fne,KLo),e(I5,ZLo),e(I5,PD),e(PD,e8o),e(I5,o8o),e(N,r8o),e(N,D5),e(D5,mne),e(mne,t8o),e(D5,a8o),e(D5,$D),e($D,n8o),e(D5,s8o),e(N,l8o),e(N,j5),e(j5,gne),e(gne,i8o),e(j5,d8o),e(j5,ID),e(ID,c8o),e(j5,f8o),e(N,m8o),e(N,N5),e(N5,hne),e(hne,g8o),e(N5,h8o),e(N5,DD),e(DD,p8o),e(N5,_8o),e(qe,u8o),e(qe,q5),e(q5,b8o),e(q5,pne),e(pne,v8o),e(q5,T8o),e(q5,_ne),e(_ne,F8o),e(qe,C8o),e(qe,une),e(une,M8o),e(qe,E8o),g(cy,qe,null),b(c,rBe,u),b(c,pd,u),e(pd,G5),e(G5,bne),g(fy,bne,null),e(pd,y8o),e(pd,vne),e(vne,w8o),b(c,tBe,u),b(c,rr,u),g(my,rr,null),e(rr,A8o),e(rr,_d),e(_d,L8o),e(_d,Tne),e(Tne,B8o),e(_d,x8o),e(_d,Fne),e(Fne,k8o),e(_d,R8o),e(rr,S8o),e(rr,gy),e(gy,P8o),e(gy,Cne),e(Cne,$8o),e(gy,I8o),e(rr,D8o),e(rr,Ur),g(hy,Ur,null),e(Ur,j8o),e(Ur,Mne),e(Mne,N8o),e(Ur,q8o),e(Ur,ud),e(ud,G8o),e(ud,Ene),e(Ene,O8o),e(ud,X8o),e(ud,yne),e(yne,V8o),e(ud,z8o),e(Ur,W8o),e(Ur,wne),e(wne,Q8o),e(Ur,H8o),g(py,Ur,null),e(rr,U8o),e(rr,Ge),g(_y,Ge,null),e(Ge,J8o),e(Ge,Ane),e(Ane,Y8o),e(Ge,K8o),e(Ge,Ha),e(Ha,Z8o),e(Ha,Lne),e(Lne,e7o),e(Ha,o7o),e(Ha,Bne),e(Bne,r7o),e(Ha,t7o),e(Ha,xne),e(xne,a7o),e(Ha,n7o),e(Ge,s7o),e(Ge,R),e(R,O5),e(O5,kne),e(kne,l7o),e(O5,i7o),e(O5,jD),e(jD,d7o),e(O5,c7o),e(R,f7o),e(R,X5),e(X5,Rne),e(Rne,m7o),e(X5,g7o),e(X5,ND),e(ND,h7o),e(X5,p7o),e(R,_7o),e(R,V5),e(V5,Sne),e(Sne,u7o),e(V5,b7o),e(V5,qD),e(qD,v7o),e(V5,T7o),e(R,F7o),e(R,z5),e(z5,Pne),e(Pne,C7o),e(z5,M7o),e(z5,GD),e(GD,E7o),e(z5,y7o),e(R,w7o),e(R,W5),e(W5,$ne),e($ne,A7o),e(W5,L7o),e(W5,OD),e(OD,B7o),e(W5,x7o),e(R,k7o),e(R,Q5),e(Q5,Ine),e(Ine,R7o),e(Q5,S7o),e(Q5,XD),e(XD,P7o),e(Q5,$7o),e(R,I7o),e(R,H5),e(H5,Dne),e(Dne,D7o),e(H5,j7o),e(H5,VD),e(VD,N7o),e(H5,q7o),e(R,G7o),e(R,U5),e(U5,jne),e(jne,O7o),e(U5,X7o),e(U5,zD),e(zD,V7o),e(U5,z7o),e(R,W7o),e(R,J5),e(J5,Nne),e(Nne,Q7o),e(J5,H7o),e(J5,WD),e(WD,U7o),e(J5,J7o),e(R,Y7o),e(R,Y5),e(Y5,qne),e(qne,K7o),e(Y5,Z7o),e(Y5,QD),e(QD,eBo),e(Y5,oBo),e(R,rBo),e(R,K5),e(K5,Gne),e(Gne,tBo),e(K5,aBo),e(K5,HD),e(HD,nBo),e(K5,sBo),e(R,lBo),e(R,Z5),e(Z5,One),e(One,iBo),e(Z5,dBo),e(Z5,UD),e(UD,cBo),e(Z5,fBo),e(R,mBo),e(R,e2),e(e2,Xne),e(Xne,gBo),e(e2,hBo),e(e2,JD),e(JD,pBo),e(e2,_Bo),e(R,uBo),e(R,o2),e(o2,Vne),e(Vne,bBo),e(o2,vBo),e(o2,YD),e(YD,TBo),e(o2,FBo),e(R,CBo),e(R,r2),e(r2,zne),e(zne,MBo),e(r2,EBo),e(r2,KD),e(KD,yBo),e(r2,wBo),e(R,ABo),e(R,t2),e(t2,Wne),e(Wne,LBo),e(t2,BBo),e(t2,ZD),e(ZD,xBo),e(t2,kBo),e(R,RBo),e(R,a2),e(a2,Qne),e(Qne,SBo),e(a2,PBo),e(a2,ej),e(ej,$Bo),e(a2,IBo),e(R,DBo),e(R,n2),e(n2,Hne),e(Hne,jBo),e(n2,NBo),e(n2,oj),e(oj,qBo),e(n2,GBo),e(R,OBo),e(R,s2),e(s2,Une),e(Une,XBo),e(s2,VBo),e(s2,rj),e(rj,zBo),e(s2,WBo),e(R,QBo),e(R,l2),e(l2,Jne),e(Jne,HBo),e(l2,UBo),e(l2,tj),e(tj,JBo),e(l2,YBo),e(R,KBo),e(R,i2),e(i2,Yne),e(Yne,ZBo),e(i2,exo),e(i2,aj),e(aj,oxo),e(i2,rxo),e(R,txo),e(R,d2),e(d2,Kne),e(Kne,axo),e(d2,nxo),e(d2,nj),e(nj,sxo),e(d2,lxo),e(R,ixo),e(R,c2),e(c2,Zne),e(Zne,dxo),e(c2,cxo),e(c2,sj),e(sj,fxo),e(c2,mxo),e(R,gxo),e(R,f2),e(f2,ese),e(ese,hxo),e(f2,pxo),e(f2,lj),e(lj,_xo),e(f2,uxo),e(R,bxo),e(R,m2),e(m2,ose),e(ose,vxo),e(m2,Txo),e(m2,ij),e(ij,Fxo),e(m2,Cxo),e(R,Mxo),e(R,g2),e(g2,rse),e(rse,Exo),e(g2,yxo),e(g2,dj),e(dj,wxo),e(g2,Axo),e(R,Lxo),e(R,h2),e(h2,tse),e(tse,Bxo),e(h2,xxo),e(h2,cj),e(cj,kxo),e(h2,Rxo),e(R,Sxo),e(R,p2),e(p2,ase),e(ase,Pxo),e(p2,$xo),e(p2,fj),e(fj,Ixo),e(p2,Dxo),e(R,jxo),e(R,_2),e(_2,nse),e(nse,Nxo),e(_2,qxo),e(_2,mj),e(mj,Gxo),e(_2,Oxo),e(R,Xxo),e(R,u2),e(u2,sse),e(sse,Vxo),e(u2,zxo),e(u2,gj),e(gj,Wxo),e(u2,Qxo),e(R,Hxo),e(R,b2),e(b2,lse),e(lse,Uxo),e(b2,Jxo),e(b2,hj),e(hj,Yxo),e(b2,Kxo),e(R,Zxo),e(R,v2),e(v2,ise),e(ise,eko),e(v2,oko),e(v2,pj),e(pj,rko),e(v2,tko),e(R,ako),e(R,T2),e(T2,dse),e(dse,nko),e(T2,sko),e(T2,_j),e(_j,lko),e(T2,iko),e(R,dko),e(R,F2),e(F2,cse),e(cse,cko),e(F2,fko),e(F2,uj),e(uj,mko),e(F2,gko),e(R,hko),e(R,C2),e(C2,fse),e(fse,pko),e(C2,_ko),e(C2,bj),e(bj,uko),e(C2,bko),e(R,vko),e(R,M2),e(M2,mse),e(mse,Tko),e(M2,Fko),e(M2,vj),e(vj,Cko),e(M2,Mko),e(R,Eko),e(R,E2),e(E2,gse),e(gse,yko),e(E2,wko),e(E2,Tj),e(Tj,Ako),e(E2,Lko),e(R,Bko),e(R,y2),e(y2,hse),e(hse,xko),e(y2,kko),e(y2,Fj),e(Fj,Rko),e(y2,Sko),e(R,Pko),e(R,w2),e(w2,pse),e(pse,$ko),e(w2,Iko),e(w2,Cj),e(Cj,Dko),e(w2,jko),e(Ge,Nko),e(Ge,A2),e(A2,qko),e(A2,_se),e(_se,Gko),e(A2,Oko),e(A2,use),e(use,Xko),e(Ge,Vko),e(Ge,bse),e(bse,zko),e(Ge,Wko),g(uy,Ge,null),b(c,aBe,u),b(c,bd,u),e(bd,L2),e(L2,vse),g(by,vse,null),e(bd,Qko),e(bd,Tse),e(Tse,Hko),b(c,nBe,u),b(c,tr,u),g(vy,tr,null),e(tr,Uko),e(tr,vd),e(vd,Jko),e(vd,Fse),e(Fse,Yko),e(vd,Kko),e(vd,Cse),e(Cse,Zko),e(vd,eRo),e(tr,oRo),e(tr,Ty),e(Ty,rRo),e(Ty,Mse),e(Mse,tRo),e(Ty,aRo),e(tr,nRo),e(tr,Jr),g(Fy,Jr,null),e(Jr,sRo),e(Jr,Ese),e(Ese,lRo),e(Jr,iRo),e(Jr,Td),e(Td,dRo),e(Td,yse),e(yse,cRo),e(Td,fRo),e(Td,wse),e(wse,mRo),e(Td,gRo),e(Jr,hRo),e(Jr,Ase),e(Ase,pRo),e(Jr,_Ro),g(Cy,Jr,null),e(tr,uRo),e(tr,Oe),g(My,Oe,null),e(Oe,bRo),e(Oe,Lse),e(Lse,vRo),e(Oe,TRo),e(Oe,Ua),e(Ua,FRo),e(Ua,Bse),e(Bse,CRo),e(Ua,MRo),e(Ua,xse),e(xse,ERo),e(Ua,yRo),e(Ua,kse),e(kse,wRo),e(Ua,ARo),e(Oe,LRo),e(Oe,Rse),e(Rse,B2),e(B2,Sse),e(Sse,BRo),e(B2,xRo),e(B2,Mj),e(Mj,kRo),e(B2,RRo),e(Oe,SRo),e(Oe,x2),e(x2,PRo),e(x2,Pse),e(Pse,$Ro),e(x2,IRo),e(x2,$se),e($se,DRo),e(Oe,jRo),e(Oe,Ise),e(Ise,NRo),e(Oe,qRo),g(Ey,Oe,null),b(c,sBe,u),b(c,Fd,u),e(Fd,k2),e(k2,Dse),g(yy,Dse,null),e(Fd,GRo),e(Fd,jse),e(jse,ORo),b(c,lBe,u),b(c,ar,u),g(wy,ar,null),e(ar,XRo),e(ar,Cd),e(Cd,VRo),e(Cd,Nse),e(Nse,zRo),e(Cd,WRo),e(Cd,qse),e(qse,QRo),e(Cd,HRo),e(ar,URo),e(ar,Ay),e(Ay,JRo),e(Ay,Gse),e(Gse,YRo),e(Ay,KRo),e(ar,ZRo),e(ar,Yr),g(Ly,Yr,null),e(Yr,eSo),e(Yr,Ose),e(Ose,oSo),e(Yr,rSo),e(Yr,Md),e(Md,tSo),e(Md,Xse),e(Xse,aSo),e(Md,nSo),e(Md,Vse),e(Vse,sSo),e(Md,lSo),e(Yr,iSo),e(Yr,zse),e(zse,dSo),e(Yr,cSo),g(By,Yr,null),e(ar,fSo),e(ar,Xe),g(xy,Xe,null),e(Xe,mSo),e(Xe,Wse),e(Wse,gSo),e(Xe,hSo),e(Xe,Ja),e(Ja,pSo),e(Ja,Qse),e(Qse,_So),e(Ja,uSo),e(Ja,Hse),e(Hse,bSo),e(Ja,vSo),e(Ja,Use),e(Use,TSo),e(Ja,FSo),e(Xe,CSo),e(Xe,be),e(be,R2),e(R2,Jse),e(Jse,MSo),e(R2,ESo),e(R2,Ej),e(Ej,ySo),e(R2,wSo),e(be,ASo),e(be,S2),e(S2,Yse),e(Yse,LSo),e(S2,BSo),e(S2,yj),e(yj,xSo),e(S2,kSo),e(be,RSo),e(be,Ps),e(Ps,Kse),e(Kse,SSo),e(Ps,PSo),e(Ps,wj),e(wj,$So),e(Ps,ISo),e(Ps,Aj),e(Aj,DSo),e(Ps,jSo),e(be,NSo),e(be,P2),e(P2,Zse),e(Zse,qSo),e(P2,GSo),e(P2,Lj),e(Lj,OSo),e(P2,XSo),e(be,VSo),e(be,la),e(la,ele),e(ele,zSo),e(la,WSo),e(la,Bj),e(Bj,QSo),e(la,HSo),e(la,xj),e(xj,USo),e(la,JSo),e(la,kj),e(kj,YSo),e(la,KSo),e(be,ZSo),e(be,$2),e($2,ole),e(ole,ePo),e($2,oPo),e($2,Rj),e(Rj,rPo),e($2,tPo),e(be,aPo),e(be,I2),e(I2,rle),e(rle,nPo),e(I2,sPo),e(I2,Sj),e(Sj,lPo),e(I2,iPo),e(be,dPo),e(be,D2),e(D2,tle),e(tle,cPo),e(D2,fPo),e(D2,Pj),e(Pj,mPo),e(D2,gPo),e(be,hPo),e(be,j2),e(j2,ale),e(ale,pPo),e(j2,_Po),e(j2,$j),e($j,uPo),e(j2,bPo),e(Xe,vPo),e(Xe,N2),e(N2,TPo),e(N2,nle),e(nle,FPo),e(N2,CPo),e(N2,sle),e(sle,MPo),e(Xe,EPo),e(Xe,lle),e(lle,yPo),e(Xe,wPo),g(ky,Xe,null),b(c,iBe,u),b(c,Ed,u),e(Ed,q2),e(q2,ile),g(Ry,ile,null),e(Ed,APo),e(Ed,dle),e(dle,LPo),b(c,dBe,u),b(c,nr,u),g(Sy,nr,null),e(nr,BPo),e(nr,yd),e(yd,xPo),e(yd,cle),e(cle,kPo),e(yd,RPo),e(yd,fle),e(fle,SPo),e(yd,PPo),e(nr,$Po),e(nr,Py),e(Py,IPo),e(Py,mle),e(mle,DPo),e(Py,jPo),e(nr,NPo),e(nr,Kr),g($y,Kr,null),e(Kr,qPo),e(Kr,gle),e(gle,GPo),e(Kr,OPo),e(Kr,wd),e(wd,XPo),e(wd,hle),e(hle,VPo),e(wd,zPo),e(wd,ple),e(ple,WPo),e(wd,QPo),e(Kr,HPo),e(Kr,_le),e(_le,UPo),e(Kr,JPo),g(Iy,Kr,null),e(nr,YPo),e(nr,Ve),g(Dy,Ve,null),e(Ve,KPo),e(Ve,ule),e(ule,ZPo),e(Ve,e$o),e(Ve,Ya),e(Ya,o$o),e(Ya,ble),e(ble,r$o),e(Ya,t$o),e(Ya,vle),e(vle,a$o),e(Ya,n$o),e(Ya,Tle),e(Tle,s$o),e(Ya,l$o),e(Ve,i$o),e(Ve,Fle),e(Fle,G2),e(G2,Cle),e(Cle,d$o),e(G2,c$o),e(G2,Ij),e(Ij,f$o),e(G2,m$o),e(Ve,g$o),e(Ve,O2),e(O2,h$o),e(O2,Mle),e(Mle,p$o),e(O2,_$o),e(O2,Ele),e(Ele,u$o),e(Ve,b$o),e(Ve,yle),e(yle,v$o),e(Ve,T$o),g(jy,Ve,null),b(c,cBe,u),b(c,Ad,u),e(Ad,X2),e(X2,wle),g(Ny,wle,null),e(Ad,F$o),e(Ad,Ale),e(Ale,C$o),b(c,fBe,u),b(c,sr,u),g(qy,sr,null),e(sr,M$o),e(sr,Ld),e(Ld,E$o),e(Ld,Lle),e(Lle,y$o),e(Ld,w$o),e(Ld,Ble),e(Ble,A$o),e(Ld,L$o),e(sr,B$o),e(sr,Gy),e(Gy,x$o),e(Gy,xle),e(xle,k$o),e(Gy,R$o),e(sr,S$o),e(sr,Zr),g(Oy,Zr,null),e(Zr,P$o),e(Zr,kle),e(kle,$$o),e(Zr,I$o),e(Zr,Bd),e(Bd,D$o),e(Bd,Rle),e(Rle,j$o),e(Bd,N$o),e(Bd,Sle),e(Sle,q$o),e(Bd,G$o),e(Zr,O$o),e(Zr,Ple),e(Ple,X$o),e(Zr,V$o),g(Xy,Zr,null),e(sr,z$o),e(sr,ze),g(Vy,ze,null),e(ze,W$o),e(ze,$le),e($le,Q$o),e(ze,H$o),e(ze,Ka),e(Ka,U$o),e(Ka,Ile),e(Ile,J$o),e(Ka,Y$o),e(Ka,Dle),e(Dle,K$o),e(Ka,Z$o),e(Ka,jle),e(jle,eIo),e(Ka,oIo),e(ze,rIo),e(ze,Ae),e(Ae,V2),e(V2,Nle),e(Nle,tIo),e(V2,aIo),e(V2,Dj),e(Dj,nIo),e(V2,sIo),e(Ae,lIo),e(Ae,z2),e(z2,qle),e(qle,iIo),e(z2,dIo),e(z2,jj),e(jj,cIo),e(z2,fIo),e(Ae,mIo),e(Ae,W2),e(W2,Gle),e(Gle,gIo),e(W2,hIo),e(W2,Nj),e(Nj,pIo),e(W2,_Io),e(Ae,uIo),e(Ae,Q2),e(Q2,Ole),e(Ole,bIo),e(Q2,vIo),e(Q2,qj),e(qj,TIo),e(Q2,FIo),e(Ae,CIo),e(Ae,H2),e(H2,Xle),e(Xle,MIo),e(H2,EIo),e(H2,Gj),e(Gj,yIo),e(H2,wIo),e(Ae,AIo),e(Ae,U2),e(U2,Vle),e(Vle,LIo),e(U2,BIo),e(U2,Oj),e(Oj,xIo),e(U2,kIo),e(Ae,RIo),e(Ae,J2),e(J2,zle),e(zle,SIo),e(J2,PIo),e(J2,Xj),e(Xj,$Io),e(J2,IIo),e(Ae,DIo),e(Ae,Y2),e(Y2,Wle),e(Wle,jIo),e(Y2,NIo),e(Y2,Vj),e(Vj,qIo),e(Y2,GIo),e(ze,OIo),e(ze,K2),e(K2,XIo),e(K2,Qle),e(Qle,VIo),e(K2,zIo),e(K2,Hle),e(Hle,WIo),e(ze,QIo),e(ze,Ule),e(Ule,HIo),e(ze,UIo),g(zy,ze,null),b(c,mBe,u),b(c,xd,u),e(xd,Z2),e(Z2,Jle),g(Wy,Jle,null),e(xd,JIo),e(xd,Yle),e(Yle,YIo),b(c,gBe,u),b(c,lr,u),g(Qy,lr,null),e(lr,KIo),e(lr,kd),e(kd,ZIo),e(kd,Kle),e(Kle,eDo),e(kd,oDo),e(kd,Zle),e(Zle,rDo),e(kd,tDo),e(lr,aDo),e(lr,Hy),e(Hy,nDo),e(Hy,eie),e(eie,sDo),e(Hy,lDo),e(lr,iDo),e(lr,et),g(Uy,et,null),e(et,dDo),e(et,oie),e(oie,cDo),e(et,fDo),e(et,Rd),e(Rd,mDo),e(Rd,rie),e(rie,gDo),e(Rd,hDo),e(Rd,tie),e(tie,pDo),e(Rd,_Do),e(et,uDo),e(et,aie),e(aie,bDo),e(et,vDo),g(Jy,et,null),e(lr,TDo),e(lr,We),g(Yy,We,null),e(We,FDo),e(We,nie),e(nie,CDo),e(We,MDo),e(We,Za),e(Za,EDo),e(Za,sie),e(sie,yDo),e(Za,wDo),e(Za,lie),e(lie,ADo),e(Za,LDo),e(Za,iie),e(iie,BDo),e(Za,xDo),e(We,kDo),e(We,en),e(en,ev),e(ev,die),e(die,RDo),e(ev,SDo),e(ev,zj),e(zj,PDo),e(ev,$Do),e(en,IDo),e(en,ov),e(ov,cie),e(cie,DDo),e(ov,jDo),e(ov,Wj),e(Wj,NDo),e(ov,qDo),e(en,GDo),e(en,rv),e(rv,fie),e(fie,ODo),e(rv,XDo),e(rv,Qj),e(Qj,VDo),e(rv,zDo),e(en,WDo),e(en,tv),e(tv,mie),e(mie,QDo),e(tv,HDo),e(tv,Hj),e(Hj,UDo),e(tv,JDo),e(We,YDo),e(We,av),e(av,KDo),e(av,gie),e(gie,ZDo),e(av,ejo),e(av,hie),e(hie,ojo),e(We,rjo),e(We,pie),e(pie,tjo),e(We,ajo),g(Ky,We,null),b(c,hBe,u),b(c,Sd,u),e(Sd,nv),e(nv,_ie),g(Zy,_ie,null),e(Sd,njo),e(Sd,uie),e(uie,sjo),b(c,pBe,u),b(c,ir,u),g(ew,ir,null),e(ir,ljo),e(ir,Pd),e(Pd,ijo),e(Pd,bie),e(bie,djo),e(Pd,cjo),e(Pd,vie),e(vie,fjo),e(Pd,mjo),e(ir,gjo),e(ir,ow),e(ow,hjo),e(ow,Tie),e(Tie,pjo),e(ow,_jo),e(ir,ujo),e(ir,ot),g(rw,ot,null),e(ot,bjo),e(ot,Fie),e(Fie,vjo),e(ot,Tjo),e(ot,$d),e($d,Fjo),e($d,Cie),e(Cie,Cjo),e($d,Mjo),e($d,Mie),e(Mie,Ejo),e($d,yjo),e(ot,wjo),e(ot,Eie),e(Eie,Ajo),e(ot,Ljo),g(tw,ot,null),e(ir,Bjo),e(ir,Qe),g(aw,Qe,null),e(Qe,xjo),e(Qe,yie),e(yie,kjo),e(Qe,Rjo),e(Qe,on),e(on,Sjo),e(on,wie),e(wie,Pjo),e(on,$jo),e(on,Aie),e(Aie,Ijo),e(on,Djo),e(on,Lie),e(Lie,jjo),e(on,Njo),e(Qe,qjo),e(Qe,Le),e(Le,sv),e(sv,Bie),e(Bie,Gjo),e(sv,Ojo),e(sv,Uj),e(Uj,Xjo),e(sv,Vjo),e(Le,zjo),e(Le,lv),e(lv,xie),e(xie,Wjo),e(lv,Qjo),e(lv,Jj),e(Jj,Hjo),e(lv,Ujo),e(Le,Jjo),e(Le,iv),e(iv,kie),e(kie,Yjo),e(iv,Kjo),e(iv,Yj),e(Yj,Zjo),e(iv,eNo),e(Le,oNo),e(Le,dv),e(dv,Rie),e(Rie,rNo),e(dv,tNo),e(dv,Kj),e(Kj,aNo),e(dv,nNo),e(Le,sNo),e(Le,cv),e(cv,Sie),e(Sie,lNo),e(cv,iNo),e(cv,Zj),e(Zj,dNo),e(cv,cNo),e(Le,fNo),e(Le,fv),e(fv,Pie),e(Pie,mNo),e(fv,gNo),e(fv,eN),e(eN,hNo),e(fv,pNo),e(Le,_No),e(Le,mv),e(mv,$ie),e($ie,uNo),e(mv,bNo),e(mv,oN),e(oN,vNo),e(mv,TNo),e(Le,FNo),e(Le,gv),e(gv,Iie),e(Iie,CNo),e(gv,MNo),e(gv,rN),e(rN,ENo),e(gv,yNo),e(Qe,wNo),e(Qe,hv),e(hv,ANo),e(hv,Die),e(Die,LNo),e(hv,BNo),e(hv,jie),e(jie,xNo),e(Qe,kNo),e(Qe,Nie),e(Nie,RNo),e(Qe,SNo),g(nw,Qe,null),b(c,_Be,u),b(c,Id,u),e(Id,pv),e(pv,qie),g(sw,qie,null),e(Id,PNo),e(Id,Gie),e(Gie,$No),b(c,uBe,u),b(c,dr,u),g(lw,dr,null),e(dr,INo),e(dr,Dd),e(Dd,DNo),e(Dd,Oie),e(Oie,jNo),e(Dd,NNo),e(Dd,Xie),e(Xie,qNo),e(Dd,GNo),e(dr,ONo),e(dr,iw),e(iw,XNo),e(iw,Vie),e(Vie,VNo),e(iw,zNo),e(dr,WNo),e(dr,rt),g(dw,rt,null),e(rt,QNo),e(rt,zie),e(zie,HNo),e(rt,UNo),e(rt,jd),e(jd,JNo),e(jd,Wie),e(Wie,YNo),e(jd,KNo),e(jd,Qie),e(Qie,ZNo),e(jd,eqo),e(rt,oqo),e(rt,Hie),e(Hie,rqo),e(rt,tqo),g(cw,rt,null),e(dr,aqo),e(dr,He),g(fw,He,null),e(He,nqo),e(He,Uie),e(Uie,sqo),e(He,lqo),e(He,rn),e(rn,iqo),e(rn,Jie),e(Jie,dqo),e(rn,cqo),e(rn,Yie),e(Yie,fqo),e(rn,mqo),e(rn,Kie),e(Kie,gqo),e(rn,hqo),e(He,pqo),e(He,mw),e(mw,_v),e(_v,Zie),e(Zie,_qo),e(_v,uqo),e(_v,tN),e(tN,bqo),e(_v,vqo),e(mw,Tqo),e(mw,uv),e(uv,ede),e(ede,Fqo),e(uv,Cqo),e(uv,aN),e(aN,Mqo),e(uv,Eqo),e(He,yqo),e(He,bv),e(bv,wqo),e(bv,ode),e(ode,Aqo),e(bv,Lqo),e(bv,rde),e(rde,Bqo),e(He,xqo),e(He,tde),e(tde,kqo),e(He,Rqo),g(gw,He,null),b(c,bBe,u),b(c,Nd,u),e(Nd,vv),e(vv,ade),g(hw,ade,null),e(Nd,Sqo),e(Nd,nde),e(nde,Pqo),b(c,vBe,u),b(c,cr,u),g(pw,cr,null),e(cr,$qo),e(cr,qd),e(qd,Iqo),e(qd,sde),e(sde,Dqo),e(qd,jqo),e(qd,lde),e(lde,Nqo),e(qd,qqo),e(cr,Gqo),e(cr,_w),e(_w,Oqo),e(_w,ide),e(ide,Xqo),e(_w,Vqo),e(cr,zqo),e(cr,tt),g(uw,tt,null),e(tt,Wqo),e(tt,dde),e(dde,Qqo),e(tt,Hqo),e(tt,Gd),e(Gd,Uqo),e(Gd,cde),e(cde,Jqo),e(Gd,Yqo),e(Gd,fde),e(fde,Kqo),e(Gd,Zqo),e(tt,eGo),e(tt,mde),e(mde,oGo),e(tt,rGo),g(bw,tt,null),e(cr,tGo),e(cr,Ue),g(vw,Ue,null),e(Ue,aGo),e(Ue,gde),e(gde,nGo),e(Ue,sGo),e(Ue,tn),e(tn,lGo),e(tn,hde),e(hde,iGo),e(tn,dGo),e(tn,pde),e(pde,cGo),e(tn,fGo),e(tn,_de),e(_de,mGo),e(tn,gGo),e(Ue,hGo),e(Ue,an),e(an,Tv),e(Tv,ude),e(ude,pGo),e(Tv,_Go),e(Tv,nN),e(nN,uGo),e(Tv,bGo),e(an,vGo),e(an,Fv),e(Fv,bde),e(bde,TGo),e(Fv,FGo),e(Fv,sN),e(sN,CGo),e(Fv,MGo),e(an,EGo),e(an,Cv),e(Cv,vde),e(vde,yGo),e(Cv,wGo),e(Cv,lN),e(lN,AGo),e(Cv,LGo),e(an,BGo),e(an,Mv),e(Mv,Tde),e(Tde,xGo),e(Mv,kGo),e(Mv,iN),e(iN,RGo),e(Mv,SGo),e(Ue,PGo),e(Ue,Ev),e(Ev,$Go),e(Ev,Fde),e(Fde,IGo),e(Ev,DGo),e(Ev,Cde),e(Cde,jGo),e(Ue,NGo),e(Ue,Mde),e(Mde,qGo),e(Ue,GGo),g(Tw,Ue,null),b(c,TBe,u),b(c,Od,u),e(Od,yv),e(yv,Ede),g(Fw,Ede,null),e(Od,OGo),e(Od,yde),e(yde,XGo),b(c,FBe,u),b(c,fr,u),g(Cw,fr,null),e(fr,VGo),e(fr,Xd),e(Xd,zGo),e(Xd,wde),e(wde,WGo),e(Xd,QGo),e(Xd,Ade),e(Ade,HGo),e(Xd,UGo),e(fr,JGo),e(fr,Mw),e(Mw,YGo),e(Mw,Lde),e(Lde,KGo),e(Mw,ZGo),e(fr,eOo),e(fr,at),g(Ew,at,null),e(at,oOo),e(at,Bde),e(Bde,rOo),e(at,tOo),e(at,Vd),e(Vd,aOo),e(Vd,xde),e(xde,nOo),e(Vd,sOo),e(Vd,kde),e(kde,lOo),e(Vd,iOo),e(at,dOo),e(at,Rde),e(Rde,cOo),e(at,fOo),g(yw,at,null),e(fr,mOo),e(fr,Je),g(ww,Je,null),e(Je,gOo),e(Je,Sde),e(Sde,hOo),e(Je,pOo),e(Je,nn),e(nn,_Oo),e(nn,Pde),e(Pde,uOo),e(nn,bOo),e(nn,$de),e($de,vOo),e(nn,TOo),e(nn,Ide),e(Ide,FOo),e(nn,COo),e(Je,MOo),e(Je,zd),e(zd,wv),e(wv,Dde),e(Dde,EOo),e(wv,yOo),e(wv,dN),e(dN,wOo),e(wv,AOo),e(zd,LOo),e(zd,Av),e(Av,jde),e(jde,BOo),e(Av,xOo),e(Av,cN),e(cN,kOo),e(Av,ROo),e(zd,SOo),e(zd,Lv),e(Lv,Nde),e(Nde,POo),e(Lv,$Oo),e(Lv,fN),e(fN,IOo),e(Lv,DOo),e(Je,jOo),e(Je,Bv),e(Bv,NOo),e(Bv,qde),e(qde,qOo),e(Bv,GOo),e(Bv,Gde),e(Gde,OOo),e(Je,XOo),e(Je,Ode),e(Ode,VOo),e(Je,zOo),g(Aw,Je,null),b(c,CBe,u),b(c,Wd,u),e(Wd,xv),e(xv,Xde),g(Lw,Xde,null),e(Wd,WOo),e(Wd,Vde),e(Vde,QOo),b(c,MBe,u),b(c,mr,u),g(Bw,mr,null),e(mr,HOo),e(mr,Qd),e(Qd,UOo),e(Qd,zde),e(zde,JOo),e(Qd,YOo),e(Qd,Wde),e(Wde,KOo),e(Qd,ZOo),e(mr,eXo),e(mr,xw),e(xw,oXo),e(xw,Qde),e(Qde,rXo),e(xw,tXo),e(mr,aXo),e(mr,nt),g(kw,nt,null),e(nt,nXo),e(nt,Hde),e(Hde,sXo),e(nt,lXo),e(nt,Hd),e(Hd,iXo),e(Hd,Ude),e(Ude,dXo),e(Hd,cXo),e(Hd,Jde),e(Jde,fXo),e(Hd,mXo),e(nt,gXo),e(nt,Yde),e(Yde,hXo),e(nt,pXo),g(Rw,nt,null),e(mr,_Xo),e(mr,Ye),g(Sw,Ye,null),e(Ye,uXo),e(Ye,Kde),e(Kde,bXo),e(Ye,vXo),e(Ye,sn),e(sn,TXo),e(sn,Zde),e(Zde,FXo),e(sn,CXo),e(sn,ece),e(ece,MXo),e(sn,EXo),e(sn,oce),e(oce,yXo),e(sn,wXo),e(Ye,AXo),e(Ye,rce),e(rce,kv),e(kv,tce),e(tce,LXo),e(kv,BXo),e(kv,mN),e(mN,xXo),e(kv,kXo),e(Ye,RXo),e(Ye,Rv),e(Rv,SXo),e(Rv,ace),e(ace,PXo),e(Rv,$Xo),e(Rv,nce),e(nce,IXo),e(Ye,DXo),e(Ye,sce),e(sce,jXo),e(Ye,NXo),g(Pw,Ye,null),b(c,EBe,u),b(c,Ud,u),e(Ud,Sv),e(Sv,lce),g($w,lce,null),e(Ud,qXo),e(Ud,ice),e(ice,GXo),b(c,yBe,u),b(c,gr,u),g(Iw,gr,null),e(gr,OXo),e(gr,Jd),e(Jd,XXo),e(Jd,dce),e(dce,VXo),e(Jd,zXo),e(Jd,cce),e(cce,WXo),e(Jd,QXo),e(gr,HXo),e(gr,Dw),e(Dw,UXo),e(Dw,fce),e(fce,JXo),e(Dw,YXo),e(gr,KXo),e(gr,st),g(jw,st,null),e(st,ZXo),e(st,mce),e(mce,eVo),e(st,oVo),e(st,Yd),e(Yd,rVo),e(Yd,gce),e(gce,tVo),e(Yd,aVo),e(Yd,hce),e(hce,nVo),e(Yd,sVo),e(st,lVo),e(st,pce),e(pce,iVo),e(st,dVo),g(Nw,st,null),e(gr,cVo),e(gr,Ke),g(qw,Ke,null),e(Ke,fVo),e(Ke,_ce),e(_ce,mVo),e(Ke,gVo),e(Ke,ln),e(ln,hVo),e(ln,uce),e(uce,pVo),e(ln,_Vo),e(ln,bce),e(bce,uVo),e(ln,bVo),e(ln,vce),e(vce,vVo),e(ln,TVo),e(Ke,FVo),e(Ke,Tce),e(Tce,Pv),e(Pv,Fce),e(Fce,CVo),e(Pv,MVo),e(Pv,gN),e(gN,EVo),e(Pv,yVo),e(Ke,wVo),e(Ke,$v),e($v,AVo),e($v,Cce),e(Cce,LVo),e($v,BVo),e($v,Mce),e(Mce,xVo),e(Ke,kVo),e(Ke,Ece),e(Ece,RVo),e(Ke,SVo),g(Gw,Ke,null),b(c,wBe,u),b(c,Kd,u),e(Kd,Iv),e(Iv,yce),g(Ow,yce,null),e(Kd,PVo),e(Kd,wce),e(wce,$Vo),b(c,ABe,u),b(c,hr,u),g(Xw,hr,null),e(hr,IVo),e(hr,Zd),e(Zd,DVo),e(Zd,Ace),e(Ace,jVo),e(Zd,NVo),e(Zd,Lce),e(Lce,qVo),e(Zd,GVo),e(hr,OVo),e(hr,Vw),e(Vw,XVo),e(Vw,Bce),e(Bce,VVo),e(Vw,zVo),e(hr,WVo),e(hr,lt),g(zw,lt,null),e(lt,QVo),e(lt,xce),e(xce,HVo),e(lt,UVo),e(lt,ec),e(ec,JVo),e(ec,kce),e(kce,YVo),e(ec,KVo),e(ec,Rce),e(Rce,ZVo),e(ec,ezo),e(lt,ozo),e(lt,Sce),e(Sce,rzo),e(lt,tzo),g(Ww,lt,null),e(hr,azo),e(hr,Ze),g(Qw,Ze,null),e(Ze,nzo),e(Ze,Pce),e(Pce,szo),e(Ze,lzo),e(Ze,dn),e(dn,izo),e(dn,$ce),e($ce,dzo),e(dn,czo),e(dn,Ice),e(Ice,fzo),e(dn,mzo),e(dn,Dce),e(Dce,gzo),e(dn,hzo),e(Ze,pzo),e(Ze,Hw),e(Hw,Dv),e(Dv,jce),e(jce,_zo),e(Dv,uzo),e(Dv,hN),e(hN,bzo),e(Dv,vzo),e(Hw,Tzo),e(Hw,jv),e(jv,Nce),e(Nce,Fzo),e(jv,Czo),e(jv,pN),e(pN,Mzo),e(jv,Ezo),e(Ze,yzo),e(Ze,Nv),e(Nv,wzo),e(Nv,qce),e(qce,Azo),e(Nv,Lzo),e(Nv,Gce),e(Gce,Bzo),e(Ze,xzo),e(Ze,Oce),e(Oce,kzo),e(Ze,Rzo),g(Uw,Ze,null),b(c,LBe,u),b(c,oc,u),e(oc,qv),e(qv,Xce),g(Jw,Xce,null),e(oc,Szo),e(oc,Vce),e(Vce,Pzo),b(c,BBe,u),b(c,pr,u),g(Yw,pr,null),e(pr,$zo),e(pr,rc),e(rc,Izo),e(rc,zce),e(zce,Dzo),e(rc,jzo),e(rc,Wce),e(Wce,Nzo),e(rc,qzo),e(pr,Gzo),e(pr,Kw),e(Kw,Ozo),e(Kw,Qce),e(Qce,Xzo),e(Kw,Vzo),e(pr,zzo),e(pr,it),g(Zw,it,null),e(it,Wzo),e(it,Hce),e(Hce,Qzo),e(it,Hzo),e(it,tc),e(tc,Uzo),e(tc,Uce),e(Uce,Jzo),e(tc,Yzo),e(tc,Jce),e(Jce,Kzo),e(tc,Zzo),e(it,eWo),e(it,Yce),e(Yce,oWo),e(it,rWo),g(e6,it,null),e(pr,tWo),e(pr,go),g(o6,go,null),e(go,aWo),e(go,Kce),e(Kce,nWo),e(go,sWo),e(go,cn),e(cn,lWo),e(cn,Zce),e(Zce,iWo),e(cn,dWo),e(cn,efe),e(efe,cWo),e(cn,fWo),e(cn,ofe),e(ofe,mWo),e(cn,gWo),e(go,hWo),e(go,B),e(B,Gv),e(Gv,rfe),e(rfe,pWo),e(Gv,_Wo),e(Gv,_N),e(_N,uWo),e(Gv,bWo),e(B,vWo),e(B,Ov),e(Ov,tfe),e(tfe,TWo),e(Ov,FWo),e(Ov,uN),e(uN,CWo),e(Ov,MWo),e(B,EWo),e(B,Xv),e(Xv,afe),e(afe,yWo),e(Xv,wWo),e(Xv,bN),e(bN,AWo),e(Xv,LWo),e(B,BWo),e(B,Vv),e(Vv,nfe),e(nfe,xWo),e(Vv,kWo),e(Vv,vN),e(vN,RWo),e(Vv,SWo),e(B,PWo),e(B,zv),e(zv,sfe),e(sfe,$Wo),e(zv,IWo),e(zv,TN),e(TN,DWo),e(zv,jWo),e(B,NWo),e(B,Wv),e(Wv,lfe),e(lfe,qWo),e(Wv,GWo),e(Wv,FN),e(FN,OWo),e(Wv,XWo),e(B,VWo),e(B,Qv),e(Qv,ife),e(ife,zWo),e(Qv,WWo),e(Qv,CN),e(CN,QWo),e(Qv,HWo),e(B,UWo),e(B,Hv),e(Hv,dfe),e(dfe,JWo),e(Hv,YWo),e(Hv,MN),e(MN,KWo),e(Hv,ZWo),e(B,eQo),e(B,Uv),e(Uv,cfe),e(cfe,oQo),e(Uv,rQo),e(Uv,EN),e(EN,tQo),e(Uv,aQo),e(B,nQo),e(B,Jv),e(Jv,ffe),e(ffe,sQo),e(Jv,lQo),e(Jv,yN),e(yN,iQo),e(Jv,dQo),e(B,cQo),e(B,Yv),e(Yv,mfe),e(mfe,fQo),e(Yv,mQo),e(Yv,wN),e(wN,gQo),e(Yv,hQo),e(B,pQo),e(B,Kv),e(Kv,gfe),e(gfe,_Qo),e(Kv,uQo),e(Kv,AN),e(AN,bQo),e(Kv,vQo),e(B,TQo),e(B,Zv),e(Zv,hfe),e(hfe,FQo),e(Zv,CQo),e(Zv,LN),e(LN,MQo),e(Zv,EQo),e(B,yQo),e(B,eT),e(eT,pfe),e(pfe,wQo),e(eT,AQo),e(eT,BN),e(BN,LQo),e(eT,BQo),e(B,xQo),e(B,oT),e(oT,_fe),e(_fe,kQo),e(oT,RQo),e(oT,xN),e(xN,SQo),e(oT,PQo),e(B,$Qo),e(B,rT),e(rT,ufe),e(ufe,IQo),e(rT,DQo),e(rT,kN),e(kN,jQo),e(rT,NQo),e(B,qQo),e(B,$s),e($s,bfe),e(bfe,GQo),e($s,OQo),e($s,RN),e(RN,XQo),e($s,VQo),e($s,SN),e(SN,zQo),e($s,WQo),e(B,QQo),e(B,tT),e(tT,vfe),e(vfe,HQo),e(tT,UQo),e(tT,PN),e(PN,JQo),e(tT,YQo),e(B,KQo),e(B,aT),e(aT,Tfe),e(Tfe,ZQo),e(aT,eHo),e(aT,$N),e($N,oHo),e(aT,rHo),e(B,tHo),e(B,nT),e(nT,Ffe),e(Ffe,aHo),e(nT,nHo),e(nT,IN),e(IN,sHo),e(nT,lHo),e(B,iHo),e(B,sT),e(sT,Cfe),e(Cfe,dHo),e(sT,cHo),e(sT,DN),e(DN,fHo),e(sT,mHo),e(B,gHo),e(B,lT),e(lT,Mfe),e(Mfe,hHo),e(lT,pHo),e(lT,jN),e(jN,_Ho),e(lT,uHo),e(B,bHo),e(B,iT),e(iT,Efe),e(Efe,vHo),e(iT,THo),e(iT,NN),e(NN,FHo),e(iT,CHo),e(B,MHo),e(B,dT),e(dT,yfe),e(yfe,EHo),e(dT,yHo),e(dT,qN),e(qN,wHo),e(dT,AHo),e(B,LHo),e(B,cT),e(cT,wfe),e(wfe,BHo),e(cT,xHo),e(cT,GN),e(GN,kHo),e(cT,RHo),e(B,SHo),e(B,fT),e(fT,Afe),e(Afe,PHo),e(fT,$Ho),e(fT,ON),e(ON,IHo),e(fT,DHo),e(B,jHo),e(B,mT),e(mT,Lfe),e(Lfe,NHo),e(mT,qHo),e(mT,XN),e(XN,GHo),e(mT,OHo),e(B,XHo),e(B,gT),e(gT,Bfe),e(Bfe,VHo),e(gT,zHo),e(gT,VN),e(VN,WHo),e(gT,QHo),e(B,HHo),e(B,hT),e(hT,xfe),e(xfe,UHo),e(hT,JHo),e(hT,zN),e(zN,YHo),e(hT,KHo),e(B,ZHo),e(B,pT),e(pT,kfe),e(kfe,eUo),e(pT,oUo),e(pT,WN),e(WN,rUo),e(pT,tUo),e(B,aUo),e(B,_T),e(_T,Rfe),e(Rfe,nUo),e(_T,sUo),e(_T,QN),e(QN,lUo),e(_T,iUo),e(B,dUo),e(B,uT),e(uT,Sfe),e(Sfe,cUo),e(uT,fUo),e(uT,HN),e(HN,mUo),e(uT,gUo),e(B,hUo),e(B,bT),e(bT,Pfe),e(Pfe,pUo),e(bT,_Uo),e(bT,UN),e(UN,uUo),e(bT,bUo),e(B,vUo),e(B,vT),e(vT,$fe),e($fe,TUo),e(vT,FUo),e(vT,JN),e(JN,CUo),e(vT,MUo),e(B,EUo),e(B,TT),e(TT,Ife),e(Ife,yUo),e(TT,wUo),e(TT,YN),e(YN,AUo),e(TT,LUo),e(B,BUo),e(B,FT),e(FT,Dfe),e(Dfe,xUo),e(FT,kUo),e(FT,KN),e(KN,RUo),e(FT,SUo),e(B,PUo),e(B,CT),e(CT,jfe),e(jfe,$Uo),e(CT,IUo),e(CT,ZN),e(ZN,DUo),e(CT,jUo),e(B,NUo),e(B,MT),e(MT,Nfe),e(Nfe,qUo),e(MT,GUo),e(MT,eq),e(eq,OUo),e(MT,XUo),e(B,VUo),e(B,ET),e(ET,qfe),e(qfe,zUo),e(ET,WUo),e(ET,oq),e(oq,QUo),e(ET,HUo),e(B,UUo),e(B,yT),e(yT,Gfe),e(Gfe,JUo),e(yT,YUo),e(yT,rq),e(rq,KUo),e(yT,ZUo),e(B,eJo),e(B,wT),e(wT,Ofe),e(Ofe,oJo),e(wT,rJo),e(wT,tq),e(tq,tJo),e(wT,aJo),e(B,nJo),e(B,AT),e(AT,Xfe),e(Xfe,sJo),e(AT,lJo),e(AT,aq),e(aq,iJo),e(AT,dJo),e(go,cJo),e(go,Vfe),e(Vfe,fJo),e(go,mJo),g(r6,go,null),b(c,xBe,u),b(c,ac,u),e(ac,LT),e(LT,zfe),g(t6,zfe,null),e(ac,gJo),e(ac,Wfe),e(Wfe,hJo),b(c,kBe,u),b(c,_r,u),g(a6,_r,null),e(_r,pJo),e(_r,nc),e(nc,_Jo),e(nc,Qfe),e(Qfe,uJo),e(nc,bJo),e(nc,Hfe),e(Hfe,vJo),e(nc,TJo),e(_r,FJo),e(_r,n6),e(n6,CJo),e(n6,Ufe),e(Ufe,MJo),e(n6,EJo),e(_r,yJo),e(_r,dt),g(s6,dt,null),e(dt,wJo),e(dt,Jfe),e(Jfe,AJo),e(dt,LJo),e(dt,sc),e(sc,BJo),e(sc,Yfe),e(Yfe,xJo),e(sc,kJo),e(sc,Kfe),e(Kfe,RJo),e(sc,SJo),e(dt,PJo),e(dt,Zfe),e(Zfe,$Jo),e(dt,IJo),g(l6,dt,null),e(_r,DJo),e(_r,ho),g(i6,ho,null),e(ho,jJo),e(ho,eme),e(eme,NJo),e(ho,qJo),e(ho,fn),e(fn,GJo),e(fn,ome),e(ome,OJo),e(fn,XJo),e(fn,rme),e(rme,VJo),e(fn,zJo),e(fn,tme),e(tme,WJo),e(fn,QJo),e(ho,HJo),e(ho,H),e(H,BT),e(BT,ame),e(ame,UJo),e(BT,JJo),e(BT,nq),e(nq,YJo),e(BT,KJo),e(H,ZJo),e(H,xT),e(xT,nme),e(nme,eYo),e(xT,oYo),e(xT,sq),e(sq,rYo),e(xT,tYo),e(H,aYo),e(H,kT),e(kT,sme),e(sme,nYo),e(kT,sYo),e(kT,lq),e(lq,lYo),e(kT,iYo),e(H,dYo),e(H,RT),e(RT,lme),e(lme,cYo),e(RT,fYo),e(RT,iq),e(iq,mYo),e(RT,gYo),e(H,hYo),e(H,ST),e(ST,ime),e(ime,pYo),e(ST,_Yo),e(ST,dq),e(dq,uYo),e(ST,bYo),e(H,vYo),e(H,PT),e(PT,dme),e(dme,TYo),e(PT,FYo),e(PT,cq),e(cq,CYo),e(PT,MYo),e(H,EYo),e(H,$T),e($T,cme),e(cme,yYo),e($T,wYo),e($T,fq),e(fq,AYo),e($T,LYo),e(H,BYo),e(H,IT),e(IT,fme),e(fme,xYo),e(IT,kYo),e(IT,mq),e(mq,RYo),e(IT,SYo),e(H,PYo),e(H,DT),e(DT,mme),e(mme,$Yo),e(DT,IYo),e(DT,gq),e(gq,DYo),e(DT,jYo),e(H,NYo),e(H,jT),e(jT,gme),e(gme,qYo),e(jT,GYo),e(jT,hq),e(hq,OYo),e(jT,XYo),e(H,VYo),e(H,NT),e(NT,hme),e(hme,zYo),e(NT,WYo),e(NT,pq),e(pq,QYo),e(NT,HYo),e(H,UYo),e(H,qT),e(qT,pme),e(pme,JYo),e(qT,YYo),e(qT,_q),e(_q,KYo),e(qT,ZYo),e(H,eKo),e(H,GT),e(GT,_me),e(_me,oKo),e(GT,rKo),e(GT,uq),e(uq,tKo),e(GT,aKo),e(H,nKo),e(H,OT),e(OT,ume),e(ume,sKo),e(OT,lKo),e(OT,bq),e(bq,iKo),e(OT,dKo),e(H,cKo),e(H,XT),e(XT,bme),e(bme,fKo),e(XT,mKo),e(XT,vq),e(vq,gKo),e(XT,hKo),e(H,pKo),e(H,VT),e(VT,vme),e(vme,_Ko),e(VT,uKo),e(VT,Tq),e(Tq,bKo),e(VT,vKo),e(H,TKo),e(H,zT),e(zT,Tme),e(Tme,FKo),e(zT,CKo),e(zT,Fq),e(Fq,MKo),e(zT,EKo),e(H,yKo),e(H,WT),e(WT,Fme),e(Fme,wKo),e(WT,AKo),e(WT,Cq),e(Cq,LKo),e(WT,BKo),e(H,xKo),e(H,QT),e(QT,Cme),e(Cme,kKo),e(QT,RKo),e(QT,Mq),e(Mq,SKo),e(QT,PKo),e(H,$Ko),e(H,HT),e(HT,Mme),e(Mme,IKo),e(HT,DKo),e(HT,Eq),e(Eq,jKo),e(HT,NKo),e(H,qKo),e(H,UT),e(UT,Eme),e(Eme,GKo),e(UT,OKo),e(UT,yq),e(yq,XKo),e(UT,VKo),e(H,zKo),e(H,JT),e(JT,yme),e(yme,WKo),e(JT,QKo),e(JT,wq),e(wq,HKo),e(JT,UKo),e(ho,JKo),e(ho,wme),e(wme,YKo),e(ho,KKo),g(d6,ho,null),b(c,RBe,u),b(c,lc,u),e(lc,YT),e(YT,Ame),g(c6,Ame,null),e(lc,ZKo),e(lc,Lme),e(Lme,eZo),b(c,SBe,u),b(c,ur,u),g(f6,ur,null),e(ur,oZo),e(ur,ic),e(ic,rZo),e(ic,Bme),e(Bme,tZo),e(ic,aZo),e(ic,xme),e(xme,nZo),e(ic,sZo),e(ur,lZo),e(ur,m6),e(m6,iZo),e(m6,kme),e(kme,dZo),e(m6,cZo),e(ur,fZo),e(ur,ct),g(g6,ct,null),e(ct,mZo),e(ct,Rme),e(Rme,gZo),e(ct,hZo),e(ct,dc),e(dc,pZo),e(dc,Sme),e(Sme,_Zo),e(dc,uZo),e(dc,Pme),e(Pme,bZo),e(dc,vZo),e(ct,TZo),e(ct,$me),e($me,FZo),e(ct,CZo),g(h6,ct,null),e(ur,MZo),e(ur,po),g(p6,po,null),e(po,EZo),e(po,Ime),e(Ime,yZo),e(po,wZo),e(po,mn),e(mn,AZo),e(mn,Dme),e(Dme,LZo),e(mn,BZo),e(mn,jme),e(jme,xZo),e(mn,kZo),e(mn,Nme),e(Nme,RZo),e(mn,SZo),e(po,PZo),e(po,he),e(he,KT),e(KT,qme),e(qme,$Zo),e(KT,IZo),e(KT,Aq),e(Aq,DZo),e(KT,jZo),e(he,NZo),e(he,ZT),e(ZT,Gme),e(Gme,qZo),e(ZT,GZo),e(ZT,Lq),e(Lq,OZo),e(ZT,XZo),e(he,VZo),e(he,eF),e(eF,Ome),e(Ome,zZo),e(eF,WZo),e(eF,Bq),e(Bq,QZo),e(eF,HZo),e(he,UZo),e(he,oF),e(oF,Xme),e(Xme,JZo),e(oF,YZo),e(oF,xq),e(xq,KZo),e(oF,ZZo),e(he,eer),e(he,rF),e(rF,Vme),e(Vme,oer),e(rF,rer),e(rF,kq),e(kq,ter),e(rF,aer),e(he,ner),e(he,tF),e(tF,zme),e(zme,ser),e(tF,ler),e(tF,Rq),e(Rq,ier),e(tF,der),e(he,cer),e(he,aF),e(aF,Wme),e(Wme,fer),e(aF,mer),e(aF,Sq),e(Sq,ger),e(aF,her),e(he,per),e(he,nF),e(nF,Qme),e(Qme,_er),e(nF,uer),e(nF,Pq),e(Pq,ber),e(nF,ver),e(he,Ter),e(he,sF),e(sF,Hme),e(Hme,Fer),e(sF,Cer),e(sF,$q),e($q,Mer),e(sF,Eer),e(he,yer),e(he,lF),e(lF,Ume),e(Ume,wer),e(lF,Aer),e(lF,Iq),e(Iq,Ler),e(lF,Ber),e(po,xer),e(po,Jme),e(Jme,ker),e(po,Rer),g(_6,po,null),b(c,PBe,u),b(c,cc,u),e(cc,iF),e(iF,Yme),g(u6,Yme,null),e(cc,Ser),e(cc,Kme),e(Kme,Per),b(c,$Be,u),b(c,br,u),g(b6,br,null),e(br,$er),e(br,fc),e(fc,Ier),e(fc,Zme),e(Zme,Der),e(fc,jer),e(fc,ege),e(ege,Ner),e(fc,qer),e(br,Ger),e(br,v6),e(v6,Oer),e(v6,oge),e(oge,Xer),e(v6,Ver),e(br,zer),e(br,ft),g(T6,ft,null),e(ft,Wer),e(ft,rge),e(rge,Qer),e(ft,Her),e(ft,mc),e(mc,Uer),e(mc,tge),e(tge,Jer),e(mc,Yer),e(mc,age),e(age,Ker),e(mc,Zer),e(ft,eor),e(ft,nge),e(nge,oor),e(ft,ror),g(F6,ft,null),e(br,tor),e(br,_o),g(C6,_o,null),e(_o,aor),e(_o,sge),e(sge,nor),e(_o,sor),e(_o,gn),e(gn,lor),e(gn,lge),e(lge,ior),e(gn,dor),e(gn,ige),e(ige,cor),e(gn,mor),e(gn,dge),e(dge,gor),e(gn,hor),e(_o,por),e(_o,M6),e(M6,dF),e(dF,cge),e(cge,_or),e(dF,uor),e(dF,Dq),e(Dq,bor),e(dF,vor),e(M6,Tor),e(M6,cF),e(cF,fge),e(fge,For),e(cF,Cor),e(cF,jq),e(jq,Mor),e(cF,Eor),e(_o,yor),e(_o,mge),e(mge,wor),e(_o,Aor),g(E6,_o,null),b(c,IBe,u),b(c,gc,u),e(gc,fF),e(fF,gge),g(y6,gge,null),e(gc,Lor),e(gc,hge),e(hge,Bor),b(c,DBe,u),b(c,vr,u),g(w6,vr,null),e(vr,xor),e(vr,hc),e(hc,kor),e(hc,pge),e(pge,Ror),e(hc,Sor),e(hc,_ge),e(_ge,Por),e(hc,$or),e(vr,Ior),e(vr,A6),e(A6,Dor),e(A6,uge),e(uge,jor),e(A6,Nor),e(vr,qor),e(vr,mt),g(L6,mt,null),e(mt,Gor),e(mt,bge),e(bge,Oor),e(mt,Xor),e(mt,pc),e(pc,Vor),e(pc,vge),e(vge,zor),e(pc,Wor),e(pc,Tge),e(Tge,Qor),e(pc,Hor),e(mt,Uor),e(mt,Fge),e(Fge,Jor),e(mt,Yor),g(B6,mt,null),e(vr,Kor),e(vr,uo),g(x6,uo,null),e(uo,Zor),e(uo,Cge),e(Cge,err),e(uo,orr),e(uo,hn),e(hn,rrr),e(hn,Mge),e(Mge,trr),e(hn,arr),e(hn,Ege),e(Ege,nrr),e(hn,srr),e(hn,yge),e(yge,lrr),e(hn,irr),e(uo,drr),e(uo,Y),e(Y,mF),e(mF,wge),e(wge,crr),e(mF,frr),e(mF,Nq),e(Nq,mrr),e(mF,grr),e(Y,hrr),e(Y,gF),e(gF,Age),e(Age,prr),e(gF,_rr),e(gF,qq),e(qq,urr),e(gF,brr),e(Y,vrr),e(Y,hF),e(hF,Lge),e(Lge,Trr),e(hF,Frr),e(hF,Gq),e(Gq,Crr),e(hF,Mrr),e(Y,Err),e(Y,pF),e(pF,Bge),e(Bge,yrr),e(pF,wrr),e(pF,Oq),e(Oq,Arr),e(pF,Lrr),e(Y,Brr),e(Y,_F),e(_F,xge),e(xge,xrr),e(_F,krr),e(_F,Xq),e(Xq,Rrr),e(_F,Srr),e(Y,Prr),e(Y,uF),e(uF,kge),e(kge,$rr),e(uF,Irr),e(uF,Vq),e(Vq,Drr),e(uF,jrr),e(Y,Nrr),e(Y,bF),e(bF,Rge),e(Rge,qrr),e(bF,Grr),e(bF,zq),e(zq,Orr),e(bF,Xrr),e(Y,Vrr),e(Y,vF),e(vF,Sge),e(Sge,zrr),e(vF,Wrr),e(vF,Wq),e(Wq,Qrr),e(vF,Hrr),e(Y,Urr),e(Y,TF),e(TF,Pge),e(Pge,Jrr),e(TF,Yrr),e(TF,Qq),e(Qq,Krr),e(TF,Zrr),e(Y,etr),e(Y,FF),e(FF,$ge),e($ge,otr),e(FF,rtr),e(FF,Hq),e(Hq,ttr),e(FF,atr),e(Y,ntr),e(Y,CF),e(CF,Ige),e(Ige,str),e(CF,ltr),e(CF,Uq),e(Uq,itr),e(CF,dtr),e(Y,ctr),e(Y,MF),e(MF,Dge),e(Dge,ftr),e(MF,mtr),e(MF,Jq),e(Jq,gtr),e(MF,htr),e(Y,ptr),e(Y,EF),e(EF,jge),e(jge,_tr),e(EF,utr),e(EF,Yq),e(Yq,btr),e(EF,vtr),e(Y,Ttr),e(Y,yF),e(yF,Nge),e(Nge,Ftr),e(yF,Ctr),e(yF,Kq),e(Kq,Mtr),e(yF,Etr),e(Y,ytr),e(Y,wF),e(wF,qge),e(qge,wtr),e(wF,Atr),e(wF,Zq),e(Zq,Ltr),e(wF,Btr),e(Y,xtr),e(Y,AF),e(AF,Gge),e(Gge,ktr),e(AF,Rtr),e(AF,eG),e(eG,Str),e(AF,Ptr),e(Y,$tr),e(Y,LF),e(LF,Oge),e(Oge,Itr),e(LF,Dtr),e(LF,oG),e(oG,jtr),e(LF,Ntr),e(Y,qtr),e(Y,BF),e(BF,Xge),e(Xge,Gtr),e(BF,Otr),e(BF,rG),e(rG,Xtr),e(BF,Vtr),e(Y,ztr),e(Y,xF),e(xF,Vge),e(Vge,Wtr),e(xF,Qtr),e(xF,tG),e(tG,Htr),e(xF,Utr),e(Y,Jtr),e(Y,kF),e(kF,zge),e(zge,Ytr),e(kF,Ktr),e(kF,aG),e(aG,Ztr),e(kF,ear),e(uo,oar),e(uo,Wge),e(Wge,rar),e(uo,tar),g(k6,uo,null),b(c,jBe,u),b(c,_c,u),e(_c,RF),e(RF,Qge),g(R6,Qge,null),e(_c,aar),e(_c,Hge),e(Hge,nar),b(c,NBe,u),b(c,Tr,u),g(S6,Tr,null),e(Tr,sar),e(Tr,uc),e(uc,lar),e(uc,Uge),e(Uge,iar),e(uc,dar),e(uc,Jge),e(Jge,car),e(uc,far),e(Tr,mar),e(Tr,P6),e(P6,gar),e(P6,Yge),e(Yge,har),e(P6,par),e(Tr,_ar),e(Tr,gt),g($6,gt,null),e(gt,uar),e(gt,Kge),e(Kge,bar),e(gt,Tar),e(gt,bc),e(bc,Far),e(bc,Zge),e(Zge,Car),e(bc,Mar),e(bc,ehe),e(ehe,Ear),e(bc,yar),e(gt,war),e(gt,ohe),e(ohe,Aar),e(gt,Lar),g(I6,gt,null),e(Tr,Bar),e(Tr,bo),g(D6,bo,null),e(bo,xar),e(bo,rhe),e(rhe,kar),e(bo,Rar),e(bo,pn),e(pn,Sar),e(pn,the),e(the,Par),e(pn,$ar),e(pn,ahe),e(ahe,Iar),e(pn,Dar),e(pn,nhe),e(nhe,jar),e(pn,Nar),e(bo,qar),e(bo,pe),e(pe,SF),e(SF,she),e(she,Gar),e(SF,Oar),e(SF,nG),e(nG,Xar),e(SF,Var),e(pe,zar),e(pe,PF),e(PF,lhe),e(lhe,War),e(PF,Qar),e(PF,sG),e(sG,Har),e(PF,Uar),e(pe,Jar),e(pe,$F),e($F,ihe),e(ihe,Yar),e($F,Kar),e($F,lG),e(lG,Zar),e($F,enr),e(pe,onr),e(pe,IF),e(IF,dhe),e(dhe,rnr),e(IF,tnr),e(IF,iG),e(iG,anr),e(IF,nnr),e(pe,snr),e(pe,DF),e(DF,che),e(che,lnr),e(DF,inr),e(DF,dG),e(dG,dnr),e(DF,cnr),e(pe,fnr),e(pe,jF),e(jF,fhe),e(fhe,mnr),e(jF,gnr),e(jF,cG),e(cG,hnr),e(jF,pnr),e(pe,_nr),e(pe,NF),e(NF,mhe),e(mhe,unr),e(NF,bnr),e(NF,fG),e(fG,vnr),e(NF,Tnr),e(pe,Fnr),e(pe,qF),e(qF,ghe),e(ghe,Cnr),e(qF,Mnr),e(qF,mG),e(mG,Enr),e(qF,ynr),e(pe,wnr),e(pe,GF),e(GF,hhe),e(hhe,Anr),e(GF,Lnr),e(GF,gG),e(gG,Bnr),e(GF,xnr),e(pe,knr),e(pe,OF),e(OF,phe),e(phe,Rnr),e(OF,Snr),e(OF,hG),e(hG,Pnr),e(OF,$nr),e(bo,Inr),e(bo,_he),e(_he,Dnr),e(bo,jnr),g(j6,bo,null),b(c,qBe,u),b(c,vc,u),e(vc,XF),e(XF,uhe),g(N6,uhe,null),e(vc,Nnr),e(vc,bhe),e(bhe,qnr),b(c,GBe,u),b(c,Fr,u),g(q6,Fr,null),e(Fr,Gnr),e(Fr,Tc),e(Tc,Onr),e(Tc,vhe),e(vhe,Xnr),e(Tc,Vnr),e(Tc,The),e(The,znr),e(Tc,Wnr),e(Fr,Qnr),e(Fr,G6),e(G6,Hnr),e(G6,Fhe),e(Fhe,Unr),e(G6,Jnr),e(Fr,Ynr),e(Fr,ht),g(O6,ht,null),e(ht,Knr),e(ht,Che),e(Che,Znr),e(ht,esr),e(ht,Fc),e(Fc,osr),e(Fc,Mhe),e(Mhe,rsr),e(Fc,tsr),e(Fc,Ehe),e(Ehe,asr),e(Fc,nsr),e(ht,ssr),e(ht,yhe),e(yhe,lsr),e(ht,isr),g(X6,ht,null),e(Fr,dsr),e(Fr,vo),g(V6,vo,null),e(vo,csr),e(vo,whe),e(whe,fsr),e(vo,msr),e(vo,_n),e(_n,gsr),e(_n,Ahe),e(Ahe,hsr),e(_n,psr),e(_n,Lhe),e(Lhe,_sr),e(_n,usr),e(_n,Bhe),e(Bhe,bsr),e(_n,vsr),e(vo,Tsr),e(vo,X),e(X,VF),e(VF,xhe),e(xhe,Fsr),e(VF,Csr),e(VF,pG),e(pG,Msr),e(VF,Esr),e(X,ysr),e(X,zF),e(zF,khe),e(khe,wsr),e(zF,Asr),e(zF,_G),e(_G,Lsr),e(zF,Bsr),e(X,xsr),e(X,WF),e(WF,Rhe),e(Rhe,ksr),e(WF,Rsr),e(WF,uG),e(uG,Ssr),e(WF,Psr),e(X,$sr),e(X,QF),e(QF,She),e(She,Isr),e(QF,Dsr),e(QF,bG),e(bG,jsr),e(QF,Nsr),e(X,qsr),e(X,HF),e(HF,Phe),e(Phe,Gsr),e(HF,Osr),e(HF,vG),e(vG,Xsr),e(HF,Vsr),e(X,zsr),e(X,UF),e(UF,$he),e($he,Wsr),e(UF,Qsr),e(UF,TG),e(TG,Hsr),e(UF,Usr),e(X,Jsr),e(X,JF),e(JF,Ihe),e(Ihe,Ysr),e(JF,Ksr),e(JF,FG),e(FG,Zsr),e(JF,elr),e(X,olr),e(X,YF),e(YF,Dhe),e(Dhe,rlr),e(YF,tlr),e(YF,CG),e(CG,alr),e(YF,nlr),e(X,slr),e(X,KF),e(KF,jhe),e(jhe,llr),e(KF,ilr),e(KF,MG),e(MG,dlr),e(KF,clr),e(X,flr),e(X,ZF),e(ZF,Nhe),e(Nhe,mlr),e(ZF,glr),e(ZF,EG),e(EG,hlr),e(ZF,plr),e(X,_lr),e(X,e9),e(e9,qhe),e(qhe,ulr),e(e9,blr),e(e9,yG),e(yG,vlr),e(e9,Tlr),e(X,Flr),e(X,o9),e(o9,Ghe),e(Ghe,Clr),e(o9,Mlr),e(o9,wG),e(wG,Elr),e(o9,ylr),e(X,wlr),e(X,r9),e(r9,Ohe),e(Ohe,Alr),e(r9,Llr),e(r9,AG),e(AG,Blr),e(r9,xlr),e(X,klr),e(X,t9),e(t9,Xhe),e(Xhe,Rlr),e(t9,Slr),e(t9,LG),e(LG,Plr),e(t9,$lr),e(X,Ilr),e(X,a9),e(a9,Vhe),e(Vhe,Dlr),e(a9,jlr),e(a9,BG),e(BG,Nlr),e(a9,qlr),e(X,Glr),e(X,n9),e(n9,zhe),e(zhe,Olr),e(n9,Xlr),e(n9,xG),e(xG,Vlr),e(n9,zlr),e(X,Wlr),e(X,s9),e(s9,Whe),e(Whe,Qlr),e(s9,Hlr),e(s9,kG),e(kG,Ulr),e(s9,Jlr),e(X,Ylr),e(X,l9),e(l9,Qhe),e(Qhe,Klr),e(l9,Zlr),e(l9,RG),e(RG,eir),e(l9,oir),e(X,rir),e(X,i9),e(i9,Hhe),e(Hhe,tir),e(i9,air),e(i9,SG),e(SG,nir),e(i9,sir),e(X,lir),e(X,d9),e(d9,Uhe),e(Uhe,iir),e(d9,dir),e(d9,PG),e(PG,cir),e(d9,fir),e(X,mir),e(X,c9),e(c9,Jhe),e(Jhe,gir),e(c9,hir),e(c9,$G),e($G,pir),e(c9,_ir),e(X,uir),e(X,f9),e(f9,Yhe),e(Yhe,bir),e(f9,vir),e(f9,IG),e(IG,Tir),e(f9,Fir),e(X,Cir),e(X,m9),e(m9,Khe),e(Khe,Mir),e(m9,Eir),e(m9,DG),e(DG,yir),e(m9,wir),e(X,Air),e(X,g9),e(g9,Zhe),e(Zhe,Lir),e(g9,Bir),e(g9,jG),e(jG,xir),e(g9,kir),e(X,Rir),e(X,h9),e(h9,epe),e(epe,Sir),e(h9,Pir),e(h9,NG),e(NG,$ir),e(h9,Iir),e(vo,Dir),e(vo,ope),e(ope,jir),e(vo,Nir),g(z6,vo,null),b(c,OBe,u),b(c,Cc,u),e(Cc,p9),e(p9,rpe),g(W6,rpe,null),e(Cc,qir),e(Cc,tpe),e(tpe,Gir),b(c,XBe,u),b(c,Cr,u),g(Q6,Cr,null),e(Cr,Oir),e(Cr,Mc),e(Mc,Xir),e(Mc,ape),e(ape,Vir),e(Mc,zir),e(Mc,npe),e(npe,Wir),e(Mc,Qir),e(Cr,Hir),e(Cr,H6),e(H6,Uir),e(H6,spe),e(spe,Jir),e(H6,Yir),e(Cr,Kir),e(Cr,pt),g(U6,pt,null),e(pt,Zir),e(pt,lpe),e(lpe,edr),e(pt,odr),e(pt,Ec),e(Ec,rdr),e(Ec,ipe),e(ipe,tdr),e(Ec,adr),e(Ec,dpe),e(dpe,ndr),e(Ec,sdr),e(pt,ldr),e(pt,cpe),e(cpe,idr),e(pt,ddr),g(J6,pt,null),e(Cr,cdr),e(Cr,To),g(Y6,To,null),e(To,fdr),e(To,fpe),e(fpe,mdr),e(To,gdr),e(To,un),e(un,hdr),e(un,mpe),e(mpe,pdr),e(un,_dr),e(un,gpe),e(gpe,udr),e(un,bdr),e(un,hpe),e(hpe,vdr),e(un,Tdr),e(To,Fdr),e(To,te),e(te,_9),e(_9,ppe),e(ppe,Cdr),e(_9,Mdr),e(_9,qG),e(qG,Edr),e(_9,ydr),e(te,wdr),e(te,u9),e(u9,_pe),e(_pe,Adr),e(u9,Ldr),e(u9,GG),e(GG,Bdr),e(u9,xdr),e(te,kdr),e(te,b9),e(b9,upe),e(upe,Rdr),e(b9,Sdr),e(b9,OG),e(OG,Pdr),e(b9,$dr),e(te,Idr),e(te,v9),e(v9,bpe),e(bpe,Ddr),e(v9,jdr),e(v9,XG),e(XG,Ndr),e(v9,qdr),e(te,Gdr),e(te,T9),e(T9,vpe),e(vpe,Odr),e(T9,Xdr),e(T9,VG),e(VG,Vdr),e(T9,zdr),e(te,Wdr),e(te,F9),e(F9,Tpe),e(Tpe,Qdr),e(F9,Hdr),e(F9,zG),e(zG,Udr),e(F9,Jdr),e(te,Ydr),e(te,C9),e(C9,Fpe),e(Fpe,Kdr),e(C9,Zdr),e(C9,WG),e(WG,ecr),e(C9,ocr),e(te,rcr),e(te,M9),e(M9,Cpe),e(Cpe,tcr),e(M9,acr),e(M9,QG),e(QG,ncr),e(M9,scr),e(te,lcr),e(te,E9),e(E9,Mpe),e(Mpe,icr),e(E9,dcr),e(E9,HG),e(HG,ccr),e(E9,fcr),e(te,mcr),e(te,y9),e(y9,Epe),e(Epe,gcr),e(y9,hcr),e(y9,UG),e(UG,pcr),e(y9,_cr),e(te,ucr),e(te,w9),e(w9,ype),e(ype,bcr),e(w9,vcr),e(w9,JG),e(JG,Tcr),e(w9,Fcr),e(te,Ccr),e(te,A9),e(A9,wpe),e(wpe,Mcr),e(A9,Ecr),e(A9,YG),e(YG,ycr),e(A9,wcr),e(te,Acr),e(te,L9),e(L9,Ape),e(Ape,Lcr),e(L9,Bcr),e(L9,KG),e(KG,xcr),e(L9,kcr),e(te,Rcr),e(te,B9),e(B9,Lpe),e(Lpe,Scr),e(B9,Pcr),e(B9,ZG),e(ZG,$cr),e(B9,Icr),e(te,Dcr),e(te,x9),e(x9,Bpe),e(Bpe,jcr),e(x9,Ncr),e(x9,eO),e(eO,qcr),e(x9,Gcr),e(te,Ocr),e(te,k9),e(k9,xpe),e(xpe,Xcr),e(k9,Vcr),e(k9,oO),e(oO,zcr),e(k9,Wcr),e(te,Qcr),e(te,R9),e(R9,kpe),e(kpe,Hcr),e(R9,Ucr),e(R9,rO),e(rO,Jcr),e(R9,Ycr),e(To,Kcr),e(To,Rpe),e(Rpe,Zcr),e(To,efr),g(K6,To,null),b(c,VBe,u),b(c,yc,u),e(yc,S9),e(S9,Spe),g(Z6,Spe,null),e(yc,ofr),e(yc,Ppe),e(Ppe,rfr),b(c,zBe,u),b(c,Mr,u),g(eA,Mr,null),e(Mr,tfr),e(Mr,wc),e(wc,afr),e(wc,$pe),e($pe,nfr),e(wc,sfr),e(wc,Ipe),e(Ipe,lfr),e(wc,ifr),e(Mr,dfr),e(Mr,oA),e(oA,cfr),e(oA,Dpe),e(Dpe,ffr),e(oA,mfr),e(Mr,gfr),e(Mr,_t),g(rA,_t,null),e(_t,hfr),e(_t,jpe),e(jpe,pfr),e(_t,_fr),e(_t,Ac),e(Ac,ufr),e(Ac,Npe),e(Npe,bfr),e(Ac,vfr),e(Ac,qpe),e(qpe,Tfr),e(Ac,Ffr),e(_t,Cfr),e(_t,Gpe),e(Gpe,Mfr),e(_t,Efr),g(tA,_t,null),e(Mr,yfr),e(Mr,Fo),g(aA,Fo,null),e(Fo,wfr),e(Fo,Ope),e(Ope,Afr),e(Fo,Lfr),e(Fo,bn),e(bn,Bfr),e(bn,Xpe),e(Xpe,xfr),e(bn,kfr),e(bn,Vpe),e(Vpe,Rfr),e(bn,Sfr),e(bn,zpe),e(zpe,Pfr),e(bn,$fr),e(Fo,Ifr),e(Fo,Wpe),e(Wpe,P9),e(P9,Qpe),e(Qpe,Dfr),e(P9,jfr),e(P9,tO),e(tO,Nfr),e(P9,qfr),e(Fo,Gfr),e(Fo,Hpe),e(Hpe,Ofr),e(Fo,Xfr),g(nA,Fo,null),b(c,WBe,u),b(c,Lc,u),e(Lc,$9),e($9,Upe),g(sA,Upe,null),e(Lc,Vfr),e(Lc,Jpe),e(Jpe,zfr),b(c,QBe,u),b(c,Er,u),g(lA,Er,null),e(Er,Wfr),e(Er,Bc),e(Bc,Qfr),e(Bc,Ype),e(Ype,Hfr),e(Bc,Ufr),e(Bc,Kpe),e(Kpe,Jfr),e(Bc,Yfr),e(Er,Kfr),e(Er,iA),e(iA,Zfr),e(iA,Zpe),e(Zpe,emr),e(iA,omr),e(Er,rmr),e(Er,ut),g(dA,ut,null),e(ut,tmr),e(ut,e_e),e(e_e,amr),e(ut,nmr),e(ut,xc),e(xc,smr),e(xc,o_e),e(o_e,lmr),e(xc,imr),e(xc,r_e),e(r_e,dmr),e(xc,cmr),e(ut,fmr),e(ut,t_e),e(t_e,mmr),e(ut,gmr),g(cA,ut,null),e(Er,hmr),e(Er,Co),g(fA,Co,null),e(Co,pmr),e(Co,a_e),e(a_e,_mr),e(Co,umr),e(Co,vn),e(vn,bmr),e(vn,n_e),e(n_e,vmr),e(vn,Tmr),e(vn,s_e),e(s_e,Fmr),e(vn,Cmr),e(vn,l_e),e(l_e,Mmr),e(vn,Emr),e(Co,ymr),e(Co,K),e(K,I9),e(I9,i_e),e(i_e,wmr),e(I9,Amr),e(I9,aO),e(aO,Lmr),e(I9,Bmr),e(K,xmr),e(K,D9),e(D9,d_e),e(d_e,kmr),e(D9,Rmr),e(D9,nO),e(nO,Smr),e(D9,Pmr),e(K,$mr),e(K,j9),e(j9,c_e),e(c_e,Imr),e(j9,Dmr),e(j9,sO),e(sO,jmr),e(j9,Nmr),e(K,qmr),e(K,N9),e(N9,f_e),e(f_e,Gmr),e(N9,Omr),e(N9,lO),e(lO,Xmr),e(N9,Vmr),e(K,zmr),e(K,q9),e(q9,m_e),e(m_e,Wmr),e(q9,Qmr),e(q9,iO),e(iO,Hmr),e(q9,Umr),e(K,Jmr),e(K,G9),e(G9,g_e),e(g_e,Ymr),e(G9,Kmr),e(G9,dO),e(dO,Zmr),e(G9,egr),e(K,ogr),e(K,O9),e(O9,h_e),e(h_e,rgr),e(O9,tgr),e(O9,cO),e(cO,agr),e(O9,ngr),e(K,sgr),e(K,X9),e(X9,p_e),e(p_e,lgr),e(X9,igr),e(X9,fO),e(fO,dgr),e(X9,cgr),e(K,fgr),e(K,V9),e(V9,__e),e(__e,mgr),e(V9,ggr),e(V9,mO),e(mO,hgr),e(V9,pgr),e(K,_gr),e(K,z9),e(z9,u_e),e(u_e,ugr),e(z9,bgr),e(z9,gO),e(gO,vgr),e(z9,Tgr),e(K,Fgr),e(K,W9),e(W9,b_e),e(b_e,Cgr),e(W9,Mgr),e(W9,hO),e(hO,Egr),e(W9,ygr),e(K,wgr),e(K,Q9),e(Q9,v_e),e(v_e,Agr),e(Q9,Lgr),e(Q9,pO),e(pO,Bgr),e(Q9,xgr),e(K,kgr),e(K,H9),e(H9,T_e),e(T_e,Rgr),e(H9,Sgr),e(H9,_O),e(_O,Pgr),e(H9,$gr),e(K,Igr),e(K,U9),e(U9,F_e),e(F_e,Dgr),e(U9,jgr),e(U9,uO),e(uO,Ngr),e(U9,qgr),e(K,Ggr),e(K,J9),e(J9,C_e),e(C_e,Ogr),e(J9,Xgr),e(J9,bO),e(bO,Vgr),e(J9,zgr),e(K,Wgr),e(K,Y9),e(Y9,M_e),e(M_e,Qgr),e(Y9,Hgr),e(Y9,vO),e(vO,Ugr),e(Y9,Jgr),e(K,Ygr),e(K,K9),e(K9,E_e),e(E_e,Kgr),e(K9,Zgr),e(K9,TO),e(TO,ehr),e(K9,ohr),e(K,rhr),e(K,Z9),e(Z9,y_e),e(y_e,thr),e(Z9,ahr),e(Z9,FO),e(FO,nhr),e(Z9,shr),e(K,lhr),e(K,eC),e(eC,w_e),e(w_e,ihr),e(eC,dhr),e(eC,CO),e(CO,chr),e(eC,fhr),e(K,mhr),e(K,oC),e(oC,A_e),e(A_e,ghr),e(oC,hhr),e(oC,MO),e(MO,phr),e(oC,_hr),e(Co,uhr),e(Co,L_e),e(L_e,bhr),e(Co,vhr),g(mA,Co,null),b(c,HBe,u),b(c,kc,u),e(kc,rC),e(rC,B_e),g(gA,B_e,null),e(kc,Thr),e(kc,x_e),e(x_e,Fhr),b(c,UBe,u),b(c,yr,u),g(hA,yr,null),e(yr,Chr),e(yr,Rc),e(Rc,Mhr),e(Rc,k_e),e(k_e,Ehr),e(Rc,yhr),e(Rc,R_e),e(R_e,whr),e(Rc,Ahr),e(yr,Lhr),e(yr,pA),e(pA,Bhr),e(pA,S_e),e(S_e,xhr),e(pA,khr),e(yr,Rhr),e(yr,bt),g(_A,bt,null),e(bt,Shr),e(bt,P_e),e(P_e,Phr),e(bt,$hr),e(bt,Sc),e(Sc,Ihr),e(Sc,$_e),e($_e,Dhr),e(Sc,jhr),e(Sc,I_e),e(I_e,Nhr),e(Sc,qhr),e(bt,Ghr),e(bt,D_e),e(D_e,Ohr),e(bt,Xhr),g(uA,bt,null),e(yr,Vhr),e(yr,Mo),g(bA,Mo,null),e(Mo,zhr),e(Mo,j_e),e(j_e,Whr),e(Mo,Qhr),e(Mo,Tn),e(Tn,Hhr),e(Tn,N_e),e(N_e,Uhr),e(Tn,Jhr),e(Tn,q_e),e(q_e,Yhr),e(Tn,Khr),e(Tn,G_e),e(G_e,Zhr),e(Tn,epr),e(Mo,opr),e(Mo,Z),e(Z,tC),e(tC,O_e),e(O_e,rpr),e(tC,tpr),e(tC,EO),e(EO,apr),e(tC,npr),e(Z,spr),e(Z,aC),e(aC,X_e),e(X_e,lpr),e(aC,ipr),e(aC,yO),e(yO,dpr),e(aC,cpr),e(Z,fpr),e(Z,nC),e(nC,V_e),e(V_e,mpr),e(nC,gpr),e(nC,wO),e(wO,hpr),e(nC,ppr),e(Z,_pr),e(Z,sC),e(sC,z_e),e(z_e,upr),e(sC,bpr),e(sC,AO),e(AO,vpr),e(sC,Tpr),e(Z,Fpr),e(Z,lC),e(lC,W_e),e(W_e,Cpr),e(lC,Mpr),e(lC,LO),e(LO,Epr),e(lC,ypr),e(Z,wpr),e(Z,iC),e(iC,Q_e),e(Q_e,Apr),e(iC,Lpr),e(iC,BO),e(BO,Bpr),e(iC,xpr),e(Z,kpr),e(Z,dC),e(dC,H_e),e(H_e,Rpr),e(dC,Spr),e(dC,xO),e(xO,Ppr),e(dC,$pr),e(Z,Ipr),e(Z,cC),e(cC,U_e),e(U_e,Dpr),e(cC,jpr),e(cC,kO),e(kO,Npr),e(cC,qpr),e(Z,Gpr),e(Z,fC),e(fC,J_e),e(J_e,Opr),e(fC,Xpr),e(fC,RO),e(RO,Vpr),e(fC,zpr),e(Z,Wpr),e(Z,mC),e(mC,Y_e),e(Y_e,Qpr),e(mC,Hpr),e(mC,SO),e(SO,Upr),e(mC,Jpr),e(Z,Ypr),e(Z,gC),e(gC,K_e),e(K_e,Kpr),e(gC,Zpr),e(gC,PO),e(PO,e_r),e(gC,o_r),e(Z,r_r),e(Z,hC),e(hC,Z_e),e(Z_e,t_r),e(hC,a_r),e(hC,$O),e($O,n_r),e(hC,s_r),e(Z,l_r),e(Z,pC),e(pC,eue),e(eue,i_r),e(pC,d_r),e(pC,IO),e(IO,c_r),e(pC,f_r),e(Z,m_r),e(Z,_C),e(_C,oue),e(oue,g_r),e(_C,h_r),e(_C,DO),e(DO,p_r),e(_C,__r),e(Z,u_r),e(Z,uC),e(uC,rue),e(rue,b_r),e(uC,v_r),e(uC,jO),e(jO,T_r),e(uC,F_r),e(Z,C_r),e(Z,bC),e(bC,tue),e(tue,M_r),e(bC,E_r),e(bC,NO),e(NO,y_r),e(bC,w_r),e(Z,A_r),e(Z,vC),e(vC,aue),e(aue,L_r),e(vC,B_r),e(vC,qO),e(qO,x_r),e(vC,k_r),e(Z,R_r),e(Z,TC),e(TC,nue),e(nue,S_r),e(TC,P_r),e(TC,GO),e(GO,$_r),e(TC,I_r),e(Z,D_r),e(Z,FC),e(FC,sue),e(sue,j_r),e(FC,N_r),e(FC,OO),e(OO,q_r),e(FC,G_r),e(Mo,O_r),e(Mo,lue),e(lue,X_r),e(Mo,V_r),g(vA,Mo,null),b(c,JBe,u),b(c,Pc,u),e(Pc,CC),e(CC,iue),g(TA,iue,null),e(Pc,z_r),e(Pc,due),e(due,W_r),b(c,YBe,u),b(c,wr,u),g(FA,wr,null),e(wr,Q_r),e(wr,$c),e($c,H_r),e($c,cue),e(cue,U_r),e($c,J_r),e($c,fue),e(fue,Y_r),e($c,K_r),e(wr,Z_r),e(wr,CA),e(CA,eur),e(CA,mue),e(mue,our),e(CA,rur),e(wr,tur),e(wr,vt),g(MA,vt,null),e(vt,aur),e(vt,gue),e(gue,nur),e(vt,sur),e(vt,Ic),e(Ic,lur),e(Ic,hue),e(hue,iur),e(Ic,dur),e(Ic,pue),e(pue,cur),e(Ic,fur),e(vt,mur),e(vt,_ue),e(_ue,gur),e(vt,hur),g(EA,vt,null),e(wr,pur),e(wr,Eo),g(yA,Eo,null),e(Eo,_ur),e(Eo,uue),e(uue,uur),e(Eo,bur),e(Eo,Fn),e(Fn,vur),e(Fn,bue),e(bue,Tur),e(Fn,Fur),e(Fn,vue),e(vue,Cur),e(Fn,Mur),e(Fn,Tue),e(Tue,Eur),e(Fn,yur),e(Eo,wur),e(Eo,Fue),e(Fue,MC),e(MC,Cue),e(Cue,Aur),e(MC,Lur),e(MC,XO),e(XO,Bur),e(MC,xur),e(Eo,kur),e(Eo,Mue),e(Mue,Rur),e(Eo,Sur),g(wA,Eo,null),b(c,KBe,u),b(c,Dc,u),e(Dc,EC),e(EC,Eue),g(AA,Eue,null),e(Dc,Pur),e(Dc,yue),e(yue,$ur),b(c,ZBe,u),b(c,Ar,u),g(LA,Ar,null),e(Ar,Iur),e(Ar,jc),e(jc,Dur),e(jc,wue),e(wue,jur),e(jc,Nur),e(jc,Aue),e(Aue,qur),e(jc,Gur),e(Ar,Our),e(Ar,BA),e(BA,Xur),e(BA,Lue),e(Lue,Vur),e(BA,zur),e(Ar,Wur),e(Ar,Tt),g(xA,Tt,null),e(Tt,Qur),e(Tt,Bue),e(Bue,Hur),e(Tt,Uur),e(Tt,Nc),e(Nc,Jur),e(Nc,xue),e(xue,Yur),e(Nc,Kur),e(Nc,kue),e(kue,Zur),e(Nc,e1r),e(Tt,o1r),e(Tt,Rue),e(Rue,r1r),e(Tt,t1r),g(kA,Tt,null),e(Ar,a1r),e(Ar,yo),g(RA,yo,null),e(yo,n1r),e(yo,Sue),e(Sue,s1r),e(yo,l1r),e(yo,Cn),e(Cn,i1r),e(Cn,Pue),e(Pue,d1r),e(Cn,c1r),e(Cn,$ue),e($ue,f1r),e(Cn,m1r),e(Cn,Iue),e(Iue,g1r),e(Cn,h1r),e(yo,p1r),e(yo,Due),e(Due,yC),e(yC,jue),e(jue,_1r),e(yC,u1r),e(yC,VO),e(VO,b1r),e(yC,v1r),e(yo,T1r),e(yo,Nue),e(Nue,F1r),e(yo,C1r),g(SA,yo,null),b(c,exe,u),b(c,qc,u),e(qc,wC),e(wC,que),g(PA,que,null),e(qc,M1r),e(qc,Gue),e(Gue,E1r),b(c,oxe,u),b(c,Lr,u),g($A,Lr,null),e(Lr,y1r),e(Lr,Gc),e(Gc,w1r),e(Gc,Oue),e(Oue,A1r),e(Gc,L1r),e(Gc,Xue),e(Xue,B1r),e(Gc,x1r),e(Lr,k1r),e(Lr,IA),e(IA,R1r),e(IA,Vue),e(Vue,S1r),e(IA,P1r),e(Lr,$1r),e(Lr,Ft),g(DA,Ft,null),e(Ft,I1r),e(Ft,zue),e(zue,D1r),e(Ft,j1r),e(Ft,Oc),e(Oc,N1r),e(Oc,Wue),e(Wue,q1r),e(Oc,G1r),e(Oc,Que),e(Que,O1r),e(Oc,X1r),e(Ft,V1r),e(Ft,Hue),e(Hue,z1r),e(Ft,W1r),g(jA,Ft,null),e(Lr,Q1r),e(Lr,wo),g(NA,wo,null),e(wo,H1r),e(wo,Uue),e(Uue,U1r),e(wo,J1r),e(wo,Mn),e(Mn,Y1r),e(Mn,Jue),e(Jue,K1r),e(Mn,Z1r),e(Mn,Yue),e(Yue,ebr),e(Mn,obr),e(Mn,Kue),e(Kue,rbr),e(Mn,tbr),e(wo,abr),e(wo,z),e(z,AC),e(AC,Zue),e(Zue,nbr),e(AC,sbr),e(AC,zO),e(zO,lbr),e(AC,ibr),e(z,dbr),e(z,LC),e(LC,e1e),e(e1e,cbr),e(LC,fbr),e(LC,WO),e(WO,mbr),e(LC,gbr),e(z,hbr),e(z,BC),e(BC,o1e),e(o1e,pbr),e(BC,_br),e(BC,QO),e(QO,ubr),e(BC,bbr),e(z,vbr),e(z,xC),e(xC,r1e),e(r1e,Tbr),e(xC,Fbr),e(xC,HO),e(HO,Cbr),e(xC,Mbr),e(z,Ebr),e(z,kC),e(kC,t1e),e(t1e,ybr),e(kC,wbr),e(kC,UO),e(UO,Abr),e(kC,Lbr),e(z,Bbr),e(z,RC),e(RC,a1e),e(a1e,xbr),e(RC,kbr),e(RC,JO),e(JO,Rbr),e(RC,Sbr),e(z,Pbr),e(z,SC),e(SC,n1e),e(n1e,$br),e(SC,Ibr),e(SC,YO),e(YO,Dbr),e(SC,jbr),e(z,Nbr),e(z,PC),e(PC,s1e),e(s1e,qbr),e(PC,Gbr),e(PC,KO),e(KO,Obr),e(PC,Xbr),e(z,Vbr),e(z,$C),e($C,l1e),e(l1e,zbr),e($C,Wbr),e($C,ZO),e(ZO,Qbr),e($C,Hbr),e(z,Ubr),e(z,IC),e(IC,i1e),e(i1e,Jbr),e(IC,Ybr),e(IC,eX),e(eX,Kbr),e(IC,Zbr),e(z,e5r),e(z,DC),e(DC,d1e),e(d1e,o5r),e(DC,r5r),e(DC,oX),e(oX,t5r),e(DC,a5r),e(z,n5r),e(z,jC),e(jC,c1e),e(c1e,s5r),e(jC,l5r),e(jC,rX),e(rX,i5r),e(jC,d5r),e(z,c5r),e(z,NC),e(NC,f1e),e(f1e,f5r),e(NC,m5r),e(NC,tX),e(tX,g5r),e(NC,h5r),e(z,p5r),e(z,qC),e(qC,m1e),e(m1e,_5r),e(qC,u5r),e(qC,aX),e(aX,b5r),e(qC,v5r),e(z,T5r),e(z,GC),e(GC,g1e),e(g1e,F5r),e(GC,C5r),e(GC,nX),e(nX,M5r),e(GC,E5r),e(z,y5r),e(z,OC),e(OC,h1e),e(h1e,w5r),e(OC,A5r),e(OC,sX),e(sX,L5r),e(OC,B5r),e(z,x5r),e(z,XC),e(XC,p1e),e(p1e,k5r),e(XC,R5r),e(XC,lX),e(lX,S5r),e(XC,P5r),e(z,$5r),e(z,VC),e(VC,_1e),e(_1e,I5r),e(VC,D5r),e(VC,iX),e(iX,j5r),e(VC,N5r),e(z,q5r),e(z,zC),e(zC,u1e),e(u1e,G5r),e(zC,O5r),e(zC,dX),e(dX,X5r),e(zC,V5r),e(z,z5r),e(z,WC),e(WC,b1e),e(b1e,W5r),e(WC,Q5r),e(WC,cX),e(cX,H5r),e(WC,U5r),e(z,J5r),e(z,QC),e(QC,v1e),e(v1e,Y5r),e(QC,K5r),e(QC,fX),e(fX,Z5r),e(QC,e2r),e(z,o2r),e(z,HC),e(HC,T1e),e(T1e,r2r),e(HC,t2r),e(HC,mX),e(mX,a2r),e(HC,n2r),e(z,s2r),e(z,UC),e(UC,F1e),e(F1e,l2r),e(UC,i2r),e(UC,gX),e(gX,d2r),e(UC,c2r),e(z,f2r),e(z,JC),e(JC,C1e),e(C1e,m2r),e(JC,g2r),e(JC,hX),e(hX,h2r),e(JC,p2r),e(wo,_2r),e(wo,M1e),e(M1e,u2r),e(wo,b2r),g(qA,wo,null),b(c,rxe,u),b(c,Xc,u),e(Xc,YC),e(YC,E1e),g(GA,E1e,null),e(Xc,v2r),e(Xc,y1e),e(y1e,T2r),b(c,txe,u),b(c,Br,u),g(OA,Br,null),e(Br,F2r),e(Br,Vc),e(Vc,C2r),e(Vc,w1e),e(w1e,M2r),e(Vc,E2r),e(Vc,A1e),e(A1e,y2r),e(Vc,w2r),e(Br,A2r),e(Br,XA),e(XA,L2r),e(XA,L1e),e(L1e,B2r),e(XA,x2r),e(Br,k2r),e(Br,Ct),g(VA,Ct,null),e(Ct,R2r),e(Ct,B1e),e(B1e,S2r),e(Ct,P2r),e(Ct,zc),e(zc,$2r),e(zc,x1e),e(x1e,I2r),e(zc,D2r),e(zc,k1e),e(k1e,j2r),e(zc,N2r),e(Ct,q2r),e(Ct,R1e),e(R1e,G2r),e(Ct,O2r),g(zA,Ct,null),e(Br,X2r),e(Br,Ao),g(WA,Ao,null),e(Ao,V2r),e(Ao,S1e),e(S1e,z2r),e(Ao,W2r),e(Ao,En),e(En,Q2r),e(En,P1e),e(P1e,H2r),e(En,U2r),e(En,$1e),e($1e,J2r),e(En,Y2r),e(En,I1e),e(I1e,K2r),e(En,Z2r),e(Ao,evr),e(Ao,yn),e(yn,KC),e(KC,D1e),e(D1e,ovr),e(KC,rvr),e(KC,pX),e(pX,tvr),e(KC,avr),e(yn,nvr),e(yn,ZC),e(ZC,j1e),e(j1e,svr),e(ZC,lvr),e(ZC,_X),e(_X,ivr),e(ZC,dvr),e(yn,cvr),e(yn,e4),e(e4,N1e),e(N1e,fvr),e(e4,mvr),e(e4,uX),e(uX,gvr),e(e4,hvr),e(yn,pvr),e(yn,o4),e(o4,q1e),e(q1e,_vr),e(o4,uvr),e(o4,bX),e(bX,bvr),e(o4,vvr),e(Ao,Tvr),e(Ao,G1e),e(G1e,Fvr),e(Ao,Cvr),g(QA,Ao,null),b(c,axe,u),b(c,Wc,u),e(Wc,r4),e(r4,O1e),g(HA,O1e,null),e(Wc,Mvr),e(Wc,X1e),e(X1e,Evr),b(c,nxe,u),b(c,xr,u),g(UA,xr,null),e(xr,yvr),e(xr,Qc),e(Qc,wvr),e(Qc,V1e),e(V1e,Avr),e(Qc,Lvr),e(Qc,z1e),e(z1e,Bvr),e(Qc,xvr),e(xr,kvr),e(xr,JA),e(JA,Rvr),e(JA,W1e),e(W1e,Svr),e(JA,Pvr),e(xr,$vr),e(xr,Mt),g(YA,Mt,null),e(Mt,Ivr),e(Mt,Q1e),e(Q1e,Dvr),e(Mt,jvr),e(Mt,Hc),e(Hc,Nvr),e(Hc,H1e),e(H1e,qvr),e(Hc,Gvr),e(Hc,U1e),e(U1e,Ovr),e(Hc,Xvr),e(Mt,Vvr),e(Mt,J1e),e(J1e,zvr),e(Mt,Wvr),g(KA,Mt,null),e(xr,Qvr),e(xr,Lo),g(ZA,Lo,null),e(Lo,Hvr),e(Lo,Y1e),e(Y1e,Uvr),e(Lo,Jvr),e(Lo,wn),e(wn,Yvr),e(wn,K1e),e(K1e,Kvr),e(wn,Zvr),e(wn,Z1e),e(Z1e,eTr),e(wn,oTr),e(wn,ebe),e(ebe,rTr),e(wn,tTr),e(Lo,aTr),e(Lo,fe),e(fe,t4),e(t4,obe),e(obe,nTr),e(t4,sTr),e(t4,vX),e(vX,lTr),e(t4,iTr),e(fe,dTr),e(fe,a4),e(a4,rbe),e(rbe,cTr),e(a4,fTr),e(a4,TX),e(TX,mTr),e(a4,gTr),e(fe,hTr),e(fe,n4),e(n4,tbe),e(tbe,pTr),e(n4,_Tr),e(n4,FX),e(FX,uTr),e(n4,bTr),e(fe,vTr),e(fe,s4),e(s4,abe),e(abe,TTr),e(s4,FTr),e(s4,CX),e(CX,CTr),e(s4,MTr),e(fe,ETr),e(fe,l4),e(l4,nbe),e(nbe,yTr),e(l4,wTr),e(l4,MX),e(MX,ATr),e(l4,LTr),e(fe,BTr),e(fe,i4),e(i4,sbe),e(sbe,xTr),e(i4,kTr),e(i4,EX),e(EX,RTr),e(i4,STr),e(fe,PTr),e(fe,d4),e(d4,lbe),e(lbe,$Tr),e(d4,ITr),e(d4,yX),e(yX,DTr),e(d4,jTr),e(fe,NTr),e(fe,c4),e(c4,ibe),e(ibe,qTr),e(c4,GTr),e(c4,wX),e(wX,OTr),e(c4,XTr),e(fe,VTr),e(fe,f4),e(f4,dbe),e(dbe,zTr),e(f4,WTr),e(f4,AX),e(AX,QTr),e(f4,HTr),e(fe,UTr),e(fe,m4),e(m4,cbe),e(cbe,JTr),e(m4,YTr),e(m4,LX),e(LX,KTr),e(m4,ZTr),e(fe,eFr),e(fe,g4),e(g4,fbe),e(fbe,oFr),e(g4,rFr),e(g4,BX),e(BX,tFr),e(g4,aFr),e(Lo,nFr),e(Lo,mbe),e(mbe,sFr),e(Lo,lFr),g(e0,Lo,null),b(c,sxe,u),b(c,Uc,u),e(Uc,h4),e(h4,gbe),g(o0,gbe,null),e(Uc,iFr),e(Uc,hbe),e(hbe,dFr),b(c,lxe,u),b(c,kr,u),g(r0,kr,null),e(kr,cFr),e(kr,Jc),e(Jc,fFr),e(Jc,pbe),e(pbe,mFr),e(Jc,gFr),e(Jc,_be),e(_be,hFr),e(Jc,pFr),e(kr,_Fr),e(kr,t0),e(t0,uFr),e(t0,ube),e(ube,bFr),e(t0,vFr),e(kr,TFr),e(kr,Et),g(a0,Et,null),e(Et,FFr),e(Et,bbe),e(bbe,CFr),e(Et,MFr),e(Et,Yc),e(Yc,EFr),e(Yc,vbe),e(vbe,yFr),e(Yc,wFr),e(Yc,Tbe),e(Tbe,AFr),e(Yc,LFr),e(Et,BFr),e(Et,Fbe),e(Fbe,xFr),e(Et,kFr),g(n0,Et,null),e(kr,RFr),e(kr,Bo),g(s0,Bo,null),e(Bo,SFr),e(Bo,Cbe),e(Cbe,PFr),e(Bo,$Fr),e(Bo,An),e(An,IFr),e(An,Mbe),e(Mbe,DFr),e(An,jFr),e(An,Ebe),e(Ebe,NFr),e(An,qFr),e(An,ybe),e(ybe,GFr),e(An,OFr),e(Bo,XFr),e(Bo,ve),e(ve,p4),e(p4,wbe),e(wbe,VFr),e(p4,zFr),e(p4,xX),e(xX,WFr),e(p4,QFr),e(ve,HFr),e(ve,_4),e(_4,Abe),e(Abe,UFr),e(_4,JFr),e(_4,kX),e(kX,YFr),e(_4,KFr),e(ve,ZFr),e(ve,u4),e(u4,Lbe),e(Lbe,e9r),e(u4,o9r),e(u4,RX),e(RX,r9r),e(u4,t9r),e(ve,a9r),e(ve,b4),e(b4,Bbe),e(Bbe,n9r),e(b4,s9r),e(b4,SX),e(SX,l9r),e(b4,i9r),e(ve,d9r),e(ve,v4),e(v4,xbe),e(xbe,c9r),e(v4,f9r),e(v4,PX),e(PX,m9r),e(v4,g9r),e(ve,h9r),e(ve,T4),e(T4,kbe),e(kbe,p9r),e(T4,_9r),e(T4,$X),e($X,u9r),e(T4,b9r),e(ve,v9r),e(ve,F4),e(F4,Rbe),e(Rbe,T9r),e(F4,F9r),e(F4,IX),e(IX,C9r),e(F4,M9r),e(ve,E9r),e(ve,C4),e(C4,Sbe),e(Sbe,y9r),e(C4,w9r),e(C4,DX),e(DX,A9r),e(C4,L9r),e(ve,B9r),e(ve,M4),e(M4,Pbe),e(Pbe,x9r),e(M4,k9r),e(M4,jX),e(jX,R9r),e(M4,S9r),e(Bo,P9r),e(Bo,$be),e($be,$9r),e(Bo,I9r),g(l0,Bo,null),b(c,ixe,u),b(c,Kc,u),e(Kc,E4),e(E4,Ibe),g(i0,Ibe,null),e(Kc,D9r),e(Kc,Dbe),e(Dbe,j9r),b(c,dxe,u),b(c,Rr,u),g(d0,Rr,null),e(Rr,N9r),e(Rr,Zc),e(Zc,q9r),e(Zc,jbe),e(jbe,G9r),e(Zc,O9r),e(Zc,Nbe),e(Nbe,X9r),e(Zc,V9r),e(Rr,z9r),e(Rr,c0),e(c0,W9r),e(c0,qbe),e(qbe,Q9r),e(c0,H9r),e(Rr,U9r),e(Rr,yt),g(f0,yt,null),e(yt,J9r),e(yt,Gbe),e(Gbe,Y9r),e(yt,K9r),e(yt,ef),e(ef,Z9r),e(ef,Obe),e(Obe,eCr),e(ef,oCr),e(ef,Xbe),e(Xbe,rCr),e(ef,tCr),e(yt,aCr),e(yt,Vbe),e(Vbe,nCr),e(yt,sCr),g(m0,yt,null),e(Rr,lCr),e(Rr,xo),g(g0,xo,null),e(xo,iCr),e(xo,zbe),e(zbe,dCr),e(xo,cCr),e(xo,Ln),e(Ln,fCr),e(Ln,Wbe),e(Wbe,mCr),e(Ln,gCr),e(Ln,Qbe),e(Qbe,hCr),e(Ln,pCr),e(Ln,Hbe),e(Hbe,_Cr),e(Ln,uCr),e(xo,bCr),e(xo,Te),e(Te,y4),e(y4,Ube),e(Ube,vCr),e(y4,TCr),e(y4,NX),e(NX,FCr),e(y4,CCr),e(Te,MCr),e(Te,w4),e(w4,Jbe),e(Jbe,ECr),e(w4,yCr),e(w4,qX),e(qX,wCr),e(w4,ACr),e(Te,LCr),e(Te,A4),e(A4,Ybe),e(Ybe,BCr),e(A4,xCr),e(A4,GX),e(GX,kCr),e(A4,RCr),e(Te,SCr),e(Te,L4),e(L4,Kbe),e(Kbe,PCr),e(L4,$Cr),e(L4,OX),e(OX,ICr),e(L4,DCr),e(Te,jCr),e(Te,B4),e(B4,Zbe),e(Zbe,NCr),e(B4,qCr),e(B4,XX),e(XX,GCr),e(B4,OCr),e(Te,XCr),e(Te,x4),e(x4,e5e),e(e5e,VCr),e(x4,zCr),e(x4,VX),e(VX,WCr),e(x4,QCr),e(Te,HCr),e(Te,k4),e(k4,o5e),e(o5e,UCr),e(k4,JCr),e(k4,zX),e(zX,YCr),e(k4,KCr),e(Te,ZCr),e(Te,R4),e(R4,r5e),e(r5e,e4r),e(R4,o4r),e(R4,WX),e(WX,r4r),e(R4,t4r),e(Te,a4r),e(Te,S4),e(S4,t5e),e(t5e,n4r),e(S4,s4r),e(S4,QX),e(QX,l4r),e(S4,i4r),e(xo,d4r),e(xo,a5e),e(a5e,c4r),e(xo,f4r),g(h0,xo,null),b(c,cxe,u),b(c,of,u),e(of,P4),e(P4,n5e),g(p0,n5e,null),e(of,m4r),e(of,s5e),e(s5e,g4r),b(c,fxe,u),b(c,Sr,u),g(_0,Sr,null),e(Sr,h4r),e(Sr,rf),e(rf,p4r),e(rf,l5e),e(l5e,_4r),e(rf,u4r),e(rf,i5e),e(i5e,b4r),e(rf,v4r),e(Sr,T4r),e(Sr,u0),e(u0,F4r),e(u0,d5e),e(d5e,C4r),e(u0,M4r),e(Sr,E4r),e(Sr,wt),g(b0,wt,null),e(wt,y4r),e(wt,c5e),e(c5e,w4r),e(wt,A4r),e(wt,tf),e(tf,L4r),e(tf,f5e),e(f5e,B4r),e(tf,x4r),e(tf,m5e),e(m5e,k4r),e(tf,R4r),e(wt,S4r),e(wt,g5e),e(g5e,P4r),e(wt,$4r),g(v0,wt,null),e(Sr,I4r),e(Sr,ko),g(T0,ko,null),e(ko,D4r),e(ko,h5e),e(h5e,j4r),e(ko,N4r),e(ko,Bn),e(Bn,q4r),e(Bn,p5e),e(p5e,G4r),e(Bn,O4r),e(Bn,_5e),e(_5e,X4r),e(Bn,V4r),e(Bn,u5e),e(u5e,z4r),e(Bn,W4r),e(ko,Q4r),e(ko,Fe),e(Fe,$4),e($4,b5e),e(b5e,H4r),e($4,U4r),e($4,HX),e(HX,J4r),e($4,Y4r),e(Fe,K4r),e(Fe,I4),e(I4,v5e),e(v5e,Z4r),e(I4,eMr),e(I4,UX),e(UX,oMr),e(I4,rMr),e(Fe,tMr),e(Fe,D4),e(D4,T5e),e(T5e,aMr),e(D4,nMr),e(D4,JX),e(JX,sMr),e(D4,lMr),e(Fe,iMr),e(Fe,j4),e(j4,F5e),e(F5e,dMr),e(j4,cMr),e(j4,YX),e(YX,fMr),e(j4,mMr),e(Fe,gMr),e(Fe,N4),e(N4,C5e),e(C5e,hMr),e(N4,pMr),e(N4,KX),e(KX,_Mr),e(N4,uMr),e(Fe,bMr),e(Fe,q4),e(q4,M5e),e(M5e,vMr),e(q4,TMr),e(q4,ZX),e(ZX,FMr),e(q4,CMr),e(Fe,MMr),e(Fe,G4),e(G4,E5e),e(E5e,EMr),e(G4,yMr),e(G4,eV),e(eV,wMr),e(G4,AMr),e(Fe,LMr),e(Fe,O4),e(O4,y5e),e(y5e,BMr),e(O4,xMr),e(O4,oV),e(oV,kMr),e(O4,RMr),e(Fe,SMr),e(Fe,X4),e(X4,w5e),e(w5e,PMr),e(X4,$Mr),e(X4,rV),e(rV,IMr),e(X4,DMr),e(ko,jMr),e(ko,A5e),e(A5e,NMr),e(ko,qMr),g(F0,ko,null),b(c,mxe,u),b(c,af,u),e(af,V4),e(V4,L5e),g(C0,L5e,null),e(af,GMr),e(af,B5e),e(B5e,OMr),b(c,gxe,u),b(c,Pr,u),g(M0,Pr,null),e(Pr,XMr),e(Pr,nf),e(nf,VMr),e(nf,x5e),e(x5e,zMr),e(nf,WMr),e(nf,k5e),e(k5e,QMr),e(nf,HMr),e(Pr,UMr),e(Pr,E0),e(E0,JMr),e(E0,R5e),e(R5e,YMr),e(E0,KMr),e(Pr,ZMr),e(Pr,At),g(y0,At,null),e(At,eEr),e(At,S5e),e(S5e,oEr),e(At,rEr),e(At,sf),e(sf,tEr),e(sf,P5e),e(P5e,aEr),e(sf,nEr),e(sf,$5e),e($5e,sEr),e(sf,lEr),e(At,iEr),e(At,I5e),e(I5e,dEr),e(At,cEr),g(w0,At,null),e(Pr,fEr),e(Pr,Ro),g(A0,Ro,null),e(Ro,mEr),e(Ro,D5e),e(D5e,gEr),e(Ro,hEr),e(Ro,xn),e(xn,pEr),e(xn,j5e),e(j5e,_Er),e(xn,uEr),e(xn,N5e),e(N5e,bEr),e(xn,vEr),e(xn,q5e),e(q5e,TEr),e(xn,FEr),e(Ro,CEr),e(Ro,Ce),e(Ce,z4),e(z4,G5e),e(G5e,MEr),e(z4,EEr),e(z4,tV),e(tV,yEr),e(z4,wEr),e(Ce,AEr),e(Ce,W4),e(W4,O5e),e(O5e,LEr),e(W4,BEr),e(W4,aV),e(aV,xEr),e(W4,kEr),e(Ce,REr),e(Ce,Q4),e(Q4,X5e),e(X5e,SEr),e(Q4,PEr),e(Q4,nV),e(nV,$Er),e(Q4,IEr),e(Ce,DEr),e(Ce,H4),e(H4,V5e),e(V5e,jEr),e(H4,NEr),e(H4,sV),e(sV,qEr),e(H4,GEr),e(Ce,OEr),e(Ce,U4),e(U4,z5e),e(z5e,XEr),e(U4,VEr),e(U4,lV),e(lV,zEr),e(U4,WEr),e(Ce,QEr),e(Ce,J4),e(J4,W5e),e(W5e,HEr),e(J4,UEr),e(J4,iV),e(iV,JEr),e(J4,YEr),e(Ce,KEr),e(Ce,Y4),e(Y4,Q5e),e(Q5e,ZEr),e(Y4,e3r),e(Y4,dV),e(dV,o3r),e(Y4,r3r),e(Ce,t3r),e(Ce,K4),e(K4,H5e),e(H5e,a3r),e(K4,n3r),e(K4,cV),e(cV,s3r),e(K4,l3r),e(Ce,i3r),e(Ce,Z4),e(Z4,U5e),e(U5e,d3r),e(Z4,c3r),e(Z4,fV),e(fV,f3r),e(Z4,m3r),e(Ro,g3r),e(Ro,J5e),e(J5e,h3r),e(Ro,p3r),g(L0,Ro,null),b(c,hxe,u),b(c,lf,u),e(lf,eM),e(eM,Y5e),g(B0,Y5e,null),e(lf,_3r),e(lf,K5e),e(K5e,u3r),b(c,pxe,u),b(c,$r,u),g(x0,$r,null),e($r,b3r),e($r,df),e(df,v3r),e(df,Z5e),e(Z5e,T3r),e(df,F3r),e(df,e2e),e(e2e,C3r),e(df,M3r),e($r,E3r),e($r,k0),e(k0,y3r),e(k0,o2e),e(o2e,w3r),e(k0,A3r),e($r,L3r),e($r,Lt),g(R0,Lt,null),e(Lt,B3r),e(Lt,r2e),e(r2e,x3r),e(Lt,k3r),e(Lt,cf),e(cf,R3r),e(cf,t2e),e(t2e,S3r),e(cf,P3r),e(cf,a2e),e(a2e,$3r),e(cf,I3r),e(Lt,D3r),e(Lt,n2e),e(n2e,j3r),e(Lt,N3r),g(S0,Lt,null),e($r,q3r),e($r,So),g(P0,So,null),e(So,G3r),e(So,s2e),e(s2e,O3r),e(So,X3r),e(So,kn),e(kn,V3r),e(kn,l2e),e(l2e,z3r),e(kn,W3r),e(kn,i2e),e(i2e,Q3r),e(kn,H3r),e(kn,d2e),e(d2e,U3r),e(kn,J3r),e(So,Y3r),e(So,so),e(so,oM),e(oM,c2e),e(c2e,K3r),e(oM,Z3r),e(oM,mV),e(mV,eyr),e(oM,oyr),e(so,ryr),e(so,rM),e(rM,f2e),e(f2e,tyr),e(rM,ayr),e(rM,gV),e(gV,nyr),e(rM,syr),e(so,lyr),e(so,tM),e(tM,m2e),e(m2e,iyr),e(tM,dyr),e(tM,hV),e(hV,cyr),e(tM,fyr),e(so,myr),e(so,aM),e(aM,g2e),e(g2e,gyr),e(aM,hyr),e(aM,pV),e(pV,pyr),e(aM,_yr),e(so,uyr),e(so,nM),e(nM,h2e),e(h2e,byr),e(nM,vyr),e(nM,_V),e(_V,Tyr),e(nM,Fyr),e(so,Cyr),e(so,sM),e(sM,p2e),e(p2e,Myr),e(sM,Eyr),e(sM,uV),e(uV,yyr),e(sM,wyr),e(so,Ayr),e(so,lM),e(lM,_2e),e(_2e,Lyr),e(lM,Byr),e(lM,bV),e(bV,xyr),e(lM,kyr),e(So,Ryr),e(So,u2e),e(u2e,Syr),e(So,Pyr),g($0,So,null),b(c,_xe,u),b(c,ff,u),e(ff,iM),e(iM,b2e),g(I0,b2e,null),e(ff,$yr),e(ff,v2e),e(v2e,Iyr),b(c,uxe,u),b(c,Ir,u),g(D0,Ir,null),e(Ir,Dyr),e(Ir,mf),e(mf,jyr),e(mf,T2e),e(T2e,Nyr),e(mf,qyr),e(mf,F2e),e(F2e,Gyr),e(mf,Oyr),e(Ir,Xyr),e(Ir,j0),e(j0,Vyr),e(j0,C2e),e(C2e,zyr),e(j0,Wyr),e(Ir,Qyr),e(Ir,Bt),g(N0,Bt,null),e(Bt,Hyr),e(Bt,M2e),e(M2e,Uyr),e(Bt,Jyr),e(Bt,gf),e(gf,Yyr),e(gf,E2e),e(E2e,Kyr),e(gf,Zyr),e(gf,y2e),e(y2e,ewr),e(gf,owr),e(Bt,rwr),e(Bt,w2e),e(w2e,twr),e(Bt,awr),g(q0,Bt,null),e(Ir,nwr),e(Ir,Po),g(G0,Po,null),e(Po,swr),e(Po,A2e),e(A2e,lwr),e(Po,iwr),e(Po,Rn),e(Rn,dwr),e(Rn,L2e),e(L2e,cwr),e(Rn,fwr),e(Rn,B2e),e(B2e,mwr),e(Rn,gwr),e(Rn,x2e),e(x2e,hwr),e(Rn,pwr),e(Po,_wr),e(Po,lo),e(lo,dM),e(dM,k2e),e(k2e,uwr),e(dM,bwr),e(dM,vV),e(vV,vwr),e(dM,Twr),e(lo,Fwr),e(lo,cM),e(cM,R2e),e(R2e,Cwr),e(cM,Mwr),e(cM,TV),e(TV,Ewr),e(cM,ywr),e(lo,wwr),e(lo,fM),e(fM,S2e),e(S2e,Awr),e(fM,Lwr),e(fM,FV),e(FV,Bwr),e(fM,xwr),e(lo,kwr),e(lo,mM),e(mM,P2e),e(P2e,Rwr),e(mM,Swr),e(mM,CV),e(CV,Pwr),e(mM,$wr),e(lo,Iwr),e(lo,gM),e(gM,$2e),e($2e,Dwr),e(gM,jwr),e(gM,MV),e(MV,Nwr),e(gM,qwr),e(lo,Gwr),e(lo,hM),e(hM,I2e),e(I2e,Owr),e(hM,Xwr),e(hM,EV),e(EV,Vwr),e(hM,zwr),e(lo,Wwr),e(lo,pM),e(pM,D2e),e(D2e,Qwr),e(pM,Hwr),e(pM,yV),e(yV,Uwr),e(pM,Jwr),e(Po,Ywr),e(Po,j2e),e(j2e,Kwr),e(Po,Zwr),g(O0,Po,null),b(c,bxe,u),b(c,hf,u),e(hf,_M),e(_M,N2e),g(X0,N2e,null),e(hf,e6r),e(hf,q2e),e(q2e,o6r),b(c,vxe,u),b(c,Dr,u),g(V0,Dr,null),e(Dr,r6r),e(Dr,pf),e(pf,t6r),e(pf,G2e),e(G2e,a6r),e(pf,n6r),e(pf,O2e),e(O2e,s6r),e(pf,l6r),e(Dr,i6r),e(Dr,z0),e(z0,d6r),e(z0,X2e),e(X2e,c6r),e(z0,f6r),e(Dr,m6r),e(Dr,xt),g(W0,xt,null),e(xt,g6r),e(xt,V2e),e(V2e,h6r),e(xt,p6r),e(xt,_f),e(_f,_6r),e(_f,z2e),e(z2e,u6r),e(_f,b6r),e(_f,W2e),e(W2e,v6r),e(_f,T6r),e(xt,F6r),e(xt,Q2e),e(Q2e,C6r),e(xt,M6r),g(Q0,xt,null),e(Dr,E6r),e(Dr,$o),g(H0,$o,null),e($o,y6r),e($o,H2e),e(H2e,w6r),e($o,A6r),e($o,Sn),e(Sn,L6r),e(Sn,U2e),e(U2e,B6r),e(Sn,x6r),e(Sn,J2e),e(J2e,k6r),e(Sn,R6r),e(Sn,Y2e),e(Y2e,S6r),e(Sn,P6r),e($o,$6r),e($o,K2e),e(K2e,uM),e(uM,Z2e),e(Z2e,I6r),e(uM,D6r),e(uM,wV),e(wV,j6r),e(uM,N6r),e($o,q6r),e($o,eve),e(eve,G6r),e($o,O6r),g(U0,$o,null),b(c,Txe,u),b(c,uf,u),e(uf,bM),e(bM,ove),g(J0,ove,null),e(uf,X6r),e(uf,rve),e(rve,V6r),b(c,Fxe,u),b(c,jr,u),g(Y0,jr,null),e(jr,z6r),e(jr,bf),e(bf,W6r),e(bf,tve),e(tve,Q6r),e(bf,H6r),e(bf,ave),e(ave,U6r),e(bf,J6r),e(jr,Y6r),e(jr,K0),e(K0,K6r),e(K0,nve),e(nve,Z6r),e(K0,eAr),e(jr,oAr),e(jr,kt),g(Z0,kt,null),e(kt,rAr),e(kt,sve),e(sve,tAr),e(kt,aAr),e(kt,vf),e(vf,nAr),e(vf,lve),e(lve,sAr),e(vf,lAr),e(vf,ive),e(ive,iAr),e(vf,dAr),e(kt,cAr),e(kt,dve),e(dve,fAr),e(kt,mAr),g(eL,kt,null),e(jr,gAr),e(jr,Io),g(oL,Io,null),e(Io,hAr),e(Io,cve),e(cve,pAr),e(Io,_Ar),e(Io,Pn),e(Pn,uAr),e(Pn,fve),e(fve,bAr),e(Pn,vAr),e(Pn,mve),e(mve,TAr),e(Pn,FAr),e(Pn,gve),e(gve,CAr),e(Pn,MAr),e(Io,EAr),e(Io,rL),e(rL,vM),e(vM,hve),e(hve,yAr),e(vM,wAr),e(vM,AV),e(AV,AAr),e(vM,LAr),e(rL,BAr),e(rL,TM),e(TM,pve),e(pve,xAr),e(TM,kAr),e(TM,LV),e(LV,RAr),e(TM,SAr),e(Io,PAr),e(Io,_ve),e(_ve,$Ar),e(Io,IAr),g(tL,Io,null),b(c,Cxe,u),b(c,Tf,u),e(Tf,FM),e(FM,uve),g(aL,uve,null),e(Tf,DAr),e(Tf,bve),e(bve,jAr),b(c,Mxe,u),b(c,Nr,u),g(nL,Nr,null),e(Nr,NAr),e(Nr,Ff),e(Ff,qAr),e(Ff,vve),e(vve,GAr),e(Ff,OAr),e(Ff,Tve),e(Tve,XAr),e(Ff,VAr),e(Nr,zAr),e(Nr,sL),e(sL,WAr),e(sL,Fve),e(Fve,QAr),e(sL,HAr),e(Nr,UAr),e(Nr,Rt),g(lL,Rt,null),e(Rt,JAr),e(Rt,Cve),e(Cve,YAr),e(Rt,KAr),e(Rt,Cf),e(Cf,ZAr),e(Cf,Mve),e(Mve,e0r),e(Cf,o0r),e(Cf,Eve),e(Eve,r0r),e(Cf,t0r),e(Rt,a0r),e(Rt,yve),e(yve,n0r),e(Rt,s0r),g(iL,Rt,null),e(Nr,l0r),e(Nr,Do),g(dL,Do,null),e(Do,i0r),e(Do,wve),e(wve,d0r),e(Do,c0r),e(Do,$n),e($n,f0r),e($n,Ave),e(Ave,m0r),e($n,g0r),e($n,Lve),e(Lve,h0r),e($n,p0r),e($n,Bve),e(Bve,_0r),e($n,u0r),e(Do,b0r),e(Do,xve),e(xve,CM),e(CM,kve),e(kve,v0r),e(CM,T0r),e(CM,BV),e(BV,F0r),e(CM,C0r),e(Do,M0r),e(Do,Rve),e(Rve,E0r),e(Do,y0r),g(cL,Do,null),Exe=!0},p(c,[u]){const fL={};u&2&&(fL.$$scope={dirty:u,ctx:c}),Bf.$set(fL);const Sve={};u&2&&(Sve.$$scope={dirty:u,ctx:c}),fh.$set(Sve);const Pve={};u&2&&(Pve.$$scope={dirty:u,ctx:c}),Ch.$set(Pve)},i(c){Exe||(h(ce.$$.fragment,c),h($a.$$.fragment,c),h(wE.$$.fragment,c),h(AE.$$.fragment,c),h(Bf.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(NE.$$.fragment,c),h(qE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(WE.$$.fragment,c),h(fh.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(ZE.$$.fragment,c),h(Ch.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(F3.$$.fragment,c),h(C3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(B3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(D3.$$.fragment,c),h(j3.$$.fragment,c),h(q3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(X3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Dy.$$.fragment,c),h(jy.$$.fragment,c),h(Ny.$$.fragment,c),h(qy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(jw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(E6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(L6.$$.fragment,c),h(B6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(D6.$$.fragment,c),h(j6.$$.fragment,c),h(N6.$$.fragment,c),h(q6.$$.fragment,c),h(O6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(DA.$$.fragment,c),h(jA.$$.fragment,c),h(NA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(D0.$$.fragment,c),h(N0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),Exe=!0)},o(c){p(ce.$$.fragment,c),p($a.$$.fragment,c),p(wE.$$.fragment,c),p(AE.$$.fragment,c),p(Bf.$$.fragment,c),p(LE.$$.fragment,c),p(BE.$$.fragment,c),p(RE.$$.fragment,c),p(SE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(NE.$$.fragment,c),p(qE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(XE.$$.fragment,c),p(WE.$$.fragment,c),p(fh.$$.fragment,c),p(QE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(ZE.$$.fragment,c),p(Ch.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(n3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(F3.$$.fragment,c),p(C3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(B3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(D3.$$.fragment,c),p(j3.$$.fragment,c),p(q3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(X3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Dy.$$.fragment,c),p(jy.$$.fragment,c),p(Ny.$$.fragment,c),p(qy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(jw.$$.fragment,c),p(Nw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Zw.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(s6.$$.fragment,c),p(l6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(g6.$$.fragment,c),p(h6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(T6.$$.fragment,c),p(F6.$$.fragment,c),p(C6.$$.fragment,c),p(E6.$$.fragment,c),p(y6.$$.fragment,c),p(w6.$$.fragment,c),p(L6.$$.fragment,c),p(B6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(R6.$$.fragment,c),p(S6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(D6.$$.fragment,c),p(j6.$$.fragment,c),p(N6.$$.fragment,c),p(q6.$$.fragment,c),p(O6.$$.fragment,c),p(X6.$$.fragment,c),p(V6.$$.fragment,c),p(z6.$$.fragment,c),p(W6.$$.fragment,c),p(Q6.$$.fragment,c),p(U6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(DA.$$.fragment,c),p(jA.$$.fragment,c),p(NA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(D0.$$.fragment,c),p(N0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),Exe=!1},d(c){t(J),c&&t(Be),c&&t(ie),_(ce),c&&t(Ef),c&&t(sa),c&&t(ye),c&&t(io),c&&t(wf),_($a,c),c&&t(co),c&&t(ge),c&&t(Oo),c&&t(Ia),c&&t(y7e),c&&t($i),_(wE),c&&t(w7e),c&&t(qn),c&&t(A7e),_(AE,c),c&&t(L7e),c&&t(m8),c&&t(B7e),_(Bf,c),c&&t(x7e),c&&t(Ii),_(LE),c&&t(k7e),c&&t(Xo),_(BE),_(RE),_(SE),_(PE),c&&t(R7e),c&&t(ji),_($E),c&&t(S7e),c&&t(Vo),_(IE),_(NE),_(qE),_(GE),c&&t(P7e),c&&t(Ni),_(OE),c&&t($7e),c&&t(zo),_(XE),_(WE),_(fh),_(QE),_(HE),c&&t(I7e),c&&t(qi),_(UE),c&&t(D7e),c&&t(Wo),_(JE),_(ZE),_(Ch),_(e3),_(o3),c&&t(j7e),c&&t(Oi),_(r3),c&&t(N7e),c&&t(Qo),_(t3),_(n3),_(s3),_(l3),_(i3),c&&t(q7e),c&&t(zi),_(d3),c&&t(G7e),c&&t(Ho),_(c3),_(m3),_(g3),_(h3),_(p3),c&&t(O7e),c&&t(Hi),_(_3),c&&t(X7e),c&&t(Uo),_(u3),_(v3),_(T3),_(F3),_(C3),c&&t(V7e),c&&t(Yi),_(M3),c&&t(z7e),c&&t(Jo),_(E3),_(w3),_(A3),_(L3),_(B3),c&&t(W7e),c&&t(ed),_(x3),c&&t(Q7e),c&&t(Yo),_(k3),_(S3),_(P3),_($3),_(I3),c&&t(H7e),c&&t(td),_(D3),c&&t(U7e),c&&t(Ko),_(j3),_(q3),_(G3),_(O3),_(X3),c&&t(J7e),c&&t(sd),_(V3),c&&t(Y7e),c&&t(Zo),_(z3),_(Q3),_(H3),_(U3),_(J3),c&&t(K7e),c&&t(dd),_(Y3),c&&t(Z7e),c&&t(er),_(K3),_(ey),_(oy),_(ry),_(ty),c&&t(eBe),c&&t(md),_(ay),c&&t(oBe),c&&t(or),_(ny),_(ly),_(iy),_(dy),_(cy),c&&t(rBe),c&&t(pd),_(fy),c&&t(tBe),c&&t(rr),_(my),_(hy),_(py),_(_y),_(uy),c&&t(aBe),c&&t(bd),_(by),c&&t(nBe),c&&t(tr),_(vy),_(Fy),_(Cy),_(My),_(Ey),c&&t(sBe),c&&t(Fd),_(yy),c&&t(lBe),c&&t(ar),_(wy),_(Ly),_(By),_(xy),_(ky),c&&t(iBe),c&&t(Ed),_(Ry),c&&t(dBe),c&&t(nr),_(Sy),_($y),_(Iy),_(Dy),_(jy),c&&t(cBe),c&&t(Ad),_(Ny),c&&t(fBe),c&&t(sr),_(qy),_(Oy),_(Xy),_(Vy),_(zy),c&&t(mBe),c&&t(xd),_(Wy),c&&t(gBe),c&&t(lr),_(Qy),_(Uy),_(Jy),_(Yy),_(Ky),c&&t(hBe),c&&t(Sd),_(Zy),c&&t(pBe),c&&t(ir),_(ew),_(rw),_(tw),_(aw),_(nw),c&&t(_Be),c&&t(Id),_(sw),c&&t(uBe),c&&t(dr),_(lw),_(dw),_(cw),_(fw),_(gw),c&&t(bBe),c&&t(Nd),_(hw),c&&t(vBe),c&&t(cr),_(pw),_(uw),_(bw),_(vw),_(Tw),c&&t(TBe),c&&t(Od),_(Fw),c&&t(FBe),c&&t(fr),_(Cw),_(Ew),_(yw),_(ww),_(Aw),c&&t(CBe),c&&t(Wd),_(Lw),c&&t(MBe),c&&t(mr),_(Bw),_(kw),_(Rw),_(Sw),_(Pw),c&&t(EBe),c&&t(Ud),_($w),c&&t(yBe),c&&t(gr),_(Iw),_(jw),_(Nw),_(qw),_(Gw),c&&t(wBe),c&&t(Kd),_(Ow),c&&t(ABe),c&&t(hr),_(Xw),_(zw),_(Ww),_(Qw),_(Uw),c&&t(LBe),c&&t(oc),_(Jw),c&&t(BBe),c&&t(pr),_(Yw),_(Zw),_(e6),_(o6),_(r6),c&&t(xBe),c&&t(ac),_(t6),c&&t(kBe),c&&t(_r),_(a6),_(s6),_(l6),_(i6),_(d6),c&&t(RBe),c&&t(lc),_(c6),c&&t(SBe),c&&t(ur),_(f6),_(g6),_(h6),_(p6),_(_6),c&&t(PBe),c&&t(cc),_(u6),c&&t($Be),c&&t(br),_(b6),_(T6),_(F6),_(C6),_(E6),c&&t(IBe),c&&t(gc),_(y6),c&&t(DBe),c&&t(vr),_(w6),_(L6),_(B6),_(x6),_(k6),c&&t(jBe),c&&t(_c),_(R6),c&&t(NBe),c&&t(Tr),_(S6),_($6),_(I6),_(D6),_(j6),c&&t(qBe),c&&t(vc),_(N6),c&&t(GBe),c&&t(Fr),_(q6),_(O6),_(X6),_(V6),_(z6),c&&t(OBe),c&&t(Cc),_(W6),c&&t(XBe),c&&t(Cr),_(Q6),_(U6),_(J6),_(Y6),_(K6),c&&t(VBe),c&&t(yc),_(Z6),c&&t(zBe),c&&t(Mr),_(eA),_(rA),_(tA),_(aA),_(nA),c&&t(WBe),c&&t(Lc),_(sA),c&&t(QBe),c&&t(Er),_(lA),_(dA),_(cA),_(fA),_(mA),c&&t(HBe),c&&t(kc),_(gA),c&&t(UBe),c&&t(yr),_(hA),_(_A),_(uA),_(bA),_(vA),c&&t(JBe),c&&t(Pc),_(TA),c&&t(YBe),c&&t(wr),_(FA),_(MA),_(EA),_(yA),_(wA),c&&t(KBe),c&&t(Dc),_(AA),c&&t(ZBe),c&&t(Ar),_(LA),_(xA),_(kA),_(RA),_(SA),c&&t(exe),c&&t(qc),_(PA),c&&t(oxe),c&&t(Lr),_($A),_(DA),_(jA),_(NA),_(qA),c&&t(rxe),c&&t(Xc),_(GA),c&&t(txe),c&&t(Br),_(OA),_(VA),_(zA),_(WA),_(QA),c&&t(axe),c&&t(Wc),_(HA),c&&t(nxe),c&&t(xr),_(UA),_(YA),_(KA),_(ZA),_(e0),c&&t(sxe),c&&t(Uc),_(o0),c&&t(lxe),c&&t(kr),_(r0),_(a0),_(n0),_(s0),_(l0),c&&t(ixe),c&&t(Kc),_(i0),c&&t(dxe),c&&t(Rr),_(d0),_(f0),_(m0),_(g0),_(h0),c&&t(cxe),c&&t(of),_(p0),c&&t(fxe),c&&t(Sr),_(_0),_(b0),_(v0),_(T0),_(F0),c&&t(mxe),c&&t(af),_(C0),c&&t(gxe),c&&t(Pr),_(M0),_(y0),_(w0),_(A0),_(L0),c&&t(hxe),c&&t(lf),_(B0),c&&t(pxe),c&&t($r),_(x0),_(R0),_(S0),_(P0),_($0),c&&t(_xe),c&&t(ff),_(I0),c&&t(uxe),c&&t(Ir),_(D0),_(N0),_(q0),_(G0),_(O0),c&&t(bxe),c&&t(hf),_(X0),c&&t(vxe),c&&t(Dr),_(V0),_(W0),_(Q0),_(H0),_(U0),c&&t(Txe),c&&t(uf),_(J0),c&&t(Fxe),c&&t(jr),_(Y0),_(Z0),_(eL),_(oL),_(tL),c&&t(Cxe),c&&t(Tf),_(aL),c&&t(Mxe),c&&t(Nr),_(nL),_(lL),_(iL),_(dL),_(cL)}}}const b5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function v5t(Ai,J,Be){let{fw:ie}=J;return Ai.$$set=me=>{"fw"in me&&Be(0,ie=me.fw)},[ie]}class w5t extends c5t{constructor(J){super();f5t(this,J,v5t,u5t,m5t,{fw:0})}}export{w5t as default,b5t as metadata};
