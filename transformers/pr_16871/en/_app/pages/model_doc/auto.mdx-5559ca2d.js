import{S as J3t,i as Y3t,s as K3t,e as a,k as l,w as f,t as o,M as Z3t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as eCt}from"../../chunks/vendor-6b77c823.js";import{T as n$r}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function oCt(Nf){let ee,io,ce,Ce,lo,he,Me,Xo,ji,jf,fa,Di,Gi,k5,Df,xe,co,Oi,On,S5,Vn,Xn,R5,Vi,zn,B5,Xi,Gf,Da;return{c(){ee=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),ji=a("code"),jf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Gi=o('"new-model"'),k5=o(")."),Df=l(),xe=a("p"),co=o("Likewise, if your "),Oi=a("code"),On=o("NewModel"),S5=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),R5=o(`, make sure its
`),Vi=a("code"),zn=o("config_class"),B5=o(` attribute is set to the same class you use when registering the model (here
`),Xi=a("code"),Gf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){ee=n(fo,"P",{});var ue=s(ee);io=r(ue,"If your "),ce=n(ue,"CODE",{});var C9=s(ce);Ce=r(C9,"NewModelConfig"),C9.forEach(t),lo=r(ue," is a subclass of "),he=n(ue,"CODE",{});var zi=s(he);Me=r(zi,"PretrainedConfig"),zi.forEach(t),Xo=r(ue,`, make sure its
`),ji=n(ue,"CODE",{});var w9=s(ji);jf=r(w9,"model_type"),w9.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Di=n(ue,"CODE",{});var A9=s(Di);Gi=r(A9,'"new-model"'),A9.forEach(t),k5=r(ue,")."),ue.forEach(t),Df=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Oi=n(zo,"CODE",{});var Ga=s(Oi);On=r(Ga,"NewModel"),Ga.forEach(t),S5=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var y9=s(Vn);Xn=r(y9,"PreTrainedModel"),y9.forEach(t),R5=r(zo,`, make sure its
`),Vi=n(zo,"CODE",{});var Of=s(Vi);zn=r(Of,"config_class"),Of.forEach(t),B5=r(zo,` attribute is set to the same class you use when registering the model (here
`),Xi=n(zo,"CODE",{});var L9=s(Xi);Gf=r(L9,"NewModelConfig"),L9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,ee,ue),e(ee,io),e(ee,ce),e(ce,Ce),e(ee,lo),e(ee,he),e(he,Me),e(ee,Xo),e(ee,ji),e(ji,jf),e(ee,fa),e(ee,Di),e(Di,Gi),e(ee,k5),b(fo,Df,ue),b(fo,xe,ue),e(xe,co),e(xe,Oi),e(Oi,On),e(xe,S5),e(xe,Vn),e(Vn,Xn),e(xe,R5),e(xe,Vi),e(Vi,zn),e(xe,B5),e(xe,Xi),e(Xi,Gf),e(xe,Da)},d(fo){fo&&t(ee),fo&&t(Df),fo&&t(xe)}}}function rCt(Nf){let ee,io,ce,Ce,lo;return{c(){ee=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){ee=n(he,"P",{});var Me=s(ee);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,ee,Me),e(ee,io),e(ee,ce),e(ce,Ce),e(ee,lo)},d(he){he&&t(ee)}}}function tCt(Nf){let ee,io,ce,Ce,lo;return{c(){ee=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){ee=n(he,"P",{});var Me=s(ee);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,ee,Me),e(ee,io),e(ee,ce),e(ce,Ce),e(ee,lo)},d(he){he&&t(ee)}}}function aCt(Nf){let ee,io,ce,Ce,lo,he,Me,Xo,ji,jf,fa,Di,Gi,k5,Df,xe,co,Oi,On,S5,Vn,Xn,R5,Vi,zn,B5,Xi,Gf,Da,fo,ue,C9,zi,w9,A9,zo,Ga,y9,Of,L9,eqe,GRe,Qi,Vf,uY,P5,oqe,bY,rqe,ORe,Qn,tqe,vY,aqe,nqe,FY,sqe,lqe,VRe,$5,XRe,x9,iqe,zRe,Xf,QRe,Wi,zf,TY,I5,dqe,MY,cqe,WRe,Qo,q5,fqe,N5,mqe,k9,gqe,hqe,pqe,j5,_qe,EY,uqe,bqe,vqe,mo,D5,Fqe,CY,Tqe,Mqe,Hi,Eqe,wY,Cqe,wqe,AY,Aqe,yqe,Lqe,v,Qf,yY,xqe,kqe,S9,Sqe,Rqe,Bqe,Wf,LY,Pqe,$qe,R9,Iqe,qqe,Nqe,Hf,xY,jqe,Dqe,B9,Gqe,Oqe,Vqe,Uf,kY,Xqe,zqe,P9,Qqe,Wqe,Hqe,Jf,SY,Uqe,Jqe,$9,Yqe,Kqe,Zqe,Yf,RY,eNe,oNe,I9,rNe,tNe,aNe,Kf,BY,nNe,sNe,q9,lNe,iNe,dNe,Zf,PY,cNe,fNe,N9,mNe,gNe,hNe,em,$Y,pNe,_Ne,j9,uNe,bNe,vNe,om,IY,FNe,TNe,D9,MNe,ENe,CNe,rm,qY,wNe,ANe,G9,yNe,LNe,xNe,tm,NY,kNe,SNe,O9,RNe,BNe,PNe,am,jY,$Ne,INe,V9,qNe,NNe,jNe,nm,DY,DNe,GNe,X9,ONe,VNe,XNe,sm,GY,zNe,QNe,z9,WNe,HNe,UNe,lm,OY,JNe,YNe,Q9,KNe,ZNe,eje,im,VY,oje,rje,W9,tje,aje,nje,dm,XY,sje,lje,H9,ije,dje,cje,cm,zY,fje,mje,U9,gje,hje,pje,fm,QY,_je,uje,J9,bje,vje,Fje,mm,WY,Tje,Mje,Y9,Eje,Cje,wje,gm,HY,Aje,yje,K9,Lje,xje,kje,hm,UY,Sje,Rje,Z9,Bje,Pje,$je,pm,JY,Ije,qje,ex,Nje,jje,Dje,_m,YY,Gje,Oje,ox,Vje,Xje,zje,um,KY,Qje,Wje,rx,Hje,Uje,Jje,bm,ZY,Yje,Kje,tx,Zje,eDe,oDe,vm,eK,rDe,tDe,ax,aDe,nDe,sDe,Fm,oK,lDe,iDe,nx,dDe,cDe,fDe,Tm,rK,mDe,gDe,sx,hDe,pDe,_De,Mm,tK,uDe,bDe,lx,vDe,FDe,TDe,Em,aK,MDe,EDe,ix,CDe,wDe,ADe,Cm,nK,yDe,LDe,dx,xDe,kDe,SDe,wm,sK,RDe,BDe,cx,PDe,$De,IDe,Am,lK,qDe,NDe,fx,jDe,DDe,GDe,ym,iK,ODe,VDe,mx,XDe,zDe,QDe,Lm,dK,WDe,HDe,gx,UDe,JDe,YDe,xm,cK,KDe,ZDe,hx,eGe,oGe,rGe,km,fK,tGe,aGe,px,nGe,sGe,lGe,Sm,mK,iGe,dGe,_x,cGe,fGe,mGe,Rm,gK,gGe,hGe,ux,pGe,_Ge,uGe,Bm,hK,bGe,vGe,bx,FGe,TGe,MGe,Pm,pK,EGe,CGe,vx,wGe,AGe,yGe,$m,_K,LGe,xGe,Fx,kGe,SGe,RGe,Im,uK,BGe,PGe,Tx,$Ge,IGe,qGe,qm,bK,NGe,jGe,Mx,DGe,GGe,OGe,Nm,vK,VGe,XGe,Ex,zGe,QGe,WGe,jm,FK,HGe,UGe,Cx,JGe,YGe,KGe,Dm,TK,ZGe,eOe,wx,oOe,rOe,tOe,Gm,MK,aOe,nOe,Ax,sOe,lOe,iOe,Om,EK,dOe,cOe,yx,fOe,mOe,gOe,Vm,CK,hOe,pOe,Lx,_Oe,uOe,bOe,Xm,wK,vOe,FOe,xx,TOe,MOe,EOe,zm,AK,COe,wOe,kx,AOe,yOe,LOe,Qm,yK,xOe,kOe,Sx,SOe,ROe,BOe,Wm,LK,POe,$Oe,Rx,IOe,qOe,NOe,Hm,xK,jOe,DOe,Bx,GOe,OOe,VOe,Um,kK,XOe,zOe,Px,QOe,WOe,HOe,Jm,SK,UOe,JOe,$x,YOe,KOe,ZOe,Ym,RK,eVe,oVe,Ix,rVe,tVe,aVe,Km,BK,nVe,sVe,qx,lVe,iVe,dVe,Zm,PK,cVe,fVe,Nx,mVe,gVe,hVe,eg,$K,pVe,_Ve,jx,uVe,bVe,vVe,og,IK,FVe,TVe,Dx,MVe,EVe,CVe,rg,qK,wVe,AVe,Gx,yVe,LVe,xVe,tg,NK,kVe,SVe,Ox,RVe,BVe,PVe,ag,jK,$Ve,IVe,Vx,qVe,NVe,jVe,ng,DK,DVe,GVe,Xx,OVe,VVe,XVe,sg,GK,zVe,QVe,zx,WVe,HVe,UVe,lg,OK,JVe,YVe,Qx,KVe,ZVe,eXe,ig,VK,oXe,rXe,Wx,tXe,aXe,nXe,dg,XK,sXe,lXe,Hx,iXe,dXe,cXe,cg,zK,fXe,mXe,Ux,gXe,hXe,pXe,fg,QK,_Xe,uXe,Jx,bXe,vXe,FXe,mg,WK,TXe,MXe,Yx,EXe,CXe,wXe,gg,HK,AXe,yXe,Kx,LXe,xXe,kXe,hg,UK,SXe,RXe,Zx,BXe,PXe,$Xe,pg,JK,IXe,qXe,ek,NXe,jXe,DXe,_g,YK,GXe,OXe,ok,VXe,XXe,zXe,ug,KK,QXe,WXe,rk,HXe,UXe,JXe,bg,ZK,YXe,KXe,tk,ZXe,eze,oze,vg,eZ,rze,tze,ak,aze,nze,sze,Fg,oZ,lze,ize,nk,dze,cze,fze,Tg,rZ,mze,gze,sk,hze,pze,_ze,Mg,tZ,uze,bze,lk,vze,Fze,Tze,Eg,aZ,Mze,Eze,ik,Cze,wze,Aze,Cg,nZ,yze,Lze,dk,xze,kze,Sze,wg,sZ,Rze,Bze,ck,Pze,$ze,Ize,Ag,lZ,qze,Nze,fk,jze,Dze,Gze,yg,iZ,Oze,Vze,mk,Xze,zze,Qze,Lg,dZ,Wze,Hze,gk,Uze,Jze,Yze,xg,cZ,Kze,Zze,hk,eQe,oQe,rQe,kg,fZ,tQe,aQe,pk,nQe,sQe,lQe,Sg,mZ,iQe,dQe,_k,cQe,fQe,mQe,Rg,gZ,gQe,hQe,uk,pQe,_Qe,uQe,Bg,hZ,bQe,vQe,bk,FQe,TQe,MQe,Pg,pZ,EQe,CQe,vk,wQe,AQe,yQe,$g,_Z,LQe,xQe,Fk,kQe,SQe,RQe,Ig,uZ,BQe,PQe,Tk,$Qe,IQe,qQe,qg,bZ,NQe,jQe,Mk,DQe,GQe,OQe,Ng,vZ,VQe,XQe,Ek,zQe,QQe,WQe,jg,FZ,HQe,UQe,Ck,JQe,YQe,KQe,TZ,ZQe,eWe,G5,oWe,Dg,O5,rWe,MZ,tWe,HRe,Ui,Gg,EZ,V5,aWe,CZ,nWe,URe,Wo,X5,sWe,z5,lWe,wk,iWe,dWe,cWe,Q5,fWe,wZ,mWe,gWe,hWe,go,W5,pWe,AZ,_We,uWe,Oa,bWe,yZ,vWe,FWe,LZ,TWe,MWe,xZ,EWe,CWe,wWe,E,Wn,kZ,AWe,yWe,Ak,LWe,xWe,yk,kWe,SWe,RWe,Hn,SZ,BWe,PWe,Lk,$We,IWe,xk,qWe,NWe,jWe,Un,RZ,DWe,GWe,kk,OWe,VWe,Sk,XWe,zWe,QWe,Og,BZ,WWe,HWe,Rk,UWe,JWe,YWe,Jn,PZ,KWe,ZWe,Bk,eHe,oHe,Pk,rHe,tHe,aHe,Vg,$Z,nHe,sHe,$k,lHe,iHe,dHe,Xg,IZ,cHe,fHe,Ik,mHe,gHe,hHe,zg,qZ,pHe,_He,qk,uHe,bHe,vHe,Yn,NZ,FHe,THe,Nk,MHe,EHe,jk,CHe,wHe,AHe,Kn,jZ,yHe,LHe,Dk,xHe,kHe,Gk,SHe,RHe,BHe,Zn,DZ,PHe,$He,Ok,IHe,qHe,Vk,NHe,jHe,DHe,Qg,GZ,GHe,OHe,Xk,VHe,XHe,zHe,Wg,OZ,QHe,WHe,zk,HHe,UHe,JHe,es,VZ,YHe,KHe,Qk,ZHe,eUe,Wk,oUe,rUe,tUe,Hg,XZ,aUe,nUe,Hk,sUe,lUe,iUe,os,zZ,dUe,cUe,Uk,fUe,mUe,Jk,gUe,hUe,pUe,rs,QZ,_Ue,uUe,Yk,bUe,vUe,Kk,FUe,TUe,MUe,ts,WZ,EUe,CUe,Zk,wUe,AUe,HZ,yUe,LUe,xUe,Ug,UZ,kUe,SUe,eS,RUe,BUe,PUe,as,JZ,$Ue,IUe,oS,qUe,NUe,rS,jUe,DUe,GUe,ns,YZ,OUe,VUe,tS,XUe,zUe,aS,QUe,WUe,HUe,ss,KZ,UUe,JUe,nS,YUe,KUe,sS,ZUe,eJe,oJe,ls,ZZ,rJe,tJe,lS,aJe,nJe,iS,sJe,lJe,iJe,is,eee,dJe,cJe,dS,fJe,mJe,cS,gJe,hJe,pJe,Jg,oee,_Je,uJe,fS,bJe,vJe,FJe,ds,ree,TJe,MJe,mS,EJe,CJe,gS,wJe,AJe,yJe,Yg,tee,LJe,xJe,hS,kJe,SJe,RJe,cs,aee,BJe,PJe,pS,$Je,IJe,_S,qJe,NJe,jJe,fs,nee,DJe,GJe,uS,OJe,VJe,bS,XJe,zJe,QJe,ms,see,WJe,HJe,vS,UJe,JJe,FS,YJe,KJe,ZJe,gs,lee,eYe,oYe,TS,rYe,tYe,MS,aYe,nYe,sYe,hs,iee,lYe,iYe,ES,dYe,cYe,CS,fYe,mYe,gYe,Kg,dee,hYe,pYe,wS,_Ye,uYe,bYe,ps,cee,vYe,FYe,AS,TYe,MYe,yS,EYe,CYe,wYe,_s,fee,AYe,yYe,LS,LYe,xYe,xS,kYe,SYe,RYe,us,mee,BYe,PYe,kS,$Ye,IYe,SS,qYe,NYe,jYe,bs,gee,DYe,GYe,RS,OYe,VYe,BS,XYe,zYe,QYe,vs,hee,WYe,HYe,PS,UYe,JYe,$S,YYe,KYe,ZYe,Fs,pee,eKe,oKe,IS,rKe,tKe,qS,aKe,nKe,sKe,Zg,_ee,lKe,iKe,NS,dKe,cKe,fKe,Ts,uee,mKe,gKe,jS,hKe,pKe,DS,_Ke,uKe,bKe,eh,bee,vKe,FKe,GS,TKe,MKe,EKe,oh,vee,CKe,wKe,OS,AKe,yKe,LKe,Ms,Fee,xKe,kKe,VS,SKe,RKe,XS,BKe,PKe,$Ke,Es,Tee,IKe,qKe,zS,NKe,jKe,QS,DKe,GKe,OKe,rh,Mee,VKe,XKe,WS,zKe,QKe,WKe,Cs,Eee,HKe,UKe,HS,JKe,YKe,US,KKe,ZKe,eZe,ws,Cee,oZe,rZe,JS,tZe,aZe,YS,nZe,sZe,lZe,As,wee,iZe,dZe,KS,cZe,fZe,ZS,mZe,gZe,hZe,ys,Aee,pZe,_Ze,eR,uZe,bZe,oR,vZe,FZe,TZe,Ls,yee,MZe,EZe,rR,CZe,wZe,tR,AZe,yZe,LZe,th,Lee,xZe,kZe,aR,SZe,RZe,BZe,ah,xee,PZe,$Ze,nR,IZe,qZe,NZe,nh,kee,jZe,DZe,sR,GZe,OZe,VZe,sh,See,XZe,zZe,lR,QZe,WZe,HZe,xs,Ree,UZe,JZe,iR,YZe,KZe,dR,ZZe,eeo,oeo,lh,Bee,reo,teo,cR,aeo,neo,seo,ks,Pee,leo,ieo,fR,deo,ceo,mR,feo,meo,geo,Ss,$ee,heo,peo,gR,_eo,ueo,hR,beo,veo,Feo,Rs,Iee,Teo,Meo,pR,Eeo,Ceo,_R,weo,Aeo,yeo,Bs,qee,Leo,xeo,uR,keo,Seo,bR,Reo,Beo,Peo,Ps,Nee,$eo,Ieo,vR,qeo,Neo,FR,jeo,Deo,Geo,$s,jee,Oeo,Veo,TR,Xeo,zeo,MR,Qeo,Weo,Heo,ih,Dee,Ueo,Jeo,ER,Yeo,Keo,Zeo,dh,Gee,eoo,ooo,CR,roo,too,aoo,Is,Oee,noo,soo,wR,loo,ioo,AR,doo,coo,foo,qs,Vee,moo,goo,yR,hoo,poo,LR,_oo,uoo,boo,Ns,Xee,voo,Foo,xR,Too,Moo,kR,Eoo,Coo,woo,ch,zee,Aoo,yoo,SR,Loo,xoo,koo,fh,Qee,Soo,Roo,RR,Boo,Poo,$oo,mh,Wee,Ioo,qoo,BR,Noo,joo,Doo,gh,Hee,Goo,Ooo,PR,Voo,Xoo,zoo,hh,Uee,Qoo,Woo,$R,Hoo,Uoo,Joo,js,Jee,Yoo,Koo,IR,Zoo,ero,qR,oro,rro,tro,ph,Yee,aro,nro,NR,sro,lro,iro,_h,Kee,dro,cro,jR,fro,mro,gro,Ds,Zee,hro,pro,DR,_ro,uro,GR,bro,vro,Fro,Gs,eoe,Tro,Mro,OR,Ero,Cro,VR,wro,Aro,yro,ooe,Lro,xro,H5,kro,uh,U5,Sro,roe,Rro,JRe,Ji,bh,toe,J5,Bro,aoe,Pro,YRe,Ho,Y5,$ro,K5,Iro,XR,qro,Nro,jro,Z5,Dro,noe,Gro,Oro,Vro,$e,e3,Xro,soe,zro,Qro,Va,Wro,loe,Hro,Uro,ioe,Jro,Yro,doe,Kro,Zro,eto,J,vh,coe,oto,rto,zR,tto,ato,nto,Fh,foe,sto,lto,QR,ito,dto,cto,Th,moe,fto,mto,WR,gto,hto,pto,Mh,goe,_to,uto,HR,bto,vto,Fto,Eh,hoe,Tto,Mto,UR,Eto,Cto,wto,Ch,poe,Ato,yto,JR,Lto,xto,kto,wh,_oe,Sto,Rto,YR,Bto,Pto,$to,Ah,uoe,Ito,qto,KR,Nto,jto,Dto,yh,boe,Gto,Oto,ZR,Vto,Xto,zto,Lh,voe,Qto,Wto,eB,Hto,Uto,Jto,xh,Foe,Yto,Kto,oB,Zto,eao,oao,kh,Toe,rao,tao,rB,aao,nao,sao,Sh,Moe,lao,iao,tB,dao,cao,fao,Rh,Eoe,mao,gao,aB,hao,pao,_ao,Bh,Coe,uao,bao,nB,vao,Fao,Tao,Ph,woe,Mao,Eao,sB,Cao,wao,Aao,$h,Aoe,yao,Lao,lB,xao,kao,Sao,Ih,yoe,Rao,Bao,iB,Pao,$ao,Iao,qh,Loe,qao,Nao,dB,jao,Dao,Gao,Nh,xoe,Oao,Vao,cB,Xao,zao,Qao,jh,Wao,koe,Hao,Uao,o3,Jao,Dh,r3,Yao,Soe,Kao,KRe,Yi,Gh,Roe,t3,Zao,Boe,eno,ZRe,Uo,a3,ono,n3,rno,fB,tno,ano,nno,s3,sno,Poe,lno,ino,dno,Ie,l3,cno,$oe,fno,mno,Ki,gno,Ioe,hno,pno,qoe,_no,uno,bno,ke,Oh,Noe,vno,Fno,mB,Tno,Mno,Eno,Vh,joe,Cno,wno,gB,Ano,yno,Lno,Xh,Doe,xno,kno,hB,Sno,Rno,Bno,zh,Goe,Pno,$no,pB,Ino,qno,Nno,Qh,Ooe,jno,Dno,_B,Gno,Ono,Vno,Wh,Voe,Xno,zno,uB,Qno,Wno,Hno,Hh,Xoe,Uno,Jno,bB,Yno,Kno,Zno,Uh,zoe,eso,oso,vB,rso,tso,aso,Jh,nso,Qoe,sso,lso,i3,iso,Yh,d3,dso,Woe,cso,eBe,Zi,Kh,Hoe,c3,fso,Uoe,mso,oBe,Jo,f3,gso,ed,hso,FB,pso,_so,TB,uso,bso,vso,m3,Fso,Joe,Tso,Mso,Eso,Xr,g3,Cso,Yoe,wso,Aso,od,yso,Koe,Lso,xso,MB,kso,Sso,Rso,Zoe,Bso,Pso,h3,$so,qe,p3,Iso,ere,qso,Nso,Xa,jso,ore,Dso,Gso,rre,Oso,Vso,tre,Xso,zso,Qso,T,Zh,are,Wso,Hso,EB,Uso,Jso,Yso,ep,nre,Kso,Zso,CB,elo,olo,rlo,op,sre,tlo,alo,wB,nlo,slo,llo,rp,lre,ilo,dlo,AB,clo,flo,mlo,tp,ire,glo,hlo,yB,plo,_lo,ulo,ap,dre,blo,vlo,LB,Flo,Tlo,Mlo,np,cre,Elo,Clo,xB,wlo,Alo,ylo,sp,fre,Llo,xlo,kB,klo,Slo,Rlo,lp,mre,Blo,Plo,SB,$lo,Ilo,qlo,ip,gre,Nlo,jlo,RB,Dlo,Glo,Olo,dp,hre,Vlo,Xlo,BB,zlo,Qlo,Wlo,cp,pre,Hlo,Ulo,PB,Jlo,Ylo,Klo,fp,_re,Zlo,eio,$B,oio,rio,tio,mp,ure,aio,nio,IB,sio,lio,iio,gp,bre,dio,cio,qB,fio,mio,gio,hp,vre,hio,pio,NB,_io,uio,bio,pp,Fre,vio,Fio,jB,Tio,Mio,Eio,_p,Tre,Cio,wio,DB,Aio,yio,Lio,up,Mre,xio,kio,GB,Sio,Rio,Bio,bp,Ere,Pio,$io,OB,Iio,qio,Nio,vp,Cre,jio,Dio,VB,Gio,Oio,Vio,Fp,wre,Xio,zio,XB,Qio,Wio,Hio,Tp,Are,Uio,Jio,zB,Yio,Kio,Zio,Mp,yre,edo,odo,QB,rdo,tdo,ado,Ep,Lre,ndo,sdo,WB,ldo,ido,ddo,Cp,xre,cdo,fdo,HB,mdo,gdo,hdo,wp,kre,pdo,_do,UB,udo,bdo,vdo,Ap,Sre,Fdo,Tdo,JB,Mdo,Edo,Cdo,yp,Rre,wdo,Ado,YB,ydo,Ldo,xdo,Lp,Bre,kdo,Sdo,KB,Rdo,Bdo,Pdo,Os,Pre,$do,Ido,ZB,qdo,Ndo,eP,jdo,Ddo,Gdo,xp,$re,Odo,Vdo,oP,Xdo,zdo,Qdo,kp,Ire,Wdo,Hdo,rP,Udo,Jdo,Ydo,Sp,qre,Kdo,Zdo,tP,eco,oco,rco,Rp,Nre,tco,aco,aP,nco,sco,lco,Bp,jre,ico,dco,nP,cco,fco,mco,Pp,Dre,gco,hco,sP,pco,_co,uco,$p,Gre,bco,vco,lP,Fco,Tco,Mco,Ip,Ore,Eco,Cco,iP,wco,Aco,yco,qp,Vre,Lco,xco,dP,kco,Sco,Rco,Np,Xre,Bco,Pco,cP,$co,Ico,qco,jp,zre,Nco,jco,fP,Dco,Gco,Oco,Dp,Qre,Vco,Xco,mP,zco,Qco,Wco,Gp,Wre,Hco,Uco,gP,Jco,Yco,Kco,Op,Hre,Zco,efo,hP,ofo,rfo,tfo,Vp,Ure,afo,nfo,pP,sfo,lfo,ifo,Xp,Jre,dfo,cfo,_P,ffo,mfo,gfo,zp,Yre,hfo,pfo,uP,_fo,ufo,bfo,Qp,Kre,vfo,Ffo,bP,Tfo,Mfo,Efo,Wp,Zre,Cfo,wfo,vP,Afo,yfo,Lfo,Hp,ete,xfo,kfo,FP,Sfo,Rfo,Bfo,Up,ote,Pfo,$fo,TP,Ifo,qfo,Nfo,Jp,rte,jfo,Dfo,MP,Gfo,Ofo,Vfo,Yp,tte,Xfo,zfo,EP,Qfo,Wfo,Hfo,Kp,ate,Ufo,Jfo,CP,Yfo,Kfo,Zfo,Zp,nte,emo,omo,wP,rmo,tmo,amo,e_,ste,nmo,smo,AP,lmo,imo,dmo,o_,lte,cmo,fmo,yP,mmo,gmo,hmo,r_,ite,pmo,_mo,LP,umo,bmo,vmo,t_,dte,Fmo,Tmo,xP,Mmo,Emo,Cmo,a_,cte,wmo,Amo,kP,ymo,Lmo,xmo,n_,fte,kmo,Smo,SP,Rmo,Bmo,Pmo,s_,mte,$mo,Imo,RP,qmo,Nmo,jmo,l_,gte,Dmo,Gmo,BP,Omo,Vmo,Xmo,i_,hte,zmo,Qmo,PP,Wmo,Hmo,Umo,d_,pte,Jmo,Ymo,$P,Kmo,Zmo,ego,c_,_te,ogo,rgo,IP,tgo,ago,ngo,f_,ute,sgo,lgo,qP,igo,dgo,cgo,m_,bte,fgo,mgo,NP,ggo,hgo,pgo,g_,vte,_go,ugo,jP,bgo,vgo,Fgo,h_,Fte,Tgo,Mgo,DP,Ego,Cgo,wgo,p_,Tte,Ago,ygo,GP,Lgo,xgo,kgo,__,Mte,Sgo,Rgo,OP,Bgo,Pgo,$go,u_,Ete,Igo,qgo,VP,Ngo,jgo,Dgo,b_,Cte,Ggo,Ogo,XP,Vgo,Xgo,zgo,v_,wte,Qgo,Wgo,zP,Hgo,Ugo,Jgo,F_,Ate,Ygo,Kgo,QP,Zgo,eho,oho,T_,yte,rho,tho,WP,aho,nho,sho,M_,Lte,lho,iho,HP,dho,cho,fho,E_,xte,mho,gho,UP,hho,pho,_ho,C_,kte,uho,bho,JP,vho,Fho,Tho,w_,Ste,Mho,Eho,YP,Cho,who,Aho,A_,Rte,yho,Lho,KP,xho,kho,Sho,y_,Bte,Rho,Bho,ZP,Pho,$ho,Iho,L_,Pte,qho,Nho,e$,jho,Dho,Gho,x_,$te,Oho,Vho,o$,Xho,zho,Qho,k_,Ite,Who,Hho,r$,Uho,Jho,Yho,S_,qte,Kho,Zho,t$,epo,opo,rpo,R_,Nte,tpo,apo,a$,npo,spo,lpo,B_,jte,ipo,dpo,n$,cpo,fpo,mpo,P_,Dte,gpo,hpo,s$,ppo,_po,upo,$_,Gte,bpo,vpo,l$,Fpo,Tpo,Mpo,I_,Ote,Epo,Cpo,i$,wpo,Apo,ypo,q_,Vte,Lpo,xpo,d$,kpo,Spo,Rpo,N_,Bpo,Xte,Ppo,$po,zte,Ipo,qpo,Qte,Npo,jpo,_3,rBe,rd,j_,Wte,u3,Dpo,Hte,Gpo,tBe,Yo,b3,Opo,td,Vpo,c$,Xpo,zpo,f$,Qpo,Wpo,Hpo,v3,Upo,Ute,Jpo,Ypo,Kpo,zr,F3,Zpo,Jte,e_o,o_o,ad,r_o,Yte,t_o,a_o,m$,n_o,s_o,l_o,Kte,i_o,d_o,T3,c_o,Ne,M3,f_o,Zte,m_o,g_o,za,h_o,eae,p_o,__o,oae,u_o,b_o,rae,v_o,F_o,T_o,S,D_,tae,M_o,E_o,g$,C_o,w_o,A_o,G_,aae,y_o,L_o,h$,x_o,k_o,S_o,O_,nae,R_o,B_o,p$,P_o,$_o,I_o,V_,sae,q_o,N_o,_$,j_o,D_o,G_o,X_,lae,O_o,V_o,u$,X_o,z_o,Q_o,z_,iae,W_o,H_o,b$,U_o,J_o,Y_o,Q_,dae,K_o,Z_o,v$,euo,ouo,ruo,W_,cae,tuo,auo,F$,nuo,suo,luo,H_,fae,iuo,duo,T$,cuo,fuo,muo,U_,mae,guo,huo,M$,puo,_uo,uuo,J_,gae,buo,vuo,E$,Fuo,Tuo,Muo,Y_,hae,Euo,Cuo,C$,wuo,Auo,yuo,K_,pae,Luo,xuo,w$,kuo,Suo,Ruo,Z_,_ae,Buo,Puo,A$,$uo,Iuo,quo,eu,uae,Nuo,juo,y$,Duo,Guo,Ouo,ou,bae,Vuo,Xuo,L$,zuo,Quo,Wuo,ru,vae,Huo,Uuo,x$,Juo,Yuo,Kuo,tu,Fae,Zuo,e1o,k$,o1o,r1o,t1o,au,Tae,a1o,n1o,S$,s1o,l1o,i1o,nu,Mae,d1o,c1o,R$,f1o,m1o,g1o,su,Eae,h1o,p1o,B$,_1o,u1o,b1o,lu,Cae,v1o,F1o,P$,T1o,M1o,E1o,iu,wae,C1o,w1o,$$,A1o,y1o,L1o,du,Aae,x1o,k1o,I$,S1o,R1o,B1o,cu,yae,P1o,$1o,q$,I1o,q1o,N1o,fu,Lae,j1o,D1o,N$,G1o,O1o,V1o,mu,xae,X1o,z1o,j$,Q1o,W1o,H1o,gu,kae,U1o,J1o,D$,Y1o,K1o,Z1o,hu,Sae,ebo,obo,G$,rbo,tbo,abo,pu,Rae,nbo,sbo,O$,lbo,ibo,dbo,_u,Bae,cbo,fbo,V$,mbo,gbo,hbo,uu,Pae,pbo,_bo,X$,ubo,bbo,vbo,bu,$ae,Fbo,Tbo,z$,Mbo,Ebo,Cbo,vu,Iae,wbo,Abo,Q$,ybo,Lbo,xbo,Fu,qae,kbo,Sbo,W$,Rbo,Bbo,Pbo,Tu,Nae,$bo,Ibo,H$,qbo,Nbo,jbo,Mu,jae,Dbo,Gbo,U$,Obo,Vbo,Xbo,Eu,Dae,zbo,Qbo,J$,Wbo,Hbo,Ubo,Cu,Gae,Jbo,Ybo,Y$,Kbo,Zbo,e2o,wu,o2o,Oae,r2o,t2o,Vae,a2o,n2o,Xae,s2o,l2o,E3,aBe,nd,Au,zae,C3,i2o,Qae,d2o,nBe,Ko,w3,c2o,sd,f2o,K$,m2o,g2o,Z$,h2o,p2o,_2o,A3,u2o,Wae,b2o,v2o,F2o,Qr,y3,T2o,Hae,M2o,E2o,ld,C2o,Uae,w2o,A2o,eI,y2o,L2o,x2o,Jae,k2o,S2o,L3,R2o,je,x3,B2o,Yae,P2o,$2o,Qa,I2o,Kae,q2o,N2o,Zae,j2o,D2o,ene,G2o,O2o,V2o,$,yu,one,X2o,z2o,oI,Q2o,W2o,H2o,Lu,rne,U2o,J2o,rI,Y2o,K2o,Z2o,xu,tne,e6o,o6o,tI,r6o,t6o,a6o,ku,ane,n6o,s6o,aI,l6o,i6o,d6o,Su,nne,c6o,f6o,nI,m6o,g6o,h6o,Ru,sne,p6o,_6o,sI,u6o,b6o,v6o,Bu,lne,F6o,T6o,lI,M6o,E6o,C6o,Pu,ine,w6o,A6o,iI,y6o,L6o,x6o,$u,dne,k6o,S6o,dI,R6o,B6o,P6o,Iu,cne,$6o,I6o,cI,q6o,N6o,j6o,qu,fne,D6o,G6o,fI,O6o,V6o,X6o,Nu,mne,z6o,Q6o,mI,W6o,H6o,U6o,ju,gne,J6o,Y6o,gI,K6o,Z6o,evo,Du,hne,ovo,rvo,hI,tvo,avo,nvo,Gu,pne,svo,lvo,pI,ivo,dvo,cvo,Ou,_ne,fvo,mvo,_I,gvo,hvo,pvo,Vu,une,_vo,uvo,uI,bvo,vvo,Fvo,Xu,bne,Tvo,Mvo,bI,Evo,Cvo,wvo,zu,vne,Avo,yvo,vI,Lvo,xvo,kvo,Qu,Fne,Svo,Rvo,FI,Bvo,Pvo,$vo,Wu,Tne,Ivo,qvo,TI,Nvo,jvo,Dvo,Hu,Mne,Gvo,Ovo,MI,Vvo,Xvo,zvo,Uu,Ene,Qvo,Wvo,EI,Hvo,Uvo,Jvo,Ju,Cne,Yvo,Kvo,CI,Zvo,eFo,oFo,Yu,wne,rFo,tFo,wI,aFo,nFo,sFo,Ku,Ane,lFo,iFo,AI,dFo,cFo,fFo,Zu,yne,mFo,gFo,yI,hFo,pFo,_Fo,e1,Lne,uFo,bFo,LI,vFo,FFo,TFo,o1,xne,MFo,EFo,xI,CFo,wFo,AFo,r1,kne,yFo,LFo,kI,xFo,kFo,SFo,t1,Sne,RFo,BFo,SI,PFo,$Fo,IFo,a1,Rne,qFo,NFo,RI,jFo,DFo,GFo,n1,Bne,OFo,VFo,BI,XFo,zFo,QFo,s1,Pne,WFo,HFo,PI,UFo,JFo,YFo,l1,$ne,KFo,ZFo,$I,eTo,oTo,rTo,i1,tTo,Ine,aTo,nTo,qne,sTo,lTo,Nne,iTo,dTo,k3,sBe,id,d1,jne,S3,cTo,Dne,fTo,lBe,Zo,R3,mTo,dd,gTo,II,hTo,pTo,qI,_To,uTo,bTo,B3,vTo,Gne,FTo,TTo,MTo,Wr,P3,ETo,One,CTo,wTo,cd,ATo,Vne,yTo,LTo,NI,xTo,kTo,STo,Xne,RTo,BTo,$3,PTo,De,I3,$To,zne,ITo,qTo,Wa,NTo,Qne,jTo,DTo,Wne,GTo,OTo,Hne,VTo,XTo,zTo,I,c1,Une,QTo,WTo,jI,HTo,UTo,JTo,f1,Jne,YTo,KTo,DI,ZTo,e8o,o8o,m1,Yne,r8o,t8o,GI,a8o,n8o,s8o,g1,Kne,l8o,i8o,OI,d8o,c8o,f8o,h1,Zne,m8o,g8o,VI,h8o,p8o,_8o,p1,ese,u8o,b8o,XI,v8o,F8o,T8o,_1,ose,M8o,E8o,zI,C8o,w8o,A8o,u1,rse,y8o,L8o,QI,x8o,k8o,S8o,b1,tse,R8o,B8o,WI,P8o,$8o,I8o,v1,ase,q8o,N8o,HI,j8o,D8o,G8o,F1,nse,O8o,V8o,UI,X8o,z8o,Q8o,T1,sse,W8o,H8o,JI,U8o,J8o,Y8o,M1,lse,K8o,Z8o,YI,e7o,o7o,r7o,E1,ise,t7o,a7o,KI,n7o,s7o,l7o,C1,dse,i7o,d7o,ZI,c7o,f7o,m7o,w1,cse,g7o,h7o,eq,p7o,_7o,u7o,A1,fse,b7o,v7o,oq,F7o,T7o,M7o,y1,mse,E7o,C7o,rq,w7o,A7o,y7o,L1,gse,L7o,x7o,tq,k7o,S7o,R7o,x1,hse,B7o,P7o,aq,$7o,I7o,q7o,k1,pse,N7o,j7o,nq,D7o,G7o,O7o,S1,_se,V7o,X7o,sq,z7o,Q7o,W7o,R1,use,H7o,U7o,lq,J7o,Y7o,K7o,B1,bse,Z7o,eMo,iq,oMo,rMo,tMo,P1,vse,aMo,nMo,dq,sMo,lMo,iMo,$1,Fse,dMo,cMo,cq,fMo,mMo,gMo,I1,Tse,hMo,pMo,fq,_Mo,uMo,bMo,q1,Mse,vMo,FMo,mq,TMo,MMo,EMo,N1,Ese,CMo,wMo,gq,AMo,yMo,LMo,j1,Cse,xMo,kMo,hq,SMo,RMo,BMo,D1,wse,PMo,$Mo,Ase,IMo,qMo,NMo,G1,yse,jMo,DMo,pq,GMo,OMo,VMo,O1,Lse,XMo,zMo,_q,QMo,WMo,HMo,V1,xse,UMo,JMo,uq,YMo,KMo,ZMo,X1,kse,e4o,o4o,bq,r4o,t4o,a4o,z1,n4o,Sse,s4o,l4o,Rse,i4o,d4o,Bse,c4o,f4o,q3,iBe,fd,Q1,Pse,N3,m4o,$se,g4o,dBe,er,j3,h4o,md,p4o,vq,_4o,u4o,Fq,b4o,v4o,F4o,D3,T4o,Ise,M4o,E4o,C4o,Hr,G3,w4o,qse,A4o,y4o,gd,L4o,Nse,x4o,k4o,Tq,S4o,R4o,B4o,jse,P4o,$4o,O3,I4o,Ge,V3,q4o,Dse,N4o,j4o,Ha,D4o,Gse,G4o,O4o,Ose,V4o,X4o,Vse,z4o,Q4o,W4o,ne,W1,Xse,H4o,U4o,Mq,J4o,Y4o,K4o,H1,zse,Z4o,eEo,Eq,oEo,rEo,tEo,U1,Qse,aEo,nEo,Cq,sEo,lEo,iEo,J1,Wse,dEo,cEo,wq,fEo,mEo,gEo,Y1,Hse,hEo,pEo,Aq,_Eo,uEo,bEo,K1,Use,vEo,FEo,yq,TEo,MEo,EEo,Z1,Jse,CEo,wEo,Lq,AEo,yEo,LEo,eb,Yse,xEo,kEo,xq,SEo,REo,BEo,ob,Kse,PEo,$Eo,kq,IEo,qEo,NEo,rb,Zse,jEo,DEo,Sq,GEo,OEo,VEo,tb,ele,XEo,zEo,Rq,QEo,WEo,HEo,ab,ole,UEo,JEo,Bq,YEo,KEo,ZEo,nb,rle,e5o,o5o,Pq,r5o,t5o,a5o,sb,tle,n5o,s5o,$q,l5o,i5o,d5o,lb,ale,c5o,f5o,Iq,m5o,g5o,h5o,ib,nle,p5o,_5o,qq,u5o,b5o,v5o,db,sle,F5o,T5o,Nq,M5o,E5o,C5o,cb,w5o,lle,A5o,y5o,ile,L5o,x5o,dle,k5o,S5o,X3,cBe,hd,fb,cle,z3,R5o,fle,B5o,fBe,or,Q3,P5o,pd,$5o,jq,I5o,q5o,Dq,N5o,j5o,D5o,W3,G5o,mle,O5o,V5o,X5o,Ur,H3,z5o,gle,Q5o,W5o,_d,H5o,hle,U5o,J5o,Gq,Y5o,K5o,Z5o,ple,e3o,o3o,U3,r3o,Oe,J3,t3o,_le,a3o,n3o,Ua,s3o,ule,l3o,i3o,ble,d3o,c3o,vle,f3o,m3o,g3o,y,mb,Fle,h3o,p3o,Oq,_3o,u3o,b3o,gb,Tle,v3o,F3o,Vq,T3o,M3o,E3o,hb,Mle,C3o,w3o,Xq,A3o,y3o,L3o,pb,Ele,x3o,k3o,zq,S3o,R3o,B3o,_b,Cle,P3o,$3o,Qq,I3o,q3o,N3o,ub,wle,j3o,D3o,Wq,G3o,O3o,V3o,bb,Ale,X3o,z3o,Hq,Q3o,W3o,H3o,vb,yle,U3o,J3o,Uq,Y3o,K3o,Z3o,Fb,Lle,eCo,oCo,Jq,rCo,tCo,aCo,Tb,xle,nCo,sCo,Yq,lCo,iCo,dCo,Mb,kle,cCo,fCo,Kq,mCo,gCo,hCo,Eb,Sle,pCo,_Co,Zq,uCo,bCo,vCo,Cb,Rle,FCo,TCo,eN,MCo,ECo,CCo,wb,Ble,wCo,ACo,oN,yCo,LCo,xCo,Ab,Ple,kCo,SCo,rN,RCo,BCo,PCo,yb,$le,$Co,ICo,tN,qCo,NCo,jCo,Lb,Ile,DCo,GCo,aN,OCo,VCo,XCo,xb,qle,zCo,QCo,nN,WCo,HCo,UCo,kb,Nle,JCo,YCo,sN,KCo,ZCo,ewo,Sb,jle,owo,rwo,lN,two,awo,nwo,Rb,Dle,swo,lwo,iN,iwo,dwo,cwo,Bb,Gle,fwo,mwo,dN,gwo,hwo,pwo,Pb,Ole,_wo,uwo,cN,bwo,vwo,Fwo,$b,Vle,Two,Mwo,fN,Ewo,Cwo,wwo,Ib,Xle,Awo,ywo,mN,Lwo,xwo,kwo,qb,zle,Swo,Rwo,gN,Bwo,Pwo,$wo,Nb,Qle,Iwo,qwo,hN,Nwo,jwo,Dwo,jb,Wle,Gwo,Owo,pN,Vwo,Xwo,zwo,Db,Hle,Qwo,Wwo,_N,Hwo,Uwo,Jwo,Gb,Ule,Ywo,Kwo,uN,Zwo,eAo,oAo,Ob,Jle,rAo,tAo,bN,aAo,nAo,sAo,Vb,Yle,lAo,iAo,vN,dAo,cAo,fAo,Xb,Kle,mAo,gAo,FN,hAo,pAo,_Ao,zb,Zle,uAo,bAo,TN,vAo,FAo,TAo,Qb,eie,MAo,EAo,MN,CAo,wAo,AAo,Wb,oie,yAo,LAo,EN,xAo,kAo,SAo,Hb,rie,RAo,BAo,CN,PAo,$Ao,IAo,Ub,tie,qAo,NAo,wN,jAo,DAo,GAo,Jb,aie,OAo,VAo,AN,XAo,zAo,QAo,Yb,nie,WAo,HAo,yN,UAo,JAo,YAo,Kb,sie,KAo,ZAo,LN,e0o,o0o,r0o,Zb,lie,t0o,a0o,xN,n0o,s0o,l0o,e2,iie,i0o,d0o,kN,c0o,f0o,m0o,o2,die,g0o,h0o,SN,p0o,_0o,u0o,r2,cie,b0o,v0o,RN,F0o,T0o,M0o,t2,fie,E0o,C0o,BN,w0o,A0o,y0o,a2,mie,L0o,x0o,PN,k0o,S0o,R0o,n2,B0o,gie,P0o,$0o,hie,I0o,q0o,pie,N0o,j0o,Y3,mBe,ud,s2,_ie,K3,D0o,uie,G0o,gBe,rr,Z3,O0o,bd,V0o,$N,X0o,z0o,IN,Q0o,W0o,H0o,eC,U0o,bie,J0o,Y0o,K0o,Jr,oC,Z0o,vie,eyo,oyo,vd,ryo,Fie,tyo,ayo,qN,nyo,syo,lyo,Tie,iyo,dyo,rC,cyo,Ve,tC,fyo,Mie,myo,gyo,Ja,hyo,Eie,pyo,_yo,Cie,uyo,byo,wie,vyo,Fyo,Tyo,G,l2,Aie,Myo,Eyo,NN,Cyo,wyo,Ayo,i2,yie,yyo,Lyo,jN,xyo,kyo,Syo,d2,Lie,Ryo,Byo,DN,Pyo,$yo,Iyo,c2,xie,qyo,Nyo,GN,jyo,Dyo,Gyo,f2,kie,Oyo,Vyo,ON,Xyo,zyo,Qyo,m2,Sie,Wyo,Hyo,VN,Uyo,Jyo,Yyo,g2,Rie,Kyo,Zyo,XN,eLo,oLo,rLo,h2,Bie,tLo,aLo,zN,nLo,sLo,lLo,p2,Pie,iLo,dLo,QN,cLo,fLo,mLo,_2,$ie,gLo,hLo,WN,pLo,_Lo,uLo,u2,Iie,bLo,vLo,HN,FLo,TLo,MLo,b2,qie,ELo,CLo,UN,wLo,ALo,yLo,v2,Nie,LLo,xLo,JN,kLo,SLo,RLo,F2,jie,BLo,PLo,YN,$Lo,ILo,qLo,T2,Die,NLo,jLo,KN,DLo,GLo,OLo,M2,Gie,VLo,XLo,ZN,zLo,QLo,WLo,E2,Oie,HLo,ULo,ej,JLo,YLo,KLo,C2,Vie,ZLo,e9o,oj,o9o,r9o,t9o,w2,Xie,a9o,n9o,rj,s9o,l9o,i9o,A2,zie,d9o,c9o,tj,f9o,m9o,g9o,y2,Qie,h9o,p9o,aj,_9o,u9o,b9o,L2,Wie,v9o,F9o,nj,T9o,M9o,E9o,x2,Hie,C9o,w9o,sj,A9o,y9o,L9o,k2,Uie,x9o,k9o,lj,S9o,R9o,B9o,S2,Jie,P9o,$9o,ij,I9o,q9o,N9o,R2,Yie,j9o,D9o,dj,G9o,O9o,V9o,B2,Kie,X9o,z9o,cj,Q9o,W9o,H9o,P2,Zie,U9o,J9o,fj,Y9o,K9o,Z9o,$2,exo,ede,oxo,rxo,ode,txo,axo,rde,nxo,sxo,aC,hBe,Fd,I2,tde,nC,lxo,ade,ixo,pBe,tr,sC,dxo,Td,cxo,mj,fxo,mxo,gj,gxo,hxo,pxo,lC,_xo,nde,uxo,bxo,vxo,Yr,iC,Fxo,sde,Txo,Mxo,Md,Exo,lde,Cxo,wxo,hj,Axo,yxo,Lxo,ide,xxo,kxo,dC,Sxo,Xe,cC,Rxo,dde,Bxo,Pxo,Ya,$xo,cde,Ixo,qxo,fde,Nxo,jxo,mde,Dxo,Gxo,Oxo,da,q2,gde,Vxo,Xxo,pj,zxo,Qxo,Wxo,N2,hde,Hxo,Uxo,_j,Jxo,Yxo,Kxo,j2,pde,Zxo,eko,uj,oko,rko,tko,D2,_de,ako,nko,bj,sko,lko,iko,G2,ude,dko,cko,vj,fko,mko,gko,O2,hko,bde,pko,_ko,vde,uko,bko,Fde,vko,Fko,fC,_Be,Ed,V2,Tde,mC,Tko,Mde,Mko,uBe,ar,gC,Eko,Cd,Cko,Fj,wko,Ako,Tj,yko,Lko,xko,hC,kko,Ede,Sko,Rko,Bko,Kr,pC,Pko,Cde,$ko,Iko,wd,qko,wde,Nko,jko,Mj,Dko,Gko,Oko,Ade,Vko,Xko,_C,zko,ze,uC,Qko,yde,Wko,Hko,Ka,Uko,Lde,Jko,Yko,xde,Kko,Zko,kde,eSo,oSo,rSo,j,X2,Sde,tSo,aSo,Ej,nSo,sSo,lSo,z2,Rde,iSo,dSo,Cj,cSo,fSo,mSo,Q2,Bde,gSo,hSo,wj,pSo,_So,uSo,W2,Pde,bSo,vSo,Aj,FSo,TSo,MSo,H2,$de,ESo,CSo,yj,wSo,ASo,ySo,U2,Ide,LSo,xSo,Lj,kSo,SSo,RSo,J2,qde,BSo,PSo,xj,$So,ISo,qSo,Y2,Nde,NSo,jSo,kj,DSo,GSo,OSo,K2,jde,VSo,XSo,Sj,zSo,QSo,WSo,Z2,Dde,HSo,USo,Rj,JSo,YSo,KSo,e6,Gde,ZSo,eRo,Bj,oRo,rRo,tRo,o6,Ode,aRo,nRo,Pj,sRo,lRo,iRo,r6,Vde,dRo,cRo,$j,fRo,mRo,gRo,t6,Xde,hRo,pRo,Ij,_Ro,uRo,bRo,a6,zde,vRo,FRo,qj,TRo,MRo,ERo,n6,Qde,CRo,wRo,Nj,ARo,yRo,LRo,s6,Wde,xRo,kRo,jj,SRo,RRo,BRo,l6,Hde,PRo,$Ro,Dj,IRo,qRo,NRo,i6,Ude,jRo,DRo,Gj,GRo,ORo,VRo,d6,Jde,XRo,zRo,Oj,QRo,WRo,HRo,c6,Yde,URo,JRo,Vj,YRo,KRo,ZRo,f6,Kde,eBo,oBo,Xj,rBo,tBo,aBo,m6,Zde,nBo,sBo,zj,lBo,iBo,dBo,g6,ece,cBo,fBo,Qj,mBo,gBo,hBo,h6,oce,pBo,_Bo,Wj,uBo,bBo,vBo,p6,rce,FBo,TBo,Hj,MBo,EBo,CBo,_6,tce,wBo,ABo,Uj,yBo,LBo,xBo,u6,ace,kBo,SBo,Jj,RBo,BBo,PBo,b6,nce,$Bo,IBo,Yj,qBo,NBo,jBo,v6,sce,DBo,GBo,Kj,OBo,VBo,XBo,F6,lce,zBo,QBo,Zj,WBo,HBo,UBo,T6,ice,JBo,YBo,eD,KBo,ZBo,ePo,M6,dce,oPo,rPo,oD,tPo,aPo,nPo,E6,sPo,cce,lPo,iPo,fce,dPo,cPo,mce,fPo,mPo,bC,bBe,Ad,C6,gce,vC,gPo,hce,hPo,vBe,nr,FC,pPo,yd,_Po,rD,uPo,bPo,tD,vPo,FPo,TPo,TC,MPo,pce,EPo,CPo,wPo,Zr,MC,APo,_ce,yPo,LPo,Ld,xPo,uce,kPo,SPo,aD,RPo,BPo,PPo,bce,$Po,IPo,EC,qPo,Qe,CC,NPo,vce,jPo,DPo,Za,GPo,Fce,OPo,VPo,Tce,XPo,zPo,Mce,QPo,WPo,HPo,R,w6,Ece,UPo,JPo,nD,YPo,KPo,ZPo,A6,Cce,e$o,o$o,sD,r$o,t$o,a$o,y6,wce,n$o,s$o,lD,l$o,i$o,d$o,L6,Ace,c$o,f$o,iD,m$o,g$o,h$o,x6,yce,p$o,_$o,dD,u$o,b$o,v$o,k6,Lce,F$o,T$o,cD,M$o,E$o,C$o,S6,xce,w$o,A$o,fD,y$o,L$o,x$o,R6,kce,k$o,S$o,mD,R$o,B$o,P$o,B6,Sce,$$o,I$o,gD,q$o,N$o,j$o,P6,Rce,D$o,G$o,hD,O$o,V$o,X$o,$6,Bce,z$o,Q$o,pD,W$o,H$o,U$o,I6,Pce,J$o,Y$o,_D,K$o,Z$o,eIo,q6,$ce,oIo,rIo,uD,tIo,aIo,nIo,N6,Ice,sIo,lIo,bD,iIo,dIo,cIo,j6,qce,fIo,mIo,vD,gIo,hIo,pIo,D6,Nce,_Io,uIo,FD,bIo,vIo,FIo,G6,jce,TIo,MIo,TD,EIo,CIo,wIo,O6,Dce,AIo,yIo,MD,LIo,xIo,kIo,V6,Gce,SIo,RIo,ED,BIo,PIo,$Io,X6,Oce,IIo,qIo,CD,NIo,jIo,DIo,z6,Vce,GIo,OIo,wD,VIo,XIo,zIo,Q6,Xce,QIo,WIo,AD,HIo,UIo,JIo,W6,zce,YIo,KIo,yD,ZIo,eqo,oqo,H6,Qce,rqo,tqo,LD,aqo,nqo,sqo,U6,Wce,lqo,iqo,xD,dqo,cqo,fqo,J6,Hce,mqo,gqo,kD,hqo,pqo,_qo,Y6,Uce,uqo,bqo,SD,vqo,Fqo,Tqo,K6,Jce,Mqo,Eqo,RD,Cqo,wqo,Aqo,Z6,Yce,yqo,Lqo,BD,xqo,kqo,Sqo,ev,Kce,Rqo,Bqo,PD,Pqo,$qo,Iqo,ov,Zce,qqo,Nqo,$D,jqo,Dqo,Gqo,rv,efe,Oqo,Vqo,ID,Xqo,zqo,Qqo,tv,ofe,Wqo,Hqo,qD,Uqo,Jqo,Yqo,av,rfe,Kqo,Zqo,ND,eNo,oNo,rNo,nv,tfe,tNo,aNo,jD,nNo,sNo,lNo,sv,afe,iNo,dNo,DD,cNo,fNo,mNo,lv,nfe,gNo,hNo,GD,pNo,_No,uNo,iv,sfe,bNo,vNo,OD,FNo,TNo,MNo,dv,lfe,ENo,CNo,VD,wNo,ANo,yNo,cv,LNo,ife,xNo,kNo,dfe,SNo,RNo,cfe,BNo,PNo,wC,FBe,xd,fv,ffe,AC,$No,mfe,INo,TBe,sr,yC,qNo,kd,NNo,XD,jNo,DNo,zD,GNo,ONo,VNo,LC,XNo,gfe,zNo,QNo,WNo,et,xC,HNo,hfe,UNo,JNo,Sd,YNo,pfe,KNo,ZNo,QD,ejo,ojo,rjo,_fe,tjo,ajo,kC,njo,We,SC,sjo,ufe,ljo,ijo,en,djo,bfe,cjo,fjo,vfe,mjo,gjo,Ffe,hjo,pjo,_jo,Tfe,mv,Mfe,ujo,bjo,WD,vjo,Fjo,Tjo,gv,Mjo,Efe,Ejo,Cjo,Cfe,wjo,Ajo,wfe,yjo,Ljo,RC,MBe,Rd,hv,Afe,BC,xjo,yfe,kjo,EBe,lr,PC,Sjo,Bd,Rjo,HD,Bjo,Pjo,UD,$jo,Ijo,qjo,$C,Njo,Lfe,jjo,Djo,Gjo,ot,IC,Ojo,xfe,Vjo,Xjo,Pd,zjo,kfe,Qjo,Wjo,JD,Hjo,Ujo,Jjo,Sfe,Yjo,Kjo,qC,Zjo,He,NC,eDo,Rfe,oDo,rDo,on,tDo,Bfe,aDo,nDo,Pfe,sDo,lDo,$fe,iDo,dDo,cDo,de,pv,Ife,fDo,mDo,YD,gDo,hDo,pDo,_v,qfe,_Do,uDo,KD,bDo,vDo,FDo,uv,Nfe,TDo,MDo,ZD,EDo,CDo,wDo,Vs,jfe,ADo,yDo,eG,LDo,xDo,oG,kDo,SDo,RDo,bv,Dfe,BDo,PDo,rG,$Do,IDo,qDo,ma,Gfe,NDo,jDo,tG,DDo,GDo,aG,ODo,VDo,nG,XDo,zDo,QDo,vv,Ofe,WDo,HDo,sG,UDo,JDo,YDo,Fv,Vfe,KDo,ZDo,lG,eGo,oGo,rGo,Tv,Xfe,tGo,aGo,iG,nGo,sGo,lGo,Mv,zfe,iGo,dGo,dG,cGo,fGo,mGo,Ev,Qfe,gGo,hGo,cG,pGo,_Go,uGo,Cv,Wfe,bGo,vGo,fG,FGo,TGo,MGo,wv,Hfe,EGo,CGo,mG,wGo,AGo,yGo,Av,LGo,Ufe,xGo,kGo,Jfe,SGo,RGo,Yfe,BGo,PGo,jC,CBe,$d,yv,Kfe,DC,$Go,Zfe,IGo,wBe,ir,GC,qGo,Id,NGo,gG,jGo,DGo,hG,GGo,OGo,VGo,OC,XGo,eme,zGo,QGo,WGo,rt,VC,HGo,ome,UGo,JGo,qd,YGo,rme,KGo,ZGo,pG,eOo,oOo,rOo,tme,tOo,aOo,XC,nOo,Ue,zC,sOo,ame,lOo,iOo,rn,dOo,nme,cOo,fOo,sme,mOo,gOo,lme,hOo,pOo,_Oo,ime,Lv,dme,uOo,bOo,_G,vOo,FOo,TOo,xv,MOo,cme,EOo,COo,fme,wOo,AOo,mme,yOo,LOo,QC,ABe,Nd,kv,gme,WC,xOo,hme,kOo,yBe,dr,HC,SOo,jd,ROo,uG,BOo,POo,bG,$Oo,IOo,qOo,UC,NOo,pme,jOo,DOo,GOo,tt,JC,OOo,_me,VOo,XOo,Dd,zOo,ume,QOo,WOo,vG,HOo,UOo,JOo,bme,YOo,KOo,YC,ZOo,Je,KC,eVo,vme,oVo,rVo,tn,tVo,Fme,aVo,nVo,Tme,sVo,lVo,Mme,iVo,dVo,cVo,Se,Sv,Eme,fVo,mVo,FG,gVo,hVo,pVo,Rv,Cme,_Vo,uVo,TG,bVo,vVo,FVo,Bv,wme,TVo,MVo,MG,EVo,CVo,wVo,Pv,Ame,AVo,yVo,EG,LVo,xVo,kVo,$v,yme,SVo,RVo,CG,BVo,PVo,$Vo,Iv,Lme,IVo,qVo,wG,NVo,jVo,DVo,qv,xme,GVo,OVo,AG,VVo,XVo,zVo,Nv,kme,QVo,WVo,yG,HVo,UVo,JVo,jv,YVo,Sme,KVo,ZVo,Rme,eXo,oXo,Bme,rXo,tXo,ZC,LBe,Gd,Dv,Pme,ew,aXo,$me,nXo,xBe,cr,ow,sXo,Od,lXo,LG,iXo,dXo,xG,cXo,fXo,mXo,rw,gXo,Ime,hXo,pXo,_Xo,at,tw,uXo,qme,bXo,vXo,Vd,FXo,Nme,TXo,MXo,kG,EXo,CXo,wXo,jme,AXo,yXo,aw,LXo,Ye,nw,xXo,Dme,kXo,SXo,an,RXo,Gme,BXo,PXo,Ome,$Xo,IXo,Vme,qXo,NXo,jXo,nn,Gv,Xme,DXo,GXo,SG,OXo,VXo,XXo,Ov,zme,zXo,QXo,RG,WXo,HXo,UXo,Vv,Qme,JXo,YXo,BG,KXo,ZXo,ezo,Xv,Wme,ozo,rzo,PG,tzo,azo,nzo,zv,szo,Hme,lzo,izo,Ume,dzo,czo,Jme,fzo,mzo,sw,kBe,Xd,Qv,Yme,lw,gzo,Kme,hzo,SBe,fr,iw,pzo,zd,_zo,$G,uzo,bzo,IG,vzo,Fzo,Tzo,dw,Mzo,Zme,Ezo,Czo,wzo,nt,cw,Azo,ege,yzo,Lzo,Qd,xzo,oge,kzo,Szo,qG,Rzo,Bzo,Pzo,rge,$zo,Izo,fw,qzo,Ke,mw,Nzo,tge,jzo,Dzo,sn,Gzo,age,Ozo,Vzo,nge,Xzo,zzo,sge,Qzo,Wzo,Hzo,Re,Wv,lge,Uzo,Jzo,NG,Yzo,Kzo,Zzo,Hv,ige,eQo,oQo,jG,rQo,tQo,aQo,Uv,dge,nQo,sQo,DG,lQo,iQo,dQo,Jv,cge,cQo,fQo,GG,mQo,gQo,hQo,Yv,fge,pQo,_Qo,OG,uQo,bQo,vQo,Kv,mge,FQo,TQo,VG,MQo,EQo,CQo,Zv,gge,wQo,AQo,XG,yQo,LQo,xQo,eF,hge,kQo,SQo,zG,RQo,BQo,PQo,oF,$Qo,pge,IQo,qQo,_ge,NQo,jQo,uge,DQo,GQo,gw,RBe,Wd,rF,bge,hw,OQo,vge,VQo,BBe,mr,pw,XQo,Hd,zQo,QG,QQo,WQo,WG,HQo,UQo,JQo,_w,YQo,Fge,KQo,ZQo,eWo,st,uw,oWo,Tge,rWo,tWo,Ud,aWo,Mge,nWo,sWo,HG,lWo,iWo,dWo,Ege,cWo,fWo,bw,mWo,Ze,vw,gWo,Cge,hWo,pWo,ln,_Wo,wge,uWo,bWo,Age,vWo,FWo,yge,TWo,MWo,EWo,Fw,tF,Lge,CWo,wWo,UG,AWo,yWo,LWo,aF,xge,xWo,kWo,JG,SWo,RWo,BWo,nF,PWo,kge,$Wo,IWo,Sge,qWo,NWo,Rge,jWo,DWo,Tw,PBe,Jd,sF,Bge,Mw,GWo,Pge,OWo,$Be,gr,Ew,VWo,Yd,XWo,YG,zWo,QWo,KG,WWo,HWo,UWo,Cw,JWo,$ge,YWo,KWo,ZWo,lt,ww,eHo,Ige,oHo,rHo,Kd,tHo,qge,aHo,nHo,ZG,sHo,lHo,iHo,Nge,dHo,cHo,Aw,fHo,eo,yw,mHo,jge,gHo,hHo,dn,pHo,Dge,_Ho,uHo,Gge,bHo,vHo,Oge,FHo,THo,MHo,cn,lF,Vge,EHo,CHo,eO,wHo,AHo,yHo,iF,Xge,LHo,xHo,oO,kHo,SHo,RHo,dF,zge,BHo,PHo,rO,$Ho,IHo,qHo,cF,Qge,NHo,jHo,tO,DHo,GHo,OHo,fF,VHo,Wge,XHo,zHo,Hge,QHo,WHo,Uge,HHo,UHo,Lw,IBe,Zd,mF,Jge,xw,JHo,Yge,YHo,qBe,hr,kw,KHo,ec,ZHo,aO,eUo,oUo,nO,rUo,tUo,aUo,Sw,nUo,Kge,sUo,lUo,iUo,it,Rw,dUo,Zge,cUo,fUo,oc,mUo,ehe,gUo,hUo,sO,pUo,_Uo,uUo,ohe,bUo,vUo,Bw,FUo,oo,Pw,TUo,rhe,MUo,EUo,fn,CUo,the,wUo,AUo,ahe,yUo,LUo,nhe,xUo,kUo,SUo,rc,gF,she,RUo,BUo,lO,PUo,$Uo,IUo,hF,lhe,qUo,NUo,iO,jUo,DUo,GUo,pF,ihe,OUo,VUo,dO,XUo,zUo,QUo,_F,WUo,dhe,HUo,UUo,che,JUo,YUo,fhe,KUo,ZUo,$w,NBe,tc,uF,mhe,Iw,eJo,ghe,oJo,jBe,pr,qw,rJo,ac,tJo,cO,aJo,nJo,fO,sJo,lJo,iJo,Nw,dJo,hhe,cJo,fJo,mJo,dt,jw,gJo,phe,hJo,pJo,nc,_Jo,_he,uJo,bJo,mO,vJo,FJo,TJo,uhe,MJo,EJo,Dw,CJo,ro,Gw,wJo,bhe,AJo,yJo,mn,LJo,vhe,xJo,kJo,Fhe,SJo,RJo,The,BJo,PJo,$Jo,Mhe,bF,Ehe,IJo,qJo,gO,NJo,jJo,DJo,vF,GJo,Che,OJo,VJo,whe,XJo,zJo,Ahe,QJo,WJo,Ow,DBe,sc,FF,yhe,Vw,HJo,Lhe,UJo,GBe,_r,Xw,JJo,lc,YJo,hO,KJo,ZJo,pO,eYo,oYo,rYo,zw,tYo,xhe,aYo,nYo,sYo,ct,Qw,lYo,khe,iYo,dYo,ic,cYo,She,fYo,mYo,_O,gYo,hYo,pYo,Rhe,_Yo,uYo,Ww,bYo,to,Hw,vYo,Bhe,FYo,TYo,gn,MYo,Phe,EYo,CYo,$he,wYo,AYo,Ihe,yYo,LYo,xYo,qhe,TF,Nhe,kYo,SYo,uO,RYo,BYo,PYo,MF,$Yo,jhe,IYo,qYo,Dhe,NYo,jYo,Ghe,DYo,GYo,Uw,OBe,dc,EF,Ohe,Jw,OYo,Vhe,VYo,VBe,ur,Yw,XYo,cc,zYo,bO,QYo,WYo,vO,HYo,UYo,JYo,Kw,YYo,Xhe,KYo,ZYo,eKo,ft,Zw,oKo,zhe,rKo,tKo,fc,aKo,Qhe,nKo,sKo,FO,lKo,iKo,dKo,Whe,cKo,fKo,eA,mKo,ao,oA,gKo,Hhe,hKo,pKo,hn,_Ko,Uhe,uKo,bKo,Jhe,vKo,FKo,Yhe,TKo,MKo,EKo,pn,CF,Khe,CKo,wKo,TO,AKo,yKo,LKo,wF,Zhe,xKo,kKo,MO,SKo,RKo,BKo,AF,epe,PKo,$Ko,EO,IKo,qKo,NKo,yF,ope,jKo,DKo,CO,GKo,OKo,VKo,LF,XKo,rpe,zKo,QKo,tpe,WKo,HKo,ape,UKo,JKo,rA,XBe,mc,xF,npe,tA,YKo,spe,KKo,zBe,br,aA,ZKo,gc,eZo,wO,oZo,rZo,AO,tZo,aZo,nZo,nA,sZo,lpe,lZo,iZo,dZo,mt,sA,cZo,ipe,fZo,mZo,hc,gZo,dpe,hZo,pZo,yO,_Zo,uZo,bZo,cpe,vZo,FZo,lA,TZo,no,iA,MZo,fpe,EZo,CZo,_n,wZo,mpe,AZo,yZo,gpe,LZo,xZo,hpe,kZo,SZo,RZo,ppe,kF,_pe,BZo,PZo,LO,$Zo,IZo,qZo,SF,NZo,upe,jZo,DZo,bpe,GZo,OZo,vpe,VZo,XZo,dA,QBe,pc,RF,Fpe,cA,zZo,Tpe,QZo,WBe,vr,fA,WZo,_c,HZo,xO,UZo,JZo,kO,YZo,KZo,ZZo,mA,eer,Mpe,oer,rer,ter,gt,gA,aer,Epe,ner,ser,uc,ler,Cpe,ier,der,SO,cer,fer,mer,wpe,ger,her,hA,per,ho,pA,_er,Ape,uer,ber,un,ver,ype,Fer,Ter,Lpe,Mer,Eer,xpe,Cer,wer,Aer,x,BF,kpe,yer,Ler,RO,xer,ker,Ser,PF,Spe,Rer,Ber,BO,Per,$er,Ier,$F,Rpe,qer,Ner,PO,jer,Der,Ger,IF,Bpe,Oer,Ver,$O,Xer,zer,Qer,qF,Ppe,Wer,Her,IO,Uer,Jer,Yer,NF,$pe,Ker,Zer,qO,eor,oor,ror,jF,Ipe,tor,aor,NO,nor,sor,lor,DF,qpe,ior,dor,jO,cor,mor,gor,GF,Npe,hor,por,DO,_or,uor,bor,OF,jpe,vor,For,GO,Tor,Mor,Eor,VF,Dpe,Cor,wor,OO,Aor,yor,Lor,XF,Gpe,xor,kor,VO,Sor,Ror,Bor,zF,Ope,Por,$or,XO,Ior,qor,Nor,QF,Vpe,jor,Dor,zO,Gor,Oor,Vor,WF,Xpe,Xor,zor,QO,Qor,Wor,Hor,HF,zpe,Uor,Jor,WO,Yor,Kor,Zor,Xs,Qpe,err,orr,HO,rrr,trr,UO,arr,nrr,srr,UF,Wpe,lrr,irr,JO,drr,crr,frr,JF,Hpe,mrr,grr,YO,hrr,prr,_rr,YF,Upe,urr,brr,KO,vrr,Frr,Trr,KF,Jpe,Mrr,Err,ZO,Crr,wrr,Arr,ZF,Ype,yrr,Lrr,eV,xrr,krr,Srr,eT,Kpe,Rrr,Brr,oV,Prr,$rr,Irr,oT,Zpe,qrr,Nrr,rV,jrr,Drr,Grr,rT,e_e,Orr,Vrr,tV,Xrr,zrr,Qrr,tT,o_e,Wrr,Hrr,aV,Urr,Jrr,Yrr,aT,r_e,Krr,Zrr,nV,etr,otr,rtr,nT,t_e,ttr,atr,sV,ntr,str,ltr,sT,a_e,itr,dtr,lV,ctr,ftr,mtr,lT,n_e,gtr,htr,iV,ptr,_tr,utr,iT,s_e,btr,vtr,dV,Ftr,Ttr,Mtr,dT,l_e,Etr,Ctr,cV,wtr,Atr,ytr,cT,i_e,Ltr,xtr,fV,ktr,Str,Rtr,fT,d_e,Btr,Ptr,mV,$tr,Itr,qtr,mT,c_e,Ntr,jtr,gV,Dtr,Gtr,Otr,gT,f_e,Vtr,Xtr,hV,ztr,Qtr,Wtr,hT,m_e,Htr,Utr,pV,Jtr,Ytr,Ktr,pT,g_e,Ztr,ear,_V,oar,rar,tar,_T,h_e,aar,nar,uV,sar,lar,iar,uT,p_e,dar,car,bV,far,mar,gar,bT,__e,har,par,vV,_ar,uar,bar,vT,u_e,Far,Tar,FV,Mar,Ear,Car,FT,b_e,war,Aar,TV,yar,Lar,xar,TT,v_e,kar,Sar,MV,Rar,Bar,Par,F_e,$ar,Iar,_A,HBe,bc,MT,T_e,uA,qar,M_e,Nar,UBe,Fr,bA,jar,vc,Dar,EV,Gar,Oar,CV,Var,Xar,zar,vA,Qar,E_e,War,Har,Uar,ht,FA,Jar,C_e,Yar,Kar,Fc,Zar,w_e,enr,onr,wV,rnr,tnr,anr,A_e,nnr,snr,TA,lnr,po,MA,inr,y_e,dnr,cnr,bn,fnr,L_e,mnr,gnr,x_e,hnr,pnr,k_e,_nr,unr,bnr,H,ET,S_e,vnr,Fnr,AV,Tnr,Mnr,Enr,CT,R_e,Cnr,wnr,yV,Anr,ynr,Lnr,wT,B_e,xnr,knr,LV,Snr,Rnr,Bnr,AT,P_e,Pnr,$nr,xV,Inr,qnr,Nnr,yT,$_e,jnr,Dnr,kV,Gnr,Onr,Vnr,LT,I_e,Xnr,znr,SV,Qnr,Wnr,Hnr,xT,q_e,Unr,Jnr,RV,Ynr,Knr,Znr,kT,N_e,esr,osr,BV,rsr,tsr,asr,ST,j_e,nsr,ssr,PV,lsr,isr,dsr,RT,D_e,csr,fsr,$V,msr,gsr,hsr,BT,G_e,psr,_sr,IV,usr,bsr,vsr,PT,O_e,Fsr,Tsr,qV,Msr,Esr,Csr,$T,V_e,wsr,Asr,NV,ysr,Lsr,xsr,IT,X_e,ksr,Ssr,jV,Rsr,Bsr,Psr,qT,z_e,$sr,Isr,DV,qsr,Nsr,jsr,NT,Q_e,Dsr,Gsr,GV,Osr,Vsr,Xsr,jT,W_e,zsr,Qsr,OV,Wsr,Hsr,Usr,DT,H_e,Jsr,Ysr,VV,Ksr,Zsr,elr,GT,U_e,olr,rlr,XV,tlr,alr,nlr,OT,J_e,slr,llr,zV,ilr,dlr,clr,VT,Y_e,flr,mlr,QV,glr,hlr,plr,XT,K_e,_lr,ulr,WV,blr,vlr,Flr,zT,Z_e,Tlr,Mlr,HV,Elr,Clr,wlr,eue,Alr,ylr,EA,JBe,Tc,QT,oue,CA,Llr,rue,xlr,YBe,Tr,wA,klr,Mc,Slr,UV,Rlr,Blr,JV,Plr,$lr,Ilr,AA,qlr,tue,Nlr,jlr,Dlr,pt,yA,Glr,aue,Olr,Vlr,Ec,Xlr,nue,zlr,Qlr,YV,Wlr,Hlr,Ulr,sue,Jlr,Ylr,LA,Klr,_o,xA,Zlr,lue,eir,oir,vn,rir,iue,tir,air,due,nir,sir,cue,lir,iir,dir,fe,WT,fue,cir,fir,KV,mir,gir,hir,HT,mue,pir,_ir,ZV,uir,bir,vir,UT,gue,Fir,Tir,eX,Mir,Eir,Cir,JT,hue,wir,Air,oX,yir,Lir,xir,YT,pue,kir,Sir,rX,Rir,Bir,Pir,KT,_ue,$ir,Iir,tX,qir,Nir,jir,ZT,uue,Dir,Gir,aX,Oir,Vir,Xir,e8,bue,zir,Qir,nX,Wir,Hir,Uir,o8,vue,Jir,Yir,sX,Kir,Zir,edr,r8,Fue,odr,rdr,lX,tdr,adr,ndr,t8,Tue,sdr,ldr,iX,idr,ddr,cdr,a8,Mue,fdr,mdr,dX,gdr,hdr,pdr,Eue,_dr,udr,kA,KBe,Cc,n8,Cue,SA,bdr,wue,vdr,ZBe,Mr,RA,Fdr,wc,Tdr,cX,Mdr,Edr,fX,Cdr,wdr,Adr,BA,ydr,Aue,Ldr,xdr,kdr,_t,PA,Sdr,yue,Rdr,Bdr,Ac,Pdr,Lue,$dr,Idr,mX,qdr,Ndr,jdr,xue,Ddr,Gdr,$A,Odr,uo,IA,Vdr,kue,Xdr,zdr,Fn,Qdr,Sue,Wdr,Hdr,Rue,Udr,Jdr,Bue,Ydr,Kdr,Zdr,qA,s8,Pue,ecr,ocr,gX,rcr,tcr,acr,l8,$ue,ncr,scr,hX,lcr,icr,dcr,Iue,ccr,fcr,NA,ePe,yc,i8,que,jA,mcr,Nue,gcr,oPe,Er,DA,hcr,Lc,pcr,pX,_cr,ucr,_X,bcr,vcr,Fcr,GA,Tcr,jue,Mcr,Ecr,Ccr,ut,OA,wcr,Due,Acr,ycr,xc,Lcr,Gue,xcr,kcr,uX,Scr,Rcr,Bcr,Oue,Pcr,$cr,VA,Icr,bo,XA,qcr,Vue,Ncr,jcr,Tn,Dcr,Xue,Gcr,Ocr,zue,Vcr,Xcr,Que,zcr,Qcr,Wcr,Y,d8,Wue,Hcr,Ucr,bX,Jcr,Ycr,Kcr,c8,Hue,Zcr,efr,vX,ofr,rfr,tfr,f8,Uue,afr,nfr,FX,sfr,lfr,ifr,m8,Jue,dfr,cfr,TX,ffr,mfr,gfr,g8,Yue,hfr,pfr,MX,_fr,ufr,bfr,h8,Kue,vfr,Ffr,EX,Tfr,Mfr,Efr,p8,Zue,Cfr,wfr,CX,Afr,yfr,Lfr,_8,e1e,xfr,kfr,wX,Sfr,Rfr,Bfr,u8,o1e,Pfr,$fr,AX,Ifr,qfr,Nfr,b8,r1e,jfr,Dfr,yX,Gfr,Ofr,Vfr,v8,t1e,Xfr,zfr,LX,Qfr,Wfr,Hfr,F8,a1e,Ufr,Jfr,xX,Yfr,Kfr,Zfr,T8,n1e,emr,omr,kX,rmr,tmr,amr,M8,s1e,nmr,smr,SX,lmr,imr,dmr,E8,l1e,cmr,fmr,RX,mmr,gmr,hmr,C8,i1e,pmr,_mr,BX,umr,bmr,vmr,w8,d1e,Fmr,Tmr,PX,Mmr,Emr,Cmr,A8,c1e,wmr,Amr,$X,ymr,Lmr,xmr,y8,f1e,kmr,Smr,IX,Rmr,Bmr,Pmr,L8,m1e,$mr,Imr,qX,qmr,Nmr,jmr,g1e,Dmr,Gmr,zA,rPe,kc,x8,h1e,QA,Omr,p1e,Vmr,tPe,Cr,WA,Xmr,Sc,zmr,NX,Qmr,Wmr,jX,Hmr,Umr,Jmr,HA,Ymr,_1e,Kmr,Zmr,egr,bt,UA,ogr,u1e,rgr,tgr,Rc,agr,b1e,ngr,sgr,DX,lgr,igr,dgr,v1e,cgr,fgr,JA,mgr,vo,YA,ggr,F1e,hgr,pgr,Mn,_gr,T1e,ugr,bgr,M1e,vgr,Fgr,E1e,Tgr,Mgr,Egr,be,k8,C1e,Cgr,wgr,GX,Agr,ygr,Lgr,S8,w1e,xgr,kgr,OX,Sgr,Rgr,Bgr,R8,A1e,Pgr,$gr,VX,Igr,qgr,Ngr,B8,y1e,jgr,Dgr,XX,Ggr,Ogr,Vgr,P8,L1e,Xgr,zgr,zX,Qgr,Wgr,Hgr,$8,x1e,Ugr,Jgr,QX,Ygr,Kgr,Zgr,I8,k1e,ehr,ohr,WX,rhr,thr,ahr,q8,S1e,nhr,shr,HX,lhr,ihr,dhr,N8,R1e,chr,fhr,UX,mhr,ghr,hhr,j8,B1e,phr,_hr,JX,uhr,bhr,vhr,P1e,Fhr,Thr,KA,aPe,Bc,D8,$1e,ZA,Mhr,I1e,Ehr,nPe,wr,e0,Chr,Pc,whr,YX,Ahr,yhr,KX,Lhr,xhr,khr,o0,Shr,q1e,Rhr,Bhr,Phr,vt,r0,$hr,N1e,Ihr,qhr,$c,Nhr,j1e,jhr,Dhr,ZX,Ghr,Ohr,Vhr,D1e,Xhr,zhr,t0,Qhr,Fo,a0,Whr,G1e,Hhr,Uhr,En,Jhr,O1e,Yhr,Khr,V1e,Zhr,epr,X1e,opr,rpr,tpr,V,G8,z1e,apr,npr,ez,spr,lpr,ipr,O8,Q1e,dpr,cpr,oz,fpr,mpr,gpr,V8,W1e,hpr,ppr,rz,_pr,upr,bpr,X8,H1e,vpr,Fpr,tz,Tpr,Mpr,Epr,z8,U1e,Cpr,wpr,az,Apr,ypr,Lpr,Q8,J1e,xpr,kpr,nz,Spr,Rpr,Bpr,W8,Y1e,Ppr,$pr,sz,Ipr,qpr,Npr,H8,K1e,jpr,Dpr,lz,Gpr,Opr,Vpr,U8,Z1e,Xpr,zpr,iz,Qpr,Wpr,Hpr,J8,ebe,Upr,Jpr,dz,Ypr,Kpr,Zpr,Y8,obe,e_r,o_r,cz,r_r,t_r,a_r,K8,rbe,n_r,s_r,fz,l_r,i_r,d_r,Z8,tbe,c_r,f_r,mz,m_r,g_r,h_r,e7,abe,p_r,__r,gz,u_r,b_r,v_r,o7,nbe,F_r,T_r,hz,M_r,E_r,C_r,r7,sbe,w_r,A_r,pz,y_r,L_r,x_r,t7,lbe,k_r,S_r,_z,R_r,B_r,P_r,a7,ibe,$_r,I_r,uz,q_r,N_r,j_r,n7,dbe,D_r,G_r,bz,O_r,V_r,X_r,s7,cbe,z_r,Q_r,vz,W_r,H_r,U_r,l7,fbe,J_r,Y_r,Fz,K_r,Z_r,eur,i7,mbe,our,rur,Tz,tur,aur,nur,d7,gbe,sur,lur,Mz,iur,dur,cur,c7,hbe,fur,mur,Ez,gur,hur,pur,f7,pbe,_ur,uur,Cz,bur,vur,Fur,m7,_be,Tur,Mur,wz,Eur,Cur,wur,ube,Aur,yur,n0,sPe,Ic,g7,bbe,s0,Lur,vbe,xur,lPe,Ar,l0,kur,qc,Sur,Az,Rur,Bur,yz,Pur,$ur,Iur,i0,qur,Fbe,Nur,jur,Dur,Ft,d0,Gur,Tbe,Our,Vur,Nc,Xur,Mbe,zur,Qur,Lz,Wur,Hur,Uur,Ebe,Jur,Yur,c0,Kur,To,f0,Zur,Cbe,e1r,o1r,Cn,r1r,wbe,t1r,a1r,Abe,n1r,s1r,ybe,l1r,i1r,d1r,se,h7,Lbe,c1r,f1r,xz,m1r,g1r,h1r,p7,xbe,p1r,_1r,kz,u1r,b1r,v1r,_7,kbe,F1r,T1r,Sz,M1r,E1r,C1r,u7,Sbe,w1r,A1r,Rz,y1r,L1r,x1r,b7,Rbe,k1r,S1r,Bz,R1r,B1r,P1r,v7,Bbe,$1r,I1r,Pz,q1r,N1r,j1r,F7,Pbe,D1r,G1r,$z,O1r,V1r,X1r,T7,$be,z1r,Q1r,Iz,W1r,H1r,U1r,M7,Ibe,J1r,Y1r,qz,K1r,Z1r,ebr,E7,qbe,obr,rbr,Nz,tbr,abr,nbr,C7,Nbe,sbr,lbr,jz,ibr,dbr,cbr,w7,jbe,fbr,mbr,Dz,gbr,hbr,pbr,A7,Dbe,_br,ubr,Gz,bbr,vbr,Fbr,y7,Gbe,Tbr,Mbr,Oz,Ebr,Cbr,wbr,L7,Obe,Abr,ybr,Vz,Lbr,xbr,kbr,x7,Vbe,Sbr,Rbr,Xz,Bbr,Pbr,$br,k7,Xbe,Ibr,qbr,zz,Nbr,jbr,Dbr,zbe,Gbr,Obr,m0,iPe,jc,S7,Qbe,g0,Vbr,Wbe,Xbr,dPe,yr,h0,zbr,Dc,Qbr,Qz,Wbr,Hbr,Wz,Ubr,Jbr,Ybr,p0,Kbr,Hbe,Zbr,e2r,o2r,Tt,_0,r2r,Ube,t2r,a2r,Gc,n2r,Jbe,s2r,l2r,Hz,i2r,d2r,c2r,Ybe,f2r,m2r,u0,g2r,Mo,b0,h2r,Kbe,p2r,_2r,wn,u2r,Zbe,b2r,v2r,e2e,F2r,T2r,o2e,M2r,E2r,C2r,r2e,R7,t2e,w2r,A2r,Uz,y2r,L2r,x2r,a2e,k2r,S2r,v0,cPe,Oc,B7,n2e,F0,R2r,s2e,B2r,fPe,Lr,T0,P2r,Vc,$2r,Jz,I2r,q2r,Yz,N2r,j2r,D2r,M0,G2r,l2e,O2r,V2r,X2r,Mt,E0,z2r,i2e,Q2r,W2r,Xc,H2r,d2e,U2r,J2r,Kz,Y2r,K2r,Z2r,c2e,e6r,o6r,C0,r6r,Eo,w0,t6r,f2e,a6r,n6r,An,s6r,m2e,l6r,i6r,g2e,d6r,c6r,h2e,f6r,m6r,g6r,K,P7,p2e,h6r,p6r,Zz,_6r,u6r,b6r,$7,_2e,v6r,F6r,eQ,T6r,M6r,E6r,I7,u2e,C6r,w6r,oQ,A6r,y6r,L6r,q7,b2e,x6r,k6r,rQ,S6r,R6r,B6r,N7,v2e,P6r,$6r,tQ,I6r,q6r,N6r,j7,F2e,j6r,D6r,aQ,G6r,O6r,V6r,D7,T2e,X6r,z6r,nQ,Q6r,W6r,H6r,G7,M2e,U6r,J6r,sQ,Y6r,K6r,Z6r,O7,E2e,evr,ovr,lQ,rvr,tvr,avr,V7,C2e,nvr,svr,iQ,lvr,ivr,dvr,X7,w2e,cvr,fvr,dQ,mvr,gvr,hvr,z7,A2e,pvr,_vr,cQ,uvr,bvr,vvr,Q7,y2e,Fvr,Tvr,fQ,Mvr,Evr,Cvr,W7,L2e,wvr,Avr,mQ,yvr,Lvr,xvr,H7,x2e,kvr,Svr,gQ,Rvr,Bvr,Pvr,U7,k2e,$vr,Ivr,hQ,qvr,Nvr,jvr,J7,S2e,Dvr,Gvr,pQ,Ovr,Vvr,Xvr,Y7,R2e,zvr,Qvr,_Q,Wvr,Hvr,Uvr,K7,B2e,Jvr,Yvr,uQ,Kvr,Zvr,eFr,Z7,P2e,oFr,rFr,bQ,tFr,aFr,nFr,$2e,sFr,lFr,A0,mPe,zc,eM,I2e,y0,iFr,q2e,dFr,gPe,xr,L0,cFr,Qc,fFr,vQ,mFr,gFr,FQ,hFr,pFr,_Fr,x0,uFr,N2e,bFr,vFr,FFr,Et,k0,TFr,j2e,MFr,EFr,Wc,CFr,D2e,wFr,AFr,TQ,yFr,LFr,xFr,G2e,kFr,SFr,S0,RFr,Co,R0,BFr,O2e,PFr,$Fr,yn,IFr,V2e,qFr,NFr,X2e,jFr,DFr,z2e,GFr,OFr,VFr,Z,oM,Q2e,XFr,zFr,MQ,QFr,WFr,HFr,rM,W2e,UFr,JFr,EQ,YFr,KFr,ZFr,tM,H2e,eTr,oTr,CQ,rTr,tTr,aTr,aM,U2e,nTr,sTr,wQ,lTr,iTr,dTr,nM,J2e,cTr,fTr,AQ,mTr,gTr,hTr,sM,Y2e,pTr,_Tr,yQ,uTr,bTr,vTr,lM,K2e,FTr,TTr,LQ,MTr,ETr,CTr,iM,Z2e,wTr,ATr,xQ,yTr,LTr,xTr,dM,e6e,kTr,STr,kQ,RTr,BTr,PTr,cM,o6e,$Tr,ITr,SQ,qTr,NTr,jTr,fM,r6e,DTr,GTr,RQ,OTr,VTr,XTr,mM,t6e,zTr,QTr,BQ,WTr,HTr,UTr,gM,a6e,JTr,YTr,PQ,KTr,ZTr,e8r,hM,n6e,o8r,r8r,$Q,t8r,a8r,n8r,pM,s6e,s8r,l8r,IQ,i8r,d8r,c8r,_M,l6e,f8r,m8r,qQ,g8r,h8r,p8r,uM,i6e,_8r,u8r,NQ,b8r,v8r,F8r,bM,d6e,T8r,M8r,jQ,E8r,C8r,w8r,vM,c6e,A8r,y8r,DQ,L8r,x8r,k8r,FM,f6e,S8r,R8r,GQ,B8r,P8r,$8r,m6e,I8r,q8r,B0,hPe,Hc,TM,g6e,P0,N8r,h6e,j8r,pPe,kr,$0,D8r,Uc,G8r,OQ,O8r,V8r,VQ,X8r,z8r,Q8r,I0,W8r,p6e,H8r,U8r,J8r,Ct,q0,Y8r,_6e,K8r,Z8r,Jc,e7r,u6e,o7r,r7r,XQ,t7r,a7r,n7r,b6e,s7r,l7r,N0,i7r,wo,j0,d7r,v6e,c7r,f7r,Ln,m7r,F6e,g7r,h7r,T6e,p7r,_7r,M6e,u7r,b7r,v7r,E6e,MM,C6e,F7r,T7r,zQ,M7r,E7r,C7r,w6e,w7r,A7r,D0,_Pe,Yc,EM,A6e,G0,y7r,y6e,L7r,uPe,Sr,O0,x7r,Kc,k7r,QQ,S7r,R7r,WQ,B7r,P7r,$7r,V0,I7r,L6e,q7r,N7r,j7r,wt,X0,D7r,x6e,G7r,O7r,Zc,V7r,k6e,X7r,z7r,HQ,Q7r,W7r,H7r,S6e,U7r,J7r,z0,Y7r,Ao,Q0,K7r,R6e,Z7r,eMr,xn,oMr,B6e,rMr,tMr,P6e,aMr,nMr,$6e,sMr,lMr,iMr,I6e,CM,q6e,dMr,cMr,UQ,fMr,mMr,gMr,N6e,hMr,pMr,W0,bPe,ef,wM,j6e,H0,_Mr,D6e,uMr,vPe,Rr,U0,bMr,of,vMr,JQ,FMr,TMr,YQ,MMr,EMr,CMr,J0,wMr,G6e,AMr,yMr,LMr,At,Y0,xMr,O6e,kMr,SMr,rf,RMr,V6e,BMr,PMr,KQ,$Mr,IMr,qMr,X6e,NMr,jMr,K0,DMr,yo,Z0,GMr,z6e,OMr,VMr,kn,XMr,Q6e,zMr,QMr,W6e,WMr,HMr,H6e,UMr,JMr,YMr,z,AM,U6e,KMr,ZMr,ZQ,e4r,o4r,r4r,yM,J6e,t4r,a4r,eW,n4r,s4r,l4r,LM,Y6e,i4r,d4r,oW,c4r,f4r,m4r,xM,K6e,g4r,h4r,rW,p4r,_4r,u4r,kM,Z6e,b4r,v4r,tW,F4r,T4r,M4r,SM,eve,E4r,C4r,aW,w4r,A4r,y4r,RM,ove,L4r,x4r,nW,k4r,S4r,R4r,BM,rve,B4r,P4r,sW,$4r,I4r,q4r,PM,tve,N4r,j4r,lW,D4r,G4r,O4r,$M,ave,V4r,X4r,iW,z4r,Q4r,W4r,IM,nve,H4r,U4r,dW,J4r,Y4r,K4r,qM,sve,Z4r,eEr,cW,oEr,rEr,tEr,NM,lve,aEr,nEr,fW,sEr,lEr,iEr,jM,ive,dEr,cEr,mW,fEr,mEr,gEr,DM,dve,hEr,pEr,gW,_Er,uEr,bEr,GM,cve,vEr,FEr,hW,TEr,MEr,EEr,OM,fve,CEr,wEr,pW,AEr,yEr,LEr,VM,mve,xEr,kEr,_W,SEr,REr,BEr,XM,gve,PEr,$Er,uW,IEr,qEr,NEr,zM,hve,jEr,DEr,bW,GEr,OEr,VEr,QM,pve,XEr,zEr,vW,QEr,WEr,HEr,WM,_ve,UEr,JEr,FW,YEr,KEr,ZEr,HM,uve,e5r,o5r,TW,r5r,t5r,a5r,UM,bve,n5r,s5r,MW,l5r,i5r,d5r,JM,vve,c5r,f5r,EW,m5r,g5r,h5r,Fve,p5r,_5r,ey,FPe,tf,YM,Tve,oy,u5r,Mve,b5r,TPe,Br,ry,v5r,af,F5r,CW,T5r,M5r,wW,E5r,C5r,w5r,ty,A5r,Eve,y5r,L5r,x5r,yt,ay,k5r,Cve,S5r,R5r,nf,B5r,wve,P5r,$5r,AW,I5r,q5r,N5r,Ave,j5r,D5r,ny,G5r,Lo,sy,O5r,yve,V5r,X5r,Sn,z5r,Lve,Q5r,W5r,xve,H5r,U5r,kve,J5r,Y5r,K5r,ca,KM,Sve,Z5r,e3r,yW,o3r,r3r,t3r,ZM,Rve,a3r,n3r,LW,s3r,l3r,i3r,e4,Bve,d3r,c3r,xW,f3r,m3r,g3r,o4,Pve,h3r,p3r,kW,_3r,u3r,b3r,r4,$ve,v3r,F3r,SW,T3r,M3r,E3r,Ive,C3r,w3r,ly,MPe,sf,t4,qve,iy,A3r,Nve,y3r,EPe,Pr,dy,L3r,lf,x3r,RW,k3r,S3r,BW,R3r,B3r,P3r,cy,$3r,jve,I3r,q3r,N3r,Lt,fy,j3r,Dve,D3r,G3r,df,O3r,Gve,V3r,X3r,PW,z3r,Q3r,W3r,Ove,H3r,U3r,my,J3r,xo,gy,Y3r,Vve,K3r,Z3r,Rn,eCr,Xve,oCr,rCr,zve,tCr,aCr,Qve,nCr,sCr,lCr,me,a4,Wve,iCr,dCr,$W,cCr,fCr,mCr,n4,Hve,gCr,hCr,IW,pCr,_Cr,uCr,s4,Uve,bCr,vCr,qW,FCr,TCr,MCr,l4,Jve,ECr,CCr,NW,wCr,ACr,yCr,i4,Yve,LCr,xCr,jW,kCr,SCr,RCr,d4,Kve,BCr,PCr,DW,$Cr,ICr,qCr,c4,Zve,NCr,jCr,GW,DCr,GCr,OCr,f4,eFe,VCr,XCr,OW,zCr,QCr,WCr,m4,oFe,HCr,UCr,VW,JCr,YCr,KCr,g4,rFe,ZCr,ewr,XW,owr,rwr,twr,h4,tFe,awr,nwr,zW,swr,lwr,iwr,p4,aFe,dwr,cwr,QW,fwr,mwr,gwr,nFe,hwr,pwr,hy,CPe,cf,_4,sFe,py,_wr,lFe,uwr,wPe,$r,_y,bwr,ff,vwr,WW,Fwr,Twr,HW,Mwr,Ewr,Cwr,uy,wwr,iFe,Awr,ywr,Lwr,xt,by,xwr,dFe,kwr,Swr,mf,Rwr,cFe,Bwr,Pwr,UW,$wr,Iwr,qwr,fFe,Nwr,jwr,vy,Dwr,ko,Fy,Gwr,mFe,Owr,Vwr,Bn,Xwr,gFe,zwr,Qwr,hFe,Wwr,Hwr,pFe,Uwr,Jwr,Ywr,ve,u4,_Fe,Kwr,Zwr,JW,eAr,oAr,rAr,b4,uFe,tAr,aAr,YW,nAr,sAr,lAr,v4,bFe,iAr,dAr,KW,cAr,fAr,mAr,F4,vFe,gAr,hAr,ZW,pAr,_Ar,uAr,T4,FFe,bAr,vAr,eH,FAr,TAr,MAr,M4,TFe,EAr,CAr,oH,wAr,AAr,yAr,E4,MFe,LAr,xAr,rH,kAr,SAr,RAr,C4,EFe,BAr,PAr,tH,$Ar,IAr,qAr,w4,CFe,NAr,jAr,aH,DAr,GAr,OAr,A4,wFe,VAr,XAr,nH,zAr,QAr,WAr,AFe,HAr,UAr,Ty,APe,gf,y4,yFe,My,JAr,LFe,YAr,yPe,Ir,Ey,KAr,hf,ZAr,sH,e0r,o0r,lH,r0r,t0r,a0r,Cy,n0r,xFe,s0r,l0r,i0r,kt,wy,d0r,kFe,c0r,f0r,pf,m0r,SFe,g0r,h0r,iH,p0r,_0r,u0r,RFe,b0r,v0r,Ay,F0r,So,yy,T0r,BFe,M0r,E0r,Pn,C0r,PFe,w0r,A0r,$Fe,y0r,L0r,IFe,x0r,k0r,S0r,Ee,L4,qFe,R0r,B0r,dH,P0r,$0r,I0r,x4,NFe,q0r,N0r,cH,j0r,D0r,G0r,k4,jFe,O0r,V0r,fH,X0r,z0r,Q0r,S4,DFe,W0r,H0r,mH,U0r,J0r,Y0r,R4,GFe,K0r,Z0r,gH,eyr,oyr,ryr,B4,OFe,tyr,ayr,hH,nyr,syr,lyr,P4,VFe,iyr,dyr,pH,cyr,fyr,myr,$4,XFe,gyr,hyr,_H,pyr,_yr,uyr,I4,zFe,byr,vyr,uH,Fyr,Tyr,Myr,QFe,Eyr,Cyr,Ly,LPe,_f,q4,WFe,xy,wyr,HFe,Ayr,xPe,qr,ky,yyr,uf,Lyr,bH,xyr,kyr,vH,Syr,Ryr,Byr,Sy,Pyr,UFe,$yr,Iyr,qyr,St,Ry,Nyr,JFe,jyr,Dyr,bf,Gyr,YFe,Oyr,Vyr,FH,Xyr,zyr,Qyr,KFe,Wyr,Hyr,By,Uyr,Ro,Py,Jyr,ZFe,Yyr,Kyr,$n,Zyr,eTe,eLr,oLr,oTe,rLr,tLr,rTe,aLr,nLr,sLr,Fe,N4,tTe,lLr,iLr,TH,dLr,cLr,fLr,j4,aTe,mLr,gLr,MH,hLr,pLr,_Lr,D4,nTe,uLr,bLr,EH,vLr,FLr,TLr,G4,sTe,MLr,ELr,CH,CLr,wLr,ALr,O4,lTe,yLr,LLr,wH,xLr,kLr,SLr,V4,iTe,RLr,BLr,AH,PLr,$Lr,ILr,X4,dTe,qLr,NLr,yH,jLr,DLr,GLr,z4,cTe,OLr,VLr,LH,XLr,zLr,QLr,Q4,fTe,WLr,HLr,xH,ULr,JLr,YLr,W4,mTe,KLr,ZLr,kH,e9r,o9r,r9r,gTe,t9r,a9r,$y,kPe,vf,H4,hTe,Iy,n9r,pTe,s9r,SPe,Nr,qy,l9r,Ff,i9r,SH,d9r,c9r,RH,f9r,m9r,g9r,Ny,h9r,_Te,p9r,_9r,u9r,Rt,jy,b9r,uTe,v9r,F9r,Tf,T9r,bTe,M9r,E9r,BH,C9r,w9r,A9r,vTe,y9r,L9r,Dy,x9r,Bo,Gy,k9r,FTe,S9r,R9r,In,B9r,TTe,P9r,$9r,MTe,I9r,q9r,ETe,N9r,j9r,D9r,Te,U4,CTe,G9r,O9r,PH,V9r,X9r,z9r,J4,wTe,Q9r,W9r,$H,H9r,U9r,J9r,Y4,ATe,Y9r,K9r,IH,Z9r,exr,oxr,K4,yTe,rxr,txr,qH,axr,nxr,sxr,Z4,LTe,lxr,ixr,NH,dxr,cxr,fxr,eE,xTe,mxr,gxr,jH,hxr,pxr,_xr,oE,kTe,uxr,bxr,DH,vxr,Fxr,Txr,rE,STe,Mxr,Exr,GH,Cxr,wxr,Axr,tE,RTe,yxr,Lxr,OH,xxr,kxr,Sxr,aE,BTe,Rxr,Bxr,VH,Pxr,$xr,Ixr,PTe,qxr,Nxr,Oy,RPe,Mf,nE,$Te,Vy,jxr,ITe,Dxr,BPe,jr,Xy,Gxr,Ef,Oxr,XH,Vxr,Xxr,zH,zxr,Qxr,Wxr,zy,Hxr,qTe,Uxr,Jxr,Yxr,Bt,Qy,Kxr,NTe,Zxr,ekr,Cf,okr,jTe,rkr,tkr,QH,akr,nkr,skr,DTe,lkr,ikr,Wy,dkr,Po,Hy,ckr,GTe,fkr,mkr,qn,gkr,OTe,hkr,pkr,VTe,_kr,ukr,XTe,bkr,vkr,Fkr,Be,sE,zTe,Tkr,Mkr,WH,Ekr,Ckr,wkr,lE,QTe,Akr,ykr,HH,Lkr,xkr,kkr,iE,WTe,Skr,Rkr,UH,Bkr,Pkr,$kr,dE,HTe,Ikr,qkr,JH,Nkr,jkr,Dkr,cE,UTe,Gkr,Okr,YH,Vkr,Xkr,zkr,fE,JTe,Qkr,Wkr,KH,Hkr,Ukr,Jkr,mE,YTe,Ykr,Kkr,ZH,Zkr,eSr,oSr,gE,KTe,rSr,tSr,eU,aSr,nSr,sSr,ZTe,lSr,iSr,Uy,PPe,wf,hE,e8e,Jy,dSr,o8e,cSr,$Pe,Dr,Yy,fSr,Af,mSr,oU,gSr,hSr,rU,pSr,_Sr,uSr,Ky,bSr,r8e,vSr,FSr,TSr,Pt,Zy,MSr,t8e,ESr,CSr,yf,wSr,a8e,ASr,ySr,tU,LSr,xSr,kSr,n8e,SSr,RSr,eL,BSr,$o,oL,PSr,s8e,$Sr,ISr,Nn,qSr,l8e,NSr,jSr,i8e,DSr,GSr,d8e,OSr,VSr,XSr,Pe,pE,c8e,zSr,QSr,aU,WSr,HSr,USr,_E,f8e,JSr,YSr,nU,KSr,ZSr,eRr,uE,m8e,oRr,rRr,sU,tRr,aRr,nRr,bE,g8e,sRr,lRr,lU,iRr,dRr,cRr,vE,h8e,fRr,mRr,iU,gRr,hRr,pRr,FE,p8e,_Rr,uRr,dU,bRr,vRr,FRr,TE,_8e,TRr,MRr,cU,ERr,CRr,wRr,ME,u8e,ARr,yRr,fU,LRr,xRr,kRr,b8e,SRr,RRr,rL,IPe,Lf,EE,v8e,tL,BRr,F8e,PRr,qPe,Gr,aL,$Rr,xf,IRr,mU,qRr,NRr,gU,jRr,DRr,GRr,nL,ORr,T8e,VRr,XRr,zRr,$t,sL,QRr,M8e,WRr,HRr,kf,URr,E8e,JRr,YRr,hU,KRr,ZRr,eBr,C8e,oBr,rBr,lL,tBr,Io,iL,aBr,w8e,nBr,sBr,jn,lBr,A8e,iBr,dBr,y8e,cBr,fBr,L8e,mBr,gBr,hBr,x8e,CE,k8e,pBr,_Br,pU,uBr,bBr,vBr,S8e,FBr,TBr,dL,NPe,Sf,wE,R8e,cL,MBr,B8e,EBr,jPe,Or,fL,CBr,Rf,wBr,_U,ABr,yBr,uU,LBr,xBr,kBr,mL,SBr,P8e,RBr,BBr,PBr,It,gL,$Br,$8e,IBr,qBr,Bf,NBr,I8e,jBr,DBr,bU,GBr,OBr,VBr,q8e,XBr,zBr,hL,QBr,qo,pL,WBr,N8e,HBr,UBr,Dn,JBr,j8e,YBr,KBr,D8e,ZBr,ePr,G8e,oPr,rPr,tPr,_L,AE,O8e,aPr,nPr,vU,sPr,lPr,iPr,yE,V8e,dPr,cPr,FU,fPr,mPr,gPr,X8e,hPr,pPr,uL,DPe,Pf,LE,z8e,bL,_Pr,Q8e,uPr,GPe,Vr,vL,bPr,$f,vPr,TU,FPr,TPr,MU,MPr,EPr,CPr,FL,wPr,W8e,APr,yPr,LPr,qt,TL,xPr,H8e,kPr,SPr,If,RPr,U8e,BPr,PPr,EU,$Pr,IPr,qPr,J8e,NPr,jPr,ML,DPr,No,EL,GPr,Y8e,OPr,VPr,Gn,XPr,K8e,zPr,QPr,Z8e,WPr,HPr,e7e,UPr,JPr,YPr,o7e,xE,r7e,KPr,ZPr,CU,e$r,o$r,r$r,t7e,t$r,a$r,CL,OPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),P5=new X({}),$5=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Xf=new n$r({props:{warning:!0,$$slots:{default:[oCt]},$$scope:{ctx:Nf}}}),I5=new X({}),q5=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/configuration_auto.py#L560"}}),D5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/configuration_auto.py#L583"}}),G5=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),O5=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/configuration_auto.py#L705"}}),V5=new X({}),X5=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/tokenization_auto.py#L359"}}),W5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16871/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/tokenization_auto.py#L373"}}),H5=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),U5=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/tokenization_auto.py#L569"}}),J5=new X({}),Y5=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/feature_extraction_auto.py#L173"}}),e3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16871/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),jh=new n$r({props:{$$slots:{default:[rCt]},$$scope:{ctx:Nf}}}),o3=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),r3=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/feature_extraction_auto.py#L314"}}),t3=new X({}),a3=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/processing_auto.py#L70"}}),l3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/processing_auto.py#L84"}}),Jh=new n$r({props:{$$slots:{default:[tCt]},$$scope:{ctx:Nf}}}),i3=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),d3=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/processing_auto.py#L237"}}),c3=new X({}),f3=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L714"}}),g3=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),p3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u3=new X({}),b3=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L721"}}),F3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),M3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C3=new X({}),w3=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L736"}}),y3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),x3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S3=new X({}),R3=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L743"}}),P3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),I3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N3=new X({}),j3=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L750"}}),G3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),V3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z3=new X({}),Q3=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L759"}}),H3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),J3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K3=new X({}),Z3=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L793"}}),oC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),tC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nC=new X({}),sC=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L800"}}),iC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),cC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mC=new X({}),gC=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L786"}}),pC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),uC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vC=new X({}),FC=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L768"}}),MC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),CC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AC=new X({}),yC=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L775"}}),xC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),SC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BC=new X({}),PC=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L809"}}),IC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),NC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),jC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DC=new X({}),GC=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L848"}}),VC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),zC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WC=new X({}),HC=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L855"}}),JC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),KC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ew=new X({}),ow=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L878"}}),tw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),nw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lw=new X({}),iw=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L862"}}),cw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),mw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hw=new X({}),pw=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L869"}}),uw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),vw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Mw=new X({}),Ew=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L887"}}),ww=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),yw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xw=new X({}),kw=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L894"}}),Rw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Pw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new X({}),qw=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L841"}}),jw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Gw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new X({}),Xw=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L816"}}),Qw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),Ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Hw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jw=new X({}),Yw=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L823"}}),Zw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),oA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new X({}),aA=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_auto.py#L832"}}),sA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),iA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),dA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new X({}),fA=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),gA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),pA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),_A=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new X({}),bA=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),FA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),TA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),MA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),EA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),wA=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),yA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),xA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new X({}),RA=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),PA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),$A=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),IA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),DA=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),OA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),VA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),XA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),zA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),WA=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),UA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),JA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),YA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),KA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new X({}),e0=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),r0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),a0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s0=new X({}),l0=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),d0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),f0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new X({}),h0=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),_0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),b0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new X({}),T0=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),E0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),w0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y0=new X({}),L0=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),k0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),R0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new X({}),$0=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),q0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),j0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new X({}),O0=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),X0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Q0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H0=new X({}),U0=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Y0=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Z0=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),ey=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oy=new X({}),ry=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),ay=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),ny=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),sy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),ly=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iy=new X({}),dy=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),fy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),my=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),gy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),hy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),py=new X({}),_y=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),by=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),vy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),Fy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Ty=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new X({}),Ey=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),wy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),Ay=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),yy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Ly=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xy=new X({}),ky=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Ry=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),By=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),Py=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),$y=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new X({}),qy=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),jy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),Dy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),Gy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Oy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new X({}),Xy=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),Qy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),Wy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),Hy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),Uy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new X({}),Yy=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Zy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),eL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),oL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),rL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new X({}),aL=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),sL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),lL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),iL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),dL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cL=new X({}),fL=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),gL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),hL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),pL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bL=new X({}),vL=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),TL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L389"}}),ML=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),EL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16871/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16871/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16871/src/transformers/models/auto/auto_factory.py#L417"}}),CL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){ee=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(he.$$.fragment),Me=l(),Xo=a("span"),ji=o("Auto Classes"),jf=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Gi=a("code"),k5=o("from_pretrained()"),Df=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Oi=o("Instantiating one of "),On=a("a"),S5=o("AutoConfig"),Vn=o(", "),Xn=a("a"),R5=o("AutoModel"),Vi=o(`, and
`),zn=a("a"),B5=o("AutoTokenizer"),Xi=o(" will directly create a class of the relevant architecture. For instance"),Gf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),C9=o("will create a model that is an instance of "),zi=a("a"),w9=o("BertModel"),A9=o("."),zo=l(),Ga=a("p"),y9=o("There is one class of "),Of=a("code"),L9=o("AutoModel"),eqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GRe=l(),Qi=a("h2"),Vf=a("a"),uY=a("span"),f(P5.$$.fragment),oqe=l(),bY=a("span"),rqe=o("Extending the Auto Classes"),ORe=l(),Qn=a("p"),tqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),vY=a("code"),aqe=o("NewModel"),nqe=o(", make sure you have a "),FY=a("code"),sqe=o("NewModelConfig"),lqe=o(` then you can add those to the auto
classes like this:`),VRe=l(),f($5.$$.fragment),XRe=l(),x9=a("p"),iqe=o("You will then be able to use the auto classes like you would usually do!"),zRe=l(),f(Xf.$$.fragment),QRe=l(),Wi=a("h2"),zf=a("a"),TY=a("span"),f(I5.$$.fragment),dqe=l(),MY=a("span"),cqe=o("AutoConfig"),WRe=l(),Qo=a("div"),f(q5.$$.fragment),fqe=l(),N5=a("p"),mqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),k9=a("a"),gqe=o("from_pretrained()"),hqe=o(" class method."),pqe=l(),j5=a("p"),_qe=o("This class cannot be instantiated directly using "),EY=a("code"),uqe=o("__init__()"),bqe=o(" (throws an error)."),vqe=l(),mo=a("div"),f(D5.$$.fragment),Fqe=l(),CY=a("p"),Tqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Mqe=l(),Hi=a("p"),Eqe=o("The configuration class to instantiate is selected based on the "),wY=a("code"),Cqe=o("model_type"),wqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),AY=a("code"),Aqe=o("pretrained_model_name_or_path"),yqe=o(":"),Lqe=l(),v=a("ul"),Qf=a("li"),yY=a("strong"),xqe=o("albert"),kqe=o(" \u2014 "),S9=a("a"),Sqe=o("AlbertConfig"),Rqe=o(" (ALBERT model)"),Bqe=l(),Wf=a("li"),LY=a("strong"),Pqe=o("bart"),$qe=o(" \u2014 "),R9=a("a"),Iqe=o("BartConfig"),qqe=o(" (BART model)"),Nqe=l(),Hf=a("li"),xY=a("strong"),jqe=o("beit"),Dqe=o(" \u2014 "),B9=a("a"),Gqe=o("BeitConfig"),Oqe=o(" (BEiT model)"),Vqe=l(),Uf=a("li"),kY=a("strong"),Xqe=o("bert"),zqe=o(" \u2014 "),P9=a("a"),Qqe=o("BertConfig"),Wqe=o(" (BERT model)"),Hqe=l(),Jf=a("li"),SY=a("strong"),Uqe=o("bert-generation"),Jqe=o(" \u2014 "),$9=a("a"),Yqe=o("BertGenerationConfig"),Kqe=o(" (Bert Generation model)"),Zqe=l(),Yf=a("li"),RY=a("strong"),eNe=o("big_bird"),oNe=o(" \u2014 "),I9=a("a"),rNe=o("BigBirdConfig"),tNe=o(" (BigBird model)"),aNe=l(),Kf=a("li"),BY=a("strong"),nNe=o("bigbird_pegasus"),sNe=o(" \u2014 "),q9=a("a"),lNe=o("BigBirdPegasusConfig"),iNe=o(" (BigBirdPegasus model)"),dNe=l(),Zf=a("li"),PY=a("strong"),cNe=o("blenderbot"),fNe=o(" \u2014 "),N9=a("a"),mNe=o("BlenderbotConfig"),gNe=o(" (Blenderbot model)"),hNe=l(),em=a("li"),$Y=a("strong"),pNe=o("blenderbot-small"),_Ne=o(" \u2014 "),j9=a("a"),uNe=o("BlenderbotSmallConfig"),bNe=o(" (BlenderbotSmall model)"),vNe=l(),om=a("li"),IY=a("strong"),FNe=o("camembert"),TNe=o(" \u2014 "),D9=a("a"),MNe=o("CamembertConfig"),ENe=o(" (CamemBERT model)"),CNe=l(),rm=a("li"),qY=a("strong"),wNe=o("canine"),ANe=o(" \u2014 "),G9=a("a"),yNe=o("CanineConfig"),LNe=o(" (Canine model)"),xNe=l(),tm=a("li"),NY=a("strong"),kNe=o("clip"),SNe=o(" \u2014 "),O9=a("a"),RNe=o("CLIPConfig"),BNe=o(" (CLIP model)"),PNe=l(),am=a("li"),jY=a("strong"),$Ne=o("convbert"),INe=o(" \u2014 "),V9=a("a"),qNe=o("ConvBertConfig"),NNe=o(" (ConvBERT model)"),jNe=l(),nm=a("li"),DY=a("strong"),DNe=o("convnext"),GNe=o(" \u2014 "),X9=a("a"),ONe=o("ConvNextConfig"),VNe=o(" (ConvNext model)"),XNe=l(),sm=a("li"),GY=a("strong"),zNe=o("ctrl"),QNe=o(" \u2014 "),z9=a("a"),WNe=o("CTRLConfig"),HNe=o(" (CTRL model)"),UNe=l(),lm=a("li"),OY=a("strong"),JNe=o("data2vec-audio"),YNe=o(" \u2014 "),Q9=a("a"),KNe=o("Data2VecAudioConfig"),ZNe=o(" (Data2VecAudio model)"),eje=l(),im=a("li"),VY=a("strong"),oje=o("data2vec-text"),rje=o(" \u2014 "),W9=a("a"),tje=o("Data2VecTextConfig"),aje=o(" (Data2VecText model)"),nje=l(),dm=a("li"),XY=a("strong"),sje=o("data2vec-vision"),lje=o(" \u2014 "),H9=a("a"),ije=o("Data2VecVisionConfig"),dje=o(" (Data2VecVision model)"),cje=l(),cm=a("li"),zY=a("strong"),fje=o("deberta"),mje=o(" \u2014 "),U9=a("a"),gje=o("DebertaConfig"),hje=o(" (DeBERTa model)"),pje=l(),fm=a("li"),QY=a("strong"),_je=o("deberta-v2"),uje=o(" \u2014 "),J9=a("a"),bje=o("DebertaV2Config"),vje=o(" (DeBERTa-v2 model)"),Fje=l(),mm=a("li"),WY=a("strong"),Tje=o("decision_transformer"),Mje=o(" \u2014 "),Y9=a("a"),Eje=o("DecisionTransformerConfig"),Cje=o(" (Decision Transformer model)"),wje=l(),gm=a("li"),HY=a("strong"),Aje=o("deit"),yje=o(" \u2014 "),K9=a("a"),Lje=o("DeiTConfig"),xje=o(" (DeiT model)"),kje=l(),hm=a("li"),UY=a("strong"),Sje=o("detr"),Rje=o(" \u2014 "),Z9=a("a"),Bje=o("DetrConfig"),Pje=o(" (DETR model)"),$je=l(),pm=a("li"),JY=a("strong"),Ije=o("distilbert"),qje=o(" \u2014 "),ex=a("a"),Nje=o("DistilBertConfig"),jje=o(" (DistilBERT model)"),Dje=l(),_m=a("li"),YY=a("strong"),Gje=o("dpr"),Oje=o(" \u2014 "),ox=a("a"),Vje=o("DPRConfig"),Xje=o(" (DPR model)"),zje=l(),um=a("li"),KY=a("strong"),Qje=o("dpt"),Wje=o(" \u2014 "),rx=a("a"),Hje=o("DPTConfig"),Uje=o(" (DPT model)"),Jje=l(),bm=a("li"),ZY=a("strong"),Yje=o("electra"),Kje=o(" \u2014 "),tx=a("a"),Zje=o("ElectraConfig"),eDe=o(" (ELECTRA model)"),oDe=l(),vm=a("li"),eK=a("strong"),rDe=o("encoder-decoder"),tDe=o(" \u2014 "),ax=a("a"),aDe=o("EncoderDecoderConfig"),nDe=o(" (Encoder decoder model)"),sDe=l(),Fm=a("li"),oK=a("strong"),lDe=o("flaubert"),iDe=o(" \u2014 "),nx=a("a"),dDe=o("FlaubertConfig"),cDe=o(" (FlauBERT model)"),fDe=l(),Tm=a("li"),rK=a("strong"),mDe=o("fnet"),gDe=o(" \u2014 "),sx=a("a"),hDe=o("FNetConfig"),pDe=o(" (FNet model)"),_De=l(),Mm=a("li"),tK=a("strong"),uDe=o("fsmt"),bDe=o(" \u2014 "),lx=a("a"),vDe=o("FSMTConfig"),FDe=o(" (FairSeq Machine-Translation model)"),TDe=l(),Em=a("li"),aK=a("strong"),MDe=o("funnel"),EDe=o(" \u2014 "),ix=a("a"),CDe=o("FunnelConfig"),wDe=o(" (Funnel Transformer model)"),ADe=l(),Cm=a("li"),nK=a("strong"),yDe=o("glpn"),LDe=o(" \u2014 "),dx=a("a"),xDe=o("GLPNConfig"),kDe=o(" (GLPN model)"),SDe=l(),wm=a("li"),sK=a("strong"),RDe=o("gpt2"),BDe=o(" \u2014 "),cx=a("a"),PDe=o("GPT2Config"),$De=o(" (OpenAI GPT-2 model)"),IDe=l(),Am=a("li"),lK=a("strong"),qDe=o("gpt_neo"),NDe=o(" \u2014 "),fx=a("a"),jDe=o("GPTNeoConfig"),DDe=o(" (GPT Neo model)"),GDe=l(),ym=a("li"),iK=a("strong"),ODe=o("gptj"),VDe=o(" \u2014 "),mx=a("a"),XDe=o("GPTJConfig"),zDe=o(" (GPT-J model)"),QDe=l(),Lm=a("li"),dK=a("strong"),WDe=o("hubert"),HDe=o(" \u2014 "),gx=a("a"),UDe=o("HubertConfig"),JDe=o(" (Hubert model)"),YDe=l(),xm=a("li"),cK=a("strong"),KDe=o("ibert"),ZDe=o(" \u2014 "),hx=a("a"),eGe=o("IBertConfig"),oGe=o(" (I-BERT model)"),rGe=l(),km=a("li"),fK=a("strong"),tGe=o("imagegpt"),aGe=o(" \u2014 "),px=a("a"),nGe=o("ImageGPTConfig"),sGe=o(" (ImageGPT model)"),lGe=l(),Sm=a("li"),mK=a("strong"),iGe=o("layoutlm"),dGe=o(" \u2014 "),_x=a("a"),cGe=o("LayoutLMConfig"),fGe=o(" (LayoutLM model)"),mGe=l(),Rm=a("li"),gK=a("strong"),gGe=o("layoutlmv2"),hGe=o(" \u2014 "),ux=a("a"),pGe=o("LayoutLMv2Config"),_Ge=o(" (LayoutLMv2 model)"),uGe=l(),Bm=a("li"),hK=a("strong"),bGe=o("led"),vGe=o(" \u2014 "),bx=a("a"),FGe=o("LEDConfig"),TGe=o(" (LED model)"),MGe=l(),Pm=a("li"),pK=a("strong"),EGe=o("longformer"),CGe=o(" \u2014 "),vx=a("a"),wGe=o("LongformerConfig"),AGe=o(" (Longformer model)"),yGe=l(),$m=a("li"),_K=a("strong"),LGe=o("luke"),xGe=o(" \u2014 "),Fx=a("a"),kGe=o("LukeConfig"),SGe=o(" (LUKE model)"),RGe=l(),Im=a("li"),uK=a("strong"),BGe=o("lxmert"),PGe=o(" \u2014 "),Tx=a("a"),$Ge=o("LxmertConfig"),IGe=o(" (LXMERT model)"),qGe=l(),qm=a("li"),bK=a("strong"),NGe=o("m2m_100"),jGe=o(" \u2014 "),Mx=a("a"),DGe=o("M2M100Config"),GGe=o(" (M2M100 model)"),OGe=l(),Nm=a("li"),vK=a("strong"),VGe=o("marian"),XGe=o(" \u2014 "),Ex=a("a"),zGe=o("MarianConfig"),QGe=o(" (Marian model)"),WGe=l(),jm=a("li"),FK=a("strong"),HGe=o("maskformer"),UGe=o(" \u2014 "),Cx=a("a"),JGe=o("MaskFormerConfig"),YGe=o(" (MaskFormer model)"),KGe=l(),Dm=a("li"),TK=a("strong"),ZGe=o("mbart"),eOe=o(" \u2014 "),wx=a("a"),oOe=o("MBartConfig"),rOe=o(" (mBART model)"),tOe=l(),Gm=a("li"),MK=a("strong"),aOe=o("megatron-bert"),nOe=o(" \u2014 "),Ax=a("a"),sOe=o("MegatronBertConfig"),lOe=o(" (MegatronBert model)"),iOe=l(),Om=a("li"),EK=a("strong"),dOe=o("mobilebert"),cOe=o(" \u2014 "),yx=a("a"),fOe=o("MobileBertConfig"),mOe=o(" (MobileBERT model)"),gOe=l(),Vm=a("li"),CK=a("strong"),hOe=o("mpnet"),pOe=o(" \u2014 "),Lx=a("a"),_Oe=o("MPNetConfig"),uOe=o(" (MPNet model)"),bOe=l(),Xm=a("li"),wK=a("strong"),vOe=o("mt5"),FOe=o(" \u2014 "),xx=a("a"),TOe=o("MT5Config"),MOe=o(" (mT5 model)"),EOe=l(),zm=a("li"),AK=a("strong"),COe=o("nystromformer"),wOe=o(" \u2014 "),kx=a("a"),AOe=o("NystromformerConfig"),yOe=o(" (Nystromformer model)"),LOe=l(),Qm=a("li"),yK=a("strong"),xOe=o("openai-gpt"),kOe=o(" \u2014 "),Sx=a("a"),SOe=o("OpenAIGPTConfig"),ROe=o(" (OpenAI GPT model)"),BOe=l(),Wm=a("li"),LK=a("strong"),POe=o("pegasus"),$Oe=o(" \u2014 "),Rx=a("a"),IOe=o("PegasusConfig"),qOe=o(" (Pegasus model)"),NOe=l(),Hm=a("li"),xK=a("strong"),jOe=o("perceiver"),DOe=o(" \u2014 "),Bx=a("a"),GOe=o("PerceiverConfig"),OOe=o(" (Perceiver model)"),VOe=l(),Um=a("li"),kK=a("strong"),XOe=o("plbart"),zOe=o(" \u2014 "),Px=a("a"),QOe=o("PLBartConfig"),WOe=o(" (PLBart model)"),HOe=l(),Jm=a("li"),SK=a("strong"),UOe=o("poolformer"),JOe=o(" \u2014 "),$x=a("a"),YOe=o("PoolFormerConfig"),KOe=o(" (PoolFormer model)"),ZOe=l(),Ym=a("li"),RK=a("strong"),eVe=o("prophetnet"),oVe=o(" \u2014 "),Ix=a("a"),rVe=o("ProphetNetConfig"),tVe=o(" (ProphetNet model)"),aVe=l(),Km=a("li"),BK=a("strong"),nVe=o("qdqbert"),sVe=o(" \u2014 "),qx=a("a"),lVe=o("QDQBertConfig"),iVe=o(" (QDQBert model)"),dVe=l(),Zm=a("li"),PK=a("strong"),cVe=o("rag"),fVe=o(" \u2014 "),Nx=a("a"),mVe=o("RagConfig"),gVe=o(" (RAG model)"),hVe=l(),eg=a("li"),$K=a("strong"),pVe=o("realm"),_Ve=o(" \u2014 "),jx=a("a"),uVe=o("RealmConfig"),bVe=o(" (Realm model)"),vVe=l(),og=a("li"),IK=a("strong"),FVe=o("reformer"),TVe=o(" \u2014 "),Dx=a("a"),MVe=o("ReformerConfig"),EVe=o(" (Reformer model)"),CVe=l(),rg=a("li"),qK=a("strong"),wVe=o("regnet"),AVe=o(" \u2014 "),Gx=a("a"),yVe=o("RegNetConfig"),LVe=o(" (RegNet model)"),xVe=l(),tg=a("li"),NK=a("strong"),kVe=o("rembert"),SVe=o(" \u2014 "),Ox=a("a"),RVe=o("RemBertConfig"),BVe=o(" (RemBERT model)"),PVe=l(),ag=a("li"),jK=a("strong"),$Ve=o("resnet"),IVe=o(" \u2014 "),Vx=a("a"),qVe=o("ResNetConfig"),NVe=o(" (ResNet model)"),jVe=l(),ng=a("li"),DK=a("strong"),DVe=o("retribert"),GVe=o(" \u2014 "),Xx=a("a"),OVe=o("RetriBertConfig"),VVe=o(" (RetriBERT model)"),XVe=l(),sg=a("li"),GK=a("strong"),zVe=o("roberta"),QVe=o(" \u2014 "),zx=a("a"),WVe=o("RobertaConfig"),HVe=o(" (RoBERTa model)"),UVe=l(),lg=a("li"),OK=a("strong"),JVe=o("roformer"),YVe=o(" \u2014 "),Qx=a("a"),KVe=o("RoFormerConfig"),ZVe=o(" (RoFormer model)"),eXe=l(),ig=a("li"),VK=a("strong"),oXe=o("segformer"),rXe=o(" \u2014 "),Wx=a("a"),tXe=o("SegformerConfig"),aXe=o(" (SegFormer model)"),nXe=l(),dg=a("li"),XK=a("strong"),sXe=o("sew"),lXe=o(" \u2014 "),Hx=a("a"),iXe=o("SEWConfig"),dXe=o(" (SEW model)"),cXe=l(),cg=a("li"),zK=a("strong"),fXe=o("sew-d"),mXe=o(" \u2014 "),Ux=a("a"),gXe=o("SEWDConfig"),hXe=o(" (SEW-D model)"),pXe=l(),fg=a("li"),QK=a("strong"),_Xe=o("speech-encoder-decoder"),uXe=o(" \u2014 "),Jx=a("a"),bXe=o("SpeechEncoderDecoderConfig"),vXe=o(" (Speech Encoder decoder model)"),FXe=l(),mg=a("li"),WK=a("strong"),TXe=o("speech_to_text"),MXe=o(" \u2014 "),Yx=a("a"),EXe=o("Speech2TextConfig"),CXe=o(" (Speech2Text model)"),wXe=l(),gg=a("li"),HK=a("strong"),AXe=o("speech_to_text_2"),yXe=o(" \u2014 "),Kx=a("a"),LXe=o("Speech2Text2Config"),xXe=o(" (Speech2Text2 model)"),kXe=l(),hg=a("li"),UK=a("strong"),SXe=o("splinter"),RXe=o(" \u2014 "),Zx=a("a"),BXe=o("SplinterConfig"),PXe=o(" (Splinter model)"),$Xe=l(),pg=a("li"),JK=a("strong"),IXe=o("squeezebert"),qXe=o(" \u2014 "),ek=a("a"),NXe=o("SqueezeBertConfig"),jXe=o(" (SqueezeBERT model)"),DXe=l(),_g=a("li"),YK=a("strong"),GXe=o("swin"),OXe=o(" \u2014 "),ok=a("a"),VXe=o("SwinConfig"),XXe=o(" (Swin model)"),zXe=l(),ug=a("li"),KK=a("strong"),QXe=o("t5"),WXe=o(" \u2014 "),rk=a("a"),HXe=o("T5Config"),UXe=o(" (T5 model)"),JXe=l(),bg=a("li"),ZK=a("strong"),YXe=o("tapas"),KXe=o(" \u2014 "),tk=a("a"),ZXe=o("TapasConfig"),eze=o(" (TAPAS model)"),oze=l(),vg=a("li"),eZ=a("strong"),rze=o("tapex"),tze=o(" \u2014 "),ak=a("a"),aze=o("BartConfig"),nze=o(" (TAPEX model)"),sze=l(),Fg=a("li"),oZ=a("strong"),lze=o("transfo-xl"),ize=o(" \u2014 "),nk=a("a"),dze=o("TransfoXLConfig"),cze=o(" (Transformer-XL model)"),fze=l(),Tg=a("li"),rZ=a("strong"),mze=o("trocr"),gze=o(" \u2014 "),sk=a("a"),hze=o("TrOCRConfig"),pze=o(" (TrOCR model)"),_ze=l(),Mg=a("li"),tZ=a("strong"),uze=o("unispeech"),bze=o(" \u2014 "),lk=a("a"),vze=o("UniSpeechConfig"),Fze=o(" (UniSpeech model)"),Tze=l(),Eg=a("li"),aZ=a("strong"),Mze=o("unispeech-sat"),Eze=o(" \u2014 "),ik=a("a"),Cze=o("UniSpeechSatConfig"),wze=o(" (UniSpeechSat model)"),Aze=l(),Cg=a("li"),nZ=a("strong"),yze=o("van"),Lze=o(" \u2014 "),dk=a("a"),xze=o("VanConfig"),kze=o(" (VAN model)"),Sze=l(),wg=a("li"),sZ=a("strong"),Rze=o("vilt"),Bze=o(" \u2014 "),ck=a("a"),Pze=o("ViltConfig"),$ze=o(" (ViLT model)"),Ize=l(),Ag=a("li"),lZ=a("strong"),qze=o("vision-encoder-decoder"),Nze=o(" \u2014 "),fk=a("a"),jze=o("VisionEncoderDecoderConfig"),Dze=o(" (Vision Encoder decoder model)"),Gze=l(),yg=a("li"),iZ=a("strong"),Oze=o("vision-text-dual-encoder"),Vze=o(" \u2014 "),mk=a("a"),Xze=o("VisionTextDualEncoderConfig"),zze=o(" (VisionTextDualEncoder model)"),Qze=l(),Lg=a("li"),dZ=a("strong"),Wze=o("visual_bert"),Hze=o(" \u2014 "),gk=a("a"),Uze=o("VisualBertConfig"),Jze=o(" (VisualBert model)"),Yze=l(),xg=a("li"),cZ=a("strong"),Kze=o("vit"),Zze=o(" \u2014 "),hk=a("a"),eQe=o("ViTConfig"),oQe=o(" (ViT model)"),rQe=l(),kg=a("li"),fZ=a("strong"),tQe=o("vit_mae"),aQe=o(" \u2014 "),pk=a("a"),nQe=o("ViTMAEConfig"),sQe=o(" (ViTMAE model)"),lQe=l(),Sg=a("li"),mZ=a("strong"),iQe=o("wav2vec2"),dQe=o(" \u2014 "),_k=a("a"),cQe=o("Wav2Vec2Config"),fQe=o(" (Wav2Vec2 model)"),mQe=l(),Rg=a("li"),gZ=a("strong"),gQe=o("wavlm"),hQe=o(" \u2014 "),uk=a("a"),pQe=o("WavLMConfig"),_Qe=o(" (WavLM model)"),uQe=l(),Bg=a("li"),hZ=a("strong"),bQe=o("xglm"),vQe=o(" \u2014 "),bk=a("a"),FQe=o("XGLMConfig"),TQe=o(" (XGLM model)"),MQe=l(),Pg=a("li"),pZ=a("strong"),EQe=o("xlm"),CQe=o(" \u2014 "),vk=a("a"),wQe=o("XLMConfig"),AQe=o(" (XLM model)"),yQe=l(),$g=a("li"),_Z=a("strong"),LQe=o("xlm-prophetnet"),xQe=o(" \u2014 "),Fk=a("a"),kQe=o("XLMProphetNetConfig"),SQe=o(" (XLMProphetNet model)"),RQe=l(),Ig=a("li"),uZ=a("strong"),BQe=o("xlm-roberta"),PQe=o(" \u2014 "),Tk=a("a"),$Qe=o("XLMRobertaConfig"),IQe=o(" (XLM-RoBERTa model)"),qQe=l(),qg=a("li"),bZ=a("strong"),NQe=o("xlm-roberta-xl"),jQe=o(" \u2014 "),Mk=a("a"),DQe=o("XLMRobertaXLConfig"),GQe=o(" (XLM-RoBERTa-XL model)"),OQe=l(),Ng=a("li"),vZ=a("strong"),VQe=o("xlnet"),XQe=o(" \u2014 "),Ek=a("a"),zQe=o("XLNetConfig"),QQe=o(" (XLNet model)"),WQe=l(),jg=a("li"),FZ=a("strong"),HQe=o("yoso"),UQe=o(" \u2014 "),Ck=a("a"),JQe=o("YosoConfig"),YQe=o(" (YOSO model)"),KQe=l(),TZ=a("p"),ZQe=o("Examples:"),eWe=l(),f(G5.$$.fragment),oWe=l(),Dg=a("div"),f(O5.$$.fragment),rWe=l(),MZ=a("p"),tWe=o("Register a new configuration for this class."),HRe=l(),Ui=a("h2"),Gg=a("a"),EZ=a("span"),f(V5.$$.fragment),aWe=l(),CZ=a("span"),nWe=o("AutoTokenizer"),URe=l(),Wo=a("div"),f(X5.$$.fragment),sWe=l(),z5=a("p"),lWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wk=a("a"),iWe=o("AutoTokenizer.from_pretrained()"),dWe=o(" class method."),cWe=l(),Q5=a("p"),fWe=o("This class cannot be instantiated directly using "),wZ=a("code"),mWe=o("__init__()"),gWe=o(" (throws an error)."),hWe=l(),go=a("div"),f(W5.$$.fragment),pWe=l(),AZ=a("p"),_We=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uWe=l(),Oa=a("p"),bWe=o("The tokenizer class to instantiate is selected based on the "),yZ=a("code"),vWe=o("model_type"),FWe=o(` property of the config object (either
passed as an argument or loaded from `),LZ=a("code"),TWe=o("pretrained_model_name_or_path"),MWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xZ=a("code"),EWe=o("pretrained_model_name_or_path"),CWe=o(":"),wWe=l(),E=a("ul"),Wn=a("li"),kZ=a("strong"),AWe=o("albert"),yWe=o(" \u2014 "),Ak=a("a"),LWe=o("AlbertTokenizer"),xWe=o(" or "),yk=a("a"),kWe=o("AlbertTokenizerFast"),SWe=o(" (ALBERT model)"),RWe=l(),Hn=a("li"),SZ=a("strong"),BWe=o("bart"),PWe=o(" \u2014 "),Lk=a("a"),$We=o("BartTokenizer"),IWe=o(" or "),xk=a("a"),qWe=o("BartTokenizerFast"),NWe=o(" (BART model)"),jWe=l(),Un=a("li"),RZ=a("strong"),DWe=o("barthez"),GWe=o(" \u2014 "),kk=a("a"),OWe=o("BarthezTokenizer"),VWe=o(" or "),Sk=a("a"),XWe=o("BarthezTokenizerFast"),zWe=o(" (BARThez model)"),QWe=l(),Og=a("li"),BZ=a("strong"),WWe=o("bartpho"),HWe=o(" \u2014 "),Rk=a("a"),UWe=o("BartphoTokenizer"),JWe=o(" (BARTpho model)"),YWe=l(),Jn=a("li"),PZ=a("strong"),KWe=o("bert"),ZWe=o(" \u2014 "),Bk=a("a"),eHe=o("BertTokenizer"),oHe=o(" or "),Pk=a("a"),rHe=o("BertTokenizerFast"),tHe=o(" (BERT model)"),aHe=l(),Vg=a("li"),$Z=a("strong"),nHe=o("bert-generation"),sHe=o(" \u2014 "),$k=a("a"),lHe=o("BertGenerationTokenizer"),iHe=o(" (Bert Generation model)"),dHe=l(),Xg=a("li"),IZ=a("strong"),cHe=o("bert-japanese"),fHe=o(" \u2014 "),Ik=a("a"),mHe=o("BertJapaneseTokenizer"),gHe=o(" (BertJapanese model)"),hHe=l(),zg=a("li"),qZ=a("strong"),pHe=o("bertweet"),_He=o(" \u2014 "),qk=a("a"),uHe=o("BertweetTokenizer"),bHe=o(" (Bertweet model)"),vHe=l(),Yn=a("li"),NZ=a("strong"),FHe=o("big_bird"),THe=o(" \u2014 "),Nk=a("a"),MHe=o("BigBirdTokenizer"),EHe=o(" or "),jk=a("a"),CHe=o("BigBirdTokenizerFast"),wHe=o(" (BigBird model)"),AHe=l(),Kn=a("li"),jZ=a("strong"),yHe=o("bigbird_pegasus"),LHe=o(" \u2014 "),Dk=a("a"),xHe=o("PegasusTokenizer"),kHe=o(" or "),Gk=a("a"),SHe=o("PegasusTokenizerFast"),RHe=o(" (BigBirdPegasus model)"),BHe=l(),Zn=a("li"),DZ=a("strong"),PHe=o("blenderbot"),$He=o(" \u2014 "),Ok=a("a"),IHe=o("BlenderbotTokenizer"),qHe=o(" or "),Vk=a("a"),NHe=o("BlenderbotTokenizerFast"),jHe=o(" (Blenderbot model)"),DHe=l(),Qg=a("li"),GZ=a("strong"),GHe=o("blenderbot-small"),OHe=o(" \u2014 "),Xk=a("a"),VHe=o("BlenderbotSmallTokenizer"),XHe=o(" (BlenderbotSmall model)"),zHe=l(),Wg=a("li"),OZ=a("strong"),QHe=o("byt5"),WHe=o(" \u2014 "),zk=a("a"),HHe=o("ByT5Tokenizer"),UHe=o(" (ByT5 model)"),JHe=l(),es=a("li"),VZ=a("strong"),YHe=o("camembert"),KHe=o(" \u2014 "),Qk=a("a"),ZHe=o("CamembertTokenizer"),eUe=o(" or "),Wk=a("a"),oUe=o("CamembertTokenizerFast"),rUe=o(" (CamemBERT model)"),tUe=l(),Hg=a("li"),XZ=a("strong"),aUe=o("canine"),nUe=o(" \u2014 "),Hk=a("a"),sUe=o("CanineTokenizer"),lUe=o(" (Canine model)"),iUe=l(),os=a("li"),zZ=a("strong"),dUe=o("clip"),cUe=o(" \u2014 "),Uk=a("a"),fUe=o("CLIPTokenizer"),mUe=o(" or "),Jk=a("a"),gUe=o("CLIPTokenizerFast"),hUe=o(" (CLIP model)"),pUe=l(),rs=a("li"),QZ=a("strong"),_Ue=o("convbert"),uUe=o(" \u2014 "),Yk=a("a"),bUe=o("ConvBertTokenizer"),vUe=o(" or "),Kk=a("a"),FUe=o("ConvBertTokenizerFast"),TUe=o(" (ConvBERT model)"),MUe=l(),ts=a("li"),WZ=a("strong"),EUe=o("cpm"),CUe=o(" \u2014 "),Zk=a("a"),wUe=o("CpmTokenizer"),AUe=o(" or "),HZ=a("code"),yUe=o("CpmTokenizerFast"),LUe=o(" (CPM model)"),xUe=l(),Ug=a("li"),UZ=a("strong"),kUe=o("ctrl"),SUe=o(" \u2014 "),eS=a("a"),RUe=o("CTRLTokenizer"),BUe=o(" (CTRL model)"),PUe=l(),as=a("li"),JZ=a("strong"),$Ue=o("deberta"),IUe=o(" \u2014 "),oS=a("a"),qUe=o("DebertaTokenizer"),NUe=o(" or "),rS=a("a"),jUe=o("DebertaTokenizerFast"),DUe=o(" (DeBERTa model)"),GUe=l(),ns=a("li"),YZ=a("strong"),OUe=o("deberta-v2"),VUe=o(" \u2014 "),tS=a("a"),XUe=o("DebertaV2Tokenizer"),zUe=o(" or "),aS=a("a"),QUe=o("DebertaV2TokenizerFast"),WUe=o(" (DeBERTa-v2 model)"),HUe=l(),ss=a("li"),KZ=a("strong"),UUe=o("distilbert"),JUe=o(" \u2014 "),nS=a("a"),YUe=o("DistilBertTokenizer"),KUe=o(" or "),sS=a("a"),ZUe=o("DistilBertTokenizerFast"),eJe=o(" (DistilBERT model)"),oJe=l(),ls=a("li"),ZZ=a("strong"),rJe=o("dpr"),tJe=o(" \u2014 "),lS=a("a"),aJe=o("DPRQuestionEncoderTokenizer"),nJe=o(" or "),iS=a("a"),sJe=o("DPRQuestionEncoderTokenizerFast"),lJe=o(" (DPR model)"),iJe=l(),is=a("li"),eee=a("strong"),dJe=o("electra"),cJe=o(" \u2014 "),dS=a("a"),fJe=o("ElectraTokenizer"),mJe=o(" or "),cS=a("a"),gJe=o("ElectraTokenizerFast"),hJe=o(" (ELECTRA model)"),pJe=l(),Jg=a("li"),oee=a("strong"),_Je=o("flaubert"),uJe=o(" \u2014 "),fS=a("a"),bJe=o("FlaubertTokenizer"),vJe=o(" (FlauBERT model)"),FJe=l(),ds=a("li"),ree=a("strong"),TJe=o("fnet"),MJe=o(" \u2014 "),mS=a("a"),EJe=o("FNetTokenizer"),CJe=o(" or "),gS=a("a"),wJe=o("FNetTokenizerFast"),AJe=o(" (FNet model)"),yJe=l(),Yg=a("li"),tee=a("strong"),LJe=o("fsmt"),xJe=o(" \u2014 "),hS=a("a"),kJe=o("FSMTTokenizer"),SJe=o(" (FairSeq Machine-Translation model)"),RJe=l(),cs=a("li"),aee=a("strong"),BJe=o("funnel"),PJe=o(" \u2014 "),pS=a("a"),$Je=o("FunnelTokenizer"),IJe=o(" or "),_S=a("a"),qJe=o("FunnelTokenizerFast"),NJe=o(" (Funnel Transformer model)"),jJe=l(),fs=a("li"),nee=a("strong"),DJe=o("gpt2"),GJe=o(" \u2014 "),uS=a("a"),OJe=o("GPT2Tokenizer"),VJe=o(" or "),bS=a("a"),XJe=o("GPT2TokenizerFast"),zJe=o(" (OpenAI GPT-2 model)"),QJe=l(),ms=a("li"),see=a("strong"),WJe=o("gpt_neo"),HJe=o(" \u2014 "),vS=a("a"),UJe=o("GPT2Tokenizer"),JJe=o(" or "),FS=a("a"),YJe=o("GPT2TokenizerFast"),KJe=o(" (GPT Neo model)"),ZJe=l(),gs=a("li"),lee=a("strong"),eYe=o("gptj"),oYe=o(" \u2014 "),TS=a("a"),rYe=o("GPT2Tokenizer"),tYe=o(" or "),MS=a("a"),aYe=o("GPT2TokenizerFast"),nYe=o(" (GPT-J model)"),sYe=l(),hs=a("li"),iee=a("strong"),lYe=o("herbert"),iYe=o(" \u2014 "),ES=a("a"),dYe=o("HerbertTokenizer"),cYe=o(" or "),CS=a("a"),fYe=o("HerbertTokenizerFast"),mYe=o(" (HerBERT model)"),gYe=l(),Kg=a("li"),dee=a("strong"),hYe=o("hubert"),pYe=o(" \u2014 "),wS=a("a"),_Ye=o("Wav2Vec2CTCTokenizer"),uYe=o(" (Hubert model)"),bYe=l(),ps=a("li"),cee=a("strong"),vYe=o("ibert"),FYe=o(" \u2014 "),AS=a("a"),TYe=o("RobertaTokenizer"),MYe=o(" or "),yS=a("a"),EYe=o("RobertaTokenizerFast"),CYe=o(" (I-BERT model)"),wYe=l(),_s=a("li"),fee=a("strong"),AYe=o("layoutlm"),yYe=o(" \u2014 "),LS=a("a"),LYe=o("LayoutLMTokenizer"),xYe=o(" or "),xS=a("a"),kYe=o("LayoutLMTokenizerFast"),SYe=o(" (LayoutLM model)"),RYe=l(),us=a("li"),mee=a("strong"),BYe=o("layoutlmv2"),PYe=o(" \u2014 "),kS=a("a"),$Ye=o("LayoutLMv2Tokenizer"),IYe=o(" or "),SS=a("a"),qYe=o("LayoutLMv2TokenizerFast"),NYe=o(" (LayoutLMv2 model)"),jYe=l(),bs=a("li"),gee=a("strong"),DYe=o("layoutxlm"),GYe=o(" \u2014 "),RS=a("a"),OYe=o("LayoutXLMTokenizer"),VYe=o(" or "),BS=a("a"),XYe=o("LayoutXLMTokenizerFast"),zYe=o(" (LayoutXLM model)"),QYe=l(),vs=a("li"),hee=a("strong"),WYe=o("led"),HYe=o(" \u2014 "),PS=a("a"),UYe=o("LEDTokenizer"),JYe=o(" or "),$S=a("a"),YYe=o("LEDTokenizerFast"),KYe=o(" (LED model)"),ZYe=l(),Fs=a("li"),pee=a("strong"),eKe=o("longformer"),oKe=o(" \u2014 "),IS=a("a"),rKe=o("LongformerTokenizer"),tKe=o(" or "),qS=a("a"),aKe=o("LongformerTokenizerFast"),nKe=o(" (Longformer model)"),sKe=l(),Zg=a("li"),_ee=a("strong"),lKe=o("luke"),iKe=o(" \u2014 "),NS=a("a"),dKe=o("LukeTokenizer"),cKe=o(" (LUKE model)"),fKe=l(),Ts=a("li"),uee=a("strong"),mKe=o("lxmert"),gKe=o(" \u2014 "),jS=a("a"),hKe=o("LxmertTokenizer"),pKe=o(" or "),DS=a("a"),_Ke=o("LxmertTokenizerFast"),uKe=o(" (LXMERT model)"),bKe=l(),eh=a("li"),bee=a("strong"),vKe=o("m2m_100"),FKe=o(" \u2014 "),GS=a("a"),TKe=o("M2M100Tokenizer"),MKe=o(" (M2M100 model)"),EKe=l(),oh=a("li"),vee=a("strong"),CKe=o("marian"),wKe=o(" \u2014 "),OS=a("a"),AKe=o("MarianTokenizer"),yKe=o(" (Marian model)"),LKe=l(),Ms=a("li"),Fee=a("strong"),xKe=o("mbart"),kKe=o(" \u2014 "),VS=a("a"),SKe=o("MBartTokenizer"),RKe=o(" or "),XS=a("a"),BKe=o("MBartTokenizerFast"),PKe=o(" (mBART model)"),$Ke=l(),Es=a("li"),Tee=a("strong"),IKe=o("mbart50"),qKe=o(" \u2014 "),zS=a("a"),NKe=o("MBart50Tokenizer"),jKe=o(" or "),QS=a("a"),DKe=o("MBart50TokenizerFast"),GKe=o(" (mBART-50 model)"),OKe=l(),rh=a("li"),Mee=a("strong"),VKe=o("mluke"),XKe=o(" \u2014 "),WS=a("a"),zKe=o("MLukeTokenizer"),QKe=o(" (mLUKE model)"),WKe=l(),Cs=a("li"),Eee=a("strong"),HKe=o("mobilebert"),UKe=o(" \u2014 "),HS=a("a"),JKe=o("MobileBertTokenizer"),YKe=o(" or "),US=a("a"),KKe=o("MobileBertTokenizerFast"),ZKe=o(" (MobileBERT model)"),eZe=l(),ws=a("li"),Cee=a("strong"),oZe=o("mpnet"),rZe=o(" \u2014 "),JS=a("a"),tZe=o("MPNetTokenizer"),aZe=o(" or "),YS=a("a"),nZe=o("MPNetTokenizerFast"),sZe=o(" (MPNet model)"),lZe=l(),As=a("li"),wee=a("strong"),iZe=o("mt5"),dZe=o(" \u2014 "),KS=a("a"),cZe=o("MT5Tokenizer"),fZe=o(" or "),ZS=a("a"),mZe=o("MT5TokenizerFast"),gZe=o(" (mT5 model)"),hZe=l(),ys=a("li"),Aee=a("strong"),pZe=o("openai-gpt"),_Ze=o(" \u2014 "),eR=a("a"),uZe=o("OpenAIGPTTokenizer"),bZe=o(" or "),oR=a("a"),vZe=o("OpenAIGPTTokenizerFast"),FZe=o(" (OpenAI GPT model)"),TZe=l(),Ls=a("li"),yee=a("strong"),MZe=o("pegasus"),EZe=o(" \u2014 "),rR=a("a"),CZe=o("PegasusTokenizer"),wZe=o(" or "),tR=a("a"),AZe=o("PegasusTokenizerFast"),yZe=o(" (Pegasus model)"),LZe=l(),th=a("li"),Lee=a("strong"),xZe=o("perceiver"),kZe=o(" \u2014 "),aR=a("a"),SZe=o("PerceiverTokenizer"),RZe=o(" (Perceiver model)"),BZe=l(),ah=a("li"),xee=a("strong"),PZe=o("phobert"),$Ze=o(" \u2014 "),nR=a("a"),IZe=o("PhobertTokenizer"),qZe=o(" (PhoBERT model)"),NZe=l(),nh=a("li"),kee=a("strong"),jZe=o("plbart"),DZe=o(" \u2014 "),sR=a("a"),GZe=o("PLBartTokenizer"),OZe=o(" (PLBart model)"),VZe=l(),sh=a("li"),See=a("strong"),XZe=o("prophetnet"),zZe=o(" \u2014 "),lR=a("a"),QZe=o("ProphetNetTokenizer"),WZe=o(" (ProphetNet model)"),HZe=l(),xs=a("li"),Ree=a("strong"),UZe=o("qdqbert"),JZe=o(" \u2014 "),iR=a("a"),YZe=o("BertTokenizer"),KZe=o(" or "),dR=a("a"),ZZe=o("BertTokenizerFast"),eeo=o(" (QDQBert model)"),oeo=l(),lh=a("li"),Bee=a("strong"),reo=o("rag"),teo=o(" \u2014 "),cR=a("a"),aeo=o("RagTokenizer"),neo=o(" (RAG model)"),seo=l(),ks=a("li"),Pee=a("strong"),leo=o("realm"),ieo=o(" \u2014 "),fR=a("a"),deo=o("RealmTokenizer"),ceo=o(" or "),mR=a("a"),feo=o("RealmTokenizerFast"),meo=o(" (Realm model)"),geo=l(),Ss=a("li"),$ee=a("strong"),heo=o("reformer"),peo=o(" \u2014 "),gR=a("a"),_eo=o("ReformerTokenizer"),ueo=o(" or "),hR=a("a"),beo=o("ReformerTokenizerFast"),veo=o(" (Reformer model)"),Feo=l(),Rs=a("li"),Iee=a("strong"),Teo=o("rembert"),Meo=o(" \u2014 "),pR=a("a"),Eeo=o("RemBertTokenizer"),Ceo=o(" or "),_R=a("a"),weo=o("RemBertTokenizerFast"),Aeo=o(" (RemBERT model)"),yeo=l(),Bs=a("li"),qee=a("strong"),Leo=o("retribert"),xeo=o(" \u2014 "),uR=a("a"),keo=o("RetriBertTokenizer"),Seo=o(" or "),bR=a("a"),Reo=o("RetriBertTokenizerFast"),Beo=o(" (RetriBERT model)"),Peo=l(),Ps=a("li"),Nee=a("strong"),$eo=o("roberta"),Ieo=o(" \u2014 "),vR=a("a"),qeo=o("RobertaTokenizer"),Neo=o(" or "),FR=a("a"),jeo=o("RobertaTokenizerFast"),Deo=o(" (RoBERTa model)"),Geo=l(),$s=a("li"),jee=a("strong"),Oeo=o("roformer"),Veo=o(" \u2014 "),TR=a("a"),Xeo=o("RoFormerTokenizer"),zeo=o(" or "),MR=a("a"),Qeo=o("RoFormerTokenizerFast"),Weo=o(" (RoFormer model)"),Heo=l(),ih=a("li"),Dee=a("strong"),Ueo=o("speech_to_text"),Jeo=o(" \u2014 "),ER=a("a"),Yeo=o("Speech2TextTokenizer"),Keo=o(" (Speech2Text model)"),Zeo=l(),dh=a("li"),Gee=a("strong"),eoo=o("speech_to_text_2"),ooo=o(" \u2014 "),CR=a("a"),roo=o("Speech2Text2Tokenizer"),too=o(" (Speech2Text2 model)"),aoo=l(),Is=a("li"),Oee=a("strong"),noo=o("splinter"),soo=o(" \u2014 "),wR=a("a"),loo=o("SplinterTokenizer"),ioo=o(" or "),AR=a("a"),doo=o("SplinterTokenizerFast"),coo=o(" (Splinter model)"),foo=l(),qs=a("li"),Vee=a("strong"),moo=o("squeezebert"),goo=o(" \u2014 "),yR=a("a"),hoo=o("SqueezeBertTokenizer"),poo=o(" or "),LR=a("a"),_oo=o("SqueezeBertTokenizerFast"),uoo=o(" (SqueezeBERT model)"),boo=l(),Ns=a("li"),Xee=a("strong"),voo=o("t5"),Foo=o(" \u2014 "),xR=a("a"),Too=o("T5Tokenizer"),Moo=o(" or "),kR=a("a"),Eoo=o("T5TokenizerFast"),Coo=o(" (T5 model)"),woo=l(),ch=a("li"),zee=a("strong"),Aoo=o("tapas"),yoo=o(" \u2014 "),SR=a("a"),Loo=o("TapasTokenizer"),xoo=o(" (TAPAS model)"),koo=l(),fh=a("li"),Qee=a("strong"),Soo=o("tapex"),Roo=o(" \u2014 "),RR=a("a"),Boo=o("TapexTokenizer"),Poo=o(" (TAPEX model)"),$oo=l(),mh=a("li"),Wee=a("strong"),Ioo=o("transfo-xl"),qoo=o(" \u2014 "),BR=a("a"),Noo=o("TransfoXLTokenizer"),joo=o(" (Transformer-XL model)"),Doo=l(),gh=a("li"),Hee=a("strong"),Goo=o("wav2vec2"),Ooo=o(" \u2014 "),PR=a("a"),Voo=o("Wav2Vec2CTCTokenizer"),Xoo=o(" (Wav2Vec2 model)"),zoo=l(),hh=a("li"),Uee=a("strong"),Qoo=o("wav2vec2_phoneme"),Woo=o(" \u2014 "),$R=a("a"),Hoo=o("Wav2Vec2PhonemeCTCTokenizer"),Uoo=o(" (Wav2Vec2Phoneme model)"),Joo=l(),js=a("li"),Jee=a("strong"),Yoo=o("xglm"),Koo=o(" \u2014 "),IR=a("a"),Zoo=o("XGLMTokenizer"),ero=o(" or "),qR=a("a"),oro=o("XGLMTokenizerFast"),rro=o(" (XGLM model)"),tro=l(),ph=a("li"),Yee=a("strong"),aro=o("xlm"),nro=o(" \u2014 "),NR=a("a"),sro=o("XLMTokenizer"),lro=o(" (XLM model)"),iro=l(),_h=a("li"),Kee=a("strong"),dro=o("xlm-prophetnet"),cro=o(" \u2014 "),jR=a("a"),fro=o("XLMProphetNetTokenizer"),mro=o(" (XLMProphetNet model)"),gro=l(),Ds=a("li"),Zee=a("strong"),hro=o("xlm-roberta"),pro=o(" \u2014 "),DR=a("a"),_ro=o("XLMRobertaTokenizer"),uro=o(" or "),GR=a("a"),bro=o("XLMRobertaTokenizerFast"),vro=o(" (XLM-RoBERTa model)"),Fro=l(),Gs=a("li"),eoe=a("strong"),Tro=o("xlnet"),Mro=o(" \u2014 "),OR=a("a"),Ero=o("XLNetTokenizer"),Cro=o(" or "),VR=a("a"),wro=o("XLNetTokenizerFast"),Aro=o(" (XLNet model)"),yro=l(),ooe=a("p"),Lro=o("Examples:"),xro=l(),f(H5.$$.fragment),kro=l(),uh=a("div"),f(U5.$$.fragment),Sro=l(),roe=a("p"),Rro=o("Register a new tokenizer in this mapping."),JRe=l(),Ji=a("h2"),bh=a("a"),toe=a("span"),f(J5.$$.fragment),Bro=l(),aoe=a("span"),Pro=o("AutoFeatureExtractor"),YRe=l(),Ho=a("div"),f(Y5.$$.fragment),$ro=l(),K5=a("p"),Iro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),XR=a("a"),qro=o("AutoFeatureExtractor.from_pretrained()"),Nro=o(" class method."),jro=l(),Z5=a("p"),Dro=o("This class cannot be instantiated directly using "),noe=a("code"),Gro=o("__init__()"),Oro=o(" (throws an error)."),Vro=l(),$e=a("div"),f(e3.$$.fragment),Xro=l(),soe=a("p"),zro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Qro=l(),Va=a("p"),Wro=o("The feature extractor class to instantiate is selected based on the "),loe=a("code"),Hro=o("model_type"),Uro=o(` property of the config object
(either passed as an argument or loaded from `),ioe=a("code"),Jro=o("pretrained_model_name_or_path"),Yro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),doe=a("code"),Kro=o("pretrained_model_name_or_path"),Zro=o(":"),eto=l(),J=a("ul"),vh=a("li"),coe=a("strong"),oto=o("beit"),rto=o(" \u2014 "),zR=a("a"),tto=o("BeitFeatureExtractor"),ato=o(" (BEiT model)"),nto=l(),Fh=a("li"),foe=a("strong"),sto=o("clip"),lto=o(" \u2014 "),QR=a("a"),ito=o("CLIPFeatureExtractor"),dto=o(" (CLIP model)"),cto=l(),Th=a("li"),moe=a("strong"),fto=o("convnext"),mto=o(" \u2014 "),WR=a("a"),gto=o("ConvNextFeatureExtractor"),hto=o(" (ConvNext model)"),pto=l(),Mh=a("li"),goe=a("strong"),_to=o("deit"),uto=o(" \u2014 "),HR=a("a"),bto=o("DeiTFeatureExtractor"),vto=o(" (DeiT model)"),Fto=l(),Eh=a("li"),hoe=a("strong"),Tto=o("detr"),Mto=o(" \u2014 "),UR=a("a"),Eto=o("DetrFeatureExtractor"),Cto=o(" (DETR model)"),wto=l(),Ch=a("li"),poe=a("strong"),Ato=o("hubert"),yto=o(" \u2014 "),JR=a("a"),Lto=o("Wav2Vec2FeatureExtractor"),xto=o(" (Hubert model)"),kto=l(),wh=a("li"),_oe=a("strong"),Sto=o("imagegpt"),Rto=o(" \u2014 "),YR=a("a"),Bto=o("ImageGPTFeatureExtractor"),Pto=o(" (ImageGPT model)"),$to=l(),Ah=a("li"),uoe=a("strong"),Ito=o("layoutlmv2"),qto=o(" \u2014 "),KR=a("a"),Nto=o("LayoutLMv2FeatureExtractor"),jto=o(" (LayoutLMv2 model)"),Dto=l(),yh=a("li"),boe=a("strong"),Gto=o("maskformer"),Oto=o(" \u2014 "),ZR=a("a"),Vto=o("MaskFormerFeatureExtractor"),Xto=o(" (MaskFormer model)"),zto=l(),Lh=a("li"),voe=a("strong"),Qto=o("perceiver"),Wto=o(" \u2014 "),eB=a("a"),Hto=o("PerceiverFeatureExtractor"),Uto=o(" (Perceiver model)"),Jto=l(),xh=a("li"),Foe=a("strong"),Yto=o("poolformer"),Kto=o(" \u2014 "),oB=a("a"),Zto=o("PoolFormerFeatureExtractor"),eao=o(" (PoolFormer model)"),oao=l(),kh=a("li"),Toe=a("strong"),rao=o("regnet"),tao=o(" \u2014 "),rB=a("a"),aao=o("ConvNextFeatureExtractor"),nao=o(" (RegNet model)"),sao=l(),Sh=a("li"),Moe=a("strong"),lao=o("resnet"),iao=o(" \u2014 "),tB=a("a"),dao=o("ConvNextFeatureExtractor"),cao=o(" (ResNet model)"),fao=l(),Rh=a("li"),Eoe=a("strong"),mao=o("segformer"),gao=o(" \u2014 "),aB=a("a"),hao=o("SegformerFeatureExtractor"),pao=o(" (SegFormer model)"),_ao=l(),Bh=a("li"),Coe=a("strong"),uao=o("speech_to_text"),bao=o(" \u2014 "),nB=a("a"),vao=o("Speech2TextFeatureExtractor"),Fao=o(" (Speech2Text model)"),Tao=l(),Ph=a("li"),woe=a("strong"),Mao=o("swin"),Eao=o(" \u2014 "),sB=a("a"),Cao=o("ViTFeatureExtractor"),wao=o(" (Swin model)"),Aao=l(),$h=a("li"),Aoe=a("strong"),yao=o("van"),Lao=o(" \u2014 "),lB=a("a"),xao=o("ConvNextFeatureExtractor"),kao=o(" (VAN model)"),Sao=l(),Ih=a("li"),yoe=a("strong"),Rao=o("vit"),Bao=o(" \u2014 "),iB=a("a"),Pao=o("ViTFeatureExtractor"),$ao=o(" (ViT model)"),Iao=l(),qh=a("li"),Loe=a("strong"),qao=o("vit_mae"),Nao=o(" \u2014 "),dB=a("a"),jao=o("ViTFeatureExtractor"),Dao=o(" (ViTMAE model)"),Gao=l(),Nh=a("li"),xoe=a("strong"),Oao=o("wav2vec2"),Vao=o(" \u2014 "),cB=a("a"),Xao=o("Wav2Vec2FeatureExtractor"),zao=o(" (Wav2Vec2 model)"),Qao=l(),f(jh.$$.fragment),Wao=l(),koe=a("p"),Hao=o("Examples:"),Uao=l(),f(o3.$$.fragment),Jao=l(),Dh=a("div"),f(r3.$$.fragment),Yao=l(),Soe=a("p"),Kao=o("Register a new feature extractor for this class."),KRe=l(),Yi=a("h2"),Gh=a("a"),Roe=a("span"),f(t3.$$.fragment),Zao=l(),Boe=a("span"),eno=o("AutoProcessor"),ZRe=l(),Uo=a("div"),f(a3.$$.fragment),ono=l(),n3=a("p"),rno=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fB=a("a"),tno=o("AutoProcessor.from_pretrained()"),ano=o(" class method."),nno=l(),s3=a("p"),sno=o("This class cannot be instantiated directly using "),Poe=a("code"),lno=o("__init__()"),ino=o(" (throws an error)."),dno=l(),Ie=a("div"),f(l3.$$.fragment),cno=l(),$oe=a("p"),fno=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),mno=l(),Ki=a("p"),gno=o("The processor class to instantiate is selected based on the "),Ioe=a("code"),hno=o("model_type"),pno=o(` property of the config object (either
passed as an argument or loaded from `),qoe=a("code"),_no=o("pretrained_model_name_or_path"),uno=o(" if possible):"),bno=l(),ke=a("ul"),Oh=a("li"),Noe=a("strong"),vno=o("clip"),Fno=o(" \u2014 "),mB=a("a"),Tno=o("CLIPProcessor"),Mno=o(" (CLIP model)"),Eno=l(),Vh=a("li"),joe=a("strong"),Cno=o("layoutlmv2"),wno=o(" \u2014 "),gB=a("a"),Ano=o("LayoutLMv2Processor"),yno=o(" (LayoutLMv2 model)"),Lno=l(),Xh=a("li"),Doe=a("strong"),xno=o("layoutxlm"),kno=o(" \u2014 "),hB=a("a"),Sno=o("LayoutXLMProcessor"),Rno=o(" (LayoutXLM model)"),Bno=l(),zh=a("li"),Goe=a("strong"),Pno=o("speech_to_text"),$no=o(" \u2014 "),pB=a("a"),Ino=o("Speech2TextProcessor"),qno=o(" (Speech2Text model)"),Nno=l(),Qh=a("li"),Ooe=a("strong"),jno=o("speech_to_text_2"),Dno=o(" \u2014 "),_B=a("a"),Gno=o("Speech2Text2Processor"),Ono=o(" (Speech2Text2 model)"),Vno=l(),Wh=a("li"),Voe=a("strong"),Xno=o("trocr"),zno=o(" \u2014 "),uB=a("a"),Qno=o("TrOCRProcessor"),Wno=o(" (TrOCR model)"),Hno=l(),Hh=a("li"),Xoe=a("strong"),Uno=o("vision-text-dual-encoder"),Jno=o(" \u2014 "),bB=a("a"),Yno=o("VisionTextDualEncoderProcessor"),Kno=o(" (VisionTextDualEncoder model)"),Zno=l(),Uh=a("li"),zoe=a("strong"),eso=o("wav2vec2"),oso=o(" \u2014 "),vB=a("a"),rso=o("Wav2Vec2Processor"),tso=o(" (Wav2Vec2 model)"),aso=l(),f(Jh.$$.fragment),nso=l(),Qoe=a("p"),sso=o("Examples:"),lso=l(),f(i3.$$.fragment),iso=l(),Yh=a("div"),f(d3.$$.fragment),dso=l(),Woe=a("p"),cso=o("Register a new processor for this class."),eBe=l(),Zi=a("h2"),Kh=a("a"),Hoe=a("span"),f(c3.$$.fragment),fso=l(),Uoe=a("span"),mso=o("AutoModel"),oBe=l(),Jo=a("div"),f(f3.$$.fragment),gso=l(),ed=a("p"),hso=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FB=a("a"),pso=o("from_pretrained()"),_so=o(" class method or the "),TB=a("a"),uso=o("from_config()"),bso=o(` class
method.`),vso=l(),m3=a("p"),Fso=o("This class cannot be instantiated directly using "),Joe=a("code"),Tso=o("__init__()"),Mso=o(" (throws an error)."),Eso=l(),Xr=a("div"),f(g3.$$.fragment),Cso=l(),Yoe=a("p"),wso=o("Instantiates one of the base model classes of the library from a configuration."),Aso=l(),od=a("p"),yso=o(`Note:
Loading a model from its configuration file does `),Koe=a("strong"),Lso=o("not"),xso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MB=a("a"),kso=o("from_pretrained()"),Sso=o(" to load the model weights."),Rso=l(),Zoe=a("p"),Bso=o("Examples:"),Pso=l(),f(h3.$$.fragment),$so=l(),qe=a("div"),f(p3.$$.fragment),Iso=l(),ere=a("p"),qso=o("Instantiate one of the base model classes of the library from a pretrained model."),Nso=l(),Xa=a("p"),jso=o("The model class to instantiate is selected based on the "),ore=a("code"),Dso=o("model_type"),Gso=o(` property of the config object (either
passed as an argument or loaded from `),rre=a("code"),Oso=o("pretrained_model_name_or_path"),Vso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tre=a("code"),Xso=o("pretrained_model_name_or_path"),zso=o(":"),Qso=l(),T=a("ul"),Zh=a("li"),are=a("strong"),Wso=o("albert"),Hso=o(" \u2014 "),EB=a("a"),Uso=o("AlbertModel"),Jso=o(" (ALBERT model)"),Yso=l(),ep=a("li"),nre=a("strong"),Kso=o("bart"),Zso=o(" \u2014 "),CB=a("a"),elo=o("BartModel"),olo=o(" (BART model)"),rlo=l(),op=a("li"),sre=a("strong"),tlo=o("beit"),alo=o(" \u2014 "),wB=a("a"),nlo=o("BeitModel"),slo=o(" (BEiT model)"),llo=l(),rp=a("li"),lre=a("strong"),ilo=o("bert"),dlo=o(" \u2014 "),AB=a("a"),clo=o("BertModel"),flo=o(" (BERT model)"),mlo=l(),tp=a("li"),ire=a("strong"),glo=o("bert-generation"),hlo=o(" \u2014 "),yB=a("a"),plo=o("BertGenerationEncoder"),_lo=o(" (Bert Generation model)"),ulo=l(),ap=a("li"),dre=a("strong"),blo=o("big_bird"),vlo=o(" \u2014 "),LB=a("a"),Flo=o("BigBirdModel"),Tlo=o(" (BigBird model)"),Mlo=l(),np=a("li"),cre=a("strong"),Elo=o("bigbird_pegasus"),Clo=o(" \u2014 "),xB=a("a"),wlo=o("BigBirdPegasusModel"),Alo=o(" (BigBirdPegasus model)"),ylo=l(),sp=a("li"),fre=a("strong"),Llo=o("blenderbot"),xlo=o(" \u2014 "),kB=a("a"),klo=o("BlenderbotModel"),Slo=o(" (Blenderbot model)"),Rlo=l(),lp=a("li"),mre=a("strong"),Blo=o("blenderbot-small"),Plo=o(" \u2014 "),SB=a("a"),$lo=o("BlenderbotSmallModel"),Ilo=o(" (BlenderbotSmall model)"),qlo=l(),ip=a("li"),gre=a("strong"),Nlo=o("camembert"),jlo=o(" \u2014 "),RB=a("a"),Dlo=o("CamembertModel"),Glo=o(" (CamemBERT model)"),Olo=l(),dp=a("li"),hre=a("strong"),Vlo=o("canine"),Xlo=o(" \u2014 "),BB=a("a"),zlo=o("CanineModel"),Qlo=o(" (Canine model)"),Wlo=l(),cp=a("li"),pre=a("strong"),Hlo=o("clip"),Ulo=o(" \u2014 "),PB=a("a"),Jlo=o("CLIPModel"),Ylo=o(" (CLIP model)"),Klo=l(),fp=a("li"),_re=a("strong"),Zlo=o("convbert"),eio=o(" \u2014 "),$B=a("a"),oio=o("ConvBertModel"),rio=o(" (ConvBERT model)"),tio=l(),mp=a("li"),ure=a("strong"),aio=o("convnext"),nio=o(" \u2014 "),IB=a("a"),sio=o("ConvNextModel"),lio=o(" (ConvNext model)"),iio=l(),gp=a("li"),bre=a("strong"),dio=o("ctrl"),cio=o(" \u2014 "),qB=a("a"),fio=o("CTRLModel"),mio=o(" (CTRL model)"),gio=l(),hp=a("li"),vre=a("strong"),hio=o("data2vec-audio"),pio=o(" \u2014 "),NB=a("a"),_io=o("Data2VecAudioModel"),uio=o(" (Data2VecAudio model)"),bio=l(),pp=a("li"),Fre=a("strong"),vio=o("data2vec-text"),Fio=o(" \u2014 "),jB=a("a"),Tio=o("Data2VecTextModel"),Mio=o(" (Data2VecText model)"),Eio=l(),_p=a("li"),Tre=a("strong"),Cio=o("data2vec-vision"),wio=o(" \u2014 "),DB=a("a"),Aio=o("Data2VecVisionModel"),yio=o(" (Data2VecVision model)"),Lio=l(),up=a("li"),Mre=a("strong"),xio=o("deberta"),kio=o(" \u2014 "),GB=a("a"),Sio=o("DebertaModel"),Rio=o(" (DeBERTa model)"),Bio=l(),bp=a("li"),Ere=a("strong"),Pio=o("deberta-v2"),$io=o(" \u2014 "),OB=a("a"),Iio=o("DebertaV2Model"),qio=o(" (DeBERTa-v2 model)"),Nio=l(),vp=a("li"),Cre=a("strong"),jio=o("decision_transformer"),Dio=o(" \u2014 "),VB=a("a"),Gio=o("DecisionTransformerModel"),Oio=o(" (Decision Transformer model)"),Vio=l(),Fp=a("li"),wre=a("strong"),Xio=o("deit"),zio=o(" \u2014 "),XB=a("a"),Qio=o("DeiTModel"),Wio=o(" (DeiT model)"),Hio=l(),Tp=a("li"),Are=a("strong"),Uio=o("detr"),Jio=o(" \u2014 "),zB=a("a"),Yio=o("DetrModel"),Kio=o(" (DETR model)"),Zio=l(),Mp=a("li"),yre=a("strong"),edo=o("distilbert"),odo=o(" \u2014 "),QB=a("a"),rdo=o("DistilBertModel"),tdo=o(" (DistilBERT model)"),ado=l(),Ep=a("li"),Lre=a("strong"),ndo=o("dpr"),sdo=o(" \u2014 "),WB=a("a"),ldo=o("DPRQuestionEncoder"),ido=o(" (DPR model)"),ddo=l(),Cp=a("li"),xre=a("strong"),cdo=o("dpt"),fdo=o(" \u2014 "),HB=a("a"),mdo=o("DPTModel"),gdo=o(" (DPT model)"),hdo=l(),wp=a("li"),kre=a("strong"),pdo=o("electra"),_do=o(" \u2014 "),UB=a("a"),udo=o("ElectraModel"),bdo=o(" (ELECTRA model)"),vdo=l(),Ap=a("li"),Sre=a("strong"),Fdo=o("flaubert"),Tdo=o(" \u2014 "),JB=a("a"),Mdo=o("FlaubertModel"),Edo=o(" (FlauBERT model)"),Cdo=l(),yp=a("li"),Rre=a("strong"),wdo=o("fnet"),Ado=o(" \u2014 "),YB=a("a"),ydo=o("FNetModel"),Ldo=o(" (FNet model)"),xdo=l(),Lp=a("li"),Bre=a("strong"),kdo=o("fsmt"),Sdo=o(" \u2014 "),KB=a("a"),Rdo=o("FSMTModel"),Bdo=o(" (FairSeq Machine-Translation model)"),Pdo=l(),Os=a("li"),Pre=a("strong"),$do=o("funnel"),Ido=o(" \u2014 "),ZB=a("a"),qdo=o("FunnelModel"),Ndo=o(" or "),eP=a("a"),jdo=o("FunnelBaseModel"),Ddo=o(" (Funnel Transformer model)"),Gdo=l(),xp=a("li"),$re=a("strong"),Odo=o("glpn"),Vdo=o(" \u2014 "),oP=a("a"),Xdo=o("GLPNModel"),zdo=o(" (GLPN model)"),Qdo=l(),kp=a("li"),Ire=a("strong"),Wdo=o("gpt2"),Hdo=o(" \u2014 "),rP=a("a"),Udo=o("GPT2Model"),Jdo=o(" (OpenAI GPT-2 model)"),Ydo=l(),Sp=a("li"),qre=a("strong"),Kdo=o("gpt_neo"),Zdo=o(" \u2014 "),tP=a("a"),eco=o("GPTNeoModel"),oco=o(" (GPT Neo model)"),rco=l(),Rp=a("li"),Nre=a("strong"),tco=o("gptj"),aco=o(" \u2014 "),aP=a("a"),nco=o("GPTJModel"),sco=o(" (GPT-J model)"),lco=l(),Bp=a("li"),jre=a("strong"),ico=o("hubert"),dco=o(" \u2014 "),nP=a("a"),cco=o("HubertModel"),fco=o(" (Hubert model)"),mco=l(),Pp=a("li"),Dre=a("strong"),gco=o("ibert"),hco=o(" \u2014 "),sP=a("a"),pco=o("IBertModel"),_co=o(" (I-BERT model)"),uco=l(),$p=a("li"),Gre=a("strong"),bco=o("imagegpt"),vco=o(" \u2014 "),lP=a("a"),Fco=o("ImageGPTModel"),Tco=o(" (ImageGPT model)"),Mco=l(),Ip=a("li"),Ore=a("strong"),Eco=o("layoutlm"),Cco=o(" \u2014 "),iP=a("a"),wco=o("LayoutLMModel"),Aco=o(" (LayoutLM model)"),yco=l(),qp=a("li"),Vre=a("strong"),Lco=o("layoutlmv2"),xco=o(" \u2014 "),dP=a("a"),kco=o("LayoutLMv2Model"),Sco=o(" (LayoutLMv2 model)"),Rco=l(),Np=a("li"),Xre=a("strong"),Bco=o("led"),Pco=o(" \u2014 "),cP=a("a"),$co=o("LEDModel"),Ico=o(" (LED model)"),qco=l(),jp=a("li"),zre=a("strong"),Nco=o("longformer"),jco=o(" \u2014 "),fP=a("a"),Dco=o("LongformerModel"),Gco=o(" (Longformer model)"),Oco=l(),Dp=a("li"),Qre=a("strong"),Vco=o("luke"),Xco=o(" \u2014 "),mP=a("a"),zco=o("LukeModel"),Qco=o(" (LUKE model)"),Wco=l(),Gp=a("li"),Wre=a("strong"),Hco=o("lxmert"),Uco=o(" \u2014 "),gP=a("a"),Jco=o("LxmertModel"),Yco=o(" (LXMERT model)"),Kco=l(),Op=a("li"),Hre=a("strong"),Zco=o("m2m_100"),efo=o(" \u2014 "),hP=a("a"),ofo=o("M2M100Model"),rfo=o(" (M2M100 model)"),tfo=l(),Vp=a("li"),Ure=a("strong"),afo=o("marian"),nfo=o(" \u2014 "),pP=a("a"),sfo=o("MarianModel"),lfo=o(" (Marian model)"),ifo=l(),Xp=a("li"),Jre=a("strong"),dfo=o("maskformer"),cfo=o(" \u2014 "),_P=a("a"),ffo=o("MaskFormerModel"),mfo=o(" (MaskFormer model)"),gfo=l(),zp=a("li"),Yre=a("strong"),hfo=o("mbart"),pfo=o(" \u2014 "),uP=a("a"),_fo=o("MBartModel"),ufo=o(" (mBART model)"),bfo=l(),Qp=a("li"),Kre=a("strong"),vfo=o("megatron-bert"),Ffo=o(" \u2014 "),bP=a("a"),Tfo=o("MegatronBertModel"),Mfo=o(" (MegatronBert model)"),Efo=l(),Wp=a("li"),Zre=a("strong"),Cfo=o("mobilebert"),wfo=o(" \u2014 "),vP=a("a"),Afo=o("MobileBertModel"),yfo=o(" (MobileBERT model)"),Lfo=l(),Hp=a("li"),ete=a("strong"),xfo=o("mpnet"),kfo=o(" \u2014 "),FP=a("a"),Sfo=o("MPNetModel"),Rfo=o(" (MPNet model)"),Bfo=l(),Up=a("li"),ote=a("strong"),Pfo=o("mt5"),$fo=o(" \u2014 "),TP=a("a"),Ifo=o("MT5Model"),qfo=o(" (mT5 model)"),Nfo=l(),Jp=a("li"),rte=a("strong"),jfo=o("nystromformer"),Dfo=o(" \u2014 "),MP=a("a"),Gfo=o("NystromformerModel"),Ofo=o(" (Nystromformer model)"),Vfo=l(),Yp=a("li"),tte=a("strong"),Xfo=o("openai-gpt"),zfo=o(" \u2014 "),EP=a("a"),Qfo=o("OpenAIGPTModel"),Wfo=o(" (OpenAI GPT model)"),Hfo=l(),Kp=a("li"),ate=a("strong"),Ufo=o("pegasus"),Jfo=o(" \u2014 "),CP=a("a"),Yfo=o("PegasusModel"),Kfo=o(" (Pegasus model)"),Zfo=l(),Zp=a("li"),nte=a("strong"),emo=o("perceiver"),omo=o(" \u2014 "),wP=a("a"),rmo=o("PerceiverModel"),tmo=o(" (Perceiver model)"),amo=l(),e_=a("li"),ste=a("strong"),nmo=o("plbart"),smo=o(" \u2014 "),AP=a("a"),lmo=o("PLBartModel"),imo=o(" (PLBart model)"),dmo=l(),o_=a("li"),lte=a("strong"),cmo=o("poolformer"),fmo=o(" \u2014 "),yP=a("a"),mmo=o("PoolFormerModel"),gmo=o(" (PoolFormer model)"),hmo=l(),r_=a("li"),ite=a("strong"),pmo=o("prophetnet"),_mo=o(" \u2014 "),LP=a("a"),umo=o("ProphetNetModel"),bmo=o(" (ProphetNet model)"),vmo=l(),t_=a("li"),dte=a("strong"),Fmo=o("qdqbert"),Tmo=o(" \u2014 "),xP=a("a"),Mmo=o("QDQBertModel"),Emo=o(" (QDQBert model)"),Cmo=l(),a_=a("li"),cte=a("strong"),wmo=o("reformer"),Amo=o(" \u2014 "),kP=a("a"),ymo=o("ReformerModel"),Lmo=o(" (Reformer model)"),xmo=l(),n_=a("li"),fte=a("strong"),kmo=o("regnet"),Smo=o(" \u2014 "),SP=a("a"),Rmo=o("RegNetModel"),Bmo=o(" (RegNet model)"),Pmo=l(),s_=a("li"),mte=a("strong"),$mo=o("rembert"),Imo=o(" \u2014 "),RP=a("a"),qmo=o("RemBertModel"),Nmo=o(" (RemBERT model)"),jmo=l(),l_=a("li"),gte=a("strong"),Dmo=o("resnet"),Gmo=o(" \u2014 "),BP=a("a"),Omo=o("ResNetModel"),Vmo=o(" (ResNet model)"),Xmo=l(),i_=a("li"),hte=a("strong"),zmo=o("retribert"),Qmo=o(" \u2014 "),PP=a("a"),Wmo=o("RetriBertModel"),Hmo=o(" (RetriBERT model)"),Umo=l(),d_=a("li"),pte=a("strong"),Jmo=o("roberta"),Ymo=o(" \u2014 "),$P=a("a"),Kmo=o("RobertaModel"),Zmo=o(" (RoBERTa model)"),ego=l(),c_=a("li"),_te=a("strong"),ogo=o("roformer"),rgo=o(" \u2014 "),IP=a("a"),tgo=o("RoFormerModel"),ago=o(" (RoFormer model)"),ngo=l(),f_=a("li"),ute=a("strong"),sgo=o("segformer"),lgo=o(" \u2014 "),qP=a("a"),igo=o("SegformerModel"),dgo=o(" (SegFormer model)"),cgo=l(),m_=a("li"),bte=a("strong"),fgo=o("sew"),mgo=o(" \u2014 "),NP=a("a"),ggo=o("SEWModel"),hgo=o(" (SEW model)"),pgo=l(),g_=a("li"),vte=a("strong"),_go=o("sew-d"),ugo=o(" \u2014 "),jP=a("a"),bgo=o("SEWDModel"),vgo=o(" (SEW-D model)"),Fgo=l(),h_=a("li"),Fte=a("strong"),Tgo=o("speech_to_text"),Mgo=o(" \u2014 "),DP=a("a"),Ego=o("Speech2TextModel"),Cgo=o(" (Speech2Text model)"),wgo=l(),p_=a("li"),Tte=a("strong"),Ago=o("splinter"),ygo=o(" \u2014 "),GP=a("a"),Lgo=o("SplinterModel"),xgo=o(" (Splinter model)"),kgo=l(),__=a("li"),Mte=a("strong"),Sgo=o("squeezebert"),Rgo=o(" \u2014 "),OP=a("a"),Bgo=o("SqueezeBertModel"),Pgo=o(" (SqueezeBERT model)"),$go=l(),u_=a("li"),Ete=a("strong"),Igo=o("swin"),qgo=o(" \u2014 "),VP=a("a"),Ngo=o("SwinModel"),jgo=o(" (Swin model)"),Dgo=l(),b_=a("li"),Cte=a("strong"),Ggo=o("t5"),Ogo=o(" \u2014 "),XP=a("a"),Vgo=o("T5Model"),Xgo=o(" (T5 model)"),zgo=l(),v_=a("li"),wte=a("strong"),Qgo=o("tapas"),Wgo=o(" \u2014 "),zP=a("a"),Hgo=o("TapasModel"),Ugo=o(" (TAPAS model)"),Jgo=l(),F_=a("li"),Ate=a("strong"),Ygo=o("transfo-xl"),Kgo=o(" \u2014 "),QP=a("a"),Zgo=o("TransfoXLModel"),eho=o(" (Transformer-XL model)"),oho=l(),T_=a("li"),yte=a("strong"),rho=o("unispeech"),tho=o(" \u2014 "),WP=a("a"),aho=o("UniSpeechModel"),nho=o(" (UniSpeech model)"),sho=l(),M_=a("li"),Lte=a("strong"),lho=o("unispeech-sat"),iho=o(" \u2014 "),HP=a("a"),dho=o("UniSpeechSatModel"),cho=o(" (UniSpeechSat model)"),fho=l(),E_=a("li"),xte=a("strong"),mho=o("van"),gho=o(" \u2014 "),UP=a("a"),hho=o("VanModel"),pho=o(" (VAN model)"),_ho=l(),C_=a("li"),kte=a("strong"),uho=o("vilt"),bho=o(" \u2014 "),JP=a("a"),vho=o("ViltModel"),Fho=o(" (ViLT model)"),Tho=l(),w_=a("li"),Ste=a("strong"),Mho=o("vision-text-dual-encoder"),Eho=o(" \u2014 "),YP=a("a"),Cho=o("VisionTextDualEncoderModel"),who=o(" (VisionTextDualEncoder model)"),Aho=l(),A_=a("li"),Rte=a("strong"),yho=o("visual_bert"),Lho=o(" \u2014 "),KP=a("a"),xho=o("VisualBertModel"),kho=o(" (VisualBert model)"),Sho=l(),y_=a("li"),Bte=a("strong"),Rho=o("vit"),Bho=o(" \u2014 "),ZP=a("a"),Pho=o("ViTModel"),$ho=o(" (ViT model)"),Iho=l(),L_=a("li"),Pte=a("strong"),qho=o("vit_mae"),Nho=o(" \u2014 "),e$=a("a"),jho=o("ViTMAEModel"),Dho=o(" (ViTMAE model)"),Gho=l(),x_=a("li"),$te=a("strong"),Oho=o("wav2vec2"),Vho=o(" \u2014 "),o$=a("a"),Xho=o("Wav2Vec2Model"),zho=o(" (Wav2Vec2 model)"),Qho=l(),k_=a("li"),Ite=a("strong"),Who=o("wavlm"),Hho=o(" \u2014 "),r$=a("a"),Uho=o("WavLMModel"),Jho=o(" (WavLM model)"),Yho=l(),S_=a("li"),qte=a("strong"),Kho=o("xglm"),Zho=o(" \u2014 "),t$=a("a"),epo=o("XGLMModel"),opo=o(" (XGLM model)"),rpo=l(),R_=a("li"),Nte=a("strong"),tpo=o("xlm"),apo=o(" \u2014 "),a$=a("a"),npo=o("XLMModel"),spo=o(" (XLM model)"),lpo=l(),B_=a("li"),jte=a("strong"),ipo=o("xlm-prophetnet"),dpo=o(" \u2014 "),n$=a("a"),cpo=o("XLMProphetNetModel"),fpo=o(" (XLMProphetNet model)"),mpo=l(),P_=a("li"),Dte=a("strong"),gpo=o("xlm-roberta"),hpo=o(" \u2014 "),s$=a("a"),ppo=o("XLMRobertaModel"),_po=o(" (XLM-RoBERTa model)"),upo=l(),$_=a("li"),Gte=a("strong"),bpo=o("xlm-roberta-xl"),vpo=o(" \u2014 "),l$=a("a"),Fpo=o("XLMRobertaXLModel"),Tpo=o(" (XLM-RoBERTa-XL model)"),Mpo=l(),I_=a("li"),Ote=a("strong"),Epo=o("xlnet"),Cpo=o(" \u2014 "),i$=a("a"),wpo=o("XLNetModel"),Apo=o(" (XLNet model)"),ypo=l(),q_=a("li"),Vte=a("strong"),Lpo=o("yoso"),xpo=o(" \u2014 "),d$=a("a"),kpo=o("YosoModel"),Spo=o(" (YOSO model)"),Rpo=l(),N_=a("p"),Bpo=o("The model is set in evaluation mode by default using "),Xte=a("code"),Ppo=o("model.eval()"),$po=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zte=a("code"),Ipo=o("model.train()"),qpo=l(),Qte=a("p"),Npo=o("Examples:"),jpo=l(),f(_3.$$.fragment),rBe=l(),rd=a("h2"),j_=a("a"),Wte=a("span"),f(u3.$$.fragment),Dpo=l(),Hte=a("span"),Gpo=o("AutoModelForPreTraining"),tBe=l(),Yo=a("div"),f(b3.$$.fragment),Opo=l(),td=a("p"),Vpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),c$=a("a"),Xpo=o("from_pretrained()"),zpo=o(" class method or the "),f$=a("a"),Qpo=o("from_config()"),Wpo=o(` class
method.`),Hpo=l(),v3=a("p"),Upo=o("This class cannot be instantiated directly using "),Ute=a("code"),Jpo=o("__init__()"),Ypo=o(" (throws an error)."),Kpo=l(),zr=a("div"),f(F3.$$.fragment),Zpo=l(),Jte=a("p"),e_o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),o_o=l(),ad=a("p"),r_o=o(`Note:
Loading a model from its configuration file does `),Yte=a("strong"),t_o=o("not"),a_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m$=a("a"),n_o=o("from_pretrained()"),s_o=o(" to load the model weights."),l_o=l(),Kte=a("p"),i_o=o("Examples:"),d_o=l(),f(T3.$$.fragment),c_o=l(),Ne=a("div"),f(M3.$$.fragment),f_o=l(),Zte=a("p"),m_o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g_o=l(),za=a("p"),h_o=o("The model class to instantiate is selected based on the "),eae=a("code"),p_o=o("model_type"),__o=o(` property of the config object (either
passed as an argument or loaded from `),oae=a("code"),u_o=o("pretrained_model_name_or_path"),b_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=a("code"),v_o=o("pretrained_model_name_or_path"),F_o=o(":"),T_o=l(),S=a("ul"),D_=a("li"),tae=a("strong"),M_o=o("albert"),E_o=o(" \u2014 "),g$=a("a"),C_o=o("AlbertForPreTraining"),w_o=o(" (ALBERT model)"),A_o=l(),G_=a("li"),aae=a("strong"),y_o=o("bart"),L_o=o(" \u2014 "),h$=a("a"),x_o=o("BartForConditionalGeneration"),k_o=o(" (BART model)"),S_o=l(),O_=a("li"),nae=a("strong"),R_o=o("bert"),B_o=o(" \u2014 "),p$=a("a"),P_o=o("BertForPreTraining"),$_o=o(" (BERT model)"),I_o=l(),V_=a("li"),sae=a("strong"),q_o=o("big_bird"),N_o=o(" \u2014 "),_$=a("a"),j_o=o("BigBirdForPreTraining"),D_o=o(" (BigBird model)"),G_o=l(),X_=a("li"),lae=a("strong"),O_o=o("camembert"),V_o=o(" \u2014 "),u$=a("a"),X_o=o("CamembertForMaskedLM"),z_o=o(" (CamemBERT model)"),Q_o=l(),z_=a("li"),iae=a("strong"),W_o=o("ctrl"),H_o=o(" \u2014 "),b$=a("a"),U_o=o("CTRLLMHeadModel"),J_o=o(" (CTRL model)"),Y_o=l(),Q_=a("li"),dae=a("strong"),K_o=o("data2vec-text"),Z_o=o(" \u2014 "),v$=a("a"),euo=o("Data2VecTextForMaskedLM"),ouo=o(" (Data2VecText model)"),ruo=l(),W_=a("li"),cae=a("strong"),tuo=o("deberta"),auo=o(" \u2014 "),F$=a("a"),nuo=o("DebertaForMaskedLM"),suo=o(" (DeBERTa model)"),luo=l(),H_=a("li"),fae=a("strong"),iuo=o("deberta-v2"),duo=o(" \u2014 "),T$=a("a"),cuo=o("DebertaV2ForMaskedLM"),fuo=o(" (DeBERTa-v2 model)"),muo=l(),U_=a("li"),mae=a("strong"),guo=o("distilbert"),huo=o(" \u2014 "),M$=a("a"),puo=o("DistilBertForMaskedLM"),_uo=o(" (DistilBERT model)"),uuo=l(),J_=a("li"),gae=a("strong"),buo=o("electra"),vuo=o(" \u2014 "),E$=a("a"),Fuo=o("ElectraForPreTraining"),Tuo=o(" (ELECTRA model)"),Muo=l(),Y_=a("li"),hae=a("strong"),Euo=o("flaubert"),Cuo=o(" \u2014 "),C$=a("a"),wuo=o("FlaubertWithLMHeadModel"),Auo=o(" (FlauBERT model)"),yuo=l(),K_=a("li"),pae=a("strong"),Luo=o("fnet"),xuo=o(" \u2014 "),w$=a("a"),kuo=o("FNetForPreTraining"),Suo=o(" (FNet model)"),Ruo=l(),Z_=a("li"),_ae=a("strong"),Buo=o("fsmt"),Puo=o(" \u2014 "),A$=a("a"),$uo=o("FSMTForConditionalGeneration"),Iuo=o(" (FairSeq Machine-Translation model)"),quo=l(),eu=a("li"),uae=a("strong"),Nuo=o("funnel"),juo=o(" \u2014 "),y$=a("a"),Duo=o("FunnelForPreTraining"),Guo=o(" (Funnel Transformer model)"),Ouo=l(),ou=a("li"),bae=a("strong"),Vuo=o("gpt2"),Xuo=o(" \u2014 "),L$=a("a"),zuo=o("GPT2LMHeadModel"),Quo=o(" (OpenAI GPT-2 model)"),Wuo=l(),ru=a("li"),vae=a("strong"),Huo=o("ibert"),Uuo=o(" \u2014 "),x$=a("a"),Juo=o("IBertForMaskedLM"),Yuo=o(" (I-BERT model)"),Kuo=l(),tu=a("li"),Fae=a("strong"),Zuo=o("layoutlm"),e1o=o(" \u2014 "),k$=a("a"),o1o=o("LayoutLMForMaskedLM"),r1o=o(" (LayoutLM model)"),t1o=l(),au=a("li"),Tae=a("strong"),a1o=o("longformer"),n1o=o(" \u2014 "),S$=a("a"),s1o=o("LongformerForMaskedLM"),l1o=o(" (Longformer model)"),i1o=l(),nu=a("li"),Mae=a("strong"),d1o=o("lxmert"),c1o=o(" \u2014 "),R$=a("a"),f1o=o("LxmertForPreTraining"),m1o=o(" (LXMERT model)"),g1o=l(),su=a("li"),Eae=a("strong"),h1o=o("megatron-bert"),p1o=o(" \u2014 "),B$=a("a"),_1o=o("MegatronBertForPreTraining"),u1o=o(" (MegatronBert model)"),b1o=l(),lu=a("li"),Cae=a("strong"),v1o=o("mobilebert"),F1o=o(" \u2014 "),P$=a("a"),T1o=o("MobileBertForPreTraining"),M1o=o(" (MobileBERT model)"),E1o=l(),iu=a("li"),wae=a("strong"),C1o=o("mpnet"),w1o=o(" \u2014 "),$$=a("a"),A1o=o("MPNetForMaskedLM"),y1o=o(" (MPNet model)"),L1o=l(),du=a("li"),Aae=a("strong"),x1o=o("openai-gpt"),k1o=o(" \u2014 "),I$=a("a"),S1o=o("OpenAIGPTLMHeadModel"),R1o=o(" (OpenAI GPT model)"),B1o=l(),cu=a("li"),yae=a("strong"),P1o=o("retribert"),$1o=o(" \u2014 "),q$=a("a"),I1o=o("RetriBertModel"),q1o=o(" (RetriBERT model)"),N1o=l(),fu=a("li"),Lae=a("strong"),j1o=o("roberta"),D1o=o(" \u2014 "),N$=a("a"),G1o=o("RobertaForMaskedLM"),O1o=o(" (RoBERTa model)"),V1o=l(),mu=a("li"),xae=a("strong"),X1o=o("squeezebert"),z1o=o(" \u2014 "),j$=a("a"),Q1o=o("SqueezeBertForMaskedLM"),W1o=o(" (SqueezeBERT model)"),H1o=l(),gu=a("li"),kae=a("strong"),U1o=o("t5"),J1o=o(" \u2014 "),D$=a("a"),Y1o=o("T5ForConditionalGeneration"),K1o=o(" (T5 model)"),Z1o=l(),hu=a("li"),Sae=a("strong"),ebo=o("tapas"),obo=o(" \u2014 "),G$=a("a"),rbo=o("TapasForMaskedLM"),tbo=o(" (TAPAS model)"),abo=l(),pu=a("li"),Rae=a("strong"),nbo=o("transfo-xl"),sbo=o(" \u2014 "),O$=a("a"),lbo=o("TransfoXLLMHeadModel"),ibo=o(" (Transformer-XL model)"),dbo=l(),_u=a("li"),Bae=a("strong"),cbo=o("unispeech"),fbo=o(" \u2014 "),V$=a("a"),mbo=o("UniSpeechForPreTraining"),gbo=o(" (UniSpeech model)"),hbo=l(),uu=a("li"),Pae=a("strong"),pbo=o("unispeech-sat"),_bo=o(" \u2014 "),X$=a("a"),ubo=o("UniSpeechSatForPreTraining"),bbo=o(" (UniSpeechSat model)"),vbo=l(),bu=a("li"),$ae=a("strong"),Fbo=o("visual_bert"),Tbo=o(" \u2014 "),z$=a("a"),Mbo=o("VisualBertForPreTraining"),Ebo=o(" (VisualBert model)"),Cbo=l(),vu=a("li"),Iae=a("strong"),wbo=o("vit_mae"),Abo=o(" \u2014 "),Q$=a("a"),ybo=o("ViTMAEForPreTraining"),Lbo=o(" (ViTMAE model)"),xbo=l(),Fu=a("li"),qae=a("strong"),kbo=o("wav2vec2"),Sbo=o(" \u2014 "),W$=a("a"),Rbo=o("Wav2Vec2ForPreTraining"),Bbo=o(" (Wav2Vec2 model)"),Pbo=l(),Tu=a("li"),Nae=a("strong"),$bo=o("xlm"),Ibo=o(" \u2014 "),H$=a("a"),qbo=o("XLMWithLMHeadModel"),Nbo=o(" (XLM model)"),jbo=l(),Mu=a("li"),jae=a("strong"),Dbo=o("xlm-roberta"),Gbo=o(" \u2014 "),U$=a("a"),Obo=o("XLMRobertaForMaskedLM"),Vbo=o(" (XLM-RoBERTa model)"),Xbo=l(),Eu=a("li"),Dae=a("strong"),zbo=o("xlm-roberta-xl"),Qbo=o(" \u2014 "),J$=a("a"),Wbo=o("XLMRobertaXLForMaskedLM"),Hbo=o(" (XLM-RoBERTa-XL model)"),Ubo=l(),Cu=a("li"),Gae=a("strong"),Jbo=o("xlnet"),Ybo=o(" \u2014 "),Y$=a("a"),Kbo=o("XLNetLMHeadModel"),Zbo=o(" (XLNet model)"),e2o=l(),wu=a("p"),o2o=o("The model is set in evaluation mode by default using "),Oae=a("code"),r2o=o("model.eval()"),t2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vae=a("code"),a2o=o("model.train()"),n2o=l(),Xae=a("p"),s2o=o("Examples:"),l2o=l(),f(E3.$$.fragment),aBe=l(),nd=a("h2"),Au=a("a"),zae=a("span"),f(C3.$$.fragment),i2o=l(),Qae=a("span"),d2o=o("AutoModelForCausalLM"),nBe=l(),Ko=a("div"),f(w3.$$.fragment),c2o=l(),sd=a("p"),f2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),K$=a("a"),m2o=o("from_pretrained()"),g2o=o(" class method or the "),Z$=a("a"),h2o=o("from_config()"),p2o=o(` class
method.`),_2o=l(),A3=a("p"),u2o=o("This class cannot be instantiated directly using "),Wae=a("code"),b2o=o("__init__()"),v2o=o(" (throws an error)."),F2o=l(),Qr=a("div"),f(y3.$$.fragment),T2o=l(),Hae=a("p"),M2o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E2o=l(),ld=a("p"),C2o=o(`Note:
Loading a model from its configuration file does `),Uae=a("strong"),w2o=o("not"),A2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eI=a("a"),y2o=o("from_pretrained()"),L2o=o(" to load the model weights."),x2o=l(),Jae=a("p"),k2o=o("Examples:"),S2o=l(),f(L3.$$.fragment),R2o=l(),je=a("div"),f(x3.$$.fragment),B2o=l(),Yae=a("p"),P2o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$2o=l(),Qa=a("p"),I2o=o("The model class to instantiate is selected based on the "),Kae=a("code"),q2o=o("model_type"),N2o=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),j2o=o("pretrained_model_name_or_path"),D2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=a("code"),G2o=o("pretrained_model_name_or_path"),O2o=o(":"),V2o=l(),$=a("ul"),yu=a("li"),one=a("strong"),X2o=o("bart"),z2o=o(" \u2014 "),oI=a("a"),Q2o=o("BartForCausalLM"),W2o=o(" (BART model)"),H2o=l(),Lu=a("li"),rne=a("strong"),U2o=o("bert"),J2o=o(" \u2014 "),rI=a("a"),Y2o=o("BertLMHeadModel"),K2o=o(" (BERT model)"),Z2o=l(),xu=a("li"),tne=a("strong"),e6o=o("bert-generation"),o6o=o(" \u2014 "),tI=a("a"),r6o=o("BertGenerationDecoder"),t6o=o(" (Bert Generation model)"),a6o=l(),ku=a("li"),ane=a("strong"),n6o=o("big_bird"),s6o=o(" \u2014 "),aI=a("a"),l6o=o("BigBirdForCausalLM"),i6o=o(" (BigBird model)"),d6o=l(),Su=a("li"),nne=a("strong"),c6o=o("bigbird_pegasus"),f6o=o(" \u2014 "),nI=a("a"),m6o=o("BigBirdPegasusForCausalLM"),g6o=o(" (BigBirdPegasus model)"),h6o=l(),Ru=a("li"),sne=a("strong"),p6o=o("blenderbot"),_6o=o(" \u2014 "),sI=a("a"),u6o=o("BlenderbotForCausalLM"),b6o=o(" (Blenderbot model)"),v6o=l(),Bu=a("li"),lne=a("strong"),F6o=o("blenderbot-small"),T6o=o(" \u2014 "),lI=a("a"),M6o=o("BlenderbotSmallForCausalLM"),E6o=o(" (BlenderbotSmall model)"),C6o=l(),Pu=a("li"),ine=a("strong"),w6o=o("camembert"),A6o=o(" \u2014 "),iI=a("a"),y6o=o("CamembertForCausalLM"),L6o=o(" (CamemBERT model)"),x6o=l(),$u=a("li"),dne=a("strong"),k6o=o("ctrl"),S6o=o(" \u2014 "),dI=a("a"),R6o=o("CTRLLMHeadModel"),B6o=o(" (CTRL model)"),P6o=l(),Iu=a("li"),cne=a("strong"),$6o=o("data2vec-text"),I6o=o(" \u2014 "),cI=a("a"),q6o=o("Data2VecTextForCausalLM"),N6o=o(" (Data2VecText model)"),j6o=l(),qu=a("li"),fne=a("strong"),D6o=o("electra"),G6o=o(" \u2014 "),fI=a("a"),O6o=o("ElectraForCausalLM"),V6o=o(" (ELECTRA model)"),X6o=l(),Nu=a("li"),mne=a("strong"),z6o=o("gpt2"),Q6o=o(" \u2014 "),mI=a("a"),W6o=o("GPT2LMHeadModel"),H6o=o(" (OpenAI GPT-2 model)"),U6o=l(),ju=a("li"),gne=a("strong"),J6o=o("gpt_neo"),Y6o=o(" \u2014 "),gI=a("a"),K6o=o("GPTNeoForCausalLM"),Z6o=o(" (GPT Neo model)"),evo=l(),Du=a("li"),hne=a("strong"),ovo=o("gptj"),rvo=o(" \u2014 "),hI=a("a"),tvo=o("GPTJForCausalLM"),avo=o(" (GPT-J model)"),nvo=l(),Gu=a("li"),pne=a("strong"),svo=o("marian"),lvo=o(" \u2014 "),pI=a("a"),ivo=o("MarianForCausalLM"),dvo=o(" (Marian model)"),cvo=l(),Ou=a("li"),_ne=a("strong"),fvo=o("mbart"),mvo=o(" \u2014 "),_I=a("a"),gvo=o("MBartForCausalLM"),hvo=o(" (mBART model)"),pvo=l(),Vu=a("li"),une=a("strong"),_vo=o("megatron-bert"),uvo=o(" \u2014 "),uI=a("a"),bvo=o("MegatronBertForCausalLM"),vvo=o(" (MegatronBert model)"),Fvo=l(),Xu=a("li"),bne=a("strong"),Tvo=o("openai-gpt"),Mvo=o(" \u2014 "),bI=a("a"),Evo=o("OpenAIGPTLMHeadModel"),Cvo=o(" (OpenAI GPT model)"),wvo=l(),zu=a("li"),vne=a("strong"),Avo=o("pegasus"),yvo=o(" \u2014 "),vI=a("a"),Lvo=o("PegasusForCausalLM"),xvo=o(" (Pegasus model)"),kvo=l(),Qu=a("li"),Fne=a("strong"),Svo=o("plbart"),Rvo=o(" \u2014 "),FI=a("a"),Bvo=o("PLBartForCausalLM"),Pvo=o(" (PLBart model)"),$vo=l(),Wu=a("li"),Tne=a("strong"),Ivo=o("prophetnet"),qvo=o(" \u2014 "),TI=a("a"),Nvo=o("ProphetNetForCausalLM"),jvo=o(" (ProphetNet model)"),Dvo=l(),Hu=a("li"),Mne=a("strong"),Gvo=o("qdqbert"),Ovo=o(" \u2014 "),MI=a("a"),Vvo=o("QDQBertLMHeadModel"),Xvo=o(" (QDQBert model)"),zvo=l(),Uu=a("li"),Ene=a("strong"),Qvo=o("reformer"),Wvo=o(" \u2014 "),EI=a("a"),Hvo=o("ReformerModelWithLMHead"),Uvo=o(" (Reformer model)"),Jvo=l(),Ju=a("li"),Cne=a("strong"),Yvo=o("rembert"),Kvo=o(" \u2014 "),CI=a("a"),Zvo=o("RemBertForCausalLM"),eFo=o(" (RemBERT model)"),oFo=l(),Yu=a("li"),wne=a("strong"),rFo=o("roberta"),tFo=o(" \u2014 "),wI=a("a"),aFo=o("RobertaForCausalLM"),nFo=o(" (RoBERTa model)"),sFo=l(),Ku=a("li"),Ane=a("strong"),lFo=o("roformer"),iFo=o(" \u2014 "),AI=a("a"),dFo=o("RoFormerForCausalLM"),cFo=o(" (RoFormer model)"),fFo=l(),Zu=a("li"),yne=a("strong"),mFo=o("speech_to_text_2"),gFo=o(" \u2014 "),yI=a("a"),hFo=o("Speech2Text2ForCausalLM"),pFo=o(" (Speech2Text2 model)"),_Fo=l(),e1=a("li"),Lne=a("strong"),uFo=o("transfo-xl"),bFo=o(" \u2014 "),LI=a("a"),vFo=o("TransfoXLLMHeadModel"),FFo=o(" (Transformer-XL model)"),TFo=l(),o1=a("li"),xne=a("strong"),MFo=o("trocr"),EFo=o(" \u2014 "),xI=a("a"),CFo=o("TrOCRForCausalLM"),wFo=o(" (TrOCR model)"),AFo=l(),r1=a("li"),kne=a("strong"),yFo=o("xglm"),LFo=o(" \u2014 "),kI=a("a"),xFo=o("XGLMForCausalLM"),kFo=o(" (XGLM model)"),SFo=l(),t1=a("li"),Sne=a("strong"),RFo=o("xlm"),BFo=o(" \u2014 "),SI=a("a"),PFo=o("XLMWithLMHeadModel"),$Fo=o(" (XLM model)"),IFo=l(),a1=a("li"),Rne=a("strong"),qFo=o("xlm-prophetnet"),NFo=o(" \u2014 "),RI=a("a"),jFo=o("XLMProphetNetForCausalLM"),DFo=o(" (XLMProphetNet model)"),GFo=l(),n1=a("li"),Bne=a("strong"),OFo=o("xlm-roberta"),VFo=o(" \u2014 "),BI=a("a"),XFo=o("XLMRobertaForCausalLM"),zFo=o(" (XLM-RoBERTa model)"),QFo=l(),s1=a("li"),Pne=a("strong"),WFo=o("xlm-roberta-xl"),HFo=o(" \u2014 "),PI=a("a"),UFo=o("XLMRobertaXLForCausalLM"),JFo=o(" (XLM-RoBERTa-XL model)"),YFo=l(),l1=a("li"),$ne=a("strong"),KFo=o("xlnet"),ZFo=o(" \u2014 "),$I=a("a"),eTo=o("XLNetLMHeadModel"),oTo=o(" (XLNet model)"),rTo=l(),i1=a("p"),tTo=o("The model is set in evaluation mode by default using "),Ine=a("code"),aTo=o("model.eval()"),nTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qne=a("code"),sTo=o("model.train()"),lTo=l(),Nne=a("p"),iTo=o("Examples:"),dTo=l(),f(k3.$$.fragment),sBe=l(),id=a("h2"),d1=a("a"),jne=a("span"),f(S3.$$.fragment),cTo=l(),Dne=a("span"),fTo=o("AutoModelForMaskedLM"),lBe=l(),Zo=a("div"),f(R3.$$.fragment),mTo=l(),dd=a("p"),gTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),II=a("a"),hTo=o("from_pretrained()"),pTo=o(" class method or the "),qI=a("a"),_To=o("from_config()"),uTo=o(` class
method.`),bTo=l(),B3=a("p"),vTo=o("This class cannot be instantiated directly using "),Gne=a("code"),FTo=o("__init__()"),TTo=o(" (throws an error)."),MTo=l(),Wr=a("div"),f(P3.$$.fragment),ETo=l(),One=a("p"),CTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wTo=l(),cd=a("p"),ATo=o(`Note:
Loading a model from its configuration file does `),Vne=a("strong"),yTo=o("not"),LTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NI=a("a"),xTo=o("from_pretrained()"),kTo=o(" to load the model weights."),STo=l(),Xne=a("p"),RTo=o("Examples:"),BTo=l(),f($3.$$.fragment),PTo=l(),De=a("div"),f(I3.$$.fragment),$To=l(),zne=a("p"),ITo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qTo=l(),Wa=a("p"),NTo=o("The model class to instantiate is selected based on the "),Qne=a("code"),jTo=o("model_type"),DTo=o(` property of the config object (either
passed as an argument or loaded from `),Wne=a("code"),GTo=o("pretrained_model_name_or_path"),OTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hne=a("code"),VTo=o("pretrained_model_name_or_path"),XTo=o(":"),zTo=l(),I=a("ul"),c1=a("li"),Une=a("strong"),QTo=o("albert"),WTo=o(" \u2014 "),jI=a("a"),HTo=o("AlbertForMaskedLM"),UTo=o(" (ALBERT model)"),JTo=l(),f1=a("li"),Jne=a("strong"),YTo=o("bart"),KTo=o(" \u2014 "),DI=a("a"),ZTo=o("BartForConditionalGeneration"),e8o=o(" (BART model)"),o8o=l(),m1=a("li"),Yne=a("strong"),r8o=o("bert"),t8o=o(" \u2014 "),GI=a("a"),a8o=o("BertForMaskedLM"),n8o=o(" (BERT model)"),s8o=l(),g1=a("li"),Kne=a("strong"),l8o=o("big_bird"),i8o=o(" \u2014 "),OI=a("a"),d8o=o("BigBirdForMaskedLM"),c8o=o(" (BigBird model)"),f8o=l(),h1=a("li"),Zne=a("strong"),m8o=o("camembert"),g8o=o(" \u2014 "),VI=a("a"),h8o=o("CamembertForMaskedLM"),p8o=o(" (CamemBERT model)"),_8o=l(),p1=a("li"),ese=a("strong"),u8o=o("convbert"),b8o=o(" \u2014 "),XI=a("a"),v8o=o("ConvBertForMaskedLM"),F8o=o(" (ConvBERT model)"),T8o=l(),_1=a("li"),ose=a("strong"),M8o=o("data2vec-text"),E8o=o(" \u2014 "),zI=a("a"),C8o=o("Data2VecTextForMaskedLM"),w8o=o(" (Data2VecText model)"),A8o=l(),u1=a("li"),rse=a("strong"),y8o=o("deberta"),L8o=o(" \u2014 "),QI=a("a"),x8o=o("DebertaForMaskedLM"),k8o=o(" (DeBERTa model)"),S8o=l(),b1=a("li"),tse=a("strong"),R8o=o("deberta-v2"),B8o=o(" \u2014 "),WI=a("a"),P8o=o("DebertaV2ForMaskedLM"),$8o=o(" (DeBERTa-v2 model)"),I8o=l(),v1=a("li"),ase=a("strong"),q8o=o("distilbert"),N8o=o(" \u2014 "),HI=a("a"),j8o=o("DistilBertForMaskedLM"),D8o=o(" (DistilBERT model)"),G8o=l(),F1=a("li"),nse=a("strong"),O8o=o("electra"),V8o=o(" \u2014 "),UI=a("a"),X8o=o("ElectraForMaskedLM"),z8o=o(" (ELECTRA model)"),Q8o=l(),T1=a("li"),sse=a("strong"),W8o=o("flaubert"),H8o=o(" \u2014 "),JI=a("a"),U8o=o("FlaubertWithLMHeadModel"),J8o=o(" (FlauBERT model)"),Y8o=l(),M1=a("li"),lse=a("strong"),K8o=o("fnet"),Z8o=o(" \u2014 "),YI=a("a"),e7o=o("FNetForMaskedLM"),o7o=o(" (FNet model)"),r7o=l(),E1=a("li"),ise=a("strong"),t7o=o("funnel"),a7o=o(" \u2014 "),KI=a("a"),n7o=o("FunnelForMaskedLM"),s7o=o(" (Funnel Transformer model)"),l7o=l(),C1=a("li"),dse=a("strong"),i7o=o("ibert"),d7o=o(" \u2014 "),ZI=a("a"),c7o=o("IBertForMaskedLM"),f7o=o(" (I-BERT model)"),m7o=l(),w1=a("li"),cse=a("strong"),g7o=o("layoutlm"),h7o=o(" \u2014 "),eq=a("a"),p7o=o("LayoutLMForMaskedLM"),_7o=o(" (LayoutLM model)"),u7o=l(),A1=a("li"),fse=a("strong"),b7o=o("longformer"),v7o=o(" \u2014 "),oq=a("a"),F7o=o("LongformerForMaskedLM"),T7o=o(" (Longformer model)"),M7o=l(),y1=a("li"),mse=a("strong"),E7o=o("mbart"),C7o=o(" \u2014 "),rq=a("a"),w7o=o("MBartForConditionalGeneration"),A7o=o(" (mBART model)"),y7o=l(),L1=a("li"),gse=a("strong"),L7o=o("megatron-bert"),x7o=o(" \u2014 "),tq=a("a"),k7o=o("MegatronBertForMaskedLM"),S7o=o(" (MegatronBert model)"),R7o=l(),x1=a("li"),hse=a("strong"),B7o=o("mobilebert"),P7o=o(" \u2014 "),aq=a("a"),$7o=o("MobileBertForMaskedLM"),I7o=o(" (MobileBERT model)"),q7o=l(),k1=a("li"),pse=a("strong"),N7o=o("mpnet"),j7o=o(" \u2014 "),nq=a("a"),D7o=o("MPNetForMaskedLM"),G7o=o(" (MPNet model)"),O7o=l(),S1=a("li"),_se=a("strong"),V7o=o("nystromformer"),X7o=o(" \u2014 "),sq=a("a"),z7o=o("NystromformerForMaskedLM"),Q7o=o(" (Nystromformer model)"),W7o=l(),R1=a("li"),use=a("strong"),H7o=o("perceiver"),U7o=o(" \u2014 "),lq=a("a"),J7o=o("PerceiverForMaskedLM"),Y7o=o(" (Perceiver model)"),K7o=l(),B1=a("li"),bse=a("strong"),Z7o=o("qdqbert"),eMo=o(" \u2014 "),iq=a("a"),oMo=o("QDQBertForMaskedLM"),rMo=o(" (QDQBert model)"),tMo=l(),P1=a("li"),vse=a("strong"),aMo=o("reformer"),nMo=o(" \u2014 "),dq=a("a"),sMo=o("ReformerForMaskedLM"),lMo=o(" (Reformer model)"),iMo=l(),$1=a("li"),Fse=a("strong"),dMo=o("rembert"),cMo=o(" \u2014 "),cq=a("a"),fMo=o("RemBertForMaskedLM"),mMo=o(" (RemBERT model)"),gMo=l(),I1=a("li"),Tse=a("strong"),hMo=o("roberta"),pMo=o(" \u2014 "),fq=a("a"),_Mo=o("RobertaForMaskedLM"),uMo=o(" (RoBERTa model)"),bMo=l(),q1=a("li"),Mse=a("strong"),vMo=o("roformer"),FMo=o(" \u2014 "),mq=a("a"),TMo=o("RoFormerForMaskedLM"),MMo=o(" (RoFormer model)"),EMo=l(),N1=a("li"),Ese=a("strong"),CMo=o("squeezebert"),wMo=o(" \u2014 "),gq=a("a"),AMo=o("SqueezeBertForMaskedLM"),yMo=o(" (SqueezeBERT model)"),LMo=l(),j1=a("li"),Cse=a("strong"),xMo=o("tapas"),kMo=o(" \u2014 "),hq=a("a"),SMo=o("TapasForMaskedLM"),RMo=o(" (TAPAS model)"),BMo=l(),D1=a("li"),wse=a("strong"),PMo=o("wav2vec2"),$Mo=o(" \u2014 "),Ase=a("code"),IMo=o("Wav2Vec2ForMaskedLM"),qMo=o(" (Wav2Vec2 model)"),NMo=l(),G1=a("li"),yse=a("strong"),jMo=o("xlm"),DMo=o(" \u2014 "),pq=a("a"),GMo=o("XLMWithLMHeadModel"),OMo=o(" (XLM model)"),VMo=l(),O1=a("li"),Lse=a("strong"),XMo=o("xlm-roberta"),zMo=o(" \u2014 "),_q=a("a"),QMo=o("XLMRobertaForMaskedLM"),WMo=o(" (XLM-RoBERTa model)"),HMo=l(),V1=a("li"),xse=a("strong"),UMo=o("xlm-roberta-xl"),JMo=o(" \u2014 "),uq=a("a"),YMo=o("XLMRobertaXLForMaskedLM"),KMo=o(" (XLM-RoBERTa-XL model)"),ZMo=l(),X1=a("li"),kse=a("strong"),e4o=o("yoso"),o4o=o(" \u2014 "),bq=a("a"),r4o=o("YosoForMaskedLM"),t4o=o(" (YOSO model)"),a4o=l(),z1=a("p"),n4o=o("The model is set in evaluation mode by default using "),Sse=a("code"),s4o=o("model.eval()"),l4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rse=a("code"),i4o=o("model.train()"),d4o=l(),Bse=a("p"),c4o=o("Examples:"),f4o=l(),f(q3.$$.fragment),iBe=l(),fd=a("h2"),Q1=a("a"),Pse=a("span"),f(N3.$$.fragment),m4o=l(),$se=a("span"),g4o=o("AutoModelForSeq2SeqLM"),dBe=l(),er=a("div"),f(j3.$$.fragment),h4o=l(),md=a("p"),p4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vq=a("a"),_4o=o("from_pretrained()"),u4o=o(" class method or the "),Fq=a("a"),b4o=o("from_config()"),v4o=o(` class
method.`),F4o=l(),D3=a("p"),T4o=o("This class cannot be instantiated directly using "),Ise=a("code"),M4o=o("__init__()"),E4o=o(" (throws an error)."),C4o=l(),Hr=a("div"),f(G3.$$.fragment),w4o=l(),qse=a("p"),A4o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y4o=l(),gd=a("p"),L4o=o(`Note:
Loading a model from its configuration file does `),Nse=a("strong"),x4o=o("not"),k4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tq=a("a"),S4o=o("from_pretrained()"),R4o=o(" to load the model weights."),B4o=l(),jse=a("p"),P4o=o("Examples:"),$4o=l(),f(O3.$$.fragment),I4o=l(),Ge=a("div"),f(V3.$$.fragment),q4o=l(),Dse=a("p"),N4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j4o=l(),Ha=a("p"),D4o=o("The model class to instantiate is selected based on the "),Gse=a("code"),G4o=o("model_type"),O4o=o(` property of the config object (either
passed as an argument or loaded from `),Ose=a("code"),V4o=o("pretrained_model_name_or_path"),X4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vse=a("code"),z4o=o("pretrained_model_name_or_path"),Q4o=o(":"),W4o=l(),ne=a("ul"),W1=a("li"),Xse=a("strong"),H4o=o("bart"),U4o=o(" \u2014 "),Mq=a("a"),J4o=o("BartForConditionalGeneration"),Y4o=o(" (BART model)"),K4o=l(),H1=a("li"),zse=a("strong"),Z4o=o("bigbird_pegasus"),eEo=o(" \u2014 "),Eq=a("a"),oEo=o("BigBirdPegasusForConditionalGeneration"),rEo=o(" (BigBirdPegasus model)"),tEo=l(),U1=a("li"),Qse=a("strong"),aEo=o("blenderbot"),nEo=o(" \u2014 "),Cq=a("a"),sEo=o("BlenderbotForConditionalGeneration"),lEo=o(" (Blenderbot model)"),iEo=l(),J1=a("li"),Wse=a("strong"),dEo=o("blenderbot-small"),cEo=o(" \u2014 "),wq=a("a"),fEo=o("BlenderbotSmallForConditionalGeneration"),mEo=o(" (BlenderbotSmall model)"),gEo=l(),Y1=a("li"),Hse=a("strong"),hEo=o("encoder-decoder"),pEo=o(" \u2014 "),Aq=a("a"),_Eo=o("EncoderDecoderModel"),uEo=o(" (Encoder decoder model)"),bEo=l(),K1=a("li"),Use=a("strong"),vEo=o("fsmt"),FEo=o(" \u2014 "),yq=a("a"),TEo=o("FSMTForConditionalGeneration"),MEo=o(" (FairSeq Machine-Translation model)"),EEo=l(),Z1=a("li"),Jse=a("strong"),CEo=o("led"),wEo=o(" \u2014 "),Lq=a("a"),AEo=o("LEDForConditionalGeneration"),yEo=o(" (LED model)"),LEo=l(),eb=a("li"),Yse=a("strong"),xEo=o("m2m_100"),kEo=o(" \u2014 "),xq=a("a"),SEo=o("M2M100ForConditionalGeneration"),REo=o(" (M2M100 model)"),BEo=l(),ob=a("li"),Kse=a("strong"),PEo=o("marian"),$Eo=o(" \u2014 "),kq=a("a"),IEo=o("MarianMTModel"),qEo=o(" (Marian model)"),NEo=l(),rb=a("li"),Zse=a("strong"),jEo=o("mbart"),DEo=o(" \u2014 "),Sq=a("a"),GEo=o("MBartForConditionalGeneration"),OEo=o(" (mBART model)"),VEo=l(),tb=a("li"),ele=a("strong"),XEo=o("mt5"),zEo=o(" \u2014 "),Rq=a("a"),QEo=o("MT5ForConditionalGeneration"),WEo=o(" (mT5 model)"),HEo=l(),ab=a("li"),ole=a("strong"),UEo=o("pegasus"),JEo=o(" \u2014 "),Bq=a("a"),YEo=o("PegasusForConditionalGeneration"),KEo=o(" (Pegasus model)"),ZEo=l(),nb=a("li"),rle=a("strong"),e5o=o("plbart"),o5o=o(" \u2014 "),Pq=a("a"),r5o=o("PLBartForConditionalGeneration"),t5o=o(" (PLBart model)"),a5o=l(),sb=a("li"),tle=a("strong"),n5o=o("prophetnet"),s5o=o(" \u2014 "),$q=a("a"),l5o=o("ProphetNetForConditionalGeneration"),i5o=o(" (ProphetNet model)"),d5o=l(),lb=a("li"),ale=a("strong"),c5o=o("t5"),f5o=o(" \u2014 "),Iq=a("a"),m5o=o("T5ForConditionalGeneration"),g5o=o(" (T5 model)"),h5o=l(),ib=a("li"),nle=a("strong"),p5o=o("tapex"),_5o=o(" \u2014 "),qq=a("a"),u5o=o("BartForConditionalGeneration"),b5o=o(" (TAPEX model)"),v5o=l(),db=a("li"),sle=a("strong"),F5o=o("xlm-prophetnet"),T5o=o(" \u2014 "),Nq=a("a"),M5o=o("XLMProphetNetForConditionalGeneration"),E5o=o(" (XLMProphetNet model)"),C5o=l(),cb=a("p"),w5o=o("The model is set in evaluation mode by default using "),lle=a("code"),A5o=o("model.eval()"),y5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ile=a("code"),L5o=o("model.train()"),x5o=l(),dle=a("p"),k5o=o("Examples:"),S5o=l(),f(X3.$$.fragment),cBe=l(),hd=a("h2"),fb=a("a"),cle=a("span"),f(z3.$$.fragment),R5o=l(),fle=a("span"),B5o=o("AutoModelForSequenceClassification"),fBe=l(),or=a("div"),f(Q3.$$.fragment),P5o=l(),pd=a("p"),$5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jq=a("a"),I5o=o("from_pretrained()"),q5o=o(" class method or the "),Dq=a("a"),N5o=o("from_config()"),j5o=o(` class
method.`),D5o=l(),W3=a("p"),G5o=o("This class cannot be instantiated directly using "),mle=a("code"),O5o=o("__init__()"),V5o=o(" (throws an error)."),X5o=l(),Ur=a("div"),f(H3.$$.fragment),z5o=l(),gle=a("p"),Q5o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),W5o=l(),_d=a("p"),H5o=o(`Note:
Loading a model from its configuration file does `),hle=a("strong"),U5o=o("not"),J5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=a("a"),Y5o=o("from_pretrained()"),K5o=o(" to load the model weights."),Z5o=l(),ple=a("p"),e3o=o("Examples:"),o3o=l(),f(U3.$$.fragment),r3o=l(),Oe=a("div"),f(J3.$$.fragment),t3o=l(),_le=a("p"),a3o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n3o=l(),Ua=a("p"),s3o=o("The model class to instantiate is selected based on the "),ule=a("code"),l3o=o("model_type"),i3o=o(` property of the config object (either
passed as an argument or loaded from `),ble=a("code"),d3o=o("pretrained_model_name_or_path"),c3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vle=a("code"),f3o=o("pretrained_model_name_or_path"),m3o=o(":"),g3o=l(),y=a("ul"),mb=a("li"),Fle=a("strong"),h3o=o("albert"),p3o=o(" \u2014 "),Oq=a("a"),_3o=o("AlbertForSequenceClassification"),u3o=o(" (ALBERT model)"),b3o=l(),gb=a("li"),Tle=a("strong"),v3o=o("bart"),F3o=o(" \u2014 "),Vq=a("a"),T3o=o("BartForSequenceClassification"),M3o=o(" (BART model)"),E3o=l(),hb=a("li"),Mle=a("strong"),C3o=o("bert"),w3o=o(" \u2014 "),Xq=a("a"),A3o=o("BertForSequenceClassification"),y3o=o(" (BERT model)"),L3o=l(),pb=a("li"),Ele=a("strong"),x3o=o("big_bird"),k3o=o(" \u2014 "),zq=a("a"),S3o=o("BigBirdForSequenceClassification"),R3o=o(" (BigBird model)"),B3o=l(),_b=a("li"),Cle=a("strong"),P3o=o("bigbird_pegasus"),$3o=o(" \u2014 "),Qq=a("a"),I3o=o("BigBirdPegasusForSequenceClassification"),q3o=o(" (BigBirdPegasus model)"),N3o=l(),ub=a("li"),wle=a("strong"),j3o=o("camembert"),D3o=o(" \u2014 "),Wq=a("a"),G3o=o("CamembertForSequenceClassification"),O3o=o(" (CamemBERT model)"),V3o=l(),bb=a("li"),Ale=a("strong"),X3o=o("canine"),z3o=o(" \u2014 "),Hq=a("a"),Q3o=o("CanineForSequenceClassification"),W3o=o(" (Canine model)"),H3o=l(),vb=a("li"),yle=a("strong"),U3o=o("convbert"),J3o=o(" \u2014 "),Uq=a("a"),Y3o=o("ConvBertForSequenceClassification"),K3o=o(" (ConvBERT model)"),Z3o=l(),Fb=a("li"),Lle=a("strong"),eCo=o("ctrl"),oCo=o(" \u2014 "),Jq=a("a"),rCo=o("CTRLForSequenceClassification"),tCo=o(" (CTRL model)"),aCo=l(),Tb=a("li"),xle=a("strong"),nCo=o("data2vec-text"),sCo=o(" \u2014 "),Yq=a("a"),lCo=o("Data2VecTextForSequenceClassification"),iCo=o(" (Data2VecText model)"),dCo=l(),Mb=a("li"),kle=a("strong"),cCo=o("deberta"),fCo=o(" \u2014 "),Kq=a("a"),mCo=o("DebertaForSequenceClassification"),gCo=o(" (DeBERTa model)"),hCo=l(),Eb=a("li"),Sle=a("strong"),pCo=o("deberta-v2"),_Co=o(" \u2014 "),Zq=a("a"),uCo=o("DebertaV2ForSequenceClassification"),bCo=o(" (DeBERTa-v2 model)"),vCo=l(),Cb=a("li"),Rle=a("strong"),FCo=o("distilbert"),TCo=o(" \u2014 "),eN=a("a"),MCo=o("DistilBertForSequenceClassification"),ECo=o(" (DistilBERT model)"),CCo=l(),wb=a("li"),Ble=a("strong"),wCo=o("electra"),ACo=o(" \u2014 "),oN=a("a"),yCo=o("ElectraForSequenceClassification"),LCo=o(" (ELECTRA model)"),xCo=l(),Ab=a("li"),Ple=a("strong"),kCo=o("flaubert"),SCo=o(" \u2014 "),rN=a("a"),RCo=o("FlaubertForSequenceClassification"),BCo=o(" (FlauBERT model)"),PCo=l(),yb=a("li"),$le=a("strong"),$Co=o("fnet"),ICo=o(" \u2014 "),tN=a("a"),qCo=o("FNetForSequenceClassification"),NCo=o(" (FNet model)"),jCo=l(),Lb=a("li"),Ile=a("strong"),DCo=o("funnel"),GCo=o(" \u2014 "),aN=a("a"),OCo=o("FunnelForSequenceClassification"),VCo=o(" (Funnel Transformer model)"),XCo=l(),xb=a("li"),qle=a("strong"),zCo=o("gpt2"),QCo=o(" \u2014 "),nN=a("a"),WCo=o("GPT2ForSequenceClassification"),HCo=o(" (OpenAI GPT-2 model)"),UCo=l(),kb=a("li"),Nle=a("strong"),JCo=o("gpt_neo"),YCo=o(" \u2014 "),sN=a("a"),KCo=o("GPTNeoForSequenceClassification"),ZCo=o(" (GPT Neo model)"),ewo=l(),Sb=a("li"),jle=a("strong"),owo=o("gptj"),rwo=o(" \u2014 "),lN=a("a"),two=o("GPTJForSequenceClassification"),awo=o(" (GPT-J model)"),nwo=l(),Rb=a("li"),Dle=a("strong"),swo=o("ibert"),lwo=o(" \u2014 "),iN=a("a"),iwo=o("IBertForSequenceClassification"),dwo=o(" (I-BERT model)"),cwo=l(),Bb=a("li"),Gle=a("strong"),fwo=o("layoutlm"),mwo=o(" \u2014 "),dN=a("a"),gwo=o("LayoutLMForSequenceClassification"),hwo=o(" (LayoutLM model)"),pwo=l(),Pb=a("li"),Ole=a("strong"),_wo=o("layoutlmv2"),uwo=o(" \u2014 "),cN=a("a"),bwo=o("LayoutLMv2ForSequenceClassification"),vwo=o(" (LayoutLMv2 model)"),Fwo=l(),$b=a("li"),Vle=a("strong"),Two=o("led"),Mwo=o(" \u2014 "),fN=a("a"),Ewo=o("LEDForSequenceClassification"),Cwo=o(" (LED model)"),wwo=l(),Ib=a("li"),Xle=a("strong"),Awo=o("longformer"),ywo=o(" \u2014 "),mN=a("a"),Lwo=o("LongformerForSequenceClassification"),xwo=o(" (Longformer model)"),kwo=l(),qb=a("li"),zle=a("strong"),Swo=o("mbart"),Rwo=o(" \u2014 "),gN=a("a"),Bwo=o("MBartForSequenceClassification"),Pwo=o(" (mBART model)"),$wo=l(),Nb=a("li"),Qle=a("strong"),Iwo=o("megatron-bert"),qwo=o(" \u2014 "),hN=a("a"),Nwo=o("MegatronBertForSequenceClassification"),jwo=o(" (MegatronBert model)"),Dwo=l(),jb=a("li"),Wle=a("strong"),Gwo=o("mobilebert"),Owo=o(" \u2014 "),pN=a("a"),Vwo=o("MobileBertForSequenceClassification"),Xwo=o(" (MobileBERT model)"),zwo=l(),Db=a("li"),Hle=a("strong"),Qwo=o("mpnet"),Wwo=o(" \u2014 "),_N=a("a"),Hwo=o("MPNetForSequenceClassification"),Uwo=o(" (MPNet model)"),Jwo=l(),Gb=a("li"),Ule=a("strong"),Ywo=o("nystromformer"),Kwo=o(" \u2014 "),uN=a("a"),Zwo=o("NystromformerForSequenceClassification"),eAo=o(" (Nystromformer model)"),oAo=l(),Ob=a("li"),Jle=a("strong"),rAo=o("openai-gpt"),tAo=o(" \u2014 "),bN=a("a"),aAo=o("OpenAIGPTForSequenceClassification"),nAo=o(" (OpenAI GPT model)"),sAo=l(),Vb=a("li"),Yle=a("strong"),lAo=o("perceiver"),iAo=o(" \u2014 "),vN=a("a"),dAo=o("PerceiverForSequenceClassification"),cAo=o(" (Perceiver model)"),fAo=l(),Xb=a("li"),Kle=a("strong"),mAo=o("plbart"),gAo=o(" \u2014 "),FN=a("a"),hAo=o("PLBartForSequenceClassification"),pAo=o(" (PLBart model)"),_Ao=l(),zb=a("li"),Zle=a("strong"),uAo=o("qdqbert"),bAo=o(" \u2014 "),TN=a("a"),vAo=o("QDQBertForSequenceClassification"),FAo=o(" (QDQBert model)"),TAo=l(),Qb=a("li"),eie=a("strong"),MAo=o("reformer"),EAo=o(" \u2014 "),MN=a("a"),CAo=o("ReformerForSequenceClassification"),wAo=o(" (Reformer model)"),AAo=l(),Wb=a("li"),oie=a("strong"),yAo=o("rembert"),LAo=o(" \u2014 "),EN=a("a"),xAo=o("RemBertForSequenceClassification"),kAo=o(" (RemBERT model)"),SAo=l(),Hb=a("li"),rie=a("strong"),RAo=o("roberta"),BAo=o(" \u2014 "),CN=a("a"),PAo=o("RobertaForSequenceClassification"),$Ao=o(" (RoBERTa model)"),IAo=l(),Ub=a("li"),tie=a("strong"),qAo=o("roformer"),NAo=o(" \u2014 "),wN=a("a"),jAo=o("RoFormerForSequenceClassification"),DAo=o(" (RoFormer model)"),GAo=l(),Jb=a("li"),aie=a("strong"),OAo=o("squeezebert"),VAo=o(" \u2014 "),AN=a("a"),XAo=o("SqueezeBertForSequenceClassification"),zAo=o(" (SqueezeBERT model)"),QAo=l(),Yb=a("li"),nie=a("strong"),WAo=o("tapas"),HAo=o(" \u2014 "),yN=a("a"),UAo=o("TapasForSequenceClassification"),JAo=o(" (TAPAS model)"),YAo=l(),Kb=a("li"),sie=a("strong"),KAo=o("tapex"),ZAo=o(" \u2014 "),LN=a("a"),e0o=o("BartForSequenceClassification"),o0o=o(" (TAPEX model)"),r0o=l(),Zb=a("li"),lie=a("strong"),t0o=o("transfo-xl"),a0o=o(" \u2014 "),xN=a("a"),n0o=o("TransfoXLForSequenceClassification"),s0o=o(" (Transformer-XL model)"),l0o=l(),e2=a("li"),iie=a("strong"),i0o=o("xlm"),d0o=o(" \u2014 "),kN=a("a"),c0o=o("XLMForSequenceClassification"),f0o=o(" (XLM model)"),m0o=l(),o2=a("li"),die=a("strong"),g0o=o("xlm-roberta"),h0o=o(" \u2014 "),SN=a("a"),p0o=o("XLMRobertaForSequenceClassification"),_0o=o(" (XLM-RoBERTa model)"),u0o=l(),r2=a("li"),cie=a("strong"),b0o=o("xlm-roberta-xl"),v0o=o(" \u2014 "),RN=a("a"),F0o=o("XLMRobertaXLForSequenceClassification"),T0o=o(" (XLM-RoBERTa-XL model)"),M0o=l(),t2=a("li"),fie=a("strong"),E0o=o("xlnet"),C0o=o(" \u2014 "),BN=a("a"),w0o=o("XLNetForSequenceClassification"),A0o=o(" (XLNet model)"),y0o=l(),a2=a("li"),mie=a("strong"),L0o=o("yoso"),x0o=o(" \u2014 "),PN=a("a"),k0o=o("YosoForSequenceClassification"),S0o=o(" (YOSO model)"),R0o=l(),n2=a("p"),B0o=o("The model is set in evaluation mode by default using "),gie=a("code"),P0o=o("model.eval()"),$0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),I0o=o("model.train()"),q0o=l(),pie=a("p"),N0o=o("Examples:"),j0o=l(),f(Y3.$$.fragment),mBe=l(),ud=a("h2"),s2=a("a"),_ie=a("span"),f(K3.$$.fragment),D0o=l(),uie=a("span"),G0o=o("AutoModelForMultipleChoice"),gBe=l(),rr=a("div"),f(Z3.$$.fragment),O0o=l(),bd=a("p"),V0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$N=a("a"),X0o=o("from_pretrained()"),z0o=o(" class method or the "),IN=a("a"),Q0o=o("from_config()"),W0o=o(` class
method.`),H0o=l(),eC=a("p"),U0o=o("This class cannot be instantiated directly using "),bie=a("code"),J0o=o("__init__()"),Y0o=o(" (throws an error)."),K0o=l(),Jr=a("div"),f(oC.$$.fragment),Z0o=l(),vie=a("p"),eyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oyo=l(),vd=a("p"),ryo=o(`Note:
Loading a model from its configuration file does `),Fie=a("strong"),tyo=o("not"),ayo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qN=a("a"),nyo=o("from_pretrained()"),syo=o(" to load the model weights."),lyo=l(),Tie=a("p"),iyo=o("Examples:"),dyo=l(),f(rC.$$.fragment),cyo=l(),Ve=a("div"),f(tC.$$.fragment),fyo=l(),Mie=a("p"),myo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gyo=l(),Ja=a("p"),hyo=o("The model class to instantiate is selected based on the "),Eie=a("code"),pyo=o("model_type"),_yo=o(` property of the config object (either
passed as an argument or loaded from `),Cie=a("code"),uyo=o("pretrained_model_name_or_path"),byo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=a("code"),vyo=o("pretrained_model_name_or_path"),Fyo=o(":"),Tyo=l(),G=a("ul"),l2=a("li"),Aie=a("strong"),Myo=o("albert"),Eyo=o(" \u2014 "),NN=a("a"),Cyo=o("AlbertForMultipleChoice"),wyo=o(" (ALBERT model)"),Ayo=l(),i2=a("li"),yie=a("strong"),yyo=o("bert"),Lyo=o(" \u2014 "),jN=a("a"),xyo=o("BertForMultipleChoice"),kyo=o(" (BERT model)"),Syo=l(),d2=a("li"),Lie=a("strong"),Ryo=o("big_bird"),Byo=o(" \u2014 "),DN=a("a"),Pyo=o("BigBirdForMultipleChoice"),$yo=o(" (BigBird model)"),Iyo=l(),c2=a("li"),xie=a("strong"),qyo=o("camembert"),Nyo=o(" \u2014 "),GN=a("a"),jyo=o("CamembertForMultipleChoice"),Dyo=o(" (CamemBERT model)"),Gyo=l(),f2=a("li"),kie=a("strong"),Oyo=o("canine"),Vyo=o(" \u2014 "),ON=a("a"),Xyo=o("CanineForMultipleChoice"),zyo=o(" (Canine model)"),Qyo=l(),m2=a("li"),Sie=a("strong"),Wyo=o("convbert"),Hyo=o(" \u2014 "),VN=a("a"),Uyo=o("ConvBertForMultipleChoice"),Jyo=o(" (ConvBERT model)"),Yyo=l(),g2=a("li"),Rie=a("strong"),Kyo=o("data2vec-text"),Zyo=o(" \u2014 "),XN=a("a"),eLo=o("Data2VecTextForMultipleChoice"),oLo=o(" (Data2VecText model)"),rLo=l(),h2=a("li"),Bie=a("strong"),tLo=o("distilbert"),aLo=o(" \u2014 "),zN=a("a"),nLo=o("DistilBertForMultipleChoice"),sLo=o(" (DistilBERT model)"),lLo=l(),p2=a("li"),Pie=a("strong"),iLo=o("electra"),dLo=o(" \u2014 "),QN=a("a"),cLo=o("ElectraForMultipleChoice"),fLo=o(" (ELECTRA model)"),mLo=l(),_2=a("li"),$ie=a("strong"),gLo=o("flaubert"),hLo=o(" \u2014 "),WN=a("a"),pLo=o("FlaubertForMultipleChoice"),_Lo=o(" (FlauBERT model)"),uLo=l(),u2=a("li"),Iie=a("strong"),bLo=o("fnet"),vLo=o(" \u2014 "),HN=a("a"),FLo=o("FNetForMultipleChoice"),TLo=o(" (FNet model)"),MLo=l(),b2=a("li"),qie=a("strong"),ELo=o("funnel"),CLo=o(" \u2014 "),UN=a("a"),wLo=o("FunnelForMultipleChoice"),ALo=o(" (Funnel Transformer model)"),yLo=l(),v2=a("li"),Nie=a("strong"),LLo=o("ibert"),xLo=o(" \u2014 "),JN=a("a"),kLo=o("IBertForMultipleChoice"),SLo=o(" (I-BERT model)"),RLo=l(),F2=a("li"),jie=a("strong"),BLo=o("longformer"),PLo=o(" \u2014 "),YN=a("a"),$Lo=o("LongformerForMultipleChoice"),ILo=o(" (Longformer model)"),qLo=l(),T2=a("li"),Die=a("strong"),NLo=o("megatron-bert"),jLo=o(" \u2014 "),KN=a("a"),DLo=o("MegatronBertForMultipleChoice"),GLo=o(" (MegatronBert model)"),OLo=l(),M2=a("li"),Gie=a("strong"),VLo=o("mobilebert"),XLo=o(" \u2014 "),ZN=a("a"),zLo=o("MobileBertForMultipleChoice"),QLo=o(" (MobileBERT model)"),WLo=l(),E2=a("li"),Oie=a("strong"),HLo=o("mpnet"),ULo=o(" \u2014 "),ej=a("a"),JLo=o("MPNetForMultipleChoice"),YLo=o(" (MPNet model)"),KLo=l(),C2=a("li"),Vie=a("strong"),ZLo=o("nystromformer"),e9o=o(" \u2014 "),oj=a("a"),o9o=o("NystromformerForMultipleChoice"),r9o=o(" (Nystromformer model)"),t9o=l(),w2=a("li"),Xie=a("strong"),a9o=o("qdqbert"),n9o=o(" \u2014 "),rj=a("a"),s9o=o("QDQBertForMultipleChoice"),l9o=o(" (QDQBert model)"),i9o=l(),A2=a("li"),zie=a("strong"),d9o=o("rembert"),c9o=o(" \u2014 "),tj=a("a"),f9o=o("RemBertForMultipleChoice"),m9o=o(" (RemBERT model)"),g9o=l(),y2=a("li"),Qie=a("strong"),h9o=o("roberta"),p9o=o(" \u2014 "),aj=a("a"),_9o=o("RobertaForMultipleChoice"),u9o=o(" (RoBERTa model)"),b9o=l(),L2=a("li"),Wie=a("strong"),v9o=o("roformer"),F9o=o(" \u2014 "),nj=a("a"),T9o=o("RoFormerForMultipleChoice"),M9o=o(" (RoFormer model)"),E9o=l(),x2=a("li"),Hie=a("strong"),C9o=o("squeezebert"),w9o=o(" \u2014 "),sj=a("a"),A9o=o("SqueezeBertForMultipleChoice"),y9o=o(" (SqueezeBERT model)"),L9o=l(),k2=a("li"),Uie=a("strong"),x9o=o("xlm"),k9o=o(" \u2014 "),lj=a("a"),S9o=o("XLMForMultipleChoice"),R9o=o(" (XLM model)"),B9o=l(),S2=a("li"),Jie=a("strong"),P9o=o("xlm-roberta"),$9o=o(" \u2014 "),ij=a("a"),I9o=o("XLMRobertaForMultipleChoice"),q9o=o(" (XLM-RoBERTa model)"),N9o=l(),R2=a("li"),Yie=a("strong"),j9o=o("xlm-roberta-xl"),D9o=o(" \u2014 "),dj=a("a"),G9o=o("XLMRobertaXLForMultipleChoice"),O9o=o(" (XLM-RoBERTa-XL model)"),V9o=l(),B2=a("li"),Kie=a("strong"),X9o=o("xlnet"),z9o=o(" \u2014 "),cj=a("a"),Q9o=o("XLNetForMultipleChoice"),W9o=o(" (XLNet model)"),H9o=l(),P2=a("li"),Zie=a("strong"),U9o=o("yoso"),J9o=o(" \u2014 "),fj=a("a"),Y9o=o("YosoForMultipleChoice"),K9o=o(" (YOSO model)"),Z9o=l(),$2=a("p"),exo=o("The model is set in evaluation mode by default using "),ede=a("code"),oxo=o("model.eval()"),rxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=a("code"),txo=o("model.train()"),axo=l(),rde=a("p"),nxo=o("Examples:"),sxo=l(),f(aC.$$.fragment),hBe=l(),Fd=a("h2"),I2=a("a"),tde=a("span"),f(nC.$$.fragment),lxo=l(),ade=a("span"),ixo=o("AutoModelForNextSentencePrediction"),pBe=l(),tr=a("div"),f(sC.$$.fragment),dxo=l(),Td=a("p"),cxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mj=a("a"),fxo=o("from_pretrained()"),mxo=o(" class method or the "),gj=a("a"),gxo=o("from_config()"),hxo=o(` class
method.`),pxo=l(),lC=a("p"),_xo=o("This class cannot be instantiated directly using "),nde=a("code"),uxo=o("__init__()"),bxo=o(" (throws an error)."),vxo=l(),Yr=a("div"),f(iC.$$.fragment),Fxo=l(),sde=a("p"),Txo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mxo=l(),Md=a("p"),Exo=o(`Note:
Loading a model from its configuration file does `),lde=a("strong"),Cxo=o("not"),wxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=a("a"),Axo=o("from_pretrained()"),yxo=o(" to load the model weights."),Lxo=l(),ide=a("p"),xxo=o("Examples:"),kxo=l(),f(dC.$$.fragment),Sxo=l(),Xe=a("div"),f(cC.$$.fragment),Rxo=l(),dde=a("p"),Bxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pxo=l(),Ya=a("p"),$xo=o("The model class to instantiate is selected based on the "),cde=a("code"),Ixo=o("model_type"),qxo=o(` property of the config object (either
passed as an argument or loaded from `),fde=a("code"),Nxo=o("pretrained_model_name_or_path"),jxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=a("code"),Dxo=o("pretrained_model_name_or_path"),Gxo=o(":"),Oxo=l(),da=a("ul"),q2=a("li"),gde=a("strong"),Vxo=o("bert"),Xxo=o(" \u2014 "),pj=a("a"),zxo=o("BertForNextSentencePrediction"),Qxo=o(" (BERT model)"),Wxo=l(),N2=a("li"),hde=a("strong"),Hxo=o("fnet"),Uxo=o(" \u2014 "),_j=a("a"),Jxo=o("FNetForNextSentencePrediction"),Yxo=o(" (FNet model)"),Kxo=l(),j2=a("li"),pde=a("strong"),Zxo=o("megatron-bert"),eko=o(" \u2014 "),uj=a("a"),oko=o("MegatronBertForNextSentencePrediction"),rko=o(" (MegatronBert model)"),tko=l(),D2=a("li"),_de=a("strong"),ako=o("mobilebert"),nko=o(" \u2014 "),bj=a("a"),sko=o("MobileBertForNextSentencePrediction"),lko=o(" (MobileBERT model)"),iko=l(),G2=a("li"),ude=a("strong"),dko=o("qdqbert"),cko=o(" \u2014 "),vj=a("a"),fko=o("QDQBertForNextSentencePrediction"),mko=o(" (QDQBert model)"),gko=l(),O2=a("p"),hko=o("The model is set in evaluation mode by default using "),bde=a("code"),pko=o("model.eval()"),_ko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=a("code"),uko=o("model.train()"),bko=l(),Fde=a("p"),vko=o("Examples:"),Fko=l(),f(fC.$$.fragment),_Be=l(),Ed=a("h2"),V2=a("a"),Tde=a("span"),f(mC.$$.fragment),Tko=l(),Mde=a("span"),Mko=o("AutoModelForTokenClassification"),uBe=l(),ar=a("div"),f(gC.$$.fragment),Eko=l(),Cd=a("p"),Cko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fj=a("a"),wko=o("from_pretrained()"),Ako=o(" class method or the "),Tj=a("a"),yko=o("from_config()"),Lko=o(` class
method.`),xko=l(),hC=a("p"),kko=o("This class cannot be instantiated directly using "),Ede=a("code"),Sko=o("__init__()"),Rko=o(" (throws an error)."),Bko=l(),Kr=a("div"),f(pC.$$.fragment),Pko=l(),Cde=a("p"),$ko=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Iko=l(),wd=a("p"),qko=o(`Note:
Loading a model from its configuration file does `),wde=a("strong"),Nko=o("not"),jko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=a("a"),Dko=o("from_pretrained()"),Gko=o(" to load the model weights."),Oko=l(),Ade=a("p"),Vko=o("Examples:"),Xko=l(),f(_C.$$.fragment),zko=l(),ze=a("div"),f(uC.$$.fragment),Qko=l(),yde=a("p"),Wko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hko=l(),Ka=a("p"),Uko=o("The model class to instantiate is selected based on the "),Lde=a("code"),Jko=o("model_type"),Yko=o(` property of the config object (either
passed as an argument or loaded from `),xde=a("code"),Kko=o("pretrained_model_name_or_path"),Zko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kde=a("code"),eSo=o("pretrained_model_name_or_path"),oSo=o(":"),rSo=l(),j=a("ul"),X2=a("li"),Sde=a("strong"),tSo=o("albert"),aSo=o(" \u2014 "),Ej=a("a"),nSo=o("AlbertForTokenClassification"),sSo=o(" (ALBERT model)"),lSo=l(),z2=a("li"),Rde=a("strong"),iSo=o("bert"),dSo=o(" \u2014 "),Cj=a("a"),cSo=o("BertForTokenClassification"),fSo=o(" (BERT model)"),mSo=l(),Q2=a("li"),Bde=a("strong"),gSo=o("big_bird"),hSo=o(" \u2014 "),wj=a("a"),pSo=o("BigBirdForTokenClassification"),_So=o(" (BigBird model)"),uSo=l(),W2=a("li"),Pde=a("strong"),bSo=o("camembert"),vSo=o(" \u2014 "),Aj=a("a"),FSo=o("CamembertForTokenClassification"),TSo=o(" (CamemBERT model)"),MSo=l(),H2=a("li"),$de=a("strong"),ESo=o("canine"),CSo=o(" \u2014 "),yj=a("a"),wSo=o("CanineForTokenClassification"),ASo=o(" (Canine model)"),ySo=l(),U2=a("li"),Ide=a("strong"),LSo=o("convbert"),xSo=o(" \u2014 "),Lj=a("a"),kSo=o("ConvBertForTokenClassification"),SSo=o(" (ConvBERT model)"),RSo=l(),J2=a("li"),qde=a("strong"),BSo=o("data2vec-text"),PSo=o(" \u2014 "),xj=a("a"),$So=o("Data2VecTextForTokenClassification"),ISo=o(" (Data2VecText model)"),qSo=l(),Y2=a("li"),Nde=a("strong"),NSo=o("deberta"),jSo=o(" \u2014 "),kj=a("a"),DSo=o("DebertaForTokenClassification"),GSo=o(" (DeBERTa model)"),OSo=l(),K2=a("li"),jde=a("strong"),VSo=o("deberta-v2"),XSo=o(" \u2014 "),Sj=a("a"),zSo=o("DebertaV2ForTokenClassification"),QSo=o(" (DeBERTa-v2 model)"),WSo=l(),Z2=a("li"),Dde=a("strong"),HSo=o("distilbert"),USo=o(" \u2014 "),Rj=a("a"),JSo=o("DistilBertForTokenClassification"),YSo=o(" (DistilBERT model)"),KSo=l(),e6=a("li"),Gde=a("strong"),ZSo=o("electra"),eRo=o(" \u2014 "),Bj=a("a"),oRo=o("ElectraForTokenClassification"),rRo=o(" (ELECTRA model)"),tRo=l(),o6=a("li"),Ode=a("strong"),aRo=o("flaubert"),nRo=o(" \u2014 "),Pj=a("a"),sRo=o("FlaubertForTokenClassification"),lRo=o(" (FlauBERT model)"),iRo=l(),r6=a("li"),Vde=a("strong"),dRo=o("fnet"),cRo=o(" \u2014 "),$j=a("a"),fRo=o("FNetForTokenClassification"),mRo=o(" (FNet model)"),gRo=l(),t6=a("li"),Xde=a("strong"),hRo=o("funnel"),pRo=o(" \u2014 "),Ij=a("a"),_Ro=o("FunnelForTokenClassification"),uRo=o(" (Funnel Transformer model)"),bRo=l(),a6=a("li"),zde=a("strong"),vRo=o("gpt2"),FRo=o(" \u2014 "),qj=a("a"),TRo=o("GPT2ForTokenClassification"),MRo=o(" (OpenAI GPT-2 model)"),ERo=l(),n6=a("li"),Qde=a("strong"),CRo=o("ibert"),wRo=o(" \u2014 "),Nj=a("a"),ARo=o("IBertForTokenClassification"),yRo=o(" (I-BERT model)"),LRo=l(),s6=a("li"),Wde=a("strong"),xRo=o("layoutlm"),kRo=o(" \u2014 "),jj=a("a"),SRo=o("LayoutLMForTokenClassification"),RRo=o(" (LayoutLM model)"),BRo=l(),l6=a("li"),Hde=a("strong"),PRo=o("layoutlmv2"),$Ro=o(" \u2014 "),Dj=a("a"),IRo=o("LayoutLMv2ForTokenClassification"),qRo=o(" (LayoutLMv2 model)"),NRo=l(),i6=a("li"),Ude=a("strong"),jRo=o("longformer"),DRo=o(" \u2014 "),Gj=a("a"),GRo=o("LongformerForTokenClassification"),ORo=o(" (Longformer model)"),VRo=l(),d6=a("li"),Jde=a("strong"),XRo=o("megatron-bert"),zRo=o(" \u2014 "),Oj=a("a"),QRo=o("MegatronBertForTokenClassification"),WRo=o(" (MegatronBert model)"),HRo=l(),c6=a("li"),Yde=a("strong"),URo=o("mobilebert"),JRo=o(" \u2014 "),Vj=a("a"),YRo=o("MobileBertForTokenClassification"),KRo=o(" (MobileBERT model)"),ZRo=l(),f6=a("li"),Kde=a("strong"),eBo=o("mpnet"),oBo=o(" \u2014 "),Xj=a("a"),rBo=o("MPNetForTokenClassification"),tBo=o(" (MPNet model)"),aBo=l(),m6=a("li"),Zde=a("strong"),nBo=o("nystromformer"),sBo=o(" \u2014 "),zj=a("a"),lBo=o("NystromformerForTokenClassification"),iBo=o(" (Nystromformer model)"),dBo=l(),g6=a("li"),ece=a("strong"),cBo=o("qdqbert"),fBo=o(" \u2014 "),Qj=a("a"),mBo=o("QDQBertForTokenClassification"),gBo=o(" (QDQBert model)"),hBo=l(),h6=a("li"),oce=a("strong"),pBo=o("rembert"),_Bo=o(" \u2014 "),Wj=a("a"),uBo=o("RemBertForTokenClassification"),bBo=o(" (RemBERT model)"),vBo=l(),p6=a("li"),rce=a("strong"),FBo=o("roberta"),TBo=o(" \u2014 "),Hj=a("a"),MBo=o("RobertaForTokenClassification"),EBo=o(" (RoBERTa model)"),CBo=l(),_6=a("li"),tce=a("strong"),wBo=o("roformer"),ABo=o(" \u2014 "),Uj=a("a"),yBo=o("RoFormerForTokenClassification"),LBo=o(" (RoFormer model)"),xBo=l(),u6=a("li"),ace=a("strong"),kBo=o("squeezebert"),SBo=o(" \u2014 "),Jj=a("a"),RBo=o("SqueezeBertForTokenClassification"),BBo=o(" (SqueezeBERT model)"),PBo=l(),b6=a("li"),nce=a("strong"),$Bo=o("xlm"),IBo=o(" \u2014 "),Yj=a("a"),qBo=o("XLMForTokenClassification"),NBo=o(" (XLM model)"),jBo=l(),v6=a("li"),sce=a("strong"),DBo=o("xlm-roberta"),GBo=o(" \u2014 "),Kj=a("a"),OBo=o("XLMRobertaForTokenClassification"),VBo=o(" (XLM-RoBERTa model)"),XBo=l(),F6=a("li"),lce=a("strong"),zBo=o("xlm-roberta-xl"),QBo=o(" \u2014 "),Zj=a("a"),WBo=o("XLMRobertaXLForTokenClassification"),HBo=o(" (XLM-RoBERTa-XL model)"),UBo=l(),T6=a("li"),ice=a("strong"),JBo=o("xlnet"),YBo=o(" \u2014 "),eD=a("a"),KBo=o("XLNetForTokenClassification"),ZBo=o(" (XLNet model)"),ePo=l(),M6=a("li"),dce=a("strong"),oPo=o("yoso"),rPo=o(" \u2014 "),oD=a("a"),tPo=o("YosoForTokenClassification"),aPo=o(" (YOSO model)"),nPo=l(),E6=a("p"),sPo=o("The model is set in evaluation mode by default using "),cce=a("code"),lPo=o("model.eval()"),iPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=a("code"),dPo=o("model.train()"),cPo=l(),mce=a("p"),fPo=o("Examples:"),mPo=l(),f(bC.$$.fragment),bBe=l(),Ad=a("h2"),C6=a("a"),gce=a("span"),f(vC.$$.fragment),gPo=l(),hce=a("span"),hPo=o("AutoModelForQuestionAnswering"),vBe=l(),nr=a("div"),f(FC.$$.fragment),pPo=l(),yd=a("p"),_Po=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rD=a("a"),uPo=o("from_pretrained()"),bPo=o(" class method or the "),tD=a("a"),vPo=o("from_config()"),FPo=o(` class
method.`),TPo=l(),TC=a("p"),MPo=o("This class cannot be instantiated directly using "),pce=a("code"),EPo=o("__init__()"),CPo=o(" (throws an error)."),wPo=l(),Zr=a("div"),f(MC.$$.fragment),APo=l(),_ce=a("p"),yPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LPo=l(),Ld=a("p"),xPo=o(`Note:
Loading a model from its configuration file does `),uce=a("strong"),kPo=o("not"),SPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aD=a("a"),RPo=o("from_pretrained()"),BPo=o(" to load the model weights."),PPo=l(),bce=a("p"),$Po=o("Examples:"),IPo=l(),f(EC.$$.fragment),qPo=l(),Qe=a("div"),f(CC.$$.fragment),NPo=l(),vce=a("p"),jPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DPo=l(),Za=a("p"),GPo=o("The model class to instantiate is selected based on the "),Fce=a("code"),OPo=o("model_type"),VPo=o(` property of the config object (either
passed as an argument or loaded from `),Tce=a("code"),XPo=o("pretrained_model_name_or_path"),zPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=a("code"),QPo=o("pretrained_model_name_or_path"),WPo=o(":"),HPo=l(),R=a("ul"),w6=a("li"),Ece=a("strong"),UPo=o("albert"),JPo=o(" \u2014 "),nD=a("a"),YPo=o("AlbertForQuestionAnswering"),KPo=o(" (ALBERT model)"),ZPo=l(),A6=a("li"),Cce=a("strong"),e$o=o("bart"),o$o=o(" \u2014 "),sD=a("a"),r$o=o("BartForQuestionAnswering"),t$o=o(" (BART model)"),a$o=l(),y6=a("li"),wce=a("strong"),n$o=o("bert"),s$o=o(" \u2014 "),lD=a("a"),l$o=o("BertForQuestionAnswering"),i$o=o(" (BERT model)"),d$o=l(),L6=a("li"),Ace=a("strong"),c$o=o("big_bird"),f$o=o(" \u2014 "),iD=a("a"),m$o=o("BigBirdForQuestionAnswering"),g$o=o(" (BigBird model)"),h$o=l(),x6=a("li"),yce=a("strong"),p$o=o("bigbird_pegasus"),_$o=o(" \u2014 "),dD=a("a"),u$o=o("BigBirdPegasusForQuestionAnswering"),b$o=o(" (BigBirdPegasus model)"),v$o=l(),k6=a("li"),Lce=a("strong"),F$o=o("camembert"),T$o=o(" \u2014 "),cD=a("a"),M$o=o("CamembertForQuestionAnswering"),E$o=o(" (CamemBERT model)"),C$o=l(),S6=a("li"),xce=a("strong"),w$o=o("canine"),A$o=o(" \u2014 "),fD=a("a"),y$o=o("CanineForQuestionAnswering"),L$o=o(" (Canine model)"),x$o=l(),R6=a("li"),kce=a("strong"),k$o=o("convbert"),S$o=o(" \u2014 "),mD=a("a"),R$o=o("ConvBertForQuestionAnswering"),B$o=o(" (ConvBERT model)"),P$o=l(),B6=a("li"),Sce=a("strong"),$$o=o("data2vec-text"),I$o=o(" \u2014 "),gD=a("a"),q$o=o("Data2VecTextForQuestionAnswering"),N$o=o(" (Data2VecText model)"),j$o=l(),P6=a("li"),Rce=a("strong"),D$o=o("deberta"),G$o=o(" \u2014 "),hD=a("a"),O$o=o("DebertaForQuestionAnswering"),V$o=o(" (DeBERTa model)"),X$o=l(),$6=a("li"),Bce=a("strong"),z$o=o("deberta-v2"),Q$o=o(" \u2014 "),pD=a("a"),W$o=o("DebertaV2ForQuestionAnswering"),H$o=o(" (DeBERTa-v2 model)"),U$o=l(),I6=a("li"),Pce=a("strong"),J$o=o("distilbert"),Y$o=o(" \u2014 "),_D=a("a"),K$o=o("DistilBertForQuestionAnswering"),Z$o=o(" (DistilBERT model)"),eIo=l(),q6=a("li"),$ce=a("strong"),oIo=o("electra"),rIo=o(" \u2014 "),uD=a("a"),tIo=o("ElectraForQuestionAnswering"),aIo=o(" (ELECTRA model)"),nIo=l(),N6=a("li"),Ice=a("strong"),sIo=o("flaubert"),lIo=o(" \u2014 "),bD=a("a"),iIo=o("FlaubertForQuestionAnsweringSimple"),dIo=o(" (FlauBERT model)"),cIo=l(),j6=a("li"),qce=a("strong"),fIo=o("fnet"),mIo=o(" \u2014 "),vD=a("a"),gIo=o("FNetForQuestionAnswering"),hIo=o(" (FNet model)"),pIo=l(),D6=a("li"),Nce=a("strong"),_Io=o("funnel"),uIo=o(" \u2014 "),FD=a("a"),bIo=o("FunnelForQuestionAnswering"),vIo=o(" (Funnel Transformer model)"),FIo=l(),G6=a("li"),jce=a("strong"),TIo=o("gptj"),MIo=o(" \u2014 "),TD=a("a"),EIo=o("GPTJForQuestionAnswering"),CIo=o(" (GPT-J model)"),wIo=l(),O6=a("li"),Dce=a("strong"),AIo=o("ibert"),yIo=o(" \u2014 "),MD=a("a"),LIo=o("IBertForQuestionAnswering"),xIo=o(" (I-BERT model)"),kIo=l(),V6=a("li"),Gce=a("strong"),SIo=o("layoutlmv2"),RIo=o(" \u2014 "),ED=a("a"),BIo=o("LayoutLMv2ForQuestionAnswering"),PIo=o(" (LayoutLMv2 model)"),$Io=l(),X6=a("li"),Oce=a("strong"),IIo=o("led"),qIo=o(" \u2014 "),CD=a("a"),NIo=o("LEDForQuestionAnswering"),jIo=o(" (LED model)"),DIo=l(),z6=a("li"),Vce=a("strong"),GIo=o("longformer"),OIo=o(" \u2014 "),wD=a("a"),VIo=o("LongformerForQuestionAnswering"),XIo=o(" (Longformer model)"),zIo=l(),Q6=a("li"),Xce=a("strong"),QIo=o("lxmert"),WIo=o(" \u2014 "),AD=a("a"),HIo=o("LxmertForQuestionAnswering"),UIo=o(" (LXMERT model)"),JIo=l(),W6=a("li"),zce=a("strong"),YIo=o("mbart"),KIo=o(" \u2014 "),yD=a("a"),ZIo=o("MBartForQuestionAnswering"),eqo=o(" (mBART model)"),oqo=l(),H6=a("li"),Qce=a("strong"),rqo=o("megatron-bert"),tqo=o(" \u2014 "),LD=a("a"),aqo=o("MegatronBertForQuestionAnswering"),nqo=o(" (MegatronBert model)"),sqo=l(),U6=a("li"),Wce=a("strong"),lqo=o("mobilebert"),iqo=o(" \u2014 "),xD=a("a"),dqo=o("MobileBertForQuestionAnswering"),cqo=o(" (MobileBERT model)"),fqo=l(),J6=a("li"),Hce=a("strong"),mqo=o("mpnet"),gqo=o(" \u2014 "),kD=a("a"),hqo=o("MPNetForQuestionAnswering"),pqo=o(" (MPNet model)"),_qo=l(),Y6=a("li"),Uce=a("strong"),uqo=o("nystromformer"),bqo=o(" \u2014 "),SD=a("a"),vqo=o("NystromformerForQuestionAnswering"),Fqo=o(" (Nystromformer model)"),Tqo=l(),K6=a("li"),Jce=a("strong"),Mqo=o("qdqbert"),Eqo=o(" \u2014 "),RD=a("a"),Cqo=o("QDQBertForQuestionAnswering"),wqo=o(" (QDQBert model)"),Aqo=l(),Z6=a("li"),Yce=a("strong"),yqo=o("reformer"),Lqo=o(" \u2014 "),BD=a("a"),xqo=o("ReformerForQuestionAnswering"),kqo=o(" (Reformer model)"),Sqo=l(),ev=a("li"),Kce=a("strong"),Rqo=o("rembert"),Bqo=o(" \u2014 "),PD=a("a"),Pqo=o("RemBertForQuestionAnswering"),$qo=o(" (RemBERT model)"),Iqo=l(),ov=a("li"),Zce=a("strong"),qqo=o("roberta"),Nqo=o(" \u2014 "),$D=a("a"),jqo=o("RobertaForQuestionAnswering"),Dqo=o(" (RoBERTa model)"),Gqo=l(),rv=a("li"),efe=a("strong"),Oqo=o("roformer"),Vqo=o(" \u2014 "),ID=a("a"),Xqo=o("RoFormerForQuestionAnswering"),zqo=o(" (RoFormer model)"),Qqo=l(),tv=a("li"),ofe=a("strong"),Wqo=o("splinter"),Hqo=o(" \u2014 "),qD=a("a"),Uqo=o("SplinterForQuestionAnswering"),Jqo=o(" (Splinter model)"),Yqo=l(),av=a("li"),rfe=a("strong"),Kqo=o("squeezebert"),Zqo=o(" \u2014 "),ND=a("a"),eNo=o("SqueezeBertForQuestionAnswering"),oNo=o(" (SqueezeBERT model)"),rNo=l(),nv=a("li"),tfe=a("strong"),tNo=o("xlm"),aNo=o(" \u2014 "),jD=a("a"),nNo=o("XLMForQuestionAnsweringSimple"),sNo=o(" (XLM model)"),lNo=l(),sv=a("li"),afe=a("strong"),iNo=o("xlm-roberta"),dNo=o(" \u2014 "),DD=a("a"),cNo=o("XLMRobertaForQuestionAnswering"),fNo=o(" (XLM-RoBERTa model)"),mNo=l(),lv=a("li"),nfe=a("strong"),gNo=o("xlm-roberta-xl"),hNo=o(" \u2014 "),GD=a("a"),pNo=o("XLMRobertaXLForQuestionAnswering"),_No=o(" (XLM-RoBERTa-XL model)"),uNo=l(),iv=a("li"),sfe=a("strong"),bNo=o("xlnet"),vNo=o(" \u2014 "),OD=a("a"),FNo=o("XLNetForQuestionAnsweringSimple"),TNo=o(" (XLNet model)"),MNo=l(),dv=a("li"),lfe=a("strong"),ENo=o("yoso"),CNo=o(" \u2014 "),VD=a("a"),wNo=o("YosoForQuestionAnswering"),ANo=o(" (YOSO model)"),yNo=l(),cv=a("p"),LNo=o("The model is set in evaluation mode by default using "),ife=a("code"),xNo=o("model.eval()"),kNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),SNo=o("model.train()"),RNo=l(),cfe=a("p"),BNo=o("Examples:"),PNo=l(),f(wC.$$.fragment),FBe=l(),xd=a("h2"),fv=a("a"),ffe=a("span"),f(AC.$$.fragment),$No=l(),mfe=a("span"),INo=o("AutoModelForTableQuestionAnswering"),TBe=l(),sr=a("div"),f(yC.$$.fragment),qNo=l(),kd=a("p"),NNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XD=a("a"),jNo=o("from_pretrained()"),DNo=o(" class method or the "),zD=a("a"),GNo=o("from_config()"),ONo=o(` class
method.`),VNo=l(),LC=a("p"),XNo=o("This class cannot be instantiated directly using "),gfe=a("code"),zNo=o("__init__()"),QNo=o(" (throws an error)."),WNo=l(),et=a("div"),f(xC.$$.fragment),HNo=l(),hfe=a("p"),UNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JNo=l(),Sd=a("p"),YNo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),KNo=o("not"),ZNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=a("a"),ejo=o("from_pretrained()"),ojo=o(" to load the model weights."),rjo=l(),_fe=a("p"),tjo=o("Examples:"),ajo=l(),f(kC.$$.fragment),njo=l(),We=a("div"),f(SC.$$.fragment),sjo=l(),ufe=a("p"),ljo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ijo=l(),en=a("p"),djo=o("The model class to instantiate is selected based on the "),bfe=a("code"),cjo=o("model_type"),fjo=o(` property of the config object (either
passed as an argument or loaded from `),vfe=a("code"),mjo=o("pretrained_model_name_or_path"),gjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=a("code"),hjo=o("pretrained_model_name_or_path"),pjo=o(":"),_jo=l(),Tfe=a("ul"),mv=a("li"),Mfe=a("strong"),ujo=o("tapas"),bjo=o(" \u2014 "),WD=a("a"),vjo=o("TapasForQuestionAnswering"),Fjo=o(" (TAPAS model)"),Tjo=l(),gv=a("p"),Mjo=o("The model is set in evaluation mode by default using "),Efe=a("code"),Ejo=o("model.eval()"),Cjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=a("code"),wjo=o("model.train()"),Ajo=l(),wfe=a("p"),yjo=o("Examples:"),Ljo=l(),f(RC.$$.fragment),MBe=l(),Rd=a("h2"),hv=a("a"),Afe=a("span"),f(BC.$$.fragment),xjo=l(),yfe=a("span"),kjo=o("AutoModelForImageClassification"),EBe=l(),lr=a("div"),f(PC.$$.fragment),Sjo=l(),Bd=a("p"),Rjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HD=a("a"),Bjo=o("from_pretrained()"),Pjo=o(" class method or the "),UD=a("a"),$jo=o("from_config()"),Ijo=o(` class
method.`),qjo=l(),$C=a("p"),Njo=o("This class cannot be instantiated directly using "),Lfe=a("code"),jjo=o("__init__()"),Djo=o(" (throws an error)."),Gjo=l(),ot=a("div"),f(IC.$$.fragment),Ojo=l(),xfe=a("p"),Vjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xjo=l(),Pd=a("p"),zjo=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),Qjo=o("not"),Wjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=a("a"),Hjo=o("from_pretrained()"),Ujo=o(" to load the model weights."),Jjo=l(),Sfe=a("p"),Yjo=o("Examples:"),Kjo=l(),f(qC.$$.fragment),Zjo=l(),He=a("div"),f(NC.$$.fragment),eDo=l(),Rfe=a("p"),oDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rDo=l(),on=a("p"),tDo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),aDo=o("model_type"),nDo=o(` property of the config object (either
passed as an argument or loaded from `),Pfe=a("code"),sDo=o("pretrained_model_name_or_path"),lDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=a("code"),iDo=o("pretrained_model_name_or_path"),dDo=o(":"),cDo=l(),de=a("ul"),pv=a("li"),Ife=a("strong"),fDo=o("beit"),mDo=o(" \u2014 "),YD=a("a"),gDo=o("BeitForImageClassification"),hDo=o(" (BEiT model)"),pDo=l(),_v=a("li"),qfe=a("strong"),_Do=o("convnext"),uDo=o(" \u2014 "),KD=a("a"),bDo=o("ConvNextForImageClassification"),vDo=o(" (ConvNext model)"),FDo=l(),uv=a("li"),Nfe=a("strong"),TDo=o("data2vec-vision"),MDo=o(" \u2014 "),ZD=a("a"),EDo=o("Data2VecVisionForImageClassification"),CDo=o(" (Data2VecVision model)"),wDo=l(),Vs=a("li"),jfe=a("strong"),ADo=o("deit"),yDo=o(" \u2014 "),eG=a("a"),LDo=o("DeiTForImageClassification"),xDo=o(" or "),oG=a("a"),kDo=o("DeiTForImageClassificationWithTeacher"),SDo=o(" (DeiT model)"),RDo=l(),bv=a("li"),Dfe=a("strong"),BDo=o("imagegpt"),PDo=o(" \u2014 "),rG=a("a"),$Do=o("ImageGPTForImageClassification"),IDo=o(" (ImageGPT model)"),qDo=l(),ma=a("li"),Gfe=a("strong"),NDo=o("perceiver"),jDo=o(" \u2014 "),tG=a("a"),DDo=o("PerceiverForImageClassificationLearned"),GDo=o(" or "),aG=a("a"),ODo=o("PerceiverForImageClassificationFourier"),VDo=o(" or "),nG=a("a"),XDo=o("PerceiverForImageClassificationConvProcessing"),zDo=o(" (Perceiver model)"),QDo=l(),vv=a("li"),Ofe=a("strong"),WDo=o("poolformer"),HDo=o(" \u2014 "),sG=a("a"),UDo=o("PoolFormerForImageClassification"),JDo=o(" (PoolFormer model)"),YDo=l(),Fv=a("li"),Vfe=a("strong"),KDo=o("regnet"),ZDo=o(" \u2014 "),lG=a("a"),eGo=o("RegNetForImageClassification"),oGo=o(" (RegNet model)"),rGo=l(),Tv=a("li"),Xfe=a("strong"),tGo=o("resnet"),aGo=o(" \u2014 "),iG=a("a"),nGo=o("ResNetForImageClassification"),sGo=o(" (ResNet model)"),lGo=l(),Mv=a("li"),zfe=a("strong"),iGo=o("segformer"),dGo=o(" \u2014 "),dG=a("a"),cGo=o("SegformerForImageClassification"),fGo=o(" (SegFormer model)"),mGo=l(),Ev=a("li"),Qfe=a("strong"),gGo=o("swin"),hGo=o(" \u2014 "),cG=a("a"),pGo=o("SwinForImageClassification"),_Go=o(" (Swin model)"),uGo=l(),Cv=a("li"),Wfe=a("strong"),bGo=o("van"),vGo=o(" \u2014 "),fG=a("a"),FGo=o("VanForImageClassification"),TGo=o(" (VAN model)"),MGo=l(),wv=a("li"),Hfe=a("strong"),EGo=o("vit"),CGo=o(" \u2014 "),mG=a("a"),wGo=o("ViTForImageClassification"),AGo=o(" (ViT model)"),yGo=l(),Av=a("p"),LGo=o("The model is set in evaluation mode by default using "),Ufe=a("code"),xGo=o("model.eval()"),kGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=a("code"),SGo=o("model.train()"),RGo=l(),Yfe=a("p"),BGo=o("Examples:"),PGo=l(),f(jC.$$.fragment),CBe=l(),$d=a("h2"),yv=a("a"),Kfe=a("span"),f(DC.$$.fragment),$Go=l(),Zfe=a("span"),IGo=o("AutoModelForVision2Seq"),wBe=l(),ir=a("div"),f(GC.$$.fragment),qGo=l(),Id=a("p"),NGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gG=a("a"),jGo=o("from_pretrained()"),DGo=o(" class method or the "),hG=a("a"),GGo=o("from_config()"),OGo=o(` class
method.`),VGo=l(),OC=a("p"),XGo=o("This class cannot be instantiated directly using "),eme=a("code"),zGo=o("__init__()"),QGo=o(" (throws an error)."),WGo=l(),rt=a("div"),f(VC.$$.fragment),HGo=l(),ome=a("p"),UGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JGo=l(),qd=a("p"),YGo=o(`Note:
Loading a model from its configuration file does `),rme=a("strong"),KGo=o("not"),ZGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=a("a"),eOo=o("from_pretrained()"),oOo=o(" to load the model weights."),rOo=l(),tme=a("p"),tOo=o("Examples:"),aOo=l(),f(XC.$$.fragment),nOo=l(),Ue=a("div"),f(zC.$$.fragment),sOo=l(),ame=a("p"),lOo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iOo=l(),rn=a("p"),dOo=o("The model class to instantiate is selected based on the "),nme=a("code"),cOo=o("model_type"),fOo=o(` property of the config object (either
passed as an argument or loaded from `),sme=a("code"),mOo=o("pretrained_model_name_or_path"),gOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=a("code"),hOo=o("pretrained_model_name_or_path"),pOo=o(":"),_Oo=l(),ime=a("ul"),Lv=a("li"),dme=a("strong"),uOo=o("vision-encoder-decoder"),bOo=o(" \u2014 "),_G=a("a"),vOo=o("VisionEncoderDecoderModel"),FOo=o(" (Vision Encoder decoder model)"),TOo=l(),xv=a("p"),MOo=o("The model is set in evaluation mode by default using "),cme=a("code"),EOo=o("model.eval()"),COo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),wOo=o("model.train()"),AOo=l(),mme=a("p"),yOo=o("Examples:"),LOo=l(),f(QC.$$.fragment),ABe=l(),Nd=a("h2"),kv=a("a"),gme=a("span"),f(WC.$$.fragment),xOo=l(),hme=a("span"),kOo=o("AutoModelForAudioClassification"),yBe=l(),dr=a("div"),f(HC.$$.fragment),SOo=l(),jd=a("p"),ROo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uG=a("a"),BOo=o("from_pretrained()"),POo=o(" class method or the "),bG=a("a"),$Oo=o("from_config()"),IOo=o(` class
method.`),qOo=l(),UC=a("p"),NOo=o("This class cannot be instantiated directly using "),pme=a("code"),jOo=o("__init__()"),DOo=o(" (throws an error)."),GOo=l(),tt=a("div"),f(JC.$$.fragment),OOo=l(),_me=a("p"),VOo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),XOo=l(),Dd=a("p"),zOo=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),QOo=o("not"),WOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=a("a"),HOo=o("from_pretrained()"),UOo=o(" to load the model weights."),JOo=l(),bme=a("p"),YOo=o("Examples:"),KOo=l(),f(YC.$$.fragment),ZOo=l(),Je=a("div"),f(KC.$$.fragment),eVo=l(),vme=a("p"),oVo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rVo=l(),tn=a("p"),tVo=o("The model class to instantiate is selected based on the "),Fme=a("code"),aVo=o("model_type"),nVo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),sVo=o("pretrained_model_name_or_path"),lVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),iVo=o("pretrained_model_name_or_path"),dVo=o(":"),cVo=l(),Se=a("ul"),Sv=a("li"),Eme=a("strong"),fVo=o("data2vec-audio"),mVo=o(" \u2014 "),FG=a("a"),gVo=o("Data2VecAudioForSequenceClassification"),hVo=o(" (Data2VecAudio model)"),pVo=l(),Rv=a("li"),Cme=a("strong"),_Vo=o("hubert"),uVo=o(" \u2014 "),TG=a("a"),bVo=o("HubertForSequenceClassification"),vVo=o(" (Hubert model)"),FVo=l(),Bv=a("li"),wme=a("strong"),TVo=o("sew"),MVo=o(" \u2014 "),MG=a("a"),EVo=o("SEWForSequenceClassification"),CVo=o(" (SEW model)"),wVo=l(),Pv=a("li"),Ame=a("strong"),AVo=o("sew-d"),yVo=o(" \u2014 "),EG=a("a"),LVo=o("SEWDForSequenceClassification"),xVo=o(" (SEW-D model)"),kVo=l(),$v=a("li"),yme=a("strong"),SVo=o("unispeech"),RVo=o(" \u2014 "),CG=a("a"),BVo=o("UniSpeechForSequenceClassification"),PVo=o(" (UniSpeech model)"),$Vo=l(),Iv=a("li"),Lme=a("strong"),IVo=o("unispeech-sat"),qVo=o(" \u2014 "),wG=a("a"),NVo=o("UniSpeechSatForSequenceClassification"),jVo=o(" (UniSpeechSat model)"),DVo=l(),qv=a("li"),xme=a("strong"),GVo=o("wav2vec2"),OVo=o(" \u2014 "),AG=a("a"),VVo=o("Wav2Vec2ForSequenceClassification"),XVo=o(" (Wav2Vec2 model)"),zVo=l(),Nv=a("li"),kme=a("strong"),QVo=o("wavlm"),WVo=o(" \u2014 "),yG=a("a"),HVo=o("WavLMForSequenceClassification"),UVo=o(" (WavLM model)"),JVo=l(),jv=a("p"),YVo=o("The model is set in evaluation mode by default using "),Sme=a("code"),KVo=o("model.eval()"),ZVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rme=a("code"),eXo=o("model.train()"),oXo=l(),Bme=a("p"),rXo=o("Examples:"),tXo=l(),f(ZC.$$.fragment),LBe=l(),Gd=a("h2"),Dv=a("a"),Pme=a("span"),f(ew.$$.fragment),aXo=l(),$me=a("span"),nXo=o("AutoModelForAudioFrameClassification"),xBe=l(),cr=a("div"),f(ow.$$.fragment),sXo=l(),Od=a("p"),lXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LG=a("a"),iXo=o("from_pretrained()"),dXo=o(" class method or the "),xG=a("a"),cXo=o("from_config()"),fXo=o(` class
method.`),mXo=l(),rw=a("p"),gXo=o("This class cannot be instantiated directly using "),Ime=a("code"),hXo=o("__init__()"),pXo=o(" (throws an error)."),_Xo=l(),at=a("div"),f(tw.$$.fragment),uXo=l(),qme=a("p"),bXo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vXo=l(),Vd=a("p"),FXo=o(`Note:
Loading a model from its configuration file does `),Nme=a("strong"),TXo=o("not"),MXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=a("a"),EXo=o("from_pretrained()"),CXo=o(" to load the model weights."),wXo=l(),jme=a("p"),AXo=o("Examples:"),yXo=l(),f(aw.$$.fragment),LXo=l(),Ye=a("div"),f(nw.$$.fragment),xXo=l(),Dme=a("p"),kXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),SXo=l(),an=a("p"),RXo=o("The model class to instantiate is selected based on the "),Gme=a("code"),BXo=o("model_type"),PXo=o(` property of the config object (either
passed as an argument or loaded from `),Ome=a("code"),$Xo=o("pretrained_model_name_or_path"),IXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=a("code"),qXo=o("pretrained_model_name_or_path"),NXo=o(":"),jXo=l(),nn=a("ul"),Gv=a("li"),Xme=a("strong"),DXo=o("data2vec-audio"),GXo=o(" \u2014 "),SG=a("a"),OXo=o("Data2VecAudioForAudioFrameClassification"),VXo=o(" (Data2VecAudio model)"),XXo=l(),Ov=a("li"),zme=a("strong"),zXo=o("unispeech-sat"),QXo=o(" \u2014 "),RG=a("a"),WXo=o("UniSpeechSatForAudioFrameClassification"),HXo=o(" (UniSpeechSat model)"),UXo=l(),Vv=a("li"),Qme=a("strong"),JXo=o("wav2vec2"),YXo=o(" \u2014 "),BG=a("a"),KXo=o("Wav2Vec2ForAudioFrameClassification"),ZXo=o(" (Wav2Vec2 model)"),ezo=l(),Xv=a("li"),Wme=a("strong"),ozo=o("wavlm"),rzo=o(" \u2014 "),PG=a("a"),tzo=o("WavLMForAudioFrameClassification"),azo=o(" (WavLM model)"),nzo=l(),zv=a("p"),szo=o("The model is set in evaluation mode by default using "),Hme=a("code"),lzo=o("model.eval()"),izo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),dzo=o("model.train()"),czo=l(),Jme=a("p"),fzo=o("Examples:"),mzo=l(),f(sw.$$.fragment),kBe=l(),Xd=a("h2"),Qv=a("a"),Yme=a("span"),f(lw.$$.fragment),gzo=l(),Kme=a("span"),hzo=o("AutoModelForCTC"),SBe=l(),fr=a("div"),f(iw.$$.fragment),pzo=l(),zd=a("p"),_zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$G=a("a"),uzo=o("from_pretrained()"),bzo=o(" class method or the "),IG=a("a"),vzo=o("from_config()"),Fzo=o(` class
method.`),Tzo=l(),dw=a("p"),Mzo=o("This class cannot be instantiated directly using "),Zme=a("code"),Ezo=o("__init__()"),Czo=o(" (throws an error)."),wzo=l(),nt=a("div"),f(cw.$$.fragment),Azo=l(),ege=a("p"),yzo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Lzo=l(),Qd=a("p"),xzo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),kzo=o("not"),Szo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=a("a"),Rzo=o("from_pretrained()"),Bzo=o(" to load the model weights."),Pzo=l(),rge=a("p"),$zo=o("Examples:"),Izo=l(),f(fw.$$.fragment),qzo=l(),Ke=a("div"),f(mw.$$.fragment),Nzo=l(),tge=a("p"),jzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Dzo=l(),sn=a("p"),Gzo=o("The model class to instantiate is selected based on the "),age=a("code"),Ozo=o("model_type"),Vzo=o(` property of the config object (either
passed as an argument or loaded from `),nge=a("code"),Xzo=o("pretrained_model_name_or_path"),zzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=a("code"),Qzo=o("pretrained_model_name_or_path"),Wzo=o(":"),Hzo=l(),Re=a("ul"),Wv=a("li"),lge=a("strong"),Uzo=o("data2vec-audio"),Jzo=o(" \u2014 "),NG=a("a"),Yzo=o("Data2VecAudioForCTC"),Kzo=o(" (Data2VecAudio model)"),Zzo=l(),Hv=a("li"),ige=a("strong"),eQo=o("hubert"),oQo=o(" \u2014 "),jG=a("a"),rQo=o("HubertForCTC"),tQo=o(" (Hubert model)"),aQo=l(),Uv=a("li"),dge=a("strong"),nQo=o("sew"),sQo=o(" \u2014 "),DG=a("a"),lQo=o("SEWForCTC"),iQo=o(" (SEW model)"),dQo=l(),Jv=a("li"),cge=a("strong"),cQo=o("sew-d"),fQo=o(" \u2014 "),GG=a("a"),mQo=o("SEWDForCTC"),gQo=o(" (SEW-D model)"),hQo=l(),Yv=a("li"),fge=a("strong"),pQo=o("unispeech"),_Qo=o(" \u2014 "),OG=a("a"),uQo=o("UniSpeechForCTC"),bQo=o(" (UniSpeech model)"),vQo=l(),Kv=a("li"),mge=a("strong"),FQo=o("unispeech-sat"),TQo=o(" \u2014 "),VG=a("a"),MQo=o("UniSpeechSatForCTC"),EQo=o(" (UniSpeechSat model)"),CQo=l(),Zv=a("li"),gge=a("strong"),wQo=o("wav2vec2"),AQo=o(" \u2014 "),XG=a("a"),yQo=o("Wav2Vec2ForCTC"),LQo=o(" (Wav2Vec2 model)"),xQo=l(),eF=a("li"),hge=a("strong"),kQo=o("wavlm"),SQo=o(" \u2014 "),zG=a("a"),RQo=o("WavLMForCTC"),BQo=o(" (WavLM model)"),PQo=l(),oF=a("p"),$Qo=o("The model is set in evaluation mode by default using "),pge=a("code"),IQo=o("model.eval()"),qQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ge=a("code"),NQo=o("model.train()"),jQo=l(),uge=a("p"),DQo=o("Examples:"),GQo=l(),f(gw.$$.fragment),RBe=l(),Wd=a("h2"),rF=a("a"),bge=a("span"),f(hw.$$.fragment),OQo=l(),vge=a("span"),VQo=o("AutoModelForSpeechSeq2Seq"),BBe=l(),mr=a("div"),f(pw.$$.fragment),XQo=l(),Hd=a("p"),zQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QG=a("a"),QQo=o("from_pretrained()"),WQo=o(" class method or the "),WG=a("a"),HQo=o("from_config()"),UQo=o(` class
method.`),JQo=l(),_w=a("p"),YQo=o("This class cannot be instantiated directly using "),Fge=a("code"),KQo=o("__init__()"),ZQo=o(" (throws an error)."),eWo=l(),st=a("div"),f(uw.$$.fragment),oWo=l(),Tge=a("p"),rWo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tWo=l(),Ud=a("p"),aWo=o(`Note:
Loading a model from its configuration file does `),Mge=a("strong"),nWo=o("not"),sWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),lWo=o("from_pretrained()"),iWo=o(" to load the model weights."),dWo=l(),Ege=a("p"),cWo=o("Examples:"),fWo=l(),f(bw.$$.fragment),mWo=l(),Ze=a("div"),f(vw.$$.fragment),gWo=l(),Cge=a("p"),hWo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pWo=l(),ln=a("p"),_Wo=o("The model class to instantiate is selected based on the "),wge=a("code"),uWo=o("model_type"),bWo=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),vWo=o("pretrained_model_name_or_path"),FWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=a("code"),TWo=o("pretrained_model_name_or_path"),MWo=o(":"),EWo=l(),Fw=a("ul"),tF=a("li"),Lge=a("strong"),CWo=o("speech-encoder-decoder"),wWo=o(" \u2014 "),UG=a("a"),AWo=o("SpeechEncoderDecoderModel"),yWo=o(" (Speech Encoder decoder model)"),LWo=l(),aF=a("li"),xge=a("strong"),xWo=o("speech_to_text"),kWo=o(" \u2014 "),JG=a("a"),SWo=o("Speech2TextForConditionalGeneration"),RWo=o(" (Speech2Text model)"),BWo=l(),nF=a("p"),PWo=o("The model is set in evaluation mode by default using "),kge=a("code"),$Wo=o("model.eval()"),IWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),qWo=o("model.train()"),NWo=l(),Rge=a("p"),jWo=o("Examples:"),DWo=l(),f(Tw.$$.fragment),PBe=l(),Jd=a("h2"),sF=a("a"),Bge=a("span"),f(Mw.$$.fragment),GWo=l(),Pge=a("span"),OWo=o("AutoModelForAudioXVector"),$Be=l(),gr=a("div"),f(Ew.$$.fragment),VWo=l(),Yd=a("p"),XWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YG=a("a"),zWo=o("from_pretrained()"),QWo=o(" class method or the "),KG=a("a"),WWo=o("from_config()"),HWo=o(` class
method.`),UWo=l(),Cw=a("p"),JWo=o("This class cannot be instantiated directly using "),$ge=a("code"),YWo=o("__init__()"),KWo=o(" (throws an error)."),ZWo=l(),lt=a("div"),f(ww.$$.fragment),eHo=l(),Ige=a("p"),oHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),rHo=l(),Kd=a("p"),tHo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),aHo=o("not"),nHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=a("a"),sHo=o("from_pretrained()"),lHo=o(" to load the model weights."),iHo=l(),Nge=a("p"),dHo=o("Examples:"),cHo=l(),f(Aw.$$.fragment),fHo=l(),eo=a("div"),f(yw.$$.fragment),mHo=l(),jge=a("p"),gHo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hHo=l(),dn=a("p"),pHo=o("The model class to instantiate is selected based on the "),Dge=a("code"),_Ho=o("model_type"),uHo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),bHo=o("pretrained_model_name_or_path"),vHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),FHo=o("pretrained_model_name_or_path"),THo=o(":"),MHo=l(),cn=a("ul"),lF=a("li"),Vge=a("strong"),EHo=o("data2vec-audio"),CHo=o(" \u2014 "),eO=a("a"),wHo=o("Data2VecAudioForXVector"),AHo=o(" (Data2VecAudio model)"),yHo=l(),iF=a("li"),Xge=a("strong"),LHo=o("unispeech-sat"),xHo=o(" \u2014 "),oO=a("a"),kHo=o("UniSpeechSatForXVector"),SHo=o(" (UniSpeechSat model)"),RHo=l(),dF=a("li"),zge=a("strong"),BHo=o("wav2vec2"),PHo=o(" \u2014 "),rO=a("a"),$Ho=o("Wav2Vec2ForXVector"),IHo=o(" (Wav2Vec2 model)"),qHo=l(),cF=a("li"),Qge=a("strong"),NHo=o("wavlm"),jHo=o(" \u2014 "),tO=a("a"),DHo=o("WavLMForXVector"),GHo=o(" (WavLM model)"),OHo=l(),fF=a("p"),VHo=o("The model is set in evaluation mode by default using "),Wge=a("code"),XHo=o("model.eval()"),zHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),QHo=o("model.train()"),WHo=l(),Uge=a("p"),HHo=o("Examples:"),UHo=l(),f(Lw.$$.fragment),IBe=l(),Zd=a("h2"),mF=a("a"),Jge=a("span"),f(xw.$$.fragment),JHo=l(),Yge=a("span"),YHo=o("AutoModelForMaskedImageModeling"),qBe=l(),hr=a("div"),f(kw.$$.fragment),KHo=l(),ec=a("p"),ZHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aO=a("a"),eUo=o("from_pretrained()"),oUo=o(" class method or the "),nO=a("a"),rUo=o("from_config()"),tUo=o(` class
method.`),aUo=l(),Sw=a("p"),nUo=o("This class cannot be instantiated directly using "),Kge=a("code"),sUo=o("__init__()"),lUo=o(" (throws an error)."),iUo=l(),it=a("div"),f(Rw.$$.fragment),dUo=l(),Zge=a("p"),cUo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fUo=l(),oc=a("p"),mUo=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),gUo=o("not"),hUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),pUo=o("from_pretrained()"),_Uo=o(" to load the model weights."),uUo=l(),ohe=a("p"),bUo=o("Examples:"),vUo=l(),f(Bw.$$.fragment),FUo=l(),oo=a("div"),f(Pw.$$.fragment),TUo=l(),rhe=a("p"),MUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),EUo=l(),fn=a("p"),CUo=o("The model class to instantiate is selected based on the "),the=a("code"),wUo=o("model_type"),AUo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),yUo=o("pretrained_model_name_or_path"),LUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),xUo=o("pretrained_model_name_or_path"),kUo=o(":"),SUo=l(),rc=a("ul"),gF=a("li"),she=a("strong"),RUo=o("deit"),BUo=o(" \u2014 "),lO=a("a"),PUo=o("DeiTForMaskedImageModeling"),$Uo=o(" (DeiT model)"),IUo=l(),hF=a("li"),lhe=a("strong"),qUo=o("swin"),NUo=o(" \u2014 "),iO=a("a"),jUo=o("SwinForMaskedImageModeling"),DUo=o(" (Swin model)"),GUo=l(),pF=a("li"),ihe=a("strong"),OUo=o("vit"),VUo=o(" \u2014 "),dO=a("a"),XUo=o("ViTForMaskedImageModeling"),zUo=o(" (ViT model)"),QUo=l(),_F=a("p"),WUo=o("The model is set in evaluation mode by default using "),dhe=a("code"),HUo=o("model.eval()"),UUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=a("code"),JUo=o("model.train()"),YUo=l(),fhe=a("p"),KUo=o("Examples:"),ZUo=l(),f($w.$$.fragment),NBe=l(),tc=a("h2"),uF=a("a"),mhe=a("span"),f(Iw.$$.fragment),eJo=l(),ghe=a("span"),oJo=o("AutoModelForObjectDetection"),jBe=l(),pr=a("div"),f(qw.$$.fragment),rJo=l(),ac=a("p"),tJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),cO=a("a"),aJo=o("from_pretrained()"),nJo=o(" class method or the "),fO=a("a"),sJo=o("from_config()"),lJo=o(` class
method.`),iJo=l(),Nw=a("p"),dJo=o("This class cannot be instantiated directly using "),hhe=a("code"),cJo=o("__init__()"),fJo=o(" (throws an error)."),mJo=l(),dt=a("div"),f(jw.$$.fragment),gJo=l(),phe=a("p"),hJo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),pJo=l(),nc=a("p"),_Jo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),uJo=o("not"),bJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),vJo=o("from_pretrained()"),FJo=o(" to load the model weights."),TJo=l(),uhe=a("p"),MJo=o("Examples:"),EJo=l(),f(Dw.$$.fragment),CJo=l(),ro=a("div"),f(Gw.$$.fragment),wJo=l(),bhe=a("p"),AJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),yJo=l(),mn=a("p"),LJo=o("The model class to instantiate is selected based on the "),vhe=a("code"),xJo=o("model_type"),kJo=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),SJo=o("pretrained_model_name_or_path"),RJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=a("code"),BJo=o("pretrained_model_name_or_path"),PJo=o(":"),$Jo=l(),Mhe=a("ul"),bF=a("li"),Ehe=a("strong"),IJo=o("detr"),qJo=o(" \u2014 "),gO=a("a"),NJo=o("DetrForObjectDetection"),jJo=o(" (DETR model)"),DJo=l(),vF=a("p"),GJo=o("The model is set in evaluation mode by default using "),Che=a("code"),OJo=o("model.eval()"),VJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=a("code"),XJo=o("model.train()"),zJo=l(),Ahe=a("p"),QJo=o("Examples:"),WJo=l(),f(Ow.$$.fragment),DBe=l(),sc=a("h2"),FF=a("a"),yhe=a("span"),f(Vw.$$.fragment),HJo=l(),Lhe=a("span"),UJo=o("AutoModelForImageSegmentation"),GBe=l(),_r=a("div"),f(Xw.$$.fragment),JJo=l(),lc=a("p"),YJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),hO=a("a"),KJo=o("from_pretrained()"),ZJo=o(" class method or the "),pO=a("a"),eYo=o("from_config()"),oYo=o(` class
method.`),rYo=l(),zw=a("p"),tYo=o("This class cannot be instantiated directly using "),xhe=a("code"),aYo=o("__init__()"),nYo=o(" (throws an error)."),sYo=l(),ct=a("div"),f(Qw.$$.fragment),lYo=l(),khe=a("p"),iYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),dYo=l(),ic=a("p"),cYo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),fYo=o("not"),mYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),gYo=o("from_pretrained()"),hYo=o(" to load the model weights."),pYo=l(),Rhe=a("p"),_Yo=o("Examples:"),uYo=l(),f(Ww.$$.fragment),bYo=l(),to=a("div"),f(Hw.$$.fragment),vYo=l(),Bhe=a("p"),FYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),TYo=l(),gn=a("p"),MYo=o("The model class to instantiate is selected based on the "),Phe=a("code"),EYo=o("model_type"),CYo=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),wYo=o("pretrained_model_name_or_path"),AYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),yYo=o("pretrained_model_name_or_path"),LYo=o(":"),xYo=l(),qhe=a("ul"),TF=a("li"),Nhe=a("strong"),kYo=o("detr"),SYo=o(" \u2014 "),uO=a("a"),RYo=o("DetrForSegmentation"),BYo=o(" (DETR model)"),PYo=l(),MF=a("p"),$Yo=o("The model is set in evaluation mode by default using "),jhe=a("code"),IYo=o("model.eval()"),qYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),NYo=o("model.train()"),jYo=l(),Ghe=a("p"),DYo=o("Examples:"),GYo=l(),f(Uw.$$.fragment),OBe=l(),dc=a("h2"),EF=a("a"),Ohe=a("span"),f(Jw.$$.fragment),OYo=l(),Vhe=a("span"),VYo=o("AutoModelForSemanticSegmentation"),VBe=l(),ur=a("div"),f(Yw.$$.fragment),XYo=l(),cc=a("p"),zYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),bO=a("a"),QYo=o("from_pretrained()"),WYo=o(" class method or the "),vO=a("a"),HYo=o("from_config()"),UYo=o(` class
method.`),JYo=l(),Kw=a("p"),YYo=o("This class cannot be instantiated directly using "),Xhe=a("code"),KYo=o("__init__()"),ZYo=o(" (throws an error)."),eKo=l(),ft=a("div"),f(Zw.$$.fragment),oKo=l(),zhe=a("p"),rKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tKo=l(),fc=a("p"),aKo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),nKo=o("not"),sKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),lKo=o("from_pretrained()"),iKo=o(" to load the model weights."),dKo=l(),Whe=a("p"),cKo=o("Examples:"),fKo=l(),f(eA.$$.fragment),mKo=l(),ao=a("div"),f(oA.$$.fragment),gKo=l(),Hhe=a("p"),hKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),pKo=l(),hn=a("p"),_Ko=o("The model class to instantiate is selected based on the "),Uhe=a("code"),uKo=o("model_type"),bKo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),vKo=o("pretrained_model_name_or_path"),FKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),TKo=o("pretrained_model_name_or_path"),MKo=o(":"),EKo=l(),pn=a("ul"),CF=a("li"),Khe=a("strong"),CKo=o("beit"),wKo=o(" \u2014 "),TO=a("a"),AKo=o("BeitForSemanticSegmentation"),yKo=o(" (BEiT model)"),LKo=l(),wF=a("li"),Zhe=a("strong"),xKo=o("data2vec-vision"),kKo=o(" \u2014 "),MO=a("a"),SKo=o("Data2VecVisionForSemanticSegmentation"),RKo=o(" (Data2VecVision model)"),BKo=l(),AF=a("li"),epe=a("strong"),PKo=o("dpt"),$Ko=o(" \u2014 "),EO=a("a"),IKo=o("DPTForSemanticSegmentation"),qKo=o(" (DPT model)"),NKo=l(),yF=a("li"),ope=a("strong"),jKo=o("segformer"),DKo=o(" \u2014 "),CO=a("a"),GKo=o("SegformerForSemanticSegmentation"),OKo=o(" (SegFormer model)"),VKo=l(),LF=a("p"),XKo=o("The model is set in evaluation mode by default using "),rpe=a("code"),zKo=o("model.eval()"),QKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),WKo=o("model.train()"),HKo=l(),ape=a("p"),UKo=o("Examples:"),JKo=l(),f(rA.$$.fragment),XBe=l(),mc=a("h2"),xF=a("a"),npe=a("span"),f(tA.$$.fragment),YKo=l(),spe=a("span"),KKo=o("AutoModelForInstanceSegmentation"),zBe=l(),br=a("div"),f(aA.$$.fragment),ZKo=l(),gc=a("p"),eZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),wO=a("a"),oZo=o("from_pretrained()"),rZo=o(" class method or the "),AO=a("a"),tZo=o("from_config()"),aZo=o(` class
method.`),nZo=l(),nA=a("p"),sZo=o("This class cannot be instantiated directly using "),lpe=a("code"),lZo=o("__init__()"),iZo=o(" (throws an error)."),dZo=l(),mt=a("div"),f(sA.$$.fragment),cZo=l(),ipe=a("p"),fZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mZo=l(),hc=a("p"),gZo=o(`Note:
Loading a model from its configuration file does `),dpe=a("strong"),hZo=o("not"),pZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),_Zo=o("from_pretrained()"),uZo=o(" to load the model weights."),bZo=l(),cpe=a("p"),vZo=o("Examples:"),FZo=l(),f(lA.$$.fragment),TZo=l(),no=a("div"),f(iA.$$.fragment),MZo=l(),fpe=a("p"),EZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),CZo=l(),_n=a("p"),wZo=o("The model class to instantiate is selected based on the "),mpe=a("code"),AZo=o("model_type"),yZo=o(` property of the config object (either
passed as an argument or loaded from `),gpe=a("code"),LZo=o("pretrained_model_name_or_path"),xZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=a("code"),kZo=o("pretrained_model_name_or_path"),SZo=o(":"),RZo=l(),ppe=a("ul"),kF=a("li"),_pe=a("strong"),BZo=o("maskformer"),PZo=o(" \u2014 "),LO=a("a"),$Zo=o("MaskFormerForInstanceSegmentation"),IZo=o(" (MaskFormer model)"),qZo=l(),SF=a("p"),NZo=o("The model is set in evaluation mode by default using "),upe=a("code"),jZo=o("model.eval()"),DZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),GZo=o("model.train()"),OZo=l(),vpe=a("p"),VZo=o("Examples:"),XZo=l(),f(dA.$$.fragment),QBe=l(),pc=a("h2"),RF=a("a"),Fpe=a("span"),f(cA.$$.fragment),zZo=l(),Tpe=a("span"),QZo=o("TFAutoModel"),WBe=l(),vr=a("div"),f(fA.$$.fragment),WZo=l(),_c=a("p"),HZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xO=a("a"),UZo=o("from_pretrained()"),JZo=o(" class method or the "),kO=a("a"),YZo=o("from_config()"),KZo=o(` class
method.`),ZZo=l(),mA=a("p"),eer=o("This class cannot be instantiated directly using "),Mpe=a("code"),oer=o("__init__()"),rer=o(" (throws an error)."),ter=l(),gt=a("div"),f(gA.$$.fragment),aer=l(),Epe=a("p"),ner=o("Instantiates one of the base model classes of the library from a configuration."),ser=l(),uc=a("p"),ler=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),ier=o("not"),der=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SO=a("a"),cer=o("from_pretrained()"),fer=o(" to load the model weights."),mer=l(),wpe=a("p"),ger=o("Examples:"),her=l(),f(hA.$$.fragment),per=l(),ho=a("div"),f(pA.$$.fragment),_er=l(),Ape=a("p"),uer=o("Instantiate one of the base model classes of the library from a pretrained model."),ber=l(),un=a("p"),ver=o("The model class to instantiate is selected based on the "),ype=a("code"),Fer=o("model_type"),Ter=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),Mer=o("pretrained_model_name_or_path"),Eer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),Cer=o("pretrained_model_name_or_path"),wer=o(":"),Aer=l(),x=a("ul"),BF=a("li"),kpe=a("strong"),yer=o("albert"),Ler=o(" \u2014 "),RO=a("a"),xer=o("TFAlbertModel"),ker=o(" (ALBERT model)"),Ser=l(),PF=a("li"),Spe=a("strong"),Rer=o("bart"),Ber=o(" \u2014 "),BO=a("a"),Per=o("TFBartModel"),$er=o(" (BART model)"),Ier=l(),$F=a("li"),Rpe=a("strong"),qer=o("bert"),Ner=o(" \u2014 "),PO=a("a"),jer=o("TFBertModel"),Der=o(" (BERT model)"),Ger=l(),IF=a("li"),Bpe=a("strong"),Oer=o("blenderbot"),Ver=o(" \u2014 "),$O=a("a"),Xer=o("TFBlenderbotModel"),zer=o(" (Blenderbot model)"),Qer=l(),qF=a("li"),Ppe=a("strong"),Wer=o("blenderbot-small"),Her=o(" \u2014 "),IO=a("a"),Uer=o("TFBlenderbotSmallModel"),Jer=o(" (BlenderbotSmall model)"),Yer=l(),NF=a("li"),$pe=a("strong"),Ker=o("camembert"),Zer=o(" \u2014 "),qO=a("a"),eor=o("TFCamembertModel"),oor=o(" (CamemBERT model)"),ror=l(),jF=a("li"),Ipe=a("strong"),tor=o("clip"),aor=o(" \u2014 "),NO=a("a"),nor=o("TFCLIPModel"),sor=o(" (CLIP model)"),lor=l(),DF=a("li"),qpe=a("strong"),ior=o("convbert"),dor=o(" \u2014 "),jO=a("a"),cor=o("TFConvBertModel"),mor=o(" (ConvBERT model)"),gor=l(),GF=a("li"),Npe=a("strong"),hor=o("convnext"),por=o(" \u2014 "),DO=a("a"),_or=o("TFConvNextModel"),uor=o(" (ConvNext model)"),bor=l(),OF=a("li"),jpe=a("strong"),vor=o("ctrl"),For=o(" \u2014 "),GO=a("a"),Tor=o("TFCTRLModel"),Mor=o(" (CTRL model)"),Eor=l(),VF=a("li"),Dpe=a("strong"),Cor=o("deberta"),wor=o(" \u2014 "),OO=a("a"),Aor=o("TFDebertaModel"),yor=o(" (DeBERTa model)"),Lor=l(),XF=a("li"),Gpe=a("strong"),xor=o("deberta-v2"),kor=o(" \u2014 "),VO=a("a"),Sor=o("TFDebertaV2Model"),Ror=o(" (DeBERTa-v2 model)"),Bor=l(),zF=a("li"),Ope=a("strong"),Por=o("distilbert"),$or=o(" \u2014 "),XO=a("a"),Ior=o("TFDistilBertModel"),qor=o(" (DistilBERT model)"),Nor=l(),QF=a("li"),Vpe=a("strong"),jor=o("dpr"),Dor=o(" \u2014 "),zO=a("a"),Gor=o("TFDPRQuestionEncoder"),Oor=o(" (DPR model)"),Vor=l(),WF=a("li"),Xpe=a("strong"),Xor=o("electra"),zor=o(" \u2014 "),QO=a("a"),Qor=o("TFElectraModel"),Wor=o(" (ELECTRA model)"),Hor=l(),HF=a("li"),zpe=a("strong"),Uor=o("flaubert"),Jor=o(" \u2014 "),WO=a("a"),Yor=o("TFFlaubertModel"),Kor=o(" (FlauBERT model)"),Zor=l(),Xs=a("li"),Qpe=a("strong"),err=o("funnel"),orr=o(" \u2014 "),HO=a("a"),rrr=o("TFFunnelModel"),trr=o(" or "),UO=a("a"),arr=o("TFFunnelBaseModel"),nrr=o(" (Funnel Transformer model)"),srr=l(),UF=a("li"),Wpe=a("strong"),lrr=o("gpt2"),irr=o(" \u2014 "),JO=a("a"),drr=o("TFGPT2Model"),crr=o(" (OpenAI GPT-2 model)"),frr=l(),JF=a("li"),Hpe=a("strong"),mrr=o("gptj"),grr=o(" \u2014 "),YO=a("a"),hrr=o("TFGPTJModel"),prr=o(" (GPT-J model)"),_rr=l(),YF=a("li"),Upe=a("strong"),urr=o("hubert"),brr=o(" \u2014 "),KO=a("a"),vrr=o("TFHubertModel"),Frr=o(" (Hubert model)"),Trr=l(),KF=a("li"),Jpe=a("strong"),Mrr=o("layoutlm"),Err=o(" \u2014 "),ZO=a("a"),Crr=o("TFLayoutLMModel"),wrr=o(" (LayoutLM model)"),Arr=l(),ZF=a("li"),Ype=a("strong"),yrr=o("led"),Lrr=o(" \u2014 "),eV=a("a"),xrr=o("TFLEDModel"),krr=o(" (LED model)"),Srr=l(),eT=a("li"),Kpe=a("strong"),Rrr=o("longformer"),Brr=o(" \u2014 "),oV=a("a"),Prr=o("TFLongformerModel"),$rr=o(" (Longformer model)"),Irr=l(),oT=a("li"),Zpe=a("strong"),qrr=o("lxmert"),Nrr=o(" \u2014 "),rV=a("a"),jrr=o("TFLxmertModel"),Drr=o(" (LXMERT model)"),Grr=l(),rT=a("li"),e_e=a("strong"),Orr=o("marian"),Vrr=o(" \u2014 "),tV=a("a"),Xrr=o("TFMarianModel"),zrr=o(" (Marian model)"),Qrr=l(),tT=a("li"),o_e=a("strong"),Wrr=o("mbart"),Hrr=o(" \u2014 "),aV=a("a"),Urr=o("TFMBartModel"),Jrr=o(" (mBART model)"),Yrr=l(),aT=a("li"),r_e=a("strong"),Krr=o("mobilebert"),Zrr=o(" \u2014 "),nV=a("a"),etr=o("TFMobileBertModel"),otr=o(" (MobileBERT model)"),rtr=l(),nT=a("li"),t_e=a("strong"),ttr=o("mpnet"),atr=o(" \u2014 "),sV=a("a"),ntr=o("TFMPNetModel"),str=o(" (MPNet model)"),ltr=l(),sT=a("li"),a_e=a("strong"),itr=o("mt5"),dtr=o(" \u2014 "),lV=a("a"),ctr=o("TFMT5Model"),ftr=o(" (mT5 model)"),mtr=l(),lT=a("li"),n_e=a("strong"),gtr=o("openai-gpt"),htr=o(" \u2014 "),iV=a("a"),ptr=o("TFOpenAIGPTModel"),_tr=o(" (OpenAI GPT model)"),utr=l(),iT=a("li"),s_e=a("strong"),btr=o("pegasus"),vtr=o(" \u2014 "),dV=a("a"),Ftr=o("TFPegasusModel"),Ttr=o(" (Pegasus model)"),Mtr=l(),dT=a("li"),l_e=a("strong"),Etr=o("rembert"),Ctr=o(" \u2014 "),cV=a("a"),wtr=o("TFRemBertModel"),Atr=o(" (RemBERT model)"),ytr=l(),cT=a("li"),i_e=a("strong"),Ltr=o("roberta"),xtr=o(" \u2014 "),fV=a("a"),ktr=o("TFRobertaModel"),Str=o(" (RoBERTa model)"),Rtr=l(),fT=a("li"),d_e=a("strong"),Btr=o("roformer"),Ptr=o(" \u2014 "),mV=a("a"),$tr=o("TFRoFormerModel"),Itr=o(" (RoFormer model)"),qtr=l(),mT=a("li"),c_e=a("strong"),Ntr=o("speech_to_text"),jtr=o(" \u2014 "),gV=a("a"),Dtr=o("TFSpeech2TextModel"),Gtr=o(" (Speech2Text model)"),Otr=l(),gT=a("li"),f_e=a("strong"),Vtr=o("t5"),Xtr=o(" \u2014 "),hV=a("a"),ztr=o("TFT5Model"),Qtr=o(" (T5 model)"),Wtr=l(),hT=a("li"),m_e=a("strong"),Htr=o("tapas"),Utr=o(" \u2014 "),pV=a("a"),Jtr=o("TFTapasModel"),Ytr=o(" (TAPAS model)"),Ktr=l(),pT=a("li"),g_e=a("strong"),Ztr=o("transfo-xl"),ear=o(" \u2014 "),_V=a("a"),oar=o("TFTransfoXLModel"),rar=o(" (Transformer-XL model)"),tar=l(),_T=a("li"),h_e=a("strong"),aar=o("vit"),nar=o(" \u2014 "),uV=a("a"),sar=o("TFViTModel"),lar=o(" (ViT model)"),iar=l(),uT=a("li"),p_e=a("strong"),dar=o("vit_mae"),car=o(" \u2014 "),bV=a("a"),far=o("TFViTMAEModel"),mar=o(" (ViTMAE model)"),gar=l(),bT=a("li"),__e=a("strong"),har=o("wav2vec2"),par=o(" \u2014 "),vV=a("a"),_ar=o("TFWav2Vec2Model"),uar=o(" (Wav2Vec2 model)"),bar=l(),vT=a("li"),u_e=a("strong"),Far=o("xlm"),Tar=o(" \u2014 "),FV=a("a"),Mar=o("TFXLMModel"),Ear=o(" (XLM model)"),Car=l(),FT=a("li"),b_e=a("strong"),war=o("xlm-roberta"),Aar=o(" \u2014 "),TV=a("a"),yar=o("TFXLMRobertaModel"),Lar=o(" (XLM-RoBERTa model)"),xar=l(),TT=a("li"),v_e=a("strong"),kar=o("xlnet"),Sar=o(" \u2014 "),MV=a("a"),Rar=o("TFXLNetModel"),Bar=o(" (XLNet model)"),Par=l(),F_e=a("p"),$ar=o("Examples:"),Iar=l(),f(_A.$$.fragment),HBe=l(),bc=a("h2"),MT=a("a"),T_e=a("span"),f(uA.$$.fragment),qar=l(),M_e=a("span"),Nar=o("TFAutoModelForPreTraining"),UBe=l(),Fr=a("div"),f(bA.$$.fragment),jar=l(),vc=a("p"),Dar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EV=a("a"),Gar=o("from_pretrained()"),Oar=o(" class method or the "),CV=a("a"),Var=o("from_config()"),Xar=o(` class
method.`),zar=l(),vA=a("p"),Qar=o("This class cannot be instantiated directly using "),E_e=a("code"),War=o("__init__()"),Har=o(" (throws an error)."),Uar=l(),ht=a("div"),f(FA.$$.fragment),Jar=l(),C_e=a("p"),Yar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Kar=l(),Fc=a("p"),Zar=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),enr=o("not"),onr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=a("a"),rnr=o("from_pretrained()"),tnr=o(" to load the model weights."),anr=l(),A_e=a("p"),nnr=o("Examples:"),snr=l(),f(TA.$$.fragment),lnr=l(),po=a("div"),f(MA.$$.fragment),inr=l(),y_e=a("p"),dnr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cnr=l(),bn=a("p"),fnr=o("The model class to instantiate is selected based on the "),L_e=a("code"),mnr=o("model_type"),gnr=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),hnr=o("pretrained_model_name_or_path"),pnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),_nr=o("pretrained_model_name_or_path"),unr=o(":"),bnr=l(),H=a("ul"),ET=a("li"),S_e=a("strong"),vnr=o("albert"),Fnr=o(" \u2014 "),AV=a("a"),Tnr=o("TFAlbertForPreTraining"),Mnr=o(" (ALBERT model)"),Enr=l(),CT=a("li"),R_e=a("strong"),Cnr=o("bart"),wnr=o(" \u2014 "),yV=a("a"),Anr=o("TFBartForConditionalGeneration"),ynr=o(" (BART model)"),Lnr=l(),wT=a("li"),B_e=a("strong"),xnr=o("bert"),knr=o(" \u2014 "),LV=a("a"),Snr=o("TFBertForPreTraining"),Rnr=o(" (BERT model)"),Bnr=l(),AT=a("li"),P_e=a("strong"),Pnr=o("camembert"),$nr=o(" \u2014 "),xV=a("a"),Inr=o("TFCamembertForMaskedLM"),qnr=o(" (CamemBERT model)"),Nnr=l(),yT=a("li"),$_e=a("strong"),jnr=o("ctrl"),Dnr=o(" \u2014 "),kV=a("a"),Gnr=o("TFCTRLLMHeadModel"),Onr=o(" (CTRL model)"),Vnr=l(),LT=a("li"),I_e=a("strong"),Xnr=o("distilbert"),znr=o(" \u2014 "),SV=a("a"),Qnr=o("TFDistilBertForMaskedLM"),Wnr=o(" (DistilBERT model)"),Hnr=l(),xT=a("li"),q_e=a("strong"),Unr=o("electra"),Jnr=o(" \u2014 "),RV=a("a"),Ynr=o("TFElectraForPreTraining"),Knr=o(" (ELECTRA model)"),Znr=l(),kT=a("li"),N_e=a("strong"),esr=o("flaubert"),osr=o(" \u2014 "),BV=a("a"),rsr=o("TFFlaubertWithLMHeadModel"),tsr=o(" (FlauBERT model)"),asr=l(),ST=a("li"),j_e=a("strong"),nsr=o("funnel"),ssr=o(" \u2014 "),PV=a("a"),lsr=o("TFFunnelForPreTraining"),isr=o(" (Funnel Transformer model)"),dsr=l(),RT=a("li"),D_e=a("strong"),csr=o("gpt2"),fsr=o(" \u2014 "),$V=a("a"),msr=o("TFGPT2LMHeadModel"),gsr=o(" (OpenAI GPT-2 model)"),hsr=l(),BT=a("li"),G_e=a("strong"),psr=o("layoutlm"),_sr=o(" \u2014 "),IV=a("a"),usr=o("TFLayoutLMForMaskedLM"),bsr=o(" (LayoutLM model)"),vsr=l(),PT=a("li"),O_e=a("strong"),Fsr=o("lxmert"),Tsr=o(" \u2014 "),qV=a("a"),Msr=o("TFLxmertForPreTraining"),Esr=o(" (LXMERT model)"),Csr=l(),$T=a("li"),V_e=a("strong"),wsr=o("mobilebert"),Asr=o(" \u2014 "),NV=a("a"),ysr=o("TFMobileBertForPreTraining"),Lsr=o(" (MobileBERT model)"),xsr=l(),IT=a("li"),X_e=a("strong"),ksr=o("mpnet"),Ssr=o(" \u2014 "),jV=a("a"),Rsr=o("TFMPNetForMaskedLM"),Bsr=o(" (MPNet model)"),Psr=l(),qT=a("li"),z_e=a("strong"),$sr=o("openai-gpt"),Isr=o(" \u2014 "),DV=a("a"),qsr=o("TFOpenAIGPTLMHeadModel"),Nsr=o(" (OpenAI GPT model)"),jsr=l(),NT=a("li"),Q_e=a("strong"),Dsr=o("roberta"),Gsr=o(" \u2014 "),GV=a("a"),Osr=o("TFRobertaForMaskedLM"),Vsr=o(" (RoBERTa model)"),Xsr=l(),jT=a("li"),W_e=a("strong"),zsr=o("t5"),Qsr=o(" \u2014 "),OV=a("a"),Wsr=o("TFT5ForConditionalGeneration"),Hsr=o(" (T5 model)"),Usr=l(),DT=a("li"),H_e=a("strong"),Jsr=o("tapas"),Ysr=o(" \u2014 "),VV=a("a"),Ksr=o("TFTapasForMaskedLM"),Zsr=o(" (TAPAS model)"),elr=l(),GT=a("li"),U_e=a("strong"),olr=o("transfo-xl"),rlr=o(" \u2014 "),XV=a("a"),tlr=o("TFTransfoXLLMHeadModel"),alr=o(" (Transformer-XL model)"),nlr=l(),OT=a("li"),J_e=a("strong"),slr=o("vit_mae"),llr=o(" \u2014 "),zV=a("a"),ilr=o("TFViTMAEForPreTraining"),dlr=o(" (ViTMAE model)"),clr=l(),VT=a("li"),Y_e=a("strong"),flr=o("xlm"),mlr=o(" \u2014 "),QV=a("a"),glr=o("TFXLMWithLMHeadModel"),hlr=o(" (XLM model)"),plr=l(),XT=a("li"),K_e=a("strong"),_lr=o("xlm-roberta"),ulr=o(" \u2014 "),WV=a("a"),blr=o("TFXLMRobertaForMaskedLM"),vlr=o(" (XLM-RoBERTa model)"),Flr=l(),zT=a("li"),Z_e=a("strong"),Tlr=o("xlnet"),Mlr=o(" \u2014 "),HV=a("a"),Elr=o("TFXLNetLMHeadModel"),Clr=o(" (XLNet model)"),wlr=l(),eue=a("p"),Alr=o("Examples:"),ylr=l(),f(EA.$$.fragment),JBe=l(),Tc=a("h2"),QT=a("a"),oue=a("span"),f(CA.$$.fragment),Llr=l(),rue=a("span"),xlr=o("TFAutoModelForCausalLM"),YBe=l(),Tr=a("div"),f(wA.$$.fragment),klr=l(),Mc=a("p"),Slr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UV=a("a"),Rlr=o("from_pretrained()"),Blr=o(" class method or the "),JV=a("a"),Plr=o("from_config()"),$lr=o(` class
method.`),Ilr=l(),AA=a("p"),qlr=o("This class cannot be instantiated directly using "),tue=a("code"),Nlr=o("__init__()"),jlr=o(" (throws an error)."),Dlr=l(),pt=a("div"),f(yA.$$.fragment),Glr=l(),aue=a("p"),Olr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vlr=l(),Ec=a("p"),Xlr=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),zlr=o("not"),Qlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),Wlr=o("from_pretrained()"),Hlr=o(" to load the model weights."),Ulr=l(),sue=a("p"),Jlr=o("Examples:"),Ylr=l(),f(LA.$$.fragment),Klr=l(),_o=a("div"),f(xA.$$.fragment),Zlr=l(),lue=a("p"),eir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oir=l(),vn=a("p"),rir=o("The model class to instantiate is selected based on the "),iue=a("code"),tir=o("model_type"),air=o(` property of the config object (either
passed as an argument or loaded from `),due=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(":"),dir=l(),fe=a("ul"),WT=a("li"),fue=a("strong"),cir=o("bert"),fir=o(" \u2014 "),KV=a("a"),mir=o("TFBertLMHeadModel"),gir=o(" (BERT model)"),hir=l(),HT=a("li"),mue=a("strong"),pir=o("camembert"),_ir=o(" \u2014 "),ZV=a("a"),uir=o("TFCamembertForCausalLM"),bir=o(" (CamemBERT model)"),vir=l(),UT=a("li"),gue=a("strong"),Fir=o("ctrl"),Tir=o(" \u2014 "),eX=a("a"),Mir=o("TFCTRLLMHeadModel"),Eir=o(" (CTRL model)"),Cir=l(),JT=a("li"),hue=a("strong"),wir=o("gpt2"),Air=o(" \u2014 "),oX=a("a"),yir=o("TFGPT2LMHeadModel"),Lir=o(" (OpenAI GPT-2 model)"),xir=l(),YT=a("li"),pue=a("strong"),kir=o("gptj"),Sir=o(" \u2014 "),rX=a("a"),Rir=o("TFGPTJForCausalLM"),Bir=o(" (GPT-J model)"),Pir=l(),KT=a("li"),_ue=a("strong"),$ir=o("openai-gpt"),Iir=o(" \u2014 "),tX=a("a"),qir=o("TFOpenAIGPTLMHeadModel"),Nir=o(" (OpenAI GPT model)"),jir=l(),ZT=a("li"),uue=a("strong"),Dir=o("rembert"),Gir=o(" \u2014 "),aX=a("a"),Oir=o("TFRemBertForCausalLM"),Vir=o(" (RemBERT model)"),Xir=l(),e8=a("li"),bue=a("strong"),zir=o("roberta"),Qir=o(" \u2014 "),nX=a("a"),Wir=o("TFRobertaForCausalLM"),Hir=o(" (RoBERTa model)"),Uir=l(),o8=a("li"),vue=a("strong"),Jir=o("roformer"),Yir=o(" \u2014 "),sX=a("a"),Kir=o("TFRoFormerForCausalLM"),Zir=o(" (RoFormer model)"),edr=l(),r8=a("li"),Fue=a("strong"),odr=o("transfo-xl"),rdr=o(" \u2014 "),lX=a("a"),tdr=o("TFTransfoXLLMHeadModel"),adr=o(" (Transformer-XL model)"),ndr=l(),t8=a("li"),Tue=a("strong"),sdr=o("xlm"),ldr=o(" \u2014 "),iX=a("a"),idr=o("TFXLMWithLMHeadModel"),ddr=o(" (XLM model)"),cdr=l(),a8=a("li"),Mue=a("strong"),fdr=o("xlnet"),mdr=o(" \u2014 "),dX=a("a"),gdr=o("TFXLNetLMHeadModel"),hdr=o(" (XLNet model)"),pdr=l(),Eue=a("p"),_dr=o("Examples:"),udr=l(),f(kA.$$.fragment),KBe=l(),Cc=a("h2"),n8=a("a"),Cue=a("span"),f(SA.$$.fragment),bdr=l(),wue=a("span"),vdr=o("TFAutoModelForImageClassification"),ZBe=l(),Mr=a("div"),f(RA.$$.fragment),Fdr=l(),wc=a("p"),Tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cX=a("a"),Mdr=o("from_pretrained()"),Edr=o(" class method or the "),fX=a("a"),Cdr=o("from_config()"),wdr=o(` class
method.`),Adr=l(),BA=a("p"),ydr=o("This class cannot be instantiated directly using "),Aue=a("code"),Ldr=o("__init__()"),xdr=o(" (throws an error)."),kdr=l(),_t=a("div"),f(PA.$$.fragment),Sdr=l(),yue=a("p"),Rdr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Bdr=l(),Ac=a("p"),Pdr=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),$dr=o("not"),Idr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),qdr=o("from_pretrained()"),Ndr=o(" to load the model weights."),jdr=l(),xue=a("p"),Ddr=o("Examples:"),Gdr=l(),f($A.$$.fragment),Odr=l(),uo=a("div"),f(IA.$$.fragment),Vdr=l(),kue=a("p"),Xdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zdr=l(),Fn=a("p"),Qdr=o("The model class to instantiate is selected based on the "),Sue=a("code"),Wdr=o("model_type"),Hdr=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),Udr=o("pretrained_model_name_or_path"),Jdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),Ydr=o("pretrained_model_name_or_path"),Kdr=o(":"),Zdr=l(),qA=a("ul"),s8=a("li"),Pue=a("strong"),ecr=o("convnext"),ocr=o(" \u2014 "),gX=a("a"),rcr=o("TFConvNextForImageClassification"),tcr=o(" (ConvNext model)"),acr=l(),l8=a("li"),$ue=a("strong"),ncr=o("vit"),scr=o(" \u2014 "),hX=a("a"),lcr=o("TFViTForImageClassification"),icr=o(" (ViT model)"),dcr=l(),Iue=a("p"),ccr=o("Examples:"),fcr=l(),f(NA.$$.fragment),ePe=l(),yc=a("h2"),i8=a("a"),que=a("span"),f(jA.$$.fragment),mcr=l(),Nue=a("span"),gcr=o("TFAutoModelForMaskedLM"),oPe=l(),Er=a("div"),f(DA.$$.fragment),hcr=l(),Lc=a("p"),pcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pX=a("a"),_cr=o("from_pretrained()"),ucr=o(" class method or the "),_X=a("a"),bcr=o("from_config()"),vcr=o(` class
method.`),Fcr=l(),GA=a("p"),Tcr=o("This class cannot be instantiated directly using "),jue=a("code"),Mcr=o("__init__()"),Ecr=o(" (throws an error)."),Ccr=l(),ut=a("div"),f(OA.$$.fragment),wcr=l(),Due=a("p"),Acr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ycr=l(),xc=a("p"),Lcr=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),xcr=o("not"),kcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),Scr=o("from_pretrained()"),Rcr=o(" to load the model weights."),Bcr=l(),Oue=a("p"),Pcr=o("Examples:"),$cr=l(),f(VA.$$.fragment),Icr=l(),bo=a("div"),f(XA.$$.fragment),qcr=l(),Vue=a("p"),Ncr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jcr=l(),Tn=a("p"),Dcr=o("The model class to instantiate is selected based on the "),Xue=a("code"),Gcr=o("model_type"),Ocr=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),Vcr=o("pretrained_model_name_or_path"),Xcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),zcr=o("pretrained_model_name_or_path"),Qcr=o(":"),Wcr=l(),Y=a("ul"),d8=a("li"),Wue=a("strong"),Hcr=o("albert"),Ucr=o(" \u2014 "),bX=a("a"),Jcr=o("TFAlbertForMaskedLM"),Ycr=o(" (ALBERT model)"),Kcr=l(),c8=a("li"),Hue=a("strong"),Zcr=o("bert"),efr=o(" \u2014 "),vX=a("a"),ofr=o("TFBertForMaskedLM"),rfr=o(" (BERT model)"),tfr=l(),f8=a("li"),Uue=a("strong"),afr=o("camembert"),nfr=o(" \u2014 "),FX=a("a"),sfr=o("TFCamembertForMaskedLM"),lfr=o(" (CamemBERT model)"),ifr=l(),m8=a("li"),Jue=a("strong"),dfr=o("convbert"),cfr=o(" \u2014 "),TX=a("a"),ffr=o("TFConvBertForMaskedLM"),mfr=o(" (ConvBERT model)"),gfr=l(),g8=a("li"),Yue=a("strong"),hfr=o("deberta"),pfr=o(" \u2014 "),MX=a("a"),_fr=o("TFDebertaForMaskedLM"),ufr=o(" (DeBERTa model)"),bfr=l(),h8=a("li"),Kue=a("strong"),vfr=o("deberta-v2"),Ffr=o(" \u2014 "),EX=a("a"),Tfr=o("TFDebertaV2ForMaskedLM"),Mfr=o(" (DeBERTa-v2 model)"),Efr=l(),p8=a("li"),Zue=a("strong"),Cfr=o("distilbert"),wfr=o(" \u2014 "),CX=a("a"),Afr=o("TFDistilBertForMaskedLM"),yfr=o(" (DistilBERT model)"),Lfr=l(),_8=a("li"),e1e=a("strong"),xfr=o("electra"),kfr=o(" \u2014 "),wX=a("a"),Sfr=o("TFElectraForMaskedLM"),Rfr=o(" (ELECTRA model)"),Bfr=l(),u8=a("li"),o1e=a("strong"),Pfr=o("flaubert"),$fr=o(" \u2014 "),AX=a("a"),Ifr=o("TFFlaubertWithLMHeadModel"),qfr=o(" (FlauBERT model)"),Nfr=l(),b8=a("li"),r1e=a("strong"),jfr=o("funnel"),Dfr=o(" \u2014 "),yX=a("a"),Gfr=o("TFFunnelForMaskedLM"),Ofr=o(" (Funnel Transformer model)"),Vfr=l(),v8=a("li"),t1e=a("strong"),Xfr=o("layoutlm"),zfr=o(" \u2014 "),LX=a("a"),Qfr=o("TFLayoutLMForMaskedLM"),Wfr=o(" (LayoutLM model)"),Hfr=l(),F8=a("li"),a1e=a("strong"),Ufr=o("longformer"),Jfr=o(" \u2014 "),xX=a("a"),Yfr=o("TFLongformerForMaskedLM"),Kfr=o(" (Longformer model)"),Zfr=l(),T8=a("li"),n1e=a("strong"),emr=o("mobilebert"),omr=o(" \u2014 "),kX=a("a"),rmr=o("TFMobileBertForMaskedLM"),tmr=o(" (MobileBERT model)"),amr=l(),M8=a("li"),s1e=a("strong"),nmr=o("mpnet"),smr=o(" \u2014 "),SX=a("a"),lmr=o("TFMPNetForMaskedLM"),imr=o(" (MPNet model)"),dmr=l(),E8=a("li"),l1e=a("strong"),cmr=o("rembert"),fmr=o(" \u2014 "),RX=a("a"),mmr=o("TFRemBertForMaskedLM"),gmr=o(" (RemBERT model)"),hmr=l(),C8=a("li"),i1e=a("strong"),pmr=o("roberta"),_mr=o(" \u2014 "),BX=a("a"),umr=o("TFRobertaForMaskedLM"),bmr=o(" (RoBERTa model)"),vmr=l(),w8=a("li"),d1e=a("strong"),Fmr=o("roformer"),Tmr=o(" \u2014 "),PX=a("a"),Mmr=o("TFRoFormerForMaskedLM"),Emr=o(" (RoFormer model)"),Cmr=l(),A8=a("li"),c1e=a("strong"),wmr=o("tapas"),Amr=o(" \u2014 "),$X=a("a"),ymr=o("TFTapasForMaskedLM"),Lmr=o(" (TAPAS model)"),xmr=l(),y8=a("li"),f1e=a("strong"),kmr=o("xlm"),Smr=o(" \u2014 "),IX=a("a"),Rmr=o("TFXLMWithLMHeadModel"),Bmr=o(" (XLM model)"),Pmr=l(),L8=a("li"),m1e=a("strong"),$mr=o("xlm-roberta"),Imr=o(" \u2014 "),qX=a("a"),qmr=o("TFXLMRobertaForMaskedLM"),Nmr=o(" (XLM-RoBERTa model)"),jmr=l(),g1e=a("p"),Dmr=o("Examples:"),Gmr=l(),f(zA.$$.fragment),rPe=l(),kc=a("h2"),x8=a("a"),h1e=a("span"),f(QA.$$.fragment),Omr=l(),p1e=a("span"),Vmr=o("TFAutoModelForSeq2SeqLM"),tPe=l(),Cr=a("div"),f(WA.$$.fragment),Xmr=l(),Sc=a("p"),zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NX=a("a"),Qmr=o("from_pretrained()"),Wmr=o(" class method or the "),jX=a("a"),Hmr=o("from_config()"),Umr=o(` class
method.`),Jmr=l(),HA=a("p"),Ymr=o("This class cannot be instantiated directly using "),_1e=a("code"),Kmr=o("__init__()"),Zmr=o(" (throws an error)."),egr=l(),bt=a("div"),f(UA.$$.fragment),ogr=l(),u1e=a("p"),rgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tgr=l(),Rc=a("p"),agr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),ngr=o("not"),sgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),lgr=o("from_pretrained()"),igr=o(" to load the model weights."),dgr=l(),v1e=a("p"),cgr=o("Examples:"),fgr=l(),f(JA.$$.fragment),mgr=l(),vo=a("div"),f(YA.$$.fragment),ggr=l(),F1e=a("p"),hgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pgr=l(),Mn=a("p"),_gr=o("The model class to instantiate is selected based on the "),T1e=a("code"),ugr=o("model_type"),bgr=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),vgr=o("pretrained_model_name_or_path"),Fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),Tgr=o("pretrained_model_name_or_path"),Mgr=o(":"),Egr=l(),be=a("ul"),k8=a("li"),C1e=a("strong"),Cgr=o("bart"),wgr=o(" \u2014 "),GX=a("a"),Agr=o("TFBartForConditionalGeneration"),ygr=o(" (BART model)"),Lgr=l(),S8=a("li"),w1e=a("strong"),xgr=o("blenderbot"),kgr=o(" \u2014 "),OX=a("a"),Sgr=o("TFBlenderbotForConditionalGeneration"),Rgr=o(" (Blenderbot model)"),Bgr=l(),R8=a("li"),A1e=a("strong"),Pgr=o("blenderbot-small"),$gr=o(" \u2014 "),VX=a("a"),Igr=o("TFBlenderbotSmallForConditionalGeneration"),qgr=o(" (BlenderbotSmall model)"),Ngr=l(),B8=a("li"),y1e=a("strong"),jgr=o("encoder-decoder"),Dgr=o(" \u2014 "),XX=a("a"),Ggr=o("TFEncoderDecoderModel"),Ogr=o(" (Encoder decoder model)"),Vgr=l(),P8=a("li"),L1e=a("strong"),Xgr=o("led"),zgr=o(" \u2014 "),zX=a("a"),Qgr=o("TFLEDForConditionalGeneration"),Wgr=o(" (LED model)"),Hgr=l(),$8=a("li"),x1e=a("strong"),Ugr=o("marian"),Jgr=o(" \u2014 "),QX=a("a"),Ygr=o("TFMarianMTModel"),Kgr=o(" (Marian model)"),Zgr=l(),I8=a("li"),k1e=a("strong"),ehr=o("mbart"),ohr=o(" \u2014 "),WX=a("a"),rhr=o("TFMBartForConditionalGeneration"),thr=o(" (mBART model)"),ahr=l(),q8=a("li"),S1e=a("strong"),nhr=o("mt5"),shr=o(" \u2014 "),HX=a("a"),lhr=o("TFMT5ForConditionalGeneration"),ihr=o(" (mT5 model)"),dhr=l(),N8=a("li"),R1e=a("strong"),chr=o("pegasus"),fhr=o(" \u2014 "),UX=a("a"),mhr=o("TFPegasusForConditionalGeneration"),ghr=o(" (Pegasus model)"),hhr=l(),j8=a("li"),B1e=a("strong"),phr=o("t5"),_hr=o(" \u2014 "),JX=a("a"),uhr=o("TFT5ForConditionalGeneration"),bhr=o(" (T5 model)"),vhr=l(),P1e=a("p"),Fhr=o("Examples:"),Thr=l(),f(KA.$$.fragment),aPe=l(),Bc=a("h2"),D8=a("a"),$1e=a("span"),f(ZA.$$.fragment),Mhr=l(),I1e=a("span"),Ehr=o("TFAutoModelForSequenceClassification"),nPe=l(),wr=a("div"),f(e0.$$.fragment),Chr=l(),Pc=a("p"),whr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YX=a("a"),Ahr=o("from_pretrained()"),yhr=o(" class method or the "),KX=a("a"),Lhr=o("from_config()"),xhr=o(` class
method.`),khr=l(),o0=a("p"),Shr=o("This class cannot be instantiated directly using "),q1e=a("code"),Rhr=o("__init__()"),Bhr=o(" (throws an error)."),Phr=l(),vt=a("div"),f(r0.$$.fragment),$hr=l(),N1e=a("p"),Ihr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qhr=l(),$c=a("p"),Nhr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),jhr=o("not"),Dhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Ghr=o("from_pretrained()"),Ohr=o(" to load the model weights."),Vhr=l(),D1e=a("p"),Xhr=o("Examples:"),zhr=l(),f(t0.$$.fragment),Qhr=l(),Fo=a("div"),f(a0.$$.fragment),Whr=l(),G1e=a("p"),Hhr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uhr=l(),En=a("p"),Jhr=o("The model class to instantiate is selected based on the "),O1e=a("code"),Yhr=o("model_type"),Khr=o(` property of the config object (either
passed as an argument or loaded from `),V1e=a("code"),Zhr=o("pretrained_model_name_or_path"),epr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(":"),tpr=l(),V=a("ul"),G8=a("li"),z1e=a("strong"),apr=o("albert"),npr=o(" \u2014 "),ez=a("a"),spr=o("TFAlbertForSequenceClassification"),lpr=o(" (ALBERT model)"),ipr=l(),O8=a("li"),Q1e=a("strong"),dpr=o("bert"),cpr=o(" \u2014 "),oz=a("a"),fpr=o("TFBertForSequenceClassification"),mpr=o(" (BERT model)"),gpr=l(),V8=a("li"),W1e=a("strong"),hpr=o("camembert"),ppr=o(" \u2014 "),rz=a("a"),_pr=o("TFCamembertForSequenceClassification"),upr=o(" (CamemBERT model)"),bpr=l(),X8=a("li"),H1e=a("strong"),vpr=o("convbert"),Fpr=o(" \u2014 "),tz=a("a"),Tpr=o("TFConvBertForSequenceClassification"),Mpr=o(" (ConvBERT model)"),Epr=l(),z8=a("li"),U1e=a("strong"),Cpr=o("ctrl"),wpr=o(" \u2014 "),az=a("a"),Apr=o("TFCTRLForSequenceClassification"),ypr=o(" (CTRL model)"),Lpr=l(),Q8=a("li"),J1e=a("strong"),xpr=o("deberta"),kpr=o(" \u2014 "),nz=a("a"),Spr=o("TFDebertaForSequenceClassification"),Rpr=o(" (DeBERTa model)"),Bpr=l(),W8=a("li"),Y1e=a("strong"),Ppr=o("deberta-v2"),$pr=o(" \u2014 "),sz=a("a"),Ipr=o("TFDebertaV2ForSequenceClassification"),qpr=o(" (DeBERTa-v2 model)"),Npr=l(),H8=a("li"),K1e=a("strong"),jpr=o("distilbert"),Dpr=o(" \u2014 "),lz=a("a"),Gpr=o("TFDistilBertForSequenceClassification"),Opr=o(" (DistilBERT model)"),Vpr=l(),U8=a("li"),Z1e=a("strong"),Xpr=o("electra"),zpr=o(" \u2014 "),iz=a("a"),Qpr=o("TFElectraForSequenceClassification"),Wpr=o(" (ELECTRA model)"),Hpr=l(),J8=a("li"),ebe=a("strong"),Upr=o("flaubert"),Jpr=o(" \u2014 "),dz=a("a"),Ypr=o("TFFlaubertForSequenceClassification"),Kpr=o(" (FlauBERT model)"),Zpr=l(),Y8=a("li"),obe=a("strong"),e_r=o("funnel"),o_r=o(" \u2014 "),cz=a("a"),r_r=o("TFFunnelForSequenceClassification"),t_r=o(" (Funnel Transformer model)"),a_r=l(),K8=a("li"),rbe=a("strong"),n_r=o("gpt2"),s_r=o(" \u2014 "),fz=a("a"),l_r=o("TFGPT2ForSequenceClassification"),i_r=o(" (OpenAI GPT-2 model)"),d_r=l(),Z8=a("li"),tbe=a("strong"),c_r=o("gptj"),f_r=o(" \u2014 "),mz=a("a"),m_r=o("TFGPTJForSequenceClassification"),g_r=o(" (GPT-J model)"),h_r=l(),e7=a("li"),abe=a("strong"),p_r=o("layoutlm"),__r=o(" \u2014 "),gz=a("a"),u_r=o("TFLayoutLMForSequenceClassification"),b_r=o(" (LayoutLM model)"),v_r=l(),o7=a("li"),nbe=a("strong"),F_r=o("longformer"),T_r=o(" \u2014 "),hz=a("a"),M_r=o("TFLongformerForSequenceClassification"),E_r=o(" (Longformer model)"),C_r=l(),r7=a("li"),sbe=a("strong"),w_r=o("mobilebert"),A_r=o(" \u2014 "),pz=a("a"),y_r=o("TFMobileBertForSequenceClassification"),L_r=o(" (MobileBERT model)"),x_r=l(),t7=a("li"),lbe=a("strong"),k_r=o("mpnet"),S_r=o(" \u2014 "),_z=a("a"),R_r=o("TFMPNetForSequenceClassification"),B_r=o(" (MPNet model)"),P_r=l(),a7=a("li"),ibe=a("strong"),$_r=o("openai-gpt"),I_r=o(" \u2014 "),uz=a("a"),q_r=o("TFOpenAIGPTForSequenceClassification"),N_r=o(" (OpenAI GPT model)"),j_r=l(),n7=a("li"),dbe=a("strong"),D_r=o("rembert"),G_r=o(" \u2014 "),bz=a("a"),O_r=o("TFRemBertForSequenceClassification"),V_r=o(" (RemBERT model)"),X_r=l(),s7=a("li"),cbe=a("strong"),z_r=o("roberta"),Q_r=o(" \u2014 "),vz=a("a"),W_r=o("TFRobertaForSequenceClassification"),H_r=o(" (RoBERTa model)"),U_r=l(),l7=a("li"),fbe=a("strong"),J_r=o("roformer"),Y_r=o(" \u2014 "),Fz=a("a"),K_r=o("TFRoFormerForSequenceClassification"),Z_r=o(" (RoFormer model)"),eur=l(),i7=a("li"),mbe=a("strong"),our=o("tapas"),rur=o(" \u2014 "),Tz=a("a"),tur=o("TFTapasForSequenceClassification"),aur=o(" (TAPAS model)"),nur=l(),d7=a("li"),gbe=a("strong"),sur=o("transfo-xl"),lur=o(" \u2014 "),Mz=a("a"),iur=o("TFTransfoXLForSequenceClassification"),dur=o(" (Transformer-XL model)"),cur=l(),c7=a("li"),hbe=a("strong"),fur=o("xlm"),mur=o(" \u2014 "),Ez=a("a"),gur=o("TFXLMForSequenceClassification"),hur=o(" (XLM model)"),pur=l(),f7=a("li"),pbe=a("strong"),_ur=o("xlm-roberta"),uur=o(" \u2014 "),Cz=a("a"),bur=o("TFXLMRobertaForSequenceClassification"),vur=o(" (XLM-RoBERTa model)"),Fur=l(),m7=a("li"),_be=a("strong"),Tur=o("xlnet"),Mur=o(" \u2014 "),wz=a("a"),Eur=o("TFXLNetForSequenceClassification"),Cur=o(" (XLNet model)"),wur=l(),ube=a("p"),Aur=o("Examples:"),yur=l(),f(n0.$$.fragment),sPe=l(),Ic=a("h2"),g7=a("a"),bbe=a("span"),f(s0.$$.fragment),Lur=l(),vbe=a("span"),xur=o("TFAutoModelForMultipleChoice"),lPe=l(),Ar=a("div"),f(l0.$$.fragment),kur=l(),qc=a("p"),Sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Az=a("a"),Rur=o("from_pretrained()"),Bur=o(" class method or the "),yz=a("a"),Pur=o("from_config()"),$ur=o(` class
method.`),Iur=l(),i0=a("p"),qur=o("This class cannot be instantiated directly using "),Fbe=a("code"),Nur=o("__init__()"),jur=o(" (throws an error)."),Dur=l(),Ft=a("div"),f(d0.$$.fragment),Gur=l(),Tbe=a("p"),Our=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vur=l(),Nc=a("p"),Xur=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),zur=o("not"),Qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),Wur=o("from_pretrained()"),Hur=o(" to load the model weights."),Uur=l(),Ebe=a("p"),Jur=o("Examples:"),Yur=l(),f(c0.$$.fragment),Kur=l(),To=a("div"),f(f0.$$.fragment),Zur=l(),Cbe=a("p"),e1r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o1r=l(),Cn=a("p"),r1r=o("The model class to instantiate is selected based on the "),wbe=a("code"),t1r=o("model_type"),a1r=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),n1r=o("pretrained_model_name_or_path"),s1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),l1r=o("pretrained_model_name_or_path"),i1r=o(":"),d1r=l(),se=a("ul"),h7=a("li"),Lbe=a("strong"),c1r=o("albert"),f1r=o(" \u2014 "),xz=a("a"),m1r=o("TFAlbertForMultipleChoice"),g1r=o(" (ALBERT model)"),h1r=l(),p7=a("li"),xbe=a("strong"),p1r=o("bert"),_1r=o(" \u2014 "),kz=a("a"),u1r=o("TFBertForMultipleChoice"),b1r=o(" (BERT model)"),v1r=l(),_7=a("li"),kbe=a("strong"),F1r=o("camembert"),T1r=o(" \u2014 "),Sz=a("a"),M1r=o("TFCamembertForMultipleChoice"),E1r=o(" (CamemBERT model)"),C1r=l(),u7=a("li"),Sbe=a("strong"),w1r=o("convbert"),A1r=o(" \u2014 "),Rz=a("a"),y1r=o("TFConvBertForMultipleChoice"),L1r=o(" (ConvBERT model)"),x1r=l(),b7=a("li"),Rbe=a("strong"),k1r=o("distilbert"),S1r=o(" \u2014 "),Bz=a("a"),R1r=o("TFDistilBertForMultipleChoice"),B1r=o(" (DistilBERT model)"),P1r=l(),v7=a("li"),Bbe=a("strong"),$1r=o("electra"),I1r=o(" \u2014 "),Pz=a("a"),q1r=o("TFElectraForMultipleChoice"),N1r=o(" (ELECTRA model)"),j1r=l(),F7=a("li"),Pbe=a("strong"),D1r=o("flaubert"),G1r=o(" \u2014 "),$z=a("a"),O1r=o("TFFlaubertForMultipleChoice"),V1r=o(" (FlauBERT model)"),X1r=l(),T7=a("li"),$be=a("strong"),z1r=o("funnel"),Q1r=o(" \u2014 "),Iz=a("a"),W1r=o("TFFunnelForMultipleChoice"),H1r=o(" (Funnel Transformer model)"),U1r=l(),M7=a("li"),Ibe=a("strong"),J1r=o("longformer"),Y1r=o(" \u2014 "),qz=a("a"),K1r=o("TFLongformerForMultipleChoice"),Z1r=o(" (Longformer model)"),ebr=l(),E7=a("li"),qbe=a("strong"),obr=o("mobilebert"),rbr=o(" \u2014 "),Nz=a("a"),tbr=o("TFMobileBertForMultipleChoice"),abr=o(" (MobileBERT model)"),nbr=l(),C7=a("li"),Nbe=a("strong"),sbr=o("mpnet"),lbr=o(" \u2014 "),jz=a("a"),ibr=o("TFMPNetForMultipleChoice"),dbr=o(" (MPNet model)"),cbr=l(),w7=a("li"),jbe=a("strong"),fbr=o("rembert"),mbr=o(" \u2014 "),Dz=a("a"),gbr=o("TFRemBertForMultipleChoice"),hbr=o(" (RemBERT model)"),pbr=l(),A7=a("li"),Dbe=a("strong"),_br=o("roberta"),ubr=o(" \u2014 "),Gz=a("a"),bbr=o("TFRobertaForMultipleChoice"),vbr=o(" (RoBERTa model)"),Fbr=l(),y7=a("li"),Gbe=a("strong"),Tbr=o("roformer"),Mbr=o(" \u2014 "),Oz=a("a"),Ebr=o("TFRoFormerForMultipleChoice"),Cbr=o(" (RoFormer model)"),wbr=l(),L7=a("li"),Obe=a("strong"),Abr=o("xlm"),ybr=o(" \u2014 "),Vz=a("a"),Lbr=o("TFXLMForMultipleChoice"),xbr=o(" (XLM model)"),kbr=l(),x7=a("li"),Vbe=a("strong"),Sbr=o("xlm-roberta"),Rbr=o(" \u2014 "),Xz=a("a"),Bbr=o("TFXLMRobertaForMultipleChoice"),Pbr=o(" (XLM-RoBERTa model)"),$br=l(),k7=a("li"),Xbe=a("strong"),Ibr=o("xlnet"),qbr=o(" \u2014 "),zz=a("a"),Nbr=o("TFXLNetForMultipleChoice"),jbr=o(" (XLNet model)"),Dbr=l(),zbe=a("p"),Gbr=o("Examples:"),Obr=l(),f(m0.$$.fragment),iPe=l(),jc=a("h2"),S7=a("a"),Qbe=a("span"),f(g0.$$.fragment),Vbr=l(),Wbe=a("span"),Xbr=o("TFAutoModelForTableQuestionAnswering"),dPe=l(),yr=a("div"),f(h0.$$.fragment),zbr=l(),Dc=a("p"),Qbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Qz=a("a"),Wbr=o("from_pretrained()"),Hbr=o(" class method or the "),Wz=a("a"),Ubr=o("from_config()"),Jbr=o(` class
method.`),Ybr=l(),p0=a("p"),Kbr=o("This class cannot be instantiated directly using "),Hbe=a("code"),Zbr=o("__init__()"),e2r=o(" (throws an error)."),o2r=l(),Tt=a("div"),f(_0.$$.fragment),r2r=l(),Ube=a("p"),t2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),a2r=l(),Gc=a("p"),n2r=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),s2r=o("not"),l2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),i2r=o("from_pretrained()"),d2r=o(" to load the model weights."),c2r=l(),Ybe=a("p"),f2r=o("Examples:"),m2r=l(),f(u0.$$.fragment),g2r=l(),Mo=a("div"),f(b0.$$.fragment),h2r=l(),Kbe=a("p"),p2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_2r=l(),wn=a("p"),u2r=o("The model class to instantiate is selected based on the "),Zbe=a("code"),b2r=o("model_type"),v2r=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),F2r=o("pretrained_model_name_or_path"),T2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(":"),C2r=l(),r2e=a("ul"),R7=a("li"),t2e=a("strong"),w2r=o("tapas"),A2r=o(" \u2014 "),Uz=a("a"),y2r=o("TFTapasForQuestionAnswering"),L2r=o(" (TAPAS model)"),x2r=l(),a2e=a("p"),k2r=o("Examples:"),S2r=l(),f(v0.$$.fragment),cPe=l(),Oc=a("h2"),B7=a("a"),n2e=a("span"),f(F0.$$.fragment),R2r=l(),s2e=a("span"),B2r=o("TFAutoModelForTokenClassification"),fPe=l(),Lr=a("div"),f(T0.$$.fragment),P2r=l(),Vc=a("p"),$2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Jz=a("a"),I2r=o("from_pretrained()"),q2r=o(" class method or the "),Yz=a("a"),N2r=o("from_config()"),j2r=o(` class
method.`),D2r=l(),M0=a("p"),G2r=o("This class cannot be instantiated directly using "),l2e=a("code"),O2r=o("__init__()"),V2r=o(" (throws an error)."),X2r=l(),Mt=a("div"),f(E0.$$.fragment),z2r=l(),i2e=a("p"),Q2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W2r=l(),Xc=a("p"),H2r=o(`Note:
Loading a model from its configuration file does `),d2e=a("strong"),U2r=o("not"),J2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),Y2r=o("from_pretrained()"),K2r=o(" to load the model weights."),Z2r=l(),c2e=a("p"),e6r=o("Examples:"),o6r=l(),f(C0.$$.fragment),r6r=l(),Eo=a("div"),f(w0.$$.fragment),t6r=l(),f2e=a("p"),a6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n6r=l(),An=a("p"),s6r=o("The model class to instantiate is selected based on the "),m2e=a("code"),l6r=o("model_type"),i6r=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),d6r=o("pretrained_model_name_or_path"),c6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),f6r=o("pretrained_model_name_or_path"),m6r=o(":"),g6r=l(),K=a("ul"),P7=a("li"),p2e=a("strong"),h6r=o("albert"),p6r=o(" \u2014 "),Zz=a("a"),_6r=o("TFAlbertForTokenClassification"),u6r=o(" (ALBERT model)"),b6r=l(),$7=a("li"),_2e=a("strong"),v6r=o("bert"),F6r=o(" \u2014 "),eQ=a("a"),T6r=o("TFBertForTokenClassification"),M6r=o(" (BERT model)"),E6r=l(),I7=a("li"),u2e=a("strong"),C6r=o("camembert"),w6r=o(" \u2014 "),oQ=a("a"),A6r=o("TFCamembertForTokenClassification"),y6r=o(" (CamemBERT model)"),L6r=l(),q7=a("li"),b2e=a("strong"),x6r=o("convbert"),k6r=o(" \u2014 "),rQ=a("a"),S6r=o("TFConvBertForTokenClassification"),R6r=o(" (ConvBERT model)"),B6r=l(),N7=a("li"),v2e=a("strong"),P6r=o("deberta"),$6r=o(" \u2014 "),tQ=a("a"),I6r=o("TFDebertaForTokenClassification"),q6r=o(" (DeBERTa model)"),N6r=l(),j7=a("li"),F2e=a("strong"),j6r=o("deberta-v2"),D6r=o(" \u2014 "),aQ=a("a"),G6r=o("TFDebertaV2ForTokenClassification"),O6r=o(" (DeBERTa-v2 model)"),V6r=l(),D7=a("li"),T2e=a("strong"),X6r=o("distilbert"),z6r=o(" \u2014 "),nQ=a("a"),Q6r=o("TFDistilBertForTokenClassification"),W6r=o(" (DistilBERT model)"),H6r=l(),G7=a("li"),M2e=a("strong"),U6r=o("electra"),J6r=o(" \u2014 "),sQ=a("a"),Y6r=o("TFElectraForTokenClassification"),K6r=o(" (ELECTRA model)"),Z6r=l(),O7=a("li"),E2e=a("strong"),evr=o("flaubert"),ovr=o(" \u2014 "),lQ=a("a"),rvr=o("TFFlaubertForTokenClassification"),tvr=o(" (FlauBERT model)"),avr=l(),V7=a("li"),C2e=a("strong"),nvr=o("funnel"),svr=o(" \u2014 "),iQ=a("a"),lvr=o("TFFunnelForTokenClassification"),ivr=o(" (Funnel Transformer model)"),dvr=l(),X7=a("li"),w2e=a("strong"),cvr=o("layoutlm"),fvr=o(" \u2014 "),dQ=a("a"),mvr=o("TFLayoutLMForTokenClassification"),gvr=o(" (LayoutLM model)"),hvr=l(),z7=a("li"),A2e=a("strong"),pvr=o("longformer"),_vr=o(" \u2014 "),cQ=a("a"),uvr=o("TFLongformerForTokenClassification"),bvr=o(" (Longformer model)"),vvr=l(),Q7=a("li"),y2e=a("strong"),Fvr=o("mobilebert"),Tvr=o(" \u2014 "),fQ=a("a"),Mvr=o("TFMobileBertForTokenClassification"),Evr=o(" (MobileBERT model)"),Cvr=l(),W7=a("li"),L2e=a("strong"),wvr=o("mpnet"),Avr=o(" \u2014 "),mQ=a("a"),yvr=o("TFMPNetForTokenClassification"),Lvr=o(" (MPNet model)"),xvr=l(),H7=a("li"),x2e=a("strong"),kvr=o("rembert"),Svr=o(" \u2014 "),gQ=a("a"),Rvr=o("TFRemBertForTokenClassification"),Bvr=o(" (RemBERT model)"),Pvr=l(),U7=a("li"),k2e=a("strong"),$vr=o("roberta"),Ivr=o(" \u2014 "),hQ=a("a"),qvr=o("TFRobertaForTokenClassification"),Nvr=o(" (RoBERTa model)"),jvr=l(),J7=a("li"),S2e=a("strong"),Dvr=o("roformer"),Gvr=o(" \u2014 "),pQ=a("a"),Ovr=o("TFRoFormerForTokenClassification"),Vvr=o(" (RoFormer model)"),Xvr=l(),Y7=a("li"),R2e=a("strong"),zvr=o("xlm"),Qvr=o(" \u2014 "),_Q=a("a"),Wvr=o("TFXLMForTokenClassification"),Hvr=o(" (XLM model)"),Uvr=l(),K7=a("li"),B2e=a("strong"),Jvr=o("xlm-roberta"),Yvr=o(" \u2014 "),uQ=a("a"),Kvr=o("TFXLMRobertaForTokenClassification"),Zvr=o(" (XLM-RoBERTa model)"),eFr=l(),Z7=a("li"),P2e=a("strong"),oFr=o("xlnet"),rFr=o(" \u2014 "),bQ=a("a"),tFr=o("TFXLNetForTokenClassification"),aFr=o(" (XLNet model)"),nFr=l(),$2e=a("p"),sFr=o("Examples:"),lFr=l(),f(A0.$$.fragment),mPe=l(),zc=a("h2"),eM=a("a"),I2e=a("span"),f(y0.$$.fragment),iFr=l(),q2e=a("span"),dFr=o("TFAutoModelForQuestionAnswering"),gPe=l(),xr=a("div"),f(L0.$$.fragment),cFr=l(),Qc=a("p"),fFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vQ=a("a"),mFr=o("from_pretrained()"),gFr=o(" class method or the "),FQ=a("a"),hFr=o("from_config()"),pFr=o(` class
method.`),_Fr=l(),x0=a("p"),uFr=o("This class cannot be instantiated directly using "),N2e=a("code"),bFr=o("__init__()"),vFr=o(" (throws an error)."),FFr=l(),Et=a("div"),f(k0.$$.fragment),TFr=l(),j2e=a("p"),MFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),EFr=l(),Wc=a("p"),CFr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),wFr=o("not"),AFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),yFr=o("from_pretrained()"),LFr=o(" to load the model weights."),xFr=l(),G2e=a("p"),kFr=o("Examples:"),SFr=l(),f(S0.$$.fragment),RFr=l(),Co=a("div"),f(R0.$$.fragment),BFr=l(),O2e=a("p"),PFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Fr=l(),yn=a("p"),IFr=o("The model class to instantiate is selected based on the "),V2e=a("code"),qFr=o("model_type"),NFr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),jFr=o("pretrained_model_name_or_path"),DFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),GFr=o("pretrained_model_name_or_path"),OFr=o(":"),VFr=l(),Z=a("ul"),oM=a("li"),Q2e=a("strong"),XFr=o("albert"),zFr=o(" \u2014 "),MQ=a("a"),QFr=o("TFAlbertForQuestionAnswering"),WFr=o(" (ALBERT model)"),HFr=l(),rM=a("li"),W2e=a("strong"),UFr=o("bert"),JFr=o(" \u2014 "),EQ=a("a"),YFr=o("TFBertForQuestionAnswering"),KFr=o(" (BERT model)"),ZFr=l(),tM=a("li"),H2e=a("strong"),eTr=o("camembert"),oTr=o(" \u2014 "),CQ=a("a"),rTr=o("TFCamembertForQuestionAnswering"),tTr=o(" (CamemBERT model)"),aTr=l(),aM=a("li"),U2e=a("strong"),nTr=o("convbert"),sTr=o(" \u2014 "),wQ=a("a"),lTr=o("TFConvBertForQuestionAnswering"),iTr=o(" (ConvBERT model)"),dTr=l(),nM=a("li"),J2e=a("strong"),cTr=o("deberta"),fTr=o(" \u2014 "),AQ=a("a"),mTr=o("TFDebertaForQuestionAnswering"),gTr=o(" (DeBERTa model)"),hTr=l(),sM=a("li"),Y2e=a("strong"),pTr=o("deberta-v2"),_Tr=o(" \u2014 "),yQ=a("a"),uTr=o("TFDebertaV2ForQuestionAnswering"),bTr=o(" (DeBERTa-v2 model)"),vTr=l(),lM=a("li"),K2e=a("strong"),FTr=o("distilbert"),TTr=o(" \u2014 "),LQ=a("a"),MTr=o("TFDistilBertForQuestionAnswering"),ETr=o(" (DistilBERT model)"),CTr=l(),iM=a("li"),Z2e=a("strong"),wTr=o("electra"),ATr=o(" \u2014 "),xQ=a("a"),yTr=o("TFElectraForQuestionAnswering"),LTr=o(" (ELECTRA model)"),xTr=l(),dM=a("li"),e6e=a("strong"),kTr=o("flaubert"),STr=o(" \u2014 "),kQ=a("a"),RTr=o("TFFlaubertForQuestionAnsweringSimple"),BTr=o(" (FlauBERT model)"),PTr=l(),cM=a("li"),o6e=a("strong"),$Tr=o("funnel"),ITr=o(" \u2014 "),SQ=a("a"),qTr=o("TFFunnelForQuestionAnswering"),NTr=o(" (Funnel Transformer model)"),jTr=l(),fM=a("li"),r6e=a("strong"),DTr=o("gptj"),GTr=o(" \u2014 "),RQ=a("a"),OTr=o("TFGPTJForQuestionAnswering"),VTr=o(" (GPT-J model)"),XTr=l(),mM=a("li"),t6e=a("strong"),zTr=o("longformer"),QTr=o(" \u2014 "),BQ=a("a"),WTr=o("TFLongformerForQuestionAnswering"),HTr=o(" (Longformer model)"),UTr=l(),gM=a("li"),a6e=a("strong"),JTr=o("mobilebert"),YTr=o(" \u2014 "),PQ=a("a"),KTr=o("TFMobileBertForQuestionAnswering"),ZTr=o(" (MobileBERT model)"),e8r=l(),hM=a("li"),n6e=a("strong"),o8r=o("mpnet"),r8r=o(" \u2014 "),$Q=a("a"),t8r=o("TFMPNetForQuestionAnswering"),a8r=o(" (MPNet model)"),n8r=l(),pM=a("li"),s6e=a("strong"),s8r=o("rembert"),l8r=o(" \u2014 "),IQ=a("a"),i8r=o("TFRemBertForQuestionAnswering"),d8r=o(" (RemBERT model)"),c8r=l(),_M=a("li"),l6e=a("strong"),f8r=o("roberta"),m8r=o(" \u2014 "),qQ=a("a"),g8r=o("TFRobertaForQuestionAnswering"),h8r=o(" (RoBERTa model)"),p8r=l(),uM=a("li"),i6e=a("strong"),_8r=o("roformer"),u8r=o(" \u2014 "),NQ=a("a"),b8r=o("TFRoFormerForQuestionAnswering"),v8r=o(" (RoFormer model)"),F8r=l(),bM=a("li"),d6e=a("strong"),T8r=o("xlm"),M8r=o(" \u2014 "),jQ=a("a"),E8r=o("TFXLMForQuestionAnsweringSimple"),C8r=o(" (XLM model)"),w8r=l(),vM=a("li"),c6e=a("strong"),A8r=o("xlm-roberta"),y8r=o(" \u2014 "),DQ=a("a"),L8r=o("TFXLMRobertaForQuestionAnswering"),x8r=o(" (XLM-RoBERTa model)"),k8r=l(),FM=a("li"),f6e=a("strong"),S8r=o("xlnet"),R8r=o(" \u2014 "),GQ=a("a"),B8r=o("TFXLNetForQuestionAnsweringSimple"),P8r=o(" (XLNet model)"),$8r=l(),m6e=a("p"),I8r=o("Examples:"),q8r=l(),f(B0.$$.fragment),hPe=l(),Hc=a("h2"),TM=a("a"),g6e=a("span"),f(P0.$$.fragment),N8r=l(),h6e=a("span"),j8r=o("TFAutoModelForVision2Seq"),pPe=l(),kr=a("div"),f($0.$$.fragment),D8r=l(),Uc=a("p"),G8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OQ=a("a"),O8r=o("from_pretrained()"),V8r=o(" class method or the "),VQ=a("a"),X8r=o("from_config()"),z8r=o(` class
method.`),Q8r=l(),I0=a("p"),W8r=o("This class cannot be instantiated directly using "),p6e=a("code"),H8r=o("__init__()"),U8r=o(" (throws an error)."),J8r=l(),Ct=a("div"),f(q0.$$.fragment),Y8r=l(),_6e=a("p"),K8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Z8r=l(),Jc=a("p"),e7r=o(`Note:
Loading a model from its configuration file does `),u6e=a("strong"),o7r=o("not"),r7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),t7r=o("from_pretrained()"),a7r=o(" to load the model weights."),n7r=l(),b6e=a("p"),s7r=o("Examples:"),l7r=l(),f(N0.$$.fragment),i7r=l(),wo=a("div"),f(j0.$$.fragment),d7r=l(),v6e=a("p"),c7r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),f7r=l(),Ln=a("p"),m7r=o("The model class to instantiate is selected based on the "),F6e=a("code"),g7r=o("model_type"),h7r=o(` property of the config object (either
passed as an argument or loaded from `),T6e=a("code"),p7r=o("pretrained_model_name_or_path"),_7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=a("code"),u7r=o("pretrained_model_name_or_path"),b7r=o(":"),v7r=l(),E6e=a("ul"),MM=a("li"),C6e=a("strong"),F7r=o("vision-encoder-decoder"),T7r=o(" \u2014 "),zQ=a("a"),M7r=o("TFVisionEncoderDecoderModel"),E7r=o(" (Vision Encoder decoder model)"),C7r=l(),w6e=a("p"),w7r=o("Examples:"),A7r=l(),f(D0.$$.fragment),_Pe=l(),Yc=a("h2"),EM=a("a"),A6e=a("span"),f(G0.$$.fragment),y7r=l(),y6e=a("span"),L7r=o("TFAutoModelForSpeechSeq2Seq"),uPe=l(),Sr=a("div"),f(O0.$$.fragment),x7r=l(),Kc=a("p"),k7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QQ=a("a"),S7r=o("from_pretrained()"),R7r=o(" class method or the "),WQ=a("a"),B7r=o("from_config()"),P7r=o(` class
method.`),$7r=l(),V0=a("p"),I7r=o("This class cannot be instantiated directly using "),L6e=a("code"),q7r=o("__init__()"),N7r=o(" (throws an error)."),j7r=l(),wt=a("div"),f(X0.$$.fragment),D7r=l(),x6e=a("p"),G7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O7r=l(),Zc=a("p"),V7r=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),X7r=o("not"),z7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),Q7r=o("from_pretrained()"),W7r=o(" to load the model weights."),H7r=l(),S6e=a("p"),U7r=o("Examples:"),J7r=l(),f(z0.$$.fragment),Y7r=l(),Ao=a("div"),f(Q0.$$.fragment),K7r=l(),R6e=a("p"),Z7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eMr=l(),xn=a("p"),oMr=o("The model class to instantiate is selected based on the "),B6e=a("code"),rMr=o("model_type"),tMr=o(` property of the config object (either
passed as an argument or loaded from `),P6e=a("code"),aMr=o("pretrained_model_name_or_path"),nMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),sMr=o("pretrained_model_name_or_path"),lMr=o(":"),iMr=l(),I6e=a("ul"),CM=a("li"),q6e=a("strong"),dMr=o("speech_to_text"),cMr=o(" \u2014 "),UQ=a("a"),fMr=o("TFSpeech2TextForConditionalGeneration"),mMr=o(" (Speech2Text model)"),gMr=l(),N6e=a("p"),hMr=o("Examples:"),pMr=l(),f(W0.$$.fragment),bPe=l(),ef=a("h2"),wM=a("a"),j6e=a("span"),f(H0.$$.fragment),_Mr=l(),D6e=a("span"),uMr=o("FlaxAutoModel"),vPe=l(),Rr=a("div"),f(U0.$$.fragment),bMr=l(),of=a("p"),vMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JQ=a("a"),FMr=o("from_pretrained()"),TMr=o(" class method or the "),YQ=a("a"),MMr=o("from_config()"),EMr=o(` class
method.`),CMr=l(),J0=a("p"),wMr=o("This class cannot be instantiated directly using "),G6e=a("code"),AMr=o("__init__()"),yMr=o(" (throws an error)."),LMr=l(),At=a("div"),f(Y0.$$.fragment),xMr=l(),O6e=a("p"),kMr=o("Instantiates one of the base model classes of the library from a configuration."),SMr=l(),rf=a("p"),RMr=o(`Note:
Loading a model from its configuration file does `),V6e=a("strong"),BMr=o("not"),PMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),$Mr=o("from_pretrained()"),IMr=o(" to load the model weights."),qMr=l(),X6e=a("p"),NMr=o("Examples:"),jMr=l(),f(K0.$$.fragment),DMr=l(),yo=a("div"),f(Z0.$$.fragment),GMr=l(),z6e=a("p"),OMr=o("Instantiate one of the base model classes of the library from a pretrained model."),VMr=l(),kn=a("p"),XMr=o("The model class to instantiate is selected based on the "),Q6e=a("code"),zMr=o("model_type"),QMr=o(` property of the config object (either
passed as an argument or loaded from `),W6e=a("code"),WMr=o("pretrained_model_name_or_path"),HMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=a("code"),UMr=o("pretrained_model_name_or_path"),JMr=o(":"),YMr=l(),z=a("ul"),AM=a("li"),U6e=a("strong"),KMr=o("albert"),ZMr=o(" \u2014 "),ZQ=a("a"),e4r=o("FlaxAlbertModel"),o4r=o(" (ALBERT model)"),r4r=l(),yM=a("li"),J6e=a("strong"),t4r=o("bart"),a4r=o(" \u2014 "),eW=a("a"),n4r=o("FlaxBartModel"),s4r=o(" (BART model)"),l4r=l(),LM=a("li"),Y6e=a("strong"),i4r=o("beit"),d4r=o(" \u2014 "),oW=a("a"),c4r=o("FlaxBeitModel"),f4r=o(" (BEiT model)"),m4r=l(),xM=a("li"),K6e=a("strong"),g4r=o("bert"),h4r=o(" \u2014 "),rW=a("a"),p4r=o("FlaxBertModel"),_4r=o(" (BERT model)"),u4r=l(),kM=a("li"),Z6e=a("strong"),b4r=o("big_bird"),v4r=o(" \u2014 "),tW=a("a"),F4r=o("FlaxBigBirdModel"),T4r=o(" (BigBird model)"),M4r=l(),SM=a("li"),eve=a("strong"),E4r=o("blenderbot"),C4r=o(" \u2014 "),aW=a("a"),w4r=o("FlaxBlenderbotModel"),A4r=o(" (Blenderbot model)"),y4r=l(),RM=a("li"),ove=a("strong"),L4r=o("blenderbot-small"),x4r=o(" \u2014 "),nW=a("a"),k4r=o("FlaxBlenderbotSmallModel"),S4r=o(" (BlenderbotSmall model)"),R4r=l(),BM=a("li"),rve=a("strong"),B4r=o("clip"),P4r=o(" \u2014 "),sW=a("a"),$4r=o("FlaxCLIPModel"),I4r=o(" (CLIP model)"),q4r=l(),PM=a("li"),tve=a("strong"),N4r=o("distilbert"),j4r=o(" \u2014 "),lW=a("a"),D4r=o("FlaxDistilBertModel"),G4r=o(" (DistilBERT model)"),O4r=l(),$M=a("li"),ave=a("strong"),V4r=o("electra"),X4r=o(" \u2014 "),iW=a("a"),z4r=o("FlaxElectraModel"),Q4r=o(" (ELECTRA model)"),W4r=l(),IM=a("li"),nve=a("strong"),H4r=o("gpt2"),U4r=o(" \u2014 "),dW=a("a"),J4r=o("FlaxGPT2Model"),Y4r=o(" (OpenAI GPT-2 model)"),K4r=l(),qM=a("li"),sve=a("strong"),Z4r=o("gpt_neo"),eEr=o(" \u2014 "),cW=a("a"),oEr=o("FlaxGPTNeoModel"),rEr=o(" (GPT Neo model)"),tEr=l(),NM=a("li"),lve=a("strong"),aEr=o("gptj"),nEr=o(" \u2014 "),fW=a("a"),sEr=o("FlaxGPTJModel"),lEr=o(" (GPT-J model)"),iEr=l(),jM=a("li"),ive=a("strong"),dEr=o("marian"),cEr=o(" \u2014 "),mW=a("a"),fEr=o("FlaxMarianModel"),mEr=o(" (Marian model)"),gEr=l(),DM=a("li"),dve=a("strong"),hEr=o("mbart"),pEr=o(" \u2014 "),gW=a("a"),_Er=o("FlaxMBartModel"),uEr=o(" (mBART model)"),bEr=l(),GM=a("li"),cve=a("strong"),vEr=o("mt5"),FEr=o(" \u2014 "),hW=a("a"),TEr=o("FlaxMT5Model"),MEr=o(" (mT5 model)"),EEr=l(),OM=a("li"),fve=a("strong"),CEr=o("pegasus"),wEr=o(" \u2014 "),pW=a("a"),AEr=o("FlaxPegasusModel"),yEr=o(" (Pegasus model)"),LEr=l(),VM=a("li"),mve=a("strong"),xEr=o("roberta"),kEr=o(" \u2014 "),_W=a("a"),SEr=o("FlaxRobertaModel"),REr=o(" (RoBERTa model)"),BEr=l(),XM=a("li"),gve=a("strong"),PEr=o("roformer"),$Er=o(" \u2014 "),uW=a("a"),IEr=o("FlaxRoFormerModel"),qEr=o(" (RoFormer model)"),NEr=l(),zM=a("li"),hve=a("strong"),jEr=o("t5"),DEr=o(" \u2014 "),bW=a("a"),GEr=o("FlaxT5Model"),OEr=o(" (T5 model)"),VEr=l(),QM=a("li"),pve=a("strong"),XEr=o("vision-text-dual-encoder"),zEr=o(" \u2014 "),vW=a("a"),QEr=o("FlaxVisionTextDualEncoderModel"),WEr=o(" (VisionTextDualEncoder model)"),HEr=l(),WM=a("li"),_ve=a("strong"),UEr=o("vit"),JEr=o(" \u2014 "),FW=a("a"),YEr=o("FlaxViTModel"),KEr=o(" (ViT model)"),ZEr=l(),HM=a("li"),uve=a("strong"),e5r=o("wav2vec2"),o5r=o(" \u2014 "),TW=a("a"),r5r=o("FlaxWav2Vec2Model"),t5r=o(" (Wav2Vec2 model)"),a5r=l(),UM=a("li"),bve=a("strong"),n5r=o("xglm"),s5r=o(" \u2014 "),MW=a("a"),l5r=o("FlaxXGLMModel"),i5r=o(" (XGLM model)"),d5r=l(),JM=a("li"),vve=a("strong"),c5r=o("xlm-roberta"),f5r=o(" \u2014 "),EW=a("a"),m5r=o("FlaxXLMRobertaModel"),g5r=o(" (XLM-RoBERTa model)"),h5r=l(),Fve=a("p"),p5r=o("Examples:"),_5r=l(),f(ey.$$.fragment),FPe=l(),tf=a("h2"),YM=a("a"),Tve=a("span"),f(oy.$$.fragment),u5r=l(),Mve=a("span"),b5r=o("FlaxAutoModelForCausalLM"),TPe=l(),Br=a("div"),f(ry.$$.fragment),v5r=l(),af=a("p"),F5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CW=a("a"),T5r=o("from_pretrained()"),M5r=o(" class method or the "),wW=a("a"),E5r=o("from_config()"),C5r=o(` class
method.`),w5r=l(),ty=a("p"),A5r=o("This class cannot be instantiated directly using "),Eve=a("code"),y5r=o("__init__()"),L5r=o(" (throws an error)."),x5r=l(),yt=a("div"),f(ay.$$.fragment),k5r=l(),Cve=a("p"),S5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R5r=l(),nf=a("p"),B5r=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),P5r=o("not"),$5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),I5r=o("from_pretrained()"),q5r=o(" to load the model weights."),N5r=l(),Ave=a("p"),j5r=o("Examples:"),D5r=l(),f(ny.$$.fragment),G5r=l(),Lo=a("div"),f(sy.$$.fragment),O5r=l(),yve=a("p"),V5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X5r=l(),Sn=a("p"),z5r=o("The model class to instantiate is selected based on the "),Lve=a("code"),Q5r=o("model_type"),W5r=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),H5r=o("pretrained_model_name_or_path"),U5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(":"),K5r=l(),ca=a("ul"),KM=a("li"),Sve=a("strong"),Z5r=o("bart"),e3r=o(" \u2014 "),yW=a("a"),o3r=o("FlaxBartForCausalLM"),r3r=o(" (BART model)"),t3r=l(),ZM=a("li"),Rve=a("strong"),a3r=o("gpt2"),n3r=o(" \u2014 "),LW=a("a"),s3r=o("FlaxGPT2LMHeadModel"),l3r=o(" (OpenAI GPT-2 model)"),i3r=l(),e4=a("li"),Bve=a("strong"),d3r=o("gpt_neo"),c3r=o(" \u2014 "),xW=a("a"),f3r=o("FlaxGPTNeoForCausalLM"),m3r=o(" (GPT Neo model)"),g3r=l(),o4=a("li"),Pve=a("strong"),h3r=o("gptj"),p3r=o(" \u2014 "),kW=a("a"),_3r=o("FlaxGPTJForCausalLM"),u3r=o(" (GPT-J model)"),b3r=l(),r4=a("li"),$ve=a("strong"),v3r=o("xglm"),F3r=o(" \u2014 "),SW=a("a"),T3r=o("FlaxXGLMForCausalLM"),M3r=o(" (XGLM model)"),E3r=l(),Ive=a("p"),C3r=o("Examples:"),w3r=l(),f(ly.$$.fragment),MPe=l(),sf=a("h2"),t4=a("a"),qve=a("span"),f(iy.$$.fragment),A3r=l(),Nve=a("span"),y3r=o("FlaxAutoModelForPreTraining"),EPe=l(),Pr=a("div"),f(dy.$$.fragment),L3r=l(),lf=a("p"),x3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RW=a("a"),k3r=o("from_pretrained()"),S3r=o(" class method or the "),BW=a("a"),R3r=o("from_config()"),B3r=o(` class
method.`),P3r=l(),cy=a("p"),$3r=o("This class cannot be instantiated directly using "),jve=a("code"),I3r=o("__init__()"),q3r=o(" (throws an error)."),N3r=l(),Lt=a("div"),f(fy.$$.fragment),j3r=l(),Dve=a("p"),D3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),G3r=l(),df=a("p"),O3r=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),V3r=o("not"),X3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),z3r=o("from_pretrained()"),Q3r=o(" to load the model weights."),W3r=l(),Ove=a("p"),H3r=o("Examples:"),U3r=l(),f(my.$$.fragment),J3r=l(),xo=a("div"),f(gy.$$.fragment),Y3r=l(),Vve=a("p"),K3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z3r=l(),Rn=a("p"),eCr=o("The model class to instantiate is selected based on the "),Xve=a("code"),oCr=o("model_type"),rCr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),nCr=o("pretrained_model_name_or_path"),sCr=o(":"),lCr=l(),me=a("ul"),a4=a("li"),Wve=a("strong"),iCr=o("albert"),dCr=o(" \u2014 "),$W=a("a"),cCr=o("FlaxAlbertForPreTraining"),fCr=o(" (ALBERT model)"),mCr=l(),n4=a("li"),Hve=a("strong"),gCr=o("bart"),hCr=o(" \u2014 "),IW=a("a"),pCr=o("FlaxBartForConditionalGeneration"),_Cr=o(" (BART model)"),uCr=l(),s4=a("li"),Uve=a("strong"),bCr=o("bert"),vCr=o(" \u2014 "),qW=a("a"),FCr=o("FlaxBertForPreTraining"),TCr=o(" (BERT model)"),MCr=l(),l4=a("li"),Jve=a("strong"),ECr=o("big_bird"),CCr=o(" \u2014 "),NW=a("a"),wCr=o("FlaxBigBirdForPreTraining"),ACr=o(" (BigBird model)"),yCr=l(),i4=a("li"),Yve=a("strong"),LCr=o("electra"),xCr=o(" \u2014 "),jW=a("a"),kCr=o("FlaxElectraForPreTraining"),SCr=o(" (ELECTRA model)"),RCr=l(),d4=a("li"),Kve=a("strong"),BCr=o("mbart"),PCr=o(" \u2014 "),DW=a("a"),$Cr=o("FlaxMBartForConditionalGeneration"),ICr=o(" (mBART model)"),qCr=l(),c4=a("li"),Zve=a("strong"),NCr=o("mt5"),jCr=o(" \u2014 "),GW=a("a"),DCr=o("FlaxMT5ForConditionalGeneration"),GCr=o(" (mT5 model)"),OCr=l(),f4=a("li"),eFe=a("strong"),VCr=o("roberta"),XCr=o(" \u2014 "),OW=a("a"),zCr=o("FlaxRobertaForMaskedLM"),QCr=o(" (RoBERTa model)"),WCr=l(),m4=a("li"),oFe=a("strong"),HCr=o("roformer"),UCr=o(" \u2014 "),VW=a("a"),JCr=o("FlaxRoFormerForMaskedLM"),YCr=o(" (RoFormer model)"),KCr=l(),g4=a("li"),rFe=a("strong"),ZCr=o("t5"),ewr=o(" \u2014 "),XW=a("a"),owr=o("FlaxT5ForConditionalGeneration"),rwr=o(" (T5 model)"),twr=l(),h4=a("li"),tFe=a("strong"),awr=o("wav2vec2"),nwr=o(" \u2014 "),zW=a("a"),swr=o("FlaxWav2Vec2ForPreTraining"),lwr=o(" (Wav2Vec2 model)"),iwr=l(),p4=a("li"),aFe=a("strong"),dwr=o("xlm-roberta"),cwr=o(" \u2014 "),QW=a("a"),fwr=o("FlaxXLMRobertaForMaskedLM"),mwr=o(" (XLM-RoBERTa model)"),gwr=l(),nFe=a("p"),hwr=o("Examples:"),pwr=l(),f(hy.$$.fragment),CPe=l(),cf=a("h2"),_4=a("a"),sFe=a("span"),f(py.$$.fragment),_wr=l(),lFe=a("span"),uwr=o("FlaxAutoModelForMaskedLM"),wPe=l(),$r=a("div"),f(_y.$$.fragment),bwr=l(),ff=a("p"),vwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WW=a("a"),Fwr=o("from_pretrained()"),Twr=o(" class method or the "),HW=a("a"),Mwr=o("from_config()"),Ewr=o(` class
method.`),Cwr=l(),uy=a("p"),wwr=o("This class cannot be instantiated directly using "),iFe=a("code"),Awr=o("__init__()"),ywr=o(" (throws an error)."),Lwr=l(),xt=a("div"),f(by.$$.fragment),xwr=l(),dFe=a("p"),kwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Swr=l(),mf=a("p"),Rwr=o(`Note:
Loading a model from its configuration file does `),cFe=a("strong"),Bwr=o("not"),Pwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),$wr=o("from_pretrained()"),Iwr=o(" to load the model weights."),qwr=l(),fFe=a("p"),Nwr=o("Examples:"),jwr=l(),f(vy.$$.fragment),Dwr=l(),ko=a("div"),f(Fy.$$.fragment),Gwr=l(),mFe=a("p"),Owr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vwr=l(),Bn=a("p"),Xwr=o("The model class to instantiate is selected based on the "),gFe=a("code"),zwr=o("model_type"),Qwr=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),Wwr=o("pretrained_model_name_or_path"),Hwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),Uwr=o("pretrained_model_name_or_path"),Jwr=o(":"),Ywr=l(),ve=a("ul"),u4=a("li"),_Fe=a("strong"),Kwr=o("albert"),Zwr=o(" \u2014 "),JW=a("a"),eAr=o("FlaxAlbertForMaskedLM"),oAr=o(" (ALBERT model)"),rAr=l(),b4=a("li"),uFe=a("strong"),tAr=o("bart"),aAr=o(" \u2014 "),YW=a("a"),nAr=o("FlaxBartForConditionalGeneration"),sAr=o(" (BART model)"),lAr=l(),v4=a("li"),bFe=a("strong"),iAr=o("bert"),dAr=o(" \u2014 "),KW=a("a"),cAr=o("FlaxBertForMaskedLM"),fAr=o(" (BERT model)"),mAr=l(),F4=a("li"),vFe=a("strong"),gAr=o("big_bird"),hAr=o(" \u2014 "),ZW=a("a"),pAr=o("FlaxBigBirdForMaskedLM"),_Ar=o(" (BigBird model)"),uAr=l(),T4=a("li"),FFe=a("strong"),bAr=o("distilbert"),vAr=o(" \u2014 "),eH=a("a"),FAr=o("FlaxDistilBertForMaskedLM"),TAr=o(" (DistilBERT model)"),MAr=l(),M4=a("li"),TFe=a("strong"),EAr=o("electra"),CAr=o(" \u2014 "),oH=a("a"),wAr=o("FlaxElectraForMaskedLM"),AAr=o(" (ELECTRA model)"),yAr=l(),E4=a("li"),MFe=a("strong"),LAr=o("mbart"),xAr=o(" \u2014 "),rH=a("a"),kAr=o("FlaxMBartForConditionalGeneration"),SAr=o(" (mBART model)"),RAr=l(),C4=a("li"),EFe=a("strong"),BAr=o("roberta"),PAr=o(" \u2014 "),tH=a("a"),$Ar=o("FlaxRobertaForMaskedLM"),IAr=o(" (RoBERTa model)"),qAr=l(),w4=a("li"),CFe=a("strong"),NAr=o("roformer"),jAr=o(" \u2014 "),aH=a("a"),DAr=o("FlaxRoFormerForMaskedLM"),GAr=o(" (RoFormer model)"),OAr=l(),A4=a("li"),wFe=a("strong"),VAr=o("xlm-roberta"),XAr=o(" \u2014 "),nH=a("a"),zAr=o("FlaxXLMRobertaForMaskedLM"),QAr=o(" (XLM-RoBERTa model)"),WAr=l(),AFe=a("p"),HAr=o("Examples:"),UAr=l(),f(Ty.$$.fragment),APe=l(),gf=a("h2"),y4=a("a"),yFe=a("span"),f(My.$$.fragment),JAr=l(),LFe=a("span"),YAr=o("FlaxAutoModelForSeq2SeqLM"),yPe=l(),Ir=a("div"),f(Ey.$$.fragment),KAr=l(),hf=a("p"),ZAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sH=a("a"),e0r=o("from_pretrained()"),o0r=o(" class method or the "),lH=a("a"),r0r=o("from_config()"),t0r=o(` class
method.`),a0r=l(),Cy=a("p"),n0r=o("This class cannot be instantiated directly using "),xFe=a("code"),s0r=o("__init__()"),l0r=o(" (throws an error)."),i0r=l(),kt=a("div"),f(wy.$$.fragment),d0r=l(),kFe=a("p"),c0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f0r=l(),pf=a("p"),m0r=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),g0r=o("not"),h0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),p0r=o("from_pretrained()"),_0r=o(" to load the model weights."),u0r=l(),RFe=a("p"),b0r=o("Examples:"),v0r=l(),f(Ay.$$.fragment),F0r=l(),So=a("div"),f(yy.$$.fragment),T0r=l(),BFe=a("p"),M0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),E0r=l(),Pn=a("p"),C0r=o("The model class to instantiate is selected based on the "),PFe=a("code"),w0r=o("model_type"),A0r=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),y0r=o("pretrained_model_name_or_path"),L0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),x0r=o("pretrained_model_name_or_path"),k0r=o(":"),S0r=l(),Ee=a("ul"),L4=a("li"),qFe=a("strong"),R0r=o("bart"),B0r=o(" \u2014 "),dH=a("a"),P0r=o("FlaxBartForConditionalGeneration"),$0r=o(" (BART model)"),I0r=l(),x4=a("li"),NFe=a("strong"),q0r=o("blenderbot"),N0r=o(" \u2014 "),cH=a("a"),j0r=o("FlaxBlenderbotForConditionalGeneration"),D0r=o(" (Blenderbot model)"),G0r=l(),k4=a("li"),jFe=a("strong"),O0r=o("blenderbot-small"),V0r=o(" \u2014 "),fH=a("a"),X0r=o("FlaxBlenderbotSmallForConditionalGeneration"),z0r=o(" (BlenderbotSmall model)"),Q0r=l(),S4=a("li"),DFe=a("strong"),W0r=o("encoder-decoder"),H0r=o(" \u2014 "),mH=a("a"),U0r=o("FlaxEncoderDecoderModel"),J0r=o(" (Encoder decoder model)"),Y0r=l(),R4=a("li"),GFe=a("strong"),K0r=o("marian"),Z0r=o(" \u2014 "),gH=a("a"),eyr=o("FlaxMarianMTModel"),oyr=o(" (Marian model)"),ryr=l(),B4=a("li"),OFe=a("strong"),tyr=o("mbart"),ayr=o(" \u2014 "),hH=a("a"),nyr=o("FlaxMBartForConditionalGeneration"),syr=o(" (mBART model)"),lyr=l(),P4=a("li"),VFe=a("strong"),iyr=o("mt5"),dyr=o(" \u2014 "),pH=a("a"),cyr=o("FlaxMT5ForConditionalGeneration"),fyr=o(" (mT5 model)"),myr=l(),$4=a("li"),XFe=a("strong"),gyr=o("pegasus"),hyr=o(" \u2014 "),_H=a("a"),pyr=o("FlaxPegasusForConditionalGeneration"),_yr=o(" (Pegasus model)"),uyr=l(),I4=a("li"),zFe=a("strong"),byr=o("t5"),vyr=o(" \u2014 "),uH=a("a"),Fyr=o("FlaxT5ForConditionalGeneration"),Tyr=o(" (T5 model)"),Myr=l(),QFe=a("p"),Eyr=o("Examples:"),Cyr=l(),f(Ly.$$.fragment),LPe=l(),_f=a("h2"),q4=a("a"),WFe=a("span"),f(xy.$$.fragment),wyr=l(),HFe=a("span"),Ayr=o("FlaxAutoModelForSequenceClassification"),xPe=l(),qr=a("div"),f(ky.$$.fragment),yyr=l(),uf=a("p"),Lyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bH=a("a"),xyr=o("from_pretrained()"),kyr=o(" class method or the "),vH=a("a"),Syr=o("from_config()"),Ryr=o(` class
method.`),Byr=l(),Sy=a("p"),Pyr=o("This class cannot be instantiated directly using "),UFe=a("code"),$yr=o("__init__()"),Iyr=o(" (throws an error)."),qyr=l(),St=a("div"),f(Ry.$$.fragment),Nyr=l(),JFe=a("p"),jyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dyr=l(),bf=a("p"),Gyr=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),Oyr=o("not"),Vyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),Xyr=o("from_pretrained()"),zyr=o(" to load the model weights."),Qyr=l(),KFe=a("p"),Wyr=o("Examples:"),Hyr=l(),f(By.$$.fragment),Uyr=l(),Ro=a("div"),f(Py.$$.fragment),Jyr=l(),ZFe=a("p"),Yyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kyr=l(),$n=a("p"),Zyr=o("The model class to instantiate is selected based on the "),eTe=a("code"),eLr=o("model_type"),oLr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),rLr=o("pretrained_model_name_or_path"),tLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),aLr=o("pretrained_model_name_or_path"),nLr=o(":"),sLr=l(),Fe=a("ul"),N4=a("li"),tTe=a("strong"),lLr=o("albert"),iLr=o(" \u2014 "),TH=a("a"),dLr=o("FlaxAlbertForSequenceClassification"),cLr=o(" (ALBERT model)"),fLr=l(),j4=a("li"),aTe=a("strong"),mLr=o("bart"),gLr=o(" \u2014 "),MH=a("a"),hLr=o("FlaxBartForSequenceClassification"),pLr=o(" (BART model)"),_Lr=l(),D4=a("li"),nTe=a("strong"),uLr=o("bert"),bLr=o(" \u2014 "),EH=a("a"),vLr=o("FlaxBertForSequenceClassification"),FLr=o(" (BERT model)"),TLr=l(),G4=a("li"),sTe=a("strong"),MLr=o("big_bird"),ELr=o(" \u2014 "),CH=a("a"),CLr=o("FlaxBigBirdForSequenceClassification"),wLr=o(" (BigBird model)"),ALr=l(),O4=a("li"),lTe=a("strong"),yLr=o("distilbert"),LLr=o(" \u2014 "),wH=a("a"),xLr=o("FlaxDistilBertForSequenceClassification"),kLr=o(" (DistilBERT model)"),SLr=l(),V4=a("li"),iTe=a("strong"),RLr=o("electra"),BLr=o(" \u2014 "),AH=a("a"),PLr=o("FlaxElectraForSequenceClassification"),$Lr=o(" (ELECTRA model)"),ILr=l(),X4=a("li"),dTe=a("strong"),qLr=o("mbart"),NLr=o(" \u2014 "),yH=a("a"),jLr=o("FlaxMBartForSequenceClassification"),DLr=o(" (mBART model)"),GLr=l(),z4=a("li"),cTe=a("strong"),OLr=o("roberta"),VLr=o(" \u2014 "),LH=a("a"),XLr=o("FlaxRobertaForSequenceClassification"),zLr=o(" (RoBERTa model)"),QLr=l(),Q4=a("li"),fTe=a("strong"),WLr=o("roformer"),HLr=o(" \u2014 "),xH=a("a"),ULr=o("FlaxRoFormerForSequenceClassification"),JLr=o(" (RoFormer model)"),YLr=l(),W4=a("li"),mTe=a("strong"),KLr=o("xlm-roberta"),ZLr=o(" \u2014 "),kH=a("a"),e9r=o("FlaxXLMRobertaForSequenceClassification"),o9r=o(" (XLM-RoBERTa model)"),r9r=l(),gTe=a("p"),t9r=o("Examples:"),a9r=l(),f($y.$$.fragment),kPe=l(),vf=a("h2"),H4=a("a"),hTe=a("span"),f(Iy.$$.fragment),n9r=l(),pTe=a("span"),s9r=o("FlaxAutoModelForQuestionAnswering"),SPe=l(),Nr=a("div"),f(qy.$$.fragment),l9r=l(),Ff=a("p"),i9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SH=a("a"),d9r=o("from_pretrained()"),c9r=o(" class method or the "),RH=a("a"),f9r=o("from_config()"),m9r=o(` class
method.`),g9r=l(),Ny=a("p"),h9r=o("This class cannot be instantiated directly using "),_Te=a("code"),p9r=o("__init__()"),_9r=o(" (throws an error)."),u9r=l(),Rt=a("div"),f(jy.$$.fragment),b9r=l(),uTe=a("p"),v9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),F9r=l(),Tf=a("p"),T9r=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),M9r=o("not"),E9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),C9r=o("from_pretrained()"),w9r=o(" to load the model weights."),A9r=l(),vTe=a("p"),y9r=o("Examples:"),L9r=l(),f(Dy.$$.fragment),x9r=l(),Bo=a("div"),f(Gy.$$.fragment),k9r=l(),FTe=a("p"),S9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),R9r=l(),In=a("p"),B9r=o("The model class to instantiate is selected based on the "),TTe=a("code"),P9r=o("model_type"),$9r=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),I9r=o("pretrained_model_name_or_path"),q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),N9r=o("pretrained_model_name_or_path"),j9r=o(":"),D9r=l(),Te=a("ul"),U4=a("li"),CTe=a("strong"),G9r=o("albert"),O9r=o(" \u2014 "),PH=a("a"),V9r=o("FlaxAlbertForQuestionAnswering"),X9r=o(" (ALBERT model)"),z9r=l(),J4=a("li"),wTe=a("strong"),Q9r=o("bart"),W9r=o(" \u2014 "),$H=a("a"),H9r=o("FlaxBartForQuestionAnswering"),U9r=o(" (BART model)"),J9r=l(),Y4=a("li"),ATe=a("strong"),Y9r=o("bert"),K9r=o(" \u2014 "),IH=a("a"),Z9r=o("FlaxBertForQuestionAnswering"),exr=o(" (BERT model)"),oxr=l(),K4=a("li"),yTe=a("strong"),rxr=o("big_bird"),txr=o(" \u2014 "),qH=a("a"),axr=o("FlaxBigBirdForQuestionAnswering"),nxr=o(" (BigBird model)"),sxr=l(),Z4=a("li"),LTe=a("strong"),lxr=o("distilbert"),ixr=o(" \u2014 "),NH=a("a"),dxr=o("FlaxDistilBertForQuestionAnswering"),cxr=o(" (DistilBERT model)"),fxr=l(),eE=a("li"),xTe=a("strong"),mxr=o("electra"),gxr=o(" \u2014 "),jH=a("a"),hxr=o("FlaxElectraForQuestionAnswering"),pxr=o(" (ELECTRA model)"),_xr=l(),oE=a("li"),kTe=a("strong"),uxr=o("mbart"),bxr=o(" \u2014 "),DH=a("a"),vxr=o("FlaxMBartForQuestionAnswering"),Fxr=o(" (mBART model)"),Txr=l(),rE=a("li"),STe=a("strong"),Mxr=o("roberta"),Exr=o(" \u2014 "),GH=a("a"),Cxr=o("FlaxRobertaForQuestionAnswering"),wxr=o(" (RoBERTa model)"),Axr=l(),tE=a("li"),RTe=a("strong"),yxr=o("roformer"),Lxr=o(" \u2014 "),OH=a("a"),xxr=o("FlaxRoFormerForQuestionAnswering"),kxr=o(" (RoFormer model)"),Sxr=l(),aE=a("li"),BTe=a("strong"),Rxr=o("xlm-roberta"),Bxr=o(" \u2014 "),VH=a("a"),Pxr=o("FlaxXLMRobertaForQuestionAnswering"),$xr=o(" (XLM-RoBERTa model)"),Ixr=l(),PTe=a("p"),qxr=o("Examples:"),Nxr=l(),f(Oy.$$.fragment),RPe=l(),Mf=a("h2"),nE=a("a"),$Te=a("span"),f(Vy.$$.fragment),jxr=l(),ITe=a("span"),Dxr=o("FlaxAutoModelForTokenClassification"),BPe=l(),jr=a("div"),f(Xy.$$.fragment),Gxr=l(),Ef=a("p"),Oxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XH=a("a"),Vxr=o("from_pretrained()"),Xxr=o(" class method or the "),zH=a("a"),zxr=o("from_config()"),Qxr=o(` class
method.`),Wxr=l(),zy=a("p"),Hxr=o("This class cannot be instantiated directly using "),qTe=a("code"),Uxr=o("__init__()"),Jxr=o(" (throws an error)."),Yxr=l(),Bt=a("div"),f(Qy.$$.fragment),Kxr=l(),NTe=a("p"),Zxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ekr=l(),Cf=a("p"),okr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),rkr=o("not"),tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),akr=o("from_pretrained()"),nkr=o(" to load the model weights."),skr=l(),DTe=a("p"),lkr=o("Examples:"),ikr=l(),f(Wy.$$.fragment),dkr=l(),Po=a("div"),f(Hy.$$.fragment),ckr=l(),GTe=a("p"),fkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mkr=l(),qn=a("p"),gkr=o("The model class to instantiate is selected based on the "),OTe=a("code"),hkr=o("model_type"),pkr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),_kr=o("pretrained_model_name_or_path"),ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),bkr=o("pretrained_model_name_or_path"),vkr=o(":"),Fkr=l(),Be=a("ul"),sE=a("li"),zTe=a("strong"),Tkr=o("albert"),Mkr=o(" \u2014 "),WH=a("a"),Ekr=o("FlaxAlbertForTokenClassification"),Ckr=o(" (ALBERT model)"),wkr=l(),lE=a("li"),QTe=a("strong"),Akr=o("bert"),ykr=o(" \u2014 "),HH=a("a"),Lkr=o("FlaxBertForTokenClassification"),xkr=o(" (BERT model)"),kkr=l(),iE=a("li"),WTe=a("strong"),Skr=o("big_bird"),Rkr=o(" \u2014 "),UH=a("a"),Bkr=o("FlaxBigBirdForTokenClassification"),Pkr=o(" (BigBird model)"),$kr=l(),dE=a("li"),HTe=a("strong"),Ikr=o("distilbert"),qkr=o(" \u2014 "),JH=a("a"),Nkr=o("FlaxDistilBertForTokenClassification"),jkr=o(" (DistilBERT model)"),Dkr=l(),cE=a("li"),UTe=a("strong"),Gkr=o("electra"),Okr=o(" \u2014 "),YH=a("a"),Vkr=o("FlaxElectraForTokenClassification"),Xkr=o(" (ELECTRA model)"),zkr=l(),fE=a("li"),JTe=a("strong"),Qkr=o("roberta"),Wkr=o(" \u2014 "),KH=a("a"),Hkr=o("FlaxRobertaForTokenClassification"),Ukr=o(" (RoBERTa model)"),Jkr=l(),mE=a("li"),YTe=a("strong"),Ykr=o("roformer"),Kkr=o(" \u2014 "),ZH=a("a"),Zkr=o("FlaxRoFormerForTokenClassification"),eSr=o(" (RoFormer model)"),oSr=l(),gE=a("li"),KTe=a("strong"),rSr=o("xlm-roberta"),tSr=o(" \u2014 "),eU=a("a"),aSr=o("FlaxXLMRobertaForTokenClassification"),nSr=o(" (XLM-RoBERTa model)"),sSr=l(),ZTe=a("p"),lSr=o("Examples:"),iSr=l(),f(Uy.$$.fragment),PPe=l(),wf=a("h2"),hE=a("a"),e8e=a("span"),f(Jy.$$.fragment),dSr=l(),o8e=a("span"),cSr=o("FlaxAutoModelForMultipleChoice"),$Pe=l(),Dr=a("div"),f(Yy.$$.fragment),fSr=l(),Af=a("p"),mSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oU=a("a"),gSr=o("from_pretrained()"),hSr=o(" class method or the "),rU=a("a"),pSr=o("from_config()"),_Sr=o(` class
method.`),uSr=l(),Ky=a("p"),bSr=o("This class cannot be instantiated directly using "),r8e=a("code"),vSr=o("__init__()"),FSr=o(" (throws an error)."),TSr=l(),Pt=a("div"),f(Zy.$$.fragment),MSr=l(),t8e=a("p"),ESr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CSr=l(),yf=a("p"),wSr=o(`Note:
Loading a model from its configuration file does `),a8e=a("strong"),ASr=o("not"),ySr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),LSr=o("from_pretrained()"),xSr=o(" to load the model weights."),kSr=l(),n8e=a("p"),SSr=o("Examples:"),RSr=l(),f(eL.$$.fragment),BSr=l(),$o=a("div"),f(oL.$$.fragment),PSr=l(),s8e=a("p"),$Sr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ISr=l(),Nn=a("p"),qSr=o("The model class to instantiate is selected based on the "),l8e=a("code"),NSr=o("model_type"),jSr=o(` property of the config object (either
passed as an argument or loaded from `),i8e=a("code"),DSr=o("pretrained_model_name_or_path"),GSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d8e=a("code"),OSr=o("pretrained_model_name_or_path"),VSr=o(":"),XSr=l(),Pe=a("ul"),pE=a("li"),c8e=a("strong"),zSr=o("albert"),QSr=o(" \u2014 "),aU=a("a"),WSr=o("FlaxAlbertForMultipleChoice"),HSr=o(" (ALBERT model)"),USr=l(),_E=a("li"),f8e=a("strong"),JSr=o("bert"),YSr=o(" \u2014 "),nU=a("a"),KSr=o("FlaxBertForMultipleChoice"),ZSr=o(" (BERT model)"),eRr=l(),uE=a("li"),m8e=a("strong"),oRr=o("big_bird"),rRr=o(" \u2014 "),sU=a("a"),tRr=o("FlaxBigBirdForMultipleChoice"),aRr=o(" (BigBird model)"),nRr=l(),bE=a("li"),g8e=a("strong"),sRr=o("distilbert"),lRr=o(" \u2014 "),lU=a("a"),iRr=o("FlaxDistilBertForMultipleChoice"),dRr=o(" (DistilBERT model)"),cRr=l(),vE=a("li"),h8e=a("strong"),fRr=o("electra"),mRr=o(" \u2014 "),iU=a("a"),gRr=o("FlaxElectraForMultipleChoice"),hRr=o(" (ELECTRA model)"),pRr=l(),FE=a("li"),p8e=a("strong"),_Rr=o("roberta"),uRr=o(" \u2014 "),dU=a("a"),bRr=o("FlaxRobertaForMultipleChoice"),vRr=o(" (RoBERTa model)"),FRr=l(),TE=a("li"),_8e=a("strong"),TRr=o("roformer"),MRr=o(" \u2014 "),cU=a("a"),ERr=o("FlaxRoFormerForMultipleChoice"),CRr=o(" (RoFormer model)"),wRr=l(),ME=a("li"),u8e=a("strong"),ARr=o("xlm-roberta"),yRr=o(" \u2014 "),fU=a("a"),LRr=o("FlaxXLMRobertaForMultipleChoice"),xRr=o(" (XLM-RoBERTa model)"),kRr=l(),b8e=a("p"),SRr=o("Examples:"),RRr=l(),f(rL.$$.fragment),IPe=l(),Lf=a("h2"),EE=a("a"),v8e=a("span"),f(tL.$$.fragment),BRr=l(),F8e=a("span"),PRr=o("FlaxAutoModelForNextSentencePrediction"),qPe=l(),Gr=a("div"),f(aL.$$.fragment),$Rr=l(),xf=a("p"),IRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mU=a("a"),qRr=o("from_pretrained()"),NRr=o(" class method or the "),gU=a("a"),jRr=o("from_config()"),DRr=o(` class
method.`),GRr=l(),nL=a("p"),ORr=o("This class cannot be instantiated directly using "),T8e=a("code"),VRr=o("__init__()"),XRr=o(" (throws an error)."),zRr=l(),$t=a("div"),f(sL.$$.fragment),QRr=l(),M8e=a("p"),WRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HRr=l(),kf=a("p"),URr=o(`Note:
Loading a model from its configuration file does `),E8e=a("strong"),JRr=o("not"),YRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),KRr=o("from_pretrained()"),ZRr=o(" to load the model weights."),eBr=l(),C8e=a("p"),oBr=o("Examples:"),rBr=l(),f(lL.$$.fragment),tBr=l(),Io=a("div"),f(iL.$$.fragment),aBr=l(),w8e=a("p"),nBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sBr=l(),jn=a("p"),lBr=o("The model class to instantiate is selected based on the "),A8e=a("code"),iBr=o("model_type"),dBr=o(` property of the config object (either
passed as an argument or loaded from `),y8e=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L8e=a("code"),mBr=o("pretrained_model_name_or_path"),gBr=o(":"),hBr=l(),x8e=a("ul"),CE=a("li"),k8e=a("strong"),pBr=o("bert"),_Br=o(" \u2014 "),pU=a("a"),uBr=o("FlaxBertForNextSentencePrediction"),bBr=o(" (BERT model)"),vBr=l(),S8e=a("p"),FBr=o("Examples:"),TBr=l(),f(dL.$$.fragment),NPe=l(),Sf=a("h2"),wE=a("a"),R8e=a("span"),f(cL.$$.fragment),MBr=l(),B8e=a("span"),EBr=o("FlaxAutoModelForImageClassification"),jPe=l(),Or=a("div"),f(fL.$$.fragment),CBr=l(),Rf=a("p"),wBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_U=a("a"),ABr=o("from_pretrained()"),yBr=o(" class method or the "),uU=a("a"),LBr=o("from_config()"),xBr=o(` class
method.`),kBr=l(),mL=a("p"),SBr=o("This class cannot be instantiated directly using "),P8e=a("code"),RBr=o("__init__()"),BBr=o(" (throws an error)."),PBr=l(),It=a("div"),f(gL.$$.fragment),$Br=l(),$8e=a("p"),IBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qBr=l(),Bf=a("p"),NBr=o(`Note:
Loading a model from its configuration file does `),I8e=a("strong"),jBr=o("not"),DBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),GBr=o("from_pretrained()"),OBr=o(" to load the model weights."),VBr=l(),q8e=a("p"),XBr=o("Examples:"),zBr=l(),f(hL.$$.fragment),QBr=l(),qo=a("div"),f(pL.$$.fragment),WBr=l(),N8e=a("p"),HBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),UBr=l(),Dn=a("p"),JBr=o("The model class to instantiate is selected based on the "),j8e=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),D8e=a("code"),ZBr=o("pretrained_model_name_or_path"),ePr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=a("code"),oPr=o("pretrained_model_name_or_path"),rPr=o(":"),tPr=l(),_L=a("ul"),AE=a("li"),O8e=a("strong"),aPr=o("beit"),nPr=o(" \u2014 "),vU=a("a"),sPr=o("FlaxBeitForImageClassification"),lPr=o(" (BEiT model)"),iPr=l(),yE=a("li"),V8e=a("strong"),dPr=o("vit"),cPr=o(" \u2014 "),FU=a("a"),fPr=o("FlaxViTForImageClassification"),mPr=o(" (ViT model)"),gPr=l(),X8e=a("p"),hPr=o("Examples:"),pPr=l(),f(uL.$$.fragment),DPe=l(),Pf=a("h2"),LE=a("a"),z8e=a("span"),f(bL.$$.fragment),_Pr=l(),Q8e=a("span"),uPr=o("FlaxAutoModelForVision2Seq"),GPe=l(),Vr=a("div"),f(vL.$$.fragment),bPr=l(),$f=a("p"),vPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TU=a("a"),FPr=o("from_pretrained()"),TPr=o(" class method or the "),MU=a("a"),MPr=o("from_config()"),EPr=o(` class
method.`),CPr=l(),FL=a("p"),wPr=o("This class cannot be instantiated directly using "),W8e=a("code"),APr=o("__init__()"),yPr=o(" (throws an error)."),LPr=l(),qt=a("div"),f(TL.$$.fragment),xPr=l(),H8e=a("p"),kPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SPr=l(),If=a("p"),RPr=o(`Note:
Loading a model from its configuration file does `),U8e=a("strong"),BPr=o("not"),PPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),$Pr=o("from_pretrained()"),IPr=o(" to load the model weights."),qPr=l(),J8e=a("p"),NPr=o("Examples:"),jPr=l(),f(ML.$$.fragment),DPr=l(),No=a("div"),f(EL.$$.fragment),GPr=l(),Y8e=a("p"),OPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VPr=l(),Gn=a("p"),XPr=o("The model class to instantiate is selected based on the "),K8e=a("code"),zPr=o("model_type"),QPr=o(` property of the config object (either
passed as an argument or loaded from `),Z8e=a("code"),WPr=o("pretrained_model_name_or_path"),HPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=a("code"),UPr=o("pretrained_model_name_or_path"),JPr=o(":"),YPr=l(),o7e=a("ul"),xE=a("li"),r7e=a("strong"),KPr=o("vision-encoder-decoder"),ZPr=o(" \u2014 "),CU=a("a"),e$r=o("FlaxVisionEncoderDecoderModel"),o$r=o(" (Vision Encoder decoder model)"),r$r=l(),t7e=a("p"),t$r=o("Examples:"),a$r=l(),f(CL.$$.fragment),this.h()},l(c){const u=Z3t('[data-svelte="svelte-1phssyn"]',document.head);ee=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var wL=s(ce);Ce=n(wL,"A",{id:!0,class:!0,href:!0});var a7e=s(Ce);lo=n(a7e,"SPAN",{});var n7e=s(lo);m(he.$$.fragment,n7e),n7e.forEach(t),a7e.forEach(t),Me=i(wL),Xo=n(wL,"SPAN",{});var s$r=s(Xo);ji=r(s$r,"Auto Classes"),s$r.forEach(t),wL.forEach(t),jf=i(c),fa=n(c,"P",{});var VPe=s(fa);Di=r(VPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Gi=n(VPe,"CODE",{});var l$r=s(Gi);k5=r(l$r,"from_pretrained()"),l$r.forEach(t),Df=r(VPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),VPe.forEach(t),xe=i(c),co=n(c,"P",{});var kE=s(co);Oi=r(kE,"Instantiating one of "),On=n(kE,"A",{href:!0});var i$r=s(On);S5=r(i$r,"AutoConfig"),i$r.forEach(t),Vn=r(kE,", "),Xn=n(kE,"A",{href:!0});var d$r=s(Xn);R5=r(d$r,"AutoModel"),d$r.forEach(t),Vi=r(kE,`, and
`),zn=n(kE,"A",{href:!0});var c$r=s(zn);B5=r(c$r,"AutoTokenizer"),c$r.forEach(t),Xi=r(kE," will directly create a class of the relevant architecture. For instance"),kE.forEach(t),Gf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var XPe=s(ue);C9=r(XPe,"will create a model that is an instance of "),zi=n(XPe,"A",{href:!0});var f$r=s(zi);w9=r(f$r,"BertModel"),f$r.forEach(t),A9=r(XPe,"."),XPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var zPe=s(Ga);y9=r(zPe,"There is one class of "),Of=n(zPe,"CODE",{});var m$r=s(Of);L9=r(m$r,"AutoModel"),m$r.forEach(t),eqe=r(zPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),zPe.forEach(t),GRe=i(c),Qi=n(c,"H2",{class:!0});var QPe=s(Qi);Vf=n(QPe,"A",{id:!0,class:!0,href:!0});var g$r=s(Vf);uY=n(g$r,"SPAN",{});var h$r=s(uY);m(P5.$$.fragment,h$r),h$r.forEach(t),g$r.forEach(t),oqe=i(QPe),bY=n(QPe,"SPAN",{});var p$r=s(bY);rqe=r(p$r,"Extending the Auto Classes"),p$r.forEach(t),QPe.forEach(t),ORe=i(c),Qn=n(c,"P",{});var wU=s(Qn);tqe=r(wU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),vY=n(wU,"CODE",{});var _$r=s(vY);aqe=r(_$r,"NewModel"),_$r.forEach(t),nqe=r(wU,", make sure you have a "),FY=n(wU,"CODE",{});var u$r=s(FY);sqe=r(u$r,"NewModelConfig"),u$r.forEach(t),lqe=r(wU,` then you can add those to the auto
classes like this:`),wU.forEach(t),VRe=i(c),m($5.$$.fragment,c),XRe=i(c),x9=n(c,"P",{});var b$r=s(x9);iqe=r(b$r,"You will then be able to use the auto classes like you would usually do!"),b$r.forEach(t),zRe=i(c),m(Xf.$$.fragment,c),QRe=i(c),Wi=n(c,"H2",{class:!0});var WPe=s(Wi);zf=n(WPe,"A",{id:!0,class:!0,href:!0});var v$r=s(zf);TY=n(v$r,"SPAN",{});var F$r=s(TY);m(I5.$$.fragment,F$r),F$r.forEach(t),v$r.forEach(t),dqe=i(WPe),MY=n(WPe,"SPAN",{});var T$r=s(MY);cqe=r(T$r,"AutoConfig"),T$r.forEach(t),WPe.forEach(t),WRe=i(c),Qo=n(c,"DIV",{class:!0});var zs=s(Qo);m(q5.$$.fragment,zs),fqe=i(zs),N5=n(zs,"P",{});var HPe=s(N5);mqe=r(HPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),k9=n(HPe,"A",{href:!0});var M$r=s(k9);gqe=r(M$r,"from_pretrained()"),M$r.forEach(t),hqe=r(HPe," class method."),HPe.forEach(t),pqe=i(zs),j5=n(zs,"P",{});var UPe=s(j5);_qe=r(UPe,"This class cannot be instantiated directly using "),EY=n(UPe,"CODE",{});var E$r=s(EY);uqe=r(E$r,"__init__()"),E$r.forEach(t),bqe=r(UPe," (throws an error)."),UPe.forEach(t),vqe=i(zs),mo=n(zs,"DIV",{class:!0});var ga=s(mo);m(D5.$$.fragment,ga),Fqe=i(ga),CY=n(ga,"P",{});var C$r=s(CY);Tqe=r(C$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),C$r.forEach(t),Mqe=i(ga),Hi=n(ga,"P",{});var AU=s(Hi);Eqe=r(AU,"The configuration class to instantiate is selected based on the "),wY=n(AU,"CODE",{});var w$r=s(wY);Cqe=r(w$r,"model_type"),w$r.forEach(t),wqe=r(AU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),AY=n(AU,"CODE",{});var A$r=s(AY);Aqe=r(A$r,"pretrained_model_name_or_path"),A$r.forEach(t),yqe=r(AU,":"),AU.forEach(t),Lqe=i(ga),v=n(ga,"UL",{});var F=s(v);Qf=n(F,"LI",{});var s7e=s(Qf);yY=n(s7e,"STRONG",{});var y$r=s(yY);xqe=r(y$r,"albert"),y$r.forEach(t),kqe=r(s7e," \u2014 "),S9=n(s7e,"A",{href:!0});var L$r=s(S9);Sqe=r(L$r,"AlbertConfig"),L$r.forEach(t),Rqe=r(s7e," (ALBERT model)"),s7e.forEach(t),Bqe=i(F),Wf=n(F,"LI",{});var l7e=s(Wf);LY=n(l7e,"STRONG",{});var x$r=s(LY);Pqe=r(x$r,"bart"),x$r.forEach(t),$qe=r(l7e," \u2014 "),R9=n(l7e,"A",{href:!0});var k$r=s(R9);Iqe=r(k$r,"BartConfig"),k$r.forEach(t),qqe=r(l7e," (BART model)"),l7e.forEach(t),Nqe=i(F),Hf=n(F,"LI",{});var i7e=s(Hf);xY=n(i7e,"STRONG",{});var S$r=s(xY);jqe=r(S$r,"beit"),S$r.forEach(t),Dqe=r(i7e," \u2014 "),B9=n(i7e,"A",{href:!0});var R$r=s(B9);Gqe=r(R$r,"BeitConfig"),R$r.forEach(t),Oqe=r(i7e," (BEiT model)"),i7e.forEach(t),Vqe=i(F),Uf=n(F,"LI",{});var d7e=s(Uf);kY=n(d7e,"STRONG",{});var B$r=s(kY);Xqe=r(B$r,"bert"),B$r.forEach(t),zqe=r(d7e," \u2014 "),P9=n(d7e,"A",{href:!0});var P$r=s(P9);Qqe=r(P$r,"BertConfig"),P$r.forEach(t),Wqe=r(d7e," (BERT model)"),d7e.forEach(t),Hqe=i(F),Jf=n(F,"LI",{});var c7e=s(Jf);SY=n(c7e,"STRONG",{});var $$r=s(SY);Uqe=r($$r,"bert-generation"),$$r.forEach(t),Jqe=r(c7e," \u2014 "),$9=n(c7e,"A",{href:!0});var I$r=s($9);Yqe=r(I$r,"BertGenerationConfig"),I$r.forEach(t),Kqe=r(c7e," (Bert Generation model)"),c7e.forEach(t),Zqe=i(F),Yf=n(F,"LI",{});var f7e=s(Yf);RY=n(f7e,"STRONG",{});var q$r=s(RY);eNe=r(q$r,"big_bird"),q$r.forEach(t),oNe=r(f7e," \u2014 "),I9=n(f7e,"A",{href:!0});var N$r=s(I9);rNe=r(N$r,"BigBirdConfig"),N$r.forEach(t),tNe=r(f7e," (BigBird model)"),f7e.forEach(t),aNe=i(F),Kf=n(F,"LI",{});var m7e=s(Kf);BY=n(m7e,"STRONG",{});var j$r=s(BY);nNe=r(j$r,"bigbird_pegasus"),j$r.forEach(t),sNe=r(m7e," \u2014 "),q9=n(m7e,"A",{href:!0});var D$r=s(q9);lNe=r(D$r,"BigBirdPegasusConfig"),D$r.forEach(t),iNe=r(m7e," (BigBirdPegasus model)"),m7e.forEach(t),dNe=i(F),Zf=n(F,"LI",{});var g7e=s(Zf);PY=n(g7e,"STRONG",{});var G$r=s(PY);cNe=r(G$r,"blenderbot"),G$r.forEach(t),fNe=r(g7e," \u2014 "),N9=n(g7e,"A",{href:!0});var O$r=s(N9);mNe=r(O$r,"BlenderbotConfig"),O$r.forEach(t),gNe=r(g7e," (Blenderbot model)"),g7e.forEach(t),hNe=i(F),em=n(F,"LI",{});var h7e=s(em);$Y=n(h7e,"STRONG",{});var V$r=s($Y);pNe=r(V$r,"blenderbot-small"),V$r.forEach(t),_Ne=r(h7e," \u2014 "),j9=n(h7e,"A",{href:!0});var X$r=s(j9);uNe=r(X$r,"BlenderbotSmallConfig"),X$r.forEach(t),bNe=r(h7e," (BlenderbotSmall model)"),h7e.forEach(t),vNe=i(F),om=n(F,"LI",{});var p7e=s(om);IY=n(p7e,"STRONG",{});var z$r=s(IY);FNe=r(z$r,"camembert"),z$r.forEach(t),TNe=r(p7e," \u2014 "),D9=n(p7e,"A",{href:!0});var Q$r=s(D9);MNe=r(Q$r,"CamembertConfig"),Q$r.forEach(t),ENe=r(p7e," (CamemBERT model)"),p7e.forEach(t),CNe=i(F),rm=n(F,"LI",{});var _7e=s(rm);qY=n(_7e,"STRONG",{});var W$r=s(qY);wNe=r(W$r,"canine"),W$r.forEach(t),ANe=r(_7e," \u2014 "),G9=n(_7e,"A",{href:!0});var H$r=s(G9);yNe=r(H$r,"CanineConfig"),H$r.forEach(t),LNe=r(_7e," (Canine model)"),_7e.forEach(t),xNe=i(F),tm=n(F,"LI",{});var u7e=s(tm);NY=n(u7e,"STRONG",{});var U$r=s(NY);kNe=r(U$r,"clip"),U$r.forEach(t),SNe=r(u7e," \u2014 "),O9=n(u7e,"A",{href:!0});var J$r=s(O9);RNe=r(J$r,"CLIPConfig"),J$r.forEach(t),BNe=r(u7e," (CLIP model)"),u7e.forEach(t),PNe=i(F),am=n(F,"LI",{});var b7e=s(am);jY=n(b7e,"STRONG",{});var Y$r=s(jY);$Ne=r(Y$r,"convbert"),Y$r.forEach(t),INe=r(b7e," \u2014 "),V9=n(b7e,"A",{href:!0});var K$r=s(V9);qNe=r(K$r,"ConvBertConfig"),K$r.forEach(t),NNe=r(b7e," (ConvBERT model)"),b7e.forEach(t),jNe=i(F),nm=n(F,"LI",{});var v7e=s(nm);DY=n(v7e,"STRONG",{});var Z$r=s(DY);DNe=r(Z$r,"convnext"),Z$r.forEach(t),GNe=r(v7e," \u2014 "),X9=n(v7e,"A",{href:!0});var eIr=s(X9);ONe=r(eIr,"ConvNextConfig"),eIr.forEach(t),VNe=r(v7e," (ConvNext model)"),v7e.forEach(t),XNe=i(F),sm=n(F,"LI",{});var F7e=s(sm);GY=n(F7e,"STRONG",{});var oIr=s(GY);zNe=r(oIr,"ctrl"),oIr.forEach(t),QNe=r(F7e," \u2014 "),z9=n(F7e,"A",{href:!0});var rIr=s(z9);WNe=r(rIr,"CTRLConfig"),rIr.forEach(t),HNe=r(F7e," (CTRL model)"),F7e.forEach(t),UNe=i(F),lm=n(F,"LI",{});var T7e=s(lm);OY=n(T7e,"STRONG",{});var tIr=s(OY);JNe=r(tIr,"data2vec-audio"),tIr.forEach(t),YNe=r(T7e," \u2014 "),Q9=n(T7e,"A",{href:!0});var aIr=s(Q9);KNe=r(aIr,"Data2VecAudioConfig"),aIr.forEach(t),ZNe=r(T7e," (Data2VecAudio model)"),T7e.forEach(t),eje=i(F),im=n(F,"LI",{});var M7e=s(im);VY=n(M7e,"STRONG",{});var nIr=s(VY);oje=r(nIr,"data2vec-text"),nIr.forEach(t),rje=r(M7e," \u2014 "),W9=n(M7e,"A",{href:!0});var sIr=s(W9);tje=r(sIr,"Data2VecTextConfig"),sIr.forEach(t),aje=r(M7e," (Data2VecText model)"),M7e.forEach(t),nje=i(F),dm=n(F,"LI",{});var E7e=s(dm);XY=n(E7e,"STRONG",{});var lIr=s(XY);sje=r(lIr,"data2vec-vision"),lIr.forEach(t),lje=r(E7e," \u2014 "),H9=n(E7e,"A",{href:!0});var iIr=s(H9);ije=r(iIr,"Data2VecVisionConfig"),iIr.forEach(t),dje=r(E7e," (Data2VecVision model)"),E7e.forEach(t),cje=i(F),cm=n(F,"LI",{});var C7e=s(cm);zY=n(C7e,"STRONG",{});var dIr=s(zY);fje=r(dIr,"deberta"),dIr.forEach(t),mje=r(C7e," \u2014 "),U9=n(C7e,"A",{href:!0});var cIr=s(U9);gje=r(cIr,"DebertaConfig"),cIr.forEach(t),hje=r(C7e," (DeBERTa model)"),C7e.forEach(t),pje=i(F),fm=n(F,"LI",{});var w7e=s(fm);QY=n(w7e,"STRONG",{});var fIr=s(QY);_je=r(fIr,"deberta-v2"),fIr.forEach(t),uje=r(w7e," \u2014 "),J9=n(w7e,"A",{href:!0});var mIr=s(J9);bje=r(mIr,"DebertaV2Config"),mIr.forEach(t),vje=r(w7e," (DeBERTa-v2 model)"),w7e.forEach(t),Fje=i(F),mm=n(F,"LI",{});var A7e=s(mm);WY=n(A7e,"STRONG",{});var gIr=s(WY);Tje=r(gIr,"decision_transformer"),gIr.forEach(t),Mje=r(A7e," \u2014 "),Y9=n(A7e,"A",{href:!0});var hIr=s(Y9);Eje=r(hIr,"DecisionTransformerConfig"),hIr.forEach(t),Cje=r(A7e," (Decision Transformer model)"),A7e.forEach(t),wje=i(F),gm=n(F,"LI",{});var y7e=s(gm);HY=n(y7e,"STRONG",{});var pIr=s(HY);Aje=r(pIr,"deit"),pIr.forEach(t),yje=r(y7e," \u2014 "),K9=n(y7e,"A",{href:!0});var _Ir=s(K9);Lje=r(_Ir,"DeiTConfig"),_Ir.forEach(t),xje=r(y7e," (DeiT model)"),y7e.forEach(t),kje=i(F),hm=n(F,"LI",{});var L7e=s(hm);UY=n(L7e,"STRONG",{});var uIr=s(UY);Sje=r(uIr,"detr"),uIr.forEach(t),Rje=r(L7e," \u2014 "),Z9=n(L7e,"A",{href:!0});var bIr=s(Z9);Bje=r(bIr,"DetrConfig"),bIr.forEach(t),Pje=r(L7e," (DETR model)"),L7e.forEach(t),$je=i(F),pm=n(F,"LI",{});var x7e=s(pm);JY=n(x7e,"STRONG",{});var vIr=s(JY);Ije=r(vIr,"distilbert"),vIr.forEach(t),qje=r(x7e," \u2014 "),ex=n(x7e,"A",{href:!0});var FIr=s(ex);Nje=r(FIr,"DistilBertConfig"),FIr.forEach(t),jje=r(x7e," (DistilBERT model)"),x7e.forEach(t),Dje=i(F),_m=n(F,"LI",{});var k7e=s(_m);YY=n(k7e,"STRONG",{});var TIr=s(YY);Gje=r(TIr,"dpr"),TIr.forEach(t),Oje=r(k7e," \u2014 "),ox=n(k7e,"A",{href:!0});var MIr=s(ox);Vje=r(MIr,"DPRConfig"),MIr.forEach(t),Xje=r(k7e," (DPR model)"),k7e.forEach(t),zje=i(F),um=n(F,"LI",{});var S7e=s(um);KY=n(S7e,"STRONG",{});var EIr=s(KY);Qje=r(EIr,"dpt"),EIr.forEach(t),Wje=r(S7e," \u2014 "),rx=n(S7e,"A",{href:!0});var CIr=s(rx);Hje=r(CIr,"DPTConfig"),CIr.forEach(t),Uje=r(S7e," (DPT model)"),S7e.forEach(t),Jje=i(F),bm=n(F,"LI",{});var R7e=s(bm);ZY=n(R7e,"STRONG",{});var wIr=s(ZY);Yje=r(wIr,"electra"),wIr.forEach(t),Kje=r(R7e," \u2014 "),tx=n(R7e,"A",{href:!0});var AIr=s(tx);Zje=r(AIr,"ElectraConfig"),AIr.forEach(t),eDe=r(R7e," (ELECTRA model)"),R7e.forEach(t),oDe=i(F),vm=n(F,"LI",{});var B7e=s(vm);eK=n(B7e,"STRONG",{});var yIr=s(eK);rDe=r(yIr,"encoder-decoder"),yIr.forEach(t),tDe=r(B7e," \u2014 "),ax=n(B7e,"A",{href:!0});var LIr=s(ax);aDe=r(LIr,"EncoderDecoderConfig"),LIr.forEach(t),nDe=r(B7e," (Encoder decoder model)"),B7e.forEach(t),sDe=i(F),Fm=n(F,"LI",{});var P7e=s(Fm);oK=n(P7e,"STRONG",{});var xIr=s(oK);lDe=r(xIr,"flaubert"),xIr.forEach(t),iDe=r(P7e," \u2014 "),nx=n(P7e,"A",{href:!0});var kIr=s(nx);dDe=r(kIr,"FlaubertConfig"),kIr.forEach(t),cDe=r(P7e," (FlauBERT model)"),P7e.forEach(t),fDe=i(F),Tm=n(F,"LI",{});var $7e=s(Tm);rK=n($7e,"STRONG",{});var SIr=s(rK);mDe=r(SIr,"fnet"),SIr.forEach(t),gDe=r($7e," \u2014 "),sx=n($7e,"A",{href:!0});var RIr=s(sx);hDe=r(RIr,"FNetConfig"),RIr.forEach(t),pDe=r($7e," (FNet model)"),$7e.forEach(t),_De=i(F),Mm=n(F,"LI",{});var I7e=s(Mm);tK=n(I7e,"STRONG",{});var BIr=s(tK);uDe=r(BIr,"fsmt"),BIr.forEach(t),bDe=r(I7e," \u2014 "),lx=n(I7e,"A",{href:!0});var PIr=s(lx);vDe=r(PIr,"FSMTConfig"),PIr.forEach(t),FDe=r(I7e," (FairSeq Machine-Translation model)"),I7e.forEach(t),TDe=i(F),Em=n(F,"LI",{});var q7e=s(Em);aK=n(q7e,"STRONG",{});var $Ir=s(aK);MDe=r($Ir,"funnel"),$Ir.forEach(t),EDe=r(q7e," \u2014 "),ix=n(q7e,"A",{href:!0});var IIr=s(ix);CDe=r(IIr,"FunnelConfig"),IIr.forEach(t),wDe=r(q7e," (Funnel Transformer model)"),q7e.forEach(t),ADe=i(F),Cm=n(F,"LI",{});var N7e=s(Cm);nK=n(N7e,"STRONG",{});var qIr=s(nK);yDe=r(qIr,"glpn"),qIr.forEach(t),LDe=r(N7e," \u2014 "),dx=n(N7e,"A",{href:!0});var NIr=s(dx);xDe=r(NIr,"GLPNConfig"),NIr.forEach(t),kDe=r(N7e," (GLPN model)"),N7e.forEach(t),SDe=i(F),wm=n(F,"LI",{});var j7e=s(wm);sK=n(j7e,"STRONG",{});var jIr=s(sK);RDe=r(jIr,"gpt2"),jIr.forEach(t),BDe=r(j7e," \u2014 "),cx=n(j7e,"A",{href:!0});var DIr=s(cx);PDe=r(DIr,"GPT2Config"),DIr.forEach(t),$De=r(j7e," (OpenAI GPT-2 model)"),j7e.forEach(t),IDe=i(F),Am=n(F,"LI",{});var D7e=s(Am);lK=n(D7e,"STRONG",{});var GIr=s(lK);qDe=r(GIr,"gpt_neo"),GIr.forEach(t),NDe=r(D7e," \u2014 "),fx=n(D7e,"A",{href:!0});var OIr=s(fx);jDe=r(OIr,"GPTNeoConfig"),OIr.forEach(t),DDe=r(D7e," (GPT Neo model)"),D7e.forEach(t),GDe=i(F),ym=n(F,"LI",{});var G7e=s(ym);iK=n(G7e,"STRONG",{});var VIr=s(iK);ODe=r(VIr,"gptj"),VIr.forEach(t),VDe=r(G7e," \u2014 "),mx=n(G7e,"A",{href:!0});var XIr=s(mx);XDe=r(XIr,"GPTJConfig"),XIr.forEach(t),zDe=r(G7e," (GPT-J model)"),G7e.forEach(t),QDe=i(F),Lm=n(F,"LI",{});var O7e=s(Lm);dK=n(O7e,"STRONG",{});var zIr=s(dK);WDe=r(zIr,"hubert"),zIr.forEach(t),HDe=r(O7e," \u2014 "),gx=n(O7e,"A",{href:!0});var QIr=s(gx);UDe=r(QIr,"HubertConfig"),QIr.forEach(t),JDe=r(O7e," (Hubert model)"),O7e.forEach(t),YDe=i(F),xm=n(F,"LI",{});var V7e=s(xm);cK=n(V7e,"STRONG",{});var WIr=s(cK);KDe=r(WIr,"ibert"),WIr.forEach(t),ZDe=r(V7e," \u2014 "),hx=n(V7e,"A",{href:!0});var HIr=s(hx);eGe=r(HIr,"IBertConfig"),HIr.forEach(t),oGe=r(V7e," (I-BERT model)"),V7e.forEach(t),rGe=i(F),km=n(F,"LI",{});var X7e=s(km);fK=n(X7e,"STRONG",{});var UIr=s(fK);tGe=r(UIr,"imagegpt"),UIr.forEach(t),aGe=r(X7e," \u2014 "),px=n(X7e,"A",{href:!0});var JIr=s(px);nGe=r(JIr,"ImageGPTConfig"),JIr.forEach(t),sGe=r(X7e," (ImageGPT model)"),X7e.forEach(t),lGe=i(F),Sm=n(F,"LI",{});var z7e=s(Sm);mK=n(z7e,"STRONG",{});var YIr=s(mK);iGe=r(YIr,"layoutlm"),YIr.forEach(t),dGe=r(z7e," \u2014 "),_x=n(z7e,"A",{href:!0});var KIr=s(_x);cGe=r(KIr,"LayoutLMConfig"),KIr.forEach(t),fGe=r(z7e," (LayoutLM model)"),z7e.forEach(t),mGe=i(F),Rm=n(F,"LI",{});var Q7e=s(Rm);gK=n(Q7e,"STRONG",{});var ZIr=s(gK);gGe=r(ZIr,"layoutlmv2"),ZIr.forEach(t),hGe=r(Q7e," \u2014 "),ux=n(Q7e,"A",{href:!0});var eqr=s(ux);pGe=r(eqr,"LayoutLMv2Config"),eqr.forEach(t),_Ge=r(Q7e," (LayoutLMv2 model)"),Q7e.forEach(t),uGe=i(F),Bm=n(F,"LI",{});var W7e=s(Bm);hK=n(W7e,"STRONG",{});var oqr=s(hK);bGe=r(oqr,"led"),oqr.forEach(t),vGe=r(W7e," \u2014 "),bx=n(W7e,"A",{href:!0});var rqr=s(bx);FGe=r(rqr,"LEDConfig"),rqr.forEach(t),TGe=r(W7e," (LED model)"),W7e.forEach(t),MGe=i(F),Pm=n(F,"LI",{});var H7e=s(Pm);pK=n(H7e,"STRONG",{});var tqr=s(pK);EGe=r(tqr,"longformer"),tqr.forEach(t),CGe=r(H7e," \u2014 "),vx=n(H7e,"A",{href:!0});var aqr=s(vx);wGe=r(aqr,"LongformerConfig"),aqr.forEach(t),AGe=r(H7e," (Longformer model)"),H7e.forEach(t),yGe=i(F),$m=n(F,"LI",{});var U7e=s($m);_K=n(U7e,"STRONG",{});var nqr=s(_K);LGe=r(nqr,"luke"),nqr.forEach(t),xGe=r(U7e," \u2014 "),Fx=n(U7e,"A",{href:!0});var sqr=s(Fx);kGe=r(sqr,"LukeConfig"),sqr.forEach(t),SGe=r(U7e," (LUKE model)"),U7e.forEach(t),RGe=i(F),Im=n(F,"LI",{});var J7e=s(Im);uK=n(J7e,"STRONG",{});var lqr=s(uK);BGe=r(lqr,"lxmert"),lqr.forEach(t),PGe=r(J7e," \u2014 "),Tx=n(J7e,"A",{href:!0});var iqr=s(Tx);$Ge=r(iqr,"LxmertConfig"),iqr.forEach(t),IGe=r(J7e," (LXMERT model)"),J7e.forEach(t),qGe=i(F),qm=n(F,"LI",{});var Y7e=s(qm);bK=n(Y7e,"STRONG",{});var dqr=s(bK);NGe=r(dqr,"m2m_100"),dqr.forEach(t),jGe=r(Y7e," \u2014 "),Mx=n(Y7e,"A",{href:!0});var cqr=s(Mx);DGe=r(cqr,"M2M100Config"),cqr.forEach(t),GGe=r(Y7e," (M2M100 model)"),Y7e.forEach(t),OGe=i(F),Nm=n(F,"LI",{});var K7e=s(Nm);vK=n(K7e,"STRONG",{});var fqr=s(vK);VGe=r(fqr,"marian"),fqr.forEach(t),XGe=r(K7e," \u2014 "),Ex=n(K7e,"A",{href:!0});var mqr=s(Ex);zGe=r(mqr,"MarianConfig"),mqr.forEach(t),QGe=r(K7e," (Marian model)"),K7e.forEach(t),WGe=i(F),jm=n(F,"LI",{});var Z7e=s(jm);FK=n(Z7e,"STRONG",{});var gqr=s(FK);HGe=r(gqr,"maskformer"),gqr.forEach(t),UGe=r(Z7e," \u2014 "),Cx=n(Z7e,"A",{href:!0});var hqr=s(Cx);JGe=r(hqr,"MaskFormerConfig"),hqr.forEach(t),YGe=r(Z7e," (MaskFormer model)"),Z7e.forEach(t),KGe=i(F),Dm=n(F,"LI",{});var eMe=s(Dm);TK=n(eMe,"STRONG",{});var pqr=s(TK);ZGe=r(pqr,"mbart"),pqr.forEach(t),eOe=r(eMe," \u2014 "),wx=n(eMe,"A",{href:!0});var _qr=s(wx);oOe=r(_qr,"MBartConfig"),_qr.forEach(t),rOe=r(eMe," (mBART model)"),eMe.forEach(t),tOe=i(F),Gm=n(F,"LI",{});var oMe=s(Gm);MK=n(oMe,"STRONG",{});var uqr=s(MK);aOe=r(uqr,"megatron-bert"),uqr.forEach(t),nOe=r(oMe," \u2014 "),Ax=n(oMe,"A",{href:!0});var bqr=s(Ax);sOe=r(bqr,"MegatronBertConfig"),bqr.forEach(t),lOe=r(oMe," (MegatronBert model)"),oMe.forEach(t),iOe=i(F),Om=n(F,"LI",{});var rMe=s(Om);EK=n(rMe,"STRONG",{});var vqr=s(EK);dOe=r(vqr,"mobilebert"),vqr.forEach(t),cOe=r(rMe," \u2014 "),yx=n(rMe,"A",{href:!0});var Fqr=s(yx);fOe=r(Fqr,"MobileBertConfig"),Fqr.forEach(t),mOe=r(rMe," (MobileBERT model)"),rMe.forEach(t),gOe=i(F),Vm=n(F,"LI",{});var tMe=s(Vm);CK=n(tMe,"STRONG",{});var Tqr=s(CK);hOe=r(Tqr,"mpnet"),Tqr.forEach(t),pOe=r(tMe," \u2014 "),Lx=n(tMe,"A",{href:!0});var Mqr=s(Lx);_Oe=r(Mqr,"MPNetConfig"),Mqr.forEach(t),uOe=r(tMe," (MPNet model)"),tMe.forEach(t),bOe=i(F),Xm=n(F,"LI",{});var aMe=s(Xm);wK=n(aMe,"STRONG",{});var Eqr=s(wK);vOe=r(Eqr,"mt5"),Eqr.forEach(t),FOe=r(aMe," \u2014 "),xx=n(aMe,"A",{href:!0});var Cqr=s(xx);TOe=r(Cqr,"MT5Config"),Cqr.forEach(t),MOe=r(aMe," (mT5 model)"),aMe.forEach(t),EOe=i(F),zm=n(F,"LI",{});var nMe=s(zm);AK=n(nMe,"STRONG",{});var wqr=s(AK);COe=r(wqr,"nystromformer"),wqr.forEach(t),wOe=r(nMe," \u2014 "),kx=n(nMe,"A",{href:!0});var Aqr=s(kx);AOe=r(Aqr,"NystromformerConfig"),Aqr.forEach(t),yOe=r(nMe," (Nystromformer model)"),nMe.forEach(t),LOe=i(F),Qm=n(F,"LI",{});var sMe=s(Qm);yK=n(sMe,"STRONG",{});var yqr=s(yK);xOe=r(yqr,"openai-gpt"),yqr.forEach(t),kOe=r(sMe," \u2014 "),Sx=n(sMe,"A",{href:!0});var Lqr=s(Sx);SOe=r(Lqr,"OpenAIGPTConfig"),Lqr.forEach(t),ROe=r(sMe," (OpenAI GPT model)"),sMe.forEach(t),BOe=i(F),Wm=n(F,"LI",{});var lMe=s(Wm);LK=n(lMe,"STRONG",{});var xqr=s(LK);POe=r(xqr,"pegasus"),xqr.forEach(t),$Oe=r(lMe," \u2014 "),Rx=n(lMe,"A",{href:!0});var kqr=s(Rx);IOe=r(kqr,"PegasusConfig"),kqr.forEach(t),qOe=r(lMe," (Pegasus model)"),lMe.forEach(t),NOe=i(F),Hm=n(F,"LI",{});var iMe=s(Hm);xK=n(iMe,"STRONG",{});var Sqr=s(xK);jOe=r(Sqr,"perceiver"),Sqr.forEach(t),DOe=r(iMe," \u2014 "),Bx=n(iMe,"A",{href:!0});var Rqr=s(Bx);GOe=r(Rqr,"PerceiverConfig"),Rqr.forEach(t),OOe=r(iMe," (Perceiver model)"),iMe.forEach(t),VOe=i(F),Um=n(F,"LI",{});var dMe=s(Um);kK=n(dMe,"STRONG",{});var Bqr=s(kK);XOe=r(Bqr,"plbart"),Bqr.forEach(t),zOe=r(dMe," \u2014 "),Px=n(dMe,"A",{href:!0});var Pqr=s(Px);QOe=r(Pqr,"PLBartConfig"),Pqr.forEach(t),WOe=r(dMe," (PLBart model)"),dMe.forEach(t),HOe=i(F),Jm=n(F,"LI",{});var cMe=s(Jm);SK=n(cMe,"STRONG",{});var $qr=s(SK);UOe=r($qr,"poolformer"),$qr.forEach(t),JOe=r(cMe," \u2014 "),$x=n(cMe,"A",{href:!0});var Iqr=s($x);YOe=r(Iqr,"PoolFormerConfig"),Iqr.forEach(t),KOe=r(cMe," (PoolFormer model)"),cMe.forEach(t),ZOe=i(F),Ym=n(F,"LI",{});var fMe=s(Ym);RK=n(fMe,"STRONG",{});var qqr=s(RK);eVe=r(qqr,"prophetnet"),qqr.forEach(t),oVe=r(fMe," \u2014 "),Ix=n(fMe,"A",{href:!0});var Nqr=s(Ix);rVe=r(Nqr,"ProphetNetConfig"),Nqr.forEach(t),tVe=r(fMe," (ProphetNet model)"),fMe.forEach(t),aVe=i(F),Km=n(F,"LI",{});var mMe=s(Km);BK=n(mMe,"STRONG",{});var jqr=s(BK);nVe=r(jqr,"qdqbert"),jqr.forEach(t),sVe=r(mMe," \u2014 "),qx=n(mMe,"A",{href:!0});var Dqr=s(qx);lVe=r(Dqr,"QDQBertConfig"),Dqr.forEach(t),iVe=r(mMe," (QDQBert model)"),mMe.forEach(t),dVe=i(F),Zm=n(F,"LI",{});var gMe=s(Zm);PK=n(gMe,"STRONG",{});var Gqr=s(PK);cVe=r(Gqr,"rag"),Gqr.forEach(t),fVe=r(gMe," \u2014 "),Nx=n(gMe,"A",{href:!0});var Oqr=s(Nx);mVe=r(Oqr,"RagConfig"),Oqr.forEach(t),gVe=r(gMe," (RAG model)"),gMe.forEach(t),hVe=i(F),eg=n(F,"LI",{});var hMe=s(eg);$K=n(hMe,"STRONG",{});var Vqr=s($K);pVe=r(Vqr,"realm"),Vqr.forEach(t),_Ve=r(hMe," \u2014 "),jx=n(hMe,"A",{href:!0});var Xqr=s(jx);uVe=r(Xqr,"RealmConfig"),Xqr.forEach(t),bVe=r(hMe," (Realm model)"),hMe.forEach(t),vVe=i(F),og=n(F,"LI",{});var pMe=s(og);IK=n(pMe,"STRONG",{});var zqr=s(IK);FVe=r(zqr,"reformer"),zqr.forEach(t),TVe=r(pMe," \u2014 "),Dx=n(pMe,"A",{href:!0});var Qqr=s(Dx);MVe=r(Qqr,"ReformerConfig"),Qqr.forEach(t),EVe=r(pMe," (Reformer model)"),pMe.forEach(t),CVe=i(F),rg=n(F,"LI",{});var _Me=s(rg);qK=n(_Me,"STRONG",{});var Wqr=s(qK);wVe=r(Wqr,"regnet"),Wqr.forEach(t),AVe=r(_Me," \u2014 "),Gx=n(_Me,"A",{href:!0});var Hqr=s(Gx);yVe=r(Hqr,"RegNetConfig"),Hqr.forEach(t),LVe=r(_Me," (RegNet model)"),_Me.forEach(t),xVe=i(F),tg=n(F,"LI",{});var uMe=s(tg);NK=n(uMe,"STRONG",{});var Uqr=s(NK);kVe=r(Uqr,"rembert"),Uqr.forEach(t),SVe=r(uMe," \u2014 "),Ox=n(uMe,"A",{href:!0});var Jqr=s(Ox);RVe=r(Jqr,"RemBertConfig"),Jqr.forEach(t),BVe=r(uMe," (RemBERT model)"),uMe.forEach(t),PVe=i(F),ag=n(F,"LI",{});var bMe=s(ag);jK=n(bMe,"STRONG",{});var Yqr=s(jK);$Ve=r(Yqr,"resnet"),Yqr.forEach(t),IVe=r(bMe," \u2014 "),Vx=n(bMe,"A",{href:!0});var Kqr=s(Vx);qVe=r(Kqr,"ResNetConfig"),Kqr.forEach(t),NVe=r(bMe," (ResNet model)"),bMe.forEach(t),jVe=i(F),ng=n(F,"LI",{});var vMe=s(ng);DK=n(vMe,"STRONG",{});var Zqr=s(DK);DVe=r(Zqr,"retribert"),Zqr.forEach(t),GVe=r(vMe," \u2014 "),Xx=n(vMe,"A",{href:!0});var eNr=s(Xx);OVe=r(eNr,"RetriBertConfig"),eNr.forEach(t),VVe=r(vMe," (RetriBERT model)"),vMe.forEach(t),XVe=i(F),sg=n(F,"LI",{});var FMe=s(sg);GK=n(FMe,"STRONG",{});var oNr=s(GK);zVe=r(oNr,"roberta"),oNr.forEach(t),QVe=r(FMe," \u2014 "),zx=n(FMe,"A",{href:!0});var rNr=s(zx);WVe=r(rNr,"RobertaConfig"),rNr.forEach(t),HVe=r(FMe," (RoBERTa model)"),FMe.forEach(t),UVe=i(F),lg=n(F,"LI",{});var TMe=s(lg);OK=n(TMe,"STRONG",{});var tNr=s(OK);JVe=r(tNr,"roformer"),tNr.forEach(t),YVe=r(TMe," \u2014 "),Qx=n(TMe,"A",{href:!0});var aNr=s(Qx);KVe=r(aNr,"RoFormerConfig"),aNr.forEach(t),ZVe=r(TMe," (RoFormer model)"),TMe.forEach(t),eXe=i(F),ig=n(F,"LI",{});var MMe=s(ig);VK=n(MMe,"STRONG",{});var nNr=s(VK);oXe=r(nNr,"segformer"),nNr.forEach(t),rXe=r(MMe," \u2014 "),Wx=n(MMe,"A",{href:!0});var sNr=s(Wx);tXe=r(sNr,"SegformerConfig"),sNr.forEach(t),aXe=r(MMe," (SegFormer model)"),MMe.forEach(t),nXe=i(F),dg=n(F,"LI",{});var EMe=s(dg);XK=n(EMe,"STRONG",{});var lNr=s(XK);sXe=r(lNr,"sew"),lNr.forEach(t),lXe=r(EMe," \u2014 "),Hx=n(EMe,"A",{href:!0});var iNr=s(Hx);iXe=r(iNr,"SEWConfig"),iNr.forEach(t),dXe=r(EMe," (SEW model)"),EMe.forEach(t),cXe=i(F),cg=n(F,"LI",{});var CMe=s(cg);zK=n(CMe,"STRONG",{});var dNr=s(zK);fXe=r(dNr,"sew-d"),dNr.forEach(t),mXe=r(CMe," \u2014 "),Ux=n(CMe,"A",{href:!0});var cNr=s(Ux);gXe=r(cNr,"SEWDConfig"),cNr.forEach(t),hXe=r(CMe," (SEW-D model)"),CMe.forEach(t),pXe=i(F),fg=n(F,"LI",{});var wMe=s(fg);QK=n(wMe,"STRONG",{});var fNr=s(QK);_Xe=r(fNr,"speech-encoder-decoder"),fNr.forEach(t),uXe=r(wMe," \u2014 "),Jx=n(wMe,"A",{href:!0});var mNr=s(Jx);bXe=r(mNr,"SpeechEncoderDecoderConfig"),mNr.forEach(t),vXe=r(wMe," (Speech Encoder decoder model)"),wMe.forEach(t),FXe=i(F),mg=n(F,"LI",{});var AMe=s(mg);WK=n(AMe,"STRONG",{});var gNr=s(WK);TXe=r(gNr,"speech_to_text"),gNr.forEach(t),MXe=r(AMe," \u2014 "),Yx=n(AMe,"A",{href:!0});var hNr=s(Yx);EXe=r(hNr,"Speech2TextConfig"),hNr.forEach(t),CXe=r(AMe," (Speech2Text model)"),AMe.forEach(t),wXe=i(F),gg=n(F,"LI",{});var yMe=s(gg);HK=n(yMe,"STRONG",{});var pNr=s(HK);AXe=r(pNr,"speech_to_text_2"),pNr.forEach(t),yXe=r(yMe," \u2014 "),Kx=n(yMe,"A",{href:!0});var _Nr=s(Kx);LXe=r(_Nr,"Speech2Text2Config"),_Nr.forEach(t),xXe=r(yMe," (Speech2Text2 model)"),yMe.forEach(t),kXe=i(F),hg=n(F,"LI",{});var LMe=s(hg);UK=n(LMe,"STRONG",{});var uNr=s(UK);SXe=r(uNr,"splinter"),uNr.forEach(t),RXe=r(LMe," \u2014 "),Zx=n(LMe,"A",{href:!0});var bNr=s(Zx);BXe=r(bNr,"SplinterConfig"),bNr.forEach(t),PXe=r(LMe," (Splinter model)"),LMe.forEach(t),$Xe=i(F),pg=n(F,"LI",{});var xMe=s(pg);JK=n(xMe,"STRONG",{});var vNr=s(JK);IXe=r(vNr,"squeezebert"),vNr.forEach(t),qXe=r(xMe," \u2014 "),ek=n(xMe,"A",{href:!0});var FNr=s(ek);NXe=r(FNr,"SqueezeBertConfig"),FNr.forEach(t),jXe=r(xMe," (SqueezeBERT model)"),xMe.forEach(t),DXe=i(F),_g=n(F,"LI",{});var kMe=s(_g);YK=n(kMe,"STRONG",{});var TNr=s(YK);GXe=r(TNr,"swin"),TNr.forEach(t),OXe=r(kMe," \u2014 "),ok=n(kMe,"A",{href:!0});var MNr=s(ok);VXe=r(MNr,"SwinConfig"),MNr.forEach(t),XXe=r(kMe," (Swin model)"),kMe.forEach(t),zXe=i(F),ug=n(F,"LI",{});var SMe=s(ug);KK=n(SMe,"STRONG",{});var ENr=s(KK);QXe=r(ENr,"t5"),ENr.forEach(t),WXe=r(SMe," \u2014 "),rk=n(SMe,"A",{href:!0});var CNr=s(rk);HXe=r(CNr,"T5Config"),CNr.forEach(t),UXe=r(SMe," (T5 model)"),SMe.forEach(t),JXe=i(F),bg=n(F,"LI",{});var RMe=s(bg);ZK=n(RMe,"STRONG",{});var wNr=s(ZK);YXe=r(wNr,"tapas"),wNr.forEach(t),KXe=r(RMe," \u2014 "),tk=n(RMe,"A",{href:!0});var ANr=s(tk);ZXe=r(ANr,"TapasConfig"),ANr.forEach(t),eze=r(RMe," (TAPAS model)"),RMe.forEach(t),oze=i(F),vg=n(F,"LI",{});var BMe=s(vg);eZ=n(BMe,"STRONG",{});var yNr=s(eZ);rze=r(yNr,"tapex"),yNr.forEach(t),tze=r(BMe," \u2014 "),ak=n(BMe,"A",{href:!0});var LNr=s(ak);aze=r(LNr,"BartConfig"),LNr.forEach(t),nze=r(BMe," (TAPEX model)"),BMe.forEach(t),sze=i(F),Fg=n(F,"LI",{});var PMe=s(Fg);oZ=n(PMe,"STRONG",{});var xNr=s(oZ);lze=r(xNr,"transfo-xl"),xNr.forEach(t),ize=r(PMe," \u2014 "),nk=n(PMe,"A",{href:!0});var kNr=s(nk);dze=r(kNr,"TransfoXLConfig"),kNr.forEach(t),cze=r(PMe," (Transformer-XL model)"),PMe.forEach(t),fze=i(F),Tg=n(F,"LI",{});var $Me=s(Tg);rZ=n($Me,"STRONG",{});var SNr=s(rZ);mze=r(SNr,"trocr"),SNr.forEach(t),gze=r($Me," \u2014 "),sk=n($Me,"A",{href:!0});var RNr=s(sk);hze=r(RNr,"TrOCRConfig"),RNr.forEach(t),pze=r($Me," (TrOCR model)"),$Me.forEach(t),_ze=i(F),Mg=n(F,"LI",{});var IMe=s(Mg);tZ=n(IMe,"STRONG",{});var BNr=s(tZ);uze=r(BNr,"unispeech"),BNr.forEach(t),bze=r(IMe," \u2014 "),lk=n(IMe,"A",{href:!0});var PNr=s(lk);vze=r(PNr,"UniSpeechConfig"),PNr.forEach(t),Fze=r(IMe," (UniSpeech model)"),IMe.forEach(t),Tze=i(F),Eg=n(F,"LI",{});var qMe=s(Eg);aZ=n(qMe,"STRONG",{});var $Nr=s(aZ);Mze=r($Nr,"unispeech-sat"),$Nr.forEach(t),Eze=r(qMe," \u2014 "),ik=n(qMe,"A",{href:!0});var INr=s(ik);Cze=r(INr,"UniSpeechSatConfig"),INr.forEach(t),wze=r(qMe," (UniSpeechSat model)"),qMe.forEach(t),Aze=i(F),Cg=n(F,"LI",{});var NMe=s(Cg);nZ=n(NMe,"STRONG",{});var qNr=s(nZ);yze=r(qNr,"van"),qNr.forEach(t),Lze=r(NMe," \u2014 "),dk=n(NMe,"A",{href:!0});var NNr=s(dk);xze=r(NNr,"VanConfig"),NNr.forEach(t),kze=r(NMe," (VAN model)"),NMe.forEach(t),Sze=i(F),wg=n(F,"LI",{});var jMe=s(wg);sZ=n(jMe,"STRONG",{});var jNr=s(sZ);Rze=r(jNr,"vilt"),jNr.forEach(t),Bze=r(jMe," \u2014 "),ck=n(jMe,"A",{href:!0});var DNr=s(ck);Pze=r(DNr,"ViltConfig"),DNr.forEach(t),$ze=r(jMe," (ViLT model)"),jMe.forEach(t),Ize=i(F),Ag=n(F,"LI",{});var DMe=s(Ag);lZ=n(DMe,"STRONG",{});var GNr=s(lZ);qze=r(GNr,"vision-encoder-decoder"),GNr.forEach(t),Nze=r(DMe," \u2014 "),fk=n(DMe,"A",{href:!0});var ONr=s(fk);jze=r(ONr,"VisionEncoderDecoderConfig"),ONr.forEach(t),Dze=r(DMe," (Vision Encoder decoder model)"),DMe.forEach(t),Gze=i(F),yg=n(F,"LI",{});var GMe=s(yg);iZ=n(GMe,"STRONG",{});var VNr=s(iZ);Oze=r(VNr,"vision-text-dual-encoder"),VNr.forEach(t),Vze=r(GMe," \u2014 "),mk=n(GMe,"A",{href:!0});var XNr=s(mk);Xze=r(XNr,"VisionTextDualEncoderConfig"),XNr.forEach(t),zze=r(GMe," (VisionTextDualEncoder model)"),GMe.forEach(t),Qze=i(F),Lg=n(F,"LI",{});var OMe=s(Lg);dZ=n(OMe,"STRONG",{});var zNr=s(dZ);Wze=r(zNr,"visual_bert"),zNr.forEach(t),Hze=r(OMe," \u2014 "),gk=n(OMe,"A",{href:!0});var QNr=s(gk);Uze=r(QNr,"VisualBertConfig"),QNr.forEach(t),Jze=r(OMe," (VisualBert model)"),OMe.forEach(t),Yze=i(F),xg=n(F,"LI",{});var VMe=s(xg);cZ=n(VMe,"STRONG",{});var WNr=s(cZ);Kze=r(WNr,"vit"),WNr.forEach(t),Zze=r(VMe," \u2014 "),hk=n(VMe,"A",{href:!0});var HNr=s(hk);eQe=r(HNr,"ViTConfig"),HNr.forEach(t),oQe=r(VMe," (ViT model)"),VMe.forEach(t),rQe=i(F),kg=n(F,"LI",{});var XMe=s(kg);fZ=n(XMe,"STRONG",{});var UNr=s(fZ);tQe=r(UNr,"vit_mae"),UNr.forEach(t),aQe=r(XMe," \u2014 "),pk=n(XMe,"A",{href:!0});var JNr=s(pk);nQe=r(JNr,"ViTMAEConfig"),JNr.forEach(t),sQe=r(XMe," (ViTMAE model)"),XMe.forEach(t),lQe=i(F),Sg=n(F,"LI",{});var zMe=s(Sg);mZ=n(zMe,"STRONG",{});var YNr=s(mZ);iQe=r(YNr,"wav2vec2"),YNr.forEach(t),dQe=r(zMe," \u2014 "),_k=n(zMe,"A",{href:!0});var KNr=s(_k);cQe=r(KNr,"Wav2Vec2Config"),KNr.forEach(t),fQe=r(zMe," (Wav2Vec2 model)"),zMe.forEach(t),mQe=i(F),Rg=n(F,"LI",{});var QMe=s(Rg);gZ=n(QMe,"STRONG",{});var ZNr=s(gZ);gQe=r(ZNr,"wavlm"),ZNr.forEach(t),hQe=r(QMe," \u2014 "),uk=n(QMe,"A",{href:!0});var ejr=s(uk);pQe=r(ejr,"WavLMConfig"),ejr.forEach(t),_Qe=r(QMe," (WavLM model)"),QMe.forEach(t),uQe=i(F),Bg=n(F,"LI",{});var WMe=s(Bg);hZ=n(WMe,"STRONG",{});var ojr=s(hZ);bQe=r(ojr,"xglm"),ojr.forEach(t),vQe=r(WMe," \u2014 "),bk=n(WMe,"A",{href:!0});var rjr=s(bk);FQe=r(rjr,"XGLMConfig"),rjr.forEach(t),TQe=r(WMe," (XGLM model)"),WMe.forEach(t),MQe=i(F),Pg=n(F,"LI",{});var HMe=s(Pg);pZ=n(HMe,"STRONG",{});var tjr=s(pZ);EQe=r(tjr,"xlm"),tjr.forEach(t),CQe=r(HMe," \u2014 "),vk=n(HMe,"A",{href:!0});var ajr=s(vk);wQe=r(ajr,"XLMConfig"),ajr.forEach(t),AQe=r(HMe," (XLM model)"),HMe.forEach(t),yQe=i(F),$g=n(F,"LI",{});var UMe=s($g);_Z=n(UMe,"STRONG",{});var njr=s(_Z);LQe=r(njr,"xlm-prophetnet"),njr.forEach(t),xQe=r(UMe," \u2014 "),Fk=n(UMe,"A",{href:!0});var sjr=s(Fk);kQe=r(sjr,"XLMProphetNetConfig"),sjr.forEach(t),SQe=r(UMe," (XLMProphetNet model)"),UMe.forEach(t),RQe=i(F),Ig=n(F,"LI",{});var JMe=s(Ig);uZ=n(JMe,"STRONG",{});var ljr=s(uZ);BQe=r(ljr,"xlm-roberta"),ljr.forEach(t),PQe=r(JMe," \u2014 "),Tk=n(JMe,"A",{href:!0});var ijr=s(Tk);$Qe=r(ijr,"XLMRobertaConfig"),ijr.forEach(t),IQe=r(JMe," (XLM-RoBERTa model)"),JMe.forEach(t),qQe=i(F),qg=n(F,"LI",{});var YMe=s(qg);bZ=n(YMe,"STRONG",{});var djr=s(bZ);NQe=r(djr,"xlm-roberta-xl"),djr.forEach(t),jQe=r(YMe," \u2014 "),Mk=n(YMe,"A",{href:!0});var cjr=s(Mk);DQe=r(cjr,"XLMRobertaXLConfig"),cjr.forEach(t),GQe=r(YMe," (XLM-RoBERTa-XL model)"),YMe.forEach(t),OQe=i(F),Ng=n(F,"LI",{});var KMe=s(Ng);vZ=n(KMe,"STRONG",{});var fjr=s(vZ);VQe=r(fjr,"xlnet"),fjr.forEach(t),XQe=r(KMe," \u2014 "),Ek=n(KMe,"A",{href:!0});var mjr=s(Ek);zQe=r(mjr,"XLNetConfig"),mjr.forEach(t),QQe=r(KMe," (XLNet model)"),KMe.forEach(t),WQe=i(F),jg=n(F,"LI",{});var ZMe=s(jg);FZ=n(ZMe,"STRONG",{});var gjr=s(FZ);HQe=r(gjr,"yoso"),gjr.forEach(t),UQe=r(ZMe," \u2014 "),Ck=n(ZMe,"A",{href:!0});var hjr=s(Ck);JQe=r(hjr,"YosoConfig"),hjr.forEach(t),YQe=r(ZMe," (YOSO model)"),ZMe.forEach(t),F.forEach(t),KQe=i(ga),TZ=n(ga,"P",{});var pjr=s(TZ);ZQe=r(pjr,"Examples:"),pjr.forEach(t),eWe=i(ga),m(G5.$$.fragment,ga),ga.forEach(t),oWe=i(zs),Dg=n(zs,"DIV",{class:!0});var JPe=s(Dg);m(O5.$$.fragment,JPe),rWe=i(JPe),MZ=n(JPe,"P",{});var _jr=s(MZ);tWe=r(_jr,"Register a new configuration for this class."),_jr.forEach(t),JPe.forEach(t),zs.forEach(t),HRe=i(c),Ui=n(c,"H2",{class:!0});var YPe=s(Ui);Gg=n(YPe,"A",{id:!0,class:!0,href:!0});var ujr=s(Gg);EZ=n(ujr,"SPAN",{});var bjr=s(EZ);m(V5.$$.fragment,bjr),bjr.forEach(t),ujr.forEach(t),aWe=i(YPe),CZ=n(YPe,"SPAN",{});var vjr=s(CZ);nWe=r(vjr,"AutoTokenizer"),vjr.forEach(t),YPe.forEach(t),URe=i(c),Wo=n(c,"DIV",{class:!0});var Qs=s(Wo);m(X5.$$.fragment,Qs),sWe=i(Qs),z5=n(Qs,"P",{});var KPe=s(z5);lWe=r(KPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wk=n(KPe,"A",{href:!0});var Fjr=s(wk);iWe=r(Fjr,"AutoTokenizer.from_pretrained()"),Fjr.forEach(t),dWe=r(KPe," class method."),KPe.forEach(t),cWe=i(Qs),Q5=n(Qs,"P",{});var ZPe=s(Q5);fWe=r(ZPe,"This class cannot be instantiated directly using "),wZ=n(ZPe,"CODE",{});var Tjr=s(wZ);mWe=r(Tjr,"__init__()"),Tjr.forEach(t),gWe=r(ZPe," (throws an error)."),ZPe.forEach(t),hWe=i(Qs),go=n(Qs,"DIV",{class:!0});var ha=s(go);m(W5.$$.fragment,ha),pWe=i(ha),AZ=n(ha,"P",{});var Mjr=s(AZ);_We=r(Mjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Mjr.forEach(t),uWe=i(ha),Oa=n(ha,"P",{});var SE=s(Oa);bWe=r(SE,"The tokenizer class to instantiate is selected based on the "),yZ=n(SE,"CODE",{});var Ejr=s(yZ);vWe=r(Ejr,"model_type"),Ejr.forEach(t),FWe=r(SE,` property of the config object (either
passed as an argument or loaded from `),LZ=n(SE,"CODE",{});var Cjr=s(LZ);TWe=r(Cjr,"pretrained_model_name_or_path"),Cjr.forEach(t),MWe=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xZ=n(SE,"CODE",{});var wjr=s(xZ);EWe=r(wjr,"pretrained_model_name_or_path"),wjr.forEach(t),CWe=r(SE,":"),SE.forEach(t),wWe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var AL=s(Wn);kZ=n(AL,"STRONG",{});var Ajr=s(kZ);AWe=r(Ajr,"albert"),Ajr.forEach(t),yWe=r(AL," \u2014 "),Ak=n(AL,"A",{href:!0});var yjr=s(Ak);LWe=r(yjr,"AlbertTokenizer"),yjr.forEach(t),xWe=r(AL," or "),yk=n(AL,"A",{href:!0});var Ljr=s(yk);kWe=r(Ljr,"AlbertTokenizerFast"),Ljr.forEach(t),SWe=r(AL," (ALBERT model)"),AL.forEach(t),RWe=i(C),Hn=n(C,"LI",{});var yL=s(Hn);SZ=n(yL,"STRONG",{});var xjr=s(SZ);BWe=r(xjr,"bart"),xjr.forEach(t),PWe=r(yL," \u2014 "),Lk=n(yL,"A",{href:!0});var kjr=s(Lk);$We=r(kjr,"BartTokenizer"),kjr.forEach(t),IWe=r(yL," or "),xk=n(yL,"A",{href:!0});var Sjr=s(xk);qWe=r(Sjr,"BartTokenizerFast"),Sjr.forEach(t),NWe=r(yL," (BART model)"),yL.forEach(t),jWe=i(C),Un=n(C,"LI",{});var LL=s(Un);RZ=n(LL,"STRONG",{});var Rjr=s(RZ);DWe=r(Rjr,"barthez"),Rjr.forEach(t),GWe=r(LL," \u2014 "),kk=n(LL,"A",{href:!0});var Bjr=s(kk);OWe=r(Bjr,"BarthezTokenizer"),Bjr.forEach(t),VWe=r(LL," or "),Sk=n(LL,"A",{href:!0});var Pjr=s(Sk);XWe=r(Pjr,"BarthezTokenizerFast"),Pjr.forEach(t),zWe=r(LL," (BARThez model)"),LL.forEach(t),QWe=i(C),Og=n(C,"LI",{});var e4e=s(Og);BZ=n(e4e,"STRONG",{});var $jr=s(BZ);WWe=r($jr,"bartpho"),$jr.forEach(t),HWe=r(e4e," \u2014 "),Rk=n(e4e,"A",{href:!0});var Ijr=s(Rk);UWe=r(Ijr,"BartphoTokenizer"),Ijr.forEach(t),JWe=r(e4e," (BARTpho model)"),e4e.forEach(t),YWe=i(C),Jn=n(C,"LI",{});var xL=s(Jn);PZ=n(xL,"STRONG",{});var qjr=s(PZ);KWe=r(qjr,"bert"),qjr.forEach(t),ZWe=r(xL," \u2014 "),Bk=n(xL,"A",{href:!0});var Njr=s(Bk);eHe=r(Njr,"BertTokenizer"),Njr.forEach(t),oHe=r(xL," or "),Pk=n(xL,"A",{href:!0});var jjr=s(Pk);rHe=r(jjr,"BertTokenizerFast"),jjr.forEach(t),tHe=r(xL," (BERT model)"),xL.forEach(t),aHe=i(C),Vg=n(C,"LI",{});var o4e=s(Vg);$Z=n(o4e,"STRONG",{});var Djr=s($Z);nHe=r(Djr,"bert-generation"),Djr.forEach(t),sHe=r(o4e," \u2014 "),$k=n(o4e,"A",{href:!0});var Gjr=s($k);lHe=r(Gjr,"BertGenerationTokenizer"),Gjr.forEach(t),iHe=r(o4e," (Bert Generation model)"),o4e.forEach(t),dHe=i(C),Xg=n(C,"LI",{});var r4e=s(Xg);IZ=n(r4e,"STRONG",{});var Ojr=s(IZ);cHe=r(Ojr,"bert-japanese"),Ojr.forEach(t),fHe=r(r4e," \u2014 "),Ik=n(r4e,"A",{href:!0});var Vjr=s(Ik);mHe=r(Vjr,"BertJapaneseTokenizer"),Vjr.forEach(t),gHe=r(r4e," (BertJapanese model)"),r4e.forEach(t),hHe=i(C),zg=n(C,"LI",{});var t4e=s(zg);qZ=n(t4e,"STRONG",{});var Xjr=s(qZ);pHe=r(Xjr,"bertweet"),Xjr.forEach(t),_He=r(t4e," \u2014 "),qk=n(t4e,"A",{href:!0});var zjr=s(qk);uHe=r(zjr,"BertweetTokenizer"),zjr.forEach(t),bHe=r(t4e," (Bertweet model)"),t4e.forEach(t),vHe=i(C),Yn=n(C,"LI",{});var kL=s(Yn);NZ=n(kL,"STRONG",{});var Qjr=s(NZ);FHe=r(Qjr,"big_bird"),Qjr.forEach(t),THe=r(kL," \u2014 "),Nk=n(kL,"A",{href:!0});var Wjr=s(Nk);MHe=r(Wjr,"BigBirdTokenizer"),Wjr.forEach(t),EHe=r(kL," or "),jk=n(kL,"A",{href:!0});var Hjr=s(jk);CHe=r(Hjr,"BigBirdTokenizerFast"),Hjr.forEach(t),wHe=r(kL," (BigBird model)"),kL.forEach(t),AHe=i(C),Kn=n(C,"LI",{});var SL=s(Kn);jZ=n(SL,"STRONG",{});var Ujr=s(jZ);yHe=r(Ujr,"bigbird_pegasus"),Ujr.forEach(t),LHe=r(SL," \u2014 "),Dk=n(SL,"A",{href:!0});var Jjr=s(Dk);xHe=r(Jjr,"PegasusTokenizer"),Jjr.forEach(t),kHe=r(SL," or "),Gk=n(SL,"A",{href:!0});var Yjr=s(Gk);SHe=r(Yjr,"PegasusTokenizerFast"),Yjr.forEach(t),RHe=r(SL," (BigBirdPegasus model)"),SL.forEach(t),BHe=i(C),Zn=n(C,"LI",{});var RL=s(Zn);DZ=n(RL,"STRONG",{});var Kjr=s(DZ);PHe=r(Kjr,"blenderbot"),Kjr.forEach(t),$He=r(RL," \u2014 "),Ok=n(RL,"A",{href:!0});var Zjr=s(Ok);IHe=r(Zjr,"BlenderbotTokenizer"),Zjr.forEach(t),qHe=r(RL," or "),Vk=n(RL,"A",{href:!0});var eDr=s(Vk);NHe=r(eDr,"BlenderbotTokenizerFast"),eDr.forEach(t),jHe=r(RL," (Blenderbot model)"),RL.forEach(t),DHe=i(C),Qg=n(C,"LI",{});var a4e=s(Qg);GZ=n(a4e,"STRONG",{});var oDr=s(GZ);GHe=r(oDr,"blenderbot-small"),oDr.forEach(t),OHe=r(a4e," \u2014 "),Xk=n(a4e,"A",{href:!0});var rDr=s(Xk);VHe=r(rDr,"BlenderbotSmallTokenizer"),rDr.forEach(t),XHe=r(a4e," (BlenderbotSmall model)"),a4e.forEach(t),zHe=i(C),Wg=n(C,"LI",{});var n4e=s(Wg);OZ=n(n4e,"STRONG",{});var tDr=s(OZ);QHe=r(tDr,"byt5"),tDr.forEach(t),WHe=r(n4e," \u2014 "),zk=n(n4e,"A",{href:!0});var aDr=s(zk);HHe=r(aDr,"ByT5Tokenizer"),aDr.forEach(t),UHe=r(n4e," (ByT5 model)"),n4e.forEach(t),JHe=i(C),es=n(C,"LI",{});var BL=s(es);VZ=n(BL,"STRONG",{});var nDr=s(VZ);YHe=r(nDr,"camembert"),nDr.forEach(t),KHe=r(BL," \u2014 "),Qk=n(BL,"A",{href:!0});var sDr=s(Qk);ZHe=r(sDr,"CamembertTokenizer"),sDr.forEach(t),eUe=r(BL," or "),Wk=n(BL,"A",{href:!0});var lDr=s(Wk);oUe=r(lDr,"CamembertTokenizerFast"),lDr.forEach(t),rUe=r(BL," (CamemBERT model)"),BL.forEach(t),tUe=i(C),Hg=n(C,"LI",{});var s4e=s(Hg);XZ=n(s4e,"STRONG",{});var iDr=s(XZ);aUe=r(iDr,"canine"),iDr.forEach(t),nUe=r(s4e," \u2014 "),Hk=n(s4e,"A",{href:!0});var dDr=s(Hk);sUe=r(dDr,"CanineTokenizer"),dDr.forEach(t),lUe=r(s4e," (Canine model)"),s4e.forEach(t),iUe=i(C),os=n(C,"LI",{});var PL=s(os);zZ=n(PL,"STRONG",{});var cDr=s(zZ);dUe=r(cDr,"clip"),cDr.forEach(t),cUe=r(PL," \u2014 "),Uk=n(PL,"A",{href:!0});var fDr=s(Uk);fUe=r(fDr,"CLIPTokenizer"),fDr.forEach(t),mUe=r(PL," or "),Jk=n(PL,"A",{href:!0});var mDr=s(Jk);gUe=r(mDr,"CLIPTokenizerFast"),mDr.forEach(t),hUe=r(PL," (CLIP model)"),PL.forEach(t),pUe=i(C),rs=n(C,"LI",{});var $L=s(rs);QZ=n($L,"STRONG",{});var gDr=s(QZ);_Ue=r(gDr,"convbert"),gDr.forEach(t),uUe=r($L," \u2014 "),Yk=n($L,"A",{href:!0});var hDr=s(Yk);bUe=r(hDr,"ConvBertTokenizer"),hDr.forEach(t),vUe=r($L," or "),Kk=n($L,"A",{href:!0});var pDr=s(Kk);FUe=r(pDr,"ConvBertTokenizerFast"),pDr.forEach(t),TUe=r($L," (ConvBERT model)"),$L.forEach(t),MUe=i(C),ts=n(C,"LI",{});var IL=s(ts);WZ=n(IL,"STRONG",{});var _Dr=s(WZ);EUe=r(_Dr,"cpm"),_Dr.forEach(t),CUe=r(IL," \u2014 "),Zk=n(IL,"A",{href:!0});var uDr=s(Zk);wUe=r(uDr,"CpmTokenizer"),uDr.forEach(t),AUe=r(IL," or "),HZ=n(IL,"CODE",{});var bDr=s(HZ);yUe=r(bDr,"CpmTokenizerFast"),bDr.forEach(t),LUe=r(IL," (CPM model)"),IL.forEach(t),xUe=i(C),Ug=n(C,"LI",{});var l4e=s(Ug);UZ=n(l4e,"STRONG",{});var vDr=s(UZ);kUe=r(vDr,"ctrl"),vDr.forEach(t),SUe=r(l4e," \u2014 "),eS=n(l4e,"A",{href:!0});var FDr=s(eS);RUe=r(FDr,"CTRLTokenizer"),FDr.forEach(t),BUe=r(l4e," (CTRL model)"),l4e.forEach(t),PUe=i(C),as=n(C,"LI",{});var qL=s(as);JZ=n(qL,"STRONG",{});var TDr=s(JZ);$Ue=r(TDr,"deberta"),TDr.forEach(t),IUe=r(qL," \u2014 "),oS=n(qL,"A",{href:!0});var MDr=s(oS);qUe=r(MDr,"DebertaTokenizer"),MDr.forEach(t),NUe=r(qL," or "),rS=n(qL,"A",{href:!0});var EDr=s(rS);jUe=r(EDr,"DebertaTokenizerFast"),EDr.forEach(t),DUe=r(qL," (DeBERTa model)"),qL.forEach(t),GUe=i(C),ns=n(C,"LI",{});var NL=s(ns);YZ=n(NL,"STRONG",{});var CDr=s(YZ);OUe=r(CDr,"deberta-v2"),CDr.forEach(t),VUe=r(NL," \u2014 "),tS=n(NL,"A",{href:!0});var wDr=s(tS);XUe=r(wDr,"DebertaV2Tokenizer"),wDr.forEach(t),zUe=r(NL," or "),aS=n(NL,"A",{href:!0});var ADr=s(aS);QUe=r(ADr,"DebertaV2TokenizerFast"),ADr.forEach(t),WUe=r(NL," (DeBERTa-v2 model)"),NL.forEach(t),HUe=i(C),ss=n(C,"LI",{});var jL=s(ss);KZ=n(jL,"STRONG",{});var yDr=s(KZ);UUe=r(yDr,"distilbert"),yDr.forEach(t),JUe=r(jL," \u2014 "),nS=n(jL,"A",{href:!0});var LDr=s(nS);YUe=r(LDr,"DistilBertTokenizer"),LDr.forEach(t),KUe=r(jL," or "),sS=n(jL,"A",{href:!0});var xDr=s(sS);ZUe=r(xDr,"DistilBertTokenizerFast"),xDr.forEach(t),eJe=r(jL," (DistilBERT model)"),jL.forEach(t),oJe=i(C),ls=n(C,"LI",{});var DL=s(ls);ZZ=n(DL,"STRONG",{});var kDr=s(ZZ);rJe=r(kDr,"dpr"),kDr.forEach(t),tJe=r(DL," \u2014 "),lS=n(DL,"A",{href:!0});var SDr=s(lS);aJe=r(SDr,"DPRQuestionEncoderTokenizer"),SDr.forEach(t),nJe=r(DL," or "),iS=n(DL,"A",{href:!0});var RDr=s(iS);sJe=r(RDr,"DPRQuestionEncoderTokenizerFast"),RDr.forEach(t),lJe=r(DL," (DPR model)"),DL.forEach(t),iJe=i(C),is=n(C,"LI",{});var GL=s(is);eee=n(GL,"STRONG",{});var BDr=s(eee);dJe=r(BDr,"electra"),BDr.forEach(t),cJe=r(GL," \u2014 "),dS=n(GL,"A",{href:!0});var PDr=s(dS);fJe=r(PDr,"ElectraTokenizer"),PDr.forEach(t),mJe=r(GL," or "),cS=n(GL,"A",{href:!0});var $Dr=s(cS);gJe=r($Dr,"ElectraTokenizerFast"),$Dr.forEach(t),hJe=r(GL," (ELECTRA model)"),GL.forEach(t),pJe=i(C),Jg=n(C,"LI",{});var i4e=s(Jg);oee=n(i4e,"STRONG",{});var IDr=s(oee);_Je=r(IDr,"flaubert"),IDr.forEach(t),uJe=r(i4e," \u2014 "),fS=n(i4e,"A",{href:!0});var qDr=s(fS);bJe=r(qDr,"FlaubertTokenizer"),qDr.forEach(t),vJe=r(i4e," (FlauBERT model)"),i4e.forEach(t),FJe=i(C),ds=n(C,"LI",{});var OL=s(ds);ree=n(OL,"STRONG",{});var NDr=s(ree);TJe=r(NDr,"fnet"),NDr.forEach(t),MJe=r(OL," \u2014 "),mS=n(OL,"A",{href:!0});var jDr=s(mS);EJe=r(jDr,"FNetTokenizer"),jDr.forEach(t),CJe=r(OL," or "),gS=n(OL,"A",{href:!0});var DDr=s(gS);wJe=r(DDr,"FNetTokenizerFast"),DDr.forEach(t),AJe=r(OL," (FNet model)"),OL.forEach(t),yJe=i(C),Yg=n(C,"LI",{});var d4e=s(Yg);tee=n(d4e,"STRONG",{});var GDr=s(tee);LJe=r(GDr,"fsmt"),GDr.forEach(t),xJe=r(d4e," \u2014 "),hS=n(d4e,"A",{href:!0});var ODr=s(hS);kJe=r(ODr,"FSMTTokenizer"),ODr.forEach(t),SJe=r(d4e," (FairSeq Machine-Translation model)"),d4e.forEach(t),RJe=i(C),cs=n(C,"LI",{});var VL=s(cs);aee=n(VL,"STRONG",{});var VDr=s(aee);BJe=r(VDr,"funnel"),VDr.forEach(t),PJe=r(VL," \u2014 "),pS=n(VL,"A",{href:!0});var XDr=s(pS);$Je=r(XDr,"FunnelTokenizer"),XDr.forEach(t),IJe=r(VL," or "),_S=n(VL,"A",{href:!0});var zDr=s(_S);qJe=r(zDr,"FunnelTokenizerFast"),zDr.forEach(t),NJe=r(VL," (Funnel Transformer model)"),VL.forEach(t),jJe=i(C),fs=n(C,"LI",{});var XL=s(fs);nee=n(XL,"STRONG",{});var QDr=s(nee);DJe=r(QDr,"gpt2"),QDr.forEach(t),GJe=r(XL," \u2014 "),uS=n(XL,"A",{href:!0});var WDr=s(uS);OJe=r(WDr,"GPT2Tokenizer"),WDr.forEach(t),VJe=r(XL," or "),bS=n(XL,"A",{href:!0});var HDr=s(bS);XJe=r(HDr,"GPT2TokenizerFast"),HDr.forEach(t),zJe=r(XL," (OpenAI GPT-2 model)"),XL.forEach(t),QJe=i(C),ms=n(C,"LI",{});var zL=s(ms);see=n(zL,"STRONG",{});var UDr=s(see);WJe=r(UDr,"gpt_neo"),UDr.forEach(t),HJe=r(zL," \u2014 "),vS=n(zL,"A",{href:!0});var JDr=s(vS);UJe=r(JDr,"GPT2Tokenizer"),JDr.forEach(t),JJe=r(zL," or "),FS=n(zL,"A",{href:!0});var YDr=s(FS);YJe=r(YDr,"GPT2TokenizerFast"),YDr.forEach(t),KJe=r(zL," (GPT Neo model)"),zL.forEach(t),ZJe=i(C),gs=n(C,"LI",{});var QL=s(gs);lee=n(QL,"STRONG",{});var KDr=s(lee);eYe=r(KDr,"gptj"),KDr.forEach(t),oYe=r(QL," \u2014 "),TS=n(QL,"A",{href:!0});var ZDr=s(TS);rYe=r(ZDr,"GPT2Tokenizer"),ZDr.forEach(t),tYe=r(QL," or "),MS=n(QL,"A",{href:!0});var eGr=s(MS);aYe=r(eGr,"GPT2TokenizerFast"),eGr.forEach(t),nYe=r(QL," (GPT-J model)"),QL.forEach(t),sYe=i(C),hs=n(C,"LI",{});var WL=s(hs);iee=n(WL,"STRONG",{});var oGr=s(iee);lYe=r(oGr,"herbert"),oGr.forEach(t),iYe=r(WL," \u2014 "),ES=n(WL,"A",{href:!0});var rGr=s(ES);dYe=r(rGr,"HerbertTokenizer"),rGr.forEach(t),cYe=r(WL," or "),CS=n(WL,"A",{href:!0});var tGr=s(CS);fYe=r(tGr,"HerbertTokenizerFast"),tGr.forEach(t),mYe=r(WL," (HerBERT model)"),WL.forEach(t),gYe=i(C),Kg=n(C,"LI",{});var c4e=s(Kg);dee=n(c4e,"STRONG",{});var aGr=s(dee);hYe=r(aGr,"hubert"),aGr.forEach(t),pYe=r(c4e," \u2014 "),wS=n(c4e,"A",{href:!0});var nGr=s(wS);_Ye=r(nGr,"Wav2Vec2CTCTokenizer"),nGr.forEach(t),uYe=r(c4e," (Hubert model)"),c4e.forEach(t),bYe=i(C),ps=n(C,"LI",{});var HL=s(ps);cee=n(HL,"STRONG",{});var sGr=s(cee);vYe=r(sGr,"ibert"),sGr.forEach(t),FYe=r(HL," \u2014 "),AS=n(HL,"A",{href:!0});var lGr=s(AS);TYe=r(lGr,"RobertaTokenizer"),lGr.forEach(t),MYe=r(HL," or "),yS=n(HL,"A",{href:!0});var iGr=s(yS);EYe=r(iGr,"RobertaTokenizerFast"),iGr.forEach(t),CYe=r(HL," (I-BERT model)"),HL.forEach(t),wYe=i(C),_s=n(C,"LI",{});var UL=s(_s);fee=n(UL,"STRONG",{});var dGr=s(fee);AYe=r(dGr,"layoutlm"),dGr.forEach(t),yYe=r(UL," \u2014 "),LS=n(UL,"A",{href:!0});var cGr=s(LS);LYe=r(cGr,"LayoutLMTokenizer"),cGr.forEach(t),xYe=r(UL," or "),xS=n(UL,"A",{href:!0});var fGr=s(xS);kYe=r(fGr,"LayoutLMTokenizerFast"),fGr.forEach(t),SYe=r(UL," (LayoutLM model)"),UL.forEach(t),RYe=i(C),us=n(C,"LI",{});var JL=s(us);mee=n(JL,"STRONG",{});var mGr=s(mee);BYe=r(mGr,"layoutlmv2"),mGr.forEach(t),PYe=r(JL," \u2014 "),kS=n(JL,"A",{href:!0});var gGr=s(kS);$Ye=r(gGr,"LayoutLMv2Tokenizer"),gGr.forEach(t),IYe=r(JL," or "),SS=n(JL,"A",{href:!0});var hGr=s(SS);qYe=r(hGr,"LayoutLMv2TokenizerFast"),hGr.forEach(t),NYe=r(JL," (LayoutLMv2 model)"),JL.forEach(t),jYe=i(C),bs=n(C,"LI",{});var YL=s(bs);gee=n(YL,"STRONG",{});var pGr=s(gee);DYe=r(pGr,"layoutxlm"),pGr.forEach(t),GYe=r(YL," \u2014 "),RS=n(YL,"A",{href:!0});var _Gr=s(RS);OYe=r(_Gr,"LayoutXLMTokenizer"),_Gr.forEach(t),VYe=r(YL," or "),BS=n(YL,"A",{href:!0});var uGr=s(BS);XYe=r(uGr,"LayoutXLMTokenizerFast"),uGr.forEach(t),zYe=r(YL," (LayoutXLM model)"),YL.forEach(t),QYe=i(C),vs=n(C,"LI",{});var KL=s(vs);hee=n(KL,"STRONG",{});var bGr=s(hee);WYe=r(bGr,"led"),bGr.forEach(t),HYe=r(KL," \u2014 "),PS=n(KL,"A",{href:!0});var vGr=s(PS);UYe=r(vGr,"LEDTokenizer"),vGr.forEach(t),JYe=r(KL," or "),$S=n(KL,"A",{href:!0});var FGr=s($S);YYe=r(FGr,"LEDTokenizerFast"),FGr.forEach(t),KYe=r(KL," (LED model)"),KL.forEach(t),ZYe=i(C),Fs=n(C,"LI",{});var ZL=s(Fs);pee=n(ZL,"STRONG",{});var TGr=s(pee);eKe=r(TGr,"longformer"),TGr.forEach(t),oKe=r(ZL," \u2014 "),IS=n(ZL,"A",{href:!0});var MGr=s(IS);rKe=r(MGr,"LongformerTokenizer"),MGr.forEach(t),tKe=r(ZL," or "),qS=n(ZL,"A",{href:!0});var EGr=s(qS);aKe=r(EGr,"LongformerTokenizerFast"),EGr.forEach(t),nKe=r(ZL," (Longformer model)"),ZL.forEach(t),sKe=i(C),Zg=n(C,"LI",{});var f4e=s(Zg);_ee=n(f4e,"STRONG",{});var CGr=s(_ee);lKe=r(CGr,"luke"),CGr.forEach(t),iKe=r(f4e," \u2014 "),NS=n(f4e,"A",{href:!0});var wGr=s(NS);dKe=r(wGr,"LukeTokenizer"),wGr.forEach(t),cKe=r(f4e," (LUKE model)"),f4e.forEach(t),fKe=i(C),Ts=n(C,"LI",{});var e9=s(Ts);uee=n(e9,"STRONG",{});var AGr=s(uee);mKe=r(AGr,"lxmert"),AGr.forEach(t),gKe=r(e9," \u2014 "),jS=n(e9,"A",{href:!0});var yGr=s(jS);hKe=r(yGr,"LxmertTokenizer"),yGr.forEach(t),pKe=r(e9," or "),DS=n(e9,"A",{href:!0});var LGr=s(DS);_Ke=r(LGr,"LxmertTokenizerFast"),LGr.forEach(t),uKe=r(e9," (LXMERT model)"),e9.forEach(t),bKe=i(C),eh=n(C,"LI",{});var m4e=s(eh);bee=n(m4e,"STRONG",{});var xGr=s(bee);vKe=r(xGr,"m2m_100"),xGr.forEach(t),FKe=r(m4e," \u2014 "),GS=n(m4e,"A",{href:!0});var kGr=s(GS);TKe=r(kGr,"M2M100Tokenizer"),kGr.forEach(t),MKe=r(m4e," (M2M100 model)"),m4e.forEach(t),EKe=i(C),oh=n(C,"LI",{});var g4e=s(oh);vee=n(g4e,"STRONG",{});var SGr=s(vee);CKe=r(SGr,"marian"),SGr.forEach(t),wKe=r(g4e," \u2014 "),OS=n(g4e,"A",{href:!0});var RGr=s(OS);AKe=r(RGr,"MarianTokenizer"),RGr.forEach(t),yKe=r(g4e," (Marian model)"),g4e.forEach(t),LKe=i(C),Ms=n(C,"LI",{});var o9=s(Ms);Fee=n(o9,"STRONG",{});var BGr=s(Fee);xKe=r(BGr,"mbart"),BGr.forEach(t),kKe=r(o9," \u2014 "),VS=n(o9,"A",{href:!0});var PGr=s(VS);SKe=r(PGr,"MBartTokenizer"),PGr.forEach(t),RKe=r(o9," or "),XS=n(o9,"A",{href:!0});var $Gr=s(XS);BKe=r($Gr,"MBartTokenizerFast"),$Gr.forEach(t),PKe=r(o9," (mBART model)"),o9.forEach(t),$Ke=i(C),Es=n(C,"LI",{});var r9=s(Es);Tee=n(r9,"STRONG",{});var IGr=s(Tee);IKe=r(IGr,"mbart50"),IGr.forEach(t),qKe=r(r9," \u2014 "),zS=n(r9,"A",{href:!0});var qGr=s(zS);NKe=r(qGr,"MBart50Tokenizer"),qGr.forEach(t),jKe=r(r9," or "),QS=n(r9,"A",{href:!0});var NGr=s(QS);DKe=r(NGr,"MBart50TokenizerFast"),NGr.forEach(t),GKe=r(r9," (mBART-50 model)"),r9.forEach(t),OKe=i(C),rh=n(C,"LI",{});var h4e=s(rh);Mee=n(h4e,"STRONG",{});var jGr=s(Mee);VKe=r(jGr,"mluke"),jGr.forEach(t),XKe=r(h4e," \u2014 "),WS=n(h4e,"A",{href:!0});var DGr=s(WS);zKe=r(DGr,"MLukeTokenizer"),DGr.forEach(t),QKe=r(h4e," (mLUKE model)"),h4e.forEach(t),WKe=i(C),Cs=n(C,"LI",{});var t9=s(Cs);Eee=n(t9,"STRONG",{});var GGr=s(Eee);HKe=r(GGr,"mobilebert"),GGr.forEach(t),UKe=r(t9," \u2014 "),HS=n(t9,"A",{href:!0});var OGr=s(HS);JKe=r(OGr,"MobileBertTokenizer"),OGr.forEach(t),YKe=r(t9," or "),US=n(t9,"A",{href:!0});var VGr=s(US);KKe=r(VGr,"MobileBertTokenizerFast"),VGr.forEach(t),ZKe=r(t9," (MobileBERT model)"),t9.forEach(t),eZe=i(C),ws=n(C,"LI",{});var a9=s(ws);Cee=n(a9,"STRONG",{});var XGr=s(Cee);oZe=r(XGr,"mpnet"),XGr.forEach(t),rZe=r(a9," \u2014 "),JS=n(a9,"A",{href:!0});var zGr=s(JS);tZe=r(zGr,"MPNetTokenizer"),zGr.forEach(t),aZe=r(a9," or "),YS=n(a9,"A",{href:!0});var QGr=s(YS);nZe=r(QGr,"MPNetTokenizerFast"),QGr.forEach(t),sZe=r(a9," (MPNet model)"),a9.forEach(t),lZe=i(C),As=n(C,"LI",{});var n9=s(As);wee=n(n9,"STRONG",{});var WGr=s(wee);iZe=r(WGr,"mt5"),WGr.forEach(t),dZe=r(n9," \u2014 "),KS=n(n9,"A",{href:!0});var HGr=s(KS);cZe=r(HGr,"MT5Tokenizer"),HGr.forEach(t),fZe=r(n9," or "),ZS=n(n9,"A",{href:!0});var UGr=s(ZS);mZe=r(UGr,"MT5TokenizerFast"),UGr.forEach(t),gZe=r(n9," (mT5 model)"),n9.forEach(t),hZe=i(C),ys=n(C,"LI",{});var s9=s(ys);Aee=n(s9,"STRONG",{});var JGr=s(Aee);pZe=r(JGr,"openai-gpt"),JGr.forEach(t),_Ze=r(s9," \u2014 "),eR=n(s9,"A",{href:!0});var YGr=s(eR);uZe=r(YGr,"OpenAIGPTTokenizer"),YGr.forEach(t),bZe=r(s9," or "),oR=n(s9,"A",{href:!0});var KGr=s(oR);vZe=r(KGr,"OpenAIGPTTokenizerFast"),KGr.forEach(t),FZe=r(s9," (OpenAI GPT model)"),s9.forEach(t),TZe=i(C),Ls=n(C,"LI",{});var l9=s(Ls);yee=n(l9,"STRONG",{});var ZGr=s(yee);MZe=r(ZGr,"pegasus"),ZGr.forEach(t),EZe=r(l9," \u2014 "),rR=n(l9,"A",{href:!0});var eOr=s(rR);CZe=r(eOr,"PegasusTokenizer"),eOr.forEach(t),wZe=r(l9," or "),tR=n(l9,"A",{href:!0});var oOr=s(tR);AZe=r(oOr,"PegasusTokenizerFast"),oOr.forEach(t),yZe=r(l9," (Pegasus model)"),l9.forEach(t),LZe=i(C),th=n(C,"LI",{});var p4e=s(th);Lee=n(p4e,"STRONG",{});var rOr=s(Lee);xZe=r(rOr,"perceiver"),rOr.forEach(t),kZe=r(p4e," \u2014 "),aR=n(p4e,"A",{href:!0});var tOr=s(aR);SZe=r(tOr,"PerceiverTokenizer"),tOr.forEach(t),RZe=r(p4e," (Perceiver model)"),p4e.forEach(t),BZe=i(C),ah=n(C,"LI",{});var _4e=s(ah);xee=n(_4e,"STRONG",{});var aOr=s(xee);PZe=r(aOr,"phobert"),aOr.forEach(t),$Ze=r(_4e," \u2014 "),nR=n(_4e,"A",{href:!0});var nOr=s(nR);IZe=r(nOr,"PhobertTokenizer"),nOr.forEach(t),qZe=r(_4e," (PhoBERT model)"),_4e.forEach(t),NZe=i(C),nh=n(C,"LI",{});var u4e=s(nh);kee=n(u4e,"STRONG",{});var sOr=s(kee);jZe=r(sOr,"plbart"),sOr.forEach(t),DZe=r(u4e," \u2014 "),sR=n(u4e,"A",{href:!0});var lOr=s(sR);GZe=r(lOr,"PLBartTokenizer"),lOr.forEach(t),OZe=r(u4e," (PLBart model)"),u4e.forEach(t),VZe=i(C),sh=n(C,"LI",{});var b4e=s(sh);See=n(b4e,"STRONG",{});var iOr=s(See);XZe=r(iOr,"prophetnet"),iOr.forEach(t),zZe=r(b4e," \u2014 "),lR=n(b4e,"A",{href:!0});var dOr=s(lR);QZe=r(dOr,"ProphetNetTokenizer"),dOr.forEach(t),WZe=r(b4e," (ProphetNet model)"),b4e.forEach(t),HZe=i(C),xs=n(C,"LI",{});var i9=s(xs);Ree=n(i9,"STRONG",{});var cOr=s(Ree);UZe=r(cOr,"qdqbert"),cOr.forEach(t),JZe=r(i9," \u2014 "),iR=n(i9,"A",{href:!0});var fOr=s(iR);YZe=r(fOr,"BertTokenizer"),fOr.forEach(t),KZe=r(i9," or "),dR=n(i9,"A",{href:!0});var mOr=s(dR);ZZe=r(mOr,"BertTokenizerFast"),mOr.forEach(t),eeo=r(i9," (QDQBert model)"),i9.forEach(t),oeo=i(C),lh=n(C,"LI",{});var v4e=s(lh);Bee=n(v4e,"STRONG",{});var gOr=s(Bee);reo=r(gOr,"rag"),gOr.forEach(t),teo=r(v4e," \u2014 "),cR=n(v4e,"A",{href:!0});var hOr=s(cR);aeo=r(hOr,"RagTokenizer"),hOr.forEach(t),neo=r(v4e," (RAG model)"),v4e.forEach(t),seo=i(C),ks=n(C,"LI",{});var d9=s(ks);Pee=n(d9,"STRONG",{});var pOr=s(Pee);leo=r(pOr,"realm"),pOr.forEach(t),ieo=r(d9," \u2014 "),fR=n(d9,"A",{href:!0});var _Or=s(fR);deo=r(_Or,"RealmTokenizer"),_Or.forEach(t),ceo=r(d9," or "),mR=n(d9,"A",{href:!0});var uOr=s(mR);feo=r(uOr,"RealmTokenizerFast"),uOr.forEach(t),meo=r(d9," (Realm model)"),d9.forEach(t),geo=i(C),Ss=n(C,"LI",{});var c9=s(Ss);$ee=n(c9,"STRONG",{});var bOr=s($ee);heo=r(bOr,"reformer"),bOr.forEach(t),peo=r(c9," \u2014 "),gR=n(c9,"A",{href:!0});var vOr=s(gR);_eo=r(vOr,"ReformerTokenizer"),vOr.forEach(t),ueo=r(c9," or "),hR=n(c9,"A",{href:!0});var FOr=s(hR);beo=r(FOr,"ReformerTokenizerFast"),FOr.forEach(t),veo=r(c9," (Reformer model)"),c9.forEach(t),Feo=i(C),Rs=n(C,"LI",{});var f9=s(Rs);Iee=n(f9,"STRONG",{});var TOr=s(Iee);Teo=r(TOr,"rembert"),TOr.forEach(t),Meo=r(f9," \u2014 "),pR=n(f9,"A",{href:!0});var MOr=s(pR);Eeo=r(MOr,"RemBertTokenizer"),MOr.forEach(t),Ceo=r(f9," or "),_R=n(f9,"A",{href:!0});var EOr=s(_R);weo=r(EOr,"RemBertTokenizerFast"),EOr.forEach(t),Aeo=r(f9," (RemBERT model)"),f9.forEach(t),yeo=i(C),Bs=n(C,"LI",{});var m9=s(Bs);qee=n(m9,"STRONG",{});var COr=s(qee);Leo=r(COr,"retribert"),COr.forEach(t),xeo=r(m9," \u2014 "),uR=n(m9,"A",{href:!0});var wOr=s(uR);keo=r(wOr,"RetriBertTokenizer"),wOr.forEach(t),Seo=r(m9," or "),bR=n(m9,"A",{href:!0});var AOr=s(bR);Reo=r(AOr,"RetriBertTokenizerFast"),AOr.forEach(t),Beo=r(m9," (RetriBERT model)"),m9.forEach(t),Peo=i(C),Ps=n(C,"LI",{});var g9=s(Ps);Nee=n(g9,"STRONG",{});var yOr=s(Nee);$eo=r(yOr,"roberta"),yOr.forEach(t),Ieo=r(g9," \u2014 "),vR=n(g9,"A",{href:!0});var LOr=s(vR);qeo=r(LOr,"RobertaTokenizer"),LOr.forEach(t),Neo=r(g9," or "),FR=n(g9,"A",{href:!0});var xOr=s(FR);jeo=r(xOr,"RobertaTokenizerFast"),xOr.forEach(t),Deo=r(g9," (RoBERTa model)"),g9.forEach(t),Geo=i(C),$s=n(C,"LI",{});var h9=s($s);jee=n(h9,"STRONG",{});var kOr=s(jee);Oeo=r(kOr,"roformer"),kOr.forEach(t),Veo=r(h9," \u2014 "),TR=n(h9,"A",{href:!0});var SOr=s(TR);Xeo=r(SOr,"RoFormerTokenizer"),SOr.forEach(t),zeo=r(h9," or "),MR=n(h9,"A",{href:!0});var ROr=s(MR);Qeo=r(ROr,"RoFormerTokenizerFast"),ROr.forEach(t),Weo=r(h9," (RoFormer model)"),h9.forEach(t),Heo=i(C),ih=n(C,"LI",{});var F4e=s(ih);Dee=n(F4e,"STRONG",{});var BOr=s(Dee);Ueo=r(BOr,"speech_to_text"),BOr.forEach(t),Jeo=r(F4e," \u2014 "),ER=n(F4e,"A",{href:!0});var POr=s(ER);Yeo=r(POr,"Speech2TextTokenizer"),POr.forEach(t),Keo=r(F4e," (Speech2Text model)"),F4e.forEach(t),Zeo=i(C),dh=n(C,"LI",{});var T4e=s(dh);Gee=n(T4e,"STRONG",{});var $Or=s(Gee);eoo=r($Or,"speech_to_text_2"),$Or.forEach(t),ooo=r(T4e," \u2014 "),CR=n(T4e,"A",{href:!0});var IOr=s(CR);roo=r(IOr,"Speech2Text2Tokenizer"),IOr.forEach(t),too=r(T4e," (Speech2Text2 model)"),T4e.forEach(t),aoo=i(C),Is=n(C,"LI",{});var p9=s(Is);Oee=n(p9,"STRONG",{});var qOr=s(Oee);noo=r(qOr,"splinter"),qOr.forEach(t),soo=r(p9," \u2014 "),wR=n(p9,"A",{href:!0});var NOr=s(wR);loo=r(NOr,"SplinterTokenizer"),NOr.forEach(t),ioo=r(p9," or "),AR=n(p9,"A",{href:!0});var jOr=s(AR);doo=r(jOr,"SplinterTokenizerFast"),jOr.forEach(t),coo=r(p9," (Splinter model)"),p9.forEach(t),foo=i(C),qs=n(C,"LI",{});var _9=s(qs);Vee=n(_9,"STRONG",{});var DOr=s(Vee);moo=r(DOr,"squeezebert"),DOr.forEach(t),goo=r(_9," \u2014 "),yR=n(_9,"A",{href:!0});var GOr=s(yR);hoo=r(GOr,"SqueezeBertTokenizer"),GOr.forEach(t),poo=r(_9," or "),LR=n(_9,"A",{href:!0});var OOr=s(LR);_oo=r(OOr,"SqueezeBertTokenizerFast"),OOr.forEach(t),uoo=r(_9," (SqueezeBERT model)"),_9.forEach(t),boo=i(C),Ns=n(C,"LI",{});var u9=s(Ns);Xee=n(u9,"STRONG",{});var VOr=s(Xee);voo=r(VOr,"t5"),VOr.forEach(t),Foo=r(u9," \u2014 "),xR=n(u9,"A",{href:!0});var XOr=s(xR);Too=r(XOr,"T5Tokenizer"),XOr.forEach(t),Moo=r(u9," or "),kR=n(u9,"A",{href:!0});var zOr=s(kR);Eoo=r(zOr,"T5TokenizerFast"),zOr.forEach(t),Coo=r(u9," (T5 model)"),u9.forEach(t),woo=i(C),ch=n(C,"LI",{});var M4e=s(ch);zee=n(M4e,"STRONG",{});var QOr=s(zee);Aoo=r(QOr,"tapas"),QOr.forEach(t),yoo=r(M4e," \u2014 "),SR=n(M4e,"A",{href:!0});var WOr=s(SR);Loo=r(WOr,"TapasTokenizer"),WOr.forEach(t),xoo=r(M4e," (TAPAS model)"),M4e.forEach(t),koo=i(C),fh=n(C,"LI",{});var E4e=s(fh);Qee=n(E4e,"STRONG",{});var HOr=s(Qee);Soo=r(HOr,"tapex"),HOr.forEach(t),Roo=r(E4e," \u2014 "),RR=n(E4e,"A",{href:!0});var UOr=s(RR);Boo=r(UOr,"TapexTokenizer"),UOr.forEach(t),Poo=r(E4e," (TAPEX model)"),E4e.forEach(t),$oo=i(C),mh=n(C,"LI",{});var C4e=s(mh);Wee=n(C4e,"STRONG",{});var JOr=s(Wee);Ioo=r(JOr,"transfo-xl"),JOr.forEach(t),qoo=r(C4e," \u2014 "),BR=n(C4e,"A",{href:!0});var YOr=s(BR);Noo=r(YOr,"TransfoXLTokenizer"),YOr.forEach(t),joo=r(C4e," (Transformer-XL model)"),C4e.forEach(t),Doo=i(C),gh=n(C,"LI",{});var w4e=s(gh);Hee=n(w4e,"STRONG",{});var KOr=s(Hee);Goo=r(KOr,"wav2vec2"),KOr.forEach(t),Ooo=r(w4e," \u2014 "),PR=n(w4e,"A",{href:!0});var ZOr=s(PR);Voo=r(ZOr,"Wav2Vec2CTCTokenizer"),ZOr.forEach(t),Xoo=r(w4e," (Wav2Vec2 model)"),w4e.forEach(t),zoo=i(C),hh=n(C,"LI",{});var A4e=s(hh);Uee=n(A4e,"STRONG",{});var eVr=s(Uee);Qoo=r(eVr,"wav2vec2_phoneme"),eVr.forEach(t),Woo=r(A4e," \u2014 "),$R=n(A4e,"A",{href:!0});var oVr=s($R);Hoo=r(oVr,"Wav2Vec2PhonemeCTCTokenizer"),oVr.forEach(t),Uoo=r(A4e," (Wav2Vec2Phoneme model)"),A4e.forEach(t),Joo=i(C),js=n(C,"LI",{});var b9=s(js);Jee=n(b9,"STRONG",{});var rVr=s(Jee);Yoo=r(rVr,"xglm"),rVr.forEach(t),Koo=r(b9," \u2014 "),IR=n(b9,"A",{href:!0});var tVr=s(IR);Zoo=r(tVr,"XGLMTokenizer"),tVr.forEach(t),ero=r(b9," or "),qR=n(b9,"A",{href:!0});var aVr=s(qR);oro=r(aVr,"XGLMTokenizerFast"),aVr.forEach(t),rro=r(b9," (XGLM model)"),b9.forEach(t),tro=i(C),ph=n(C,"LI",{});var y4e=s(ph);Yee=n(y4e,"STRONG",{});var nVr=s(Yee);aro=r(nVr,"xlm"),nVr.forEach(t),nro=r(y4e," \u2014 "),NR=n(y4e,"A",{href:!0});var sVr=s(NR);sro=r(sVr,"XLMTokenizer"),sVr.forEach(t),lro=r(y4e," (XLM model)"),y4e.forEach(t),iro=i(C),_h=n(C,"LI",{});var L4e=s(_h);Kee=n(L4e,"STRONG",{});var lVr=s(Kee);dro=r(lVr,"xlm-prophetnet"),lVr.forEach(t),cro=r(L4e," \u2014 "),jR=n(L4e,"A",{href:!0});var iVr=s(jR);fro=r(iVr,"XLMProphetNetTokenizer"),iVr.forEach(t),mro=r(L4e," (XLMProphetNet model)"),L4e.forEach(t),gro=i(C),Ds=n(C,"LI",{});var v9=s(Ds);Zee=n(v9,"STRONG",{});var dVr=s(Zee);hro=r(dVr,"xlm-roberta"),dVr.forEach(t),pro=r(v9," \u2014 "),DR=n(v9,"A",{href:!0});var cVr=s(DR);_ro=r(cVr,"XLMRobertaTokenizer"),cVr.forEach(t),uro=r(v9," or "),GR=n(v9,"A",{href:!0});var fVr=s(GR);bro=r(fVr,"XLMRobertaTokenizerFast"),fVr.forEach(t),vro=r(v9," (XLM-RoBERTa model)"),v9.forEach(t),Fro=i(C),Gs=n(C,"LI",{});var F9=s(Gs);eoe=n(F9,"STRONG",{});var mVr=s(eoe);Tro=r(mVr,"xlnet"),mVr.forEach(t),Mro=r(F9," \u2014 "),OR=n(F9,"A",{href:!0});var gVr=s(OR);Ero=r(gVr,"XLNetTokenizer"),gVr.forEach(t),Cro=r(F9," or "),VR=n(F9,"A",{href:!0});var hVr=s(VR);wro=r(hVr,"XLNetTokenizerFast"),hVr.forEach(t),Aro=r(F9," (XLNet model)"),F9.forEach(t),C.forEach(t),yro=i(ha),ooe=n(ha,"P",{});var pVr=s(ooe);Lro=r(pVr,"Examples:"),pVr.forEach(t),xro=i(ha),m(H5.$$.fragment,ha),ha.forEach(t),kro=i(Qs),uh=n(Qs,"DIV",{class:!0});var e$e=s(uh);m(U5.$$.fragment,e$e),Sro=i(e$e),roe=n(e$e,"P",{});var _Vr=s(roe);Rro=r(_Vr,"Register a new tokenizer in this mapping."),_Vr.forEach(t),e$e.forEach(t),Qs.forEach(t),JRe=i(c),Ji=n(c,"H2",{class:!0});var o$e=s(Ji);bh=n(o$e,"A",{id:!0,class:!0,href:!0});var uVr=s(bh);toe=n(uVr,"SPAN",{});var bVr=s(toe);m(J5.$$.fragment,bVr),bVr.forEach(t),uVr.forEach(t),Bro=i(o$e),aoe=n(o$e,"SPAN",{});var vVr=s(aoe);Pro=r(vVr,"AutoFeatureExtractor"),vVr.forEach(t),o$e.forEach(t),YRe=i(c),Ho=n(c,"DIV",{class:!0});var Ws=s(Ho);m(Y5.$$.fragment,Ws),$ro=i(Ws),K5=n(Ws,"P",{});var r$e=s(K5);Iro=r(r$e,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),XR=n(r$e,"A",{href:!0});var FVr=s(XR);qro=r(FVr,"AutoFeatureExtractor.from_pretrained()"),FVr.forEach(t),Nro=r(r$e," class method."),r$e.forEach(t),jro=i(Ws),Z5=n(Ws,"P",{});var t$e=s(Z5);Dro=r(t$e,"This class cannot be instantiated directly using "),noe=n(t$e,"CODE",{});var TVr=s(noe);Gro=r(TVr,"__init__()"),TVr.forEach(t),Oro=r(t$e," (throws an error)."),t$e.forEach(t),Vro=i(Ws),$e=n(Ws,"DIV",{class:!0});var Nt=s($e);m(e3.$$.fragment,Nt),Xro=i(Nt),soe=n(Nt,"P",{});var MVr=s(soe);zro=r(MVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),MVr.forEach(t),Qro=i(Nt),Va=n(Nt,"P",{});var RE=s(Va);Wro=r(RE,"The feature extractor class to instantiate is selected based on the "),loe=n(RE,"CODE",{});var EVr=s(loe);Hro=r(EVr,"model_type"),EVr.forEach(t),Uro=r(RE,` property of the config object
(either passed as an argument or loaded from `),ioe=n(RE,"CODE",{});var CVr=s(ioe);Jro=r(CVr,"pretrained_model_name_or_path"),CVr.forEach(t),Yro=r(RE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),doe=n(RE,"CODE",{});var wVr=s(doe);Kro=r(wVr,"pretrained_model_name_or_path"),wVr.forEach(t),Zro=r(RE,":"),RE.forEach(t),eto=i(Nt),J=n(Nt,"UL",{});var oe=s(J);vh=n(oe,"LI",{});var x4e=s(vh);coe=n(x4e,"STRONG",{});var AVr=s(coe);oto=r(AVr,"beit"),AVr.forEach(t),rto=r(x4e," \u2014 "),zR=n(x4e,"A",{href:!0});var yVr=s(zR);tto=r(yVr,"BeitFeatureExtractor"),yVr.forEach(t),ato=r(x4e," (BEiT model)"),x4e.forEach(t),nto=i(oe),Fh=n(oe,"LI",{});var k4e=s(Fh);foe=n(k4e,"STRONG",{});var LVr=s(foe);sto=r(LVr,"clip"),LVr.forEach(t),lto=r(k4e," \u2014 "),QR=n(k4e,"A",{href:!0});var xVr=s(QR);ito=r(xVr,"CLIPFeatureExtractor"),xVr.forEach(t),dto=r(k4e," (CLIP model)"),k4e.forEach(t),cto=i(oe),Th=n(oe,"LI",{});var S4e=s(Th);moe=n(S4e,"STRONG",{});var kVr=s(moe);fto=r(kVr,"convnext"),kVr.forEach(t),mto=r(S4e," \u2014 "),WR=n(S4e,"A",{href:!0});var SVr=s(WR);gto=r(SVr,"ConvNextFeatureExtractor"),SVr.forEach(t),hto=r(S4e," (ConvNext model)"),S4e.forEach(t),pto=i(oe),Mh=n(oe,"LI",{});var R4e=s(Mh);goe=n(R4e,"STRONG",{});var RVr=s(goe);_to=r(RVr,"deit"),RVr.forEach(t),uto=r(R4e," \u2014 "),HR=n(R4e,"A",{href:!0});var BVr=s(HR);bto=r(BVr,"DeiTFeatureExtractor"),BVr.forEach(t),vto=r(R4e," (DeiT model)"),R4e.forEach(t),Fto=i(oe),Eh=n(oe,"LI",{});var B4e=s(Eh);hoe=n(B4e,"STRONG",{});var PVr=s(hoe);Tto=r(PVr,"detr"),PVr.forEach(t),Mto=r(B4e," \u2014 "),UR=n(B4e,"A",{href:!0});var $Vr=s(UR);Eto=r($Vr,"DetrFeatureExtractor"),$Vr.forEach(t),Cto=r(B4e," (DETR model)"),B4e.forEach(t),wto=i(oe),Ch=n(oe,"LI",{});var P4e=s(Ch);poe=n(P4e,"STRONG",{});var IVr=s(poe);Ato=r(IVr,"hubert"),IVr.forEach(t),yto=r(P4e," \u2014 "),JR=n(P4e,"A",{href:!0});var qVr=s(JR);Lto=r(qVr,"Wav2Vec2FeatureExtractor"),qVr.forEach(t),xto=r(P4e," (Hubert model)"),P4e.forEach(t),kto=i(oe),wh=n(oe,"LI",{});var $4e=s(wh);_oe=n($4e,"STRONG",{});var NVr=s(_oe);Sto=r(NVr,"imagegpt"),NVr.forEach(t),Rto=r($4e," \u2014 "),YR=n($4e,"A",{href:!0});var jVr=s(YR);Bto=r(jVr,"ImageGPTFeatureExtractor"),jVr.forEach(t),Pto=r($4e," (ImageGPT model)"),$4e.forEach(t),$to=i(oe),Ah=n(oe,"LI",{});var I4e=s(Ah);uoe=n(I4e,"STRONG",{});var DVr=s(uoe);Ito=r(DVr,"layoutlmv2"),DVr.forEach(t),qto=r(I4e," \u2014 "),KR=n(I4e,"A",{href:!0});var GVr=s(KR);Nto=r(GVr,"LayoutLMv2FeatureExtractor"),GVr.forEach(t),jto=r(I4e," (LayoutLMv2 model)"),I4e.forEach(t),Dto=i(oe),yh=n(oe,"LI",{});var q4e=s(yh);boe=n(q4e,"STRONG",{});var OVr=s(boe);Gto=r(OVr,"maskformer"),OVr.forEach(t),Oto=r(q4e," \u2014 "),ZR=n(q4e,"A",{href:!0});var VVr=s(ZR);Vto=r(VVr,"MaskFormerFeatureExtractor"),VVr.forEach(t),Xto=r(q4e," (MaskFormer model)"),q4e.forEach(t),zto=i(oe),Lh=n(oe,"LI",{});var N4e=s(Lh);voe=n(N4e,"STRONG",{});var XVr=s(voe);Qto=r(XVr,"perceiver"),XVr.forEach(t),Wto=r(N4e," \u2014 "),eB=n(N4e,"A",{href:!0});var zVr=s(eB);Hto=r(zVr,"PerceiverFeatureExtractor"),zVr.forEach(t),Uto=r(N4e," (Perceiver model)"),N4e.forEach(t),Jto=i(oe),xh=n(oe,"LI",{});var j4e=s(xh);Foe=n(j4e,"STRONG",{});var QVr=s(Foe);Yto=r(QVr,"poolformer"),QVr.forEach(t),Kto=r(j4e," \u2014 "),oB=n(j4e,"A",{href:!0});var WVr=s(oB);Zto=r(WVr,"PoolFormerFeatureExtractor"),WVr.forEach(t),eao=r(j4e," (PoolFormer model)"),j4e.forEach(t),oao=i(oe),kh=n(oe,"LI",{});var D4e=s(kh);Toe=n(D4e,"STRONG",{});var HVr=s(Toe);rao=r(HVr,"regnet"),HVr.forEach(t),tao=r(D4e," \u2014 "),rB=n(D4e,"A",{href:!0});var UVr=s(rB);aao=r(UVr,"ConvNextFeatureExtractor"),UVr.forEach(t),nao=r(D4e," (RegNet model)"),D4e.forEach(t),sao=i(oe),Sh=n(oe,"LI",{});var G4e=s(Sh);Moe=n(G4e,"STRONG",{});var JVr=s(Moe);lao=r(JVr,"resnet"),JVr.forEach(t),iao=r(G4e," \u2014 "),tB=n(G4e,"A",{href:!0});var YVr=s(tB);dao=r(YVr,"ConvNextFeatureExtractor"),YVr.forEach(t),cao=r(G4e," (ResNet model)"),G4e.forEach(t),fao=i(oe),Rh=n(oe,"LI",{});var O4e=s(Rh);Eoe=n(O4e,"STRONG",{});var KVr=s(Eoe);mao=r(KVr,"segformer"),KVr.forEach(t),gao=r(O4e," \u2014 "),aB=n(O4e,"A",{href:!0});var ZVr=s(aB);hao=r(ZVr,"SegformerFeatureExtractor"),ZVr.forEach(t),pao=r(O4e," (SegFormer model)"),O4e.forEach(t),_ao=i(oe),Bh=n(oe,"LI",{});var V4e=s(Bh);Coe=n(V4e,"STRONG",{});var eXr=s(Coe);uao=r(eXr,"speech_to_text"),eXr.forEach(t),bao=r(V4e," \u2014 "),nB=n(V4e,"A",{href:!0});var oXr=s(nB);vao=r(oXr,"Speech2TextFeatureExtractor"),oXr.forEach(t),Fao=r(V4e," (Speech2Text model)"),V4e.forEach(t),Tao=i(oe),Ph=n(oe,"LI",{});var X4e=s(Ph);woe=n(X4e,"STRONG",{});var rXr=s(woe);Mao=r(rXr,"swin"),rXr.forEach(t),Eao=r(X4e," \u2014 "),sB=n(X4e,"A",{href:!0});var tXr=s(sB);Cao=r(tXr,"ViTFeatureExtractor"),tXr.forEach(t),wao=r(X4e," (Swin model)"),X4e.forEach(t),Aao=i(oe),$h=n(oe,"LI",{});var z4e=s($h);Aoe=n(z4e,"STRONG",{});var aXr=s(Aoe);yao=r(aXr,"van"),aXr.forEach(t),Lao=r(z4e," \u2014 "),lB=n(z4e,"A",{href:!0});var nXr=s(lB);xao=r(nXr,"ConvNextFeatureExtractor"),nXr.forEach(t),kao=r(z4e," (VAN model)"),z4e.forEach(t),Sao=i(oe),Ih=n(oe,"LI",{});var Q4e=s(Ih);yoe=n(Q4e,"STRONG",{});var sXr=s(yoe);Rao=r(sXr,"vit"),sXr.forEach(t),Bao=r(Q4e," \u2014 "),iB=n(Q4e,"A",{href:!0});var lXr=s(iB);Pao=r(lXr,"ViTFeatureExtractor"),lXr.forEach(t),$ao=r(Q4e," (ViT model)"),Q4e.forEach(t),Iao=i(oe),qh=n(oe,"LI",{});var W4e=s(qh);Loe=n(W4e,"STRONG",{});var iXr=s(Loe);qao=r(iXr,"vit_mae"),iXr.forEach(t),Nao=r(W4e," \u2014 "),dB=n(W4e,"A",{href:!0});var dXr=s(dB);jao=r(dXr,"ViTFeatureExtractor"),dXr.forEach(t),Dao=r(W4e," (ViTMAE model)"),W4e.forEach(t),Gao=i(oe),Nh=n(oe,"LI",{});var H4e=s(Nh);xoe=n(H4e,"STRONG",{});var cXr=s(xoe);Oao=r(cXr,"wav2vec2"),cXr.forEach(t),Vao=r(H4e," \u2014 "),cB=n(H4e,"A",{href:!0});var fXr=s(cB);Xao=r(fXr,"Wav2Vec2FeatureExtractor"),fXr.forEach(t),zao=r(H4e," (Wav2Vec2 model)"),H4e.forEach(t),oe.forEach(t),Qao=i(Nt),m(jh.$$.fragment,Nt),Wao=i(Nt),koe=n(Nt,"P",{});var mXr=s(koe);Hao=r(mXr,"Examples:"),mXr.forEach(t),Uao=i(Nt),m(o3.$$.fragment,Nt),Nt.forEach(t),Jao=i(Ws),Dh=n(Ws,"DIV",{class:!0});var a$e=s(Dh);m(r3.$$.fragment,a$e),Yao=i(a$e),Soe=n(a$e,"P",{});var gXr=s(Soe);Kao=r(gXr,"Register a new feature extractor for this class."),gXr.forEach(t),a$e.forEach(t),Ws.forEach(t),KRe=i(c),Yi=n(c,"H2",{class:!0});var n$e=s(Yi);Gh=n(n$e,"A",{id:!0,class:!0,href:!0});var hXr=s(Gh);Roe=n(hXr,"SPAN",{});var pXr=s(Roe);m(t3.$$.fragment,pXr),pXr.forEach(t),hXr.forEach(t),Zao=i(n$e),Boe=n(n$e,"SPAN",{});var _Xr=s(Boe);eno=r(_Xr,"AutoProcessor"),_Xr.forEach(t),n$e.forEach(t),ZRe=i(c),Uo=n(c,"DIV",{class:!0});var Hs=s(Uo);m(a3.$$.fragment,Hs),ono=i(Hs),n3=n(Hs,"P",{});var s$e=s(n3);rno=r(s$e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fB=n(s$e,"A",{href:!0});var uXr=s(fB);tno=r(uXr,"AutoProcessor.from_pretrained()"),uXr.forEach(t),ano=r(s$e," class method."),s$e.forEach(t),nno=i(Hs),s3=n(Hs,"P",{});var l$e=s(s3);sno=r(l$e,"This class cannot be instantiated directly using "),Poe=n(l$e,"CODE",{});var bXr=s(Poe);lno=r(bXr,"__init__()"),bXr.forEach(t),ino=r(l$e," (throws an error)."),l$e.forEach(t),dno=i(Hs),Ie=n(Hs,"DIV",{class:!0});var jt=s(Ie);m(l3.$$.fragment,jt),cno=i(jt),$oe=n(jt,"P",{});var vXr=s($oe);fno=r(vXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vXr.forEach(t),mno=i(jt),Ki=n(jt,"P",{});var yU=s(Ki);gno=r(yU,"The processor class to instantiate is selected based on the "),Ioe=n(yU,"CODE",{});var FXr=s(Ioe);hno=r(FXr,"model_type"),FXr.forEach(t),pno=r(yU,` property of the config object (either
passed as an argument or loaded from `),qoe=n(yU,"CODE",{});var TXr=s(qoe);_no=r(TXr,"pretrained_model_name_or_path"),TXr.forEach(t),uno=r(yU," if possible):"),yU.forEach(t),bno=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Oh=n(jo,"LI",{});var U4e=s(Oh);Noe=n(U4e,"STRONG",{});var MXr=s(Noe);vno=r(MXr,"clip"),MXr.forEach(t),Fno=r(U4e," \u2014 "),mB=n(U4e,"A",{href:!0});var EXr=s(mB);Tno=r(EXr,"CLIPProcessor"),EXr.forEach(t),Mno=r(U4e," (CLIP model)"),U4e.forEach(t),Eno=i(jo),Vh=n(jo,"LI",{});var J4e=s(Vh);joe=n(J4e,"STRONG",{});var CXr=s(joe);Cno=r(CXr,"layoutlmv2"),CXr.forEach(t),wno=r(J4e," \u2014 "),gB=n(J4e,"A",{href:!0});var wXr=s(gB);Ano=r(wXr,"LayoutLMv2Processor"),wXr.forEach(t),yno=r(J4e," (LayoutLMv2 model)"),J4e.forEach(t),Lno=i(jo),Xh=n(jo,"LI",{});var Y4e=s(Xh);Doe=n(Y4e,"STRONG",{});var AXr=s(Doe);xno=r(AXr,"layoutxlm"),AXr.forEach(t),kno=r(Y4e," \u2014 "),hB=n(Y4e,"A",{href:!0});var yXr=s(hB);Sno=r(yXr,"LayoutXLMProcessor"),yXr.forEach(t),Rno=r(Y4e," (LayoutXLM model)"),Y4e.forEach(t),Bno=i(jo),zh=n(jo,"LI",{});var K4e=s(zh);Goe=n(K4e,"STRONG",{});var LXr=s(Goe);Pno=r(LXr,"speech_to_text"),LXr.forEach(t),$no=r(K4e," \u2014 "),pB=n(K4e,"A",{href:!0});var xXr=s(pB);Ino=r(xXr,"Speech2TextProcessor"),xXr.forEach(t),qno=r(K4e," (Speech2Text model)"),K4e.forEach(t),Nno=i(jo),Qh=n(jo,"LI",{});var Z4e=s(Qh);Ooe=n(Z4e,"STRONG",{});var kXr=s(Ooe);jno=r(kXr,"speech_to_text_2"),kXr.forEach(t),Dno=r(Z4e," \u2014 "),_B=n(Z4e,"A",{href:!0});var SXr=s(_B);Gno=r(SXr,"Speech2Text2Processor"),SXr.forEach(t),Ono=r(Z4e," (Speech2Text2 model)"),Z4e.forEach(t),Vno=i(jo),Wh=n(jo,"LI",{});var eEe=s(Wh);Voe=n(eEe,"STRONG",{});var RXr=s(Voe);Xno=r(RXr,"trocr"),RXr.forEach(t),zno=r(eEe," \u2014 "),uB=n(eEe,"A",{href:!0});var BXr=s(uB);Qno=r(BXr,"TrOCRProcessor"),BXr.forEach(t),Wno=r(eEe," (TrOCR model)"),eEe.forEach(t),Hno=i(jo),Hh=n(jo,"LI",{});var oEe=s(Hh);Xoe=n(oEe,"STRONG",{});var PXr=s(Xoe);Uno=r(PXr,"vision-text-dual-encoder"),PXr.forEach(t),Jno=r(oEe," \u2014 "),bB=n(oEe,"A",{href:!0});var $Xr=s(bB);Yno=r($Xr,"VisionTextDualEncoderProcessor"),$Xr.forEach(t),Kno=r(oEe," (VisionTextDualEncoder model)"),oEe.forEach(t),Zno=i(jo),Uh=n(jo,"LI",{});var rEe=s(Uh);zoe=n(rEe,"STRONG",{});var IXr=s(zoe);eso=r(IXr,"wav2vec2"),IXr.forEach(t),oso=r(rEe," \u2014 "),vB=n(rEe,"A",{href:!0});var qXr=s(vB);rso=r(qXr,"Wav2Vec2Processor"),qXr.forEach(t),tso=r(rEe," (Wav2Vec2 model)"),rEe.forEach(t),jo.forEach(t),aso=i(jt),m(Jh.$$.fragment,jt),nso=i(jt),Qoe=n(jt,"P",{});var NXr=s(Qoe);sso=r(NXr,"Examples:"),NXr.forEach(t),lso=i(jt),m(i3.$$.fragment,jt),jt.forEach(t),iso=i(Hs),Yh=n(Hs,"DIV",{class:!0});var i$e=s(Yh);m(d3.$$.fragment,i$e),dso=i(i$e),Woe=n(i$e,"P",{});var jXr=s(Woe);cso=r(jXr,"Register a new processor for this class."),jXr.forEach(t),i$e.forEach(t),Hs.forEach(t),eBe=i(c),Zi=n(c,"H2",{class:!0});var d$e=s(Zi);Kh=n(d$e,"A",{id:!0,class:!0,href:!0});var DXr=s(Kh);Hoe=n(DXr,"SPAN",{});var GXr=s(Hoe);m(c3.$$.fragment,GXr),GXr.forEach(t),DXr.forEach(t),fso=i(d$e),Uoe=n(d$e,"SPAN",{});var OXr=s(Uoe);mso=r(OXr,"AutoModel"),OXr.forEach(t),d$e.forEach(t),oBe=i(c),Jo=n(c,"DIV",{class:!0});var Us=s(Jo);m(f3.$$.fragment,Us),gso=i(Us),ed=n(Us,"P",{});var LU=s(ed);hso=r(LU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FB=n(LU,"A",{href:!0});var VXr=s(FB);pso=r(VXr,"from_pretrained()"),VXr.forEach(t),_so=r(LU," class method or the "),TB=n(LU,"A",{href:!0});var XXr=s(TB);uso=r(XXr,"from_config()"),XXr.forEach(t),bso=r(LU,` class
method.`),LU.forEach(t),vso=i(Us),m3=n(Us,"P",{});var c$e=s(m3);Fso=r(c$e,"This class cannot be instantiated directly using "),Joe=n(c$e,"CODE",{});var zXr=s(Joe);Tso=r(zXr,"__init__()"),zXr.forEach(t),Mso=r(c$e," (throws an error)."),c$e.forEach(t),Eso=i(Us),Xr=n(Us,"DIV",{class:!0});var Js=s(Xr);m(g3.$$.fragment,Js),Cso=i(Js),Yoe=n(Js,"P",{});var QXr=s(Yoe);wso=r(QXr,"Instantiates one of the base model classes of the library from a configuration."),QXr.forEach(t),Aso=i(Js),od=n(Js,"P",{});var xU=s(od);yso=r(xU,`Note:
Loading a model from its configuration file does `),Koe=n(xU,"STRONG",{});var WXr=s(Koe);Lso=r(WXr,"not"),WXr.forEach(t),xso=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MB=n(xU,"A",{href:!0});var HXr=s(MB);kso=r(HXr,"from_pretrained()"),HXr.forEach(t),Sso=r(xU," to load the model weights."),xU.forEach(t),Rso=i(Js),Zoe=n(Js,"P",{});var UXr=s(Zoe);Bso=r(UXr,"Examples:"),UXr.forEach(t),Pso=i(Js),m(h3.$$.fragment,Js),Js.forEach(t),$so=i(Us),qe=n(Us,"DIV",{class:!0});var Dt=s(qe);m(p3.$$.fragment,Dt),Iso=i(Dt),ere=n(Dt,"P",{});var JXr=s(ere);qso=r(JXr,"Instantiate one of the base model classes of the library from a pretrained model."),JXr.forEach(t),Nso=i(Dt),Xa=n(Dt,"P",{});var BE=s(Xa);jso=r(BE,"The model class to instantiate is selected based on the "),ore=n(BE,"CODE",{});var YXr=s(ore);Dso=r(YXr,"model_type"),YXr.forEach(t),Gso=r(BE,` property of the config object (either
passed as an argument or loaded from `),rre=n(BE,"CODE",{});var KXr=s(rre);Oso=r(KXr,"pretrained_model_name_or_path"),KXr.forEach(t),Vso=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tre=n(BE,"CODE",{});var ZXr=s(tre);Xso=r(ZXr,"pretrained_model_name_or_path"),ZXr.forEach(t),zso=r(BE,":"),BE.forEach(t),Qso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Zh=n(M,"LI",{});var tEe=s(Zh);are=n(tEe,"STRONG",{});var ezr=s(are);Wso=r(ezr,"albert"),ezr.forEach(t),Hso=r(tEe," \u2014 "),EB=n(tEe,"A",{href:!0});var ozr=s(EB);Uso=r(ozr,"AlbertModel"),ozr.forEach(t),Jso=r(tEe," (ALBERT model)"),tEe.forEach(t),Yso=i(M),ep=n(M,"LI",{});var aEe=s(ep);nre=n(aEe,"STRONG",{});var rzr=s(nre);Kso=r(rzr,"bart"),rzr.forEach(t),Zso=r(aEe," \u2014 "),CB=n(aEe,"A",{href:!0});var tzr=s(CB);elo=r(tzr,"BartModel"),tzr.forEach(t),olo=r(aEe," (BART model)"),aEe.forEach(t),rlo=i(M),op=n(M,"LI",{});var nEe=s(op);sre=n(nEe,"STRONG",{});var azr=s(sre);tlo=r(azr,"beit"),azr.forEach(t),alo=r(nEe," \u2014 "),wB=n(nEe,"A",{href:!0});var nzr=s(wB);nlo=r(nzr,"BeitModel"),nzr.forEach(t),slo=r(nEe," (BEiT model)"),nEe.forEach(t),llo=i(M),rp=n(M,"LI",{});var sEe=s(rp);lre=n(sEe,"STRONG",{});var szr=s(lre);ilo=r(szr,"bert"),szr.forEach(t),dlo=r(sEe," \u2014 "),AB=n(sEe,"A",{href:!0});var lzr=s(AB);clo=r(lzr,"BertModel"),lzr.forEach(t),flo=r(sEe," (BERT model)"),sEe.forEach(t),mlo=i(M),tp=n(M,"LI",{});var lEe=s(tp);ire=n(lEe,"STRONG",{});var izr=s(ire);glo=r(izr,"bert-generation"),izr.forEach(t),hlo=r(lEe," \u2014 "),yB=n(lEe,"A",{href:!0});var dzr=s(yB);plo=r(dzr,"BertGenerationEncoder"),dzr.forEach(t),_lo=r(lEe," (Bert Generation model)"),lEe.forEach(t),ulo=i(M),ap=n(M,"LI",{});var iEe=s(ap);dre=n(iEe,"STRONG",{});var czr=s(dre);blo=r(czr,"big_bird"),czr.forEach(t),vlo=r(iEe," \u2014 "),LB=n(iEe,"A",{href:!0});var fzr=s(LB);Flo=r(fzr,"BigBirdModel"),fzr.forEach(t),Tlo=r(iEe," (BigBird model)"),iEe.forEach(t),Mlo=i(M),np=n(M,"LI",{});var dEe=s(np);cre=n(dEe,"STRONG",{});var mzr=s(cre);Elo=r(mzr,"bigbird_pegasus"),mzr.forEach(t),Clo=r(dEe," \u2014 "),xB=n(dEe,"A",{href:!0});var gzr=s(xB);wlo=r(gzr,"BigBirdPegasusModel"),gzr.forEach(t),Alo=r(dEe," (BigBirdPegasus model)"),dEe.forEach(t),ylo=i(M),sp=n(M,"LI",{});var cEe=s(sp);fre=n(cEe,"STRONG",{});var hzr=s(fre);Llo=r(hzr,"blenderbot"),hzr.forEach(t),xlo=r(cEe," \u2014 "),kB=n(cEe,"A",{href:!0});var pzr=s(kB);klo=r(pzr,"BlenderbotModel"),pzr.forEach(t),Slo=r(cEe," (Blenderbot model)"),cEe.forEach(t),Rlo=i(M),lp=n(M,"LI",{});var fEe=s(lp);mre=n(fEe,"STRONG",{});var _zr=s(mre);Blo=r(_zr,"blenderbot-small"),_zr.forEach(t),Plo=r(fEe," \u2014 "),SB=n(fEe,"A",{href:!0});var uzr=s(SB);$lo=r(uzr,"BlenderbotSmallModel"),uzr.forEach(t),Ilo=r(fEe," (BlenderbotSmall model)"),fEe.forEach(t),qlo=i(M),ip=n(M,"LI",{});var mEe=s(ip);gre=n(mEe,"STRONG",{});var bzr=s(gre);Nlo=r(bzr,"camembert"),bzr.forEach(t),jlo=r(mEe," \u2014 "),RB=n(mEe,"A",{href:!0});var vzr=s(RB);Dlo=r(vzr,"CamembertModel"),vzr.forEach(t),Glo=r(mEe," (CamemBERT model)"),mEe.forEach(t),Olo=i(M),dp=n(M,"LI",{});var gEe=s(dp);hre=n(gEe,"STRONG",{});var Fzr=s(hre);Vlo=r(Fzr,"canine"),Fzr.forEach(t),Xlo=r(gEe," \u2014 "),BB=n(gEe,"A",{href:!0});var Tzr=s(BB);zlo=r(Tzr,"CanineModel"),Tzr.forEach(t),Qlo=r(gEe," (Canine model)"),gEe.forEach(t),Wlo=i(M),cp=n(M,"LI",{});var hEe=s(cp);pre=n(hEe,"STRONG",{});var Mzr=s(pre);Hlo=r(Mzr,"clip"),Mzr.forEach(t),Ulo=r(hEe," \u2014 "),PB=n(hEe,"A",{href:!0});var Ezr=s(PB);Jlo=r(Ezr,"CLIPModel"),Ezr.forEach(t),Ylo=r(hEe," (CLIP model)"),hEe.forEach(t),Klo=i(M),fp=n(M,"LI",{});var pEe=s(fp);_re=n(pEe,"STRONG",{});var Czr=s(_re);Zlo=r(Czr,"convbert"),Czr.forEach(t),eio=r(pEe," \u2014 "),$B=n(pEe,"A",{href:!0});var wzr=s($B);oio=r(wzr,"ConvBertModel"),wzr.forEach(t),rio=r(pEe," (ConvBERT model)"),pEe.forEach(t),tio=i(M),mp=n(M,"LI",{});var _Ee=s(mp);ure=n(_Ee,"STRONG",{});var Azr=s(ure);aio=r(Azr,"convnext"),Azr.forEach(t),nio=r(_Ee," \u2014 "),IB=n(_Ee,"A",{href:!0});var yzr=s(IB);sio=r(yzr,"ConvNextModel"),yzr.forEach(t),lio=r(_Ee," (ConvNext model)"),_Ee.forEach(t),iio=i(M),gp=n(M,"LI",{});var uEe=s(gp);bre=n(uEe,"STRONG",{});var Lzr=s(bre);dio=r(Lzr,"ctrl"),Lzr.forEach(t),cio=r(uEe," \u2014 "),qB=n(uEe,"A",{href:!0});var xzr=s(qB);fio=r(xzr,"CTRLModel"),xzr.forEach(t),mio=r(uEe," (CTRL model)"),uEe.forEach(t),gio=i(M),hp=n(M,"LI",{});var bEe=s(hp);vre=n(bEe,"STRONG",{});var kzr=s(vre);hio=r(kzr,"data2vec-audio"),kzr.forEach(t),pio=r(bEe," \u2014 "),NB=n(bEe,"A",{href:!0});var Szr=s(NB);_io=r(Szr,"Data2VecAudioModel"),Szr.forEach(t),uio=r(bEe," (Data2VecAudio model)"),bEe.forEach(t),bio=i(M),pp=n(M,"LI",{});var vEe=s(pp);Fre=n(vEe,"STRONG",{});var Rzr=s(Fre);vio=r(Rzr,"data2vec-text"),Rzr.forEach(t),Fio=r(vEe," \u2014 "),jB=n(vEe,"A",{href:!0});var Bzr=s(jB);Tio=r(Bzr,"Data2VecTextModel"),Bzr.forEach(t),Mio=r(vEe," (Data2VecText model)"),vEe.forEach(t),Eio=i(M),_p=n(M,"LI",{});var FEe=s(_p);Tre=n(FEe,"STRONG",{});var Pzr=s(Tre);Cio=r(Pzr,"data2vec-vision"),Pzr.forEach(t),wio=r(FEe," \u2014 "),DB=n(FEe,"A",{href:!0});var $zr=s(DB);Aio=r($zr,"Data2VecVisionModel"),$zr.forEach(t),yio=r(FEe," (Data2VecVision model)"),FEe.forEach(t),Lio=i(M),up=n(M,"LI",{});var TEe=s(up);Mre=n(TEe,"STRONG",{});var Izr=s(Mre);xio=r(Izr,"deberta"),Izr.forEach(t),kio=r(TEe," \u2014 "),GB=n(TEe,"A",{href:!0});var qzr=s(GB);Sio=r(qzr,"DebertaModel"),qzr.forEach(t),Rio=r(TEe," (DeBERTa model)"),TEe.forEach(t),Bio=i(M),bp=n(M,"LI",{});var MEe=s(bp);Ere=n(MEe,"STRONG",{});var Nzr=s(Ere);Pio=r(Nzr,"deberta-v2"),Nzr.forEach(t),$io=r(MEe," \u2014 "),OB=n(MEe,"A",{href:!0});var jzr=s(OB);Iio=r(jzr,"DebertaV2Model"),jzr.forEach(t),qio=r(MEe," (DeBERTa-v2 model)"),MEe.forEach(t),Nio=i(M),vp=n(M,"LI",{});var EEe=s(vp);Cre=n(EEe,"STRONG",{});var Dzr=s(Cre);jio=r(Dzr,"decision_transformer"),Dzr.forEach(t),Dio=r(EEe," \u2014 "),VB=n(EEe,"A",{href:!0});var Gzr=s(VB);Gio=r(Gzr,"DecisionTransformerModel"),Gzr.forEach(t),Oio=r(EEe," (Decision Transformer model)"),EEe.forEach(t),Vio=i(M),Fp=n(M,"LI",{});var CEe=s(Fp);wre=n(CEe,"STRONG",{});var Ozr=s(wre);Xio=r(Ozr,"deit"),Ozr.forEach(t),zio=r(CEe," \u2014 "),XB=n(CEe,"A",{href:!0});var Vzr=s(XB);Qio=r(Vzr,"DeiTModel"),Vzr.forEach(t),Wio=r(CEe," (DeiT model)"),CEe.forEach(t),Hio=i(M),Tp=n(M,"LI",{});var wEe=s(Tp);Are=n(wEe,"STRONG",{});var Xzr=s(Are);Uio=r(Xzr,"detr"),Xzr.forEach(t),Jio=r(wEe," \u2014 "),zB=n(wEe,"A",{href:!0});var zzr=s(zB);Yio=r(zzr,"DetrModel"),zzr.forEach(t),Kio=r(wEe," (DETR model)"),wEe.forEach(t),Zio=i(M),Mp=n(M,"LI",{});var AEe=s(Mp);yre=n(AEe,"STRONG",{});var Qzr=s(yre);edo=r(Qzr,"distilbert"),Qzr.forEach(t),odo=r(AEe," \u2014 "),QB=n(AEe,"A",{href:!0});var Wzr=s(QB);rdo=r(Wzr,"DistilBertModel"),Wzr.forEach(t),tdo=r(AEe," (DistilBERT model)"),AEe.forEach(t),ado=i(M),Ep=n(M,"LI",{});var yEe=s(Ep);Lre=n(yEe,"STRONG",{});var Hzr=s(Lre);ndo=r(Hzr,"dpr"),Hzr.forEach(t),sdo=r(yEe," \u2014 "),WB=n(yEe,"A",{href:!0});var Uzr=s(WB);ldo=r(Uzr,"DPRQuestionEncoder"),Uzr.forEach(t),ido=r(yEe," (DPR model)"),yEe.forEach(t),ddo=i(M),Cp=n(M,"LI",{});var LEe=s(Cp);xre=n(LEe,"STRONG",{});var Jzr=s(xre);cdo=r(Jzr,"dpt"),Jzr.forEach(t),fdo=r(LEe," \u2014 "),HB=n(LEe,"A",{href:!0});var Yzr=s(HB);mdo=r(Yzr,"DPTModel"),Yzr.forEach(t),gdo=r(LEe," (DPT model)"),LEe.forEach(t),hdo=i(M),wp=n(M,"LI",{});var xEe=s(wp);kre=n(xEe,"STRONG",{});var Kzr=s(kre);pdo=r(Kzr,"electra"),Kzr.forEach(t),_do=r(xEe," \u2014 "),UB=n(xEe,"A",{href:!0});var Zzr=s(UB);udo=r(Zzr,"ElectraModel"),Zzr.forEach(t),bdo=r(xEe," (ELECTRA model)"),xEe.forEach(t),vdo=i(M),Ap=n(M,"LI",{});var kEe=s(Ap);Sre=n(kEe,"STRONG",{});var eQr=s(Sre);Fdo=r(eQr,"flaubert"),eQr.forEach(t),Tdo=r(kEe," \u2014 "),JB=n(kEe,"A",{href:!0});var oQr=s(JB);Mdo=r(oQr,"FlaubertModel"),oQr.forEach(t),Edo=r(kEe," (FlauBERT model)"),kEe.forEach(t),Cdo=i(M),yp=n(M,"LI",{});var SEe=s(yp);Rre=n(SEe,"STRONG",{});var rQr=s(Rre);wdo=r(rQr,"fnet"),rQr.forEach(t),Ado=r(SEe," \u2014 "),YB=n(SEe,"A",{href:!0});var tQr=s(YB);ydo=r(tQr,"FNetModel"),tQr.forEach(t),Ldo=r(SEe," (FNet model)"),SEe.forEach(t),xdo=i(M),Lp=n(M,"LI",{});var REe=s(Lp);Bre=n(REe,"STRONG",{});var aQr=s(Bre);kdo=r(aQr,"fsmt"),aQr.forEach(t),Sdo=r(REe," \u2014 "),KB=n(REe,"A",{href:!0});var nQr=s(KB);Rdo=r(nQr,"FSMTModel"),nQr.forEach(t),Bdo=r(REe," (FairSeq Machine-Translation model)"),REe.forEach(t),Pdo=i(M),Os=n(M,"LI",{});var T9=s(Os);Pre=n(T9,"STRONG",{});var sQr=s(Pre);$do=r(sQr,"funnel"),sQr.forEach(t),Ido=r(T9," \u2014 "),ZB=n(T9,"A",{href:!0});var lQr=s(ZB);qdo=r(lQr,"FunnelModel"),lQr.forEach(t),Ndo=r(T9," or "),eP=n(T9,"A",{href:!0});var iQr=s(eP);jdo=r(iQr,"FunnelBaseModel"),iQr.forEach(t),Ddo=r(T9," (Funnel Transformer model)"),T9.forEach(t),Gdo=i(M),xp=n(M,"LI",{});var BEe=s(xp);$re=n(BEe,"STRONG",{});var dQr=s($re);Odo=r(dQr,"glpn"),dQr.forEach(t),Vdo=r(BEe," \u2014 "),oP=n(BEe,"A",{href:!0});var cQr=s(oP);Xdo=r(cQr,"GLPNModel"),cQr.forEach(t),zdo=r(BEe," (GLPN model)"),BEe.forEach(t),Qdo=i(M),kp=n(M,"LI",{});var PEe=s(kp);Ire=n(PEe,"STRONG",{});var fQr=s(Ire);Wdo=r(fQr,"gpt2"),fQr.forEach(t),Hdo=r(PEe," \u2014 "),rP=n(PEe,"A",{href:!0});var mQr=s(rP);Udo=r(mQr,"GPT2Model"),mQr.forEach(t),Jdo=r(PEe," (OpenAI GPT-2 model)"),PEe.forEach(t),Ydo=i(M),Sp=n(M,"LI",{});var $Ee=s(Sp);qre=n($Ee,"STRONG",{});var gQr=s(qre);Kdo=r(gQr,"gpt_neo"),gQr.forEach(t),Zdo=r($Ee," \u2014 "),tP=n($Ee,"A",{href:!0});var hQr=s(tP);eco=r(hQr,"GPTNeoModel"),hQr.forEach(t),oco=r($Ee," (GPT Neo model)"),$Ee.forEach(t),rco=i(M),Rp=n(M,"LI",{});var IEe=s(Rp);Nre=n(IEe,"STRONG",{});var pQr=s(Nre);tco=r(pQr,"gptj"),pQr.forEach(t),aco=r(IEe," \u2014 "),aP=n(IEe,"A",{href:!0});var _Qr=s(aP);nco=r(_Qr,"GPTJModel"),_Qr.forEach(t),sco=r(IEe," (GPT-J model)"),IEe.forEach(t),lco=i(M),Bp=n(M,"LI",{});var qEe=s(Bp);jre=n(qEe,"STRONG",{});var uQr=s(jre);ico=r(uQr,"hubert"),uQr.forEach(t),dco=r(qEe," \u2014 "),nP=n(qEe,"A",{href:!0});var bQr=s(nP);cco=r(bQr,"HubertModel"),bQr.forEach(t),fco=r(qEe," (Hubert model)"),qEe.forEach(t),mco=i(M),Pp=n(M,"LI",{});var NEe=s(Pp);Dre=n(NEe,"STRONG",{});var vQr=s(Dre);gco=r(vQr,"ibert"),vQr.forEach(t),hco=r(NEe," \u2014 "),sP=n(NEe,"A",{href:!0});var FQr=s(sP);pco=r(FQr,"IBertModel"),FQr.forEach(t),_co=r(NEe," (I-BERT model)"),NEe.forEach(t),uco=i(M),$p=n(M,"LI",{});var jEe=s($p);Gre=n(jEe,"STRONG",{});var TQr=s(Gre);bco=r(TQr,"imagegpt"),TQr.forEach(t),vco=r(jEe," \u2014 "),lP=n(jEe,"A",{href:!0});var MQr=s(lP);Fco=r(MQr,"ImageGPTModel"),MQr.forEach(t),Tco=r(jEe," (ImageGPT model)"),jEe.forEach(t),Mco=i(M),Ip=n(M,"LI",{});var DEe=s(Ip);Ore=n(DEe,"STRONG",{});var EQr=s(Ore);Eco=r(EQr,"layoutlm"),EQr.forEach(t),Cco=r(DEe," \u2014 "),iP=n(DEe,"A",{href:!0});var CQr=s(iP);wco=r(CQr,"LayoutLMModel"),CQr.forEach(t),Aco=r(DEe," (LayoutLM model)"),DEe.forEach(t),yco=i(M),qp=n(M,"LI",{});var GEe=s(qp);Vre=n(GEe,"STRONG",{});var wQr=s(Vre);Lco=r(wQr,"layoutlmv2"),wQr.forEach(t),xco=r(GEe," \u2014 "),dP=n(GEe,"A",{href:!0});var AQr=s(dP);kco=r(AQr,"LayoutLMv2Model"),AQr.forEach(t),Sco=r(GEe," (LayoutLMv2 model)"),GEe.forEach(t),Rco=i(M),Np=n(M,"LI",{});var OEe=s(Np);Xre=n(OEe,"STRONG",{});var yQr=s(Xre);Bco=r(yQr,"led"),yQr.forEach(t),Pco=r(OEe," \u2014 "),cP=n(OEe,"A",{href:!0});var LQr=s(cP);$co=r(LQr,"LEDModel"),LQr.forEach(t),Ico=r(OEe," (LED model)"),OEe.forEach(t),qco=i(M),jp=n(M,"LI",{});var VEe=s(jp);zre=n(VEe,"STRONG",{});var xQr=s(zre);Nco=r(xQr,"longformer"),xQr.forEach(t),jco=r(VEe," \u2014 "),fP=n(VEe,"A",{href:!0});var kQr=s(fP);Dco=r(kQr,"LongformerModel"),kQr.forEach(t),Gco=r(VEe," (Longformer model)"),VEe.forEach(t),Oco=i(M),Dp=n(M,"LI",{});var XEe=s(Dp);Qre=n(XEe,"STRONG",{});var SQr=s(Qre);Vco=r(SQr,"luke"),SQr.forEach(t),Xco=r(XEe," \u2014 "),mP=n(XEe,"A",{href:!0});var RQr=s(mP);zco=r(RQr,"LukeModel"),RQr.forEach(t),Qco=r(XEe," (LUKE model)"),XEe.forEach(t),Wco=i(M),Gp=n(M,"LI",{});var zEe=s(Gp);Wre=n(zEe,"STRONG",{});var BQr=s(Wre);Hco=r(BQr,"lxmert"),BQr.forEach(t),Uco=r(zEe," \u2014 "),gP=n(zEe,"A",{href:!0});var PQr=s(gP);Jco=r(PQr,"LxmertModel"),PQr.forEach(t),Yco=r(zEe," (LXMERT model)"),zEe.forEach(t),Kco=i(M),Op=n(M,"LI",{});var QEe=s(Op);Hre=n(QEe,"STRONG",{});var $Qr=s(Hre);Zco=r($Qr,"m2m_100"),$Qr.forEach(t),efo=r(QEe," \u2014 "),hP=n(QEe,"A",{href:!0});var IQr=s(hP);ofo=r(IQr,"M2M100Model"),IQr.forEach(t),rfo=r(QEe," (M2M100 model)"),QEe.forEach(t),tfo=i(M),Vp=n(M,"LI",{});var WEe=s(Vp);Ure=n(WEe,"STRONG",{});var qQr=s(Ure);afo=r(qQr,"marian"),qQr.forEach(t),nfo=r(WEe," \u2014 "),pP=n(WEe,"A",{href:!0});var NQr=s(pP);sfo=r(NQr,"MarianModel"),NQr.forEach(t),lfo=r(WEe," (Marian model)"),WEe.forEach(t),ifo=i(M),Xp=n(M,"LI",{});var HEe=s(Xp);Jre=n(HEe,"STRONG",{});var jQr=s(Jre);dfo=r(jQr,"maskformer"),jQr.forEach(t),cfo=r(HEe," \u2014 "),_P=n(HEe,"A",{href:!0});var DQr=s(_P);ffo=r(DQr,"MaskFormerModel"),DQr.forEach(t),mfo=r(HEe," (MaskFormer model)"),HEe.forEach(t),gfo=i(M),zp=n(M,"LI",{});var UEe=s(zp);Yre=n(UEe,"STRONG",{});var GQr=s(Yre);hfo=r(GQr,"mbart"),GQr.forEach(t),pfo=r(UEe," \u2014 "),uP=n(UEe,"A",{href:!0});var OQr=s(uP);_fo=r(OQr,"MBartModel"),OQr.forEach(t),ufo=r(UEe," (mBART model)"),UEe.forEach(t),bfo=i(M),Qp=n(M,"LI",{});var JEe=s(Qp);Kre=n(JEe,"STRONG",{});var VQr=s(Kre);vfo=r(VQr,"megatron-bert"),VQr.forEach(t),Ffo=r(JEe," \u2014 "),bP=n(JEe,"A",{href:!0});var XQr=s(bP);Tfo=r(XQr,"MegatronBertModel"),XQr.forEach(t),Mfo=r(JEe," (MegatronBert model)"),JEe.forEach(t),Efo=i(M),Wp=n(M,"LI",{});var YEe=s(Wp);Zre=n(YEe,"STRONG",{});var zQr=s(Zre);Cfo=r(zQr,"mobilebert"),zQr.forEach(t),wfo=r(YEe," \u2014 "),vP=n(YEe,"A",{href:!0});var QQr=s(vP);Afo=r(QQr,"MobileBertModel"),QQr.forEach(t),yfo=r(YEe," (MobileBERT model)"),YEe.forEach(t),Lfo=i(M),Hp=n(M,"LI",{});var KEe=s(Hp);ete=n(KEe,"STRONG",{});var WQr=s(ete);xfo=r(WQr,"mpnet"),WQr.forEach(t),kfo=r(KEe," \u2014 "),FP=n(KEe,"A",{href:!0});var HQr=s(FP);Sfo=r(HQr,"MPNetModel"),HQr.forEach(t),Rfo=r(KEe," (MPNet model)"),KEe.forEach(t),Bfo=i(M),Up=n(M,"LI",{});var ZEe=s(Up);ote=n(ZEe,"STRONG",{});var UQr=s(ote);Pfo=r(UQr,"mt5"),UQr.forEach(t),$fo=r(ZEe," \u2014 "),TP=n(ZEe,"A",{href:!0});var JQr=s(TP);Ifo=r(JQr,"MT5Model"),JQr.forEach(t),qfo=r(ZEe," (mT5 model)"),ZEe.forEach(t),Nfo=i(M),Jp=n(M,"LI",{});var e5e=s(Jp);rte=n(e5e,"STRONG",{});var YQr=s(rte);jfo=r(YQr,"nystromformer"),YQr.forEach(t),Dfo=r(e5e," \u2014 "),MP=n(e5e,"A",{href:!0});var KQr=s(MP);Gfo=r(KQr,"NystromformerModel"),KQr.forEach(t),Ofo=r(e5e," (Nystromformer model)"),e5e.forEach(t),Vfo=i(M),Yp=n(M,"LI",{});var o5e=s(Yp);tte=n(o5e,"STRONG",{});var ZQr=s(tte);Xfo=r(ZQr,"openai-gpt"),ZQr.forEach(t),zfo=r(o5e," \u2014 "),EP=n(o5e,"A",{href:!0});var eWr=s(EP);Qfo=r(eWr,"OpenAIGPTModel"),eWr.forEach(t),Wfo=r(o5e," (OpenAI GPT model)"),o5e.forEach(t),Hfo=i(M),Kp=n(M,"LI",{});var r5e=s(Kp);ate=n(r5e,"STRONG",{});var oWr=s(ate);Ufo=r(oWr,"pegasus"),oWr.forEach(t),Jfo=r(r5e," \u2014 "),CP=n(r5e,"A",{href:!0});var rWr=s(CP);Yfo=r(rWr,"PegasusModel"),rWr.forEach(t),Kfo=r(r5e," (Pegasus model)"),r5e.forEach(t),Zfo=i(M),Zp=n(M,"LI",{});var t5e=s(Zp);nte=n(t5e,"STRONG",{});var tWr=s(nte);emo=r(tWr,"perceiver"),tWr.forEach(t),omo=r(t5e," \u2014 "),wP=n(t5e,"A",{href:!0});var aWr=s(wP);rmo=r(aWr,"PerceiverModel"),aWr.forEach(t),tmo=r(t5e," (Perceiver model)"),t5e.forEach(t),amo=i(M),e_=n(M,"LI",{});var a5e=s(e_);ste=n(a5e,"STRONG",{});var nWr=s(ste);nmo=r(nWr,"plbart"),nWr.forEach(t),smo=r(a5e," \u2014 "),AP=n(a5e,"A",{href:!0});var sWr=s(AP);lmo=r(sWr,"PLBartModel"),sWr.forEach(t),imo=r(a5e," (PLBart model)"),a5e.forEach(t),dmo=i(M),o_=n(M,"LI",{});var n5e=s(o_);lte=n(n5e,"STRONG",{});var lWr=s(lte);cmo=r(lWr,"poolformer"),lWr.forEach(t),fmo=r(n5e," \u2014 "),yP=n(n5e,"A",{href:!0});var iWr=s(yP);mmo=r(iWr,"PoolFormerModel"),iWr.forEach(t),gmo=r(n5e," (PoolFormer model)"),n5e.forEach(t),hmo=i(M),r_=n(M,"LI",{});var s5e=s(r_);ite=n(s5e,"STRONG",{});var dWr=s(ite);pmo=r(dWr,"prophetnet"),dWr.forEach(t),_mo=r(s5e," \u2014 "),LP=n(s5e,"A",{href:!0});var cWr=s(LP);umo=r(cWr,"ProphetNetModel"),cWr.forEach(t),bmo=r(s5e," (ProphetNet model)"),s5e.forEach(t),vmo=i(M),t_=n(M,"LI",{});var l5e=s(t_);dte=n(l5e,"STRONG",{});var fWr=s(dte);Fmo=r(fWr,"qdqbert"),fWr.forEach(t),Tmo=r(l5e," \u2014 "),xP=n(l5e,"A",{href:!0});var mWr=s(xP);Mmo=r(mWr,"QDQBertModel"),mWr.forEach(t),Emo=r(l5e," (QDQBert model)"),l5e.forEach(t),Cmo=i(M),a_=n(M,"LI",{});var i5e=s(a_);cte=n(i5e,"STRONG",{});var gWr=s(cte);wmo=r(gWr,"reformer"),gWr.forEach(t),Amo=r(i5e," \u2014 "),kP=n(i5e,"A",{href:!0});var hWr=s(kP);ymo=r(hWr,"ReformerModel"),hWr.forEach(t),Lmo=r(i5e," (Reformer model)"),i5e.forEach(t),xmo=i(M),n_=n(M,"LI",{});var d5e=s(n_);fte=n(d5e,"STRONG",{});var pWr=s(fte);kmo=r(pWr,"regnet"),pWr.forEach(t),Smo=r(d5e," \u2014 "),SP=n(d5e,"A",{href:!0});var _Wr=s(SP);Rmo=r(_Wr,"RegNetModel"),_Wr.forEach(t),Bmo=r(d5e," (RegNet model)"),d5e.forEach(t),Pmo=i(M),s_=n(M,"LI",{});var c5e=s(s_);mte=n(c5e,"STRONG",{});var uWr=s(mte);$mo=r(uWr,"rembert"),uWr.forEach(t),Imo=r(c5e," \u2014 "),RP=n(c5e,"A",{href:!0});var bWr=s(RP);qmo=r(bWr,"RemBertModel"),bWr.forEach(t),Nmo=r(c5e," (RemBERT model)"),c5e.forEach(t),jmo=i(M),l_=n(M,"LI",{});var f5e=s(l_);gte=n(f5e,"STRONG",{});var vWr=s(gte);Dmo=r(vWr,"resnet"),vWr.forEach(t),Gmo=r(f5e," \u2014 "),BP=n(f5e,"A",{href:!0});var FWr=s(BP);Omo=r(FWr,"ResNetModel"),FWr.forEach(t),Vmo=r(f5e," (ResNet model)"),f5e.forEach(t),Xmo=i(M),i_=n(M,"LI",{});var m5e=s(i_);hte=n(m5e,"STRONG",{});var TWr=s(hte);zmo=r(TWr,"retribert"),TWr.forEach(t),Qmo=r(m5e," \u2014 "),PP=n(m5e,"A",{href:!0});var MWr=s(PP);Wmo=r(MWr,"RetriBertModel"),MWr.forEach(t),Hmo=r(m5e," (RetriBERT model)"),m5e.forEach(t),Umo=i(M),d_=n(M,"LI",{});var g5e=s(d_);pte=n(g5e,"STRONG",{});var EWr=s(pte);Jmo=r(EWr,"roberta"),EWr.forEach(t),Ymo=r(g5e," \u2014 "),$P=n(g5e,"A",{href:!0});var CWr=s($P);Kmo=r(CWr,"RobertaModel"),CWr.forEach(t),Zmo=r(g5e," (RoBERTa model)"),g5e.forEach(t),ego=i(M),c_=n(M,"LI",{});var h5e=s(c_);_te=n(h5e,"STRONG",{});var wWr=s(_te);ogo=r(wWr,"roformer"),wWr.forEach(t),rgo=r(h5e," \u2014 "),IP=n(h5e,"A",{href:!0});var AWr=s(IP);tgo=r(AWr,"RoFormerModel"),AWr.forEach(t),ago=r(h5e," (RoFormer model)"),h5e.forEach(t),ngo=i(M),f_=n(M,"LI",{});var p5e=s(f_);ute=n(p5e,"STRONG",{});var yWr=s(ute);sgo=r(yWr,"segformer"),yWr.forEach(t),lgo=r(p5e," \u2014 "),qP=n(p5e,"A",{href:!0});var LWr=s(qP);igo=r(LWr,"SegformerModel"),LWr.forEach(t),dgo=r(p5e," (SegFormer model)"),p5e.forEach(t),cgo=i(M),m_=n(M,"LI",{});var _5e=s(m_);bte=n(_5e,"STRONG",{});var xWr=s(bte);fgo=r(xWr,"sew"),xWr.forEach(t),mgo=r(_5e," \u2014 "),NP=n(_5e,"A",{href:!0});var kWr=s(NP);ggo=r(kWr,"SEWModel"),kWr.forEach(t),hgo=r(_5e," (SEW model)"),_5e.forEach(t),pgo=i(M),g_=n(M,"LI",{});var u5e=s(g_);vte=n(u5e,"STRONG",{});var SWr=s(vte);_go=r(SWr,"sew-d"),SWr.forEach(t),ugo=r(u5e," \u2014 "),jP=n(u5e,"A",{href:!0});var RWr=s(jP);bgo=r(RWr,"SEWDModel"),RWr.forEach(t),vgo=r(u5e," (SEW-D model)"),u5e.forEach(t),Fgo=i(M),h_=n(M,"LI",{});var b5e=s(h_);Fte=n(b5e,"STRONG",{});var BWr=s(Fte);Tgo=r(BWr,"speech_to_text"),BWr.forEach(t),Mgo=r(b5e," \u2014 "),DP=n(b5e,"A",{href:!0});var PWr=s(DP);Ego=r(PWr,"Speech2TextModel"),PWr.forEach(t),Cgo=r(b5e," (Speech2Text model)"),b5e.forEach(t),wgo=i(M),p_=n(M,"LI",{});var v5e=s(p_);Tte=n(v5e,"STRONG",{});var $Wr=s(Tte);Ago=r($Wr,"splinter"),$Wr.forEach(t),ygo=r(v5e," \u2014 "),GP=n(v5e,"A",{href:!0});var IWr=s(GP);Lgo=r(IWr,"SplinterModel"),IWr.forEach(t),xgo=r(v5e," (Splinter model)"),v5e.forEach(t),kgo=i(M),__=n(M,"LI",{});var F5e=s(__);Mte=n(F5e,"STRONG",{});var qWr=s(Mte);Sgo=r(qWr,"squeezebert"),qWr.forEach(t),Rgo=r(F5e," \u2014 "),OP=n(F5e,"A",{href:!0});var NWr=s(OP);Bgo=r(NWr,"SqueezeBertModel"),NWr.forEach(t),Pgo=r(F5e," (SqueezeBERT model)"),F5e.forEach(t),$go=i(M),u_=n(M,"LI",{});var T5e=s(u_);Ete=n(T5e,"STRONG",{});var jWr=s(Ete);Igo=r(jWr,"swin"),jWr.forEach(t),qgo=r(T5e," \u2014 "),VP=n(T5e,"A",{href:!0});var DWr=s(VP);Ngo=r(DWr,"SwinModel"),DWr.forEach(t),jgo=r(T5e," (Swin model)"),T5e.forEach(t),Dgo=i(M),b_=n(M,"LI",{});var M5e=s(b_);Cte=n(M5e,"STRONG",{});var GWr=s(Cte);Ggo=r(GWr,"t5"),GWr.forEach(t),Ogo=r(M5e," \u2014 "),XP=n(M5e,"A",{href:!0});var OWr=s(XP);Vgo=r(OWr,"T5Model"),OWr.forEach(t),Xgo=r(M5e," (T5 model)"),M5e.forEach(t),zgo=i(M),v_=n(M,"LI",{});var E5e=s(v_);wte=n(E5e,"STRONG",{});var VWr=s(wte);Qgo=r(VWr,"tapas"),VWr.forEach(t),Wgo=r(E5e," \u2014 "),zP=n(E5e,"A",{href:!0});var XWr=s(zP);Hgo=r(XWr,"TapasModel"),XWr.forEach(t),Ugo=r(E5e," (TAPAS model)"),E5e.forEach(t),Jgo=i(M),F_=n(M,"LI",{});var C5e=s(F_);Ate=n(C5e,"STRONG",{});var zWr=s(Ate);Ygo=r(zWr,"transfo-xl"),zWr.forEach(t),Kgo=r(C5e," \u2014 "),QP=n(C5e,"A",{href:!0});var QWr=s(QP);Zgo=r(QWr,"TransfoXLModel"),QWr.forEach(t),eho=r(C5e," (Transformer-XL model)"),C5e.forEach(t),oho=i(M),T_=n(M,"LI",{});var w5e=s(T_);yte=n(w5e,"STRONG",{});var WWr=s(yte);rho=r(WWr,"unispeech"),WWr.forEach(t),tho=r(w5e," \u2014 "),WP=n(w5e,"A",{href:!0});var HWr=s(WP);aho=r(HWr,"UniSpeechModel"),HWr.forEach(t),nho=r(w5e," (UniSpeech model)"),w5e.forEach(t),sho=i(M),M_=n(M,"LI",{});var A5e=s(M_);Lte=n(A5e,"STRONG",{});var UWr=s(Lte);lho=r(UWr,"unispeech-sat"),UWr.forEach(t),iho=r(A5e," \u2014 "),HP=n(A5e,"A",{href:!0});var JWr=s(HP);dho=r(JWr,"UniSpeechSatModel"),JWr.forEach(t),cho=r(A5e," (UniSpeechSat model)"),A5e.forEach(t),fho=i(M),E_=n(M,"LI",{});var y5e=s(E_);xte=n(y5e,"STRONG",{});var YWr=s(xte);mho=r(YWr,"van"),YWr.forEach(t),gho=r(y5e," \u2014 "),UP=n(y5e,"A",{href:!0});var KWr=s(UP);hho=r(KWr,"VanModel"),KWr.forEach(t),pho=r(y5e," (VAN model)"),y5e.forEach(t),_ho=i(M),C_=n(M,"LI",{});var L5e=s(C_);kte=n(L5e,"STRONG",{});var ZWr=s(kte);uho=r(ZWr,"vilt"),ZWr.forEach(t),bho=r(L5e," \u2014 "),JP=n(L5e,"A",{href:!0});var eHr=s(JP);vho=r(eHr,"ViltModel"),eHr.forEach(t),Fho=r(L5e," (ViLT model)"),L5e.forEach(t),Tho=i(M),w_=n(M,"LI",{});var x5e=s(w_);Ste=n(x5e,"STRONG",{});var oHr=s(Ste);Mho=r(oHr,"vision-text-dual-encoder"),oHr.forEach(t),Eho=r(x5e," \u2014 "),YP=n(x5e,"A",{href:!0});var rHr=s(YP);Cho=r(rHr,"VisionTextDualEncoderModel"),rHr.forEach(t),who=r(x5e," (VisionTextDualEncoder model)"),x5e.forEach(t),Aho=i(M),A_=n(M,"LI",{});var k5e=s(A_);Rte=n(k5e,"STRONG",{});var tHr=s(Rte);yho=r(tHr,"visual_bert"),tHr.forEach(t),Lho=r(k5e," \u2014 "),KP=n(k5e,"A",{href:!0});var aHr=s(KP);xho=r(aHr,"VisualBertModel"),aHr.forEach(t),kho=r(k5e," (VisualBert model)"),k5e.forEach(t),Sho=i(M),y_=n(M,"LI",{});var S5e=s(y_);Bte=n(S5e,"STRONG",{});var nHr=s(Bte);Rho=r(nHr,"vit"),nHr.forEach(t),Bho=r(S5e," \u2014 "),ZP=n(S5e,"A",{href:!0});var sHr=s(ZP);Pho=r(sHr,"ViTModel"),sHr.forEach(t),$ho=r(S5e," (ViT model)"),S5e.forEach(t),Iho=i(M),L_=n(M,"LI",{});var R5e=s(L_);Pte=n(R5e,"STRONG",{});var lHr=s(Pte);qho=r(lHr,"vit_mae"),lHr.forEach(t),Nho=r(R5e," \u2014 "),e$=n(R5e,"A",{href:!0});var iHr=s(e$);jho=r(iHr,"ViTMAEModel"),iHr.forEach(t),Dho=r(R5e," (ViTMAE model)"),R5e.forEach(t),Gho=i(M),x_=n(M,"LI",{});var B5e=s(x_);$te=n(B5e,"STRONG",{});var dHr=s($te);Oho=r(dHr,"wav2vec2"),dHr.forEach(t),Vho=r(B5e," \u2014 "),o$=n(B5e,"A",{href:!0});var cHr=s(o$);Xho=r(cHr,"Wav2Vec2Model"),cHr.forEach(t),zho=r(B5e," (Wav2Vec2 model)"),B5e.forEach(t),Qho=i(M),k_=n(M,"LI",{});var P5e=s(k_);Ite=n(P5e,"STRONG",{});var fHr=s(Ite);Who=r(fHr,"wavlm"),fHr.forEach(t),Hho=r(P5e," \u2014 "),r$=n(P5e,"A",{href:!0});var mHr=s(r$);Uho=r(mHr,"WavLMModel"),mHr.forEach(t),Jho=r(P5e," (WavLM model)"),P5e.forEach(t),Yho=i(M),S_=n(M,"LI",{});var $5e=s(S_);qte=n($5e,"STRONG",{});var gHr=s(qte);Kho=r(gHr,"xglm"),gHr.forEach(t),Zho=r($5e," \u2014 "),t$=n($5e,"A",{href:!0});var hHr=s(t$);epo=r(hHr,"XGLMModel"),hHr.forEach(t),opo=r($5e," (XGLM model)"),$5e.forEach(t),rpo=i(M),R_=n(M,"LI",{});var I5e=s(R_);Nte=n(I5e,"STRONG",{});var pHr=s(Nte);tpo=r(pHr,"xlm"),pHr.forEach(t),apo=r(I5e," \u2014 "),a$=n(I5e,"A",{href:!0});var _Hr=s(a$);npo=r(_Hr,"XLMModel"),_Hr.forEach(t),spo=r(I5e," (XLM model)"),I5e.forEach(t),lpo=i(M),B_=n(M,"LI",{});var q5e=s(B_);jte=n(q5e,"STRONG",{});var uHr=s(jte);ipo=r(uHr,"xlm-prophetnet"),uHr.forEach(t),dpo=r(q5e," \u2014 "),n$=n(q5e,"A",{href:!0});var bHr=s(n$);cpo=r(bHr,"XLMProphetNetModel"),bHr.forEach(t),fpo=r(q5e," (XLMProphetNet model)"),q5e.forEach(t),mpo=i(M),P_=n(M,"LI",{});var N5e=s(P_);Dte=n(N5e,"STRONG",{});var vHr=s(Dte);gpo=r(vHr,"xlm-roberta"),vHr.forEach(t),hpo=r(N5e," \u2014 "),s$=n(N5e,"A",{href:!0});var FHr=s(s$);ppo=r(FHr,"XLMRobertaModel"),FHr.forEach(t),_po=r(N5e," (XLM-RoBERTa model)"),N5e.forEach(t),upo=i(M),$_=n(M,"LI",{});var j5e=s($_);Gte=n(j5e,"STRONG",{});var THr=s(Gte);bpo=r(THr,"xlm-roberta-xl"),THr.forEach(t),vpo=r(j5e," \u2014 "),l$=n(j5e,"A",{href:!0});var MHr=s(l$);Fpo=r(MHr,"XLMRobertaXLModel"),MHr.forEach(t),Tpo=r(j5e," (XLM-RoBERTa-XL model)"),j5e.forEach(t),Mpo=i(M),I_=n(M,"LI",{});var D5e=s(I_);Ote=n(D5e,"STRONG",{});var EHr=s(Ote);Epo=r(EHr,"xlnet"),EHr.forEach(t),Cpo=r(D5e," \u2014 "),i$=n(D5e,"A",{href:!0});var CHr=s(i$);wpo=r(CHr,"XLNetModel"),CHr.forEach(t),Apo=r(D5e," (XLNet model)"),D5e.forEach(t),ypo=i(M),q_=n(M,"LI",{});var G5e=s(q_);Vte=n(G5e,"STRONG",{});var wHr=s(Vte);Lpo=r(wHr,"yoso"),wHr.forEach(t),xpo=r(G5e," \u2014 "),d$=n(G5e,"A",{href:!0});var AHr=s(d$);kpo=r(AHr,"YosoModel"),AHr.forEach(t),Spo=r(G5e," (YOSO model)"),G5e.forEach(t),M.forEach(t),Rpo=i(Dt),N_=n(Dt,"P",{});var O5e=s(N_);Bpo=r(O5e,"The model is set in evaluation mode by default using "),Xte=n(O5e,"CODE",{});var yHr=s(Xte);Ppo=r(yHr,"model.eval()"),yHr.forEach(t),$po=r(O5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zte=n(O5e,"CODE",{});var LHr=s(zte);Ipo=r(LHr,"model.train()"),LHr.forEach(t),O5e.forEach(t),qpo=i(Dt),Qte=n(Dt,"P",{});var xHr=s(Qte);Npo=r(xHr,"Examples:"),xHr.forEach(t),jpo=i(Dt),m(_3.$$.fragment,Dt),Dt.forEach(t),Us.forEach(t),rBe=i(c),rd=n(c,"H2",{class:!0});var f$e=s(rd);j_=n(f$e,"A",{id:!0,class:!0,href:!0});var kHr=s(j_);Wte=n(kHr,"SPAN",{});var SHr=s(Wte);m(u3.$$.fragment,SHr),SHr.forEach(t),kHr.forEach(t),Dpo=i(f$e),Hte=n(f$e,"SPAN",{});var RHr=s(Hte);Gpo=r(RHr,"AutoModelForPreTraining"),RHr.forEach(t),f$e.forEach(t),tBe=i(c),Yo=n(c,"DIV",{class:!0});var Ys=s(Yo);m(b3.$$.fragment,Ys),Opo=i(Ys),td=n(Ys,"P",{});var kU=s(td);Vpo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),c$=n(kU,"A",{href:!0});var BHr=s(c$);Xpo=r(BHr,"from_pretrained()"),BHr.forEach(t),zpo=r(kU," class method or the "),f$=n(kU,"A",{href:!0});var PHr=s(f$);Qpo=r(PHr,"from_config()"),PHr.forEach(t),Wpo=r(kU,` class
method.`),kU.forEach(t),Hpo=i(Ys),v3=n(Ys,"P",{});var m$e=s(v3);Upo=r(m$e,"This class cannot be instantiated directly using "),Ute=n(m$e,"CODE",{});var $Hr=s(Ute);Jpo=r($Hr,"__init__()"),$Hr.forEach(t),Ypo=r(m$e," (throws an error)."),m$e.forEach(t),Kpo=i(Ys),zr=n(Ys,"DIV",{class:!0});var Ks=s(zr);m(F3.$$.fragment,Ks),Zpo=i(Ks),Jte=n(Ks,"P",{});var IHr=s(Jte);e_o=r(IHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),IHr.forEach(t),o_o=i(Ks),ad=n(Ks,"P",{});var SU=s(ad);r_o=r(SU,`Note:
Loading a model from its configuration file does `),Yte=n(SU,"STRONG",{});var qHr=s(Yte);t_o=r(qHr,"not"),qHr.forEach(t),a_o=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),m$=n(SU,"A",{href:!0});var NHr=s(m$);n_o=r(NHr,"from_pretrained()"),NHr.forEach(t),s_o=r(SU," to load the model weights."),SU.forEach(t),l_o=i(Ks),Kte=n(Ks,"P",{});var jHr=s(Kte);i_o=r(jHr,"Examples:"),jHr.forEach(t),d_o=i(Ks),m(T3.$$.fragment,Ks),Ks.forEach(t),c_o=i(Ys),Ne=n(Ys,"DIV",{class:!0});var Gt=s(Ne);m(M3.$$.fragment,Gt),f_o=i(Gt),Zte=n(Gt,"P",{});var DHr=s(Zte);m_o=r(DHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),DHr.forEach(t),g_o=i(Gt),za=n(Gt,"P",{});var PE=s(za);h_o=r(PE,"The model class to instantiate is selected based on the "),eae=n(PE,"CODE",{});var GHr=s(eae);p_o=r(GHr,"model_type"),GHr.forEach(t),__o=r(PE,` property of the config object (either
passed as an argument or loaded from `),oae=n(PE,"CODE",{});var OHr=s(oae);u_o=r(OHr,"pretrained_model_name_or_path"),OHr.forEach(t),b_o=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rae=n(PE,"CODE",{});var VHr=s(rae);v_o=r(VHr,"pretrained_model_name_or_path"),VHr.forEach(t),F_o=r(PE,":"),PE.forEach(t),T_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);D_=n(B,"LI",{});var V5e=s(D_);tae=n(V5e,"STRONG",{});var XHr=s(tae);M_o=r(XHr,"albert"),XHr.forEach(t),E_o=r(V5e," \u2014 "),g$=n(V5e,"A",{href:!0});var zHr=s(g$);C_o=r(zHr,"AlbertForPreTraining"),zHr.forEach(t),w_o=r(V5e," (ALBERT model)"),V5e.forEach(t),A_o=i(B),G_=n(B,"LI",{});var X5e=s(G_);aae=n(X5e,"STRONG",{});var QHr=s(aae);y_o=r(QHr,"bart"),QHr.forEach(t),L_o=r(X5e," \u2014 "),h$=n(X5e,"A",{href:!0});var WHr=s(h$);x_o=r(WHr,"BartForConditionalGeneration"),WHr.forEach(t),k_o=r(X5e," (BART model)"),X5e.forEach(t),S_o=i(B),O_=n(B,"LI",{});var z5e=s(O_);nae=n(z5e,"STRONG",{});var HHr=s(nae);R_o=r(HHr,"bert"),HHr.forEach(t),B_o=r(z5e," \u2014 "),p$=n(z5e,"A",{href:!0});var UHr=s(p$);P_o=r(UHr,"BertForPreTraining"),UHr.forEach(t),$_o=r(z5e," (BERT model)"),z5e.forEach(t),I_o=i(B),V_=n(B,"LI",{});var Q5e=s(V_);sae=n(Q5e,"STRONG",{});var JHr=s(sae);q_o=r(JHr,"big_bird"),JHr.forEach(t),N_o=r(Q5e," \u2014 "),_$=n(Q5e,"A",{href:!0});var YHr=s(_$);j_o=r(YHr,"BigBirdForPreTraining"),YHr.forEach(t),D_o=r(Q5e," (BigBird model)"),Q5e.forEach(t),G_o=i(B),X_=n(B,"LI",{});var W5e=s(X_);lae=n(W5e,"STRONG",{});var KHr=s(lae);O_o=r(KHr,"camembert"),KHr.forEach(t),V_o=r(W5e," \u2014 "),u$=n(W5e,"A",{href:!0});var ZHr=s(u$);X_o=r(ZHr,"CamembertForMaskedLM"),ZHr.forEach(t),z_o=r(W5e," (CamemBERT model)"),W5e.forEach(t),Q_o=i(B),z_=n(B,"LI",{});var H5e=s(z_);iae=n(H5e,"STRONG",{});var eUr=s(iae);W_o=r(eUr,"ctrl"),eUr.forEach(t),H_o=r(H5e," \u2014 "),b$=n(H5e,"A",{href:!0});var oUr=s(b$);U_o=r(oUr,"CTRLLMHeadModel"),oUr.forEach(t),J_o=r(H5e," (CTRL model)"),H5e.forEach(t),Y_o=i(B),Q_=n(B,"LI",{});var U5e=s(Q_);dae=n(U5e,"STRONG",{});var rUr=s(dae);K_o=r(rUr,"data2vec-text"),rUr.forEach(t),Z_o=r(U5e," \u2014 "),v$=n(U5e,"A",{href:!0});var tUr=s(v$);euo=r(tUr,"Data2VecTextForMaskedLM"),tUr.forEach(t),ouo=r(U5e," (Data2VecText model)"),U5e.forEach(t),ruo=i(B),W_=n(B,"LI",{});var J5e=s(W_);cae=n(J5e,"STRONG",{});var aUr=s(cae);tuo=r(aUr,"deberta"),aUr.forEach(t),auo=r(J5e," \u2014 "),F$=n(J5e,"A",{href:!0});var nUr=s(F$);nuo=r(nUr,"DebertaForMaskedLM"),nUr.forEach(t),suo=r(J5e," (DeBERTa model)"),J5e.forEach(t),luo=i(B),H_=n(B,"LI",{});var Y5e=s(H_);fae=n(Y5e,"STRONG",{});var sUr=s(fae);iuo=r(sUr,"deberta-v2"),sUr.forEach(t),duo=r(Y5e," \u2014 "),T$=n(Y5e,"A",{href:!0});var lUr=s(T$);cuo=r(lUr,"DebertaV2ForMaskedLM"),lUr.forEach(t),fuo=r(Y5e," (DeBERTa-v2 model)"),Y5e.forEach(t),muo=i(B),U_=n(B,"LI",{});var K5e=s(U_);mae=n(K5e,"STRONG",{});var iUr=s(mae);guo=r(iUr,"distilbert"),iUr.forEach(t),huo=r(K5e," \u2014 "),M$=n(K5e,"A",{href:!0});var dUr=s(M$);puo=r(dUr,"DistilBertForMaskedLM"),dUr.forEach(t),_uo=r(K5e," (DistilBERT model)"),K5e.forEach(t),uuo=i(B),J_=n(B,"LI",{});var Z5e=s(J_);gae=n(Z5e,"STRONG",{});var cUr=s(gae);buo=r(cUr,"electra"),cUr.forEach(t),vuo=r(Z5e," \u2014 "),E$=n(Z5e,"A",{href:!0});var fUr=s(E$);Fuo=r(fUr,"ElectraForPreTraining"),fUr.forEach(t),Tuo=r(Z5e," (ELECTRA model)"),Z5e.forEach(t),Muo=i(B),Y_=n(B,"LI",{});var e3e=s(Y_);hae=n(e3e,"STRONG",{});var mUr=s(hae);Euo=r(mUr,"flaubert"),mUr.forEach(t),Cuo=r(e3e," \u2014 "),C$=n(e3e,"A",{href:!0});var gUr=s(C$);wuo=r(gUr,"FlaubertWithLMHeadModel"),gUr.forEach(t),Auo=r(e3e," (FlauBERT model)"),e3e.forEach(t),yuo=i(B),K_=n(B,"LI",{});var o3e=s(K_);pae=n(o3e,"STRONG",{});var hUr=s(pae);Luo=r(hUr,"fnet"),hUr.forEach(t),xuo=r(o3e," \u2014 "),w$=n(o3e,"A",{href:!0});var pUr=s(w$);kuo=r(pUr,"FNetForPreTraining"),pUr.forEach(t),Suo=r(o3e," (FNet model)"),o3e.forEach(t),Ruo=i(B),Z_=n(B,"LI",{});var r3e=s(Z_);_ae=n(r3e,"STRONG",{});var _Ur=s(_ae);Buo=r(_Ur,"fsmt"),_Ur.forEach(t),Puo=r(r3e," \u2014 "),A$=n(r3e,"A",{href:!0});var uUr=s(A$);$uo=r(uUr,"FSMTForConditionalGeneration"),uUr.forEach(t),Iuo=r(r3e," (FairSeq Machine-Translation model)"),r3e.forEach(t),quo=i(B),eu=n(B,"LI",{});var t3e=s(eu);uae=n(t3e,"STRONG",{});var bUr=s(uae);Nuo=r(bUr,"funnel"),bUr.forEach(t),juo=r(t3e," \u2014 "),y$=n(t3e,"A",{href:!0});var vUr=s(y$);Duo=r(vUr,"FunnelForPreTraining"),vUr.forEach(t),Guo=r(t3e," (Funnel Transformer model)"),t3e.forEach(t),Ouo=i(B),ou=n(B,"LI",{});var a3e=s(ou);bae=n(a3e,"STRONG",{});var FUr=s(bae);Vuo=r(FUr,"gpt2"),FUr.forEach(t),Xuo=r(a3e," \u2014 "),L$=n(a3e,"A",{href:!0});var TUr=s(L$);zuo=r(TUr,"GPT2LMHeadModel"),TUr.forEach(t),Quo=r(a3e," (OpenAI GPT-2 model)"),a3e.forEach(t),Wuo=i(B),ru=n(B,"LI",{});var n3e=s(ru);vae=n(n3e,"STRONG",{});var MUr=s(vae);Huo=r(MUr,"ibert"),MUr.forEach(t),Uuo=r(n3e," \u2014 "),x$=n(n3e,"A",{href:!0});var EUr=s(x$);Juo=r(EUr,"IBertForMaskedLM"),EUr.forEach(t),Yuo=r(n3e," (I-BERT model)"),n3e.forEach(t),Kuo=i(B),tu=n(B,"LI",{});var s3e=s(tu);Fae=n(s3e,"STRONG",{});var CUr=s(Fae);Zuo=r(CUr,"layoutlm"),CUr.forEach(t),e1o=r(s3e," \u2014 "),k$=n(s3e,"A",{href:!0});var wUr=s(k$);o1o=r(wUr,"LayoutLMForMaskedLM"),wUr.forEach(t),r1o=r(s3e," (LayoutLM model)"),s3e.forEach(t),t1o=i(B),au=n(B,"LI",{});var l3e=s(au);Tae=n(l3e,"STRONG",{});var AUr=s(Tae);a1o=r(AUr,"longformer"),AUr.forEach(t),n1o=r(l3e," \u2014 "),S$=n(l3e,"A",{href:!0});var yUr=s(S$);s1o=r(yUr,"LongformerForMaskedLM"),yUr.forEach(t),l1o=r(l3e," (Longformer model)"),l3e.forEach(t),i1o=i(B),nu=n(B,"LI",{});var i3e=s(nu);Mae=n(i3e,"STRONG",{});var LUr=s(Mae);d1o=r(LUr,"lxmert"),LUr.forEach(t),c1o=r(i3e," \u2014 "),R$=n(i3e,"A",{href:!0});var xUr=s(R$);f1o=r(xUr,"LxmertForPreTraining"),xUr.forEach(t),m1o=r(i3e," (LXMERT model)"),i3e.forEach(t),g1o=i(B),su=n(B,"LI",{});var d3e=s(su);Eae=n(d3e,"STRONG",{});var kUr=s(Eae);h1o=r(kUr,"megatron-bert"),kUr.forEach(t),p1o=r(d3e," \u2014 "),B$=n(d3e,"A",{href:!0});var SUr=s(B$);_1o=r(SUr,"MegatronBertForPreTraining"),SUr.forEach(t),u1o=r(d3e," (MegatronBert model)"),d3e.forEach(t),b1o=i(B),lu=n(B,"LI",{});var c3e=s(lu);Cae=n(c3e,"STRONG",{});var RUr=s(Cae);v1o=r(RUr,"mobilebert"),RUr.forEach(t),F1o=r(c3e," \u2014 "),P$=n(c3e,"A",{href:!0});var BUr=s(P$);T1o=r(BUr,"MobileBertForPreTraining"),BUr.forEach(t),M1o=r(c3e," (MobileBERT model)"),c3e.forEach(t),E1o=i(B),iu=n(B,"LI",{});var f3e=s(iu);wae=n(f3e,"STRONG",{});var PUr=s(wae);C1o=r(PUr,"mpnet"),PUr.forEach(t),w1o=r(f3e," \u2014 "),$$=n(f3e,"A",{href:!0});var $Ur=s($$);A1o=r($Ur,"MPNetForMaskedLM"),$Ur.forEach(t),y1o=r(f3e," (MPNet model)"),f3e.forEach(t),L1o=i(B),du=n(B,"LI",{});var m3e=s(du);Aae=n(m3e,"STRONG",{});var IUr=s(Aae);x1o=r(IUr,"openai-gpt"),IUr.forEach(t),k1o=r(m3e," \u2014 "),I$=n(m3e,"A",{href:!0});var qUr=s(I$);S1o=r(qUr,"OpenAIGPTLMHeadModel"),qUr.forEach(t),R1o=r(m3e," (OpenAI GPT model)"),m3e.forEach(t),B1o=i(B),cu=n(B,"LI",{});var g3e=s(cu);yae=n(g3e,"STRONG",{});var NUr=s(yae);P1o=r(NUr,"retribert"),NUr.forEach(t),$1o=r(g3e," \u2014 "),q$=n(g3e,"A",{href:!0});var jUr=s(q$);I1o=r(jUr,"RetriBertModel"),jUr.forEach(t),q1o=r(g3e," (RetriBERT model)"),g3e.forEach(t),N1o=i(B),fu=n(B,"LI",{});var h3e=s(fu);Lae=n(h3e,"STRONG",{});var DUr=s(Lae);j1o=r(DUr,"roberta"),DUr.forEach(t),D1o=r(h3e," \u2014 "),N$=n(h3e,"A",{href:!0});var GUr=s(N$);G1o=r(GUr,"RobertaForMaskedLM"),GUr.forEach(t),O1o=r(h3e," (RoBERTa model)"),h3e.forEach(t),V1o=i(B),mu=n(B,"LI",{});var p3e=s(mu);xae=n(p3e,"STRONG",{});var OUr=s(xae);X1o=r(OUr,"squeezebert"),OUr.forEach(t),z1o=r(p3e," \u2014 "),j$=n(p3e,"A",{href:!0});var VUr=s(j$);Q1o=r(VUr,"SqueezeBertForMaskedLM"),VUr.forEach(t),W1o=r(p3e," (SqueezeBERT model)"),p3e.forEach(t),H1o=i(B),gu=n(B,"LI",{});var _3e=s(gu);kae=n(_3e,"STRONG",{});var XUr=s(kae);U1o=r(XUr,"t5"),XUr.forEach(t),J1o=r(_3e," \u2014 "),D$=n(_3e,"A",{href:!0});var zUr=s(D$);Y1o=r(zUr,"T5ForConditionalGeneration"),zUr.forEach(t),K1o=r(_3e," (T5 model)"),_3e.forEach(t),Z1o=i(B),hu=n(B,"LI",{});var u3e=s(hu);Sae=n(u3e,"STRONG",{});var QUr=s(Sae);ebo=r(QUr,"tapas"),QUr.forEach(t),obo=r(u3e," \u2014 "),G$=n(u3e,"A",{href:!0});var WUr=s(G$);rbo=r(WUr,"TapasForMaskedLM"),WUr.forEach(t),tbo=r(u3e," (TAPAS model)"),u3e.forEach(t),abo=i(B),pu=n(B,"LI",{});var b3e=s(pu);Rae=n(b3e,"STRONG",{});var HUr=s(Rae);nbo=r(HUr,"transfo-xl"),HUr.forEach(t),sbo=r(b3e," \u2014 "),O$=n(b3e,"A",{href:!0});var UUr=s(O$);lbo=r(UUr,"TransfoXLLMHeadModel"),UUr.forEach(t),ibo=r(b3e," (Transformer-XL model)"),b3e.forEach(t),dbo=i(B),_u=n(B,"LI",{});var v3e=s(_u);Bae=n(v3e,"STRONG",{});var JUr=s(Bae);cbo=r(JUr,"unispeech"),JUr.forEach(t),fbo=r(v3e," \u2014 "),V$=n(v3e,"A",{href:!0});var YUr=s(V$);mbo=r(YUr,"UniSpeechForPreTraining"),YUr.forEach(t),gbo=r(v3e," (UniSpeech model)"),v3e.forEach(t),hbo=i(B),uu=n(B,"LI",{});var F3e=s(uu);Pae=n(F3e,"STRONG",{});var KUr=s(Pae);pbo=r(KUr,"unispeech-sat"),KUr.forEach(t),_bo=r(F3e," \u2014 "),X$=n(F3e,"A",{href:!0});var ZUr=s(X$);ubo=r(ZUr,"UniSpeechSatForPreTraining"),ZUr.forEach(t),bbo=r(F3e," (UniSpeechSat model)"),F3e.forEach(t),vbo=i(B),bu=n(B,"LI",{});var T3e=s(bu);$ae=n(T3e,"STRONG",{});var eJr=s($ae);Fbo=r(eJr,"visual_bert"),eJr.forEach(t),Tbo=r(T3e," \u2014 "),z$=n(T3e,"A",{href:!0});var oJr=s(z$);Mbo=r(oJr,"VisualBertForPreTraining"),oJr.forEach(t),Ebo=r(T3e," (VisualBert model)"),T3e.forEach(t),Cbo=i(B),vu=n(B,"LI",{});var M3e=s(vu);Iae=n(M3e,"STRONG",{});var rJr=s(Iae);wbo=r(rJr,"vit_mae"),rJr.forEach(t),Abo=r(M3e," \u2014 "),Q$=n(M3e,"A",{href:!0});var tJr=s(Q$);ybo=r(tJr,"ViTMAEForPreTraining"),tJr.forEach(t),Lbo=r(M3e," (ViTMAE model)"),M3e.forEach(t),xbo=i(B),Fu=n(B,"LI",{});var E3e=s(Fu);qae=n(E3e,"STRONG",{});var aJr=s(qae);kbo=r(aJr,"wav2vec2"),aJr.forEach(t),Sbo=r(E3e," \u2014 "),W$=n(E3e,"A",{href:!0});var nJr=s(W$);Rbo=r(nJr,"Wav2Vec2ForPreTraining"),nJr.forEach(t),Bbo=r(E3e," (Wav2Vec2 model)"),E3e.forEach(t),Pbo=i(B),Tu=n(B,"LI",{});var C3e=s(Tu);Nae=n(C3e,"STRONG",{});var sJr=s(Nae);$bo=r(sJr,"xlm"),sJr.forEach(t),Ibo=r(C3e," \u2014 "),H$=n(C3e,"A",{href:!0});var lJr=s(H$);qbo=r(lJr,"XLMWithLMHeadModel"),lJr.forEach(t),Nbo=r(C3e," (XLM model)"),C3e.forEach(t),jbo=i(B),Mu=n(B,"LI",{});var w3e=s(Mu);jae=n(w3e,"STRONG",{});var iJr=s(jae);Dbo=r(iJr,"xlm-roberta"),iJr.forEach(t),Gbo=r(w3e," \u2014 "),U$=n(w3e,"A",{href:!0});var dJr=s(U$);Obo=r(dJr,"XLMRobertaForMaskedLM"),dJr.forEach(t),Vbo=r(w3e," (XLM-RoBERTa model)"),w3e.forEach(t),Xbo=i(B),Eu=n(B,"LI",{});var A3e=s(Eu);Dae=n(A3e,"STRONG",{});var cJr=s(Dae);zbo=r(cJr,"xlm-roberta-xl"),cJr.forEach(t),Qbo=r(A3e," \u2014 "),J$=n(A3e,"A",{href:!0});var fJr=s(J$);Wbo=r(fJr,"XLMRobertaXLForMaskedLM"),fJr.forEach(t),Hbo=r(A3e," (XLM-RoBERTa-XL model)"),A3e.forEach(t),Ubo=i(B),Cu=n(B,"LI",{});var y3e=s(Cu);Gae=n(y3e,"STRONG",{});var mJr=s(Gae);Jbo=r(mJr,"xlnet"),mJr.forEach(t),Ybo=r(y3e," \u2014 "),Y$=n(y3e,"A",{href:!0});var gJr=s(Y$);Kbo=r(gJr,"XLNetLMHeadModel"),gJr.forEach(t),Zbo=r(y3e," (XLNet model)"),y3e.forEach(t),B.forEach(t),e2o=i(Gt),wu=n(Gt,"P",{});var L3e=s(wu);o2o=r(L3e,"The model is set in evaluation mode by default using "),Oae=n(L3e,"CODE",{});var hJr=s(Oae);r2o=r(hJr,"model.eval()"),hJr.forEach(t),t2o=r(L3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vae=n(L3e,"CODE",{});var pJr=s(Vae);a2o=r(pJr,"model.train()"),pJr.forEach(t),L3e.forEach(t),n2o=i(Gt),Xae=n(Gt,"P",{});var _Jr=s(Xae);s2o=r(_Jr,"Examples:"),_Jr.forEach(t),l2o=i(Gt),m(E3.$$.fragment,Gt),Gt.forEach(t),Ys.forEach(t),aBe=i(c),nd=n(c,"H2",{class:!0});var g$e=s(nd);Au=n(g$e,"A",{id:!0,class:!0,href:!0});var uJr=s(Au);zae=n(uJr,"SPAN",{});var bJr=s(zae);m(C3.$$.fragment,bJr),bJr.forEach(t),uJr.forEach(t),i2o=i(g$e),Qae=n(g$e,"SPAN",{});var vJr=s(Qae);d2o=r(vJr,"AutoModelForCausalLM"),vJr.forEach(t),g$e.forEach(t),nBe=i(c),Ko=n(c,"DIV",{class:!0});var Zs=s(Ko);m(w3.$$.fragment,Zs),c2o=i(Zs),sd=n(Zs,"P",{});var RU=s(sd);f2o=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),K$=n(RU,"A",{href:!0});var FJr=s(K$);m2o=r(FJr,"from_pretrained()"),FJr.forEach(t),g2o=r(RU," class method or the "),Z$=n(RU,"A",{href:!0});var TJr=s(Z$);h2o=r(TJr,"from_config()"),TJr.forEach(t),p2o=r(RU,` class
method.`),RU.forEach(t),_2o=i(Zs),A3=n(Zs,"P",{});var h$e=s(A3);u2o=r(h$e,"This class cannot be instantiated directly using "),Wae=n(h$e,"CODE",{});var MJr=s(Wae);b2o=r(MJr,"__init__()"),MJr.forEach(t),v2o=r(h$e," (throws an error)."),h$e.forEach(t),F2o=i(Zs),Qr=n(Zs,"DIV",{class:!0});var el=s(Qr);m(y3.$$.fragment,el),T2o=i(el),Hae=n(el,"P",{});var EJr=s(Hae);M2o=r(EJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EJr.forEach(t),E2o=i(el),ld=n(el,"P",{});var BU=s(ld);C2o=r(BU,`Note:
Loading a model from its configuration file does `),Uae=n(BU,"STRONG",{});var CJr=s(Uae);w2o=r(CJr,"not"),CJr.forEach(t),A2o=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eI=n(BU,"A",{href:!0});var wJr=s(eI);y2o=r(wJr,"from_pretrained()"),wJr.forEach(t),L2o=r(BU," to load the model weights."),BU.forEach(t),x2o=i(el),Jae=n(el,"P",{});var AJr=s(Jae);k2o=r(AJr,"Examples:"),AJr.forEach(t),S2o=i(el),m(L3.$$.fragment,el),el.forEach(t),R2o=i(Zs),je=n(Zs,"DIV",{class:!0});var Ot=s(je);m(x3.$$.fragment,Ot),B2o=i(Ot),Yae=n(Ot,"P",{});var yJr=s(Yae);P2o=r(yJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yJr.forEach(t),$2o=i(Ot),Qa=n(Ot,"P",{});var $E=s(Qa);I2o=r($E,"The model class to instantiate is selected based on the "),Kae=n($E,"CODE",{});var LJr=s(Kae);q2o=r(LJr,"model_type"),LJr.forEach(t),N2o=r($E,` property of the config object (either
passed as an argument or loaded from `),Zae=n($E,"CODE",{});var xJr=s(Zae);j2o=r(xJr,"pretrained_model_name_or_path"),xJr.forEach(t),D2o=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=n($E,"CODE",{});var kJr=s(ene);G2o=r(kJr,"pretrained_model_name_or_path"),kJr.forEach(t),O2o=r($E,":"),$E.forEach(t),V2o=i(Ot),$=n(Ot,"UL",{});var q=s($);yu=n(q,"LI",{});var x3e=s(yu);one=n(x3e,"STRONG",{});var SJr=s(one);X2o=r(SJr,"bart"),SJr.forEach(t),z2o=r(x3e," \u2014 "),oI=n(x3e,"A",{href:!0});var RJr=s(oI);Q2o=r(RJr,"BartForCausalLM"),RJr.forEach(t),W2o=r(x3e," (BART model)"),x3e.forEach(t),H2o=i(q),Lu=n(q,"LI",{});var k3e=s(Lu);rne=n(k3e,"STRONG",{});var BJr=s(rne);U2o=r(BJr,"bert"),BJr.forEach(t),J2o=r(k3e," \u2014 "),rI=n(k3e,"A",{href:!0});var PJr=s(rI);Y2o=r(PJr,"BertLMHeadModel"),PJr.forEach(t),K2o=r(k3e," (BERT model)"),k3e.forEach(t),Z2o=i(q),xu=n(q,"LI",{});var S3e=s(xu);tne=n(S3e,"STRONG",{});var $Jr=s(tne);e6o=r($Jr,"bert-generation"),$Jr.forEach(t),o6o=r(S3e," \u2014 "),tI=n(S3e,"A",{href:!0});var IJr=s(tI);r6o=r(IJr,"BertGenerationDecoder"),IJr.forEach(t),t6o=r(S3e," (Bert Generation model)"),S3e.forEach(t),a6o=i(q),ku=n(q,"LI",{});var R3e=s(ku);ane=n(R3e,"STRONG",{});var qJr=s(ane);n6o=r(qJr,"big_bird"),qJr.forEach(t),s6o=r(R3e," \u2014 "),aI=n(R3e,"A",{href:!0});var NJr=s(aI);l6o=r(NJr,"BigBirdForCausalLM"),NJr.forEach(t),i6o=r(R3e," (BigBird model)"),R3e.forEach(t),d6o=i(q),Su=n(q,"LI",{});var B3e=s(Su);nne=n(B3e,"STRONG",{});var jJr=s(nne);c6o=r(jJr,"bigbird_pegasus"),jJr.forEach(t),f6o=r(B3e," \u2014 "),nI=n(B3e,"A",{href:!0});var DJr=s(nI);m6o=r(DJr,"BigBirdPegasusForCausalLM"),DJr.forEach(t),g6o=r(B3e," (BigBirdPegasus model)"),B3e.forEach(t),h6o=i(q),Ru=n(q,"LI",{});var P3e=s(Ru);sne=n(P3e,"STRONG",{});var GJr=s(sne);p6o=r(GJr,"blenderbot"),GJr.forEach(t),_6o=r(P3e," \u2014 "),sI=n(P3e,"A",{href:!0});var OJr=s(sI);u6o=r(OJr,"BlenderbotForCausalLM"),OJr.forEach(t),b6o=r(P3e," (Blenderbot model)"),P3e.forEach(t),v6o=i(q),Bu=n(q,"LI",{});var $3e=s(Bu);lne=n($3e,"STRONG",{});var VJr=s(lne);F6o=r(VJr,"blenderbot-small"),VJr.forEach(t),T6o=r($3e," \u2014 "),lI=n($3e,"A",{href:!0});var XJr=s(lI);M6o=r(XJr,"BlenderbotSmallForCausalLM"),XJr.forEach(t),E6o=r($3e," (BlenderbotSmall model)"),$3e.forEach(t),C6o=i(q),Pu=n(q,"LI",{});var I3e=s(Pu);ine=n(I3e,"STRONG",{});var zJr=s(ine);w6o=r(zJr,"camembert"),zJr.forEach(t),A6o=r(I3e," \u2014 "),iI=n(I3e,"A",{href:!0});var QJr=s(iI);y6o=r(QJr,"CamembertForCausalLM"),QJr.forEach(t),L6o=r(I3e," (CamemBERT model)"),I3e.forEach(t),x6o=i(q),$u=n(q,"LI",{});var q3e=s($u);dne=n(q3e,"STRONG",{});var WJr=s(dne);k6o=r(WJr,"ctrl"),WJr.forEach(t),S6o=r(q3e," \u2014 "),dI=n(q3e,"A",{href:!0});var HJr=s(dI);R6o=r(HJr,"CTRLLMHeadModel"),HJr.forEach(t),B6o=r(q3e," (CTRL model)"),q3e.forEach(t),P6o=i(q),Iu=n(q,"LI",{});var N3e=s(Iu);cne=n(N3e,"STRONG",{});var UJr=s(cne);$6o=r(UJr,"data2vec-text"),UJr.forEach(t),I6o=r(N3e," \u2014 "),cI=n(N3e,"A",{href:!0});var JJr=s(cI);q6o=r(JJr,"Data2VecTextForCausalLM"),JJr.forEach(t),N6o=r(N3e," (Data2VecText model)"),N3e.forEach(t),j6o=i(q),qu=n(q,"LI",{});var j3e=s(qu);fne=n(j3e,"STRONG",{});var YJr=s(fne);D6o=r(YJr,"electra"),YJr.forEach(t),G6o=r(j3e," \u2014 "),fI=n(j3e,"A",{href:!0});var KJr=s(fI);O6o=r(KJr,"ElectraForCausalLM"),KJr.forEach(t),V6o=r(j3e," (ELECTRA model)"),j3e.forEach(t),X6o=i(q),Nu=n(q,"LI",{});var D3e=s(Nu);mne=n(D3e,"STRONG",{});var ZJr=s(mne);z6o=r(ZJr,"gpt2"),ZJr.forEach(t),Q6o=r(D3e," \u2014 "),mI=n(D3e,"A",{href:!0});var eYr=s(mI);W6o=r(eYr,"GPT2LMHeadModel"),eYr.forEach(t),H6o=r(D3e," (OpenAI GPT-2 model)"),D3e.forEach(t),U6o=i(q),ju=n(q,"LI",{});var G3e=s(ju);gne=n(G3e,"STRONG",{});var oYr=s(gne);J6o=r(oYr,"gpt_neo"),oYr.forEach(t),Y6o=r(G3e," \u2014 "),gI=n(G3e,"A",{href:!0});var rYr=s(gI);K6o=r(rYr,"GPTNeoForCausalLM"),rYr.forEach(t),Z6o=r(G3e," (GPT Neo model)"),G3e.forEach(t),evo=i(q),Du=n(q,"LI",{});var O3e=s(Du);hne=n(O3e,"STRONG",{});var tYr=s(hne);ovo=r(tYr,"gptj"),tYr.forEach(t),rvo=r(O3e," \u2014 "),hI=n(O3e,"A",{href:!0});var aYr=s(hI);tvo=r(aYr,"GPTJForCausalLM"),aYr.forEach(t),avo=r(O3e," (GPT-J model)"),O3e.forEach(t),nvo=i(q),Gu=n(q,"LI",{});var V3e=s(Gu);pne=n(V3e,"STRONG",{});var nYr=s(pne);svo=r(nYr,"marian"),nYr.forEach(t),lvo=r(V3e," \u2014 "),pI=n(V3e,"A",{href:!0});var sYr=s(pI);ivo=r(sYr,"MarianForCausalLM"),sYr.forEach(t),dvo=r(V3e," (Marian model)"),V3e.forEach(t),cvo=i(q),Ou=n(q,"LI",{});var X3e=s(Ou);_ne=n(X3e,"STRONG",{});var lYr=s(_ne);fvo=r(lYr,"mbart"),lYr.forEach(t),mvo=r(X3e," \u2014 "),_I=n(X3e,"A",{href:!0});var iYr=s(_I);gvo=r(iYr,"MBartForCausalLM"),iYr.forEach(t),hvo=r(X3e," (mBART model)"),X3e.forEach(t),pvo=i(q),Vu=n(q,"LI",{});var z3e=s(Vu);une=n(z3e,"STRONG",{});var dYr=s(une);_vo=r(dYr,"megatron-bert"),dYr.forEach(t),uvo=r(z3e," \u2014 "),uI=n(z3e,"A",{href:!0});var cYr=s(uI);bvo=r(cYr,"MegatronBertForCausalLM"),cYr.forEach(t),vvo=r(z3e," (MegatronBert model)"),z3e.forEach(t),Fvo=i(q),Xu=n(q,"LI",{});var Q3e=s(Xu);bne=n(Q3e,"STRONG",{});var fYr=s(bne);Tvo=r(fYr,"openai-gpt"),fYr.forEach(t),Mvo=r(Q3e," \u2014 "),bI=n(Q3e,"A",{href:!0});var mYr=s(bI);Evo=r(mYr,"OpenAIGPTLMHeadModel"),mYr.forEach(t),Cvo=r(Q3e," (OpenAI GPT model)"),Q3e.forEach(t),wvo=i(q),zu=n(q,"LI",{});var W3e=s(zu);vne=n(W3e,"STRONG",{});var gYr=s(vne);Avo=r(gYr,"pegasus"),gYr.forEach(t),yvo=r(W3e," \u2014 "),vI=n(W3e,"A",{href:!0});var hYr=s(vI);Lvo=r(hYr,"PegasusForCausalLM"),hYr.forEach(t),xvo=r(W3e," (Pegasus model)"),W3e.forEach(t),kvo=i(q),Qu=n(q,"LI",{});var H3e=s(Qu);Fne=n(H3e,"STRONG",{});var pYr=s(Fne);Svo=r(pYr,"plbart"),pYr.forEach(t),Rvo=r(H3e," \u2014 "),FI=n(H3e,"A",{href:!0});var _Yr=s(FI);Bvo=r(_Yr,"PLBartForCausalLM"),_Yr.forEach(t),Pvo=r(H3e," (PLBart model)"),H3e.forEach(t),$vo=i(q),Wu=n(q,"LI",{});var U3e=s(Wu);Tne=n(U3e,"STRONG",{});var uYr=s(Tne);Ivo=r(uYr,"prophetnet"),uYr.forEach(t),qvo=r(U3e," \u2014 "),TI=n(U3e,"A",{href:!0});var bYr=s(TI);Nvo=r(bYr,"ProphetNetForCausalLM"),bYr.forEach(t),jvo=r(U3e," (ProphetNet model)"),U3e.forEach(t),Dvo=i(q),Hu=n(q,"LI",{});var J3e=s(Hu);Mne=n(J3e,"STRONG",{});var vYr=s(Mne);Gvo=r(vYr,"qdqbert"),vYr.forEach(t),Ovo=r(J3e," \u2014 "),MI=n(J3e,"A",{href:!0});var FYr=s(MI);Vvo=r(FYr,"QDQBertLMHeadModel"),FYr.forEach(t),Xvo=r(J3e," (QDQBert model)"),J3e.forEach(t),zvo=i(q),Uu=n(q,"LI",{});var Y3e=s(Uu);Ene=n(Y3e,"STRONG",{});var TYr=s(Ene);Qvo=r(TYr,"reformer"),TYr.forEach(t),Wvo=r(Y3e," \u2014 "),EI=n(Y3e,"A",{href:!0});var MYr=s(EI);Hvo=r(MYr,"ReformerModelWithLMHead"),MYr.forEach(t),Uvo=r(Y3e," (Reformer model)"),Y3e.forEach(t),Jvo=i(q),Ju=n(q,"LI",{});var K3e=s(Ju);Cne=n(K3e,"STRONG",{});var EYr=s(Cne);Yvo=r(EYr,"rembert"),EYr.forEach(t),Kvo=r(K3e," \u2014 "),CI=n(K3e,"A",{href:!0});var CYr=s(CI);Zvo=r(CYr,"RemBertForCausalLM"),CYr.forEach(t),eFo=r(K3e," (RemBERT model)"),K3e.forEach(t),oFo=i(q),Yu=n(q,"LI",{});var Z3e=s(Yu);wne=n(Z3e,"STRONG",{});var wYr=s(wne);rFo=r(wYr,"roberta"),wYr.forEach(t),tFo=r(Z3e," \u2014 "),wI=n(Z3e,"A",{href:!0});var AYr=s(wI);aFo=r(AYr,"RobertaForCausalLM"),AYr.forEach(t),nFo=r(Z3e," (RoBERTa model)"),Z3e.forEach(t),sFo=i(q),Ku=n(q,"LI",{});var eCe=s(Ku);Ane=n(eCe,"STRONG",{});var yYr=s(Ane);lFo=r(yYr,"roformer"),yYr.forEach(t),iFo=r(eCe," \u2014 "),AI=n(eCe,"A",{href:!0});var LYr=s(AI);dFo=r(LYr,"RoFormerForCausalLM"),LYr.forEach(t),cFo=r(eCe," (RoFormer model)"),eCe.forEach(t),fFo=i(q),Zu=n(q,"LI",{});var oCe=s(Zu);yne=n(oCe,"STRONG",{});var xYr=s(yne);mFo=r(xYr,"speech_to_text_2"),xYr.forEach(t),gFo=r(oCe," \u2014 "),yI=n(oCe,"A",{href:!0});var kYr=s(yI);hFo=r(kYr,"Speech2Text2ForCausalLM"),kYr.forEach(t),pFo=r(oCe," (Speech2Text2 model)"),oCe.forEach(t),_Fo=i(q),e1=n(q,"LI",{});var rCe=s(e1);Lne=n(rCe,"STRONG",{});var SYr=s(Lne);uFo=r(SYr,"transfo-xl"),SYr.forEach(t),bFo=r(rCe," \u2014 "),LI=n(rCe,"A",{href:!0});var RYr=s(LI);vFo=r(RYr,"TransfoXLLMHeadModel"),RYr.forEach(t),FFo=r(rCe," (Transformer-XL model)"),rCe.forEach(t),TFo=i(q),o1=n(q,"LI",{});var tCe=s(o1);xne=n(tCe,"STRONG",{});var BYr=s(xne);MFo=r(BYr,"trocr"),BYr.forEach(t),EFo=r(tCe," \u2014 "),xI=n(tCe,"A",{href:!0});var PYr=s(xI);CFo=r(PYr,"TrOCRForCausalLM"),PYr.forEach(t),wFo=r(tCe," (TrOCR model)"),tCe.forEach(t),AFo=i(q),r1=n(q,"LI",{});var aCe=s(r1);kne=n(aCe,"STRONG",{});var $Yr=s(kne);yFo=r($Yr,"xglm"),$Yr.forEach(t),LFo=r(aCe," \u2014 "),kI=n(aCe,"A",{href:!0});var IYr=s(kI);xFo=r(IYr,"XGLMForCausalLM"),IYr.forEach(t),kFo=r(aCe," (XGLM model)"),aCe.forEach(t),SFo=i(q),t1=n(q,"LI",{});var nCe=s(t1);Sne=n(nCe,"STRONG",{});var qYr=s(Sne);RFo=r(qYr,"xlm"),qYr.forEach(t),BFo=r(nCe," \u2014 "),SI=n(nCe,"A",{href:!0});var NYr=s(SI);PFo=r(NYr,"XLMWithLMHeadModel"),NYr.forEach(t),$Fo=r(nCe," (XLM model)"),nCe.forEach(t),IFo=i(q),a1=n(q,"LI",{});var sCe=s(a1);Rne=n(sCe,"STRONG",{});var jYr=s(Rne);qFo=r(jYr,"xlm-prophetnet"),jYr.forEach(t),NFo=r(sCe," \u2014 "),RI=n(sCe,"A",{href:!0});var DYr=s(RI);jFo=r(DYr,"XLMProphetNetForCausalLM"),DYr.forEach(t),DFo=r(sCe," (XLMProphetNet model)"),sCe.forEach(t),GFo=i(q),n1=n(q,"LI",{});var lCe=s(n1);Bne=n(lCe,"STRONG",{});var GYr=s(Bne);OFo=r(GYr,"xlm-roberta"),GYr.forEach(t),VFo=r(lCe," \u2014 "),BI=n(lCe,"A",{href:!0});var OYr=s(BI);XFo=r(OYr,"XLMRobertaForCausalLM"),OYr.forEach(t),zFo=r(lCe," (XLM-RoBERTa model)"),lCe.forEach(t),QFo=i(q),s1=n(q,"LI",{});var iCe=s(s1);Pne=n(iCe,"STRONG",{});var VYr=s(Pne);WFo=r(VYr,"xlm-roberta-xl"),VYr.forEach(t),HFo=r(iCe," \u2014 "),PI=n(iCe,"A",{href:!0});var XYr=s(PI);UFo=r(XYr,"XLMRobertaXLForCausalLM"),XYr.forEach(t),JFo=r(iCe," (XLM-RoBERTa-XL model)"),iCe.forEach(t),YFo=i(q),l1=n(q,"LI",{});var dCe=s(l1);$ne=n(dCe,"STRONG",{});var zYr=s($ne);KFo=r(zYr,"xlnet"),zYr.forEach(t),ZFo=r(dCe," \u2014 "),$I=n(dCe,"A",{href:!0});var QYr=s($I);eTo=r(QYr,"XLNetLMHeadModel"),QYr.forEach(t),oTo=r(dCe," (XLNet model)"),dCe.forEach(t),q.forEach(t),rTo=i(Ot),i1=n(Ot,"P",{});var cCe=s(i1);tTo=r(cCe,"The model is set in evaluation mode by default using "),Ine=n(cCe,"CODE",{});var WYr=s(Ine);aTo=r(WYr,"model.eval()"),WYr.forEach(t),nTo=r(cCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qne=n(cCe,"CODE",{});var HYr=s(qne);sTo=r(HYr,"model.train()"),HYr.forEach(t),cCe.forEach(t),lTo=i(Ot),Nne=n(Ot,"P",{});var UYr=s(Nne);iTo=r(UYr,"Examples:"),UYr.forEach(t),dTo=i(Ot),m(k3.$$.fragment,Ot),Ot.forEach(t),Zs.forEach(t),sBe=i(c),id=n(c,"H2",{class:!0});var p$e=s(id);d1=n(p$e,"A",{id:!0,class:!0,href:!0});var JYr=s(d1);jne=n(JYr,"SPAN",{});var YYr=s(jne);m(S3.$$.fragment,YYr),YYr.forEach(t),JYr.forEach(t),cTo=i(p$e),Dne=n(p$e,"SPAN",{});var KYr=s(Dne);fTo=r(KYr,"AutoModelForMaskedLM"),KYr.forEach(t),p$e.forEach(t),lBe=i(c),Zo=n(c,"DIV",{class:!0});var ol=s(Zo);m(R3.$$.fragment,ol),mTo=i(ol),dd=n(ol,"P",{});var PU=s(dd);gTo=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),II=n(PU,"A",{href:!0});var ZYr=s(II);hTo=r(ZYr,"from_pretrained()"),ZYr.forEach(t),pTo=r(PU," class method or the "),qI=n(PU,"A",{href:!0});var eKr=s(qI);_To=r(eKr,"from_config()"),eKr.forEach(t),uTo=r(PU,` class
method.`),PU.forEach(t),bTo=i(ol),B3=n(ol,"P",{});var _$e=s(B3);vTo=r(_$e,"This class cannot be instantiated directly using "),Gne=n(_$e,"CODE",{});var oKr=s(Gne);FTo=r(oKr,"__init__()"),oKr.forEach(t),TTo=r(_$e," (throws an error)."),_$e.forEach(t),MTo=i(ol),Wr=n(ol,"DIV",{class:!0});var rl=s(Wr);m(P3.$$.fragment,rl),ETo=i(rl),One=n(rl,"P",{});var rKr=s(One);CTo=r(rKr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rKr.forEach(t),wTo=i(rl),cd=n(rl,"P",{});var $U=s(cd);ATo=r($U,`Note:
Loading a model from its configuration file does `),Vne=n($U,"STRONG",{});var tKr=s(Vne);yTo=r(tKr,"not"),tKr.forEach(t),LTo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),NI=n($U,"A",{href:!0});var aKr=s(NI);xTo=r(aKr,"from_pretrained()"),aKr.forEach(t),kTo=r($U," to load the model weights."),$U.forEach(t),STo=i(rl),Xne=n(rl,"P",{});var nKr=s(Xne);RTo=r(nKr,"Examples:"),nKr.forEach(t),BTo=i(rl),m($3.$$.fragment,rl),rl.forEach(t),PTo=i(ol),De=n(ol,"DIV",{class:!0});var Vt=s(De);m(I3.$$.fragment,Vt),$To=i(Vt),zne=n(Vt,"P",{});var sKr=s(zne);ITo=r(sKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sKr.forEach(t),qTo=i(Vt),Wa=n(Vt,"P",{});var IE=s(Wa);NTo=r(IE,"The model class to instantiate is selected based on the "),Qne=n(IE,"CODE",{});var lKr=s(Qne);jTo=r(lKr,"model_type"),lKr.forEach(t),DTo=r(IE,` property of the config object (either
passed as an argument or loaded from `),Wne=n(IE,"CODE",{});var iKr=s(Wne);GTo=r(iKr,"pretrained_model_name_or_path"),iKr.forEach(t),OTo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hne=n(IE,"CODE",{});var dKr=s(Hne);VTo=r(dKr,"pretrained_model_name_or_path"),dKr.forEach(t),XTo=r(IE,":"),IE.forEach(t),zTo=i(Vt),I=n(Vt,"UL",{});var N=s(I);c1=n(N,"LI",{});var fCe=s(c1);Une=n(fCe,"STRONG",{});var cKr=s(Une);QTo=r(cKr,"albert"),cKr.forEach(t),WTo=r(fCe," \u2014 "),jI=n(fCe,"A",{href:!0});var fKr=s(jI);HTo=r(fKr,"AlbertForMaskedLM"),fKr.forEach(t),UTo=r(fCe," (ALBERT model)"),fCe.forEach(t),JTo=i(N),f1=n(N,"LI",{});var mCe=s(f1);Jne=n(mCe,"STRONG",{});var mKr=s(Jne);YTo=r(mKr,"bart"),mKr.forEach(t),KTo=r(mCe," \u2014 "),DI=n(mCe,"A",{href:!0});var gKr=s(DI);ZTo=r(gKr,"BartForConditionalGeneration"),gKr.forEach(t),e8o=r(mCe," (BART model)"),mCe.forEach(t),o8o=i(N),m1=n(N,"LI",{});var gCe=s(m1);Yne=n(gCe,"STRONG",{});var hKr=s(Yne);r8o=r(hKr,"bert"),hKr.forEach(t),t8o=r(gCe," \u2014 "),GI=n(gCe,"A",{href:!0});var pKr=s(GI);a8o=r(pKr,"BertForMaskedLM"),pKr.forEach(t),n8o=r(gCe," (BERT model)"),gCe.forEach(t),s8o=i(N),g1=n(N,"LI",{});var hCe=s(g1);Kne=n(hCe,"STRONG",{});var _Kr=s(Kne);l8o=r(_Kr,"big_bird"),_Kr.forEach(t),i8o=r(hCe," \u2014 "),OI=n(hCe,"A",{href:!0});var uKr=s(OI);d8o=r(uKr,"BigBirdForMaskedLM"),uKr.forEach(t),c8o=r(hCe," (BigBird model)"),hCe.forEach(t),f8o=i(N),h1=n(N,"LI",{});var pCe=s(h1);Zne=n(pCe,"STRONG",{});var bKr=s(Zne);m8o=r(bKr,"camembert"),bKr.forEach(t),g8o=r(pCe," \u2014 "),VI=n(pCe,"A",{href:!0});var vKr=s(VI);h8o=r(vKr,"CamembertForMaskedLM"),vKr.forEach(t),p8o=r(pCe," (CamemBERT model)"),pCe.forEach(t),_8o=i(N),p1=n(N,"LI",{});var _Ce=s(p1);ese=n(_Ce,"STRONG",{});var FKr=s(ese);u8o=r(FKr,"convbert"),FKr.forEach(t),b8o=r(_Ce," \u2014 "),XI=n(_Ce,"A",{href:!0});var TKr=s(XI);v8o=r(TKr,"ConvBertForMaskedLM"),TKr.forEach(t),F8o=r(_Ce," (ConvBERT model)"),_Ce.forEach(t),T8o=i(N),_1=n(N,"LI",{});var uCe=s(_1);ose=n(uCe,"STRONG",{});var MKr=s(ose);M8o=r(MKr,"data2vec-text"),MKr.forEach(t),E8o=r(uCe," \u2014 "),zI=n(uCe,"A",{href:!0});var EKr=s(zI);C8o=r(EKr,"Data2VecTextForMaskedLM"),EKr.forEach(t),w8o=r(uCe," (Data2VecText model)"),uCe.forEach(t),A8o=i(N),u1=n(N,"LI",{});var bCe=s(u1);rse=n(bCe,"STRONG",{});var CKr=s(rse);y8o=r(CKr,"deberta"),CKr.forEach(t),L8o=r(bCe," \u2014 "),QI=n(bCe,"A",{href:!0});var wKr=s(QI);x8o=r(wKr,"DebertaForMaskedLM"),wKr.forEach(t),k8o=r(bCe," (DeBERTa model)"),bCe.forEach(t),S8o=i(N),b1=n(N,"LI",{});var vCe=s(b1);tse=n(vCe,"STRONG",{});var AKr=s(tse);R8o=r(AKr,"deberta-v2"),AKr.forEach(t),B8o=r(vCe," \u2014 "),WI=n(vCe,"A",{href:!0});var yKr=s(WI);P8o=r(yKr,"DebertaV2ForMaskedLM"),yKr.forEach(t),$8o=r(vCe," (DeBERTa-v2 model)"),vCe.forEach(t),I8o=i(N),v1=n(N,"LI",{});var FCe=s(v1);ase=n(FCe,"STRONG",{});var LKr=s(ase);q8o=r(LKr,"distilbert"),LKr.forEach(t),N8o=r(FCe," \u2014 "),HI=n(FCe,"A",{href:!0});var xKr=s(HI);j8o=r(xKr,"DistilBertForMaskedLM"),xKr.forEach(t),D8o=r(FCe," (DistilBERT model)"),FCe.forEach(t),G8o=i(N),F1=n(N,"LI",{});var TCe=s(F1);nse=n(TCe,"STRONG",{});var kKr=s(nse);O8o=r(kKr,"electra"),kKr.forEach(t),V8o=r(TCe," \u2014 "),UI=n(TCe,"A",{href:!0});var SKr=s(UI);X8o=r(SKr,"ElectraForMaskedLM"),SKr.forEach(t),z8o=r(TCe," (ELECTRA model)"),TCe.forEach(t),Q8o=i(N),T1=n(N,"LI",{});var MCe=s(T1);sse=n(MCe,"STRONG",{});var RKr=s(sse);W8o=r(RKr,"flaubert"),RKr.forEach(t),H8o=r(MCe," \u2014 "),JI=n(MCe,"A",{href:!0});var BKr=s(JI);U8o=r(BKr,"FlaubertWithLMHeadModel"),BKr.forEach(t),J8o=r(MCe," (FlauBERT model)"),MCe.forEach(t),Y8o=i(N),M1=n(N,"LI",{});var ECe=s(M1);lse=n(ECe,"STRONG",{});var PKr=s(lse);K8o=r(PKr,"fnet"),PKr.forEach(t),Z8o=r(ECe," \u2014 "),YI=n(ECe,"A",{href:!0});var $Kr=s(YI);e7o=r($Kr,"FNetForMaskedLM"),$Kr.forEach(t),o7o=r(ECe," (FNet model)"),ECe.forEach(t),r7o=i(N),E1=n(N,"LI",{});var CCe=s(E1);ise=n(CCe,"STRONG",{});var IKr=s(ise);t7o=r(IKr,"funnel"),IKr.forEach(t),a7o=r(CCe," \u2014 "),KI=n(CCe,"A",{href:!0});var qKr=s(KI);n7o=r(qKr,"FunnelForMaskedLM"),qKr.forEach(t),s7o=r(CCe," (Funnel Transformer model)"),CCe.forEach(t),l7o=i(N),C1=n(N,"LI",{});var wCe=s(C1);dse=n(wCe,"STRONG",{});var NKr=s(dse);i7o=r(NKr,"ibert"),NKr.forEach(t),d7o=r(wCe," \u2014 "),ZI=n(wCe,"A",{href:!0});var jKr=s(ZI);c7o=r(jKr,"IBertForMaskedLM"),jKr.forEach(t),f7o=r(wCe," (I-BERT model)"),wCe.forEach(t),m7o=i(N),w1=n(N,"LI",{});var ACe=s(w1);cse=n(ACe,"STRONG",{});var DKr=s(cse);g7o=r(DKr,"layoutlm"),DKr.forEach(t),h7o=r(ACe," \u2014 "),eq=n(ACe,"A",{href:!0});var GKr=s(eq);p7o=r(GKr,"LayoutLMForMaskedLM"),GKr.forEach(t),_7o=r(ACe," (LayoutLM model)"),ACe.forEach(t),u7o=i(N),A1=n(N,"LI",{});var yCe=s(A1);fse=n(yCe,"STRONG",{});var OKr=s(fse);b7o=r(OKr,"longformer"),OKr.forEach(t),v7o=r(yCe," \u2014 "),oq=n(yCe,"A",{href:!0});var VKr=s(oq);F7o=r(VKr,"LongformerForMaskedLM"),VKr.forEach(t),T7o=r(yCe," (Longformer model)"),yCe.forEach(t),M7o=i(N),y1=n(N,"LI",{});var LCe=s(y1);mse=n(LCe,"STRONG",{});var XKr=s(mse);E7o=r(XKr,"mbart"),XKr.forEach(t),C7o=r(LCe," \u2014 "),rq=n(LCe,"A",{href:!0});var zKr=s(rq);w7o=r(zKr,"MBartForConditionalGeneration"),zKr.forEach(t),A7o=r(LCe," (mBART model)"),LCe.forEach(t),y7o=i(N),L1=n(N,"LI",{});var xCe=s(L1);gse=n(xCe,"STRONG",{});var QKr=s(gse);L7o=r(QKr,"megatron-bert"),QKr.forEach(t),x7o=r(xCe," \u2014 "),tq=n(xCe,"A",{href:!0});var WKr=s(tq);k7o=r(WKr,"MegatronBertForMaskedLM"),WKr.forEach(t),S7o=r(xCe," (MegatronBert model)"),xCe.forEach(t),R7o=i(N),x1=n(N,"LI",{});var kCe=s(x1);hse=n(kCe,"STRONG",{});var HKr=s(hse);B7o=r(HKr,"mobilebert"),HKr.forEach(t),P7o=r(kCe," \u2014 "),aq=n(kCe,"A",{href:!0});var UKr=s(aq);$7o=r(UKr,"MobileBertForMaskedLM"),UKr.forEach(t),I7o=r(kCe," (MobileBERT model)"),kCe.forEach(t),q7o=i(N),k1=n(N,"LI",{});var SCe=s(k1);pse=n(SCe,"STRONG",{});var JKr=s(pse);N7o=r(JKr,"mpnet"),JKr.forEach(t),j7o=r(SCe," \u2014 "),nq=n(SCe,"A",{href:!0});var YKr=s(nq);D7o=r(YKr,"MPNetForMaskedLM"),YKr.forEach(t),G7o=r(SCe," (MPNet model)"),SCe.forEach(t),O7o=i(N),S1=n(N,"LI",{});var RCe=s(S1);_se=n(RCe,"STRONG",{});var KKr=s(_se);V7o=r(KKr,"nystromformer"),KKr.forEach(t),X7o=r(RCe," \u2014 "),sq=n(RCe,"A",{href:!0});var ZKr=s(sq);z7o=r(ZKr,"NystromformerForMaskedLM"),ZKr.forEach(t),Q7o=r(RCe," (Nystromformer model)"),RCe.forEach(t),W7o=i(N),R1=n(N,"LI",{});var BCe=s(R1);use=n(BCe,"STRONG",{});var eZr=s(use);H7o=r(eZr,"perceiver"),eZr.forEach(t),U7o=r(BCe," \u2014 "),lq=n(BCe,"A",{href:!0});var oZr=s(lq);J7o=r(oZr,"PerceiverForMaskedLM"),oZr.forEach(t),Y7o=r(BCe," (Perceiver model)"),BCe.forEach(t),K7o=i(N),B1=n(N,"LI",{});var PCe=s(B1);bse=n(PCe,"STRONG",{});var rZr=s(bse);Z7o=r(rZr,"qdqbert"),rZr.forEach(t),eMo=r(PCe," \u2014 "),iq=n(PCe,"A",{href:!0});var tZr=s(iq);oMo=r(tZr,"QDQBertForMaskedLM"),tZr.forEach(t),rMo=r(PCe," (QDQBert model)"),PCe.forEach(t),tMo=i(N),P1=n(N,"LI",{});var $Ce=s(P1);vse=n($Ce,"STRONG",{});var aZr=s(vse);aMo=r(aZr,"reformer"),aZr.forEach(t),nMo=r($Ce," \u2014 "),dq=n($Ce,"A",{href:!0});var nZr=s(dq);sMo=r(nZr,"ReformerForMaskedLM"),nZr.forEach(t),lMo=r($Ce," (Reformer model)"),$Ce.forEach(t),iMo=i(N),$1=n(N,"LI",{});var ICe=s($1);Fse=n(ICe,"STRONG",{});var sZr=s(Fse);dMo=r(sZr,"rembert"),sZr.forEach(t),cMo=r(ICe," \u2014 "),cq=n(ICe,"A",{href:!0});var lZr=s(cq);fMo=r(lZr,"RemBertForMaskedLM"),lZr.forEach(t),mMo=r(ICe," (RemBERT model)"),ICe.forEach(t),gMo=i(N),I1=n(N,"LI",{});var qCe=s(I1);Tse=n(qCe,"STRONG",{});var iZr=s(Tse);hMo=r(iZr,"roberta"),iZr.forEach(t),pMo=r(qCe," \u2014 "),fq=n(qCe,"A",{href:!0});var dZr=s(fq);_Mo=r(dZr,"RobertaForMaskedLM"),dZr.forEach(t),uMo=r(qCe," (RoBERTa model)"),qCe.forEach(t),bMo=i(N),q1=n(N,"LI",{});var NCe=s(q1);Mse=n(NCe,"STRONG",{});var cZr=s(Mse);vMo=r(cZr,"roformer"),cZr.forEach(t),FMo=r(NCe," \u2014 "),mq=n(NCe,"A",{href:!0});var fZr=s(mq);TMo=r(fZr,"RoFormerForMaskedLM"),fZr.forEach(t),MMo=r(NCe," (RoFormer model)"),NCe.forEach(t),EMo=i(N),N1=n(N,"LI",{});var jCe=s(N1);Ese=n(jCe,"STRONG",{});var mZr=s(Ese);CMo=r(mZr,"squeezebert"),mZr.forEach(t),wMo=r(jCe," \u2014 "),gq=n(jCe,"A",{href:!0});var gZr=s(gq);AMo=r(gZr,"SqueezeBertForMaskedLM"),gZr.forEach(t),yMo=r(jCe," (SqueezeBERT model)"),jCe.forEach(t),LMo=i(N),j1=n(N,"LI",{});var DCe=s(j1);Cse=n(DCe,"STRONG",{});var hZr=s(Cse);xMo=r(hZr,"tapas"),hZr.forEach(t),kMo=r(DCe," \u2014 "),hq=n(DCe,"A",{href:!0});var pZr=s(hq);SMo=r(pZr,"TapasForMaskedLM"),pZr.forEach(t),RMo=r(DCe," (TAPAS model)"),DCe.forEach(t),BMo=i(N),D1=n(N,"LI",{});var GCe=s(D1);wse=n(GCe,"STRONG",{});var _Zr=s(wse);PMo=r(_Zr,"wav2vec2"),_Zr.forEach(t),$Mo=r(GCe," \u2014 "),Ase=n(GCe,"CODE",{});var uZr=s(Ase);IMo=r(uZr,"Wav2Vec2ForMaskedLM"),uZr.forEach(t),qMo=r(GCe," (Wav2Vec2 model)"),GCe.forEach(t),NMo=i(N),G1=n(N,"LI",{});var OCe=s(G1);yse=n(OCe,"STRONG",{});var bZr=s(yse);jMo=r(bZr,"xlm"),bZr.forEach(t),DMo=r(OCe," \u2014 "),pq=n(OCe,"A",{href:!0});var vZr=s(pq);GMo=r(vZr,"XLMWithLMHeadModel"),vZr.forEach(t),OMo=r(OCe," (XLM model)"),OCe.forEach(t),VMo=i(N),O1=n(N,"LI",{});var VCe=s(O1);Lse=n(VCe,"STRONG",{});var FZr=s(Lse);XMo=r(FZr,"xlm-roberta"),FZr.forEach(t),zMo=r(VCe," \u2014 "),_q=n(VCe,"A",{href:!0});var TZr=s(_q);QMo=r(TZr,"XLMRobertaForMaskedLM"),TZr.forEach(t),WMo=r(VCe," (XLM-RoBERTa model)"),VCe.forEach(t),HMo=i(N),V1=n(N,"LI",{});var XCe=s(V1);xse=n(XCe,"STRONG",{});var MZr=s(xse);UMo=r(MZr,"xlm-roberta-xl"),MZr.forEach(t),JMo=r(XCe," \u2014 "),uq=n(XCe,"A",{href:!0});var EZr=s(uq);YMo=r(EZr,"XLMRobertaXLForMaskedLM"),EZr.forEach(t),KMo=r(XCe," (XLM-RoBERTa-XL model)"),XCe.forEach(t),ZMo=i(N),X1=n(N,"LI",{});var zCe=s(X1);kse=n(zCe,"STRONG",{});var CZr=s(kse);e4o=r(CZr,"yoso"),CZr.forEach(t),o4o=r(zCe," \u2014 "),bq=n(zCe,"A",{href:!0});var wZr=s(bq);r4o=r(wZr,"YosoForMaskedLM"),wZr.forEach(t),t4o=r(zCe," (YOSO model)"),zCe.forEach(t),N.forEach(t),a4o=i(Vt),z1=n(Vt,"P",{});var QCe=s(z1);n4o=r(QCe,"The model is set in evaluation mode by default using "),Sse=n(QCe,"CODE",{});var AZr=s(Sse);s4o=r(AZr,"model.eval()"),AZr.forEach(t),l4o=r(QCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rse=n(QCe,"CODE",{});var yZr=s(Rse);i4o=r(yZr,"model.train()"),yZr.forEach(t),QCe.forEach(t),d4o=i(Vt),Bse=n(Vt,"P",{});var LZr=s(Bse);c4o=r(LZr,"Examples:"),LZr.forEach(t),f4o=i(Vt),m(q3.$$.fragment,Vt),Vt.forEach(t),ol.forEach(t),iBe=i(c),fd=n(c,"H2",{class:!0});var u$e=s(fd);Q1=n(u$e,"A",{id:!0,class:!0,href:!0});var xZr=s(Q1);Pse=n(xZr,"SPAN",{});var kZr=s(Pse);m(N3.$$.fragment,kZr),kZr.forEach(t),xZr.forEach(t),m4o=i(u$e),$se=n(u$e,"SPAN",{});var SZr=s($se);g4o=r(SZr,"AutoModelForSeq2SeqLM"),SZr.forEach(t),u$e.forEach(t),dBe=i(c),er=n(c,"DIV",{class:!0});var tl=s(er);m(j3.$$.fragment,tl),h4o=i(tl),md=n(tl,"P",{});var IU=s(md);p4o=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vq=n(IU,"A",{href:!0});var RZr=s(vq);_4o=r(RZr,"from_pretrained()"),RZr.forEach(t),u4o=r(IU," class method or the "),Fq=n(IU,"A",{href:!0});var BZr=s(Fq);b4o=r(BZr,"from_config()"),BZr.forEach(t),v4o=r(IU,` class
method.`),IU.forEach(t),F4o=i(tl),D3=n(tl,"P",{});var b$e=s(D3);T4o=r(b$e,"This class cannot be instantiated directly using "),Ise=n(b$e,"CODE",{});var PZr=s(Ise);M4o=r(PZr,"__init__()"),PZr.forEach(t),E4o=r(b$e," (throws an error)."),b$e.forEach(t),C4o=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);m(G3.$$.fragment,al),w4o=i(al),qse=n(al,"P",{});var $Zr=s(qse);A4o=r($Zr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$Zr.forEach(t),y4o=i(al),gd=n(al,"P",{});var qU=s(gd);L4o=r(qU,`Note:
Loading a model from its configuration file does `),Nse=n(qU,"STRONG",{});var IZr=s(Nse);x4o=r(IZr,"not"),IZr.forEach(t),k4o=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tq=n(qU,"A",{href:!0});var qZr=s(Tq);S4o=r(qZr,"from_pretrained()"),qZr.forEach(t),R4o=r(qU," to load the model weights."),qU.forEach(t),B4o=i(al),jse=n(al,"P",{});var NZr=s(jse);P4o=r(NZr,"Examples:"),NZr.forEach(t),$4o=i(al),m(O3.$$.fragment,al),al.forEach(t),I4o=i(tl),Ge=n(tl,"DIV",{class:!0});var Xt=s(Ge);m(V3.$$.fragment,Xt),q4o=i(Xt),Dse=n(Xt,"P",{});var jZr=s(Dse);N4o=r(jZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jZr.forEach(t),j4o=i(Xt),Ha=n(Xt,"P",{});var qE=s(Ha);D4o=r(qE,"The model class to instantiate is selected based on the "),Gse=n(qE,"CODE",{});var DZr=s(Gse);G4o=r(DZr,"model_type"),DZr.forEach(t),O4o=r(qE,` property of the config object (either
passed as an argument or loaded from `),Ose=n(qE,"CODE",{});var GZr=s(Ose);V4o=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),X4o=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vse=n(qE,"CODE",{});var OZr=s(Vse);z4o=r(OZr,"pretrained_model_name_or_path"),OZr.forEach(t),Q4o=r(qE,":"),qE.forEach(t),W4o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);W1=n(le,"LI",{});var WCe=s(W1);Xse=n(WCe,"STRONG",{});var VZr=s(Xse);H4o=r(VZr,"bart"),VZr.forEach(t),U4o=r(WCe," \u2014 "),Mq=n(WCe,"A",{href:!0});var XZr=s(Mq);J4o=r(XZr,"BartForConditionalGeneration"),XZr.forEach(t),Y4o=r(WCe," (BART model)"),WCe.forEach(t),K4o=i(le),H1=n(le,"LI",{});var HCe=s(H1);zse=n(HCe,"STRONG",{});var zZr=s(zse);Z4o=r(zZr,"bigbird_pegasus"),zZr.forEach(t),eEo=r(HCe," \u2014 "),Eq=n(HCe,"A",{href:!0});var QZr=s(Eq);oEo=r(QZr,"BigBirdPegasusForConditionalGeneration"),QZr.forEach(t),rEo=r(HCe," (BigBirdPegasus model)"),HCe.forEach(t),tEo=i(le),U1=n(le,"LI",{});var UCe=s(U1);Qse=n(UCe,"STRONG",{});var WZr=s(Qse);aEo=r(WZr,"blenderbot"),WZr.forEach(t),nEo=r(UCe," \u2014 "),Cq=n(UCe,"A",{href:!0});var HZr=s(Cq);sEo=r(HZr,"BlenderbotForConditionalGeneration"),HZr.forEach(t),lEo=r(UCe," (Blenderbot model)"),UCe.forEach(t),iEo=i(le),J1=n(le,"LI",{});var JCe=s(J1);Wse=n(JCe,"STRONG",{});var UZr=s(Wse);dEo=r(UZr,"blenderbot-small"),UZr.forEach(t),cEo=r(JCe," \u2014 "),wq=n(JCe,"A",{href:!0});var JZr=s(wq);fEo=r(JZr,"BlenderbotSmallForConditionalGeneration"),JZr.forEach(t),mEo=r(JCe," (BlenderbotSmall model)"),JCe.forEach(t),gEo=i(le),Y1=n(le,"LI",{});var YCe=s(Y1);Hse=n(YCe,"STRONG",{});var YZr=s(Hse);hEo=r(YZr,"encoder-decoder"),YZr.forEach(t),pEo=r(YCe," \u2014 "),Aq=n(YCe,"A",{href:!0});var KZr=s(Aq);_Eo=r(KZr,"EncoderDecoderModel"),KZr.forEach(t),uEo=r(YCe," (Encoder decoder model)"),YCe.forEach(t),bEo=i(le),K1=n(le,"LI",{});var KCe=s(K1);Use=n(KCe,"STRONG",{});var ZZr=s(Use);vEo=r(ZZr,"fsmt"),ZZr.forEach(t),FEo=r(KCe," \u2014 "),yq=n(KCe,"A",{href:!0});var eet=s(yq);TEo=r(eet,"FSMTForConditionalGeneration"),eet.forEach(t),MEo=r(KCe," (FairSeq Machine-Translation model)"),KCe.forEach(t),EEo=i(le),Z1=n(le,"LI",{});var ZCe=s(Z1);Jse=n(ZCe,"STRONG",{});var oet=s(Jse);CEo=r(oet,"led"),oet.forEach(t),wEo=r(ZCe," \u2014 "),Lq=n(ZCe,"A",{href:!0});var ret=s(Lq);AEo=r(ret,"LEDForConditionalGeneration"),ret.forEach(t),yEo=r(ZCe," (LED model)"),ZCe.forEach(t),LEo=i(le),eb=n(le,"LI",{});var ewe=s(eb);Yse=n(ewe,"STRONG",{});var tet=s(Yse);xEo=r(tet,"m2m_100"),tet.forEach(t),kEo=r(ewe," \u2014 "),xq=n(ewe,"A",{href:!0});var aet=s(xq);SEo=r(aet,"M2M100ForConditionalGeneration"),aet.forEach(t),REo=r(ewe," (M2M100 model)"),ewe.forEach(t),BEo=i(le),ob=n(le,"LI",{});var owe=s(ob);Kse=n(owe,"STRONG",{});var net=s(Kse);PEo=r(net,"marian"),net.forEach(t),$Eo=r(owe," \u2014 "),kq=n(owe,"A",{href:!0});var set=s(kq);IEo=r(set,"MarianMTModel"),set.forEach(t),qEo=r(owe," (Marian model)"),owe.forEach(t),NEo=i(le),rb=n(le,"LI",{});var rwe=s(rb);Zse=n(rwe,"STRONG",{});var iet=s(Zse);jEo=r(iet,"mbart"),iet.forEach(t),DEo=r(rwe," \u2014 "),Sq=n(rwe,"A",{href:!0});var det=s(Sq);GEo=r(det,"MBartForConditionalGeneration"),det.forEach(t),OEo=r(rwe," (mBART model)"),rwe.forEach(t),VEo=i(le),tb=n(le,"LI",{});var twe=s(tb);ele=n(twe,"STRONG",{});var cet=s(ele);XEo=r(cet,"mt5"),cet.forEach(t),zEo=r(twe," \u2014 "),Rq=n(twe,"A",{href:!0});var fet=s(Rq);QEo=r(fet,"MT5ForConditionalGeneration"),fet.forEach(t),WEo=r(twe," (mT5 model)"),twe.forEach(t),HEo=i(le),ab=n(le,"LI",{});var awe=s(ab);ole=n(awe,"STRONG",{});var met=s(ole);UEo=r(met,"pegasus"),met.forEach(t),JEo=r(awe," \u2014 "),Bq=n(awe,"A",{href:!0});var get=s(Bq);YEo=r(get,"PegasusForConditionalGeneration"),get.forEach(t),KEo=r(awe," (Pegasus model)"),awe.forEach(t),ZEo=i(le),nb=n(le,"LI",{});var nwe=s(nb);rle=n(nwe,"STRONG",{});var het=s(rle);e5o=r(het,"plbart"),het.forEach(t),o5o=r(nwe," \u2014 "),Pq=n(nwe,"A",{href:!0});var pet=s(Pq);r5o=r(pet,"PLBartForConditionalGeneration"),pet.forEach(t),t5o=r(nwe," (PLBart model)"),nwe.forEach(t),a5o=i(le),sb=n(le,"LI",{});var swe=s(sb);tle=n(swe,"STRONG",{});var _et=s(tle);n5o=r(_et,"prophetnet"),_et.forEach(t),s5o=r(swe," \u2014 "),$q=n(swe,"A",{href:!0});var uet=s($q);l5o=r(uet,"ProphetNetForConditionalGeneration"),uet.forEach(t),i5o=r(swe," (ProphetNet model)"),swe.forEach(t),d5o=i(le),lb=n(le,"LI",{});var lwe=s(lb);ale=n(lwe,"STRONG",{});var bet=s(ale);c5o=r(bet,"t5"),bet.forEach(t),f5o=r(lwe," \u2014 "),Iq=n(lwe,"A",{href:!0});var vet=s(Iq);m5o=r(vet,"T5ForConditionalGeneration"),vet.forEach(t),g5o=r(lwe," (T5 model)"),lwe.forEach(t),h5o=i(le),ib=n(le,"LI",{});var iwe=s(ib);nle=n(iwe,"STRONG",{});var Fet=s(nle);p5o=r(Fet,"tapex"),Fet.forEach(t),_5o=r(iwe," \u2014 "),qq=n(iwe,"A",{href:!0});var Tet=s(qq);u5o=r(Tet,"BartForConditionalGeneration"),Tet.forEach(t),b5o=r(iwe," (TAPEX model)"),iwe.forEach(t),v5o=i(le),db=n(le,"LI",{});var dwe=s(db);sle=n(dwe,"STRONG",{});var Met=s(sle);F5o=r(Met,"xlm-prophetnet"),Met.forEach(t),T5o=r(dwe," \u2014 "),Nq=n(dwe,"A",{href:!0});var Eet=s(Nq);M5o=r(Eet,"XLMProphetNetForConditionalGeneration"),Eet.forEach(t),E5o=r(dwe," (XLMProphetNet model)"),dwe.forEach(t),le.forEach(t),C5o=i(Xt),cb=n(Xt,"P",{});var cwe=s(cb);w5o=r(cwe,"The model is set in evaluation mode by default using "),lle=n(cwe,"CODE",{});var Cet=s(lle);A5o=r(Cet,"model.eval()"),Cet.forEach(t),y5o=r(cwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ile=n(cwe,"CODE",{});var wet=s(ile);L5o=r(wet,"model.train()"),wet.forEach(t),cwe.forEach(t),x5o=i(Xt),dle=n(Xt,"P",{});var Aet=s(dle);k5o=r(Aet,"Examples:"),Aet.forEach(t),S5o=i(Xt),m(X3.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),cBe=i(c),hd=n(c,"H2",{class:!0});var v$e=s(hd);fb=n(v$e,"A",{id:!0,class:!0,href:!0});var yet=s(fb);cle=n(yet,"SPAN",{});var Let=s(cle);m(z3.$$.fragment,Let),Let.forEach(t),yet.forEach(t),R5o=i(v$e),fle=n(v$e,"SPAN",{});var xet=s(fle);B5o=r(xet,"AutoModelForSequenceClassification"),xet.forEach(t),v$e.forEach(t),fBe=i(c),or=n(c,"DIV",{class:!0});var nl=s(or);m(Q3.$$.fragment,nl),P5o=i(nl),pd=n(nl,"P",{});var NU=s(pd);$5o=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jq=n(NU,"A",{href:!0});var ket=s(jq);I5o=r(ket,"from_pretrained()"),ket.forEach(t),q5o=r(NU," class method or the "),Dq=n(NU,"A",{href:!0});var Set=s(Dq);N5o=r(Set,"from_config()"),Set.forEach(t),j5o=r(NU,` class
method.`),NU.forEach(t),D5o=i(nl),W3=n(nl,"P",{});var F$e=s(W3);G5o=r(F$e,"This class cannot be instantiated directly using "),mle=n(F$e,"CODE",{});var Ret=s(mle);O5o=r(Ret,"__init__()"),Ret.forEach(t),V5o=r(F$e," (throws an error)."),F$e.forEach(t),X5o=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);m(H3.$$.fragment,sl),z5o=i(sl),gle=n(sl,"P",{});var Bet=s(gle);Q5o=r(Bet,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bet.forEach(t),W5o=i(sl),_d=n(sl,"P",{});var jU=s(_d);H5o=r(jU,`Note:
Loading a model from its configuration file does `),hle=n(jU,"STRONG",{});var Pet=s(hle);U5o=r(Pet,"not"),Pet.forEach(t),J5o=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=n(jU,"A",{href:!0});var $et=s(Gq);Y5o=r($et,"from_pretrained()"),$et.forEach(t),K5o=r(jU," to load the model weights."),jU.forEach(t),Z5o=i(sl),ple=n(sl,"P",{});var Iet=s(ple);e3o=r(Iet,"Examples:"),Iet.forEach(t),o3o=i(sl),m(U3.$$.fragment,sl),sl.forEach(t),r3o=i(nl),Oe=n(nl,"DIV",{class:!0});var zt=s(Oe);m(J3.$$.fragment,zt),t3o=i(zt),_le=n(zt,"P",{});var qet=s(_le);a3o=r(qet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qet.forEach(t),n3o=i(zt),Ua=n(zt,"P",{});var NE=s(Ua);s3o=r(NE,"The model class to instantiate is selected based on the "),ule=n(NE,"CODE",{});var Net=s(ule);l3o=r(Net,"model_type"),Net.forEach(t),i3o=r(NE,` property of the config object (either
passed as an argument or loaded from `),ble=n(NE,"CODE",{});var jet=s(ble);d3o=r(jet,"pretrained_model_name_or_path"),jet.forEach(t),c3o=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vle=n(NE,"CODE",{});var Det=s(vle);f3o=r(Det,"pretrained_model_name_or_path"),Det.forEach(t),m3o=r(NE,":"),NE.forEach(t),g3o=i(zt),y=n(zt,"UL",{});var L=s(y);mb=n(L,"LI",{});var fwe=s(mb);Fle=n(fwe,"STRONG",{});var Get=s(Fle);h3o=r(Get,"albert"),Get.forEach(t),p3o=r(fwe," \u2014 "),Oq=n(fwe,"A",{href:!0});var Oet=s(Oq);_3o=r(Oet,"AlbertForSequenceClassification"),Oet.forEach(t),u3o=r(fwe," (ALBERT model)"),fwe.forEach(t),b3o=i(L),gb=n(L,"LI",{});var mwe=s(gb);Tle=n(mwe,"STRONG",{});var Vet=s(Tle);v3o=r(Vet,"bart"),Vet.forEach(t),F3o=r(mwe," \u2014 "),Vq=n(mwe,"A",{href:!0});var Xet=s(Vq);T3o=r(Xet,"BartForSequenceClassification"),Xet.forEach(t),M3o=r(mwe," (BART model)"),mwe.forEach(t),E3o=i(L),hb=n(L,"LI",{});var gwe=s(hb);Mle=n(gwe,"STRONG",{});var zet=s(Mle);C3o=r(zet,"bert"),zet.forEach(t),w3o=r(gwe," \u2014 "),Xq=n(gwe,"A",{href:!0});var Qet=s(Xq);A3o=r(Qet,"BertForSequenceClassification"),Qet.forEach(t),y3o=r(gwe," (BERT model)"),gwe.forEach(t),L3o=i(L),pb=n(L,"LI",{});var hwe=s(pb);Ele=n(hwe,"STRONG",{});var Wet=s(Ele);x3o=r(Wet,"big_bird"),Wet.forEach(t),k3o=r(hwe," \u2014 "),zq=n(hwe,"A",{href:!0});var Het=s(zq);S3o=r(Het,"BigBirdForSequenceClassification"),Het.forEach(t),R3o=r(hwe," (BigBird model)"),hwe.forEach(t),B3o=i(L),_b=n(L,"LI",{});var pwe=s(_b);Cle=n(pwe,"STRONG",{});var Uet=s(Cle);P3o=r(Uet,"bigbird_pegasus"),Uet.forEach(t),$3o=r(pwe," \u2014 "),Qq=n(pwe,"A",{href:!0});var Jet=s(Qq);I3o=r(Jet,"BigBirdPegasusForSequenceClassification"),Jet.forEach(t),q3o=r(pwe," (BigBirdPegasus model)"),pwe.forEach(t),N3o=i(L),ub=n(L,"LI",{});var _we=s(ub);wle=n(_we,"STRONG",{});var Yet=s(wle);j3o=r(Yet,"camembert"),Yet.forEach(t),D3o=r(_we," \u2014 "),Wq=n(_we,"A",{href:!0});var Ket=s(Wq);G3o=r(Ket,"CamembertForSequenceClassification"),Ket.forEach(t),O3o=r(_we," (CamemBERT model)"),_we.forEach(t),V3o=i(L),bb=n(L,"LI",{});var uwe=s(bb);Ale=n(uwe,"STRONG",{});var Zet=s(Ale);X3o=r(Zet,"canine"),Zet.forEach(t),z3o=r(uwe," \u2014 "),Hq=n(uwe,"A",{href:!0});var eot=s(Hq);Q3o=r(eot,"CanineForSequenceClassification"),eot.forEach(t),W3o=r(uwe," (Canine model)"),uwe.forEach(t),H3o=i(L),vb=n(L,"LI",{});var bwe=s(vb);yle=n(bwe,"STRONG",{});var oot=s(yle);U3o=r(oot,"convbert"),oot.forEach(t),J3o=r(bwe," \u2014 "),Uq=n(bwe,"A",{href:!0});var rot=s(Uq);Y3o=r(rot,"ConvBertForSequenceClassification"),rot.forEach(t),K3o=r(bwe," (ConvBERT model)"),bwe.forEach(t),Z3o=i(L),Fb=n(L,"LI",{});var vwe=s(Fb);Lle=n(vwe,"STRONG",{});var tot=s(Lle);eCo=r(tot,"ctrl"),tot.forEach(t),oCo=r(vwe," \u2014 "),Jq=n(vwe,"A",{href:!0});var aot=s(Jq);rCo=r(aot,"CTRLForSequenceClassification"),aot.forEach(t),tCo=r(vwe," (CTRL model)"),vwe.forEach(t),aCo=i(L),Tb=n(L,"LI",{});var Fwe=s(Tb);xle=n(Fwe,"STRONG",{});var not=s(xle);nCo=r(not,"data2vec-text"),not.forEach(t),sCo=r(Fwe," \u2014 "),Yq=n(Fwe,"A",{href:!0});var sot=s(Yq);lCo=r(sot,"Data2VecTextForSequenceClassification"),sot.forEach(t),iCo=r(Fwe," (Data2VecText model)"),Fwe.forEach(t),dCo=i(L),Mb=n(L,"LI",{});var Twe=s(Mb);kle=n(Twe,"STRONG",{});var lot=s(kle);cCo=r(lot,"deberta"),lot.forEach(t),fCo=r(Twe," \u2014 "),Kq=n(Twe,"A",{href:!0});var iot=s(Kq);mCo=r(iot,"DebertaForSequenceClassification"),iot.forEach(t),gCo=r(Twe," (DeBERTa model)"),Twe.forEach(t),hCo=i(L),Eb=n(L,"LI",{});var Mwe=s(Eb);Sle=n(Mwe,"STRONG",{});var dot=s(Sle);pCo=r(dot,"deberta-v2"),dot.forEach(t),_Co=r(Mwe," \u2014 "),Zq=n(Mwe,"A",{href:!0});var cot=s(Zq);uCo=r(cot,"DebertaV2ForSequenceClassification"),cot.forEach(t),bCo=r(Mwe," (DeBERTa-v2 model)"),Mwe.forEach(t),vCo=i(L),Cb=n(L,"LI",{});var Ewe=s(Cb);Rle=n(Ewe,"STRONG",{});var fot=s(Rle);FCo=r(fot,"distilbert"),fot.forEach(t),TCo=r(Ewe," \u2014 "),eN=n(Ewe,"A",{href:!0});var mot=s(eN);MCo=r(mot,"DistilBertForSequenceClassification"),mot.forEach(t),ECo=r(Ewe," (DistilBERT model)"),Ewe.forEach(t),CCo=i(L),wb=n(L,"LI",{});var Cwe=s(wb);Ble=n(Cwe,"STRONG",{});var got=s(Ble);wCo=r(got,"electra"),got.forEach(t),ACo=r(Cwe," \u2014 "),oN=n(Cwe,"A",{href:!0});var hot=s(oN);yCo=r(hot,"ElectraForSequenceClassification"),hot.forEach(t),LCo=r(Cwe," (ELECTRA model)"),Cwe.forEach(t),xCo=i(L),Ab=n(L,"LI",{});var wwe=s(Ab);Ple=n(wwe,"STRONG",{});var pot=s(Ple);kCo=r(pot,"flaubert"),pot.forEach(t),SCo=r(wwe," \u2014 "),rN=n(wwe,"A",{href:!0});var _ot=s(rN);RCo=r(_ot,"FlaubertForSequenceClassification"),_ot.forEach(t),BCo=r(wwe," (FlauBERT model)"),wwe.forEach(t),PCo=i(L),yb=n(L,"LI",{});var Awe=s(yb);$le=n(Awe,"STRONG",{});var uot=s($le);$Co=r(uot,"fnet"),uot.forEach(t),ICo=r(Awe," \u2014 "),tN=n(Awe,"A",{href:!0});var bot=s(tN);qCo=r(bot,"FNetForSequenceClassification"),bot.forEach(t),NCo=r(Awe," (FNet model)"),Awe.forEach(t),jCo=i(L),Lb=n(L,"LI",{});var ywe=s(Lb);Ile=n(ywe,"STRONG",{});var vot=s(Ile);DCo=r(vot,"funnel"),vot.forEach(t),GCo=r(ywe," \u2014 "),aN=n(ywe,"A",{href:!0});var Fot=s(aN);OCo=r(Fot,"FunnelForSequenceClassification"),Fot.forEach(t),VCo=r(ywe," (Funnel Transformer model)"),ywe.forEach(t),XCo=i(L),xb=n(L,"LI",{});var Lwe=s(xb);qle=n(Lwe,"STRONG",{});var Tot=s(qle);zCo=r(Tot,"gpt2"),Tot.forEach(t),QCo=r(Lwe," \u2014 "),nN=n(Lwe,"A",{href:!0});var Mot=s(nN);WCo=r(Mot,"GPT2ForSequenceClassification"),Mot.forEach(t),HCo=r(Lwe," (OpenAI GPT-2 model)"),Lwe.forEach(t),UCo=i(L),kb=n(L,"LI",{});var xwe=s(kb);Nle=n(xwe,"STRONG",{});var Eot=s(Nle);JCo=r(Eot,"gpt_neo"),Eot.forEach(t),YCo=r(xwe," \u2014 "),sN=n(xwe,"A",{href:!0});var Cot=s(sN);KCo=r(Cot,"GPTNeoForSequenceClassification"),Cot.forEach(t),ZCo=r(xwe," (GPT Neo model)"),xwe.forEach(t),ewo=i(L),Sb=n(L,"LI",{});var kwe=s(Sb);jle=n(kwe,"STRONG",{});var wot=s(jle);owo=r(wot,"gptj"),wot.forEach(t),rwo=r(kwe," \u2014 "),lN=n(kwe,"A",{href:!0});var Aot=s(lN);two=r(Aot,"GPTJForSequenceClassification"),Aot.forEach(t),awo=r(kwe," (GPT-J model)"),kwe.forEach(t),nwo=i(L),Rb=n(L,"LI",{});var Swe=s(Rb);Dle=n(Swe,"STRONG",{});var yot=s(Dle);swo=r(yot,"ibert"),yot.forEach(t),lwo=r(Swe," \u2014 "),iN=n(Swe,"A",{href:!0});var Lot=s(iN);iwo=r(Lot,"IBertForSequenceClassification"),Lot.forEach(t),dwo=r(Swe," (I-BERT model)"),Swe.forEach(t),cwo=i(L),Bb=n(L,"LI",{});var Rwe=s(Bb);Gle=n(Rwe,"STRONG",{});var xot=s(Gle);fwo=r(xot,"layoutlm"),xot.forEach(t),mwo=r(Rwe," \u2014 "),dN=n(Rwe,"A",{href:!0});var kot=s(dN);gwo=r(kot,"LayoutLMForSequenceClassification"),kot.forEach(t),hwo=r(Rwe," (LayoutLM model)"),Rwe.forEach(t),pwo=i(L),Pb=n(L,"LI",{});var Bwe=s(Pb);Ole=n(Bwe,"STRONG",{});var Sot=s(Ole);_wo=r(Sot,"layoutlmv2"),Sot.forEach(t),uwo=r(Bwe," \u2014 "),cN=n(Bwe,"A",{href:!0});var Rot=s(cN);bwo=r(Rot,"LayoutLMv2ForSequenceClassification"),Rot.forEach(t),vwo=r(Bwe," (LayoutLMv2 model)"),Bwe.forEach(t),Fwo=i(L),$b=n(L,"LI",{});var Pwe=s($b);Vle=n(Pwe,"STRONG",{});var Bot=s(Vle);Two=r(Bot,"led"),Bot.forEach(t),Mwo=r(Pwe," \u2014 "),fN=n(Pwe,"A",{href:!0});var Pot=s(fN);Ewo=r(Pot,"LEDForSequenceClassification"),Pot.forEach(t),Cwo=r(Pwe," (LED model)"),Pwe.forEach(t),wwo=i(L),Ib=n(L,"LI",{});var $we=s(Ib);Xle=n($we,"STRONG",{});var $ot=s(Xle);Awo=r($ot,"longformer"),$ot.forEach(t),ywo=r($we," \u2014 "),mN=n($we,"A",{href:!0});var Iot=s(mN);Lwo=r(Iot,"LongformerForSequenceClassification"),Iot.forEach(t),xwo=r($we," (Longformer model)"),$we.forEach(t),kwo=i(L),qb=n(L,"LI",{});var Iwe=s(qb);zle=n(Iwe,"STRONG",{});var qot=s(zle);Swo=r(qot,"mbart"),qot.forEach(t),Rwo=r(Iwe," \u2014 "),gN=n(Iwe,"A",{href:!0});var Not=s(gN);Bwo=r(Not,"MBartForSequenceClassification"),Not.forEach(t),Pwo=r(Iwe," (mBART model)"),Iwe.forEach(t),$wo=i(L),Nb=n(L,"LI",{});var qwe=s(Nb);Qle=n(qwe,"STRONG",{});var jot=s(Qle);Iwo=r(jot,"megatron-bert"),jot.forEach(t),qwo=r(qwe," \u2014 "),hN=n(qwe,"A",{href:!0});var Dot=s(hN);Nwo=r(Dot,"MegatronBertForSequenceClassification"),Dot.forEach(t),jwo=r(qwe," (MegatronBert model)"),qwe.forEach(t),Dwo=i(L),jb=n(L,"LI",{});var Nwe=s(jb);Wle=n(Nwe,"STRONG",{});var Got=s(Wle);Gwo=r(Got,"mobilebert"),Got.forEach(t),Owo=r(Nwe," \u2014 "),pN=n(Nwe,"A",{href:!0});var Oot=s(pN);Vwo=r(Oot,"MobileBertForSequenceClassification"),Oot.forEach(t),Xwo=r(Nwe," (MobileBERT model)"),Nwe.forEach(t),zwo=i(L),Db=n(L,"LI",{});var jwe=s(Db);Hle=n(jwe,"STRONG",{});var Vot=s(Hle);Qwo=r(Vot,"mpnet"),Vot.forEach(t),Wwo=r(jwe," \u2014 "),_N=n(jwe,"A",{href:!0});var Xot=s(_N);Hwo=r(Xot,"MPNetForSequenceClassification"),Xot.forEach(t),Uwo=r(jwe," (MPNet model)"),jwe.forEach(t),Jwo=i(L),Gb=n(L,"LI",{});var Dwe=s(Gb);Ule=n(Dwe,"STRONG",{});var zot=s(Ule);Ywo=r(zot,"nystromformer"),zot.forEach(t),Kwo=r(Dwe," \u2014 "),uN=n(Dwe,"A",{href:!0});var Qot=s(uN);Zwo=r(Qot,"NystromformerForSequenceClassification"),Qot.forEach(t),eAo=r(Dwe," (Nystromformer model)"),Dwe.forEach(t),oAo=i(L),Ob=n(L,"LI",{});var Gwe=s(Ob);Jle=n(Gwe,"STRONG",{});var Wot=s(Jle);rAo=r(Wot,"openai-gpt"),Wot.forEach(t),tAo=r(Gwe," \u2014 "),bN=n(Gwe,"A",{href:!0});var Hot=s(bN);aAo=r(Hot,"OpenAIGPTForSequenceClassification"),Hot.forEach(t),nAo=r(Gwe," (OpenAI GPT model)"),Gwe.forEach(t),sAo=i(L),Vb=n(L,"LI",{});var Owe=s(Vb);Yle=n(Owe,"STRONG",{});var Uot=s(Yle);lAo=r(Uot,"perceiver"),Uot.forEach(t),iAo=r(Owe," \u2014 "),vN=n(Owe,"A",{href:!0});var Jot=s(vN);dAo=r(Jot,"PerceiverForSequenceClassification"),Jot.forEach(t),cAo=r(Owe," (Perceiver model)"),Owe.forEach(t),fAo=i(L),Xb=n(L,"LI",{});var Vwe=s(Xb);Kle=n(Vwe,"STRONG",{});var Yot=s(Kle);mAo=r(Yot,"plbart"),Yot.forEach(t),gAo=r(Vwe," \u2014 "),FN=n(Vwe,"A",{href:!0});var Kot=s(FN);hAo=r(Kot,"PLBartForSequenceClassification"),Kot.forEach(t),pAo=r(Vwe," (PLBart model)"),Vwe.forEach(t),_Ao=i(L),zb=n(L,"LI",{});var Xwe=s(zb);Zle=n(Xwe,"STRONG",{});var Zot=s(Zle);uAo=r(Zot,"qdqbert"),Zot.forEach(t),bAo=r(Xwe," \u2014 "),TN=n(Xwe,"A",{href:!0});var ert=s(TN);vAo=r(ert,"QDQBertForSequenceClassification"),ert.forEach(t),FAo=r(Xwe," (QDQBert model)"),Xwe.forEach(t),TAo=i(L),Qb=n(L,"LI",{});var zwe=s(Qb);eie=n(zwe,"STRONG",{});var ort=s(eie);MAo=r(ort,"reformer"),ort.forEach(t),EAo=r(zwe," \u2014 "),MN=n(zwe,"A",{href:!0});var rrt=s(MN);CAo=r(rrt,"ReformerForSequenceClassification"),rrt.forEach(t),wAo=r(zwe," (Reformer model)"),zwe.forEach(t),AAo=i(L),Wb=n(L,"LI",{});var Qwe=s(Wb);oie=n(Qwe,"STRONG",{});var trt=s(oie);yAo=r(trt,"rembert"),trt.forEach(t),LAo=r(Qwe," \u2014 "),EN=n(Qwe,"A",{href:!0});var art=s(EN);xAo=r(art,"RemBertForSequenceClassification"),art.forEach(t),kAo=r(Qwe," (RemBERT model)"),Qwe.forEach(t),SAo=i(L),Hb=n(L,"LI",{});var Wwe=s(Hb);rie=n(Wwe,"STRONG",{});var nrt=s(rie);RAo=r(nrt,"roberta"),nrt.forEach(t),BAo=r(Wwe," \u2014 "),CN=n(Wwe,"A",{href:!0});var srt=s(CN);PAo=r(srt,"RobertaForSequenceClassification"),srt.forEach(t),$Ao=r(Wwe," (RoBERTa model)"),Wwe.forEach(t),IAo=i(L),Ub=n(L,"LI",{});var Hwe=s(Ub);tie=n(Hwe,"STRONG",{});var lrt=s(tie);qAo=r(lrt,"roformer"),lrt.forEach(t),NAo=r(Hwe," \u2014 "),wN=n(Hwe,"A",{href:!0});var irt=s(wN);jAo=r(irt,"RoFormerForSequenceClassification"),irt.forEach(t),DAo=r(Hwe," (RoFormer model)"),Hwe.forEach(t),GAo=i(L),Jb=n(L,"LI",{});var Uwe=s(Jb);aie=n(Uwe,"STRONG",{});var drt=s(aie);OAo=r(drt,"squeezebert"),drt.forEach(t),VAo=r(Uwe," \u2014 "),AN=n(Uwe,"A",{href:!0});var crt=s(AN);XAo=r(crt,"SqueezeBertForSequenceClassification"),crt.forEach(t),zAo=r(Uwe," (SqueezeBERT model)"),Uwe.forEach(t),QAo=i(L),Yb=n(L,"LI",{});var Jwe=s(Yb);nie=n(Jwe,"STRONG",{});var frt=s(nie);WAo=r(frt,"tapas"),frt.forEach(t),HAo=r(Jwe," \u2014 "),yN=n(Jwe,"A",{href:!0});var mrt=s(yN);UAo=r(mrt,"TapasForSequenceClassification"),mrt.forEach(t),JAo=r(Jwe," (TAPAS model)"),Jwe.forEach(t),YAo=i(L),Kb=n(L,"LI",{});var Ywe=s(Kb);sie=n(Ywe,"STRONG",{});var grt=s(sie);KAo=r(grt,"tapex"),grt.forEach(t),ZAo=r(Ywe," \u2014 "),LN=n(Ywe,"A",{href:!0});var hrt=s(LN);e0o=r(hrt,"BartForSequenceClassification"),hrt.forEach(t),o0o=r(Ywe," (TAPEX model)"),Ywe.forEach(t),r0o=i(L),Zb=n(L,"LI",{});var Kwe=s(Zb);lie=n(Kwe,"STRONG",{});var prt=s(lie);t0o=r(prt,"transfo-xl"),prt.forEach(t),a0o=r(Kwe," \u2014 "),xN=n(Kwe,"A",{href:!0});var _rt=s(xN);n0o=r(_rt,"TransfoXLForSequenceClassification"),_rt.forEach(t),s0o=r(Kwe," (Transformer-XL model)"),Kwe.forEach(t),l0o=i(L),e2=n(L,"LI",{});var Zwe=s(e2);iie=n(Zwe,"STRONG",{});var urt=s(iie);i0o=r(urt,"xlm"),urt.forEach(t),d0o=r(Zwe," \u2014 "),kN=n(Zwe,"A",{href:!0});var brt=s(kN);c0o=r(brt,"XLMForSequenceClassification"),brt.forEach(t),f0o=r(Zwe," (XLM model)"),Zwe.forEach(t),m0o=i(L),o2=n(L,"LI",{});var eAe=s(o2);die=n(eAe,"STRONG",{});var vrt=s(die);g0o=r(vrt,"xlm-roberta"),vrt.forEach(t),h0o=r(eAe," \u2014 "),SN=n(eAe,"A",{href:!0});var Frt=s(SN);p0o=r(Frt,"XLMRobertaForSequenceClassification"),Frt.forEach(t),_0o=r(eAe," (XLM-RoBERTa model)"),eAe.forEach(t),u0o=i(L),r2=n(L,"LI",{});var oAe=s(r2);cie=n(oAe,"STRONG",{});var Trt=s(cie);b0o=r(Trt,"xlm-roberta-xl"),Trt.forEach(t),v0o=r(oAe," \u2014 "),RN=n(oAe,"A",{href:!0});var Mrt=s(RN);F0o=r(Mrt,"XLMRobertaXLForSequenceClassification"),Mrt.forEach(t),T0o=r(oAe," (XLM-RoBERTa-XL model)"),oAe.forEach(t),M0o=i(L),t2=n(L,"LI",{});var rAe=s(t2);fie=n(rAe,"STRONG",{});var Ert=s(fie);E0o=r(Ert,"xlnet"),Ert.forEach(t),C0o=r(rAe," \u2014 "),BN=n(rAe,"A",{href:!0});var Crt=s(BN);w0o=r(Crt,"XLNetForSequenceClassification"),Crt.forEach(t),A0o=r(rAe," (XLNet model)"),rAe.forEach(t),y0o=i(L),a2=n(L,"LI",{});var tAe=s(a2);mie=n(tAe,"STRONG",{});var wrt=s(mie);L0o=r(wrt,"yoso"),wrt.forEach(t),x0o=r(tAe," \u2014 "),PN=n(tAe,"A",{href:!0});var Art=s(PN);k0o=r(Art,"YosoForSequenceClassification"),Art.forEach(t),S0o=r(tAe," (YOSO model)"),tAe.forEach(t),L.forEach(t),R0o=i(zt),n2=n(zt,"P",{});var aAe=s(n2);B0o=r(aAe,"The model is set in evaluation mode by default using "),gie=n(aAe,"CODE",{});var yrt=s(gie);P0o=r(yrt,"model.eval()"),yrt.forEach(t),$0o=r(aAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(aAe,"CODE",{});var Lrt=s(hie);I0o=r(Lrt,"model.train()"),Lrt.forEach(t),aAe.forEach(t),q0o=i(zt),pie=n(zt,"P",{});var xrt=s(pie);N0o=r(xrt,"Examples:"),xrt.forEach(t),j0o=i(zt),m(Y3.$$.fragment,zt),zt.forEach(t),nl.forEach(t),mBe=i(c),ud=n(c,"H2",{class:!0});var T$e=s(ud);s2=n(T$e,"A",{id:!0,class:!0,href:!0});var krt=s(s2);_ie=n(krt,"SPAN",{});var Srt=s(_ie);m(K3.$$.fragment,Srt),Srt.forEach(t),krt.forEach(t),D0o=i(T$e),uie=n(T$e,"SPAN",{});var Rrt=s(uie);G0o=r(Rrt,"AutoModelForMultipleChoice"),Rrt.forEach(t),T$e.forEach(t),gBe=i(c),rr=n(c,"DIV",{class:!0});var ll=s(rr);m(Z3.$$.fragment,ll),O0o=i(ll),bd=n(ll,"P",{});var DU=s(bd);V0o=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$N=n(DU,"A",{href:!0});var Brt=s($N);X0o=r(Brt,"from_pretrained()"),Brt.forEach(t),z0o=r(DU," class method or the "),IN=n(DU,"A",{href:!0});var Prt=s(IN);Q0o=r(Prt,"from_config()"),Prt.forEach(t),W0o=r(DU,` class
method.`),DU.forEach(t),H0o=i(ll),eC=n(ll,"P",{});var M$e=s(eC);U0o=r(M$e,"This class cannot be instantiated directly using "),bie=n(M$e,"CODE",{});var $rt=s(bie);J0o=r($rt,"__init__()"),$rt.forEach(t),Y0o=r(M$e," (throws an error)."),M$e.forEach(t),K0o=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);m(oC.$$.fragment,il),Z0o=i(il),vie=n(il,"P",{});var Irt=s(vie);eyo=r(Irt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Irt.forEach(t),oyo=i(il),vd=n(il,"P",{});var GU=s(vd);ryo=r(GU,`Note:
Loading a model from its configuration file does `),Fie=n(GU,"STRONG",{});var qrt=s(Fie);tyo=r(qrt,"not"),qrt.forEach(t),ayo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qN=n(GU,"A",{href:!0});var Nrt=s(qN);nyo=r(Nrt,"from_pretrained()"),Nrt.forEach(t),syo=r(GU," to load the model weights."),GU.forEach(t),lyo=i(il),Tie=n(il,"P",{});var jrt=s(Tie);iyo=r(jrt,"Examples:"),jrt.forEach(t),dyo=i(il),m(rC.$$.fragment,il),il.forEach(t),cyo=i(ll),Ve=n(ll,"DIV",{class:!0});var Qt=s(Ve);m(tC.$$.fragment,Qt),fyo=i(Qt),Mie=n(Qt,"P",{});var Drt=s(Mie);myo=r(Drt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Drt.forEach(t),gyo=i(Qt),Ja=n(Qt,"P",{});var jE=s(Ja);hyo=r(jE,"The model class to instantiate is selected based on the "),Eie=n(jE,"CODE",{});var Grt=s(Eie);pyo=r(Grt,"model_type"),Grt.forEach(t),_yo=r(jE,` property of the config object (either
passed as an argument or loaded from `),Cie=n(jE,"CODE",{});var Ort=s(Cie);uyo=r(Ort,"pretrained_model_name_or_path"),Ort.forEach(t),byo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=n(jE,"CODE",{});var Vrt=s(wie);vyo=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),Fyo=r(jE,":"),jE.forEach(t),Tyo=i(Qt),G=n(Qt,"UL",{});var O=s(G);l2=n(O,"LI",{});var nAe=s(l2);Aie=n(nAe,"STRONG",{});var Xrt=s(Aie);Myo=r(Xrt,"albert"),Xrt.forEach(t),Eyo=r(nAe," \u2014 "),NN=n(nAe,"A",{href:!0});var zrt=s(NN);Cyo=r(zrt,"AlbertForMultipleChoice"),zrt.forEach(t),wyo=r(nAe," (ALBERT model)"),nAe.forEach(t),Ayo=i(O),i2=n(O,"LI",{});var sAe=s(i2);yie=n(sAe,"STRONG",{});var Qrt=s(yie);yyo=r(Qrt,"bert"),Qrt.forEach(t),Lyo=r(sAe," \u2014 "),jN=n(sAe,"A",{href:!0});var Wrt=s(jN);xyo=r(Wrt,"BertForMultipleChoice"),Wrt.forEach(t),kyo=r(sAe," (BERT model)"),sAe.forEach(t),Syo=i(O),d2=n(O,"LI",{});var lAe=s(d2);Lie=n(lAe,"STRONG",{});var Hrt=s(Lie);Ryo=r(Hrt,"big_bird"),Hrt.forEach(t),Byo=r(lAe," \u2014 "),DN=n(lAe,"A",{href:!0});var Urt=s(DN);Pyo=r(Urt,"BigBirdForMultipleChoice"),Urt.forEach(t),$yo=r(lAe," (BigBird model)"),lAe.forEach(t),Iyo=i(O),c2=n(O,"LI",{});var iAe=s(c2);xie=n(iAe,"STRONG",{});var Jrt=s(xie);qyo=r(Jrt,"camembert"),Jrt.forEach(t),Nyo=r(iAe," \u2014 "),GN=n(iAe,"A",{href:!0});var Yrt=s(GN);jyo=r(Yrt,"CamembertForMultipleChoice"),Yrt.forEach(t),Dyo=r(iAe," (CamemBERT model)"),iAe.forEach(t),Gyo=i(O),f2=n(O,"LI",{});var dAe=s(f2);kie=n(dAe,"STRONG",{});var Krt=s(kie);Oyo=r(Krt,"canine"),Krt.forEach(t),Vyo=r(dAe," \u2014 "),ON=n(dAe,"A",{href:!0});var Zrt=s(ON);Xyo=r(Zrt,"CanineForMultipleChoice"),Zrt.forEach(t),zyo=r(dAe," (Canine model)"),dAe.forEach(t),Qyo=i(O),m2=n(O,"LI",{});var cAe=s(m2);Sie=n(cAe,"STRONG",{});var ett=s(Sie);Wyo=r(ett,"convbert"),ett.forEach(t),Hyo=r(cAe," \u2014 "),VN=n(cAe,"A",{href:!0});var ott=s(VN);Uyo=r(ott,"ConvBertForMultipleChoice"),ott.forEach(t),Jyo=r(cAe," (ConvBERT model)"),cAe.forEach(t),Yyo=i(O),g2=n(O,"LI",{});var fAe=s(g2);Rie=n(fAe,"STRONG",{});var rtt=s(Rie);Kyo=r(rtt,"data2vec-text"),rtt.forEach(t),Zyo=r(fAe," \u2014 "),XN=n(fAe,"A",{href:!0});var ttt=s(XN);eLo=r(ttt,"Data2VecTextForMultipleChoice"),ttt.forEach(t),oLo=r(fAe," (Data2VecText model)"),fAe.forEach(t),rLo=i(O),h2=n(O,"LI",{});var mAe=s(h2);Bie=n(mAe,"STRONG",{});var att=s(Bie);tLo=r(att,"distilbert"),att.forEach(t),aLo=r(mAe," \u2014 "),zN=n(mAe,"A",{href:!0});var ntt=s(zN);nLo=r(ntt,"DistilBertForMultipleChoice"),ntt.forEach(t),sLo=r(mAe," (DistilBERT model)"),mAe.forEach(t),lLo=i(O),p2=n(O,"LI",{});var gAe=s(p2);Pie=n(gAe,"STRONG",{});var stt=s(Pie);iLo=r(stt,"electra"),stt.forEach(t),dLo=r(gAe," \u2014 "),QN=n(gAe,"A",{href:!0});var ltt=s(QN);cLo=r(ltt,"ElectraForMultipleChoice"),ltt.forEach(t),fLo=r(gAe," (ELECTRA model)"),gAe.forEach(t),mLo=i(O),_2=n(O,"LI",{});var hAe=s(_2);$ie=n(hAe,"STRONG",{});var itt=s($ie);gLo=r(itt,"flaubert"),itt.forEach(t),hLo=r(hAe," \u2014 "),WN=n(hAe,"A",{href:!0});var dtt=s(WN);pLo=r(dtt,"FlaubertForMultipleChoice"),dtt.forEach(t),_Lo=r(hAe," (FlauBERT model)"),hAe.forEach(t),uLo=i(O),u2=n(O,"LI",{});var pAe=s(u2);Iie=n(pAe,"STRONG",{});var ctt=s(Iie);bLo=r(ctt,"fnet"),ctt.forEach(t),vLo=r(pAe," \u2014 "),HN=n(pAe,"A",{href:!0});var ftt=s(HN);FLo=r(ftt,"FNetForMultipleChoice"),ftt.forEach(t),TLo=r(pAe," (FNet model)"),pAe.forEach(t),MLo=i(O),b2=n(O,"LI",{});var _Ae=s(b2);qie=n(_Ae,"STRONG",{});var mtt=s(qie);ELo=r(mtt,"funnel"),mtt.forEach(t),CLo=r(_Ae," \u2014 "),UN=n(_Ae,"A",{href:!0});var gtt=s(UN);wLo=r(gtt,"FunnelForMultipleChoice"),gtt.forEach(t),ALo=r(_Ae," (Funnel Transformer model)"),_Ae.forEach(t),yLo=i(O),v2=n(O,"LI",{});var uAe=s(v2);Nie=n(uAe,"STRONG",{});var htt=s(Nie);LLo=r(htt,"ibert"),htt.forEach(t),xLo=r(uAe," \u2014 "),JN=n(uAe,"A",{href:!0});var ptt=s(JN);kLo=r(ptt,"IBertForMultipleChoice"),ptt.forEach(t),SLo=r(uAe," (I-BERT model)"),uAe.forEach(t),RLo=i(O),F2=n(O,"LI",{});var bAe=s(F2);jie=n(bAe,"STRONG",{});var _tt=s(jie);BLo=r(_tt,"longformer"),_tt.forEach(t),PLo=r(bAe," \u2014 "),YN=n(bAe,"A",{href:!0});var utt=s(YN);$Lo=r(utt,"LongformerForMultipleChoice"),utt.forEach(t),ILo=r(bAe," (Longformer model)"),bAe.forEach(t),qLo=i(O),T2=n(O,"LI",{});var vAe=s(T2);Die=n(vAe,"STRONG",{});var btt=s(Die);NLo=r(btt,"megatron-bert"),btt.forEach(t),jLo=r(vAe," \u2014 "),KN=n(vAe,"A",{href:!0});var vtt=s(KN);DLo=r(vtt,"MegatronBertForMultipleChoice"),vtt.forEach(t),GLo=r(vAe," (MegatronBert model)"),vAe.forEach(t),OLo=i(O),M2=n(O,"LI",{});var FAe=s(M2);Gie=n(FAe,"STRONG",{});var Ftt=s(Gie);VLo=r(Ftt,"mobilebert"),Ftt.forEach(t),XLo=r(FAe," \u2014 "),ZN=n(FAe,"A",{href:!0});var Ttt=s(ZN);zLo=r(Ttt,"MobileBertForMultipleChoice"),Ttt.forEach(t),QLo=r(FAe," (MobileBERT model)"),FAe.forEach(t),WLo=i(O),E2=n(O,"LI",{});var TAe=s(E2);Oie=n(TAe,"STRONG",{});var Mtt=s(Oie);HLo=r(Mtt,"mpnet"),Mtt.forEach(t),ULo=r(TAe," \u2014 "),ej=n(TAe,"A",{href:!0});var Ett=s(ej);JLo=r(Ett,"MPNetForMultipleChoice"),Ett.forEach(t),YLo=r(TAe," (MPNet model)"),TAe.forEach(t),KLo=i(O),C2=n(O,"LI",{});var MAe=s(C2);Vie=n(MAe,"STRONG",{});var Ctt=s(Vie);ZLo=r(Ctt,"nystromformer"),Ctt.forEach(t),e9o=r(MAe," \u2014 "),oj=n(MAe,"A",{href:!0});var wtt=s(oj);o9o=r(wtt,"NystromformerForMultipleChoice"),wtt.forEach(t),r9o=r(MAe," (Nystromformer model)"),MAe.forEach(t),t9o=i(O),w2=n(O,"LI",{});var EAe=s(w2);Xie=n(EAe,"STRONG",{});var Att=s(Xie);a9o=r(Att,"qdqbert"),Att.forEach(t),n9o=r(EAe," \u2014 "),rj=n(EAe,"A",{href:!0});var ytt=s(rj);s9o=r(ytt,"QDQBertForMultipleChoice"),ytt.forEach(t),l9o=r(EAe," (QDQBert model)"),EAe.forEach(t),i9o=i(O),A2=n(O,"LI",{});var CAe=s(A2);zie=n(CAe,"STRONG",{});var Ltt=s(zie);d9o=r(Ltt,"rembert"),Ltt.forEach(t),c9o=r(CAe," \u2014 "),tj=n(CAe,"A",{href:!0});var xtt=s(tj);f9o=r(xtt,"RemBertForMultipleChoice"),xtt.forEach(t),m9o=r(CAe," (RemBERT model)"),CAe.forEach(t),g9o=i(O),y2=n(O,"LI",{});var wAe=s(y2);Qie=n(wAe,"STRONG",{});var ktt=s(Qie);h9o=r(ktt,"roberta"),ktt.forEach(t),p9o=r(wAe," \u2014 "),aj=n(wAe,"A",{href:!0});var Stt=s(aj);_9o=r(Stt,"RobertaForMultipleChoice"),Stt.forEach(t),u9o=r(wAe," (RoBERTa model)"),wAe.forEach(t),b9o=i(O),L2=n(O,"LI",{});var AAe=s(L2);Wie=n(AAe,"STRONG",{});var Rtt=s(Wie);v9o=r(Rtt,"roformer"),Rtt.forEach(t),F9o=r(AAe," \u2014 "),nj=n(AAe,"A",{href:!0});var Btt=s(nj);T9o=r(Btt,"RoFormerForMultipleChoice"),Btt.forEach(t),M9o=r(AAe," (RoFormer model)"),AAe.forEach(t),E9o=i(O),x2=n(O,"LI",{});var yAe=s(x2);Hie=n(yAe,"STRONG",{});var Ptt=s(Hie);C9o=r(Ptt,"squeezebert"),Ptt.forEach(t),w9o=r(yAe," \u2014 "),sj=n(yAe,"A",{href:!0});var $tt=s(sj);A9o=r($tt,"SqueezeBertForMultipleChoice"),$tt.forEach(t),y9o=r(yAe," (SqueezeBERT model)"),yAe.forEach(t),L9o=i(O),k2=n(O,"LI",{});var LAe=s(k2);Uie=n(LAe,"STRONG",{});var Itt=s(Uie);x9o=r(Itt,"xlm"),Itt.forEach(t),k9o=r(LAe," \u2014 "),lj=n(LAe,"A",{href:!0});var qtt=s(lj);S9o=r(qtt,"XLMForMultipleChoice"),qtt.forEach(t),R9o=r(LAe," (XLM model)"),LAe.forEach(t),B9o=i(O),S2=n(O,"LI",{});var xAe=s(S2);Jie=n(xAe,"STRONG",{});var Ntt=s(Jie);P9o=r(Ntt,"xlm-roberta"),Ntt.forEach(t),$9o=r(xAe," \u2014 "),ij=n(xAe,"A",{href:!0});var jtt=s(ij);I9o=r(jtt,"XLMRobertaForMultipleChoice"),jtt.forEach(t),q9o=r(xAe," (XLM-RoBERTa model)"),xAe.forEach(t),N9o=i(O),R2=n(O,"LI",{});var kAe=s(R2);Yie=n(kAe,"STRONG",{});var Dtt=s(Yie);j9o=r(Dtt,"xlm-roberta-xl"),Dtt.forEach(t),D9o=r(kAe," \u2014 "),dj=n(kAe,"A",{href:!0});var Gtt=s(dj);G9o=r(Gtt,"XLMRobertaXLForMultipleChoice"),Gtt.forEach(t),O9o=r(kAe," (XLM-RoBERTa-XL model)"),kAe.forEach(t),V9o=i(O),B2=n(O,"LI",{});var SAe=s(B2);Kie=n(SAe,"STRONG",{});var Ott=s(Kie);X9o=r(Ott,"xlnet"),Ott.forEach(t),z9o=r(SAe," \u2014 "),cj=n(SAe,"A",{href:!0});var Vtt=s(cj);Q9o=r(Vtt,"XLNetForMultipleChoice"),Vtt.forEach(t),W9o=r(SAe," (XLNet model)"),SAe.forEach(t),H9o=i(O),P2=n(O,"LI",{});var RAe=s(P2);Zie=n(RAe,"STRONG",{});var Xtt=s(Zie);U9o=r(Xtt,"yoso"),Xtt.forEach(t),J9o=r(RAe," \u2014 "),fj=n(RAe,"A",{href:!0});var ztt=s(fj);Y9o=r(ztt,"YosoForMultipleChoice"),ztt.forEach(t),K9o=r(RAe," (YOSO model)"),RAe.forEach(t),O.forEach(t),Z9o=i(Qt),$2=n(Qt,"P",{});var BAe=s($2);exo=r(BAe,"The model is set in evaluation mode by default using "),ede=n(BAe,"CODE",{});var Qtt=s(ede);oxo=r(Qtt,"model.eval()"),Qtt.forEach(t),rxo=r(BAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=n(BAe,"CODE",{});var Wtt=s(ode);txo=r(Wtt,"model.train()"),Wtt.forEach(t),BAe.forEach(t),axo=i(Qt),rde=n(Qt,"P",{});var Htt=s(rde);nxo=r(Htt,"Examples:"),Htt.forEach(t),sxo=i(Qt),m(aC.$$.fragment,Qt),Qt.forEach(t),ll.forEach(t),hBe=i(c),Fd=n(c,"H2",{class:!0});var E$e=s(Fd);I2=n(E$e,"A",{id:!0,class:!0,href:!0});var Utt=s(I2);tde=n(Utt,"SPAN",{});var Jtt=s(tde);m(nC.$$.fragment,Jtt),Jtt.forEach(t),Utt.forEach(t),lxo=i(E$e),ade=n(E$e,"SPAN",{});var Ytt=s(ade);ixo=r(Ytt,"AutoModelForNextSentencePrediction"),Ytt.forEach(t),E$e.forEach(t),pBe=i(c),tr=n(c,"DIV",{class:!0});var dl=s(tr);m(sC.$$.fragment,dl),dxo=i(dl),Td=n(dl,"P",{});var OU=s(Td);cxo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mj=n(OU,"A",{href:!0});var Ktt=s(mj);fxo=r(Ktt,"from_pretrained()"),Ktt.forEach(t),mxo=r(OU," class method or the "),gj=n(OU,"A",{href:!0});var Ztt=s(gj);gxo=r(Ztt,"from_config()"),Ztt.forEach(t),hxo=r(OU,` class
method.`),OU.forEach(t),pxo=i(dl),lC=n(dl,"P",{});var C$e=s(lC);_xo=r(C$e,"This class cannot be instantiated directly using "),nde=n(C$e,"CODE",{});var eat=s(nde);uxo=r(eat,"__init__()"),eat.forEach(t),bxo=r(C$e," (throws an error)."),C$e.forEach(t),vxo=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);m(iC.$$.fragment,cl),Fxo=i(cl),sde=n(cl,"P",{});var oat=s(sde);Txo=r(oat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oat.forEach(t),Mxo=i(cl),Md=n(cl,"P",{});var VU=s(Md);Exo=r(VU,`Note:
Loading a model from its configuration file does `),lde=n(VU,"STRONG",{});var rat=s(lde);Cxo=r(rat,"not"),rat.forEach(t),wxo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=n(VU,"A",{href:!0});var tat=s(hj);Axo=r(tat,"from_pretrained()"),tat.forEach(t),yxo=r(VU," to load the model weights."),VU.forEach(t),Lxo=i(cl),ide=n(cl,"P",{});var aat=s(ide);xxo=r(aat,"Examples:"),aat.forEach(t),kxo=i(cl),m(dC.$$.fragment,cl),cl.forEach(t),Sxo=i(dl),Xe=n(dl,"DIV",{class:!0});var Wt=s(Xe);m(cC.$$.fragment,Wt),Rxo=i(Wt),dde=n(Wt,"P",{});var nat=s(dde);Bxo=r(nat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nat.forEach(t),Pxo=i(Wt),Ya=n(Wt,"P",{});var DE=s(Ya);$xo=r(DE,"The model class to instantiate is selected based on the "),cde=n(DE,"CODE",{});var sat=s(cde);Ixo=r(sat,"model_type"),sat.forEach(t),qxo=r(DE,` property of the config object (either
passed as an argument or loaded from `),fde=n(DE,"CODE",{});var lat=s(fde);Nxo=r(lat,"pretrained_model_name_or_path"),lat.forEach(t),jxo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=n(DE,"CODE",{});var iat=s(mde);Dxo=r(iat,"pretrained_model_name_or_path"),iat.forEach(t),Gxo=r(DE,":"),DE.forEach(t),Oxo=i(Wt),da=n(Wt,"UL",{});var fl=s(da);q2=n(fl,"LI",{});var PAe=s(q2);gde=n(PAe,"STRONG",{});var dat=s(gde);Vxo=r(dat,"bert"),dat.forEach(t),Xxo=r(PAe," \u2014 "),pj=n(PAe,"A",{href:!0});var cat=s(pj);zxo=r(cat,"BertForNextSentencePrediction"),cat.forEach(t),Qxo=r(PAe," (BERT model)"),PAe.forEach(t),Wxo=i(fl),N2=n(fl,"LI",{});var $Ae=s(N2);hde=n($Ae,"STRONG",{});var fat=s(hde);Hxo=r(fat,"fnet"),fat.forEach(t),Uxo=r($Ae," \u2014 "),_j=n($Ae,"A",{href:!0});var mat=s(_j);Jxo=r(mat,"FNetForNextSentencePrediction"),mat.forEach(t),Yxo=r($Ae," (FNet model)"),$Ae.forEach(t),Kxo=i(fl),j2=n(fl,"LI",{});var IAe=s(j2);pde=n(IAe,"STRONG",{});var gat=s(pde);Zxo=r(gat,"megatron-bert"),gat.forEach(t),eko=r(IAe," \u2014 "),uj=n(IAe,"A",{href:!0});var hat=s(uj);oko=r(hat,"MegatronBertForNextSentencePrediction"),hat.forEach(t),rko=r(IAe," (MegatronBert model)"),IAe.forEach(t),tko=i(fl),D2=n(fl,"LI",{});var qAe=s(D2);_de=n(qAe,"STRONG",{});var pat=s(_de);ako=r(pat,"mobilebert"),pat.forEach(t),nko=r(qAe," \u2014 "),bj=n(qAe,"A",{href:!0});var _at=s(bj);sko=r(_at,"MobileBertForNextSentencePrediction"),_at.forEach(t),lko=r(qAe," (MobileBERT model)"),qAe.forEach(t),iko=i(fl),G2=n(fl,"LI",{});var NAe=s(G2);ude=n(NAe,"STRONG",{});var uat=s(ude);dko=r(uat,"qdqbert"),uat.forEach(t),cko=r(NAe," \u2014 "),vj=n(NAe,"A",{href:!0});var bat=s(vj);fko=r(bat,"QDQBertForNextSentencePrediction"),bat.forEach(t),mko=r(NAe," (QDQBert model)"),NAe.forEach(t),fl.forEach(t),gko=i(Wt),O2=n(Wt,"P",{});var jAe=s(O2);hko=r(jAe,"The model is set in evaluation mode by default using "),bde=n(jAe,"CODE",{});var vat=s(bde);pko=r(vat,"model.eval()"),vat.forEach(t),_ko=r(jAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vde=n(jAe,"CODE",{});var Fat=s(vde);uko=r(Fat,"model.train()"),Fat.forEach(t),jAe.forEach(t),bko=i(Wt),Fde=n(Wt,"P",{});var Tat=s(Fde);vko=r(Tat,"Examples:"),Tat.forEach(t),Fko=i(Wt),m(fC.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),_Be=i(c),Ed=n(c,"H2",{class:!0});var w$e=s(Ed);V2=n(w$e,"A",{id:!0,class:!0,href:!0});var Mat=s(V2);Tde=n(Mat,"SPAN",{});var Eat=s(Tde);m(mC.$$.fragment,Eat),Eat.forEach(t),Mat.forEach(t),Tko=i(w$e),Mde=n(w$e,"SPAN",{});var Cat=s(Mde);Mko=r(Cat,"AutoModelForTokenClassification"),Cat.forEach(t),w$e.forEach(t),uBe=i(c),ar=n(c,"DIV",{class:!0});var ml=s(ar);m(gC.$$.fragment,ml),Eko=i(ml),Cd=n(ml,"P",{});var XU=s(Cd);Cko=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fj=n(XU,"A",{href:!0});var wat=s(Fj);wko=r(wat,"from_pretrained()"),wat.forEach(t),Ako=r(XU," class method or the "),Tj=n(XU,"A",{href:!0});var Aat=s(Tj);yko=r(Aat,"from_config()"),Aat.forEach(t),Lko=r(XU,` class
method.`),XU.forEach(t),xko=i(ml),hC=n(ml,"P",{});var A$e=s(hC);kko=r(A$e,"This class cannot be instantiated directly using "),Ede=n(A$e,"CODE",{});var yat=s(Ede);Sko=r(yat,"__init__()"),yat.forEach(t),Rko=r(A$e," (throws an error)."),A$e.forEach(t),Bko=i(ml),Kr=n(ml,"DIV",{class:!0});var gl=s(Kr);m(pC.$$.fragment,gl),Pko=i(gl),Cde=n(gl,"P",{});var Lat=s(Cde);$ko=r(Lat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lat.forEach(t),Iko=i(gl),wd=n(gl,"P",{});var zU=s(wd);qko=r(zU,`Note:
Loading a model from its configuration file does `),wde=n(zU,"STRONG",{});var xat=s(wde);Nko=r(xat,"not"),xat.forEach(t),jko=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=n(zU,"A",{href:!0});var kat=s(Mj);Dko=r(kat,"from_pretrained()"),kat.forEach(t),Gko=r(zU," to load the model weights."),zU.forEach(t),Oko=i(gl),Ade=n(gl,"P",{});var Sat=s(Ade);Vko=r(Sat,"Examples:"),Sat.forEach(t),Xko=i(gl),m(_C.$$.fragment,gl),gl.forEach(t),zko=i(ml),ze=n(ml,"DIV",{class:!0});var Ht=s(ze);m(uC.$$.fragment,Ht),Qko=i(Ht),yde=n(Ht,"P",{});var Rat=s(yde);Wko=r(Rat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Rat.forEach(t),Hko=i(Ht),Ka=n(Ht,"P",{});var GE=s(Ka);Uko=r(GE,"The model class to instantiate is selected based on the "),Lde=n(GE,"CODE",{});var Bat=s(Lde);Jko=r(Bat,"model_type"),Bat.forEach(t),Yko=r(GE,` property of the config object (either
passed as an argument or loaded from `),xde=n(GE,"CODE",{});var Pat=s(xde);Kko=r(Pat,"pretrained_model_name_or_path"),Pat.forEach(t),Zko=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kde=n(GE,"CODE",{});var $at=s(kde);eSo=r($at,"pretrained_model_name_or_path"),$at.forEach(t),oSo=r(GE,":"),GE.forEach(t),rSo=i(Ht),j=n(Ht,"UL",{});var D=s(j);X2=n(D,"LI",{});var DAe=s(X2);Sde=n(DAe,"STRONG",{});var Iat=s(Sde);tSo=r(Iat,"albert"),Iat.forEach(t),aSo=r(DAe," \u2014 "),Ej=n(DAe,"A",{href:!0});var qat=s(Ej);nSo=r(qat,"AlbertForTokenClassification"),qat.forEach(t),sSo=r(DAe," (ALBERT model)"),DAe.forEach(t),lSo=i(D),z2=n(D,"LI",{});var GAe=s(z2);Rde=n(GAe,"STRONG",{});var Nat=s(Rde);iSo=r(Nat,"bert"),Nat.forEach(t),dSo=r(GAe," \u2014 "),Cj=n(GAe,"A",{href:!0});var jat=s(Cj);cSo=r(jat,"BertForTokenClassification"),jat.forEach(t),fSo=r(GAe," (BERT model)"),GAe.forEach(t),mSo=i(D),Q2=n(D,"LI",{});var OAe=s(Q2);Bde=n(OAe,"STRONG",{});var Dat=s(Bde);gSo=r(Dat,"big_bird"),Dat.forEach(t),hSo=r(OAe," \u2014 "),wj=n(OAe,"A",{href:!0});var Gat=s(wj);pSo=r(Gat,"BigBirdForTokenClassification"),Gat.forEach(t),_So=r(OAe," (BigBird model)"),OAe.forEach(t),uSo=i(D),W2=n(D,"LI",{});var VAe=s(W2);Pde=n(VAe,"STRONG",{});var Oat=s(Pde);bSo=r(Oat,"camembert"),Oat.forEach(t),vSo=r(VAe," \u2014 "),Aj=n(VAe,"A",{href:!0});var Vat=s(Aj);FSo=r(Vat,"CamembertForTokenClassification"),Vat.forEach(t),TSo=r(VAe," (CamemBERT model)"),VAe.forEach(t),MSo=i(D),H2=n(D,"LI",{});var XAe=s(H2);$de=n(XAe,"STRONG",{});var Xat=s($de);ESo=r(Xat,"canine"),Xat.forEach(t),CSo=r(XAe," \u2014 "),yj=n(XAe,"A",{href:!0});var zat=s(yj);wSo=r(zat,"CanineForTokenClassification"),zat.forEach(t),ASo=r(XAe," (Canine model)"),XAe.forEach(t),ySo=i(D),U2=n(D,"LI",{});var zAe=s(U2);Ide=n(zAe,"STRONG",{});var Qat=s(Ide);LSo=r(Qat,"convbert"),Qat.forEach(t),xSo=r(zAe," \u2014 "),Lj=n(zAe,"A",{href:!0});var Wat=s(Lj);kSo=r(Wat,"ConvBertForTokenClassification"),Wat.forEach(t),SSo=r(zAe," (ConvBERT model)"),zAe.forEach(t),RSo=i(D),J2=n(D,"LI",{});var QAe=s(J2);qde=n(QAe,"STRONG",{});var Hat=s(qde);BSo=r(Hat,"data2vec-text"),Hat.forEach(t),PSo=r(QAe," \u2014 "),xj=n(QAe,"A",{href:!0});var Uat=s(xj);$So=r(Uat,"Data2VecTextForTokenClassification"),Uat.forEach(t),ISo=r(QAe," (Data2VecText model)"),QAe.forEach(t),qSo=i(D),Y2=n(D,"LI",{});var WAe=s(Y2);Nde=n(WAe,"STRONG",{});var Jat=s(Nde);NSo=r(Jat,"deberta"),Jat.forEach(t),jSo=r(WAe," \u2014 "),kj=n(WAe,"A",{href:!0});var Yat=s(kj);DSo=r(Yat,"DebertaForTokenClassification"),Yat.forEach(t),GSo=r(WAe," (DeBERTa model)"),WAe.forEach(t),OSo=i(D),K2=n(D,"LI",{});var HAe=s(K2);jde=n(HAe,"STRONG",{});var Kat=s(jde);VSo=r(Kat,"deberta-v2"),Kat.forEach(t),XSo=r(HAe," \u2014 "),Sj=n(HAe,"A",{href:!0});var Zat=s(Sj);zSo=r(Zat,"DebertaV2ForTokenClassification"),Zat.forEach(t),QSo=r(HAe," (DeBERTa-v2 model)"),HAe.forEach(t),WSo=i(D),Z2=n(D,"LI",{});var UAe=s(Z2);Dde=n(UAe,"STRONG",{});var ent=s(Dde);HSo=r(ent,"distilbert"),ent.forEach(t),USo=r(UAe," \u2014 "),Rj=n(UAe,"A",{href:!0});var ont=s(Rj);JSo=r(ont,"DistilBertForTokenClassification"),ont.forEach(t),YSo=r(UAe," (DistilBERT model)"),UAe.forEach(t),KSo=i(D),e6=n(D,"LI",{});var JAe=s(e6);Gde=n(JAe,"STRONG",{});var rnt=s(Gde);ZSo=r(rnt,"electra"),rnt.forEach(t),eRo=r(JAe," \u2014 "),Bj=n(JAe,"A",{href:!0});var tnt=s(Bj);oRo=r(tnt,"ElectraForTokenClassification"),tnt.forEach(t),rRo=r(JAe," (ELECTRA model)"),JAe.forEach(t),tRo=i(D),o6=n(D,"LI",{});var YAe=s(o6);Ode=n(YAe,"STRONG",{});var ant=s(Ode);aRo=r(ant,"flaubert"),ant.forEach(t),nRo=r(YAe," \u2014 "),Pj=n(YAe,"A",{href:!0});var nnt=s(Pj);sRo=r(nnt,"FlaubertForTokenClassification"),nnt.forEach(t),lRo=r(YAe," (FlauBERT model)"),YAe.forEach(t),iRo=i(D),r6=n(D,"LI",{});var KAe=s(r6);Vde=n(KAe,"STRONG",{});var snt=s(Vde);dRo=r(snt,"fnet"),snt.forEach(t),cRo=r(KAe," \u2014 "),$j=n(KAe,"A",{href:!0});var lnt=s($j);fRo=r(lnt,"FNetForTokenClassification"),lnt.forEach(t),mRo=r(KAe," (FNet model)"),KAe.forEach(t),gRo=i(D),t6=n(D,"LI",{});var ZAe=s(t6);Xde=n(ZAe,"STRONG",{});var int=s(Xde);hRo=r(int,"funnel"),int.forEach(t),pRo=r(ZAe," \u2014 "),Ij=n(ZAe,"A",{href:!0});var dnt=s(Ij);_Ro=r(dnt,"FunnelForTokenClassification"),dnt.forEach(t),uRo=r(ZAe," (Funnel Transformer model)"),ZAe.forEach(t),bRo=i(D),a6=n(D,"LI",{});var e0e=s(a6);zde=n(e0e,"STRONG",{});var cnt=s(zde);vRo=r(cnt,"gpt2"),cnt.forEach(t),FRo=r(e0e," \u2014 "),qj=n(e0e,"A",{href:!0});var fnt=s(qj);TRo=r(fnt,"GPT2ForTokenClassification"),fnt.forEach(t),MRo=r(e0e," (OpenAI GPT-2 model)"),e0e.forEach(t),ERo=i(D),n6=n(D,"LI",{});var o0e=s(n6);Qde=n(o0e,"STRONG",{});var mnt=s(Qde);CRo=r(mnt,"ibert"),mnt.forEach(t),wRo=r(o0e," \u2014 "),Nj=n(o0e,"A",{href:!0});var gnt=s(Nj);ARo=r(gnt,"IBertForTokenClassification"),gnt.forEach(t),yRo=r(o0e," (I-BERT model)"),o0e.forEach(t),LRo=i(D),s6=n(D,"LI",{});var r0e=s(s6);Wde=n(r0e,"STRONG",{});var hnt=s(Wde);xRo=r(hnt,"layoutlm"),hnt.forEach(t),kRo=r(r0e," \u2014 "),jj=n(r0e,"A",{href:!0});var pnt=s(jj);SRo=r(pnt,"LayoutLMForTokenClassification"),pnt.forEach(t),RRo=r(r0e," (LayoutLM model)"),r0e.forEach(t),BRo=i(D),l6=n(D,"LI",{});var t0e=s(l6);Hde=n(t0e,"STRONG",{});var _nt=s(Hde);PRo=r(_nt,"layoutlmv2"),_nt.forEach(t),$Ro=r(t0e," \u2014 "),Dj=n(t0e,"A",{href:!0});var unt=s(Dj);IRo=r(unt,"LayoutLMv2ForTokenClassification"),unt.forEach(t),qRo=r(t0e," (LayoutLMv2 model)"),t0e.forEach(t),NRo=i(D),i6=n(D,"LI",{});var a0e=s(i6);Ude=n(a0e,"STRONG",{});var bnt=s(Ude);jRo=r(bnt,"longformer"),bnt.forEach(t),DRo=r(a0e," \u2014 "),Gj=n(a0e,"A",{href:!0});var vnt=s(Gj);GRo=r(vnt,"LongformerForTokenClassification"),vnt.forEach(t),ORo=r(a0e," (Longformer model)"),a0e.forEach(t),VRo=i(D),d6=n(D,"LI",{});var n0e=s(d6);Jde=n(n0e,"STRONG",{});var Fnt=s(Jde);XRo=r(Fnt,"megatron-bert"),Fnt.forEach(t),zRo=r(n0e," \u2014 "),Oj=n(n0e,"A",{href:!0});var Tnt=s(Oj);QRo=r(Tnt,"MegatronBertForTokenClassification"),Tnt.forEach(t),WRo=r(n0e," (MegatronBert model)"),n0e.forEach(t),HRo=i(D),c6=n(D,"LI",{});var s0e=s(c6);Yde=n(s0e,"STRONG",{});var Mnt=s(Yde);URo=r(Mnt,"mobilebert"),Mnt.forEach(t),JRo=r(s0e," \u2014 "),Vj=n(s0e,"A",{href:!0});var Ent=s(Vj);YRo=r(Ent,"MobileBertForTokenClassification"),Ent.forEach(t),KRo=r(s0e," (MobileBERT model)"),s0e.forEach(t),ZRo=i(D),f6=n(D,"LI",{});var l0e=s(f6);Kde=n(l0e,"STRONG",{});var Cnt=s(Kde);eBo=r(Cnt,"mpnet"),Cnt.forEach(t),oBo=r(l0e," \u2014 "),Xj=n(l0e,"A",{href:!0});var wnt=s(Xj);rBo=r(wnt,"MPNetForTokenClassification"),wnt.forEach(t),tBo=r(l0e," (MPNet model)"),l0e.forEach(t),aBo=i(D),m6=n(D,"LI",{});var i0e=s(m6);Zde=n(i0e,"STRONG",{});var Ant=s(Zde);nBo=r(Ant,"nystromformer"),Ant.forEach(t),sBo=r(i0e," \u2014 "),zj=n(i0e,"A",{href:!0});var ynt=s(zj);lBo=r(ynt,"NystromformerForTokenClassification"),ynt.forEach(t),iBo=r(i0e," (Nystromformer model)"),i0e.forEach(t),dBo=i(D),g6=n(D,"LI",{});var d0e=s(g6);ece=n(d0e,"STRONG",{});var Lnt=s(ece);cBo=r(Lnt,"qdqbert"),Lnt.forEach(t),fBo=r(d0e," \u2014 "),Qj=n(d0e,"A",{href:!0});var xnt=s(Qj);mBo=r(xnt,"QDQBertForTokenClassification"),xnt.forEach(t),gBo=r(d0e," (QDQBert model)"),d0e.forEach(t),hBo=i(D),h6=n(D,"LI",{});var c0e=s(h6);oce=n(c0e,"STRONG",{});var knt=s(oce);pBo=r(knt,"rembert"),knt.forEach(t),_Bo=r(c0e," \u2014 "),Wj=n(c0e,"A",{href:!0});var Snt=s(Wj);uBo=r(Snt,"RemBertForTokenClassification"),Snt.forEach(t),bBo=r(c0e," (RemBERT model)"),c0e.forEach(t),vBo=i(D),p6=n(D,"LI",{});var f0e=s(p6);rce=n(f0e,"STRONG",{});var Rnt=s(rce);FBo=r(Rnt,"roberta"),Rnt.forEach(t),TBo=r(f0e," \u2014 "),Hj=n(f0e,"A",{href:!0});var Bnt=s(Hj);MBo=r(Bnt,"RobertaForTokenClassification"),Bnt.forEach(t),EBo=r(f0e," (RoBERTa model)"),f0e.forEach(t),CBo=i(D),_6=n(D,"LI",{});var m0e=s(_6);tce=n(m0e,"STRONG",{});var Pnt=s(tce);wBo=r(Pnt,"roformer"),Pnt.forEach(t),ABo=r(m0e," \u2014 "),Uj=n(m0e,"A",{href:!0});var $nt=s(Uj);yBo=r($nt,"RoFormerForTokenClassification"),$nt.forEach(t),LBo=r(m0e," (RoFormer model)"),m0e.forEach(t),xBo=i(D),u6=n(D,"LI",{});var g0e=s(u6);ace=n(g0e,"STRONG",{});var Int=s(ace);kBo=r(Int,"squeezebert"),Int.forEach(t),SBo=r(g0e," \u2014 "),Jj=n(g0e,"A",{href:!0});var qnt=s(Jj);RBo=r(qnt,"SqueezeBertForTokenClassification"),qnt.forEach(t),BBo=r(g0e," (SqueezeBERT model)"),g0e.forEach(t),PBo=i(D),b6=n(D,"LI",{});var h0e=s(b6);nce=n(h0e,"STRONG",{});var Nnt=s(nce);$Bo=r(Nnt,"xlm"),Nnt.forEach(t),IBo=r(h0e," \u2014 "),Yj=n(h0e,"A",{href:!0});var jnt=s(Yj);qBo=r(jnt,"XLMForTokenClassification"),jnt.forEach(t),NBo=r(h0e," (XLM model)"),h0e.forEach(t),jBo=i(D),v6=n(D,"LI",{});var p0e=s(v6);sce=n(p0e,"STRONG",{});var Dnt=s(sce);DBo=r(Dnt,"xlm-roberta"),Dnt.forEach(t),GBo=r(p0e," \u2014 "),Kj=n(p0e,"A",{href:!0});var Gnt=s(Kj);OBo=r(Gnt,"XLMRobertaForTokenClassification"),Gnt.forEach(t),VBo=r(p0e," (XLM-RoBERTa model)"),p0e.forEach(t),XBo=i(D),F6=n(D,"LI",{});var _0e=s(F6);lce=n(_0e,"STRONG",{});var Ont=s(lce);zBo=r(Ont,"xlm-roberta-xl"),Ont.forEach(t),QBo=r(_0e," \u2014 "),Zj=n(_0e,"A",{href:!0});var Vnt=s(Zj);WBo=r(Vnt,"XLMRobertaXLForTokenClassification"),Vnt.forEach(t),HBo=r(_0e," (XLM-RoBERTa-XL model)"),_0e.forEach(t),UBo=i(D),T6=n(D,"LI",{});var u0e=s(T6);ice=n(u0e,"STRONG",{});var Xnt=s(ice);JBo=r(Xnt,"xlnet"),Xnt.forEach(t),YBo=r(u0e," \u2014 "),eD=n(u0e,"A",{href:!0});var znt=s(eD);KBo=r(znt,"XLNetForTokenClassification"),znt.forEach(t),ZBo=r(u0e," (XLNet model)"),u0e.forEach(t),ePo=i(D),M6=n(D,"LI",{});var b0e=s(M6);dce=n(b0e,"STRONG",{});var Qnt=s(dce);oPo=r(Qnt,"yoso"),Qnt.forEach(t),rPo=r(b0e," \u2014 "),oD=n(b0e,"A",{href:!0});var Wnt=s(oD);tPo=r(Wnt,"YosoForTokenClassification"),Wnt.forEach(t),aPo=r(b0e," (YOSO model)"),b0e.forEach(t),D.forEach(t),nPo=i(Ht),E6=n(Ht,"P",{});var v0e=s(E6);sPo=r(v0e,"The model is set in evaluation mode by default using "),cce=n(v0e,"CODE",{});var Hnt=s(cce);lPo=r(Hnt,"model.eval()"),Hnt.forEach(t),iPo=r(v0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=n(v0e,"CODE",{});var Unt=s(fce);dPo=r(Unt,"model.train()"),Unt.forEach(t),v0e.forEach(t),cPo=i(Ht),mce=n(Ht,"P",{});var Jnt=s(mce);fPo=r(Jnt,"Examples:"),Jnt.forEach(t),mPo=i(Ht),m(bC.$$.fragment,Ht),Ht.forEach(t),ml.forEach(t),bBe=i(c),Ad=n(c,"H2",{class:!0});var y$e=s(Ad);C6=n(y$e,"A",{id:!0,class:!0,href:!0});var Ynt=s(C6);gce=n(Ynt,"SPAN",{});var Knt=s(gce);m(vC.$$.fragment,Knt),Knt.forEach(t),Ynt.forEach(t),gPo=i(y$e),hce=n(y$e,"SPAN",{});var Znt=s(hce);hPo=r(Znt,"AutoModelForQuestionAnswering"),Znt.forEach(t),y$e.forEach(t),vBe=i(c),nr=n(c,"DIV",{class:!0});var hl=s(nr);m(FC.$$.fragment,hl),pPo=i(hl),yd=n(hl,"P",{});var QU=s(yd);_Po=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rD=n(QU,"A",{href:!0});var est=s(rD);uPo=r(est,"from_pretrained()"),est.forEach(t),bPo=r(QU," class method or the "),tD=n(QU,"A",{href:!0});var ost=s(tD);vPo=r(ost,"from_config()"),ost.forEach(t),FPo=r(QU,` class
method.`),QU.forEach(t),TPo=i(hl),TC=n(hl,"P",{});var L$e=s(TC);MPo=r(L$e,"This class cannot be instantiated directly using "),pce=n(L$e,"CODE",{});var rst=s(pce);EPo=r(rst,"__init__()"),rst.forEach(t),CPo=r(L$e," (throws an error)."),L$e.forEach(t),wPo=i(hl),Zr=n(hl,"DIV",{class:!0});var pl=s(Zr);m(MC.$$.fragment,pl),APo=i(pl),_ce=n(pl,"P",{});var tst=s(_ce);yPo=r(tst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tst.forEach(t),LPo=i(pl),Ld=n(pl,"P",{});var WU=s(Ld);xPo=r(WU,`Note:
Loading a model from its configuration file does `),uce=n(WU,"STRONG",{});var ast=s(uce);kPo=r(ast,"not"),ast.forEach(t),SPo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),aD=n(WU,"A",{href:!0});var nst=s(aD);RPo=r(nst,"from_pretrained()"),nst.forEach(t),BPo=r(WU," to load the model weights."),WU.forEach(t),PPo=i(pl),bce=n(pl,"P",{});var sst=s(bce);$Po=r(sst,"Examples:"),sst.forEach(t),IPo=i(pl),m(EC.$$.fragment,pl),pl.forEach(t),qPo=i(hl),Qe=n(hl,"DIV",{class:!0});var Ut=s(Qe);m(CC.$$.fragment,Ut),NPo=i(Ut),vce=n(Ut,"P",{});var lst=s(vce);jPo=r(lst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lst.forEach(t),DPo=i(Ut),Za=n(Ut,"P",{});var OE=s(Za);GPo=r(OE,"The model class to instantiate is selected based on the "),Fce=n(OE,"CODE",{});var ist=s(Fce);OPo=r(ist,"model_type"),ist.forEach(t),VPo=r(OE,` property of the config object (either
passed as an argument or loaded from `),Tce=n(OE,"CODE",{});var dst=s(Tce);XPo=r(dst,"pretrained_model_name_or_path"),dst.forEach(t),zPo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mce=n(OE,"CODE",{});var cst=s(Mce);QPo=r(cst,"pretrained_model_name_or_path"),cst.forEach(t),WPo=r(OE,":"),OE.forEach(t),HPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);w6=n(P,"LI",{});var F0e=s(w6);Ece=n(F0e,"STRONG",{});var fst=s(Ece);UPo=r(fst,"albert"),fst.forEach(t),JPo=r(F0e," \u2014 "),nD=n(F0e,"A",{href:!0});var mst=s(nD);YPo=r(mst,"AlbertForQuestionAnswering"),mst.forEach(t),KPo=r(F0e," (ALBERT model)"),F0e.forEach(t),ZPo=i(P),A6=n(P,"LI",{});var T0e=s(A6);Cce=n(T0e,"STRONG",{});var gst=s(Cce);e$o=r(gst,"bart"),gst.forEach(t),o$o=r(T0e," \u2014 "),sD=n(T0e,"A",{href:!0});var hst=s(sD);r$o=r(hst,"BartForQuestionAnswering"),hst.forEach(t),t$o=r(T0e," (BART model)"),T0e.forEach(t),a$o=i(P),y6=n(P,"LI",{});var M0e=s(y6);wce=n(M0e,"STRONG",{});var pst=s(wce);n$o=r(pst,"bert"),pst.forEach(t),s$o=r(M0e," \u2014 "),lD=n(M0e,"A",{href:!0});var _st=s(lD);l$o=r(_st,"BertForQuestionAnswering"),_st.forEach(t),i$o=r(M0e," (BERT model)"),M0e.forEach(t),d$o=i(P),L6=n(P,"LI",{});var E0e=s(L6);Ace=n(E0e,"STRONG",{});var ust=s(Ace);c$o=r(ust,"big_bird"),ust.forEach(t),f$o=r(E0e," \u2014 "),iD=n(E0e,"A",{href:!0});var bst=s(iD);m$o=r(bst,"BigBirdForQuestionAnswering"),bst.forEach(t),g$o=r(E0e," (BigBird model)"),E0e.forEach(t),h$o=i(P),x6=n(P,"LI",{});var C0e=s(x6);yce=n(C0e,"STRONG",{});var vst=s(yce);p$o=r(vst,"bigbird_pegasus"),vst.forEach(t),_$o=r(C0e," \u2014 "),dD=n(C0e,"A",{href:!0});var Fst=s(dD);u$o=r(Fst,"BigBirdPegasusForQuestionAnswering"),Fst.forEach(t),b$o=r(C0e," (BigBirdPegasus model)"),C0e.forEach(t),v$o=i(P),k6=n(P,"LI",{});var w0e=s(k6);Lce=n(w0e,"STRONG",{});var Tst=s(Lce);F$o=r(Tst,"camembert"),Tst.forEach(t),T$o=r(w0e," \u2014 "),cD=n(w0e,"A",{href:!0});var Mst=s(cD);M$o=r(Mst,"CamembertForQuestionAnswering"),Mst.forEach(t),E$o=r(w0e," (CamemBERT model)"),w0e.forEach(t),C$o=i(P),S6=n(P,"LI",{});var A0e=s(S6);xce=n(A0e,"STRONG",{});var Est=s(xce);w$o=r(Est,"canine"),Est.forEach(t),A$o=r(A0e," \u2014 "),fD=n(A0e,"A",{href:!0});var Cst=s(fD);y$o=r(Cst,"CanineForQuestionAnswering"),Cst.forEach(t),L$o=r(A0e," (Canine model)"),A0e.forEach(t),x$o=i(P),R6=n(P,"LI",{});var y0e=s(R6);kce=n(y0e,"STRONG",{});var wst=s(kce);k$o=r(wst,"convbert"),wst.forEach(t),S$o=r(y0e," \u2014 "),mD=n(y0e,"A",{href:!0});var Ast=s(mD);R$o=r(Ast,"ConvBertForQuestionAnswering"),Ast.forEach(t),B$o=r(y0e," (ConvBERT model)"),y0e.forEach(t),P$o=i(P),B6=n(P,"LI",{});var L0e=s(B6);Sce=n(L0e,"STRONG",{});var yst=s(Sce);$$o=r(yst,"data2vec-text"),yst.forEach(t),I$o=r(L0e," \u2014 "),gD=n(L0e,"A",{href:!0});var Lst=s(gD);q$o=r(Lst,"Data2VecTextForQuestionAnswering"),Lst.forEach(t),N$o=r(L0e," (Data2VecText model)"),L0e.forEach(t),j$o=i(P),P6=n(P,"LI",{});var x0e=s(P6);Rce=n(x0e,"STRONG",{});var xst=s(Rce);D$o=r(xst,"deberta"),xst.forEach(t),G$o=r(x0e," \u2014 "),hD=n(x0e,"A",{href:!0});var kst=s(hD);O$o=r(kst,"DebertaForQuestionAnswering"),kst.forEach(t),V$o=r(x0e," (DeBERTa model)"),x0e.forEach(t),X$o=i(P),$6=n(P,"LI",{});var k0e=s($6);Bce=n(k0e,"STRONG",{});var Sst=s(Bce);z$o=r(Sst,"deberta-v2"),Sst.forEach(t),Q$o=r(k0e," \u2014 "),pD=n(k0e,"A",{href:!0});var Rst=s(pD);W$o=r(Rst,"DebertaV2ForQuestionAnswering"),Rst.forEach(t),H$o=r(k0e," (DeBERTa-v2 model)"),k0e.forEach(t),U$o=i(P),I6=n(P,"LI",{});var S0e=s(I6);Pce=n(S0e,"STRONG",{});var Bst=s(Pce);J$o=r(Bst,"distilbert"),Bst.forEach(t),Y$o=r(S0e," \u2014 "),_D=n(S0e,"A",{href:!0});var Pst=s(_D);K$o=r(Pst,"DistilBertForQuestionAnswering"),Pst.forEach(t),Z$o=r(S0e," (DistilBERT model)"),S0e.forEach(t),eIo=i(P),q6=n(P,"LI",{});var R0e=s(q6);$ce=n(R0e,"STRONG",{});var $st=s($ce);oIo=r($st,"electra"),$st.forEach(t),rIo=r(R0e," \u2014 "),uD=n(R0e,"A",{href:!0});var Ist=s(uD);tIo=r(Ist,"ElectraForQuestionAnswering"),Ist.forEach(t),aIo=r(R0e," (ELECTRA model)"),R0e.forEach(t),nIo=i(P),N6=n(P,"LI",{});var B0e=s(N6);Ice=n(B0e,"STRONG",{});var qst=s(Ice);sIo=r(qst,"flaubert"),qst.forEach(t),lIo=r(B0e," \u2014 "),bD=n(B0e,"A",{href:!0});var Nst=s(bD);iIo=r(Nst,"FlaubertForQuestionAnsweringSimple"),Nst.forEach(t),dIo=r(B0e," (FlauBERT model)"),B0e.forEach(t),cIo=i(P),j6=n(P,"LI",{});var P0e=s(j6);qce=n(P0e,"STRONG",{});var jst=s(qce);fIo=r(jst,"fnet"),jst.forEach(t),mIo=r(P0e," \u2014 "),vD=n(P0e,"A",{href:!0});var Dst=s(vD);gIo=r(Dst,"FNetForQuestionAnswering"),Dst.forEach(t),hIo=r(P0e," (FNet model)"),P0e.forEach(t),pIo=i(P),D6=n(P,"LI",{});var $0e=s(D6);Nce=n($0e,"STRONG",{});var Gst=s(Nce);_Io=r(Gst,"funnel"),Gst.forEach(t),uIo=r($0e," \u2014 "),FD=n($0e,"A",{href:!0});var Ost=s(FD);bIo=r(Ost,"FunnelForQuestionAnswering"),Ost.forEach(t),vIo=r($0e," (Funnel Transformer model)"),$0e.forEach(t),FIo=i(P),G6=n(P,"LI",{});var I0e=s(G6);jce=n(I0e,"STRONG",{});var Vst=s(jce);TIo=r(Vst,"gptj"),Vst.forEach(t),MIo=r(I0e," \u2014 "),TD=n(I0e,"A",{href:!0});var Xst=s(TD);EIo=r(Xst,"GPTJForQuestionAnswering"),Xst.forEach(t),CIo=r(I0e," (GPT-J model)"),I0e.forEach(t),wIo=i(P),O6=n(P,"LI",{});var q0e=s(O6);Dce=n(q0e,"STRONG",{});var zst=s(Dce);AIo=r(zst,"ibert"),zst.forEach(t),yIo=r(q0e," \u2014 "),MD=n(q0e,"A",{href:!0});var Qst=s(MD);LIo=r(Qst,"IBertForQuestionAnswering"),Qst.forEach(t),xIo=r(q0e," (I-BERT model)"),q0e.forEach(t),kIo=i(P),V6=n(P,"LI",{});var N0e=s(V6);Gce=n(N0e,"STRONG",{});var Wst=s(Gce);SIo=r(Wst,"layoutlmv2"),Wst.forEach(t),RIo=r(N0e," \u2014 "),ED=n(N0e,"A",{href:!0});var Hst=s(ED);BIo=r(Hst,"LayoutLMv2ForQuestionAnswering"),Hst.forEach(t),PIo=r(N0e," (LayoutLMv2 model)"),N0e.forEach(t),$Io=i(P),X6=n(P,"LI",{});var j0e=s(X6);Oce=n(j0e,"STRONG",{});var Ust=s(Oce);IIo=r(Ust,"led"),Ust.forEach(t),qIo=r(j0e," \u2014 "),CD=n(j0e,"A",{href:!0});var Jst=s(CD);NIo=r(Jst,"LEDForQuestionAnswering"),Jst.forEach(t),jIo=r(j0e," (LED model)"),j0e.forEach(t),DIo=i(P),z6=n(P,"LI",{});var D0e=s(z6);Vce=n(D0e,"STRONG",{});var Yst=s(Vce);GIo=r(Yst,"longformer"),Yst.forEach(t),OIo=r(D0e," \u2014 "),wD=n(D0e,"A",{href:!0});var Kst=s(wD);VIo=r(Kst,"LongformerForQuestionAnswering"),Kst.forEach(t),XIo=r(D0e," (Longformer model)"),D0e.forEach(t),zIo=i(P),Q6=n(P,"LI",{});var G0e=s(Q6);Xce=n(G0e,"STRONG",{});var Zst=s(Xce);QIo=r(Zst,"lxmert"),Zst.forEach(t),WIo=r(G0e," \u2014 "),AD=n(G0e,"A",{href:!0});var elt=s(AD);HIo=r(elt,"LxmertForQuestionAnswering"),elt.forEach(t),UIo=r(G0e," (LXMERT model)"),G0e.forEach(t),JIo=i(P),W6=n(P,"LI",{});var O0e=s(W6);zce=n(O0e,"STRONG",{});var olt=s(zce);YIo=r(olt,"mbart"),olt.forEach(t),KIo=r(O0e," \u2014 "),yD=n(O0e,"A",{href:!0});var rlt=s(yD);ZIo=r(rlt,"MBartForQuestionAnswering"),rlt.forEach(t),eqo=r(O0e," (mBART model)"),O0e.forEach(t),oqo=i(P),H6=n(P,"LI",{});var V0e=s(H6);Qce=n(V0e,"STRONG",{});var tlt=s(Qce);rqo=r(tlt,"megatron-bert"),tlt.forEach(t),tqo=r(V0e," \u2014 "),LD=n(V0e,"A",{href:!0});var alt=s(LD);aqo=r(alt,"MegatronBertForQuestionAnswering"),alt.forEach(t),nqo=r(V0e," (MegatronBert model)"),V0e.forEach(t),sqo=i(P),U6=n(P,"LI",{});var X0e=s(U6);Wce=n(X0e,"STRONG",{});var nlt=s(Wce);lqo=r(nlt,"mobilebert"),nlt.forEach(t),iqo=r(X0e," \u2014 "),xD=n(X0e,"A",{href:!0});var slt=s(xD);dqo=r(slt,"MobileBertForQuestionAnswering"),slt.forEach(t),cqo=r(X0e," (MobileBERT model)"),X0e.forEach(t),fqo=i(P),J6=n(P,"LI",{});var z0e=s(J6);Hce=n(z0e,"STRONG",{});var llt=s(Hce);mqo=r(llt,"mpnet"),llt.forEach(t),gqo=r(z0e," \u2014 "),kD=n(z0e,"A",{href:!0});var ilt=s(kD);hqo=r(ilt,"MPNetForQuestionAnswering"),ilt.forEach(t),pqo=r(z0e," (MPNet model)"),z0e.forEach(t),_qo=i(P),Y6=n(P,"LI",{});var Q0e=s(Y6);Uce=n(Q0e,"STRONG",{});var dlt=s(Uce);uqo=r(dlt,"nystromformer"),dlt.forEach(t),bqo=r(Q0e," \u2014 "),SD=n(Q0e,"A",{href:!0});var clt=s(SD);vqo=r(clt,"NystromformerForQuestionAnswering"),clt.forEach(t),Fqo=r(Q0e," (Nystromformer model)"),Q0e.forEach(t),Tqo=i(P),K6=n(P,"LI",{});var W0e=s(K6);Jce=n(W0e,"STRONG",{});var flt=s(Jce);Mqo=r(flt,"qdqbert"),flt.forEach(t),Eqo=r(W0e," \u2014 "),RD=n(W0e,"A",{href:!0});var mlt=s(RD);Cqo=r(mlt,"QDQBertForQuestionAnswering"),mlt.forEach(t),wqo=r(W0e," (QDQBert model)"),W0e.forEach(t),Aqo=i(P),Z6=n(P,"LI",{});var H0e=s(Z6);Yce=n(H0e,"STRONG",{});var glt=s(Yce);yqo=r(glt,"reformer"),glt.forEach(t),Lqo=r(H0e," \u2014 "),BD=n(H0e,"A",{href:!0});var hlt=s(BD);xqo=r(hlt,"ReformerForQuestionAnswering"),hlt.forEach(t),kqo=r(H0e," (Reformer model)"),H0e.forEach(t),Sqo=i(P),ev=n(P,"LI",{});var U0e=s(ev);Kce=n(U0e,"STRONG",{});var plt=s(Kce);Rqo=r(plt,"rembert"),plt.forEach(t),Bqo=r(U0e," \u2014 "),PD=n(U0e,"A",{href:!0});var _lt=s(PD);Pqo=r(_lt,"RemBertForQuestionAnswering"),_lt.forEach(t),$qo=r(U0e," (RemBERT model)"),U0e.forEach(t),Iqo=i(P),ov=n(P,"LI",{});var J0e=s(ov);Zce=n(J0e,"STRONG",{});var ult=s(Zce);qqo=r(ult,"roberta"),ult.forEach(t),Nqo=r(J0e," \u2014 "),$D=n(J0e,"A",{href:!0});var blt=s($D);jqo=r(blt,"RobertaForQuestionAnswering"),blt.forEach(t),Dqo=r(J0e," (RoBERTa model)"),J0e.forEach(t),Gqo=i(P),rv=n(P,"LI",{});var Y0e=s(rv);efe=n(Y0e,"STRONG",{});var vlt=s(efe);Oqo=r(vlt,"roformer"),vlt.forEach(t),Vqo=r(Y0e," \u2014 "),ID=n(Y0e,"A",{href:!0});var Flt=s(ID);Xqo=r(Flt,"RoFormerForQuestionAnswering"),Flt.forEach(t),zqo=r(Y0e," (RoFormer model)"),Y0e.forEach(t),Qqo=i(P),tv=n(P,"LI",{});var K0e=s(tv);ofe=n(K0e,"STRONG",{});var Tlt=s(ofe);Wqo=r(Tlt,"splinter"),Tlt.forEach(t),Hqo=r(K0e," \u2014 "),qD=n(K0e,"A",{href:!0});var Mlt=s(qD);Uqo=r(Mlt,"SplinterForQuestionAnswering"),Mlt.forEach(t),Jqo=r(K0e," (Splinter model)"),K0e.forEach(t),Yqo=i(P),av=n(P,"LI",{});var Z0e=s(av);rfe=n(Z0e,"STRONG",{});var Elt=s(rfe);Kqo=r(Elt,"squeezebert"),Elt.forEach(t),Zqo=r(Z0e," \u2014 "),ND=n(Z0e,"A",{href:!0});var Clt=s(ND);eNo=r(Clt,"SqueezeBertForQuestionAnswering"),Clt.forEach(t),oNo=r(Z0e," (SqueezeBERT model)"),Z0e.forEach(t),rNo=i(P),nv=n(P,"LI",{});var eye=s(nv);tfe=n(eye,"STRONG",{});var wlt=s(tfe);tNo=r(wlt,"xlm"),wlt.forEach(t),aNo=r(eye," \u2014 "),jD=n(eye,"A",{href:!0});var Alt=s(jD);nNo=r(Alt,"XLMForQuestionAnsweringSimple"),Alt.forEach(t),sNo=r(eye," (XLM model)"),eye.forEach(t),lNo=i(P),sv=n(P,"LI",{});var oye=s(sv);afe=n(oye,"STRONG",{});var ylt=s(afe);iNo=r(ylt,"xlm-roberta"),ylt.forEach(t),dNo=r(oye," \u2014 "),DD=n(oye,"A",{href:!0});var Llt=s(DD);cNo=r(Llt,"XLMRobertaForQuestionAnswering"),Llt.forEach(t),fNo=r(oye," (XLM-RoBERTa model)"),oye.forEach(t),mNo=i(P),lv=n(P,"LI",{});var rye=s(lv);nfe=n(rye,"STRONG",{});var xlt=s(nfe);gNo=r(xlt,"xlm-roberta-xl"),xlt.forEach(t),hNo=r(rye," \u2014 "),GD=n(rye,"A",{href:!0});var klt=s(GD);pNo=r(klt,"XLMRobertaXLForQuestionAnswering"),klt.forEach(t),_No=r(rye," (XLM-RoBERTa-XL model)"),rye.forEach(t),uNo=i(P),iv=n(P,"LI",{});var tye=s(iv);sfe=n(tye,"STRONG",{});var Slt=s(sfe);bNo=r(Slt,"xlnet"),Slt.forEach(t),vNo=r(tye," \u2014 "),OD=n(tye,"A",{href:!0});var Rlt=s(OD);FNo=r(Rlt,"XLNetForQuestionAnsweringSimple"),Rlt.forEach(t),TNo=r(tye," (XLNet model)"),tye.forEach(t),MNo=i(P),dv=n(P,"LI",{});var aye=s(dv);lfe=n(aye,"STRONG",{});var Blt=s(lfe);ENo=r(Blt,"yoso"),Blt.forEach(t),CNo=r(aye," \u2014 "),VD=n(aye,"A",{href:!0});var Plt=s(VD);wNo=r(Plt,"YosoForQuestionAnswering"),Plt.forEach(t),ANo=r(aye," (YOSO model)"),aye.forEach(t),P.forEach(t),yNo=i(Ut),cv=n(Ut,"P",{});var nye=s(cv);LNo=r(nye,"The model is set in evaluation mode by default using "),ife=n(nye,"CODE",{});var $lt=s(ife);xNo=r($lt,"model.eval()"),$lt.forEach(t),kNo=r(nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(nye,"CODE",{});var Ilt=s(dfe);SNo=r(Ilt,"model.train()"),Ilt.forEach(t),nye.forEach(t),RNo=i(Ut),cfe=n(Ut,"P",{});var qlt=s(cfe);BNo=r(qlt,"Examples:"),qlt.forEach(t),PNo=i(Ut),m(wC.$$.fragment,Ut),Ut.forEach(t),hl.forEach(t),FBe=i(c),xd=n(c,"H2",{class:!0});var x$e=s(xd);fv=n(x$e,"A",{id:!0,class:!0,href:!0});var Nlt=s(fv);ffe=n(Nlt,"SPAN",{});var jlt=s(ffe);m(AC.$$.fragment,jlt),jlt.forEach(t),Nlt.forEach(t),$No=i(x$e),mfe=n(x$e,"SPAN",{});var Dlt=s(mfe);INo=r(Dlt,"AutoModelForTableQuestionAnswering"),Dlt.forEach(t),x$e.forEach(t),TBe=i(c),sr=n(c,"DIV",{class:!0});var _l=s(sr);m(yC.$$.fragment,_l),qNo=i(_l),kd=n(_l,"P",{});var HU=s(kd);NNo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),XD=n(HU,"A",{href:!0});var Glt=s(XD);jNo=r(Glt,"from_pretrained()"),Glt.forEach(t),DNo=r(HU," class method or the "),zD=n(HU,"A",{href:!0});var Olt=s(zD);GNo=r(Olt,"from_config()"),Olt.forEach(t),ONo=r(HU,` class
method.`),HU.forEach(t),VNo=i(_l),LC=n(_l,"P",{});var k$e=s(LC);XNo=r(k$e,"This class cannot be instantiated directly using "),gfe=n(k$e,"CODE",{});var Vlt=s(gfe);zNo=r(Vlt,"__init__()"),Vlt.forEach(t),QNo=r(k$e," (throws an error)."),k$e.forEach(t),WNo=i(_l),et=n(_l,"DIV",{class:!0});var ul=s(et);m(xC.$$.fragment,ul),HNo=i(ul),hfe=n(ul,"P",{});var Xlt=s(hfe);UNo=r(Xlt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xlt.forEach(t),JNo=i(ul),Sd=n(ul,"P",{});var UU=s(Sd);YNo=r(UU,`Note:
Loading a model from its configuration file does `),pfe=n(UU,"STRONG",{});var zlt=s(pfe);KNo=r(zlt,"not"),zlt.forEach(t),ZNo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=n(UU,"A",{href:!0});var Qlt=s(QD);ejo=r(Qlt,"from_pretrained()"),Qlt.forEach(t),ojo=r(UU," to load the model weights."),UU.forEach(t),rjo=i(ul),_fe=n(ul,"P",{});var Wlt=s(_fe);tjo=r(Wlt,"Examples:"),Wlt.forEach(t),ajo=i(ul),m(kC.$$.fragment,ul),ul.forEach(t),njo=i(_l),We=n(_l,"DIV",{class:!0});var Jt=s(We);m(SC.$$.fragment,Jt),sjo=i(Jt),ufe=n(Jt,"P",{});var Hlt=s(ufe);ljo=r(Hlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Hlt.forEach(t),ijo=i(Jt),en=n(Jt,"P",{});var VE=s(en);djo=r(VE,"The model class to instantiate is selected based on the "),bfe=n(VE,"CODE",{});var Ult=s(bfe);cjo=r(Ult,"model_type"),Ult.forEach(t),fjo=r(VE,` property of the config object (either
passed as an argument or loaded from `),vfe=n(VE,"CODE",{});var Jlt=s(vfe);mjo=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),gjo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=n(VE,"CODE",{});var Ylt=s(Ffe);hjo=r(Ylt,"pretrained_model_name_or_path"),Ylt.forEach(t),pjo=r(VE,":"),VE.forEach(t),_jo=i(Jt),Tfe=n(Jt,"UL",{});var Klt=s(Tfe);mv=n(Klt,"LI",{});var sye=s(mv);Mfe=n(sye,"STRONG",{});var Zlt=s(Mfe);ujo=r(Zlt,"tapas"),Zlt.forEach(t),bjo=r(sye," \u2014 "),WD=n(sye,"A",{href:!0});var eit=s(WD);vjo=r(eit,"TapasForQuestionAnswering"),eit.forEach(t),Fjo=r(sye," (TAPAS model)"),sye.forEach(t),Klt.forEach(t),Tjo=i(Jt),gv=n(Jt,"P",{});var lye=s(gv);Mjo=r(lye,"The model is set in evaluation mode by default using "),Efe=n(lye,"CODE",{});var oit=s(Efe);Ejo=r(oit,"model.eval()"),oit.forEach(t),Cjo=r(lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=n(lye,"CODE",{});var rit=s(Cfe);wjo=r(rit,"model.train()"),rit.forEach(t),lye.forEach(t),Ajo=i(Jt),wfe=n(Jt,"P",{});var tit=s(wfe);yjo=r(tit,"Examples:"),tit.forEach(t),Ljo=i(Jt),m(RC.$$.fragment,Jt),Jt.forEach(t),_l.forEach(t),MBe=i(c),Rd=n(c,"H2",{class:!0});var S$e=s(Rd);hv=n(S$e,"A",{id:!0,class:!0,href:!0});var ait=s(hv);Afe=n(ait,"SPAN",{});var nit=s(Afe);m(BC.$$.fragment,nit),nit.forEach(t),ait.forEach(t),xjo=i(S$e),yfe=n(S$e,"SPAN",{});var sit=s(yfe);kjo=r(sit,"AutoModelForImageClassification"),sit.forEach(t),S$e.forEach(t),EBe=i(c),lr=n(c,"DIV",{class:!0});var bl=s(lr);m(PC.$$.fragment,bl),Sjo=i(bl),Bd=n(bl,"P",{});var JU=s(Bd);Rjo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HD=n(JU,"A",{href:!0});var lit=s(HD);Bjo=r(lit,"from_pretrained()"),lit.forEach(t),Pjo=r(JU," class method or the "),UD=n(JU,"A",{href:!0});var iit=s(UD);$jo=r(iit,"from_config()"),iit.forEach(t),Ijo=r(JU,` class
method.`),JU.forEach(t),qjo=i(bl),$C=n(bl,"P",{});var R$e=s($C);Njo=r(R$e,"This class cannot be instantiated directly using "),Lfe=n(R$e,"CODE",{});var dit=s(Lfe);jjo=r(dit,"__init__()"),dit.forEach(t),Djo=r(R$e," (throws an error)."),R$e.forEach(t),Gjo=i(bl),ot=n(bl,"DIV",{class:!0});var vl=s(ot);m(IC.$$.fragment,vl),Ojo=i(vl),xfe=n(vl,"P",{});var cit=s(xfe);Vjo=r(cit,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cit.forEach(t),Xjo=i(vl),Pd=n(vl,"P",{});var YU=s(Pd);zjo=r(YU,`Note:
Loading a model from its configuration file does `),kfe=n(YU,"STRONG",{});var fit=s(kfe);Qjo=r(fit,"not"),fit.forEach(t),Wjo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=n(YU,"A",{href:!0});var mit=s(JD);Hjo=r(mit,"from_pretrained()"),mit.forEach(t),Ujo=r(YU," to load the model weights."),YU.forEach(t),Jjo=i(vl),Sfe=n(vl,"P",{});var git=s(Sfe);Yjo=r(git,"Examples:"),git.forEach(t),Kjo=i(vl),m(qC.$$.fragment,vl),vl.forEach(t),Zjo=i(bl),He=n(bl,"DIV",{class:!0});var Yt=s(He);m(NC.$$.fragment,Yt),eDo=i(Yt),Rfe=n(Yt,"P",{});var hit=s(Rfe);oDo=r(hit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hit.forEach(t),rDo=i(Yt),on=n(Yt,"P",{});var XE=s(on);tDo=r(XE,"The model class to instantiate is selected based on the "),Bfe=n(XE,"CODE",{});var pit=s(Bfe);aDo=r(pit,"model_type"),pit.forEach(t),nDo=r(XE,` property of the config object (either
passed as an argument or loaded from `),Pfe=n(XE,"CODE",{});var _it=s(Pfe);sDo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),lDo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=n(XE,"CODE",{});var uit=s($fe);iDo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),dDo=r(XE,":"),XE.forEach(t),cDo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);pv=n(ge,"LI",{});var iye=s(pv);Ife=n(iye,"STRONG",{});var bit=s(Ife);fDo=r(bit,"beit"),bit.forEach(t),mDo=r(iye," \u2014 "),YD=n(iye,"A",{href:!0});var vit=s(YD);gDo=r(vit,"BeitForImageClassification"),vit.forEach(t),hDo=r(iye," (BEiT model)"),iye.forEach(t),pDo=i(ge),_v=n(ge,"LI",{});var dye=s(_v);qfe=n(dye,"STRONG",{});var Fit=s(qfe);_Do=r(Fit,"convnext"),Fit.forEach(t),uDo=r(dye," \u2014 "),KD=n(dye,"A",{href:!0});var Tit=s(KD);bDo=r(Tit,"ConvNextForImageClassification"),Tit.forEach(t),vDo=r(dye," (ConvNext model)"),dye.forEach(t),FDo=i(ge),uv=n(ge,"LI",{});var cye=s(uv);Nfe=n(cye,"STRONG",{});var Mit=s(Nfe);TDo=r(Mit,"data2vec-vision"),Mit.forEach(t),MDo=r(cye," \u2014 "),ZD=n(cye,"A",{href:!0});var Eit=s(ZD);EDo=r(Eit,"Data2VecVisionForImageClassification"),Eit.forEach(t),CDo=r(cye," (Data2VecVision model)"),cye.forEach(t),wDo=i(ge),Vs=n(ge,"LI",{});var M9=s(Vs);jfe=n(M9,"STRONG",{});var Cit=s(jfe);ADo=r(Cit,"deit"),Cit.forEach(t),yDo=r(M9," \u2014 "),eG=n(M9,"A",{href:!0});var wit=s(eG);LDo=r(wit,"DeiTForImageClassification"),wit.forEach(t),xDo=r(M9," or "),oG=n(M9,"A",{href:!0});var Ait=s(oG);kDo=r(Ait,"DeiTForImageClassificationWithTeacher"),Ait.forEach(t),SDo=r(M9," (DeiT model)"),M9.forEach(t),RDo=i(ge),bv=n(ge,"LI",{});var fye=s(bv);Dfe=n(fye,"STRONG",{});var yit=s(Dfe);BDo=r(yit,"imagegpt"),yit.forEach(t),PDo=r(fye," \u2014 "),rG=n(fye,"A",{href:!0});var Lit=s(rG);$Do=r(Lit,"ImageGPTForImageClassification"),Lit.forEach(t),IDo=r(fye," (ImageGPT model)"),fye.forEach(t),qDo=i(ge),ma=n(ge,"LI",{});var qf=s(ma);Gfe=n(qf,"STRONG",{});var xit=s(Gfe);NDo=r(xit,"perceiver"),xit.forEach(t),jDo=r(qf," \u2014 "),tG=n(qf,"A",{href:!0});var kit=s(tG);DDo=r(kit,"PerceiverForImageClassificationLearned"),kit.forEach(t),GDo=r(qf," or "),aG=n(qf,"A",{href:!0});var Sit=s(aG);ODo=r(Sit,"PerceiverForImageClassificationFourier"),Sit.forEach(t),VDo=r(qf," or "),nG=n(qf,"A",{href:!0});var Rit=s(nG);XDo=r(Rit,"PerceiverForImageClassificationConvProcessing"),Rit.forEach(t),zDo=r(qf," (Perceiver model)"),qf.forEach(t),QDo=i(ge),vv=n(ge,"LI",{});var mye=s(vv);Ofe=n(mye,"STRONG",{});var Bit=s(Ofe);WDo=r(Bit,"poolformer"),Bit.forEach(t),HDo=r(mye," \u2014 "),sG=n(mye,"A",{href:!0});var Pit=s(sG);UDo=r(Pit,"PoolFormerForImageClassification"),Pit.forEach(t),JDo=r(mye," (PoolFormer model)"),mye.forEach(t),YDo=i(ge),Fv=n(ge,"LI",{});var gye=s(Fv);Vfe=n(gye,"STRONG",{});var $it=s(Vfe);KDo=r($it,"regnet"),$it.forEach(t),ZDo=r(gye," \u2014 "),lG=n(gye,"A",{href:!0});var Iit=s(lG);eGo=r(Iit,"RegNetForImageClassification"),Iit.forEach(t),oGo=r(gye," (RegNet model)"),gye.forEach(t),rGo=i(ge),Tv=n(ge,"LI",{});var hye=s(Tv);Xfe=n(hye,"STRONG",{});var qit=s(Xfe);tGo=r(qit,"resnet"),qit.forEach(t),aGo=r(hye," \u2014 "),iG=n(hye,"A",{href:!0});var Nit=s(iG);nGo=r(Nit,"ResNetForImageClassification"),Nit.forEach(t),sGo=r(hye," (ResNet model)"),hye.forEach(t),lGo=i(ge),Mv=n(ge,"LI",{});var pye=s(Mv);zfe=n(pye,"STRONG",{});var jit=s(zfe);iGo=r(jit,"segformer"),jit.forEach(t),dGo=r(pye," \u2014 "),dG=n(pye,"A",{href:!0});var Dit=s(dG);cGo=r(Dit,"SegformerForImageClassification"),Dit.forEach(t),fGo=r(pye," (SegFormer model)"),pye.forEach(t),mGo=i(ge),Ev=n(ge,"LI",{});var _ye=s(Ev);Qfe=n(_ye,"STRONG",{});var Git=s(Qfe);gGo=r(Git,"swin"),Git.forEach(t),hGo=r(_ye," \u2014 "),cG=n(_ye,"A",{href:!0});var Oit=s(cG);pGo=r(Oit,"SwinForImageClassification"),Oit.forEach(t),_Go=r(_ye," (Swin model)"),_ye.forEach(t),uGo=i(ge),Cv=n(ge,"LI",{});var uye=s(Cv);Wfe=n(uye,"STRONG",{});var Vit=s(Wfe);bGo=r(Vit,"van"),Vit.forEach(t),vGo=r(uye," \u2014 "),fG=n(uye,"A",{href:!0});var Xit=s(fG);FGo=r(Xit,"VanForImageClassification"),Xit.forEach(t),TGo=r(uye," (VAN model)"),uye.forEach(t),MGo=i(ge),wv=n(ge,"LI",{});var bye=s(wv);Hfe=n(bye,"STRONG",{});var zit=s(Hfe);EGo=r(zit,"vit"),zit.forEach(t),CGo=r(bye," \u2014 "),mG=n(bye,"A",{href:!0});var Qit=s(mG);wGo=r(Qit,"ViTForImageClassification"),Qit.forEach(t),AGo=r(bye," (ViT model)"),bye.forEach(t),ge.forEach(t),yGo=i(Yt),Av=n(Yt,"P",{});var vye=s(Av);LGo=r(vye,"The model is set in evaluation mode by default using "),Ufe=n(vye,"CODE",{});var Wit=s(Ufe);xGo=r(Wit,"model.eval()"),Wit.forEach(t),kGo=r(vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=n(vye,"CODE",{});var Hit=s(Jfe);SGo=r(Hit,"model.train()"),Hit.forEach(t),vye.forEach(t),RGo=i(Yt),Yfe=n(Yt,"P",{});var Uit=s(Yfe);BGo=r(Uit,"Examples:"),Uit.forEach(t),PGo=i(Yt),m(jC.$$.fragment,Yt),Yt.forEach(t),bl.forEach(t),CBe=i(c),$d=n(c,"H2",{class:!0});var B$e=s($d);yv=n(B$e,"A",{id:!0,class:!0,href:!0});var Jit=s(yv);Kfe=n(Jit,"SPAN",{});var Yit=s(Kfe);m(DC.$$.fragment,Yit),Yit.forEach(t),Jit.forEach(t),$Go=i(B$e),Zfe=n(B$e,"SPAN",{});var Kit=s(Zfe);IGo=r(Kit,"AutoModelForVision2Seq"),Kit.forEach(t),B$e.forEach(t),wBe=i(c),ir=n(c,"DIV",{class:!0});var Fl=s(ir);m(GC.$$.fragment,Fl),qGo=i(Fl),Id=n(Fl,"P",{});var KU=s(Id);NGo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gG=n(KU,"A",{href:!0});var Zit=s(gG);jGo=r(Zit,"from_pretrained()"),Zit.forEach(t),DGo=r(KU," class method or the "),hG=n(KU,"A",{href:!0});var edt=s(hG);GGo=r(edt,"from_config()"),edt.forEach(t),OGo=r(KU,` class
method.`),KU.forEach(t),VGo=i(Fl),OC=n(Fl,"P",{});var P$e=s(OC);XGo=r(P$e,"This class cannot be instantiated directly using "),eme=n(P$e,"CODE",{});var odt=s(eme);zGo=r(odt,"__init__()"),odt.forEach(t),QGo=r(P$e," (throws an error)."),P$e.forEach(t),WGo=i(Fl),rt=n(Fl,"DIV",{class:!0});var Tl=s(rt);m(VC.$$.fragment,Tl),HGo=i(Tl),ome=n(Tl,"P",{});var rdt=s(ome);UGo=r(rdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rdt.forEach(t),JGo=i(Tl),qd=n(Tl,"P",{});var ZU=s(qd);YGo=r(ZU,`Note:
Loading a model from its configuration file does `),rme=n(ZU,"STRONG",{});var tdt=s(rme);KGo=r(tdt,"not"),tdt.forEach(t),ZGo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=n(ZU,"A",{href:!0});var adt=s(pG);eOo=r(adt,"from_pretrained()"),adt.forEach(t),oOo=r(ZU," to load the model weights."),ZU.forEach(t),rOo=i(Tl),tme=n(Tl,"P",{});var ndt=s(tme);tOo=r(ndt,"Examples:"),ndt.forEach(t),aOo=i(Tl),m(XC.$$.fragment,Tl),Tl.forEach(t),nOo=i(Fl),Ue=n(Fl,"DIV",{class:!0});var Kt=s(Ue);m(zC.$$.fragment,Kt),sOo=i(Kt),ame=n(Kt,"P",{});var sdt=s(ame);lOo=r(sdt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sdt.forEach(t),iOo=i(Kt),rn=n(Kt,"P",{});var zE=s(rn);dOo=r(zE,"The model class to instantiate is selected based on the "),nme=n(zE,"CODE",{});var ldt=s(nme);cOo=r(ldt,"model_type"),ldt.forEach(t),fOo=r(zE,` property of the config object (either
passed as an argument or loaded from `),sme=n(zE,"CODE",{});var idt=s(sme);mOo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),gOo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=n(zE,"CODE",{});var ddt=s(lme);hOo=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),pOo=r(zE,":"),zE.forEach(t),_Oo=i(Kt),ime=n(Kt,"UL",{});var cdt=s(ime);Lv=n(cdt,"LI",{});var Fye=s(Lv);dme=n(Fye,"STRONG",{});var fdt=s(dme);uOo=r(fdt,"vision-encoder-decoder"),fdt.forEach(t),bOo=r(Fye," \u2014 "),_G=n(Fye,"A",{href:!0});var mdt=s(_G);vOo=r(mdt,"VisionEncoderDecoderModel"),mdt.forEach(t),FOo=r(Fye," (Vision Encoder decoder model)"),Fye.forEach(t),cdt.forEach(t),TOo=i(Kt),xv=n(Kt,"P",{});var Tye=s(xv);MOo=r(Tye,"The model is set in evaluation mode by default using "),cme=n(Tye,"CODE",{});var gdt=s(cme);EOo=r(gdt,"model.eval()"),gdt.forEach(t),COo=r(Tye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(Tye,"CODE",{});var hdt=s(fme);wOo=r(hdt,"model.train()"),hdt.forEach(t),Tye.forEach(t),AOo=i(Kt),mme=n(Kt,"P",{});var pdt=s(mme);yOo=r(pdt,"Examples:"),pdt.forEach(t),LOo=i(Kt),m(QC.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),ABe=i(c),Nd=n(c,"H2",{class:!0});var $$e=s(Nd);kv=n($$e,"A",{id:!0,class:!0,href:!0});var _dt=s(kv);gme=n(_dt,"SPAN",{});var udt=s(gme);m(WC.$$.fragment,udt),udt.forEach(t),_dt.forEach(t),xOo=i($$e),hme=n($$e,"SPAN",{});var bdt=s(hme);kOo=r(bdt,"AutoModelForAudioClassification"),bdt.forEach(t),$$e.forEach(t),yBe=i(c),dr=n(c,"DIV",{class:!0});var Ml=s(dr);m(HC.$$.fragment,Ml),SOo=i(Ml),jd=n(Ml,"P",{});var eJ=s(jd);ROo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uG=n(eJ,"A",{href:!0});var vdt=s(uG);BOo=r(vdt,"from_pretrained()"),vdt.forEach(t),POo=r(eJ," class method or the "),bG=n(eJ,"A",{href:!0});var Fdt=s(bG);$Oo=r(Fdt,"from_config()"),Fdt.forEach(t),IOo=r(eJ,` class
method.`),eJ.forEach(t),qOo=i(Ml),UC=n(Ml,"P",{});var I$e=s(UC);NOo=r(I$e,"This class cannot be instantiated directly using "),pme=n(I$e,"CODE",{});var Tdt=s(pme);jOo=r(Tdt,"__init__()"),Tdt.forEach(t),DOo=r(I$e," (throws an error)."),I$e.forEach(t),GOo=i(Ml),tt=n(Ml,"DIV",{class:!0});var El=s(tt);m(JC.$$.fragment,El),OOo=i(El),_me=n(El,"P",{});var Mdt=s(_me);VOo=r(Mdt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mdt.forEach(t),XOo=i(El),Dd=n(El,"P",{});var oJ=s(Dd);zOo=r(oJ,`Note:
Loading a model from its configuration file does `),ume=n(oJ,"STRONG",{});var Edt=s(ume);QOo=r(Edt,"not"),Edt.forEach(t),WOo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=n(oJ,"A",{href:!0});var Cdt=s(vG);HOo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),UOo=r(oJ," to load the model weights."),oJ.forEach(t),JOo=i(El),bme=n(El,"P",{});var wdt=s(bme);YOo=r(wdt,"Examples:"),wdt.forEach(t),KOo=i(El),m(YC.$$.fragment,El),El.forEach(t),ZOo=i(Ml),Je=n(Ml,"DIV",{class:!0});var Zt=s(Je);m(KC.$$.fragment,Zt),eVo=i(Zt),vme=n(Zt,"P",{});var Adt=s(vme);oVo=r(Adt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Adt.forEach(t),rVo=i(Zt),tn=n(Zt,"P",{});var QE=s(tn);tVo=r(QE,"The model class to instantiate is selected based on the "),Fme=n(QE,"CODE",{});var ydt=s(Fme);aVo=r(ydt,"model_type"),ydt.forEach(t),nVo=r(QE,` property of the config object (either
passed as an argument or loaded from `),Tme=n(QE,"CODE",{});var Ldt=s(Tme);sVo=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),lVo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(QE,"CODE",{});var xdt=s(Mme);iVo=r(xdt,"pretrained_model_name_or_path"),xdt.forEach(t),dVo=r(QE,":"),QE.forEach(t),cVo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);Sv=n(Do,"LI",{});var Mye=s(Sv);Eme=n(Mye,"STRONG",{});var kdt=s(Eme);fVo=r(kdt,"data2vec-audio"),kdt.forEach(t),mVo=r(Mye," \u2014 "),FG=n(Mye,"A",{href:!0});var Sdt=s(FG);gVo=r(Sdt,"Data2VecAudioForSequenceClassification"),Sdt.forEach(t),hVo=r(Mye," (Data2VecAudio model)"),Mye.forEach(t),pVo=i(Do),Rv=n(Do,"LI",{});var Eye=s(Rv);Cme=n(Eye,"STRONG",{});var Rdt=s(Cme);_Vo=r(Rdt,"hubert"),Rdt.forEach(t),uVo=r(Eye," \u2014 "),TG=n(Eye,"A",{href:!0});var Bdt=s(TG);bVo=r(Bdt,"HubertForSequenceClassification"),Bdt.forEach(t),vVo=r(Eye," (Hubert model)"),Eye.forEach(t),FVo=i(Do),Bv=n(Do,"LI",{});var Cye=s(Bv);wme=n(Cye,"STRONG",{});var Pdt=s(wme);TVo=r(Pdt,"sew"),Pdt.forEach(t),MVo=r(Cye," \u2014 "),MG=n(Cye,"A",{href:!0});var $dt=s(MG);EVo=r($dt,"SEWForSequenceClassification"),$dt.forEach(t),CVo=r(Cye," (SEW model)"),Cye.forEach(t),wVo=i(Do),Pv=n(Do,"LI",{});var wye=s(Pv);Ame=n(wye,"STRONG",{});var Idt=s(Ame);AVo=r(Idt,"sew-d"),Idt.forEach(t),yVo=r(wye," \u2014 "),EG=n(wye,"A",{href:!0});var qdt=s(EG);LVo=r(qdt,"SEWDForSequenceClassification"),qdt.forEach(t),xVo=r(wye," (SEW-D model)"),wye.forEach(t),kVo=i(Do),$v=n(Do,"LI",{});var Aye=s($v);yme=n(Aye,"STRONG",{});var Ndt=s(yme);SVo=r(Ndt,"unispeech"),Ndt.forEach(t),RVo=r(Aye," \u2014 "),CG=n(Aye,"A",{href:!0});var jdt=s(CG);BVo=r(jdt,"UniSpeechForSequenceClassification"),jdt.forEach(t),PVo=r(Aye," (UniSpeech model)"),Aye.forEach(t),$Vo=i(Do),Iv=n(Do,"LI",{});var yye=s(Iv);Lme=n(yye,"STRONG",{});var Ddt=s(Lme);IVo=r(Ddt,"unispeech-sat"),Ddt.forEach(t),qVo=r(yye," \u2014 "),wG=n(yye,"A",{href:!0});var Gdt=s(wG);NVo=r(Gdt,"UniSpeechSatForSequenceClassification"),Gdt.forEach(t),jVo=r(yye," (UniSpeechSat model)"),yye.forEach(t),DVo=i(Do),qv=n(Do,"LI",{});var Lye=s(qv);xme=n(Lye,"STRONG",{});var Odt=s(xme);GVo=r(Odt,"wav2vec2"),Odt.forEach(t),OVo=r(Lye," \u2014 "),AG=n(Lye,"A",{href:!0});var Vdt=s(AG);VVo=r(Vdt,"Wav2Vec2ForSequenceClassification"),Vdt.forEach(t),XVo=r(Lye," (Wav2Vec2 model)"),Lye.forEach(t),zVo=i(Do),Nv=n(Do,"LI",{});var xye=s(Nv);kme=n(xye,"STRONG",{});var Xdt=s(kme);QVo=r(Xdt,"wavlm"),Xdt.forEach(t),WVo=r(xye," \u2014 "),yG=n(xye,"A",{href:!0});var zdt=s(yG);HVo=r(zdt,"WavLMForSequenceClassification"),zdt.forEach(t),UVo=r(xye," (WavLM model)"),xye.forEach(t),Do.forEach(t),JVo=i(Zt),jv=n(Zt,"P",{});var kye=s(jv);YVo=r(kye,"The model is set in evaluation mode by default using "),Sme=n(kye,"CODE",{});var Qdt=s(Sme);KVo=r(Qdt,"model.eval()"),Qdt.forEach(t),ZVo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rme=n(kye,"CODE",{});var Wdt=s(Rme);eXo=r(Wdt,"model.train()"),Wdt.forEach(t),kye.forEach(t),oXo=i(Zt),Bme=n(Zt,"P",{});var Hdt=s(Bme);rXo=r(Hdt,"Examples:"),Hdt.forEach(t),tXo=i(Zt),m(ZC.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),LBe=i(c),Gd=n(c,"H2",{class:!0});var q$e=s(Gd);Dv=n(q$e,"A",{id:!0,class:!0,href:!0});var Udt=s(Dv);Pme=n(Udt,"SPAN",{});var Jdt=s(Pme);m(ew.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),aXo=i(q$e),$me=n(q$e,"SPAN",{});var Ydt=s($me);nXo=r(Ydt,"AutoModelForAudioFrameClassification"),Ydt.forEach(t),q$e.forEach(t),xBe=i(c),cr=n(c,"DIV",{class:!0});var Cl=s(cr);m(ow.$$.fragment,Cl),sXo=i(Cl),Od=n(Cl,"P",{});var rJ=s(Od);lXo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),LG=n(rJ,"A",{href:!0});var Kdt=s(LG);iXo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),dXo=r(rJ," class method or the "),xG=n(rJ,"A",{href:!0});var Zdt=s(xG);cXo=r(Zdt,"from_config()"),Zdt.forEach(t),fXo=r(rJ,` class
method.`),rJ.forEach(t),mXo=i(Cl),rw=n(Cl,"P",{});var N$e=s(rw);gXo=r(N$e,"This class cannot be instantiated directly using "),Ime=n(N$e,"CODE",{});var ect=s(Ime);hXo=r(ect,"__init__()"),ect.forEach(t),pXo=r(N$e," (throws an error)."),N$e.forEach(t),_Xo=i(Cl),at=n(Cl,"DIV",{class:!0});var wl=s(at);m(tw.$$.fragment,wl),uXo=i(wl),qme=n(wl,"P",{});var oct=s(qme);bXo=r(oct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),oct.forEach(t),vXo=i(wl),Vd=n(wl,"P",{});var tJ=s(Vd);FXo=r(tJ,`Note:
Loading a model from its configuration file does `),Nme=n(tJ,"STRONG",{});var rct=s(Nme);TXo=r(rct,"not"),rct.forEach(t),MXo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=n(tJ,"A",{href:!0});var tct=s(kG);EXo=r(tct,"from_pretrained()"),tct.forEach(t),CXo=r(tJ," to load the model weights."),tJ.forEach(t),wXo=i(wl),jme=n(wl,"P",{});var act=s(jme);AXo=r(act,"Examples:"),act.forEach(t),yXo=i(wl),m(aw.$$.fragment,wl),wl.forEach(t),LXo=i(Cl),Ye=n(Cl,"DIV",{class:!0});var ea=s(Ye);m(nw.$$.fragment,ea),xXo=i(ea),Dme=n(ea,"P",{});var nct=s(Dme);kXo=r(nct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),nct.forEach(t),SXo=i(ea),an=n(ea,"P",{});var WE=s(an);RXo=r(WE,"The model class to instantiate is selected based on the "),Gme=n(WE,"CODE",{});var sct=s(Gme);BXo=r(sct,"model_type"),sct.forEach(t),PXo=r(WE,` property of the config object (either
passed as an argument or loaded from `),Ome=n(WE,"CODE",{});var lct=s(Ome);$Xo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),IXo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=n(WE,"CODE",{});var ict=s(Vme);qXo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),NXo=r(WE,":"),WE.forEach(t),jXo=i(ea),nn=n(ea,"UL",{});var HE=s(nn);Gv=n(HE,"LI",{});var Sye=s(Gv);Xme=n(Sye,"STRONG",{});var dct=s(Xme);DXo=r(dct,"data2vec-audio"),dct.forEach(t),GXo=r(Sye," \u2014 "),SG=n(Sye,"A",{href:!0});var cct=s(SG);OXo=r(cct,"Data2VecAudioForAudioFrameClassification"),cct.forEach(t),VXo=r(Sye," (Data2VecAudio model)"),Sye.forEach(t),XXo=i(HE),Ov=n(HE,"LI",{});var Rye=s(Ov);zme=n(Rye,"STRONG",{});var fct=s(zme);zXo=r(fct,"unispeech-sat"),fct.forEach(t),QXo=r(Rye," \u2014 "),RG=n(Rye,"A",{href:!0});var mct=s(RG);WXo=r(mct,"UniSpeechSatForAudioFrameClassification"),mct.forEach(t),HXo=r(Rye," (UniSpeechSat model)"),Rye.forEach(t),UXo=i(HE),Vv=n(HE,"LI",{});var Bye=s(Vv);Qme=n(Bye,"STRONG",{});var gct=s(Qme);JXo=r(gct,"wav2vec2"),gct.forEach(t),YXo=r(Bye," \u2014 "),BG=n(Bye,"A",{href:!0});var hct=s(BG);KXo=r(hct,"Wav2Vec2ForAudioFrameClassification"),hct.forEach(t),ZXo=r(Bye," (Wav2Vec2 model)"),Bye.forEach(t),ezo=i(HE),Xv=n(HE,"LI",{});var Pye=s(Xv);Wme=n(Pye,"STRONG",{});var pct=s(Wme);ozo=r(pct,"wavlm"),pct.forEach(t),rzo=r(Pye," \u2014 "),PG=n(Pye,"A",{href:!0});var _ct=s(PG);tzo=r(_ct,"WavLMForAudioFrameClassification"),_ct.forEach(t),azo=r(Pye," (WavLM model)"),Pye.forEach(t),HE.forEach(t),nzo=i(ea),zv=n(ea,"P",{});var $ye=s(zv);szo=r($ye,"The model is set in evaluation mode by default using "),Hme=n($ye,"CODE",{});var uct=s(Hme);lzo=r(uct,"model.eval()"),uct.forEach(t),izo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n($ye,"CODE",{});var bct=s(Ume);dzo=r(bct,"model.train()"),bct.forEach(t),$ye.forEach(t),czo=i(ea),Jme=n(ea,"P",{});var vct=s(Jme);fzo=r(vct,"Examples:"),vct.forEach(t),mzo=i(ea),m(sw.$$.fragment,ea),ea.forEach(t),Cl.forEach(t),kBe=i(c),Xd=n(c,"H2",{class:!0});var j$e=s(Xd);Qv=n(j$e,"A",{id:!0,class:!0,href:!0});var Fct=s(Qv);Yme=n(Fct,"SPAN",{});var Tct=s(Yme);m(lw.$$.fragment,Tct),Tct.forEach(t),Fct.forEach(t),gzo=i(j$e),Kme=n(j$e,"SPAN",{});var Mct=s(Kme);hzo=r(Mct,"AutoModelForCTC"),Mct.forEach(t),j$e.forEach(t),SBe=i(c),fr=n(c,"DIV",{class:!0});var Al=s(fr);m(iw.$$.fragment,Al),pzo=i(Al),zd=n(Al,"P",{});var aJ=s(zd);_zo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$G=n(aJ,"A",{href:!0});var Ect=s($G);uzo=r(Ect,"from_pretrained()"),Ect.forEach(t),bzo=r(aJ," class method or the "),IG=n(aJ,"A",{href:!0});var Cct=s(IG);vzo=r(Cct,"from_config()"),Cct.forEach(t),Fzo=r(aJ,` class
method.`),aJ.forEach(t),Tzo=i(Al),dw=n(Al,"P",{});var D$e=s(dw);Mzo=r(D$e,"This class cannot be instantiated directly using "),Zme=n(D$e,"CODE",{});var wct=s(Zme);Ezo=r(wct,"__init__()"),wct.forEach(t),Czo=r(D$e," (throws an error)."),D$e.forEach(t),wzo=i(Al),nt=n(Al,"DIV",{class:!0});var yl=s(nt);m(cw.$$.fragment,yl),Azo=i(yl),ege=n(yl,"P",{});var Act=s(ege);yzo=r(Act,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Act.forEach(t),Lzo=i(yl),Qd=n(yl,"P",{});var nJ=s(Qd);xzo=r(nJ,`Note:
Loading a model from its configuration file does `),oge=n(nJ,"STRONG",{});var yct=s(oge);kzo=r(yct,"not"),yct.forEach(t),Szo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qG=n(nJ,"A",{href:!0});var Lct=s(qG);Rzo=r(Lct,"from_pretrained()"),Lct.forEach(t),Bzo=r(nJ," to load the model weights."),nJ.forEach(t),Pzo=i(yl),rge=n(yl,"P",{});var xct=s(rge);$zo=r(xct,"Examples:"),xct.forEach(t),Izo=i(yl),m(fw.$$.fragment,yl),yl.forEach(t),qzo=i(Al),Ke=n(Al,"DIV",{class:!0});var oa=s(Ke);m(mw.$$.fragment,oa),Nzo=i(oa),tge=n(oa,"P",{});var kct=s(tge);jzo=r(kct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kct.forEach(t),Dzo=i(oa),sn=n(oa,"P",{});var UE=s(sn);Gzo=r(UE,"The model class to instantiate is selected based on the "),age=n(UE,"CODE",{});var Sct=s(age);Ozo=r(Sct,"model_type"),Sct.forEach(t),Vzo=r(UE,` property of the config object (either
passed as an argument or loaded from `),nge=n(UE,"CODE",{});var Rct=s(nge);Xzo=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),zzo=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=n(UE,"CODE",{});var Bct=s(sge);Qzo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),Wzo=r(UE,":"),UE.forEach(t),Hzo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Wv=n(Go,"LI",{});var Iye=s(Wv);lge=n(Iye,"STRONG",{});var Pct=s(lge);Uzo=r(Pct,"data2vec-audio"),Pct.forEach(t),Jzo=r(Iye," \u2014 "),NG=n(Iye,"A",{href:!0});var $ct=s(NG);Yzo=r($ct,"Data2VecAudioForCTC"),$ct.forEach(t),Kzo=r(Iye," (Data2VecAudio model)"),Iye.forEach(t),Zzo=i(Go),Hv=n(Go,"LI",{});var qye=s(Hv);ige=n(qye,"STRONG",{});var Ict=s(ige);eQo=r(Ict,"hubert"),Ict.forEach(t),oQo=r(qye," \u2014 "),jG=n(qye,"A",{href:!0});var qct=s(jG);rQo=r(qct,"HubertForCTC"),qct.forEach(t),tQo=r(qye," (Hubert model)"),qye.forEach(t),aQo=i(Go),Uv=n(Go,"LI",{});var Nye=s(Uv);dge=n(Nye,"STRONG",{});var Nct=s(dge);nQo=r(Nct,"sew"),Nct.forEach(t),sQo=r(Nye," \u2014 "),DG=n(Nye,"A",{href:!0});var jct=s(DG);lQo=r(jct,"SEWForCTC"),jct.forEach(t),iQo=r(Nye," (SEW model)"),Nye.forEach(t),dQo=i(Go),Jv=n(Go,"LI",{});var jye=s(Jv);cge=n(jye,"STRONG",{});var Dct=s(cge);cQo=r(Dct,"sew-d"),Dct.forEach(t),fQo=r(jye," \u2014 "),GG=n(jye,"A",{href:!0});var Gct=s(GG);mQo=r(Gct,"SEWDForCTC"),Gct.forEach(t),gQo=r(jye," (SEW-D model)"),jye.forEach(t),hQo=i(Go),Yv=n(Go,"LI",{});var Dye=s(Yv);fge=n(Dye,"STRONG",{});var Oct=s(fge);pQo=r(Oct,"unispeech"),Oct.forEach(t),_Qo=r(Dye," \u2014 "),OG=n(Dye,"A",{href:!0});var Vct=s(OG);uQo=r(Vct,"UniSpeechForCTC"),Vct.forEach(t),bQo=r(Dye," (UniSpeech model)"),Dye.forEach(t),vQo=i(Go),Kv=n(Go,"LI",{});var Gye=s(Kv);mge=n(Gye,"STRONG",{});var Xct=s(mge);FQo=r(Xct,"unispeech-sat"),Xct.forEach(t),TQo=r(Gye," \u2014 "),VG=n(Gye,"A",{href:!0});var zct=s(VG);MQo=r(zct,"UniSpeechSatForCTC"),zct.forEach(t),EQo=r(Gye," (UniSpeechSat model)"),Gye.forEach(t),CQo=i(Go),Zv=n(Go,"LI",{});var Oye=s(Zv);gge=n(Oye,"STRONG",{});var Qct=s(gge);wQo=r(Qct,"wav2vec2"),Qct.forEach(t),AQo=r(Oye," \u2014 "),XG=n(Oye,"A",{href:!0});var Wct=s(XG);yQo=r(Wct,"Wav2Vec2ForCTC"),Wct.forEach(t),LQo=r(Oye," (Wav2Vec2 model)"),Oye.forEach(t),xQo=i(Go),eF=n(Go,"LI",{});var Vye=s(eF);hge=n(Vye,"STRONG",{});var Hct=s(hge);kQo=r(Hct,"wavlm"),Hct.forEach(t),SQo=r(Vye," \u2014 "),zG=n(Vye,"A",{href:!0});var Uct=s(zG);RQo=r(Uct,"WavLMForCTC"),Uct.forEach(t),BQo=r(Vye," (WavLM model)"),Vye.forEach(t),Go.forEach(t),PQo=i(oa),oF=n(oa,"P",{});var Xye=s(oF);$Qo=r(Xye,"The model is set in evaluation mode by default using "),pge=n(Xye,"CODE",{});var Jct=s(pge);IQo=r(Jct,"model.eval()"),Jct.forEach(t),qQo=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ge=n(Xye,"CODE",{});var Yct=s(_ge);NQo=r(Yct,"model.train()"),Yct.forEach(t),Xye.forEach(t),jQo=i(oa),uge=n(oa,"P",{});var Kct=s(uge);DQo=r(Kct,"Examples:"),Kct.forEach(t),GQo=i(oa),m(gw.$$.fragment,oa),oa.forEach(t),Al.forEach(t),RBe=i(c),Wd=n(c,"H2",{class:!0});var G$e=s(Wd);rF=n(G$e,"A",{id:!0,class:!0,href:!0});var Zct=s(rF);bge=n(Zct,"SPAN",{});var eft=s(bge);m(hw.$$.fragment,eft),eft.forEach(t),Zct.forEach(t),OQo=i(G$e),vge=n(G$e,"SPAN",{});var oft=s(vge);VQo=r(oft,"AutoModelForSpeechSeq2Seq"),oft.forEach(t),G$e.forEach(t),BBe=i(c),mr=n(c,"DIV",{class:!0});var Ll=s(mr);m(pw.$$.fragment,Ll),XQo=i(Ll),Hd=n(Ll,"P",{});var sJ=s(Hd);zQo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QG=n(sJ,"A",{href:!0});var rft=s(QG);QQo=r(rft,"from_pretrained()"),rft.forEach(t),WQo=r(sJ," class method or the "),WG=n(sJ,"A",{href:!0});var tft=s(WG);HQo=r(tft,"from_config()"),tft.forEach(t),UQo=r(sJ,` class
method.`),sJ.forEach(t),JQo=i(Ll),_w=n(Ll,"P",{});var O$e=s(_w);YQo=r(O$e,"This class cannot be instantiated directly using "),Fge=n(O$e,"CODE",{});var aft=s(Fge);KQo=r(aft,"__init__()"),aft.forEach(t),ZQo=r(O$e," (throws an error)."),O$e.forEach(t),eWo=i(Ll),st=n(Ll,"DIV",{class:!0});var xl=s(st);m(uw.$$.fragment,xl),oWo=i(xl),Tge=n(xl,"P",{});var nft=s(Tge);rWo=r(nft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nft.forEach(t),tWo=i(xl),Ud=n(xl,"P",{});var lJ=s(Ud);aWo=r(lJ,`Note:
Loading a model from its configuration file does `),Mge=n(lJ,"STRONG",{});var sft=s(Mge);nWo=r(sft,"not"),sft.forEach(t),sWo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(lJ,"A",{href:!0});var lft=s(HG);lWo=r(lft,"from_pretrained()"),lft.forEach(t),iWo=r(lJ," to load the model weights."),lJ.forEach(t),dWo=i(xl),Ege=n(xl,"P",{});var ift=s(Ege);cWo=r(ift,"Examples:"),ift.forEach(t),fWo=i(xl),m(bw.$$.fragment,xl),xl.forEach(t),mWo=i(Ll),Ze=n(Ll,"DIV",{class:!0});var ra=s(Ze);m(vw.$$.fragment,ra),gWo=i(ra),Cge=n(ra,"P",{});var dft=s(Cge);hWo=r(dft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dft.forEach(t),pWo=i(ra),ln=n(ra,"P",{});var JE=s(ln);_Wo=r(JE,"The model class to instantiate is selected based on the "),wge=n(JE,"CODE",{});var cft=s(wge);uWo=r(cft,"model_type"),cft.forEach(t),bWo=r(JE,` property of the config object (either
passed as an argument or loaded from `),Age=n(JE,"CODE",{});var fft=s(Age);vWo=r(fft,"pretrained_model_name_or_path"),fft.forEach(t),FWo=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yge=n(JE,"CODE",{});var mft=s(yge);TWo=r(mft,"pretrained_model_name_or_path"),mft.forEach(t),MWo=r(JE,":"),JE.forEach(t),EWo=i(ra),Fw=n(ra,"UL",{});var V$e=s(Fw);tF=n(V$e,"LI",{});var zye=s(tF);Lge=n(zye,"STRONG",{});var gft=s(Lge);CWo=r(gft,"speech-encoder-decoder"),gft.forEach(t),wWo=r(zye," \u2014 "),UG=n(zye,"A",{href:!0});var hft=s(UG);AWo=r(hft,"SpeechEncoderDecoderModel"),hft.forEach(t),yWo=r(zye," (Speech Encoder decoder model)"),zye.forEach(t),LWo=i(V$e),aF=n(V$e,"LI",{});var Qye=s(aF);xge=n(Qye,"STRONG",{});var pft=s(xge);xWo=r(pft,"speech_to_text"),pft.forEach(t),kWo=r(Qye," \u2014 "),JG=n(Qye,"A",{href:!0});var _ft=s(JG);SWo=r(_ft,"Speech2TextForConditionalGeneration"),_ft.forEach(t),RWo=r(Qye," (Speech2Text model)"),Qye.forEach(t),V$e.forEach(t),BWo=i(ra),nF=n(ra,"P",{});var Wye=s(nF);PWo=r(Wye,"The model is set in evaluation mode by default using "),kge=n(Wye,"CODE",{});var uft=s(kge);$Wo=r(uft,"model.eval()"),uft.forEach(t),IWo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(Wye,"CODE",{});var bft=s(Sge);qWo=r(bft,"model.train()"),bft.forEach(t),Wye.forEach(t),NWo=i(ra),Rge=n(ra,"P",{});var vft=s(Rge);jWo=r(vft,"Examples:"),vft.forEach(t),DWo=i(ra),m(Tw.$$.fragment,ra),ra.forEach(t),Ll.forEach(t),PBe=i(c),Jd=n(c,"H2",{class:!0});var X$e=s(Jd);sF=n(X$e,"A",{id:!0,class:!0,href:!0});var Fft=s(sF);Bge=n(Fft,"SPAN",{});var Tft=s(Bge);m(Mw.$$.fragment,Tft),Tft.forEach(t),Fft.forEach(t),GWo=i(X$e),Pge=n(X$e,"SPAN",{});var Mft=s(Pge);OWo=r(Mft,"AutoModelForAudioXVector"),Mft.forEach(t),X$e.forEach(t),$Be=i(c),gr=n(c,"DIV",{class:!0});var kl=s(gr);m(Ew.$$.fragment,kl),VWo=i(kl),Yd=n(kl,"P",{});var iJ=s(Yd);XWo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YG=n(iJ,"A",{href:!0});var Eft=s(YG);zWo=r(Eft,"from_pretrained()"),Eft.forEach(t),QWo=r(iJ," class method or the "),KG=n(iJ,"A",{href:!0});var Cft=s(KG);WWo=r(Cft,"from_config()"),Cft.forEach(t),HWo=r(iJ,` class
method.`),iJ.forEach(t),UWo=i(kl),Cw=n(kl,"P",{});var z$e=s(Cw);JWo=r(z$e,"This class cannot be instantiated directly using "),$ge=n(z$e,"CODE",{});var wft=s($ge);YWo=r(wft,"__init__()"),wft.forEach(t),KWo=r(z$e," (throws an error)."),z$e.forEach(t),ZWo=i(kl),lt=n(kl,"DIV",{class:!0});var Sl=s(lt);m(ww.$$.fragment,Sl),eHo=i(Sl),Ige=n(Sl,"P",{});var Aft=s(Ige);oHo=r(Aft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Aft.forEach(t),rHo=i(Sl),Kd=n(Sl,"P",{});var dJ=s(Kd);tHo=r(dJ,`Note:
Loading a model from its configuration file does `),qge=n(dJ,"STRONG",{});var yft=s(qge);aHo=r(yft,"not"),yft.forEach(t),nHo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=n(dJ,"A",{href:!0});var Lft=s(ZG);sHo=r(Lft,"from_pretrained()"),Lft.forEach(t),lHo=r(dJ," to load the model weights."),dJ.forEach(t),iHo=i(Sl),Nge=n(Sl,"P",{});var xft=s(Nge);dHo=r(xft,"Examples:"),xft.forEach(t),cHo=i(Sl),m(Aw.$$.fragment,Sl),Sl.forEach(t),fHo=i(kl),eo=n(kl,"DIV",{class:!0});var ta=s(eo);m(yw.$$.fragment,ta),mHo=i(ta),jge=n(ta,"P",{});var kft=s(jge);gHo=r(kft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),kft.forEach(t),hHo=i(ta),dn=n(ta,"P",{});var YE=s(dn);pHo=r(YE,"The model class to instantiate is selected based on the "),Dge=n(YE,"CODE",{});var Sft=s(Dge);_Ho=r(Sft,"model_type"),Sft.forEach(t),uHo=r(YE,` property of the config object (either
passed as an argument or loaded from `),Gge=n(YE,"CODE",{});var Rft=s(Gge);bHo=r(Rft,"pretrained_model_name_or_path"),Rft.forEach(t),vHo=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(YE,"CODE",{});var Bft=s(Oge);FHo=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),THo=r(YE,":"),YE.forEach(t),MHo=i(ta),cn=n(ta,"UL",{});var KE=s(cn);lF=n(KE,"LI",{});var Hye=s(lF);Vge=n(Hye,"STRONG",{});var Pft=s(Vge);EHo=r(Pft,"data2vec-audio"),Pft.forEach(t),CHo=r(Hye," \u2014 "),eO=n(Hye,"A",{href:!0});var $ft=s(eO);wHo=r($ft,"Data2VecAudioForXVector"),$ft.forEach(t),AHo=r(Hye," (Data2VecAudio model)"),Hye.forEach(t),yHo=i(KE),iF=n(KE,"LI",{});var Uye=s(iF);Xge=n(Uye,"STRONG",{});var Ift=s(Xge);LHo=r(Ift,"unispeech-sat"),Ift.forEach(t),xHo=r(Uye," \u2014 "),oO=n(Uye,"A",{href:!0});var qft=s(oO);kHo=r(qft,"UniSpeechSatForXVector"),qft.forEach(t),SHo=r(Uye," (UniSpeechSat model)"),Uye.forEach(t),RHo=i(KE),dF=n(KE,"LI",{});var Jye=s(dF);zge=n(Jye,"STRONG",{});var Nft=s(zge);BHo=r(Nft,"wav2vec2"),Nft.forEach(t),PHo=r(Jye," \u2014 "),rO=n(Jye,"A",{href:!0});var jft=s(rO);$Ho=r(jft,"Wav2Vec2ForXVector"),jft.forEach(t),IHo=r(Jye," (Wav2Vec2 model)"),Jye.forEach(t),qHo=i(KE),cF=n(KE,"LI",{});var Yye=s(cF);Qge=n(Yye,"STRONG",{});var Dft=s(Qge);NHo=r(Dft,"wavlm"),Dft.forEach(t),jHo=r(Yye," \u2014 "),tO=n(Yye,"A",{href:!0});var Gft=s(tO);DHo=r(Gft,"WavLMForXVector"),Gft.forEach(t),GHo=r(Yye," (WavLM model)"),Yye.forEach(t),KE.forEach(t),OHo=i(ta),fF=n(ta,"P",{});var Kye=s(fF);VHo=r(Kye,"The model is set in evaluation mode by default using "),Wge=n(Kye,"CODE",{});var Oft=s(Wge);XHo=r(Oft,"model.eval()"),Oft.forEach(t),zHo=r(Kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(Kye,"CODE",{});var Vft=s(Hge);QHo=r(Vft,"model.train()"),Vft.forEach(t),Kye.forEach(t),WHo=i(ta),Uge=n(ta,"P",{});var Xft=s(Uge);HHo=r(Xft,"Examples:"),Xft.forEach(t),UHo=i(ta),m(Lw.$$.fragment,ta),ta.forEach(t),kl.forEach(t),IBe=i(c),Zd=n(c,"H2",{class:!0});var Q$e=s(Zd);mF=n(Q$e,"A",{id:!0,class:!0,href:!0});var zft=s(mF);Jge=n(zft,"SPAN",{});var Qft=s(Jge);m(xw.$$.fragment,Qft),Qft.forEach(t),zft.forEach(t),JHo=i(Q$e),Yge=n(Q$e,"SPAN",{});var Wft=s(Yge);YHo=r(Wft,"AutoModelForMaskedImageModeling"),Wft.forEach(t),Q$e.forEach(t),qBe=i(c),hr=n(c,"DIV",{class:!0});var Rl=s(hr);m(kw.$$.fragment,Rl),KHo=i(Rl),ec=n(Rl,"P",{});var cJ=s(ec);ZHo=r(cJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aO=n(cJ,"A",{href:!0});var Hft=s(aO);eUo=r(Hft,"from_pretrained()"),Hft.forEach(t),oUo=r(cJ," class method or the "),nO=n(cJ,"A",{href:!0});var Uft=s(nO);rUo=r(Uft,"from_config()"),Uft.forEach(t),tUo=r(cJ,` class
method.`),cJ.forEach(t),aUo=i(Rl),Sw=n(Rl,"P",{});var W$e=s(Sw);nUo=r(W$e,"This class cannot be instantiated directly using "),Kge=n(W$e,"CODE",{});var Jft=s(Kge);sUo=r(Jft,"__init__()"),Jft.forEach(t),lUo=r(W$e," (throws an error)."),W$e.forEach(t),iUo=i(Rl),it=n(Rl,"DIV",{class:!0});var Bl=s(it);m(Rw.$$.fragment,Bl),dUo=i(Bl),Zge=n(Bl,"P",{});var Yft=s(Zge);cUo=r(Yft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Yft.forEach(t),fUo=i(Bl),oc=n(Bl,"P",{});var fJ=s(oc);mUo=r(fJ,`Note:
Loading a model from its configuration file does `),ehe=n(fJ,"STRONG",{});var Kft=s(ehe);gUo=r(Kft,"not"),Kft.forEach(t),hUo=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(fJ,"A",{href:!0});var Zft=s(sO);pUo=r(Zft,"from_pretrained()"),Zft.forEach(t),_Uo=r(fJ," to load the model weights."),fJ.forEach(t),uUo=i(Bl),ohe=n(Bl,"P",{});var emt=s(ohe);bUo=r(emt,"Examples:"),emt.forEach(t),vUo=i(Bl),m(Bw.$$.fragment,Bl),Bl.forEach(t),FUo=i(Rl),oo=n(Rl,"DIV",{class:!0});var aa=s(oo);m(Pw.$$.fragment,aa),TUo=i(aa),rhe=n(aa,"P",{});var omt=s(rhe);MUo=r(omt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),omt.forEach(t),EUo=i(aa),fn=n(aa,"P",{});var ZE=s(fn);CUo=r(ZE,"The model class to instantiate is selected based on the "),the=n(ZE,"CODE",{});var rmt=s(the);wUo=r(rmt,"model_type"),rmt.forEach(t),AUo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),ahe=n(ZE,"CODE",{});var tmt=s(ahe);yUo=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),LUo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(ZE,"CODE",{});var amt=s(nhe);xUo=r(amt,"pretrained_model_name_or_path"),amt.forEach(t),kUo=r(ZE,":"),ZE.forEach(t),SUo=i(aa),rc=n(aa,"UL",{});var mJ=s(rc);gF=n(mJ,"LI",{});var Zye=s(gF);she=n(Zye,"STRONG",{});var nmt=s(she);RUo=r(nmt,"deit"),nmt.forEach(t),BUo=r(Zye," \u2014 "),lO=n(Zye,"A",{href:!0});var smt=s(lO);PUo=r(smt,"DeiTForMaskedImageModeling"),smt.forEach(t),$Uo=r(Zye," (DeiT model)"),Zye.forEach(t),IUo=i(mJ),hF=n(mJ,"LI",{});var eLe=s(hF);lhe=n(eLe,"STRONG",{});var lmt=s(lhe);qUo=r(lmt,"swin"),lmt.forEach(t),NUo=r(eLe," \u2014 "),iO=n(eLe,"A",{href:!0});var imt=s(iO);jUo=r(imt,"SwinForMaskedImageModeling"),imt.forEach(t),DUo=r(eLe," (Swin model)"),eLe.forEach(t),GUo=i(mJ),pF=n(mJ,"LI",{});var oLe=s(pF);ihe=n(oLe,"STRONG",{});var dmt=s(ihe);OUo=r(dmt,"vit"),dmt.forEach(t),VUo=r(oLe," \u2014 "),dO=n(oLe,"A",{href:!0});var cmt=s(dO);XUo=r(cmt,"ViTForMaskedImageModeling"),cmt.forEach(t),zUo=r(oLe," (ViT model)"),oLe.forEach(t),mJ.forEach(t),QUo=i(aa),_F=n(aa,"P",{});var rLe=s(_F);WUo=r(rLe,"The model is set in evaluation mode by default using "),dhe=n(rLe,"CODE",{});var fmt=s(dhe);HUo=r(fmt,"model.eval()"),fmt.forEach(t),UUo=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=n(rLe,"CODE",{});var mmt=s(che);JUo=r(mmt,"model.train()"),mmt.forEach(t),rLe.forEach(t),YUo=i(aa),fhe=n(aa,"P",{});var gmt=s(fhe);KUo=r(gmt,"Examples:"),gmt.forEach(t),ZUo=i(aa),m($w.$$.fragment,aa),aa.forEach(t),Rl.forEach(t),NBe=i(c),tc=n(c,"H2",{class:!0});var H$e=s(tc);uF=n(H$e,"A",{id:!0,class:!0,href:!0});var hmt=s(uF);mhe=n(hmt,"SPAN",{});var pmt=s(mhe);m(Iw.$$.fragment,pmt),pmt.forEach(t),hmt.forEach(t),eJo=i(H$e),ghe=n(H$e,"SPAN",{});var _mt=s(ghe);oJo=r(_mt,"AutoModelForObjectDetection"),_mt.forEach(t),H$e.forEach(t),jBe=i(c),pr=n(c,"DIV",{class:!0});var Pl=s(pr);m(qw.$$.fragment,Pl),rJo=i(Pl),ac=n(Pl,"P",{});var gJ=s(ac);tJo=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),cO=n(gJ,"A",{href:!0});var umt=s(cO);aJo=r(umt,"from_pretrained()"),umt.forEach(t),nJo=r(gJ," class method or the "),fO=n(gJ,"A",{href:!0});var bmt=s(fO);sJo=r(bmt,"from_config()"),bmt.forEach(t),lJo=r(gJ,` class
method.`),gJ.forEach(t),iJo=i(Pl),Nw=n(Pl,"P",{});var U$e=s(Nw);dJo=r(U$e,"This class cannot be instantiated directly using "),hhe=n(U$e,"CODE",{});var vmt=s(hhe);cJo=r(vmt,"__init__()"),vmt.forEach(t),fJo=r(U$e," (throws an error)."),U$e.forEach(t),mJo=i(Pl),dt=n(Pl,"DIV",{class:!0});var $l=s(dt);m(jw.$$.fragment,$l),gJo=i($l),phe=n($l,"P",{});var Fmt=s(phe);hJo=r(Fmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Fmt.forEach(t),pJo=i($l),nc=n($l,"P",{});var hJ=s(nc);_Jo=r(hJ,`Note:
Loading a model from its configuration file does `),_he=n(hJ,"STRONG",{});var Tmt=s(_he);uJo=r(Tmt,"not"),Tmt.forEach(t),bJo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(hJ,"A",{href:!0});var Mmt=s(mO);vJo=r(Mmt,"from_pretrained()"),Mmt.forEach(t),FJo=r(hJ," to load the model weights."),hJ.forEach(t),TJo=i($l),uhe=n($l,"P",{});var Emt=s(uhe);MJo=r(Emt,"Examples:"),Emt.forEach(t),EJo=i($l),m(Dw.$$.fragment,$l),$l.forEach(t),CJo=i(Pl),ro=n(Pl,"DIV",{class:!0});var na=s(ro);m(Gw.$$.fragment,na),wJo=i(na),bhe=n(na,"P",{});var Cmt=s(bhe);AJo=r(Cmt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Cmt.forEach(t),yJo=i(na),mn=n(na,"P",{});var e5=s(mn);LJo=r(e5,"The model class to instantiate is selected based on the "),vhe=n(e5,"CODE",{});var wmt=s(vhe);xJo=r(wmt,"model_type"),wmt.forEach(t),kJo=r(e5,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(e5,"CODE",{});var Amt=s(Fhe);SJo=r(Amt,"pretrained_model_name_or_path"),Amt.forEach(t),RJo=r(e5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=n(e5,"CODE",{});var ymt=s(The);BJo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),PJo=r(e5,":"),e5.forEach(t),$Jo=i(na),Mhe=n(na,"UL",{});var Lmt=s(Mhe);bF=n(Lmt,"LI",{});var tLe=s(bF);Ehe=n(tLe,"STRONG",{});var xmt=s(Ehe);IJo=r(xmt,"detr"),xmt.forEach(t),qJo=r(tLe," \u2014 "),gO=n(tLe,"A",{href:!0});var kmt=s(gO);NJo=r(kmt,"DetrForObjectDetection"),kmt.forEach(t),jJo=r(tLe," (DETR model)"),tLe.forEach(t),Lmt.forEach(t),DJo=i(na),vF=n(na,"P",{});var aLe=s(vF);GJo=r(aLe,"The model is set in evaluation mode by default using "),Che=n(aLe,"CODE",{});var Smt=s(Che);OJo=r(Smt,"model.eval()"),Smt.forEach(t),VJo=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=n(aLe,"CODE",{});var Rmt=s(whe);XJo=r(Rmt,"model.train()"),Rmt.forEach(t),aLe.forEach(t),zJo=i(na),Ahe=n(na,"P",{});var Bmt=s(Ahe);QJo=r(Bmt,"Examples:"),Bmt.forEach(t),WJo=i(na),m(Ow.$$.fragment,na),na.forEach(t),Pl.forEach(t),DBe=i(c),sc=n(c,"H2",{class:!0});var J$e=s(sc);FF=n(J$e,"A",{id:!0,class:!0,href:!0});var Pmt=s(FF);yhe=n(Pmt,"SPAN",{});var $mt=s(yhe);m(Vw.$$.fragment,$mt),$mt.forEach(t),Pmt.forEach(t),HJo=i(J$e),Lhe=n(J$e,"SPAN",{});var Imt=s(Lhe);UJo=r(Imt,"AutoModelForImageSegmentation"),Imt.forEach(t),J$e.forEach(t),GBe=i(c),_r=n(c,"DIV",{class:!0});var Il=s(_r);m(Xw.$$.fragment,Il),JJo=i(Il),lc=n(Il,"P",{});var pJ=s(lc);YJo=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),hO=n(pJ,"A",{href:!0});var qmt=s(hO);KJo=r(qmt,"from_pretrained()"),qmt.forEach(t),ZJo=r(pJ," class method or the "),pO=n(pJ,"A",{href:!0});var Nmt=s(pO);eYo=r(Nmt,"from_config()"),Nmt.forEach(t),oYo=r(pJ,` class
method.`),pJ.forEach(t),rYo=i(Il),zw=n(Il,"P",{});var Y$e=s(zw);tYo=r(Y$e,"This class cannot be instantiated directly using "),xhe=n(Y$e,"CODE",{});var jmt=s(xhe);aYo=r(jmt,"__init__()"),jmt.forEach(t),nYo=r(Y$e," (throws an error)."),Y$e.forEach(t),sYo=i(Il),ct=n(Il,"DIV",{class:!0});var ql=s(ct);m(Qw.$$.fragment,ql),lYo=i(ql),khe=n(ql,"P",{});var Dmt=s(khe);iYo=r(Dmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Dmt.forEach(t),dYo=i(ql),ic=n(ql,"P",{});var _J=s(ic);cYo=r(_J,`Note:
Loading a model from its configuration file does `),She=n(_J,"STRONG",{});var Gmt=s(She);fYo=r(Gmt,"not"),Gmt.forEach(t),mYo=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(_J,"A",{href:!0});var Omt=s(_O);gYo=r(Omt,"from_pretrained()"),Omt.forEach(t),hYo=r(_J," to load the model weights."),_J.forEach(t),pYo=i(ql),Rhe=n(ql,"P",{});var Vmt=s(Rhe);_Yo=r(Vmt,"Examples:"),Vmt.forEach(t),uYo=i(ql),m(Ww.$$.fragment,ql),ql.forEach(t),bYo=i(Il),to=n(Il,"DIV",{class:!0});var sa=s(to);m(Hw.$$.fragment,sa),vYo=i(sa),Bhe=n(sa,"P",{});var Xmt=s(Bhe);FYo=r(Xmt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Xmt.forEach(t),TYo=i(sa),gn=n(sa,"P",{});var o5=s(gn);MYo=r(o5,"The model class to instantiate is selected based on the "),Phe=n(o5,"CODE",{});var zmt=s(Phe);EYo=r(zmt,"model_type"),zmt.forEach(t),CYo=r(o5,` property of the config object (either
passed as an argument or loaded from `),$he=n(o5,"CODE",{});var Qmt=s($he);wYo=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),AYo=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(o5,"CODE",{});var Wmt=s(Ihe);yYo=r(Wmt,"pretrained_model_name_or_path"),Wmt.forEach(t),LYo=r(o5,":"),o5.forEach(t),xYo=i(sa),qhe=n(sa,"UL",{});var Hmt=s(qhe);TF=n(Hmt,"LI",{});var nLe=s(TF);Nhe=n(nLe,"STRONG",{});var Umt=s(Nhe);kYo=r(Umt,"detr"),Umt.forEach(t),SYo=r(nLe," \u2014 "),uO=n(nLe,"A",{href:!0});var Jmt=s(uO);RYo=r(Jmt,"DetrForSegmentation"),Jmt.forEach(t),BYo=r(nLe," (DETR model)"),nLe.forEach(t),Hmt.forEach(t),PYo=i(sa),MF=n(sa,"P",{});var sLe=s(MF);$Yo=r(sLe,"The model is set in evaluation mode by default using "),jhe=n(sLe,"CODE",{});var Ymt=s(jhe);IYo=r(Ymt,"model.eval()"),Ymt.forEach(t),qYo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(sLe,"CODE",{});var Kmt=s(Dhe);NYo=r(Kmt,"model.train()"),Kmt.forEach(t),sLe.forEach(t),jYo=i(sa),Ghe=n(sa,"P",{});var Zmt=s(Ghe);DYo=r(Zmt,"Examples:"),Zmt.forEach(t),GYo=i(sa),m(Uw.$$.fragment,sa),sa.forEach(t),Il.forEach(t),OBe=i(c),dc=n(c,"H2",{class:!0});var K$e=s(dc);EF=n(K$e,"A",{id:!0,class:!0,href:!0});var egt=s(EF);Ohe=n(egt,"SPAN",{});var ogt=s(Ohe);m(Jw.$$.fragment,ogt),ogt.forEach(t),egt.forEach(t),OYo=i(K$e),Vhe=n(K$e,"SPAN",{});var rgt=s(Vhe);VYo=r(rgt,"AutoModelForSemanticSegmentation"),rgt.forEach(t),K$e.forEach(t),VBe=i(c),ur=n(c,"DIV",{class:!0});var Nl=s(ur);m(Yw.$$.fragment,Nl),XYo=i(Nl),cc=n(Nl,"P",{});var uJ=s(cc);zYo=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),bO=n(uJ,"A",{href:!0});var tgt=s(bO);QYo=r(tgt,"from_pretrained()"),tgt.forEach(t),WYo=r(uJ," class method or the "),vO=n(uJ,"A",{href:!0});var agt=s(vO);HYo=r(agt,"from_config()"),agt.forEach(t),UYo=r(uJ,` class
method.`),uJ.forEach(t),JYo=i(Nl),Kw=n(Nl,"P",{});var Z$e=s(Kw);YYo=r(Z$e,"This class cannot be instantiated directly using "),Xhe=n(Z$e,"CODE",{});var ngt=s(Xhe);KYo=r(ngt,"__init__()"),ngt.forEach(t),ZYo=r(Z$e," (throws an error)."),Z$e.forEach(t),eKo=i(Nl),ft=n(Nl,"DIV",{class:!0});var jl=s(ft);m(Zw.$$.fragment,jl),oKo=i(jl),zhe=n(jl,"P",{});var sgt=s(zhe);rKo=r(sgt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),sgt.forEach(t),tKo=i(jl),fc=n(jl,"P",{});var bJ=s(fc);aKo=r(bJ,`Note:
Loading a model from its configuration file does `),Qhe=n(bJ,"STRONG",{});var lgt=s(Qhe);nKo=r(lgt,"not"),lgt.forEach(t),sKo=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(bJ,"A",{href:!0});var igt=s(FO);lKo=r(igt,"from_pretrained()"),igt.forEach(t),iKo=r(bJ," to load the model weights."),bJ.forEach(t),dKo=i(jl),Whe=n(jl,"P",{});var dgt=s(Whe);cKo=r(dgt,"Examples:"),dgt.forEach(t),fKo=i(jl),m(eA.$$.fragment,jl),jl.forEach(t),mKo=i(Nl),ao=n(Nl,"DIV",{class:!0});var la=s(ao);m(oA.$$.fragment,la),gKo=i(la),Hhe=n(la,"P",{});var cgt=s(Hhe);hKo=r(cgt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),cgt.forEach(t),pKo=i(la),hn=n(la,"P",{});var r5=s(hn);_Ko=r(r5,"The model class to instantiate is selected based on the "),Uhe=n(r5,"CODE",{});var fgt=s(Uhe);uKo=r(fgt,"model_type"),fgt.forEach(t),bKo=r(r5,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(r5,"CODE",{});var mgt=s(Jhe);vKo=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),FKo=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(r5,"CODE",{});var ggt=s(Yhe);TKo=r(ggt,"pretrained_model_name_or_path"),ggt.forEach(t),MKo=r(r5,":"),r5.forEach(t),EKo=i(la),pn=n(la,"UL",{});var t5=s(pn);CF=n(t5,"LI",{});var lLe=s(CF);Khe=n(lLe,"STRONG",{});var hgt=s(Khe);CKo=r(hgt,"beit"),hgt.forEach(t),wKo=r(lLe," \u2014 "),TO=n(lLe,"A",{href:!0});var pgt=s(TO);AKo=r(pgt,"BeitForSemanticSegmentation"),pgt.forEach(t),yKo=r(lLe," (BEiT model)"),lLe.forEach(t),LKo=i(t5),wF=n(t5,"LI",{});var iLe=s(wF);Zhe=n(iLe,"STRONG",{});var _gt=s(Zhe);xKo=r(_gt,"data2vec-vision"),_gt.forEach(t),kKo=r(iLe," \u2014 "),MO=n(iLe,"A",{href:!0});var ugt=s(MO);SKo=r(ugt,"Data2VecVisionForSemanticSegmentation"),ugt.forEach(t),RKo=r(iLe," (Data2VecVision model)"),iLe.forEach(t),BKo=i(t5),AF=n(t5,"LI",{});var dLe=s(AF);epe=n(dLe,"STRONG",{});var bgt=s(epe);PKo=r(bgt,"dpt"),bgt.forEach(t),$Ko=r(dLe," \u2014 "),EO=n(dLe,"A",{href:!0});var vgt=s(EO);IKo=r(vgt,"DPTForSemanticSegmentation"),vgt.forEach(t),qKo=r(dLe," (DPT model)"),dLe.forEach(t),NKo=i(t5),yF=n(t5,"LI",{});var cLe=s(yF);ope=n(cLe,"STRONG",{});var Fgt=s(ope);jKo=r(Fgt,"segformer"),Fgt.forEach(t),DKo=r(cLe," \u2014 "),CO=n(cLe,"A",{href:!0});var Tgt=s(CO);GKo=r(Tgt,"SegformerForSemanticSegmentation"),Tgt.forEach(t),OKo=r(cLe," (SegFormer model)"),cLe.forEach(t),t5.forEach(t),VKo=i(la),LF=n(la,"P",{});var fLe=s(LF);XKo=r(fLe,"The model is set in evaluation mode by default using "),rpe=n(fLe,"CODE",{});var Mgt=s(rpe);zKo=r(Mgt,"model.eval()"),Mgt.forEach(t),QKo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(fLe,"CODE",{});var Egt=s(tpe);WKo=r(Egt,"model.train()"),Egt.forEach(t),fLe.forEach(t),HKo=i(la),ape=n(la,"P",{});var Cgt=s(ape);UKo=r(Cgt,"Examples:"),Cgt.forEach(t),JKo=i(la),m(rA.$$.fragment,la),la.forEach(t),Nl.forEach(t),XBe=i(c),mc=n(c,"H2",{class:!0});var eIe=s(mc);xF=n(eIe,"A",{id:!0,class:!0,href:!0});var wgt=s(xF);npe=n(wgt,"SPAN",{});var Agt=s(npe);m(tA.$$.fragment,Agt),Agt.forEach(t),wgt.forEach(t),YKo=i(eIe),spe=n(eIe,"SPAN",{});var ygt=s(spe);KKo=r(ygt,"AutoModelForInstanceSegmentation"),ygt.forEach(t),eIe.forEach(t),zBe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(aA.$$.fragment,Dl),ZKo=i(Dl),gc=n(Dl,"P",{});var vJ=s(gc);eZo=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),wO=n(vJ,"A",{href:!0});var Lgt=s(wO);oZo=r(Lgt,"from_pretrained()"),Lgt.forEach(t),rZo=r(vJ," class method or the "),AO=n(vJ,"A",{href:!0});var xgt=s(AO);tZo=r(xgt,"from_config()"),xgt.forEach(t),aZo=r(vJ,` class
method.`),vJ.forEach(t),nZo=i(Dl),nA=n(Dl,"P",{});var oIe=s(nA);sZo=r(oIe,"This class cannot be instantiated directly using "),lpe=n(oIe,"CODE",{});var kgt=s(lpe);lZo=r(kgt,"__init__()"),kgt.forEach(t),iZo=r(oIe," (throws an error)."),oIe.forEach(t),dZo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Gl=s(mt);m(sA.$$.fragment,Gl),cZo=i(Gl),ipe=n(Gl,"P",{});var Sgt=s(ipe);fZo=r(Sgt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Sgt.forEach(t),mZo=i(Gl),hc=n(Gl,"P",{});var FJ=s(hc);gZo=r(FJ,`Note:
Loading a model from its configuration file does `),dpe=n(FJ,"STRONG",{});var Rgt=s(dpe);hZo=r(Rgt,"not"),Rgt.forEach(t),pZo=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(FJ,"A",{href:!0});var Bgt=s(yO);_Zo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),uZo=r(FJ," to load the model weights."),FJ.forEach(t),bZo=i(Gl),cpe=n(Gl,"P",{});var Pgt=s(cpe);vZo=r(Pgt,"Examples:"),Pgt.forEach(t),FZo=i(Gl),m(lA.$$.fragment,Gl),Gl.forEach(t),TZo=i(Dl),no=n(Dl,"DIV",{class:!0});var ia=s(no);m(iA.$$.fragment,ia),MZo=i(ia),fpe=n(ia,"P",{});var $gt=s(fpe);EZo=r($gt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$gt.forEach(t),CZo=i(ia),_n=n(ia,"P",{});var a5=s(_n);wZo=r(a5,"The model class to instantiate is selected based on the "),mpe=n(a5,"CODE",{});var Igt=s(mpe);AZo=r(Igt,"model_type"),Igt.forEach(t),yZo=r(a5,` property of the config object (either
passed as an argument or loaded from `),gpe=n(a5,"CODE",{});var qgt=s(gpe);LZo=r(qgt,"pretrained_model_name_or_path"),qgt.forEach(t),xZo=r(a5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hpe=n(a5,"CODE",{});var Ngt=s(hpe);kZo=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),SZo=r(a5,":"),a5.forEach(t),RZo=i(ia),ppe=n(ia,"UL",{});var jgt=s(ppe);kF=n(jgt,"LI",{});var mLe=s(kF);_pe=n(mLe,"STRONG",{});var Dgt=s(_pe);BZo=r(Dgt,"maskformer"),Dgt.forEach(t),PZo=r(mLe," \u2014 "),LO=n(mLe,"A",{href:!0});var Ggt=s(LO);$Zo=r(Ggt,"MaskFormerForInstanceSegmentation"),Ggt.forEach(t),IZo=r(mLe," (MaskFormer model)"),mLe.forEach(t),jgt.forEach(t),qZo=i(ia),SF=n(ia,"P",{});var gLe=s(SF);NZo=r(gLe,"The model is set in evaluation mode by default using "),upe=n(gLe,"CODE",{});var Ogt=s(upe);jZo=r(Ogt,"model.eval()"),Ogt.forEach(t),DZo=r(gLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(gLe,"CODE",{});var Vgt=s(bpe);GZo=r(Vgt,"model.train()"),Vgt.forEach(t),gLe.forEach(t),OZo=i(ia),vpe=n(ia,"P",{});var Xgt=s(vpe);VZo=r(Xgt,"Examples:"),Xgt.forEach(t),XZo=i(ia),m(dA.$$.fragment,ia),ia.forEach(t),Dl.forEach(t),QBe=i(c),pc=n(c,"H2",{class:!0});var rIe=s(pc);RF=n(rIe,"A",{id:!0,class:!0,href:!0});var zgt=s(RF);Fpe=n(zgt,"SPAN",{});var Qgt=s(Fpe);m(cA.$$.fragment,Qgt),Qgt.forEach(t),zgt.forEach(t),zZo=i(rIe),Tpe=n(rIe,"SPAN",{});var Wgt=s(Tpe);QZo=r(Wgt,"TFAutoModel"),Wgt.forEach(t),rIe.forEach(t),WBe=i(c),vr=n(c,"DIV",{class:!0});var Ol=s(vr);m(fA.$$.fragment,Ol),WZo=i(Ol),_c=n(Ol,"P",{});var TJ=s(_c);HZo=r(TJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xO=n(TJ,"A",{href:!0});var Hgt=s(xO);UZo=r(Hgt,"from_pretrained()"),Hgt.forEach(t),JZo=r(TJ," class method or the "),kO=n(TJ,"A",{href:!0});var Ugt=s(kO);YZo=r(Ugt,"from_config()"),Ugt.forEach(t),KZo=r(TJ,` class
method.`),TJ.forEach(t),ZZo=i(Ol),mA=n(Ol,"P",{});var tIe=s(mA);eer=r(tIe,"This class cannot be instantiated directly using "),Mpe=n(tIe,"CODE",{});var Jgt=s(Mpe);oer=r(Jgt,"__init__()"),Jgt.forEach(t),rer=r(tIe," (throws an error)."),tIe.forEach(t),ter=i(Ol),gt=n(Ol,"DIV",{class:!0});var Vl=s(gt);m(gA.$$.fragment,Vl),aer=i(Vl),Epe=n(Vl,"P",{});var Ygt=s(Epe);ner=r(Ygt,"Instantiates one of the base model classes of the library from a configuration."),Ygt.forEach(t),ser=i(Vl),uc=n(Vl,"P",{});var MJ=s(uc);ler=r(MJ,`Note:
Loading a model from its configuration file does `),Cpe=n(MJ,"STRONG",{});var Kgt=s(Cpe);ier=r(Kgt,"not"),Kgt.forEach(t),der=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SO=n(MJ,"A",{href:!0});var Zgt=s(SO);cer=r(Zgt,"from_pretrained()"),Zgt.forEach(t),fer=r(MJ," to load the model weights."),MJ.forEach(t),mer=i(Vl),wpe=n(Vl,"P",{});var eht=s(wpe);ger=r(eht,"Examples:"),eht.forEach(t),her=i(Vl),m(hA.$$.fragment,Vl),Vl.forEach(t),per=i(Ol),ho=n(Ol,"DIV",{class:!0});var pa=s(ho);m(pA.$$.fragment,pa),_er=i(pa),Ape=n(pa,"P",{});var oht=s(Ape);uer=r(oht,"Instantiate one of the base model classes of the library from a pretrained model."),oht.forEach(t),ber=i(pa),un=n(pa,"P",{});var n5=s(un);ver=r(n5,"The model class to instantiate is selected based on the "),ype=n(n5,"CODE",{});var rht=s(ype);Fer=r(rht,"model_type"),rht.forEach(t),Ter=r(n5,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(n5,"CODE",{});var tht=s(Lpe);Mer=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),Eer=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(n5,"CODE",{});var aht=s(xpe);Cer=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),wer=r(n5,":"),n5.forEach(t),Aer=i(pa),x=n(pa,"UL",{});var k=s(x);BF=n(k,"LI",{});var hLe=s(BF);kpe=n(hLe,"STRONG",{});var nht=s(kpe);yer=r(nht,"albert"),nht.forEach(t),Ler=r(hLe," \u2014 "),RO=n(hLe,"A",{href:!0});var sht=s(RO);xer=r(sht,"TFAlbertModel"),sht.forEach(t),ker=r(hLe," (ALBERT model)"),hLe.forEach(t),Ser=i(k),PF=n(k,"LI",{});var pLe=s(PF);Spe=n(pLe,"STRONG",{});var lht=s(Spe);Rer=r(lht,"bart"),lht.forEach(t),Ber=r(pLe," \u2014 "),BO=n(pLe,"A",{href:!0});var iht=s(BO);Per=r(iht,"TFBartModel"),iht.forEach(t),$er=r(pLe," (BART model)"),pLe.forEach(t),Ier=i(k),$F=n(k,"LI",{});var _Le=s($F);Rpe=n(_Le,"STRONG",{});var dht=s(Rpe);qer=r(dht,"bert"),dht.forEach(t),Ner=r(_Le," \u2014 "),PO=n(_Le,"A",{href:!0});var cht=s(PO);jer=r(cht,"TFBertModel"),cht.forEach(t),Der=r(_Le," (BERT model)"),_Le.forEach(t),Ger=i(k),IF=n(k,"LI",{});var uLe=s(IF);Bpe=n(uLe,"STRONG",{});var fht=s(Bpe);Oer=r(fht,"blenderbot"),fht.forEach(t),Ver=r(uLe," \u2014 "),$O=n(uLe,"A",{href:!0});var mht=s($O);Xer=r(mht,"TFBlenderbotModel"),mht.forEach(t),zer=r(uLe," (Blenderbot model)"),uLe.forEach(t),Qer=i(k),qF=n(k,"LI",{});var bLe=s(qF);Ppe=n(bLe,"STRONG",{});var ght=s(Ppe);Wer=r(ght,"blenderbot-small"),ght.forEach(t),Her=r(bLe," \u2014 "),IO=n(bLe,"A",{href:!0});var hht=s(IO);Uer=r(hht,"TFBlenderbotSmallModel"),hht.forEach(t),Jer=r(bLe," (BlenderbotSmall model)"),bLe.forEach(t),Yer=i(k),NF=n(k,"LI",{});var vLe=s(NF);$pe=n(vLe,"STRONG",{});var pht=s($pe);Ker=r(pht,"camembert"),pht.forEach(t),Zer=r(vLe," \u2014 "),qO=n(vLe,"A",{href:!0});var _ht=s(qO);eor=r(_ht,"TFCamembertModel"),_ht.forEach(t),oor=r(vLe," (CamemBERT model)"),vLe.forEach(t),ror=i(k),jF=n(k,"LI",{});var FLe=s(jF);Ipe=n(FLe,"STRONG",{});var uht=s(Ipe);tor=r(uht,"clip"),uht.forEach(t),aor=r(FLe," \u2014 "),NO=n(FLe,"A",{href:!0});var bht=s(NO);nor=r(bht,"TFCLIPModel"),bht.forEach(t),sor=r(FLe," (CLIP model)"),FLe.forEach(t),lor=i(k),DF=n(k,"LI",{});var TLe=s(DF);qpe=n(TLe,"STRONG",{});var vht=s(qpe);ior=r(vht,"convbert"),vht.forEach(t),dor=r(TLe," \u2014 "),jO=n(TLe,"A",{href:!0});var Fht=s(jO);cor=r(Fht,"TFConvBertModel"),Fht.forEach(t),mor=r(TLe," (ConvBERT model)"),TLe.forEach(t),gor=i(k),GF=n(k,"LI",{});var MLe=s(GF);Npe=n(MLe,"STRONG",{});var Tht=s(Npe);hor=r(Tht,"convnext"),Tht.forEach(t),por=r(MLe," \u2014 "),DO=n(MLe,"A",{href:!0});var Mht=s(DO);_or=r(Mht,"TFConvNextModel"),Mht.forEach(t),uor=r(MLe," (ConvNext model)"),MLe.forEach(t),bor=i(k),OF=n(k,"LI",{});var ELe=s(OF);jpe=n(ELe,"STRONG",{});var Eht=s(jpe);vor=r(Eht,"ctrl"),Eht.forEach(t),For=r(ELe," \u2014 "),GO=n(ELe,"A",{href:!0});var Cht=s(GO);Tor=r(Cht,"TFCTRLModel"),Cht.forEach(t),Mor=r(ELe," (CTRL model)"),ELe.forEach(t),Eor=i(k),VF=n(k,"LI",{});var CLe=s(VF);Dpe=n(CLe,"STRONG",{});var wht=s(Dpe);Cor=r(wht,"deberta"),wht.forEach(t),wor=r(CLe," \u2014 "),OO=n(CLe,"A",{href:!0});var Aht=s(OO);Aor=r(Aht,"TFDebertaModel"),Aht.forEach(t),yor=r(CLe," (DeBERTa model)"),CLe.forEach(t),Lor=i(k),XF=n(k,"LI",{});var wLe=s(XF);Gpe=n(wLe,"STRONG",{});var yht=s(Gpe);xor=r(yht,"deberta-v2"),yht.forEach(t),kor=r(wLe," \u2014 "),VO=n(wLe,"A",{href:!0});var Lht=s(VO);Sor=r(Lht,"TFDebertaV2Model"),Lht.forEach(t),Ror=r(wLe," (DeBERTa-v2 model)"),wLe.forEach(t),Bor=i(k),zF=n(k,"LI",{});var ALe=s(zF);Ope=n(ALe,"STRONG",{});var xht=s(Ope);Por=r(xht,"distilbert"),xht.forEach(t),$or=r(ALe," \u2014 "),XO=n(ALe,"A",{href:!0});var kht=s(XO);Ior=r(kht,"TFDistilBertModel"),kht.forEach(t),qor=r(ALe," (DistilBERT model)"),ALe.forEach(t),Nor=i(k),QF=n(k,"LI",{});var yLe=s(QF);Vpe=n(yLe,"STRONG",{});var Sht=s(Vpe);jor=r(Sht,"dpr"),Sht.forEach(t),Dor=r(yLe," \u2014 "),zO=n(yLe,"A",{href:!0});var Rht=s(zO);Gor=r(Rht,"TFDPRQuestionEncoder"),Rht.forEach(t),Oor=r(yLe," (DPR model)"),yLe.forEach(t),Vor=i(k),WF=n(k,"LI",{});var LLe=s(WF);Xpe=n(LLe,"STRONG",{});var Bht=s(Xpe);Xor=r(Bht,"electra"),Bht.forEach(t),zor=r(LLe," \u2014 "),QO=n(LLe,"A",{href:!0});var Pht=s(QO);Qor=r(Pht,"TFElectraModel"),Pht.forEach(t),Wor=r(LLe," (ELECTRA model)"),LLe.forEach(t),Hor=i(k),HF=n(k,"LI",{});var xLe=s(HF);zpe=n(xLe,"STRONG",{});var $ht=s(zpe);Uor=r($ht,"flaubert"),$ht.forEach(t),Jor=r(xLe," \u2014 "),WO=n(xLe,"A",{href:!0});var Iht=s(WO);Yor=r(Iht,"TFFlaubertModel"),Iht.forEach(t),Kor=r(xLe," (FlauBERT model)"),xLe.forEach(t),Zor=i(k),Xs=n(k,"LI",{});var E9=s(Xs);Qpe=n(E9,"STRONG",{});var qht=s(Qpe);err=r(qht,"funnel"),qht.forEach(t),orr=r(E9," \u2014 "),HO=n(E9,"A",{href:!0});var Nht=s(HO);rrr=r(Nht,"TFFunnelModel"),Nht.forEach(t),trr=r(E9," or "),UO=n(E9,"A",{href:!0});var jht=s(UO);arr=r(jht,"TFFunnelBaseModel"),jht.forEach(t),nrr=r(E9," (Funnel Transformer model)"),E9.forEach(t),srr=i(k),UF=n(k,"LI",{});var kLe=s(UF);Wpe=n(kLe,"STRONG",{});var Dht=s(Wpe);lrr=r(Dht,"gpt2"),Dht.forEach(t),irr=r(kLe," \u2014 "),JO=n(kLe,"A",{href:!0});var Ght=s(JO);drr=r(Ght,"TFGPT2Model"),Ght.forEach(t),crr=r(kLe," (OpenAI GPT-2 model)"),kLe.forEach(t),frr=i(k),JF=n(k,"LI",{});var SLe=s(JF);Hpe=n(SLe,"STRONG",{});var Oht=s(Hpe);mrr=r(Oht,"gptj"),Oht.forEach(t),grr=r(SLe," \u2014 "),YO=n(SLe,"A",{href:!0});var Vht=s(YO);hrr=r(Vht,"TFGPTJModel"),Vht.forEach(t),prr=r(SLe," (GPT-J model)"),SLe.forEach(t),_rr=i(k),YF=n(k,"LI",{});var RLe=s(YF);Upe=n(RLe,"STRONG",{});var Xht=s(Upe);urr=r(Xht,"hubert"),Xht.forEach(t),brr=r(RLe," \u2014 "),KO=n(RLe,"A",{href:!0});var zht=s(KO);vrr=r(zht,"TFHubertModel"),zht.forEach(t),Frr=r(RLe," (Hubert model)"),RLe.forEach(t),Trr=i(k),KF=n(k,"LI",{});var BLe=s(KF);Jpe=n(BLe,"STRONG",{});var Qht=s(Jpe);Mrr=r(Qht,"layoutlm"),Qht.forEach(t),Err=r(BLe," \u2014 "),ZO=n(BLe,"A",{href:!0});var Wht=s(ZO);Crr=r(Wht,"TFLayoutLMModel"),Wht.forEach(t),wrr=r(BLe," (LayoutLM model)"),BLe.forEach(t),Arr=i(k),ZF=n(k,"LI",{});var PLe=s(ZF);Ype=n(PLe,"STRONG",{});var Hht=s(Ype);yrr=r(Hht,"led"),Hht.forEach(t),Lrr=r(PLe," \u2014 "),eV=n(PLe,"A",{href:!0});var Uht=s(eV);xrr=r(Uht,"TFLEDModel"),Uht.forEach(t),krr=r(PLe," (LED model)"),PLe.forEach(t),Srr=i(k),eT=n(k,"LI",{});var $Le=s(eT);Kpe=n($Le,"STRONG",{});var Jht=s(Kpe);Rrr=r(Jht,"longformer"),Jht.forEach(t),Brr=r($Le," \u2014 "),oV=n($Le,"A",{href:!0});var Yht=s(oV);Prr=r(Yht,"TFLongformerModel"),Yht.forEach(t),$rr=r($Le," (Longformer model)"),$Le.forEach(t),Irr=i(k),oT=n(k,"LI",{});var ILe=s(oT);Zpe=n(ILe,"STRONG",{});var Kht=s(Zpe);qrr=r(Kht,"lxmert"),Kht.forEach(t),Nrr=r(ILe," \u2014 "),rV=n(ILe,"A",{href:!0});var Zht=s(rV);jrr=r(Zht,"TFLxmertModel"),Zht.forEach(t),Drr=r(ILe," (LXMERT model)"),ILe.forEach(t),Grr=i(k),rT=n(k,"LI",{});var qLe=s(rT);e_e=n(qLe,"STRONG",{});var ept=s(e_e);Orr=r(ept,"marian"),ept.forEach(t),Vrr=r(qLe," \u2014 "),tV=n(qLe,"A",{href:!0});var opt=s(tV);Xrr=r(opt,"TFMarianModel"),opt.forEach(t),zrr=r(qLe," (Marian model)"),qLe.forEach(t),Qrr=i(k),tT=n(k,"LI",{});var NLe=s(tT);o_e=n(NLe,"STRONG",{});var rpt=s(o_e);Wrr=r(rpt,"mbart"),rpt.forEach(t),Hrr=r(NLe," \u2014 "),aV=n(NLe,"A",{href:!0});var tpt=s(aV);Urr=r(tpt,"TFMBartModel"),tpt.forEach(t),Jrr=r(NLe," (mBART model)"),NLe.forEach(t),Yrr=i(k),aT=n(k,"LI",{});var jLe=s(aT);r_e=n(jLe,"STRONG",{});var apt=s(r_e);Krr=r(apt,"mobilebert"),apt.forEach(t),Zrr=r(jLe," \u2014 "),nV=n(jLe,"A",{href:!0});var npt=s(nV);etr=r(npt,"TFMobileBertModel"),npt.forEach(t),otr=r(jLe," (MobileBERT model)"),jLe.forEach(t),rtr=i(k),nT=n(k,"LI",{});var DLe=s(nT);t_e=n(DLe,"STRONG",{});var spt=s(t_e);ttr=r(spt,"mpnet"),spt.forEach(t),atr=r(DLe," \u2014 "),sV=n(DLe,"A",{href:!0});var lpt=s(sV);ntr=r(lpt,"TFMPNetModel"),lpt.forEach(t),str=r(DLe," (MPNet model)"),DLe.forEach(t),ltr=i(k),sT=n(k,"LI",{});var GLe=s(sT);a_e=n(GLe,"STRONG",{});var ipt=s(a_e);itr=r(ipt,"mt5"),ipt.forEach(t),dtr=r(GLe," \u2014 "),lV=n(GLe,"A",{href:!0});var dpt=s(lV);ctr=r(dpt,"TFMT5Model"),dpt.forEach(t),ftr=r(GLe," (mT5 model)"),GLe.forEach(t),mtr=i(k),lT=n(k,"LI",{});var OLe=s(lT);n_e=n(OLe,"STRONG",{});var cpt=s(n_e);gtr=r(cpt,"openai-gpt"),cpt.forEach(t),htr=r(OLe," \u2014 "),iV=n(OLe,"A",{href:!0});var fpt=s(iV);ptr=r(fpt,"TFOpenAIGPTModel"),fpt.forEach(t),_tr=r(OLe," (OpenAI GPT model)"),OLe.forEach(t),utr=i(k),iT=n(k,"LI",{});var VLe=s(iT);s_e=n(VLe,"STRONG",{});var mpt=s(s_e);btr=r(mpt,"pegasus"),mpt.forEach(t),vtr=r(VLe," \u2014 "),dV=n(VLe,"A",{href:!0});var gpt=s(dV);Ftr=r(gpt,"TFPegasusModel"),gpt.forEach(t),Ttr=r(VLe," (Pegasus model)"),VLe.forEach(t),Mtr=i(k),dT=n(k,"LI",{});var XLe=s(dT);l_e=n(XLe,"STRONG",{});var hpt=s(l_e);Etr=r(hpt,"rembert"),hpt.forEach(t),Ctr=r(XLe," \u2014 "),cV=n(XLe,"A",{href:!0});var ppt=s(cV);wtr=r(ppt,"TFRemBertModel"),ppt.forEach(t),Atr=r(XLe," (RemBERT model)"),XLe.forEach(t),ytr=i(k),cT=n(k,"LI",{});var zLe=s(cT);i_e=n(zLe,"STRONG",{});var _pt=s(i_e);Ltr=r(_pt,"roberta"),_pt.forEach(t),xtr=r(zLe," \u2014 "),fV=n(zLe,"A",{href:!0});var upt=s(fV);ktr=r(upt,"TFRobertaModel"),upt.forEach(t),Str=r(zLe," (RoBERTa model)"),zLe.forEach(t),Rtr=i(k),fT=n(k,"LI",{});var QLe=s(fT);d_e=n(QLe,"STRONG",{});var bpt=s(d_e);Btr=r(bpt,"roformer"),bpt.forEach(t),Ptr=r(QLe," \u2014 "),mV=n(QLe,"A",{href:!0});var vpt=s(mV);$tr=r(vpt,"TFRoFormerModel"),vpt.forEach(t),Itr=r(QLe," (RoFormer model)"),QLe.forEach(t),qtr=i(k),mT=n(k,"LI",{});var WLe=s(mT);c_e=n(WLe,"STRONG",{});var Fpt=s(c_e);Ntr=r(Fpt,"speech_to_text"),Fpt.forEach(t),jtr=r(WLe," \u2014 "),gV=n(WLe,"A",{href:!0});var Tpt=s(gV);Dtr=r(Tpt,"TFSpeech2TextModel"),Tpt.forEach(t),Gtr=r(WLe," (Speech2Text model)"),WLe.forEach(t),Otr=i(k),gT=n(k,"LI",{});var HLe=s(gT);f_e=n(HLe,"STRONG",{});var Mpt=s(f_e);Vtr=r(Mpt,"t5"),Mpt.forEach(t),Xtr=r(HLe," \u2014 "),hV=n(HLe,"A",{href:!0});var Ept=s(hV);ztr=r(Ept,"TFT5Model"),Ept.forEach(t),Qtr=r(HLe," (T5 model)"),HLe.forEach(t),Wtr=i(k),hT=n(k,"LI",{});var ULe=s(hT);m_e=n(ULe,"STRONG",{});var Cpt=s(m_e);Htr=r(Cpt,"tapas"),Cpt.forEach(t),Utr=r(ULe," \u2014 "),pV=n(ULe,"A",{href:!0});var wpt=s(pV);Jtr=r(wpt,"TFTapasModel"),wpt.forEach(t),Ytr=r(ULe," (TAPAS model)"),ULe.forEach(t),Ktr=i(k),pT=n(k,"LI",{});var JLe=s(pT);g_e=n(JLe,"STRONG",{});var Apt=s(g_e);Ztr=r(Apt,"transfo-xl"),Apt.forEach(t),ear=r(JLe," \u2014 "),_V=n(JLe,"A",{href:!0});var ypt=s(_V);oar=r(ypt,"TFTransfoXLModel"),ypt.forEach(t),rar=r(JLe," (Transformer-XL model)"),JLe.forEach(t),tar=i(k),_T=n(k,"LI",{});var YLe=s(_T);h_e=n(YLe,"STRONG",{});var Lpt=s(h_e);aar=r(Lpt,"vit"),Lpt.forEach(t),nar=r(YLe," \u2014 "),uV=n(YLe,"A",{href:!0});var xpt=s(uV);sar=r(xpt,"TFViTModel"),xpt.forEach(t),lar=r(YLe," (ViT model)"),YLe.forEach(t),iar=i(k),uT=n(k,"LI",{});var KLe=s(uT);p_e=n(KLe,"STRONG",{});var kpt=s(p_e);dar=r(kpt,"vit_mae"),kpt.forEach(t),car=r(KLe," \u2014 "),bV=n(KLe,"A",{href:!0});var Spt=s(bV);far=r(Spt,"TFViTMAEModel"),Spt.forEach(t),mar=r(KLe," (ViTMAE model)"),KLe.forEach(t),gar=i(k),bT=n(k,"LI",{});var ZLe=s(bT);__e=n(ZLe,"STRONG",{});var Rpt=s(__e);har=r(Rpt,"wav2vec2"),Rpt.forEach(t),par=r(ZLe," \u2014 "),vV=n(ZLe,"A",{href:!0});var Bpt=s(vV);_ar=r(Bpt,"TFWav2Vec2Model"),Bpt.forEach(t),uar=r(ZLe," (Wav2Vec2 model)"),ZLe.forEach(t),bar=i(k),vT=n(k,"LI",{});var e9e=s(vT);u_e=n(e9e,"STRONG",{});var Ppt=s(u_e);Far=r(Ppt,"xlm"),Ppt.forEach(t),Tar=r(e9e," \u2014 "),FV=n(e9e,"A",{href:!0});var $pt=s(FV);Mar=r($pt,"TFXLMModel"),$pt.forEach(t),Ear=r(e9e," (XLM model)"),e9e.forEach(t),Car=i(k),FT=n(k,"LI",{});var o9e=s(FT);b_e=n(o9e,"STRONG",{});var Ipt=s(b_e);war=r(Ipt,"xlm-roberta"),Ipt.forEach(t),Aar=r(o9e," \u2014 "),TV=n(o9e,"A",{href:!0});var qpt=s(TV);yar=r(qpt,"TFXLMRobertaModel"),qpt.forEach(t),Lar=r(o9e," (XLM-RoBERTa model)"),o9e.forEach(t),xar=i(k),TT=n(k,"LI",{});var r9e=s(TT);v_e=n(r9e,"STRONG",{});var Npt=s(v_e);kar=r(Npt,"xlnet"),Npt.forEach(t),Sar=r(r9e," \u2014 "),MV=n(r9e,"A",{href:!0});var jpt=s(MV);Rar=r(jpt,"TFXLNetModel"),jpt.forEach(t),Bar=r(r9e," (XLNet model)"),r9e.forEach(t),k.forEach(t),Par=i(pa),F_e=n(pa,"P",{});var Dpt=s(F_e);$ar=r(Dpt,"Examples:"),Dpt.forEach(t),Iar=i(pa),m(_A.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),HBe=i(c),bc=n(c,"H2",{class:!0});var aIe=s(bc);MT=n(aIe,"A",{id:!0,class:!0,href:!0});var Gpt=s(MT);T_e=n(Gpt,"SPAN",{});var Opt=s(T_e);m(uA.$$.fragment,Opt),Opt.forEach(t),Gpt.forEach(t),qar=i(aIe),M_e=n(aIe,"SPAN",{});var Vpt=s(M_e);Nar=r(Vpt,"TFAutoModelForPreTraining"),Vpt.forEach(t),aIe.forEach(t),UBe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(bA.$$.fragment,Xl),jar=i(Xl),vc=n(Xl,"P",{});var EJ=s(vc);Dar=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EV=n(EJ,"A",{href:!0});var Xpt=s(EV);Gar=r(Xpt,"from_pretrained()"),Xpt.forEach(t),Oar=r(EJ," class method or the "),CV=n(EJ,"A",{href:!0});var zpt=s(CV);Var=r(zpt,"from_config()"),zpt.forEach(t),Xar=r(EJ,` class
method.`),EJ.forEach(t),zar=i(Xl),vA=n(Xl,"P",{});var nIe=s(vA);Qar=r(nIe,"This class cannot be instantiated directly using "),E_e=n(nIe,"CODE",{});var Qpt=s(E_e);War=r(Qpt,"__init__()"),Qpt.forEach(t),Har=r(nIe," (throws an error)."),nIe.forEach(t),Uar=i(Xl),ht=n(Xl,"DIV",{class:!0});var zl=s(ht);m(FA.$$.fragment,zl),Jar=i(zl),C_e=n(zl,"P",{});var Wpt=s(C_e);Yar=r(Wpt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wpt.forEach(t),Kar=i(zl),Fc=n(zl,"P",{});var CJ=s(Fc);Zar=r(CJ,`Note:
Loading a model from its configuration file does `),w_e=n(CJ,"STRONG",{});var Hpt=s(w_e);enr=r(Hpt,"not"),Hpt.forEach(t),onr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wV=n(CJ,"A",{href:!0});var Upt=s(wV);rnr=r(Upt,"from_pretrained()"),Upt.forEach(t),tnr=r(CJ," to load the model weights."),CJ.forEach(t),anr=i(zl),A_e=n(zl,"P",{});var Jpt=s(A_e);nnr=r(Jpt,"Examples:"),Jpt.forEach(t),snr=i(zl),m(TA.$$.fragment,zl),zl.forEach(t),lnr=i(Xl),po=n(Xl,"DIV",{class:!0});var _a=s(po);m(MA.$$.fragment,_a),inr=i(_a),y_e=n(_a,"P",{});var Ypt=s(y_e);dnr=r(Ypt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ypt.forEach(t),cnr=i(_a),bn=n(_a,"P",{});var s5=s(bn);fnr=r(s5,"The model class to instantiate is selected based on the "),L_e=n(s5,"CODE",{});var Kpt=s(L_e);mnr=r(Kpt,"model_type"),Kpt.forEach(t),gnr=r(s5,` property of the config object (either
passed as an argument or loaded from `),x_e=n(s5,"CODE",{});var Zpt=s(x_e);hnr=r(Zpt,"pretrained_model_name_or_path"),Zpt.forEach(t),pnr=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(s5,"CODE",{});var e_t=s(k_e);_nr=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),unr=r(s5,":"),s5.forEach(t),bnr=i(_a),H=n(_a,"UL",{});var U=s(H);ET=n(U,"LI",{});var t9e=s(ET);S_e=n(t9e,"STRONG",{});var o_t=s(S_e);vnr=r(o_t,"albert"),o_t.forEach(t),Fnr=r(t9e," \u2014 "),AV=n(t9e,"A",{href:!0});var r_t=s(AV);Tnr=r(r_t,"TFAlbertForPreTraining"),r_t.forEach(t),Mnr=r(t9e," (ALBERT model)"),t9e.forEach(t),Enr=i(U),CT=n(U,"LI",{});var a9e=s(CT);R_e=n(a9e,"STRONG",{});var t_t=s(R_e);Cnr=r(t_t,"bart"),t_t.forEach(t),wnr=r(a9e," \u2014 "),yV=n(a9e,"A",{href:!0});var a_t=s(yV);Anr=r(a_t,"TFBartForConditionalGeneration"),a_t.forEach(t),ynr=r(a9e," (BART model)"),a9e.forEach(t),Lnr=i(U),wT=n(U,"LI",{});var n9e=s(wT);B_e=n(n9e,"STRONG",{});var n_t=s(B_e);xnr=r(n_t,"bert"),n_t.forEach(t),knr=r(n9e," \u2014 "),LV=n(n9e,"A",{href:!0});var s_t=s(LV);Snr=r(s_t,"TFBertForPreTraining"),s_t.forEach(t),Rnr=r(n9e," (BERT model)"),n9e.forEach(t),Bnr=i(U),AT=n(U,"LI",{});var s9e=s(AT);P_e=n(s9e,"STRONG",{});var l_t=s(P_e);Pnr=r(l_t,"camembert"),l_t.forEach(t),$nr=r(s9e," \u2014 "),xV=n(s9e,"A",{href:!0});var i_t=s(xV);Inr=r(i_t,"TFCamembertForMaskedLM"),i_t.forEach(t),qnr=r(s9e," (CamemBERT model)"),s9e.forEach(t),Nnr=i(U),yT=n(U,"LI",{});var l9e=s(yT);$_e=n(l9e,"STRONG",{});var d_t=s($_e);jnr=r(d_t,"ctrl"),d_t.forEach(t),Dnr=r(l9e," \u2014 "),kV=n(l9e,"A",{href:!0});var c_t=s(kV);Gnr=r(c_t,"TFCTRLLMHeadModel"),c_t.forEach(t),Onr=r(l9e," (CTRL model)"),l9e.forEach(t),Vnr=i(U),LT=n(U,"LI",{});var i9e=s(LT);I_e=n(i9e,"STRONG",{});var f_t=s(I_e);Xnr=r(f_t,"distilbert"),f_t.forEach(t),znr=r(i9e," \u2014 "),SV=n(i9e,"A",{href:!0});var m_t=s(SV);Qnr=r(m_t,"TFDistilBertForMaskedLM"),m_t.forEach(t),Wnr=r(i9e," (DistilBERT model)"),i9e.forEach(t),Hnr=i(U),xT=n(U,"LI",{});var d9e=s(xT);q_e=n(d9e,"STRONG",{});var g_t=s(q_e);Unr=r(g_t,"electra"),g_t.forEach(t),Jnr=r(d9e," \u2014 "),RV=n(d9e,"A",{href:!0});var h_t=s(RV);Ynr=r(h_t,"TFElectraForPreTraining"),h_t.forEach(t),Knr=r(d9e," (ELECTRA model)"),d9e.forEach(t),Znr=i(U),kT=n(U,"LI",{});var c9e=s(kT);N_e=n(c9e,"STRONG",{});var p_t=s(N_e);esr=r(p_t,"flaubert"),p_t.forEach(t),osr=r(c9e," \u2014 "),BV=n(c9e,"A",{href:!0});var __t=s(BV);rsr=r(__t,"TFFlaubertWithLMHeadModel"),__t.forEach(t),tsr=r(c9e," (FlauBERT model)"),c9e.forEach(t),asr=i(U),ST=n(U,"LI",{});var f9e=s(ST);j_e=n(f9e,"STRONG",{});var u_t=s(j_e);nsr=r(u_t,"funnel"),u_t.forEach(t),ssr=r(f9e," \u2014 "),PV=n(f9e,"A",{href:!0});var b_t=s(PV);lsr=r(b_t,"TFFunnelForPreTraining"),b_t.forEach(t),isr=r(f9e," (Funnel Transformer model)"),f9e.forEach(t),dsr=i(U),RT=n(U,"LI",{});var m9e=s(RT);D_e=n(m9e,"STRONG",{});var v_t=s(D_e);csr=r(v_t,"gpt2"),v_t.forEach(t),fsr=r(m9e," \u2014 "),$V=n(m9e,"A",{href:!0});var F_t=s($V);msr=r(F_t,"TFGPT2LMHeadModel"),F_t.forEach(t),gsr=r(m9e," (OpenAI GPT-2 model)"),m9e.forEach(t),hsr=i(U),BT=n(U,"LI",{});var g9e=s(BT);G_e=n(g9e,"STRONG",{});var T_t=s(G_e);psr=r(T_t,"layoutlm"),T_t.forEach(t),_sr=r(g9e," \u2014 "),IV=n(g9e,"A",{href:!0});var M_t=s(IV);usr=r(M_t,"TFLayoutLMForMaskedLM"),M_t.forEach(t),bsr=r(g9e," (LayoutLM model)"),g9e.forEach(t),vsr=i(U),PT=n(U,"LI",{});var h9e=s(PT);O_e=n(h9e,"STRONG",{});var E_t=s(O_e);Fsr=r(E_t,"lxmert"),E_t.forEach(t),Tsr=r(h9e," \u2014 "),qV=n(h9e,"A",{href:!0});var C_t=s(qV);Msr=r(C_t,"TFLxmertForPreTraining"),C_t.forEach(t),Esr=r(h9e," (LXMERT model)"),h9e.forEach(t),Csr=i(U),$T=n(U,"LI",{});var p9e=s($T);V_e=n(p9e,"STRONG",{});var w_t=s(V_e);wsr=r(w_t,"mobilebert"),w_t.forEach(t),Asr=r(p9e," \u2014 "),NV=n(p9e,"A",{href:!0});var A_t=s(NV);ysr=r(A_t,"TFMobileBertForPreTraining"),A_t.forEach(t),Lsr=r(p9e," (MobileBERT model)"),p9e.forEach(t),xsr=i(U),IT=n(U,"LI",{});var _9e=s(IT);X_e=n(_9e,"STRONG",{});var y_t=s(X_e);ksr=r(y_t,"mpnet"),y_t.forEach(t),Ssr=r(_9e," \u2014 "),jV=n(_9e,"A",{href:!0});var L_t=s(jV);Rsr=r(L_t,"TFMPNetForMaskedLM"),L_t.forEach(t),Bsr=r(_9e," (MPNet model)"),_9e.forEach(t),Psr=i(U),qT=n(U,"LI",{});var u9e=s(qT);z_e=n(u9e,"STRONG",{});var x_t=s(z_e);$sr=r(x_t,"openai-gpt"),x_t.forEach(t),Isr=r(u9e," \u2014 "),DV=n(u9e,"A",{href:!0});var k_t=s(DV);qsr=r(k_t,"TFOpenAIGPTLMHeadModel"),k_t.forEach(t),Nsr=r(u9e," (OpenAI GPT model)"),u9e.forEach(t),jsr=i(U),NT=n(U,"LI",{});var b9e=s(NT);Q_e=n(b9e,"STRONG",{});var S_t=s(Q_e);Dsr=r(S_t,"roberta"),S_t.forEach(t),Gsr=r(b9e," \u2014 "),GV=n(b9e,"A",{href:!0});var R_t=s(GV);Osr=r(R_t,"TFRobertaForMaskedLM"),R_t.forEach(t),Vsr=r(b9e," (RoBERTa model)"),b9e.forEach(t),Xsr=i(U),jT=n(U,"LI",{});var v9e=s(jT);W_e=n(v9e,"STRONG",{});var B_t=s(W_e);zsr=r(B_t,"t5"),B_t.forEach(t),Qsr=r(v9e," \u2014 "),OV=n(v9e,"A",{href:!0});var P_t=s(OV);Wsr=r(P_t,"TFT5ForConditionalGeneration"),P_t.forEach(t),Hsr=r(v9e," (T5 model)"),v9e.forEach(t),Usr=i(U),DT=n(U,"LI",{});var F9e=s(DT);H_e=n(F9e,"STRONG",{});var $_t=s(H_e);Jsr=r($_t,"tapas"),$_t.forEach(t),Ysr=r(F9e," \u2014 "),VV=n(F9e,"A",{href:!0});var I_t=s(VV);Ksr=r(I_t,"TFTapasForMaskedLM"),I_t.forEach(t),Zsr=r(F9e," (TAPAS model)"),F9e.forEach(t),elr=i(U),GT=n(U,"LI",{});var T9e=s(GT);U_e=n(T9e,"STRONG",{});var q_t=s(U_e);olr=r(q_t,"transfo-xl"),q_t.forEach(t),rlr=r(T9e," \u2014 "),XV=n(T9e,"A",{href:!0});var N_t=s(XV);tlr=r(N_t,"TFTransfoXLLMHeadModel"),N_t.forEach(t),alr=r(T9e," (Transformer-XL model)"),T9e.forEach(t),nlr=i(U),OT=n(U,"LI",{});var M9e=s(OT);J_e=n(M9e,"STRONG",{});var j_t=s(J_e);slr=r(j_t,"vit_mae"),j_t.forEach(t),llr=r(M9e," \u2014 "),zV=n(M9e,"A",{href:!0});var D_t=s(zV);ilr=r(D_t,"TFViTMAEForPreTraining"),D_t.forEach(t),dlr=r(M9e," (ViTMAE model)"),M9e.forEach(t),clr=i(U),VT=n(U,"LI",{});var E9e=s(VT);Y_e=n(E9e,"STRONG",{});var G_t=s(Y_e);flr=r(G_t,"xlm"),G_t.forEach(t),mlr=r(E9e," \u2014 "),QV=n(E9e,"A",{href:!0});var O_t=s(QV);glr=r(O_t,"TFXLMWithLMHeadModel"),O_t.forEach(t),hlr=r(E9e," (XLM model)"),E9e.forEach(t),plr=i(U),XT=n(U,"LI",{});var C9e=s(XT);K_e=n(C9e,"STRONG",{});var V_t=s(K_e);_lr=r(V_t,"xlm-roberta"),V_t.forEach(t),ulr=r(C9e," \u2014 "),WV=n(C9e,"A",{href:!0});var X_t=s(WV);blr=r(X_t,"TFXLMRobertaForMaskedLM"),X_t.forEach(t),vlr=r(C9e," (XLM-RoBERTa model)"),C9e.forEach(t),Flr=i(U),zT=n(U,"LI",{});var w9e=s(zT);Z_e=n(w9e,"STRONG",{});var z_t=s(Z_e);Tlr=r(z_t,"xlnet"),z_t.forEach(t),Mlr=r(w9e," \u2014 "),HV=n(w9e,"A",{href:!0});var Q_t=s(HV);Elr=r(Q_t,"TFXLNetLMHeadModel"),Q_t.forEach(t),Clr=r(w9e," (XLNet model)"),w9e.forEach(t),U.forEach(t),wlr=i(_a),eue=n(_a,"P",{});var W_t=s(eue);Alr=r(W_t,"Examples:"),W_t.forEach(t),ylr=i(_a),m(EA.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),JBe=i(c),Tc=n(c,"H2",{class:!0});var sIe=s(Tc);QT=n(sIe,"A",{id:!0,class:!0,href:!0});var H_t=s(QT);oue=n(H_t,"SPAN",{});var U_t=s(oue);m(CA.$$.fragment,U_t),U_t.forEach(t),H_t.forEach(t),Llr=i(sIe),rue=n(sIe,"SPAN",{});var J_t=s(rue);xlr=r(J_t,"TFAutoModelForCausalLM"),J_t.forEach(t),sIe.forEach(t),YBe=i(c),Tr=n(c,"DIV",{class:!0});var Ql=s(Tr);m(wA.$$.fragment,Ql),klr=i(Ql),Mc=n(Ql,"P",{});var wJ=s(Mc);Slr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UV=n(wJ,"A",{href:!0});var Y_t=s(UV);Rlr=r(Y_t,"from_pretrained()"),Y_t.forEach(t),Blr=r(wJ," class method or the "),JV=n(wJ,"A",{href:!0});var K_t=s(JV);Plr=r(K_t,"from_config()"),K_t.forEach(t),$lr=r(wJ,` class
method.`),wJ.forEach(t),Ilr=i(Ql),AA=n(Ql,"P",{});var lIe=s(AA);qlr=r(lIe,"This class cannot be instantiated directly using "),tue=n(lIe,"CODE",{});var Z_t=s(tue);Nlr=r(Z_t,"__init__()"),Z_t.forEach(t),jlr=r(lIe," (throws an error)."),lIe.forEach(t),Dlr=i(Ql),pt=n(Ql,"DIV",{class:!0});var Wl=s(pt);m(yA.$$.fragment,Wl),Glr=i(Wl),aue=n(Wl,"P",{});var eut=s(aue);Olr=r(eut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eut.forEach(t),Vlr=i(Wl),Ec=n(Wl,"P",{});var AJ=s(Ec);Xlr=r(AJ,`Note:
Loading a model from its configuration file does `),nue=n(AJ,"STRONG",{});var out=s(nue);zlr=r(out,"not"),out.forEach(t),Qlr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(AJ,"A",{href:!0});var rut=s(YV);Wlr=r(rut,"from_pretrained()"),rut.forEach(t),Hlr=r(AJ," to load the model weights."),AJ.forEach(t),Ulr=i(Wl),sue=n(Wl,"P",{});var tut=s(sue);Jlr=r(tut,"Examples:"),tut.forEach(t),Ylr=i(Wl),m(LA.$$.fragment,Wl),Wl.forEach(t),Klr=i(Ql),_o=n(Ql,"DIV",{class:!0});var ua=s(_o);m(xA.$$.fragment,ua),Zlr=i(ua),lue=n(ua,"P",{});var aut=s(lue);eir=r(aut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),aut.forEach(t),oir=i(ua),vn=n(ua,"P",{});var l5=s(vn);rir=r(l5,"The model class to instantiate is selected based on the "),iue=n(l5,"CODE",{});var nut=s(iue);tir=r(nut,"model_type"),nut.forEach(t),air=r(l5,` property of the config object (either
passed as an argument or loaded from `),due=n(l5,"CODE",{});var sut=s(due);nir=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),sir=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=n(l5,"CODE",{});var lut=s(cue);lir=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),iir=r(l5,":"),l5.forEach(t),dir=i(ua),fe=n(ua,"UL",{});var pe=s(fe);WT=n(pe,"LI",{});var A9e=s(WT);fue=n(A9e,"STRONG",{});var iut=s(fue);cir=r(iut,"bert"),iut.forEach(t),fir=r(A9e," \u2014 "),KV=n(A9e,"A",{href:!0});var dut=s(KV);mir=r(dut,"TFBertLMHeadModel"),dut.forEach(t),gir=r(A9e," (BERT model)"),A9e.forEach(t),hir=i(pe),HT=n(pe,"LI",{});var y9e=s(HT);mue=n(y9e,"STRONG",{});var cut=s(mue);pir=r(cut,"camembert"),cut.forEach(t),_ir=r(y9e," \u2014 "),ZV=n(y9e,"A",{href:!0});var fut=s(ZV);uir=r(fut,"TFCamembertForCausalLM"),fut.forEach(t),bir=r(y9e," (CamemBERT model)"),y9e.forEach(t),vir=i(pe),UT=n(pe,"LI",{});var L9e=s(UT);gue=n(L9e,"STRONG",{});var mut=s(gue);Fir=r(mut,"ctrl"),mut.forEach(t),Tir=r(L9e," \u2014 "),eX=n(L9e,"A",{href:!0});var gut=s(eX);Mir=r(gut,"TFCTRLLMHeadModel"),gut.forEach(t),Eir=r(L9e," (CTRL model)"),L9e.forEach(t),Cir=i(pe),JT=n(pe,"LI",{});var x9e=s(JT);hue=n(x9e,"STRONG",{});var hut=s(hue);wir=r(hut,"gpt2"),hut.forEach(t),Air=r(x9e," \u2014 "),oX=n(x9e,"A",{href:!0});var put=s(oX);yir=r(put,"TFGPT2LMHeadModel"),put.forEach(t),Lir=r(x9e," (OpenAI GPT-2 model)"),x9e.forEach(t),xir=i(pe),YT=n(pe,"LI",{});var k9e=s(YT);pue=n(k9e,"STRONG",{});var _ut=s(pue);kir=r(_ut,"gptj"),_ut.forEach(t),Sir=r(k9e," \u2014 "),rX=n(k9e,"A",{href:!0});var uut=s(rX);Rir=r(uut,"TFGPTJForCausalLM"),uut.forEach(t),Bir=r(k9e," (GPT-J model)"),k9e.forEach(t),Pir=i(pe),KT=n(pe,"LI",{});var S9e=s(KT);_ue=n(S9e,"STRONG",{});var but=s(_ue);$ir=r(but,"openai-gpt"),but.forEach(t),Iir=r(S9e," \u2014 "),tX=n(S9e,"A",{href:!0});var vut=s(tX);qir=r(vut,"TFOpenAIGPTLMHeadModel"),vut.forEach(t),Nir=r(S9e," (OpenAI GPT model)"),S9e.forEach(t),jir=i(pe),ZT=n(pe,"LI",{});var R9e=s(ZT);uue=n(R9e,"STRONG",{});var Fut=s(uue);Dir=r(Fut,"rembert"),Fut.forEach(t),Gir=r(R9e," \u2014 "),aX=n(R9e,"A",{href:!0});var Tut=s(aX);Oir=r(Tut,"TFRemBertForCausalLM"),Tut.forEach(t),Vir=r(R9e," (RemBERT model)"),R9e.forEach(t),Xir=i(pe),e8=n(pe,"LI",{});var B9e=s(e8);bue=n(B9e,"STRONG",{});var Mut=s(bue);zir=r(Mut,"roberta"),Mut.forEach(t),Qir=r(B9e," \u2014 "),nX=n(B9e,"A",{href:!0});var Eut=s(nX);Wir=r(Eut,"TFRobertaForCausalLM"),Eut.forEach(t),Hir=r(B9e," (RoBERTa model)"),B9e.forEach(t),Uir=i(pe),o8=n(pe,"LI",{});var P9e=s(o8);vue=n(P9e,"STRONG",{});var Cut=s(vue);Jir=r(Cut,"roformer"),Cut.forEach(t),Yir=r(P9e," \u2014 "),sX=n(P9e,"A",{href:!0});var wut=s(sX);Kir=r(wut,"TFRoFormerForCausalLM"),wut.forEach(t),Zir=r(P9e," (RoFormer model)"),P9e.forEach(t),edr=i(pe),r8=n(pe,"LI",{});var $9e=s(r8);Fue=n($9e,"STRONG",{});var Aut=s(Fue);odr=r(Aut,"transfo-xl"),Aut.forEach(t),rdr=r($9e," \u2014 "),lX=n($9e,"A",{href:!0});var yut=s(lX);tdr=r(yut,"TFTransfoXLLMHeadModel"),yut.forEach(t),adr=r($9e," (Transformer-XL model)"),$9e.forEach(t),ndr=i(pe),t8=n(pe,"LI",{});var I9e=s(t8);Tue=n(I9e,"STRONG",{});var Lut=s(Tue);sdr=r(Lut,"xlm"),Lut.forEach(t),ldr=r(I9e," \u2014 "),iX=n(I9e,"A",{href:!0});var xut=s(iX);idr=r(xut,"TFXLMWithLMHeadModel"),xut.forEach(t),ddr=r(I9e," (XLM model)"),I9e.forEach(t),cdr=i(pe),a8=n(pe,"LI",{});var q9e=s(a8);Mue=n(q9e,"STRONG",{});var kut=s(Mue);fdr=r(kut,"xlnet"),kut.forEach(t),mdr=r(q9e," \u2014 "),dX=n(q9e,"A",{href:!0});var Sut=s(dX);gdr=r(Sut,"TFXLNetLMHeadModel"),Sut.forEach(t),hdr=r(q9e," (XLNet model)"),q9e.forEach(t),pe.forEach(t),pdr=i(ua),Eue=n(ua,"P",{});var Rut=s(Eue);_dr=r(Rut,"Examples:"),Rut.forEach(t),udr=i(ua),m(kA.$$.fragment,ua),ua.forEach(t),Ql.forEach(t),KBe=i(c),Cc=n(c,"H2",{class:!0});var iIe=s(Cc);n8=n(iIe,"A",{id:!0,class:!0,href:!0});var But=s(n8);Cue=n(But,"SPAN",{});var Put=s(Cue);m(SA.$$.fragment,Put),Put.forEach(t),But.forEach(t),bdr=i(iIe),wue=n(iIe,"SPAN",{});var $ut=s(wue);vdr=r($ut,"TFAutoModelForImageClassification"),$ut.forEach(t),iIe.forEach(t),ZBe=i(c),Mr=n(c,"DIV",{class:!0});var Hl=s(Mr);m(RA.$$.fragment,Hl),Fdr=i(Hl),wc=n(Hl,"P",{});var yJ=s(wc);Tdr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cX=n(yJ,"A",{href:!0});var Iut=s(cX);Mdr=r(Iut,"from_pretrained()"),Iut.forEach(t),Edr=r(yJ," class method or the "),fX=n(yJ,"A",{href:!0});var qut=s(fX);Cdr=r(qut,"from_config()"),qut.forEach(t),wdr=r(yJ,` class
method.`),yJ.forEach(t),Adr=i(Hl),BA=n(Hl,"P",{});var dIe=s(BA);ydr=r(dIe,"This class cannot be instantiated directly using "),Aue=n(dIe,"CODE",{});var Nut=s(Aue);Ldr=r(Nut,"__init__()"),Nut.forEach(t),xdr=r(dIe," (throws an error)."),dIe.forEach(t),kdr=i(Hl),_t=n(Hl,"DIV",{class:!0});var Ul=s(_t);m(PA.$$.fragment,Ul),Sdr=i(Ul),yue=n(Ul,"P",{});var jut=s(yue);Rdr=r(jut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jut.forEach(t),Bdr=i(Ul),Ac=n(Ul,"P",{});var LJ=s(Ac);Pdr=r(LJ,`Note:
Loading a model from its configuration file does `),Lue=n(LJ,"STRONG",{});var Dut=s(Lue);$dr=r(Dut,"not"),Dut.forEach(t),Idr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(LJ,"A",{href:!0});var Gut=s(mX);qdr=r(Gut,"from_pretrained()"),Gut.forEach(t),Ndr=r(LJ," to load the model weights."),LJ.forEach(t),jdr=i(Ul),xue=n(Ul,"P",{});var Out=s(xue);Ddr=r(Out,"Examples:"),Out.forEach(t),Gdr=i(Ul),m($A.$$.fragment,Ul),Ul.forEach(t),Odr=i(Hl),uo=n(Hl,"DIV",{class:!0});var ba=s(uo);m(IA.$$.fragment,ba),Vdr=i(ba),kue=n(ba,"P",{});var Vut=s(kue);Xdr=r(Vut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vut.forEach(t),zdr=i(ba),Fn=n(ba,"P",{});var i5=s(Fn);Qdr=r(i5,"The model class to instantiate is selected based on the "),Sue=n(i5,"CODE",{});var Xut=s(Sue);Wdr=r(Xut,"model_type"),Xut.forEach(t),Hdr=r(i5,` property of the config object (either
passed as an argument or loaded from `),Rue=n(i5,"CODE",{});var zut=s(Rue);Udr=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),Jdr=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(i5,"CODE",{});var Qut=s(Bue);Ydr=r(Qut,"pretrained_model_name_or_path"),Qut.forEach(t),Kdr=r(i5,":"),i5.forEach(t),Zdr=i(ba),qA=n(ba,"UL",{});var cIe=s(qA);s8=n(cIe,"LI",{});var N9e=s(s8);Pue=n(N9e,"STRONG",{});var Wut=s(Pue);ecr=r(Wut,"convnext"),Wut.forEach(t),ocr=r(N9e," \u2014 "),gX=n(N9e,"A",{href:!0});var Hut=s(gX);rcr=r(Hut,"TFConvNextForImageClassification"),Hut.forEach(t),tcr=r(N9e," (ConvNext model)"),N9e.forEach(t),acr=i(cIe),l8=n(cIe,"LI",{});var j9e=s(l8);$ue=n(j9e,"STRONG",{});var Uut=s($ue);ncr=r(Uut,"vit"),Uut.forEach(t),scr=r(j9e," \u2014 "),hX=n(j9e,"A",{href:!0});var Jut=s(hX);lcr=r(Jut,"TFViTForImageClassification"),Jut.forEach(t),icr=r(j9e," (ViT model)"),j9e.forEach(t),cIe.forEach(t),dcr=i(ba),Iue=n(ba,"P",{});var Yut=s(Iue);ccr=r(Yut,"Examples:"),Yut.forEach(t),fcr=i(ba),m(NA.$$.fragment,ba),ba.forEach(t),Hl.forEach(t),ePe=i(c),yc=n(c,"H2",{class:!0});var fIe=s(yc);i8=n(fIe,"A",{id:!0,class:!0,href:!0});var Kut=s(i8);que=n(Kut,"SPAN",{});var Zut=s(que);m(jA.$$.fragment,Zut),Zut.forEach(t),Kut.forEach(t),mcr=i(fIe),Nue=n(fIe,"SPAN",{});var e1t=s(Nue);gcr=r(e1t,"TFAutoModelForMaskedLM"),e1t.forEach(t),fIe.forEach(t),oPe=i(c),Er=n(c,"DIV",{class:!0});var Jl=s(Er);m(DA.$$.fragment,Jl),hcr=i(Jl),Lc=n(Jl,"P",{});var xJ=s(Lc);pcr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pX=n(xJ,"A",{href:!0});var o1t=s(pX);_cr=r(o1t,"from_pretrained()"),o1t.forEach(t),ucr=r(xJ," class method or the "),_X=n(xJ,"A",{href:!0});var r1t=s(_X);bcr=r(r1t,"from_config()"),r1t.forEach(t),vcr=r(xJ,` class
method.`),xJ.forEach(t),Fcr=i(Jl),GA=n(Jl,"P",{});var mIe=s(GA);Tcr=r(mIe,"This class cannot be instantiated directly using "),jue=n(mIe,"CODE",{});var t1t=s(jue);Mcr=r(t1t,"__init__()"),t1t.forEach(t),Ecr=r(mIe," (throws an error)."),mIe.forEach(t),Ccr=i(Jl),ut=n(Jl,"DIV",{class:!0});var Yl=s(ut);m(OA.$$.fragment,Yl),wcr=i(Yl),Due=n(Yl,"P",{});var a1t=s(Due);Acr=r(a1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),a1t.forEach(t),ycr=i(Yl),xc=n(Yl,"P",{});var kJ=s(xc);Lcr=r(kJ,`Note:
Loading a model from its configuration file does `),Gue=n(kJ,"STRONG",{});var n1t=s(Gue);xcr=r(n1t,"not"),n1t.forEach(t),kcr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(kJ,"A",{href:!0});var s1t=s(uX);Scr=r(s1t,"from_pretrained()"),s1t.forEach(t),Rcr=r(kJ," to load the model weights."),kJ.forEach(t),Bcr=i(Yl),Oue=n(Yl,"P",{});var l1t=s(Oue);Pcr=r(l1t,"Examples:"),l1t.forEach(t),$cr=i(Yl),m(VA.$$.fragment,Yl),Yl.forEach(t),Icr=i(Jl),bo=n(Jl,"DIV",{class:!0});var va=s(bo);m(XA.$$.fragment,va),qcr=i(va),Vue=n(va,"P",{});var i1t=s(Vue);Ncr=r(i1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i1t.forEach(t),jcr=i(va),Tn=n(va,"P",{});var d5=s(Tn);Dcr=r(d5,"The model class to instantiate is selected based on the "),Xue=n(d5,"CODE",{});var d1t=s(Xue);Gcr=r(d1t,"model_type"),d1t.forEach(t),Ocr=r(d5,` property of the config object (either
passed as an argument or loaded from `),zue=n(d5,"CODE",{});var c1t=s(zue);Vcr=r(c1t,"pretrained_model_name_or_path"),c1t.forEach(t),Xcr=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(d5,"CODE",{});var f1t=s(Que);zcr=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),Qcr=r(d5,":"),d5.forEach(t),Wcr=i(va),Y=n(va,"UL",{});var re=s(Y);d8=n(re,"LI",{});var D9e=s(d8);Wue=n(D9e,"STRONG",{});var m1t=s(Wue);Hcr=r(m1t,"albert"),m1t.forEach(t),Ucr=r(D9e," \u2014 "),bX=n(D9e,"A",{href:!0});var g1t=s(bX);Jcr=r(g1t,"TFAlbertForMaskedLM"),g1t.forEach(t),Ycr=r(D9e," (ALBERT model)"),D9e.forEach(t),Kcr=i(re),c8=n(re,"LI",{});var G9e=s(c8);Hue=n(G9e,"STRONG",{});var h1t=s(Hue);Zcr=r(h1t,"bert"),h1t.forEach(t),efr=r(G9e," \u2014 "),vX=n(G9e,"A",{href:!0});var p1t=s(vX);ofr=r(p1t,"TFBertForMaskedLM"),p1t.forEach(t),rfr=r(G9e," (BERT model)"),G9e.forEach(t),tfr=i(re),f8=n(re,"LI",{});var O9e=s(f8);Uue=n(O9e,"STRONG",{});var _1t=s(Uue);afr=r(_1t,"camembert"),_1t.forEach(t),nfr=r(O9e," \u2014 "),FX=n(O9e,"A",{href:!0});var u1t=s(FX);sfr=r(u1t,"TFCamembertForMaskedLM"),u1t.forEach(t),lfr=r(O9e," (CamemBERT model)"),O9e.forEach(t),ifr=i(re),m8=n(re,"LI",{});var V9e=s(m8);Jue=n(V9e,"STRONG",{});var b1t=s(Jue);dfr=r(b1t,"convbert"),b1t.forEach(t),cfr=r(V9e," \u2014 "),TX=n(V9e,"A",{href:!0});var v1t=s(TX);ffr=r(v1t,"TFConvBertForMaskedLM"),v1t.forEach(t),mfr=r(V9e," (ConvBERT model)"),V9e.forEach(t),gfr=i(re),g8=n(re,"LI",{});var X9e=s(g8);Yue=n(X9e,"STRONG",{});var F1t=s(Yue);hfr=r(F1t,"deberta"),F1t.forEach(t),pfr=r(X9e," \u2014 "),MX=n(X9e,"A",{href:!0});var T1t=s(MX);_fr=r(T1t,"TFDebertaForMaskedLM"),T1t.forEach(t),ufr=r(X9e," (DeBERTa model)"),X9e.forEach(t),bfr=i(re),h8=n(re,"LI",{});var z9e=s(h8);Kue=n(z9e,"STRONG",{});var M1t=s(Kue);vfr=r(M1t,"deberta-v2"),M1t.forEach(t),Ffr=r(z9e," \u2014 "),EX=n(z9e,"A",{href:!0});var E1t=s(EX);Tfr=r(E1t,"TFDebertaV2ForMaskedLM"),E1t.forEach(t),Mfr=r(z9e," (DeBERTa-v2 model)"),z9e.forEach(t),Efr=i(re),p8=n(re,"LI",{});var Q9e=s(p8);Zue=n(Q9e,"STRONG",{});var C1t=s(Zue);Cfr=r(C1t,"distilbert"),C1t.forEach(t),wfr=r(Q9e," \u2014 "),CX=n(Q9e,"A",{href:!0});var w1t=s(CX);Afr=r(w1t,"TFDistilBertForMaskedLM"),w1t.forEach(t),yfr=r(Q9e," (DistilBERT model)"),Q9e.forEach(t),Lfr=i(re),_8=n(re,"LI",{});var W9e=s(_8);e1e=n(W9e,"STRONG",{});var A1t=s(e1e);xfr=r(A1t,"electra"),A1t.forEach(t),kfr=r(W9e," \u2014 "),wX=n(W9e,"A",{href:!0});var y1t=s(wX);Sfr=r(y1t,"TFElectraForMaskedLM"),y1t.forEach(t),Rfr=r(W9e," (ELECTRA model)"),W9e.forEach(t),Bfr=i(re),u8=n(re,"LI",{});var H9e=s(u8);o1e=n(H9e,"STRONG",{});var L1t=s(o1e);Pfr=r(L1t,"flaubert"),L1t.forEach(t),$fr=r(H9e," \u2014 "),AX=n(H9e,"A",{href:!0});var x1t=s(AX);Ifr=r(x1t,"TFFlaubertWithLMHeadModel"),x1t.forEach(t),qfr=r(H9e," (FlauBERT model)"),H9e.forEach(t),Nfr=i(re),b8=n(re,"LI",{});var U9e=s(b8);r1e=n(U9e,"STRONG",{});var k1t=s(r1e);jfr=r(k1t,"funnel"),k1t.forEach(t),Dfr=r(U9e," \u2014 "),yX=n(U9e,"A",{href:!0});var S1t=s(yX);Gfr=r(S1t,"TFFunnelForMaskedLM"),S1t.forEach(t),Ofr=r(U9e," (Funnel Transformer model)"),U9e.forEach(t),Vfr=i(re),v8=n(re,"LI",{});var J9e=s(v8);t1e=n(J9e,"STRONG",{});var R1t=s(t1e);Xfr=r(R1t,"layoutlm"),R1t.forEach(t),zfr=r(J9e," \u2014 "),LX=n(J9e,"A",{href:!0});var B1t=s(LX);Qfr=r(B1t,"TFLayoutLMForMaskedLM"),B1t.forEach(t),Wfr=r(J9e," (LayoutLM model)"),J9e.forEach(t),Hfr=i(re),F8=n(re,"LI",{});var Y9e=s(F8);a1e=n(Y9e,"STRONG",{});var P1t=s(a1e);Ufr=r(P1t,"longformer"),P1t.forEach(t),Jfr=r(Y9e," \u2014 "),xX=n(Y9e,"A",{href:!0});var $1t=s(xX);Yfr=r($1t,"TFLongformerForMaskedLM"),$1t.forEach(t),Kfr=r(Y9e," (Longformer model)"),Y9e.forEach(t),Zfr=i(re),T8=n(re,"LI",{});var K9e=s(T8);n1e=n(K9e,"STRONG",{});var I1t=s(n1e);emr=r(I1t,"mobilebert"),I1t.forEach(t),omr=r(K9e," \u2014 "),kX=n(K9e,"A",{href:!0});var q1t=s(kX);rmr=r(q1t,"TFMobileBertForMaskedLM"),q1t.forEach(t),tmr=r(K9e," (MobileBERT model)"),K9e.forEach(t),amr=i(re),M8=n(re,"LI",{});var Z9e=s(M8);s1e=n(Z9e,"STRONG",{});var N1t=s(s1e);nmr=r(N1t,"mpnet"),N1t.forEach(t),smr=r(Z9e," \u2014 "),SX=n(Z9e,"A",{href:!0});var j1t=s(SX);lmr=r(j1t,"TFMPNetForMaskedLM"),j1t.forEach(t),imr=r(Z9e," (MPNet model)"),Z9e.forEach(t),dmr=i(re),E8=n(re,"LI",{});var exe=s(E8);l1e=n(exe,"STRONG",{});var D1t=s(l1e);cmr=r(D1t,"rembert"),D1t.forEach(t),fmr=r(exe," \u2014 "),RX=n(exe,"A",{href:!0});var G1t=s(RX);mmr=r(G1t,"TFRemBertForMaskedLM"),G1t.forEach(t),gmr=r(exe," (RemBERT model)"),exe.forEach(t),hmr=i(re),C8=n(re,"LI",{});var oxe=s(C8);i1e=n(oxe,"STRONG",{});var O1t=s(i1e);pmr=r(O1t,"roberta"),O1t.forEach(t),_mr=r(oxe," \u2014 "),BX=n(oxe,"A",{href:!0});var V1t=s(BX);umr=r(V1t,"TFRobertaForMaskedLM"),V1t.forEach(t),bmr=r(oxe," (RoBERTa model)"),oxe.forEach(t),vmr=i(re),w8=n(re,"LI",{});var rxe=s(w8);d1e=n(rxe,"STRONG",{});var X1t=s(d1e);Fmr=r(X1t,"roformer"),X1t.forEach(t),Tmr=r(rxe," \u2014 "),PX=n(rxe,"A",{href:!0});var z1t=s(PX);Mmr=r(z1t,"TFRoFormerForMaskedLM"),z1t.forEach(t),Emr=r(rxe," (RoFormer model)"),rxe.forEach(t),Cmr=i(re),A8=n(re,"LI",{});var txe=s(A8);c1e=n(txe,"STRONG",{});var Q1t=s(c1e);wmr=r(Q1t,"tapas"),Q1t.forEach(t),Amr=r(txe," \u2014 "),$X=n(txe,"A",{href:!0});var W1t=s($X);ymr=r(W1t,"TFTapasForMaskedLM"),W1t.forEach(t),Lmr=r(txe," (TAPAS model)"),txe.forEach(t),xmr=i(re),y8=n(re,"LI",{});var axe=s(y8);f1e=n(axe,"STRONG",{});var H1t=s(f1e);kmr=r(H1t,"xlm"),H1t.forEach(t),Smr=r(axe," \u2014 "),IX=n(axe,"A",{href:!0});var U1t=s(IX);Rmr=r(U1t,"TFXLMWithLMHeadModel"),U1t.forEach(t),Bmr=r(axe," (XLM model)"),axe.forEach(t),Pmr=i(re),L8=n(re,"LI",{});var nxe=s(L8);m1e=n(nxe,"STRONG",{});var J1t=s(m1e);$mr=r(J1t,"xlm-roberta"),J1t.forEach(t),Imr=r(nxe," \u2014 "),qX=n(nxe,"A",{href:!0});var Y1t=s(qX);qmr=r(Y1t,"TFXLMRobertaForMaskedLM"),Y1t.forEach(t),Nmr=r(nxe," (XLM-RoBERTa model)"),nxe.forEach(t),re.forEach(t),jmr=i(va),g1e=n(va,"P",{});var K1t=s(g1e);Dmr=r(K1t,"Examples:"),K1t.forEach(t),Gmr=i(va),m(zA.$$.fragment,va),va.forEach(t),Jl.forEach(t),rPe=i(c),kc=n(c,"H2",{class:!0});var gIe=s(kc);x8=n(gIe,"A",{id:!0,class:!0,href:!0});var Z1t=s(x8);h1e=n(Z1t,"SPAN",{});var ebt=s(h1e);m(QA.$$.fragment,ebt),ebt.forEach(t),Z1t.forEach(t),Omr=i(gIe),p1e=n(gIe,"SPAN",{});var obt=s(p1e);Vmr=r(obt,"TFAutoModelForSeq2SeqLM"),obt.forEach(t),gIe.forEach(t),tPe=i(c),Cr=n(c,"DIV",{class:!0});var Kl=s(Cr);m(WA.$$.fragment,Kl),Xmr=i(Kl),Sc=n(Kl,"P",{});var SJ=s(Sc);zmr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NX=n(SJ,"A",{href:!0});var rbt=s(NX);Qmr=r(rbt,"from_pretrained()"),rbt.forEach(t),Wmr=r(SJ," class method or the "),jX=n(SJ,"A",{href:!0});var tbt=s(jX);Hmr=r(tbt,"from_config()"),tbt.forEach(t),Umr=r(SJ,` class
method.`),SJ.forEach(t),Jmr=i(Kl),HA=n(Kl,"P",{});var hIe=s(HA);Ymr=r(hIe,"This class cannot be instantiated directly using "),_1e=n(hIe,"CODE",{});var abt=s(_1e);Kmr=r(abt,"__init__()"),abt.forEach(t),Zmr=r(hIe," (throws an error)."),hIe.forEach(t),egr=i(Kl),bt=n(Kl,"DIV",{class:!0});var Zl=s(bt);m(UA.$$.fragment,Zl),ogr=i(Zl),u1e=n(Zl,"P",{});var nbt=s(u1e);rgr=r(nbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nbt.forEach(t),tgr=i(Zl),Rc=n(Zl,"P",{});var RJ=s(Rc);agr=r(RJ,`Note:
Loading a model from its configuration file does `),b1e=n(RJ,"STRONG",{});var sbt=s(b1e);ngr=r(sbt,"not"),sbt.forEach(t),sgr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(RJ,"A",{href:!0});var lbt=s(DX);lgr=r(lbt,"from_pretrained()"),lbt.forEach(t),igr=r(RJ," to load the model weights."),RJ.forEach(t),dgr=i(Zl),v1e=n(Zl,"P",{});var ibt=s(v1e);cgr=r(ibt,"Examples:"),ibt.forEach(t),fgr=i(Zl),m(JA.$$.fragment,Zl),Zl.forEach(t),mgr=i(Kl),vo=n(Kl,"DIV",{class:!0});var Fa=s(vo);m(YA.$$.fragment,Fa),ggr=i(Fa),F1e=n(Fa,"P",{});var dbt=s(F1e);hgr=r(dbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dbt.forEach(t),pgr=i(Fa),Mn=n(Fa,"P",{});var c5=s(Mn);_gr=r(c5,"The model class to instantiate is selected based on the "),T1e=n(c5,"CODE",{});var cbt=s(T1e);ugr=r(cbt,"model_type"),cbt.forEach(t),bgr=r(c5,` property of the config object (either
passed as an argument or loaded from `),M1e=n(c5,"CODE",{});var fbt=s(M1e);vgr=r(fbt,"pretrained_model_name_or_path"),fbt.forEach(t),Fgr=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(c5,"CODE",{});var mbt=s(E1e);Tgr=r(mbt,"pretrained_model_name_or_path"),mbt.forEach(t),Mgr=r(c5,":"),c5.forEach(t),Egr=i(Fa),be=n(Fa,"UL",{});var we=s(be);k8=n(we,"LI",{});var sxe=s(k8);C1e=n(sxe,"STRONG",{});var gbt=s(C1e);Cgr=r(gbt,"bart"),gbt.forEach(t),wgr=r(sxe," \u2014 "),GX=n(sxe,"A",{href:!0});var hbt=s(GX);Agr=r(hbt,"TFBartForConditionalGeneration"),hbt.forEach(t),ygr=r(sxe," (BART model)"),sxe.forEach(t),Lgr=i(we),S8=n(we,"LI",{});var lxe=s(S8);w1e=n(lxe,"STRONG",{});var pbt=s(w1e);xgr=r(pbt,"blenderbot"),pbt.forEach(t),kgr=r(lxe," \u2014 "),OX=n(lxe,"A",{href:!0});var _bt=s(OX);Sgr=r(_bt,"TFBlenderbotForConditionalGeneration"),_bt.forEach(t),Rgr=r(lxe," (Blenderbot model)"),lxe.forEach(t),Bgr=i(we),R8=n(we,"LI",{});var ixe=s(R8);A1e=n(ixe,"STRONG",{});var ubt=s(A1e);Pgr=r(ubt,"blenderbot-small"),ubt.forEach(t),$gr=r(ixe," \u2014 "),VX=n(ixe,"A",{href:!0});var bbt=s(VX);Igr=r(bbt,"TFBlenderbotSmallForConditionalGeneration"),bbt.forEach(t),qgr=r(ixe," (BlenderbotSmall model)"),ixe.forEach(t),Ngr=i(we),B8=n(we,"LI",{});var dxe=s(B8);y1e=n(dxe,"STRONG",{});var vbt=s(y1e);jgr=r(vbt,"encoder-decoder"),vbt.forEach(t),Dgr=r(dxe," \u2014 "),XX=n(dxe,"A",{href:!0});var Fbt=s(XX);Ggr=r(Fbt,"TFEncoderDecoderModel"),Fbt.forEach(t),Ogr=r(dxe," (Encoder decoder model)"),dxe.forEach(t),Vgr=i(we),P8=n(we,"LI",{});var cxe=s(P8);L1e=n(cxe,"STRONG",{});var Tbt=s(L1e);Xgr=r(Tbt,"led"),Tbt.forEach(t),zgr=r(cxe," \u2014 "),zX=n(cxe,"A",{href:!0});var Mbt=s(zX);Qgr=r(Mbt,"TFLEDForConditionalGeneration"),Mbt.forEach(t),Wgr=r(cxe," (LED model)"),cxe.forEach(t),Hgr=i(we),$8=n(we,"LI",{});var fxe=s($8);x1e=n(fxe,"STRONG",{});var Ebt=s(x1e);Ugr=r(Ebt,"marian"),Ebt.forEach(t),Jgr=r(fxe," \u2014 "),QX=n(fxe,"A",{href:!0});var Cbt=s(QX);Ygr=r(Cbt,"TFMarianMTModel"),Cbt.forEach(t),Kgr=r(fxe," (Marian model)"),fxe.forEach(t),Zgr=i(we),I8=n(we,"LI",{});var mxe=s(I8);k1e=n(mxe,"STRONG",{});var wbt=s(k1e);ehr=r(wbt,"mbart"),wbt.forEach(t),ohr=r(mxe," \u2014 "),WX=n(mxe,"A",{href:!0});var Abt=s(WX);rhr=r(Abt,"TFMBartForConditionalGeneration"),Abt.forEach(t),thr=r(mxe," (mBART model)"),mxe.forEach(t),ahr=i(we),q8=n(we,"LI",{});var gxe=s(q8);S1e=n(gxe,"STRONG",{});var ybt=s(S1e);nhr=r(ybt,"mt5"),ybt.forEach(t),shr=r(gxe," \u2014 "),HX=n(gxe,"A",{href:!0});var Lbt=s(HX);lhr=r(Lbt,"TFMT5ForConditionalGeneration"),Lbt.forEach(t),ihr=r(gxe," (mT5 model)"),gxe.forEach(t),dhr=i(we),N8=n(we,"LI",{});var hxe=s(N8);R1e=n(hxe,"STRONG",{});var xbt=s(R1e);chr=r(xbt,"pegasus"),xbt.forEach(t),fhr=r(hxe," \u2014 "),UX=n(hxe,"A",{href:!0});var kbt=s(UX);mhr=r(kbt,"TFPegasusForConditionalGeneration"),kbt.forEach(t),ghr=r(hxe," (Pegasus model)"),hxe.forEach(t),hhr=i(we),j8=n(we,"LI",{});var pxe=s(j8);B1e=n(pxe,"STRONG",{});var Sbt=s(B1e);phr=r(Sbt,"t5"),Sbt.forEach(t),_hr=r(pxe," \u2014 "),JX=n(pxe,"A",{href:!0});var Rbt=s(JX);uhr=r(Rbt,"TFT5ForConditionalGeneration"),Rbt.forEach(t),bhr=r(pxe," (T5 model)"),pxe.forEach(t),we.forEach(t),vhr=i(Fa),P1e=n(Fa,"P",{});var Bbt=s(P1e);Fhr=r(Bbt,"Examples:"),Bbt.forEach(t),Thr=i(Fa),m(KA.$$.fragment,Fa),Fa.forEach(t),Kl.forEach(t),aPe=i(c),Bc=n(c,"H2",{class:!0});var pIe=s(Bc);D8=n(pIe,"A",{id:!0,class:!0,href:!0});var Pbt=s(D8);$1e=n(Pbt,"SPAN",{});var $bt=s($1e);m(ZA.$$.fragment,$bt),$bt.forEach(t),Pbt.forEach(t),Mhr=i(pIe),I1e=n(pIe,"SPAN",{});var Ibt=s(I1e);Ehr=r(Ibt,"TFAutoModelForSequenceClassification"),Ibt.forEach(t),pIe.forEach(t),nPe=i(c),wr=n(c,"DIV",{class:!0});var ei=s(wr);m(e0.$$.fragment,ei),Chr=i(ei),Pc=n(ei,"P",{});var BJ=s(Pc);whr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YX=n(BJ,"A",{href:!0});var qbt=s(YX);Ahr=r(qbt,"from_pretrained()"),qbt.forEach(t),yhr=r(BJ," class method or the "),KX=n(BJ,"A",{href:!0});var Nbt=s(KX);Lhr=r(Nbt,"from_config()"),Nbt.forEach(t),xhr=r(BJ,` class
method.`),BJ.forEach(t),khr=i(ei),o0=n(ei,"P",{});var _Ie=s(o0);Shr=r(_Ie,"This class cannot be instantiated directly using "),q1e=n(_Ie,"CODE",{});var jbt=s(q1e);Rhr=r(jbt,"__init__()"),jbt.forEach(t),Bhr=r(_Ie," (throws an error)."),_Ie.forEach(t),Phr=i(ei),vt=n(ei,"DIV",{class:!0});var oi=s(vt);m(r0.$$.fragment,oi),$hr=i(oi),N1e=n(oi,"P",{});var Dbt=s(N1e);Ihr=r(Dbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dbt.forEach(t),qhr=i(oi),$c=n(oi,"P",{});var PJ=s($c);Nhr=r(PJ,`Note:
Loading a model from its configuration file does `),j1e=n(PJ,"STRONG",{});var Gbt=s(j1e);jhr=r(Gbt,"not"),Gbt.forEach(t),Dhr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(PJ,"A",{href:!0});var Obt=s(ZX);Ghr=r(Obt,"from_pretrained()"),Obt.forEach(t),Ohr=r(PJ," to load the model weights."),PJ.forEach(t),Vhr=i(oi),D1e=n(oi,"P",{});var Vbt=s(D1e);Xhr=r(Vbt,"Examples:"),Vbt.forEach(t),zhr=i(oi),m(t0.$$.fragment,oi),oi.forEach(t),Qhr=i(ei),Fo=n(ei,"DIV",{class:!0});var Ta=s(Fo);m(a0.$$.fragment,Ta),Whr=i(Ta),G1e=n(Ta,"P",{});var Xbt=s(G1e);Hhr=r(Xbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xbt.forEach(t),Uhr=i(Ta),En=n(Ta,"P",{});var f5=s(En);Jhr=r(f5,"The model class to instantiate is selected based on the "),O1e=n(f5,"CODE",{});var zbt=s(O1e);Yhr=r(zbt,"model_type"),zbt.forEach(t),Khr=r(f5,` property of the config object (either
passed as an argument or loaded from `),V1e=n(f5,"CODE",{});var Qbt=s(V1e);Zhr=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),epr=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(f5,"CODE",{});var Wbt=s(X1e);opr=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),rpr=r(f5,":"),f5.forEach(t),tpr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);G8=n(Q,"LI",{});var _xe=s(G8);z1e=n(_xe,"STRONG",{});var Hbt=s(z1e);apr=r(Hbt,"albert"),Hbt.forEach(t),npr=r(_xe," \u2014 "),ez=n(_xe,"A",{href:!0});var Ubt=s(ez);spr=r(Ubt,"TFAlbertForSequenceClassification"),Ubt.forEach(t),lpr=r(_xe," (ALBERT model)"),_xe.forEach(t),ipr=i(Q),O8=n(Q,"LI",{});var uxe=s(O8);Q1e=n(uxe,"STRONG",{});var Jbt=s(Q1e);dpr=r(Jbt,"bert"),Jbt.forEach(t),cpr=r(uxe," \u2014 "),oz=n(uxe,"A",{href:!0});var Ybt=s(oz);fpr=r(Ybt,"TFBertForSequenceClassification"),Ybt.forEach(t),mpr=r(uxe," (BERT model)"),uxe.forEach(t),gpr=i(Q),V8=n(Q,"LI",{});var bxe=s(V8);W1e=n(bxe,"STRONG",{});var Kbt=s(W1e);hpr=r(Kbt,"camembert"),Kbt.forEach(t),ppr=r(bxe," \u2014 "),rz=n(bxe,"A",{href:!0});var Zbt=s(rz);_pr=r(Zbt,"TFCamembertForSequenceClassification"),Zbt.forEach(t),upr=r(bxe," (CamemBERT model)"),bxe.forEach(t),bpr=i(Q),X8=n(Q,"LI",{});var vxe=s(X8);H1e=n(vxe,"STRONG",{});var e2t=s(H1e);vpr=r(e2t,"convbert"),e2t.forEach(t),Fpr=r(vxe," \u2014 "),tz=n(vxe,"A",{href:!0});var o2t=s(tz);Tpr=r(o2t,"TFConvBertForSequenceClassification"),o2t.forEach(t),Mpr=r(vxe," (ConvBERT model)"),vxe.forEach(t),Epr=i(Q),z8=n(Q,"LI",{});var Fxe=s(z8);U1e=n(Fxe,"STRONG",{});var r2t=s(U1e);Cpr=r(r2t,"ctrl"),r2t.forEach(t),wpr=r(Fxe," \u2014 "),az=n(Fxe,"A",{href:!0});var t2t=s(az);Apr=r(t2t,"TFCTRLForSequenceClassification"),t2t.forEach(t),ypr=r(Fxe," (CTRL model)"),Fxe.forEach(t),Lpr=i(Q),Q8=n(Q,"LI",{});var Txe=s(Q8);J1e=n(Txe,"STRONG",{});var a2t=s(J1e);xpr=r(a2t,"deberta"),a2t.forEach(t),kpr=r(Txe," \u2014 "),nz=n(Txe,"A",{href:!0});var n2t=s(nz);Spr=r(n2t,"TFDebertaForSequenceClassification"),n2t.forEach(t),Rpr=r(Txe," (DeBERTa model)"),Txe.forEach(t),Bpr=i(Q),W8=n(Q,"LI",{});var Mxe=s(W8);Y1e=n(Mxe,"STRONG",{});var s2t=s(Y1e);Ppr=r(s2t,"deberta-v2"),s2t.forEach(t),$pr=r(Mxe," \u2014 "),sz=n(Mxe,"A",{href:!0});var l2t=s(sz);Ipr=r(l2t,"TFDebertaV2ForSequenceClassification"),l2t.forEach(t),qpr=r(Mxe," (DeBERTa-v2 model)"),Mxe.forEach(t),Npr=i(Q),H8=n(Q,"LI",{});var Exe=s(H8);K1e=n(Exe,"STRONG",{});var i2t=s(K1e);jpr=r(i2t,"distilbert"),i2t.forEach(t),Dpr=r(Exe," \u2014 "),lz=n(Exe,"A",{href:!0});var d2t=s(lz);Gpr=r(d2t,"TFDistilBertForSequenceClassification"),d2t.forEach(t),Opr=r(Exe," (DistilBERT model)"),Exe.forEach(t),Vpr=i(Q),U8=n(Q,"LI",{});var Cxe=s(U8);Z1e=n(Cxe,"STRONG",{});var c2t=s(Z1e);Xpr=r(c2t,"electra"),c2t.forEach(t),zpr=r(Cxe," \u2014 "),iz=n(Cxe,"A",{href:!0});var f2t=s(iz);Qpr=r(f2t,"TFElectraForSequenceClassification"),f2t.forEach(t),Wpr=r(Cxe," (ELECTRA model)"),Cxe.forEach(t),Hpr=i(Q),J8=n(Q,"LI",{});var wxe=s(J8);ebe=n(wxe,"STRONG",{});var m2t=s(ebe);Upr=r(m2t,"flaubert"),m2t.forEach(t),Jpr=r(wxe," \u2014 "),dz=n(wxe,"A",{href:!0});var g2t=s(dz);Ypr=r(g2t,"TFFlaubertForSequenceClassification"),g2t.forEach(t),Kpr=r(wxe," (FlauBERT model)"),wxe.forEach(t),Zpr=i(Q),Y8=n(Q,"LI",{});var Axe=s(Y8);obe=n(Axe,"STRONG",{});var h2t=s(obe);e_r=r(h2t,"funnel"),h2t.forEach(t),o_r=r(Axe," \u2014 "),cz=n(Axe,"A",{href:!0});var p2t=s(cz);r_r=r(p2t,"TFFunnelForSequenceClassification"),p2t.forEach(t),t_r=r(Axe," (Funnel Transformer model)"),Axe.forEach(t),a_r=i(Q),K8=n(Q,"LI",{});var yxe=s(K8);rbe=n(yxe,"STRONG",{});var _2t=s(rbe);n_r=r(_2t,"gpt2"),_2t.forEach(t),s_r=r(yxe," \u2014 "),fz=n(yxe,"A",{href:!0});var u2t=s(fz);l_r=r(u2t,"TFGPT2ForSequenceClassification"),u2t.forEach(t),i_r=r(yxe," (OpenAI GPT-2 model)"),yxe.forEach(t),d_r=i(Q),Z8=n(Q,"LI",{});var Lxe=s(Z8);tbe=n(Lxe,"STRONG",{});var b2t=s(tbe);c_r=r(b2t,"gptj"),b2t.forEach(t),f_r=r(Lxe," \u2014 "),mz=n(Lxe,"A",{href:!0});var v2t=s(mz);m_r=r(v2t,"TFGPTJForSequenceClassification"),v2t.forEach(t),g_r=r(Lxe," (GPT-J model)"),Lxe.forEach(t),h_r=i(Q),e7=n(Q,"LI",{});var xxe=s(e7);abe=n(xxe,"STRONG",{});var F2t=s(abe);p_r=r(F2t,"layoutlm"),F2t.forEach(t),__r=r(xxe," \u2014 "),gz=n(xxe,"A",{href:!0});var T2t=s(gz);u_r=r(T2t,"TFLayoutLMForSequenceClassification"),T2t.forEach(t),b_r=r(xxe," (LayoutLM model)"),xxe.forEach(t),v_r=i(Q),o7=n(Q,"LI",{});var kxe=s(o7);nbe=n(kxe,"STRONG",{});var M2t=s(nbe);F_r=r(M2t,"longformer"),M2t.forEach(t),T_r=r(kxe," \u2014 "),hz=n(kxe,"A",{href:!0});var E2t=s(hz);M_r=r(E2t,"TFLongformerForSequenceClassification"),E2t.forEach(t),E_r=r(kxe," (Longformer model)"),kxe.forEach(t),C_r=i(Q),r7=n(Q,"LI",{});var Sxe=s(r7);sbe=n(Sxe,"STRONG",{});var C2t=s(sbe);w_r=r(C2t,"mobilebert"),C2t.forEach(t),A_r=r(Sxe," \u2014 "),pz=n(Sxe,"A",{href:!0});var w2t=s(pz);y_r=r(w2t,"TFMobileBertForSequenceClassification"),w2t.forEach(t),L_r=r(Sxe," (MobileBERT model)"),Sxe.forEach(t),x_r=i(Q),t7=n(Q,"LI",{});var Rxe=s(t7);lbe=n(Rxe,"STRONG",{});var A2t=s(lbe);k_r=r(A2t,"mpnet"),A2t.forEach(t),S_r=r(Rxe," \u2014 "),_z=n(Rxe,"A",{href:!0});var y2t=s(_z);R_r=r(y2t,"TFMPNetForSequenceClassification"),y2t.forEach(t),B_r=r(Rxe," (MPNet model)"),Rxe.forEach(t),P_r=i(Q),a7=n(Q,"LI",{});var Bxe=s(a7);ibe=n(Bxe,"STRONG",{});var L2t=s(ibe);$_r=r(L2t,"openai-gpt"),L2t.forEach(t),I_r=r(Bxe," \u2014 "),uz=n(Bxe,"A",{href:!0});var x2t=s(uz);q_r=r(x2t,"TFOpenAIGPTForSequenceClassification"),x2t.forEach(t),N_r=r(Bxe," (OpenAI GPT model)"),Bxe.forEach(t),j_r=i(Q),n7=n(Q,"LI",{});var Pxe=s(n7);dbe=n(Pxe,"STRONG",{});var k2t=s(dbe);D_r=r(k2t,"rembert"),k2t.forEach(t),G_r=r(Pxe," \u2014 "),bz=n(Pxe,"A",{href:!0});var S2t=s(bz);O_r=r(S2t,"TFRemBertForSequenceClassification"),S2t.forEach(t),V_r=r(Pxe," (RemBERT model)"),Pxe.forEach(t),X_r=i(Q),s7=n(Q,"LI",{});var $xe=s(s7);cbe=n($xe,"STRONG",{});var R2t=s(cbe);z_r=r(R2t,"roberta"),R2t.forEach(t),Q_r=r($xe," \u2014 "),vz=n($xe,"A",{href:!0});var B2t=s(vz);W_r=r(B2t,"TFRobertaForSequenceClassification"),B2t.forEach(t),H_r=r($xe," (RoBERTa model)"),$xe.forEach(t),U_r=i(Q),l7=n(Q,"LI",{});var Ixe=s(l7);fbe=n(Ixe,"STRONG",{});var P2t=s(fbe);J_r=r(P2t,"roformer"),P2t.forEach(t),Y_r=r(Ixe," \u2014 "),Fz=n(Ixe,"A",{href:!0});var $2t=s(Fz);K_r=r($2t,"TFRoFormerForSequenceClassification"),$2t.forEach(t),Z_r=r(Ixe," (RoFormer model)"),Ixe.forEach(t),eur=i(Q),i7=n(Q,"LI",{});var qxe=s(i7);mbe=n(qxe,"STRONG",{});var I2t=s(mbe);our=r(I2t,"tapas"),I2t.forEach(t),rur=r(qxe," \u2014 "),Tz=n(qxe,"A",{href:!0});var q2t=s(Tz);tur=r(q2t,"TFTapasForSequenceClassification"),q2t.forEach(t),aur=r(qxe," (TAPAS model)"),qxe.forEach(t),nur=i(Q),d7=n(Q,"LI",{});var Nxe=s(d7);gbe=n(Nxe,"STRONG",{});var N2t=s(gbe);sur=r(N2t,"transfo-xl"),N2t.forEach(t),lur=r(Nxe," \u2014 "),Mz=n(Nxe,"A",{href:!0});var j2t=s(Mz);iur=r(j2t,"TFTransfoXLForSequenceClassification"),j2t.forEach(t),dur=r(Nxe," (Transformer-XL model)"),Nxe.forEach(t),cur=i(Q),c7=n(Q,"LI",{});var jxe=s(c7);hbe=n(jxe,"STRONG",{});var D2t=s(hbe);fur=r(D2t,"xlm"),D2t.forEach(t),mur=r(jxe," \u2014 "),Ez=n(jxe,"A",{href:!0});var G2t=s(Ez);gur=r(G2t,"TFXLMForSequenceClassification"),G2t.forEach(t),hur=r(jxe," (XLM model)"),jxe.forEach(t),pur=i(Q),f7=n(Q,"LI",{});var Dxe=s(f7);pbe=n(Dxe,"STRONG",{});var O2t=s(pbe);_ur=r(O2t,"xlm-roberta"),O2t.forEach(t),uur=r(Dxe," \u2014 "),Cz=n(Dxe,"A",{href:!0});var V2t=s(Cz);bur=r(V2t,"TFXLMRobertaForSequenceClassification"),V2t.forEach(t),vur=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),Fur=i(Q),m7=n(Q,"LI",{});var Gxe=s(m7);_be=n(Gxe,"STRONG",{});var X2t=s(_be);Tur=r(X2t,"xlnet"),X2t.forEach(t),Mur=r(Gxe," \u2014 "),wz=n(Gxe,"A",{href:!0});var z2t=s(wz);Eur=r(z2t,"TFXLNetForSequenceClassification"),z2t.forEach(t),Cur=r(Gxe," (XLNet model)"),Gxe.forEach(t),Q.forEach(t),wur=i(Ta),ube=n(Ta,"P",{});var Q2t=s(ube);Aur=r(Q2t,"Examples:"),Q2t.forEach(t),yur=i(Ta),m(n0.$$.fragment,Ta),Ta.forEach(t),ei.forEach(t),sPe=i(c),Ic=n(c,"H2",{class:!0});var uIe=s(Ic);g7=n(uIe,"A",{id:!0,class:!0,href:!0});var W2t=s(g7);bbe=n(W2t,"SPAN",{});var H2t=s(bbe);m(s0.$$.fragment,H2t),H2t.forEach(t),W2t.forEach(t),Lur=i(uIe),vbe=n(uIe,"SPAN",{});var U2t=s(vbe);xur=r(U2t,"TFAutoModelForMultipleChoice"),U2t.forEach(t),uIe.forEach(t),lPe=i(c),Ar=n(c,"DIV",{class:!0});var ri=s(Ar);m(l0.$$.fragment,ri),kur=i(ri),qc=n(ri,"P",{});var $J=s(qc);Sur=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Az=n($J,"A",{href:!0});var J2t=s(Az);Rur=r(J2t,"from_pretrained()"),J2t.forEach(t),Bur=r($J," class method or the "),yz=n($J,"A",{href:!0});var Y2t=s(yz);Pur=r(Y2t,"from_config()"),Y2t.forEach(t),$ur=r($J,` class
method.`),$J.forEach(t),Iur=i(ri),i0=n(ri,"P",{});var bIe=s(i0);qur=r(bIe,"This class cannot be instantiated directly using "),Fbe=n(bIe,"CODE",{});var K2t=s(Fbe);Nur=r(K2t,"__init__()"),K2t.forEach(t),jur=r(bIe," (throws an error)."),bIe.forEach(t),Dur=i(ri),Ft=n(ri,"DIV",{class:!0});var ti=s(Ft);m(d0.$$.fragment,ti),Gur=i(ti),Tbe=n(ti,"P",{});var Z2t=s(Tbe);Our=r(Z2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Z2t.forEach(t),Vur=i(ti),Nc=n(ti,"P",{});var IJ=s(Nc);Xur=r(IJ,`Note:
Loading a model from its configuration file does `),Mbe=n(IJ,"STRONG",{});var e6t=s(Mbe);zur=r(e6t,"not"),e6t.forEach(t),Qur=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(IJ,"A",{href:!0});var o6t=s(Lz);Wur=r(o6t,"from_pretrained()"),o6t.forEach(t),Hur=r(IJ," to load the model weights."),IJ.forEach(t),Uur=i(ti),Ebe=n(ti,"P",{});var r6t=s(Ebe);Jur=r(r6t,"Examples:"),r6t.forEach(t),Yur=i(ti),m(c0.$$.fragment,ti),ti.forEach(t),Kur=i(ri),To=n(ri,"DIV",{class:!0});var Ma=s(To);m(f0.$$.fragment,Ma),Zur=i(Ma),Cbe=n(Ma,"P",{});var t6t=s(Cbe);e1r=r(t6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),t6t.forEach(t),o1r=i(Ma),Cn=n(Ma,"P",{});var m5=s(Cn);r1r=r(m5,"The model class to instantiate is selected based on the "),wbe=n(m5,"CODE",{});var a6t=s(wbe);t1r=r(a6t,"model_type"),a6t.forEach(t),a1r=r(m5,` property of the config object (either
passed as an argument or loaded from `),Abe=n(m5,"CODE",{});var n6t=s(Abe);n1r=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),s1r=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(m5,"CODE",{});var s6t=s(ybe);l1r=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),i1r=r(m5,":"),m5.forEach(t),d1r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);h7=n(ie,"LI",{});var Oxe=s(h7);Lbe=n(Oxe,"STRONG",{});var l6t=s(Lbe);c1r=r(l6t,"albert"),l6t.forEach(t),f1r=r(Oxe," \u2014 "),xz=n(Oxe,"A",{href:!0});var i6t=s(xz);m1r=r(i6t,"TFAlbertForMultipleChoice"),i6t.forEach(t),g1r=r(Oxe," (ALBERT model)"),Oxe.forEach(t),h1r=i(ie),p7=n(ie,"LI",{});var Vxe=s(p7);xbe=n(Vxe,"STRONG",{});var d6t=s(xbe);p1r=r(d6t,"bert"),d6t.forEach(t),_1r=r(Vxe," \u2014 "),kz=n(Vxe,"A",{href:!0});var c6t=s(kz);u1r=r(c6t,"TFBertForMultipleChoice"),c6t.forEach(t),b1r=r(Vxe," (BERT model)"),Vxe.forEach(t),v1r=i(ie),_7=n(ie,"LI",{});var Xxe=s(_7);kbe=n(Xxe,"STRONG",{});var f6t=s(kbe);F1r=r(f6t,"camembert"),f6t.forEach(t),T1r=r(Xxe," \u2014 "),Sz=n(Xxe,"A",{href:!0});var m6t=s(Sz);M1r=r(m6t,"TFCamembertForMultipleChoice"),m6t.forEach(t),E1r=r(Xxe," (CamemBERT model)"),Xxe.forEach(t),C1r=i(ie),u7=n(ie,"LI",{});var zxe=s(u7);Sbe=n(zxe,"STRONG",{});var g6t=s(Sbe);w1r=r(g6t,"convbert"),g6t.forEach(t),A1r=r(zxe," \u2014 "),Rz=n(zxe,"A",{href:!0});var h6t=s(Rz);y1r=r(h6t,"TFConvBertForMultipleChoice"),h6t.forEach(t),L1r=r(zxe," (ConvBERT model)"),zxe.forEach(t),x1r=i(ie),b7=n(ie,"LI",{});var Qxe=s(b7);Rbe=n(Qxe,"STRONG",{});var p6t=s(Rbe);k1r=r(p6t,"distilbert"),p6t.forEach(t),S1r=r(Qxe," \u2014 "),Bz=n(Qxe,"A",{href:!0});var _6t=s(Bz);R1r=r(_6t,"TFDistilBertForMultipleChoice"),_6t.forEach(t),B1r=r(Qxe," (DistilBERT model)"),Qxe.forEach(t),P1r=i(ie),v7=n(ie,"LI",{});var Wxe=s(v7);Bbe=n(Wxe,"STRONG",{});var u6t=s(Bbe);$1r=r(u6t,"electra"),u6t.forEach(t),I1r=r(Wxe," \u2014 "),Pz=n(Wxe,"A",{href:!0});var b6t=s(Pz);q1r=r(b6t,"TFElectraForMultipleChoice"),b6t.forEach(t),N1r=r(Wxe," (ELECTRA model)"),Wxe.forEach(t),j1r=i(ie),F7=n(ie,"LI",{});var Hxe=s(F7);Pbe=n(Hxe,"STRONG",{});var v6t=s(Pbe);D1r=r(v6t,"flaubert"),v6t.forEach(t),G1r=r(Hxe," \u2014 "),$z=n(Hxe,"A",{href:!0});var F6t=s($z);O1r=r(F6t,"TFFlaubertForMultipleChoice"),F6t.forEach(t),V1r=r(Hxe," (FlauBERT model)"),Hxe.forEach(t),X1r=i(ie),T7=n(ie,"LI",{});var Uxe=s(T7);$be=n(Uxe,"STRONG",{});var T6t=s($be);z1r=r(T6t,"funnel"),T6t.forEach(t),Q1r=r(Uxe," \u2014 "),Iz=n(Uxe,"A",{href:!0});var M6t=s(Iz);W1r=r(M6t,"TFFunnelForMultipleChoice"),M6t.forEach(t),H1r=r(Uxe," (Funnel Transformer model)"),Uxe.forEach(t),U1r=i(ie),M7=n(ie,"LI",{});var Jxe=s(M7);Ibe=n(Jxe,"STRONG",{});var E6t=s(Ibe);J1r=r(E6t,"longformer"),E6t.forEach(t),Y1r=r(Jxe," \u2014 "),qz=n(Jxe,"A",{href:!0});var C6t=s(qz);K1r=r(C6t,"TFLongformerForMultipleChoice"),C6t.forEach(t),Z1r=r(Jxe," (Longformer model)"),Jxe.forEach(t),ebr=i(ie),E7=n(ie,"LI",{});var Yxe=s(E7);qbe=n(Yxe,"STRONG",{});var w6t=s(qbe);obr=r(w6t,"mobilebert"),w6t.forEach(t),rbr=r(Yxe," \u2014 "),Nz=n(Yxe,"A",{href:!0});var A6t=s(Nz);tbr=r(A6t,"TFMobileBertForMultipleChoice"),A6t.forEach(t),abr=r(Yxe," (MobileBERT model)"),Yxe.forEach(t),nbr=i(ie),C7=n(ie,"LI",{});var Kxe=s(C7);Nbe=n(Kxe,"STRONG",{});var y6t=s(Nbe);sbr=r(y6t,"mpnet"),y6t.forEach(t),lbr=r(Kxe," \u2014 "),jz=n(Kxe,"A",{href:!0});var L6t=s(jz);ibr=r(L6t,"TFMPNetForMultipleChoice"),L6t.forEach(t),dbr=r(Kxe," (MPNet model)"),Kxe.forEach(t),cbr=i(ie),w7=n(ie,"LI",{});var Zxe=s(w7);jbe=n(Zxe,"STRONG",{});var x6t=s(jbe);fbr=r(x6t,"rembert"),x6t.forEach(t),mbr=r(Zxe," \u2014 "),Dz=n(Zxe,"A",{href:!0});var k6t=s(Dz);gbr=r(k6t,"TFRemBertForMultipleChoice"),k6t.forEach(t),hbr=r(Zxe," (RemBERT model)"),Zxe.forEach(t),pbr=i(ie),A7=n(ie,"LI",{});var eke=s(A7);Dbe=n(eke,"STRONG",{});var S6t=s(Dbe);_br=r(S6t,"roberta"),S6t.forEach(t),ubr=r(eke," \u2014 "),Gz=n(eke,"A",{href:!0});var R6t=s(Gz);bbr=r(R6t,"TFRobertaForMultipleChoice"),R6t.forEach(t),vbr=r(eke," (RoBERTa model)"),eke.forEach(t),Fbr=i(ie),y7=n(ie,"LI",{});var oke=s(y7);Gbe=n(oke,"STRONG",{});var B6t=s(Gbe);Tbr=r(B6t,"roformer"),B6t.forEach(t),Mbr=r(oke," \u2014 "),Oz=n(oke,"A",{href:!0});var P6t=s(Oz);Ebr=r(P6t,"TFRoFormerForMultipleChoice"),P6t.forEach(t),Cbr=r(oke," (RoFormer model)"),oke.forEach(t),wbr=i(ie),L7=n(ie,"LI",{});var rke=s(L7);Obe=n(rke,"STRONG",{});var $6t=s(Obe);Abr=r($6t,"xlm"),$6t.forEach(t),ybr=r(rke," \u2014 "),Vz=n(rke,"A",{href:!0});var I6t=s(Vz);Lbr=r(I6t,"TFXLMForMultipleChoice"),I6t.forEach(t),xbr=r(rke," (XLM model)"),rke.forEach(t),kbr=i(ie),x7=n(ie,"LI",{});var tke=s(x7);Vbe=n(tke,"STRONG",{});var q6t=s(Vbe);Sbr=r(q6t,"xlm-roberta"),q6t.forEach(t),Rbr=r(tke," \u2014 "),Xz=n(tke,"A",{href:!0});var N6t=s(Xz);Bbr=r(N6t,"TFXLMRobertaForMultipleChoice"),N6t.forEach(t),Pbr=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),$br=i(ie),k7=n(ie,"LI",{});var ake=s(k7);Xbe=n(ake,"STRONG",{});var j6t=s(Xbe);Ibr=r(j6t,"xlnet"),j6t.forEach(t),qbr=r(ake," \u2014 "),zz=n(ake,"A",{href:!0});var D6t=s(zz);Nbr=r(D6t,"TFXLNetForMultipleChoice"),D6t.forEach(t),jbr=r(ake," (XLNet model)"),ake.forEach(t),ie.forEach(t),Dbr=i(Ma),zbe=n(Ma,"P",{});var G6t=s(zbe);Gbr=r(G6t,"Examples:"),G6t.forEach(t),Obr=i(Ma),m(m0.$$.fragment,Ma),Ma.forEach(t),ri.forEach(t),iPe=i(c),jc=n(c,"H2",{class:!0});var vIe=s(jc);S7=n(vIe,"A",{id:!0,class:!0,href:!0});var O6t=s(S7);Qbe=n(O6t,"SPAN",{});var V6t=s(Qbe);m(g0.$$.fragment,V6t),V6t.forEach(t),O6t.forEach(t),Vbr=i(vIe),Wbe=n(vIe,"SPAN",{});var X6t=s(Wbe);Xbr=r(X6t,"TFAutoModelForTableQuestionAnswering"),X6t.forEach(t),vIe.forEach(t),dPe=i(c),yr=n(c,"DIV",{class:!0});var ai=s(yr);m(h0.$$.fragment,ai),zbr=i(ai),Dc=n(ai,"P",{});var qJ=s(Dc);Qbr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Qz=n(qJ,"A",{href:!0});var z6t=s(Qz);Wbr=r(z6t,"from_pretrained()"),z6t.forEach(t),Hbr=r(qJ," class method or the "),Wz=n(qJ,"A",{href:!0});var Q6t=s(Wz);Ubr=r(Q6t,"from_config()"),Q6t.forEach(t),Jbr=r(qJ,` class
method.`),qJ.forEach(t),Ybr=i(ai),p0=n(ai,"P",{});var FIe=s(p0);Kbr=r(FIe,"This class cannot be instantiated directly using "),Hbe=n(FIe,"CODE",{});var W6t=s(Hbe);Zbr=r(W6t,"__init__()"),W6t.forEach(t),e2r=r(FIe," (throws an error)."),FIe.forEach(t),o2r=i(ai),Tt=n(ai,"DIV",{class:!0});var ni=s(Tt);m(_0.$$.fragment,ni),r2r=i(ni),Ube=n(ni,"P",{});var H6t=s(Ube);t2r=r(H6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),H6t.forEach(t),a2r=i(ni),Gc=n(ni,"P",{});var NJ=s(Gc);n2r=r(NJ,`Note:
Loading a model from its configuration file does `),Jbe=n(NJ,"STRONG",{});var U6t=s(Jbe);s2r=r(U6t,"not"),U6t.forEach(t),l2r=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(NJ,"A",{href:!0});var J6t=s(Hz);i2r=r(J6t,"from_pretrained()"),J6t.forEach(t),d2r=r(NJ," to load the model weights."),NJ.forEach(t),c2r=i(ni),Ybe=n(ni,"P",{});var Y6t=s(Ybe);f2r=r(Y6t,"Examples:"),Y6t.forEach(t),m2r=i(ni),m(u0.$$.fragment,ni),ni.forEach(t),g2r=i(ai),Mo=n(ai,"DIV",{class:!0});var Ea=s(Mo);m(b0.$$.fragment,Ea),h2r=i(Ea),Kbe=n(Ea,"P",{});var K6t=s(Kbe);p2r=r(K6t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),K6t.forEach(t),_2r=i(Ea),wn=n(Ea,"P",{});var g5=s(wn);u2r=r(g5,"The model class to instantiate is selected based on the "),Zbe=n(g5,"CODE",{});var Z6t=s(Zbe);b2r=r(Z6t,"model_type"),Z6t.forEach(t),v2r=r(g5,` property of the config object (either
passed as an argument or loaded from `),e2e=n(g5,"CODE",{});var evt=s(e2e);F2r=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),T2r=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(g5,"CODE",{});var ovt=s(o2e);M2r=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),E2r=r(g5,":"),g5.forEach(t),C2r=i(Ea),r2e=n(Ea,"UL",{});var rvt=s(r2e);R7=n(rvt,"LI",{});var nke=s(R7);t2e=n(nke,"STRONG",{});var tvt=s(t2e);w2r=r(tvt,"tapas"),tvt.forEach(t),A2r=r(nke," \u2014 "),Uz=n(nke,"A",{href:!0});var avt=s(Uz);y2r=r(avt,"TFTapasForQuestionAnswering"),avt.forEach(t),L2r=r(nke," (TAPAS model)"),nke.forEach(t),rvt.forEach(t),x2r=i(Ea),a2e=n(Ea,"P",{});var nvt=s(a2e);k2r=r(nvt,"Examples:"),nvt.forEach(t),S2r=i(Ea),m(v0.$$.fragment,Ea),Ea.forEach(t),ai.forEach(t),cPe=i(c),Oc=n(c,"H2",{class:!0});var TIe=s(Oc);B7=n(TIe,"A",{id:!0,class:!0,href:!0});var svt=s(B7);n2e=n(svt,"SPAN",{});var lvt=s(n2e);m(F0.$$.fragment,lvt),lvt.forEach(t),svt.forEach(t),R2r=i(TIe),s2e=n(TIe,"SPAN",{});var ivt=s(s2e);B2r=r(ivt,"TFAutoModelForTokenClassification"),ivt.forEach(t),TIe.forEach(t),fPe=i(c),Lr=n(c,"DIV",{class:!0});var si=s(Lr);m(T0.$$.fragment,si),P2r=i(si),Vc=n(si,"P",{});var jJ=s(Vc);$2r=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Jz=n(jJ,"A",{href:!0});var dvt=s(Jz);I2r=r(dvt,"from_pretrained()"),dvt.forEach(t),q2r=r(jJ," class method or the "),Yz=n(jJ,"A",{href:!0});var cvt=s(Yz);N2r=r(cvt,"from_config()"),cvt.forEach(t),j2r=r(jJ,` class
method.`),jJ.forEach(t),D2r=i(si),M0=n(si,"P",{});var MIe=s(M0);G2r=r(MIe,"This class cannot be instantiated directly using "),l2e=n(MIe,"CODE",{});var fvt=s(l2e);O2r=r(fvt,"__init__()"),fvt.forEach(t),V2r=r(MIe," (throws an error)."),MIe.forEach(t),X2r=i(si),Mt=n(si,"DIV",{class:!0});var li=s(Mt);m(E0.$$.fragment,li),z2r=i(li),i2e=n(li,"P",{});var mvt=s(i2e);Q2r=r(mvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mvt.forEach(t),W2r=i(li),Xc=n(li,"P",{});var DJ=s(Xc);H2r=r(DJ,`Note:
Loading a model from its configuration file does `),d2e=n(DJ,"STRONG",{});var gvt=s(d2e);U2r=r(gvt,"not"),gvt.forEach(t),J2r=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(DJ,"A",{href:!0});var hvt=s(Kz);Y2r=r(hvt,"from_pretrained()"),hvt.forEach(t),K2r=r(DJ," to load the model weights."),DJ.forEach(t),Z2r=i(li),c2e=n(li,"P",{});var pvt=s(c2e);e6r=r(pvt,"Examples:"),pvt.forEach(t),o6r=i(li),m(C0.$$.fragment,li),li.forEach(t),r6r=i(si),Eo=n(si,"DIV",{class:!0});var Ca=s(Eo);m(w0.$$.fragment,Ca),t6r=i(Ca),f2e=n(Ca,"P",{});var _vt=s(f2e);a6r=r(_vt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_vt.forEach(t),n6r=i(Ca),An=n(Ca,"P",{});var h5=s(An);s6r=r(h5,"The model class to instantiate is selected based on the "),m2e=n(h5,"CODE",{});var uvt=s(m2e);l6r=r(uvt,"model_type"),uvt.forEach(t),i6r=r(h5,` property of the config object (either
passed as an argument or loaded from `),g2e=n(h5,"CODE",{});var bvt=s(g2e);d6r=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),c6r=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(h5,"CODE",{});var vvt=s(h2e);f6r=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),m6r=r(h5,":"),h5.forEach(t),g6r=i(Ca),K=n(Ca,"UL",{});var te=s(K);P7=n(te,"LI",{});var ske=s(P7);p2e=n(ske,"STRONG",{});var Fvt=s(p2e);h6r=r(Fvt,"albert"),Fvt.forEach(t),p6r=r(ske," \u2014 "),Zz=n(ske,"A",{href:!0});var Tvt=s(Zz);_6r=r(Tvt,"TFAlbertForTokenClassification"),Tvt.forEach(t),u6r=r(ske," (ALBERT model)"),ske.forEach(t),b6r=i(te),$7=n(te,"LI",{});var lke=s($7);_2e=n(lke,"STRONG",{});var Mvt=s(_2e);v6r=r(Mvt,"bert"),Mvt.forEach(t),F6r=r(lke," \u2014 "),eQ=n(lke,"A",{href:!0});var Evt=s(eQ);T6r=r(Evt,"TFBertForTokenClassification"),Evt.forEach(t),M6r=r(lke," (BERT model)"),lke.forEach(t),E6r=i(te),I7=n(te,"LI",{});var ike=s(I7);u2e=n(ike,"STRONG",{});var Cvt=s(u2e);C6r=r(Cvt,"camembert"),Cvt.forEach(t),w6r=r(ike," \u2014 "),oQ=n(ike,"A",{href:!0});var wvt=s(oQ);A6r=r(wvt,"TFCamembertForTokenClassification"),wvt.forEach(t),y6r=r(ike," (CamemBERT model)"),ike.forEach(t),L6r=i(te),q7=n(te,"LI",{});var dke=s(q7);b2e=n(dke,"STRONG",{});var Avt=s(b2e);x6r=r(Avt,"convbert"),Avt.forEach(t),k6r=r(dke," \u2014 "),rQ=n(dke,"A",{href:!0});var yvt=s(rQ);S6r=r(yvt,"TFConvBertForTokenClassification"),yvt.forEach(t),R6r=r(dke," (ConvBERT model)"),dke.forEach(t),B6r=i(te),N7=n(te,"LI",{});var cke=s(N7);v2e=n(cke,"STRONG",{});var Lvt=s(v2e);P6r=r(Lvt,"deberta"),Lvt.forEach(t),$6r=r(cke," \u2014 "),tQ=n(cke,"A",{href:!0});var xvt=s(tQ);I6r=r(xvt,"TFDebertaForTokenClassification"),xvt.forEach(t),q6r=r(cke," (DeBERTa model)"),cke.forEach(t),N6r=i(te),j7=n(te,"LI",{});var fke=s(j7);F2e=n(fke,"STRONG",{});var kvt=s(F2e);j6r=r(kvt,"deberta-v2"),kvt.forEach(t),D6r=r(fke," \u2014 "),aQ=n(fke,"A",{href:!0});var Svt=s(aQ);G6r=r(Svt,"TFDebertaV2ForTokenClassification"),Svt.forEach(t),O6r=r(fke," (DeBERTa-v2 model)"),fke.forEach(t),V6r=i(te),D7=n(te,"LI",{});var mke=s(D7);T2e=n(mke,"STRONG",{});var Rvt=s(T2e);X6r=r(Rvt,"distilbert"),Rvt.forEach(t),z6r=r(mke," \u2014 "),nQ=n(mke,"A",{href:!0});var Bvt=s(nQ);Q6r=r(Bvt,"TFDistilBertForTokenClassification"),Bvt.forEach(t),W6r=r(mke," (DistilBERT model)"),mke.forEach(t),H6r=i(te),G7=n(te,"LI",{});var gke=s(G7);M2e=n(gke,"STRONG",{});var Pvt=s(M2e);U6r=r(Pvt,"electra"),Pvt.forEach(t),J6r=r(gke," \u2014 "),sQ=n(gke,"A",{href:!0});var $vt=s(sQ);Y6r=r($vt,"TFElectraForTokenClassification"),$vt.forEach(t),K6r=r(gke," (ELECTRA model)"),gke.forEach(t),Z6r=i(te),O7=n(te,"LI",{});var hke=s(O7);E2e=n(hke,"STRONG",{});var Ivt=s(E2e);evr=r(Ivt,"flaubert"),Ivt.forEach(t),ovr=r(hke," \u2014 "),lQ=n(hke,"A",{href:!0});var qvt=s(lQ);rvr=r(qvt,"TFFlaubertForTokenClassification"),qvt.forEach(t),tvr=r(hke," (FlauBERT model)"),hke.forEach(t),avr=i(te),V7=n(te,"LI",{});var pke=s(V7);C2e=n(pke,"STRONG",{});var Nvt=s(C2e);nvr=r(Nvt,"funnel"),Nvt.forEach(t),svr=r(pke," \u2014 "),iQ=n(pke,"A",{href:!0});var jvt=s(iQ);lvr=r(jvt,"TFFunnelForTokenClassification"),jvt.forEach(t),ivr=r(pke," (Funnel Transformer model)"),pke.forEach(t),dvr=i(te),X7=n(te,"LI",{});var _ke=s(X7);w2e=n(_ke,"STRONG",{});var Dvt=s(w2e);cvr=r(Dvt,"layoutlm"),Dvt.forEach(t),fvr=r(_ke," \u2014 "),dQ=n(_ke,"A",{href:!0});var Gvt=s(dQ);mvr=r(Gvt,"TFLayoutLMForTokenClassification"),Gvt.forEach(t),gvr=r(_ke," (LayoutLM model)"),_ke.forEach(t),hvr=i(te),z7=n(te,"LI",{});var uke=s(z7);A2e=n(uke,"STRONG",{});var Ovt=s(A2e);pvr=r(Ovt,"longformer"),Ovt.forEach(t),_vr=r(uke," \u2014 "),cQ=n(uke,"A",{href:!0});var Vvt=s(cQ);uvr=r(Vvt,"TFLongformerForTokenClassification"),Vvt.forEach(t),bvr=r(uke," (Longformer model)"),uke.forEach(t),vvr=i(te),Q7=n(te,"LI",{});var bke=s(Q7);y2e=n(bke,"STRONG",{});var Xvt=s(y2e);Fvr=r(Xvt,"mobilebert"),Xvt.forEach(t),Tvr=r(bke," \u2014 "),fQ=n(bke,"A",{href:!0});var zvt=s(fQ);Mvr=r(zvt,"TFMobileBertForTokenClassification"),zvt.forEach(t),Evr=r(bke," (MobileBERT model)"),bke.forEach(t),Cvr=i(te),W7=n(te,"LI",{});var vke=s(W7);L2e=n(vke,"STRONG",{});var Qvt=s(L2e);wvr=r(Qvt,"mpnet"),Qvt.forEach(t),Avr=r(vke," \u2014 "),mQ=n(vke,"A",{href:!0});var Wvt=s(mQ);yvr=r(Wvt,"TFMPNetForTokenClassification"),Wvt.forEach(t),Lvr=r(vke," (MPNet model)"),vke.forEach(t),xvr=i(te),H7=n(te,"LI",{});var Fke=s(H7);x2e=n(Fke,"STRONG",{});var Hvt=s(x2e);kvr=r(Hvt,"rembert"),Hvt.forEach(t),Svr=r(Fke," \u2014 "),gQ=n(Fke,"A",{href:!0});var Uvt=s(gQ);Rvr=r(Uvt,"TFRemBertForTokenClassification"),Uvt.forEach(t),Bvr=r(Fke," (RemBERT model)"),Fke.forEach(t),Pvr=i(te),U7=n(te,"LI",{});var Tke=s(U7);k2e=n(Tke,"STRONG",{});var Jvt=s(k2e);$vr=r(Jvt,"roberta"),Jvt.forEach(t),Ivr=r(Tke," \u2014 "),hQ=n(Tke,"A",{href:!0});var Yvt=s(hQ);qvr=r(Yvt,"TFRobertaForTokenClassification"),Yvt.forEach(t),Nvr=r(Tke," (RoBERTa model)"),Tke.forEach(t),jvr=i(te),J7=n(te,"LI",{});var Mke=s(J7);S2e=n(Mke,"STRONG",{});var Kvt=s(S2e);Dvr=r(Kvt,"roformer"),Kvt.forEach(t),Gvr=r(Mke," \u2014 "),pQ=n(Mke,"A",{href:!0});var Zvt=s(pQ);Ovr=r(Zvt,"TFRoFormerForTokenClassification"),Zvt.forEach(t),Vvr=r(Mke," (RoFormer model)"),Mke.forEach(t),Xvr=i(te),Y7=n(te,"LI",{});var Eke=s(Y7);R2e=n(Eke,"STRONG",{});var eFt=s(R2e);zvr=r(eFt,"xlm"),eFt.forEach(t),Qvr=r(Eke," \u2014 "),_Q=n(Eke,"A",{href:!0});var oFt=s(_Q);Wvr=r(oFt,"TFXLMForTokenClassification"),oFt.forEach(t),Hvr=r(Eke," (XLM model)"),Eke.forEach(t),Uvr=i(te),K7=n(te,"LI",{});var Cke=s(K7);B2e=n(Cke,"STRONG",{});var rFt=s(B2e);Jvr=r(rFt,"xlm-roberta"),rFt.forEach(t),Yvr=r(Cke," \u2014 "),uQ=n(Cke,"A",{href:!0});var tFt=s(uQ);Kvr=r(tFt,"TFXLMRobertaForTokenClassification"),tFt.forEach(t),Zvr=r(Cke," (XLM-RoBERTa model)"),Cke.forEach(t),eFr=i(te),Z7=n(te,"LI",{});var wke=s(Z7);P2e=n(wke,"STRONG",{});var aFt=s(P2e);oFr=r(aFt,"xlnet"),aFt.forEach(t),rFr=r(wke," \u2014 "),bQ=n(wke,"A",{href:!0});var nFt=s(bQ);tFr=r(nFt,"TFXLNetForTokenClassification"),nFt.forEach(t),aFr=r(wke," (XLNet model)"),wke.forEach(t),te.forEach(t),nFr=i(Ca),$2e=n(Ca,"P",{});var sFt=s($2e);sFr=r(sFt,"Examples:"),sFt.forEach(t),lFr=i(Ca),m(A0.$$.fragment,Ca),Ca.forEach(t),si.forEach(t),mPe=i(c),zc=n(c,"H2",{class:!0});var EIe=s(zc);eM=n(EIe,"A",{id:!0,class:!0,href:!0});var lFt=s(eM);I2e=n(lFt,"SPAN",{});var iFt=s(I2e);m(y0.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),iFr=i(EIe),q2e=n(EIe,"SPAN",{});var dFt=s(q2e);dFr=r(dFt,"TFAutoModelForQuestionAnswering"),dFt.forEach(t),EIe.forEach(t),gPe=i(c),xr=n(c,"DIV",{class:!0});var ii=s(xr);m(L0.$$.fragment,ii),cFr=i(ii),Qc=n(ii,"P",{});var GJ=s(Qc);fFr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vQ=n(GJ,"A",{href:!0});var cFt=s(vQ);mFr=r(cFt,"from_pretrained()"),cFt.forEach(t),gFr=r(GJ," class method or the "),FQ=n(GJ,"A",{href:!0});var fFt=s(FQ);hFr=r(fFt,"from_config()"),fFt.forEach(t),pFr=r(GJ,` class
method.`),GJ.forEach(t),_Fr=i(ii),x0=n(ii,"P",{});var CIe=s(x0);uFr=r(CIe,"This class cannot be instantiated directly using "),N2e=n(CIe,"CODE",{});var mFt=s(N2e);bFr=r(mFt,"__init__()"),mFt.forEach(t),vFr=r(CIe," (throws an error)."),CIe.forEach(t),FFr=i(ii),Et=n(ii,"DIV",{class:!0});var di=s(Et);m(k0.$$.fragment,di),TFr=i(di),j2e=n(di,"P",{});var gFt=s(j2e);MFr=r(gFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gFt.forEach(t),EFr=i(di),Wc=n(di,"P",{});var OJ=s(Wc);CFr=r(OJ,`Note:
Loading a model from its configuration file does `),D2e=n(OJ,"STRONG",{});var hFt=s(D2e);wFr=r(hFt,"not"),hFt.forEach(t),AFr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(OJ,"A",{href:!0});var pFt=s(TQ);yFr=r(pFt,"from_pretrained()"),pFt.forEach(t),LFr=r(OJ," to load the model weights."),OJ.forEach(t),xFr=i(di),G2e=n(di,"P",{});var _Ft=s(G2e);kFr=r(_Ft,"Examples:"),_Ft.forEach(t),SFr=i(di),m(S0.$$.fragment,di),di.forEach(t),RFr=i(ii),Co=n(ii,"DIV",{class:!0});var wa=s(Co);m(R0.$$.fragment,wa),BFr=i(wa),O2e=n(wa,"P",{});var uFt=s(O2e);PFr=r(uFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uFt.forEach(t),$Fr=i(wa),yn=n(wa,"P",{});var p5=s(yn);IFr=r(p5,"The model class to instantiate is selected based on the "),V2e=n(p5,"CODE",{});var bFt=s(V2e);qFr=r(bFt,"model_type"),bFt.forEach(t),NFr=r(p5,` property of the config object (either
passed as an argument or loaded from `),X2e=n(p5,"CODE",{});var vFt=s(X2e);jFr=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),DFr=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(p5,"CODE",{});var FFt=s(z2e);GFr=r(FFt,"pretrained_model_name_or_path"),FFt.forEach(t),OFr=r(p5,":"),p5.forEach(t),VFr=i(wa),Z=n(wa,"UL",{});var ae=s(Z);oM=n(ae,"LI",{});var Ake=s(oM);Q2e=n(Ake,"STRONG",{});var TFt=s(Q2e);XFr=r(TFt,"albert"),TFt.forEach(t),zFr=r(Ake," \u2014 "),MQ=n(Ake,"A",{href:!0});var MFt=s(MQ);QFr=r(MFt,"TFAlbertForQuestionAnswering"),MFt.forEach(t),WFr=r(Ake," (ALBERT model)"),Ake.forEach(t),HFr=i(ae),rM=n(ae,"LI",{});var yke=s(rM);W2e=n(yke,"STRONG",{});var EFt=s(W2e);UFr=r(EFt,"bert"),EFt.forEach(t),JFr=r(yke," \u2014 "),EQ=n(yke,"A",{href:!0});var CFt=s(EQ);YFr=r(CFt,"TFBertForQuestionAnswering"),CFt.forEach(t),KFr=r(yke," (BERT model)"),yke.forEach(t),ZFr=i(ae),tM=n(ae,"LI",{});var Lke=s(tM);H2e=n(Lke,"STRONG",{});var wFt=s(H2e);eTr=r(wFt,"camembert"),wFt.forEach(t),oTr=r(Lke," \u2014 "),CQ=n(Lke,"A",{href:!0});var AFt=s(CQ);rTr=r(AFt,"TFCamembertForQuestionAnswering"),AFt.forEach(t),tTr=r(Lke," (CamemBERT model)"),Lke.forEach(t),aTr=i(ae),aM=n(ae,"LI",{});var xke=s(aM);U2e=n(xke,"STRONG",{});var yFt=s(U2e);nTr=r(yFt,"convbert"),yFt.forEach(t),sTr=r(xke," \u2014 "),wQ=n(xke,"A",{href:!0});var LFt=s(wQ);lTr=r(LFt,"TFConvBertForQuestionAnswering"),LFt.forEach(t),iTr=r(xke," (ConvBERT model)"),xke.forEach(t),dTr=i(ae),nM=n(ae,"LI",{});var kke=s(nM);J2e=n(kke,"STRONG",{});var xFt=s(J2e);cTr=r(xFt,"deberta"),xFt.forEach(t),fTr=r(kke," \u2014 "),AQ=n(kke,"A",{href:!0});var kFt=s(AQ);mTr=r(kFt,"TFDebertaForQuestionAnswering"),kFt.forEach(t),gTr=r(kke," (DeBERTa model)"),kke.forEach(t),hTr=i(ae),sM=n(ae,"LI",{});var Ske=s(sM);Y2e=n(Ske,"STRONG",{});var SFt=s(Y2e);pTr=r(SFt,"deberta-v2"),SFt.forEach(t),_Tr=r(Ske," \u2014 "),yQ=n(Ske,"A",{href:!0});var RFt=s(yQ);uTr=r(RFt,"TFDebertaV2ForQuestionAnswering"),RFt.forEach(t),bTr=r(Ske," (DeBERTa-v2 model)"),Ske.forEach(t),vTr=i(ae),lM=n(ae,"LI",{});var Rke=s(lM);K2e=n(Rke,"STRONG",{});var BFt=s(K2e);FTr=r(BFt,"distilbert"),BFt.forEach(t),TTr=r(Rke," \u2014 "),LQ=n(Rke,"A",{href:!0});var PFt=s(LQ);MTr=r(PFt,"TFDistilBertForQuestionAnswering"),PFt.forEach(t),ETr=r(Rke," (DistilBERT model)"),Rke.forEach(t),CTr=i(ae),iM=n(ae,"LI",{});var Bke=s(iM);Z2e=n(Bke,"STRONG",{});var $Ft=s(Z2e);wTr=r($Ft,"electra"),$Ft.forEach(t),ATr=r(Bke," \u2014 "),xQ=n(Bke,"A",{href:!0});var IFt=s(xQ);yTr=r(IFt,"TFElectraForQuestionAnswering"),IFt.forEach(t),LTr=r(Bke," (ELECTRA model)"),Bke.forEach(t),xTr=i(ae),dM=n(ae,"LI",{});var Pke=s(dM);e6e=n(Pke,"STRONG",{});var qFt=s(e6e);kTr=r(qFt,"flaubert"),qFt.forEach(t),STr=r(Pke," \u2014 "),kQ=n(Pke,"A",{href:!0});var NFt=s(kQ);RTr=r(NFt,"TFFlaubertForQuestionAnsweringSimple"),NFt.forEach(t),BTr=r(Pke," (FlauBERT model)"),Pke.forEach(t),PTr=i(ae),cM=n(ae,"LI",{});var $ke=s(cM);o6e=n($ke,"STRONG",{});var jFt=s(o6e);$Tr=r(jFt,"funnel"),jFt.forEach(t),ITr=r($ke," \u2014 "),SQ=n($ke,"A",{href:!0});var DFt=s(SQ);qTr=r(DFt,"TFFunnelForQuestionAnswering"),DFt.forEach(t),NTr=r($ke," (Funnel Transformer model)"),$ke.forEach(t),jTr=i(ae),fM=n(ae,"LI",{});var Ike=s(fM);r6e=n(Ike,"STRONG",{});var GFt=s(r6e);DTr=r(GFt,"gptj"),GFt.forEach(t),GTr=r(Ike," \u2014 "),RQ=n(Ike,"A",{href:!0});var OFt=s(RQ);OTr=r(OFt,"TFGPTJForQuestionAnswering"),OFt.forEach(t),VTr=r(Ike," (GPT-J model)"),Ike.forEach(t),XTr=i(ae),mM=n(ae,"LI",{});var qke=s(mM);t6e=n(qke,"STRONG",{});var VFt=s(t6e);zTr=r(VFt,"longformer"),VFt.forEach(t),QTr=r(qke," \u2014 "),BQ=n(qke,"A",{href:!0});var XFt=s(BQ);WTr=r(XFt,"TFLongformerForQuestionAnswering"),XFt.forEach(t),HTr=r(qke," (Longformer model)"),qke.forEach(t),UTr=i(ae),gM=n(ae,"LI",{});var Nke=s(gM);a6e=n(Nke,"STRONG",{});var zFt=s(a6e);JTr=r(zFt,"mobilebert"),zFt.forEach(t),YTr=r(Nke," \u2014 "),PQ=n(Nke,"A",{href:!0});var QFt=s(PQ);KTr=r(QFt,"TFMobileBertForQuestionAnswering"),QFt.forEach(t),ZTr=r(Nke," (MobileBERT model)"),Nke.forEach(t),e8r=i(ae),hM=n(ae,"LI",{});var jke=s(hM);n6e=n(jke,"STRONG",{});var WFt=s(n6e);o8r=r(WFt,"mpnet"),WFt.forEach(t),r8r=r(jke," \u2014 "),$Q=n(jke,"A",{href:!0});var HFt=s($Q);t8r=r(HFt,"TFMPNetForQuestionAnswering"),HFt.forEach(t),a8r=r(jke," (MPNet model)"),jke.forEach(t),n8r=i(ae),pM=n(ae,"LI",{});var Dke=s(pM);s6e=n(Dke,"STRONG",{});var UFt=s(s6e);s8r=r(UFt,"rembert"),UFt.forEach(t),l8r=r(Dke," \u2014 "),IQ=n(Dke,"A",{href:!0});var JFt=s(IQ);i8r=r(JFt,"TFRemBertForQuestionAnswering"),JFt.forEach(t),d8r=r(Dke," (RemBERT model)"),Dke.forEach(t),c8r=i(ae),_M=n(ae,"LI",{});var Gke=s(_M);l6e=n(Gke,"STRONG",{});var YFt=s(l6e);f8r=r(YFt,"roberta"),YFt.forEach(t),m8r=r(Gke," \u2014 "),qQ=n(Gke,"A",{href:!0});var KFt=s(qQ);g8r=r(KFt,"TFRobertaForQuestionAnswering"),KFt.forEach(t),h8r=r(Gke," (RoBERTa model)"),Gke.forEach(t),p8r=i(ae),uM=n(ae,"LI",{});var Oke=s(uM);i6e=n(Oke,"STRONG",{});var ZFt=s(i6e);_8r=r(ZFt,"roformer"),ZFt.forEach(t),u8r=r(Oke," \u2014 "),NQ=n(Oke,"A",{href:!0});var eTt=s(NQ);b8r=r(eTt,"TFRoFormerForQuestionAnswering"),eTt.forEach(t),v8r=r(Oke," (RoFormer model)"),Oke.forEach(t),F8r=i(ae),bM=n(ae,"LI",{});var Vke=s(bM);d6e=n(Vke,"STRONG",{});var oTt=s(d6e);T8r=r(oTt,"xlm"),oTt.forEach(t),M8r=r(Vke," \u2014 "),jQ=n(Vke,"A",{href:!0});var rTt=s(jQ);E8r=r(rTt,"TFXLMForQuestionAnsweringSimple"),rTt.forEach(t),C8r=r(Vke," (XLM model)"),Vke.forEach(t),w8r=i(ae),vM=n(ae,"LI",{});var Xke=s(vM);c6e=n(Xke,"STRONG",{});var tTt=s(c6e);A8r=r(tTt,"xlm-roberta"),tTt.forEach(t),y8r=r(Xke," \u2014 "),DQ=n(Xke,"A",{href:!0});var aTt=s(DQ);L8r=r(aTt,"TFXLMRobertaForQuestionAnswering"),aTt.forEach(t),x8r=r(Xke," (XLM-RoBERTa model)"),Xke.forEach(t),k8r=i(ae),FM=n(ae,"LI",{});var zke=s(FM);f6e=n(zke,"STRONG",{});var nTt=s(f6e);S8r=r(nTt,"xlnet"),nTt.forEach(t),R8r=r(zke," \u2014 "),GQ=n(zke,"A",{href:!0});var sTt=s(GQ);B8r=r(sTt,"TFXLNetForQuestionAnsweringSimple"),sTt.forEach(t),P8r=r(zke," (XLNet model)"),zke.forEach(t),ae.forEach(t),$8r=i(wa),m6e=n(wa,"P",{});var lTt=s(m6e);I8r=r(lTt,"Examples:"),lTt.forEach(t),q8r=i(wa),m(B0.$$.fragment,wa),wa.forEach(t),ii.forEach(t),hPe=i(c),Hc=n(c,"H2",{class:!0});var wIe=s(Hc);TM=n(wIe,"A",{id:!0,class:!0,href:!0});var iTt=s(TM);g6e=n(iTt,"SPAN",{});var dTt=s(g6e);m(P0.$$.fragment,dTt),dTt.forEach(t),iTt.forEach(t),N8r=i(wIe),h6e=n(wIe,"SPAN",{});var cTt=s(h6e);j8r=r(cTt,"TFAutoModelForVision2Seq"),cTt.forEach(t),wIe.forEach(t),pPe=i(c),kr=n(c,"DIV",{class:!0});var ci=s(kr);m($0.$$.fragment,ci),D8r=i(ci),Uc=n(ci,"P",{});var VJ=s(Uc);G8r=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OQ=n(VJ,"A",{href:!0});var fTt=s(OQ);O8r=r(fTt,"from_pretrained()"),fTt.forEach(t),V8r=r(VJ," class method or the "),VQ=n(VJ,"A",{href:!0});var mTt=s(VQ);X8r=r(mTt,"from_config()"),mTt.forEach(t),z8r=r(VJ,` class
method.`),VJ.forEach(t),Q8r=i(ci),I0=n(ci,"P",{});var AIe=s(I0);W8r=r(AIe,"This class cannot be instantiated directly using "),p6e=n(AIe,"CODE",{});var gTt=s(p6e);H8r=r(gTt,"__init__()"),gTt.forEach(t),U8r=r(AIe," (throws an error)."),AIe.forEach(t),J8r=i(ci),Ct=n(ci,"DIV",{class:!0});var fi=s(Ct);m(q0.$$.fragment,fi),Y8r=i(fi),_6e=n(fi,"P",{});var hTt=s(_6e);K8r=r(hTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hTt.forEach(t),Z8r=i(fi),Jc=n(fi,"P",{});var XJ=s(Jc);e7r=r(XJ,`Note:
Loading a model from its configuration file does `),u6e=n(XJ,"STRONG",{});var pTt=s(u6e);o7r=r(pTt,"not"),pTt.forEach(t),r7r=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(XJ,"A",{href:!0});var _Tt=s(XQ);t7r=r(_Tt,"from_pretrained()"),_Tt.forEach(t),a7r=r(XJ," to load the model weights."),XJ.forEach(t),n7r=i(fi),b6e=n(fi,"P",{});var uTt=s(b6e);s7r=r(uTt,"Examples:"),uTt.forEach(t),l7r=i(fi),m(N0.$$.fragment,fi),fi.forEach(t),i7r=i(ci),wo=n(ci,"DIV",{class:!0});var Aa=s(wo);m(j0.$$.fragment,Aa),d7r=i(Aa),v6e=n(Aa,"P",{});var bTt=s(v6e);c7r=r(bTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),bTt.forEach(t),f7r=i(Aa),Ln=n(Aa,"P",{});var _5=s(Ln);m7r=r(_5,"The model class to instantiate is selected based on the "),F6e=n(_5,"CODE",{});var vTt=s(F6e);g7r=r(vTt,"model_type"),vTt.forEach(t),h7r=r(_5,` property of the config object (either
passed as an argument or loaded from `),T6e=n(_5,"CODE",{});var FTt=s(T6e);p7r=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),_7r=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=n(_5,"CODE",{});var TTt=s(M6e);u7r=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),b7r=r(_5,":"),_5.forEach(t),v7r=i(Aa),E6e=n(Aa,"UL",{});var MTt=s(E6e);MM=n(MTt,"LI",{});var Qke=s(MM);C6e=n(Qke,"STRONG",{});var ETt=s(C6e);F7r=r(ETt,"vision-encoder-decoder"),ETt.forEach(t),T7r=r(Qke," \u2014 "),zQ=n(Qke,"A",{href:!0});var CTt=s(zQ);M7r=r(CTt,"TFVisionEncoderDecoderModel"),CTt.forEach(t),E7r=r(Qke," (Vision Encoder decoder model)"),Qke.forEach(t),MTt.forEach(t),C7r=i(Aa),w6e=n(Aa,"P",{});var wTt=s(w6e);w7r=r(wTt,"Examples:"),wTt.forEach(t),A7r=i(Aa),m(D0.$$.fragment,Aa),Aa.forEach(t),ci.forEach(t),_Pe=i(c),Yc=n(c,"H2",{class:!0});var yIe=s(Yc);EM=n(yIe,"A",{id:!0,class:!0,href:!0});var ATt=s(EM);A6e=n(ATt,"SPAN",{});var yTt=s(A6e);m(G0.$$.fragment,yTt),yTt.forEach(t),ATt.forEach(t),y7r=i(yIe),y6e=n(yIe,"SPAN",{});var LTt=s(y6e);L7r=r(LTt,"TFAutoModelForSpeechSeq2Seq"),LTt.forEach(t),yIe.forEach(t),uPe=i(c),Sr=n(c,"DIV",{class:!0});var mi=s(Sr);m(O0.$$.fragment,mi),x7r=i(mi),Kc=n(mi,"P",{});var zJ=s(Kc);k7r=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QQ=n(zJ,"A",{href:!0});var xTt=s(QQ);S7r=r(xTt,"from_pretrained()"),xTt.forEach(t),R7r=r(zJ," class method or the "),WQ=n(zJ,"A",{href:!0});var kTt=s(WQ);B7r=r(kTt,"from_config()"),kTt.forEach(t),P7r=r(zJ,` class
method.`),zJ.forEach(t),$7r=i(mi),V0=n(mi,"P",{});var LIe=s(V0);I7r=r(LIe,"This class cannot be instantiated directly using "),L6e=n(LIe,"CODE",{});var STt=s(L6e);q7r=r(STt,"__init__()"),STt.forEach(t),N7r=r(LIe," (throws an error)."),LIe.forEach(t),j7r=i(mi),wt=n(mi,"DIV",{class:!0});var gi=s(wt);m(X0.$$.fragment,gi),D7r=i(gi),x6e=n(gi,"P",{});var RTt=s(x6e);G7r=r(RTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RTt.forEach(t),O7r=i(gi),Zc=n(gi,"P",{});var QJ=s(Zc);V7r=r(QJ,`Note:
Loading a model from its configuration file does `),k6e=n(QJ,"STRONG",{});var BTt=s(k6e);X7r=r(BTt,"not"),BTt.forEach(t),z7r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(QJ,"A",{href:!0});var PTt=s(HQ);Q7r=r(PTt,"from_pretrained()"),PTt.forEach(t),W7r=r(QJ," to load the model weights."),QJ.forEach(t),H7r=i(gi),S6e=n(gi,"P",{});var $Tt=s(S6e);U7r=r($Tt,"Examples:"),$Tt.forEach(t),J7r=i(gi),m(z0.$$.fragment,gi),gi.forEach(t),Y7r=i(mi),Ao=n(mi,"DIV",{class:!0});var ya=s(Ao);m(Q0.$$.fragment,ya),K7r=i(ya),R6e=n(ya,"P",{});var ITt=s(R6e);Z7r=r(ITt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ITt.forEach(t),eMr=i(ya),xn=n(ya,"P",{});var u5=s(xn);oMr=r(u5,"The model class to instantiate is selected based on the "),B6e=n(u5,"CODE",{});var qTt=s(B6e);rMr=r(qTt,"model_type"),qTt.forEach(t),tMr=r(u5,` property of the config object (either
passed as an argument or loaded from `),P6e=n(u5,"CODE",{});var NTt=s(P6e);aMr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),nMr=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(u5,"CODE",{});var jTt=s($6e);sMr=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),lMr=r(u5,":"),u5.forEach(t),iMr=i(ya),I6e=n(ya,"UL",{});var DTt=s(I6e);CM=n(DTt,"LI",{});var Wke=s(CM);q6e=n(Wke,"STRONG",{});var GTt=s(q6e);dMr=r(GTt,"speech_to_text"),GTt.forEach(t),cMr=r(Wke," \u2014 "),UQ=n(Wke,"A",{href:!0});var OTt=s(UQ);fMr=r(OTt,"TFSpeech2TextForConditionalGeneration"),OTt.forEach(t),mMr=r(Wke," (Speech2Text model)"),Wke.forEach(t),DTt.forEach(t),gMr=i(ya),N6e=n(ya,"P",{});var VTt=s(N6e);hMr=r(VTt,"Examples:"),VTt.forEach(t),pMr=i(ya),m(W0.$$.fragment,ya),ya.forEach(t),mi.forEach(t),bPe=i(c),ef=n(c,"H2",{class:!0});var xIe=s(ef);wM=n(xIe,"A",{id:!0,class:!0,href:!0});var XTt=s(wM);j6e=n(XTt,"SPAN",{});var zTt=s(j6e);m(H0.$$.fragment,zTt),zTt.forEach(t),XTt.forEach(t),_Mr=i(xIe),D6e=n(xIe,"SPAN",{});var QTt=s(D6e);uMr=r(QTt,"FlaxAutoModel"),QTt.forEach(t),xIe.forEach(t),vPe=i(c),Rr=n(c,"DIV",{class:!0});var hi=s(Rr);m(U0.$$.fragment,hi),bMr=i(hi),of=n(hi,"P",{});var WJ=s(of);vMr=r(WJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JQ=n(WJ,"A",{href:!0});var WTt=s(JQ);FMr=r(WTt,"from_pretrained()"),WTt.forEach(t),TMr=r(WJ," class method or the "),YQ=n(WJ,"A",{href:!0});var HTt=s(YQ);MMr=r(HTt,"from_config()"),HTt.forEach(t),EMr=r(WJ,` class
method.`),WJ.forEach(t),CMr=i(hi),J0=n(hi,"P",{});var kIe=s(J0);wMr=r(kIe,"This class cannot be instantiated directly using "),G6e=n(kIe,"CODE",{});var UTt=s(G6e);AMr=r(UTt,"__init__()"),UTt.forEach(t),yMr=r(kIe," (throws an error)."),kIe.forEach(t),LMr=i(hi),At=n(hi,"DIV",{class:!0});var pi=s(At);m(Y0.$$.fragment,pi),xMr=i(pi),O6e=n(pi,"P",{});var JTt=s(O6e);kMr=r(JTt,"Instantiates one of the base model classes of the library from a configuration."),JTt.forEach(t),SMr=i(pi),rf=n(pi,"P",{});var HJ=s(rf);RMr=r(HJ,`Note:
Loading a model from its configuration file does `),V6e=n(HJ,"STRONG",{});var YTt=s(V6e);BMr=r(YTt,"not"),YTt.forEach(t),PMr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(HJ,"A",{href:!0});var KTt=s(KQ);$Mr=r(KTt,"from_pretrained()"),KTt.forEach(t),IMr=r(HJ," to load the model weights."),HJ.forEach(t),qMr=i(pi),X6e=n(pi,"P",{});var ZTt=s(X6e);NMr=r(ZTt,"Examples:"),ZTt.forEach(t),jMr=i(pi),m(K0.$$.fragment,pi),pi.forEach(t),DMr=i(hi),yo=n(hi,"DIV",{class:!0});var La=s(yo);m(Z0.$$.fragment,La),GMr=i(La),z6e=n(La,"P",{});var e8t=s(z6e);OMr=r(e8t,"Instantiate one of the base model classes of the library from a pretrained model."),e8t.forEach(t),VMr=i(La),kn=n(La,"P",{});var b5=s(kn);XMr=r(b5,"The model class to instantiate is selected based on the "),Q6e=n(b5,"CODE",{});var o8t=s(Q6e);zMr=r(o8t,"model_type"),o8t.forEach(t),QMr=r(b5,` property of the config object (either
passed as an argument or loaded from `),W6e=n(b5,"CODE",{});var r8t=s(W6e);WMr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),HMr=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H6e=n(b5,"CODE",{});var t8t=s(H6e);UMr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),JMr=r(b5,":"),b5.forEach(t),YMr=i(La),z=n(La,"UL",{});var W=s(z);AM=n(W,"LI",{});var Hke=s(AM);U6e=n(Hke,"STRONG",{});var a8t=s(U6e);KMr=r(a8t,"albert"),a8t.forEach(t),ZMr=r(Hke," \u2014 "),ZQ=n(Hke,"A",{href:!0});var n8t=s(ZQ);e4r=r(n8t,"FlaxAlbertModel"),n8t.forEach(t),o4r=r(Hke," (ALBERT model)"),Hke.forEach(t),r4r=i(W),yM=n(W,"LI",{});var Uke=s(yM);J6e=n(Uke,"STRONG",{});var s8t=s(J6e);t4r=r(s8t,"bart"),s8t.forEach(t),a4r=r(Uke," \u2014 "),eW=n(Uke,"A",{href:!0});var l8t=s(eW);n4r=r(l8t,"FlaxBartModel"),l8t.forEach(t),s4r=r(Uke," (BART model)"),Uke.forEach(t),l4r=i(W),LM=n(W,"LI",{});var Jke=s(LM);Y6e=n(Jke,"STRONG",{});var i8t=s(Y6e);i4r=r(i8t,"beit"),i8t.forEach(t),d4r=r(Jke," \u2014 "),oW=n(Jke,"A",{href:!0});var d8t=s(oW);c4r=r(d8t,"FlaxBeitModel"),d8t.forEach(t),f4r=r(Jke," (BEiT model)"),Jke.forEach(t),m4r=i(W),xM=n(W,"LI",{});var Yke=s(xM);K6e=n(Yke,"STRONG",{});var c8t=s(K6e);g4r=r(c8t,"bert"),c8t.forEach(t),h4r=r(Yke," \u2014 "),rW=n(Yke,"A",{href:!0});var f8t=s(rW);p4r=r(f8t,"FlaxBertModel"),f8t.forEach(t),_4r=r(Yke," (BERT model)"),Yke.forEach(t),u4r=i(W),kM=n(W,"LI",{});var Kke=s(kM);Z6e=n(Kke,"STRONG",{});var m8t=s(Z6e);b4r=r(m8t,"big_bird"),m8t.forEach(t),v4r=r(Kke," \u2014 "),tW=n(Kke,"A",{href:!0});var g8t=s(tW);F4r=r(g8t,"FlaxBigBirdModel"),g8t.forEach(t),T4r=r(Kke," (BigBird model)"),Kke.forEach(t),M4r=i(W),SM=n(W,"LI",{});var Zke=s(SM);eve=n(Zke,"STRONG",{});var h8t=s(eve);E4r=r(h8t,"blenderbot"),h8t.forEach(t),C4r=r(Zke," \u2014 "),aW=n(Zke,"A",{href:!0});var p8t=s(aW);w4r=r(p8t,"FlaxBlenderbotModel"),p8t.forEach(t),A4r=r(Zke," (Blenderbot model)"),Zke.forEach(t),y4r=i(W),RM=n(W,"LI",{});var eSe=s(RM);ove=n(eSe,"STRONG",{});var _8t=s(ove);L4r=r(_8t,"blenderbot-small"),_8t.forEach(t),x4r=r(eSe," \u2014 "),nW=n(eSe,"A",{href:!0});var u8t=s(nW);k4r=r(u8t,"FlaxBlenderbotSmallModel"),u8t.forEach(t),S4r=r(eSe," (BlenderbotSmall model)"),eSe.forEach(t),R4r=i(W),BM=n(W,"LI",{});var oSe=s(BM);rve=n(oSe,"STRONG",{});var b8t=s(rve);B4r=r(b8t,"clip"),b8t.forEach(t),P4r=r(oSe," \u2014 "),sW=n(oSe,"A",{href:!0});var v8t=s(sW);$4r=r(v8t,"FlaxCLIPModel"),v8t.forEach(t),I4r=r(oSe," (CLIP model)"),oSe.forEach(t),q4r=i(W),PM=n(W,"LI",{});var rSe=s(PM);tve=n(rSe,"STRONG",{});var F8t=s(tve);N4r=r(F8t,"distilbert"),F8t.forEach(t),j4r=r(rSe," \u2014 "),lW=n(rSe,"A",{href:!0});var T8t=s(lW);D4r=r(T8t,"FlaxDistilBertModel"),T8t.forEach(t),G4r=r(rSe," (DistilBERT model)"),rSe.forEach(t),O4r=i(W),$M=n(W,"LI",{});var tSe=s($M);ave=n(tSe,"STRONG",{});var M8t=s(ave);V4r=r(M8t,"electra"),M8t.forEach(t),X4r=r(tSe," \u2014 "),iW=n(tSe,"A",{href:!0});var E8t=s(iW);z4r=r(E8t,"FlaxElectraModel"),E8t.forEach(t),Q4r=r(tSe," (ELECTRA model)"),tSe.forEach(t),W4r=i(W),IM=n(W,"LI",{});var aSe=s(IM);nve=n(aSe,"STRONG",{});var C8t=s(nve);H4r=r(C8t,"gpt2"),C8t.forEach(t),U4r=r(aSe," \u2014 "),dW=n(aSe,"A",{href:!0});var w8t=s(dW);J4r=r(w8t,"FlaxGPT2Model"),w8t.forEach(t),Y4r=r(aSe," (OpenAI GPT-2 model)"),aSe.forEach(t),K4r=i(W),qM=n(W,"LI",{});var nSe=s(qM);sve=n(nSe,"STRONG",{});var A8t=s(sve);Z4r=r(A8t,"gpt_neo"),A8t.forEach(t),eEr=r(nSe," \u2014 "),cW=n(nSe,"A",{href:!0});var y8t=s(cW);oEr=r(y8t,"FlaxGPTNeoModel"),y8t.forEach(t),rEr=r(nSe," (GPT Neo model)"),nSe.forEach(t),tEr=i(W),NM=n(W,"LI",{});var sSe=s(NM);lve=n(sSe,"STRONG",{});var L8t=s(lve);aEr=r(L8t,"gptj"),L8t.forEach(t),nEr=r(sSe," \u2014 "),fW=n(sSe,"A",{href:!0});var x8t=s(fW);sEr=r(x8t,"FlaxGPTJModel"),x8t.forEach(t),lEr=r(sSe," (GPT-J model)"),sSe.forEach(t),iEr=i(W),jM=n(W,"LI",{});var lSe=s(jM);ive=n(lSe,"STRONG",{});var k8t=s(ive);dEr=r(k8t,"marian"),k8t.forEach(t),cEr=r(lSe," \u2014 "),mW=n(lSe,"A",{href:!0});var S8t=s(mW);fEr=r(S8t,"FlaxMarianModel"),S8t.forEach(t),mEr=r(lSe," (Marian model)"),lSe.forEach(t),gEr=i(W),DM=n(W,"LI",{});var iSe=s(DM);dve=n(iSe,"STRONG",{});var R8t=s(dve);hEr=r(R8t,"mbart"),R8t.forEach(t),pEr=r(iSe," \u2014 "),gW=n(iSe,"A",{href:!0});var B8t=s(gW);_Er=r(B8t,"FlaxMBartModel"),B8t.forEach(t),uEr=r(iSe," (mBART model)"),iSe.forEach(t),bEr=i(W),GM=n(W,"LI",{});var dSe=s(GM);cve=n(dSe,"STRONG",{});var P8t=s(cve);vEr=r(P8t,"mt5"),P8t.forEach(t),FEr=r(dSe," \u2014 "),hW=n(dSe,"A",{href:!0});var $8t=s(hW);TEr=r($8t,"FlaxMT5Model"),$8t.forEach(t),MEr=r(dSe," (mT5 model)"),dSe.forEach(t),EEr=i(W),OM=n(W,"LI",{});var cSe=s(OM);fve=n(cSe,"STRONG",{});var I8t=s(fve);CEr=r(I8t,"pegasus"),I8t.forEach(t),wEr=r(cSe," \u2014 "),pW=n(cSe,"A",{href:!0});var q8t=s(pW);AEr=r(q8t,"FlaxPegasusModel"),q8t.forEach(t),yEr=r(cSe," (Pegasus model)"),cSe.forEach(t),LEr=i(W),VM=n(W,"LI",{});var fSe=s(VM);mve=n(fSe,"STRONG",{});var N8t=s(mve);xEr=r(N8t,"roberta"),N8t.forEach(t),kEr=r(fSe," \u2014 "),_W=n(fSe,"A",{href:!0});var j8t=s(_W);SEr=r(j8t,"FlaxRobertaModel"),j8t.forEach(t),REr=r(fSe," (RoBERTa model)"),fSe.forEach(t),BEr=i(W),XM=n(W,"LI",{});var mSe=s(XM);gve=n(mSe,"STRONG",{});var D8t=s(gve);PEr=r(D8t,"roformer"),D8t.forEach(t),$Er=r(mSe," \u2014 "),uW=n(mSe,"A",{href:!0});var G8t=s(uW);IEr=r(G8t,"FlaxRoFormerModel"),G8t.forEach(t),qEr=r(mSe," (RoFormer model)"),mSe.forEach(t),NEr=i(W),zM=n(W,"LI",{});var gSe=s(zM);hve=n(gSe,"STRONG",{});var O8t=s(hve);jEr=r(O8t,"t5"),O8t.forEach(t),DEr=r(gSe," \u2014 "),bW=n(gSe,"A",{href:!0});var V8t=s(bW);GEr=r(V8t,"FlaxT5Model"),V8t.forEach(t),OEr=r(gSe," (T5 model)"),gSe.forEach(t),VEr=i(W),QM=n(W,"LI",{});var hSe=s(QM);pve=n(hSe,"STRONG",{});var X8t=s(pve);XEr=r(X8t,"vision-text-dual-encoder"),X8t.forEach(t),zEr=r(hSe," \u2014 "),vW=n(hSe,"A",{href:!0});var z8t=s(vW);QEr=r(z8t,"FlaxVisionTextDualEncoderModel"),z8t.forEach(t),WEr=r(hSe," (VisionTextDualEncoder model)"),hSe.forEach(t),HEr=i(W),WM=n(W,"LI",{});var pSe=s(WM);_ve=n(pSe,"STRONG",{});var Q8t=s(_ve);UEr=r(Q8t,"vit"),Q8t.forEach(t),JEr=r(pSe," \u2014 "),FW=n(pSe,"A",{href:!0});var W8t=s(FW);YEr=r(W8t,"FlaxViTModel"),W8t.forEach(t),KEr=r(pSe," (ViT model)"),pSe.forEach(t),ZEr=i(W),HM=n(W,"LI",{});var _Se=s(HM);uve=n(_Se,"STRONG",{});var H8t=s(uve);e5r=r(H8t,"wav2vec2"),H8t.forEach(t),o5r=r(_Se," \u2014 "),TW=n(_Se,"A",{href:!0});var U8t=s(TW);r5r=r(U8t,"FlaxWav2Vec2Model"),U8t.forEach(t),t5r=r(_Se," (Wav2Vec2 model)"),_Se.forEach(t),a5r=i(W),UM=n(W,"LI",{});var uSe=s(UM);bve=n(uSe,"STRONG",{});var J8t=s(bve);n5r=r(J8t,"xglm"),J8t.forEach(t),s5r=r(uSe," \u2014 "),MW=n(uSe,"A",{href:!0});var Y8t=s(MW);l5r=r(Y8t,"FlaxXGLMModel"),Y8t.forEach(t),i5r=r(uSe," (XGLM model)"),uSe.forEach(t),d5r=i(W),JM=n(W,"LI",{});var bSe=s(JM);vve=n(bSe,"STRONG",{});var K8t=s(vve);c5r=r(K8t,"xlm-roberta"),K8t.forEach(t),f5r=r(bSe," \u2014 "),EW=n(bSe,"A",{href:!0});var Z8t=s(EW);m5r=r(Z8t,"FlaxXLMRobertaModel"),Z8t.forEach(t),g5r=r(bSe," (XLM-RoBERTa model)"),bSe.forEach(t),W.forEach(t),h5r=i(La),Fve=n(La,"P",{});var e7t=s(Fve);p5r=r(e7t,"Examples:"),e7t.forEach(t),_5r=i(La),m(ey.$$.fragment,La),La.forEach(t),hi.forEach(t),FPe=i(c),tf=n(c,"H2",{class:!0});var SIe=s(tf);YM=n(SIe,"A",{id:!0,class:!0,href:!0});var o7t=s(YM);Tve=n(o7t,"SPAN",{});var r7t=s(Tve);m(oy.$$.fragment,r7t),r7t.forEach(t),o7t.forEach(t),u5r=i(SIe),Mve=n(SIe,"SPAN",{});var t7t=s(Mve);b5r=r(t7t,"FlaxAutoModelForCausalLM"),t7t.forEach(t),SIe.forEach(t),TPe=i(c),Br=n(c,"DIV",{class:!0});var _i=s(Br);m(ry.$$.fragment,_i),v5r=i(_i),af=n(_i,"P",{});var UJ=s(af);F5r=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CW=n(UJ,"A",{href:!0});var a7t=s(CW);T5r=r(a7t,"from_pretrained()"),a7t.forEach(t),M5r=r(UJ," class method or the "),wW=n(UJ,"A",{href:!0});var n7t=s(wW);E5r=r(n7t,"from_config()"),n7t.forEach(t),C5r=r(UJ,` class
method.`),UJ.forEach(t),w5r=i(_i),ty=n(_i,"P",{});var RIe=s(ty);A5r=r(RIe,"This class cannot be instantiated directly using "),Eve=n(RIe,"CODE",{});var s7t=s(Eve);y5r=r(s7t,"__init__()"),s7t.forEach(t),L5r=r(RIe," (throws an error)."),RIe.forEach(t),x5r=i(_i),yt=n(_i,"DIV",{class:!0});var ui=s(yt);m(ay.$$.fragment,ui),k5r=i(ui),Cve=n(ui,"P",{});var l7t=s(Cve);S5r=r(l7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),l7t.forEach(t),R5r=i(ui),nf=n(ui,"P",{});var JJ=s(nf);B5r=r(JJ,`Note:
Loading a model from its configuration file does `),wve=n(JJ,"STRONG",{});var i7t=s(wve);P5r=r(i7t,"not"),i7t.forEach(t),$5r=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(JJ,"A",{href:!0});var d7t=s(AW);I5r=r(d7t,"from_pretrained()"),d7t.forEach(t),q5r=r(JJ," to load the model weights."),JJ.forEach(t),N5r=i(ui),Ave=n(ui,"P",{});var c7t=s(Ave);j5r=r(c7t,"Examples:"),c7t.forEach(t),D5r=i(ui),m(ny.$$.fragment,ui),ui.forEach(t),G5r=i(_i),Lo=n(_i,"DIV",{class:!0});var xa=s(Lo);m(sy.$$.fragment,xa),O5r=i(xa),yve=n(xa,"P",{});var f7t=s(yve);V5r=r(f7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),f7t.forEach(t),X5r=i(xa),Sn=n(xa,"P",{});var v5=s(Sn);z5r=r(v5,"The model class to instantiate is selected based on the "),Lve=n(v5,"CODE",{});var m7t=s(Lve);Q5r=r(m7t,"model_type"),m7t.forEach(t),W5r=r(v5,` property of the config object (either
passed as an argument or loaded from `),xve=n(v5,"CODE",{});var g7t=s(xve);H5r=r(g7t,"pretrained_model_name_or_path"),g7t.forEach(t),U5r=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(v5,"CODE",{});var h7t=s(kve);J5r=r(h7t,"pretrained_model_name_or_path"),h7t.forEach(t),Y5r=r(v5,":"),v5.forEach(t),K5r=i(xa),ca=n(xa,"UL",{});var bi=s(ca);KM=n(bi,"LI",{});var vSe=s(KM);Sve=n(vSe,"STRONG",{});var p7t=s(Sve);Z5r=r(p7t,"bart"),p7t.forEach(t),e3r=r(vSe," \u2014 "),yW=n(vSe,"A",{href:!0});var _7t=s(yW);o3r=r(_7t,"FlaxBartForCausalLM"),_7t.forEach(t),r3r=r(vSe," (BART model)"),vSe.forEach(t),t3r=i(bi),ZM=n(bi,"LI",{});var FSe=s(ZM);Rve=n(FSe,"STRONG",{});var u7t=s(Rve);a3r=r(u7t,"gpt2"),u7t.forEach(t),n3r=r(FSe," \u2014 "),LW=n(FSe,"A",{href:!0});var b7t=s(LW);s3r=r(b7t,"FlaxGPT2LMHeadModel"),b7t.forEach(t),l3r=r(FSe," (OpenAI GPT-2 model)"),FSe.forEach(t),i3r=i(bi),e4=n(bi,"LI",{});var TSe=s(e4);Bve=n(TSe,"STRONG",{});var v7t=s(Bve);d3r=r(v7t,"gpt_neo"),v7t.forEach(t),c3r=r(TSe," \u2014 "),xW=n(TSe,"A",{href:!0});var F7t=s(xW);f3r=r(F7t,"FlaxGPTNeoForCausalLM"),F7t.forEach(t),m3r=r(TSe," (GPT Neo model)"),TSe.forEach(t),g3r=i(bi),o4=n(bi,"LI",{});var MSe=s(o4);Pve=n(MSe,"STRONG",{});var T7t=s(Pve);h3r=r(T7t,"gptj"),T7t.forEach(t),p3r=r(MSe," \u2014 "),kW=n(MSe,"A",{href:!0});var M7t=s(kW);_3r=r(M7t,"FlaxGPTJForCausalLM"),M7t.forEach(t),u3r=r(MSe," (GPT-J model)"),MSe.forEach(t),b3r=i(bi),r4=n(bi,"LI",{});var ESe=s(r4);$ve=n(ESe,"STRONG",{});var E7t=s($ve);v3r=r(E7t,"xglm"),E7t.forEach(t),F3r=r(ESe," \u2014 "),SW=n(ESe,"A",{href:!0});var C7t=s(SW);T3r=r(C7t,"FlaxXGLMForCausalLM"),C7t.forEach(t),M3r=r(ESe," (XGLM model)"),ESe.forEach(t),bi.forEach(t),E3r=i(xa),Ive=n(xa,"P",{});var w7t=s(Ive);C3r=r(w7t,"Examples:"),w7t.forEach(t),w3r=i(xa),m(ly.$$.fragment,xa),xa.forEach(t),_i.forEach(t),MPe=i(c),sf=n(c,"H2",{class:!0});var BIe=s(sf);t4=n(BIe,"A",{id:!0,class:!0,href:!0});var A7t=s(t4);qve=n(A7t,"SPAN",{});var y7t=s(qve);m(iy.$$.fragment,y7t),y7t.forEach(t),A7t.forEach(t),A3r=i(BIe),Nve=n(BIe,"SPAN",{});var L7t=s(Nve);y3r=r(L7t,"FlaxAutoModelForPreTraining"),L7t.forEach(t),BIe.forEach(t),EPe=i(c),Pr=n(c,"DIV",{class:!0});var vi=s(Pr);m(dy.$$.fragment,vi),L3r=i(vi),lf=n(vi,"P",{});var YJ=s(lf);x3r=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RW=n(YJ,"A",{href:!0});var x7t=s(RW);k3r=r(x7t,"from_pretrained()"),x7t.forEach(t),S3r=r(YJ," class method or the "),BW=n(YJ,"A",{href:!0});var k7t=s(BW);R3r=r(k7t,"from_config()"),k7t.forEach(t),B3r=r(YJ,` class
method.`),YJ.forEach(t),P3r=i(vi),cy=n(vi,"P",{});var PIe=s(cy);$3r=r(PIe,"This class cannot be instantiated directly using "),jve=n(PIe,"CODE",{});var S7t=s(jve);I3r=r(S7t,"__init__()"),S7t.forEach(t),q3r=r(PIe," (throws an error)."),PIe.forEach(t),N3r=i(vi),Lt=n(vi,"DIV",{class:!0});var Fi=s(Lt);m(fy.$$.fragment,Fi),j3r=i(Fi),Dve=n(Fi,"P",{});var R7t=s(Dve);D3r=r(R7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),R7t.forEach(t),G3r=i(Fi),df=n(Fi,"P",{});var KJ=s(df);O3r=r(KJ,`Note:
Loading a model from its configuration file does `),Gve=n(KJ,"STRONG",{});var B7t=s(Gve);V3r=r(B7t,"not"),B7t.forEach(t),X3r=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(KJ,"A",{href:!0});var P7t=s(PW);z3r=r(P7t,"from_pretrained()"),P7t.forEach(t),Q3r=r(KJ," to load the model weights."),KJ.forEach(t),W3r=i(Fi),Ove=n(Fi,"P",{});var $7t=s(Ove);H3r=r($7t,"Examples:"),$7t.forEach(t),U3r=i(Fi),m(my.$$.fragment,Fi),Fi.forEach(t),J3r=i(vi),xo=n(vi,"DIV",{class:!0});var ka=s(xo);m(gy.$$.fragment,ka),Y3r=i(ka),Vve=n(ka,"P",{});var I7t=s(Vve);K3r=r(I7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),I7t.forEach(t),Z3r=i(ka),Rn=n(ka,"P",{});var F5=s(Rn);eCr=r(F5,"The model class to instantiate is selected based on the "),Xve=n(F5,"CODE",{});var q7t=s(Xve);oCr=r(q7t,"model_type"),q7t.forEach(t),rCr=r(F5,` property of the config object (either
passed as an argument or loaded from `),zve=n(F5,"CODE",{});var N7t=s(zve);tCr=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),aCr=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(F5,"CODE",{});var j7t=s(Qve);nCr=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),sCr=r(F5,":"),F5.forEach(t),lCr=i(ka),me=n(ka,"UL",{});var _e=s(me);a4=n(_e,"LI",{});var CSe=s(a4);Wve=n(CSe,"STRONG",{});var D7t=s(Wve);iCr=r(D7t,"albert"),D7t.forEach(t),dCr=r(CSe," \u2014 "),$W=n(CSe,"A",{href:!0});var G7t=s($W);cCr=r(G7t,"FlaxAlbertForPreTraining"),G7t.forEach(t),fCr=r(CSe," (ALBERT model)"),CSe.forEach(t),mCr=i(_e),n4=n(_e,"LI",{});var wSe=s(n4);Hve=n(wSe,"STRONG",{});var O7t=s(Hve);gCr=r(O7t,"bart"),O7t.forEach(t),hCr=r(wSe," \u2014 "),IW=n(wSe,"A",{href:!0});var V7t=s(IW);pCr=r(V7t,"FlaxBartForConditionalGeneration"),V7t.forEach(t),_Cr=r(wSe," (BART model)"),wSe.forEach(t),uCr=i(_e),s4=n(_e,"LI",{});var ASe=s(s4);Uve=n(ASe,"STRONG",{});var X7t=s(Uve);bCr=r(X7t,"bert"),X7t.forEach(t),vCr=r(ASe," \u2014 "),qW=n(ASe,"A",{href:!0});var z7t=s(qW);FCr=r(z7t,"FlaxBertForPreTraining"),z7t.forEach(t),TCr=r(ASe," (BERT model)"),ASe.forEach(t),MCr=i(_e),l4=n(_e,"LI",{});var ySe=s(l4);Jve=n(ySe,"STRONG",{});var Q7t=s(Jve);ECr=r(Q7t,"big_bird"),Q7t.forEach(t),CCr=r(ySe," \u2014 "),NW=n(ySe,"A",{href:!0});var W7t=s(NW);wCr=r(W7t,"FlaxBigBirdForPreTraining"),W7t.forEach(t),ACr=r(ySe," (BigBird model)"),ySe.forEach(t),yCr=i(_e),i4=n(_e,"LI",{});var LSe=s(i4);Yve=n(LSe,"STRONG",{});var H7t=s(Yve);LCr=r(H7t,"electra"),H7t.forEach(t),xCr=r(LSe," \u2014 "),jW=n(LSe,"A",{href:!0});var U7t=s(jW);kCr=r(U7t,"FlaxElectraForPreTraining"),U7t.forEach(t),SCr=r(LSe," (ELECTRA model)"),LSe.forEach(t),RCr=i(_e),d4=n(_e,"LI",{});var xSe=s(d4);Kve=n(xSe,"STRONG",{});var J7t=s(Kve);BCr=r(J7t,"mbart"),J7t.forEach(t),PCr=r(xSe," \u2014 "),DW=n(xSe,"A",{href:!0});var Y7t=s(DW);$Cr=r(Y7t,"FlaxMBartForConditionalGeneration"),Y7t.forEach(t),ICr=r(xSe," (mBART model)"),xSe.forEach(t),qCr=i(_e),c4=n(_e,"LI",{});var kSe=s(c4);Zve=n(kSe,"STRONG",{});var K7t=s(Zve);NCr=r(K7t,"mt5"),K7t.forEach(t),jCr=r(kSe," \u2014 "),GW=n(kSe,"A",{href:!0});var Z7t=s(GW);DCr=r(Z7t,"FlaxMT5ForConditionalGeneration"),Z7t.forEach(t),GCr=r(kSe," (mT5 model)"),kSe.forEach(t),OCr=i(_e),f4=n(_e,"LI",{});var SSe=s(f4);eFe=n(SSe,"STRONG",{});var eMt=s(eFe);VCr=r(eMt,"roberta"),eMt.forEach(t),XCr=r(SSe," \u2014 "),OW=n(SSe,"A",{href:!0});var oMt=s(OW);zCr=r(oMt,"FlaxRobertaForMaskedLM"),oMt.forEach(t),QCr=r(SSe," (RoBERTa model)"),SSe.forEach(t),WCr=i(_e),m4=n(_e,"LI",{});var RSe=s(m4);oFe=n(RSe,"STRONG",{});var rMt=s(oFe);HCr=r(rMt,"roformer"),rMt.forEach(t),UCr=r(RSe," \u2014 "),VW=n(RSe,"A",{href:!0});var tMt=s(VW);JCr=r(tMt,"FlaxRoFormerForMaskedLM"),tMt.forEach(t),YCr=r(RSe," (RoFormer model)"),RSe.forEach(t),KCr=i(_e),g4=n(_e,"LI",{});var BSe=s(g4);rFe=n(BSe,"STRONG",{});var aMt=s(rFe);ZCr=r(aMt,"t5"),aMt.forEach(t),ewr=r(BSe," \u2014 "),XW=n(BSe,"A",{href:!0});var nMt=s(XW);owr=r(nMt,"FlaxT5ForConditionalGeneration"),nMt.forEach(t),rwr=r(BSe," (T5 model)"),BSe.forEach(t),twr=i(_e),h4=n(_e,"LI",{});var PSe=s(h4);tFe=n(PSe,"STRONG",{});var sMt=s(tFe);awr=r(sMt,"wav2vec2"),sMt.forEach(t),nwr=r(PSe," \u2014 "),zW=n(PSe,"A",{href:!0});var lMt=s(zW);swr=r(lMt,"FlaxWav2Vec2ForPreTraining"),lMt.forEach(t),lwr=r(PSe," (Wav2Vec2 model)"),PSe.forEach(t),iwr=i(_e),p4=n(_e,"LI",{});var $Se=s(p4);aFe=n($Se,"STRONG",{});var iMt=s(aFe);dwr=r(iMt,"xlm-roberta"),iMt.forEach(t),cwr=r($Se," \u2014 "),QW=n($Se,"A",{href:!0});var dMt=s(QW);fwr=r(dMt,"FlaxXLMRobertaForMaskedLM"),dMt.forEach(t),mwr=r($Se," (XLM-RoBERTa model)"),$Se.forEach(t),_e.forEach(t),gwr=i(ka),nFe=n(ka,"P",{});var cMt=s(nFe);hwr=r(cMt,"Examples:"),cMt.forEach(t),pwr=i(ka),m(hy.$$.fragment,ka),ka.forEach(t),vi.forEach(t),CPe=i(c),cf=n(c,"H2",{class:!0});var $Ie=s(cf);_4=n($Ie,"A",{id:!0,class:!0,href:!0});var fMt=s(_4);sFe=n(fMt,"SPAN",{});var mMt=s(sFe);m(py.$$.fragment,mMt),mMt.forEach(t),fMt.forEach(t),_wr=i($Ie),lFe=n($Ie,"SPAN",{});var gMt=s(lFe);uwr=r(gMt,"FlaxAutoModelForMaskedLM"),gMt.forEach(t),$Ie.forEach(t),wPe=i(c),$r=n(c,"DIV",{class:!0});var Ti=s($r);m(_y.$$.fragment,Ti),bwr=i(Ti),ff=n(Ti,"P",{});var ZJ=s(ff);vwr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WW=n(ZJ,"A",{href:!0});var hMt=s(WW);Fwr=r(hMt,"from_pretrained()"),hMt.forEach(t),Twr=r(ZJ," class method or the "),HW=n(ZJ,"A",{href:!0});var pMt=s(HW);Mwr=r(pMt,"from_config()"),pMt.forEach(t),Ewr=r(ZJ,` class
method.`),ZJ.forEach(t),Cwr=i(Ti),uy=n(Ti,"P",{});var IIe=s(uy);wwr=r(IIe,"This class cannot be instantiated directly using "),iFe=n(IIe,"CODE",{});var _Mt=s(iFe);Awr=r(_Mt,"__init__()"),_Mt.forEach(t),ywr=r(IIe," (throws an error)."),IIe.forEach(t),Lwr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Mi=s(xt);m(by.$$.fragment,Mi),xwr=i(Mi),dFe=n(Mi,"P",{});var uMt=s(dFe);kwr=r(uMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uMt.forEach(t),Swr=i(Mi),mf=n(Mi,"P",{});var eY=s(mf);Rwr=r(eY,`Note:
Loading a model from its configuration file does `),cFe=n(eY,"STRONG",{});var bMt=s(cFe);Bwr=r(bMt,"not"),bMt.forEach(t),Pwr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(eY,"A",{href:!0});var vMt=s(UW);$wr=r(vMt,"from_pretrained()"),vMt.forEach(t),Iwr=r(eY," to load the model weights."),eY.forEach(t),qwr=i(Mi),fFe=n(Mi,"P",{});var FMt=s(fFe);Nwr=r(FMt,"Examples:"),FMt.forEach(t),jwr=i(Mi),m(vy.$$.fragment,Mi),Mi.forEach(t),Dwr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Sa=s(ko);m(Fy.$$.fragment,Sa),Gwr=i(Sa),mFe=n(Sa,"P",{});var TMt=s(mFe);Owr=r(TMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TMt.forEach(t),Vwr=i(Sa),Bn=n(Sa,"P",{});var T5=s(Bn);Xwr=r(T5,"The model class to instantiate is selected based on the "),gFe=n(T5,"CODE",{});var MMt=s(gFe);zwr=r(MMt,"model_type"),MMt.forEach(t),Qwr=r(T5,` property of the config object (either
passed as an argument or loaded from `),hFe=n(T5,"CODE",{});var EMt=s(hFe);Wwr=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),Hwr=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(T5,"CODE",{});var CMt=s(pFe);Uwr=r(CMt,"pretrained_model_name_or_path"),CMt.forEach(t),Jwr=r(T5,":"),T5.forEach(t),Ywr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);u4=n(Ae,"LI",{});var ISe=s(u4);_Fe=n(ISe,"STRONG",{});var wMt=s(_Fe);Kwr=r(wMt,"albert"),wMt.forEach(t),Zwr=r(ISe," \u2014 "),JW=n(ISe,"A",{href:!0});var AMt=s(JW);eAr=r(AMt,"FlaxAlbertForMaskedLM"),AMt.forEach(t),oAr=r(ISe," (ALBERT model)"),ISe.forEach(t),rAr=i(Ae),b4=n(Ae,"LI",{});var qSe=s(b4);uFe=n(qSe,"STRONG",{});var yMt=s(uFe);tAr=r(yMt,"bart"),yMt.forEach(t),aAr=r(qSe," \u2014 "),YW=n(qSe,"A",{href:!0});var LMt=s(YW);nAr=r(LMt,"FlaxBartForConditionalGeneration"),LMt.forEach(t),sAr=r(qSe," (BART model)"),qSe.forEach(t),lAr=i(Ae),v4=n(Ae,"LI",{});var NSe=s(v4);bFe=n(NSe,"STRONG",{});var xMt=s(bFe);iAr=r(xMt,"bert"),xMt.forEach(t),dAr=r(NSe," \u2014 "),KW=n(NSe,"A",{href:!0});var kMt=s(KW);cAr=r(kMt,"FlaxBertForMaskedLM"),kMt.forEach(t),fAr=r(NSe," (BERT model)"),NSe.forEach(t),mAr=i(Ae),F4=n(Ae,"LI",{});var jSe=s(F4);vFe=n(jSe,"STRONG",{});var SMt=s(vFe);gAr=r(SMt,"big_bird"),SMt.forEach(t),hAr=r(jSe," \u2014 "),ZW=n(jSe,"A",{href:!0});var RMt=s(ZW);pAr=r(RMt,"FlaxBigBirdForMaskedLM"),RMt.forEach(t),_Ar=r(jSe," (BigBird model)"),jSe.forEach(t),uAr=i(Ae),T4=n(Ae,"LI",{});var DSe=s(T4);FFe=n(DSe,"STRONG",{});var BMt=s(FFe);bAr=r(BMt,"distilbert"),BMt.forEach(t),vAr=r(DSe," \u2014 "),eH=n(DSe,"A",{href:!0});var PMt=s(eH);FAr=r(PMt,"FlaxDistilBertForMaskedLM"),PMt.forEach(t),TAr=r(DSe," (DistilBERT model)"),DSe.forEach(t),MAr=i(Ae),M4=n(Ae,"LI",{});var GSe=s(M4);TFe=n(GSe,"STRONG",{});var $Mt=s(TFe);EAr=r($Mt,"electra"),$Mt.forEach(t),CAr=r(GSe," \u2014 "),oH=n(GSe,"A",{href:!0});var IMt=s(oH);wAr=r(IMt,"FlaxElectraForMaskedLM"),IMt.forEach(t),AAr=r(GSe," (ELECTRA model)"),GSe.forEach(t),yAr=i(Ae),E4=n(Ae,"LI",{});var OSe=s(E4);MFe=n(OSe,"STRONG",{});var qMt=s(MFe);LAr=r(qMt,"mbart"),qMt.forEach(t),xAr=r(OSe," \u2014 "),rH=n(OSe,"A",{href:!0});var NMt=s(rH);kAr=r(NMt,"FlaxMBartForConditionalGeneration"),NMt.forEach(t),SAr=r(OSe," (mBART model)"),OSe.forEach(t),RAr=i(Ae),C4=n(Ae,"LI",{});var VSe=s(C4);EFe=n(VSe,"STRONG",{});var jMt=s(EFe);BAr=r(jMt,"roberta"),jMt.forEach(t),PAr=r(VSe," \u2014 "),tH=n(VSe,"A",{href:!0});var DMt=s(tH);$Ar=r(DMt,"FlaxRobertaForMaskedLM"),DMt.forEach(t),IAr=r(VSe," (RoBERTa model)"),VSe.forEach(t),qAr=i(Ae),w4=n(Ae,"LI",{});var XSe=s(w4);CFe=n(XSe,"STRONG",{});var GMt=s(CFe);NAr=r(GMt,"roformer"),GMt.forEach(t),jAr=r(XSe," \u2014 "),aH=n(XSe,"A",{href:!0});var OMt=s(aH);DAr=r(OMt,"FlaxRoFormerForMaskedLM"),OMt.forEach(t),GAr=r(XSe," (RoFormer model)"),XSe.forEach(t),OAr=i(Ae),A4=n(Ae,"LI",{});var zSe=s(A4);wFe=n(zSe,"STRONG",{});var VMt=s(wFe);VAr=r(VMt,"xlm-roberta"),VMt.forEach(t),XAr=r(zSe," \u2014 "),nH=n(zSe,"A",{href:!0});var XMt=s(nH);zAr=r(XMt,"FlaxXLMRobertaForMaskedLM"),XMt.forEach(t),QAr=r(zSe," (XLM-RoBERTa model)"),zSe.forEach(t),Ae.forEach(t),WAr=i(Sa),AFe=n(Sa,"P",{});var zMt=s(AFe);HAr=r(zMt,"Examples:"),zMt.forEach(t),UAr=i(Sa),m(Ty.$$.fragment,Sa),Sa.forEach(t),Ti.forEach(t),APe=i(c),gf=n(c,"H2",{class:!0});var qIe=s(gf);y4=n(qIe,"A",{id:!0,class:!0,href:!0});var QMt=s(y4);yFe=n(QMt,"SPAN",{});var WMt=s(yFe);m(My.$$.fragment,WMt),WMt.forEach(t),QMt.forEach(t),JAr=i(qIe),LFe=n(qIe,"SPAN",{});var HMt=s(LFe);YAr=r(HMt,"FlaxAutoModelForSeq2SeqLM"),HMt.forEach(t),qIe.forEach(t),yPe=i(c),Ir=n(c,"DIV",{class:!0});var Ei=s(Ir);m(Ey.$$.fragment,Ei),KAr=i(Ei),hf=n(Ei,"P",{});var oY=s(hf);ZAr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sH=n(oY,"A",{href:!0});var UMt=s(sH);e0r=r(UMt,"from_pretrained()"),UMt.forEach(t),o0r=r(oY," class method or the "),lH=n(oY,"A",{href:!0});var JMt=s(lH);r0r=r(JMt,"from_config()"),JMt.forEach(t),t0r=r(oY,` class
method.`),oY.forEach(t),a0r=i(Ei),Cy=n(Ei,"P",{});var NIe=s(Cy);n0r=r(NIe,"This class cannot be instantiated directly using "),xFe=n(NIe,"CODE",{});var YMt=s(xFe);s0r=r(YMt,"__init__()"),YMt.forEach(t),l0r=r(NIe," (throws an error)."),NIe.forEach(t),i0r=i(Ei),kt=n(Ei,"DIV",{class:!0});var Ci=s(kt);m(wy.$$.fragment,Ci),d0r=i(Ci),kFe=n(Ci,"P",{});var KMt=s(kFe);c0r=r(KMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KMt.forEach(t),f0r=i(Ci),pf=n(Ci,"P",{});var rY=s(pf);m0r=r(rY,`Note:
Loading a model from its configuration file does `),SFe=n(rY,"STRONG",{});var ZMt=s(SFe);g0r=r(ZMt,"not"),ZMt.forEach(t),h0r=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(rY,"A",{href:!0});var e4t=s(iH);p0r=r(e4t,"from_pretrained()"),e4t.forEach(t),_0r=r(rY," to load the model weights."),rY.forEach(t),u0r=i(Ci),RFe=n(Ci,"P",{});var o4t=s(RFe);b0r=r(o4t,"Examples:"),o4t.forEach(t),v0r=i(Ci),m(Ay.$$.fragment,Ci),Ci.forEach(t),F0r=i(Ei),So=n(Ei,"DIV",{class:!0});var Ra=s(So);m(yy.$$.fragment,Ra),T0r=i(Ra),BFe=n(Ra,"P",{});var r4t=s(BFe);M0r=r(r4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),r4t.forEach(t),E0r=i(Ra),Pn=n(Ra,"P",{});var M5=s(Pn);C0r=r(M5,"The model class to instantiate is selected based on the "),PFe=n(M5,"CODE",{});var t4t=s(PFe);w0r=r(t4t,"model_type"),t4t.forEach(t),A0r=r(M5,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(M5,"CODE",{});var a4t=s($Fe);y0r=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),L0r=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(M5,"CODE",{});var n4t=s(IFe);x0r=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),k0r=r(M5,":"),M5.forEach(t),S0r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);L4=n(so,"LI",{});var QSe=s(L4);qFe=n(QSe,"STRONG",{});var s4t=s(qFe);R0r=r(s4t,"bart"),s4t.forEach(t),B0r=r(QSe," \u2014 "),dH=n(QSe,"A",{href:!0});var l4t=s(dH);P0r=r(l4t,"FlaxBartForConditionalGeneration"),l4t.forEach(t),$0r=r(QSe," (BART model)"),QSe.forEach(t),I0r=i(so),x4=n(so,"LI",{});var WSe=s(x4);NFe=n(WSe,"STRONG",{});var i4t=s(NFe);q0r=r(i4t,"blenderbot"),i4t.forEach(t),N0r=r(WSe," \u2014 "),cH=n(WSe,"A",{href:!0});var d4t=s(cH);j0r=r(d4t,"FlaxBlenderbotForConditionalGeneration"),d4t.forEach(t),D0r=r(WSe," (Blenderbot model)"),WSe.forEach(t),G0r=i(so),k4=n(so,"LI",{});var HSe=s(k4);jFe=n(HSe,"STRONG",{});var c4t=s(jFe);O0r=r(c4t,"blenderbot-small"),c4t.forEach(t),V0r=r(HSe," \u2014 "),fH=n(HSe,"A",{href:!0});var f4t=s(fH);X0r=r(f4t,"FlaxBlenderbotSmallForConditionalGeneration"),f4t.forEach(t),z0r=r(HSe," (BlenderbotSmall model)"),HSe.forEach(t),Q0r=i(so),S4=n(so,"LI",{});var USe=s(S4);DFe=n(USe,"STRONG",{});var m4t=s(DFe);W0r=r(m4t,"encoder-decoder"),m4t.forEach(t),H0r=r(USe," \u2014 "),mH=n(USe,"A",{href:!0});var g4t=s(mH);U0r=r(g4t,"FlaxEncoderDecoderModel"),g4t.forEach(t),J0r=r(USe," (Encoder decoder model)"),USe.forEach(t),Y0r=i(so),R4=n(so,"LI",{});var JSe=s(R4);GFe=n(JSe,"STRONG",{});var h4t=s(GFe);K0r=r(h4t,"marian"),h4t.forEach(t),Z0r=r(JSe," \u2014 "),gH=n(JSe,"A",{href:!0});var p4t=s(gH);eyr=r(p4t,"FlaxMarianMTModel"),p4t.forEach(t),oyr=r(JSe," (Marian model)"),JSe.forEach(t),ryr=i(so),B4=n(so,"LI",{});var YSe=s(B4);OFe=n(YSe,"STRONG",{});var _4t=s(OFe);tyr=r(_4t,"mbart"),_4t.forEach(t),ayr=r(YSe," \u2014 "),hH=n(YSe,"A",{href:!0});var u4t=s(hH);nyr=r(u4t,"FlaxMBartForConditionalGeneration"),u4t.forEach(t),syr=r(YSe," (mBART model)"),YSe.forEach(t),lyr=i(so),P4=n(so,"LI",{});var KSe=s(P4);VFe=n(KSe,"STRONG",{});var b4t=s(VFe);iyr=r(b4t,"mt5"),b4t.forEach(t),dyr=r(KSe," \u2014 "),pH=n(KSe,"A",{href:!0});var v4t=s(pH);cyr=r(v4t,"FlaxMT5ForConditionalGeneration"),v4t.forEach(t),fyr=r(KSe," (mT5 model)"),KSe.forEach(t),myr=i(so),$4=n(so,"LI",{});var ZSe=s($4);XFe=n(ZSe,"STRONG",{});var F4t=s(XFe);gyr=r(F4t,"pegasus"),F4t.forEach(t),hyr=r(ZSe," \u2014 "),_H=n(ZSe,"A",{href:!0});var T4t=s(_H);pyr=r(T4t,"FlaxPegasusForConditionalGeneration"),T4t.forEach(t),_yr=r(ZSe," (Pegasus model)"),ZSe.forEach(t),uyr=i(so),I4=n(so,"LI",{});var eRe=s(I4);zFe=n(eRe,"STRONG",{});var M4t=s(zFe);byr=r(M4t,"t5"),M4t.forEach(t),vyr=r(eRe," \u2014 "),uH=n(eRe,"A",{href:!0});var E4t=s(uH);Fyr=r(E4t,"FlaxT5ForConditionalGeneration"),E4t.forEach(t),Tyr=r(eRe," (T5 model)"),eRe.forEach(t),so.forEach(t),Myr=i(Ra),QFe=n(Ra,"P",{});var C4t=s(QFe);Eyr=r(C4t,"Examples:"),C4t.forEach(t),Cyr=i(Ra),m(Ly.$$.fragment,Ra),Ra.forEach(t),Ei.forEach(t),LPe=i(c),_f=n(c,"H2",{class:!0});var jIe=s(_f);q4=n(jIe,"A",{id:!0,class:!0,href:!0});var w4t=s(q4);WFe=n(w4t,"SPAN",{});var A4t=s(WFe);m(xy.$$.fragment,A4t),A4t.forEach(t),w4t.forEach(t),wyr=i(jIe),HFe=n(jIe,"SPAN",{});var y4t=s(HFe);Ayr=r(y4t,"FlaxAutoModelForSequenceClassification"),y4t.forEach(t),jIe.forEach(t),xPe=i(c),qr=n(c,"DIV",{class:!0});var wi=s(qr);m(ky.$$.fragment,wi),yyr=i(wi),uf=n(wi,"P",{});var tY=s(uf);Lyr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bH=n(tY,"A",{href:!0});var L4t=s(bH);xyr=r(L4t,"from_pretrained()"),L4t.forEach(t),kyr=r(tY," class method or the "),vH=n(tY,"A",{href:!0});var x4t=s(vH);Syr=r(x4t,"from_config()"),x4t.forEach(t),Ryr=r(tY,` class
method.`),tY.forEach(t),Byr=i(wi),Sy=n(wi,"P",{});var DIe=s(Sy);Pyr=r(DIe,"This class cannot be instantiated directly using "),UFe=n(DIe,"CODE",{});var k4t=s(UFe);$yr=r(k4t,"__init__()"),k4t.forEach(t),Iyr=r(DIe," (throws an error)."),DIe.forEach(t),qyr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(Ry.$$.fragment,Ai),Nyr=i(Ai),JFe=n(Ai,"P",{});var S4t=s(JFe);jyr=r(S4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S4t.forEach(t),Dyr=i(Ai),bf=n(Ai,"P",{});var aY=s(bf);Gyr=r(aY,`Note:
Loading a model from its configuration file does `),YFe=n(aY,"STRONG",{});var R4t=s(YFe);Oyr=r(R4t,"not"),R4t.forEach(t),Vyr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(aY,"A",{href:!0});var B4t=s(FH);Xyr=r(B4t,"from_pretrained()"),B4t.forEach(t),zyr=r(aY," to load the model weights."),aY.forEach(t),Qyr=i(Ai),KFe=n(Ai,"P",{});var P4t=s(KFe);Wyr=r(P4t,"Examples:"),P4t.forEach(t),Hyr=i(Ai),m(By.$$.fragment,Ai),Ai.forEach(t),Uyr=i(wi),Ro=n(wi,"DIV",{class:!0});var Ba=s(Ro);m(Py.$$.fragment,Ba),Jyr=i(Ba),ZFe=n(Ba,"P",{});var $4t=s(ZFe);Yyr=r($4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$4t.forEach(t),Kyr=i(Ba),$n=n(Ba,"P",{});var E5=s($n);Zyr=r(E5,"The model class to instantiate is selected based on the "),eTe=n(E5,"CODE",{});var I4t=s(eTe);eLr=r(I4t,"model_type"),I4t.forEach(t),oLr=r(E5,` property of the config object (either
passed as an argument or loaded from `),oTe=n(E5,"CODE",{});var q4t=s(oTe);rLr=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),tLr=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(E5,"CODE",{});var N4t=s(rTe);aLr=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),nLr=r(E5,":"),E5.forEach(t),sLr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);N4=n(ye,"LI",{});var oRe=s(N4);tTe=n(oRe,"STRONG",{});var j4t=s(tTe);lLr=r(j4t,"albert"),j4t.forEach(t),iLr=r(oRe," \u2014 "),TH=n(oRe,"A",{href:!0});var D4t=s(TH);dLr=r(D4t,"FlaxAlbertForSequenceClassification"),D4t.forEach(t),cLr=r(oRe," (ALBERT model)"),oRe.forEach(t),fLr=i(ye),j4=n(ye,"LI",{});var rRe=s(j4);aTe=n(rRe,"STRONG",{});var G4t=s(aTe);mLr=r(G4t,"bart"),G4t.forEach(t),gLr=r(rRe," \u2014 "),MH=n(rRe,"A",{href:!0});var O4t=s(MH);hLr=r(O4t,"FlaxBartForSequenceClassification"),O4t.forEach(t),pLr=r(rRe," (BART model)"),rRe.forEach(t),_Lr=i(ye),D4=n(ye,"LI",{});var tRe=s(D4);nTe=n(tRe,"STRONG",{});var V4t=s(nTe);uLr=r(V4t,"bert"),V4t.forEach(t),bLr=r(tRe," \u2014 "),EH=n(tRe,"A",{href:!0});var X4t=s(EH);vLr=r(X4t,"FlaxBertForSequenceClassification"),X4t.forEach(t),FLr=r(tRe," (BERT model)"),tRe.forEach(t),TLr=i(ye),G4=n(ye,"LI",{});var aRe=s(G4);sTe=n(aRe,"STRONG",{});var z4t=s(sTe);MLr=r(z4t,"big_bird"),z4t.forEach(t),ELr=r(aRe," \u2014 "),CH=n(aRe,"A",{href:!0});var Q4t=s(CH);CLr=r(Q4t,"FlaxBigBirdForSequenceClassification"),Q4t.forEach(t),wLr=r(aRe," (BigBird model)"),aRe.forEach(t),ALr=i(ye),O4=n(ye,"LI",{});var nRe=s(O4);lTe=n(nRe,"STRONG",{});var W4t=s(lTe);yLr=r(W4t,"distilbert"),W4t.forEach(t),LLr=r(nRe," \u2014 "),wH=n(nRe,"A",{href:!0});var H4t=s(wH);xLr=r(H4t,"FlaxDistilBertForSequenceClassification"),H4t.forEach(t),kLr=r(nRe," (DistilBERT model)"),nRe.forEach(t),SLr=i(ye),V4=n(ye,"LI",{});var sRe=s(V4);iTe=n(sRe,"STRONG",{});var U4t=s(iTe);RLr=r(U4t,"electra"),U4t.forEach(t),BLr=r(sRe," \u2014 "),AH=n(sRe,"A",{href:!0});var J4t=s(AH);PLr=r(J4t,"FlaxElectraForSequenceClassification"),J4t.forEach(t),$Lr=r(sRe," (ELECTRA model)"),sRe.forEach(t),ILr=i(ye),X4=n(ye,"LI",{});var lRe=s(X4);dTe=n(lRe,"STRONG",{});var Y4t=s(dTe);qLr=r(Y4t,"mbart"),Y4t.forEach(t),NLr=r(lRe," \u2014 "),yH=n(lRe,"A",{href:!0});var K4t=s(yH);jLr=r(K4t,"FlaxMBartForSequenceClassification"),K4t.forEach(t),DLr=r(lRe," (mBART model)"),lRe.forEach(t),GLr=i(ye),z4=n(ye,"LI",{});var iRe=s(z4);cTe=n(iRe,"STRONG",{});var Z4t=s(cTe);OLr=r(Z4t,"roberta"),Z4t.forEach(t),VLr=r(iRe," \u2014 "),LH=n(iRe,"A",{href:!0});var eEt=s(LH);XLr=r(eEt,"FlaxRobertaForSequenceClassification"),eEt.forEach(t),zLr=r(iRe," (RoBERTa model)"),iRe.forEach(t),QLr=i(ye),Q4=n(ye,"LI",{});var dRe=s(Q4);fTe=n(dRe,"STRONG",{});var oEt=s(fTe);WLr=r(oEt,"roformer"),oEt.forEach(t),HLr=r(dRe," \u2014 "),xH=n(dRe,"A",{href:!0});var rEt=s(xH);ULr=r(rEt,"FlaxRoFormerForSequenceClassification"),rEt.forEach(t),JLr=r(dRe," (RoFormer model)"),dRe.forEach(t),YLr=i(ye),W4=n(ye,"LI",{});var cRe=s(W4);mTe=n(cRe,"STRONG",{});var tEt=s(mTe);KLr=r(tEt,"xlm-roberta"),tEt.forEach(t),ZLr=r(cRe," \u2014 "),kH=n(cRe,"A",{href:!0});var aEt=s(kH);e9r=r(aEt,"FlaxXLMRobertaForSequenceClassification"),aEt.forEach(t),o9r=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),ye.forEach(t),r9r=i(Ba),gTe=n(Ba,"P",{});var nEt=s(gTe);t9r=r(nEt,"Examples:"),nEt.forEach(t),a9r=i(Ba),m($y.$$.fragment,Ba),Ba.forEach(t),wi.forEach(t),kPe=i(c),vf=n(c,"H2",{class:!0});var GIe=s(vf);H4=n(GIe,"A",{id:!0,class:!0,href:!0});var sEt=s(H4);hTe=n(sEt,"SPAN",{});var lEt=s(hTe);m(Iy.$$.fragment,lEt),lEt.forEach(t),sEt.forEach(t),n9r=i(GIe),pTe=n(GIe,"SPAN",{});var iEt=s(pTe);s9r=r(iEt,"FlaxAutoModelForQuestionAnswering"),iEt.forEach(t),GIe.forEach(t),SPe=i(c),Nr=n(c,"DIV",{class:!0});var yi=s(Nr);m(qy.$$.fragment,yi),l9r=i(yi),Ff=n(yi,"P",{});var nY=s(Ff);i9r=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SH=n(nY,"A",{href:!0});var dEt=s(SH);d9r=r(dEt,"from_pretrained()"),dEt.forEach(t),c9r=r(nY," class method or the "),RH=n(nY,"A",{href:!0});var cEt=s(RH);f9r=r(cEt,"from_config()"),cEt.forEach(t),m9r=r(nY,` class
method.`),nY.forEach(t),g9r=i(yi),Ny=n(yi,"P",{});var OIe=s(Ny);h9r=r(OIe,"This class cannot be instantiated directly using "),_Te=n(OIe,"CODE",{});var fEt=s(_Te);p9r=r(fEt,"__init__()"),fEt.forEach(t),_9r=r(OIe," (throws an error)."),OIe.forEach(t),u9r=i(yi),Rt=n(yi,"DIV",{class:!0});var Li=s(Rt);m(jy.$$.fragment,Li),b9r=i(Li),uTe=n(Li,"P",{});var mEt=s(uTe);v9r=r(mEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mEt.forEach(t),F9r=i(Li),Tf=n(Li,"P",{});var sY=s(Tf);T9r=r(sY,`Note:
Loading a model from its configuration file does `),bTe=n(sY,"STRONG",{});var gEt=s(bTe);M9r=r(gEt,"not"),gEt.forEach(t),E9r=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(sY,"A",{href:!0});var hEt=s(BH);C9r=r(hEt,"from_pretrained()"),hEt.forEach(t),w9r=r(sY," to load the model weights."),sY.forEach(t),A9r=i(Li),vTe=n(Li,"P",{});var pEt=s(vTe);y9r=r(pEt,"Examples:"),pEt.forEach(t),L9r=i(Li),m(Dy.$$.fragment,Li),Li.forEach(t),x9r=i(yi),Bo=n(yi,"DIV",{class:!0});var Pa=s(Bo);m(Gy.$$.fragment,Pa),k9r=i(Pa),FTe=n(Pa,"P",{});var _Et=s(FTe);S9r=r(_Et,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Et.forEach(t),R9r=i(Pa),In=n(Pa,"P",{});var C5=s(In);B9r=r(C5,"The model class to instantiate is selected based on the "),TTe=n(C5,"CODE",{});var uEt=s(TTe);P9r=r(uEt,"model_type"),uEt.forEach(t),$9r=r(C5,` property of the config object (either
passed as an argument or loaded from `),MTe=n(C5,"CODE",{});var bEt=s(MTe);I9r=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),q9r=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(C5,"CODE",{});var vEt=s(ETe);N9r=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),j9r=r(C5,":"),C5.forEach(t),D9r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);U4=n(Le,"LI",{});var fRe=s(U4);CTe=n(fRe,"STRONG",{});var FEt=s(CTe);G9r=r(FEt,"albert"),FEt.forEach(t),O9r=r(fRe," \u2014 "),PH=n(fRe,"A",{href:!0});var TEt=s(PH);V9r=r(TEt,"FlaxAlbertForQuestionAnswering"),TEt.forEach(t),X9r=r(fRe," (ALBERT model)"),fRe.forEach(t),z9r=i(Le),J4=n(Le,"LI",{});var mRe=s(J4);wTe=n(mRe,"STRONG",{});var MEt=s(wTe);Q9r=r(MEt,"bart"),MEt.forEach(t),W9r=r(mRe," \u2014 "),$H=n(mRe,"A",{href:!0});var EEt=s($H);H9r=r(EEt,"FlaxBartForQuestionAnswering"),EEt.forEach(t),U9r=r(mRe," (BART model)"),mRe.forEach(t),J9r=i(Le),Y4=n(Le,"LI",{});var gRe=s(Y4);ATe=n(gRe,"STRONG",{});var CEt=s(ATe);Y9r=r(CEt,"bert"),CEt.forEach(t),K9r=r(gRe," \u2014 "),IH=n(gRe,"A",{href:!0});var wEt=s(IH);Z9r=r(wEt,"FlaxBertForQuestionAnswering"),wEt.forEach(t),exr=r(gRe," (BERT model)"),gRe.forEach(t),oxr=i(Le),K4=n(Le,"LI",{});var hRe=s(K4);yTe=n(hRe,"STRONG",{});var AEt=s(yTe);rxr=r(AEt,"big_bird"),AEt.forEach(t),txr=r(hRe," \u2014 "),qH=n(hRe,"A",{href:!0});var yEt=s(qH);axr=r(yEt,"FlaxBigBirdForQuestionAnswering"),yEt.forEach(t),nxr=r(hRe," (BigBird model)"),hRe.forEach(t),sxr=i(Le),Z4=n(Le,"LI",{});var pRe=s(Z4);LTe=n(pRe,"STRONG",{});var LEt=s(LTe);lxr=r(LEt,"distilbert"),LEt.forEach(t),ixr=r(pRe," \u2014 "),NH=n(pRe,"A",{href:!0});var xEt=s(NH);dxr=r(xEt,"FlaxDistilBertForQuestionAnswering"),xEt.forEach(t),cxr=r(pRe," (DistilBERT model)"),pRe.forEach(t),fxr=i(Le),eE=n(Le,"LI",{});var _Re=s(eE);xTe=n(_Re,"STRONG",{});var kEt=s(xTe);mxr=r(kEt,"electra"),kEt.forEach(t),gxr=r(_Re," \u2014 "),jH=n(_Re,"A",{href:!0});var SEt=s(jH);hxr=r(SEt,"FlaxElectraForQuestionAnswering"),SEt.forEach(t),pxr=r(_Re," (ELECTRA model)"),_Re.forEach(t),_xr=i(Le),oE=n(Le,"LI",{});var uRe=s(oE);kTe=n(uRe,"STRONG",{});var REt=s(kTe);uxr=r(REt,"mbart"),REt.forEach(t),bxr=r(uRe," \u2014 "),DH=n(uRe,"A",{href:!0});var BEt=s(DH);vxr=r(BEt,"FlaxMBartForQuestionAnswering"),BEt.forEach(t),Fxr=r(uRe," (mBART model)"),uRe.forEach(t),Txr=i(Le),rE=n(Le,"LI",{});var bRe=s(rE);STe=n(bRe,"STRONG",{});var PEt=s(STe);Mxr=r(PEt,"roberta"),PEt.forEach(t),Exr=r(bRe," \u2014 "),GH=n(bRe,"A",{href:!0});var $Et=s(GH);Cxr=r($Et,"FlaxRobertaForQuestionAnswering"),$Et.forEach(t),wxr=r(bRe," (RoBERTa model)"),bRe.forEach(t),Axr=i(Le),tE=n(Le,"LI",{});var vRe=s(tE);RTe=n(vRe,"STRONG",{});var IEt=s(RTe);yxr=r(IEt,"roformer"),IEt.forEach(t),Lxr=r(vRe," \u2014 "),OH=n(vRe,"A",{href:!0});var qEt=s(OH);xxr=r(qEt,"FlaxRoFormerForQuestionAnswering"),qEt.forEach(t),kxr=r(vRe," (RoFormer model)"),vRe.forEach(t),Sxr=i(Le),aE=n(Le,"LI",{});var FRe=s(aE);BTe=n(FRe,"STRONG",{});var NEt=s(BTe);Rxr=r(NEt,"xlm-roberta"),NEt.forEach(t),Bxr=r(FRe," \u2014 "),VH=n(FRe,"A",{href:!0});var jEt=s(VH);Pxr=r(jEt,"FlaxXLMRobertaForQuestionAnswering"),jEt.forEach(t),$xr=r(FRe," (XLM-RoBERTa model)"),FRe.forEach(t),Le.forEach(t),Ixr=i(Pa),PTe=n(Pa,"P",{});var DEt=s(PTe);qxr=r(DEt,"Examples:"),DEt.forEach(t),Nxr=i(Pa),m(Oy.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),RPe=i(c),Mf=n(c,"H2",{class:!0});var VIe=s(Mf);nE=n(VIe,"A",{id:!0,class:!0,href:!0});var GEt=s(nE);$Te=n(GEt,"SPAN",{});var OEt=s($Te);m(Vy.$$.fragment,OEt),OEt.forEach(t),GEt.forEach(t),jxr=i(VIe),ITe=n(VIe,"SPAN",{});var VEt=s(ITe);Dxr=r(VEt,"FlaxAutoModelForTokenClassification"),VEt.forEach(t),VIe.forEach(t),BPe=i(c),jr=n(c,"DIV",{class:!0});var xi=s(jr);m(Xy.$$.fragment,xi),Gxr=i(xi),Ef=n(xi,"P",{});var lY=s(Ef);Oxr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XH=n(lY,"A",{href:!0});var XEt=s(XH);Vxr=r(XEt,"from_pretrained()"),XEt.forEach(t),Xxr=r(lY," class method or the "),zH=n(lY,"A",{href:!0});var zEt=s(zH);zxr=r(zEt,"from_config()"),zEt.forEach(t),Qxr=r(lY,` class
method.`),lY.forEach(t),Wxr=i(xi),zy=n(xi,"P",{});var XIe=s(zy);Hxr=r(XIe,"This class cannot be instantiated directly using "),qTe=n(XIe,"CODE",{});var QEt=s(qTe);Uxr=r(QEt,"__init__()"),QEt.forEach(t),Jxr=r(XIe," (throws an error)."),XIe.forEach(t),Yxr=i(xi),Bt=n(xi,"DIV",{class:!0});var ki=s(Bt);m(Qy.$$.fragment,ki),Kxr=i(ki),NTe=n(ki,"P",{});var WEt=s(NTe);Zxr=r(WEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WEt.forEach(t),ekr=i(ki),Cf=n(ki,"P",{});var iY=s(Cf);okr=r(iY,`Note:
Loading a model from its configuration file does `),jTe=n(iY,"STRONG",{});var HEt=s(jTe);rkr=r(HEt,"not"),HEt.forEach(t),tkr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(iY,"A",{href:!0});var UEt=s(QH);akr=r(UEt,"from_pretrained()"),UEt.forEach(t),nkr=r(iY," to load the model weights."),iY.forEach(t),skr=i(ki),DTe=n(ki,"P",{});var JEt=s(DTe);lkr=r(JEt,"Examples:"),JEt.forEach(t),ikr=i(ki),m(Wy.$$.fragment,ki),ki.forEach(t),dkr=i(xi),Po=n(xi,"DIV",{class:!0});var $a=s(Po);m(Hy.$$.fragment,$a),ckr=i($a),GTe=n($a,"P",{});var YEt=s(GTe);fkr=r(YEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YEt.forEach(t),mkr=i($a),qn=n($a,"P",{});var w5=s(qn);gkr=r(w5,"The model class to instantiate is selected based on the "),OTe=n(w5,"CODE",{});var KEt=s(OTe);hkr=r(KEt,"model_type"),KEt.forEach(t),pkr=r(w5,` property of the config object (either
passed as an argument or loaded from `),VTe=n(w5,"CODE",{});var ZEt=s(VTe);_kr=r(ZEt,"pretrained_model_name_or_path"),ZEt.forEach(t),ukr=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(w5,"CODE",{});var e5t=s(XTe);bkr=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),vkr=r(w5,":"),w5.forEach(t),Fkr=i($a),Be=n($a,"UL",{});var Oo=s(Be);sE=n(Oo,"LI",{});var TRe=s(sE);zTe=n(TRe,"STRONG",{});var o5t=s(zTe);Tkr=r(o5t,"albert"),o5t.forEach(t),Mkr=r(TRe," \u2014 "),WH=n(TRe,"A",{href:!0});var r5t=s(WH);Ekr=r(r5t,"FlaxAlbertForTokenClassification"),r5t.forEach(t),Ckr=r(TRe," (ALBERT model)"),TRe.forEach(t),wkr=i(Oo),lE=n(Oo,"LI",{});var MRe=s(lE);QTe=n(MRe,"STRONG",{});var t5t=s(QTe);Akr=r(t5t,"bert"),t5t.forEach(t),ykr=r(MRe," \u2014 "),HH=n(MRe,"A",{href:!0});var a5t=s(HH);Lkr=r(a5t,"FlaxBertForTokenClassification"),a5t.forEach(t),xkr=r(MRe," (BERT model)"),MRe.forEach(t),kkr=i(Oo),iE=n(Oo,"LI",{});var ERe=s(iE);WTe=n(ERe,"STRONG",{});var n5t=s(WTe);Skr=r(n5t,"big_bird"),n5t.forEach(t),Rkr=r(ERe," \u2014 "),UH=n(ERe,"A",{href:!0});var s5t=s(UH);Bkr=r(s5t,"FlaxBigBirdForTokenClassification"),s5t.forEach(t),Pkr=r(ERe," (BigBird model)"),ERe.forEach(t),$kr=i(Oo),dE=n(Oo,"LI",{});var CRe=s(dE);HTe=n(CRe,"STRONG",{});var l5t=s(HTe);Ikr=r(l5t,"distilbert"),l5t.forEach(t),qkr=r(CRe," \u2014 "),JH=n(CRe,"A",{href:!0});var i5t=s(JH);Nkr=r(i5t,"FlaxDistilBertForTokenClassification"),i5t.forEach(t),jkr=r(CRe," (DistilBERT model)"),CRe.forEach(t),Dkr=i(Oo),cE=n(Oo,"LI",{});var wRe=s(cE);UTe=n(wRe,"STRONG",{});var d5t=s(UTe);Gkr=r(d5t,"electra"),d5t.forEach(t),Okr=r(wRe," \u2014 "),YH=n(wRe,"A",{href:!0});var c5t=s(YH);Vkr=r(c5t,"FlaxElectraForTokenClassification"),c5t.forEach(t),Xkr=r(wRe," (ELECTRA model)"),wRe.forEach(t),zkr=i(Oo),fE=n(Oo,"LI",{});var ARe=s(fE);JTe=n(ARe,"STRONG",{});var f5t=s(JTe);Qkr=r(f5t,"roberta"),f5t.forEach(t),Wkr=r(ARe," \u2014 "),KH=n(ARe,"A",{href:!0});var m5t=s(KH);Hkr=r(m5t,"FlaxRobertaForTokenClassification"),m5t.forEach(t),Ukr=r(ARe," (RoBERTa model)"),ARe.forEach(t),Jkr=i(Oo),mE=n(Oo,"LI",{});var yRe=s(mE);YTe=n(yRe,"STRONG",{});var g5t=s(YTe);Ykr=r(g5t,"roformer"),g5t.forEach(t),Kkr=r(yRe," \u2014 "),ZH=n(yRe,"A",{href:!0});var h5t=s(ZH);Zkr=r(h5t,"FlaxRoFormerForTokenClassification"),h5t.forEach(t),eSr=r(yRe," (RoFormer model)"),yRe.forEach(t),oSr=i(Oo),gE=n(Oo,"LI",{});var LRe=s(gE);KTe=n(LRe,"STRONG",{});var p5t=s(KTe);rSr=r(p5t,"xlm-roberta"),p5t.forEach(t),tSr=r(LRe," \u2014 "),eU=n(LRe,"A",{href:!0});var _5t=s(eU);aSr=r(_5t,"FlaxXLMRobertaForTokenClassification"),_5t.forEach(t),nSr=r(LRe," (XLM-RoBERTa model)"),LRe.forEach(t),Oo.forEach(t),sSr=i($a),ZTe=n($a,"P",{});var u5t=s(ZTe);lSr=r(u5t,"Examples:"),u5t.forEach(t),iSr=i($a),m(Uy.$$.fragment,$a),$a.forEach(t),xi.forEach(t),PPe=i(c),wf=n(c,"H2",{class:!0});var zIe=s(wf);hE=n(zIe,"A",{id:!0,class:!0,href:!0});var b5t=s(hE);e8e=n(b5t,"SPAN",{});var v5t=s(e8e);m(Jy.$$.fragment,v5t),v5t.forEach(t),b5t.forEach(t),dSr=i(zIe),o8e=n(zIe,"SPAN",{});var F5t=s(o8e);cSr=r(F5t,"FlaxAutoModelForMultipleChoice"),F5t.forEach(t),zIe.forEach(t),$Pe=i(c),Dr=n(c,"DIV",{class:!0});var Si=s(Dr);m(Yy.$$.fragment,Si),fSr=i(Si),Af=n(Si,"P",{});var dY=s(Af);mSr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oU=n(dY,"A",{href:!0});var T5t=s(oU);gSr=r(T5t,"from_pretrained()"),T5t.forEach(t),hSr=r(dY," class method or the "),rU=n(dY,"A",{href:!0});var M5t=s(rU);pSr=r(M5t,"from_config()"),M5t.forEach(t),_Sr=r(dY,` class
method.`),dY.forEach(t),uSr=i(Si),Ky=n(Si,"P",{});var QIe=s(Ky);bSr=r(QIe,"This class cannot be instantiated directly using "),r8e=n(QIe,"CODE",{});var E5t=s(r8e);vSr=r(E5t,"__init__()"),E5t.forEach(t),FSr=r(QIe," (throws an error)."),QIe.forEach(t),TSr=i(Si),Pt=n(Si,"DIV",{class:!0});var Ri=s(Pt);m(Zy.$$.fragment,Ri),MSr=i(Ri),t8e=n(Ri,"P",{});var C5t=s(t8e);ESr=r(C5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),C5t.forEach(t),CSr=i(Ri),yf=n(Ri,"P",{});var cY=s(yf);wSr=r(cY,`Note:
Loading a model from its configuration file does `),a8e=n(cY,"STRONG",{});var w5t=s(a8e);ASr=r(w5t,"not"),w5t.forEach(t),ySr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(cY,"A",{href:!0});var A5t=s(tU);LSr=r(A5t,"from_pretrained()"),A5t.forEach(t),xSr=r(cY," to load the model weights."),cY.forEach(t),kSr=i(Ri),n8e=n(Ri,"P",{});var y5t=s(n8e);SSr=r(y5t,"Examples:"),y5t.forEach(t),RSr=i(Ri),m(eL.$$.fragment,Ri),Ri.forEach(t),BSr=i(Si),$o=n(Si,"DIV",{class:!0});var Ia=s($o);m(oL.$$.fragment,Ia),PSr=i(Ia),s8e=n(Ia,"P",{});var L5t=s(s8e);$Sr=r(L5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),L5t.forEach(t),ISr=i(Ia),Nn=n(Ia,"P",{});var A5=s(Nn);qSr=r(A5,"The model class to instantiate is selected based on the "),l8e=n(A5,"CODE",{});var x5t=s(l8e);NSr=r(x5t,"model_type"),x5t.forEach(t),jSr=r(A5,` property of the config object (either
passed as an argument or loaded from `),i8e=n(A5,"CODE",{});var k5t=s(i8e);DSr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),GSr=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d8e=n(A5,"CODE",{});var S5t=s(d8e);OSr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),VSr=r(A5,":"),A5.forEach(t),XSr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);pE=n(Vo,"LI",{});var xRe=s(pE);c8e=n(xRe,"STRONG",{});var R5t=s(c8e);zSr=r(R5t,"albert"),R5t.forEach(t),QSr=r(xRe," \u2014 "),aU=n(xRe,"A",{href:!0});var B5t=s(aU);WSr=r(B5t,"FlaxAlbertForMultipleChoice"),B5t.forEach(t),HSr=r(xRe," (ALBERT model)"),xRe.forEach(t),USr=i(Vo),_E=n(Vo,"LI",{});var kRe=s(_E);f8e=n(kRe,"STRONG",{});var P5t=s(f8e);JSr=r(P5t,"bert"),P5t.forEach(t),YSr=r(kRe," \u2014 "),nU=n(kRe,"A",{href:!0});var $5t=s(nU);KSr=r($5t,"FlaxBertForMultipleChoice"),$5t.forEach(t),ZSr=r(kRe," (BERT model)"),kRe.forEach(t),eRr=i(Vo),uE=n(Vo,"LI",{});var SRe=s(uE);m8e=n(SRe,"STRONG",{});var I5t=s(m8e);oRr=r(I5t,"big_bird"),I5t.forEach(t),rRr=r(SRe," \u2014 "),sU=n(SRe,"A",{href:!0});var q5t=s(sU);tRr=r(q5t,"FlaxBigBirdForMultipleChoice"),q5t.forEach(t),aRr=r(SRe," (BigBird model)"),SRe.forEach(t),nRr=i(Vo),bE=n(Vo,"LI",{});var RRe=s(bE);g8e=n(RRe,"STRONG",{});var N5t=s(g8e);sRr=r(N5t,"distilbert"),N5t.forEach(t),lRr=r(RRe," \u2014 "),lU=n(RRe,"A",{href:!0});var j5t=s(lU);iRr=r(j5t,"FlaxDistilBertForMultipleChoice"),j5t.forEach(t),dRr=r(RRe," (DistilBERT model)"),RRe.forEach(t),cRr=i(Vo),vE=n(Vo,"LI",{});var BRe=s(vE);h8e=n(BRe,"STRONG",{});var D5t=s(h8e);fRr=r(D5t,"electra"),D5t.forEach(t),mRr=r(BRe," \u2014 "),iU=n(BRe,"A",{href:!0});var G5t=s(iU);gRr=r(G5t,"FlaxElectraForMultipleChoice"),G5t.forEach(t),hRr=r(BRe," (ELECTRA model)"),BRe.forEach(t),pRr=i(Vo),FE=n(Vo,"LI",{});var PRe=s(FE);p8e=n(PRe,"STRONG",{});var O5t=s(p8e);_Rr=r(O5t,"roberta"),O5t.forEach(t),uRr=r(PRe," \u2014 "),dU=n(PRe,"A",{href:!0});var V5t=s(dU);bRr=r(V5t,"FlaxRobertaForMultipleChoice"),V5t.forEach(t),vRr=r(PRe," (RoBERTa model)"),PRe.forEach(t),FRr=i(Vo),TE=n(Vo,"LI",{});var $Re=s(TE);_8e=n($Re,"STRONG",{});var X5t=s(_8e);TRr=r(X5t,"roformer"),X5t.forEach(t),MRr=r($Re," \u2014 "),cU=n($Re,"A",{href:!0});var z5t=s(cU);ERr=r(z5t,"FlaxRoFormerForMultipleChoice"),z5t.forEach(t),CRr=r($Re," (RoFormer model)"),$Re.forEach(t),wRr=i(Vo),ME=n(Vo,"LI",{});var IRe=s(ME);u8e=n(IRe,"STRONG",{});var Q5t=s(u8e);ARr=r(Q5t,"xlm-roberta"),Q5t.forEach(t),yRr=r(IRe," \u2014 "),fU=n(IRe,"A",{href:!0});var W5t=s(fU);LRr=r(W5t,"FlaxXLMRobertaForMultipleChoice"),W5t.forEach(t),xRr=r(IRe," (XLM-RoBERTa model)"),IRe.forEach(t),Vo.forEach(t),kRr=i(Ia),b8e=n(Ia,"P",{});var H5t=s(b8e);SRr=r(H5t,"Examples:"),H5t.forEach(t),RRr=i(Ia),m(rL.$$.fragment,Ia),Ia.forEach(t),Si.forEach(t),IPe=i(c),Lf=n(c,"H2",{class:!0});var WIe=s(Lf);EE=n(WIe,"A",{id:!0,class:!0,href:!0});var U5t=s(EE);v8e=n(U5t,"SPAN",{});var J5t=s(v8e);m(tL.$$.fragment,J5t),J5t.forEach(t),U5t.forEach(t),BRr=i(WIe),F8e=n(WIe,"SPAN",{});var Y5t=s(F8e);PRr=r(Y5t,"FlaxAutoModelForNextSentencePrediction"),Y5t.forEach(t),WIe.forEach(t),qPe=i(c),Gr=n(c,"DIV",{class:!0});var Bi=s(Gr);m(aL.$$.fragment,Bi),$Rr=i(Bi),xf=n(Bi,"P",{});var fY=s(xf);IRr=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mU=n(fY,"A",{href:!0});var K5t=s(mU);qRr=r(K5t,"from_pretrained()"),K5t.forEach(t),NRr=r(fY," class method or the "),gU=n(fY,"A",{href:!0});var Z5t=s(gU);jRr=r(Z5t,"from_config()"),Z5t.forEach(t),DRr=r(fY,` class
method.`),fY.forEach(t),GRr=i(Bi),nL=n(Bi,"P",{});var HIe=s(nL);ORr=r(HIe,"This class cannot be instantiated directly using "),T8e=n(HIe,"CODE",{});var e3t=s(T8e);VRr=r(e3t,"__init__()"),e3t.forEach(t),XRr=r(HIe," (throws an error)."),HIe.forEach(t),zRr=i(Bi),$t=n(Bi,"DIV",{class:!0});var Pi=s($t);m(sL.$$.fragment,Pi),QRr=i(Pi),M8e=n(Pi,"P",{});var o3t=s(M8e);WRr=r(o3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),o3t.forEach(t),HRr=i(Pi),kf=n(Pi,"P",{});var mY=s(kf);URr=r(mY,`Note:
Loading a model from its configuration file does `),E8e=n(mY,"STRONG",{});var r3t=s(E8e);JRr=r(r3t,"not"),r3t.forEach(t),YRr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(mY,"A",{href:!0});var t3t=s(hU);KRr=r(t3t,"from_pretrained()"),t3t.forEach(t),ZRr=r(mY," to load the model weights."),mY.forEach(t),eBr=i(Pi),C8e=n(Pi,"P",{});var a3t=s(C8e);oBr=r(a3t,"Examples:"),a3t.forEach(t),rBr=i(Pi),m(lL.$$.fragment,Pi),Pi.forEach(t),tBr=i(Bi),Io=n(Bi,"DIV",{class:!0});var qa=s(Io);m(iL.$$.fragment,qa),aBr=i(qa),w8e=n(qa,"P",{});var n3t=s(w8e);nBr=r(n3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),n3t.forEach(t),sBr=i(qa),jn=n(qa,"P",{});var y5=s(jn);lBr=r(y5,"The model class to instantiate is selected based on the "),A8e=n(y5,"CODE",{});var s3t=s(A8e);iBr=r(s3t,"model_type"),s3t.forEach(t),dBr=r(y5,` property of the config object (either
passed as an argument or loaded from `),y8e=n(y5,"CODE",{});var l3t=s(y8e);cBr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),fBr=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L8e=n(y5,"CODE",{});var i3t=s(L8e);mBr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),gBr=r(y5,":"),y5.forEach(t),hBr=i(qa),x8e=n(qa,"UL",{});var d3t=s(x8e);CE=n(d3t,"LI",{});var qRe=s(CE);k8e=n(qRe,"STRONG",{});var c3t=s(k8e);pBr=r(c3t,"bert"),c3t.forEach(t),_Br=r(qRe," \u2014 "),pU=n(qRe,"A",{href:!0});var f3t=s(pU);uBr=r(f3t,"FlaxBertForNextSentencePrediction"),f3t.forEach(t),bBr=r(qRe," (BERT model)"),qRe.forEach(t),d3t.forEach(t),vBr=i(qa),S8e=n(qa,"P",{});var m3t=s(S8e);FBr=r(m3t,"Examples:"),m3t.forEach(t),TBr=i(qa),m(dL.$$.fragment,qa),qa.forEach(t),Bi.forEach(t),NPe=i(c),Sf=n(c,"H2",{class:!0});var UIe=s(Sf);wE=n(UIe,"A",{id:!0,class:!0,href:!0});var g3t=s(wE);R8e=n(g3t,"SPAN",{});var h3t=s(R8e);m(cL.$$.fragment,h3t),h3t.forEach(t),g3t.forEach(t),MBr=i(UIe),B8e=n(UIe,"SPAN",{});var p3t=s(B8e);EBr=r(p3t,"FlaxAutoModelForImageClassification"),p3t.forEach(t),UIe.forEach(t),jPe=i(c),Or=n(c,"DIV",{class:!0});var $i=s(Or);m(fL.$$.fragment,$i),CBr=i($i),Rf=n($i,"P",{});var gY=s(Rf);wBr=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_U=n(gY,"A",{href:!0});var _3t=s(_U);ABr=r(_3t,"from_pretrained()"),_3t.forEach(t),yBr=r(gY," class method or the "),uU=n(gY,"A",{href:!0});var u3t=s(uU);LBr=r(u3t,"from_config()"),u3t.forEach(t),xBr=r(gY,` class
method.`),gY.forEach(t),kBr=i($i),mL=n($i,"P",{});var JIe=s(mL);SBr=r(JIe,"This class cannot be instantiated directly using "),P8e=n(JIe,"CODE",{});var b3t=s(P8e);RBr=r(b3t,"__init__()"),b3t.forEach(t),BBr=r(JIe," (throws an error)."),JIe.forEach(t),PBr=i($i),It=n($i,"DIV",{class:!0});var Ii=s(It);m(gL.$$.fragment,Ii),$Br=i(Ii),$8e=n(Ii,"P",{});var v3t=s($8e);IBr=r(v3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),v3t.forEach(t),qBr=i(Ii),Bf=n(Ii,"P",{});var hY=s(Bf);NBr=r(hY,`Note:
Loading a model from its configuration file does `),I8e=n(hY,"STRONG",{});var F3t=s(I8e);jBr=r(F3t,"not"),F3t.forEach(t),DBr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(hY,"A",{href:!0});var T3t=s(bU);GBr=r(T3t,"from_pretrained()"),T3t.forEach(t),OBr=r(hY," to load the model weights."),hY.forEach(t),VBr=i(Ii),q8e=n(Ii,"P",{});var M3t=s(q8e);XBr=r(M3t,"Examples:"),M3t.forEach(t),zBr=i(Ii),m(hL.$$.fragment,Ii),Ii.forEach(t),QBr=i($i),qo=n($i,"DIV",{class:!0});var Na=s(qo);m(pL.$$.fragment,Na),WBr=i(Na),N8e=n(Na,"P",{});var E3t=s(N8e);HBr=r(E3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E3t.forEach(t),UBr=i(Na),Dn=n(Na,"P",{});var L5=s(Dn);JBr=r(L5,"The model class to instantiate is selected based on the "),j8e=n(L5,"CODE",{});var C3t=s(j8e);YBr=r(C3t,"model_type"),C3t.forEach(t),KBr=r(L5,` property of the config object (either
passed as an argument or loaded from `),D8e=n(L5,"CODE",{});var w3t=s(D8e);ZBr=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),ePr=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=n(L5,"CODE",{});var A3t=s(G8e);oPr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),rPr=r(L5,":"),L5.forEach(t),tPr=i(Na),_L=n(Na,"UL",{});var YIe=s(_L);AE=n(YIe,"LI",{});var NRe=s(AE);O8e=n(NRe,"STRONG",{});var y3t=s(O8e);aPr=r(y3t,"beit"),y3t.forEach(t),nPr=r(NRe," \u2014 "),vU=n(NRe,"A",{href:!0});var L3t=s(vU);sPr=r(L3t,"FlaxBeitForImageClassification"),L3t.forEach(t),lPr=r(NRe," (BEiT model)"),NRe.forEach(t),iPr=i(YIe),yE=n(YIe,"LI",{});var jRe=s(yE);V8e=n(jRe,"STRONG",{});var x3t=s(V8e);dPr=r(x3t,"vit"),x3t.forEach(t),cPr=r(jRe," \u2014 "),FU=n(jRe,"A",{href:!0});var k3t=s(FU);fPr=r(k3t,"FlaxViTForImageClassification"),k3t.forEach(t),mPr=r(jRe," (ViT model)"),jRe.forEach(t),YIe.forEach(t),gPr=i(Na),X8e=n(Na,"P",{});var S3t=s(X8e);hPr=r(S3t,"Examples:"),S3t.forEach(t),pPr=i(Na),m(uL.$$.fragment,Na),Na.forEach(t),$i.forEach(t),DPe=i(c),Pf=n(c,"H2",{class:!0});var KIe=s(Pf);LE=n(KIe,"A",{id:!0,class:!0,href:!0});var R3t=s(LE);z8e=n(R3t,"SPAN",{});var B3t=s(z8e);m(bL.$$.fragment,B3t),B3t.forEach(t),R3t.forEach(t),_Pr=i(KIe),Q8e=n(KIe,"SPAN",{});var P3t=s(Q8e);uPr=r(P3t,"FlaxAutoModelForVision2Seq"),P3t.forEach(t),KIe.forEach(t),GPe=i(c),Vr=n(c,"DIV",{class:!0});var qi=s(Vr);m(vL.$$.fragment,qi),bPr=i(qi),$f=n(qi,"P",{});var pY=s($f);vPr=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TU=n(pY,"A",{href:!0});var $3t=s(TU);FPr=r($3t,"from_pretrained()"),$3t.forEach(t),TPr=r(pY," class method or the "),MU=n(pY,"A",{href:!0});var I3t=s(MU);MPr=r(I3t,"from_config()"),I3t.forEach(t),EPr=r(pY,` class
method.`),pY.forEach(t),CPr=i(qi),FL=n(qi,"P",{});var ZIe=s(FL);wPr=r(ZIe,"This class cannot be instantiated directly using "),W8e=n(ZIe,"CODE",{});var q3t=s(W8e);APr=r(q3t,"__init__()"),q3t.forEach(t),yPr=r(ZIe," (throws an error)."),ZIe.forEach(t),LPr=i(qi),qt=n(qi,"DIV",{class:!0});var Ni=s(qt);m(TL.$$.fragment,Ni),xPr=i(Ni),H8e=n(Ni,"P",{});var N3t=s(H8e);kPr=r(N3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),N3t.forEach(t),SPr=i(Ni),If=n(Ni,"P",{});var _Y=s(If);RPr=r(_Y,`Note:
Loading a model from its configuration file does `),U8e=n(_Y,"STRONG",{});var j3t=s(U8e);BPr=r(j3t,"not"),j3t.forEach(t),PPr=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(_Y,"A",{href:!0});var D3t=s(EU);$Pr=r(D3t,"from_pretrained()"),D3t.forEach(t),IPr=r(_Y," to load the model weights."),_Y.forEach(t),qPr=i(Ni),J8e=n(Ni,"P",{});var G3t=s(J8e);NPr=r(G3t,"Examples:"),G3t.forEach(t),jPr=i(Ni),m(ML.$$.fragment,Ni),Ni.forEach(t),DPr=i(qi),No=n(qi,"DIV",{class:!0});var ja=s(No);m(EL.$$.fragment,ja),GPr=i(ja),Y8e=n(ja,"P",{});var O3t=s(Y8e);OPr=r(O3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),O3t.forEach(t),VPr=i(ja),Gn=n(ja,"P",{});var x5=s(Gn);XPr=r(x5,"The model class to instantiate is selected based on the "),K8e=n(x5,"CODE",{});var V3t=s(K8e);zPr=r(V3t,"model_type"),V3t.forEach(t),QPr=r(x5,` property of the config object (either
passed as an argument or loaded from `),Z8e=n(x5,"CODE",{});var X3t=s(Z8e);WPr=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),HPr=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=n(x5,"CODE",{});var z3t=s(e7e);UPr=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),JPr=r(x5,":"),x5.forEach(t),YPr=i(ja),o7e=n(ja,"UL",{});var Q3t=s(o7e);xE=n(Q3t,"LI",{});var DRe=s(xE);r7e=n(DRe,"STRONG",{});var W3t=s(r7e);KPr=r(W3t,"vision-encoder-decoder"),W3t.forEach(t),ZPr=r(DRe," \u2014 "),CU=n(DRe,"A",{href:!0});var H3t=s(CU);e$r=r(H3t,"FlaxVisionEncoderDecoderModel"),H3t.forEach(t),o$r=r(DRe," (Vision Encoder decoder model)"),DRe.forEach(t),Q3t.forEach(t),r$r=i(ja),t7e=n(ja,"P",{});var U3t=s(t7e);t$r=r(U3t,"Examples:"),U3t.forEach(t),a$r=i(ja),m(CL.$$.fragment,ja),ja.forEach(t),qi.forEach(t),this.h()},h(){d(ee,"name","hf:doc:metadata"),d(ee,"content",JSON.stringify(nCt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoTokenizer"),d(zi,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertModel"),d(Vf,"id","extending-the-auto-classes"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#extending-the-auto-classes"),d(Qi,"class","relative group"),d(zf,"id","transformers.AutoConfig"),d(zf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zf,"href","#transformers.AutoConfig"),d(Wi,"class","relative group"),d(k9,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(S9,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertConfig"),d(R9,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig"),d(B9,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitConfig"),d(P9,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertConfig"),d($9,"href","/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(I9,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdConfig"),d(q9,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(N9,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(j9,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(D9,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertConfig"),d(G9,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineConfig"),d(O9,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPConfig"),d(V9,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertConfig"),d(X9,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextConfig"),d(z9,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLConfig"),d(Q9,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(W9,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(H9,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(U9,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaConfig"),d(J9,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(Y9,"href","/docs/transformers/pr_16871/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(K9,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTConfig"),d(Z9,"href","/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrConfig"),d(ex,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertConfig"),d(ox,"href","/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRConfig"),d(rx,"href","/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTConfig"),d(tx,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraConfig"),d(ax,"href","/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(nx,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertConfig"),d(sx,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetConfig"),d(lx,"href","/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTConfig"),d(ix,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelConfig"),d(dx,"href","/docs/transformers/pr_16871/en/model_doc/glpn#transformers.GLPNConfig"),d(cx,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Config"),d(fx,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(mx,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJConfig"),d(gx,"href","/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertConfig"),d(hx,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertConfig"),d(px,"href","/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(_x,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(ux,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(bx,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDConfig"),d(vx,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerConfig"),d(Fx,"href","/docs/transformers/pr_16871/en/model_doc/luke#transformers.LukeConfig"),d(Tx,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertConfig"),d(Mx,"href","/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Config"),d(Ex,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianConfig"),d(Cx,"href","/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(wx,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartConfig"),d(Ax,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(yx,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Lx,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetConfig"),d(xx,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Config"),d(kx,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Sx,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Rx,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusConfig"),d(Bx,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Px,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartConfig"),d($x,"href","/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Ix,"href","/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(qx,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Nx,"href","/docs/transformers/pr_16871/en/model_doc/rag#transformers.RagConfig"),d(jx,"href","/docs/transformers/pr_16871/en/model_doc/realm#transformers.RealmConfig"),d(Dx,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerConfig"),d(Gx,"href","/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetConfig"),d(Ox,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertConfig"),d(Vx,"href","/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetConfig"),d(Xx,"href","/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertConfig"),d(zx,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaConfig"),d(Qx,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerConfig"),d(Wx,"href","/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerConfig"),d(Hx,"href","/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWConfig"),d(Ux,"href","/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDConfig"),d(Jx,"href","/docs/transformers/pr_16871/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Yx,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Kx,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Zx,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterConfig"),d(ek,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(ok,"href","/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinConfig"),d(rk,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Config"),d(tk,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasConfig"),d(ak,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartConfig"),d(nk,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(sk,"href","/docs/transformers/pr_16871/en/model_doc/trocr#transformers.TrOCRConfig"),d(lk,"href","/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(ik,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(dk,"href","/docs/transformers/pr_16871/en/model_doc/van#transformers.VanConfig"),d(ck,"href","/docs/transformers/pr_16871/en/model_doc/vilt#transformers.ViltConfig"),d(fk,"href","/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(mk,"href","/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(gk,"href","/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(hk,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTConfig"),d(pk,"href","/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(_k,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(uk,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMConfig"),d(bk,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMConfig"),d(vk,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMConfig"),d(Fk,"href","/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Tk,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Mk,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Ek,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetConfig"),d(Ck,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gg,"id","transformers.AutoTokenizer"),d(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gg,"href","#transformers.AutoTokenizer"),d(Ui,"class","relative group"),d(wk,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Ak,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertTokenizer"),d(yk,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartTokenizer"),d(xk,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartTokenizerFast"),d(kk,"href","/docs/transformers/pr_16871/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Sk,"href","/docs/transformers/pr_16871/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16871/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Bk,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizer"),d(Pk,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizerFast"),d($k,"href","/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Ik,"href","/docs/transformers/pr_16871/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(qk,"href","/docs/transformers/pr_16871/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Nk,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(jk,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Gk,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Vk,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(zk,"href","/docs/transformers/pr_16871/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Qk,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Wk,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineTokenizer"),d(Uk,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPTokenizer"),d(Jk,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Kk,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16871/en/model_doc/cpm#transformers.CpmTokenizer"),d(eS,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(oS,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaTokenizer"),d(rS,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(tS,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(aS,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(nS,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(sS,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(lS,"href","/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(iS,"href","/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(dS,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraTokenizer"),d(cS,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(fS,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(mS,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetTokenizer"),d(gS,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(hS,"href","/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(pS,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelTokenizer"),d(_S,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(uS,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(bS,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(vS,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(FS,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(TS,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(MS,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(ES,"href","/docs/transformers/pr_16871/en/model_doc/herbert#transformers.HerbertTokenizer"),d(CS,"href","/docs/transformers/pr_16871/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(wS,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(AS,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizer"),d(yS,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(LS,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(xS,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(kS,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(SS,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(RS,"href","/docs/transformers/pr_16871/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(BS,"href","/docs/transformers/pr_16871/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(PS,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDTokenizer"),d($S,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDTokenizerFast"),d(IS,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerTokenizer"),d(qS,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(NS,"href","/docs/transformers/pr_16871/en/model_doc/luke#transformers.LukeTokenizer"),d(jS,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(DS,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(GS,"href","/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(OS,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianTokenizer"),d(VS,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartTokenizer"),d(XS,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(zS,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(QS,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(WS,"href","/docs/transformers/pr_16871/en/model_doc/mluke#transformers.MLukeTokenizer"),d(HS,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(US,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(JS,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(YS,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(KS,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.T5Tokenizer"),d(ZS,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.T5TokenizerFast"),d(eR,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(oR,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(rR,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(tR,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(aR,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(nR,"href","/docs/transformers/pr_16871/en/model_doc/phobert#transformers.PhobertTokenizer"),d(sR,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartTokenizer"),d(lR,"href","/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(iR,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizer"),d(dR,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertTokenizerFast"),d(cR,"href","/docs/transformers/pr_16871/en/model_doc/rag#transformers.RagTokenizer"),d(fR,"href","/docs/transformers/pr_16871/en/model_doc/realm#transformers.RealmTokenizer"),d(mR,"href","/docs/transformers/pr_16871/en/model_doc/realm#transformers.RealmTokenizerFast"),d(gR,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerTokenizer"),d(hR,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(pR,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertTokenizer"),d(_R,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(uR,"href","/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(bR,"href","/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(vR,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizer"),d(FR,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(TR,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(MR,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(ER,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(CR,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(wR,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterTokenizer"),d(AR,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(yR,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(LR,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(xR,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.T5Tokenizer"),d(kR,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.T5TokenizerFast"),d(SR,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasTokenizer"),d(RR,"href","/docs/transformers/pr_16871/en/model_doc/tapex#transformers.TapexTokenizer"),d(BR,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(PR,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d($R,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(IR,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMTokenizer"),d(qR,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(NR,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMTokenizer"),d(jR,"href","/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(DR,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(GR,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(OR,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(VR,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bh,"id","transformers.AutoFeatureExtractor"),d(bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bh,"href","#transformers.AutoFeatureExtractor"),d(Ji,"class","relative group"),d(XR,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(zR,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(YR,"href","/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(rB,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(tB,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(aB,"href","/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(nB,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(sB,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(lB,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(iB,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(dB,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(cB,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gh,"id","transformers.AutoProcessor"),d(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gh,"href","#transformers.AutoProcessor"),d(Yi,"class","relative group"),d(fB,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(mB,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPProcessor"),d(gB,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(hB,"href","/docs/transformers/pr_16871/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(pB,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(_B,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(uB,"href","/docs/transformers/pr_16871/en/model_doc/trocr#transformers.TrOCRProcessor"),d(bB,"href","/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(vB,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kh,"id","transformers.AutoModel"),d(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kh,"href","#transformers.AutoModel"),d(Zi,"class","relative group"),d(FB,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TB,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MB,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EB,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertModel"),d(CB,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartModel"),d(wB,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitModel"),d(AB,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertModel"),d(yB,"href","/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(LB,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdModel"),d(xB,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(kB,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(SB,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(RB,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertModel"),d(BB,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineModel"),d(PB,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.CLIPModel"),d($B,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertModel"),d(IB,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextModel"),d(qB,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLModel"),d(NB,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(jB,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(DB,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(GB,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaModel"),d(OB,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(VB,"href","/docs/transformers/pr_16871/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(XB,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTModel"),d(zB,"href","/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrModel"),d(QB,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertModel"),d(WB,"href","/docs/transformers/pr_16871/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(HB,"href","/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTModel"),d(UB,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraModel"),d(JB,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertModel"),d(YB,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetModel"),d(KB,"href","/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTModel"),d(ZB,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelModel"),d(eP,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelBaseModel"),d(oP,"href","/docs/transformers/pr_16871/en/model_doc/glpn#transformers.GLPNModel"),d(rP,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2Model"),d(tP,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(aP,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJModel"),d(nP,"href","/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertModel"),d(sP,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertModel"),d(lP,"href","/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(iP,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(dP,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(cP,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDModel"),d(fP,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerModel"),d(mP,"href","/docs/transformers/pr_16871/en/model_doc/luke#transformers.LukeModel"),d(gP,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertModel"),d(hP,"href","/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100Model"),d(pP,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianModel"),d(_P,"href","/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerModel"),d(uP,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartModel"),d(bP,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(vP,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertModel"),d(FP,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetModel"),d(TP,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5Model"),d(MP,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerModel"),d(EP,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(CP,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusModel"),d(wP,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverModel"),d(AP,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartModel"),d(yP,"href","/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerModel"),d(LP,"href","/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(xP,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertModel"),d(kP,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerModel"),d(SP,"href","/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetModel"),d(RP,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertModel"),d(BP,"href","/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetModel"),d(PP,"href","/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertModel"),d($P,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaModel"),d(IP,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerModel"),d(qP,"href","/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerModel"),d(NP,"href","/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWModel"),d(jP,"href","/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDModel"),d(DP,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(GP,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterModel"),d(OP,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(VP,"href","/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinModel"),d(XP,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5Model"),d(zP,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasModel"),d(QP,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(WP,"href","/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechModel"),d(HP,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(UP,"href","/docs/transformers/pr_16871/en/model_doc/van#transformers.VanModel"),d(JP,"href","/docs/transformers/pr_16871/en/model_doc/vilt#transformers.ViltModel"),d(YP,"href","/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(KP,"href","/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertModel"),d(ZP,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTModel"),d(e$,"href","/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(o$,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(r$,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMModel"),d(t$,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMModel"),d(a$,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMModel"),d(n$,"href","/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(s$,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(l$,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(i$,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetModel"),d(d$,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j_,"id","transformers.AutoModelForPreTraining"),d(j_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j_,"href","#transformers.AutoModelForPreTraining"),d(rd,"class","relative group"),d(c$,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(f$,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(m$,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g$,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForPreTraining"),d(h$,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(p$,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForPreTraining"),d(_$,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(u$,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(b$,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(v$,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(F$,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(T$,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(M$,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(E$,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForPreTraining"),d(C$,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(w$,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForPreTraining"),d(A$,"href","/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(y$,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(L$,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(x$,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(k$,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(S$,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(R$,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(B$,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(P$,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d($$,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(I$,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(q$,"href","/docs/transformers/pr_16871/en/model_doc/retribert#transformers.RetriBertModel"),d(N$,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(j$,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(D$,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(G$,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(O$,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(V$,"href","/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(X$,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(z$,"href","/docs/transformers/pr_16871/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(Q$,"href","/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(W$,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(H$,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(U$,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(J$,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(Y$,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Au,"id","transformers.AutoModelForCausalLM"),d(Au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Au,"href","#transformers.AutoModelForCausalLM"),d(nd,"class","relative group"),d(K$,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Z$,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eI,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oI,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForCausalLM"),d(rI,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertLMHeadModel"),d(tI,"href","/docs/transformers/pr_16871/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(aI,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(nI,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(sI,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(lI,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(iI,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(dI,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(cI,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(fI,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForCausalLM"),d(mI,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(gI,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(hI,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(pI,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianForCausalLM"),d(_I,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForCausalLM"),d(uI,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(bI,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(vI,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(FI,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(TI,"href","/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(MI,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(EI,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(CI,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(wI,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(AI,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(yI,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(LI,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(xI,"href","/docs/transformers/pr_16871/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(kI,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(SI,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(RI,"href","/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(BI,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(PI,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d($I,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d1,"id","transformers.AutoModelForMaskedLM"),d(d1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d1,"href","#transformers.AutoModelForMaskedLM"),d(id,"class","relative group"),d(II,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qI,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NI,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jI,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(DI,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(GI,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForMaskedLM"),d(OI,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(VI,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(XI,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(zI,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(QI,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(WI,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(HI,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(UI,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(JI,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(YI,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(KI,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(eq,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(oq,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(rq,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(tq,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(aq,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(nq,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(sq,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(lq,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(iq,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(dq,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(cq,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(fq,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(mq,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(gq,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(hq,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(pq,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(_q,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(uq,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(bq,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q1,"id","transformers.AutoModelForSeq2SeqLM"),d(Q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q1,"href","#transformers.AutoModelForSeq2SeqLM"),d(fd,"class","relative group"),d(vq,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Fq,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Tq,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mq,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(yq,"href","/docs/transformers/pr_16871/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(xq,"href","/docs/transformers/pr_16871/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(kq,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.MarianMTModel"),d(Sq,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Rq,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Bq,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Pq,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d($q,"href","/docs/transformers/pr_16871/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Iq,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(qq,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Nq,"href","/docs/transformers/pr_16871/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fb,"id","transformers.AutoModelForSequenceClassification"),d(fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fb,"href","#transformers.AutoModelForSequenceClassification"),d(hd,"class","relative group"),d(jq,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dq,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Gq,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oq,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16871/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s2,"id","transformers.AutoModelForMultipleChoice"),d(s2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s2,"href","#transformers.AutoModelForMultipleChoice"),d(ud,"class","relative group"),d($N,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IN,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qN,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NN,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(aj,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(nj,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(sj,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(lj,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(ij,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(dj,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(cj,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(fj,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I2,"id","transformers.AutoModelForNextSentencePrediction"),d(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I2,"href","#transformers.AutoModelForNextSentencePrediction"),d(Fd,"class","relative group"),d(mj,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gj,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hj,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pj,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(_j,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(uj,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(bj,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(vj,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V2,"id","transformers.AutoModelForTokenClassification"),d(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V2,"href","#transformers.AutoModelForTokenClassification"),d(Ed,"class","relative group"),d(Fj,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tj,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mj,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ej,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForTokenClassification"),d(wj,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(yj,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(xj,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(kj,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d($j,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(qj,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(jj,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(zj,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Hj,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Uj,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Jj,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Yj,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Kj,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Zj,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(eD,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(oD,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C6,"id","transformers.AutoModelForQuestionAnswering"),d(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C6,"href","#transformers.AutoModelForQuestionAnswering"),d(Ad,"class","relative group"),d(rD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nD,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16871/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16871/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(vD,"href","/docs/transformers/pr_16871/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16871/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16871/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16871/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16871/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16871/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16871/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_16871/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_16871/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(DD,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(OD,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(VD,"href","/docs/transformers/pr_16871/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fv,"id","transformers.AutoModelForTableQuestionAnswering"),d(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fv,"href","#transformers.AutoModelForTableQuestionAnswering"),d(xd,"class","relative group"),d(XD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WD,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hv,"id","transformers.AutoModelForImageClassification"),d(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hv,"href","#transformers.AutoModelForImageClassification"),d(Rd,"class","relative group"),d(HD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JD,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YD,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitForImageClassification"),d(KD,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(ZD,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(eG,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForImageClassification"),d(oG,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(rG,"href","/docs/transformers/pr_16871/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(tG,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(aG,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(nG,"href","/docs/transformers/pr_16871/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(sG,"href","/docs/transformers/pr_16871/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(lG,"href","/docs/transformers/pr_16871/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(iG,"href","/docs/transformers/pr_16871/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(dG,"href","/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(cG,"href","/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinForImageClassification"),d(fG,"href","/docs/transformers/pr_16871/en/model_doc/van#transformers.VanForImageClassification"),d(mG,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yv,"id","transformers.AutoModelForVision2Seq"),d(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yv,"href","#transformers.AutoModelForVision2Seq"),d($d,"class","relative group"),d(gG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_G,"href","/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kv,"id","transformers.AutoModelForAudioClassification"),d(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kv,"href","#transformers.AutoModelForAudioClassification"),d(Nd,"class","relative group"),d(uG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FG,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(TG,"href","/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(MG,"href","/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(EG,"href","/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(CG,"href","/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(wG,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(AG,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(yG,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dv,"id","transformers.AutoModelForAudioFrameClassification"),d(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dv,"href","#transformers.AutoModelForAudioFrameClassification"),d(Gd,"class","relative group"),d(LG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SG,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(RG,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(BG,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(PG,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qv,"id","transformers.AutoModelForCTC"),d(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qv,"href","#transformers.AutoModelForCTC"),d(Xd,"class","relative group"),d($G,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NG,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(jG,"href","/docs/transformers/pr_16871/en/model_doc/hubert#transformers.HubertForCTC"),d(DG,"href","/docs/transformers/pr_16871/en/model_doc/sew#transformers.SEWForCTC"),d(GG,"href","/docs/transformers/pr_16871/en/model_doc/sew-d#transformers.SEWDForCTC"),d(OG,"href","/docs/transformers/pr_16871/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(VG,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(XG,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(zG,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rF,"id","transformers.AutoModelForSpeechSeq2Seq"),d(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rF,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Wd,"class","relative group"),d(QG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UG,"href","/docs/transformers/pr_16871/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(JG,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sF,"id","transformers.AutoModelForAudioXVector"),d(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sF,"href","#transformers.AutoModelForAudioXVector"),d(Jd,"class","relative group"),d(YG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZG,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eO,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(oO,"href","/docs/transformers/pr_16871/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(rO,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(tO,"href","/docs/transformers/pr_16871/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mF,"id","transformers.AutoModelForMaskedImageModeling"),d(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Zd,"class","relative group"),d(aO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lO,"href","/docs/transformers/pr_16871/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(iO,"href","/docs/transformers/pr_16871/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(dO,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uF,"id","transformers.AutoModelForObjectDetection"),d(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uF,"href","#transformers.AutoModelForObjectDetection"),d(tc,"class","relative group"),d(cO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gO,"href","/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FF,"id","transformers.AutoModelForImageSegmentation"),d(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FF,"href","#transformers.AutoModelForImageSegmentation"),d(sc,"class","relative group"),d(hO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_O,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uO,"href","/docs/transformers/pr_16871/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EF,"id","transformers.AutoModelForSemanticSegmentation"),d(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EF,"href","#transformers.AutoModelForSemanticSegmentation"),d(dc,"class","relative group"),d(bO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TO,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(MO,"href","/docs/transformers/pr_16871/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(EO,"href","/docs/transformers/pr_16871/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(CO,"href","/docs/transformers/pr_16871/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xF,"id","transformers.AutoModelForInstanceSegmentation"),d(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xF,"href","#transformers.AutoModelForInstanceSegmentation"),d(mc,"class","relative group"),d(wO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LO,"href","/docs/transformers/pr_16871/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RF,"id","transformers.TFAutoModel"),d(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RF,"href","#transformers.TFAutoModel"),d(pc,"class","relative group"),d(xO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SO,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RO,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertModel"),d(BO,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartModel"),d(PO,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertModel"),d($O,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(IO,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(qO,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertModel"),d(NO,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.TFCLIPModel"),d(jO,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertModel"),d(DO,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.TFConvNextModel"),d(GO,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLModel"),d(OO,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaModel"),d(VO,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(XO,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(zO,"href","/docs/transformers/pr_16871/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(QO,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraModel"),d(WO,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(HO,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelModel"),d(UO,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(JO,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2Model"),d(YO,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJModel"),d(KO,"href","/docs/transformers/pr_16871/en/model_doc/hubert#transformers.TFHubertModel"),d(ZO,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(eV,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.TFLEDModel"),d(oV,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerModel"),d(rV,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.TFLxmertModel"),d(tV,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.TFMarianModel"),d(aV,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.TFMBartModel"),d(nV,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(sV,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetModel"),d(lV,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.TFMT5Model"),d(iV,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(dV,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.TFPegasusModel"),d(cV,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertModel"),d(fV,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaModel"),d(mV,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerModel"),d(gV,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(hV,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5Model"),d(pV,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasModel"),d(_V,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(uV,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.TFViTModel"),d(bV,"href","/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(vV,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(FV,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMModel"),d(TV,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(MV,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MT,"id","transformers.TFAutoModelForPreTraining"),d(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MT,"href","#transformers.TFAutoModelForPreTraining"),d(bc,"class","relative group"),d(EV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AV,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(yV,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(LV,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForPreTraining"),d(xV,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(kV,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(SV,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(RV,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(BV,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(PV,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d($V,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(IV,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(qV,"href","/docs/transformers/pr_16871/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(NV,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(jV,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(DV,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(GV,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(OV,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(VV,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(XV,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(zV,"href","/docs/transformers/pr_16871/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(QV,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(WV,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(HV,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QT,"id","transformers.TFAutoModelForCausalLM"),d(QT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QT,"href","#transformers.TFAutoModelForCausalLM"),d(Tc,"class","relative group"),d(UV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YV,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KV,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(ZV,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(eX,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(oX,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(rX,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(tX,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(aX,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(nX,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(sX,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(lX,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(iX,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(dX,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n8,"id","transformers.TFAutoModelForImageClassification"),d(n8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n8,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(cX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gX,"href","/docs/transformers/pr_16871/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(hX,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(i8,"id","transformers.TFAutoModelForMaskedLM"),d(i8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i8,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(pX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_X,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bX,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(vX,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(FX,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(TX,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(MX,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(EX,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(CX,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(wX,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(AX,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(yX,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(LX,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(xX,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(kX,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(SX,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(RX,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(BX,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(PX,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d($X,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(IX,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(qX,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x8,"id","transformers.TFAutoModelForSeq2SeqLM"),d(x8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x8,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(kc,"class","relative group"),d(NX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GX,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(OX,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(VX,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(XX,"href","/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(zX,"href","/docs/transformers/pr_16871/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(QX,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.TFMarianMTModel"),d(WX,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(HX,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(UX,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(JX,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D8,"id","transformers.TFAutoModelForSequenceClassification"),d(D8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D8,"href","#transformers.TFAutoModelForSequenceClassification"),d(Bc,"class","relative group"),d(YX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZX,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ez,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(az,"href","/docs/transformers/pr_16871/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16871/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(bz,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16871/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(wz,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g7,"id","transformers.TFAutoModelForMultipleChoice"),d(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g7,"href","#transformers.TFAutoModelForMultipleChoice"),d(Ic,"class","relative group"),d(Az,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xz,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d($z,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(qz,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(zz,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S7,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(jc,"class","relative group"),d(Qz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Hz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uz,"href","/docs/transformers/pr_16871/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B7,"id","transformers.TFAutoModelForTokenClassification"),d(B7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B7,"href","#transformers.TFAutoModelForTokenClassification"),d(Oc,"class","relative group"),d(Jz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Kz,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zz,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(sQ,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(lQ,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(iQ,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(dQ,"href","/docs/transformers/pr_16871/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(cQ,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(fQ,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(mQ,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(gQ,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(hQ,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(pQ,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(_Q,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(uQ,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(bQ,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eM,"id","transformers.TFAutoModelForQuestionAnswering"),d(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(zc,"class","relative group"),d(vQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MQ,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16871/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16871/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16871/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_16871/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_16871/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(SQ,"href","/docs/transformers/pr_16871/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_16871/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_16871/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_16871/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_16871/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(NQ,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(jQ,"href","/docs/transformers/pr_16871/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(DQ,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(GQ,"href","/docs/transformers/pr_16871/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TM,"id","transformers.TFAutoModelForVision2Seq"),d(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TM,"href","#transformers.TFAutoModelForVision2Seq"),d(Hc,"class","relative group"),d(OQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zQ,"href","/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Yc,"class","relative group"),d(QQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UQ,"href","/docs/transformers/pr_16871/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wM,"id","transformers.FlaxAutoModel"),d(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wM,"href","#transformers.FlaxAutoModel"),d(ef,"class","relative group"),d(JQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KQ,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZQ,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertModel"),d(eW,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartModel"),d(oW,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.FlaxBeitModel"),d(rW,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertModel"),d(tW,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(aW,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(nW,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(sW,"href","/docs/transformers/pr_16871/en/model_doc/clip#transformers.FlaxCLIPModel"),d(lW,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(iW,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraModel"),d(dW,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(cW,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(fW,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(mW,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.FlaxMarianModel"),d(gW,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartModel"),d(hW,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5Model"),d(pW,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(_W,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(uW,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(bW,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5Model"),d(vW,"href","/docs/transformers/pr_16871/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(FW,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.FlaxViTModel"),d(TW,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(MW,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(EW,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YM,"id","transformers.FlaxAutoModelForCausalLM"),d(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YM,"href","#transformers.FlaxAutoModelForCausalLM"),d(tf,"class","relative group"),d(CW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yW,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(LW,"href","/docs/transformers/pr_16871/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(xW,"href","/docs/transformers/pr_16871/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(kW,"href","/docs/transformers/pr_16871/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(SW,"href","/docs/transformers/pr_16871/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t4,"id","transformers.FlaxAutoModelForPreTraining"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.FlaxAutoModelForPreTraining"),d(sf,"class","relative group"),d(RW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($W,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(IW,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(qW,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(NW,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(jW,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(DW,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(GW,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(OW,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(VW,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(XW,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(zW,"href","/docs/transformers/pr_16871/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(QW,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_4,"id","transformers.FlaxAutoModelForMaskedLM"),d(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(cf,"class","relative group"),d(WW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UW,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JW,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(YW,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(KW,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(ZW,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(eH,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(oH,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(rH,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(tH,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(aH,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(nH,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(gf,"class","relative group"),d(sH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dH,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(cH,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(fH,"href","/docs/transformers/pr_16871/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(mH,"href","/docs/transformers/pr_16871/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(gH,"href","/docs/transformers/pr_16871/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(hH,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(pH,"href","/docs/transformers/pr_16871/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(_H,"href","/docs/transformers/pr_16871/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(uH,"href","/docs/transformers/pr_16871/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(q4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(_f,"class","relative group"),d(bH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TH,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(MH,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(EH,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(CH,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(wH,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(AH,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(yH,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(LH,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(xH,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(kH,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(vf,"class","relative group"),d(SH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PH,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d($H,"href","/docs/transformers/pr_16871/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(IH,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(qH,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(NH,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(jH,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(DH,"href","/docs/transformers/pr_16871/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(GH,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(OH,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(VH,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nE,"id","transformers.FlaxAutoModelForTokenClassification"),d(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Mf,"class","relative group"),d(XH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QH,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WH,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(HH,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(UH,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(JH,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(YH,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(KH,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(ZH,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(eU,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(wf,"class","relative group"),d(oU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aU,"href","/docs/transformers/pr_16871/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(nU,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(sU,"href","/docs/transformers/pr_16871/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(lU,"href","/docs/transformers/pr_16871/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(iU,"href","/docs/transformers/pr_16871/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(dU,"href","/docs/transformers/pr_16871/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(cU,"href","/docs/transformers/pr_16871/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(fU,"href","/docs/transformers/pr_16871/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Lf,"class","relative group"),d(mU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pU,"href","/docs/transformers/pr_16871/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wE,"id","transformers.FlaxAutoModelForImageClassification"),d(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wE,"href","#transformers.FlaxAutoModelForImageClassification"),d(Sf,"class","relative group"),d(_U,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vU,"href","/docs/transformers/pr_16871/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(FU,"href","/docs/transformers/pr_16871/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LE,"id","transformers.FlaxAutoModelForVision2Seq"),d(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Pf,"class","relative group"),d(TU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EU,"href","/docs/transformers/pr_16871/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CU,"href","/docs/transformers/pr_16871/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,ee),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,ji),b(c,jf,u),b(c,fa,u),e(fa,Di),e(fa,Gi),e(Gi,k5),e(fa,Df),b(c,xe,u),b(c,co,u),e(co,Oi),e(co,On),e(On,S5),e(co,Vn),e(co,Xn),e(Xn,R5),e(co,Vi),e(co,zn),e(zn,B5),e(co,Xi),b(c,Gf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,C9),e(ue,zi),e(zi,w9),e(ue,A9),b(c,zo,u),b(c,Ga,u),e(Ga,y9),e(Ga,Of),e(Of,L9),e(Ga,eqe),b(c,GRe,u),b(c,Qi,u),e(Qi,Vf),e(Vf,uY),g(P5,uY,null),e(Qi,oqe),e(Qi,bY),e(bY,rqe),b(c,ORe,u),b(c,Qn,u),e(Qn,tqe),e(Qn,vY),e(vY,aqe),e(Qn,nqe),e(Qn,FY),e(FY,sqe),e(Qn,lqe),b(c,VRe,u),g($5,c,u),b(c,XRe,u),b(c,x9,u),e(x9,iqe),b(c,zRe,u),g(Xf,c,u),b(c,QRe,u),b(c,Wi,u),e(Wi,zf),e(zf,TY),g(I5,TY,null),e(Wi,dqe),e(Wi,MY),e(MY,cqe),b(c,WRe,u),b(c,Qo,u),g(q5,Qo,null),e(Qo,fqe),e(Qo,N5),e(N5,mqe),e(N5,k9),e(k9,gqe),e(N5,hqe),e(Qo,pqe),e(Qo,j5),e(j5,_qe),e(j5,EY),e(EY,uqe),e(j5,bqe),e(Qo,vqe),e(Qo,mo),g(D5,mo,null),e(mo,Fqe),e(mo,CY),e(CY,Tqe),e(mo,Mqe),e(mo,Hi),e(Hi,Eqe),e(Hi,wY),e(wY,Cqe),e(Hi,wqe),e(Hi,AY),e(AY,Aqe),e(Hi,yqe),e(mo,Lqe),e(mo,v),e(v,Qf),e(Qf,yY),e(yY,xqe),e(Qf,kqe),e(Qf,S9),e(S9,Sqe),e(Qf,Rqe),e(v,Bqe),e(v,Wf),e(Wf,LY),e(LY,Pqe),e(Wf,$qe),e(Wf,R9),e(R9,Iqe),e(Wf,qqe),e(v,Nqe),e(v,Hf),e(Hf,xY),e(xY,jqe),e(Hf,Dqe),e(Hf,B9),e(B9,Gqe),e(Hf,Oqe),e(v,Vqe),e(v,Uf),e(Uf,kY),e(kY,Xqe),e(Uf,zqe),e(Uf,P9),e(P9,Qqe),e(Uf,Wqe),e(v,Hqe),e(v,Jf),e(Jf,SY),e(SY,Uqe),e(Jf,Jqe),e(Jf,$9),e($9,Yqe),e(Jf,Kqe),e(v,Zqe),e(v,Yf),e(Yf,RY),e(RY,eNe),e(Yf,oNe),e(Yf,I9),e(I9,rNe),e(Yf,tNe),e(v,aNe),e(v,Kf),e(Kf,BY),e(BY,nNe),e(Kf,sNe),e(Kf,q9),e(q9,lNe),e(Kf,iNe),e(v,dNe),e(v,Zf),e(Zf,PY),e(PY,cNe),e(Zf,fNe),e(Zf,N9),e(N9,mNe),e(Zf,gNe),e(v,hNe),e(v,em),e(em,$Y),e($Y,pNe),e(em,_Ne),e(em,j9),e(j9,uNe),e(em,bNe),e(v,vNe),e(v,om),e(om,IY),e(IY,FNe),e(om,TNe),e(om,D9),e(D9,MNe),e(om,ENe),e(v,CNe),e(v,rm),e(rm,qY),e(qY,wNe),e(rm,ANe),e(rm,G9),e(G9,yNe),e(rm,LNe),e(v,xNe),e(v,tm),e(tm,NY),e(NY,kNe),e(tm,SNe),e(tm,O9),e(O9,RNe),e(tm,BNe),e(v,PNe),e(v,am),e(am,jY),e(jY,$Ne),e(am,INe),e(am,V9),e(V9,qNe),e(am,NNe),e(v,jNe),e(v,nm),e(nm,DY),e(DY,DNe),e(nm,GNe),e(nm,X9),e(X9,ONe),e(nm,VNe),e(v,XNe),e(v,sm),e(sm,GY),e(GY,zNe),e(sm,QNe),e(sm,z9),e(z9,WNe),e(sm,HNe),e(v,UNe),e(v,lm),e(lm,OY),e(OY,JNe),e(lm,YNe),e(lm,Q9),e(Q9,KNe),e(lm,ZNe),e(v,eje),e(v,im),e(im,VY),e(VY,oje),e(im,rje),e(im,W9),e(W9,tje),e(im,aje),e(v,nje),e(v,dm),e(dm,XY),e(XY,sje),e(dm,lje),e(dm,H9),e(H9,ije),e(dm,dje),e(v,cje),e(v,cm),e(cm,zY),e(zY,fje),e(cm,mje),e(cm,U9),e(U9,gje),e(cm,hje),e(v,pje),e(v,fm),e(fm,QY),e(QY,_je),e(fm,uje),e(fm,J9),e(J9,bje),e(fm,vje),e(v,Fje),e(v,mm),e(mm,WY),e(WY,Tje),e(mm,Mje),e(mm,Y9),e(Y9,Eje),e(mm,Cje),e(v,wje),e(v,gm),e(gm,HY),e(HY,Aje),e(gm,yje),e(gm,K9),e(K9,Lje),e(gm,xje),e(v,kje),e(v,hm),e(hm,UY),e(UY,Sje),e(hm,Rje),e(hm,Z9),e(Z9,Bje),e(hm,Pje),e(v,$je),e(v,pm),e(pm,JY),e(JY,Ije),e(pm,qje),e(pm,ex),e(ex,Nje),e(pm,jje),e(v,Dje),e(v,_m),e(_m,YY),e(YY,Gje),e(_m,Oje),e(_m,ox),e(ox,Vje),e(_m,Xje),e(v,zje),e(v,um),e(um,KY),e(KY,Qje),e(um,Wje),e(um,rx),e(rx,Hje),e(um,Uje),e(v,Jje),e(v,bm),e(bm,ZY),e(ZY,Yje),e(bm,Kje),e(bm,tx),e(tx,Zje),e(bm,eDe),e(v,oDe),e(v,vm),e(vm,eK),e(eK,rDe),e(vm,tDe),e(vm,ax),e(ax,aDe),e(vm,nDe),e(v,sDe),e(v,Fm),e(Fm,oK),e(oK,lDe),e(Fm,iDe),e(Fm,nx),e(nx,dDe),e(Fm,cDe),e(v,fDe),e(v,Tm),e(Tm,rK),e(rK,mDe),e(Tm,gDe),e(Tm,sx),e(sx,hDe),e(Tm,pDe),e(v,_De),e(v,Mm),e(Mm,tK),e(tK,uDe),e(Mm,bDe),e(Mm,lx),e(lx,vDe),e(Mm,FDe),e(v,TDe),e(v,Em),e(Em,aK),e(aK,MDe),e(Em,EDe),e(Em,ix),e(ix,CDe),e(Em,wDe),e(v,ADe),e(v,Cm),e(Cm,nK),e(nK,yDe),e(Cm,LDe),e(Cm,dx),e(dx,xDe),e(Cm,kDe),e(v,SDe),e(v,wm),e(wm,sK),e(sK,RDe),e(wm,BDe),e(wm,cx),e(cx,PDe),e(wm,$De),e(v,IDe),e(v,Am),e(Am,lK),e(lK,qDe),e(Am,NDe),e(Am,fx),e(fx,jDe),e(Am,DDe),e(v,GDe),e(v,ym),e(ym,iK),e(iK,ODe),e(ym,VDe),e(ym,mx),e(mx,XDe),e(ym,zDe),e(v,QDe),e(v,Lm),e(Lm,dK),e(dK,WDe),e(Lm,HDe),e(Lm,gx),e(gx,UDe),e(Lm,JDe),e(v,YDe),e(v,xm),e(xm,cK),e(cK,KDe),e(xm,ZDe),e(xm,hx),e(hx,eGe),e(xm,oGe),e(v,rGe),e(v,km),e(km,fK),e(fK,tGe),e(km,aGe),e(km,px),e(px,nGe),e(km,sGe),e(v,lGe),e(v,Sm),e(Sm,mK),e(mK,iGe),e(Sm,dGe),e(Sm,_x),e(_x,cGe),e(Sm,fGe),e(v,mGe),e(v,Rm),e(Rm,gK),e(gK,gGe),e(Rm,hGe),e(Rm,ux),e(ux,pGe),e(Rm,_Ge),e(v,uGe),e(v,Bm),e(Bm,hK),e(hK,bGe),e(Bm,vGe),e(Bm,bx),e(bx,FGe),e(Bm,TGe),e(v,MGe),e(v,Pm),e(Pm,pK),e(pK,EGe),e(Pm,CGe),e(Pm,vx),e(vx,wGe),e(Pm,AGe),e(v,yGe),e(v,$m),e($m,_K),e(_K,LGe),e($m,xGe),e($m,Fx),e(Fx,kGe),e($m,SGe),e(v,RGe),e(v,Im),e(Im,uK),e(uK,BGe),e(Im,PGe),e(Im,Tx),e(Tx,$Ge),e(Im,IGe),e(v,qGe),e(v,qm),e(qm,bK),e(bK,NGe),e(qm,jGe),e(qm,Mx),e(Mx,DGe),e(qm,GGe),e(v,OGe),e(v,Nm),e(Nm,vK),e(vK,VGe),e(Nm,XGe),e(Nm,Ex),e(Ex,zGe),e(Nm,QGe),e(v,WGe),e(v,jm),e(jm,FK),e(FK,HGe),e(jm,UGe),e(jm,Cx),e(Cx,JGe),e(jm,YGe),e(v,KGe),e(v,Dm),e(Dm,TK),e(TK,ZGe),e(Dm,eOe),e(Dm,wx),e(wx,oOe),e(Dm,rOe),e(v,tOe),e(v,Gm),e(Gm,MK),e(MK,aOe),e(Gm,nOe),e(Gm,Ax),e(Ax,sOe),e(Gm,lOe),e(v,iOe),e(v,Om),e(Om,EK),e(EK,dOe),e(Om,cOe),e(Om,yx),e(yx,fOe),e(Om,mOe),e(v,gOe),e(v,Vm),e(Vm,CK),e(CK,hOe),e(Vm,pOe),e(Vm,Lx),e(Lx,_Oe),e(Vm,uOe),e(v,bOe),e(v,Xm),e(Xm,wK),e(wK,vOe),e(Xm,FOe),e(Xm,xx),e(xx,TOe),e(Xm,MOe),e(v,EOe),e(v,zm),e(zm,AK),e(AK,COe),e(zm,wOe),e(zm,kx),e(kx,AOe),e(zm,yOe),e(v,LOe),e(v,Qm),e(Qm,yK),e(yK,xOe),e(Qm,kOe),e(Qm,Sx),e(Sx,SOe),e(Qm,ROe),e(v,BOe),e(v,Wm),e(Wm,LK),e(LK,POe),e(Wm,$Oe),e(Wm,Rx),e(Rx,IOe),e(Wm,qOe),e(v,NOe),e(v,Hm),e(Hm,xK),e(xK,jOe),e(Hm,DOe),e(Hm,Bx),e(Bx,GOe),e(Hm,OOe),e(v,VOe),e(v,Um),e(Um,kK),e(kK,XOe),e(Um,zOe),e(Um,Px),e(Px,QOe),e(Um,WOe),e(v,HOe),e(v,Jm),e(Jm,SK),e(SK,UOe),e(Jm,JOe),e(Jm,$x),e($x,YOe),e(Jm,KOe),e(v,ZOe),e(v,Ym),e(Ym,RK),e(RK,eVe),e(Ym,oVe),e(Ym,Ix),e(Ix,rVe),e(Ym,tVe),e(v,aVe),e(v,Km),e(Km,BK),e(BK,nVe),e(Km,sVe),e(Km,qx),e(qx,lVe),e(Km,iVe),e(v,dVe),e(v,Zm),e(Zm,PK),e(PK,cVe),e(Zm,fVe),e(Zm,Nx),e(Nx,mVe),e(Zm,gVe),e(v,hVe),e(v,eg),e(eg,$K),e($K,pVe),e(eg,_Ve),e(eg,jx),e(jx,uVe),e(eg,bVe),e(v,vVe),e(v,og),e(og,IK),e(IK,FVe),e(og,TVe),e(og,Dx),e(Dx,MVe),e(og,EVe),e(v,CVe),e(v,rg),e(rg,qK),e(qK,wVe),e(rg,AVe),e(rg,Gx),e(Gx,yVe),e(rg,LVe),e(v,xVe),e(v,tg),e(tg,NK),e(NK,kVe),e(tg,SVe),e(tg,Ox),e(Ox,RVe),e(tg,BVe),e(v,PVe),e(v,ag),e(ag,jK),e(jK,$Ve),e(ag,IVe),e(ag,Vx),e(Vx,qVe),e(ag,NVe),e(v,jVe),e(v,ng),e(ng,DK),e(DK,DVe),e(ng,GVe),e(ng,Xx),e(Xx,OVe),e(ng,VVe),e(v,XVe),e(v,sg),e(sg,GK),e(GK,zVe),e(sg,QVe),e(sg,zx),e(zx,WVe),e(sg,HVe),e(v,UVe),e(v,lg),e(lg,OK),e(OK,JVe),e(lg,YVe),e(lg,Qx),e(Qx,KVe),e(lg,ZVe),e(v,eXe),e(v,ig),e(ig,VK),e(VK,oXe),e(ig,rXe),e(ig,Wx),e(Wx,tXe),e(ig,aXe),e(v,nXe),e(v,dg),e(dg,XK),e(XK,sXe),e(dg,lXe),e(dg,Hx),e(Hx,iXe),e(dg,dXe),e(v,cXe),e(v,cg),e(cg,zK),e(zK,fXe),e(cg,mXe),e(cg,Ux),e(Ux,gXe),e(cg,hXe),e(v,pXe),e(v,fg),e(fg,QK),e(QK,_Xe),e(fg,uXe),e(fg,Jx),e(Jx,bXe),e(fg,vXe),e(v,FXe),e(v,mg),e(mg,WK),e(WK,TXe),e(mg,MXe),e(mg,Yx),e(Yx,EXe),e(mg,CXe),e(v,wXe),e(v,gg),e(gg,HK),e(HK,AXe),e(gg,yXe),e(gg,Kx),e(Kx,LXe),e(gg,xXe),e(v,kXe),e(v,hg),e(hg,UK),e(UK,SXe),e(hg,RXe),e(hg,Zx),e(Zx,BXe),e(hg,PXe),e(v,$Xe),e(v,pg),e(pg,JK),e(JK,IXe),e(pg,qXe),e(pg,ek),e(ek,NXe),e(pg,jXe),e(v,DXe),e(v,_g),e(_g,YK),e(YK,GXe),e(_g,OXe),e(_g,ok),e(ok,VXe),e(_g,XXe),e(v,zXe),e(v,ug),e(ug,KK),e(KK,QXe),e(ug,WXe),e(ug,rk),e(rk,HXe),e(ug,UXe),e(v,JXe),e(v,bg),e(bg,ZK),e(ZK,YXe),e(bg,KXe),e(bg,tk),e(tk,ZXe),e(bg,eze),e(v,oze),e(v,vg),e(vg,eZ),e(eZ,rze),e(vg,tze),e(vg,ak),e(ak,aze),e(vg,nze),e(v,sze),e(v,Fg),e(Fg,oZ),e(oZ,lze),e(Fg,ize),e(Fg,nk),e(nk,dze),e(Fg,cze),e(v,fze),e(v,Tg),e(Tg,rZ),e(rZ,mze),e(Tg,gze),e(Tg,sk),e(sk,hze),e(Tg,pze),e(v,_ze),e(v,Mg),e(Mg,tZ),e(tZ,uze),e(Mg,bze),e(Mg,lk),e(lk,vze),e(Mg,Fze),e(v,Tze),e(v,Eg),e(Eg,aZ),e(aZ,Mze),e(Eg,Eze),e(Eg,ik),e(ik,Cze),e(Eg,wze),e(v,Aze),e(v,Cg),e(Cg,nZ),e(nZ,yze),e(Cg,Lze),e(Cg,dk),e(dk,xze),e(Cg,kze),e(v,Sze),e(v,wg),e(wg,sZ),e(sZ,Rze),e(wg,Bze),e(wg,ck),e(ck,Pze),e(wg,$ze),e(v,Ize),e(v,Ag),e(Ag,lZ),e(lZ,qze),e(Ag,Nze),e(Ag,fk),e(fk,jze),e(Ag,Dze),e(v,Gze),e(v,yg),e(yg,iZ),e(iZ,Oze),e(yg,Vze),e(yg,mk),e(mk,Xze),e(yg,zze),e(v,Qze),e(v,Lg),e(Lg,dZ),e(dZ,Wze),e(Lg,Hze),e(Lg,gk),e(gk,Uze),e(Lg,Jze),e(v,Yze),e(v,xg),e(xg,cZ),e(cZ,Kze),e(xg,Zze),e(xg,hk),e(hk,eQe),e(xg,oQe),e(v,rQe),e(v,kg),e(kg,fZ),e(fZ,tQe),e(kg,aQe),e(kg,pk),e(pk,nQe),e(kg,sQe),e(v,lQe),e(v,Sg),e(Sg,mZ),e(mZ,iQe),e(Sg,dQe),e(Sg,_k),e(_k,cQe),e(Sg,fQe),e(v,mQe),e(v,Rg),e(Rg,gZ),e(gZ,gQe),e(Rg,hQe),e(Rg,uk),e(uk,pQe),e(Rg,_Qe),e(v,uQe),e(v,Bg),e(Bg,hZ),e(hZ,bQe),e(Bg,vQe),e(Bg,bk),e(bk,FQe),e(Bg,TQe),e(v,MQe),e(v,Pg),e(Pg,pZ),e(pZ,EQe),e(Pg,CQe),e(Pg,vk),e(vk,wQe),e(Pg,AQe),e(v,yQe),e(v,$g),e($g,_Z),e(_Z,LQe),e($g,xQe),e($g,Fk),e(Fk,kQe),e($g,SQe),e(v,RQe),e(v,Ig),e(Ig,uZ),e(uZ,BQe),e(Ig,PQe),e(Ig,Tk),e(Tk,$Qe),e(Ig,IQe),e(v,qQe),e(v,qg),e(qg,bZ),e(bZ,NQe),e(qg,jQe),e(qg,Mk),e(Mk,DQe),e(qg,GQe),e(v,OQe),e(v,Ng),e(Ng,vZ),e(vZ,VQe),e(Ng,XQe),e(Ng,Ek),e(Ek,zQe),e(Ng,QQe),e(v,WQe),e(v,jg),e(jg,FZ),e(FZ,HQe),e(jg,UQe),e(jg,Ck),e(Ck,JQe),e(jg,YQe),e(mo,KQe),e(mo,TZ),e(TZ,ZQe),e(mo,eWe),g(G5,mo,null),e(Qo,oWe),e(Qo,Dg),g(O5,Dg,null),e(Dg,rWe),e(Dg,MZ),e(MZ,tWe),b(c,HRe,u),b(c,Ui,u),e(Ui,Gg),e(Gg,EZ),g(V5,EZ,null),e(Ui,aWe),e(Ui,CZ),e(CZ,nWe),b(c,URe,u),b(c,Wo,u),g(X5,Wo,null),e(Wo,sWe),e(Wo,z5),e(z5,lWe),e(z5,wk),e(wk,iWe),e(z5,dWe),e(Wo,cWe),e(Wo,Q5),e(Q5,fWe),e(Q5,wZ),e(wZ,mWe),e(Q5,gWe),e(Wo,hWe),e(Wo,go),g(W5,go,null),e(go,pWe),e(go,AZ),e(AZ,_We),e(go,uWe),e(go,Oa),e(Oa,bWe),e(Oa,yZ),e(yZ,vWe),e(Oa,FWe),e(Oa,LZ),e(LZ,TWe),e(Oa,MWe),e(Oa,xZ),e(xZ,EWe),e(Oa,CWe),e(go,wWe),e(go,E),e(E,Wn),e(Wn,kZ),e(kZ,AWe),e(Wn,yWe),e(Wn,Ak),e(Ak,LWe),e(Wn,xWe),e(Wn,yk),e(yk,kWe),e(Wn,SWe),e(E,RWe),e(E,Hn),e(Hn,SZ),e(SZ,BWe),e(Hn,PWe),e(Hn,Lk),e(Lk,$We),e(Hn,IWe),e(Hn,xk),e(xk,qWe),e(Hn,NWe),e(E,jWe),e(E,Un),e(Un,RZ),e(RZ,DWe),e(Un,GWe),e(Un,kk),e(kk,OWe),e(Un,VWe),e(Un,Sk),e(Sk,XWe),e(Un,zWe),e(E,QWe),e(E,Og),e(Og,BZ),e(BZ,WWe),e(Og,HWe),e(Og,Rk),e(Rk,UWe),e(Og,JWe),e(E,YWe),e(E,Jn),e(Jn,PZ),e(PZ,KWe),e(Jn,ZWe),e(Jn,Bk),e(Bk,eHe),e(Jn,oHe),e(Jn,Pk),e(Pk,rHe),e(Jn,tHe),e(E,aHe),e(E,Vg),e(Vg,$Z),e($Z,nHe),e(Vg,sHe),e(Vg,$k),e($k,lHe),e(Vg,iHe),e(E,dHe),e(E,Xg),e(Xg,IZ),e(IZ,cHe),e(Xg,fHe),e(Xg,Ik),e(Ik,mHe),e(Xg,gHe),e(E,hHe),e(E,zg),e(zg,qZ),e(qZ,pHe),e(zg,_He),e(zg,qk),e(qk,uHe),e(zg,bHe),e(E,vHe),e(E,Yn),e(Yn,NZ),e(NZ,FHe),e(Yn,THe),e(Yn,Nk),e(Nk,MHe),e(Yn,EHe),e(Yn,jk),e(jk,CHe),e(Yn,wHe),e(E,AHe),e(E,Kn),e(Kn,jZ),e(jZ,yHe),e(Kn,LHe),e(Kn,Dk),e(Dk,xHe),e(Kn,kHe),e(Kn,Gk),e(Gk,SHe),e(Kn,RHe),e(E,BHe),e(E,Zn),e(Zn,DZ),e(DZ,PHe),e(Zn,$He),e(Zn,Ok),e(Ok,IHe),e(Zn,qHe),e(Zn,Vk),e(Vk,NHe),e(Zn,jHe),e(E,DHe),e(E,Qg),e(Qg,GZ),e(GZ,GHe),e(Qg,OHe),e(Qg,Xk),e(Xk,VHe),e(Qg,XHe),e(E,zHe),e(E,Wg),e(Wg,OZ),e(OZ,QHe),e(Wg,WHe),e(Wg,zk),e(zk,HHe),e(Wg,UHe),e(E,JHe),e(E,es),e(es,VZ),e(VZ,YHe),e(es,KHe),e(es,Qk),e(Qk,ZHe),e(es,eUe),e(es,Wk),e(Wk,oUe),e(es,rUe),e(E,tUe),e(E,Hg),e(Hg,XZ),e(XZ,aUe),e(Hg,nUe),e(Hg,Hk),e(Hk,sUe),e(Hg,lUe),e(E,iUe),e(E,os),e(os,zZ),e(zZ,dUe),e(os,cUe),e(os,Uk),e(Uk,fUe),e(os,mUe),e(os,Jk),e(Jk,gUe),e(os,hUe),e(E,pUe),e(E,rs),e(rs,QZ),e(QZ,_Ue),e(rs,uUe),e(rs,Yk),e(Yk,bUe),e(rs,vUe),e(rs,Kk),e(Kk,FUe),e(rs,TUe),e(E,MUe),e(E,ts),e(ts,WZ),e(WZ,EUe),e(ts,CUe),e(ts,Zk),e(Zk,wUe),e(ts,AUe),e(ts,HZ),e(HZ,yUe),e(ts,LUe),e(E,xUe),e(E,Ug),e(Ug,UZ),e(UZ,kUe),e(Ug,SUe),e(Ug,eS),e(eS,RUe),e(Ug,BUe),e(E,PUe),e(E,as),e(as,JZ),e(JZ,$Ue),e(as,IUe),e(as,oS),e(oS,qUe),e(as,NUe),e(as,rS),e(rS,jUe),e(as,DUe),e(E,GUe),e(E,ns),e(ns,YZ),e(YZ,OUe),e(ns,VUe),e(ns,tS),e(tS,XUe),e(ns,zUe),e(ns,aS),e(aS,QUe),e(ns,WUe),e(E,HUe),e(E,ss),e(ss,KZ),e(KZ,UUe),e(ss,JUe),e(ss,nS),e(nS,YUe),e(ss,KUe),e(ss,sS),e(sS,ZUe),e(ss,eJe),e(E,oJe),e(E,ls),e(ls,ZZ),e(ZZ,rJe),e(ls,tJe),e(ls,lS),e(lS,aJe),e(ls,nJe),e(ls,iS),e(iS,sJe),e(ls,lJe),e(E,iJe),e(E,is),e(is,eee),e(eee,dJe),e(is,cJe),e(is,dS),e(dS,fJe),e(is,mJe),e(is,cS),e(cS,gJe),e(is,hJe),e(E,pJe),e(E,Jg),e(Jg,oee),e(oee,_Je),e(Jg,uJe),e(Jg,fS),e(fS,bJe),e(Jg,vJe),e(E,FJe),e(E,ds),e(ds,ree),e(ree,TJe),e(ds,MJe),e(ds,mS),e(mS,EJe),e(ds,CJe),e(ds,gS),e(gS,wJe),e(ds,AJe),e(E,yJe),e(E,Yg),e(Yg,tee),e(tee,LJe),e(Yg,xJe),e(Yg,hS),e(hS,kJe),e(Yg,SJe),e(E,RJe),e(E,cs),e(cs,aee),e(aee,BJe),e(cs,PJe),e(cs,pS),e(pS,$Je),e(cs,IJe),e(cs,_S),e(_S,qJe),e(cs,NJe),e(E,jJe),e(E,fs),e(fs,nee),e(nee,DJe),e(fs,GJe),e(fs,uS),e(uS,OJe),e(fs,VJe),e(fs,bS),e(bS,XJe),e(fs,zJe),e(E,QJe),e(E,ms),e(ms,see),e(see,WJe),e(ms,HJe),e(ms,vS),e(vS,UJe),e(ms,JJe),e(ms,FS),e(FS,YJe),e(ms,KJe),e(E,ZJe),e(E,gs),e(gs,lee),e(lee,eYe),e(gs,oYe),e(gs,TS),e(TS,rYe),e(gs,tYe),e(gs,MS),e(MS,aYe),e(gs,nYe),e(E,sYe),e(E,hs),e(hs,iee),e(iee,lYe),e(hs,iYe),e(hs,ES),e(ES,dYe),e(hs,cYe),e(hs,CS),e(CS,fYe),e(hs,mYe),e(E,gYe),e(E,Kg),e(Kg,dee),e(dee,hYe),e(Kg,pYe),e(Kg,wS),e(wS,_Ye),e(Kg,uYe),e(E,bYe),e(E,ps),e(ps,cee),e(cee,vYe),e(ps,FYe),e(ps,AS),e(AS,TYe),e(ps,MYe),e(ps,yS),e(yS,EYe),e(ps,CYe),e(E,wYe),e(E,_s),e(_s,fee),e(fee,AYe),e(_s,yYe),e(_s,LS),e(LS,LYe),e(_s,xYe),e(_s,xS),e(xS,kYe),e(_s,SYe),e(E,RYe),e(E,us),e(us,mee),e(mee,BYe),e(us,PYe),e(us,kS),e(kS,$Ye),e(us,IYe),e(us,SS),e(SS,qYe),e(us,NYe),e(E,jYe),e(E,bs),e(bs,gee),e(gee,DYe),e(bs,GYe),e(bs,RS),e(RS,OYe),e(bs,VYe),e(bs,BS),e(BS,XYe),e(bs,zYe),e(E,QYe),e(E,vs),e(vs,hee),e(hee,WYe),e(vs,HYe),e(vs,PS),e(PS,UYe),e(vs,JYe),e(vs,$S),e($S,YYe),e(vs,KYe),e(E,ZYe),e(E,Fs),e(Fs,pee),e(pee,eKe),e(Fs,oKe),e(Fs,IS),e(IS,rKe),e(Fs,tKe),e(Fs,qS),e(qS,aKe),e(Fs,nKe),e(E,sKe),e(E,Zg),e(Zg,_ee),e(_ee,lKe),e(Zg,iKe),e(Zg,NS),e(NS,dKe),e(Zg,cKe),e(E,fKe),e(E,Ts),e(Ts,uee),e(uee,mKe),e(Ts,gKe),e(Ts,jS),e(jS,hKe),e(Ts,pKe),e(Ts,DS),e(DS,_Ke),e(Ts,uKe),e(E,bKe),e(E,eh),e(eh,bee),e(bee,vKe),e(eh,FKe),e(eh,GS),e(GS,TKe),e(eh,MKe),e(E,EKe),e(E,oh),e(oh,vee),e(vee,CKe),e(oh,wKe),e(oh,OS),e(OS,AKe),e(oh,yKe),e(E,LKe),e(E,Ms),e(Ms,Fee),e(Fee,xKe),e(Ms,kKe),e(Ms,VS),e(VS,SKe),e(Ms,RKe),e(Ms,XS),e(XS,BKe),e(Ms,PKe),e(E,$Ke),e(E,Es),e(Es,Tee),e(Tee,IKe),e(Es,qKe),e(Es,zS),e(zS,NKe),e(Es,jKe),e(Es,QS),e(QS,DKe),e(Es,GKe),e(E,OKe),e(E,rh),e(rh,Mee),e(Mee,VKe),e(rh,XKe),e(rh,WS),e(WS,zKe),e(rh,QKe),e(E,WKe),e(E,Cs),e(Cs,Eee),e(Eee,HKe),e(Cs,UKe),e(Cs,HS),e(HS,JKe),e(Cs,YKe),e(Cs,US),e(US,KKe),e(Cs,ZKe),e(E,eZe),e(E,ws),e(ws,Cee),e(Cee,oZe),e(ws,rZe),e(ws,JS),e(JS,tZe),e(ws,aZe),e(ws,YS),e(YS,nZe),e(ws,sZe),e(E,lZe),e(E,As),e(As,wee),e(wee,iZe),e(As,dZe),e(As,KS),e(KS,cZe),e(As,fZe),e(As,ZS),e(ZS,mZe),e(As,gZe),e(E,hZe),e(E,ys),e(ys,Aee),e(Aee,pZe),e(ys,_Ze),e(ys,eR),e(eR,uZe),e(ys,bZe),e(ys,oR),e(oR,vZe),e(ys,FZe),e(E,TZe),e(E,Ls),e(Ls,yee),e(yee,MZe),e(Ls,EZe),e(Ls,rR),e(rR,CZe),e(Ls,wZe),e(Ls,tR),e(tR,AZe),e(Ls,yZe),e(E,LZe),e(E,th),e(th,Lee),e(Lee,xZe),e(th,kZe),e(th,aR),e(aR,SZe),e(th,RZe),e(E,BZe),e(E,ah),e(ah,xee),e(xee,PZe),e(ah,$Ze),e(ah,nR),e(nR,IZe),e(ah,qZe),e(E,NZe),e(E,nh),e(nh,kee),e(kee,jZe),e(nh,DZe),e(nh,sR),e(sR,GZe),e(nh,OZe),e(E,VZe),e(E,sh),e(sh,See),e(See,XZe),e(sh,zZe),e(sh,lR),e(lR,QZe),e(sh,WZe),e(E,HZe),e(E,xs),e(xs,Ree),e(Ree,UZe),e(xs,JZe),e(xs,iR),e(iR,YZe),e(xs,KZe),e(xs,dR),e(dR,ZZe),e(xs,eeo),e(E,oeo),e(E,lh),e(lh,Bee),e(Bee,reo),e(lh,teo),e(lh,cR),e(cR,aeo),e(lh,neo),e(E,seo),e(E,ks),e(ks,Pee),e(Pee,leo),e(ks,ieo),e(ks,fR),e(fR,deo),e(ks,ceo),e(ks,mR),e(mR,feo),e(ks,meo),e(E,geo),e(E,Ss),e(Ss,$ee),e($ee,heo),e(Ss,peo),e(Ss,gR),e(gR,_eo),e(Ss,ueo),e(Ss,hR),e(hR,beo),e(Ss,veo),e(E,Feo),e(E,Rs),e(Rs,Iee),e(Iee,Teo),e(Rs,Meo),e(Rs,pR),e(pR,Eeo),e(Rs,Ceo),e(Rs,_R),e(_R,weo),e(Rs,Aeo),e(E,yeo),e(E,Bs),e(Bs,qee),e(qee,Leo),e(Bs,xeo),e(Bs,uR),e(uR,keo),e(Bs,Seo),e(Bs,bR),e(bR,Reo),e(Bs,Beo),e(E,Peo),e(E,Ps),e(Ps,Nee),e(Nee,$eo),e(Ps,Ieo),e(Ps,vR),e(vR,qeo),e(Ps,Neo),e(Ps,FR),e(FR,jeo),e(Ps,Deo),e(E,Geo),e(E,$s),e($s,jee),e(jee,Oeo),e($s,Veo),e($s,TR),e(TR,Xeo),e($s,zeo),e($s,MR),e(MR,Qeo),e($s,Weo),e(E,Heo),e(E,ih),e(ih,Dee),e(Dee,Ueo),e(ih,Jeo),e(ih,ER),e(ER,Yeo),e(ih,Keo),e(E,Zeo),e(E,dh),e(dh,Gee),e(Gee,eoo),e(dh,ooo),e(dh,CR),e(CR,roo),e(dh,too),e(E,aoo),e(E,Is),e(Is,Oee),e(Oee,noo),e(Is,soo),e(Is,wR),e(wR,loo),e(Is,ioo),e(Is,AR),e(AR,doo),e(Is,coo),e(E,foo),e(E,qs),e(qs,Vee),e(Vee,moo),e(qs,goo),e(qs,yR),e(yR,hoo),e(qs,poo),e(qs,LR),e(LR,_oo),e(qs,uoo),e(E,boo),e(E,Ns),e(Ns,Xee),e(Xee,voo),e(Ns,Foo),e(Ns,xR),e(xR,Too),e(Ns,Moo),e(Ns,kR),e(kR,Eoo),e(Ns,Coo),e(E,woo),e(E,ch),e(ch,zee),e(zee,Aoo),e(ch,yoo),e(ch,SR),e(SR,Loo),e(ch,xoo),e(E,koo),e(E,fh),e(fh,Qee),e(Qee,Soo),e(fh,Roo),e(fh,RR),e(RR,Boo),e(fh,Poo),e(E,$oo),e(E,mh),e(mh,Wee),e(Wee,Ioo),e(mh,qoo),e(mh,BR),e(BR,Noo),e(mh,joo),e(E,Doo),e(E,gh),e(gh,Hee),e(Hee,Goo),e(gh,Ooo),e(gh,PR),e(PR,Voo),e(gh,Xoo),e(E,zoo),e(E,hh),e(hh,Uee),e(Uee,Qoo),e(hh,Woo),e(hh,$R),e($R,Hoo),e(hh,Uoo),e(E,Joo),e(E,js),e(js,Jee),e(Jee,Yoo),e(js,Koo),e(js,IR),e(IR,Zoo),e(js,ero),e(js,qR),e(qR,oro),e(js,rro),e(E,tro),e(E,ph),e(ph,Yee),e(Yee,aro),e(ph,nro),e(ph,NR),e(NR,sro),e(ph,lro),e(E,iro),e(E,_h),e(_h,Kee),e(Kee,dro),e(_h,cro),e(_h,jR),e(jR,fro),e(_h,mro),e(E,gro),e(E,Ds),e(Ds,Zee),e(Zee,hro),e(Ds,pro),e(Ds,DR),e(DR,_ro),e(Ds,uro),e(Ds,GR),e(GR,bro),e(Ds,vro),e(E,Fro),e(E,Gs),e(Gs,eoe),e(eoe,Tro),e(Gs,Mro),e(Gs,OR),e(OR,Ero),e(Gs,Cro),e(Gs,VR),e(VR,wro),e(Gs,Aro),e(go,yro),e(go,ooe),e(ooe,Lro),e(go,xro),g(H5,go,null),e(Wo,kro),e(Wo,uh),g(U5,uh,null),e(uh,Sro),e(uh,roe),e(roe,Rro),b(c,JRe,u),b(c,Ji,u),e(Ji,bh),e(bh,toe),g(J5,toe,null),e(Ji,Bro),e(Ji,aoe),e(aoe,Pro),b(c,YRe,u),b(c,Ho,u),g(Y5,Ho,null),e(Ho,$ro),e(Ho,K5),e(K5,Iro),e(K5,XR),e(XR,qro),e(K5,Nro),e(Ho,jro),e(Ho,Z5),e(Z5,Dro),e(Z5,noe),e(noe,Gro),e(Z5,Oro),e(Ho,Vro),e(Ho,$e),g(e3,$e,null),e($e,Xro),e($e,soe),e(soe,zro),e($e,Qro),e($e,Va),e(Va,Wro),e(Va,loe),e(loe,Hro),e(Va,Uro),e(Va,ioe),e(ioe,Jro),e(Va,Yro),e(Va,doe),e(doe,Kro),e(Va,Zro),e($e,eto),e($e,J),e(J,vh),e(vh,coe),e(coe,oto),e(vh,rto),e(vh,zR),e(zR,tto),e(vh,ato),e(J,nto),e(J,Fh),e(Fh,foe),e(foe,sto),e(Fh,lto),e(Fh,QR),e(QR,ito),e(Fh,dto),e(J,cto),e(J,Th),e(Th,moe),e(moe,fto),e(Th,mto),e(Th,WR),e(WR,gto),e(Th,hto),e(J,pto),e(J,Mh),e(Mh,goe),e(goe,_to),e(Mh,uto),e(Mh,HR),e(HR,bto),e(Mh,vto),e(J,Fto),e(J,Eh),e(Eh,hoe),e(hoe,Tto),e(Eh,Mto),e(Eh,UR),e(UR,Eto),e(Eh,Cto),e(J,wto),e(J,Ch),e(Ch,poe),e(poe,Ato),e(Ch,yto),e(Ch,JR),e(JR,Lto),e(Ch,xto),e(J,kto),e(J,wh),e(wh,_oe),e(_oe,Sto),e(wh,Rto),e(wh,YR),e(YR,Bto),e(wh,Pto),e(J,$to),e(J,Ah),e(Ah,uoe),e(uoe,Ito),e(Ah,qto),e(Ah,KR),e(KR,Nto),e(Ah,jto),e(J,Dto),e(J,yh),e(yh,boe),e(boe,Gto),e(yh,Oto),e(yh,ZR),e(ZR,Vto),e(yh,Xto),e(J,zto),e(J,Lh),e(Lh,voe),e(voe,Qto),e(Lh,Wto),e(Lh,eB),e(eB,Hto),e(Lh,Uto),e(J,Jto),e(J,xh),e(xh,Foe),e(Foe,Yto),e(xh,Kto),e(xh,oB),e(oB,Zto),e(xh,eao),e(J,oao),e(J,kh),e(kh,Toe),e(Toe,rao),e(kh,tao),e(kh,rB),e(rB,aao),e(kh,nao),e(J,sao),e(J,Sh),e(Sh,Moe),e(Moe,lao),e(Sh,iao),e(Sh,tB),e(tB,dao),e(Sh,cao),e(J,fao),e(J,Rh),e(Rh,Eoe),e(Eoe,mao),e(Rh,gao),e(Rh,aB),e(aB,hao),e(Rh,pao),e(J,_ao),e(J,Bh),e(Bh,Coe),e(Coe,uao),e(Bh,bao),e(Bh,nB),e(nB,vao),e(Bh,Fao),e(J,Tao),e(J,Ph),e(Ph,woe),e(woe,Mao),e(Ph,Eao),e(Ph,sB),e(sB,Cao),e(Ph,wao),e(J,Aao),e(J,$h),e($h,Aoe),e(Aoe,yao),e($h,Lao),e($h,lB),e(lB,xao),e($h,kao),e(J,Sao),e(J,Ih),e(Ih,yoe),e(yoe,Rao),e(Ih,Bao),e(Ih,iB),e(iB,Pao),e(Ih,$ao),e(J,Iao),e(J,qh),e(qh,Loe),e(Loe,qao),e(qh,Nao),e(qh,dB),e(dB,jao),e(qh,Dao),e(J,Gao),e(J,Nh),e(Nh,xoe),e(xoe,Oao),e(Nh,Vao),e(Nh,cB),e(cB,Xao),e(Nh,zao),e($e,Qao),g(jh,$e,null),e($e,Wao),e($e,koe),e(koe,Hao),e($e,Uao),g(o3,$e,null),e(Ho,Jao),e(Ho,Dh),g(r3,Dh,null),e(Dh,Yao),e(Dh,Soe),e(Soe,Kao),b(c,KRe,u),b(c,Yi,u),e(Yi,Gh),e(Gh,Roe),g(t3,Roe,null),e(Yi,Zao),e(Yi,Boe),e(Boe,eno),b(c,ZRe,u),b(c,Uo,u),g(a3,Uo,null),e(Uo,ono),e(Uo,n3),e(n3,rno),e(n3,fB),e(fB,tno),e(n3,ano),e(Uo,nno),e(Uo,s3),e(s3,sno),e(s3,Poe),e(Poe,lno),e(s3,ino),e(Uo,dno),e(Uo,Ie),g(l3,Ie,null),e(Ie,cno),e(Ie,$oe),e($oe,fno),e(Ie,mno),e(Ie,Ki),e(Ki,gno),e(Ki,Ioe),e(Ioe,hno),e(Ki,pno),e(Ki,qoe),e(qoe,_no),e(Ki,uno),e(Ie,bno),e(Ie,ke),e(ke,Oh),e(Oh,Noe),e(Noe,vno),e(Oh,Fno),e(Oh,mB),e(mB,Tno),e(Oh,Mno),e(ke,Eno),e(ke,Vh),e(Vh,joe),e(joe,Cno),e(Vh,wno),e(Vh,gB),e(gB,Ano),e(Vh,yno),e(ke,Lno),e(ke,Xh),e(Xh,Doe),e(Doe,xno),e(Xh,kno),e(Xh,hB),e(hB,Sno),e(Xh,Rno),e(ke,Bno),e(ke,zh),e(zh,Goe),e(Goe,Pno),e(zh,$no),e(zh,pB),e(pB,Ino),e(zh,qno),e(ke,Nno),e(ke,Qh),e(Qh,Ooe),e(Ooe,jno),e(Qh,Dno),e(Qh,_B),e(_B,Gno),e(Qh,Ono),e(ke,Vno),e(ke,Wh),e(Wh,Voe),e(Voe,Xno),e(Wh,zno),e(Wh,uB),e(uB,Qno),e(Wh,Wno),e(ke,Hno),e(ke,Hh),e(Hh,Xoe),e(Xoe,Uno),e(Hh,Jno),e(Hh,bB),e(bB,Yno),e(Hh,Kno),e(ke,Zno),e(ke,Uh),e(Uh,zoe),e(zoe,eso),e(Uh,oso),e(Uh,vB),e(vB,rso),e(Uh,tso),e(Ie,aso),g(Jh,Ie,null),e(Ie,nso),e(Ie,Qoe),e(Qoe,sso),e(Ie,lso),g(i3,Ie,null),e(Uo,iso),e(Uo,Yh),g(d3,Yh,null),e(Yh,dso),e(Yh,Woe),e(Woe,cso),b(c,eBe,u),b(c,Zi,u),e(Zi,Kh),e(Kh,Hoe),g(c3,Hoe,null),e(Zi,fso),e(Zi,Uoe),e(Uoe,mso),b(c,oBe,u),b(c,Jo,u),g(f3,Jo,null),e(Jo,gso),e(Jo,ed),e(ed,hso),e(ed,FB),e(FB,pso),e(ed,_so),e(ed,TB),e(TB,uso),e(ed,bso),e(Jo,vso),e(Jo,m3),e(m3,Fso),e(m3,Joe),e(Joe,Tso),e(m3,Mso),e(Jo,Eso),e(Jo,Xr),g(g3,Xr,null),e(Xr,Cso),e(Xr,Yoe),e(Yoe,wso),e(Xr,Aso),e(Xr,od),e(od,yso),e(od,Koe),e(Koe,Lso),e(od,xso),e(od,MB),e(MB,kso),e(od,Sso),e(Xr,Rso),e(Xr,Zoe),e(Zoe,Bso),e(Xr,Pso),g(h3,Xr,null),e(Jo,$so),e(Jo,qe),g(p3,qe,null),e(qe,Iso),e(qe,ere),e(ere,qso),e(qe,Nso),e(qe,Xa),e(Xa,jso),e(Xa,ore),e(ore,Dso),e(Xa,Gso),e(Xa,rre),e(rre,Oso),e(Xa,Vso),e(Xa,tre),e(tre,Xso),e(Xa,zso),e(qe,Qso),e(qe,T),e(T,Zh),e(Zh,are),e(are,Wso),e(Zh,Hso),e(Zh,EB),e(EB,Uso),e(Zh,Jso),e(T,Yso),e(T,ep),e(ep,nre),e(nre,Kso),e(ep,Zso),e(ep,CB),e(CB,elo),e(ep,olo),e(T,rlo),e(T,op),e(op,sre),e(sre,tlo),e(op,alo),e(op,wB),e(wB,nlo),e(op,slo),e(T,llo),e(T,rp),e(rp,lre),e(lre,ilo),e(rp,dlo),e(rp,AB),e(AB,clo),e(rp,flo),e(T,mlo),e(T,tp),e(tp,ire),e(ire,glo),e(tp,hlo),e(tp,yB),e(yB,plo),e(tp,_lo),e(T,ulo),e(T,ap),e(ap,dre),e(dre,blo),e(ap,vlo),e(ap,LB),e(LB,Flo),e(ap,Tlo),e(T,Mlo),e(T,np),e(np,cre),e(cre,Elo),e(np,Clo),e(np,xB),e(xB,wlo),e(np,Alo),e(T,ylo),e(T,sp),e(sp,fre),e(fre,Llo),e(sp,xlo),e(sp,kB),e(kB,klo),e(sp,Slo),e(T,Rlo),e(T,lp),e(lp,mre),e(mre,Blo),e(lp,Plo),e(lp,SB),e(SB,$lo),e(lp,Ilo),e(T,qlo),e(T,ip),e(ip,gre),e(gre,Nlo),e(ip,jlo),e(ip,RB),e(RB,Dlo),e(ip,Glo),e(T,Olo),e(T,dp),e(dp,hre),e(hre,Vlo),e(dp,Xlo),e(dp,BB),e(BB,zlo),e(dp,Qlo),e(T,Wlo),e(T,cp),e(cp,pre),e(pre,Hlo),e(cp,Ulo),e(cp,PB),e(PB,Jlo),e(cp,Ylo),e(T,Klo),e(T,fp),e(fp,_re),e(_re,Zlo),e(fp,eio),e(fp,$B),e($B,oio),e(fp,rio),e(T,tio),e(T,mp),e(mp,ure),e(ure,aio),e(mp,nio),e(mp,IB),e(IB,sio),e(mp,lio),e(T,iio),e(T,gp),e(gp,bre),e(bre,dio),e(gp,cio),e(gp,qB),e(qB,fio),e(gp,mio),e(T,gio),e(T,hp),e(hp,vre),e(vre,hio),e(hp,pio),e(hp,NB),e(NB,_io),e(hp,uio),e(T,bio),e(T,pp),e(pp,Fre),e(Fre,vio),e(pp,Fio),e(pp,jB),e(jB,Tio),e(pp,Mio),e(T,Eio),e(T,_p),e(_p,Tre),e(Tre,Cio),e(_p,wio),e(_p,DB),e(DB,Aio),e(_p,yio),e(T,Lio),e(T,up),e(up,Mre),e(Mre,xio),e(up,kio),e(up,GB),e(GB,Sio),e(up,Rio),e(T,Bio),e(T,bp),e(bp,Ere),e(Ere,Pio),e(bp,$io),e(bp,OB),e(OB,Iio),e(bp,qio),e(T,Nio),e(T,vp),e(vp,Cre),e(Cre,jio),e(vp,Dio),e(vp,VB),e(VB,Gio),e(vp,Oio),e(T,Vio),e(T,Fp),e(Fp,wre),e(wre,Xio),e(Fp,zio),e(Fp,XB),e(XB,Qio),e(Fp,Wio),e(T,Hio),e(T,Tp),e(Tp,Are),e(Are,Uio),e(Tp,Jio),e(Tp,zB),e(zB,Yio),e(Tp,Kio),e(T,Zio),e(T,Mp),e(Mp,yre),e(yre,edo),e(Mp,odo),e(Mp,QB),e(QB,rdo),e(Mp,tdo),e(T,ado),e(T,Ep),e(Ep,Lre),e(Lre,ndo),e(Ep,sdo),e(Ep,WB),e(WB,ldo),e(Ep,ido),e(T,ddo),e(T,Cp),e(Cp,xre),e(xre,cdo),e(Cp,fdo),e(Cp,HB),e(HB,mdo),e(Cp,gdo),e(T,hdo),e(T,wp),e(wp,kre),e(kre,pdo),e(wp,_do),e(wp,UB),e(UB,udo),e(wp,bdo),e(T,vdo),e(T,Ap),e(Ap,Sre),e(Sre,Fdo),e(Ap,Tdo),e(Ap,JB),e(JB,Mdo),e(Ap,Edo),e(T,Cdo),e(T,yp),e(yp,Rre),e(Rre,wdo),e(yp,Ado),e(yp,YB),e(YB,ydo),e(yp,Ldo),e(T,xdo),e(T,Lp),e(Lp,Bre),e(Bre,kdo),e(Lp,Sdo),e(Lp,KB),e(KB,Rdo),e(Lp,Bdo),e(T,Pdo),e(T,Os),e(Os,Pre),e(Pre,$do),e(Os,Ido),e(Os,ZB),e(ZB,qdo),e(Os,Ndo),e(Os,eP),e(eP,jdo),e(Os,Ddo),e(T,Gdo),e(T,xp),e(xp,$re),e($re,Odo),e(xp,Vdo),e(xp,oP),e(oP,Xdo),e(xp,zdo),e(T,Qdo),e(T,kp),e(kp,Ire),e(Ire,Wdo),e(kp,Hdo),e(kp,rP),e(rP,Udo),e(kp,Jdo),e(T,Ydo),e(T,Sp),e(Sp,qre),e(qre,Kdo),e(Sp,Zdo),e(Sp,tP),e(tP,eco),e(Sp,oco),e(T,rco),e(T,Rp),e(Rp,Nre),e(Nre,tco),e(Rp,aco),e(Rp,aP),e(aP,nco),e(Rp,sco),e(T,lco),e(T,Bp),e(Bp,jre),e(jre,ico),e(Bp,dco),e(Bp,nP),e(nP,cco),e(Bp,fco),e(T,mco),e(T,Pp),e(Pp,Dre),e(Dre,gco),e(Pp,hco),e(Pp,sP),e(sP,pco),e(Pp,_co),e(T,uco),e(T,$p),e($p,Gre),e(Gre,bco),e($p,vco),e($p,lP),e(lP,Fco),e($p,Tco),e(T,Mco),e(T,Ip),e(Ip,Ore),e(Ore,Eco),e(Ip,Cco),e(Ip,iP),e(iP,wco),e(Ip,Aco),e(T,yco),e(T,qp),e(qp,Vre),e(Vre,Lco),e(qp,xco),e(qp,dP),e(dP,kco),e(qp,Sco),e(T,Rco),e(T,Np),e(Np,Xre),e(Xre,Bco),e(Np,Pco),e(Np,cP),e(cP,$co),e(Np,Ico),e(T,qco),e(T,jp),e(jp,zre),e(zre,Nco),e(jp,jco),e(jp,fP),e(fP,Dco),e(jp,Gco),e(T,Oco),e(T,Dp),e(Dp,Qre),e(Qre,Vco),e(Dp,Xco),e(Dp,mP),e(mP,zco),e(Dp,Qco),e(T,Wco),e(T,Gp),e(Gp,Wre),e(Wre,Hco),e(Gp,Uco),e(Gp,gP),e(gP,Jco),e(Gp,Yco),e(T,Kco),e(T,Op),e(Op,Hre),e(Hre,Zco),e(Op,efo),e(Op,hP),e(hP,ofo),e(Op,rfo),e(T,tfo),e(T,Vp),e(Vp,Ure),e(Ure,afo),e(Vp,nfo),e(Vp,pP),e(pP,sfo),e(Vp,lfo),e(T,ifo),e(T,Xp),e(Xp,Jre),e(Jre,dfo),e(Xp,cfo),e(Xp,_P),e(_P,ffo),e(Xp,mfo),e(T,gfo),e(T,zp),e(zp,Yre),e(Yre,hfo),e(zp,pfo),e(zp,uP),e(uP,_fo),e(zp,ufo),e(T,bfo),e(T,Qp),e(Qp,Kre),e(Kre,vfo),e(Qp,Ffo),e(Qp,bP),e(bP,Tfo),e(Qp,Mfo),e(T,Efo),e(T,Wp),e(Wp,Zre),e(Zre,Cfo),e(Wp,wfo),e(Wp,vP),e(vP,Afo),e(Wp,yfo),e(T,Lfo),e(T,Hp),e(Hp,ete),e(ete,xfo),e(Hp,kfo),e(Hp,FP),e(FP,Sfo),e(Hp,Rfo),e(T,Bfo),e(T,Up),e(Up,ote),e(ote,Pfo),e(Up,$fo),e(Up,TP),e(TP,Ifo),e(Up,qfo),e(T,Nfo),e(T,Jp),e(Jp,rte),e(rte,jfo),e(Jp,Dfo),e(Jp,MP),e(MP,Gfo),e(Jp,Ofo),e(T,Vfo),e(T,Yp),e(Yp,tte),e(tte,Xfo),e(Yp,zfo),e(Yp,EP),e(EP,Qfo),e(Yp,Wfo),e(T,Hfo),e(T,Kp),e(Kp,ate),e(ate,Ufo),e(Kp,Jfo),e(Kp,CP),e(CP,Yfo),e(Kp,Kfo),e(T,Zfo),e(T,Zp),e(Zp,nte),e(nte,emo),e(Zp,omo),e(Zp,wP),e(wP,rmo),e(Zp,tmo),e(T,amo),e(T,e_),e(e_,ste),e(ste,nmo),e(e_,smo),e(e_,AP),e(AP,lmo),e(e_,imo),e(T,dmo),e(T,o_),e(o_,lte),e(lte,cmo),e(o_,fmo),e(o_,yP),e(yP,mmo),e(o_,gmo),e(T,hmo),e(T,r_),e(r_,ite),e(ite,pmo),e(r_,_mo),e(r_,LP),e(LP,umo),e(r_,bmo),e(T,vmo),e(T,t_),e(t_,dte),e(dte,Fmo),e(t_,Tmo),e(t_,xP),e(xP,Mmo),e(t_,Emo),e(T,Cmo),e(T,a_),e(a_,cte),e(cte,wmo),e(a_,Amo),e(a_,kP),e(kP,ymo),e(a_,Lmo),e(T,xmo),e(T,n_),e(n_,fte),e(fte,kmo),e(n_,Smo),e(n_,SP),e(SP,Rmo),e(n_,Bmo),e(T,Pmo),e(T,s_),e(s_,mte),e(mte,$mo),e(s_,Imo),e(s_,RP),e(RP,qmo),e(s_,Nmo),e(T,jmo),e(T,l_),e(l_,gte),e(gte,Dmo),e(l_,Gmo),e(l_,BP),e(BP,Omo),e(l_,Vmo),e(T,Xmo),e(T,i_),e(i_,hte),e(hte,zmo),e(i_,Qmo),e(i_,PP),e(PP,Wmo),e(i_,Hmo),e(T,Umo),e(T,d_),e(d_,pte),e(pte,Jmo),e(d_,Ymo),e(d_,$P),e($P,Kmo),e(d_,Zmo),e(T,ego),e(T,c_),e(c_,_te),e(_te,ogo),e(c_,rgo),e(c_,IP),e(IP,tgo),e(c_,ago),e(T,ngo),e(T,f_),e(f_,ute),e(ute,sgo),e(f_,lgo),e(f_,qP),e(qP,igo),e(f_,dgo),e(T,cgo),e(T,m_),e(m_,bte),e(bte,fgo),e(m_,mgo),e(m_,NP),e(NP,ggo),e(m_,hgo),e(T,pgo),e(T,g_),e(g_,vte),e(vte,_go),e(g_,ugo),e(g_,jP),e(jP,bgo),e(g_,vgo),e(T,Fgo),e(T,h_),e(h_,Fte),e(Fte,Tgo),e(h_,Mgo),e(h_,DP),e(DP,Ego),e(h_,Cgo),e(T,wgo),e(T,p_),e(p_,Tte),e(Tte,Ago),e(p_,ygo),e(p_,GP),e(GP,Lgo),e(p_,xgo),e(T,kgo),e(T,__),e(__,Mte),e(Mte,Sgo),e(__,Rgo),e(__,OP),e(OP,Bgo),e(__,Pgo),e(T,$go),e(T,u_),e(u_,Ete),e(Ete,Igo),e(u_,qgo),e(u_,VP),e(VP,Ngo),e(u_,jgo),e(T,Dgo),e(T,b_),e(b_,Cte),e(Cte,Ggo),e(b_,Ogo),e(b_,XP),e(XP,Vgo),e(b_,Xgo),e(T,zgo),e(T,v_),e(v_,wte),e(wte,Qgo),e(v_,Wgo),e(v_,zP),e(zP,Hgo),e(v_,Ugo),e(T,Jgo),e(T,F_),e(F_,Ate),e(Ate,Ygo),e(F_,Kgo),e(F_,QP),e(QP,Zgo),e(F_,eho),e(T,oho),e(T,T_),e(T_,yte),e(yte,rho),e(T_,tho),e(T_,WP),e(WP,aho),e(T_,nho),e(T,sho),e(T,M_),e(M_,Lte),e(Lte,lho),e(M_,iho),e(M_,HP),e(HP,dho),e(M_,cho),e(T,fho),e(T,E_),e(E_,xte),e(xte,mho),e(E_,gho),e(E_,UP),e(UP,hho),e(E_,pho),e(T,_ho),e(T,C_),e(C_,kte),e(kte,uho),e(C_,bho),e(C_,JP),e(JP,vho),e(C_,Fho),e(T,Tho),e(T,w_),e(w_,Ste),e(Ste,Mho),e(w_,Eho),e(w_,YP),e(YP,Cho),e(w_,who),e(T,Aho),e(T,A_),e(A_,Rte),e(Rte,yho),e(A_,Lho),e(A_,KP),e(KP,xho),e(A_,kho),e(T,Sho),e(T,y_),e(y_,Bte),e(Bte,Rho),e(y_,Bho),e(y_,ZP),e(ZP,Pho),e(y_,$ho),e(T,Iho),e(T,L_),e(L_,Pte),e(Pte,qho),e(L_,Nho),e(L_,e$),e(e$,jho),e(L_,Dho),e(T,Gho),e(T,x_),e(x_,$te),e($te,Oho),e(x_,Vho),e(x_,o$),e(o$,Xho),e(x_,zho),e(T,Qho),e(T,k_),e(k_,Ite),e(Ite,Who),e(k_,Hho),e(k_,r$),e(r$,Uho),e(k_,Jho),e(T,Yho),e(T,S_),e(S_,qte),e(qte,Kho),e(S_,Zho),e(S_,t$),e(t$,epo),e(S_,opo),e(T,rpo),e(T,R_),e(R_,Nte),e(Nte,tpo),e(R_,apo),e(R_,a$),e(a$,npo),e(R_,spo),e(T,lpo),e(T,B_),e(B_,jte),e(jte,ipo),e(B_,dpo),e(B_,n$),e(n$,cpo),e(B_,fpo),e(T,mpo),e(T,P_),e(P_,Dte),e(Dte,gpo),e(P_,hpo),e(P_,s$),e(s$,ppo),e(P_,_po),e(T,upo),e(T,$_),e($_,Gte),e(Gte,bpo),e($_,vpo),e($_,l$),e(l$,Fpo),e($_,Tpo),e(T,Mpo),e(T,I_),e(I_,Ote),e(Ote,Epo),e(I_,Cpo),e(I_,i$),e(i$,wpo),e(I_,Apo),e(T,ypo),e(T,q_),e(q_,Vte),e(Vte,Lpo),e(q_,xpo),e(q_,d$),e(d$,kpo),e(q_,Spo),e(qe,Rpo),e(qe,N_),e(N_,Bpo),e(N_,Xte),e(Xte,Ppo),e(N_,$po),e(N_,zte),e(zte,Ipo),e(qe,qpo),e(qe,Qte),e(Qte,Npo),e(qe,jpo),g(_3,qe,null),b(c,rBe,u),b(c,rd,u),e(rd,j_),e(j_,Wte),g(u3,Wte,null),e(rd,Dpo),e(rd,Hte),e(Hte,Gpo),b(c,tBe,u),b(c,Yo,u),g(b3,Yo,null),e(Yo,Opo),e(Yo,td),e(td,Vpo),e(td,c$),e(c$,Xpo),e(td,zpo),e(td,f$),e(f$,Qpo),e(td,Wpo),e(Yo,Hpo),e(Yo,v3),e(v3,Upo),e(v3,Ute),e(Ute,Jpo),e(v3,Ypo),e(Yo,Kpo),e(Yo,zr),g(F3,zr,null),e(zr,Zpo),e(zr,Jte),e(Jte,e_o),e(zr,o_o),e(zr,ad),e(ad,r_o),e(ad,Yte),e(Yte,t_o),e(ad,a_o),e(ad,m$),e(m$,n_o),e(ad,s_o),e(zr,l_o),e(zr,Kte),e(Kte,i_o),e(zr,d_o),g(T3,zr,null),e(Yo,c_o),e(Yo,Ne),g(M3,Ne,null),e(Ne,f_o),e(Ne,Zte),e(Zte,m_o),e(Ne,g_o),e(Ne,za),e(za,h_o),e(za,eae),e(eae,p_o),e(za,__o),e(za,oae),e(oae,u_o),e(za,b_o),e(za,rae),e(rae,v_o),e(za,F_o),e(Ne,T_o),e(Ne,S),e(S,D_),e(D_,tae),e(tae,M_o),e(D_,E_o),e(D_,g$),e(g$,C_o),e(D_,w_o),e(S,A_o),e(S,G_),e(G_,aae),e(aae,y_o),e(G_,L_o),e(G_,h$),e(h$,x_o),e(G_,k_o),e(S,S_o),e(S,O_),e(O_,nae),e(nae,R_o),e(O_,B_o),e(O_,p$),e(p$,P_o),e(O_,$_o),e(S,I_o),e(S,V_),e(V_,sae),e(sae,q_o),e(V_,N_o),e(V_,_$),e(_$,j_o),e(V_,D_o),e(S,G_o),e(S,X_),e(X_,lae),e(lae,O_o),e(X_,V_o),e(X_,u$),e(u$,X_o),e(X_,z_o),e(S,Q_o),e(S,z_),e(z_,iae),e(iae,W_o),e(z_,H_o),e(z_,b$),e(b$,U_o),e(z_,J_o),e(S,Y_o),e(S,Q_),e(Q_,dae),e(dae,K_o),e(Q_,Z_o),e(Q_,v$),e(v$,euo),e(Q_,ouo),e(S,ruo),e(S,W_),e(W_,cae),e(cae,tuo),e(W_,auo),e(W_,F$),e(F$,nuo),e(W_,suo),e(S,luo),e(S,H_),e(H_,fae),e(fae,iuo),e(H_,duo),e(H_,T$),e(T$,cuo),e(H_,fuo),e(S,muo),e(S,U_),e(U_,mae),e(mae,guo),e(U_,huo),e(U_,M$),e(M$,puo),e(U_,_uo),e(S,uuo),e(S,J_),e(J_,gae),e(gae,buo),e(J_,vuo),e(J_,E$),e(E$,Fuo),e(J_,Tuo),e(S,Muo),e(S,Y_),e(Y_,hae),e(hae,Euo),e(Y_,Cuo),e(Y_,C$),e(C$,wuo),e(Y_,Auo),e(S,yuo),e(S,K_),e(K_,pae),e(pae,Luo),e(K_,xuo),e(K_,w$),e(w$,kuo),e(K_,Suo),e(S,Ruo),e(S,Z_),e(Z_,_ae),e(_ae,Buo),e(Z_,Puo),e(Z_,A$),e(A$,$uo),e(Z_,Iuo),e(S,quo),e(S,eu),e(eu,uae),e(uae,Nuo),e(eu,juo),e(eu,y$),e(y$,Duo),e(eu,Guo),e(S,Ouo),e(S,ou),e(ou,bae),e(bae,Vuo),e(ou,Xuo),e(ou,L$),e(L$,zuo),e(ou,Quo),e(S,Wuo),e(S,ru),e(ru,vae),e(vae,Huo),e(ru,Uuo),e(ru,x$),e(x$,Juo),e(ru,Yuo),e(S,Kuo),e(S,tu),e(tu,Fae),e(Fae,Zuo),e(tu,e1o),e(tu,k$),e(k$,o1o),e(tu,r1o),e(S,t1o),e(S,au),e(au,Tae),e(Tae,a1o),e(au,n1o),e(au,S$),e(S$,s1o),e(au,l1o),e(S,i1o),e(S,nu),e(nu,Mae),e(Mae,d1o),e(nu,c1o),e(nu,R$),e(R$,f1o),e(nu,m1o),e(S,g1o),e(S,su),e(su,Eae),e(Eae,h1o),e(su,p1o),e(su,B$),e(B$,_1o),e(su,u1o),e(S,b1o),e(S,lu),e(lu,Cae),e(Cae,v1o),e(lu,F1o),e(lu,P$),e(P$,T1o),e(lu,M1o),e(S,E1o),e(S,iu),e(iu,wae),e(wae,C1o),e(iu,w1o),e(iu,$$),e($$,A1o),e(iu,y1o),e(S,L1o),e(S,du),e(du,Aae),e(Aae,x1o),e(du,k1o),e(du,I$),e(I$,S1o),e(du,R1o),e(S,B1o),e(S,cu),e(cu,yae),e(yae,P1o),e(cu,$1o),e(cu,q$),e(q$,I1o),e(cu,q1o),e(S,N1o),e(S,fu),e(fu,Lae),e(Lae,j1o),e(fu,D1o),e(fu,N$),e(N$,G1o),e(fu,O1o),e(S,V1o),e(S,mu),e(mu,xae),e(xae,X1o),e(mu,z1o),e(mu,j$),e(j$,Q1o),e(mu,W1o),e(S,H1o),e(S,gu),e(gu,kae),e(kae,U1o),e(gu,J1o),e(gu,D$),e(D$,Y1o),e(gu,K1o),e(S,Z1o),e(S,hu),e(hu,Sae),e(Sae,ebo),e(hu,obo),e(hu,G$),e(G$,rbo),e(hu,tbo),e(S,abo),e(S,pu),e(pu,Rae),e(Rae,nbo),e(pu,sbo),e(pu,O$),e(O$,lbo),e(pu,ibo),e(S,dbo),e(S,_u),e(_u,Bae),e(Bae,cbo),e(_u,fbo),e(_u,V$),e(V$,mbo),e(_u,gbo),e(S,hbo),e(S,uu),e(uu,Pae),e(Pae,pbo),e(uu,_bo),e(uu,X$),e(X$,ubo),e(uu,bbo),e(S,vbo),e(S,bu),e(bu,$ae),e($ae,Fbo),e(bu,Tbo),e(bu,z$),e(z$,Mbo),e(bu,Ebo),e(S,Cbo),e(S,vu),e(vu,Iae),e(Iae,wbo),e(vu,Abo),e(vu,Q$),e(Q$,ybo),e(vu,Lbo),e(S,xbo),e(S,Fu),e(Fu,qae),e(qae,kbo),e(Fu,Sbo),e(Fu,W$),e(W$,Rbo),e(Fu,Bbo),e(S,Pbo),e(S,Tu),e(Tu,Nae),e(Nae,$bo),e(Tu,Ibo),e(Tu,H$),e(H$,qbo),e(Tu,Nbo),e(S,jbo),e(S,Mu),e(Mu,jae),e(jae,Dbo),e(Mu,Gbo),e(Mu,U$),e(U$,Obo),e(Mu,Vbo),e(S,Xbo),e(S,Eu),e(Eu,Dae),e(Dae,zbo),e(Eu,Qbo),e(Eu,J$),e(J$,Wbo),e(Eu,Hbo),e(S,Ubo),e(S,Cu),e(Cu,Gae),e(Gae,Jbo),e(Cu,Ybo),e(Cu,Y$),e(Y$,Kbo),e(Cu,Zbo),e(Ne,e2o),e(Ne,wu),e(wu,o2o),e(wu,Oae),e(Oae,r2o),e(wu,t2o),e(wu,Vae),e(Vae,a2o),e(Ne,n2o),e(Ne,Xae),e(Xae,s2o),e(Ne,l2o),g(E3,Ne,null),b(c,aBe,u),b(c,nd,u),e(nd,Au),e(Au,zae),g(C3,zae,null),e(nd,i2o),e(nd,Qae),e(Qae,d2o),b(c,nBe,u),b(c,Ko,u),g(w3,Ko,null),e(Ko,c2o),e(Ko,sd),e(sd,f2o),e(sd,K$),e(K$,m2o),e(sd,g2o),e(sd,Z$),e(Z$,h2o),e(sd,p2o),e(Ko,_2o),e(Ko,A3),e(A3,u2o),e(A3,Wae),e(Wae,b2o),e(A3,v2o),e(Ko,F2o),e(Ko,Qr),g(y3,Qr,null),e(Qr,T2o),e(Qr,Hae),e(Hae,M2o),e(Qr,E2o),e(Qr,ld),e(ld,C2o),e(ld,Uae),e(Uae,w2o),e(ld,A2o),e(ld,eI),e(eI,y2o),e(ld,L2o),e(Qr,x2o),e(Qr,Jae),e(Jae,k2o),e(Qr,S2o),g(L3,Qr,null),e(Ko,R2o),e(Ko,je),g(x3,je,null),e(je,B2o),e(je,Yae),e(Yae,P2o),e(je,$2o),e(je,Qa),e(Qa,I2o),e(Qa,Kae),e(Kae,q2o),e(Qa,N2o),e(Qa,Zae),e(Zae,j2o),e(Qa,D2o),e(Qa,ene),e(ene,G2o),e(Qa,O2o),e(je,V2o),e(je,$),e($,yu),e(yu,one),e(one,X2o),e(yu,z2o),e(yu,oI),e(oI,Q2o),e(yu,W2o),e($,H2o),e($,Lu),e(Lu,rne),e(rne,U2o),e(Lu,J2o),e(Lu,rI),e(rI,Y2o),e(Lu,K2o),e($,Z2o),e($,xu),e(xu,tne),e(tne,e6o),e(xu,o6o),e(xu,tI),e(tI,r6o),e(xu,t6o),e($,a6o),e($,ku),e(ku,ane),e(ane,n6o),e(ku,s6o),e(ku,aI),e(aI,l6o),e(ku,i6o),e($,d6o),e($,Su),e(Su,nne),e(nne,c6o),e(Su,f6o),e(Su,nI),e(nI,m6o),e(Su,g6o),e($,h6o),e($,Ru),e(Ru,sne),e(sne,p6o),e(Ru,_6o),e(Ru,sI),e(sI,u6o),e(Ru,b6o),e($,v6o),e($,Bu),e(Bu,lne),e(lne,F6o),e(Bu,T6o),e(Bu,lI),e(lI,M6o),e(Bu,E6o),e($,C6o),e($,Pu),e(Pu,ine),e(ine,w6o),e(Pu,A6o),e(Pu,iI),e(iI,y6o),e(Pu,L6o),e($,x6o),e($,$u),e($u,dne),e(dne,k6o),e($u,S6o),e($u,dI),e(dI,R6o),e($u,B6o),e($,P6o),e($,Iu),e(Iu,cne),e(cne,$6o),e(Iu,I6o),e(Iu,cI),e(cI,q6o),e(Iu,N6o),e($,j6o),e($,qu),e(qu,fne),e(fne,D6o),e(qu,G6o),e(qu,fI),e(fI,O6o),e(qu,V6o),e($,X6o),e($,Nu),e(Nu,mne),e(mne,z6o),e(Nu,Q6o),e(Nu,mI),e(mI,W6o),e(Nu,H6o),e($,U6o),e($,ju),e(ju,gne),e(gne,J6o),e(ju,Y6o),e(ju,gI),e(gI,K6o),e(ju,Z6o),e($,evo),e($,Du),e(Du,hne),e(hne,ovo),e(Du,rvo),e(Du,hI),e(hI,tvo),e(Du,avo),e($,nvo),e($,Gu),e(Gu,pne),e(pne,svo),e(Gu,lvo),e(Gu,pI),e(pI,ivo),e(Gu,dvo),e($,cvo),e($,Ou),e(Ou,_ne),e(_ne,fvo),e(Ou,mvo),e(Ou,_I),e(_I,gvo),e(Ou,hvo),e($,pvo),e($,Vu),e(Vu,une),e(une,_vo),e(Vu,uvo),e(Vu,uI),e(uI,bvo),e(Vu,vvo),e($,Fvo),e($,Xu),e(Xu,bne),e(bne,Tvo),e(Xu,Mvo),e(Xu,bI),e(bI,Evo),e(Xu,Cvo),e($,wvo),e($,zu),e(zu,vne),e(vne,Avo),e(zu,yvo),e(zu,vI),e(vI,Lvo),e(zu,xvo),e($,kvo),e($,Qu),e(Qu,Fne),e(Fne,Svo),e(Qu,Rvo),e(Qu,FI),e(FI,Bvo),e(Qu,Pvo),e($,$vo),e($,Wu),e(Wu,Tne),e(Tne,Ivo),e(Wu,qvo),e(Wu,TI),e(TI,Nvo),e(Wu,jvo),e($,Dvo),e($,Hu),e(Hu,Mne),e(Mne,Gvo),e(Hu,Ovo),e(Hu,MI),e(MI,Vvo),e(Hu,Xvo),e($,zvo),e($,Uu),e(Uu,Ene),e(Ene,Qvo),e(Uu,Wvo),e(Uu,EI),e(EI,Hvo),e(Uu,Uvo),e($,Jvo),e($,Ju),e(Ju,Cne),e(Cne,Yvo),e(Ju,Kvo),e(Ju,CI),e(CI,Zvo),e(Ju,eFo),e($,oFo),e($,Yu),e(Yu,wne),e(wne,rFo),e(Yu,tFo),e(Yu,wI),e(wI,aFo),e(Yu,nFo),e($,sFo),e($,Ku),e(Ku,Ane),e(Ane,lFo),e(Ku,iFo),e(Ku,AI),e(AI,dFo),e(Ku,cFo),e($,fFo),e($,Zu),e(Zu,yne),e(yne,mFo),e(Zu,gFo),e(Zu,yI),e(yI,hFo),e(Zu,pFo),e($,_Fo),e($,e1),e(e1,Lne),e(Lne,uFo),e(e1,bFo),e(e1,LI),e(LI,vFo),e(e1,FFo),e($,TFo),e($,o1),e(o1,xne),e(xne,MFo),e(o1,EFo),e(o1,xI),e(xI,CFo),e(o1,wFo),e($,AFo),e($,r1),e(r1,kne),e(kne,yFo),e(r1,LFo),e(r1,kI),e(kI,xFo),e(r1,kFo),e($,SFo),e($,t1),e(t1,Sne),e(Sne,RFo),e(t1,BFo),e(t1,SI),e(SI,PFo),e(t1,$Fo),e($,IFo),e($,a1),e(a1,Rne),e(Rne,qFo),e(a1,NFo),e(a1,RI),e(RI,jFo),e(a1,DFo),e($,GFo),e($,n1),e(n1,Bne),e(Bne,OFo),e(n1,VFo),e(n1,BI),e(BI,XFo),e(n1,zFo),e($,QFo),e($,s1),e(s1,Pne),e(Pne,WFo),e(s1,HFo),e(s1,PI),e(PI,UFo),e(s1,JFo),e($,YFo),e($,l1),e(l1,$ne),e($ne,KFo),e(l1,ZFo),e(l1,$I),e($I,eTo),e(l1,oTo),e(je,rTo),e(je,i1),e(i1,tTo),e(i1,Ine),e(Ine,aTo),e(i1,nTo),e(i1,qne),e(qne,sTo),e(je,lTo),e(je,Nne),e(Nne,iTo),e(je,dTo),g(k3,je,null),b(c,sBe,u),b(c,id,u),e(id,d1),e(d1,jne),g(S3,jne,null),e(id,cTo),e(id,Dne),e(Dne,fTo),b(c,lBe,u),b(c,Zo,u),g(R3,Zo,null),e(Zo,mTo),e(Zo,dd),e(dd,gTo),e(dd,II),e(II,hTo),e(dd,pTo),e(dd,qI),e(qI,_To),e(dd,uTo),e(Zo,bTo),e(Zo,B3),e(B3,vTo),e(B3,Gne),e(Gne,FTo),e(B3,TTo),e(Zo,MTo),e(Zo,Wr),g(P3,Wr,null),e(Wr,ETo),e(Wr,One),e(One,CTo),e(Wr,wTo),e(Wr,cd),e(cd,ATo),e(cd,Vne),e(Vne,yTo),e(cd,LTo),e(cd,NI),e(NI,xTo),e(cd,kTo),e(Wr,STo),e(Wr,Xne),e(Xne,RTo),e(Wr,BTo),g($3,Wr,null),e(Zo,PTo),e(Zo,De),g(I3,De,null),e(De,$To),e(De,zne),e(zne,ITo),e(De,qTo),e(De,Wa),e(Wa,NTo),e(Wa,Qne),e(Qne,jTo),e(Wa,DTo),e(Wa,Wne),e(Wne,GTo),e(Wa,OTo),e(Wa,Hne),e(Hne,VTo),e(Wa,XTo),e(De,zTo),e(De,I),e(I,c1),e(c1,Une),e(Une,QTo),e(c1,WTo),e(c1,jI),e(jI,HTo),e(c1,UTo),e(I,JTo),e(I,f1),e(f1,Jne),e(Jne,YTo),e(f1,KTo),e(f1,DI),e(DI,ZTo),e(f1,e8o),e(I,o8o),e(I,m1),e(m1,Yne),e(Yne,r8o),e(m1,t8o),e(m1,GI),e(GI,a8o),e(m1,n8o),e(I,s8o),e(I,g1),e(g1,Kne),e(Kne,l8o),e(g1,i8o),e(g1,OI),e(OI,d8o),e(g1,c8o),e(I,f8o),e(I,h1),e(h1,Zne),e(Zne,m8o),e(h1,g8o),e(h1,VI),e(VI,h8o),e(h1,p8o),e(I,_8o),e(I,p1),e(p1,ese),e(ese,u8o),e(p1,b8o),e(p1,XI),e(XI,v8o),e(p1,F8o),e(I,T8o),e(I,_1),e(_1,ose),e(ose,M8o),e(_1,E8o),e(_1,zI),e(zI,C8o),e(_1,w8o),e(I,A8o),e(I,u1),e(u1,rse),e(rse,y8o),e(u1,L8o),e(u1,QI),e(QI,x8o),e(u1,k8o),e(I,S8o),e(I,b1),e(b1,tse),e(tse,R8o),e(b1,B8o),e(b1,WI),e(WI,P8o),e(b1,$8o),e(I,I8o),e(I,v1),e(v1,ase),e(ase,q8o),e(v1,N8o),e(v1,HI),e(HI,j8o),e(v1,D8o),e(I,G8o),e(I,F1),e(F1,nse),e(nse,O8o),e(F1,V8o),e(F1,UI),e(UI,X8o),e(F1,z8o),e(I,Q8o),e(I,T1),e(T1,sse),e(sse,W8o),e(T1,H8o),e(T1,JI),e(JI,U8o),e(T1,J8o),e(I,Y8o),e(I,M1),e(M1,lse),e(lse,K8o),e(M1,Z8o),e(M1,YI),e(YI,e7o),e(M1,o7o),e(I,r7o),e(I,E1),e(E1,ise),e(ise,t7o),e(E1,a7o),e(E1,KI),e(KI,n7o),e(E1,s7o),e(I,l7o),e(I,C1),e(C1,dse),e(dse,i7o),e(C1,d7o),e(C1,ZI),e(ZI,c7o),e(C1,f7o),e(I,m7o),e(I,w1),e(w1,cse),e(cse,g7o),e(w1,h7o),e(w1,eq),e(eq,p7o),e(w1,_7o),e(I,u7o),e(I,A1),e(A1,fse),e(fse,b7o),e(A1,v7o),e(A1,oq),e(oq,F7o),e(A1,T7o),e(I,M7o),e(I,y1),e(y1,mse),e(mse,E7o),e(y1,C7o),e(y1,rq),e(rq,w7o),e(y1,A7o),e(I,y7o),e(I,L1),e(L1,gse),e(gse,L7o),e(L1,x7o),e(L1,tq),e(tq,k7o),e(L1,S7o),e(I,R7o),e(I,x1),e(x1,hse),e(hse,B7o),e(x1,P7o),e(x1,aq),e(aq,$7o),e(x1,I7o),e(I,q7o),e(I,k1),e(k1,pse),e(pse,N7o),e(k1,j7o),e(k1,nq),e(nq,D7o),e(k1,G7o),e(I,O7o),e(I,S1),e(S1,_se),e(_se,V7o),e(S1,X7o),e(S1,sq),e(sq,z7o),e(S1,Q7o),e(I,W7o),e(I,R1),e(R1,use),e(use,H7o),e(R1,U7o),e(R1,lq),e(lq,J7o),e(R1,Y7o),e(I,K7o),e(I,B1),e(B1,bse),e(bse,Z7o),e(B1,eMo),e(B1,iq),e(iq,oMo),e(B1,rMo),e(I,tMo),e(I,P1),e(P1,vse),e(vse,aMo),e(P1,nMo),e(P1,dq),e(dq,sMo),e(P1,lMo),e(I,iMo),e(I,$1),e($1,Fse),e(Fse,dMo),e($1,cMo),e($1,cq),e(cq,fMo),e($1,mMo),e(I,gMo),e(I,I1),e(I1,Tse),e(Tse,hMo),e(I1,pMo),e(I1,fq),e(fq,_Mo),e(I1,uMo),e(I,bMo),e(I,q1),e(q1,Mse),e(Mse,vMo),e(q1,FMo),e(q1,mq),e(mq,TMo),e(q1,MMo),e(I,EMo),e(I,N1),e(N1,Ese),e(Ese,CMo),e(N1,wMo),e(N1,gq),e(gq,AMo),e(N1,yMo),e(I,LMo),e(I,j1),e(j1,Cse),e(Cse,xMo),e(j1,kMo),e(j1,hq),e(hq,SMo),e(j1,RMo),e(I,BMo),e(I,D1),e(D1,wse),e(wse,PMo),e(D1,$Mo),e(D1,Ase),e(Ase,IMo),e(D1,qMo),e(I,NMo),e(I,G1),e(G1,yse),e(yse,jMo),e(G1,DMo),e(G1,pq),e(pq,GMo),e(G1,OMo),e(I,VMo),e(I,O1),e(O1,Lse),e(Lse,XMo),e(O1,zMo),e(O1,_q),e(_q,QMo),e(O1,WMo),e(I,HMo),e(I,V1),e(V1,xse),e(xse,UMo),e(V1,JMo),e(V1,uq),e(uq,YMo),e(V1,KMo),e(I,ZMo),e(I,X1),e(X1,kse),e(kse,e4o),e(X1,o4o),e(X1,bq),e(bq,r4o),e(X1,t4o),e(De,a4o),e(De,z1),e(z1,n4o),e(z1,Sse),e(Sse,s4o),e(z1,l4o),e(z1,Rse),e(Rse,i4o),e(De,d4o),e(De,Bse),e(Bse,c4o),e(De,f4o),g(q3,De,null),b(c,iBe,u),b(c,fd,u),e(fd,Q1),e(Q1,Pse),g(N3,Pse,null),e(fd,m4o),e(fd,$se),e($se,g4o),b(c,dBe,u),b(c,er,u),g(j3,er,null),e(er,h4o),e(er,md),e(md,p4o),e(md,vq),e(vq,_4o),e(md,u4o),e(md,Fq),e(Fq,b4o),e(md,v4o),e(er,F4o),e(er,D3),e(D3,T4o),e(D3,Ise),e(Ise,M4o),e(D3,E4o),e(er,C4o),e(er,Hr),g(G3,Hr,null),e(Hr,w4o),e(Hr,qse),e(qse,A4o),e(Hr,y4o),e(Hr,gd),e(gd,L4o),e(gd,Nse),e(Nse,x4o),e(gd,k4o),e(gd,Tq),e(Tq,S4o),e(gd,R4o),e(Hr,B4o),e(Hr,jse),e(jse,P4o),e(Hr,$4o),g(O3,Hr,null),e(er,I4o),e(er,Ge),g(V3,Ge,null),e(Ge,q4o),e(Ge,Dse),e(Dse,N4o),e(Ge,j4o),e(Ge,Ha),e(Ha,D4o),e(Ha,Gse),e(Gse,G4o),e(Ha,O4o),e(Ha,Ose),e(Ose,V4o),e(Ha,X4o),e(Ha,Vse),e(Vse,z4o),e(Ha,Q4o),e(Ge,W4o),e(Ge,ne),e(ne,W1),e(W1,Xse),e(Xse,H4o),e(W1,U4o),e(W1,Mq),e(Mq,J4o),e(W1,Y4o),e(ne,K4o),e(ne,H1),e(H1,zse),e(zse,Z4o),e(H1,eEo),e(H1,Eq),e(Eq,oEo),e(H1,rEo),e(ne,tEo),e(ne,U1),e(U1,Qse),e(Qse,aEo),e(U1,nEo),e(U1,Cq),e(Cq,sEo),e(U1,lEo),e(ne,iEo),e(ne,J1),e(J1,Wse),e(Wse,dEo),e(J1,cEo),e(J1,wq),e(wq,fEo),e(J1,mEo),e(ne,gEo),e(ne,Y1),e(Y1,Hse),e(Hse,hEo),e(Y1,pEo),e(Y1,Aq),e(Aq,_Eo),e(Y1,uEo),e(ne,bEo),e(ne,K1),e(K1,Use),e(Use,vEo),e(K1,FEo),e(K1,yq),e(yq,TEo),e(K1,MEo),e(ne,EEo),e(ne,Z1),e(Z1,Jse),e(Jse,CEo),e(Z1,wEo),e(Z1,Lq),e(Lq,AEo),e(Z1,yEo),e(ne,LEo),e(ne,eb),e(eb,Yse),e(Yse,xEo),e(eb,kEo),e(eb,xq),e(xq,SEo),e(eb,REo),e(ne,BEo),e(ne,ob),e(ob,Kse),e(Kse,PEo),e(ob,$Eo),e(ob,kq),e(kq,IEo),e(ob,qEo),e(ne,NEo),e(ne,rb),e(rb,Zse),e(Zse,jEo),e(rb,DEo),e(rb,Sq),e(Sq,GEo),e(rb,OEo),e(ne,VEo),e(ne,tb),e(tb,ele),e(ele,XEo),e(tb,zEo),e(tb,Rq),e(Rq,QEo),e(tb,WEo),e(ne,HEo),e(ne,ab),e(ab,ole),e(ole,UEo),e(ab,JEo),e(ab,Bq),e(Bq,YEo),e(ab,KEo),e(ne,ZEo),e(ne,nb),e(nb,rle),e(rle,e5o),e(nb,o5o),e(nb,Pq),e(Pq,r5o),e(nb,t5o),e(ne,a5o),e(ne,sb),e(sb,tle),e(tle,n5o),e(sb,s5o),e(sb,$q),e($q,l5o),e(sb,i5o),e(ne,d5o),e(ne,lb),e(lb,ale),e(ale,c5o),e(lb,f5o),e(lb,Iq),e(Iq,m5o),e(lb,g5o),e(ne,h5o),e(ne,ib),e(ib,nle),e(nle,p5o),e(ib,_5o),e(ib,qq),e(qq,u5o),e(ib,b5o),e(ne,v5o),e(ne,db),e(db,sle),e(sle,F5o),e(db,T5o),e(db,Nq),e(Nq,M5o),e(db,E5o),e(Ge,C5o),e(Ge,cb),e(cb,w5o),e(cb,lle),e(lle,A5o),e(cb,y5o),e(cb,ile),e(ile,L5o),e(Ge,x5o),e(Ge,dle),e(dle,k5o),e(Ge,S5o),g(X3,Ge,null),b(c,cBe,u),b(c,hd,u),e(hd,fb),e(fb,cle),g(z3,cle,null),e(hd,R5o),e(hd,fle),e(fle,B5o),b(c,fBe,u),b(c,or,u),g(Q3,or,null),e(or,P5o),e(or,pd),e(pd,$5o),e(pd,jq),e(jq,I5o),e(pd,q5o),e(pd,Dq),e(Dq,N5o),e(pd,j5o),e(or,D5o),e(or,W3),e(W3,G5o),e(W3,mle),e(mle,O5o),e(W3,V5o),e(or,X5o),e(or,Ur),g(H3,Ur,null),e(Ur,z5o),e(Ur,gle),e(gle,Q5o),e(Ur,W5o),e(Ur,_d),e(_d,H5o),e(_d,hle),e(hle,U5o),e(_d,J5o),e(_d,Gq),e(Gq,Y5o),e(_d,K5o),e(Ur,Z5o),e(Ur,ple),e(ple,e3o),e(Ur,o3o),g(U3,Ur,null),e(or,r3o),e(or,Oe),g(J3,Oe,null),e(Oe,t3o),e(Oe,_le),e(_le,a3o),e(Oe,n3o),e(Oe,Ua),e(Ua,s3o),e(Ua,ule),e(ule,l3o),e(Ua,i3o),e(Ua,ble),e(ble,d3o),e(Ua,c3o),e(Ua,vle),e(vle,f3o),e(Ua,m3o),e(Oe,g3o),e(Oe,y),e(y,mb),e(mb,Fle),e(Fle,h3o),e(mb,p3o),e(mb,Oq),e(Oq,_3o),e(mb,u3o),e(y,b3o),e(y,gb),e(gb,Tle),e(Tle,v3o),e(gb,F3o),e(gb,Vq),e(Vq,T3o),e(gb,M3o),e(y,E3o),e(y,hb),e(hb,Mle),e(Mle,C3o),e(hb,w3o),e(hb,Xq),e(Xq,A3o),e(hb,y3o),e(y,L3o),e(y,pb),e(pb,Ele),e(Ele,x3o),e(pb,k3o),e(pb,zq),e(zq,S3o),e(pb,R3o),e(y,B3o),e(y,_b),e(_b,Cle),e(Cle,P3o),e(_b,$3o),e(_b,Qq),e(Qq,I3o),e(_b,q3o),e(y,N3o),e(y,ub),e(ub,wle),e(wle,j3o),e(ub,D3o),e(ub,Wq),e(Wq,G3o),e(ub,O3o),e(y,V3o),e(y,bb),e(bb,Ale),e(Ale,X3o),e(bb,z3o),e(bb,Hq),e(Hq,Q3o),e(bb,W3o),e(y,H3o),e(y,vb),e(vb,yle),e(yle,U3o),e(vb,J3o),e(vb,Uq),e(Uq,Y3o),e(vb,K3o),e(y,Z3o),e(y,Fb),e(Fb,Lle),e(Lle,eCo),e(Fb,oCo),e(Fb,Jq),e(Jq,rCo),e(Fb,tCo),e(y,aCo),e(y,Tb),e(Tb,xle),e(xle,nCo),e(Tb,sCo),e(Tb,Yq),e(Yq,lCo),e(Tb,iCo),e(y,dCo),e(y,Mb),e(Mb,kle),e(kle,cCo),e(Mb,fCo),e(Mb,Kq),e(Kq,mCo),e(Mb,gCo),e(y,hCo),e(y,Eb),e(Eb,Sle),e(Sle,pCo),e(Eb,_Co),e(Eb,Zq),e(Zq,uCo),e(Eb,bCo),e(y,vCo),e(y,Cb),e(Cb,Rle),e(Rle,FCo),e(Cb,TCo),e(Cb,eN),e(eN,MCo),e(Cb,ECo),e(y,CCo),e(y,wb),e(wb,Ble),e(Ble,wCo),e(wb,ACo),e(wb,oN),e(oN,yCo),e(wb,LCo),e(y,xCo),e(y,Ab),e(Ab,Ple),e(Ple,kCo),e(Ab,SCo),e(Ab,rN),e(rN,RCo),e(Ab,BCo),e(y,PCo),e(y,yb),e(yb,$le),e($le,$Co),e(yb,ICo),e(yb,tN),e(tN,qCo),e(yb,NCo),e(y,jCo),e(y,Lb),e(Lb,Ile),e(Ile,DCo),e(Lb,GCo),e(Lb,aN),e(aN,OCo),e(Lb,VCo),e(y,XCo),e(y,xb),e(xb,qle),e(qle,zCo),e(xb,QCo),e(xb,nN),e(nN,WCo),e(xb,HCo),e(y,UCo),e(y,kb),e(kb,Nle),e(Nle,JCo),e(kb,YCo),e(kb,sN),e(sN,KCo),e(kb,ZCo),e(y,ewo),e(y,Sb),e(Sb,jle),e(jle,owo),e(Sb,rwo),e(Sb,lN),e(lN,two),e(Sb,awo),e(y,nwo),e(y,Rb),e(Rb,Dle),e(Dle,swo),e(Rb,lwo),e(Rb,iN),e(iN,iwo),e(Rb,dwo),e(y,cwo),e(y,Bb),e(Bb,Gle),e(Gle,fwo),e(Bb,mwo),e(Bb,dN),e(dN,gwo),e(Bb,hwo),e(y,pwo),e(y,Pb),e(Pb,Ole),e(Ole,_wo),e(Pb,uwo),e(Pb,cN),e(cN,bwo),e(Pb,vwo),e(y,Fwo),e(y,$b),e($b,Vle),e(Vle,Two),e($b,Mwo),e($b,fN),e(fN,Ewo),e($b,Cwo),e(y,wwo),e(y,Ib),e(Ib,Xle),e(Xle,Awo),e(Ib,ywo),e(Ib,mN),e(mN,Lwo),e(Ib,xwo),e(y,kwo),e(y,qb),e(qb,zle),e(zle,Swo),e(qb,Rwo),e(qb,gN),e(gN,Bwo),e(qb,Pwo),e(y,$wo),e(y,Nb),e(Nb,Qle),e(Qle,Iwo),e(Nb,qwo),e(Nb,hN),e(hN,Nwo),e(Nb,jwo),e(y,Dwo),e(y,jb),e(jb,Wle),e(Wle,Gwo),e(jb,Owo),e(jb,pN),e(pN,Vwo),e(jb,Xwo),e(y,zwo),e(y,Db),e(Db,Hle),e(Hle,Qwo),e(Db,Wwo),e(Db,_N),e(_N,Hwo),e(Db,Uwo),e(y,Jwo),e(y,Gb),e(Gb,Ule),e(Ule,Ywo),e(Gb,Kwo),e(Gb,uN),e(uN,Zwo),e(Gb,eAo),e(y,oAo),e(y,Ob),e(Ob,Jle),e(Jle,rAo),e(Ob,tAo),e(Ob,bN),e(bN,aAo),e(Ob,nAo),e(y,sAo),e(y,Vb),e(Vb,Yle),e(Yle,lAo),e(Vb,iAo),e(Vb,vN),e(vN,dAo),e(Vb,cAo),e(y,fAo),e(y,Xb),e(Xb,Kle),e(Kle,mAo),e(Xb,gAo),e(Xb,FN),e(FN,hAo),e(Xb,pAo),e(y,_Ao),e(y,zb),e(zb,Zle),e(Zle,uAo),e(zb,bAo),e(zb,TN),e(TN,vAo),e(zb,FAo),e(y,TAo),e(y,Qb),e(Qb,eie),e(eie,MAo),e(Qb,EAo),e(Qb,MN),e(MN,CAo),e(Qb,wAo),e(y,AAo),e(y,Wb),e(Wb,oie),e(oie,yAo),e(Wb,LAo),e(Wb,EN),e(EN,xAo),e(Wb,kAo),e(y,SAo),e(y,Hb),e(Hb,rie),e(rie,RAo),e(Hb,BAo),e(Hb,CN),e(CN,PAo),e(Hb,$Ao),e(y,IAo),e(y,Ub),e(Ub,tie),e(tie,qAo),e(Ub,NAo),e(Ub,wN),e(wN,jAo),e(Ub,DAo),e(y,GAo),e(y,Jb),e(Jb,aie),e(aie,OAo),e(Jb,VAo),e(Jb,AN),e(AN,XAo),e(Jb,zAo),e(y,QAo),e(y,Yb),e(Yb,nie),e(nie,WAo),e(Yb,HAo),e(Yb,yN),e(yN,UAo),e(Yb,JAo),e(y,YAo),e(y,Kb),e(Kb,sie),e(sie,KAo),e(Kb,ZAo),e(Kb,LN),e(LN,e0o),e(Kb,o0o),e(y,r0o),e(y,Zb),e(Zb,lie),e(lie,t0o),e(Zb,a0o),e(Zb,xN),e(xN,n0o),e(Zb,s0o),e(y,l0o),e(y,e2),e(e2,iie),e(iie,i0o),e(e2,d0o),e(e2,kN),e(kN,c0o),e(e2,f0o),e(y,m0o),e(y,o2),e(o2,die),e(die,g0o),e(o2,h0o),e(o2,SN),e(SN,p0o),e(o2,_0o),e(y,u0o),e(y,r2),e(r2,cie),e(cie,b0o),e(r2,v0o),e(r2,RN),e(RN,F0o),e(r2,T0o),e(y,M0o),e(y,t2),e(t2,fie),e(fie,E0o),e(t2,C0o),e(t2,BN),e(BN,w0o),e(t2,A0o),e(y,y0o),e(y,a2),e(a2,mie),e(mie,L0o),e(a2,x0o),e(a2,PN),e(PN,k0o),e(a2,S0o),e(Oe,R0o),e(Oe,n2),e(n2,B0o),e(n2,gie),e(gie,P0o),e(n2,$0o),e(n2,hie),e(hie,I0o),e(Oe,q0o),e(Oe,pie),e(pie,N0o),e(Oe,j0o),g(Y3,Oe,null),b(c,mBe,u),b(c,ud,u),e(ud,s2),e(s2,_ie),g(K3,_ie,null),e(ud,D0o),e(ud,uie),e(uie,G0o),b(c,gBe,u),b(c,rr,u),g(Z3,rr,null),e(rr,O0o),e(rr,bd),e(bd,V0o),e(bd,$N),e($N,X0o),e(bd,z0o),e(bd,IN),e(IN,Q0o),e(bd,W0o),e(rr,H0o),e(rr,eC),e(eC,U0o),e(eC,bie),e(bie,J0o),e(eC,Y0o),e(rr,K0o),e(rr,Jr),g(oC,Jr,null),e(Jr,Z0o),e(Jr,vie),e(vie,eyo),e(Jr,oyo),e(Jr,vd),e(vd,ryo),e(vd,Fie),e(Fie,tyo),e(vd,ayo),e(vd,qN),e(qN,nyo),e(vd,syo),e(Jr,lyo),e(Jr,Tie),e(Tie,iyo),e(Jr,dyo),g(rC,Jr,null),e(rr,cyo),e(rr,Ve),g(tC,Ve,null),e(Ve,fyo),e(Ve,Mie),e(Mie,myo),e(Ve,gyo),e(Ve,Ja),e(Ja,hyo),e(Ja,Eie),e(Eie,pyo),e(Ja,_yo),e(Ja,Cie),e(Cie,uyo),e(Ja,byo),e(Ja,wie),e(wie,vyo),e(Ja,Fyo),e(Ve,Tyo),e(Ve,G),e(G,l2),e(l2,Aie),e(Aie,Myo),e(l2,Eyo),e(l2,NN),e(NN,Cyo),e(l2,wyo),e(G,Ayo),e(G,i2),e(i2,yie),e(yie,yyo),e(i2,Lyo),e(i2,jN),e(jN,xyo),e(i2,kyo),e(G,Syo),e(G,d2),e(d2,Lie),e(Lie,Ryo),e(d2,Byo),e(d2,DN),e(DN,Pyo),e(d2,$yo),e(G,Iyo),e(G,c2),e(c2,xie),e(xie,qyo),e(c2,Nyo),e(c2,GN),e(GN,jyo),e(c2,Dyo),e(G,Gyo),e(G,f2),e(f2,kie),e(kie,Oyo),e(f2,Vyo),e(f2,ON),e(ON,Xyo),e(f2,zyo),e(G,Qyo),e(G,m2),e(m2,Sie),e(Sie,Wyo),e(m2,Hyo),e(m2,VN),e(VN,Uyo),e(m2,Jyo),e(G,Yyo),e(G,g2),e(g2,Rie),e(Rie,Kyo),e(g2,Zyo),e(g2,XN),e(XN,eLo),e(g2,oLo),e(G,rLo),e(G,h2),e(h2,Bie),e(Bie,tLo),e(h2,aLo),e(h2,zN),e(zN,nLo),e(h2,sLo),e(G,lLo),e(G,p2),e(p2,Pie),e(Pie,iLo),e(p2,dLo),e(p2,QN),e(QN,cLo),e(p2,fLo),e(G,mLo),e(G,_2),e(_2,$ie),e($ie,gLo),e(_2,hLo),e(_2,WN),e(WN,pLo),e(_2,_Lo),e(G,uLo),e(G,u2),e(u2,Iie),e(Iie,bLo),e(u2,vLo),e(u2,HN),e(HN,FLo),e(u2,TLo),e(G,MLo),e(G,b2),e(b2,qie),e(qie,ELo),e(b2,CLo),e(b2,UN),e(UN,wLo),e(b2,ALo),e(G,yLo),e(G,v2),e(v2,Nie),e(Nie,LLo),e(v2,xLo),e(v2,JN),e(JN,kLo),e(v2,SLo),e(G,RLo),e(G,F2),e(F2,jie),e(jie,BLo),e(F2,PLo),e(F2,YN),e(YN,$Lo),e(F2,ILo),e(G,qLo),e(G,T2),e(T2,Die),e(Die,NLo),e(T2,jLo),e(T2,KN),e(KN,DLo),e(T2,GLo),e(G,OLo),e(G,M2),e(M2,Gie),e(Gie,VLo),e(M2,XLo),e(M2,ZN),e(ZN,zLo),e(M2,QLo),e(G,WLo),e(G,E2),e(E2,Oie),e(Oie,HLo),e(E2,ULo),e(E2,ej),e(ej,JLo),e(E2,YLo),e(G,KLo),e(G,C2),e(C2,Vie),e(Vie,ZLo),e(C2,e9o),e(C2,oj),e(oj,o9o),e(C2,r9o),e(G,t9o),e(G,w2),e(w2,Xie),e(Xie,a9o),e(w2,n9o),e(w2,rj),e(rj,s9o),e(w2,l9o),e(G,i9o),e(G,A2),e(A2,zie),e(zie,d9o),e(A2,c9o),e(A2,tj),e(tj,f9o),e(A2,m9o),e(G,g9o),e(G,y2),e(y2,Qie),e(Qie,h9o),e(y2,p9o),e(y2,aj),e(aj,_9o),e(y2,u9o),e(G,b9o),e(G,L2),e(L2,Wie),e(Wie,v9o),e(L2,F9o),e(L2,nj),e(nj,T9o),e(L2,M9o),e(G,E9o),e(G,x2),e(x2,Hie),e(Hie,C9o),e(x2,w9o),e(x2,sj),e(sj,A9o),e(x2,y9o),e(G,L9o),e(G,k2),e(k2,Uie),e(Uie,x9o),e(k2,k9o),e(k2,lj),e(lj,S9o),e(k2,R9o),e(G,B9o),e(G,S2),e(S2,Jie),e(Jie,P9o),e(S2,$9o),e(S2,ij),e(ij,I9o),e(S2,q9o),e(G,N9o),e(G,R2),e(R2,Yie),e(Yie,j9o),e(R2,D9o),e(R2,dj),e(dj,G9o),e(R2,O9o),e(G,V9o),e(G,B2),e(B2,Kie),e(Kie,X9o),e(B2,z9o),e(B2,cj),e(cj,Q9o),e(B2,W9o),e(G,H9o),e(G,P2),e(P2,Zie),e(Zie,U9o),e(P2,J9o),e(P2,fj),e(fj,Y9o),e(P2,K9o),e(Ve,Z9o),e(Ve,$2),e($2,exo),e($2,ede),e(ede,oxo),e($2,rxo),e($2,ode),e(ode,txo),e(Ve,axo),e(Ve,rde),e(rde,nxo),e(Ve,sxo),g(aC,Ve,null),b(c,hBe,u),b(c,Fd,u),e(Fd,I2),e(I2,tde),g(nC,tde,null),e(Fd,lxo),e(Fd,ade),e(ade,ixo),b(c,pBe,u),b(c,tr,u),g(sC,tr,null),e(tr,dxo),e(tr,Td),e(Td,cxo),e(Td,mj),e(mj,fxo),e(Td,mxo),e(Td,gj),e(gj,gxo),e(Td,hxo),e(tr,pxo),e(tr,lC),e(lC,_xo),e(lC,nde),e(nde,uxo),e(lC,bxo),e(tr,vxo),e(tr,Yr),g(iC,Yr,null),e(Yr,Fxo),e(Yr,sde),e(sde,Txo),e(Yr,Mxo),e(Yr,Md),e(Md,Exo),e(Md,lde),e(lde,Cxo),e(Md,wxo),e(Md,hj),e(hj,Axo),e(Md,yxo),e(Yr,Lxo),e(Yr,ide),e(ide,xxo),e(Yr,kxo),g(dC,Yr,null),e(tr,Sxo),e(tr,Xe),g(cC,Xe,null),e(Xe,Rxo),e(Xe,dde),e(dde,Bxo),e(Xe,Pxo),e(Xe,Ya),e(Ya,$xo),e(Ya,cde),e(cde,Ixo),e(Ya,qxo),e(Ya,fde),e(fde,Nxo),e(Ya,jxo),e(Ya,mde),e(mde,Dxo),e(Ya,Gxo),e(Xe,Oxo),e(Xe,da),e(da,q2),e(q2,gde),e(gde,Vxo),e(q2,Xxo),e(q2,pj),e(pj,zxo),e(q2,Qxo),e(da,Wxo),e(da,N2),e(N2,hde),e(hde,Hxo),e(N2,Uxo),e(N2,_j),e(_j,Jxo),e(N2,Yxo),e(da,Kxo),e(da,j2),e(j2,pde),e(pde,Zxo),e(j2,eko),e(j2,uj),e(uj,oko),e(j2,rko),e(da,tko),e(da,D2),e(D2,_de),e(_de,ako),e(D2,nko),e(D2,bj),e(bj,sko),e(D2,lko),e(da,iko),e(da,G2),e(G2,ude),e(ude,dko),e(G2,cko),e(G2,vj),e(vj,fko),e(G2,mko),e(Xe,gko),e(Xe,O2),e(O2,hko),e(O2,bde),e(bde,pko),e(O2,_ko),e(O2,vde),e(vde,uko),e(Xe,bko),e(Xe,Fde),e(Fde,vko),e(Xe,Fko),g(fC,Xe,null),b(c,_Be,u),b(c,Ed,u),e(Ed,V2),e(V2,Tde),g(mC,Tde,null),e(Ed,Tko),e(Ed,Mde),e(Mde,Mko),b(c,uBe,u),b(c,ar,u),g(gC,ar,null),e(ar,Eko),e(ar,Cd),e(Cd,Cko),e(Cd,Fj),e(Fj,wko),e(Cd,Ako),e(Cd,Tj),e(Tj,yko),e(Cd,Lko),e(ar,xko),e(ar,hC),e(hC,kko),e(hC,Ede),e(Ede,Sko),e(hC,Rko),e(ar,Bko),e(ar,Kr),g(pC,Kr,null),e(Kr,Pko),e(Kr,Cde),e(Cde,$ko),e(Kr,Iko),e(Kr,wd),e(wd,qko),e(wd,wde),e(wde,Nko),e(wd,jko),e(wd,Mj),e(Mj,Dko),e(wd,Gko),e(Kr,Oko),e(Kr,Ade),e(Ade,Vko),e(Kr,Xko),g(_C,Kr,null),e(ar,zko),e(ar,ze),g(uC,ze,null),e(ze,Qko),e(ze,yde),e(yde,Wko),e(ze,Hko),e(ze,Ka),e(Ka,Uko),e(Ka,Lde),e(Lde,Jko),e(Ka,Yko),e(Ka,xde),e(xde,Kko),e(Ka,Zko),e(Ka,kde),e(kde,eSo),e(Ka,oSo),e(ze,rSo),e(ze,j),e(j,X2),e(X2,Sde),e(Sde,tSo),e(X2,aSo),e(X2,Ej),e(Ej,nSo),e(X2,sSo),e(j,lSo),e(j,z2),e(z2,Rde),e(Rde,iSo),e(z2,dSo),e(z2,Cj),e(Cj,cSo),e(z2,fSo),e(j,mSo),e(j,Q2),e(Q2,Bde),e(Bde,gSo),e(Q2,hSo),e(Q2,wj),e(wj,pSo),e(Q2,_So),e(j,uSo),e(j,W2),e(W2,Pde),e(Pde,bSo),e(W2,vSo),e(W2,Aj),e(Aj,FSo),e(W2,TSo),e(j,MSo),e(j,H2),e(H2,$de),e($de,ESo),e(H2,CSo),e(H2,yj),e(yj,wSo),e(H2,ASo),e(j,ySo),e(j,U2),e(U2,Ide),e(Ide,LSo),e(U2,xSo),e(U2,Lj),e(Lj,kSo),e(U2,SSo),e(j,RSo),e(j,J2),e(J2,qde),e(qde,BSo),e(J2,PSo),e(J2,xj),e(xj,$So),e(J2,ISo),e(j,qSo),e(j,Y2),e(Y2,Nde),e(Nde,NSo),e(Y2,jSo),e(Y2,kj),e(kj,DSo),e(Y2,GSo),e(j,OSo),e(j,K2),e(K2,jde),e(jde,VSo),e(K2,XSo),e(K2,Sj),e(Sj,zSo),e(K2,QSo),e(j,WSo),e(j,Z2),e(Z2,Dde),e(Dde,HSo),e(Z2,USo),e(Z2,Rj),e(Rj,JSo),e(Z2,YSo),e(j,KSo),e(j,e6),e(e6,Gde),e(Gde,ZSo),e(e6,eRo),e(e6,Bj),e(Bj,oRo),e(e6,rRo),e(j,tRo),e(j,o6),e(o6,Ode),e(Ode,aRo),e(o6,nRo),e(o6,Pj),e(Pj,sRo),e(o6,lRo),e(j,iRo),e(j,r6),e(r6,Vde),e(Vde,dRo),e(r6,cRo),e(r6,$j),e($j,fRo),e(r6,mRo),e(j,gRo),e(j,t6),e(t6,Xde),e(Xde,hRo),e(t6,pRo),e(t6,Ij),e(Ij,_Ro),e(t6,uRo),e(j,bRo),e(j,a6),e(a6,zde),e(zde,vRo),e(a6,FRo),e(a6,qj),e(qj,TRo),e(a6,MRo),e(j,ERo),e(j,n6),e(n6,Qde),e(Qde,CRo),e(n6,wRo),e(n6,Nj),e(Nj,ARo),e(n6,yRo),e(j,LRo),e(j,s6),e(s6,Wde),e(Wde,xRo),e(s6,kRo),e(s6,jj),e(jj,SRo),e(s6,RRo),e(j,BRo),e(j,l6),e(l6,Hde),e(Hde,PRo),e(l6,$Ro),e(l6,Dj),e(Dj,IRo),e(l6,qRo),e(j,NRo),e(j,i6),e(i6,Ude),e(Ude,jRo),e(i6,DRo),e(i6,Gj),e(Gj,GRo),e(i6,ORo),e(j,VRo),e(j,d6),e(d6,Jde),e(Jde,XRo),e(d6,zRo),e(d6,Oj),e(Oj,QRo),e(d6,WRo),e(j,HRo),e(j,c6),e(c6,Yde),e(Yde,URo),e(c6,JRo),e(c6,Vj),e(Vj,YRo),e(c6,KRo),e(j,ZRo),e(j,f6),e(f6,Kde),e(Kde,eBo),e(f6,oBo),e(f6,Xj),e(Xj,rBo),e(f6,tBo),e(j,aBo),e(j,m6),e(m6,Zde),e(Zde,nBo),e(m6,sBo),e(m6,zj),e(zj,lBo),e(m6,iBo),e(j,dBo),e(j,g6),e(g6,ece),e(ece,cBo),e(g6,fBo),e(g6,Qj),e(Qj,mBo),e(g6,gBo),e(j,hBo),e(j,h6),e(h6,oce),e(oce,pBo),e(h6,_Bo),e(h6,Wj),e(Wj,uBo),e(h6,bBo),e(j,vBo),e(j,p6),e(p6,rce),e(rce,FBo),e(p6,TBo),e(p6,Hj),e(Hj,MBo),e(p6,EBo),e(j,CBo),e(j,_6),e(_6,tce),e(tce,wBo),e(_6,ABo),e(_6,Uj),e(Uj,yBo),e(_6,LBo),e(j,xBo),e(j,u6),e(u6,ace),e(ace,kBo),e(u6,SBo),e(u6,Jj),e(Jj,RBo),e(u6,BBo),e(j,PBo),e(j,b6),e(b6,nce),e(nce,$Bo),e(b6,IBo),e(b6,Yj),e(Yj,qBo),e(b6,NBo),e(j,jBo),e(j,v6),e(v6,sce),e(sce,DBo),e(v6,GBo),e(v6,Kj),e(Kj,OBo),e(v6,VBo),e(j,XBo),e(j,F6),e(F6,lce),e(lce,zBo),e(F6,QBo),e(F6,Zj),e(Zj,WBo),e(F6,HBo),e(j,UBo),e(j,T6),e(T6,ice),e(ice,JBo),e(T6,YBo),e(T6,eD),e(eD,KBo),e(T6,ZBo),e(j,ePo),e(j,M6),e(M6,dce),e(dce,oPo),e(M6,rPo),e(M6,oD),e(oD,tPo),e(M6,aPo),e(ze,nPo),e(ze,E6),e(E6,sPo),e(E6,cce),e(cce,lPo),e(E6,iPo),e(E6,fce),e(fce,dPo),e(ze,cPo),e(ze,mce),e(mce,fPo),e(ze,mPo),g(bC,ze,null),b(c,bBe,u),b(c,Ad,u),e(Ad,C6),e(C6,gce),g(vC,gce,null),e(Ad,gPo),e(Ad,hce),e(hce,hPo),b(c,vBe,u),b(c,nr,u),g(FC,nr,null),e(nr,pPo),e(nr,yd),e(yd,_Po),e(yd,rD),e(rD,uPo),e(yd,bPo),e(yd,tD),e(tD,vPo),e(yd,FPo),e(nr,TPo),e(nr,TC),e(TC,MPo),e(TC,pce),e(pce,EPo),e(TC,CPo),e(nr,wPo),e(nr,Zr),g(MC,Zr,null),e(Zr,APo),e(Zr,_ce),e(_ce,yPo),e(Zr,LPo),e(Zr,Ld),e(Ld,xPo),e(Ld,uce),e(uce,kPo),e(Ld,SPo),e(Ld,aD),e(aD,RPo),e(Ld,BPo),e(Zr,PPo),e(Zr,bce),e(bce,$Po),e(Zr,IPo),g(EC,Zr,null),e(nr,qPo),e(nr,Qe),g(CC,Qe,null),e(Qe,NPo),e(Qe,vce),e(vce,jPo),e(Qe,DPo),e(Qe,Za),e(Za,GPo),e(Za,Fce),e(Fce,OPo),e(Za,VPo),e(Za,Tce),e(Tce,XPo),e(Za,zPo),e(Za,Mce),e(Mce,QPo),e(Za,WPo),e(Qe,HPo),e(Qe,R),e(R,w6),e(w6,Ece),e(Ece,UPo),e(w6,JPo),e(w6,nD),e(nD,YPo),e(w6,KPo),e(R,ZPo),e(R,A6),e(A6,Cce),e(Cce,e$o),e(A6,o$o),e(A6,sD),e(sD,r$o),e(A6,t$o),e(R,a$o),e(R,y6),e(y6,wce),e(wce,n$o),e(y6,s$o),e(y6,lD),e(lD,l$o),e(y6,i$o),e(R,d$o),e(R,L6),e(L6,Ace),e(Ace,c$o),e(L6,f$o),e(L6,iD),e(iD,m$o),e(L6,g$o),e(R,h$o),e(R,x6),e(x6,yce),e(yce,p$o),e(x6,_$o),e(x6,dD),e(dD,u$o),e(x6,b$o),e(R,v$o),e(R,k6),e(k6,Lce),e(Lce,F$o),e(k6,T$o),e(k6,cD),e(cD,M$o),e(k6,E$o),e(R,C$o),e(R,S6),e(S6,xce),e(xce,w$o),e(S6,A$o),e(S6,fD),e(fD,y$o),e(S6,L$o),e(R,x$o),e(R,R6),e(R6,kce),e(kce,k$o),e(R6,S$o),e(R6,mD),e(mD,R$o),e(R6,B$o),e(R,P$o),e(R,B6),e(B6,Sce),e(Sce,$$o),e(B6,I$o),e(B6,gD),e(gD,q$o),e(B6,N$o),e(R,j$o),e(R,P6),e(P6,Rce),e(Rce,D$o),e(P6,G$o),e(P6,hD),e(hD,O$o),e(P6,V$o),e(R,X$o),e(R,$6),e($6,Bce),e(Bce,z$o),e($6,Q$o),e($6,pD),e(pD,W$o),e($6,H$o),e(R,U$o),e(R,I6),e(I6,Pce),e(Pce,J$o),e(I6,Y$o),e(I6,_D),e(_D,K$o),e(I6,Z$o),e(R,eIo),e(R,q6),e(q6,$ce),e($ce,oIo),e(q6,rIo),e(q6,uD),e(uD,tIo),e(q6,aIo),e(R,nIo),e(R,N6),e(N6,Ice),e(Ice,sIo),e(N6,lIo),e(N6,bD),e(bD,iIo),e(N6,dIo),e(R,cIo),e(R,j6),e(j6,qce),e(qce,fIo),e(j6,mIo),e(j6,vD),e(vD,gIo),e(j6,hIo),e(R,pIo),e(R,D6),e(D6,Nce),e(Nce,_Io),e(D6,uIo),e(D6,FD),e(FD,bIo),e(D6,vIo),e(R,FIo),e(R,G6),e(G6,jce),e(jce,TIo),e(G6,MIo),e(G6,TD),e(TD,EIo),e(G6,CIo),e(R,wIo),e(R,O6),e(O6,Dce),e(Dce,AIo),e(O6,yIo),e(O6,MD),e(MD,LIo),e(O6,xIo),e(R,kIo),e(R,V6),e(V6,Gce),e(Gce,SIo),e(V6,RIo),e(V6,ED),e(ED,BIo),e(V6,PIo),e(R,$Io),e(R,X6),e(X6,Oce),e(Oce,IIo),e(X6,qIo),e(X6,CD),e(CD,NIo),e(X6,jIo),e(R,DIo),e(R,z6),e(z6,Vce),e(Vce,GIo),e(z6,OIo),e(z6,wD),e(wD,VIo),e(z6,XIo),e(R,zIo),e(R,Q6),e(Q6,Xce),e(Xce,QIo),e(Q6,WIo),e(Q6,AD),e(AD,HIo),e(Q6,UIo),e(R,JIo),e(R,W6),e(W6,zce),e(zce,YIo),e(W6,KIo),e(W6,yD),e(yD,ZIo),e(W6,eqo),e(R,oqo),e(R,H6),e(H6,Qce),e(Qce,rqo),e(H6,tqo),e(H6,LD),e(LD,aqo),e(H6,nqo),e(R,sqo),e(R,U6),e(U6,Wce),e(Wce,lqo),e(U6,iqo),e(U6,xD),e(xD,dqo),e(U6,cqo),e(R,fqo),e(R,J6),e(J6,Hce),e(Hce,mqo),e(J6,gqo),e(J6,kD),e(kD,hqo),e(J6,pqo),e(R,_qo),e(R,Y6),e(Y6,Uce),e(Uce,uqo),e(Y6,bqo),e(Y6,SD),e(SD,vqo),e(Y6,Fqo),e(R,Tqo),e(R,K6),e(K6,Jce),e(Jce,Mqo),e(K6,Eqo),e(K6,RD),e(RD,Cqo),e(K6,wqo),e(R,Aqo),e(R,Z6),e(Z6,Yce),e(Yce,yqo),e(Z6,Lqo),e(Z6,BD),e(BD,xqo),e(Z6,kqo),e(R,Sqo),e(R,ev),e(ev,Kce),e(Kce,Rqo),e(ev,Bqo),e(ev,PD),e(PD,Pqo),e(ev,$qo),e(R,Iqo),e(R,ov),e(ov,Zce),e(Zce,qqo),e(ov,Nqo),e(ov,$D),e($D,jqo),e(ov,Dqo),e(R,Gqo),e(R,rv),e(rv,efe),e(efe,Oqo),e(rv,Vqo),e(rv,ID),e(ID,Xqo),e(rv,zqo),e(R,Qqo),e(R,tv),e(tv,ofe),e(ofe,Wqo),e(tv,Hqo),e(tv,qD),e(qD,Uqo),e(tv,Jqo),e(R,Yqo),e(R,av),e(av,rfe),e(rfe,Kqo),e(av,Zqo),e(av,ND),e(ND,eNo),e(av,oNo),e(R,rNo),e(R,nv),e(nv,tfe),e(tfe,tNo),e(nv,aNo),e(nv,jD),e(jD,nNo),e(nv,sNo),e(R,lNo),e(R,sv),e(sv,afe),e(afe,iNo),e(sv,dNo),e(sv,DD),e(DD,cNo),e(sv,fNo),e(R,mNo),e(R,lv),e(lv,nfe),e(nfe,gNo),e(lv,hNo),e(lv,GD),e(GD,pNo),e(lv,_No),e(R,uNo),e(R,iv),e(iv,sfe),e(sfe,bNo),e(iv,vNo),e(iv,OD),e(OD,FNo),e(iv,TNo),e(R,MNo),e(R,dv),e(dv,lfe),e(lfe,ENo),e(dv,CNo),e(dv,VD),e(VD,wNo),e(dv,ANo),e(Qe,yNo),e(Qe,cv),e(cv,LNo),e(cv,ife),e(ife,xNo),e(cv,kNo),e(cv,dfe),e(dfe,SNo),e(Qe,RNo),e(Qe,cfe),e(cfe,BNo),e(Qe,PNo),g(wC,Qe,null),b(c,FBe,u),b(c,xd,u),e(xd,fv),e(fv,ffe),g(AC,ffe,null),e(xd,$No),e(xd,mfe),e(mfe,INo),b(c,TBe,u),b(c,sr,u),g(yC,sr,null),e(sr,qNo),e(sr,kd),e(kd,NNo),e(kd,XD),e(XD,jNo),e(kd,DNo),e(kd,zD),e(zD,GNo),e(kd,ONo),e(sr,VNo),e(sr,LC),e(LC,XNo),e(LC,gfe),e(gfe,zNo),e(LC,QNo),e(sr,WNo),e(sr,et),g(xC,et,null),e(et,HNo),e(et,hfe),e(hfe,UNo),e(et,JNo),e(et,Sd),e(Sd,YNo),e(Sd,pfe),e(pfe,KNo),e(Sd,ZNo),e(Sd,QD),e(QD,ejo),e(Sd,ojo),e(et,rjo),e(et,_fe),e(_fe,tjo),e(et,ajo),g(kC,et,null),e(sr,njo),e(sr,We),g(SC,We,null),e(We,sjo),e(We,ufe),e(ufe,ljo),e(We,ijo),e(We,en),e(en,djo),e(en,bfe),e(bfe,cjo),e(en,fjo),e(en,vfe),e(vfe,mjo),e(en,gjo),e(en,Ffe),e(Ffe,hjo),e(en,pjo),e(We,_jo),e(We,Tfe),e(Tfe,mv),e(mv,Mfe),e(Mfe,ujo),e(mv,bjo),e(mv,WD),e(WD,vjo),e(mv,Fjo),e(We,Tjo),e(We,gv),e(gv,Mjo),e(gv,Efe),e(Efe,Ejo),e(gv,Cjo),e(gv,Cfe),e(Cfe,wjo),e(We,Ajo),e(We,wfe),e(wfe,yjo),e(We,Ljo),g(RC,We,null),b(c,MBe,u),b(c,Rd,u),e(Rd,hv),e(hv,Afe),g(BC,Afe,null),e(Rd,xjo),e(Rd,yfe),e(yfe,kjo),b(c,EBe,u),b(c,lr,u),g(PC,lr,null),e(lr,Sjo),e(lr,Bd),e(Bd,Rjo),e(Bd,HD),e(HD,Bjo),e(Bd,Pjo),e(Bd,UD),e(UD,$jo),e(Bd,Ijo),e(lr,qjo),e(lr,$C),e($C,Njo),e($C,Lfe),e(Lfe,jjo),e($C,Djo),e(lr,Gjo),e(lr,ot),g(IC,ot,null),e(ot,Ojo),e(ot,xfe),e(xfe,Vjo),e(ot,Xjo),e(ot,Pd),e(Pd,zjo),e(Pd,kfe),e(kfe,Qjo),e(Pd,Wjo),e(Pd,JD),e(JD,Hjo),e(Pd,Ujo),e(ot,Jjo),e(ot,Sfe),e(Sfe,Yjo),e(ot,Kjo),g(qC,ot,null),e(lr,Zjo),e(lr,He),g(NC,He,null),e(He,eDo),e(He,Rfe),e(Rfe,oDo),e(He,rDo),e(He,on),e(on,tDo),e(on,Bfe),e(Bfe,aDo),e(on,nDo),e(on,Pfe),e(Pfe,sDo),e(on,lDo),e(on,$fe),e($fe,iDo),e(on,dDo),e(He,cDo),e(He,de),e(de,pv),e(pv,Ife),e(Ife,fDo),e(pv,mDo),e(pv,YD),e(YD,gDo),e(pv,hDo),e(de,pDo),e(de,_v),e(_v,qfe),e(qfe,_Do),e(_v,uDo),e(_v,KD),e(KD,bDo),e(_v,vDo),e(de,FDo),e(de,uv),e(uv,Nfe),e(Nfe,TDo),e(uv,MDo),e(uv,ZD),e(ZD,EDo),e(uv,CDo),e(de,wDo),e(de,Vs),e(Vs,jfe),e(jfe,ADo),e(Vs,yDo),e(Vs,eG),e(eG,LDo),e(Vs,xDo),e(Vs,oG),e(oG,kDo),e(Vs,SDo),e(de,RDo),e(de,bv),e(bv,Dfe),e(Dfe,BDo),e(bv,PDo),e(bv,rG),e(rG,$Do),e(bv,IDo),e(de,qDo),e(de,ma),e(ma,Gfe),e(Gfe,NDo),e(ma,jDo),e(ma,tG),e(tG,DDo),e(ma,GDo),e(ma,aG),e(aG,ODo),e(ma,VDo),e(ma,nG),e(nG,XDo),e(ma,zDo),e(de,QDo),e(de,vv),e(vv,Ofe),e(Ofe,WDo),e(vv,HDo),e(vv,sG),e(sG,UDo),e(vv,JDo),e(de,YDo),e(de,Fv),e(Fv,Vfe),e(Vfe,KDo),e(Fv,ZDo),e(Fv,lG),e(lG,eGo),e(Fv,oGo),e(de,rGo),e(de,Tv),e(Tv,Xfe),e(Xfe,tGo),e(Tv,aGo),e(Tv,iG),e(iG,nGo),e(Tv,sGo),e(de,lGo),e(de,Mv),e(Mv,zfe),e(zfe,iGo),e(Mv,dGo),e(Mv,dG),e(dG,cGo),e(Mv,fGo),e(de,mGo),e(de,Ev),e(Ev,Qfe),e(Qfe,gGo),e(Ev,hGo),e(Ev,cG),e(cG,pGo),e(Ev,_Go),e(de,uGo),e(de,Cv),e(Cv,Wfe),e(Wfe,bGo),e(Cv,vGo),e(Cv,fG),e(fG,FGo),e(Cv,TGo),e(de,MGo),e(de,wv),e(wv,Hfe),e(Hfe,EGo),e(wv,CGo),e(wv,mG),e(mG,wGo),e(wv,AGo),e(He,yGo),e(He,Av),e(Av,LGo),e(Av,Ufe),e(Ufe,xGo),e(Av,kGo),e(Av,Jfe),e(Jfe,SGo),e(He,RGo),e(He,Yfe),e(Yfe,BGo),e(He,PGo),g(jC,He,null),b(c,CBe,u),b(c,$d,u),e($d,yv),e(yv,Kfe),g(DC,Kfe,null),e($d,$Go),e($d,Zfe),e(Zfe,IGo),b(c,wBe,u),b(c,ir,u),g(GC,ir,null),e(ir,qGo),e(ir,Id),e(Id,NGo),e(Id,gG),e(gG,jGo),e(Id,DGo),e(Id,hG),e(hG,GGo),e(Id,OGo),e(ir,VGo),e(ir,OC),e(OC,XGo),e(OC,eme),e(eme,zGo),e(OC,QGo),e(ir,WGo),e(ir,rt),g(VC,rt,null),e(rt,HGo),e(rt,ome),e(ome,UGo),e(rt,JGo),e(rt,qd),e(qd,YGo),e(qd,rme),e(rme,KGo),e(qd,ZGo),e(qd,pG),e(pG,eOo),e(qd,oOo),e(rt,rOo),e(rt,tme),e(tme,tOo),e(rt,aOo),g(XC,rt,null),e(ir,nOo),e(ir,Ue),g(zC,Ue,null),e(Ue,sOo),e(Ue,ame),e(ame,lOo),e(Ue,iOo),e(Ue,rn),e(rn,dOo),e(rn,nme),e(nme,cOo),e(rn,fOo),e(rn,sme),e(sme,mOo),e(rn,gOo),e(rn,lme),e(lme,hOo),e(rn,pOo),e(Ue,_Oo),e(Ue,ime),e(ime,Lv),e(Lv,dme),e(dme,uOo),e(Lv,bOo),e(Lv,_G),e(_G,vOo),e(Lv,FOo),e(Ue,TOo),e(Ue,xv),e(xv,MOo),e(xv,cme),e(cme,EOo),e(xv,COo),e(xv,fme),e(fme,wOo),e(Ue,AOo),e(Ue,mme),e(mme,yOo),e(Ue,LOo),g(QC,Ue,null),b(c,ABe,u),b(c,Nd,u),e(Nd,kv),e(kv,gme),g(WC,gme,null),e(Nd,xOo),e(Nd,hme),e(hme,kOo),b(c,yBe,u),b(c,dr,u),g(HC,dr,null),e(dr,SOo),e(dr,jd),e(jd,ROo),e(jd,uG),e(uG,BOo),e(jd,POo),e(jd,bG),e(bG,$Oo),e(jd,IOo),e(dr,qOo),e(dr,UC),e(UC,NOo),e(UC,pme),e(pme,jOo),e(UC,DOo),e(dr,GOo),e(dr,tt),g(JC,tt,null),e(tt,OOo),e(tt,_me),e(_me,VOo),e(tt,XOo),e(tt,Dd),e(Dd,zOo),e(Dd,ume),e(ume,QOo),e(Dd,WOo),e(Dd,vG),e(vG,HOo),e(Dd,UOo),e(tt,JOo),e(tt,bme),e(bme,YOo),e(tt,KOo),g(YC,tt,null),e(dr,ZOo),e(dr,Je),g(KC,Je,null),e(Je,eVo),e(Je,vme),e(vme,oVo),e(Je,rVo),e(Je,tn),e(tn,tVo),e(tn,Fme),e(Fme,aVo),e(tn,nVo),e(tn,Tme),e(Tme,sVo),e(tn,lVo),e(tn,Mme),e(Mme,iVo),e(tn,dVo),e(Je,cVo),e(Je,Se),e(Se,Sv),e(Sv,Eme),e(Eme,fVo),e(Sv,mVo),e(Sv,FG),e(FG,gVo),e(Sv,hVo),e(Se,pVo),e(Se,Rv),e(Rv,Cme),e(Cme,_Vo),e(Rv,uVo),e(Rv,TG),e(TG,bVo),e(Rv,vVo),e(Se,FVo),e(Se,Bv),e(Bv,wme),e(wme,TVo),e(Bv,MVo),e(Bv,MG),e(MG,EVo),e(Bv,CVo),e(Se,wVo),e(Se,Pv),e(Pv,Ame),e(Ame,AVo),e(Pv,yVo),e(Pv,EG),e(EG,LVo),e(Pv,xVo),e(Se,kVo),e(Se,$v),e($v,yme),e(yme,SVo),e($v,RVo),e($v,CG),e(CG,BVo),e($v,PVo),e(Se,$Vo),e(Se,Iv),e(Iv,Lme),e(Lme,IVo),e(Iv,qVo),e(Iv,wG),e(wG,NVo),e(Iv,jVo),e(Se,DVo),e(Se,qv),e(qv,xme),e(xme,GVo),e(qv,OVo),e(qv,AG),e(AG,VVo),e(qv,XVo),e(Se,zVo),e(Se,Nv),e(Nv,kme),e(kme,QVo),e(Nv,WVo),e(Nv,yG),e(yG,HVo),e(Nv,UVo),e(Je,JVo),e(Je,jv),e(jv,YVo),e(jv,Sme),e(Sme,KVo),e(jv,ZVo),e(jv,Rme),e(Rme,eXo),e(Je,oXo),e(Je,Bme),e(Bme,rXo),e(Je,tXo),g(ZC,Je,null),b(c,LBe,u),b(c,Gd,u),e(Gd,Dv),e(Dv,Pme),g(ew,Pme,null),e(Gd,aXo),e(Gd,$me),e($me,nXo),b(c,xBe,u),b(c,cr,u),g(ow,cr,null),e(cr,sXo),e(cr,Od),e(Od,lXo),e(Od,LG),e(LG,iXo),e(Od,dXo),e(Od,xG),e(xG,cXo),e(Od,fXo),e(cr,mXo),e(cr,rw),e(rw,gXo),e(rw,Ime),e(Ime,hXo),e(rw,pXo),e(cr,_Xo),e(cr,at),g(tw,at,null),e(at,uXo),e(at,qme),e(qme,bXo),e(at,vXo),e(at,Vd),e(Vd,FXo),e(Vd,Nme),e(Nme,TXo),e(Vd,MXo),e(Vd,kG),e(kG,EXo),e(Vd,CXo),e(at,wXo),e(at,jme),e(jme,AXo),e(at,yXo),g(aw,at,null),e(cr,LXo),e(cr,Ye),g(nw,Ye,null),e(Ye,xXo),e(Ye,Dme),e(Dme,kXo),e(Ye,SXo),e(Ye,an),e(an,RXo),e(an,Gme),e(Gme,BXo),e(an,PXo),e(an,Ome),e(Ome,$Xo),e(an,IXo),e(an,Vme),e(Vme,qXo),e(an,NXo),e(Ye,jXo),e(Ye,nn),e(nn,Gv),e(Gv,Xme),e(Xme,DXo),e(Gv,GXo),e(Gv,SG),e(SG,OXo),e(Gv,VXo),e(nn,XXo),e(nn,Ov),e(Ov,zme),e(zme,zXo),e(Ov,QXo),e(Ov,RG),e(RG,WXo),e(Ov,HXo),e(nn,UXo),e(nn,Vv),e(Vv,Qme),e(Qme,JXo),e(Vv,YXo),e(Vv,BG),e(BG,KXo),e(Vv,ZXo),e(nn,ezo),e(nn,Xv),e(Xv,Wme),e(Wme,ozo),e(Xv,rzo),e(Xv,PG),e(PG,tzo),e(Xv,azo),e(Ye,nzo),e(Ye,zv),e(zv,szo),e(zv,Hme),e(Hme,lzo),e(zv,izo),e(zv,Ume),e(Ume,dzo),e(Ye,czo),e(Ye,Jme),e(Jme,fzo),e(Ye,mzo),g(sw,Ye,null),b(c,kBe,u),b(c,Xd,u),e(Xd,Qv),e(Qv,Yme),g(lw,Yme,null),e(Xd,gzo),e(Xd,Kme),e(Kme,hzo),b(c,SBe,u),b(c,fr,u),g(iw,fr,null),e(fr,pzo),e(fr,zd),e(zd,_zo),e(zd,$G),e($G,uzo),e(zd,bzo),e(zd,IG),e(IG,vzo),e(zd,Fzo),e(fr,Tzo),e(fr,dw),e(dw,Mzo),e(dw,Zme),e(Zme,Ezo),e(dw,Czo),e(fr,wzo),e(fr,nt),g(cw,nt,null),e(nt,Azo),e(nt,ege),e(ege,yzo),e(nt,Lzo),e(nt,Qd),e(Qd,xzo),e(Qd,oge),e(oge,kzo),e(Qd,Szo),e(Qd,qG),e(qG,Rzo),e(Qd,Bzo),e(nt,Pzo),e(nt,rge),e(rge,$zo),e(nt,Izo),g(fw,nt,null),e(fr,qzo),e(fr,Ke),g(mw,Ke,null),e(Ke,Nzo),e(Ke,tge),e(tge,jzo),e(Ke,Dzo),e(Ke,sn),e(sn,Gzo),e(sn,age),e(age,Ozo),e(sn,Vzo),e(sn,nge),e(nge,Xzo),e(sn,zzo),e(sn,sge),e(sge,Qzo),e(sn,Wzo),e(Ke,Hzo),e(Ke,Re),e(Re,Wv),e(Wv,lge),e(lge,Uzo),e(Wv,Jzo),e(Wv,NG),e(NG,Yzo),e(Wv,Kzo),e(Re,Zzo),e(Re,Hv),e(Hv,ige),e(ige,eQo),e(Hv,oQo),e(Hv,jG),e(jG,rQo),e(Hv,tQo),e(Re,aQo),e(Re,Uv),e(Uv,dge),e(dge,nQo),e(Uv,sQo),e(Uv,DG),e(DG,lQo),e(Uv,iQo),e(Re,dQo),e(Re,Jv),e(Jv,cge),e(cge,cQo),e(Jv,fQo),e(Jv,GG),e(GG,mQo),e(Jv,gQo),e(Re,hQo),e(Re,Yv),e(Yv,fge),e(fge,pQo),e(Yv,_Qo),e(Yv,OG),e(OG,uQo),e(Yv,bQo),e(Re,vQo),e(Re,Kv),e(Kv,mge),e(mge,FQo),e(Kv,TQo),e(Kv,VG),e(VG,MQo),e(Kv,EQo),e(Re,CQo),e(Re,Zv),e(Zv,gge),e(gge,wQo),e(Zv,AQo),e(Zv,XG),e(XG,yQo),e(Zv,LQo),e(Re,xQo),e(Re,eF),e(eF,hge),e(hge,kQo),e(eF,SQo),e(eF,zG),e(zG,RQo),e(eF,BQo),e(Ke,PQo),e(Ke,oF),e(oF,$Qo),e(oF,pge),e(pge,IQo),e(oF,qQo),e(oF,_ge),e(_ge,NQo),e(Ke,jQo),e(Ke,uge),e(uge,DQo),e(Ke,GQo),g(gw,Ke,null),b(c,RBe,u),b(c,Wd,u),e(Wd,rF),e(rF,bge),g(hw,bge,null),e(Wd,OQo),e(Wd,vge),e(vge,VQo),b(c,BBe,u),b(c,mr,u),g(pw,mr,null),e(mr,XQo),e(mr,Hd),e(Hd,zQo),e(Hd,QG),e(QG,QQo),e(Hd,WQo),e(Hd,WG),e(WG,HQo),e(Hd,UQo),e(mr,JQo),e(mr,_w),e(_w,YQo),e(_w,Fge),e(Fge,KQo),e(_w,ZQo),e(mr,eWo),e(mr,st),g(uw,st,null),e(st,oWo),e(st,Tge),e(Tge,rWo),e(st,tWo),e(st,Ud),e(Ud,aWo),e(Ud,Mge),e(Mge,nWo),e(Ud,sWo),e(Ud,HG),e(HG,lWo),e(Ud,iWo),e(st,dWo),e(st,Ege),e(Ege,cWo),e(st,fWo),g(bw,st,null),e(mr,mWo),e(mr,Ze),g(vw,Ze,null),e(Ze,gWo),e(Ze,Cge),e(Cge,hWo),e(Ze,pWo),e(Ze,ln),e(ln,_Wo),e(ln,wge),e(wge,uWo),e(ln,bWo),e(ln,Age),e(Age,vWo),e(ln,FWo),e(ln,yge),e(yge,TWo),e(ln,MWo),e(Ze,EWo),e(Ze,Fw),e(Fw,tF),e(tF,Lge),e(Lge,CWo),e(tF,wWo),e(tF,UG),e(UG,AWo),e(tF,yWo),e(Fw,LWo),e(Fw,aF),e(aF,xge),e(xge,xWo),e(aF,kWo),e(aF,JG),e(JG,SWo),e(aF,RWo),e(Ze,BWo),e(Ze,nF),e(nF,PWo),e(nF,kge),e(kge,$Wo),e(nF,IWo),e(nF,Sge),e(Sge,qWo),e(Ze,NWo),e(Ze,Rge),e(Rge,jWo),e(Ze,DWo),g(Tw,Ze,null),b(c,PBe,u),b(c,Jd,u),e(Jd,sF),e(sF,Bge),g(Mw,Bge,null),e(Jd,GWo),e(Jd,Pge),e(Pge,OWo),b(c,$Be,u),b(c,gr,u),g(Ew,gr,null),e(gr,VWo),e(gr,Yd),e(Yd,XWo),e(Yd,YG),e(YG,zWo),e(Yd,QWo),e(Yd,KG),e(KG,WWo),e(Yd,HWo),e(gr,UWo),e(gr,Cw),e(Cw,JWo),e(Cw,$ge),e($ge,YWo),e(Cw,KWo),e(gr,ZWo),e(gr,lt),g(ww,lt,null),e(lt,eHo),e(lt,Ige),e(Ige,oHo),e(lt,rHo),e(lt,Kd),e(Kd,tHo),e(Kd,qge),e(qge,aHo),e(Kd,nHo),e(Kd,ZG),e(ZG,sHo),e(Kd,lHo),e(lt,iHo),e(lt,Nge),e(Nge,dHo),e(lt,cHo),g(Aw,lt,null),e(gr,fHo),e(gr,eo),g(yw,eo,null),e(eo,mHo),e(eo,jge),e(jge,gHo),e(eo,hHo),e(eo,dn),e(dn,pHo),e(dn,Dge),e(Dge,_Ho),e(dn,uHo),e(dn,Gge),e(Gge,bHo),e(dn,vHo),e(dn,Oge),e(Oge,FHo),e(dn,THo),e(eo,MHo),e(eo,cn),e(cn,lF),e(lF,Vge),e(Vge,EHo),e(lF,CHo),e(lF,eO),e(eO,wHo),e(lF,AHo),e(cn,yHo),e(cn,iF),e(iF,Xge),e(Xge,LHo),e(iF,xHo),e(iF,oO),e(oO,kHo),e(iF,SHo),e(cn,RHo),e(cn,dF),e(dF,zge),e(zge,BHo),e(dF,PHo),e(dF,rO),e(rO,$Ho),e(dF,IHo),e(cn,qHo),e(cn,cF),e(cF,Qge),e(Qge,NHo),e(cF,jHo),e(cF,tO),e(tO,DHo),e(cF,GHo),e(eo,OHo),e(eo,fF),e(fF,VHo),e(fF,Wge),e(Wge,XHo),e(fF,zHo),e(fF,Hge),e(Hge,QHo),e(eo,WHo),e(eo,Uge),e(Uge,HHo),e(eo,UHo),g(Lw,eo,null),b(c,IBe,u),b(c,Zd,u),e(Zd,mF),e(mF,Jge),g(xw,Jge,null),e(Zd,JHo),e(Zd,Yge),e(Yge,YHo),b(c,qBe,u),b(c,hr,u),g(kw,hr,null),e(hr,KHo),e(hr,ec),e(ec,ZHo),e(ec,aO),e(aO,eUo),e(ec,oUo),e(ec,nO),e(nO,rUo),e(ec,tUo),e(hr,aUo),e(hr,Sw),e(Sw,nUo),e(Sw,Kge),e(Kge,sUo),e(Sw,lUo),e(hr,iUo),e(hr,it),g(Rw,it,null),e(it,dUo),e(it,Zge),e(Zge,cUo),e(it,fUo),e(it,oc),e(oc,mUo),e(oc,ehe),e(ehe,gUo),e(oc,hUo),e(oc,sO),e(sO,pUo),e(oc,_Uo),e(it,uUo),e(it,ohe),e(ohe,bUo),e(it,vUo),g(Bw,it,null),e(hr,FUo),e(hr,oo),g(Pw,oo,null),e(oo,TUo),e(oo,rhe),e(rhe,MUo),e(oo,EUo),e(oo,fn),e(fn,CUo),e(fn,the),e(the,wUo),e(fn,AUo),e(fn,ahe),e(ahe,yUo),e(fn,LUo),e(fn,nhe),e(nhe,xUo),e(fn,kUo),e(oo,SUo),e(oo,rc),e(rc,gF),e(gF,she),e(she,RUo),e(gF,BUo),e(gF,lO),e(lO,PUo),e(gF,$Uo),e(rc,IUo),e(rc,hF),e(hF,lhe),e(lhe,qUo),e(hF,NUo),e(hF,iO),e(iO,jUo),e(hF,DUo),e(rc,GUo),e(rc,pF),e(pF,ihe),e(ihe,OUo),e(pF,VUo),e(pF,dO),e(dO,XUo),e(pF,zUo),e(oo,QUo),e(oo,_F),e(_F,WUo),e(_F,dhe),e(dhe,HUo),e(_F,UUo),e(_F,che),e(che,JUo),e(oo,YUo),e(oo,fhe),e(fhe,KUo),e(oo,ZUo),g($w,oo,null),b(c,NBe,u),b(c,tc,u),e(tc,uF),e(uF,mhe),g(Iw,mhe,null),e(tc,eJo),e(tc,ghe),e(ghe,oJo),b(c,jBe,u),b(c,pr,u),g(qw,pr,null),e(pr,rJo),e(pr,ac),e(ac,tJo),e(ac,cO),e(cO,aJo),e(ac,nJo),e(ac,fO),e(fO,sJo),e(ac,lJo),e(pr,iJo),e(pr,Nw),e(Nw,dJo),e(Nw,hhe),e(hhe,cJo),e(Nw,fJo),e(pr,mJo),e(pr,dt),g(jw,dt,null),e(dt,gJo),e(dt,phe),e(phe,hJo),e(dt,pJo),e(dt,nc),e(nc,_Jo),e(nc,_he),e(_he,uJo),e(nc,bJo),e(nc,mO),e(mO,vJo),e(nc,FJo),e(dt,TJo),e(dt,uhe),e(uhe,MJo),e(dt,EJo),g(Dw,dt,null),e(pr,CJo),e(pr,ro),g(Gw,ro,null),e(ro,wJo),e(ro,bhe),e(bhe,AJo),e(ro,yJo),e(ro,mn),e(mn,LJo),e(mn,vhe),e(vhe,xJo),e(mn,kJo),e(mn,Fhe),e(Fhe,SJo),e(mn,RJo),e(mn,The),e(The,BJo),e(mn,PJo),e(ro,$Jo),e(ro,Mhe),e(Mhe,bF),e(bF,Ehe),e(Ehe,IJo),e(bF,qJo),e(bF,gO),e(gO,NJo),e(bF,jJo),e(ro,DJo),e(ro,vF),e(vF,GJo),e(vF,Che),e(Che,OJo),e(vF,VJo),e(vF,whe),e(whe,XJo),e(ro,zJo),e(ro,Ahe),e(Ahe,QJo),e(ro,WJo),g(Ow,ro,null),b(c,DBe,u),b(c,sc,u),e(sc,FF),e(FF,yhe),g(Vw,yhe,null),e(sc,HJo),e(sc,Lhe),e(Lhe,UJo),b(c,GBe,u),b(c,_r,u),g(Xw,_r,null),e(_r,JJo),e(_r,lc),e(lc,YJo),e(lc,hO),e(hO,KJo),e(lc,ZJo),e(lc,pO),e(pO,eYo),e(lc,oYo),e(_r,rYo),e(_r,zw),e(zw,tYo),e(zw,xhe),e(xhe,aYo),e(zw,nYo),e(_r,sYo),e(_r,ct),g(Qw,ct,null),e(ct,lYo),e(ct,khe),e(khe,iYo),e(ct,dYo),e(ct,ic),e(ic,cYo),e(ic,She),e(She,fYo),e(ic,mYo),e(ic,_O),e(_O,gYo),e(ic,hYo),e(ct,pYo),e(ct,Rhe),e(Rhe,_Yo),e(ct,uYo),g(Ww,ct,null),e(_r,bYo),e(_r,to),g(Hw,to,null),e(to,vYo),e(to,Bhe),e(Bhe,FYo),e(to,TYo),e(to,gn),e(gn,MYo),e(gn,Phe),e(Phe,EYo),e(gn,CYo),e(gn,$he),e($he,wYo),e(gn,AYo),e(gn,Ihe),e(Ihe,yYo),e(gn,LYo),e(to,xYo),e(to,qhe),e(qhe,TF),e(TF,Nhe),e(Nhe,kYo),e(TF,SYo),e(TF,uO),e(uO,RYo),e(TF,BYo),e(to,PYo),e(to,MF),e(MF,$Yo),e(MF,jhe),e(jhe,IYo),e(MF,qYo),e(MF,Dhe),e(Dhe,NYo),e(to,jYo),e(to,Ghe),e(Ghe,DYo),e(to,GYo),g(Uw,to,null),b(c,OBe,u),b(c,dc,u),e(dc,EF),e(EF,Ohe),g(Jw,Ohe,null),e(dc,OYo),e(dc,Vhe),e(Vhe,VYo),b(c,VBe,u),b(c,ur,u),g(Yw,ur,null),e(ur,XYo),e(ur,cc),e(cc,zYo),e(cc,bO),e(bO,QYo),e(cc,WYo),e(cc,vO),e(vO,HYo),e(cc,UYo),e(ur,JYo),e(ur,Kw),e(Kw,YYo),e(Kw,Xhe),e(Xhe,KYo),e(Kw,ZYo),e(ur,eKo),e(ur,ft),g(Zw,ft,null),e(ft,oKo),e(ft,zhe),e(zhe,rKo),e(ft,tKo),e(ft,fc),e(fc,aKo),e(fc,Qhe),e(Qhe,nKo),e(fc,sKo),e(fc,FO),e(FO,lKo),e(fc,iKo),e(ft,dKo),e(ft,Whe),e(Whe,cKo),e(ft,fKo),g(eA,ft,null),e(ur,mKo),e(ur,ao),g(oA,ao,null),e(ao,gKo),e(ao,Hhe),e(Hhe,hKo),e(ao,pKo),e(ao,hn),e(hn,_Ko),e(hn,Uhe),e(Uhe,uKo),e(hn,bKo),e(hn,Jhe),e(Jhe,vKo),e(hn,FKo),e(hn,Yhe),e(Yhe,TKo),e(hn,MKo),e(ao,EKo),e(ao,pn),e(pn,CF),e(CF,Khe),e(Khe,CKo),e(CF,wKo),e(CF,TO),e(TO,AKo),e(CF,yKo),e(pn,LKo),e(pn,wF),e(wF,Zhe),e(Zhe,xKo),e(wF,kKo),e(wF,MO),e(MO,SKo),e(wF,RKo),e(pn,BKo),e(pn,AF),e(AF,epe),e(epe,PKo),e(AF,$Ko),e(AF,EO),e(EO,IKo),e(AF,qKo),e(pn,NKo),e(pn,yF),e(yF,ope),e(ope,jKo),e(yF,DKo),e(yF,CO),e(CO,GKo),e(yF,OKo),e(ao,VKo),e(ao,LF),e(LF,XKo),e(LF,rpe),e(rpe,zKo),e(LF,QKo),e(LF,tpe),e(tpe,WKo),e(ao,HKo),e(ao,ape),e(ape,UKo),e(ao,JKo),g(rA,ao,null),b(c,XBe,u),b(c,mc,u),e(mc,xF),e(xF,npe),g(tA,npe,null),e(mc,YKo),e(mc,spe),e(spe,KKo),b(c,zBe,u),b(c,br,u),g(aA,br,null),e(br,ZKo),e(br,gc),e(gc,eZo),e(gc,wO),e(wO,oZo),e(gc,rZo),e(gc,AO),e(AO,tZo),e(gc,aZo),e(br,nZo),e(br,nA),e(nA,sZo),e(nA,lpe),e(lpe,lZo),e(nA,iZo),e(br,dZo),e(br,mt),g(sA,mt,null),e(mt,cZo),e(mt,ipe),e(ipe,fZo),e(mt,mZo),e(mt,hc),e(hc,gZo),e(hc,dpe),e(dpe,hZo),e(hc,pZo),e(hc,yO),e(yO,_Zo),e(hc,uZo),e(mt,bZo),e(mt,cpe),e(cpe,vZo),e(mt,FZo),g(lA,mt,null),e(br,TZo),e(br,no),g(iA,no,null),e(no,MZo),e(no,fpe),e(fpe,EZo),e(no,CZo),e(no,_n),e(_n,wZo),e(_n,mpe),e(mpe,AZo),e(_n,yZo),e(_n,gpe),e(gpe,LZo),e(_n,xZo),e(_n,hpe),e(hpe,kZo),e(_n,SZo),e(no,RZo),e(no,ppe),e(ppe,kF),e(kF,_pe),e(_pe,BZo),e(kF,PZo),e(kF,LO),e(LO,$Zo),e(kF,IZo),e(no,qZo),e(no,SF),e(SF,NZo),e(SF,upe),e(upe,jZo),e(SF,DZo),e(SF,bpe),e(bpe,GZo),e(no,OZo),e(no,vpe),e(vpe,VZo),e(no,XZo),g(dA,no,null),b(c,QBe,u),b(c,pc,u),e(pc,RF),e(RF,Fpe),g(cA,Fpe,null),e(pc,zZo),e(pc,Tpe),e(Tpe,QZo),b(c,WBe,u),b(c,vr,u),g(fA,vr,null),e(vr,WZo),e(vr,_c),e(_c,HZo),e(_c,xO),e(xO,UZo),e(_c,JZo),e(_c,kO),e(kO,YZo),e(_c,KZo),e(vr,ZZo),e(vr,mA),e(mA,eer),e(mA,Mpe),e(Mpe,oer),e(mA,rer),e(vr,ter),e(vr,gt),g(gA,gt,null),e(gt,aer),e(gt,Epe),e(Epe,ner),e(gt,ser),e(gt,uc),e(uc,ler),e(uc,Cpe),e(Cpe,ier),e(uc,der),e(uc,SO),e(SO,cer),e(uc,fer),e(gt,mer),e(gt,wpe),e(wpe,ger),e(gt,her),g(hA,gt,null),e(vr,per),e(vr,ho),g(pA,ho,null),e(ho,_er),e(ho,Ape),e(Ape,uer),e(ho,ber),e(ho,un),e(un,ver),e(un,ype),e(ype,Fer),e(un,Ter),e(un,Lpe),e(Lpe,Mer),e(un,Eer),e(un,xpe),e(xpe,Cer),e(un,wer),e(ho,Aer),e(ho,x),e(x,BF),e(BF,kpe),e(kpe,yer),e(BF,Ler),e(BF,RO),e(RO,xer),e(BF,ker),e(x,Ser),e(x,PF),e(PF,Spe),e(Spe,Rer),e(PF,Ber),e(PF,BO),e(BO,Per),e(PF,$er),e(x,Ier),e(x,$F),e($F,Rpe),e(Rpe,qer),e($F,Ner),e($F,PO),e(PO,jer),e($F,Der),e(x,Ger),e(x,IF),e(IF,Bpe),e(Bpe,Oer),e(IF,Ver),e(IF,$O),e($O,Xer),e(IF,zer),e(x,Qer),e(x,qF),e(qF,Ppe),e(Ppe,Wer),e(qF,Her),e(qF,IO),e(IO,Uer),e(qF,Jer),e(x,Yer),e(x,NF),e(NF,$pe),e($pe,Ker),e(NF,Zer),e(NF,qO),e(qO,eor),e(NF,oor),e(x,ror),e(x,jF),e(jF,Ipe),e(Ipe,tor),e(jF,aor),e(jF,NO),e(NO,nor),e(jF,sor),e(x,lor),e(x,DF),e(DF,qpe),e(qpe,ior),e(DF,dor),e(DF,jO),e(jO,cor),e(DF,mor),e(x,gor),e(x,GF),e(GF,Npe),e(Npe,hor),e(GF,por),e(GF,DO),e(DO,_or),e(GF,uor),e(x,bor),e(x,OF),e(OF,jpe),e(jpe,vor),e(OF,For),e(OF,GO),e(GO,Tor),e(OF,Mor),e(x,Eor),e(x,VF),e(VF,Dpe),e(Dpe,Cor),e(VF,wor),e(VF,OO),e(OO,Aor),e(VF,yor),e(x,Lor),e(x,XF),e(XF,Gpe),e(Gpe,xor),e(XF,kor),e(XF,VO),e(VO,Sor),e(XF,Ror),e(x,Bor),e(x,zF),e(zF,Ope),e(Ope,Por),e(zF,$or),e(zF,XO),e(XO,Ior),e(zF,qor),e(x,Nor),e(x,QF),e(QF,Vpe),e(Vpe,jor),e(QF,Dor),e(QF,zO),e(zO,Gor),e(QF,Oor),e(x,Vor),e(x,WF),e(WF,Xpe),e(Xpe,Xor),e(WF,zor),e(WF,QO),e(QO,Qor),e(WF,Wor),e(x,Hor),e(x,HF),e(HF,zpe),e(zpe,Uor),e(HF,Jor),e(HF,WO),e(WO,Yor),e(HF,Kor),e(x,Zor),e(x,Xs),e(Xs,Qpe),e(Qpe,err),e(Xs,orr),e(Xs,HO),e(HO,rrr),e(Xs,trr),e(Xs,UO),e(UO,arr),e(Xs,nrr),e(x,srr),e(x,UF),e(UF,Wpe),e(Wpe,lrr),e(UF,irr),e(UF,JO),e(JO,drr),e(UF,crr),e(x,frr),e(x,JF),e(JF,Hpe),e(Hpe,mrr),e(JF,grr),e(JF,YO),e(YO,hrr),e(JF,prr),e(x,_rr),e(x,YF),e(YF,Upe),e(Upe,urr),e(YF,brr),e(YF,KO),e(KO,vrr),e(YF,Frr),e(x,Trr),e(x,KF),e(KF,Jpe),e(Jpe,Mrr),e(KF,Err),e(KF,ZO),e(ZO,Crr),e(KF,wrr),e(x,Arr),e(x,ZF),e(ZF,Ype),e(Ype,yrr),e(ZF,Lrr),e(ZF,eV),e(eV,xrr),e(ZF,krr),e(x,Srr),e(x,eT),e(eT,Kpe),e(Kpe,Rrr),e(eT,Brr),e(eT,oV),e(oV,Prr),e(eT,$rr),e(x,Irr),e(x,oT),e(oT,Zpe),e(Zpe,qrr),e(oT,Nrr),e(oT,rV),e(rV,jrr),e(oT,Drr),e(x,Grr),e(x,rT),e(rT,e_e),e(e_e,Orr),e(rT,Vrr),e(rT,tV),e(tV,Xrr),e(rT,zrr),e(x,Qrr),e(x,tT),e(tT,o_e),e(o_e,Wrr),e(tT,Hrr),e(tT,aV),e(aV,Urr),e(tT,Jrr),e(x,Yrr),e(x,aT),e(aT,r_e),e(r_e,Krr),e(aT,Zrr),e(aT,nV),e(nV,etr),e(aT,otr),e(x,rtr),e(x,nT),e(nT,t_e),e(t_e,ttr),e(nT,atr),e(nT,sV),e(sV,ntr),e(nT,str),e(x,ltr),e(x,sT),e(sT,a_e),e(a_e,itr),e(sT,dtr),e(sT,lV),e(lV,ctr),e(sT,ftr),e(x,mtr),e(x,lT),e(lT,n_e),e(n_e,gtr),e(lT,htr),e(lT,iV),e(iV,ptr),e(lT,_tr),e(x,utr),e(x,iT),e(iT,s_e),e(s_e,btr),e(iT,vtr),e(iT,dV),e(dV,Ftr),e(iT,Ttr),e(x,Mtr),e(x,dT),e(dT,l_e),e(l_e,Etr),e(dT,Ctr),e(dT,cV),e(cV,wtr),e(dT,Atr),e(x,ytr),e(x,cT),e(cT,i_e),e(i_e,Ltr),e(cT,xtr),e(cT,fV),e(fV,ktr),e(cT,Str),e(x,Rtr),e(x,fT),e(fT,d_e),e(d_e,Btr),e(fT,Ptr),e(fT,mV),e(mV,$tr),e(fT,Itr),e(x,qtr),e(x,mT),e(mT,c_e),e(c_e,Ntr),e(mT,jtr),e(mT,gV),e(gV,Dtr),e(mT,Gtr),e(x,Otr),e(x,gT),e(gT,f_e),e(f_e,Vtr),e(gT,Xtr),e(gT,hV),e(hV,ztr),e(gT,Qtr),e(x,Wtr),e(x,hT),e(hT,m_e),e(m_e,Htr),e(hT,Utr),e(hT,pV),e(pV,Jtr),e(hT,Ytr),e(x,Ktr),e(x,pT),e(pT,g_e),e(g_e,Ztr),e(pT,ear),e(pT,_V),e(_V,oar),e(pT,rar),e(x,tar),e(x,_T),e(_T,h_e),e(h_e,aar),e(_T,nar),e(_T,uV),e(uV,sar),e(_T,lar),e(x,iar),e(x,uT),e(uT,p_e),e(p_e,dar),e(uT,car),e(uT,bV),e(bV,far),e(uT,mar),e(x,gar),e(x,bT),e(bT,__e),e(__e,har),e(bT,par),e(bT,vV),e(vV,_ar),e(bT,uar),e(x,bar),e(x,vT),e(vT,u_e),e(u_e,Far),e(vT,Tar),e(vT,FV),e(FV,Mar),e(vT,Ear),e(x,Car),e(x,FT),e(FT,b_e),e(b_e,war),e(FT,Aar),e(FT,TV),e(TV,yar),e(FT,Lar),e(x,xar),e(x,TT),e(TT,v_e),e(v_e,kar),e(TT,Sar),e(TT,MV),e(MV,Rar),e(TT,Bar),e(ho,Par),e(ho,F_e),e(F_e,$ar),e(ho,Iar),g(_A,ho,null),b(c,HBe,u),b(c,bc,u),e(bc,MT),e(MT,T_e),g(uA,T_e,null),e(bc,qar),e(bc,M_e),e(M_e,Nar),b(c,UBe,u),b(c,Fr,u),g(bA,Fr,null),e(Fr,jar),e(Fr,vc),e(vc,Dar),e(vc,EV),e(EV,Gar),e(vc,Oar),e(vc,CV),e(CV,Var),e(vc,Xar),e(Fr,zar),e(Fr,vA),e(vA,Qar),e(vA,E_e),e(E_e,War),e(vA,Har),e(Fr,Uar),e(Fr,ht),g(FA,ht,null),e(ht,Jar),e(ht,C_e),e(C_e,Yar),e(ht,Kar),e(ht,Fc),e(Fc,Zar),e(Fc,w_e),e(w_e,enr),e(Fc,onr),e(Fc,wV),e(wV,rnr),e(Fc,tnr),e(ht,anr),e(ht,A_e),e(A_e,nnr),e(ht,snr),g(TA,ht,null),e(Fr,lnr),e(Fr,po),g(MA,po,null),e(po,inr),e(po,y_e),e(y_e,dnr),e(po,cnr),e(po,bn),e(bn,fnr),e(bn,L_e),e(L_e,mnr),e(bn,gnr),e(bn,x_e),e(x_e,hnr),e(bn,pnr),e(bn,k_e),e(k_e,_nr),e(bn,unr),e(po,bnr),e(po,H),e(H,ET),e(ET,S_e),e(S_e,vnr),e(ET,Fnr),e(ET,AV),e(AV,Tnr),e(ET,Mnr),e(H,Enr),e(H,CT),e(CT,R_e),e(R_e,Cnr),e(CT,wnr),e(CT,yV),e(yV,Anr),e(CT,ynr),e(H,Lnr),e(H,wT),e(wT,B_e),e(B_e,xnr),e(wT,knr),e(wT,LV),e(LV,Snr),e(wT,Rnr),e(H,Bnr),e(H,AT),e(AT,P_e),e(P_e,Pnr),e(AT,$nr),e(AT,xV),e(xV,Inr),e(AT,qnr),e(H,Nnr),e(H,yT),e(yT,$_e),e($_e,jnr),e(yT,Dnr),e(yT,kV),e(kV,Gnr),e(yT,Onr),e(H,Vnr),e(H,LT),e(LT,I_e),e(I_e,Xnr),e(LT,znr),e(LT,SV),e(SV,Qnr),e(LT,Wnr),e(H,Hnr),e(H,xT),e(xT,q_e),e(q_e,Unr),e(xT,Jnr),e(xT,RV),e(RV,Ynr),e(xT,Knr),e(H,Znr),e(H,kT),e(kT,N_e),e(N_e,esr),e(kT,osr),e(kT,BV),e(BV,rsr),e(kT,tsr),e(H,asr),e(H,ST),e(ST,j_e),e(j_e,nsr),e(ST,ssr),e(ST,PV),e(PV,lsr),e(ST,isr),e(H,dsr),e(H,RT),e(RT,D_e),e(D_e,csr),e(RT,fsr),e(RT,$V),e($V,msr),e(RT,gsr),e(H,hsr),e(H,BT),e(BT,G_e),e(G_e,psr),e(BT,_sr),e(BT,IV),e(IV,usr),e(BT,bsr),e(H,vsr),e(H,PT),e(PT,O_e),e(O_e,Fsr),e(PT,Tsr),e(PT,qV),e(qV,Msr),e(PT,Esr),e(H,Csr),e(H,$T),e($T,V_e),e(V_e,wsr),e($T,Asr),e($T,NV),e(NV,ysr),e($T,Lsr),e(H,xsr),e(H,IT),e(IT,X_e),e(X_e,ksr),e(IT,Ssr),e(IT,jV),e(jV,Rsr),e(IT,Bsr),e(H,Psr),e(H,qT),e(qT,z_e),e(z_e,$sr),e(qT,Isr),e(qT,DV),e(DV,qsr),e(qT,Nsr),e(H,jsr),e(H,NT),e(NT,Q_e),e(Q_e,Dsr),e(NT,Gsr),e(NT,GV),e(GV,Osr),e(NT,Vsr),e(H,Xsr),e(H,jT),e(jT,W_e),e(W_e,zsr),e(jT,Qsr),e(jT,OV),e(OV,Wsr),e(jT,Hsr),e(H,Usr),e(H,DT),e(DT,H_e),e(H_e,Jsr),e(DT,Ysr),e(DT,VV),e(VV,Ksr),e(DT,Zsr),e(H,elr),e(H,GT),e(GT,U_e),e(U_e,olr),e(GT,rlr),e(GT,XV),e(XV,tlr),e(GT,alr),e(H,nlr),e(H,OT),e(OT,J_e),e(J_e,slr),e(OT,llr),e(OT,zV),e(zV,ilr),e(OT,dlr),e(H,clr),e(H,VT),e(VT,Y_e),e(Y_e,flr),e(VT,mlr),e(VT,QV),e(QV,glr),e(VT,hlr),e(H,plr),e(H,XT),e(XT,K_e),e(K_e,_lr),e(XT,ulr),e(XT,WV),e(WV,blr),e(XT,vlr),e(H,Flr),e(H,zT),e(zT,Z_e),e(Z_e,Tlr),e(zT,Mlr),e(zT,HV),e(HV,Elr),e(zT,Clr),e(po,wlr),e(po,eue),e(eue,Alr),e(po,ylr),g(EA,po,null),b(c,JBe,u),b(c,Tc,u),e(Tc,QT),e(QT,oue),g(CA,oue,null),e(Tc,Llr),e(Tc,rue),e(rue,xlr),b(c,YBe,u),b(c,Tr,u),g(wA,Tr,null),e(Tr,klr),e(Tr,Mc),e(Mc,Slr),e(Mc,UV),e(UV,Rlr),e(Mc,Blr),e(Mc,JV),e(JV,Plr),e(Mc,$lr),e(Tr,Ilr),e(Tr,AA),e(AA,qlr),e(AA,tue),e(tue,Nlr),e(AA,jlr),e(Tr,Dlr),e(Tr,pt),g(yA,pt,null),e(pt,Glr),e(pt,aue),e(aue,Olr),e(pt,Vlr),e(pt,Ec),e(Ec,Xlr),e(Ec,nue),e(nue,zlr),e(Ec,Qlr),e(Ec,YV),e(YV,Wlr),e(Ec,Hlr),e(pt,Ulr),e(pt,sue),e(sue,Jlr),e(pt,Ylr),g(LA,pt,null),e(Tr,Klr),e(Tr,_o),g(xA,_o,null),e(_o,Zlr),e(_o,lue),e(lue,eir),e(_o,oir),e(_o,vn),e(vn,rir),e(vn,iue),e(iue,tir),e(vn,air),e(vn,due),e(due,nir),e(vn,sir),e(vn,cue),e(cue,lir),e(vn,iir),e(_o,dir),e(_o,fe),e(fe,WT),e(WT,fue),e(fue,cir),e(WT,fir),e(WT,KV),e(KV,mir),e(WT,gir),e(fe,hir),e(fe,HT),e(HT,mue),e(mue,pir),e(HT,_ir),e(HT,ZV),e(ZV,uir),e(HT,bir),e(fe,vir),e(fe,UT),e(UT,gue),e(gue,Fir),e(UT,Tir),e(UT,eX),e(eX,Mir),e(UT,Eir),e(fe,Cir),e(fe,JT),e(JT,hue),e(hue,wir),e(JT,Air),e(JT,oX),e(oX,yir),e(JT,Lir),e(fe,xir),e(fe,YT),e(YT,pue),e(pue,kir),e(YT,Sir),e(YT,rX),e(rX,Rir),e(YT,Bir),e(fe,Pir),e(fe,KT),e(KT,_ue),e(_ue,$ir),e(KT,Iir),e(KT,tX),e(tX,qir),e(KT,Nir),e(fe,jir),e(fe,ZT),e(ZT,uue),e(uue,Dir),e(ZT,Gir),e(ZT,aX),e(aX,Oir),e(ZT,Vir),e(fe,Xir),e(fe,e8),e(e8,bue),e(bue,zir),e(e8,Qir),e(e8,nX),e(nX,Wir),e(e8,Hir),e(fe,Uir),e(fe,o8),e(o8,vue),e(vue,Jir),e(o8,Yir),e(o8,sX),e(sX,Kir),e(o8,Zir),e(fe,edr),e(fe,r8),e(r8,Fue),e(Fue,odr),e(r8,rdr),e(r8,lX),e(lX,tdr),e(r8,adr),e(fe,ndr),e(fe,t8),e(t8,Tue),e(Tue,sdr),e(t8,ldr),e(t8,iX),e(iX,idr),e(t8,ddr),e(fe,cdr),e(fe,a8),e(a8,Mue),e(Mue,fdr),e(a8,mdr),e(a8,dX),e(dX,gdr),e(a8,hdr),e(_o,pdr),e(_o,Eue),e(Eue,_dr),e(_o,udr),g(kA,_o,null),b(c,KBe,u),b(c,Cc,u),e(Cc,n8),e(n8,Cue),g(SA,Cue,null),e(Cc,bdr),e(Cc,wue),e(wue,vdr),b(c,ZBe,u),b(c,Mr,u),g(RA,Mr,null),e(Mr,Fdr),e(Mr,wc),e(wc,Tdr),e(wc,cX),e(cX,Mdr),e(wc,Edr),e(wc,fX),e(fX,Cdr),e(wc,wdr),e(Mr,Adr),e(Mr,BA),e(BA,ydr),e(BA,Aue),e(Aue,Ldr),e(BA,xdr),e(Mr,kdr),e(Mr,_t),g(PA,_t,null),e(_t,Sdr),e(_t,yue),e(yue,Rdr),e(_t,Bdr),e(_t,Ac),e(Ac,Pdr),e(Ac,Lue),e(Lue,$dr),e(Ac,Idr),e(Ac,mX),e(mX,qdr),e(Ac,Ndr),e(_t,jdr),e(_t,xue),e(xue,Ddr),e(_t,Gdr),g($A,_t,null),e(Mr,Odr),e(Mr,uo),g(IA,uo,null),e(uo,Vdr),e(uo,kue),e(kue,Xdr),e(uo,zdr),e(uo,Fn),e(Fn,Qdr),e(Fn,Sue),e(Sue,Wdr),e(Fn,Hdr),e(Fn,Rue),e(Rue,Udr),e(Fn,Jdr),e(Fn,Bue),e(Bue,Ydr),e(Fn,Kdr),e(uo,Zdr),e(uo,qA),e(qA,s8),e(s8,Pue),e(Pue,ecr),e(s8,ocr),e(s8,gX),e(gX,rcr),e(s8,tcr),e(qA,acr),e(qA,l8),e(l8,$ue),e($ue,ncr),e(l8,scr),e(l8,hX),e(hX,lcr),e(l8,icr),e(uo,dcr),e(uo,Iue),e(Iue,ccr),e(uo,fcr),g(NA,uo,null),b(c,ePe,u),b(c,yc,u),e(yc,i8),e(i8,que),g(jA,que,null),e(yc,mcr),e(yc,Nue),e(Nue,gcr),b(c,oPe,u),b(c,Er,u),g(DA,Er,null),e(Er,hcr),e(Er,Lc),e(Lc,pcr),e(Lc,pX),e(pX,_cr),e(Lc,ucr),e(Lc,_X),e(_X,bcr),e(Lc,vcr),e(Er,Fcr),e(Er,GA),e(GA,Tcr),e(GA,jue),e(jue,Mcr),e(GA,Ecr),e(Er,Ccr),e(Er,ut),g(OA,ut,null),e(ut,wcr),e(ut,Due),e(Due,Acr),e(ut,ycr),e(ut,xc),e(xc,Lcr),e(xc,Gue),e(Gue,xcr),e(xc,kcr),e(xc,uX),e(uX,Scr),e(xc,Rcr),e(ut,Bcr),e(ut,Oue),e(Oue,Pcr),e(ut,$cr),g(VA,ut,null),e(Er,Icr),e(Er,bo),g(XA,bo,null),e(bo,qcr),e(bo,Vue),e(Vue,Ncr),e(bo,jcr),e(bo,Tn),e(Tn,Dcr),e(Tn,Xue),e(Xue,Gcr),e(Tn,Ocr),e(Tn,zue),e(zue,Vcr),e(Tn,Xcr),e(Tn,Que),e(Que,zcr),e(Tn,Qcr),e(bo,Wcr),e(bo,Y),e(Y,d8),e(d8,Wue),e(Wue,Hcr),e(d8,Ucr),e(d8,bX),e(bX,Jcr),e(d8,Ycr),e(Y,Kcr),e(Y,c8),e(c8,Hue),e(Hue,Zcr),e(c8,efr),e(c8,vX),e(vX,ofr),e(c8,rfr),e(Y,tfr),e(Y,f8),e(f8,Uue),e(Uue,afr),e(f8,nfr),e(f8,FX),e(FX,sfr),e(f8,lfr),e(Y,ifr),e(Y,m8),e(m8,Jue),e(Jue,dfr),e(m8,cfr),e(m8,TX),e(TX,ffr),e(m8,mfr),e(Y,gfr),e(Y,g8),e(g8,Yue),e(Yue,hfr),e(g8,pfr),e(g8,MX),e(MX,_fr),e(g8,ufr),e(Y,bfr),e(Y,h8),e(h8,Kue),e(Kue,vfr),e(h8,Ffr),e(h8,EX),e(EX,Tfr),e(h8,Mfr),e(Y,Efr),e(Y,p8),e(p8,Zue),e(Zue,Cfr),e(p8,wfr),e(p8,CX),e(CX,Afr),e(p8,yfr),e(Y,Lfr),e(Y,_8),e(_8,e1e),e(e1e,xfr),e(_8,kfr),e(_8,wX),e(wX,Sfr),e(_8,Rfr),e(Y,Bfr),e(Y,u8),e(u8,o1e),e(o1e,Pfr),e(u8,$fr),e(u8,AX),e(AX,Ifr),e(u8,qfr),e(Y,Nfr),e(Y,b8),e(b8,r1e),e(r1e,jfr),e(b8,Dfr),e(b8,yX),e(yX,Gfr),e(b8,Ofr),e(Y,Vfr),e(Y,v8),e(v8,t1e),e(t1e,Xfr),e(v8,zfr),e(v8,LX),e(LX,Qfr),e(v8,Wfr),e(Y,Hfr),e(Y,F8),e(F8,a1e),e(a1e,Ufr),e(F8,Jfr),e(F8,xX),e(xX,Yfr),e(F8,Kfr),e(Y,Zfr),e(Y,T8),e(T8,n1e),e(n1e,emr),e(T8,omr),e(T8,kX),e(kX,rmr),e(T8,tmr),e(Y,amr),e(Y,M8),e(M8,s1e),e(s1e,nmr),e(M8,smr),e(M8,SX),e(SX,lmr),e(M8,imr),e(Y,dmr),e(Y,E8),e(E8,l1e),e(l1e,cmr),e(E8,fmr),e(E8,RX),e(RX,mmr),e(E8,gmr),e(Y,hmr),e(Y,C8),e(C8,i1e),e(i1e,pmr),e(C8,_mr),e(C8,BX),e(BX,umr),e(C8,bmr),e(Y,vmr),e(Y,w8),e(w8,d1e),e(d1e,Fmr),e(w8,Tmr),e(w8,PX),e(PX,Mmr),e(w8,Emr),e(Y,Cmr),e(Y,A8),e(A8,c1e),e(c1e,wmr),e(A8,Amr),e(A8,$X),e($X,ymr),e(A8,Lmr),e(Y,xmr),e(Y,y8),e(y8,f1e),e(f1e,kmr),e(y8,Smr),e(y8,IX),e(IX,Rmr),e(y8,Bmr),e(Y,Pmr),e(Y,L8),e(L8,m1e),e(m1e,$mr),e(L8,Imr),e(L8,qX),e(qX,qmr),e(L8,Nmr),e(bo,jmr),e(bo,g1e),e(g1e,Dmr),e(bo,Gmr),g(zA,bo,null),b(c,rPe,u),b(c,kc,u),e(kc,x8),e(x8,h1e),g(QA,h1e,null),e(kc,Omr),e(kc,p1e),e(p1e,Vmr),b(c,tPe,u),b(c,Cr,u),g(WA,Cr,null),e(Cr,Xmr),e(Cr,Sc),e(Sc,zmr),e(Sc,NX),e(NX,Qmr),e(Sc,Wmr),e(Sc,jX),e(jX,Hmr),e(Sc,Umr),e(Cr,Jmr),e(Cr,HA),e(HA,Ymr),e(HA,_1e),e(_1e,Kmr),e(HA,Zmr),e(Cr,egr),e(Cr,bt),g(UA,bt,null),e(bt,ogr),e(bt,u1e),e(u1e,rgr),e(bt,tgr),e(bt,Rc),e(Rc,agr),e(Rc,b1e),e(b1e,ngr),e(Rc,sgr),e(Rc,DX),e(DX,lgr),e(Rc,igr),e(bt,dgr),e(bt,v1e),e(v1e,cgr),e(bt,fgr),g(JA,bt,null),e(Cr,mgr),e(Cr,vo),g(YA,vo,null),e(vo,ggr),e(vo,F1e),e(F1e,hgr),e(vo,pgr),e(vo,Mn),e(Mn,_gr),e(Mn,T1e),e(T1e,ugr),e(Mn,bgr),e(Mn,M1e),e(M1e,vgr),e(Mn,Fgr),e(Mn,E1e),e(E1e,Tgr),e(Mn,Mgr),e(vo,Egr),e(vo,be),e(be,k8),e(k8,C1e),e(C1e,Cgr),e(k8,wgr),e(k8,GX),e(GX,Agr),e(k8,ygr),e(be,Lgr),e(be,S8),e(S8,w1e),e(w1e,xgr),e(S8,kgr),e(S8,OX),e(OX,Sgr),e(S8,Rgr),e(be,Bgr),e(be,R8),e(R8,A1e),e(A1e,Pgr),e(R8,$gr),e(R8,VX),e(VX,Igr),e(R8,qgr),e(be,Ngr),e(be,B8),e(B8,y1e),e(y1e,jgr),e(B8,Dgr),e(B8,XX),e(XX,Ggr),e(B8,Ogr),e(be,Vgr),e(be,P8),e(P8,L1e),e(L1e,Xgr),e(P8,zgr),e(P8,zX),e(zX,Qgr),e(P8,Wgr),e(be,Hgr),e(be,$8),e($8,x1e),e(x1e,Ugr),e($8,Jgr),e($8,QX),e(QX,Ygr),e($8,Kgr),e(be,Zgr),e(be,I8),e(I8,k1e),e(k1e,ehr),e(I8,ohr),e(I8,WX),e(WX,rhr),e(I8,thr),e(be,ahr),e(be,q8),e(q8,S1e),e(S1e,nhr),e(q8,shr),e(q8,HX),e(HX,lhr),e(q8,ihr),e(be,dhr),e(be,N8),e(N8,R1e),e(R1e,chr),e(N8,fhr),e(N8,UX),e(UX,mhr),e(N8,ghr),e(be,hhr),e(be,j8),e(j8,B1e),e(B1e,phr),e(j8,_hr),e(j8,JX),e(JX,uhr),e(j8,bhr),e(vo,vhr),e(vo,P1e),e(P1e,Fhr),e(vo,Thr),g(KA,vo,null),b(c,aPe,u),b(c,Bc,u),e(Bc,D8),e(D8,$1e),g(ZA,$1e,null),e(Bc,Mhr),e(Bc,I1e),e(I1e,Ehr),b(c,nPe,u),b(c,wr,u),g(e0,wr,null),e(wr,Chr),e(wr,Pc),e(Pc,whr),e(Pc,YX),e(YX,Ahr),e(Pc,yhr),e(Pc,KX),e(KX,Lhr),e(Pc,xhr),e(wr,khr),e(wr,o0),e(o0,Shr),e(o0,q1e),e(q1e,Rhr),e(o0,Bhr),e(wr,Phr),e(wr,vt),g(r0,vt,null),e(vt,$hr),e(vt,N1e),e(N1e,Ihr),e(vt,qhr),e(vt,$c),e($c,Nhr),e($c,j1e),e(j1e,jhr),e($c,Dhr),e($c,ZX),e(ZX,Ghr),e($c,Ohr),e(vt,Vhr),e(vt,D1e),e(D1e,Xhr),e(vt,zhr),g(t0,vt,null),e(wr,Qhr),e(wr,Fo),g(a0,Fo,null),e(Fo,Whr),e(Fo,G1e),e(G1e,Hhr),e(Fo,Uhr),e(Fo,En),e(En,Jhr),e(En,O1e),e(O1e,Yhr),e(En,Khr),e(En,V1e),e(V1e,Zhr),e(En,epr),e(En,X1e),e(X1e,opr),e(En,rpr),e(Fo,tpr),e(Fo,V),e(V,G8),e(G8,z1e),e(z1e,apr),e(G8,npr),e(G8,ez),e(ez,spr),e(G8,lpr),e(V,ipr),e(V,O8),e(O8,Q1e),e(Q1e,dpr),e(O8,cpr),e(O8,oz),e(oz,fpr),e(O8,mpr),e(V,gpr),e(V,V8),e(V8,W1e),e(W1e,hpr),e(V8,ppr),e(V8,rz),e(rz,_pr),e(V8,upr),e(V,bpr),e(V,X8),e(X8,H1e),e(H1e,vpr),e(X8,Fpr),e(X8,tz),e(tz,Tpr),e(X8,Mpr),e(V,Epr),e(V,z8),e(z8,U1e),e(U1e,Cpr),e(z8,wpr),e(z8,az),e(az,Apr),e(z8,ypr),e(V,Lpr),e(V,Q8),e(Q8,J1e),e(J1e,xpr),e(Q8,kpr),e(Q8,nz),e(nz,Spr),e(Q8,Rpr),e(V,Bpr),e(V,W8),e(W8,Y1e),e(Y1e,Ppr),e(W8,$pr),e(W8,sz),e(sz,Ipr),e(W8,qpr),e(V,Npr),e(V,H8),e(H8,K1e),e(K1e,jpr),e(H8,Dpr),e(H8,lz),e(lz,Gpr),e(H8,Opr),e(V,Vpr),e(V,U8),e(U8,Z1e),e(Z1e,Xpr),e(U8,zpr),e(U8,iz),e(iz,Qpr),e(U8,Wpr),e(V,Hpr),e(V,J8),e(J8,ebe),e(ebe,Upr),e(J8,Jpr),e(J8,dz),e(dz,Ypr),e(J8,Kpr),e(V,Zpr),e(V,Y8),e(Y8,obe),e(obe,e_r),e(Y8,o_r),e(Y8,cz),e(cz,r_r),e(Y8,t_r),e(V,a_r),e(V,K8),e(K8,rbe),e(rbe,n_r),e(K8,s_r),e(K8,fz),e(fz,l_r),e(K8,i_r),e(V,d_r),e(V,Z8),e(Z8,tbe),e(tbe,c_r),e(Z8,f_r),e(Z8,mz),e(mz,m_r),e(Z8,g_r),e(V,h_r),e(V,e7),e(e7,abe),e(abe,p_r),e(e7,__r),e(e7,gz),e(gz,u_r),e(e7,b_r),e(V,v_r),e(V,o7),e(o7,nbe),e(nbe,F_r),e(o7,T_r),e(o7,hz),e(hz,M_r),e(o7,E_r),e(V,C_r),e(V,r7),e(r7,sbe),e(sbe,w_r),e(r7,A_r),e(r7,pz),e(pz,y_r),e(r7,L_r),e(V,x_r),e(V,t7),e(t7,lbe),e(lbe,k_r),e(t7,S_r),e(t7,_z),e(_z,R_r),e(t7,B_r),e(V,P_r),e(V,a7),e(a7,ibe),e(ibe,$_r),e(a7,I_r),e(a7,uz),e(uz,q_r),e(a7,N_r),e(V,j_r),e(V,n7),e(n7,dbe),e(dbe,D_r),e(n7,G_r),e(n7,bz),e(bz,O_r),e(n7,V_r),e(V,X_r),e(V,s7),e(s7,cbe),e(cbe,z_r),e(s7,Q_r),e(s7,vz),e(vz,W_r),e(s7,H_r),e(V,U_r),e(V,l7),e(l7,fbe),e(fbe,J_r),e(l7,Y_r),e(l7,Fz),e(Fz,K_r),e(l7,Z_r),e(V,eur),e(V,i7),e(i7,mbe),e(mbe,our),e(i7,rur),e(i7,Tz),e(Tz,tur),e(i7,aur),e(V,nur),e(V,d7),e(d7,gbe),e(gbe,sur),e(d7,lur),e(d7,Mz),e(Mz,iur),e(d7,dur),e(V,cur),e(V,c7),e(c7,hbe),e(hbe,fur),e(c7,mur),e(c7,Ez),e(Ez,gur),e(c7,hur),e(V,pur),e(V,f7),e(f7,pbe),e(pbe,_ur),e(f7,uur),e(f7,Cz),e(Cz,bur),e(f7,vur),e(V,Fur),e(V,m7),e(m7,_be),e(_be,Tur),e(m7,Mur),e(m7,wz),e(wz,Eur),e(m7,Cur),e(Fo,wur),e(Fo,ube),e(ube,Aur),e(Fo,yur),g(n0,Fo,null),b(c,sPe,u),b(c,Ic,u),e(Ic,g7),e(g7,bbe),g(s0,bbe,null),e(Ic,Lur),e(Ic,vbe),e(vbe,xur),b(c,lPe,u),b(c,Ar,u),g(l0,Ar,null),e(Ar,kur),e(Ar,qc),e(qc,Sur),e(qc,Az),e(Az,Rur),e(qc,Bur),e(qc,yz),e(yz,Pur),e(qc,$ur),e(Ar,Iur),e(Ar,i0),e(i0,qur),e(i0,Fbe),e(Fbe,Nur),e(i0,jur),e(Ar,Dur),e(Ar,Ft),g(d0,Ft,null),e(Ft,Gur),e(Ft,Tbe),e(Tbe,Our),e(Ft,Vur),e(Ft,Nc),e(Nc,Xur),e(Nc,Mbe),e(Mbe,zur),e(Nc,Qur),e(Nc,Lz),e(Lz,Wur),e(Nc,Hur),e(Ft,Uur),e(Ft,Ebe),e(Ebe,Jur),e(Ft,Yur),g(c0,Ft,null),e(Ar,Kur),e(Ar,To),g(f0,To,null),e(To,Zur),e(To,Cbe),e(Cbe,e1r),e(To,o1r),e(To,Cn),e(Cn,r1r),e(Cn,wbe),e(wbe,t1r),e(Cn,a1r),e(Cn,Abe),e(Abe,n1r),e(Cn,s1r),e(Cn,ybe),e(ybe,l1r),e(Cn,i1r),e(To,d1r),e(To,se),e(se,h7),e(h7,Lbe),e(Lbe,c1r),e(h7,f1r),e(h7,xz),e(xz,m1r),e(h7,g1r),e(se,h1r),e(se,p7),e(p7,xbe),e(xbe,p1r),e(p7,_1r),e(p7,kz),e(kz,u1r),e(p7,b1r),e(se,v1r),e(se,_7),e(_7,kbe),e(kbe,F1r),e(_7,T1r),e(_7,Sz),e(Sz,M1r),e(_7,E1r),e(se,C1r),e(se,u7),e(u7,Sbe),e(Sbe,w1r),e(u7,A1r),e(u7,Rz),e(Rz,y1r),e(u7,L1r),e(se,x1r),e(se,b7),e(b7,Rbe),e(Rbe,k1r),e(b7,S1r),e(b7,Bz),e(Bz,R1r),e(b7,B1r),e(se,P1r),e(se,v7),e(v7,Bbe),e(Bbe,$1r),e(v7,I1r),e(v7,Pz),e(Pz,q1r),e(v7,N1r),e(se,j1r),e(se,F7),e(F7,Pbe),e(Pbe,D1r),e(F7,G1r),e(F7,$z),e($z,O1r),e(F7,V1r),e(se,X1r),e(se,T7),e(T7,$be),e($be,z1r),e(T7,Q1r),e(T7,Iz),e(Iz,W1r),e(T7,H1r),e(se,U1r),e(se,M7),e(M7,Ibe),e(Ibe,J1r),e(M7,Y1r),e(M7,qz),e(qz,K1r),e(M7,Z1r),e(se,ebr),e(se,E7),e(E7,qbe),e(qbe,obr),e(E7,rbr),e(E7,Nz),e(Nz,tbr),e(E7,abr),e(se,nbr),e(se,C7),e(C7,Nbe),e(Nbe,sbr),e(C7,lbr),e(C7,jz),e(jz,ibr),e(C7,dbr),e(se,cbr),e(se,w7),e(w7,jbe),e(jbe,fbr),e(w7,mbr),e(w7,Dz),e(Dz,gbr),e(w7,hbr),e(se,pbr),e(se,A7),e(A7,Dbe),e(Dbe,_br),e(A7,ubr),e(A7,Gz),e(Gz,bbr),e(A7,vbr),e(se,Fbr),e(se,y7),e(y7,Gbe),e(Gbe,Tbr),e(y7,Mbr),e(y7,Oz),e(Oz,Ebr),e(y7,Cbr),e(se,wbr),e(se,L7),e(L7,Obe),e(Obe,Abr),e(L7,ybr),e(L7,Vz),e(Vz,Lbr),e(L7,xbr),e(se,kbr),e(se,x7),e(x7,Vbe),e(Vbe,Sbr),e(x7,Rbr),e(x7,Xz),e(Xz,Bbr),e(x7,Pbr),e(se,$br),e(se,k7),e(k7,Xbe),e(Xbe,Ibr),e(k7,qbr),e(k7,zz),e(zz,Nbr),e(k7,jbr),e(To,Dbr),e(To,zbe),e(zbe,Gbr),e(To,Obr),g(m0,To,null),b(c,iPe,u),b(c,jc,u),e(jc,S7),e(S7,Qbe),g(g0,Qbe,null),e(jc,Vbr),e(jc,Wbe),e(Wbe,Xbr),b(c,dPe,u),b(c,yr,u),g(h0,yr,null),e(yr,zbr),e(yr,Dc),e(Dc,Qbr),e(Dc,Qz),e(Qz,Wbr),e(Dc,Hbr),e(Dc,Wz),e(Wz,Ubr),e(Dc,Jbr),e(yr,Ybr),e(yr,p0),e(p0,Kbr),e(p0,Hbe),e(Hbe,Zbr),e(p0,e2r),e(yr,o2r),e(yr,Tt),g(_0,Tt,null),e(Tt,r2r),e(Tt,Ube),e(Ube,t2r),e(Tt,a2r),e(Tt,Gc),e(Gc,n2r),e(Gc,Jbe),e(Jbe,s2r),e(Gc,l2r),e(Gc,Hz),e(Hz,i2r),e(Gc,d2r),e(Tt,c2r),e(Tt,Ybe),e(Ybe,f2r),e(Tt,m2r),g(u0,Tt,null),e(yr,g2r),e(yr,Mo),g(b0,Mo,null),e(Mo,h2r),e(Mo,Kbe),e(Kbe,p2r),e(Mo,_2r),e(Mo,wn),e(wn,u2r),e(wn,Zbe),e(Zbe,b2r),e(wn,v2r),e(wn,e2e),e(e2e,F2r),e(wn,T2r),e(wn,o2e),e(o2e,M2r),e(wn,E2r),e(Mo,C2r),e(Mo,r2e),e(r2e,R7),e(R7,t2e),e(t2e,w2r),e(R7,A2r),e(R7,Uz),e(Uz,y2r),e(R7,L2r),e(Mo,x2r),e(Mo,a2e),e(a2e,k2r),e(Mo,S2r),g(v0,Mo,null),b(c,cPe,u),b(c,Oc,u),e(Oc,B7),e(B7,n2e),g(F0,n2e,null),e(Oc,R2r),e(Oc,s2e),e(s2e,B2r),b(c,fPe,u),b(c,Lr,u),g(T0,Lr,null),e(Lr,P2r),e(Lr,Vc),e(Vc,$2r),e(Vc,Jz),e(Jz,I2r),e(Vc,q2r),e(Vc,Yz),e(Yz,N2r),e(Vc,j2r),e(Lr,D2r),e(Lr,M0),e(M0,G2r),e(M0,l2e),e(l2e,O2r),e(M0,V2r),e(Lr,X2r),e(Lr,Mt),g(E0,Mt,null),e(Mt,z2r),e(Mt,i2e),e(i2e,Q2r),e(Mt,W2r),e(Mt,Xc),e(Xc,H2r),e(Xc,d2e),e(d2e,U2r),e(Xc,J2r),e(Xc,Kz),e(Kz,Y2r),e(Xc,K2r),e(Mt,Z2r),e(Mt,c2e),e(c2e,e6r),e(Mt,o6r),g(C0,Mt,null),e(Lr,r6r),e(Lr,Eo),g(w0,Eo,null),e(Eo,t6r),e(Eo,f2e),e(f2e,a6r),e(Eo,n6r),e(Eo,An),e(An,s6r),e(An,m2e),e(m2e,l6r),e(An,i6r),e(An,g2e),e(g2e,d6r),e(An,c6r),e(An,h2e),e(h2e,f6r),e(An,m6r),e(Eo,g6r),e(Eo,K),e(K,P7),e(P7,p2e),e(p2e,h6r),e(P7,p6r),e(P7,Zz),e(Zz,_6r),e(P7,u6r),e(K,b6r),e(K,$7),e($7,_2e),e(_2e,v6r),e($7,F6r),e($7,eQ),e(eQ,T6r),e($7,M6r),e(K,E6r),e(K,I7),e(I7,u2e),e(u2e,C6r),e(I7,w6r),e(I7,oQ),e(oQ,A6r),e(I7,y6r),e(K,L6r),e(K,q7),e(q7,b2e),e(b2e,x6r),e(q7,k6r),e(q7,rQ),e(rQ,S6r),e(q7,R6r),e(K,B6r),e(K,N7),e(N7,v2e),e(v2e,P6r),e(N7,$6r),e(N7,tQ),e(tQ,I6r),e(N7,q6r),e(K,N6r),e(K,j7),e(j7,F2e),e(F2e,j6r),e(j7,D6r),e(j7,aQ),e(aQ,G6r),e(j7,O6r),e(K,V6r),e(K,D7),e(D7,T2e),e(T2e,X6r),e(D7,z6r),e(D7,nQ),e(nQ,Q6r),e(D7,W6r),e(K,H6r),e(K,G7),e(G7,M2e),e(M2e,U6r),e(G7,J6r),e(G7,sQ),e(sQ,Y6r),e(G7,K6r),e(K,Z6r),e(K,O7),e(O7,E2e),e(E2e,evr),e(O7,ovr),e(O7,lQ),e(lQ,rvr),e(O7,tvr),e(K,avr),e(K,V7),e(V7,C2e),e(C2e,nvr),e(V7,svr),e(V7,iQ),e(iQ,lvr),e(V7,ivr),e(K,dvr),e(K,X7),e(X7,w2e),e(w2e,cvr),e(X7,fvr),e(X7,dQ),e(dQ,mvr),e(X7,gvr),e(K,hvr),e(K,z7),e(z7,A2e),e(A2e,pvr),e(z7,_vr),e(z7,cQ),e(cQ,uvr),e(z7,bvr),e(K,vvr),e(K,Q7),e(Q7,y2e),e(y2e,Fvr),e(Q7,Tvr),e(Q7,fQ),e(fQ,Mvr),e(Q7,Evr),e(K,Cvr),e(K,W7),e(W7,L2e),e(L2e,wvr),e(W7,Avr),e(W7,mQ),e(mQ,yvr),e(W7,Lvr),e(K,xvr),e(K,H7),e(H7,x2e),e(x2e,kvr),e(H7,Svr),e(H7,gQ),e(gQ,Rvr),e(H7,Bvr),e(K,Pvr),e(K,U7),e(U7,k2e),e(k2e,$vr),e(U7,Ivr),e(U7,hQ),e(hQ,qvr),e(U7,Nvr),e(K,jvr),e(K,J7),e(J7,S2e),e(S2e,Dvr),e(J7,Gvr),e(J7,pQ),e(pQ,Ovr),e(J7,Vvr),e(K,Xvr),e(K,Y7),e(Y7,R2e),e(R2e,zvr),e(Y7,Qvr),e(Y7,_Q),e(_Q,Wvr),e(Y7,Hvr),e(K,Uvr),e(K,K7),e(K7,B2e),e(B2e,Jvr),e(K7,Yvr),e(K7,uQ),e(uQ,Kvr),e(K7,Zvr),e(K,eFr),e(K,Z7),e(Z7,P2e),e(P2e,oFr),e(Z7,rFr),e(Z7,bQ),e(bQ,tFr),e(Z7,aFr),e(Eo,nFr),e(Eo,$2e),e($2e,sFr),e(Eo,lFr),g(A0,Eo,null),b(c,mPe,u),b(c,zc,u),e(zc,eM),e(eM,I2e),g(y0,I2e,null),e(zc,iFr),e(zc,q2e),e(q2e,dFr),b(c,gPe,u),b(c,xr,u),g(L0,xr,null),e(xr,cFr),e(xr,Qc),e(Qc,fFr),e(Qc,vQ),e(vQ,mFr),e(Qc,gFr),e(Qc,FQ),e(FQ,hFr),e(Qc,pFr),e(xr,_Fr),e(xr,x0),e(x0,uFr),e(x0,N2e),e(N2e,bFr),e(x0,vFr),e(xr,FFr),e(xr,Et),g(k0,Et,null),e(Et,TFr),e(Et,j2e),e(j2e,MFr),e(Et,EFr),e(Et,Wc),e(Wc,CFr),e(Wc,D2e),e(D2e,wFr),e(Wc,AFr),e(Wc,TQ),e(TQ,yFr),e(Wc,LFr),e(Et,xFr),e(Et,G2e),e(G2e,kFr),e(Et,SFr),g(S0,Et,null),e(xr,RFr),e(xr,Co),g(R0,Co,null),e(Co,BFr),e(Co,O2e),e(O2e,PFr),e(Co,$Fr),e(Co,yn),e(yn,IFr),e(yn,V2e),e(V2e,qFr),e(yn,NFr),e(yn,X2e),e(X2e,jFr),e(yn,DFr),e(yn,z2e),e(z2e,GFr),e(yn,OFr),e(Co,VFr),e(Co,Z),e(Z,oM),e(oM,Q2e),e(Q2e,XFr),e(oM,zFr),e(oM,MQ),e(MQ,QFr),e(oM,WFr),e(Z,HFr),e(Z,rM),e(rM,W2e),e(W2e,UFr),e(rM,JFr),e(rM,EQ),e(EQ,YFr),e(rM,KFr),e(Z,ZFr),e(Z,tM),e(tM,H2e),e(H2e,eTr),e(tM,oTr),e(tM,CQ),e(CQ,rTr),e(tM,tTr),e(Z,aTr),e(Z,aM),e(aM,U2e),e(U2e,nTr),e(aM,sTr),e(aM,wQ),e(wQ,lTr),e(aM,iTr),e(Z,dTr),e(Z,nM),e(nM,J2e),e(J2e,cTr),e(nM,fTr),e(nM,AQ),e(AQ,mTr),e(nM,gTr),e(Z,hTr),e(Z,sM),e(sM,Y2e),e(Y2e,pTr),e(sM,_Tr),e(sM,yQ),e(yQ,uTr),e(sM,bTr),e(Z,vTr),e(Z,lM),e(lM,K2e),e(K2e,FTr),e(lM,TTr),e(lM,LQ),e(LQ,MTr),e(lM,ETr),e(Z,CTr),e(Z,iM),e(iM,Z2e),e(Z2e,wTr),e(iM,ATr),e(iM,xQ),e(xQ,yTr),e(iM,LTr),e(Z,xTr),e(Z,dM),e(dM,e6e),e(e6e,kTr),e(dM,STr),e(dM,kQ),e(kQ,RTr),e(dM,BTr),e(Z,PTr),e(Z,cM),e(cM,o6e),e(o6e,$Tr),e(cM,ITr),e(cM,SQ),e(SQ,qTr),e(cM,NTr),e(Z,jTr),e(Z,fM),e(fM,r6e),e(r6e,DTr),e(fM,GTr),e(fM,RQ),e(RQ,OTr),e(fM,VTr),e(Z,XTr),e(Z,mM),e(mM,t6e),e(t6e,zTr),e(mM,QTr),e(mM,BQ),e(BQ,WTr),e(mM,HTr),e(Z,UTr),e(Z,gM),e(gM,a6e),e(a6e,JTr),e(gM,YTr),e(gM,PQ),e(PQ,KTr),e(gM,ZTr),e(Z,e8r),e(Z,hM),e(hM,n6e),e(n6e,o8r),e(hM,r8r),e(hM,$Q),e($Q,t8r),e(hM,a8r),e(Z,n8r),e(Z,pM),e(pM,s6e),e(s6e,s8r),e(pM,l8r),e(pM,IQ),e(IQ,i8r),e(pM,d8r),e(Z,c8r),e(Z,_M),e(_M,l6e),e(l6e,f8r),e(_M,m8r),e(_M,qQ),e(qQ,g8r),e(_M,h8r),e(Z,p8r),e(Z,uM),e(uM,i6e),e(i6e,_8r),e(uM,u8r),e(uM,NQ),e(NQ,b8r),e(uM,v8r),e(Z,F8r),e(Z,bM),e(bM,d6e),e(d6e,T8r),e(bM,M8r),e(bM,jQ),e(jQ,E8r),e(bM,C8r),e(Z,w8r),e(Z,vM),e(vM,c6e),e(c6e,A8r),e(vM,y8r),e(vM,DQ),e(DQ,L8r),e(vM,x8r),e(Z,k8r),e(Z,FM),e(FM,f6e),e(f6e,S8r),e(FM,R8r),e(FM,GQ),e(GQ,B8r),e(FM,P8r),e(Co,$8r),e(Co,m6e),e(m6e,I8r),e(Co,q8r),g(B0,Co,null),b(c,hPe,u),b(c,Hc,u),e(Hc,TM),e(TM,g6e),g(P0,g6e,null),e(Hc,N8r),e(Hc,h6e),e(h6e,j8r),b(c,pPe,u),b(c,kr,u),g($0,kr,null),e(kr,D8r),e(kr,Uc),e(Uc,G8r),e(Uc,OQ),e(OQ,O8r),e(Uc,V8r),e(Uc,VQ),e(VQ,X8r),e(Uc,z8r),e(kr,Q8r),e(kr,I0),e(I0,W8r),e(I0,p6e),e(p6e,H8r),e(I0,U8r),e(kr,J8r),e(kr,Ct),g(q0,Ct,null),e(Ct,Y8r),e(Ct,_6e),e(_6e,K8r),e(Ct,Z8r),e(Ct,Jc),e(Jc,e7r),e(Jc,u6e),e(u6e,o7r),e(Jc,r7r),e(Jc,XQ),e(XQ,t7r),e(Jc,a7r),e(Ct,n7r),e(Ct,b6e),e(b6e,s7r),e(Ct,l7r),g(N0,Ct,null),e(kr,i7r),e(kr,wo),g(j0,wo,null),e(wo,d7r),e(wo,v6e),e(v6e,c7r),e(wo,f7r),e(wo,Ln),e(Ln,m7r),e(Ln,F6e),e(F6e,g7r),e(Ln,h7r),e(Ln,T6e),e(T6e,p7r),e(Ln,_7r),e(Ln,M6e),e(M6e,u7r),e(Ln,b7r),e(wo,v7r),e(wo,E6e),e(E6e,MM),e(MM,C6e),e(C6e,F7r),e(MM,T7r),e(MM,zQ),e(zQ,M7r),e(MM,E7r),e(wo,C7r),e(wo,w6e),e(w6e,w7r),e(wo,A7r),g(D0,wo,null),b(c,_Pe,u),b(c,Yc,u),e(Yc,EM),e(EM,A6e),g(G0,A6e,null),e(Yc,y7r),e(Yc,y6e),e(y6e,L7r),b(c,uPe,u),b(c,Sr,u),g(O0,Sr,null),e(Sr,x7r),e(Sr,Kc),e(Kc,k7r),e(Kc,QQ),e(QQ,S7r),e(Kc,R7r),e(Kc,WQ),e(WQ,B7r),e(Kc,P7r),e(Sr,$7r),e(Sr,V0),e(V0,I7r),e(V0,L6e),e(L6e,q7r),e(V0,N7r),e(Sr,j7r),e(Sr,wt),g(X0,wt,null),e(wt,D7r),e(wt,x6e),e(x6e,G7r),e(wt,O7r),e(wt,Zc),e(Zc,V7r),e(Zc,k6e),e(k6e,X7r),e(Zc,z7r),e(Zc,HQ),e(HQ,Q7r),e(Zc,W7r),e(wt,H7r),e(wt,S6e),e(S6e,U7r),e(wt,J7r),g(z0,wt,null),e(Sr,Y7r),e(Sr,Ao),g(Q0,Ao,null),e(Ao,K7r),e(Ao,R6e),e(R6e,Z7r),e(Ao,eMr),e(Ao,xn),e(xn,oMr),e(xn,B6e),e(B6e,rMr),e(xn,tMr),e(xn,P6e),e(P6e,aMr),e(xn,nMr),e(xn,$6e),e($6e,sMr),e(xn,lMr),e(Ao,iMr),e(Ao,I6e),e(I6e,CM),e(CM,q6e),e(q6e,dMr),e(CM,cMr),e(CM,UQ),e(UQ,fMr),e(CM,mMr),e(Ao,gMr),e(Ao,N6e),e(N6e,hMr),e(Ao,pMr),g(W0,Ao,null),b(c,bPe,u),b(c,ef,u),e(ef,wM),e(wM,j6e),g(H0,j6e,null),e(ef,_Mr),e(ef,D6e),e(D6e,uMr),b(c,vPe,u),b(c,Rr,u),g(U0,Rr,null),e(Rr,bMr),e(Rr,of),e(of,vMr),e(of,JQ),e(JQ,FMr),e(of,TMr),e(of,YQ),e(YQ,MMr),e(of,EMr),e(Rr,CMr),e(Rr,J0),e(J0,wMr),e(J0,G6e),e(G6e,AMr),e(J0,yMr),e(Rr,LMr),e(Rr,At),g(Y0,At,null),e(At,xMr),e(At,O6e),e(O6e,kMr),e(At,SMr),e(At,rf),e(rf,RMr),e(rf,V6e),e(V6e,BMr),e(rf,PMr),e(rf,KQ),e(KQ,$Mr),e(rf,IMr),e(At,qMr),e(At,X6e),e(X6e,NMr),e(At,jMr),g(K0,At,null),e(Rr,DMr),e(Rr,yo),g(Z0,yo,null),e(yo,GMr),e(yo,z6e),e(z6e,OMr),e(yo,VMr),e(yo,kn),e(kn,XMr),e(kn,Q6e),e(Q6e,zMr),e(kn,QMr),e(kn,W6e),e(W6e,WMr),e(kn,HMr),e(kn,H6e),e(H6e,UMr),e(kn,JMr),e(yo,YMr),e(yo,z),e(z,AM),e(AM,U6e),e(U6e,KMr),e(AM,ZMr),e(AM,ZQ),e(ZQ,e4r),e(AM,o4r),e(z,r4r),e(z,yM),e(yM,J6e),e(J6e,t4r),e(yM,a4r),e(yM,eW),e(eW,n4r),e(yM,s4r),e(z,l4r),e(z,LM),e(LM,Y6e),e(Y6e,i4r),e(LM,d4r),e(LM,oW),e(oW,c4r),e(LM,f4r),e(z,m4r),e(z,xM),e(xM,K6e),e(K6e,g4r),e(xM,h4r),e(xM,rW),e(rW,p4r),e(xM,_4r),e(z,u4r),e(z,kM),e(kM,Z6e),e(Z6e,b4r),e(kM,v4r),e(kM,tW),e(tW,F4r),e(kM,T4r),e(z,M4r),e(z,SM),e(SM,eve),e(eve,E4r),e(SM,C4r),e(SM,aW),e(aW,w4r),e(SM,A4r),e(z,y4r),e(z,RM),e(RM,ove),e(ove,L4r),e(RM,x4r),e(RM,nW),e(nW,k4r),e(RM,S4r),e(z,R4r),e(z,BM),e(BM,rve),e(rve,B4r),e(BM,P4r),e(BM,sW),e(sW,$4r),e(BM,I4r),e(z,q4r),e(z,PM),e(PM,tve),e(tve,N4r),e(PM,j4r),e(PM,lW),e(lW,D4r),e(PM,G4r),e(z,O4r),e(z,$M),e($M,ave),e(ave,V4r),e($M,X4r),e($M,iW),e(iW,z4r),e($M,Q4r),e(z,W4r),e(z,IM),e(IM,nve),e(nve,H4r),e(IM,U4r),e(IM,dW),e(dW,J4r),e(IM,Y4r),e(z,K4r),e(z,qM),e(qM,sve),e(sve,Z4r),e(qM,eEr),e(qM,cW),e(cW,oEr),e(qM,rEr),e(z,tEr),e(z,NM),e(NM,lve),e(lve,aEr),e(NM,nEr),e(NM,fW),e(fW,sEr),e(NM,lEr),e(z,iEr),e(z,jM),e(jM,ive),e(ive,dEr),e(jM,cEr),e(jM,mW),e(mW,fEr),e(jM,mEr),e(z,gEr),e(z,DM),e(DM,dve),e(dve,hEr),e(DM,pEr),e(DM,gW),e(gW,_Er),e(DM,uEr),e(z,bEr),e(z,GM),e(GM,cve),e(cve,vEr),e(GM,FEr),e(GM,hW),e(hW,TEr),e(GM,MEr),e(z,EEr),e(z,OM),e(OM,fve),e(fve,CEr),e(OM,wEr),e(OM,pW),e(pW,AEr),e(OM,yEr),e(z,LEr),e(z,VM),e(VM,mve),e(mve,xEr),e(VM,kEr),e(VM,_W),e(_W,SEr),e(VM,REr),e(z,BEr),e(z,XM),e(XM,gve),e(gve,PEr),e(XM,$Er),e(XM,uW),e(uW,IEr),e(XM,qEr),e(z,NEr),e(z,zM),e(zM,hve),e(hve,jEr),e(zM,DEr),e(zM,bW),e(bW,GEr),e(zM,OEr),e(z,VEr),e(z,QM),e(QM,pve),e(pve,XEr),e(QM,zEr),e(QM,vW),e(vW,QEr),e(QM,WEr),e(z,HEr),e(z,WM),e(WM,_ve),e(_ve,UEr),e(WM,JEr),e(WM,FW),e(FW,YEr),e(WM,KEr),e(z,ZEr),e(z,HM),e(HM,uve),e(uve,e5r),e(HM,o5r),e(HM,TW),e(TW,r5r),e(HM,t5r),e(z,a5r),e(z,UM),e(UM,bve),e(bve,n5r),e(UM,s5r),e(UM,MW),e(MW,l5r),e(UM,i5r),e(z,d5r),e(z,JM),e(JM,vve),e(vve,c5r),e(JM,f5r),e(JM,EW),e(EW,m5r),e(JM,g5r),e(yo,h5r),e(yo,Fve),e(Fve,p5r),e(yo,_5r),g(ey,yo,null),b(c,FPe,u),b(c,tf,u),e(tf,YM),e(YM,Tve),g(oy,Tve,null),e(tf,u5r),e(tf,Mve),e(Mve,b5r),b(c,TPe,u),b(c,Br,u),g(ry,Br,null),e(Br,v5r),e(Br,af),e(af,F5r),e(af,CW),e(CW,T5r),e(af,M5r),e(af,wW),e(wW,E5r),e(af,C5r),e(Br,w5r),e(Br,ty),e(ty,A5r),e(ty,Eve),e(Eve,y5r),e(ty,L5r),e(Br,x5r),e(Br,yt),g(ay,yt,null),e(yt,k5r),e(yt,Cve),e(Cve,S5r),e(yt,R5r),e(yt,nf),e(nf,B5r),e(nf,wve),e(wve,P5r),e(nf,$5r),e(nf,AW),e(AW,I5r),e(nf,q5r),e(yt,N5r),e(yt,Ave),e(Ave,j5r),e(yt,D5r),g(ny,yt,null),e(Br,G5r),e(Br,Lo),g(sy,Lo,null),e(Lo,O5r),e(Lo,yve),e(yve,V5r),e(Lo,X5r),e(Lo,Sn),e(Sn,z5r),e(Sn,Lve),e(Lve,Q5r),e(Sn,W5r),e(Sn,xve),e(xve,H5r),e(Sn,U5r),e(Sn,kve),e(kve,J5r),e(Sn,Y5r),e(Lo,K5r),e(Lo,ca),e(ca,KM),e(KM,Sve),e(Sve,Z5r),e(KM,e3r),e(KM,yW),e(yW,o3r),e(KM,r3r),e(ca,t3r),e(ca,ZM),e(ZM,Rve),e(Rve,a3r),e(ZM,n3r),e(ZM,LW),e(LW,s3r),e(ZM,l3r),e(ca,i3r),e(ca,e4),e(e4,Bve),e(Bve,d3r),e(e4,c3r),e(e4,xW),e(xW,f3r),e(e4,m3r),e(ca,g3r),e(ca,o4),e(o4,Pve),e(Pve,h3r),e(o4,p3r),e(o4,kW),e(kW,_3r),e(o4,u3r),e(ca,b3r),e(ca,r4),e(r4,$ve),e($ve,v3r),e(r4,F3r),e(r4,SW),e(SW,T3r),e(r4,M3r),e(Lo,E3r),e(Lo,Ive),e(Ive,C3r),e(Lo,w3r),g(ly,Lo,null),b(c,MPe,u),b(c,sf,u),e(sf,t4),e(t4,qve),g(iy,qve,null),e(sf,A3r),e(sf,Nve),e(Nve,y3r),b(c,EPe,u),b(c,Pr,u),g(dy,Pr,null),e(Pr,L3r),e(Pr,lf),e(lf,x3r),e(lf,RW),e(RW,k3r),e(lf,S3r),e(lf,BW),e(BW,R3r),e(lf,B3r),e(Pr,P3r),e(Pr,cy),e(cy,$3r),e(cy,jve),e(jve,I3r),e(cy,q3r),e(Pr,N3r),e(Pr,Lt),g(fy,Lt,null),e(Lt,j3r),e(Lt,Dve),e(Dve,D3r),e(Lt,G3r),e(Lt,df),e(df,O3r),e(df,Gve),e(Gve,V3r),e(df,X3r),e(df,PW),e(PW,z3r),e(df,Q3r),e(Lt,W3r),e(Lt,Ove),e(Ove,H3r),e(Lt,U3r),g(my,Lt,null),e(Pr,J3r),e(Pr,xo),g(gy,xo,null),e(xo,Y3r),e(xo,Vve),e(Vve,K3r),e(xo,Z3r),e(xo,Rn),e(Rn,eCr),e(Rn,Xve),e(Xve,oCr),e(Rn,rCr),e(Rn,zve),e(zve,tCr),e(Rn,aCr),e(Rn,Qve),e(Qve,nCr),e(Rn,sCr),e(xo,lCr),e(xo,me),e(me,a4),e(a4,Wve),e(Wve,iCr),e(a4,dCr),e(a4,$W),e($W,cCr),e(a4,fCr),e(me,mCr),e(me,n4),e(n4,Hve),e(Hve,gCr),e(n4,hCr),e(n4,IW),e(IW,pCr),e(n4,_Cr),e(me,uCr),e(me,s4),e(s4,Uve),e(Uve,bCr),e(s4,vCr),e(s4,qW),e(qW,FCr),e(s4,TCr),e(me,MCr),e(me,l4),e(l4,Jve),e(Jve,ECr),e(l4,CCr),e(l4,NW),e(NW,wCr),e(l4,ACr),e(me,yCr),e(me,i4),e(i4,Yve),e(Yve,LCr),e(i4,xCr),e(i4,jW),e(jW,kCr),e(i4,SCr),e(me,RCr),e(me,d4),e(d4,Kve),e(Kve,BCr),e(d4,PCr),e(d4,DW),e(DW,$Cr),e(d4,ICr),e(me,qCr),e(me,c4),e(c4,Zve),e(Zve,NCr),e(c4,jCr),e(c4,GW),e(GW,DCr),e(c4,GCr),e(me,OCr),e(me,f4),e(f4,eFe),e(eFe,VCr),e(f4,XCr),e(f4,OW),e(OW,zCr),e(f4,QCr),e(me,WCr),e(me,m4),e(m4,oFe),e(oFe,HCr),e(m4,UCr),e(m4,VW),e(VW,JCr),e(m4,YCr),e(me,KCr),e(me,g4),e(g4,rFe),e(rFe,ZCr),e(g4,ewr),e(g4,XW),e(XW,owr),e(g4,rwr),e(me,twr),e(me,h4),e(h4,tFe),e(tFe,awr),e(h4,nwr),e(h4,zW),e(zW,swr),e(h4,lwr),e(me,iwr),e(me,p4),e(p4,aFe),e(aFe,dwr),e(p4,cwr),e(p4,QW),e(QW,fwr),e(p4,mwr),e(xo,gwr),e(xo,nFe),e(nFe,hwr),e(xo,pwr),g(hy,xo,null),b(c,CPe,u),b(c,cf,u),e(cf,_4),e(_4,sFe),g(py,sFe,null),e(cf,_wr),e(cf,lFe),e(lFe,uwr),b(c,wPe,u),b(c,$r,u),g(_y,$r,null),e($r,bwr),e($r,ff),e(ff,vwr),e(ff,WW),e(WW,Fwr),e(ff,Twr),e(ff,HW),e(HW,Mwr),e(ff,Ewr),e($r,Cwr),e($r,uy),e(uy,wwr),e(uy,iFe),e(iFe,Awr),e(uy,ywr),e($r,Lwr),e($r,xt),g(by,xt,null),e(xt,xwr),e(xt,dFe),e(dFe,kwr),e(xt,Swr),e(xt,mf),e(mf,Rwr),e(mf,cFe),e(cFe,Bwr),e(mf,Pwr),e(mf,UW),e(UW,$wr),e(mf,Iwr),e(xt,qwr),e(xt,fFe),e(fFe,Nwr),e(xt,jwr),g(vy,xt,null),e($r,Dwr),e($r,ko),g(Fy,ko,null),e(ko,Gwr),e(ko,mFe),e(mFe,Owr),e(ko,Vwr),e(ko,Bn),e(Bn,Xwr),e(Bn,gFe),e(gFe,zwr),e(Bn,Qwr),e(Bn,hFe),e(hFe,Wwr),e(Bn,Hwr),e(Bn,pFe),e(pFe,Uwr),e(Bn,Jwr),e(ko,Ywr),e(ko,ve),e(ve,u4),e(u4,_Fe),e(_Fe,Kwr),e(u4,Zwr),e(u4,JW),e(JW,eAr),e(u4,oAr),e(ve,rAr),e(ve,b4),e(b4,uFe),e(uFe,tAr),e(b4,aAr),e(b4,YW),e(YW,nAr),e(b4,sAr),e(ve,lAr),e(ve,v4),e(v4,bFe),e(bFe,iAr),e(v4,dAr),e(v4,KW),e(KW,cAr),e(v4,fAr),e(ve,mAr),e(ve,F4),e(F4,vFe),e(vFe,gAr),e(F4,hAr),e(F4,ZW),e(ZW,pAr),e(F4,_Ar),e(ve,uAr),e(ve,T4),e(T4,FFe),e(FFe,bAr),e(T4,vAr),e(T4,eH),e(eH,FAr),e(T4,TAr),e(ve,MAr),e(ve,M4),e(M4,TFe),e(TFe,EAr),e(M4,CAr),e(M4,oH),e(oH,wAr),e(M4,AAr),e(ve,yAr),e(ve,E4),e(E4,MFe),e(MFe,LAr),e(E4,xAr),e(E4,rH),e(rH,kAr),e(E4,SAr),e(ve,RAr),e(ve,C4),e(C4,EFe),e(EFe,BAr),e(C4,PAr),e(C4,tH),e(tH,$Ar),e(C4,IAr),e(ve,qAr),e(ve,w4),e(w4,CFe),e(CFe,NAr),e(w4,jAr),e(w4,aH),e(aH,DAr),e(w4,GAr),e(ve,OAr),e(ve,A4),e(A4,wFe),e(wFe,VAr),e(A4,XAr),e(A4,nH),e(nH,zAr),e(A4,QAr),e(ko,WAr),e(ko,AFe),e(AFe,HAr),e(ko,UAr),g(Ty,ko,null),b(c,APe,u),b(c,gf,u),e(gf,y4),e(y4,yFe),g(My,yFe,null),e(gf,JAr),e(gf,LFe),e(LFe,YAr),b(c,yPe,u),b(c,Ir,u),g(Ey,Ir,null),e(Ir,KAr),e(Ir,hf),e(hf,ZAr),e(hf,sH),e(sH,e0r),e(hf,o0r),e(hf,lH),e(lH,r0r),e(hf,t0r),e(Ir,a0r),e(Ir,Cy),e(Cy,n0r),e(Cy,xFe),e(xFe,s0r),e(Cy,l0r),e(Ir,i0r),e(Ir,kt),g(wy,kt,null),e(kt,d0r),e(kt,kFe),e(kFe,c0r),e(kt,f0r),e(kt,pf),e(pf,m0r),e(pf,SFe),e(SFe,g0r),e(pf,h0r),e(pf,iH),e(iH,p0r),e(pf,_0r),e(kt,u0r),e(kt,RFe),e(RFe,b0r),e(kt,v0r),g(Ay,kt,null),e(Ir,F0r),e(Ir,So),g(yy,So,null),e(So,T0r),e(So,BFe),e(BFe,M0r),e(So,E0r),e(So,Pn),e(Pn,C0r),e(Pn,PFe),e(PFe,w0r),e(Pn,A0r),e(Pn,$Fe),e($Fe,y0r),e(Pn,L0r),e(Pn,IFe),e(IFe,x0r),e(Pn,k0r),e(So,S0r),e(So,Ee),e(Ee,L4),e(L4,qFe),e(qFe,R0r),e(L4,B0r),e(L4,dH),e(dH,P0r),e(L4,$0r),e(Ee,I0r),e(Ee,x4),e(x4,NFe),e(NFe,q0r),e(x4,N0r),e(x4,cH),e(cH,j0r),e(x4,D0r),e(Ee,G0r),e(Ee,k4),e(k4,jFe),e(jFe,O0r),e(k4,V0r),e(k4,fH),e(fH,X0r),e(k4,z0r),e(Ee,Q0r),e(Ee,S4),e(S4,DFe),e(DFe,W0r),e(S4,H0r),e(S4,mH),e(mH,U0r),e(S4,J0r),e(Ee,Y0r),e(Ee,R4),e(R4,GFe),e(GFe,K0r),e(R4,Z0r),e(R4,gH),e(gH,eyr),e(R4,oyr),e(Ee,ryr),e(Ee,B4),e(B4,OFe),e(OFe,tyr),e(B4,ayr),e(B4,hH),e(hH,nyr),e(B4,syr),e(Ee,lyr),e(Ee,P4),e(P4,VFe),e(VFe,iyr),e(P4,dyr),e(P4,pH),e(pH,cyr),e(P4,fyr),e(Ee,myr),e(Ee,$4),e($4,XFe),e(XFe,gyr),e($4,hyr),e($4,_H),e(_H,pyr),e($4,_yr),e(Ee,uyr),e(Ee,I4),e(I4,zFe),e(zFe,byr),e(I4,vyr),e(I4,uH),e(uH,Fyr),e(I4,Tyr),e(So,Myr),e(So,QFe),e(QFe,Eyr),e(So,Cyr),g(Ly,So,null),b(c,LPe,u),b(c,_f,u),e(_f,q4),e(q4,WFe),g(xy,WFe,null),e(_f,wyr),e(_f,HFe),e(HFe,Ayr),b(c,xPe,u),b(c,qr,u),g(ky,qr,null),e(qr,yyr),e(qr,uf),e(uf,Lyr),e(uf,bH),e(bH,xyr),e(uf,kyr),e(uf,vH),e(vH,Syr),e(uf,Ryr),e(qr,Byr),e(qr,Sy),e(Sy,Pyr),e(Sy,UFe),e(UFe,$yr),e(Sy,Iyr),e(qr,qyr),e(qr,St),g(Ry,St,null),e(St,Nyr),e(St,JFe),e(JFe,jyr),e(St,Dyr),e(St,bf),e(bf,Gyr),e(bf,YFe),e(YFe,Oyr),e(bf,Vyr),e(bf,FH),e(FH,Xyr),e(bf,zyr),e(St,Qyr),e(St,KFe),e(KFe,Wyr),e(St,Hyr),g(By,St,null),e(qr,Uyr),e(qr,Ro),g(Py,Ro,null),e(Ro,Jyr),e(Ro,ZFe),e(ZFe,Yyr),e(Ro,Kyr),e(Ro,$n),e($n,Zyr),e($n,eTe),e(eTe,eLr),e($n,oLr),e($n,oTe),e(oTe,rLr),e($n,tLr),e($n,rTe),e(rTe,aLr),e($n,nLr),e(Ro,sLr),e(Ro,Fe),e(Fe,N4),e(N4,tTe),e(tTe,lLr),e(N4,iLr),e(N4,TH),e(TH,dLr),e(N4,cLr),e(Fe,fLr),e(Fe,j4),e(j4,aTe),e(aTe,mLr),e(j4,gLr),e(j4,MH),e(MH,hLr),e(j4,pLr),e(Fe,_Lr),e(Fe,D4),e(D4,nTe),e(nTe,uLr),e(D4,bLr),e(D4,EH),e(EH,vLr),e(D4,FLr),e(Fe,TLr),e(Fe,G4),e(G4,sTe),e(sTe,MLr),e(G4,ELr),e(G4,CH),e(CH,CLr),e(G4,wLr),e(Fe,ALr),e(Fe,O4),e(O4,lTe),e(lTe,yLr),e(O4,LLr),e(O4,wH),e(wH,xLr),e(O4,kLr),e(Fe,SLr),e(Fe,V4),e(V4,iTe),e(iTe,RLr),e(V4,BLr),e(V4,AH),e(AH,PLr),e(V4,$Lr),e(Fe,ILr),e(Fe,X4),e(X4,dTe),e(dTe,qLr),e(X4,NLr),e(X4,yH),e(yH,jLr),e(X4,DLr),e(Fe,GLr),e(Fe,z4),e(z4,cTe),e(cTe,OLr),e(z4,VLr),e(z4,LH),e(LH,XLr),e(z4,zLr),e(Fe,QLr),e(Fe,Q4),e(Q4,fTe),e(fTe,WLr),e(Q4,HLr),e(Q4,xH),e(xH,ULr),e(Q4,JLr),e(Fe,YLr),e(Fe,W4),e(W4,mTe),e(mTe,KLr),e(W4,ZLr),e(W4,kH),e(kH,e9r),e(W4,o9r),e(Ro,r9r),e(Ro,gTe),e(gTe,t9r),e(Ro,a9r),g($y,Ro,null),b(c,kPe,u),b(c,vf,u),e(vf,H4),e(H4,hTe),g(Iy,hTe,null),e(vf,n9r),e(vf,pTe),e(pTe,s9r),b(c,SPe,u),b(c,Nr,u),g(qy,Nr,null),e(Nr,l9r),e(Nr,Ff),e(Ff,i9r),e(Ff,SH),e(SH,d9r),e(Ff,c9r),e(Ff,RH),e(RH,f9r),e(Ff,m9r),e(Nr,g9r),e(Nr,Ny),e(Ny,h9r),e(Ny,_Te),e(_Te,p9r),e(Ny,_9r),e(Nr,u9r),e(Nr,Rt),g(jy,Rt,null),e(Rt,b9r),e(Rt,uTe),e(uTe,v9r),e(Rt,F9r),e(Rt,Tf),e(Tf,T9r),e(Tf,bTe),e(bTe,M9r),e(Tf,E9r),e(Tf,BH),e(BH,C9r),e(Tf,w9r),e(Rt,A9r),e(Rt,vTe),e(vTe,y9r),e(Rt,L9r),g(Dy,Rt,null),e(Nr,x9r),e(Nr,Bo),g(Gy,Bo,null),e(Bo,k9r),e(Bo,FTe),e(FTe,S9r),e(Bo,R9r),e(Bo,In),e(In,B9r),e(In,TTe),e(TTe,P9r),e(In,$9r),e(In,MTe),e(MTe,I9r),e(In,q9r),e(In,ETe),e(ETe,N9r),e(In,j9r),e(Bo,D9r),e(Bo,Te),e(Te,U4),e(U4,CTe),e(CTe,G9r),e(U4,O9r),e(U4,PH),e(PH,V9r),e(U4,X9r),e(Te,z9r),e(Te,J4),e(J4,wTe),e(wTe,Q9r),e(J4,W9r),e(J4,$H),e($H,H9r),e(J4,U9r),e(Te,J9r),e(Te,Y4),e(Y4,ATe),e(ATe,Y9r),e(Y4,K9r),e(Y4,IH),e(IH,Z9r),e(Y4,exr),e(Te,oxr),e(Te,K4),e(K4,yTe),e(yTe,rxr),e(K4,txr),e(K4,qH),e(qH,axr),e(K4,nxr),e(Te,sxr),e(Te,Z4),e(Z4,LTe),e(LTe,lxr),e(Z4,ixr),e(Z4,NH),e(NH,dxr),e(Z4,cxr),e(Te,fxr),e(Te,eE),e(eE,xTe),e(xTe,mxr),e(eE,gxr),e(eE,jH),e(jH,hxr),e(eE,pxr),e(Te,_xr),e(Te,oE),e(oE,kTe),e(kTe,uxr),e(oE,bxr),e(oE,DH),e(DH,vxr),e(oE,Fxr),e(Te,Txr),e(Te,rE),e(rE,STe),e(STe,Mxr),e(rE,Exr),e(rE,GH),e(GH,Cxr),e(rE,wxr),e(Te,Axr),e(Te,tE),e(tE,RTe),e(RTe,yxr),e(tE,Lxr),e(tE,OH),e(OH,xxr),e(tE,kxr),e(Te,Sxr),e(Te,aE),e(aE,BTe),e(BTe,Rxr),e(aE,Bxr),e(aE,VH),e(VH,Pxr),e(aE,$xr),e(Bo,Ixr),e(Bo,PTe),e(PTe,qxr),e(Bo,Nxr),g(Oy,Bo,null),b(c,RPe,u),b(c,Mf,u),e(Mf,nE),e(nE,$Te),g(Vy,$Te,null),e(Mf,jxr),e(Mf,ITe),e(ITe,Dxr),b(c,BPe,u),b(c,jr,u),g(Xy,jr,null),e(jr,Gxr),e(jr,Ef),e(Ef,Oxr),e(Ef,XH),e(XH,Vxr),e(Ef,Xxr),e(Ef,zH),e(zH,zxr),e(Ef,Qxr),e(jr,Wxr),e(jr,zy),e(zy,Hxr),e(zy,qTe),e(qTe,Uxr),e(zy,Jxr),e(jr,Yxr),e(jr,Bt),g(Qy,Bt,null),e(Bt,Kxr),e(Bt,NTe),e(NTe,Zxr),e(Bt,ekr),e(Bt,Cf),e(Cf,okr),e(Cf,jTe),e(jTe,rkr),e(Cf,tkr),e(Cf,QH),e(QH,akr),e(Cf,nkr),e(Bt,skr),e(Bt,DTe),e(DTe,lkr),e(Bt,ikr),g(Wy,Bt,null),e(jr,dkr),e(jr,Po),g(Hy,Po,null),e(Po,ckr),e(Po,GTe),e(GTe,fkr),e(Po,mkr),e(Po,qn),e(qn,gkr),e(qn,OTe),e(OTe,hkr),e(qn,pkr),e(qn,VTe),e(VTe,_kr),e(qn,ukr),e(qn,XTe),e(XTe,bkr),e(qn,vkr),e(Po,Fkr),e(Po,Be),e(Be,sE),e(sE,zTe),e(zTe,Tkr),e(sE,Mkr),e(sE,WH),e(WH,Ekr),e(sE,Ckr),e(Be,wkr),e(Be,lE),e(lE,QTe),e(QTe,Akr),e(lE,ykr),e(lE,HH),e(HH,Lkr),e(lE,xkr),e(Be,kkr),e(Be,iE),e(iE,WTe),e(WTe,Skr),e(iE,Rkr),e(iE,UH),e(UH,Bkr),e(iE,Pkr),e(Be,$kr),e(Be,dE),e(dE,HTe),e(HTe,Ikr),e(dE,qkr),e(dE,JH),e(JH,Nkr),e(dE,jkr),e(Be,Dkr),e(Be,cE),e(cE,UTe),e(UTe,Gkr),e(cE,Okr),e(cE,YH),e(YH,Vkr),e(cE,Xkr),e(Be,zkr),e(Be,fE),e(fE,JTe),e(JTe,Qkr),e(fE,Wkr),e(fE,KH),e(KH,Hkr),e(fE,Ukr),e(Be,Jkr),e(Be,mE),e(mE,YTe),e(YTe,Ykr),e(mE,Kkr),e(mE,ZH),e(ZH,Zkr),e(mE,eSr),e(Be,oSr),e(Be,gE),e(gE,KTe),e(KTe,rSr),e(gE,tSr),e(gE,eU),e(eU,aSr),e(gE,nSr),e(Po,sSr),e(Po,ZTe),e(ZTe,lSr),e(Po,iSr),g(Uy,Po,null),b(c,PPe,u),b(c,wf,u),e(wf,hE),e(hE,e8e),g(Jy,e8e,null),e(wf,dSr),e(wf,o8e),e(o8e,cSr),b(c,$Pe,u),b(c,Dr,u),g(Yy,Dr,null),e(Dr,fSr),e(Dr,Af),e(Af,mSr),e(Af,oU),e(oU,gSr),e(Af,hSr),e(Af,rU),e(rU,pSr),e(Af,_Sr),e(Dr,uSr),e(Dr,Ky),e(Ky,bSr),e(Ky,r8e),e(r8e,vSr),e(Ky,FSr),e(Dr,TSr),e(Dr,Pt),g(Zy,Pt,null),e(Pt,MSr),e(Pt,t8e),e(t8e,ESr),e(Pt,CSr),e(Pt,yf),e(yf,wSr),e(yf,a8e),e(a8e,ASr),e(yf,ySr),e(yf,tU),e(tU,LSr),e(yf,xSr),e(Pt,kSr),e(Pt,n8e),e(n8e,SSr),e(Pt,RSr),g(eL,Pt,null),e(Dr,BSr),e(Dr,$o),g(oL,$o,null),e($o,PSr),e($o,s8e),e(s8e,$Sr),e($o,ISr),e($o,Nn),e(Nn,qSr),e(Nn,l8e),e(l8e,NSr),e(Nn,jSr),e(Nn,i8e),e(i8e,DSr),e(Nn,GSr),e(Nn,d8e),e(d8e,OSr),e(Nn,VSr),e($o,XSr),e($o,Pe),e(Pe,pE),e(pE,c8e),e(c8e,zSr),e(pE,QSr),e(pE,aU),e(aU,WSr),e(pE,HSr),e(Pe,USr),e(Pe,_E),e(_E,f8e),e(f8e,JSr),e(_E,YSr),e(_E,nU),e(nU,KSr),e(_E,ZSr),e(Pe,eRr),e(Pe,uE),e(uE,m8e),e(m8e,oRr),e(uE,rRr),e(uE,sU),e(sU,tRr),e(uE,aRr),e(Pe,nRr),e(Pe,bE),e(bE,g8e),e(g8e,sRr),e(bE,lRr),e(bE,lU),e(lU,iRr),e(bE,dRr),e(Pe,cRr),e(Pe,vE),e(vE,h8e),e(h8e,fRr),e(vE,mRr),e(vE,iU),e(iU,gRr),e(vE,hRr),e(Pe,pRr),e(Pe,FE),e(FE,p8e),e(p8e,_Rr),e(FE,uRr),e(FE,dU),e(dU,bRr),e(FE,vRr),e(Pe,FRr),e(Pe,TE),e(TE,_8e),e(_8e,TRr),e(TE,MRr),e(TE,cU),e(cU,ERr),e(TE,CRr),e(Pe,wRr),e(Pe,ME),e(ME,u8e),e(u8e,ARr),e(ME,yRr),e(ME,fU),e(fU,LRr),e(ME,xRr),e($o,kRr),e($o,b8e),e(b8e,SRr),e($o,RRr),g(rL,$o,null),b(c,IPe,u),b(c,Lf,u),e(Lf,EE),e(EE,v8e),g(tL,v8e,null),e(Lf,BRr),e(Lf,F8e),e(F8e,PRr),b(c,qPe,u),b(c,Gr,u),g(aL,Gr,null),e(Gr,$Rr),e(Gr,xf),e(xf,IRr),e(xf,mU),e(mU,qRr),e(xf,NRr),e(xf,gU),e(gU,jRr),e(xf,DRr),e(Gr,GRr),e(Gr,nL),e(nL,ORr),e(nL,T8e),e(T8e,VRr),e(nL,XRr),e(Gr,zRr),e(Gr,$t),g(sL,$t,null),e($t,QRr),e($t,M8e),e(M8e,WRr),e($t,HRr),e($t,kf),e(kf,URr),e(kf,E8e),e(E8e,JRr),e(kf,YRr),e(kf,hU),e(hU,KRr),e(kf,ZRr),e($t,eBr),e($t,C8e),e(C8e,oBr),e($t,rBr),g(lL,$t,null),e(Gr,tBr),e(Gr,Io),g(iL,Io,null),e(Io,aBr),e(Io,w8e),e(w8e,nBr),e(Io,sBr),e(Io,jn),e(jn,lBr),e(jn,A8e),e(A8e,iBr),e(jn,dBr),e(jn,y8e),e(y8e,cBr),e(jn,fBr),e(jn,L8e),e(L8e,mBr),e(jn,gBr),e(Io,hBr),e(Io,x8e),e(x8e,CE),e(CE,k8e),e(k8e,pBr),e(CE,_Br),e(CE,pU),e(pU,uBr),e(CE,bBr),e(Io,vBr),e(Io,S8e),e(S8e,FBr),e(Io,TBr),g(dL,Io,null),b(c,NPe,u),b(c,Sf,u),e(Sf,wE),e(wE,R8e),g(cL,R8e,null),e(Sf,MBr),e(Sf,B8e),e(B8e,EBr),b(c,jPe,u),b(c,Or,u),g(fL,Or,null),e(Or,CBr),e(Or,Rf),e(Rf,wBr),e(Rf,_U),e(_U,ABr),e(Rf,yBr),e(Rf,uU),e(uU,LBr),e(Rf,xBr),e(Or,kBr),e(Or,mL),e(mL,SBr),e(mL,P8e),e(P8e,RBr),e(mL,BBr),e(Or,PBr),e(Or,It),g(gL,It,null),e(It,$Br),e(It,$8e),e($8e,IBr),e(It,qBr),e(It,Bf),e(Bf,NBr),e(Bf,I8e),e(I8e,jBr),e(Bf,DBr),e(Bf,bU),e(bU,GBr),e(Bf,OBr),e(It,VBr),e(It,q8e),e(q8e,XBr),e(It,zBr),g(hL,It,null),e(Or,QBr),e(Or,qo),g(pL,qo,null),e(qo,WBr),e(qo,N8e),e(N8e,HBr),e(qo,UBr),e(qo,Dn),e(Dn,JBr),e(Dn,j8e),e(j8e,YBr),e(Dn,KBr),e(Dn,D8e),e(D8e,ZBr),e(Dn,ePr),e(Dn,G8e),e(G8e,oPr),e(Dn,rPr),e(qo,tPr),e(qo,_L),e(_L,AE),e(AE,O8e),e(O8e,aPr),e(AE,nPr),e(AE,vU),e(vU,sPr),e(AE,lPr),e(_L,iPr),e(_L,yE),e(yE,V8e),e(V8e,dPr),e(yE,cPr),e(yE,FU),e(FU,fPr),e(yE,mPr),e(qo,gPr),e(qo,X8e),e(X8e,hPr),e(qo,pPr),g(uL,qo,null),b(c,DPe,u),b(c,Pf,u),e(Pf,LE),e(LE,z8e),g(bL,z8e,null),e(Pf,_Pr),e(Pf,Q8e),e(Q8e,uPr),b(c,GPe,u),b(c,Vr,u),g(vL,Vr,null),e(Vr,bPr),e(Vr,$f),e($f,vPr),e($f,TU),e(TU,FPr),e($f,TPr),e($f,MU),e(MU,MPr),e($f,EPr),e(Vr,CPr),e(Vr,FL),e(FL,wPr),e(FL,W8e),e(W8e,APr),e(FL,yPr),e(Vr,LPr),e(Vr,qt),g(TL,qt,null),e(qt,xPr),e(qt,H8e),e(H8e,kPr),e(qt,SPr),e(qt,If),e(If,RPr),e(If,U8e),e(U8e,BPr),e(If,PPr),e(If,EU),e(EU,$Pr),e(If,IPr),e(qt,qPr),e(qt,J8e),e(J8e,NPr),e(qt,jPr),g(ML,qt,null),e(Vr,DPr),e(Vr,No),g(EL,No,null),e(No,GPr),e(No,Y8e),e(Y8e,OPr),e(No,VPr),e(No,Gn),e(Gn,XPr),e(Gn,K8e),e(K8e,zPr),e(Gn,QPr),e(Gn,Z8e),e(Z8e,WPr),e(Gn,HPr),e(Gn,e7e),e(e7e,UPr),e(Gn,JPr),e(No,YPr),e(No,o7e),e(o7e,xE),e(xE,r7e),e(r7e,KPr),e(xE,ZPr),e(xE,CU),e(CU,e$r),e(xE,o$r),e(No,r$r),e(No,t7e),e(t7e,t$r),e(No,a$r),g(CL,No,null),OPe=!0},p(c,[u]){const wL={};u&2&&(wL.$$scope={dirty:u,ctx:c}),Xf.$set(wL);const a7e={};u&2&&(a7e.$$scope={dirty:u,ctx:c}),jh.$set(a7e);const n7e={};u&2&&(n7e.$$scope={dirty:u,ctx:c}),Jh.$set(n7e)},i(c){OPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(Xf.$$.fragment,c),h(I5.$$.fragment,c),h(q5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(X5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(e3.$$.fragment,c),h(jh.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(l3.$$.fragment,c),h(Jh.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(F3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(C3.$$.fragment,c),h(w3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(R3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(j3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(oC.$$.fragment,c),h(rC.$$.fragment,c),h(tC.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(sC.$$.fragment,c),h(iC.$$.fragment,c),h(dC.$$.fragment,c),h(cC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(gC.$$.fragment,c),h(pC.$$.fragment,c),h(_C.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(vC.$$.fragment,c),h(FC.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),OPe=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(Xf.$$.fragment,c),p(I5.$$.fragment,c),p(q5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(X5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(e3.$$.fragment,c),p(jh.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(l3.$$.fragment,c),p(Jh.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(F3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(C3.$$.fragment,c),p(w3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(R3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(j3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(oC.$$.fragment,c),p(rC.$$.fragment,c),p(tC.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(sC.$$.fragment,c),p(iC.$$.fragment,c),p(dC.$$.fragment,c),p(cC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(gC.$$.fragment,c),p(pC.$$.fragment,c),p(_C.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(vC.$$.fragment,c),p(FC.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(F0.$$.fragment,c),p(T0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),OPe=!1},d(c){t(ee),c&&t(io),c&&t(ce),_(he),c&&t(jf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(Gf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(GRe),c&&t(Qi),_(P5),c&&t(ORe),c&&t(Qn),c&&t(VRe),_($5,c),c&&t(XRe),c&&t(x9),c&&t(zRe),_(Xf,c),c&&t(QRe),c&&t(Wi),_(I5),c&&t(WRe),c&&t(Qo),_(q5),_(D5),_(G5),_(O5),c&&t(HRe),c&&t(Ui),_(V5),c&&t(URe),c&&t(Wo),_(X5),_(W5),_(H5),_(U5),c&&t(JRe),c&&t(Ji),_(J5),c&&t(YRe),c&&t(Ho),_(Y5),_(e3),_(jh),_(o3),_(r3),c&&t(KRe),c&&t(Yi),_(t3),c&&t(ZRe),c&&t(Uo),_(a3),_(l3),_(Jh),_(i3),_(d3),c&&t(eBe),c&&t(Zi),_(c3),c&&t(oBe),c&&t(Jo),_(f3),_(g3),_(h3),_(p3),_(_3),c&&t(rBe),c&&t(rd),_(u3),c&&t(tBe),c&&t(Yo),_(b3),_(F3),_(T3),_(M3),_(E3),c&&t(aBe),c&&t(nd),_(C3),c&&t(nBe),c&&t(Ko),_(w3),_(y3),_(L3),_(x3),_(k3),c&&t(sBe),c&&t(id),_(S3),c&&t(lBe),c&&t(Zo),_(R3),_(P3),_($3),_(I3),_(q3),c&&t(iBe),c&&t(fd),_(N3),c&&t(dBe),c&&t(er),_(j3),_(G3),_(O3),_(V3),_(X3),c&&t(cBe),c&&t(hd),_(z3),c&&t(fBe),c&&t(or),_(Q3),_(H3),_(U3),_(J3),_(Y3),c&&t(mBe),c&&t(ud),_(K3),c&&t(gBe),c&&t(rr),_(Z3),_(oC),_(rC),_(tC),_(aC),c&&t(hBe),c&&t(Fd),_(nC),c&&t(pBe),c&&t(tr),_(sC),_(iC),_(dC),_(cC),_(fC),c&&t(_Be),c&&t(Ed),_(mC),c&&t(uBe),c&&t(ar),_(gC),_(pC),_(_C),_(uC),_(bC),c&&t(bBe),c&&t(Ad),_(vC),c&&t(vBe),c&&t(nr),_(FC),_(MC),_(EC),_(CC),_(wC),c&&t(FBe),c&&t(xd),_(AC),c&&t(TBe),c&&t(sr),_(yC),_(xC),_(kC),_(SC),_(RC),c&&t(MBe),c&&t(Rd),_(BC),c&&t(EBe),c&&t(lr),_(PC),_(IC),_(qC),_(NC),_(jC),c&&t(CBe),c&&t($d),_(DC),c&&t(wBe),c&&t(ir),_(GC),_(VC),_(XC),_(zC),_(QC),c&&t(ABe),c&&t(Nd),_(WC),c&&t(yBe),c&&t(dr),_(HC),_(JC),_(YC),_(KC),_(ZC),c&&t(LBe),c&&t(Gd),_(ew),c&&t(xBe),c&&t(cr),_(ow),_(tw),_(aw),_(nw),_(sw),c&&t(kBe),c&&t(Xd),_(lw),c&&t(SBe),c&&t(fr),_(iw),_(cw),_(fw),_(mw),_(gw),c&&t(RBe),c&&t(Wd),_(hw),c&&t(BBe),c&&t(mr),_(pw),_(uw),_(bw),_(vw),_(Tw),c&&t(PBe),c&&t(Jd),_(Mw),c&&t($Be),c&&t(gr),_(Ew),_(ww),_(Aw),_(yw),_(Lw),c&&t(IBe),c&&t(Zd),_(xw),c&&t(qBe),c&&t(hr),_(kw),_(Rw),_(Bw),_(Pw),_($w),c&&t(NBe),c&&t(tc),_(Iw),c&&t(jBe),c&&t(pr),_(qw),_(jw),_(Dw),_(Gw),_(Ow),c&&t(DBe),c&&t(sc),_(Vw),c&&t(GBe),c&&t(_r),_(Xw),_(Qw),_(Ww),_(Hw),_(Uw),c&&t(OBe),c&&t(dc),_(Jw),c&&t(VBe),c&&t(ur),_(Yw),_(Zw),_(eA),_(oA),_(rA),c&&t(XBe),c&&t(mc),_(tA),c&&t(zBe),c&&t(br),_(aA),_(sA),_(lA),_(iA),_(dA),c&&t(QBe),c&&t(pc),_(cA),c&&t(WBe),c&&t(vr),_(fA),_(gA),_(hA),_(pA),_(_A),c&&t(HBe),c&&t(bc),_(uA),c&&t(UBe),c&&t(Fr),_(bA),_(FA),_(TA),_(MA),_(EA),c&&t(JBe),c&&t(Tc),_(CA),c&&t(YBe),c&&t(Tr),_(wA),_(yA),_(LA),_(xA),_(kA),c&&t(KBe),c&&t(Cc),_(SA),c&&t(ZBe),c&&t(Mr),_(RA),_(PA),_($A),_(IA),_(NA),c&&t(ePe),c&&t(yc),_(jA),c&&t(oPe),c&&t(Er),_(DA),_(OA),_(VA),_(XA),_(zA),c&&t(rPe),c&&t(kc),_(QA),c&&t(tPe),c&&t(Cr),_(WA),_(UA),_(JA),_(YA),_(KA),c&&t(aPe),c&&t(Bc),_(ZA),c&&t(nPe),c&&t(wr),_(e0),_(r0),_(t0),_(a0),_(n0),c&&t(sPe),c&&t(Ic),_(s0),c&&t(lPe),c&&t(Ar),_(l0),_(d0),_(c0),_(f0),_(m0),c&&t(iPe),c&&t(jc),_(g0),c&&t(dPe),c&&t(yr),_(h0),_(_0),_(u0),_(b0),_(v0),c&&t(cPe),c&&t(Oc),_(F0),c&&t(fPe),c&&t(Lr),_(T0),_(E0),_(C0),_(w0),_(A0),c&&t(mPe),c&&t(zc),_(y0),c&&t(gPe),c&&t(xr),_(L0),_(k0),_(S0),_(R0),_(B0),c&&t(hPe),c&&t(Hc),_(P0),c&&t(pPe),c&&t(kr),_($0),_(q0),_(N0),_(j0),_(D0),c&&t(_Pe),c&&t(Yc),_(G0),c&&t(uPe),c&&t(Sr),_(O0),_(X0),_(z0),_(Q0),_(W0),c&&t(bPe),c&&t(ef),_(H0),c&&t(vPe),c&&t(Rr),_(U0),_(Y0),_(K0),_(Z0),_(ey),c&&t(FPe),c&&t(tf),_(oy),c&&t(TPe),c&&t(Br),_(ry),_(ay),_(ny),_(sy),_(ly),c&&t(MPe),c&&t(sf),_(iy),c&&t(EPe),c&&t(Pr),_(dy),_(fy),_(my),_(gy),_(hy),c&&t(CPe),c&&t(cf),_(py),c&&t(wPe),c&&t($r),_(_y),_(by),_(vy),_(Fy),_(Ty),c&&t(APe),c&&t(gf),_(My),c&&t(yPe),c&&t(Ir),_(Ey),_(wy),_(Ay),_(yy),_(Ly),c&&t(LPe),c&&t(_f),_(xy),c&&t(xPe),c&&t(qr),_(ky),_(Ry),_(By),_(Py),_($y),c&&t(kPe),c&&t(vf),_(Iy),c&&t(SPe),c&&t(Nr),_(qy),_(jy),_(Dy),_(Gy),_(Oy),c&&t(RPe),c&&t(Mf),_(Vy),c&&t(BPe),c&&t(jr),_(Xy),_(Qy),_(Wy),_(Hy),_(Uy),c&&t(PPe),c&&t(wf),_(Jy),c&&t($Pe),c&&t(Dr),_(Yy),_(Zy),_(eL),_(oL),_(rL),c&&t(IPe),c&&t(Lf),_(tL),c&&t(qPe),c&&t(Gr),_(aL),_(sL),_(lL),_(iL),_(dL),c&&t(NPe),c&&t(Sf),_(cL),c&&t(jPe),c&&t(Or),_(fL),_(gL),_(hL),_(pL),_(uL),c&&t(DPe),c&&t(Pf),_(bL),c&&t(GPe),c&&t(Vr),_(vL),_(TL),_(ML),_(EL),_(CL)}}}const nCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function sCt(Nf){return eCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class mCt extends J3t{constructor(ee){super();Y3t(this,ee,sCt,aCt,K3t,{})}}export{mCt as default,nCt as metadata};
