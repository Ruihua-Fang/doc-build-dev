import{S as e5t,i as o5t,s as r5t,e as a,k as l,w as f,t as o,M as t5t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as iLr}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-7b52c3d4.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as V}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function a5t(Ai){let J,xe,de,me,no,ce,be,Go,Li,Ef,sa,Bi,xi,wE,yf,we,io,ki,In,AE,Dn,jn,LE,Ri,Nn,BE,Si,wf,$a;return{c(){J=a("p"),xe=o("If your "),de=a("code"),me=o("NewModelConfig"),no=o(" is a subclass of "),ce=a("code"),be=o("PretrainedConfig"),Go=o(`, make sure its
`),Li=a("code"),Ef=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Bi=a("code"),xi=o('"new-model"'),wE=o(")."),yf=l(),we=a("p"),io=o("Likewise, if your "),ki=a("code"),In=o("NewModel"),AE=o(" is a subclass of "),Dn=a("a"),jn=o("PreTrainedModel"),LE=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),BE=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),wf=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);xe=r(ge,"If your "),de=n(ge,"CODE",{});var f8=s(de);me=r(f8,"NewModelConfig"),f8.forEach(t),no=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Pi=s(ce);be=r(Pi,"PretrainedConfig"),Pi.forEach(t),Go=r(ge,`, make sure its
`),Li=n(ge,"CODE",{});var m8=s(Li);Ef=r(m8,"model_type"),m8.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Bi=n(ge,"CODE",{});var g8=s(Bi);xi=r(g8,'"new-model"'),g8.forEach(t),wE=r(ge,")."),ge.forEach(t),yf=i(co),we=n(co,"P",{});var Oo=s(we);io=r(Oo,"Likewise, if your "),ki=n(Oo,"CODE",{});var Ia=s(ki);In=r(Ia,"NewModel"),Ia.forEach(t),AE=r(Oo," is a subclass of "),Dn=n(Oo,"A",{href:!0});var h8=s(Dn);jn=r(h8,"PreTrainedModel"),h8.forEach(t),LE=r(Oo,`, make sure its
`),Ri=n(Oo,"CODE",{});var Af=s(Ri);Nn=r(Af,"config_class"),Af.forEach(t),BE=r(Oo,` attribute is set to the same class you use when registering the model (here
`),Si=n(Oo,"CODE",{});var p8=s(Si);wf=r(p8,"NewModelConfig"),p8.forEach(t),$a=r(Oo,")."),Oo.forEach(t),this.h()},h(){d(Dn,"href","/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,xe),e(J,de),e(de,me),e(J,no),e(J,ce),e(ce,be),e(J,Go),e(J,Li),e(Li,Ef),e(J,sa),e(J,Bi),e(Bi,xi),e(J,wE),b(co,yf,ge),b(co,we,ge),e(we,io),e(we,ki),e(ki,In),e(we,AE),e(we,Dn),e(Dn,jn),e(we,LE),e(we,Ri),e(Ri,Nn),e(we,BE),e(we,Si),e(Si,wf),e(we,$a)},d(co){co&&t(J),co&&t(yf),co&&t(we)}}}function n5t(Ai){let J,xe,de,me,no;return{c(){J=a("p"),xe=o("Passing "),de=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var be=s(J);xe=r(be,"Passing "),de=n(be,"CODE",{});var Go=s(de);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(be," is required when you want to use a private model."),be.forEach(t)},m(ce,be){b(ce,J,be),e(J,xe),e(J,de),e(de,me),e(J,no)},d(ce){ce&&t(J)}}}function s5t(Ai){let J,xe,de,me,no;return{c(){J=a("p"),xe=o("Passing "),de=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var be=s(J);xe=r(be,"Passing "),de=n(be,"CODE",{});var Go=s(de);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(be," is required when you want to use a private model."),be.forEach(t)},m(ce,be){b(ce,J,be),e(J,xe),e(J,de),e(de,me),e(J,no)},d(ce){ce&&t(J)}}}function l5t(Ai){let J,xe,de,me,no,ce,be,Go,Li,Ef,sa,Bi,xi,wE,yf,we,io,ki,In,AE,Dn,jn,LE,Ri,Nn,BE,Si,wf,$a,co,ge,f8,Pi,m8,g8,Oo,Ia,h8,Af,p8,YRe,G7e,$i,Lf,LW,xE,KRe,BW,ZRe,O7e,qn,eSe,xW,oSe,rSe,kW,tSe,aSe,X7e,kE,V7e,_8,nSe,z7e,Bf,W7e,Ii,xf,RW,RE,sSe,SW,lSe,Q7e,Xo,SE,iSe,PE,dSe,u8,cSe,fSe,mSe,$E,gSe,PW,hSe,pSe,_Se,fo,IE,uSe,$W,bSe,vSe,Di,TSe,IW,FSe,CSe,DW,MSe,ESe,ySe,v,kf,jW,wSe,ASe,b8,LSe,BSe,xSe,Rf,NW,kSe,RSe,v8,SSe,PSe,$Se,Sf,qW,ISe,DSe,T8,jSe,NSe,qSe,Pf,GW,GSe,OSe,F8,XSe,VSe,zSe,$f,OW,WSe,QSe,C8,HSe,USe,JSe,If,XW,YSe,KSe,M8,ZSe,ePe,oPe,Df,VW,rPe,tPe,E8,aPe,nPe,sPe,jf,zW,lPe,iPe,y8,dPe,cPe,fPe,Nf,WW,mPe,gPe,w8,hPe,pPe,_Pe,qf,QW,uPe,bPe,A8,vPe,TPe,FPe,Gf,HW,CPe,MPe,L8,EPe,yPe,wPe,Of,UW,APe,LPe,B8,BPe,xPe,kPe,Xf,JW,RPe,SPe,x8,PPe,$Pe,IPe,Vf,YW,DPe,jPe,k8,NPe,qPe,GPe,zf,KW,OPe,XPe,R8,VPe,zPe,WPe,Wf,ZW,QPe,HPe,S8,UPe,JPe,YPe,Qf,eQ,KPe,ZPe,P8,e$e,o$e,r$e,Hf,oQ,t$e,a$e,$8,n$e,s$e,l$e,Uf,rQ,i$e,d$e,I8,c$e,f$e,m$e,Jf,tQ,g$e,h$e,D8,p$e,_$e,u$e,Yf,aQ,b$e,v$e,j8,T$e,F$e,C$e,Kf,nQ,M$e,E$e,N8,y$e,w$e,A$e,Zf,sQ,L$e,B$e,q8,x$e,k$e,R$e,em,lQ,S$e,P$e,G8,$$e,I$e,D$e,om,iQ,j$e,N$e,O8,q$e,G$e,O$e,rm,dQ,X$e,V$e,X8,z$e,W$e,Q$e,tm,cQ,H$e,U$e,V8,J$e,Y$e,K$e,am,fQ,Z$e,eIe,z8,oIe,rIe,tIe,nm,mQ,aIe,nIe,W8,sIe,lIe,iIe,sm,gQ,dIe,cIe,Q8,fIe,mIe,gIe,lm,hQ,hIe,pIe,H8,_Ie,uIe,bIe,im,pQ,vIe,TIe,U8,FIe,CIe,MIe,dm,_Q,EIe,yIe,J8,wIe,AIe,LIe,cm,uQ,BIe,xIe,Y8,kIe,RIe,SIe,fm,bQ,PIe,$Ie,K8,IIe,DIe,jIe,mm,vQ,NIe,qIe,Z8,GIe,OIe,XIe,gm,TQ,VIe,zIe,e7,WIe,QIe,HIe,hm,FQ,UIe,JIe,o7,YIe,KIe,ZIe,pm,CQ,eDe,oDe,r7,rDe,tDe,aDe,_m,MQ,nDe,sDe,t7,lDe,iDe,dDe,um,EQ,cDe,fDe,a7,mDe,gDe,hDe,bm,yQ,pDe,_De,n7,uDe,bDe,vDe,vm,wQ,TDe,FDe,s7,CDe,MDe,EDe,Tm,AQ,yDe,wDe,l7,ADe,LDe,BDe,Fm,LQ,xDe,kDe,i7,RDe,SDe,PDe,Cm,BQ,$De,IDe,d7,DDe,jDe,NDe,Mm,xQ,qDe,GDe,c7,ODe,XDe,VDe,Em,kQ,zDe,WDe,f7,QDe,HDe,UDe,ym,RQ,JDe,YDe,m7,KDe,ZDe,eje,wm,SQ,oje,rje,g7,tje,aje,nje,Am,PQ,sje,lje,h7,ije,dje,cje,Lm,$Q,fje,mje,p7,gje,hje,pje,Bm,IQ,_je,uje,_7,bje,vje,Tje,xm,DQ,Fje,Cje,u7,Mje,Eje,yje,km,jQ,wje,Aje,b7,Lje,Bje,xje,Rm,NQ,kje,Rje,v7,Sje,Pje,$je,Sm,qQ,Ije,Dje,T7,jje,Nje,qje,Pm,GQ,Gje,Oje,F7,Xje,Vje,zje,$m,OQ,Wje,Qje,C7,Hje,Uje,Jje,Im,XQ,Yje,Kje,M7,Zje,eNe,oNe,Dm,VQ,rNe,tNe,E7,aNe,nNe,sNe,jm,zQ,lNe,iNe,y7,dNe,cNe,fNe,Nm,WQ,mNe,gNe,w7,hNe,pNe,_Ne,qm,QQ,uNe,bNe,A7,vNe,TNe,FNe,Gm,HQ,CNe,MNe,L7,ENe,yNe,wNe,Om,UQ,ANe,LNe,B7,BNe,xNe,kNe,Xm,JQ,RNe,SNe,x7,PNe,$Ne,INe,Vm,YQ,DNe,jNe,k7,NNe,qNe,GNe,zm,KQ,ONe,XNe,R7,VNe,zNe,WNe,Wm,ZQ,QNe,HNe,S7,UNe,JNe,YNe,Qm,eH,KNe,ZNe,P7,eqe,oqe,rqe,Hm,oH,tqe,aqe,$7,nqe,sqe,lqe,Um,rH,iqe,dqe,I7,cqe,fqe,mqe,Jm,tH,gqe,hqe,D7,pqe,_qe,uqe,Ym,aH,bqe,vqe,j7,Tqe,Fqe,Cqe,Km,nH,Mqe,Eqe,N7,yqe,wqe,Aqe,Zm,sH,Lqe,Bqe,q7,xqe,kqe,Rqe,eg,lH,Sqe,Pqe,G7,$qe,Iqe,Dqe,og,iH,jqe,Nqe,O7,qqe,Gqe,Oqe,rg,dH,Xqe,Vqe,X7,zqe,Wqe,Qqe,tg,cH,Hqe,Uqe,V7,Jqe,Yqe,Kqe,ag,fH,Zqe,eGe,z7,oGe,rGe,tGe,ng,mH,aGe,nGe,W7,sGe,lGe,iGe,sg,gH,dGe,cGe,Q7,fGe,mGe,gGe,lg,hH,hGe,pGe,H7,_Ge,uGe,bGe,ig,pH,vGe,TGe,U7,FGe,CGe,MGe,dg,_H,EGe,yGe,J7,wGe,AGe,LGe,cg,uH,BGe,xGe,Y7,kGe,RGe,SGe,fg,bH,PGe,$Ge,K7,IGe,DGe,jGe,mg,vH,NGe,qGe,Z7,GGe,OGe,XGe,gg,TH,VGe,zGe,eB,WGe,QGe,HGe,hg,FH,UGe,JGe,oB,YGe,KGe,ZGe,pg,CH,eOe,oOe,rB,rOe,tOe,aOe,_g,MH,nOe,sOe,tB,lOe,iOe,dOe,ug,EH,cOe,fOe,aB,mOe,gOe,hOe,yH,pOe,_Oe,DE,uOe,bg,jE,bOe,wH,vOe,H7e,ji,vg,AH,NE,TOe,LH,FOe,U7e,Vo,qE,COe,GE,MOe,nB,EOe,yOe,wOe,OE,AOe,BH,LOe,BOe,xOe,mo,XE,kOe,xH,ROe,SOe,Da,POe,kH,$Oe,IOe,RH,DOe,jOe,SH,NOe,qOe,GOe,M,Gn,PH,OOe,XOe,sB,VOe,zOe,lB,WOe,QOe,HOe,On,$H,UOe,JOe,iB,YOe,KOe,dB,ZOe,eXe,oXe,Xn,IH,rXe,tXe,cB,aXe,nXe,fB,sXe,lXe,iXe,Tg,DH,dXe,cXe,mB,fXe,mXe,gXe,Vn,jH,hXe,pXe,gB,_Xe,uXe,hB,bXe,vXe,TXe,Fg,NH,FXe,CXe,pB,MXe,EXe,yXe,Cg,qH,wXe,AXe,_B,LXe,BXe,xXe,Mg,GH,kXe,RXe,uB,SXe,PXe,$Xe,zn,OH,IXe,DXe,bB,jXe,NXe,vB,qXe,GXe,OXe,Wn,XH,XXe,VXe,TB,zXe,WXe,FB,QXe,HXe,UXe,Qn,VH,JXe,YXe,CB,KXe,ZXe,MB,eVe,oVe,rVe,Eg,zH,tVe,aVe,EB,nVe,sVe,lVe,yg,WH,iVe,dVe,yB,cVe,fVe,mVe,Hn,QH,gVe,hVe,wB,pVe,_Ve,AB,uVe,bVe,vVe,wg,HH,TVe,FVe,LB,CVe,MVe,EVe,Un,UH,yVe,wVe,BB,AVe,LVe,xB,BVe,xVe,kVe,Jn,JH,RVe,SVe,kB,PVe,$Ve,RB,IVe,DVe,jVe,Yn,YH,NVe,qVe,SB,GVe,OVe,KH,XVe,VVe,zVe,Ag,ZH,WVe,QVe,PB,HVe,UVe,JVe,Kn,eU,YVe,KVe,$B,ZVe,eze,IB,oze,rze,tze,Lg,oU,aze,nze,DB,sze,lze,ize,Zn,rU,dze,cze,jB,fze,mze,NB,gze,hze,pze,es,tU,_ze,uze,qB,bze,vze,GB,Tze,Fze,Cze,os,aU,Mze,Eze,OB,yze,wze,XB,Aze,Lze,Bze,Bg,nU,xze,kze,VB,Rze,Sze,Pze,rs,sU,$ze,Ize,zB,Dze,jze,WB,Nze,qze,Gze,xg,lU,Oze,Xze,QB,Vze,zze,Wze,ts,iU,Qze,Hze,HB,Uze,Jze,UB,Yze,Kze,Zze,as,dU,eWe,oWe,JB,rWe,tWe,YB,aWe,nWe,sWe,ns,cU,lWe,iWe,KB,dWe,cWe,ZB,fWe,mWe,gWe,ss,fU,hWe,pWe,ex,_We,uWe,ox,bWe,vWe,TWe,kg,mU,FWe,CWe,rx,MWe,EWe,yWe,ls,gU,wWe,AWe,tx,LWe,BWe,ax,xWe,kWe,RWe,is,hU,SWe,PWe,nx,$We,IWe,sx,DWe,jWe,NWe,ds,pU,qWe,GWe,lx,OWe,XWe,ix,VWe,zWe,WWe,cs,_U,QWe,HWe,dx,UWe,JWe,cx,YWe,KWe,ZWe,fs,uU,eQe,oQe,fx,rQe,tQe,mx,aQe,nQe,sQe,ms,bU,lQe,iQe,gx,dQe,cQe,hx,fQe,mQe,gQe,Rg,vU,hQe,pQe,px,_Qe,uQe,bQe,gs,TU,vQe,TQe,_x,FQe,CQe,ux,MQe,EQe,yQe,Sg,FU,wQe,AQe,bx,LQe,BQe,xQe,Pg,CU,kQe,RQe,vx,SQe,PQe,$Qe,hs,MU,IQe,DQe,Tx,jQe,NQe,Fx,qQe,GQe,OQe,ps,EU,XQe,VQe,Cx,zQe,WQe,Mx,QQe,HQe,UQe,$g,yU,JQe,YQe,Ex,KQe,ZQe,eHe,_s,wU,oHe,rHe,yx,tHe,aHe,wx,nHe,sHe,lHe,us,AU,iHe,dHe,Ax,cHe,fHe,Lx,mHe,gHe,hHe,bs,LU,pHe,_He,Bx,uHe,bHe,xx,vHe,THe,FHe,vs,BU,CHe,MHe,kx,EHe,yHe,Rx,wHe,AHe,LHe,Ts,xU,BHe,xHe,Sx,kHe,RHe,Px,SHe,PHe,$He,Ig,kU,IHe,DHe,$x,jHe,NHe,qHe,Dg,RU,GHe,OHe,Ix,XHe,VHe,zHe,jg,SU,WHe,QHe,Dx,HHe,UHe,JHe,Ng,PU,YHe,KHe,jx,ZHe,eUe,oUe,Fs,$U,rUe,tUe,Nx,aUe,nUe,qx,sUe,lUe,iUe,qg,IU,dUe,cUe,Gx,fUe,mUe,gUe,Cs,DU,hUe,pUe,Ox,_Ue,uUe,Xx,bUe,vUe,TUe,Ms,jU,FUe,CUe,Vx,MUe,EUe,zx,yUe,wUe,AUe,Es,NU,LUe,BUe,Wx,xUe,kUe,Qx,RUe,SUe,PUe,ys,qU,$Ue,IUe,Hx,DUe,jUe,Ux,NUe,qUe,GUe,ws,GU,OUe,XUe,Jx,VUe,zUe,Yx,WUe,QUe,HUe,Gg,OU,UUe,JUe,Kx,YUe,KUe,ZUe,Og,XU,eJe,oJe,Zx,rJe,tJe,aJe,As,VU,nJe,sJe,ek,lJe,iJe,ok,dJe,cJe,fJe,Ls,zU,mJe,gJe,rk,hJe,pJe,tk,_Je,uJe,bJe,Bs,WU,vJe,TJe,ak,FJe,CJe,nk,MJe,EJe,yJe,Xg,QU,wJe,AJe,sk,LJe,BJe,xJe,Vg,HU,kJe,RJe,lk,SJe,PJe,$Je,zg,UU,IJe,DJe,ik,jJe,NJe,qJe,Wg,JU,GJe,OJe,dk,XJe,VJe,zJe,xs,YU,WJe,QJe,ck,HJe,UJe,fk,JJe,YJe,KJe,Qg,KU,ZJe,eYe,mk,oYe,rYe,tYe,Hg,ZU,aYe,nYe,gk,sYe,lYe,iYe,ks,eJ,dYe,cYe,hk,fYe,mYe,pk,gYe,hYe,pYe,Rs,oJ,_Ye,uYe,_k,bYe,vYe,uk,TYe,FYe,CYe,rJ,MYe,EYe,VE,yYe,Ug,zE,wYe,tJ,AYe,J7e,Ni,Jg,aJ,WE,LYe,nJ,BYe,Y7e,zo,QE,xYe,HE,kYe,bk,RYe,SYe,PYe,UE,$Ye,sJ,IYe,DYe,jYe,ke,JE,NYe,lJ,qYe,GYe,ja,OYe,iJ,XYe,VYe,dJ,zYe,WYe,cJ,QYe,HYe,UYe,ae,Yg,fJ,JYe,YYe,vk,KYe,ZYe,eKe,Kg,mJ,oKe,rKe,Tk,tKe,aKe,nKe,Zg,gJ,sKe,lKe,Fk,iKe,dKe,cKe,eh,hJ,fKe,mKe,Ck,gKe,hKe,pKe,oh,pJ,_Ke,uKe,Mk,bKe,vKe,TKe,rh,_J,FKe,CKe,Ek,MKe,EKe,yKe,th,uJ,wKe,AKe,yk,LKe,BKe,xKe,ah,bJ,kKe,RKe,wk,SKe,PKe,$Ke,nh,vJ,IKe,DKe,Ak,jKe,NKe,qKe,sh,TJ,GKe,OKe,Lk,XKe,VKe,zKe,lh,FJ,WKe,QKe,Bk,HKe,UKe,JKe,ih,CJ,YKe,KKe,xk,ZKe,eZe,oZe,dh,MJ,rZe,tZe,kk,aZe,nZe,sZe,ch,EJ,lZe,iZe,Rk,dZe,cZe,fZe,fh,yJ,mZe,gZe,Sk,hZe,pZe,_Ze,mh,wJ,uZe,bZe,Pk,vZe,TZe,FZe,gh,CZe,AJ,MZe,EZe,YE,yZe,hh,KE,wZe,LJ,AZe,K7e,qi,ph,BJ,ZE,LZe,xJ,BZe,Z7e,Wo,e3,xZe,o3,kZe,$k,RZe,SZe,PZe,r3,$Ze,kJ,IZe,DZe,jZe,Re,t3,NZe,RJ,qZe,GZe,Gi,OZe,SJ,XZe,VZe,PJ,zZe,WZe,QZe,Ae,_h,$J,HZe,UZe,Ik,JZe,YZe,KZe,uh,IJ,ZZe,eeo,Dk,oeo,reo,teo,bh,DJ,aeo,neo,jk,seo,leo,ieo,vh,jJ,deo,ceo,Nk,feo,meo,geo,Th,NJ,heo,peo,qk,_eo,ueo,beo,Fh,qJ,veo,Teo,Gk,Feo,Ceo,Meo,Ch,GJ,Eeo,yeo,Ok,weo,Aeo,Leo,Mh,OJ,Beo,xeo,Xk,keo,Reo,Seo,Eh,Peo,XJ,$eo,Ieo,a3,Deo,yh,n3,jeo,VJ,Neo,eBe,Oi,wh,zJ,s3,qeo,WJ,Geo,oBe,Qo,l3,Oeo,Xi,Xeo,QJ,Veo,zeo,HJ,Weo,Qeo,Heo,i3,Ueo,UJ,Jeo,Yeo,Keo,qr,d3,Zeo,JJ,eoo,ooo,Vi,roo,YJ,too,aoo,KJ,noo,soo,loo,ZJ,ioo,doo,c3,coo,Se,f3,foo,eY,moo,goo,Na,hoo,oY,poo,_oo,rY,uoo,boo,tY,voo,Too,Foo,F,Ah,aY,Coo,Moo,Vk,Eoo,yoo,woo,Lh,nY,Aoo,Loo,zk,Boo,xoo,koo,Bh,sY,Roo,Soo,Wk,Poo,$oo,Ioo,xh,lY,Doo,joo,Qk,Noo,qoo,Goo,kh,iY,Ooo,Xoo,Hk,Voo,zoo,Woo,Rh,dY,Qoo,Hoo,Uk,Uoo,Joo,Yoo,Sh,cY,Koo,Zoo,Jk,ero,oro,rro,Ph,fY,tro,aro,Yk,nro,sro,lro,$h,mY,iro,dro,Kk,cro,fro,mro,Ih,gY,gro,hro,Zk,pro,_ro,uro,Dh,hY,bro,vro,eR,Tro,Fro,Cro,jh,pY,Mro,Ero,oR,yro,wro,Aro,Nh,_Y,Lro,Bro,rR,xro,kro,Rro,qh,uY,Sro,Pro,tR,$ro,Iro,Dro,Gh,bY,jro,Nro,aR,qro,Gro,Oro,Oh,vY,Xro,Vro,nR,zro,Wro,Qro,Xh,TY,Hro,Uro,sR,Jro,Yro,Kro,Vh,FY,Zro,eto,lR,oto,rto,tto,zh,CY,ato,nto,iR,sto,lto,ito,Wh,MY,dto,cto,dR,fto,mto,gto,Qh,EY,hto,pto,cR,_to,uto,bto,Hh,yY,vto,Tto,fR,Fto,Cto,Mto,Uh,wY,Eto,yto,mR,wto,Ato,Lto,Jh,AY,Bto,xto,gR,kto,Rto,Sto,Yh,LY,Pto,$to,hR,Ito,Dto,jto,Kh,BY,Nto,qto,pR,Gto,Oto,Xto,Zh,xY,Vto,zto,_R,Wto,Qto,Hto,Ss,kY,Uto,Jto,uR,Yto,Kto,bR,Zto,eao,oao,ep,RY,rao,tao,vR,aao,nao,sao,op,SY,lao,iao,TR,dao,cao,fao,rp,PY,mao,gao,FR,hao,pao,_ao,tp,$Y,uao,bao,CR,vao,Tao,Fao,ap,IY,Cao,Mao,MR,Eao,yao,wao,np,DY,Aao,Lao,ER,Bao,xao,kao,sp,jY,Rao,Sao,yR,Pao,$ao,Iao,lp,NY,Dao,jao,wR,Nao,qao,Gao,ip,qY,Oao,Xao,AR,Vao,zao,Wao,dp,GY,Qao,Hao,LR,Uao,Jao,Yao,cp,OY,Kao,Zao,BR,eno,ono,rno,fp,XY,tno,ano,xR,nno,sno,lno,mp,VY,ino,dno,kR,cno,fno,mno,gp,zY,gno,hno,RR,pno,_no,uno,hp,WY,bno,vno,SR,Tno,Fno,Cno,pp,QY,Mno,Eno,PR,yno,wno,Ano,_p,HY,Lno,Bno,$R,xno,kno,Rno,up,UY,Sno,Pno,IR,$no,Ino,Dno,bp,JY,jno,Nno,DR,qno,Gno,Ono,vp,YY,Xno,Vno,jR,zno,Wno,Qno,Tp,KY,Hno,Uno,NR,Jno,Yno,Kno,Fp,ZY,Zno,eso,qR,oso,rso,tso,Cp,eK,aso,nso,GR,sso,lso,iso,Mp,oK,dso,cso,OR,fso,mso,gso,Ep,rK,hso,pso,XR,_so,uso,bso,yp,tK,vso,Tso,VR,Fso,Cso,Mso,wp,aK,Eso,yso,zR,wso,Aso,Lso,Ap,nK,Bso,xso,WR,kso,Rso,Sso,Lp,sK,Pso,$so,QR,Iso,Dso,jso,Bp,lK,Nso,qso,HR,Gso,Oso,Xso,xp,iK,Vso,zso,UR,Wso,Qso,Hso,kp,dK,Uso,Jso,JR,Yso,Kso,Zso,Rp,cK,elo,olo,YR,rlo,tlo,alo,Sp,fK,nlo,slo,KR,llo,ilo,dlo,Pp,mK,clo,flo,ZR,mlo,glo,hlo,$p,gK,plo,_lo,eS,ulo,blo,vlo,Ip,hK,Tlo,Flo,oS,Clo,Mlo,Elo,Dp,pK,ylo,wlo,rS,Alo,Llo,Blo,jp,_K,xlo,klo,tS,Rlo,Slo,Plo,Np,uK,$lo,Ilo,aS,Dlo,jlo,Nlo,qp,bK,qlo,Glo,nS,Olo,Xlo,Vlo,Gp,vK,zlo,Wlo,sS,Qlo,Hlo,Ulo,Op,TK,Jlo,Ylo,lS,Klo,Zlo,eio,Xp,FK,oio,rio,iS,tio,aio,nio,Vp,CK,sio,lio,dS,iio,dio,cio,zp,MK,fio,mio,cS,gio,hio,pio,Wp,EK,_io,uio,fS,bio,vio,Tio,Qp,yK,Fio,Cio,mS,Mio,Eio,yio,Hp,wK,wio,Aio,gS,Lio,Bio,xio,Up,AK,kio,Rio,hS,Sio,Pio,$io,Jp,LK,Iio,Dio,pS,jio,Nio,qio,Yp,BK,Gio,Oio,_S,Xio,Vio,zio,Kp,xK,Wio,Qio,uS,Hio,Uio,Jio,Zp,kK,Yio,Kio,bS,Zio,edo,odo,e_,RK,rdo,tdo,vS,ado,ndo,sdo,o_,SK,ldo,ido,TS,ddo,cdo,fdo,r_,PK,mdo,gdo,FS,hdo,pdo,_do,t_,$K,udo,bdo,CS,vdo,Tdo,Fdo,a_,IK,Cdo,Mdo,MS,Edo,ydo,wdo,n_,DK,Ado,Ldo,ES,Bdo,xdo,kdo,s_,Rdo,jK,Sdo,Pdo,NK,$do,Ido,qK,Ddo,jdo,m3,rBe,zi,l_,GK,g3,Ndo,OK,qdo,tBe,Ho,h3,Gdo,Wi,Odo,XK,Xdo,Vdo,VK,zdo,Wdo,Qdo,p3,Hdo,zK,Udo,Jdo,Ydo,Gr,_3,Kdo,WK,Zdo,eco,Qi,oco,QK,rco,tco,HK,aco,nco,sco,UK,lco,ico,u3,dco,Pe,b3,cco,JK,fco,mco,qa,gco,YK,hco,pco,KK,_co,uco,ZK,bco,vco,Tco,k,i_,eZ,Fco,Cco,yS,Mco,Eco,yco,d_,oZ,wco,Aco,wS,Lco,Bco,xco,c_,rZ,kco,Rco,AS,Sco,Pco,$co,f_,tZ,Ico,Dco,LS,jco,Nco,qco,m_,aZ,Gco,Oco,BS,Xco,Vco,zco,g_,nZ,Wco,Qco,xS,Hco,Uco,Jco,h_,sZ,Yco,Kco,kS,Zco,efo,ofo,p_,lZ,rfo,tfo,RS,afo,nfo,sfo,__,iZ,lfo,ifo,SS,dfo,cfo,ffo,u_,dZ,mfo,gfo,PS,hfo,pfo,_fo,b_,cZ,ufo,bfo,$S,vfo,Tfo,Ffo,v_,fZ,Cfo,Mfo,IS,Efo,yfo,wfo,T_,mZ,Afo,Lfo,DS,Bfo,xfo,kfo,F_,gZ,Rfo,Sfo,jS,Pfo,$fo,Ifo,C_,hZ,Dfo,jfo,NS,Nfo,qfo,Gfo,M_,pZ,Ofo,Xfo,qS,Vfo,zfo,Wfo,E_,_Z,Qfo,Hfo,GS,Ufo,Jfo,Yfo,y_,uZ,Kfo,Zfo,OS,emo,omo,rmo,w_,bZ,tmo,amo,XS,nmo,smo,lmo,A_,vZ,imo,dmo,VS,cmo,fmo,mmo,L_,TZ,gmo,hmo,zS,pmo,_mo,umo,B_,FZ,bmo,vmo,WS,Tmo,Fmo,Cmo,x_,CZ,Mmo,Emo,QS,ymo,wmo,Amo,k_,MZ,Lmo,Bmo,HS,xmo,kmo,Rmo,R_,EZ,Smo,Pmo,US,$mo,Imo,Dmo,S_,yZ,jmo,Nmo,JS,qmo,Gmo,Omo,P_,wZ,Xmo,Vmo,YS,zmo,Wmo,Qmo,$_,AZ,Hmo,Umo,KS,Jmo,Ymo,Kmo,I_,LZ,Zmo,ego,ZS,ogo,rgo,tgo,D_,BZ,ago,ngo,eP,sgo,lgo,igo,j_,xZ,dgo,cgo,oP,fgo,mgo,ggo,N_,kZ,hgo,pgo,rP,_go,ugo,bgo,q_,RZ,vgo,Tgo,tP,Fgo,Cgo,Mgo,G_,SZ,Ego,ygo,aP,wgo,Ago,Lgo,O_,PZ,Bgo,xgo,nP,kgo,Rgo,Sgo,X_,$Z,Pgo,$go,sP,Igo,Dgo,jgo,V_,IZ,Ngo,qgo,lP,Ggo,Ogo,Xgo,z_,DZ,Vgo,zgo,iP,Wgo,Qgo,Hgo,W_,jZ,Ugo,Jgo,dP,Ygo,Kgo,Zgo,Q_,eho,NZ,oho,rho,qZ,tho,aho,GZ,nho,sho,v3,aBe,Hi,H_,OZ,T3,lho,XZ,iho,nBe,Uo,F3,dho,Ui,cho,VZ,fho,mho,zZ,gho,hho,pho,C3,_ho,WZ,uho,bho,vho,Or,M3,Tho,QZ,Fho,Cho,Ji,Mho,HZ,Eho,yho,UZ,who,Aho,Lho,JZ,Bho,xho,E3,kho,$e,y3,Rho,YZ,Sho,Pho,Ga,$ho,KZ,Iho,Dho,ZZ,jho,Nho,eee,qho,Gho,Oho,$,U_,oee,Xho,Vho,cP,zho,Who,Qho,J_,ree,Hho,Uho,fP,Jho,Yho,Kho,Y_,tee,Zho,epo,mP,opo,rpo,tpo,K_,aee,apo,npo,gP,spo,lpo,ipo,Z_,nee,dpo,cpo,hP,fpo,mpo,gpo,eu,see,hpo,ppo,pP,_po,upo,bpo,ou,lee,vpo,Tpo,_P,Fpo,Cpo,Mpo,ru,iee,Epo,ypo,uP,wpo,Apo,Lpo,tu,dee,Bpo,xpo,bP,kpo,Rpo,Spo,au,cee,Ppo,$po,vP,Ipo,Dpo,jpo,nu,fee,Npo,qpo,TP,Gpo,Opo,Xpo,su,mee,Vpo,zpo,FP,Wpo,Qpo,Hpo,lu,gee,Upo,Jpo,CP,Ypo,Kpo,Zpo,iu,hee,e_o,o_o,MP,r_o,t_o,a_o,du,pee,n_o,s_o,EP,l_o,i_o,d_o,cu,_ee,c_o,f_o,yP,m_o,g_o,h_o,fu,uee,p_o,__o,wP,u_o,b_o,v_o,mu,bee,T_o,F_o,AP,C_o,M_o,E_o,gu,vee,y_o,w_o,LP,A_o,L_o,B_o,hu,Tee,x_o,k_o,BP,R_o,S_o,P_o,pu,Fee,$_o,I_o,xP,D_o,j_o,N_o,_u,Cee,q_o,G_o,kP,O_o,X_o,V_o,uu,Mee,z_o,W_o,RP,Q_o,H_o,U_o,bu,Eee,J_o,Y_o,SP,K_o,Z_o,euo,vu,yee,ouo,ruo,PP,tuo,auo,nuo,Tu,wee,suo,luo,$P,iuo,duo,cuo,Fu,Aee,fuo,muo,IP,guo,huo,puo,Cu,Lee,_uo,uuo,DP,buo,vuo,Tuo,Mu,Bee,Fuo,Cuo,jP,Muo,Euo,yuo,Eu,xee,wuo,Auo,NP,Luo,Buo,xuo,yu,kee,kuo,Ruo,qP,Suo,Puo,$uo,wu,Ree,Iuo,Duo,GP,juo,Nuo,quo,Au,See,Guo,Ouo,OP,Xuo,Vuo,zuo,Lu,Pee,Wuo,Quo,XP,Huo,Uuo,Juo,Bu,$ee,Yuo,Kuo,VP,Zuo,e1o,o1o,xu,r1o,Iee,t1o,a1o,Dee,n1o,s1o,jee,l1o,i1o,w3,sBe,Yi,ku,Nee,A3,d1o,qee,c1o,lBe,Jo,L3,f1o,Ki,m1o,Gee,g1o,h1o,Oee,p1o,_1o,u1o,B3,b1o,Xee,v1o,T1o,F1o,Xr,x3,C1o,Vee,M1o,E1o,Zi,y1o,zee,w1o,A1o,Wee,L1o,B1o,x1o,Qee,k1o,R1o,k3,S1o,Ie,R3,P1o,Hee,$1o,I1o,Oa,D1o,Uee,j1o,N1o,Jee,q1o,G1o,Yee,O1o,X1o,V1o,I,Ru,Kee,z1o,W1o,zP,Q1o,H1o,U1o,Su,Zee,J1o,Y1o,WP,K1o,Z1o,e2o,Pu,eoe,o2o,r2o,QP,t2o,a2o,n2o,$u,ooe,s2o,l2o,HP,i2o,d2o,c2o,Iu,roe,f2o,m2o,UP,g2o,h2o,p2o,Du,toe,_2o,u2o,JP,b2o,v2o,T2o,ju,aoe,F2o,C2o,YP,M2o,E2o,y2o,Nu,noe,w2o,A2o,KP,L2o,B2o,x2o,qu,soe,k2o,R2o,ZP,S2o,P2o,$2o,Gu,loe,I2o,D2o,e$,j2o,N2o,q2o,Ou,ioe,G2o,O2o,o$,X2o,V2o,z2o,Xu,doe,W2o,Q2o,r$,H2o,U2o,J2o,Vu,coe,Y2o,K2o,t$,Z2o,ebo,obo,zu,foe,rbo,tbo,a$,abo,nbo,sbo,Wu,moe,lbo,ibo,n$,dbo,cbo,fbo,Qu,goe,mbo,gbo,s$,hbo,pbo,_bo,Hu,hoe,ubo,bbo,l$,vbo,Tbo,Fbo,Uu,poe,Cbo,Mbo,i$,Ebo,ybo,wbo,Ju,_oe,Abo,Lbo,d$,Bbo,xbo,kbo,Yu,uoe,Rbo,Sbo,c$,Pbo,$bo,Ibo,Ku,boe,Dbo,jbo,f$,Nbo,qbo,Gbo,Zu,voe,Obo,Xbo,m$,Vbo,zbo,Wbo,e1,Toe,Qbo,Hbo,g$,Ubo,Jbo,Ybo,o1,Foe,Kbo,Zbo,h$,e5o,o5o,r5o,r1,Coe,t5o,a5o,p$,n5o,s5o,l5o,t1,Moe,i5o,d5o,_$,c5o,f5o,m5o,a1,Eoe,g5o,h5o,u$,p5o,_5o,u5o,n1,yoe,b5o,v5o,b$,T5o,F5o,C5o,s1,woe,M5o,E5o,v$,y5o,w5o,A5o,l1,Aoe,L5o,B5o,T$,x5o,k5o,R5o,i1,Loe,S5o,P5o,Boe,$5o,I5o,D5o,d1,xoe,j5o,N5o,F$,q5o,G5o,O5o,c1,koe,X5o,V5o,C$,z5o,W5o,Q5o,f1,Roe,H5o,U5o,M$,J5o,Y5o,K5o,m1,Soe,Z5o,evo,E$,ovo,rvo,tvo,g1,avo,Poe,nvo,svo,$oe,lvo,ivo,Ioe,dvo,cvo,S3,iBe,ed,h1,Doe,P3,fvo,joe,mvo,dBe,Yo,$3,gvo,od,hvo,Noe,pvo,_vo,qoe,uvo,bvo,vvo,I3,Tvo,Goe,Fvo,Cvo,Mvo,Vr,D3,Evo,Ooe,yvo,wvo,rd,Avo,Xoe,Lvo,Bvo,Voe,xvo,kvo,Rvo,zoe,Svo,Pvo,j3,$vo,De,N3,Ivo,Woe,Dvo,jvo,Xa,Nvo,Qoe,qvo,Gvo,Hoe,Ovo,Xvo,Uoe,Vvo,zvo,Wvo,ne,p1,Joe,Qvo,Hvo,y$,Uvo,Jvo,Yvo,_1,Yoe,Kvo,Zvo,w$,eTo,oTo,rTo,u1,Koe,tTo,aTo,A$,nTo,sTo,lTo,b1,Zoe,iTo,dTo,L$,cTo,fTo,mTo,v1,ere,gTo,hTo,B$,pTo,_To,uTo,T1,ore,bTo,vTo,x$,TTo,FTo,CTo,F1,rre,MTo,ETo,k$,yTo,wTo,ATo,C1,tre,LTo,BTo,R$,xTo,kTo,RTo,M1,are,STo,PTo,S$,$To,ITo,DTo,E1,nre,jTo,NTo,P$,qTo,GTo,OTo,y1,sre,XTo,VTo,$$,zTo,WTo,QTo,w1,lre,HTo,UTo,I$,JTo,YTo,KTo,A1,ire,ZTo,eFo,D$,oFo,rFo,tFo,L1,dre,aFo,nFo,j$,sFo,lFo,iFo,B1,cre,dFo,cFo,N$,fFo,mFo,gFo,x1,fre,hFo,pFo,q$,_Fo,uFo,bFo,k1,vFo,mre,TFo,FFo,gre,CFo,MFo,hre,EFo,yFo,q3,cBe,td,R1,pre,G3,wFo,_re,AFo,fBe,Ko,O3,LFo,ad,BFo,ure,xFo,kFo,bre,RFo,SFo,PFo,X3,$Fo,vre,IFo,DFo,jFo,zr,V3,NFo,Tre,qFo,GFo,nd,OFo,Fre,XFo,VFo,Cre,zFo,WFo,QFo,Mre,HFo,UFo,z3,JFo,je,W3,YFo,Ere,KFo,ZFo,Va,e9o,yre,o9o,r9o,wre,t9o,a9o,Are,n9o,s9o,l9o,A,S1,Lre,i9o,d9o,G$,c9o,f9o,m9o,P1,Bre,g9o,h9o,O$,p9o,_9o,u9o,$1,xre,b9o,v9o,X$,T9o,F9o,C9o,I1,kre,M9o,E9o,V$,y9o,w9o,A9o,D1,Rre,L9o,B9o,z$,x9o,k9o,R9o,j1,Sre,S9o,P9o,W$,$9o,I9o,D9o,N1,Pre,j9o,N9o,Q$,q9o,G9o,O9o,q1,$re,X9o,V9o,H$,z9o,W9o,Q9o,G1,Ire,H9o,U9o,U$,J9o,Y9o,K9o,O1,Dre,Z9o,eCo,J$,oCo,rCo,tCo,X1,jre,aCo,nCo,Y$,sCo,lCo,iCo,V1,Nre,dCo,cCo,K$,fCo,mCo,gCo,z1,qre,hCo,pCo,Z$,_Co,uCo,bCo,W1,Gre,vCo,TCo,eI,FCo,CCo,MCo,Q1,Ore,ECo,yCo,oI,wCo,ACo,LCo,H1,Xre,BCo,xCo,rI,kCo,RCo,SCo,U1,Vre,PCo,$Co,tI,ICo,DCo,jCo,J1,zre,NCo,qCo,aI,GCo,OCo,XCo,Y1,Wre,VCo,zCo,nI,WCo,QCo,HCo,K1,Qre,UCo,JCo,sI,YCo,KCo,ZCo,Z1,Hre,e4o,o4o,lI,r4o,t4o,a4o,e2,Ure,n4o,s4o,iI,l4o,i4o,d4o,o2,Jre,c4o,f4o,dI,m4o,g4o,h4o,r2,Yre,p4o,_4o,cI,u4o,b4o,v4o,t2,Kre,T4o,F4o,fI,C4o,M4o,E4o,a2,Zre,y4o,w4o,mI,A4o,L4o,B4o,n2,ete,x4o,k4o,gI,R4o,S4o,P4o,s2,ote,$4o,I4o,hI,D4o,j4o,N4o,l2,rte,q4o,G4o,pI,O4o,X4o,V4o,i2,tte,z4o,W4o,_I,Q4o,H4o,U4o,d2,ate,J4o,Y4o,uI,K4o,Z4o,eMo,c2,nte,oMo,rMo,bI,tMo,aMo,nMo,f2,ste,sMo,lMo,vI,iMo,dMo,cMo,m2,lte,fMo,mMo,TI,gMo,hMo,pMo,g2,ite,_Mo,uMo,FI,bMo,vMo,TMo,h2,dte,FMo,CMo,CI,MMo,EMo,yMo,p2,cte,wMo,AMo,MI,LMo,BMo,xMo,_2,fte,kMo,RMo,EI,SMo,PMo,$Mo,u2,mte,IMo,DMo,yI,jMo,NMo,qMo,b2,gte,GMo,OMo,wI,XMo,VMo,zMo,v2,hte,WMo,QMo,AI,HMo,UMo,JMo,T2,pte,YMo,KMo,LI,ZMo,eEo,oEo,F2,_te,rEo,tEo,BI,aEo,nEo,sEo,C2,ute,lEo,iEo,xI,dEo,cEo,fEo,M2,bte,mEo,gEo,kI,hEo,pEo,_Eo,E2,vte,uEo,bEo,RI,vEo,TEo,FEo,y2,CEo,Tte,MEo,EEo,Fte,yEo,wEo,Cte,AEo,LEo,Q3,mBe,sd,w2,Mte,H3,BEo,Ete,xEo,gBe,Zo,U3,kEo,ld,REo,yte,SEo,PEo,wte,$Eo,IEo,DEo,J3,jEo,Ate,NEo,qEo,GEo,Wr,Y3,OEo,Lte,XEo,VEo,id,zEo,Bte,WEo,QEo,xte,HEo,UEo,JEo,kte,YEo,KEo,K3,ZEo,Ne,Z3,e3o,Rte,o3o,r3o,za,t3o,Ste,a3o,n3o,Pte,s3o,l3o,$te,i3o,d3o,c3o,G,A2,Ite,f3o,m3o,SI,g3o,h3o,p3o,L2,Dte,_3o,u3o,PI,b3o,v3o,T3o,B2,jte,F3o,C3o,$I,M3o,E3o,y3o,x2,Nte,w3o,A3o,II,L3o,B3o,x3o,k2,qte,k3o,R3o,DI,S3o,P3o,$3o,R2,Gte,I3o,D3o,jI,j3o,N3o,q3o,S2,Ote,G3o,O3o,NI,X3o,V3o,z3o,P2,Xte,W3o,Q3o,qI,H3o,U3o,J3o,$2,Vte,Y3o,K3o,GI,Z3o,eyo,oyo,I2,zte,ryo,tyo,OI,ayo,nyo,syo,D2,Wte,lyo,iyo,XI,dyo,cyo,fyo,j2,Qte,myo,gyo,VI,hyo,pyo,_yo,N2,Hte,uyo,byo,zI,vyo,Tyo,Fyo,q2,Ute,Cyo,Myo,WI,Eyo,yyo,wyo,G2,Jte,Ayo,Lyo,QI,Byo,xyo,kyo,O2,Yte,Ryo,Syo,HI,Pyo,$yo,Iyo,X2,Kte,Dyo,jyo,UI,Nyo,qyo,Gyo,V2,Zte,Oyo,Xyo,JI,Vyo,zyo,Wyo,z2,eae,Qyo,Hyo,YI,Uyo,Jyo,Yyo,W2,oae,Kyo,Zyo,KI,ewo,owo,rwo,Q2,rae,two,awo,ZI,nwo,swo,lwo,H2,tae,iwo,dwo,eD,cwo,fwo,mwo,U2,aae,gwo,hwo,oD,pwo,_wo,uwo,J2,nae,bwo,vwo,rD,Two,Fwo,Cwo,Y2,sae,Mwo,Ewo,tD,ywo,wwo,Awo,K2,lae,Lwo,Bwo,aD,xwo,kwo,Rwo,Z2,iae,Swo,Pwo,nD,$wo,Iwo,Dwo,eb,dae,jwo,Nwo,sD,qwo,Gwo,Owo,ob,Xwo,cae,Vwo,zwo,fae,Wwo,Qwo,mae,Hwo,Uwo,ey,hBe,dd,rb,gae,oy,Jwo,hae,Ywo,pBe,er,ry,Kwo,cd,Zwo,pae,e6o,o6o,_ae,r6o,t6o,a6o,ty,n6o,uae,s6o,l6o,i6o,Qr,ay,d6o,bae,c6o,f6o,fd,m6o,vae,g6o,h6o,Tae,p6o,_6o,u6o,Fae,b6o,v6o,ny,T6o,qe,sy,F6o,Cae,C6o,M6o,Wa,E6o,Mae,y6o,w6o,Eae,A6o,L6o,yae,B6o,x6o,k6o,na,tb,wae,R6o,S6o,lD,P6o,$6o,I6o,ab,Aae,D6o,j6o,iD,N6o,q6o,G6o,nb,Lae,O6o,X6o,dD,V6o,z6o,W6o,sb,Bae,Q6o,H6o,cD,U6o,J6o,Y6o,lb,xae,K6o,Z6o,fD,eAo,oAo,rAo,ib,tAo,kae,aAo,nAo,Rae,sAo,lAo,Sae,iAo,dAo,ly,_Be,md,db,Pae,iy,cAo,$ae,fAo,uBe,or,dy,mAo,gd,gAo,Iae,hAo,pAo,Dae,_Ao,uAo,bAo,cy,vAo,jae,TAo,FAo,CAo,Hr,fy,MAo,Nae,EAo,yAo,hd,wAo,qae,AAo,LAo,Gae,BAo,xAo,kAo,Oae,RAo,SAo,my,PAo,Ge,gy,$Ao,Xae,IAo,DAo,Qa,jAo,Vae,NAo,qAo,zae,GAo,OAo,Wae,XAo,VAo,zAo,N,cb,Qae,WAo,QAo,mD,HAo,UAo,JAo,fb,Hae,YAo,KAo,gD,ZAo,e0o,o0o,mb,Uae,r0o,t0o,hD,a0o,n0o,s0o,gb,Jae,l0o,i0o,pD,d0o,c0o,f0o,hb,Yae,m0o,g0o,_D,h0o,p0o,_0o,pb,Kae,u0o,b0o,uD,v0o,T0o,F0o,_b,Zae,C0o,M0o,bD,E0o,y0o,w0o,ub,ene,A0o,L0o,vD,B0o,x0o,k0o,bb,one,R0o,S0o,TD,P0o,$0o,I0o,vb,rne,D0o,j0o,FD,N0o,q0o,G0o,Tb,tne,O0o,X0o,CD,V0o,z0o,W0o,Fb,ane,Q0o,H0o,MD,U0o,J0o,Y0o,Cb,nne,K0o,Z0o,ED,eLo,oLo,rLo,Mb,sne,tLo,aLo,yD,nLo,sLo,lLo,Eb,lne,iLo,dLo,wD,cLo,fLo,mLo,yb,ine,gLo,hLo,AD,pLo,_Lo,uLo,wb,dne,bLo,vLo,LD,TLo,FLo,CLo,Ab,cne,MLo,ELo,BD,yLo,wLo,ALo,Lb,fne,LLo,BLo,xD,xLo,kLo,RLo,Bb,mne,SLo,PLo,kD,$Lo,ILo,DLo,xb,gne,jLo,NLo,RD,qLo,GLo,OLo,kb,hne,XLo,VLo,SD,zLo,WLo,QLo,Rb,pne,HLo,ULo,PD,JLo,YLo,KLo,Sb,_ne,ZLo,e8o,$D,o8o,r8o,t8o,Pb,une,a8o,n8o,ID,s8o,l8o,i8o,$b,bne,d8o,c8o,DD,f8o,m8o,g8o,Ib,vne,h8o,p8o,jD,_8o,u8o,b8o,Db,Tne,v8o,T8o,ND,F8o,C8o,M8o,jb,Fne,E8o,y8o,qD,w8o,A8o,L8o,Nb,Cne,B8o,x8o,GD,k8o,R8o,S8o,qb,Mne,P8o,$8o,OD,I8o,D8o,j8o,Gb,Ene,N8o,q8o,XD,G8o,O8o,X8o,Ob,yne,V8o,z8o,VD,W8o,Q8o,H8o,Xb,U8o,wne,J8o,Y8o,Ane,K8o,Z8o,Lne,e7o,o7o,hy,bBe,pd,Vb,Bne,py,r7o,xne,t7o,vBe,rr,_y,a7o,_d,n7o,kne,s7o,l7o,Rne,i7o,d7o,c7o,uy,f7o,Sne,m7o,g7o,h7o,Ur,by,p7o,Pne,_7o,u7o,ud,b7o,$ne,v7o,T7o,Ine,F7o,C7o,M7o,Dne,E7o,y7o,vy,w7o,Oe,Ty,A7o,jne,L7o,B7o,Ha,x7o,Nne,k7o,R7o,qne,S7o,P7o,Gne,$7o,I7o,D7o,R,zb,One,j7o,N7o,zD,q7o,G7o,O7o,Wb,Xne,X7o,V7o,WD,z7o,W7o,Q7o,Qb,Vne,H7o,U7o,QD,J7o,Y7o,K7o,Hb,zne,Z7o,eBo,HD,oBo,rBo,tBo,Ub,Wne,aBo,nBo,UD,sBo,lBo,iBo,Jb,Qne,dBo,cBo,JD,fBo,mBo,gBo,Yb,Hne,hBo,pBo,YD,_Bo,uBo,bBo,Kb,Une,vBo,TBo,KD,FBo,CBo,MBo,Zb,Jne,EBo,yBo,ZD,wBo,ABo,LBo,e5,Yne,BBo,xBo,ej,kBo,RBo,SBo,o5,Kne,PBo,$Bo,oj,IBo,DBo,jBo,r5,Zne,NBo,qBo,rj,GBo,OBo,XBo,t5,ese,VBo,zBo,tj,WBo,QBo,HBo,a5,ose,UBo,JBo,aj,YBo,KBo,ZBo,n5,rse,exo,oxo,nj,rxo,txo,axo,s5,tse,nxo,sxo,sj,lxo,ixo,dxo,l5,ase,cxo,fxo,lj,mxo,gxo,hxo,i5,nse,pxo,_xo,ij,uxo,bxo,vxo,d5,sse,Txo,Fxo,dj,Cxo,Mxo,Exo,c5,lse,yxo,wxo,cj,Axo,Lxo,Bxo,f5,ise,xxo,kxo,fj,Rxo,Sxo,Pxo,m5,dse,$xo,Ixo,mj,Dxo,jxo,Nxo,g5,cse,qxo,Gxo,gj,Oxo,Xxo,Vxo,h5,fse,zxo,Wxo,hj,Qxo,Hxo,Uxo,p5,mse,Jxo,Yxo,pj,Kxo,Zxo,eko,_5,gse,oko,rko,_j,tko,ako,nko,u5,hse,sko,lko,uj,iko,dko,cko,b5,pse,fko,mko,bj,gko,hko,pko,v5,_se,_ko,uko,vj,bko,vko,Tko,T5,use,Fko,Cko,Tj,Mko,Eko,yko,F5,bse,wko,Ako,Fj,Lko,Bko,xko,C5,vse,kko,Rko,Cj,Sko,Pko,$ko,M5,Tse,Iko,Dko,Mj,jko,Nko,qko,E5,Fse,Gko,Oko,Ej,Xko,Vko,zko,y5,Cse,Wko,Qko,yj,Hko,Uko,Jko,w5,Mse,Yko,Kko,wj,Zko,eRo,oRo,A5,Ese,rRo,tRo,Aj,aRo,nRo,sRo,L5,yse,lRo,iRo,Lj,dRo,cRo,fRo,B5,wse,mRo,gRo,Bj,hRo,pRo,_Ro,x5,uRo,Ase,bRo,vRo,Lse,TRo,FRo,Bse,CRo,MRo,Fy,TBe,bd,k5,xse,Cy,ERo,kse,yRo,FBe,tr,My,wRo,vd,ARo,Rse,LRo,BRo,Sse,xRo,kRo,RRo,Ey,SRo,Pse,PRo,$Ro,IRo,Jr,yy,DRo,$se,jRo,NRo,Td,qRo,Ise,GRo,ORo,Dse,XRo,VRo,zRo,jse,WRo,QRo,wy,HRo,Xe,Ay,URo,Nse,JRo,YRo,Ua,KRo,qse,ZRo,eSo,Gse,oSo,rSo,Ose,tSo,aSo,nSo,Xse,R5,Vse,sSo,lSo,xj,iSo,dSo,cSo,S5,fSo,zse,mSo,gSo,Wse,hSo,pSo,Qse,_So,uSo,Ly,CBe,Fd,P5,Hse,By,bSo,Use,vSo,MBe,ar,xy,TSo,Cd,FSo,Jse,CSo,MSo,Yse,ESo,ySo,wSo,ky,ASo,Kse,LSo,BSo,xSo,Yr,Ry,kSo,Zse,RSo,SSo,Md,PSo,ele,$So,ISo,ole,DSo,jSo,NSo,rle,qSo,GSo,Sy,OSo,Ve,Py,XSo,tle,VSo,zSo,Ja,WSo,ale,QSo,HSo,nle,USo,JSo,sle,YSo,KSo,ZSo,he,$5,lle,ePo,oPo,kj,rPo,tPo,aPo,I5,ile,nPo,sPo,Rj,lPo,iPo,dPo,Ps,dle,cPo,fPo,Sj,mPo,gPo,Pj,hPo,pPo,_Po,D5,cle,uPo,bPo,$j,vPo,TPo,FPo,la,fle,CPo,MPo,Ij,EPo,yPo,Dj,wPo,APo,jj,LPo,BPo,xPo,j5,mle,kPo,RPo,Nj,SPo,PPo,$Po,N5,gle,IPo,DPo,qj,jPo,NPo,qPo,q5,hle,GPo,OPo,Gj,XPo,VPo,zPo,G5,ple,WPo,QPo,Oj,HPo,UPo,JPo,O5,_le,YPo,KPo,Xj,ZPo,e$o,o$o,X5,r$o,ule,t$o,a$o,ble,n$o,s$o,vle,l$o,i$o,$y,EBe,Ed,V5,Tle,Iy,d$o,Fle,c$o,yBe,nr,Dy,f$o,yd,m$o,Cle,g$o,h$o,Mle,p$o,_$o,u$o,jy,b$o,Ele,v$o,T$o,F$o,Kr,Ny,C$o,yle,M$o,E$o,wd,y$o,wle,w$o,A$o,Ale,L$o,B$o,x$o,Lle,k$o,R$o,qy,S$o,ze,Gy,P$o,Ble,$$o,I$o,Ya,D$o,xle,j$o,N$o,kle,q$o,G$o,Rle,O$o,X$o,V$o,Sle,z5,Ple,z$o,W$o,Vj,Q$o,H$o,U$o,W5,J$o,$le,Y$o,K$o,Ile,Z$o,eIo,Dle,oIo,rIo,Oy,wBe,Ad,Q5,jle,Xy,tIo,Nle,aIo,ABe,sr,Vy,nIo,Ld,sIo,qle,lIo,iIo,Gle,dIo,cIo,fIo,zy,mIo,Ole,gIo,hIo,pIo,Zr,Wy,_Io,Xle,uIo,bIo,Bd,vIo,Vle,TIo,FIo,zle,CIo,MIo,EIo,Wle,yIo,wIo,Qy,AIo,We,Hy,LIo,Qle,BIo,xIo,Ka,kIo,Hle,RIo,SIo,Ule,PIo,$Io,Jle,IIo,DIo,jIo,Le,H5,Yle,NIo,qIo,zj,GIo,OIo,XIo,U5,Kle,VIo,zIo,Wj,WIo,QIo,HIo,J5,Zle,UIo,JIo,Qj,YIo,KIo,ZIo,Y5,eie,eDo,oDo,Hj,rDo,tDo,aDo,K5,oie,nDo,sDo,Uj,lDo,iDo,dDo,Z5,rie,cDo,fDo,Jj,mDo,gDo,hDo,ev,tie,pDo,_Do,Yj,uDo,bDo,vDo,ov,aie,TDo,FDo,Kj,CDo,MDo,EDo,rv,yDo,nie,wDo,ADo,sie,LDo,BDo,lie,xDo,kDo,Uy,LBe,xd,tv,iie,Jy,RDo,die,SDo,BBe,lr,Yy,PDo,kd,$Do,cie,IDo,DDo,fie,jDo,NDo,qDo,Ky,GDo,mie,ODo,XDo,VDo,et,Zy,zDo,gie,WDo,QDo,Rd,HDo,hie,UDo,JDo,pie,YDo,KDo,ZDo,_ie,ejo,ojo,ew,rjo,Qe,ow,tjo,uie,ajo,njo,Za,sjo,bie,ljo,ijo,vie,djo,cjo,Tie,fjo,mjo,gjo,en,av,Fie,hjo,pjo,Zj,_jo,ujo,bjo,nv,Cie,vjo,Tjo,eN,Fjo,Cjo,Mjo,sv,Mie,Ejo,yjo,oN,wjo,Ajo,Ljo,lv,Eie,Bjo,xjo,rN,kjo,Rjo,Sjo,iv,Pjo,yie,$jo,Ijo,wie,Djo,jjo,Aie,Njo,qjo,rw,xBe,Sd,dv,Lie,tw,Gjo,Bie,Ojo,kBe,ir,aw,Xjo,Pd,Vjo,xie,zjo,Wjo,kie,Qjo,Hjo,Ujo,nw,Jjo,Rie,Yjo,Kjo,Zjo,ot,sw,eNo,Sie,oNo,rNo,$d,tNo,Pie,aNo,nNo,$ie,sNo,lNo,iNo,Iie,dNo,cNo,lw,fNo,He,iw,mNo,Die,gNo,hNo,on,pNo,jie,_No,uNo,Nie,bNo,vNo,qie,TNo,FNo,CNo,Be,cv,Gie,MNo,ENo,tN,yNo,wNo,ANo,fv,Oie,LNo,BNo,aN,xNo,kNo,RNo,mv,Xie,SNo,PNo,nN,$No,INo,DNo,gv,Vie,jNo,NNo,sN,qNo,GNo,ONo,hv,zie,XNo,VNo,lN,zNo,WNo,QNo,pv,Wie,HNo,UNo,iN,JNo,YNo,KNo,_v,Qie,ZNo,eqo,dN,oqo,rqo,tqo,uv,Hie,aqo,nqo,cN,sqo,lqo,iqo,bv,dqo,Uie,cqo,fqo,Jie,mqo,gqo,Yie,hqo,pqo,dw,RBe,Id,vv,Kie,cw,_qo,Zie,uqo,SBe,dr,fw,bqo,Dd,vqo,ede,Tqo,Fqo,ode,Cqo,Mqo,Eqo,mw,yqo,rde,wqo,Aqo,Lqo,rt,gw,Bqo,tde,xqo,kqo,jd,Rqo,ade,Sqo,Pqo,nde,$qo,Iqo,Dqo,sde,jqo,Nqo,hw,qqo,Ue,pw,Gqo,lde,Oqo,Xqo,rn,Vqo,ide,zqo,Wqo,dde,Qqo,Hqo,cde,Uqo,Jqo,Yqo,_w,Tv,fde,Kqo,Zqo,fN,eGo,oGo,rGo,Fv,mde,tGo,aGo,mN,nGo,sGo,lGo,Cv,iGo,gde,dGo,cGo,hde,fGo,mGo,pde,gGo,hGo,uw,PBe,Nd,Mv,_de,bw,pGo,ude,_Go,$Be,cr,vw,uGo,qd,bGo,bde,vGo,TGo,vde,FGo,CGo,MGo,Tw,EGo,Tde,yGo,wGo,AGo,tt,Fw,LGo,Fde,BGo,xGo,Gd,kGo,Cde,RGo,SGo,Mde,PGo,$Go,IGo,Ede,DGo,jGo,Cw,NGo,Je,Mw,qGo,yde,GGo,OGo,tn,XGo,wde,VGo,zGo,Ade,WGo,QGo,Lde,HGo,UGo,JGo,an,Ev,Bde,YGo,KGo,gN,ZGo,eOo,oOo,yv,xde,rOo,tOo,hN,aOo,nOo,sOo,wv,kde,lOo,iOo,pN,dOo,cOo,fOo,Av,Rde,mOo,gOo,_N,hOo,pOo,_Oo,Lv,uOo,Sde,bOo,vOo,Pde,TOo,FOo,$de,COo,MOo,Ew,IBe,Od,Bv,Ide,yw,EOo,Dde,yOo,DBe,fr,ww,wOo,Xd,AOo,jde,LOo,BOo,Nde,xOo,kOo,ROo,Aw,SOo,qde,POo,$Oo,IOo,at,Lw,DOo,Gde,jOo,NOo,Vd,qOo,Ode,GOo,OOo,Xde,XOo,VOo,zOo,Vde,WOo,QOo,Bw,HOo,Ye,xw,UOo,zde,JOo,YOo,nn,KOo,Wde,ZOo,eXo,Qde,oXo,rXo,Hde,tXo,aXo,nXo,zd,xv,Ude,sXo,lXo,uN,iXo,dXo,cXo,kv,Jde,fXo,mXo,bN,gXo,hXo,pXo,Rv,Yde,_Xo,uXo,vN,bXo,vXo,TXo,Sv,FXo,Kde,CXo,MXo,Zde,EXo,yXo,ece,wXo,AXo,kw,jBe,Wd,Pv,oce,Rw,LXo,rce,BXo,NBe,mr,Sw,xXo,Qd,kXo,tce,RXo,SXo,ace,PXo,$Xo,IXo,Pw,DXo,nce,jXo,NXo,qXo,nt,$w,GXo,sce,OXo,XXo,Hd,VXo,lce,zXo,WXo,ice,QXo,HXo,UXo,dce,JXo,YXo,Iw,KXo,Ke,Dw,ZXo,cce,eVo,oVo,sn,rVo,fce,tVo,aVo,mce,nVo,sVo,gce,lVo,iVo,dVo,hce,$v,pce,cVo,fVo,TN,mVo,gVo,hVo,Iv,pVo,_ce,_Vo,uVo,uce,bVo,vVo,bce,TVo,FVo,jw,qBe,Ud,Dv,vce,Nw,CVo,Tce,MVo,GBe,gr,qw,EVo,Jd,yVo,Fce,wVo,AVo,Cce,LVo,BVo,xVo,Gw,kVo,Mce,RVo,SVo,PVo,st,Ow,$Vo,Ece,IVo,DVo,Yd,jVo,yce,NVo,qVo,wce,GVo,OVo,XVo,Ace,VVo,zVo,Xw,WVo,Ze,Vw,QVo,Lce,HVo,UVo,ln,JVo,Bce,YVo,KVo,xce,ZVo,ezo,kce,ozo,rzo,tzo,Rce,jv,Sce,azo,nzo,FN,szo,lzo,izo,Nv,dzo,Pce,czo,fzo,$ce,mzo,gzo,Ice,hzo,pzo,zw,OBe,Kd,qv,Dce,Ww,_zo,jce,uzo,XBe,hr,Qw,bzo,Zd,vzo,Nce,Tzo,Fzo,qce,Czo,Mzo,Ezo,Hw,yzo,Gce,wzo,Azo,Lzo,lt,Uw,Bzo,Oce,xzo,kzo,ec,Rzo,Xce,Szo,Pzo,Vce,$zo,Izo,Dzo,zce,jzo,Nzo,Jw,qzo,eo,Yw,Gzo,Wce,Ozo,Xzo,dn,Vzo,Qce,zzo,Wzo,Hce,Qzo,Hzo,Uce,Uzo,Jzo,Yzo,Kw,Gv,Jce,Kzo,Zzo,CN,eWo,oWo,rWo,Ov,Yce,tWo,aWo,MN,nWo,sWo,lWo,Xv,iWo,Kce,dWo,cWo,Zce,fWo,mWo,efe,gWo,hWo,Zw,VBe,oc,Vv,ofe,e6,pWo,rfe,_Wo,zBe,pr,o6,uWo,rc,bWo,tfe,vWo,TWo,afe,FWo,CWo,MWo,r6,EWo,nfe,yWo,wWo,AWo,it,t6,LWo,sfe,BWo,xWo,tc,kWo,lfe,RWo,SWo,ife,PWo,$Wo,IWo,dfe,DWo,jWo,a6,NWo,go,n6,qWo,cfe,GWo,OWo,cn,XWo,ffe,VWo,zWo,mfe,WWo,QWo,gfe,HWo,UWo,JWo,B,zv,hfe,YWo,KWo,EN,ZWo,eQo,oQo,Wv,pfe,rQo,tQo,yN,aQo,nQo,sQo,Qv,_fe,lQo,iQo,wN,dQo,cQo,fQo,Hv,ufe,mQo,gQo,AN,hQo,pQo,_Qo,Uv,bfe,uQo,bQo,LN,vQo,TQo,FQo,Jv,vfe,CQo,MQo,BN,EQo,yQo,wQo,Yv,Tfe,AQo,LQo,xN,BQo,xQo,kQo,Kv,Ffe,RQo,SQo,kN,PQo,$Qo,IQo,Zv,Cfe,DQo,jQo,RN,NQo,qQo,GQo,eT,Mfe,OQo,XQo,SN,VQo,zQo,WQo,oT,Efe,QQo,HQo,PN,UQo,JQo,YQo,rT,yfe,KQo,ZQo,$N,eHo,oHo,rHo,tT,wfe,tHo,aHo,IN,nHo,sHo,lHo,aT,Afe,iHo,dHo,DN,cHo,fHo,mHo,nT,Lfe,gHo,hHo,jN,pHo,_Ho,uHo,sT,Bfe,bHo,vHo,NN,THo,FHo,CHo,$s,xfe,MHo,EHo,qN,yHo,wHo,GN,AHo,LHo,BHo,lT,kfe,xHo,kHo,ON,RHo,SHo,PHo,iT,Rfe,$Ho,IHo,XN,DHo,jHo,NHo,dT,Sfe,qHo,GHo,VN,OHo,XHo,VHo,cT,Pfe,zHo,WHo,zN,QHo,HHo,UHo,fT,$fe,JHo,YHo,WN,KHo,ZHo,eUo,mT,Ife,oUo,rUo,QN,tUo,aUo,nUo,gT,Dfe,sUo,lUo,HN,iUo,dUo,cUo,hT,jfe,fUo,mUo,UN,gUo,hUo,pUo,pT,Nfe,_Uo,uUo,JN,bUo,vUo,TUo,_T,qfe,FUo,CUo,YN,MUo,EUo,yUo,uT,Gfe,wUo,AUo,KN,LUo,BUo,xUo,bT,Ofe,kUo,RUo,ZN,SUo,PUo,$Uo,vT,Xfe,IUo,DUo,eq,jUo,NUo,qUo,TT,Vfe,GUo,OUo,oq,XUo,VUo,zUo,FT,zfe,WUo,QUo,rq,HUo,UUo,JUo,CT,Wfe,YUo,KUo,tq,ZUo,eJo,oJo,MT,Qfe,rJo,tJo,aq,aJo,nJo,sJo,ET,Hfe,lJo,iJo,nq,dJo,cJo,fJo,yT,Ufe,mJo,gJo,sq,hJo,pJo,_Jo,wT,Jfe,uJo,bJo,lq,vJo,TJo,FJo,AT,Yfe,CJo,MJo,iq,EJo,yJo,wJo,LT,Kfe,AJo,LJo,dq,BJo,xJo,kJo,BT,Zfe,RJo,SJo,cq,PJo,$Jo,IJo,xT,eme,DJo,jJo,fq,NJo,qJo,GJo,kT,ome,OJo,XJo,mq,VJo,zJo,WJo,rme,QJo,HJo,s6,WBe,ac,RT,tme,l6,UJo,ame,JJo,QBe,_r,i6,YJo,nc,KJo,nme,ZJo,eYo,sme,oYo,rYo,tYo,d6,aYo,lme,nYo,sYo,lYo,dt,c6,iYo,ime,dYo,cYo,sc,fYo,dme,mYo,gYo,cme,hYo,pYo,_Yo,fme,uYo,bYo,f6,vYo,ho,m6,TYo,mme,FYo,CYo,fn,MYo,gme,EYo,yYo,hme,wYo,AYo,pme,LYo,BYo,xYo,H,ST,_me,kYo,RYo,gq,SYo,PYo,$Yo,PT,ume,IYo,DYo,hq,jYo,NYo,qYo,$T,bme,GYo,OYo,pq,XYo,VYo,zYo,IT,vme,WYo,QYo,_q,HYo,UYo,JYo,DT,Tme,YYo,KYo,uq,ZYo,eKo,oKo,jT,Fme,rKo,tKo,bq,aKo,nKo,sKo,NT,Cme,lKo,iKo,vq,dKo,cKo,fKo,qT,Mme,mKo,gKo,Tq,hKo,pKo,_Ko,GT,Eme,uKo,bKo,Fq,vKo,TKo,FKo,OT,yme,CKo,MKo,Cq,EKo,yKo,wKo,XT,wme,AKo,LKo,Mq,BKo,xKo,kKo,VT,Ame,RKo,SKo,Eq,PKo,$Ko,IKo,zT,Lme,DKo,jKo,yq,NKo,qKo,GKo,WT,Bme,OKo,XKo,wq,VKo,zKo,WKo,QT,xme,QKo,HKo,Aq,UKo,JKo,YKo,HT,kme,KKo,ZKo,Lq,eZo,oZo,rZo,UT,Rme,tZo,aZo,Bq,nZo,sZo,lZo,JT,Sme,iZo,dZo,xq,cZo,fZo,mZo,YT,Pme,gZo,hZo,kq,pZo,_Zo,uZo,KT,$me,bZo,vZo,Rq,TZo,FZo,CZo,ZT,Ime,MZo,EZo,Sq,yZo,wZo,AZo,eF,Dme,LZo,BZo,Pq,xZo,kZo,RZo,jme,SZo,PZo,g6,HBe,lc,oF,Nme,h6,$Zo,qme,IZo,UBe,ur,p6,DZo,ic,jZo,Gme,NZo,qZo,Ome,GZo,OZo,XZo,_6,VZo,Xme,zZo,WZo,QZo,ct,u6,HZo,Vme,UZo,JZo,dc,YZo,zme,KZo,ZZo,Wme,eer,oer,rer,Qme,ter,aer,b6,ner,po,v6,ser,Hme,ler,ier,mn,der,Ume,cer,fer,Jme,mer,ger,Yme,her,per,_er,pe,rF,Kme,uer,ber,$q,ver,Ter,Fer,tF,Zme,Cer,Mer,Iq,Eer,yer,wer,aF,ege,Aer,Ler,Dq,Ber,xer,ker,nF,oge,Rer,Ser,jq,Per,$er,Ier,sF,rge,Der,jer,Nq,Ner,qer,Ger,lF,tge,Oer,Xer,qq,Ver,zer,Wer,iF,age,Qer,Her,Gq,Uer,Jer,Yer,dF,nge,Ker,Zer,Oq,eor,oor,ror,cF,sge,tor,aor,Xq,nor,sor,lor,fF,lge,ior,dor,Vq,cor,mor,gor,ige,hor,por,T6,JBe,cc,mF,dge,F6,_or,cge,uor,YBe,br,C6,bor,fc,vor,fge,Tor,For,mge,Cor,Mor,Eor,M6,yor,gge,wor,Aor,Lor,ft,E6,Bor,hge,xor,kor,mc,Ror,pge,Sor,Por,_ge,$or,Ior,Dor,uge,jor,Nor,y6,qor,_o,w6,Gor,bge,Oor,Xor,gn,Vor,vge,zor,Wor,Tge,Qor,Hor,Fge,Uor,Jor,Yor,A6,gF,Cge,Kor,Zor,zq,err,orr,rrr,hF,Mge,trr,arr,Wq,nrr,srr,lrr,Ege,irr,drr,L6,KBe,gc,pF,yge,B6,crr,wge,frr,ZBe,vr,x6,mrr,hc,grr,Age,hrr,prr,Lge,_rr,urr,brr,k6,vrr,Bge,Trr,Frr,Crr,mt,R6,Mrr,xge,Err,yrr,pc,wrr,kge,Arr,Lrr,Rge,Brr,xrr,krr,Sge,Rrr,Srr,S6,Prr,uo,P6,$rr,Pge,Irr,Drr,hn,jrr,$ge,Nrr,qrr,Ige,Grr,Orr,Dge,Xrr,Vrr,zrr,Y,_F,jge,Wrr,Qrr,Qq,Hrr,Urr,Jrr,uF,Nge,Yrr,Krr,Hq,Zrr,etr,otr,bF,qge,rtr,ttr,Uq,atr,ntr,str,vF,Gge,ltr,itr,Jq,dtr,ctr,ftr,TF,Oge,mtr,gtr,Yq,htr,ptr,_tr,FF,Xge,utr,btr,Kq,vtr,Ttr,Ftr,CF,Vge,Ctr,Mtr,Zq,Etr,ytr,wtr,MF,zge,Atr,Ltr,eG,Btr,xtr,ktr,EF,Wge,Rtr,Str,oG,Ptr,$tr,Itr,yF,Qge,Dtr,jtr,rG,Ntr,qtr,Gtr,wF,Hge,Otr,Xtr,tG,Vtr,ztr,Wtr,AF,Uge,Qtr,Htr,aG,Utr,Jtr,Ytr,LF,Jge,Ktr,Ztr,nG,ear,oar,rar,BF,Yge,tar,aar,sG,nar,sar,lar,xF,Kge,iar,dar,lG,car,far,mar,kF,Zge,gar,har,iG,par,_ar,uar,RF,ehe,bar,Tar,dG,Far,Car,Mar,SF,ohe,Ear,yar,cG,war,Aar,Lar,PF,rhe,Bar,xar,fG,kar,Rar,Sar,$F,the,Par,$ar,mG,Iar,Dar,jar,ahe,Nar,qar,$6,exe,_c,IF,nhe,I6,Gar,she,Oar,oxe,Tr,D6,Xar,uc,Var,lhe,zar,War,ihe,Qar,Har,Uar,j6,Jar,dhe,Yar,Kar,Zar,gt,N6,enr,che,onr,rnr,bc,tnr,fhe,anr,nnr,mhe,snr,lnr,inr,ghe,dnr,cnr,q6,fnr,bo,G6,mnr,hhe,gnr,hnr,pn,pnr,phe,_nr,unr,_he,bnr,vnr,uhe,Tnr,Fnr,Cnr,_e,DF,bhe,Mnr,Enr,gG,ynr,wnr,Anr,jF,vhe,Lnr,Bnr,hG,xnr,knr,Rnr,NF,The,Snr,Pnr,pG,$nr,Inr,Dnr,qF,Fhe,jnr,Nnr,_G,qnr,Gnr,Onr,GF,Che,Xnr,Vnr,uG,znr,Wnr,Qnr,OF,Mhe,Hnr,Unr,bG,Jnr,Ynr,Knr,XF,Ehe,Znr,esr,vG,osr,rsr,tsr,VF,yhe,asr,nsr,TG,ssr,lsr,isr,zF,whe,dsr,csr,FG,fsr,msr,gsr,WF,Ahe,hsr,psr,CG,_sr,usr,bsr,Lhe,vsr,Tsr,O6,rxe,vc,QF,Bhe,X6,Fsr,xhe,Csr,txe,Fr,V6,Msr,Tc,Esr,khe,ysr,wsr,Rhe,Asr,Lsr,Bsr,z6,xsr,She,ksr,Rsr,Ssr,ht,W6,Psr,Phe,$sr,Isr,Fc,Dsr,$he,jsr,Nsr,Ihe,qsr,Gsr,Osr,Dhe,Xsr,Vsr,Q6,zsr,vo,H6,Wsr,jhe,Qsr,Hsr,_n,Usr,Nhe,Jsr,Ysr,qhe,Ksr,Zsr,Ghe,elr,olr,rlr,X,HF,Ohe,tlr,alr,MG,nlr,slr,llr,UF,Xhe,ilr,dlr,EG,clr,flr,mlr,JF,Vhe,glr,hlr,yG,plr,_lr,ulr,YF,zhe,blr,vlr,wG,Tlr,Flr,Clr,KF,Whe,Mlr,Elr,AG,ylr,wlr,Alr,ZF,Qhe,Llr,Blr,LG,xlr,klr,Rlr,e9,Hhe,Slr,Plr,BG,$lr,Ilr,Dlr,o9,Uhe,jlr,Nlr,xG,qlr,Glr,Olr,r9,Jhe,Xlr,Vlr,kG,zlr,Wlr,Qlr,t9,Yhe,Hlr,Ulr,RG,Jlr,Ylr,Klr,a9,Khe,Zlr,eir,SG,oir,rir,tir,n9,Zhe,air,nir,PG,sir,lir,iir,s9,epe,dir,cir,$G,fir,mir,gir,l9,ope,hir,pir,IG,_ir,uir,bir,i9,rpe,vir,Tir,DG,Fir,Cir,Mir,d9,tpe,Eir,yir,jG,wir,Air,Lir,c9,ape,Bir,xir,NG,kir,Rir,Sir,f9,npe,Pir,$ir,qG,Iir,Dir,jir,m9,spe,Nir,qir,GG,Gir,Oir,Xir,g9,lpe,Vir,zir,OG,Wir,Qir,Hir,h9,ipe,Uir,Jir,XG,Yir,Kir,Zir,p9,dpe,edr,odr,VG,rdr,tdr,adr,_9,cpe,ndr,sdr,zG,ldr,idr,ddr,u9,fpe,cdr,fdr,WG,mdr,gdr,hdr,b9,mpe,pdr,_dr,QG,udr,bdr,vdr,gpe,Tdr,Fdr,U6,axe,Cc,v9,hpe,J6,Cdr,ppe,Mdr,nxe,Cr,Y6,Edr,Mc,ydr,_pe,wdr,Adr,upe,Ldr,Bdr,xdr,K6,kdr,bpe,Rdr,Sdr,Pdr,pt,Z6,$dr,vpe,Idr,Ddr,Ec,jdr,Tpe,Ndr,qdr,Fpe,Gdr,Odr,Xdr,Cpe,Vdr,zdr,eA,Wdr,To,oA,Qdr,Mpe,Hdr,Udr,un,Jdr,Epe,Ydr,Kdr,ype,Zdr,ecr,wpe,ocr,rcr,tcr,te,T9,Ape,acr,ncr,HG,scr,lcr,icr,F9,Lpe,dcr,ccr,UG,fcr,mcr,gcr,C9,Bpe,hcr,pcr,JG,_cr,ucr,bcr,M9,xpe,vcr,Tcr,YG,Fcr,Ccr,Mcr,E9,kpe,Ecr,ycr,KG,wcr,Acr,Lcr,y9,Rpe,Bcr,xcr,ZG,kcr,Rcr,Scr,w9,Spe,Pcr,$cr,eO,Icr,Dcr,jcr,A9,Ppe,Ncr,qcr,oO,Gcr,Ocr,Xcr,L9,$pe,Vcr,zcr,rO,Wcr,Qcr,Hcr,B9,Ipe,Ucr,Jcr,tO,Ycr,Kcr,Zcr,x9,Dpe,efr,ofr,aO,rfr,tfr,afr,k9,jpe,nfr,sfr,nO,lfr,ifr,dfr,R9,Npe,cfr,ffr,sO,mfr,gfr,hfr,S9,qpe,pfr,_fr,lO,ufr,bfr,vfr,P9,Gpe,Tfr,Ffr,iO,Cfr,Mfr,Efr,$9,Ope,yfr,wfr,dO,Afr,Lfr,Bfr,I9,Xpe,xfr,kfr,cO,Rfr,Sfr,Pfr,Vpe,$fr,Ifr,rA,sxe,yc,D9,zpe,tA,Dfr,Wpe,jfr,lxe,Mr,aA,Nfr,wc,qfr,Qpe,Gfr,Ofr,Hpe,Xfr,Vfr,zfr,nA,Wfr,Upe,Qfr,Hfr,Ufr,_t,sA,Jfr,Jpe,Yfr,Kfr,Ac,Zfr,Ype,emr,omr,Kpe,rmr,tmr,amr,Zpe,nmr,smr,lA,lmr,Fo,iA,imr,e_e,dmr,cmr,bn,fmr,o_e,mmr,gmr,r_e,hmr,pmr,t_e,_mr,umr,bmr,a_e,j9,n_e,vmr,Tmr,fO,Fmr,Cmr,Mmr,s_e,Emr,ymr,dA,ixe,Lc,N9,l_e,cA,wmr,i_e,Amr,dxe,Er,fA,Lmr,Bc,Bmr,d_e,xmr,kmr,c_e,Rmr,Smr,Pmr,mA,$mr,f_e,Imr,Dmr,jmr,ut,gA,Nmr,m_e,qmr,Gmr,xc,Omr,g_e,Xmr,Vmr,h_e,zmr,Wmr,Qmr,p_e,Hmr,Umr,hA,Jmr,Co,pA,Ymr,__e,Kmr,Zmr,vn,egr,u_e,ogr,rgr,b_e,tgr,agr,v_e,ngr,sgr,lgr,K,q9,T_e,igr,dgr,mO,cgr,fgr,mgr,G9,F_e,ggr,hgr,gO,pgr,_gr,ugr,O9,C_e,bgr,vgr,hO,Tgr,Fgr,Cgr,X9,M_e,Mgr,Egr,pO,ygr,wgr,Agr,V9,E_e,Lgr,Bgr,_O,xgr,kgr,Rgr,z9,y_e,Sgr,Pgr,uO,$gr,Igr,Dgr,W9,w_e,jgr,Ngr,bO,qgr,Ggr,Ogr,Q9,A_e,Xgr,Vgr,vO,zgr,Wgr,Qgr,H9,L_e,Hgr,Ugr,TO,Jgr,Ygr,Kgr,U9,B_e,Zgr,ehr,FO,ohr,rhr,thr,J9,x_e,ahr,nhr,CO,shr,lhr,ihr,Y9,k_e,dhr,chr,MO,fhr,mhr,ghr,K9,R_e,hhr,phr,EO,_hr,uhr,bhr,Z9,S_e,vhr,Thr,yO,Fhr,Chr,Mhr,eC,P_e,Ehr,yhr,wO,whr,Ahr,Lhr,oC,$_e,Bhr,xhr,AO,khr,Rhr,Shr,rC,I_e,Phr,$hr,LO,Ihr,Dhr,jhr,tC,D_e,Nhr,qhr,BO,Ghr,Ohr,Xhr,aC,j_e,Vhr,zhr,xO,Whr,Qhr,Hhr,nC,N_e,Uhr,Jhr,kO,Yhr,Khr,Zhr,q_e,epr,opr,_A,cxe,kc,sC,G_e,uA,rpr,O_e,tpr,fxe,yr,bA,apr,Rc,npr,X_e,spr,lpr,V_e,ipr,dpr,cpr,vA,fpr,z_e,mpr,gpr,hpr,bt,TA,ppr,W_e,_pr,upr,Sc,bpr,Q_e,vpr,Tpr,H_e,Fpr,Cpr,Mpr,U_e,Epr,ypr,FA,wpr,Mo,CA,Apr,J_e,Lpr,Bpr,Tn,xpr,Y_e,kpr,Rpr,K_e,Spr,Ppr,Z_e,$pr,Ipr,Dpr,Z,lC,eue,jpr,Npr,RO,qpr,Gpr,Opr,iC,oue,Xpr,Vpr,SO,zpr,Wpr,Qpr,dC,rue,Hpr,Upr,PO,Jpr,Ypr,Kpr,cC,tue,Zpr,e_r,$O,o_r,r_r,t_r,fC,aue,a_r,n_r,IO,s_r,l_r,i_r,mC,nue,d_r,c_r,DO,f_r,m_r,g_r,gC,sue,h_r,p_r,jO,__r,u_r,b_r,hC,lue,v_r,T_r,NO,F_r,C_r,M_r,pC,iue,E_r,y_r,qO,w_r,A_r,L_r,_C,due,B_r,x_r,GO,k_r,R_r,S_r,uC,cue,P_r,$_r,OO,I_r,D_r,j_r,bC,fue,N_r,q_r,XO,G_r,O_r,X_r,vC,mue,V_r,z_r,VO,W_r,Q_r,H_r,TC,gue,U_r,J_r,zO,Y_r,K_r,Z_r,FC,hue,eur,our,WO,rur,tur,aur,CC,pue,nur,sur,QO,lur,iur,dur,MC,_ue,cur,fur,HO,mur,gur,hur,EC,uue,pur,_ur,UO,uur,bur,vur,yC,bue,Tur,Fur,JO,Cur,Mur,Eur,vue,yur,wur,MA,mxe,Pc,wC,Tue,EA,Aur,Fue,Lur,gxe,wr,yA,Bur,$c,xur,Cue,kur,Rur,Mue,Sur,Pur,$ur,wA,Iur,Eue,Dur,jur,Nur,vt,AA,qur,yue,Gur,Our,Ic,Xur,wue,Vur,zur,Aue,Wur,Qur,Hur,Lue,Uur,Jur,LA,Yur,Eo,BA,Kur,Bue,Zur,e1r,Fn,o1r,xue,r1r,t1r,kue,a1r,n1r,Rue,s1r,l1r,i1r,Sue,AC,Pue,d1r,c1r,YO,f1r,m1r,g1r,$ue,h1r,p1r,xA,hxe,Dc,LC,Iue,kA,_1r,Due,u1r,pxe,Ar,RA,b1r,jc,v1r,jue,T1r,F1r,Nue,C1r,M1r,E1r,SA,y1r,que,w1r,A1r,L1r,Tt,PA,B1r,Gue,x1r,k1r,Nc,R1r,Oue,S1r,P1r,Xue,$1r,I1r,D1r,Vue,j1r,N1r,$A,q1r,yo,IA,G1r,zue,O1r,X1r,Cn,V1r,Wue,z1r,W1r,Que,Q1r,H1r,Hue,U1r,J1r,Y1r,Uue,BC,Jue,K1r,Z1r,KO,e2r,o2r,r2r,Yue,t2r,a2r,DA,_xe,qc,xC,Kue,jA,n2r,Zue,s2r,uxe,Lr,NA,l2r,Gc,i2r,e1e,d2r,c2r,o1e,f2r,m2r,g2r,qA,h2r,r1e,p2r,_2r,u2r,Ft,GA,b2r,t1e,v2r,T2r,Oc,F2r,a1e,C2r,M2r,n1e,E2r,y2r,w2r,s1e,A2r,L2r,OA,B2r,wo,XA,x2r,l1e,k2r,R2r,Mn,S2r,i1e,P2r,$2r,d1e,I2r,D2r,c1e,j2r,N2r,q2r,z,kC,f1e,G2r,O2r,ZO,X2r,V2r,z2r,RC,m1e,W2r,Q2r,eX,H2r,U2r,J2r,SC,g1e,Y2r,K2r,oX,Z2r,ebr,obr,PC,h1e,rbr,tbr,rX,abr,nbr,sbr,$C,p1e,lbr,ibr,tX,dbr,cbr,fbr,IC,_1e,mbr,gbr,aX,hbr,pbr,_br,DC,u1e,ubr,bbr,nX,vbr,Tbr,Fbr,jC,b1e,Cbr,Mbr,sX,Ebr,ybr,wbr,NC,v1e,Abr,Lbr,lX,Bbr,xbr,kbr,qC,T1e,Rbr,Sbr,iX,Pbr,$br,Ibr,GC,F1e,Dbr,jbr,dX,Nbr,qbr,Gbr,OC,C1e,Obr,Xbr,cX,Vbr,zbr,Wbr,XC,M1e,Qbr,Hbr,fX,Ubr,Jbr,Ybr,VC,E1e,Kbr,Zbr,mX,e5r,o5r,r5r,zC,y1e,t5r,a5r,gX,n5r,s5r,l5r,WC,w1e,i5r,d5r,hX,c5r,f5r,m5r,QC,A1e,g5r,h5r,pX,p5r,_5r,u5r,HC,L1e,b5r,v5r,_X,T5r,F5r,C5r,UC,B1e,M5r,E5r,uX,y5r,w5r,A5r,JC,x1e,L5r,B5r,bX,x5r,k5r,R5r,YC,k1e,S5r,P5r,vX,$5r,I5r,D5r,KC,R1e,j5r,N5r,TX,q5r,G5r,O5r,ZC,S1e,X5r,V5r,FX,z5r,W5r,Q5r,e4,P1e,H5r,U5r,CX,J5r,Y5r,K5r,$1e,Z5r,evr,VA,bxe,Xc,o4,I1e,zA,ovr,D1e,rvr,vxe,Br,WA,tvr,Vc,avr,j1e,nvr,svr,N1e,lvr,ivr,dvr,QA,cvr,q1e,fvr,mvr,gvr,Ct,HA,hvr,G1e,pvr,_vr,zc,uvr,O1e,bvr,vvr,X1e,Tvr,Fvr,Cvr,V1e,Mvr,Evr,UA,yvr,Ao,JA,wvr,z1e,Avr,Lvr,En,Bvr,W1e,xvr,kvr,Q1e,Rvr,Svr,H1e,Pvr,$vr,Ivr,yn,r4,U1e,Dvr,jvr,MX,Nvr,qvr,Gvr,t4,J1e,Ovr,Xvr,EX,Vvr,zvr,Wvr,a4,Y1e,Qvr,Hvr,yX,Uvr,Jvr,Yvr,n4,K1e,Kvr,Zvr,wX,eTr,oTr,rTr,Z1e,tTr,aTr,YA,Txe,Wc,s4,e2e,KA,nTr,o2e,sTr,Fxe,xr,ZA,lTr,Qc,iTr,r2e,dTr,cTr,t2e,fTr,mTr,gTr,e0,hTr,a2e,pTr,_Tr,uTr,Mt,o0,bTr,n2e,vTr,TTr,Hc,FTr,s2e,CTr,MTr,l2e,ETr,yTr,wTr,i2e,ATr,LTr,r0,BTr,Lo,t0,xTr,d2e,kTr,RTr,wn,STr,c2e,PTr,$Tr,f2e,ITr,DTr,m2e,jTr,NTr,qTr,fe,l4,g2e,GTr,OTr,AX,XTr,VTr,zTr,i4,h2e,WTr,QTr,LX,HTr,UTr,JTr,d4,p2e,YTr,KTr,BX,ZTr,eFr,oFr,c4,_2e,rFr,tFr,xX,aFr,nFr,sFr,f4,u2e,lFr,iFr,kX,dFr,cFr,fFr,m4,b2e,mFr,gFr,RX,hFr,pFr,_Fr,g4,v2e,uFr,bFr,SX,vFr,TFr,FFr,h4,T2e,CFr,MFr,PX,EFr,yFr,wFr,p4,F2e,AFr,LFr,$X,BFr,xFr,kFr,_4,C2e,RFr,SFr,IX,PFr,$Fr,IFr,u4,M2e,DFr,jFr,DX,NFr,qFr,GFr,E2e,OFr,XFr,a0,Cxe,Uc,b4,y2e,n0,VFr,w2e,zFr,Mxe,kr,s0,WFr,Jc,QFr,A2e,HFr,UFr,L2e,JFr,YFr,KFr,l0,ZFr,B2e,e9r,o9r,r9r,Et,i0,t9r,x2e,a9r,n9r,Yc,s9r,k2e,l9r,i9r,R2e,d9r,c9r,f9r,S2e,m9r,g9r,d0,h9r,Bo,c0,p9r,P2e,_9r,u9r,An,b9r,$2e,v9r,T9r,I2e,F9r,C9r,D2e,M9r,E9r,y9r,ve,v4,j2e,w9r,A9r,jX,L9r,B9r,x9r,T4,N2e,k9r,R9r,NX,S9r,P9r,$9r,F4,q2e,I9r,D9r,qX,j9r,N9r,q9r,C4,G2e,G9r,O9r,GX,X9r,V9r,z9r,M4,O2e,W9r,Q9r,OX,H9r,U9r,J9r,E4,X2e,Y9r,K9r,XX,Z9r,eCr,oCr,y4,V2e,rCr,tCr,VX,aCr,nCr,sCr,w4,z2e,lCr,iCr,zX,dCr,cCr,fCr,A4,W2e,mCr,gCr,WX,hCr,pCr,_Cr,Q2e,uCr,bCr,f0,Exe,Kc,L4,H2e,m0,vCr,U2e,TCr,yxe,Rr,g0,FCr,Zc,CCr,J2e,MCr,ECr,Y2e,yCr,wCr,ACr,h0,LCr,K2e,BCr,xCr,kCr,yt,p0,RCr,Z2e,SCr,PCr,ef,$Cr,ebe,ICr,DCr,obe,jCr,NCr,qCr,rbe,GCr,OCr,_0,XCr,xo,u0,VCr,tbe,zCr,WCr,Ln,QCr,abe,HCr,UCr,nbe,JCr,YCr,sbe,KCr,ZCr,e4r,Te,B4,lbe,o4r,r4r,QX,t4r,a4r,n4r,x4,ibe,s4r,l4r,HX,i4r,d4r,c4r,k4,dbe,f4r,m4r,UX,g4r,h4r,p4r,R4,cbe,_4r,u4r,JX,b4r,v4r,T4r,S4,fbe,F4r,C4r,YX,M4r,E4r,y4r,P4,mbe,w4r,A4r,KX,L4r,B4r,x4r,$4,gbe,k4r,R4r,ZX,S4r,P4r,$4r,I4,hbe,I4r,D4r,eV,j4r,N4r,q4r,D4,pbe,G4r,O4r,oV,X4r,V4r,z4r,_be,W4r,Q4r,b0,wxe,of,j4,ube,v0,H4r,bbe,U4r,Axe,Sr,T0,J4r,rf,Y4r,vbe,K4r,Z4r,Tbe,eMr,oMr,rMr,F0,tMr,Fbe,aMr,nMr,sMr,wt,C0,lMr,Cbe,iMr,dMr,tf,cMr,Mbe,fMr,mMr,Ebe,gMr,hMr,pMr,ybe,_Mr,uMr,M0,bMr,ko,E0,vMr,wbe,TMr,FMr,Bn,CMr,Abe,MMr,EMr,Lbe,yMr,wMr,Bbe,AMr,LMr,BMr,Fe,N4,xbe,xMr,kMr,rV,RMr,SMr,PMr,q4,kbe,$Mr,IMr,tV,DMr,jMr,NMr,G4,Rbe,qMr,GMr,aV,OMr,XMr,VMr,O4,Sbe,zMr,WMr,nV,QMr,HMr,UMr,X4,Pbe,JMr,YMr,sV,KMr,ZMr,eEr,V4,$be,oEr,rEr,lV,tEr,aEr,nEr,z4,Ibe,sEr,lEr,iV,iEr,dEr,cEr,W4,Dbe,fEr,mEr,dV,gEr,hEr,pEr,Q4,jbe,_Er,uEr,cV,bEr,vEr,TEr,Nbe,FEr,CEr,y0,Lxe,af,H4,qbe,w0,MEr,Gbe,EEr,Bxe,Pr,A0,yEr,nf,wEr,Obe,AEr,LEr,Xbe,BEr,xEr,kEr,L0,REr,Vbe,SEr,PEr,$Er,At,B0,IEr,zbe,DEr,jEr,sf,NEr,Wbe,qEr,GEr,Qbe,OEr,XEr,VEr,Hbe,zEr,WEr,x0,QEr,Ro,k0,HEr,Ube,UEr,JEr,xn,YEr,Jbe,KEr,ZEr,Ybe,e3r,o3r,Kbe,r3r,t3r,a3r,Ce,U4,Zbe,n3r,s3r,fV,l3r,i3r,d3r,J4,e5e,c3r,f3r,mV,m3r,g3r,h3r,Y4,o5e,p3r,_3r,gV,u3r,b3r,v3r,K4,r5e,T3r,F3r,hV,C3r,M3r,E3r,Z4,t5e,y3r,w3r,pV,A3r,L3r,B3r,eM,a5e,x3r,k3r,_V,R3r,S3r,P3r,oM,n5e,$3r,I3r,uV,D3r,j3r,N3r,rM,s5e,q3r,G3r,bV,O3r,X3r,V3r,tM,l5e,z3r,W3r,vV,Q3r,H3r,U3r,i5e,J3r,Y3r,R0,xxe,lf,aM,d5e,S0,K3r,c5e,Z3r,kxe,$r,P0,eyr,df,oyr,f5e,ryr,tyr,m5e,ayr,nyr,syr,$0,lyr,g5e,iyr,dyr,cyr,Lt,I0,fyr,h5e,myr,gyr,cf,hyr,p5e,pyr,_yr,_5e,uyr,byr,vyr,u5e,Tyr,Fyr,D0,Cyr,So,j0,Myr,b5e,Eyr,yyr,kn,wyr,v5e,Ayr,Lyr,T5e,Byr,xyr,F5e,kyr,Ryr,Syr,so,nM,C5e,Pyr,$yr,TV,Iyr,Dyr,jyr,sM,M5e,Nyr,qyr,FV,Gyr,Oyr,Xyr,lM,E5e,Vyr,zyr,CV,Wyr,Qyr,Hyr,iM,y5e,Uyr,Jyr,MV,Yyr,Kyr,Zyr,dM,w5e,ewr,owr,EV,rwr,twr,awr,cM,A5e,nwr,swr,yV,lwr,iwr,dwr,fM,L5e,cwr,fwr,wV,mwr,gwr,hwr,B5e,pwr,_wr,N0,Rxe,ff,mM,x5e,q0,uwr,k5e,bwr,Sxe,Ir,G0,vwr,mf,Twr,R5e,Fwr,Cwr,S5e,Mwr,Ewr,ywr,O0,wwr,P5e,Awr,Lwr,Bwr,Bt,X0,xwr,$5e,kwr,Rwr,gf,Swr,I5e,Pwr,$wr,D5e,Iwr,Dwr,jwr,j5e,Nwr,qwr,V0,Gwr,Po,z0,Owr,N5e,Xwr,Vwr,Rn,zwr,q5e,Wwr,Qwr,G5e,Hwr,Uwr,O5e,Jwr,Ywr,Kwr,lo,gM,X5e,Zwr,e6r,AV,o6r,r6r,t6r,hM,V5e,a6r,n6r,LV,s6r,l6r,i6r,pM,z5e,d6r,c6r,BV,f6r,m6r,g6r,_M,W5e,h6r,p6r,xV,_6r,u6r,b6r,uM,Q5e,v6r,T6r,kV,F6r,C6r,M6r,bM,H5e,E6r,y6r,RV,w6r,A6r,L6r,vM,U5e,B6r,x6r,SV,k6r,R6r,S6r,J5e,P6r,$6r,W0,Pxe,hf,TM,Y5e,Q0,I6r,K5e,D6r,$xe,Dr,H0,j6r,pf,N6r,Z5e,q6r,G6r,eve,O6r,X6r,V6r,U0,z6r,ove,W6r,Q6r,H6r,xt,J0,U6r,rve,J6r,Y6r,_f,K6r,tve,Z6r,eAr,ave,oAr,rAr,tAr,nve,aAr,nAr,Y0,sAr,$o,K0,lAr,sve,iAr,dAr,Sn,cAr,lve,fAr,mAr,ive,gAr,hAr,dve,pAr,_Ar,uAr,cve,FM,fve,bAr,vAr,PV,TAr,FAr,CAr,mve,MAr,EAr,Z0,Ixe,uf,CM,gve,eL,yAr,hve,wAr,Dxe,jr,oL,AAr,bf,LAr,pve,BAr,xAr,_ve,kAr,RAr,SAr,rL,PAr,uve,$Ar,IAr,DAr,kt,tL,jAr,bve,NAr,qAr,vf,GAr,vve,OAr,XAr,Tve,VAr,zAr,WAr,Fve,QAr,HAr,aL,UAr,Io,nL,JAr,Cve,YAr,KAr,Pn,ZAr,Mve,e0r,o0r,Eve,r0r,t0r,yve,a0r,n0r,s0r,sL,MM,wve,l0r,i0r,$V,d0r,c0r,f0r,EM,Ave,m0r,g0r,IV,h0r,p0r,_0r,Lve,u0r,b0r,lL,jxe,Tf,yM,Bve,iL,v0r,xve,T0r,Nxe,Nr,dL,F0r,Ff,C0r,kve,M0r,E0r,Rve,y0r,w0r,A0r,cL,L0r,Sve,B0r,x0r,k0r,Rt,fL,R0r,Pve,S0r,P0r,Cf,$0r,$ve,I0r,D0r,Ive,j0r,N0r,q0r,Dve,G0r,O0r,mL,X0r,Do,gL,V0r,jve,z0r,W0r,$n,Q0r,Nve,H0r,U0r,qve,J0r,Y0r,Gve,K0r,Z0r,eLr,Ove,wM,Xve,oLr,rLr,DV,tLr,aLr,nLr,Vve,sLr,lLr,hL,qxe;return ce=new V({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),xE=new V({}),kE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new iLr({props:{warning:"&lcub;true}",$$slots:{default:[a5t]},$$scope:{ctx:Ai}}}),RE=new V({}),SE=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/configuration_auto.py#L529"}}),IE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/configuration_auto.py#L552",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),DE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),jE=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/configuration_auto.py#L674",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),NE=new V({}),qE=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/tokenization_auto.py#L351"}}),XE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15912/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),VE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),zE=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),WE=new V({}),QE=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),JE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15912/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),gh=new iLr({props:{$$slots:{default:[n5t]},$$scope:{ctx:Ai}}}),YE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),KE=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),ZE=new V({}),e3=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/processing_auto.py#L71"}}),t3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Eh=new iLr({props:{$$slots:{default:[s5t]},$$scope:{ctx:Ai}}}),a3=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),n3=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),s3=new V({}),l3=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L689"}}),d3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),c3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),f3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g3=new V({}),h3=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L696"}}),_3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),u3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),b3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T3=new V({}),F3=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L711"}}),M3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),E3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),y3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A3=new V({}),L3=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L718"}}),x3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),k3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),R3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P3=new V({}),$3=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L725"}}),D3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),j3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),N3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G3=new V({}),O3=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L734"}}),V3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),W3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H3=new V({}),U3=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L768"}}),Y3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),K3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Z3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oy=new V({}),ry=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L775"}}),ay=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),sy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iy=new V({}),dy=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L761"}}),fy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),gy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),py=new V({}),_y=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L743"}}),by=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Ty=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cy=new V({}),My=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L750"}}),yy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Ay=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),By=new V({}),xy=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L784"}}),Ry=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Py=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new V({}),Dy=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L814"}}),Ny=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Gy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new V({}),Vy=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L821"}}),Wy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Hy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new V({}),Yy=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L844"}}),Zy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),ow=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tw=new V({}),aw=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L828"}}),sw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),iw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new V({}),fw=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L835"}}),gw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),pw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new V({}),vw=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L853"}}),Fw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Mw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new V({}),ww=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L860"}}),Lw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),xw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new V({}),Sw=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L807"}}),$w=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Dw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new V({}),qw=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L791"}}),Ow=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Vw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ww=new V({}),Qw=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_auto.py#L798"}}),Uw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Yw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e6=new V({}),o6=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),t6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),a6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),n6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l6=new V({}),i6=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),c6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),f6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),m6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h6=new V({}),p6=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),u6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),b6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),v6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F6=new V({}),C6=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),E6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),y6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),w6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B6=new V({}),x6=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),R6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),P6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I6=new V({}),D6=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),N6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),G6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X6=new V({}),V6=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),W6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),H6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J6=new V({}),Y6=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),Z6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),oA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new V({}),aA=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),sA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),iA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new V({}),fA=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),gA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),pA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new V({}),bA=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),TA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),CA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new V({}),yA=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),AA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),BA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new V({}),RA=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),PA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),IA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new V({}),NA=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),GA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),XA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new V({}),WA=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),HA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),JA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new V({}),ZA=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),o0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),t0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new V({}),s0=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),i0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),c0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m0=new V({}),g0=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),p0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),_0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),u0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v0=new V({}),T0=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),C0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),E0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w0=new V({}),A0=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),B0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),k0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S0=new V({}),P0=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),I0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),D0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),j0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q0=new V({}),G0=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),X0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),z0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q0=new V({}),H0=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),J0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),Y0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),K0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eL=new V({}),oL=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),tL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),nL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iL=new V({}),dL=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),fL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15912/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15912/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),gL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15912/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15912/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15912/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),xe=l(),de=a("h1"),me=a("a"),no=a("span"),f(ce.$$.fragment),be=l(),Go=a("span"),Li=o("Auto Classes"),Ef=l(),sa=a("p"),Bi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),wE=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),we=l(),io=a("p"),ki=o("Instantiating one of "),In=a("a"),AE=o("AutoConfig"),Dn=o(", "),jn=a("a"),LE=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),BE=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),f($a.$$.fragment),co=l(),ge=a("p"),f8=o("will create a model that is an instance of "),Pi=a("a"),m8=o("BertModel"),g8=o("."),Oo=l(),Ia=a("p"),h8=o("There is one class of "),Af=a("code"),p8=o("AutoModel"),YRe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),G7e=l(),$i=a("h2"),Lf=a("a"),LW=a("span"),f(xE.$$.fragment),KRe=l(),BW=a("span"),ZRe=o("Extending the Auto Classes"),O7e=l(),qn=a("p"),eSe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),xW=a("code"),oSe=o("NewModel"),rSe=o(", make sure you have a "),kW=a("code"),tSe=o("NewModelConfig"),aSe=o(` then you can add those to the auto
classes like this:`),X7e=l(),f(kE.$$.fragment),V7e=l(),_8=a("p"),nSe=o("You will then be able to use the auto classes like you would usually do!"),z7e=l(),f(Bf.$$.fragment),W7e=l(),Ii=a("h2"),xf=a("a"),RW=a("span"),f(RE.$$.fragment),sSe=l(),SW=a("span"),lSe=o("AutoConfig"),Q7e=l(),Xo=a("div"),f(SE.$$.fragment),iSe=l(),PE=a("p"),dSe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),u8=a("a"),cSe=o("from_pretrained()"),fSe=o(" class method."),mSe=l(),$E=a("p"),gSe=o("This class cannot be instantiated directly using "),PW=a("code"),hSe=o("__init__()"),pSe=o(" (throws an error)."),_Se=l(),fo=a("div"),f(IE.$$.fragment),uSe=l(),$W=a("p"),bSe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),vSe=l(),Di=a("p"),TSe=o("The configuration class to instantiate is selected based on the "),IW=a("code"),FSe=o("model_type"),CSe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),DW=a("code"),MSe=o("pretrained_model_name_or_path"),ESe=o(":"),ySe=l(),v=a("ul"),kf=a("li"),jW=a("strong"),wSe=o("albert"),ASe=o(" \u2014 "),b8=a("a"),LSe=o("AlbertConfig"),BSe=o(" (ALBERT model)"),xSe=l(),Rf=a("li"),NW=a("strong"),kSe=o("bart"),RSe=o(" \u2014 "),v8=a("a"),SSe=o("BartConfig"),PSe=o(" (BART model)"),$Se=l(),Sf=a("li"),qW=a("strong"),ISe=o("beit"),DSe=o(" \u2014 "),T8=a("a"),jSe=o("BeitConfig"),NSe=o(" (BEiT model)"),qSe=l(),Pf=a("li"),GW=a("strong"),GSe=o("bert"),OSe=o(" \u2014 "),F8=a("a"),XSe=o("BertConfig"),VSe=o(" (BERT model)"),zSe=l(),$f=a("li"),OW=a("strong"),WSe=o("bert-generation"),QSe=o(" \u2014 "),C8=a("a"),HSe=o("BertGenerationConfig"),USe=o(" (Bert Generation model)"),JSe=l(),If=a("li"),XW=a("strong"),YSe=o("big_bird"),KSe=o(" \u2014 "),M8=a("a"),ZSe=o("BigBirdConfig"),ePe=o(" (BigBird model)"),oPe=l(),Df=a("li"),VW=a("strong"),rPe=o("bigbird_pegasus"),tPe=o(" \u2014 "),E8=a("a"),aPe=o("BigBirdPegasusConfig"),nPe=o(" (BigBirdPegasus model)"),sPe=l(),jf=a("li"),zW=a("strong"),lPe=o("blenderbot"),iPe=o(" \u2014 "),y8=a("a"),dPe=o("BlenderbotConfig"),cPe=o(" (Blenderbot model)"),fPe=l(),Nf=a("li"),WW=a("strong"),mPe=o("blenderbot-small"),gPe=o(" \u2014 "),w8=a("a"),hPe=o("BlenderbotSmallConfig"),pPe=o(" (BlenderbotSmall model)"),_Pe=l(),qf=a("li"),QW=a("strong"),uPe=o("camembert"),bPe=o(" \u2014 "),A8=a("a"),vPe=o("CamembertConfig"),TPe=o(" (CamemBERT model)"),FPe=l(),Gf=a("li"),HW=a("strong"),CPe=o("canine"),MPe=o(" \u2014 "),L8=a("a"),EPe=o("CanineConfig"),yPe=o(" (Canine model)"),wPe=l(),Of=a("li"),UW=a("strong"),APe=o("clip"),LPe=o(" \u2014 "),B8=a("a"),BPe=o("CLIPConfig"),xPe=o(" (CLIP model)"),kPe=l(),Xf=a("li"),JW=a("strong"),RPe=o("convbert"),SPe=o(" \u2014 "),x8=a("a"),PPe=o("ConvBertConfig"),$Pe=o(" (ConvBERT model)"),IPe=l(),Vf=a("li"),YW=a("strong"),DPe=o("convnext"),jPe=o(" \u2014 "),k8=a("a"),NPe=o("ConvNextConfig"),qPe=o(" (ConvNext model)"),GPe=l(),zf=a("li"),KW=a("strong"),OPe=o("ctrl"),XPe=o(" \u2014 "),R8=a("a"),VPe=o("CTRLConfig"),zPe=o(" (CTRL model)"),WPe=l(),Wf=a("li"),ZW=a("strong"),QPe=o("data2vec-audio"),HPe=o(" \u2014 "),S8=a("a"),UPe=o("Data2VecAudioConfig"),JPe=o(" (Data2VecAudio model)"),YPe=l(),Qf=a("li"),eQ=a("strong"),KPe=o("data2vec-text"),ZPe=o(" \u2014 "),P8=a("a"),e$e=o("Data2VecTextConfig"),o$e=o(" (Data2VecText model)"),r$e=l(),Hf=a("li"),oQ=a("strong"),t$e=o("deberta"),a$e=o(" \u2014 "),$8=a("a"),n$e=o("DebertaConfig"),s$e=o(" (DeBERTa model)"),l$e=l(),Uf=a("li"),rQ=a("strong"),i$e=o("deberta-v2"),d$e=o(" \u2014 "),I8=a("a"),c$e=o("DebertaV2Config"),f$e=o(" (DeBERTa-v2 model)"),m$e=l(),Jf=a("li"),tQ=a("strong"),g$e=o("deit"),h$e=o(" \u2014 "),D8=a("a"),p$e=o("DeiTConfig"),_$e=o(" (DeiT model)"),u$e=l(),Yf=a("li"),aQ=a("strong"),b$e=o("detr"),v$e=o(" \u2014 "),j8=a("a"),T$e=o("DetrConfig"),F$e=o(" (DETR model)"),C$e=l(),Kf=a("li"),nQ=a("strong"),M$e=o("distilbert"),E$e=o(" \u2014 "),N8=a("a"),y$e=o("DistilBertConfig"),w$e=o(" (DistilBERT model)"),A$e=l(),Zf=a("li"),sQ=a("strong"),L$e=o("dpr"),B$e=o(" \u2014 "),q8=a("a"),x$e=o("DPRConfig"),k$e=o(" (DPR model)"),R$e=l(),em=a("li"),lQ=a("strong"),S$e=o("electra"),P$e=o(" \u2014 "),G8=a("a"),$$e=o("ElectraConfig"),I$e=o(" (ELECTRA model)"),D$e=l(),om=a("li"),iQ=a("strong"),j$e=o("encoder-decoder"),N$e=o(" \u2014 "),O8=a("a"),q$e=o("EncoderDecoderConfig"),G$e=o(" (Encoder decoder model)"),O$e=l(),rm=a("li"),dQ=a("strong"),X$e=o("flaubert"),V$e=o(" \u2014 "),X8=a("a"),z$e=o("FlaubertConfig"),W$e=o(" (FlauBERT model)"),Q$e=l(),tm=a("li"),cQ=a("strong"),H$e=o("fnet"),U$e=o(" \u2014 "),V8=a("a"),J$e=o("FNetConfig"),Y$e=o(" (FNet model)"),K$e=l(),am=a("li"),fQ=a("strong"),Z$e=o("fsmt"),eIe=o(" \u2014 "),z8=a("a"),oIe=o("FSMTConfig"),rIe=o(" (FairSeq Machine-Translation model)"),tIe=l(),nm=a("li"),mQ=a("strong"),aIe=o("funnel"),nIe=o(" \u2014 "),W8=a("a"),sIe=o("FunnelConfig"),lIe=o(" (Funnel Transformer model)"),iIe=l(),sm=a("li"),gQ=a("strong"),dIe=o("gpt2"),cIe=o(" \u2014 "),Q8=a("a"),fIe=o("GPT2Config"),mIe=o(" (OpenAI GPT-2 model)"),gIe=l(),lm=a("li"),hQ=a("strong"),hIe=o("gpt_neo"),pIe=o(" \u2014 "),H8=a("a"),_Ie=o("GPTNeoConfig"),uIe=o(" (GPT Neo model)"),bIe=l(),im=a("li"),pQ=a("strong"),vIe=o("gptj"),TIe=o(" \u2014 "),U8=a("a"),FIe=o("GPTJConfig"),CIe=o(" (GPT-J model)"),MIe=l(),dm=a("li"),_Q=a("strong"),EIe=o("hubert"),yIe=o(" \u2014 "),J8=a("a"),wIe=o("HubertConfig"),AIe=o(" (Hubert model)"),LIe=l(),cm=a("li"),uQ=a("strong"),BIe=o("ibert"),xIe=o(" \u2014 "),Y8=a("a"),kIe=o("IBertConfig"),RIe=o(" (I-BERT model)"),SIe=l(),fm=a("li"),bQ=a("strong"),PIe=o("imagegpt"),$Ie=o(" \u2014 "),K8=a("a"),IIe=o("ImageGPTConfig"),DIe=o(" (ImageGPT model)"),jIe=l(),mm=a("li"),vQ=a("strong"),NIe=o("layoutlm"),qIe=o(" \u2014 "),Z8=a("a"),GIe=o("LayoutLMConfig"),OIe=o(" (LayoutLM model)"),XIe=l(),gm=a("li"),TQ=a("strong"),VIe=o("layoutlmv2"),zIe=o(" \u2014 "),e7=a("a"),WIe=o("LayoutLMv2Config"),QIe=o(" (LayoutLMv2 model)"),HIe=l(),hm=a("li"),FQ=a("strong"),UIe=o("led"),JIe=o(" \u2014 "),o7=a("a"),YIe=o("LEDConfig"),KIe=o(" (LED model)"),ZIe=l(),pm=a("li"),CQ=a("strong"),eDe=o("longformer"),oDe=o(" \u2014 "),r7=a("a"),rDe=o("LongformerConfig"),tDe=o(" (Longformer model)"),aDe=l(),_m=a("li"),MQ=a("strong"),nDe=o("luke"),sDe=o(" \u2014 "),t7=a("a"),lDe=o("LukeConfig"),iDe=o(" (LUKE model)"),dDe=l(),um=a("li"),EQ=a("strong"),cDe=o("lxmert"),fDe=o(" \u2014 "),a7=a("a"),mDe=o("LxmertConfig"),gDe=o(" (LXMERT model)"),hDe=l(),bm=a("li"),yQ=a("strong"),pDe=o("m2m_100"),_De=o(" \u2014 "),n7=a("a"),uDe=o("M2M100Config"),bDe=o(" (M2M100 model)"),vDe=l(),vm=a("li"),wQ=a("strong"),TDe=o("marian"),FDe=o(" \u2014 "),s7=a("a"),CDe=o("MarianConfig"),MDe=o(" (Marian model)"),EDe=l(),Tm=a("li"),AQ=a("strong"),yDe=o("maskformer"),wDe=o(" \u2014 "),l7=a("a"),ADe=o("MaskFormerConfig"),LDe=o(" (MaskFormer model)"),BDe=l(),Fm=a("li"),LQ=a("strong"),xDe=o("mbart"),kDe=o(" \u2014 "),i7=a("a"),RDe=o("MBartConfig"),SDe=o(" (mBART model)"),PDe=l(),Cm=a("li"),BQ=a("strong"),$De=o("megatron-bert"),IDe=o(" \u2014 "),d7=a("a"),DDe=o("MegatronBertConfig"),jDe=o(" (MegatronBert model)"),NDe=l(),Mm=a("li"),xQ=a("strong"),qDe=o("mobilebert"),GDe=o(" \u2014 "),c7=a("a"),ODe=o("MobileBertConfig"),XDe=o(" (MobileBERT model)"),VDe=l(),Em=a("li"),kQ=a("strong"),zDe=o("mpnet"),WDe=o(" \u2014 "),f7=a("a"),QDe=o("MPNetConfig"),HDe=o(" (MPNet model)"),UDe=l(),ym=a("li"),RQ=a("strong"),JDe=o("mt5"),YDe=o(" \u2014 "),m7=a("a"),KDe=o("MT5Config"),ZDe=o(" (mT5 model)"),eje=l(),wm=a("li"),SQ=a("strong"),oje=o("nystromformer"),rje=o(" \u2014 "),g7=a("a"),tje=o("NystromformerConfig"),aje=o(" (Nystromformer model)"),nje=l(),Am=a("li"),PQ=a("strong"),sje=o("openai-gpt"),lje=o(" \u2014 "),h7=a("a"),ije=o("OpenAIGPTConfig"),dje=o(" (OpenAI GPT model)"),cje=l(),Lm=a("li"),$Q=a("strong"),fje=o("pegasus"),mje=o(" \u2014 "),p7=a("a"),gje=o("PegasusConfig"),hje=o(" (Pegasus model)"),pje=l(),Bm=a("li"),IQ=a("strong"),_je=o("perceiver"),uje=o(" \u2014 "),_7=a("a"),bje=o("PerceiverConfig"),vje=o(" (Perceiver model)"),Tje=l(),xm=a("li"),DQ=a("strong"),Fje=o("plbart"),Cje=o(" \u2014 "),u7=a("a"),Mje=o("PLBartConfig"),Eje=o(" (PLBart model)"),yje=l(),km=a("li"),jQ=a("strong"),wje=o("poolformer"),Aje=o(" \u2014 "),b7=a("a"),Lje=o("PoolFormerConfig"),Bje=o(" (PoolFormer model)"),xje=l(),Rm=a("li"),NQ=a("strong"),kje=o("prophetnet"),Rje=o(" \u2014 "),v7=a("a"),Sje=o("ProphetNetConfig"),Pje=o(" (ProphetNet model)"),$je=l(),Sm=a("li"),qQ=a("strong"),Ije=o("qdqbert"),Dje=o(" \u2014 "),T7=a("a"),jje=o("QDQBertConfig"),Nje=o(" (QDQBert model)"),qje=l(),Pm=a("li"),GQ=a("strong"),Gje=o("rag"),Oje=o(" \u2014 "),F7=a("a"),Xje=o("RagConfig"),Vje=o(" (RAG model)"),zje=l(),$m=a("li"),OQ=a("strong"),Wje=o("realm"),Qje=o(" \u2014 "),C7=a("a"),Hje=o("RealmConfig"),Uje=o(" (Realm model)"),Jje=l(),Im=a("li"),XQ=a("strong"),Yje=o("reformer"),Kje=o(" \u2014 "),M7=a("a"),Zje=o("ReformerConfig"),eNe=o(" (Reformer model)"),oNe=l(),Dm=a("li"),VQ=a("strong"),rNe=o("rembert"),tNe=o(" \u2014 "),E7=a("a"),aNe=o("RemBertConfig"),nNe=o(" (RemBERT model)"),sNe=l(),jm=a("li"),zQ=a("strong"),lNe=o("resnet"),iNe=o(" \u2014 "),y7=a("a"),dNe=o("ResNetConfig"),cNe=o(" (ResNet model)"),fNe=l(),Nm=a("li"),WQ=a("strong"),mNe=o("retribert"),gNe=o(" \u2014 "),w7=a("a"),hNe=o("RetriBertConfig"),pNe=o(" (RetriBERT model)"),_Ne=l(),qm=a("li"),QQ=a("strong"),uNe=o("roberta"),bNe=o(" \u2014 "),A7=a("a"),vNe=o("RobertaConfig"),TNe=o(" (RoBERTa model)"),FNe=l(),Gm=a("li"),HQ=a("strong"),CNe=o("roformer"),MNe=o(" \u2014 "),L7=a("a"),ENe=o("RoFormerConfig"),yNe=o(" (RoFormer model)"),wNe=l(),Om=a("li"),UQ=a("strong"),ANe=o("segformer"),LNe=o(" \u2014 "),B7=a("a"),BNe=o("SegformerConfig"),xNe=o(" (SegFormer model)"),kNe=l(),Xm=a("li"),JQ=a("strong"),RNe=o("sew"),SNe=o(" \u2014 "),x7=a("a"),PNe=o("SEWConfig"),$Ne=o(" (SEW model)"),INe=l(),Vm=a("li"),YQ=a("strong"),DNe=o("sew-d"),jNe=o(" \u2014 "),k7=a("a"),NNe=o("SEWDConfig"),qNe=o(" (SEW-D model)"),GNe=l(),zm=a("li"),KQ=a("strong"),ONe=o("speech-encoder-decoder"),XNe=o(" \u2014 "),R7=a("a"),VNe=o("SpeechEncoderDecoderConfig"),zNe=o(" (Speech Encoder decoder model)"),WNe=l(),Wm=a("li"),ZQ=a("strong"),QNe=o("speech_to_text"),HNe=o(" \u2014 "),S7=a("a"),UNe=o("Speech2TextConfig"),JNe=o(" (Speech2Text model)"),YNe=l(),Qm=a("li"),eH=a("strong"),KNe=o("speech_to_text_2"),ZNe=o(" \u2014 "),P7=a("a"),eqe=o("Speech2Text2Config"),oqe=o(" (Speech2Text2 model)"),rqe=l(),Hm=a("li"),oH=a("strong"),tqe=o("splinter"),aqe=o(" \u2014 "),$7=a("a"),nqe=o("SplinterConfig"),sqe=o(" (Splinter model)"),lqe=l(),Um=a("li"),rH=a("strong"),iqe=o("squeezebert"),dqe=o(" \u2014 "),I7=a("a"),cqe=o("SqueezeBertConfig"),fqe=o(" (SqueezeBERT model)"),mqe=l(),Jm=a("li"),tH=a("strong"),gqe=o("swin"),hqe=o(" \u2014 "),D7=a("a"),pqe=o("SwinConfig"),_qe=o(" (Swin model)"),uqe=l(),Ym=a("li"),aH=a("strong"),bqe=o("t5"),vqe=o(" \u2014 "),j7=a("a"),Tqe=o("T5Config"),Fqe=o(" (T5 model)"),Cqe=l(),Km=a("li"),nH=a("strong"),Mqe=o("tapas"),Eqe=o(" \u2014 "),N7=a("a"),yqe=o("TapasConfig"),wqe=o(" (TAPAS model)"),Aqe=l(),Zm=a("li"),sH=a("strong"),Lqe=o("transfo-xl"),Bqe=o(" \u2014 "),q7=a("a"),xqe=o("TransfoXLConfig"),kqe=o(" (Transformer-XL model)"),Rqe=l(),eg=a("li"),lH=a("strong"),Sqe=o("trocr"),Pqe=o(" \u2014 "),G7=a("a"),$qe=o("TrOCRConfig"),Iqe=o(" (TrOCR model)"),Dqe=l(),og=a("li"),iH=a("strong"),jqe=o("unispeech"),Nqe=o(" \u2014 "),O7=a("a"),qqe=o("UniSpeechConfig"),Gqe=o(" (UniSpeech model)"),Oqe=l(),rg=a("li"),dH=a("strong"),Xqe=o("unispeech-sat"),Vqe=o(" \u2014 "),X7=a("a"),zqe=o("UniSpeechSatConfig"),Wqe=o(" (UniSpeechSat model)"),Qqe=l(),tg=a("li"),cH=a("strong"),Hqe=o("vilt"),Uqe=o(" \u2014 "),V7=a("a"),Jqe=o("ViltConfig"),Yqe=o(" (ViLT model)"),Kqe=l(),ag=a("li"),fH=a("strong"),Zqe=o("vision-encoder-decoder"),eGe=o(" \u2014 "),z7=a("a"),oGe=o("VisionEncoderDecoderConfig"),rGe=o(" (Vision Encoder decoder model)"),tGe=l(),ng=a("li"),mH=a("strong"),aGe=o("vision-text-dual-encoder"),nGe=o(" \u2014 "),W7=a("a"),sGe=o("VisionTextDualEncoderConfig"),lGe=o(" (VisionTextDualEncoder model)"),iGe=l(),sg=a("li"),gH=a("strong"),dGe=o("visual_bert"),cGe=o(" \u2014 "),Q7=a("a"),fGe=o("VisualBertConfig"),mGe=o(" (VisualBert model)"),gGe=l(),lg=a("li"),hH=a("strong"),hGe=o("vit"),pGe=o(" \u2014 "),H7=a("a"),_Ge=o("ViTConfig"),uGe=o(" (ViT model)"),bGe=l(),ig=a("li"),pH=a("strong"),vGe=o("vit_mae"),TGe=o(" \u2014 "),U7=a("a"),FGe=o("ViTMAEConfig"),CGe=o(" (ViTMAE model)"),MGe=l(),dg=a("li"),_H=a("strong"),EGe=o("wav2vec2"),yGe=o(" \u2014 "),J7=a("a"),wGe=o("Wav2Vec2Config"),AGe=o(" (Wav2Vec2 model)"),LGe=l(),cg=a("li"),uH=a("strong"),BGe=o("wavlm"),xGe=o(" \u2014 "),Y7=a("a"),kGe=o("WavLMConfig"),RGe=o(" (WavLM model)"),SGe=l(),fg=a("li"),bH=a("strong"),PGe=o("xglm"),$Ge=o(" \u2014 "),K7=a("a"),IGe=o("XGLMConfig"),DGe=o(" (XGLM model)"),jGe=l(),mg=a("li"),vH=a("strong"),NGe=o("xlm"),qGe=o(" \u2014 "),Z7=a("a"),GGe=o("XLMConfig"),OGe=o(" (XLM model)"),XGe=l(),gg=a("li"),TH=a("strong"),VGe=o("xlm-prophetnet"),zGe=o(" \u2014 "),eB=a("a"),WGe=o("XLMProphetNetConfig"),QGe=o(" (XLMProphetNet model)"),HGe=l(),hg=a("li"),FH=a("strong"),UGe=o("xlm-roberta"),JGe=o(" \u2014 "),oB=a("a"),YGe=o("XLMRobertaConfig"),KGe=o(" (XLM-RoBERTa model)"),ZGe=l(),pg=a("li"),CH=a("strong"),eOe=o("xlm-roberta-xl"),oOe=o(" \u2014 "),rB=a("a"),rOe=o("XLMRobertaXLConfig"),tOe=o(" (XLM-RoBERTa-XL model)"),aOe=l(),_g=a("li"),MH=a("strong"),nOe=o("xlnet"),sOe=o(" \u2014 "),tB=a("a"),lOe=o("XLNetConfig"),iOe=o(" (XLNet model)"),dOe=l(),ug=a("li"),EH=a("strong"),cOe=o("yoso"),fOe=o(" \u2014 "),aB=a("a"),mOe=o("YosoConfig"),gOe=o(" (YOSO model)"),hOe=l(),yH=a("p"),pOe=o("Examples:"),_Oe=l(),f(DE.$$.fragment),uOe=l(),bg=a("div"),f(jE.$$.fragment),bOe=l(),wH=a("p"),vOe=o("Register a new configuration for this class."),H7e=l(),ji=a("h2"),vg=a("a"),AH=a("span"),f(NE.$$.fragment),TOe=l(),LH=a("span"),FOe=o("AutoTokenizer"),U7e=l(),Vo=a("div"),f(qE.$$.fragment),COe=l(),GE=a("p"),MOe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nB=a("a"),EOe=o("AutoTokenizer.from_pretrained()"),yOe=o(" class method."),wOe=l(),OE=a("p"),AOe=o("This class cannot be instantiated directly using "),BH=a("code"),LOe=o("__init__()"),BOe=o(" (throws an error)."),xOe=l(),mo=a("div"),f(XE.$$.fragment),kOe=l(),xH=a("p"),ROe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SOe=l(),Da=a("p"),POe=o("The tokenizer class to instantiate is selected based on the "),kH=a("code"),$Oe=o("model_type"),IOe=o(` property of the config object (either
passed as an argument or loaded from `),RH=a("code"),DOe=o("pretrained_model_name_or_path"),jOe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SH=a("code"),NOe=o("pretrained_model_name_or_path"),qOe=o(":"),GOe=l(),M=a("ul"),Gn=a("li"),PH=a("strong"),OOe=o("albert"),XOe=o(" \u2014 "),sB=a("a"),VOe=o("AlbertTokenizer"),zOe=o(" or "),lB=a("a"),WOe=o("AlbertTokenizerFast"),QOe=o(" (ALBERT model)"),HOe=l(),On=a("li"),$H=a("strong"),UOe=o("bart"),JOe=o(" \u2014 "),iB=a("a"),YOe=o("BartTokenizer"),KOe=o(" or "),dB=a("a"),ZOe=o("BartTokenizerFast"),eXe=o(" (BART model)"),oXe=l(),Xn=a("li"),IH=a("strong"),rXe=o("barthez"),tXe=o(" \u2014 "),cB=a("a"),aXe=o("BarthezTokenizer"),nXe=o(" or "),fB=a("a"),sXe=o("BarthezTokenizerFast"),lXe=o(" (BARThez model)"),iXe=l(),Tg=a("li"),DH=a("strong"),dXe=o("bartpho"),cXe=o(" \u2014 "),mB=a("a"),fXe=o("BartphoTokenizer"),mXe=o(" (BARTpho model)"),gXe=l(),Vn=a("li"),jH=a("strong"),hXe=o("bert"),pXe=o(" \u2014 "),gB=a("a"),_Xe=o("BertTokenizer"),uXe=o(" or "),hB=a("a"),bXe=o("BertTokenizerFast"),vXe=o(" (BERT model)"),TXe=l(),Fg=a("li"),NH=a("strong"),FXe=o("bert-generation"),CXe=o(" \u2014 "),pB=a("a"),MXe=o("BertGenerationTokenizer"),EXe=o(" (Bert Generation model)"),yXe=l(),Cg=a("li"),qH=a("strong"),wXe=o("bert-japanese"),AXe=o(" \u2014 "),_B=a("a"),LXe=o("BertJapaneseTokenizer"),BXe=o(" (BertJapanese model)"),xXe=l(),Mg=a("li"),GH=a("strong"),kXe=o("bertweet"),RXe=o(" \u2014 "),uB=a("a"),SXe=o("BertweetTokenizer"),PXe=o(" (Bertweet model)"),$Xe=l(),zn=a("li"),OH=a("strong"),IXe=o("big_bird"),DXe=o(" \u2014 "),bB=a("a"),jXe=o("BigBirdTokenizer"),NXe=o(" or "),vB=a("a"),qXe=o("BigBirdTokenizerFast"),GXe=o(" (BigBird model)"),OXe=l(),Wn=a("li"),XH=a("strong"),XXe=o("bigbird_pegasus"),VXe=o(" \u2014 "),TB=a("a"),zXe=o("PegasusTokenizer"),WXe=o(" or "),FB=a("a"),QXe=o("PegasusTokenizerFast"),HXe=o(" (BigBirdPegasus model)"),UXe=l(),Qn=a("li"),VH=a("strong"),JXe=o("blenderbot"),YXe=o(" \u2014 "),CB=a("a"),KXe=o("BlenderbotTokenizer"),ZXe=o(" or "),MB=a("a"),eVe=o("BlenderbotTokenizerFast"),oVe=o(" (Blenderbot model)"),rVe=l(),Eg=a("li"),zH=a("strong"),tVe=o("blenderbot-small"),aVe=o(" \u2014 "),EB=a("a"),nVe=o("BlenderbotSmallTokenizer"),sVe=o(" (BlenderbotSmall model)"),lVe=l(),yg=a("li"),WH=a("strong"),iVe=o("byt5"),dVe=o(" \u2014 "),yB=a("a"),cVe=o("ByT5Tokenizer"),fVe=o(" (ByT5 model)"),mVe=l(),Hn=a("li"),QH=a("strong"),gVe=o("camembert"),hVe=o(" \u2014 "),wB=a("a"),pVe=o("CamembertTokenizer"),_Ve=o(" or "),AB=a("a"),uVe=o("CamembertTokenizerFast"),bVe=o(" (CamemBERT model)"),vVe=l(),wg=a("li"),HH=a("strong"),TVe=o("canine"),FVe=o(" \u2014 "),LB=a("a"),CVe=o("CanineTokenizer"),MVe=o(" (Canine model)"),EVe=l(),Un=a("li"),UH=a("strong"),yVe=o("clip"),wVe=o(" \u2014 "),BB=a("a"),AVe=o("CLIPTokenizer"),LVe=o(" or "),xB=a("a"),BVe=o("CLIPTokenizerFast"),xVe=o(" (CLIP model)"),kVe=l(),Jn=a("li"),JH=a("strong"),RVe=o("convbert"),SVe=o(" \u2014 "),kB=a("a"),PVe=o("ConvBertTokenizer"),$Ve=o(" or "),RB=a("a"),IVe=o("ConvBertTokenizerFast"),DVe=o(" (ConvBERT model)"),jVe=l(),Yn=a("li"),YH=a("strong"),NVe=o("cpm"),qVe=o(" \u2014 "),SB=a("a"),GVe=o("CpmTokenizer"),OVe=o(" or "),KH=a("code"),XVe=o("CpmTokenizerFast"),VVe=o(" (CPM model)"),zVe=l(),Ag=a("li"),ZH=a("strong"),WVe=o("ctrl"),QVe=o(" \u2014 "),PB=a("a"),HVe=o("CTRLTokenizer"),UVe=o(" (CTRL model)"),JVe=l(),Kn=a("li"),eU=a("strong"),YVe=o("deberta"),KVe=o(" \u2014 "),$B=a("a"),ZVe=o("DebertaTokenizer"),eze=o(" or "),IB=a("a"),oze=o("DebertaTokenizerFast"),rze=o(" (DeBERTa model)"),tze=l(),Lg=a("li"),oU=a("strong"),aze=o("deberta-v2"),nze=o(" \u2014 "),DB=a("a"),sze=o("DebertaV2Tokenizer"),lze=o(" (DeBERTa-v2 model)"),ize=l(),Zn=a("li"),rU=a("strong"),dze=o("distilbert"),cze=o(" \u2014 "),jB=a("a"),fze=o("DistilBertTokenizer"),mze=o(" or "),NB=a("a"),gze=o("DistilBertTokenizerFast"),hze=o(" (DistilBERT model)"),pze=l(),es=a("li"),tU=a("strong"),_ze=o("dpr"),uze=o(" \u2014 "),qB=a("a"),bze=o("DPRQuestionEncoderTokenizer"),vze=o(" or "),GB=a("a"),Tze=o("DPRQuestionEncoderTokenizerFast"),Fze=o(" (DPR model)"),Cze=l(),os=a("li"),aU=a("strong"),Mze=o("electra"),Eze=o(" \u2014 "),OB=a("a"),yze=o("ElectraTokenizer"),wze=o(" or "),XB=a("a"),Aze=o("ElectraTokenizerFast"),Lze=o(" (ELECTRA model)"),Bze=l(),Bg=a("li"),nU=a("strong"),xze=o("flaubert"),kze=o(" \u2014 "),VB=a("a"),Rze=o("FlaubertTokenizer"),Sze=o(" (FlauBERT model)"),Pze=l(),rs=a("li"),sU=a("strong"),$ze=o("fnet"),Ize=o(" \u2014 "),zB=a("a"),Dze=o("FNetTokenizer"),jze=o(" or "),WB=a("a"),Nze=o("FNetTokenizerFast"),qze=o(" (FNet model)"),Gze=l(),xg=a("li"),lU=a("strong"),Oze=o("fsmt"),Xze=o(" \u2014 "),QB=a("a"),Vze=o("FSMTTokenizer"),zze=o(" (FairSeq Machine-Translation model)"),Wze=l(),ts=a("li"),iU=a("strong"),Qze=o("funnel"),Hze=o(" \u2014 "),HB=a("a"),Uze=o("FunnelTokenizer"),Jze=o(" or "),UB=a("a"),Yze=o("FunnelTokenizerFast"),Kze=o(" (Funnel Transformer model)"),Zze=l(),as=a("li"),dU=a("strong"),eWe=o("gpt2"),oWe=o(" \u2014 "),JB=a("a"),rWe=o("GPT2Tokenizer"),tWe=o(" or "),YB=a("a"),aWe=o("GPT2TokenizerFast"),nWe=o(" (OpenAI GPT-2 model)"),sWe=l(),ns=a("li"),cU=a("strong"),lWe=o("gpt_neo"),iWe=o(" \u2014 "),KB=a("a"),dWe=o("GPT2Tokenizer"),cWe=o(" or "),ZB=a("a"),fWe=o("GPT2TokenizerFast"),mWe=o(" (GPT Neo model)"),gWe=l(),ss=a("li"),fU=a("strong"),hWe=o("herbert"),pWe=o(" \u2014 "),ex=a("a"),_We=o("HerbertTokenizer"),uWe=o(" or "),ox=a("a"),bWe=o("HerbertTokenizerFast"),vWe=o(" (HerBERT model)"),TWe=l(),kg=a("li"),mU=a("strong"),FWe=o("hubert"),CWe=o(" \u2014 "),rx=a("a"),MWe=o("Wav2Vec2CTCTokenizer"),EWe=o(" (Hubert model)"),yWe=l(),ls=a("li"),gU=a("strong"),wWe=o("ibert"),AWe=o(" \u2014 "),tx=a("a"),LWe=o("RobertaTokenizer"),BWe=o(" or "),ax=a("a"),xWe=o("RobertaTokenizerFast"),kWe=o(" (I-BERT model)"),RWe=l(),is=a("li"),hU=a("strong"),SWe=o("layoutlm"),PWe=o(" \u2014 "),nx=a("a"),$We=o("LayoutLMTokenizer"),IWe=o(" or "),sx=a("a"),DWe=o("LayoutLMTokenizerFast"),jWe=o(" (LayoutLM model)"),NWe=l(),ds=a("li"),pU=a("strong"),qWe=o("layoutlmv2"),GWe=o(" \u2014 "),lx=a("a"),OWe=o("LayoutLMv2Tokenizer"),XWe=o(" or "),ix=a("a"),VWe=o("LayoutLMv2TokenizerFast"),zWe=o(" (LayoutLMv2 model)"),WWe=l(),cs=a("li"),_U=a("strong"),QWe=o("layoutxlm"),HWe=o(" \u2014 "),dx=a("a"),UWe=o("LayoutXLMTokenizer"),JWe=o(" or "),cx=a("a"),YWe=o("LayoutXLMTokenizerFast"),KWe=o(" (LayoutXLM model)"),ZWe=l(),fs=a("li"),uU=a("strong"),eQe=o("led"),oQe=o(" \u2014 "),fx=a("a"),rQe=o("LEDTokenizer"),tQe=o(" or "),mx=a("a"),aQe=o("LEDTokenizerFast"),nQe=o(" (LED model)"),sQe=l(),ms=a("li"),bU=a("strong"),lQe=o("longformer"),iQe=o(" \u2014 "),gx=a("a"),dQe=o("LongformerTokenizer"),cQe=o(" or "),hx=a("a"),fQe=o("LongformerTokenizerFast"),mQe=o(" (Longformer model)"),gQe=l(),Rg=a("li"),vU=a("strong"),hQe=o("luke"),pQe=o(" \u2014 "),px=a("a"),_Qe=o("LukeTokenizer"),uQe=o(" (LUKE model)"),bQe=l(),gs=a("li"),TU=a("strong"),vQe=o("lxmert"),TQe=o(" \u2014 "),_x=a("a"),FQe=o("LxmertTokenizer"),CQe=o(" or "),ux=a("a"),MQe=o("LxmertTokenizerFast"),EQe=o(" (LXMERT model)"),yQe=l(),Sg=a("li"),FU=a("strong"),wQe=o("m2m_100"),AQe=o(" \u2014 "),bx=a("a"),LQe=o("M2M100Tokenizer"),BQe=o(" (M2M100 model)"),xQe=l(),Pg=a("li"),CU=a("strong"),kQe=o("marian"),RQe=o(" \u2014 "),vx=a("a"),SQe=o("MarianTokenizer"),PQe=o(" (Marian model)"),$Qe=l(),hs=a("li"),MU=a("strong"),IQe=o("mbart"),DQe=o(" \u2014 "),Tx=a("a"),jQe=o("MBartTokenizer"),NQe=o(" or "),Fx=a("a"),qQe=o("MBartTokenizerFast"),GQe=o(" (mBART model)"),OQe=l(),ps=a("li"),EU=a("strong"),XQe=o("mbart50"),VQe=o(" \u2014 "),Cx=a("a"),zQe=o("MBart50Tokenizer"),WQe=o(" or "),Mx=a("a"),QQe=o("MBart50TokenizerFast"),HQe=o(" (mBART-50 model)"),UQe=l(),$g=a("li"),yU=a("strong"),JQe=o("mluke"),YQe=o(" \u2014 "),Ex=a("a"),KQe=o("MLukeTokenizer"),ZQe=o(" (mLUKE model)"),eHe=l(),_s=a("li"),wU=a("strong"),oHe=o("mobilebert"),rHe=o(" \u2014 "),yx=a("a"),tHe=o("MobileBertTokenizer"),aHe=o(" or "),wx=a("a"),nHe=o("MobileBertTokenizerFast"),sHe=o(" (MobileBERT model)"),lHe=l(),us=a("li"),AU=a("strong"),iHe=o("mpnet"),dHe=o(" \u2014 "),Ax=a("a"),cHe=o("MPNetTokenizer"),fHe=o(" or "),Lx=a("a"),mHe=o("MPNetTokenizerFast"),gHe=o(" (MPNet model)"),hHe=l(),bs=a("li"),LU=a("strong"),pHe=o("mt5"),_He=o(" \u2014 "),Bx=a("a"),uHe=o("MT5Tokenizer"),bHe=o(" or "),xx=a("a"),vHe=o("MT5TokenizerFast"),THe=o(" (mT5 model)"),FHe=l(),vs=a("li"),BU=a("strong"),CHe=o("openai-gpt"),MHe=o(" \u2014 "),kx=a("a"),EHe=o("OpenAIGPTTokenizer"),yHe=o(" or "),Rx=a("a"),wHe=o("OpenAIGPTTokenizerFast"),AHe=o(" (OpenAI GPT model)"),LHe=l(),Ts=a("li"),xU=a("strong"),BHe=o("pegasus"),xHe=o(" \u2014 "),Sx=a("a"),kHe=o("PegasusTokenizer"),RHe=o(" or "),Px=a("a"),SHe=o("PegasusTokenizerFast"),PHe=o(" (Pegasus model)"),$He=l(),Ig=a("li"),kU=a("strong"),IHe=o("perceiver"),DHe=o(" \u2014 "),$x=a("a"),jHe=o("PerceiverTokenizer"),NHe=o(" (Perceiver model)"),qHe=l(),Dg=a("li"),RU=a("strong"),GHe=o("phobert"),OHe=o(" \u2014 "),Ix=a("a"),XHe=o("PhobertTokenizer"),VHe=o(" (PhoBERT model)"),zHe=l(),jg=a("li"),SU=a("strong"),WHe=o("plbart"),QHe=o(" \u2014 "),Dx=a("a"),HHe=o("PLBartTokenizer"),UHe=o(" (PLBart model)"),JHe=l(),Ng=a("li"),PU=a("strong"),YHe=o("prophetnet"),KHe=o(" \u2014 "),jx=a("a"),ZHe=o("ProphetNetTokenizer"),eUe=o(" (ProphetNet model)"),oUe=l(),Fs=a("li"),$U=a("strong"),rUe=o("qdqbert"),tUe=o(" \u2014 "),Nx=a("a"),aUe=o("BertTokenizer"),nUe=o(" or "),qx=a("a"),sUe=o("BertTokenizerFast"),lUe=o(" (QDQBert model)"),iUe=l(),qg=a("li"),IU=a("strong"),dUe=o("rag"),cUe=o(" \u2014 "),Gx=a("a"),fUe=o("RagTokenizer"),mUe=o(" (RAG model)"),gUe=l(),Cs=a("li"),DU=a("strong"),hUe=o("reformer"),pUe=o(" \u2014 "),Ox=a("a"),_Ue=o("ReformerTokenizer"),uUe=o(" or "),Xx=a("a"),bUe=o("ReformerTokenizerFast"),vUe=o(" (Reformer model)"),TUe=l(),Ms=a("li"),jU=a("strong"),FUe=o("rembert"),CUe=o(" \u2014 "),Vx=a("a"),MUe=o("RemBertTokenizer"),EUe=o(" or "),zx=a("a"),yUe=o("RemBertTokenizerFast"),wUe=o(" (RemBERT model)"),AUe=l(),Es=a("li"),NU=a("strong"),LUe=o("retribert"),BUe=o(" \u2014 "),Wx=a("a"),xUe=o("RetriBertTokenizer"),kUe=o(" or "),Qx=a("a"),RUe=o("RetriBertTokenizerFast"),SUe=o(" (RetriBERT model)"),PUe=l(),ys=a("li"),qU=a("strong"),$Ue=o("roberta"),IUe=o(" \u2014 "),Hx=a("a"),DUe=o("RobertaTokenizer"),jUe=o(" or "),Ux=a("a"),NUe=o("RobertaTokenizerFast"),qUe=o(" (RoBERTa model)"),GUe=l(),ws=a("li"),GU=a("strong"),OUe=o("roformer"),XUe=o(" \u2014 "),Jx=a("a"),VUe=o("RoFormerTokenizer"),zUe=o(" or "),Yx=a("a"),WUe=o("RoFormerTokenizerFast"),QUe=o(" (RoFormer model)"),HUe=l(),Gg=a("li"),OU=a("strong"),UUe=o("speech_to_text"),JUe=o(" \u2014 "),Kx=a("a"),YUe=o("Speech2TextTokenizer"),KUe=o(" (Speech2Text model)"),ZUe=l(),Og=a("li"),XU=a("strong"),eJe=o("speech_to_text_2"),oJe=o(" \u2014 "),Zx=a("a"),rJe=o("Speech2Text2Tokenizer"),tJe=o(" (Speech2Text2 model)"),aJe=l(),As=a("li"),VU=a("strong"),nJe=o("splinter"),sJe=o(" \u2014 "),ek=a("a"),lJe=o("SplinterTokenizer"),iJe=o(" or "),ok=a("a"),dJe=o("SplinterTokenizerFast"),cJe=o(" (Splinter model)"),fJe=l(),Ls=a("li"),zU=a("strong"),mJe=o("squeezebert"),gJe=o(" \u2014 "),rk=a("a"),hJe=o("SqueezeBertTokenizer"),pJe=o(" or "),tk=a("a"),_Je=o("SqueezeBertTokenizerFast"),uJe=o(" (SqueezeBERT model)"),bJe=l(),Bs=a("li"),WU=a("strong"),vJe=o("t5"),TJe=o(" \u2014 "),ak=a("a"),FJe=o("T5Tokenizer"),CJe=o(" or "),nk=a("a"),MJe=o("T5TokenizerFast"),EJe=o(" (T5 model)"),yJe=l(),Xg=a("li"),QU=a("strong"),wJe=o("tapas"),AJe=o(" \u2014 "),sk=a("a"),LJe=o("TapasTokenizer"),BJe=o(" (TAPAS model)"),xJe=l(),Vg=a("li"),HU=a("strong"),kJe=o("transfo-xl"),RJe=o(" \u2014 "),lk=a("a"),SJe=o("TransfoXLTokenizer"),PJe=o(" (Transformer-XL model)"),$Je=l(),zg=a("li"),UU=a("strong"),IJe=o("wav2vec2"),DJe=o(" \u2014 "),ik=a("a"),jJe=o("Wav2Vec2CTCTokenizer"),NJe=o(" (Wav2Vec2 model)"),qJe=l(),Wg=a("li"),JU=a("strong"),GJe=o("wav2vec2_phoneme"),OJe=o(" \u2014 "),dk=a("a"),XJe=o("Wav2Vec2PhonemeCTCTokenizer"),VJe=o(" (Wav2Vec2Phoneme model)"),zJe=l(),xs=a("li"),YU=a("strong"),WJe=o("xglm"),QJe=o(" \u2014 "),ck=a("a"),HJe=o("XGLMTokenizer"),UJe=o(" or "),fk=a("a"),JJe=o("XGLMTokenizerFast"),YJe=o(" (XGLM model)"),KJe=l(),Qg=a("li"),KU=a("strong"),ZJe=o("xlm"),eYe=o(" \u2014 "),mk=a("a"),oYe=o("XLMTokenizer"),rYe=o(" (XLM model)"),tYe=l(),Hg=a("li"),ZU=a("strong"),aYe=o("xlm-prophetnet"),nYe=o(" \u2014 "),gk=a("a"),sYe=o("XLMProphetNetTokenizer"),lYe=o(" (XLMProphetNet model)"),iYe=l(),ks=a("li"),eJ=a("strong"),dYe=o("xlm-roberta"),cYe=o(" \u2014 "),hk=a("a"),fYe=o("XLMRobertaTokenizer"),mYe=o(" or "),pk=a("a"),gYe=o("XLMRobertaTokenizerFast"),hYe=o(" (XLM-RoBERTa model)"),pYe=l(),Rs=a("li"),oJ=a("strong"),_Ye=o("xlnet"),uYe=o(" \u2014 "),_k=a("a"),bYe=o("XLNetTokenizer"),vYe=o(" or "),uk=a("a"),TYe=o("XLNetTokenizerFast"),FYe=o(" (XLNet model)"),CYe=l(),rJ=a("p"),MYe=o("Examples:"),EYe=l(),f(VE.$$.fragment),yYe=l(),Ug=a("div"),f(zE.$$.fragment),wYe=l(),tJ=a("p"),AYe=o("Register a new tokenizer in this mapping."),J7e=l(),Ni=a("h2"),Jg=a("a"),aJ=a("span"),f(WE.$$.fragment),LYe=l(),nJ=a("span"),BYe=o("AutoFeatureExtractor"),Y7e=l(),zo=a("div"),f(QE.$$.fragment),xYe=l(),HE=a("p"),kYe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bk=a("a"),RYe=o("AutoFeatureExtractor.from_pretrained()"),SYe=o(" class method."),PYe=l(),UE=a("p"),$Ye=o("This class cannot be instantiated directly using "),sJ=a("code"),IYe=o("__init__()"),DYe=o(" (throws an error)."),jYe=l(),ke=a("div"),f(JE.$$.fragment),NYe=l(),lJ=a("p"),qYe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),GYe=l(),ja=a("p"),OYe=o("The feature extractor class to instantiate is selected based on the "),iJ=a("code"),XYe=o("model_type"),VYe=o(` property of the config object
(either passed as an argument or loaded from `),dJ=a("code"),zYe=o("pretrained_model_name_or_path"),WYe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cJ=a("code"),QYe=o("pretrained_model_name_or_path"),HYe=o(":"),UYe=l(),ae=a("ul"),Yg=a("li"),fJ=a("strong"),JYe=o("beit"),YYe=o(" \u2014 "),vk=a("a"),KYe=o("BeitFeatureExtractor"),ZYe=o(" (BEiT model)"),eKe=l(),Kg=a("li"),mJ=a("strong"),oKe=o("clip"),rKe=o(" \u2014 "),Tk=a("a"),tKe=o("CLIPFeatureExtractor"),aKe=o(" (CLIP model)"),nKe=l(),Zg=a("li"),gJ=a("strong"),sKe=o("convnext"),lKe=o(" \u2014 "),Fk=a("a"),iKe=o("ConvNextFeatureExtractor"),dKe=o(" (ConvNext model)"),cKe=l(),eh=a("li"),hJ=a("strong"),fKe=o("deit"),mKe=o(" \u2014 "),Ck=a("a"),gKe=o("DeiTFeatureExtractor"),hKe=o(" (DeiT model)"),pKe=l(),oh=a("li"),pJ=a("strong"),_Ke=o("detr"),uKe=o(" \u2014 "),Mk=a("a"),bKe=o("DetrFeatureExtractor"),vKe=o(" (DETR model)"),TKe=l(),rh=a("li"),_J=a("strong"),FKe=o("hubert"),CKe=o(" \u2014 "),Ek=a("a"),MKe=o("Wav2Vec2FeatureExtractor"),EKe=o(" (Hubert model)"),yKe=l(),th=a("li"),uJ=a("strong"),wKe=o("layoutlmv2"),AKe=o(" \u2014 "),yk=a("a"),LKe=o("LayoutLMv2FeatureExtractor"),BKe=o(" (LayoutLMv2 model)"),xKe=l(),ah=a("li"),bJ=a("strong"),kKe=o("perceiver"),RKe=o(" \u2014 "),wk=a("a"),SKe=o("PerceiverFeatureExtractor"),PKe=o(" (Perceiver model)"),$Ke=l(),nh=a("li"),vJ=a("strong"),IKe=o("poolformer"),DKe=o(" \u2014 "),Ak=a("a"),jKe=o("PoolFormerFeatureExtractor"),NKe=o(" (PoolFormer model)"),qKe=l(),sh=a("li"),TJ=a("strong"),GKe=o("resnet"),OKe=o(" \u2014 "),Lk=a("a"),XKe=o("ConvNextFeatureExtractor"),VKe=o(" (ResNet model)"),zKe=l(),lh=a("li"),FJ=a("strong"),WKe=o("segformer"),QKe=o(" \u2014 "),Bk=a("a"),HKe=o("SegformerFeatureExtractor"),UKe=o(" (SegFormer model)"),JKe=l(),ih=a("li"),CJ=a("strong"),YKe=o("speech_to_text"),KKe=o(" \u2014 "),xk=a("a"),ZKe=o("Speech2TextFeatureExtractor"),eZe=o(" (Speech2Text model)"),oZe=l(),dh=a("li"),MJ=a("strong"),rZe=o("swin"),tZe=o(" \u2014 "),kk=a("a"),aZe=o("ViTFeatureExtractor"),nZe=o(" (Swin model)"),sZe=l(),ch=a("li"),EJ=a("strong"),lZe=o("vit"),iZe=o(" \u2014 "),Rk=a("a"),dZe=o("ViTFeatureExtractor"),cZe=o(" (ViT model)"),fZe=l(),fh=a("li"),yJ=a("strong"),mZe=o("vit_mae"),gZe=o(" \u2014 "),Sk=a("a"),hZe=o("ViTFeatureExtractor"),pZe=o(" (ViTMAE model)"),_Ze=l(),mh=a("li"),wJ=a("strong"),uZe=o("wav2vec2"),bZe=o(" \u2014 "),Pk=a("a"),vZe=o("Wav2Vec2FeatureExtractor"),TZe=o(" (Wav2Vec2 model)"),FZe=l(),f(gh.$$.fragment),CZe=l(),AJ=a("p"),MZe=o("Examples:"),EZe=l(),f(YE.$$.fragment),yZe=l(),hh=a("div"),f(KE.$$.fragment),wZe=l(),LJ=a("p"),AZe=o("Register a new feature extractor for this class."),K7e=l(),qi=a("h2"),ph=a("a"),BJ=a("span"),f(ZE.$$.fragment),LZe=l(),xJ=a("span"),BZe=o("AutoProcessor"),Z7e=l(),Wo=a("div"),f(e3.$$.fragment),xZe=l(),o3=a("p"),kZe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$k=a("a"),RZe=o("AutoProcessor.from_pretrained()"),SZe=o(" class method."),PZe=l(),r3=a("p"),$Ze=o("This class cannot be instantiated directly using "),kJ=a("code"),IZe=o("__init__()"),DZe=o(" (throws an error)."),jZe=l(),Re=a("div"),f(t3.$$.fragment),NZe=l(),RJ=a("p"),qZe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),GZe=l(),Gi=a("p"),OZe=o("The processor class to instantiate is selected based on the "),SJ=a("code"),XZe=o("model_type"),VZe=o(` property of the config object (either
passed as an argument or loaded from `),PJ=a("code"),zZe=o("pretrained_model_name_or_path"),WZe=o(" if possible):"),QZe=l(),Ae=a("ul"),_h=a("li"),$J=a("strong"),HZe=o("clip"),UZe=o(" \u2014 "),Ik=a("a"),JZe=o("CLIPProcessor"),YZe=o(" (CLIP model)"),KZe=l(),uh=a("li"),IJ=a("strong"),ZZe=o("layoutlmv2"),eeo=o(" \u2014 "),Dk=a("a"),oeo=o("LayoutLMv2Processor"),reo=o(" (LayoutLMv2 model)"),teo=l(),bh=a("li"),DJ=a("strong"),aeo=o("layoutxlm"),neo=o(" \u2014 "),jk=a("a"),seo=o("LayoutXLMProcessor"),leo=o(" (LayoutXLM model)"),ieo=l(),vh=a("li"),jJ=a("strong"),deo=o("speech_to_text"),ceo=o(" \u2014 "),Nk=a("a"),feo=o("Speech2TextProcessor"),meo=o(" (Speech2Text model)"),geo=l(),Th=a("li"),NJ=a("strong"),heo=o("speech_to_text_2"),peo=o(" \u2014 "),qk=a("a"),_eo=o("Speech2Text2Processor"),ueo=o(" (Speech2Text2 model)"),beo=l(),Fh=a("li"),qJ=a("strong"),veo=o("trocr"),Teo=o(" \u2014 "),Gk=a("a"),Feo=o("TrOCRProcessor"),Ceo=o(" (TrOCR model)"),Meo=l(),Ch=a("li"),GJ=a("strong"),Eeo=o("vision-text-dual-encoder"),yeo=o(" \u2014 "),Ok=a("a"),weo=o("VisionTextDualEncoderProcessor"),Aeo=o(" (VisionTextDualEncoder model)"),Leo=l(),Mh=a("li"),OJ=a("strong"),Beo=o("wav2vec2"),xeo=o(" \u2014 "),Xk=a("a"),keo=o("Wav2Vec2Processor"),Reo=o(" (Wav2Vec2 model)"),Seo=l(),f(Eh.$$.fragment),Peo=l(),XJ=a("p"),$eo=o("Examples:"),Ieo=l(),f(a3.$$.fragment),Deo=l(),yh=a("div"),f(n3.$$.fragment),jeo=l(),VJ=a("p"),Neo=o("Register a new processor for this class."),eBe=l(),Oi=a("h2"),wh=a("a"),zJ=a("span"),f(s3.$$.fragment),qeo=l(),WJ=a("span"),Geo=o("AutoModel"),oBe=l(),Qo=a("div"),f(l3.$$.fragment),Oeo=l(),Xi=a("p"),Xeo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QJ=a("code"),Veo=o("from_pretrained()"),zeo=o("class method or the "),HJ=a("code"),Weo=o("from_config()"),Qeo=o(`class
method.`),Heo=l(),i3=a("p"),Ueo=o("This class cannot be instantiated directly using "),UJ=a("code"),Jeo=o("__init__()"),Yeo=o(" (throws an error)."),Keo=l(),qr=a("div"),f(d3.$$.fragment),Zeo=l(),JJ=a("p"),eoo=o("Instantiates one of the base model classes of the library from a configuration."),ooo=l(),Vi=a("p"),roo=o(`Note:
Loading a model from its configuration file does `),YJ=a("strong"),too=o("not"),aoo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("code"),noo=o("from_pretrained()"),soo=o("to load the model weights."),loo=l(),ZJ=a("p"),ioo=o("Examples:"),doo=l(),f(c3.$$.fragment),coo=l(),Se=a("div"),f(f3.$$.fragment),foo=l(),eY=a("p"),moo=o("Instantiate one of the base model classes of the library from a pretrained model."),goo=l(),Na=a("p"),hoo=o("The model class to instantiate is selected based on the "),oY=a("code"),poo=o("model_type"),_oo=o(` property of the config object (either
passed as an argument or loaded from `),rY=a("code"),uoo=o("pretrained_model_name_or_path"),boo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tY=a("code"),voo=o("pretrained_model_name_or_path"),Too=o(":"),Foo=l(),F=a("ul"),Ah=a("li"),aY=a("strong"),Coo=o("albert"),Moo=o(" \u2014 "),Vk=a("a"),Eoo=o("AlbertModel"),yoo=o(" (ALBERT model)"),woo=l(),Lh=a("li"),nY=a("strong"),Aoo=o("bart"),Loo=o(" \u2014 "),zk=a("a"),Boo=o("BartModel"),xoo=o(" (BART model)"),koo=l(),Bh=a("li"),sY=a("strong"),Roo=o("beit"),Soo=o(" \u2014 "),Wk=a("a"),Poo=o("BeitModel"),$oo=o(" (BEiT model)"),Ioo=l(),xh=a("li"),lY=a("strong"),Doo=o("bert"),joo=o(" \u2014 "),Qk=a("a"),Noo=o("BertModel"),qoo=o(" (BERT model)"),Goo=l(),kh=a("li"),iY=a("strong"),Ooo=o("bert-generation"),Xoo=o(" \u2014 "),Hk=a("a"),Voo=o("BertGenerationEncoder"),zoo=o(" (Bert Generation model)"),Woo=l(),Rh=a("li"),dY=a("strong"),Qoo=o("big_bird"),Hoo=o(" \u2014 "),Uk=a("a"),Uoo=o("BigBirdModel"),Joo=o(" (BigBird model)"),Yoo=l(),Sh=a("li"),cY=a("strong"),Koo=o("bigbird_pegasus"),Zoo=o(" \u2014 "),Jk=a("a"),ero=o("BigBirdPegasusModel"),oro=o(" (BigBirdPegasus model)"),rro=l(),Ph=a("li"),fY=a("strong"),tro=o("blenderbot"),aro=o(" \u2014 "),Yk=a("a"),nro=o("BlenderbotModel"),sro=o(" (Blenderbot model)"),lro=l(),$h=a("li"),mY=a("strong"),iro=o("blenderbot-small"),dro=o(" \u2014 "),Kk=a("a"),cro=o("BlenderbotSmallModel"),fro=o(" (BlenderbotSmall model)"),mro=l(),Ih=a("li"),gY=a("strong"),gro=o("camembert"),hro=o(" \u2014 "),Zk=a("a"),pro=o("CamembertModel"),_ro=o(" (CamemBERT model)"),uro=l(),Dh=a("li"),hY=a("strong"),bro=o("canine"),vro=o(" \u2014 "),eR=a("a"),Tro=o("CanineModel"),Fro=o(" (Canine model)"),Cro=l(),jh=a("li"),pY=a("strong"),Mro=o("clip"),Ero=o(" \u2014 "),oR=a("a"),yro=o("CLIPModel"),wro=o(" (CLIP model)"),Aro=l(),Nh=a("li"),_Y=a("strong"),Lro=o("convbert"),Bro=o(" \u2014 "),rR=a("a"),xro=o("ConvBertModel"),kro=o(" (ConvBERT model)"),Rro=l(),qh=a("li"),uY=a("strong"),Sro=o("convnext"),Pro=o(" \u2014 "),tR=a("a"),$ro=o("ConvNextModel"),Iro=o(" (ConvNext model)"),Dro=l(),Gh=a("li"),bY=a("strong"),jro=o("ctrl"),Nro=o(" \u2014 "),aR=a("a"),qro=o("CTRLModel"),Gro=o(" (CTRL model)"),Oro=l(),Oh=a("li"),vY=a("strong"),Xro=o("data2vec-audio"),Vro=o(" \u2014 "),nR=a("a"),zro=o("Data2VecAudioModel"),Wro=o(" (Data2VecAudio model)"),Qro=l(),Xh=a("li"),TY=a("strong"),Hro=o("data2vec-text"),Uro=o(" \u2014 "),sR=a("a"),Jro=o("Data2VecTextModel"),Yro=o(" (Data2VecText model)"),Kro=l(),Vh=a("li"),FY=a("strong"),Zro=o("deberta"),eto=o(" \u2014 "),lR=a("a"),oto=o("DebertaModel"),rto=o(" (DeBERTa model)"),tto=l(),zh=a("li"),CY=a("strong"),ato=o("deberta-v2"),nto=o(" \u2014 "),iR=a("a"),sto=o("DebertaV2Model"),lto=o(" (DeBERTa-v2 model)"),ito=l(),Wh=a("li"),MY=a("strong"),dto=o("deit"),cto=o(" \u2014 "),dR=a("a"),fto=o("DeiTModel"),mto=o(" (DeiT model)"),gto=l(),Qh=a("li"),EY=a("strong"),hto=o("detr"),pto=o(" \u2014 "),cR=a("a"),_to=o("DetrModel"),uto=o(" (DETR model)"),bto=l(),Hh=a("li"),yY=a("strong"),vto=o("distilbert"),Tto=o(" \u2014 "),fR=a("a"),Fto=o("DistilBertModel"),Cto=o(" (DistilBERT model)"),Mto=l(),Uh=a("li"),wY=a("strong"),Eto=o("dpr"),yto=o(" \u2014 "),mR=a("a"),wto=o("DPRQuestionEncoder"),Ato=o(" (DPR model)"),Lto=l(),Jh=a("li"),AY=a("strong"),Bto=o("electra"),xto=o(" \u2014 "),gR=a("a"),kto=o("ElectraModel"),Rto=o(" (ELECTRA model)"),Sto=l(),Yh=a("li"),LY=a("strong"),Pto=o("flaubert"),$to=o(" \u2014 "),hR=a("a"),Ito=o("FlaubertModel"),Dto=o(" (FlauBERT model)"),jto=l(),Kh=a("li"),BY=a("strong"),Nto=o("fnet"),qto=o(" \u2014 "),pR=a("a"),Gto=o("FNetModel"),Oto=o(" (FNet model)"),Xto=l(),Zh=a("li"),xY=a("strong"),Vto=o("fsmt"),zto=o(" \u2014 "),_R=a("a"),Wto=o("FSMTModel"),Qto=o(" (FairSeq Machine-Translation model)"),Hto=l(),Ss=a("li"),kY=a("strong"),Uto=o("funnel"),Jto=o(" \u2014 "),uR=a("a"),Yto=o("FunnelModel"),Kto=o(" or "),bR=a("a"),Zto=o("FunnelBaseModel"),eao=o(" (Funnel Transformer model)"),oao=l(),ep=a("li"),RY=a("strong"),rao=o("gpt2"),tao=o(" \u2014 "),vR=a("a"),aao=o("GPT2Model"),nao=o(" (OpenAI GPT-2 model)"),sao=l(),op=a("li"),SY=a("strong"),lao=o("gpt_neo"),iao=o(" \u2014 "),TR=a("a"),dao=o("GPTNeoModel"),cao=o(" (GPT Neo model)"),fao=l(),rp=a("li"),PY=a("strong"),mao=o("gptj"),gao=o(" \u2014 "),FR=a("a"),hao=o("GPTJModel"),pao=o(" (GPT-J model)"),_ao=l(),tp=a("li"),$Y=a("strong"),uao=o("hubert"),bao=o(" \u2014 "),CR=a("a"),vao=o("HubertModel"),Tao=o(" (Hubert model)"),Fao=l(),ap=a("li"),IY=a("strong"),Cao=o("ibert"),Mao=o(" \u2014 "),MR=a("a"),Eao=o("IBertModel"),yao=o(" (I-BERT model)"),wao=l(),np=a("li"),DY=a("strong"),Aao=o("imagegpt"),Lao=o(" \u2014 "),ER=a("a"),Bao=o("ImageGPTModel"),xao=o(" (ImageGPT model)"),kao=l(),sp=a("li"),jY=a("strong"),Rao=o("layoutlm"),Sao=o(" \u2014 "),yR=a("a"),Pao=o("LayoutLMModel"),$ao=o(" (LayoutLM model)"),Iao=l(),lp=a("li"),NY=a("strong"),Dao=o("layoutlmv2"),jao=o(" \u2014 "),wR=a("a"),Nao=o("LayoutLMv2Model"),qao=o(" (LayoutLMv2 model)"),Gao=l(),ip=a("li"),qY=a("strong"),Oao=o("led"),Xao=o(" \u2014 "),AR=a("a"),Vao=o("LEDModel"),zao=o(" (LED model)"),Wao=l(),dp=a("li"),GY=a("strong"),Qao=o("longformer"),Hao=o(" \u2014 "),LR=a("a"),Uao=o("LongformerModel"),Jao=o(" (Longformer model)"),Yao=l(),cp=a("li"),OY=a("strong"),Kao=o("luke"),Zao=o(" \u2014 "),BR=a("a"),eno=o("LukeModel"),ono=o(" (LUKE model)"),rno=l(),fp=a("li"),XY=a("strong"),tno=o("lxmert"),ano=o(" \u2014 "),xR=a("a"),nno=o("LxmertModel"),sno=o(" (LXMERT model)"),lno=l(),mp=a("li"),VY=a("strong"),ino=o("m2m_100"),dno=o(" \u2014 "),kR=a("a"),cno=o("M2M100Model"),fno=o(" (M2M100 model)"),mno=l(),gp=a("li"),zY=a("strong"),gno=o("marian"),hno=o(" \u2014 "),RR=a("a"),pno=o("MarianModel"),_no=o(" (Marian model)"),uno=l(),hp=a("li"),WY=a("strong"),bno=o("maskformer"),vno=o(" \u2014 "),SR=a("a"),Tno=o("MaskFormerModel"),Fno=o(" (MaskFormer model)"),Cno=l(),pp=a("li"),QY=a("strong"),Mno=o("mbart"),Eno=o(" \u2014 "),PR=a("a"),yno=o("MBartModel"),wno=o(" (mBART model)"),Ano=l(),_p=a("li"),HY=a("strong"),Lno=o("megatron-bert"),Bno=o(" \u2014 "),$R=a("a"),xno=o("MegatronBertModel"),kno=o(" (MegatronBert model)"),Rno=l(),up=a("li"),UY=a("strong"),Sno=o("mobilebert"),Pno=o(" \u2014 "),IR=a("a"),$no=o("MobileBertModel"),Ino=o(" (MobileBERT model)"),Dno=l(),bp=a("li"),JY=a("strong"),jno=o("mpnet"),Nno=o(" \u2014 "),DR=a("a"),qno=o("MPNetModel"),Gno=o(" (MPNet model)"),Ono=l(),vp=a("li"),YY=a("strong"),Xno=o("mt5"),Vno=o(" \u2014 "),jR=a("a"),zno=o("MT5Model"),Wno=o(" (mT5 model)"),Qno=l(),Tp=a("li"),KY=a("strong"),Hno=o("nystromformer"),Uno=o(" \u2014 "),NR=a("a"),Jno=o("NystromformerModel"),Yno=o(" (Nystromformer model)"),Kno=l(),Fp=a("li"),ZY=a("strong"),Zno=o("openai-gpt"),eso=o(" \u2014 "),qR=a("a"),oso=o("OpenAIGPTModel"),rso=o(" (OpenAI GPT model)"),tso=l(),Cp=a("li"),eK=a("strong"),aso=o("pegasus"),nso=o(" \u2014 "),GR=a("a"),sso=o("PegasusModel"),lso=o(" (Pegasus model)"),iso=l(),Mp=a("li"),oK=a("strong"),dso=o("perceiver"),cso=o(" \u2014 "),OR=a("a"),fso=o("PerceiverModel"),mso=o(" (Perceiver model)"),gso=l(),Ep=a("li"),rK=a("strong"),hso=o("plbart"),pso=o(" \u2014 "),XR=a("a"),_so=o("PLBartModel"),uso=o(" (PLBart model)"),bso=l(),yp=a("li"),tK=a("strong"),vso=o("poolformer"),Tso=o(" \u2014 "),VR=a("a"),Fso=o("PoolFormerModel"),Cso=o(" (PoolFormer model)"),Mso=l(),wp=a("li"),aK=a("strong"),Eso=o("prophetnet"),yso=o(" \u2014 "),zR=a("a"),wso=o("ProphetNetModel"),Aso=o(" (ProphetNet model)"),Lso=l(),Ap=a("li"),nK=a("strong"),Bso=o("qdqbert"),xso=o(" \u2014 "),WR=a("a"),kso=o("QDQBertModel"),Rso=o(" (QDQBert model)"),Sso=l(),Lp=a("li"),sK=a("strong"),Pso=o("reformer"),$so=o(" \u2014 "),QR=a("a"),Iso=o("ReformerModel"),Dso=o(" (Reformer model)"),jso=l(),Bp=a("li"),lK=a("strong"),Nso=o("rembert"),qso=o(" \u2014 "),HR=a("a"),Gso=o("RemBertModel"),Oso=o(" (RemBERT model)"),Xso=l(),xp=a("li"),iK=a("strong"),Vso=o("resnet"),zso=o(" \u2014 "),UR=a("a"),Wso=o("ResNetModel"),Qso=o(" (ResNet model)"),Hso=l(),kp=a("li"),dK=a("strong"),Uso=o("retribert"),Jso=o(" \u2014 "),JR=a("a"),Yso=o("RetriBertModel"),Kso=o(" (RetriBERT model)"),Zso=l(),Rp=a("li"),cK=a("strong"),elo=o("roberta"),olo=o(" \u2014 "),YR=a("a"),rlo=o("RobertaModel"),tlo=o(" (RoBERTa model)"),alo=l(),Sp=a("li"),fK=a("strong"),nlo=o("roformer"),slo=o(" \u2014 "),KR=a("a"),llo=o("RoFormerModel"),ilo=o(" (RoFormer model)"),dlo=l(),Pp=a("li"),mK=a("strong"),clo=o("segformer"),flo=o(" \u2014 "),ZR=a("a"),mlo=o("SegformerModel"),glo=o(" (SegFormer model)"),hlo=l(),$p=a("li"),gK=a("strong"),plo=o("sew"),_lo=o(" \u2014 "),eS=a("a"),ulo=o("SEWModel"),blo=o(" (SEW model)"),vlo=l(),Ip=a("li"),hK=a("strong"),Tlo=o("sew-d"),Flo=o(" \u2014 "),oS=a("a"),Clo=o("SEWDModel"),Mlo=o(" (SEW-D model)"),Elo=l(),Dp=a("li"),pK=a("strong"),ylo=o("speech_to_text"),wlo=o(" \u2014 "),rS=a("a"),Alo=o("Speech2TextModel"),Llo=o(" (Speech2Text model)"),Blo=l(),jp=a("li"),_K=a("strong"),xlo=o("splinter"),klo=o(" \u2014 "),tS=a("a"),Rlo=o("SplinterModel"),Slo=o(" (Splinter model)"),Plo=l(),Np=a("li"),uK=a("strong"),$lo=o("squeezebert"),Ilo=o(" \u2014 "),aS=a("a"),Dlo=o("SqueezeBertModel"),jlo=o(" (SqueezeBERT model)"),Nlo=l(),qp=a("li"),bK=a("strong"),qlo=o("swin"),Glo=o(" \u2014 "),nS=a("a"),Olo=o("SwinModel"),Xlo=o(" (Swin model)"),Vlo=l(),Gp=a("li"),vK=a("strong"),zlo=o("t5"),Wlo=o(" \u2014 "),sS=a("a"),Qlo=o("T5Model"),Hlo=o(" (T5 model)"),Ulo=l(),Op=a("li"),TK=a("strong"),Jlo=o("tapas"),Ylo=o(" \u2014 "),lS=a("a"),Klo=o("TapasModel"),Zlo=o(" (TAPAS model)"),eio=l(),Xp=a("li"),FK=a("strong"),oio=o("transfo-xl"),rio=o(" \u2014 "),iS=a("a"),tio=o("TransfoXLModel"),aio=o(" (Transformer-XL model)"),nio=l(),Vp=a("li"),CK=a("strong"),sio=o("unispeech"),lio=o(" \u2014 "),dS=a("a"),iio=o("UniSpeechModel"),dio=o(" (UniSpeech model)"),cio=l(),zp=a("li"),MK=a("strong"),fio=o("unispeech-sat"),mio=o(" \u2014 "),cS=a("a"),gio=o("UniSpeechSatModel"),hio=o(" (UniSpeechSat model)"),pio=l(),Wp=a("li"),EK=a("strong"),_io=o("vilt"),uio=o(" \u2014 "),fS=a("a"),bio=o("ViltModel"),vio=o(" (ViLT model)"),Tio=l(),Qp=a("li"),yK=a("strong"),Fio=o("vision-text-dual-encoder"),Cio=o(" \u2014 "),mS=a("a"),Mio=o("VisionTextDualEncoderModel"),Eio=o(" (VisionTextDualEncoder model)"),yio=l(),Hp=a("li"),wK=a("strong"),wio=o("visual_bert"),Aio=o(" \u2014 "),gS=a("a"),Lio=o("VisualBertModel"),Bio=o(" (VisualBert model)"),xio=l(),Up=a("li"),AK=a("strong"),kio=o("vit"),Rio=o(" \u2014 "),hS=a("a"),Sio=o("ViTModel"),Pio=o(" (ViT model)"),$io=l(),Jp=a("li"),LK=a("strong"),Iio=o("vit_mae"),Dio=o(" \u2014 "),pS=a("a"),jio=o("ViTMAEModel"),Nio=o(" (ViTMAE model)"),qio=l(),Yp=a("li"),BK=a("strong"),Gio=o("wav2vec2"),Oio=o(" \u2014 "),_S=a("a"),Xio=o("Wav2Vec2Model"),Vio=o(" (Wav2Vec2 model)"),zio=l(),Kp=a("li"),xK=a("strong"),Wio=o("wavlm"),Qio=o(" \u2014 "),uS=a("a"),Hio=o("WavLMModel"),Uio=o(" (WavLM model)"),Jio=l(),Zp=a("li"),kK=a("strong"),Yio=o("xglm"),Kio=o(" \u2014 "),bS=a("a"),Zio=o("XGLMModel"),edo=o(" (XGLM model)"),odo=l(),e_=a("li"),RK=a("strong"),rdo=o("xlm"),tdo=o(" \u2014 "),vS=a("a"),ado=o("XLMModel"),ndo=o(" (XLM model)"),sdo=l(),o_=a("li"),SK=a("strong"),ldo=o("xlm-prophetnet"),ido=o(" \u2014 "),TS=a("a"),ddo=o("XLMProphetNetModel"),cdo=o(" (XLMProphetNet model)"),fdo=l(),r_=a("li"),PK=a("strong"),mdo=o("xlm-roberta"),gdo=o(" \u2014 "),FS=a("a"),hdo=o("XLMRobertaModel"),pdo=o(" (XLM-RoBERTa model)"),_do=l(),t_=a("li"),$K=a("strong"),udo=o("xlm-roberta-xl"),bdo=o(" \u2014 "),CS=a("a"),vdo=o("XLMRobertaXLModel"),Tdo=o(" (XLM-RoBERTa-XL model)"),Fdo=l(),a_=a("li"),IK=a("strong"),Cdo=o("xlnet"),Mdo=o(" \u2014 "),MS=a("a"),Edo=o("XLNetModel"),ydo=o(" (XLNet model)"),wdo=l(),n_=a("li"),DK=a("strong"),Ado=o("yoso"),Ldo=o(" \u2014 "),ES=a("a"),Bdo=o("YosoModel"),xdo=o(" (YOSO model)"),kdo=l(),s_=a("p"),Rdo=o("The model is set in evaluation mode by default using "),jK=a("code"),Sdo=o("model.eval()"),Pdo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NK=a("code"),$do=o("model.train()"),Ido=l(),qK=a("p"),Ddo=o("Examples:"),jdo=l(),f(m3.$$.fragment),rBe=l(),zi=a("h2"),l_=a("a"),GK=a("span"),f(g3.$$.fragment),Ndo=l(),OK=a("span"),qdo=o("AutoModelForPreTraining"),tBe=l(),Ho=a("div"),f(h3.$$.fragment),Gdo=l(),Wi=a("p"),Odo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XK=a("code"),Xdo=o("from_pretrained()"),Vdo=o("class method or the "),VK=a("code"),zdo=o("from_config()"),Wdo=o(`class
method.`),Qdo=l(),p3=a("p"),Hdo=o("This class cannot be instantiated directly using "),zK=a("code"),Udo=o("__init__()"),Jdo=o(" (throws an error)."),Ydo=l(),Gr=a("div"),f(_3.$$.fragment),Kdo=l(),WK=a("p"),Zdo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eco=l(),Qi=a("p"),oco=o(`Note:
Loading a model from its configuration file does `),QK=a("strong"),rco=o("not"),tco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("code"),aco=o("from_pretrained()"),nco=o("to load the model weights."),sco=l(),UK=a("p"),lco=o("Examples:"),ico=l(),f(u3.$$.fragment),dco=l(),Pe=a("div"),f(b3.$$.fragment),cco=l(),JK=a("p"),fco=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mco=l(),qa=a("p"),gco=o("The model class to instantiate is selected based on the "),YK=a("code"),hco=o("model_type"),pco=o(` property of the config object (either
passed as an argument or loaded from `),KK=a("code"),_co=o("pretrained_model_name_or_path"),uco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZK=a("code"),bco=o("pretrained_model_name_or_path"),vco=o(":"),Tco=l(),k=a("ul"),i_=a("li"),eZ=a("strong"),Fco=o("albert"),Cco=o(" \u2014 "),yS=a("a"),Mco=o("AlbertForPreTraining"),Eco=o(" (ALBERT model)"),yco=l(),d_=a("li"),oZ=a("strong"),wco=o("bart"),Aco=o(" \u2014 "),wS=a("a"),Lco=o("BartForConditionalGeneration"),Bco=o(" (BART model)"),xco=l(),c_=a("li"),rZ=a("strong"),kco=o("bert"),Rco=o(" \u2014 "),AS=a("a"),Sco=o("BertForPreTraining"),Pco=o(" (BERT model)"),$co=l(),f_=a("li"),tZ=a("strong"),Ico=o("big_bird"),Dco=o(" \u2014 "),LS=a("a"),jco=o("BigBirdForPreTraining"),Nco=o(" (BigBird model)"),qco=l(),m_=a("li"),aZ=a("strong"),Gco=o("camembert"),Oco=o(" \u2014 "),BS=a("a"),Xco=o("CamembertForMaskedLM"),Vco=o(" (CamemBERT model)"),zco=l(),g_=a("li"),nZ=a("strong"),Wco=o("ctrl"),Qco=o(" \u2014 "),xS=a("a"),Hco=o("CTRLLMHeadModel"),Uco=o(" (CTRL model)"),Jco=l(),h_=a("li"),sZ=a("strong"),Yco=o("data2vec-text"),Kco=o(" \u2014 "),kS=a("a"),Zco=o("Data2VecTextForMaskedLM"),efo=o(" (Data2VecText model)"),ofo=l(),p_=a("li"),lZ=a("strong"),rfo=o("deberta"),tfo=o(" \u2014 "),RS=a("a"),afo=o("DebertaForMaskedLM"),nfo=o(" (DeBERTa model)"),sfo=l(),__=a("li"),iZ=a("strong"),lfo=o("deberta-v2"),ifo=o(" \u2014 "),SS=a("a"),dfo=o("DebertaV2ForMaskedLM"),cfo=o(" (DeBERTa-v2 model)"),ffo=l(),u_=a("li"),dZ=a("strong"),mfo=o("distilbert"),gfo=o(" \u2014 "),PS=a("a"),hfo=o("DistilBertForMaskedLM"),pfo=o(" (DistilBERT model)"),_fo=l(),b_=a("li"),cZ=a("strong"),ufo=o("electra"),bfo=o(" \u2014 "),$S=a("a"),vfo=o("ElectraForPreTraining"),Tfo=o(" (ELECTRA model)"),Ffo=l(),v_=a("li"),fZ=a("strong"),Cfo=o("flaubert"),Mfo=o(" \u2014 "),IS=a("a"),Efo=o("FlaubertWithLMHeadModel"),yfo=o(" (FlauBERT model)"),wfo=l(),T_=a("li"),mZ=a("strong"),Afo=o("fnet"),Lfo=o(" \u2014 "),DS=a("a"),Bfo=o("FNetForPreTraining"),xfo=o(" (FNet model)"),kfo=l(),F_=a("li"),gZ=a("strong"),Rfo=o("fsmt"),Sfo=o(" \u2014 "),jS=a("a"),Pfo=o("FSMTForConditionalGeneration"),$fo=o(" (FairSeq Machine-Translation model)"),Ifo=l(),C_=a("li"),hZ=a("strong"),Dfo=o("funnel"),jfo=o(" \u2014 "),NS=a("a"),Nfo=o("FunnelForPreTraining"),qfo=o(" (Funnel Transformer model)"),Gfo=l(),M_=a("li"),pZ=a("strong"),Ofo=o("gpt2"),Xfo=o(" \u2014 "),qS=a("a"),Vfo=o("GPT2LMHeadModel"),zfo=o(" (OpenAI GPT-2 model)"),Wfo=l(),E_=a("li"),_Z=a("strong"),Qfo=o("ibert"),Hfo=o(" \u2014 "),GS=a("a"),Ufo=o("IBertForMaskedLM"),Jfo=o(" (I-BERT model)"),Yfo=l(),y_=a("li"),uZ=a("strong"),Kfo=o("layoutlm"),Zfo=o(" \u2014 "),OS=a("a"),emo=o("LayoutLMForMaskedLM"),omo=o(" (LayoutLM model)"),rmo=l(),w_=a("li"),bZ=a("strong"),tmo=o("longformer"),amo=o(" \u2014 "),XS=a("a"),nmo=o("LongformerForMaskedLM"),smo=o(" (Longformer model)"),lmo=l(),A_=a("li"),vZ=a("strong"),imo=o("lxmert"),dmo=o(" \u2014 "),VS=a("a"),cmo=o("LxmertForPreTraining"),fmo=o(" (LXMERT model)"),mmo=l(),L_=a("li"),TZ=a("strong"),gmo=o("megatron-bert"),hmo=o(" \u2014 "),zS=a("a"),pmo=o("MegatronBertForPreTraining"),_mo=o(" (MegatronBert model)"),umo=l(),B_=a("li"),FZ=a("strong"),bmo=o("mobilebert"),vmo=o(" \u2014 "),WS=a("a"),Tmo=o("MobileBertForPreTraining"),Fmo=o(" (MobileBERT model)"),Cmo=l(),x_=a("li"),CZ=a("strong"),Mmo=o("mpnet"),Emo=o(" \u2014 "),QS=a("a"),ymo=o("MPNetForMaskedLM"),wmo=o(" (MPNet model)"),Amo=l(),k_=a("li"),MZ=a("strong"),Lmo=o("openai-gpt"),Bmo=o(" \u2014 "),HS=a("a"),xmo=o("OpenAIGPTLMHeadModel"),kmo=o(" (OpenAI GPT model)"),Rmo=l(),R_=a("li"),EZ=a("strong"),Smo=o("retribert"),Pmo=o(" \u2014 "),US=a("a"),$mo=o("RetriBertModel"),Imo=o(" (RetriBERT model)"),Dmo=l(),S_=a("li"),yZ=a("strong"),jmo=o("roberta"),Nmo=o(" \u2014 "),JS=a("a"),qmo=o("RobertaForMaskedLM"),Gmo=o(" (RoBERTa model)"),Omo=l(),P_=a("li"),wZ=a("strong"),Xmo=o("squeezebert"),Vmo=o(" \u2014 "),YS=a("a"),zmo=o("SqueezeBertForMaskedLM"),Wmo=o(" (SqueezeBERT model)"),Qmo=l(),$_=a("li"),AZ=a("strong"),Hmo=o("t5"),Umo=o(" \u2014 "),KS=a("a"),Jmo=o("T5ForConditionalGeneration"),Ymo=o(" (T5 model)"),Kmo=l(),I_=a("li"),LZ=a("strong"),Zmo=o("tapas"),ego=o(" \u2014 "),ZS=a("a"),ogo=o("TapasForMaskedLM"),rgo=o(" (TAPAS model)"),tgo=l(),D_=a("li"),BZ=a("strong"),ago=o("transfo-xl"),ngo=o(" \u2014 "),eP=a("a"),sgo=o("TransfoXLLMHeadModel"),lgo=o(" (Transformer-XL model)"),igo=l(),j_=a("li"),xZ=a("strong"),dgo=o("unispeech"),cgo=o(" \u2014 "),oP=a("a"),fgo=o("UniSpeechForPreTraining"),mgo=o(" (UniSpeech model)"),ggo=l(),N_=a("li"),kZ=a("strong"),hgo=o("unispeech-sat"),pgo=o(" \u2014 "),rP=a("a"),_go=o("UniSpeechSatForPreTraining"),ugo=o(" (UniSpeechSat model)"),bgo=l(),q_=a("li"),RZ=a("strong"),vgo=o("visual_bert"),Tgo=o(" \u2014 "),tP=a("a"),Fgo=o("VisualBertForPreTraining"),Cgo=o(" (VisualBert model)"),Mgo=l(),G_=a("li"),SZ=a("strong"),Ego=o("vit_mae"),ygo=o(" \u2014 "),aP=a("a"),wgo=o("ViTMAEForPreTraining"),Ago=o(" (ViTMAE model)"),Lgo=l(),O_=a("li"),PZ=a("strong"),Bgo=o("wav2vec2"),xgo=o(" \u2014 "),nP=a("a"),kgo=o("Wav2Vec2ForPreTraining"),Rgo=o(" (Wav2Vec2 model)"),Sgo=l(),X_=a("li"),$Z=a("strong"),Pgo=o("xlm"),$go=o(" \u2014 "),sP=a("a"),Igo=o("XLMWithLMHeadModel"),Dgo=o(" (XLM model)"),jgo=l(),V_=a("li"),IZ=a("strong"),Ngo=o("xlm-roberta"),qgo=o(" \u2014 "),lP=a("a"),Ggo=o("XLMRobertaForMaskedLM"),Ogo=o(" (XLM-RoBERTa model)"),Xgo=l(),z_=a("li"),DZ=a("strong"),Vgo=o("xlm-roberta-xl"),zgo=o(" \u2014 "),iP=a("a"),Wgo=o("XLMRobertaXLForMaskedLM"),Qgo=o(" (XLM-RoBERTa-XL model)"),Hgo=l(),W_=a("li"),jZ=a("strong"),Ugo=o("xlnet"),Jgo=o(" \u2014 "),dP=a("a"),Ygo=o("XLNetLMHeadModel"),Kgo=o(" (XLNet model)"),Zgo=l(),Q_=a("p"),eho=o("The model is set in evaluation mode by default using "),NZ=a("code"),oho=o("model.eval()"),rho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qZ=a("code"),tho=o("model.train()"),aho=l(),GZ=a("p"),nho=o("Examples:"),sho=l(),f(v3.$$.fragment),aBe=l(),Hi=a("h2"),H_=a("a"),OZ=a("span"),f(T3.$$.fragment),lho=l(),XZ=a("span"),iho=o("AutoModelForCausalLM"),nBe=l(),Uo=a("div"),f(F3.$$.fragment),dho=l(),Ui=a("p"),cho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VZ=a("code"),fho=o("from_pretrained()"),mho=o("class method or the "),zZ=a("code"),gho=o("from_config()"),hho=o(`class
method.`),pho=l(),C3=a("p"),_ho=o("This class cannot be instantiated directly using "),WZ=a("code"),uho=o("__init__()"),bho=o(" (throws an error)."),vho=l(),Or=a("div"),f(M3.$$.fragment),Tho=l(),QZ=a("p"),Fho=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cho=l(),Ji=a("p"),Mho=o(`Note:
Loading a model from its configuration file does `),HZ=a("strong"),Eho=o("not"),yho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=a("code"),who=o("from_pretrained()"),Aho=o("to load the model weights."),Lho=l(),JZ=a("p"),Bho=o("Examples:"),xho=l(),f(E3.$$.fragment),kho=l(),$e=a("div"),f(y3.$$.fragment),Rho=l(),YZ=a("p"),Sho=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pho=l(),Ga=a("p"),$ho=o("The model class to instantiate is selected based on the "),KZ=a("code"),Iho=o("model_type"),Dho=o(` property of the config object (either
passed as an argument or loaded from `),ZZ=a("code"),jho=o("pretrained_model_name_or_path"),Nho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eee=a("code"),qho=o("pretrained_model_name_or_path"),Gho=o(":"),Oho=l(),$=a("ul"),U_=a("li"),oee=a("strong"),Xho=o("bart"),Vho=o(" \u2014 "),cP=a("a"),zho=o("BartForCausalLM"),Who=o(" (BART model)"),Qho=l(),J_=a("li"),ree=a("strong"),Hho=o("bert"),Uho=o(" \u2014 "),fP=a("a"),Jho=o("BertLMHeadModel"),Yho=o(" (BERT model)"),Kho=l(),Y_=a("li"),tee=a("strong"),Zho=o("bert-generation"),epo=o(" \u2014 "),mP=a("a"),opo=o("BertGenerationDecoder"),rpo=o(" (Bert Generation model)"),tpo=l(),K_=a("li"),aee=a("strong"),apo=o("big_bird"),npo=o(" \u2014 "),gP=a("a"),spo=o("BigBirdForCausalLM"),lpo=o(" (BigBird model)"),ipo=l(),Z_=a("li"),nee=a("strong"),dpo=o("bigbird_pegasus"),cpo=o(" \u2014 "),hP=a("a"),fpo=o("BigBirdPegasusForCausalLM"),mpo=o(" (BigBirdPegasus model)"),gpo=l(),eu=a("li"),see=a("strong"),hpo=o("blenderbot"),ppo=o(" \u2014 "),pP=a("a"),_po=o("BlenderbotForCausalLM"),upo=o(" (Blenderbot model)"),bpo=l(),ou=a("li"),lee=a("strong"),vpo=o("blenderbot-small"),Tpo=o(" \u2014 "),_P=a("a"),Fpo=o("BlenderbotSmallForCausalLM"),Cpo=o(" (BlenderbotSmall model)"),Mpo=l(),ru=a("li"),iee=a("strong"),Epo=o("camembert"),ypo=o(" \u2014 "),uP=a("a"),wpo=o("CamembertForCausalLM"),Apo=o(" (CamemBERT model)"),Lpo=l(),tu=a("li"),dee=a("strong"),Bpo=o("ctrl"),xpo=o(" \u2014 "),bP=a("a"),kpo=o("CTRLLMHeadModel"),Rpo=o(" (CTRL model)"),Spo=l(),au=a("li"),cee=a("strong"),Ppo=o("data2vec-text"),$po=o(" \u2014 "),vP=a("a"),Ipo=o("Data2VecTextForCausalLM"),Dpo=o(" (Data2VecText model)"),jpo=l(),nu=a("li"),fee=a("strong"),Npo=o("electra"),qpo=o(" \u2014 "),TP=a("a"),Gpo=o("ElectraForCausalLM"),Opo=o(" (ELECTRA model)"),Xpo=l(),su=a("li"),mee=a("strong"),Vpo=o("gpt2"),zpo=o(" \u2014 "),FP=a("a"),Wpo=o("GPT2LMHeadModel"),Qpo=o(" (OpenAI GPT-2 model)"),Hpo=l(),lu=a("li"),gee=a("strong"),Upo=o("gpt_neo"),Jpo=o(" \u2014 "),CP=a("a"),Ypo=o("GPTNeoForCausalLM"),Kpo=o(" (GPT Neo model)"),Zpo=l(),iu=a("li"),hee=a("strong"),e_o=o("gptj"),o_o=o(" \u2014 "),MP=a("a"),r_o=o("GPTJForCausalLM"),t_o=o(" (GPT-J model)"),a_o=l(),du=a("li"),pee=a("strong"),n_o=o("marian"),s_o=o(" \u2014 "),EP=a("a"),l_o=o("MarianForCausalLM"),i_o=o(" (Marian model)"),d_o=l(),cu=a("li"),_ee=a("strong"),c_o=o("mbart"),f_o=o(" \u2014 "),yP=a("a"),m_o=o("MBartForCausalLM"),g_o=o(" (mBART model)"),h_o=l(),fu=a("li"),uee=a("strong"),p_o=o("megatron-bert"),__o=o(" \u2014 "),wP=a("a"),u_o=o("MegatronBertForCausalLM"),b_o=o(" (MegatronBert model)"),v_o=l(),mu=a("li"),bee=a("strong"),T_o=o("openai-gpt"),F_o=o(" \u2014 "),AP=a("a"),C_o=o("OpenAIGPTLMHeadModel"),M_o=o(" (OpenAI GPT model)"),E_o=l(),gu=a("li"),vee=a("strong"),y_o=o("pegasus"),w_o=o(" \u2014 "),LP=a("a"),A_o=o("PegasusForCausalLM"),L_o=o(" (Pegasus model)"),B_o=l(),hu=a("li"),Tee=a("strong"),x_o=o("plbart"),k_o=o(" \u2014 "),BP=a("a"),R_o=o("PLBartForCausalLM"),S_o=o(" (PLBart model)"),P_o=l(),pu=a("li"),Fee=a("strong"),$_o=o("prophetnet"),I_o=o(" \u2014 "),xP=a("a"),D_o=o("ProphetNetForCausalLM"),j_o=o(" (ProphetNet model)"),N_o=l(),_u=a("li"),Cee=a("strong"),q_o=o("qdqbert"),G_o=o(" \u2014 "),kP=a("a"),O_o=o("QDQBertLMHeadModel"),X_o=o(" (QDQBert model)"),V_o=l(),uu=a("li"),Mee=a("strong"),z_o=o("reformer"),W_o=o(" \u2014 "),RP=a("a"),Q_o=o("ReformerModelWithLMHead"),H_o=o(" (Reformer model)"),U_o=l(),bu=a("li"),Eee=a("strong"),J_o=o("rembert"),Y_o=o(" \u2014 "),SP=a("a"),K_o=o("RemBertForCausalLM"),Z_o=o(" (RemBERT model)"),euo=l(),vu=a("li"),yee=a("strong"),ouo=o("roberta"),ruo=o(" \u2014 "),PP=a("a"),tuo=o("RobertaForCausalLM"),auo=o(" (RoBERTa model)"),nuo=l(),Tu=a("li"),wee=a("strong"),suo=o("roformer"),luo=o(" \u2014 "),$P=a("a"),iuo=o("RoFormerForCausalLM"),duo=o(" (RoFormer model)"),cuo=l(),Fu=a("li"),Aee=a("strong"),fuo=o("speech_to_text_2"),muo=o(" \u2014 "),IP=a("a"),guo=o("Speech2Text2ForCausalLM"),huo=o(" (Speech2Text2 model)"),puo=l(),Cu=a("li"),Lee=a("strong"),_uo=o("transfo-xl"),uuo=o(" \u2014 "),DP=a("a"),buo=o("TransfoXLLMHeadModel"),vuo=o(" (Transformer-XL model)"),Tuo=l(),Mu=a("li"),Bee=a("strong"),Fuo=o("trocr"),Cuo=o(" \u2014 "),jP=a("a"),Muo=o("TrOCRForCausalLM"),Euo=o(" (TrOCR model)"),yuo=l(),Eu=a("li"),xee=a("strong"),wuo=o("xglm"),Auo=o(" \u2014 "),NP=a("a"),Luo=o("XGLMForCausalLM"),Buo=o(" (XGLM model)"),xuo=l(),yu=a("li"),kee=a("strong"),kuo=o("xlm"),Ruo=o(" \u2014 "),qP=a("a"),Suo=o("XLMWithLMHeadModel"),Puo=o(" (XLM model)"),$uo=l(),wu=a("li"),Ree=a("strong"),Iuo=o("xlm-prophetnet"),Duo=o(" \u2014 "),GP=a("a"),juo=o("XLMProphetNetForCausalLM"),Nuo=o(" (XLMProphetNet model)"),quo=l(),Au=a("li"),See=a("strong"),Guo=o("xlm-roberta"),Ouo=o(" \u2014 "),OP=a("a"),Xuo=o("XLMRobertaForCausalLM"),Vuo=o(" (XLM-RoBERTa model)"),zuo=l(),Lu=a("li"),Pee=a("strong"),Wuo=o("xlm-roberta-xl"),Quo=o(" \u2014 "),XP=a("a"),Huo=o("XLMRobertaXLForCausalLM"),Uuo=o(" (XLM-RoBERTa-XL model)"),Juo=l(),Bu=a("li"),$ee=a("strong"),Yuo=o("xlnet"),Kuo=o(" \u2014 "),VP=a("a"),Zuo=o("XLNetLMHeadModel"),e1o=o(" (XLNet model)"),o1o=l(),xu=a("p"),r1o=o("The model is set in evaluation mode by default using "),Iee=a("code"),t1o=o("model.eval()"),a1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dee=a("code"),n1o=o("model.train()"),s1o=l(),jee=a("p"),l1o=o("Examples:"),i1o=l(),f(w3.$$.fragment),sBe=l(),Yi=a("h2"),ku=a("a"),Nee=a("span"),f(A3.$$.fragment),d1o=l(),qee=a("span"),c1o=o("AutoModelForMaskedLM"),lBe=l(),Jo=a("div"),f(L3.$$.fragment),f1o=l(),Ki=a("p"),m1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Gee=a("code"),g1o=o("from_pretrained()"),h1o=o("class method or the "),Oee=a("code"),p1o=o("from_config()"),_1o=o(`class
method.`),u1o=l(),B3=a("p"),b1o=o("This class cannot be instantiated directly using "),Xee=a("code"),v1o=o("__init__()"),T1o=o(" (throws an error)."),F1o=l(),Xr=a("div"),f(x3.$$.fragment),C1o=l(),Vee=a("p"),M1o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),E1o=l(),Zi=a("p"),y1o=o(`Note:
Loading a model from its configuration file does `),zee=a("strong"),w1o=o("not"),A1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=a("code"),L1o=o("from_pretrained()"),B1o=o("to load the model weights."),x1o=l(),Qee=a("p"),k1o=o("Examples:"),R1o=l(),f(k3.$$.fragment),S1o=l(),Ie=a("div"),f(R3.$$.fragment),P1o=l(),Hee=a("p"),$1o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I1o=l(),Oa=a("p"),D1o=o("The model class to instantiate is selected based on the "),Uee=a("code"),j1o=o("model_type"),N1o=o(` property of the config object (either
passed as an argument or loaded from `),Jee=a("code"),q1o=o("pretrained_model_name_or_path"),G1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yee=a("code"),O1o=o("pretrained_model_name_or_path"),X1o=o(":"),V1o=l(),I=a("ul"),Ru=a("li"),Kee=a("strong"),z1o=o("albert"),W1o=o(" \u2014 "),zP=a("a"),Q1o=o("AlbertForMaskedLM"),H1o=o(" (ALBERT model)"),U1o=l(),Su=a("li"),Zee=a("strong"),J1o=o("bart"),Y1o=o(" \u2014 "),WP=a("a"),K1o=o("BartForConditionalGeneration"),Z1o=o(" (BART model)"),e2o=l(),Pu=a("li"),eoe=a("strong"),o2o=o("bert"),r2o=o(" \u2014 "),QP=a("a"),t2o=o("BertForMaskedLM"),a2o=o(" (BERT model)"),n2o=l(),$u=a("li"),ooe=a("strong"),s2o=o("big_bird"),l2o=o(" \u2014 "),HP=a("a"),i2o=o("BigBirdForMaskedLM"),d2o=o(" (BigBird model)"),c2o=l(),Iu=a("li"),roe=a("strong"),f2o=o("camembert"),m2o=o(" \u2014 "),UP=a("a"),g2o=o("CamembertForMaskedLM"),h2o=o(" (CamemBERT model)"),p2o=l(),Du=a("li"),toe=a("strong"),_2o=o("convbert"),u2o=o(" \u2014 "),JP=a("a"),b2o=o("ConvBertForMaskedLM"),v2o=o(" (ConvBERT model)"),T2o=l(),ju=a("li"),aoe=a("strong"),F2o=o("data2vec-text"),C2o=o(" \u2014 "),YP=a("a"),M2o=o("Data2VecTextForMaskedLM"),E2o=o(" (Data2VecText model)"),y2o=l(),Nu=a("li"),noe=a("strong"),w2o=o("deberta"),A2o=o(" \u2014 "),KP=a("a"),L2o=o("DebertaForMaskedLM"),B2o=o(" (DeBERTa model)"),x2o=l(),qu=a("li"),soe=a("strong"),k2o=o("deberta-v2"),R2o=o(" \u2014 "),ZP=a("a"),S2o=o("DebertaV2ForMaskedLM"),P2o=o(" (DeBERTa-v2 model)"),$2o=l(),Gu=a("li"),loe=a("strong"),I2o=o("distilbert"),D2o=o(" \u2014 "),e$=a("a"),j2o=o("DistilBertForMaskedLM"),N2o=o(" (DistilBERT model)"),q2o=l(),Ou=a("li"),ioe=a("strong"),G2o=o("electra"),O2o=o(" \u2014 "),o$=a("a"),X2o=o("ElectraForMaskedLM"),V2o=o(" (ELECTRA model)"),z2o=l(),Xu=a("li"),doe=a("strong"),W2o=o("flaubert"),Q2o=o(" \u2014 "),r$=a("a"),H2o=o("FlaubertWithLMHeadModel"),U2o=o(" (FlauBERT model)"),J2o=l(),Vu=a("li"),coe=a("strong"),Y2o=o("fnet"),K2o=o(" \u2014 "),t$=a("a"),Z2o=o("FNetForMaskedLM"),ebo=o(" (FNet model)"),obo=l(),zu=a("li"),foe=a("strong"),rbo=o("funnel"),tbo=o(" \u2014 "),a$=a("a"),abo=o("FunnelForMaskedLM"),nbo=o(" (Funnel Transformer model)"),sbo=l(),Wu=a("li"),moe=a("strong"),lbo=o("ibert"),ibo=o(" \u2014 "),n$=a("a"),dbo=o("IBertForMaskedLM"),cbo=o(" (I-BERT model)"),fbo=l(),Qu=a("li"),goe=a("strong"),mbo=o("layoutlm"),gbo=o(" \u2014 "),s$=a("a"),hbo=o("LayoutLMForMaskedLM"),pbo=o(" (LayoutLM model)"),_bo=l(),Hu=a("li"),hoe=a("strong"),ubo=o("longformer"),bbo=o(" \u2014 "),l$=a("a"),vbo=o("LongformerForMaskedLM"),Tbo=o(" (Longformer model)"),Fbo=l(),Uu=a("li"),poe=a("strong"),Cbo=o("mbart"),Mbo=o(" \u2014 "),i$=a("a"),Ebo=o("MBartForConditionalGeneration"),ybo=o(" (mBART model)"),wbo=l(),Ju=a("li"),_oe=a("strong"),Abo=o("megatron-bert"),Lbo=o(" \u2014 "),d$=a("a"),Bbo=o("MegatronBertForMaskedLM"),xbo=o(" (MegatronBert model)"),kbo=l(),Yu=a("li"),uoe=a("strong"),Rbo=o("mobilebert"),Sbo=o(" \u2014 "),c$=a("a"),Pbo=o("MobileBertForMaskedLM"),$bo=o(" (MobileBERT model)"),Ibo=l(),Ku=a("li"),boe=a("strong"),Dbo=o("mpnet"),jbo=o(" \u2014 "),f$=a("a"),Nbo=o("MPNetForMaskedLM"),qbo=o(" (MPNet model)"),Gbo=l(),Zu=a("li"),voe=a("strong"),Obo=o("nystromformer"),Xbo=o(" \u2014 "),m$=a("a"),Vbo=o("NystromformerForMaskedLM"),zbo=o(" (Nystromformer model)"),Wbo=l(),e1=a("li"),Toe=a("strong"),Qbo=o("perceiver"),Hbo=o(" \u2014 "),g$=a("a"),Ubo=o("PerceiverForMaskedLM"),Jbo=o(" (Perceiver model)"),Ybo=l(),o1=a("li"),Foe=a("strong"),Kbo=o("qdqbert"),Zbo=o(" \u2014 "),h$=a("a"),e5o=o("QDQBertForMaskedLM"),o5o=o(" (QDQBert model)"),r5o=l(),r1=a("li"),Coe=a("strong"),t5o=o("reformer"),a5o=o(" \u2014 "),p$=a("a"),n5o=o("ReformerForMaskedLM"),s5o=o(" (Reformer model)"),l5o=l(),t1=a("li"),Moe=a("strong"),i5o=o("rembert"),d5o=o(" \u2014 "),_$=a("a"),c5o=o("RemBertForMaskedLM"),f5o=o(" (RemBERT model)"),m5o=l(),a1=a("li"),Eoe=a("strong"),g5o=o("roberta"),h5o=o(" \u2014 "),u$=a("a"),p5o=o("RobertaForMaskedLM"),_5o=o(" (RoBERTa model)"),u5o=l(),n1=a("li"),yoe=a("strong"),b5o=o("roformer"),v5o=o(" \u2014 "),b$=a("a"),T5o=o("RoFormerForMaskedLM"),F5o=o(" (RoFormer model)"),C5o=l(),s1=a("li"),woe=a("strong"),M5o=o("squeezebert"),E5o=o(" \u2014 "),v$=a("a"),y5o=o("SqueezeBertForMaskedLM"),w5o=o(" (SqueezeBERT model)"),A5o=l(),l1=a("li"),Aoe=a("strong"),L5o=o("tapas"),B5o=o(" \u2014 "),T$=a("a"),x5o=o("TapasForMaskedLM"),k5o=o(" (TAPAS model)"),R5o=l(),i1=a("li"),Loe=a("strong"),S5o=o("wav2vec2"),P5o=o(" \u2014 "),Boe=a("code"),$5o=o("Wav2Vec2ForMaskedLM"),I5o=o("(Wav2Vec2 model)"),D5o=l(),d1=a("li"),xoe=a("strong"),j5o=o("xlm"),N5o=o(" \u2014 "),F$=a("a"),q5o=o("XLMWithLMHeadModel"),G5o=o(" (XLM model)"),O5o=l(),c1=a("li"),koe=a("strong"),X5o=o("xlm-roberta"),V5o=o(" \u2014 "),C$=a("a"),z5o=o("XLMRobertaForMaskedLM"),W5o=o(" (XLM-RoBERTa model)"),Q5o=l(),f1=a("li"),Roe=a("strong"),H5o=o("xlm-roberta-xl"),U5o=o(" \u2014 "),M$=a("a"),J5o=o("XLMRobertaXLForMaskedLM"),Y5o=o(" (XLM-RoBERTa-XL model)"),K5o=l(),m1=a("li"),Soe=a("strong"),Z5o=o("yoso"),evo=o(" \u2014 "),E$=a("a"),ovo=o("YosoForMaskedLM"),rvo=o(" (YOSO model)"),tvo=l(),g1=a("p"),avo=o("The model is set in evaluation mode by default using "),Poe=a("code"),nvo=o("model.eval()"),svo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$oe=a("code"),lvo=o("model.train()"),ivo=l(),Ioe=a("p"),dvo=o("Examples:"),cvo=l(),f(S3.$$.fragment),iBe=l(),ed=a("h2"),h1=a("a"),Doe=a("span"),f(P3.$$.fragment),fvo=l(),joe=a("span"),mvo=o("AutoModelForSeq2SeqLM"),dBe=l(),Yo=a("div"),f($3.$$.fragment),gvo=l(),od=a("p"),hvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Noe=a("code"),pvo=o("from_pretrained()"),_vo=o("class method or the "),qoe=a("code"),uvo=o("from_config()"),bvo=o(`class
method.`),vvo=l(),I3=a("p"),Tvo=o("This class cannot be instantiated directly using "),Goe=a("code"),Fvo=o("__init__()"),Cvo=o(" (throws an error)."),Mvo=l(),Vr=a("div"),f(D3.$$.fragment),Evo=l(),Ooe=a("p"),yvo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wvo=l(),rd=a("p"),Avo=o(`Note:
Loading a model from its configuration file does `),Xoe=a("strong"),Lvo=o("not"),Bvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Voe=a("code"),xvo=o("from_pretrained()"),kvo=o("to load the model weights."),Rvo=l(),zoe=a("p"),Svo=o("Examples:"),Pvo=l(),f(j3.$$.fragment),$vo=l(),De=a("div"),f(N3.$$.fragment),Ivo=l(),Woe=a("p"),Dvo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jvo=l(),Xa=a("p"),Nvo=o("The model class to instantiate is selected based on the "),Qoe=a("code"),qvo=o("model_type"),Gvo=o(` property of the config object (either
passed as an argument or loaded from `),Hoe=a("code"),Ovo=o("pretrained_model_name_or_path"),Xvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=a("code"),Vvo=o("pretrained_model_name_or_path"),zvo=o(":"),Wvo=l(),ne=a("ul"),p1=a("li"),Joe=a("strong"),Qvo=o("bart"),Hvo=o(" \u2014 "),y$=a("a"),Uvo=o("BartForConditionalGeneration"),Jvo=o(" (BART model)"),Yvo=l(),_1=a("li"),Yoe=a("strong"),Kvo=o("bigbird_pegasus"),Zvo=o(" \u2014 "),w$=a("a"),eTo=o("BigBirdPegasusForConditionalGeneration"),oTo=o(" (BigBirdPegasus model)"),rTo=l(),u1=a("li"),Koe=a("strong"),tTo=o("blenderbot"),aTo=o(" \u2014 "),A$=a("a"),nTo=o("BlenderbotForConditionalGeneration"),sTo=o(" (Blenderbot model)"),lTo=l(),b1=a("li"),Zoe=a("strong"),iTo=o("blenderbot-small"),dTo=o(" \u2014 "),L$=a("a"),cTo=o("BlenderbotSmallForConditionalGeneration"),fTo=o(" (BlenderbotSmall model)"),mTo=l(),v1=a("li"),ere=a("strong"),gTo=o("encoder-decoder"),hTo=o(" \u2014 "),B$=a("a"),pTo=o("EncoderDecoderModel"),_To=o(" (Encoder decoder model)"),uTo=l(),T1=a("li"),ore=a("strong"),bTo=o("fsmt"),vTo=o(" \u2014 "),x$=a("a"),TTo=o("FSMTForConditionalGeneration"),FTo=o(" (FairSeq Machine-Translation model)"),CTo=l(),F1=a("li"),rre=a("strong"),MTo=o("led"),ETo=o(" \u2014 "),k$=a("a"),yTo=o("LEDForConditionalGeneration"),wTo=o(" (LED model)"),ATo=l(),C1=a("li"),tre=a("strong"),LTo=o("m2m_100"),BTo=o(" \u2014 "),R$=a("a"),xTo=o("M2M100ForConditionalGeneration"),kTo=o(" (M2M100 model)"),RTo=l(),M1=a("li"),are=a("strong"),STo=o("marian"),PTo=o(" \u2014 "),S$=a("a"),$To=o("MarianMTModel"),ITo=o(" (Marian model)"),DTo=l(),E1=a("li"),nre=a("strong"),jTo=o("mbart"),NTo=o(" \u2014 "),P$=a("a"),qTo=o("MBartForConditionalGeneration"),GTo=o(" (mBART model)"),OTo=l(),y1=a("li"),sre=a("strong"),XTo=o("mt5"),VTo=o(" \u2014 "),$$=a("a"),zTo=o("MT5ForConditionalGeneration"),WTo=o(" (mT5 model)"),QTo=l(),w1=a("li"),lre=a("strong"),HTo=o("pegasus"),UTo=o(" \u2014 "),I$=a("a"),JTo=o("PegasusForConditionalGeneration"),YTo=o(" (Pegasus model)"),KTo=l(),A1=a("li"),ire=a("strong"),ZTo=o("plbart"),eFo=o(" \u2014 "),D$=a("a"),oFo=o("PLBartForConditionalGeneration"),rFo=o(" (PLBart model)"),tFo=l(),L1=a("li"),dre=a("strong"),aFo=o("prophetnet"),nFo=o(" \u2014 "),j$=a("a"),sFo=o("ProphetNetForConditionalGeneration"),lFo=o(" (ProphetNet model)"),iFo=l(),B1=a("li"),cre=a("strong"),dFo=o("t5"),cFo=o(" \u2014 "),N$=a("a"),fFo=o("T5ForConditionalGeneration"),mFo=o(" (T5 model)"),gFo=l(),x1=a("li"),fre=a("strong"),hFo=o("xlm-prophetnet"),pFo=o(" \u2014 "),q$=a("a"),_Fo=o("XLMProphetNetForConditionalGeneration"),uFo=o(" (XLMProphetNet model)"),bFo=l(),k1=a("p"),vFo=o("The model is set in evaluation mode by default using "),mre=a("code"),TFo=o("model.eval()"),FFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gre=a("code"),CFo=o("model.train()"),MFo=l(),hre=a("p"),EFo=o("Examples:"),yFo=l(),f(q3.$$.fragment),cBe=l(),td=a("h2"),R1=a("a"),pre=a("span"),f(G3.$$.fragment),wFo=l(),_re=a("span"),AFo=o("AutoModelForSequenceClassification"),fBe=l(),Ko=a("div"),f(O3.$$.fragment),LFo=l(),ad=a("p"),BFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ure=a("code"),xFo=o("from_pretrained()"),kFo=o("class method or the "),bre=a("code"),RFo=o("from_config()"),SFo=o(`class
method.`),PFo=l(),X3=a("p"),$Fo=o("This class cannot be instantiated directly using "),vre=a("code"),IFo=o("__init__()"),DFo=o(" (throws an error)."),jFo=l(),zr=a("div"),f(V3.$$.fragment),NFo=l(),Tre=a("p"),qFo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GFo=l(),nd=a("p"),OFo=o(`Note:
Loading a model from its configuration file does `),Fre=a("strong"),XFo=o("not"),VFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("code"),zFo=o("from_pretrained()"),WFo=o("to load the model weights."),QFo=l(),Mre=a("p"),HFo=o("Examples:"),UFo=l(),f(z3.$$.fragment),JFo=l(),je=a("div"),f(W3.$$.fragment),YFo=l(),Ere=a("p"),KFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZFo=l(),Va=a("p"),e9o=o("The model class to instantiate is selected based on the "),yre=a("code"),o9o=o("model_type"),r9o=o(` property of the config object (either
passed as an argument or loaded from `),wre=a("code"),t9o=o("pretrained_model_name_or_path"),a9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Are=a("code"),n9o=o("pretrained_model_name_or_path"),s9o=o(":"),l9o=l(),A=a("ul"),S1=a("li"),Lre=a("strong"),i9o=o("albert"),d9o=o(" \u2014 "),G$=a("a"),c9o=o("AlbertForSequenceClassification"),f9o=o(" (ALBERT model)"),m9o=l(),P1=a("li"),Bre=a("strong"),g9o=o("bart"),h9o=o(" \u2014 "),O$=a("a"),p9o=o("BartForSequenceClassification"),_9o=o(" (BART model)"),u9o=l(),$1=a("li"),xre=a("strong"),b9o=o("bert"),v9o=o(" \u2014 "),X$=a("a"),T9o=o("BertForSequenceClassification"),F9o=o(" (BERT model)"),C9o=l(),I1=a("li"),kre=a("strong"),M9o=o("big_bird"),E9o=o(" \u2014 "),V$=a("a"),y9o=o("BigBirdForSequenceClassification"),w9o=o(" (BigBird model)"),A9o=l(),D1=a("li"),Rre=a("strong"),L9o=o("bigbird_pegasus"),B9o=o(" \u2014 "),z$=a("a"),x9o=o("BigBirdPegasusForSequenceClassification"),k9o=o(" (BigBirdPegasus model)"),R9o=l(),j1=a("li"),Sre=a("strong"),S9o=o("camembert"),P9o=o(" \u2014 "),W$=a("a"),$9o=o("CamembertForSequenceClassification"),I9o=o(" (CamemBERT model)"),D9o=l(),N1=a("li"),Pre=a("strong"),j9o=o("canine"),N9o=o(" \u2014 "),Q$=a("a"),q9o=o("CanineForSequenceClassification"),G9o=o(" (Canine model)"),O9o=l(),q1=a("li"),$re=a("strong"),X9o=o("convbert"),V9o=o(" \u2014 "),H$=a("a"),z9o=o("ConvBertForSequenceClassification"),W9o=o(" (ConvBERT model)"),Q9o=l(),G1=a("li"),Ire=a("strong"),H9o=o("ctrl"),U9o=o(" \u2014 "),U$=a("a"),J9o=o("CTRLForSequenceClassification"),Y9o=o(" (CTRL model)"),K9o=l(),O1=a("li"),Dre=a("strong"),Z9o=o("data2vec-text"),eCo=o(" \u2014 "),J$=a("a"),oCo=o("Data2VecTextForSequenceClassification"),rCo=o(" (Data2VecText model)"),tCo=l(),X1=a("li"),jre=a("strong"),aCo=o("deberta"),nCo=o(" \u2014 "),Y$=a("a"),sCo=o("DebertaForSequenceClassification"),lCo=o(" (DeBERTa model)"),iCo=l(),V1=a("li"),Nre=a("strong"),dCo=o("deberta-v2"),cCo=o(" \u2014 "),K$=a("a"),fCo=o("DebertaV2ForSequenceClassification"),mCo=o(" (DeBERTa-v2 model)"),gCo=l(),z1=a("li"),qre=a("strong"),hCo=o("distilbert"),pCo=o(" \u2014 "),Z$=a("a"),_Co=o("DistilBertForSequenceClassification"),uCo=o(" (DistilBERT model)"),bCo=l(),W1=a("li"),Gre=a("strong"),vCo=o("electra"),TCo=o(" \u2014 "),eI=a("a"),FCo=o("ElectraForSequenceClassification"),CCo=o(" (ELECTRA model)"),MCo=l(),Q1=a("li"),Ore=a("strong"),ECo=o("flaubert"),yCo=o(" \u2014 "),oI=a("a"),wCo=o("FlaubertForSequenceClassification"),ACo=o(" (FlauBERT model)"),LCo=l(),H1=a("li"),Xre=a("strong"),BCo=o("fnet"),xCo=o(" \u2014 "),rI=a("a"),kCo=o("FNetForSequenceClassification"),RCo=o(" (FNet model)"),SCo=l(),U1=a("li"),Vre=a("strong"),PCo=o("funnel"),$Co=o(" \u2014 "),tI=a("a"),ICo=o("FunnelForSequenceClassification"),DCo=o(" (Funnel Transformer model)"),jCo=l(),J1=a("li"),zre=a("strong"),NCo=o("gpt2"),qCo=o(" \u2014 "),aI=a("a"),GCo=o("GPT2ForSequenceClassification"),OCo=o(" (OpenAI GPT-2 model)"),XCo=l(),Y1=a("li"),Wre=a("strong"),VCo=o("gpt_neo"),zCo=o(" \u2014 "),nI=a("a"),WCo=o("GPTNeoForSequenceClassification"),QCo=o(" (GPT Neo model)"),HCo=l(),K1=a("li"),Qre=a("strong"),UCo=o("gptj"),JCo=o(" \u2014 "),sI=a("a"),YCo=o("GPTJForSequenceClassification"),KCo=o(" (GPT-J model)"),ZCo=l(),Z1=a("li"),Hre=a("strong"),e4o=o("ibert"),o4o=o(" \u2014 "),lI=a("a"),r4o=o("IBertForSequenceClassification"),t4o=o(" (I-BERT model)"),a4o=l(),e2=a("li"),Ure=a("strong"),n4o=o("layoutlm"),s4o=o(" \u2014 "),iI=a("a"),l4o=o("LayoutLMForSequenceClassification"),i4o=o(" (LayoutLM model)"),d4o=l(),o2=a("li"),Jre=a("strong"),c4o=o("layoutlmv2"),f4o=o(" \u2014 "),dI=a("a"),m4o=o("LayoutLMv2ForSequenceClassification"),g4o=o(" (LayoutLMv2 model)"),h4o=l(),r2=a("li"),Yre=a("strong"),p4o=o("led"),_4o=o(" \u2014 "),cI=a("a"),u4o=o("LEDForSequenceClassification"),b4o=o(" (LED model)"),v4o=l(),t2=a("li"),Kre=a("strong"),T4o=o("longformer"),F4o=o(" \u2014 "),fI=a("a"),C4o=o("LongformerForSequenceClassification"),M4o=o(" (Longformer model)"),E4o=l(),a2=a("li"),Zre=a("strong"),y4o=o("mbart"),w4o=o(" \u2014 "),mI=a("a"),A4o=o("MBartForSequenceClassification"),L4o=o(" (mBART model)"),B4o=l(),n2=a("li"),ete=a("strong"),x4o=o("megatron-bert"),k4o=o(" \u2014 "),gI=a("a"),R4o=o("MegatronBertForSequenceClassification"),S4o=o(" (MegatronBert model)"),P4o=l(),s2=a("li"),ote=a("strong"),$4o=o("mobilebert"),I4o=o(" \u2014 "),hI=a("a"),D4o=o("MobileBertForSequenceClassification"),j4o=o(" (MobileBERT model)"),N4o=l(),l2=a("li"),rte=a("strong"),q4o=o("mpnet"),G4o=o(" \u2014 "),pI=a("a"),O4o=o("MPNetForSequenceClassification"),X4o=o(" (MPNet model)"),V4o=l(),i2=a("li"),tte=a("strong"),z4o=o("nystromformer"),W4o=o(" \u2014 "),_I=a("a"),Q4o=o("NystromformerForSequenceClassification"),H4o=o(" (Nystromformer model)"),U4o=l(),d2=a("li"),ate=a("strong"),J4o=o("openai-gpt"),Y4o=o(" \u2014 "),uI=a("a"),K4o=o("OpenAIGPTForSequenceClassification"),Z4o=o(" (OpenAI GPT model)"),eMo=l(),c2=a("li"),nte=a("strong"),oMo=o("perceiver"),rMo=o(" \u2014 "),bI=a("a"),tMo=o("PerceiverForSequenceClassification"),aMo=o(" (Perceiver model)"),nMo=l(),f2=a("li"),ste=a("strong"),sMo=o("plbart"),lMo=o(" \u2014 "),vI=a("a"),iMo=o("PLBartForSequenceClassification"),dMo=o(" (PLBart model)"),cMo=l(),m2=a("li"),lte=a("strong"),fMo=o("qdqbert"),mMo=o(" \u2014 "),TI=a("a"),gMo=o("QDQBertForSequenceClassification"),hMo=o(" (QDQBert model)"),pMo=l(),g2=a("li"),ite=a("strong"),_Mo=o("reformer"),uMo=o(" \u2014 "),FI=a("a"),bMo=o("ReformerForSequenceClassification"),vMo=o(" (Reformer model)"),TMo=l(),h2=a("li"),dte=a("strong"),FMo=o("rembert"),CMo=o(" \u2014 "),CI=a("a"),MMo=o("RemBertForSequenceClassification"),EMo=o(" (RemBERT model)"),yMo=l(),p2=a("li"),cte=a("strong"),wMo=o("roberta"),AMo=o(" \u2014 "),MI=a("a"),LMo=o("RobertaForSequenceClassification"),BMo=o(" (RoBERTa model)"),xMo=l(),_2=a("li"),fte=a("strong"),kMo=o("roformer"),RMo=o(" \u2014 "),EI=a("a"),SMo=o("RoFormerForSequenceClassification"),PMo=o(" (RoFormer model)"),$Mo=l(),u2=a("li"),mte=a("strong"),IMo=o("squeezebert"),DMo=o(" \u2014 "),yI=a("a"),jMo=o("SqueezeBertForSequenceClassification"),NMo=o(" (SqueezeBERT model)"),qMo=l(),b2=a("li"),gte=a("strong"),GMo=o("tapas"),OMo=o(" \u2014 "),wI=a("a"),XMo=o("TapasForSequenceClassification"),VMo=o(" (TAPAS model)"),zMo=l(),v2=a("li"),hte=a("strong"),WMo=o("transfo-xl"),QMo=o(" \u2014 "),AI=a("a"),HMo=o("TransfoXLForSequenceClassification"),UMo=o(" (Transformer-XL model)"),JMo=l(),T2=a("li"),pte=a("strong"),YMo=o("xlm"),KMo=o(" \u2014 "),LI=a("a"),ZMo=o("XLMForSequenceClassification"),eEo=o(" (XLM model)"),oEo=l(),F2=a("li"),_te=a("strong"),rEo=o("xlm-roberta"),tEo=o(" \u2014 "),BI=a("a"),aEo=o("XLMRobertaForSequenceClassification"),nEo=o(" (XLM-RoBERTa model)"),sEo=l(),C2=a("li"),ute=a("strong"),lEo=o("xlm-roberta-xl"),iEo=o(" \u2014 "),xI=a("a"),dEo=o("XLMRobertaXLForSequenceClassification"),cEo=o(" (XLM-RoBERTa-XL model)"),fEo=l(),M2=a("li"),bte=a("strong"),mEo=o("xlnet"),gEo=o(" \u2014 "),kI=a("a"),hEo=o("XLNetForSequenceClassification"),pEo=o(" (XLNet model)"),_Eo=l(),E2=a("li"),vte=a("strong"),uEo=o("yoso"),bEo=o(" \u2014 "),RI=a("a"),vEo=o("YosoForSequenceClassification"),TEo=o(" (YOSO model)"),FEo=l(),y2=a("p"),CEo=o("The model is set in evaluation mode by default using "),Tte=a("code"),MEo=o("model.eval()"),EEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fte=a("code"),yEo=o("model.train()"),wEo=l(),Cte=a("p"),AEo=o("Examples:"),LEo=l(),f(Q3.$$.fragment),mBe=l(),sd=a("h2"),w2=a("a"),Mte=a("span"),f(H3.$$.fragment),BEo=l(),Ete=a("span"),xEo=o("AutoModelForMultipleChoice"),gBe=l(),Zo=a("div"),f(U3.$$.fragment),kEo=l(),ld=a("p"),REo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yte=a("code"),SEo=o("from_pretrained()"),PEo=o("class method or the "),wte=a("code"),$Eo=o("from_config()"),IEo=o(`class
method.`),DEo=l(),J3=a("p"),jEo=o("This class cannot be instantiated directly using "),Ate=a("code"),NEo=o("__init__()"),qEo=o(" (throws an error)."),GEo=l(),Wr=a("div"),f(Y3.$$.fragment),OEo=l(),Lte=a("p"),XEo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),VEo=l(),id=a("p"),zEo=o(`Note:
Loading a model from its configuration file does `),Bte=a("strong"),WEo=o("not"),QEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xte=a("code"),HEo=o("from_pretrained()"),UEo=o("to load the model weights."),JEo=l(),kte=a("p"),YEo=o("Examples:"),KEo=l(),f(K3.$$.fragment),ZEo=l(),Ne=a("div"),f(Z3.$$.fragment),e3o=l(),Rte=a("p"),o3o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r3o=l(),za=a("p"),t3o=o("The model class to instantiate is selected based on the "),Ste=a("code"),a3o=o("model_type"),n3o=o(` property of the config object (either
passed as an argument or loaded from `),Pte=a("code"),s3o=o("pretrained_model_name_or_path"),l3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$te=a("code"),i3o=o("pretrained_model_name_or_path"),d3o=o(":"),c3o=l(),G=a("ul"),A2=a("li"),Ite=a("strong"),f3o=o("albert"),m3o=o(" \u2014 "),SI=a("a"),g3o=o("AlbertForMultipleChoice"),h3o=o(" (ALBERT model)"),p3o=l(),L2=a("li"),Dte=a("strong"),_3o=o("bert"),u3o=o(" \u2014 "),PI=a("a"),b3o=o("BertForMultipleChoice"),v3o=o(" (BERT model)"),T3o=l(),B2=a("li"),jte=a("strong"),F3o=o("big_bird"),C3o=o(" \u2014 "),$I=a("a"),M3o=o("BigBirdForMultipleChoice"),E3o=o(" (BigBird model)"),y3o=l(),x2=a("li"),Nte=a("strong"),w3o=o("camembert"),A3o=o(" \u2014 "),II=a("a"),L3o=o("CamembertForMultipleChoice"),B3o=o(" (CamemBERT model)"),x3o=l(),k2=a("li"),qte=a("strong"),k3o=o("canine"),R3o=o(" \u2014 "),DI=a("a"),S3o=o("CanineForMultipleChoice"),P3o=o(" (Canine model)"),$3o=l(),R2=a("li"),Gte=a("strong"),I3o=o("convbert"),D3o=o(" \u2014 "),jI=a("a"),j3o=o("ConvBertForMultipleChoice"),N3o=o(" (ConvBERT model)"),q3o=l(),S2=a("li"),Ote=a("strong"),G3o=o("data2vec-text"),O3o=o(" \u2014 "),NI=a("a"),X3o=o("Data2VecTextForMultipleChoice"),V3o=o(" (Data2VecText model)"),z3o=l(),P2=a("li"),Xte=a("strong"),W3o=o("distilbert"),Q3o=o(" \u2014 "),qI=a("a"),H3o=o("DistilBertForMultipleChoice"),U3o=o(" (DistilBERT model)"),J3o=l(),$2=a("li"),Vte=a("strong"),Y3o=o("electra"),K3o=o(" \u2014 "),GI=a("a"),Z3o=o("ElectraForMultipleChoice"),eyo=o(" (ELECTRA model)"),oyo=l(),I2=a("li"),zte=a("strong"),ryo=o("flaubert"),tyo=o(" \u2014 "),OI=a("a"),ayo=o("FlaubertForMultipleChoice"),nyo=o(" (FlauBERT model)"),syo=l(),D2=a("li"),Wte=a("strong"),lyo=o("fnet"),iyo=o(" \u2014 "),XI=a("a"),dyo=o("FNetForMultipleChoice"),cyo=o(" (FNet model)"),fyo=l(),j2=a("li"),Qte=a("strong"),myo=o("funnel"),gyo=o(" \u2014 "),VI=a("a"),hyo=o("FunnelForMultipleChoice"),pyo=o(" (Funnel Transformer model)"),_yo=l(),N2=a("li"),Hte=a("strong"),uyo=o("ibert"),byo=o(" \u2014 "),zI=a("a"),vyo=o("IBertForMultipleChoice"),Tyo=o(" (I-BERT model)"),Fyo=l(),q2=a("li"),Ute=a("strong"),Cyo=o("longformer"),Myo=o(" \u2014 "),WI=a("a"),Eyo=o("LongformerForMultipleChoice"),yyo=o(" (Longformer model)"),wyo=l(),G2=a("li"),Jte=a("strong"),Ayo=o("megatron-bert"),Lyo=o(" \u2014 "),QI=a("a"),Byo=o("MegatronBertForMultipleChoice"),xyo=o(" (MegatronBert model)"),kyo=l(),O2=a("li"),Yte=a("strong"),Ryo=o("mobilebert"),Syo=o(" \u2014 "),HI=a("a"),Pyo=o("MobileBertForMultipleChoice"),$yo=o(" (MobileBERT model)"),Iyo=l(),X2=a("li"),Kte=a("strong"),Dyo=o("mpnet"),jyo=o(" \u2014 "),UI=a("a"),Nyo=o("MPNetForMultipleChoice"),qyo=o(" (MPNet model)"),Gyo=l(),V2=a("li"),Zte=a("strong"),Oyo=o("nystromformer"),Xyo=o(" \u2014 "),JI=a("a"),Vyo=o("NystromformerForMultipleChoice"),zyo=o(" (Nystromformer model)"),Wyo=l(),z2=a("li"),eae=a("strong"),Qyo=o("qdqbert"),Hyo=o(" \u2014 "),YI=a("a"),Uyo=o("QDQBertForMultipleChoice"),Jyo=o(" (QDQBert model)"),Yyo=l(),W2=a("li"),oae=a("strong"),Kyo=o("rembert"),Zyo=o(" \u2014 "),KI=a("a"),ewo=o("RemBertForMultipleChoice"),owo=o(" (RemBERT model)"),rwo=l(),Q2=a("li"),rae=a("strong"),two=o("roberta"),awo=o(" \u2014 "),ZI=a("a"),nwo=o("RobertaForMultipleChoice"),swo=o(" (RoBERTa model)"),lwo=l(),H2=a("li"),tae=a("strong"),iwo=o("roformer"),dwo=o(" \u2014 "),eD=a("a"),cwo=o("RoFormerForMultipleChoice"),fwo=o(" (RoFormer model)"),mwo=l(),U2=a("li"),aae=a("strong"),gwo=o("squeezebert"),hwo=o(" \u2014 "),oD=a("a"),pwo=o("SqueezeBertForMultipleChoice"),_wo=o(" (SqueezeBERT model)"),uwo=l(),J2=a("li"),nae=a("strong"),bwo=o("xlm"),vwo=o(" \u2014 "),rD=a("a"),Two=o("XLMForMultipleChoice"),Fwo=o(" (XLM model)"),Cwo=l(),Y2=a("li"),sae=a("strong"),Mwo=o("xlm-roberta"),Ewo=o(" \u2014 "),tD=a("a"),ywo=o("XLMRobertaForMultipleChoice"),wwo=o(" (XLM-RoBERTa model)"),Awo=l(),K2=a("li"),lae=a("strong"),Lwo=o("xlm-roberta-xl"),Bwo=o(" \u2014 "),aD=a("a"),xwo=o("XLMRobertaXLForMultipleChoice"),kwo=o(" (XLM-RoBERTa-XL model)"),Rwo=l(),Z2=a("li"),iae=a("strong"),Swo=o("xlnet"),Pwo=o(" \u2014 "),nD=a("a"),$wo=o("XLNetForMultipleChoice"),Iwo=o(" (XLNet model)"),Dwo=l(),eb=a("li"),dae=a("strong"),jwo=o("yoso"),Nwo=o(" \u2014 "),sD=a("a"),qwo=o("YosoForMultipleChoice"),Gwo=o(" (YOSO model)"),Owo=l(),ob=a("p"),Xwo=o("The model is set in evaluation mode by default using "),cae=a("code"),Vwo=o("model.eval()"),zwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fae=a("code"),Wwo=o("model.train()"),Qwo=l(),mae=a("p"),Hwo=o("Examples:"),Uwo=l(),f(ey.$$.fragment),hBe=l(),dd=a("h2"),rb=a("a"),gae=a("span"),f(oy.$$.fragment),Jwo=l(),hae=a("span"),Ywo=o("AutoModelForNextSentencePrediction"),pBe=l(),er=a("div"),f(ry.$$.fragment),Kwo=l(),cd=a("p"),Zwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pae=a("code"),e6o=o("from_pretrained()"),o6o=o("class method or the "),_ae=a("code"),r6o=o("from_config()"),t6o=o(`class
method.`),a6o=l(),ty=a("p"),n6o=o("This class cannot be instantiated directly using "),uae=a("code"),s6o=o("__init__()"),l6o=o(" (throws an error)."),i6o=l(),Qr=a("div"),f(ay.$$.fragment),d6o=l(),bae=a("p"),c6o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),f6o=l(),fd=a("p"),m6o=o(`Note:
Loading a model from its configuration file does `),vae=a("strong"),g6o=o("not"),h6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tae=a("code"),p6o=o("from_pretrained()"),_6o=o("to load the model weights."),u6o=l(),Fae=a("p"),b6o=o("Examples:"),v6o=l(),f(ny.$$.fragment),T6o=l(),qe=a("div"),f(sy.$$.fragment),F6o=l(),Cae=a("p"),C6o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M6o=l(),Wa=a("p"),E6o=o("The model class to instantiate is selected based on the "),Mae=a("code"),y6o=o("model_type"),w6o=o(` property of the config object (either
passed as an argument or loaded from `),Eae=a("code"),A6o=o("pretrained_model_name_or_path"),L6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yae=a("code"),B6o=o("pretrained_model_name_or_path"),x6o=o(":"),k6o=l(),na=a("ul"),tb=a("li"),wae=a("strong"),R6o=o("bert"),S6o=o(" \u2014 "),lD=a("a"),P6o=o("BertForNextSentencePrediction"),$6o=o(" (BERT model)"),I6o=l(),ab=a("li"),Aae=a("strong"),D6o=o("fnet"),j6o=o(" \u2014 "),iD=a("a"),N6o=o("FNetForNextSentencePrediction"),q6o=o(" (FNet model)"),G6o=l(),nb=a("li"),Lae=a("strong"),O6o=o("megatron-bert"),X6o=o(" \u2014 "),dD=a("a"),V6o=o("MegatronBertForNextSentencePrediction"),z6o=o(" (MegatronBert model)"),W6o=l(),sb=a("li"),Bae=a("strong"),Q6o=o("mobilebert"),H6o=o(" \u2014 "),cD=a("a"),U6o=o("MobileBertForNextSentencePrediction"),J6o=o(" (MobileBERT model)"),Y6o=l(),lb=a("li"),xae=a("strong"),K6o=o("qdqbert"),Z6o=o(" \u2014 "),fD=a("a"),eAo=o("QDQBertForNextSentencePrediction"),oAo=o(" (QDQBert model)"),rAo=l(),ib=a("p"),tAo=o("The model is set in evaluation mode by default using "),kae=a("code"),aAo=o("model.eval()"),nAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rae=a("code"),sAo=o("model.train()"),lAo=l(),Sae=a("p"),iAo=o("Examples:"),dAo=l(),f(ly.$$.fragment),_Be=l(),md=a("h2"),db=a("a"),Pae=a("span"),f(iy.$$.fragment),cAo=l(),$ae=a("span"),fAo=o("AutoModelForTokenClassification"),uBe=l(),or=a("div"),f(dy.$$.fragment),mAo=l(),gd=a("p"),gAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Iae=a("code"),hAo=o("from_pretrained()"),pAo=o("class method or the "),Dae=a("code"),_Ao=o("from_config()"),uAo=o(`class
method.`),bAo=l(),cy=a("p"),vAo=o("This class cannot be instantiated directly using "),jae=a("code"),TAo=o("__init__()"),FAo=o(" (throws an error)."),CAo=l(),Hr=a("div"),f(fy.$$.fragment),MAo=l(),Nae=a("p"),EAo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yAo=l(),hd=a("p"),wAo=o(`Note:
Loading a model from its configuration file does `),qae=a("strong"),AAo=o("not"),LAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=a("code"),BAo=o("from_pretrained()"),xAo=o("to load the model weights."),kAo=l(),Oae=a("p"),RAo=o("Examples:"),SAo=l(),f(my.$$.fragment),PAo=l(),Ge=a("div"),f(gy.$$.fragment),$Ao=l(),Xae=a("p"),IAo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),DAo=l(),Qa=a("p"),jAo=o("The model class to instantiate is selected based on the "),Vae=a("code"),NAo=o("model_type"),qAo=o(` property of the config object (either
passed as an argument or loaded from `),zae=a("code"),GAo=o("pretrained_model_name_or_path"),OAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wae=a("code"),XAo=o("pretrained_model_name_or_path"),VAo=o(":"),zAo=l(),N=a("ul"),cb=a("li"),Qae=a("strong"),WAo=o("albert"),QAo=o(" \u2014 "),mD=a("a"),HAo=o("AlbertForTokenClassification"),UAo=o(" (ALBERT model)"),JAo=l(),fb=a("li"),Hae=a("strong"),YAo=o("bert"),KAo=o(" \u2014 "),gD=a("a"),ZAo=o("BertForTokenClassification"),e0o=o(" (BERT model)"),o0o=l(),mb=a("li"),Uae=a("strong"),r0o=o("big_bird"),t0o=o(" \u2014 "),hD=a("a"),a0o=o("BigBirdForTokenClassification"),n0o=o(" (BigBird model)"),s0o=l(),gb=a("li"),Jae=a("strong"),l0o=o("camembert"),i0o=o(" \u2014 "),pD=a("a"),d0o=o("CamembertForTokenClassification"),c0o=o(" (CamemBERT model)"),f0o=l(),hb=a("li"),Yae=a("strong"),m0o=o("canine"),g0o=o(" \u2014 "),_D=a("a"),h0o=o("CanineForTokenClassification"),p0o=o(" (Canine model)"),_0o=l(),pb=a("li"),Kae=a("strong"),u0o=o("convbert"),b0o=o(" \u2014 "),uD=a("a"),v0o=o("ConvBertForTokenClassification"),T0o=o(" (ConvBERT model)"),F0o=l(),_b=a("li"),Zae=a("strong"),C0o=o("data2vec-text"),M0o=o(" \u2014 "),bD=a("a"),E0o=o("Data2VecTextForTokenClassification"),y0o=o(" (Data2VecText model)"),w0o=l(),ub=a("li"),ene=a("strong"),A0o=o("deberta"),L0o=o(" \u2014 "),vD=a("a"),B0o=o("DebertaForTokenClassification"),x0o=o(" (DeBERTa model)"),k0o=l(),bb=a("li"),one=a("strong"),R0o=o("deberta-v2"),S0o=o(" \u2014 "),TD=a("a"),P0o=o("DebertaV2ForTokenClassification"),$0o=o(" (DeBERTa-v2 model)"),I0o=l(),vb=a("li"),rne=a("strong"),D0o=o("distilbert"),j0o=o(" \u2014 "),FD=a("a"),N0o=o("DistilBertForTokenClassification"),q0o=o(" (DistilBERT model)"),G0o=l(),Tb=a("li"),tne=a("strong"),O0o=o("electra"),X0o=o(" \u2014 "),CD=a("a"),V0o=o("ElectraForTokenClassification"),z0o=o(" (ELECTRA model)"),W0o=l(),Fb=a("li"),ane=a("strong"),Q0o=o("flaubert"),H0o=o(" \u2014 "),MD=a("a"),U0o=o("FlaubertForTokenClassification"),J0o=o(" (FlauBERT model)"),Y0o=l(),Cb=a("li"),nne=a("strong"),K0o=o("fnet"),Z0o=o(" \u2014 "),ED=a("a"),eLo=o("FNetForTokenClassification"),oLo=o(" (FNet model)"),rLo=l(),Mb=a("li"),sne=a("strong"),tLo=o("funnel"),aLo=o(" \u2014 "),yD=a("a"),nLo=o("FunnelForTokenClassification"),sLo=o(" (Funnel Transformer model)"),lLo=l(),Eb=a("li"),lne=a("strong"),iLo=o("gpt2"),dLo=o(" \u2014 "),wD=a("a"),cLo=o("GPT2ForTokenClassification"),fLo=o(" (OpenAI GPT-2 model)"),mLo=l(),yb=a("li"),ine=a("strong"),gLo=o("ibert"),hLo=o(" \u2014 "),AD=a("a"),pLo=o("IBertForTokenClassification"),_Lo=o(" (I-BERT model)"),uLo=l(),wb=a("li"),dne=a("strong"),bLo=o("layoutlm"),vLo=o(" \u2014 "),LD=a("a"),TLo=o("LayoutLMForTokenClassification"),FLo=o(" (LayoutLM model)"),CLo=l(),Ab=a("li"),cne=a("strong"),MLo=o("layoutlmv2"),ELo=o(" \u2014 "),BD=a("a"),yLo=o("LayoutLMv2ForTokenClassification"),wLo=o(" (LayoutLMv2 model)"),ALo=l(),Lb=a("li"),fne=a("strong"),LLo=o("longformer"),BLo=o(" \u2014 "),xD=a("a"),xLo=o("LongformerForTokenClassification"),kLo=o(" (Longformer model)"),RLo=l(),Bb=a("li"),mne=a("strong"),SLo=o("megatron-bert"),PLo=o(" \u2014 "),kD=a("a"),$Lo=o("MegatronBertForTokenClassification"),ILo=o(" (MegatronBert model)"),DLo=l(),xb=a("li"),gne=a("strong"),jLo=o("mobilebert"),NLo=o(" \u2014 "),RD=a("a"),qLo=o("MobileBertForTokenClassification"),GLo=o(" (MobileBERT model)"),OLo=l(),kb=a("li"),hne=a("strong"),XLo=o("mpnet"),VLo=o(" \u2014 "),SD=a("a"),zLo=o("MPNetForTokenClassification"),WLo=o(" (MPNet model)"),QLo=l(),Rb=a("li"),pne=a("strong"),HLo=o("nystromformer"),ULo=o(" \u2014 "),PD=a("a"),JLo=o("NystromformerForTokenClassification"),YLo=o(" (Nystromformer model)"),KLo=l(),Sb=a("li"),_ne=a("strong"),ZLo=o("qdqbert"),e8o=o(" \u2014 "),$D=a("a"),o8o=o("QDQBertForTokenClassification"),r8o=o(" (QDQBert model)"),t8o=l(),Pb=a("li"),une=a("strong"),a8o=o("rembert"),n8o=o(" \u2014 "),ID=a("a"),s8o=o("RemBertForTokenClassification"),l8o=o(" (RemBERT model)"),i8o=l(),$b=a("li"),bne=a("strong"),d8o=o("roberta"),c8o=o(" \u2014 "),DD=a("a"),f8o=o("RobertaForTokenClassification"),m8o=o(" (RoBERTa model)"),g8o=l(),Ib=a("li"),vne=a("strong"),h8o=o("roformer"),p8o=o(" \u2014 "),jD=a("a"),_8o=o("RoFormerForTokenClassification"),u8o=o(" (RoFormer model)"),b8o=l(),Db=a("li"),Tne=a("strong"),v8o=o("squeezebert"),T8o=o(" \u2014 "),ND=a("a"),F8o=o("SqueezeBertForTokenClassification"),C8o=o(" (SqueezeBERT model)"),M8o=l(),jb=a("li"),Fne=a("strong"),E8o=o("xlm"),y8o=o(" \u2014 "),qD=a("a"),w8o=o("XLMForTokenClassification"),A8o=o(" (XLM model)"),L8o=l(),Nb=a("li"),Cne=a("strong"),B8o=o("xlm-roberta"),x8o=o(" \u2014 "),GD=a("a"),k8o=o("XLMRobertaForTokenClassification"),R8o=o(" (XLM-RoBERTa model)"),S8o=l(),qb=a("li"),Mne=a("strong"),P8o=o("xlm-roberta-xl"),$8o=o(" \u2014 "),OD=a("a"),I8o=o("XLMRobertaXLForTokenClassification"),D8o=o(" (XLM-RoBERTa-XL model)"),j8o=l(),Gb=a("li"),Ene=a("strong"),N8o=o("xlnet"),q8o=o(" \u2014 "),XD=a("a"),G8o=o("XLNetForTokenClassification"),O8o=o(" (XLNet model)"),X8o=l(),Ob=a("li"),yne=a("strong"),V8o=o("yoso"),z8o=o(" \u2014 "),VD=a("a"),W8o=o("YosoForTokenClassification"),Q8o=o(" (YOSO model)"),H8o=l(),Xb=a("p"),U8o=o("The model is set in evaluation mode by default using "),wne=a("code"),J8o=o("model.eval()"),Y8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ane=a("code"),K8o=o("model.train()"),Z8o=l(),Lne=a("p"),e7o=o("Examples:"),o7o=l(),f(hy.$$.fragment),bBe=l(),pd=a("h2"),Vb=a("a"),Bne=a("span"),f(py.$$.fragment),r7o=l(),xne=a("span"),t7o=o("AutoModelForQuestionAnswering"),vBe=l(),rr=a("div"),f(_y.$$.fragment),a7o=l(),_d=a("p"),n7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kne=a("code"),s7o=o("from_pretrained()"),l7o=o("class method or the "),Rne=a("code"),i7o=o("from_config()"),d7o=o(`class
method.`),c7o=l(),uy=a("p"),f7o=o("This class cannot be instantiated directly using "),Sne=a("code"),m7o=o("__init__()"),g7o=o(" (throws an error)."),h7o=l(),Ur=a("div"),f(by.$$.fragment),p7o=l(),Pne=a("p"),_7o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),u7o=l(),ud=a("p"),b7o=o(`Note:
Loading a model from its configuration file does `),$ne=a("strong"),v7o=o("not"),T7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ine=a("code"),F7o=o("from_pretrained()"),C7o=o("to load the model weights."),M7o=l(),Dne=a("p"),E7o=o("Examples:"),y7o=l(),f(vy.$$.fragment),w7o=l(),Oe=a("div"),f(Ty.$$.fragment),A7o=l(),jne=a("p"),L7o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B7o=l(),Ha=a("p"),x7o=o("The model class to instantiate is selected based on the "),Nne=a("code"),k7o=o("model_type"),R7o=o(` property of the config object (either
passed as an argument or loaded from `),qne=a("code"),S7o=o("pretrained_model_name_or_path"),P7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=a("code"),$7o=o("pretrained_model_name_or_path"),I7o=o(":"),D7o=l(),R=a("ul"),zb=a("li"),One=a("strong"),j7o=o("albert"),N7o=o(" \u2014 "),zD=a("a"),q7o=o("AlbertForQuestionAnswering"),G7o=o(" (ALBERT model)"),O7o=l(),Wb=a("li"),Xne=a("strong"),X7o=o("bart"),V7o=o(" \u2014 "),WD=a("a"),z7o=o("BartForQuestionAnswering"),W7o=o(" (BART model)"),Q7o=l(),Qb=a("li"),Vne=a("strong"),H7o=o("bert"),U7o=o(" \u2014 "),QD=a("a"),J7o=o("BertForQuestionAnswering"),Y7o=o(" (BERT model)"),K7o=l(),Hb=a("li"),zne=a("strong"),Z7o=o("big_bird"),eBo=o(" \u2014 "),HD=a("a"),oBo=o("BigBirdForQuestionAnswering"),rBo=o(" (BigBird model)"),tBo=l(),Ub=a("li"),Wne=a("strong"),aBo=o("bigbird_pegasus"),nBo=o(" \u2014 "),UD=a("a"),sBo=o("BigBirdPegasusForQuestionAnswering"),lBo=o(" (BigBirdPegasus model)"),iBo=l(),Jb=a("li"),Qne=a("strong"),dBo=o("camembert"),cBo=o(" \u2014 "),JD=a("a"),fBo=o("CamembertForQuestionAnswering"),mBo=o(" (CamemBERT model)"),gBo=l(),Yb=a("li"),Hne=a("strong"),hBo=o("canine"),pBo=o(" \u2014 "),YD=a("a"),_Bo=o("CanineForQuestionAnswering"),uBo=o(" (Canine model)"),bBo=l(),Kb=a("li"),Une=a("strong"),vBo=o("convbert"),TBo=o(" \u2014 "),KD=a("a"),FBo=o("ConvBertForQuestionAnswering"),CBo=o(" (ConvBERT model)"),MBo=l(),Zb=a("li"),Jne=a("strong"),EBo=o("data2vec-text"),yBo=o(" \u2014 "),ZD=a("a"),wBo=o("Data2VecTextForQuestionAnswering"),ABo=o(" (Data2VecText model)"),LBo=l(),e5=a("li"),Yne=a("strong"),BBo=o("deberta"),xBo=o(" \u2014 "),ej=a("a"),kBo=o("DebertaForQuestionAnswering"),RBo=o(" (DeBERTa model)"),SBo=l(),o5=a("li"),Kne=a("strong"),PBo=o("deberta-v2"),$Bo=o(" \u2014 "),oj=a("a"),IBo=o("DebertaV2ForQuestionAnswering"),DBo=o(" (DeBERTa-v2 model)"),jBo=l(),r5=a("li"),Zne=a("strong"),NBo=o("distilbert"),qBo=o(" \u2014 "),rj=a("a"),GBo=o("DistilBertForQuestionAnswering"),OBo=o(" (DistilBERT model)"),XBo=l(),t5=a("li"),ese=a("strong"),VBo=o("electra"),zBo=o(" \u2014 "),tj=a("a"),WBo=o("ElectraForQuestionAnswering"),QBo=o(" (ELECTRA model)"),HBo=l(),a5=a("li"),ose=a("strong"),UBo=o("flaubert"),JBo=o(" \u2014 "),aj=a("a"),YBo=o("FlaubertForQuestionAnsweringSimple"),KBo=o(" (FlauBERT model)"),ZBo=l(),n5=a("li"),rse=a("strong"),exo=o("fnet"),oxo=o(" \u2014 "),nj=a("a"),rxo=o("FNetForQuestionAnswering"),txo=o(" (FNet model)"),axo=l(),s5=a("li"),tse=a("strong"),nxo=o("funnel"),sxo=o(" \u2014 "),sj=a("a"),lxo=o("FunnelForQuestionAnswering"),ixo=o(" (Funnel Transformer model)"),dxo=l(),l5=a("li"),ase=a("strong"),cxo=o("gptj"),fxo=o(" \u2014 "),lj=a("a"),mxo=o("GPTJForQuestionAnswering"),gxo=o(" (GPT-J model)"),hxo=l(),i5=a("li"),nse=a("strong"),pxo=o("ibert"),_xo=o(" \u2014 "),ij=a("a"),uxo=o("IBertForQuestionAnswering"),bxo=o(" (I-BERT model)"),vxo=l(),d5=a("li"),sse=a("strong"),Txo=o("layoutlmv2"),Fxo=o(" \u2014 "),dj=a("a"),Cxo=o("LayoutLMv2ForQuestionAnswering"),Mxo=o(" (LayoutLMv2 model)"),Exo=l(),c5=a("li"),lse=a("strong"),yxo=o("led"),wxo=o(" \u2014 "),cj=a("a"),Axo=o("LEDForQuestionAnswering"),Lxo=o(" (LED model)"),Bxo=l(),f5=a("li"),ise=a("strong"),xxo=o("longformer"),kxo=o(" \u2014 "),fj=a("a"),Rxo=o("LongformerForQuestionAnswering"),Sxo=o(" (Longformer model)"),Pxo=l(),m5=a("li"),dse=a("strong"),$xo=o("lxmert"),Ixo=o(" \u2014 "),mj=a("a"),Dxo=o("LxmertForQuestionAnswering"),jxo=o(" (LXMERT model)"),Nxo=l(),g5=a("li"),cse=a("strong"),qxo=o("mbart"),Gxo=o(" \u2014 "),gj=a("a"),Oxo=o("MBartForQuestionAnswering"),Xxo=o(" (mBART model)"),Vxo=l(),h5=a("li"),fse=a("strong"),zxo=o("megatron-bert"),Wxo=o(" \u2014 "),hj=a("a"),Qxo=o("MegatronBertForQuestionAnswering"),Hxo=o(" (MegatronBert model)"),Uxo=l(),p5=a("li"),mse=a("strong"),Jxo=o("mobilebert"),Yxo=o(" \u2014 "),pj=a("a"),Kxo=o("MobileBertForQuestionAnswering"),Zxo=o(" (MobileBERT model)"),eko=l(),_5=a("li"),gse=a("strong"),oko=o("mpnet"),rko=o(" \u2014 "),_j=a("a"),tko=o("MPNetForQuestionAnswering"),ako=o(" (MPNet model)"),nko=l(),u5=a("li"),hse=a("strong"),sko=o("nystromformer"),lko=o(" \u2014 "),uj=a("a"),iko=o("NystromformerForQuestionAnswering"),dko=o(" (Nystromformer model)"),cko=l(),b5=a("li"),pse=a("strong"),fko=o("qdqbert"),mko=o(" \u2014 "),bj=a("a"),gko=o("QDQBertForQuestionAnswering"),hko=o(" (QDQBert model)"),pko=l(),v5=a("li"),_se=a("strong"),_ko=o("reformer"),uko=o(" \u2014 "),vj=a("a"),bko=o("ReformerForQuestionAnswering"),vko=o(" (Reformer model)"),Tko=l(),T5=a("li"),use=a("strong"),Fko=o("rembert"),Cko=o(" \u2014 "),Tj=a("a"),Mko=o("RemBertForQuestionAnswering"),Eko=o(" (RemBERT model)"),yko=l(),F5=a("li"),bse=a("strong"),wko=o("roberta"),Ako=o(" \u2014 "),Fj=a("a"),Lko=o("RobertaForQuestionAnswering"),Bko=o(" (RoBERTa model)"),xko=l(),C5=a("li"),vse=a("strong"),kko=o("roformer"),Rko=o(" \u2014 "),Cj=a("a"),Sko=o("RoFormerForQuestionAnswering"),Pko=o(" (RoFormer model)"),$ko=l(),M5=a("li"),Tse=a("strong"),Iko=o("splinter"),Dko=o(" \u2014 "),Mj=a("a"),jko=o("SplinterForQuestionAnswering"),Nko=o(" (Splinter model)"),qko=l(),E5=a("li"),Fse=a("strong"),Gko=o("squeezebert"),Oko=o(" \u2014 "),Ej=a("a"),Xko=o("SqueezeBertForQuestionAnswering"),Vko=o(" (SqueezeBERT model)"),zko=l(),y5=a("li"),Cse=a("strong"),Wko=o("xlm"),Qko=o(" \u2014 "),yj=a("a"),Hko=o("XLMForQuestionAnsweringSimple"),Uko=o(" (XLM model)"),Jko=l(),w5=a("li"),Mse=a("strong"),Yko=o("xlm-roberta"),Kko=o(" \u2014 "),wj=a("a"),Zko=o("XLMRobertaForQuestionAnswering"),eRo=o(" (XLM-RoBERTa model)"),oRo=l(),A5=a("li"),Ese=a("strong"),rRo=o("xlm-roberta-xl"),tRo=o(" \u2014 "),Aj=a("a"),aRo=o("XLMRobertaXLForQuestionAnswering"),nRo=o(" (XLM-RoBERTa-XL model)"),sRo=l(),L5=a("li"),yse=a("strong"),lRo=o("xlnet"),iRo=o(" \u2014 "),Lj=a("a"),dRo=o("XLNetForQuestionAnsweringSimple"),cRo=o(" (XLNet model)"),fRo=l(),B5=a("li"),wse=a("strong"),mRo=o("yoso"),gRo=o(" \u2014 "),Bj=a("a"),hRo=o("YosoForQuestionAnswering"),pRo=o(" (YOSO model)"),_Ro=l(),x5=a("p"),uRo=o("The model is set in evaluation mode by default using "),Ase=a("code"),bRo=o("model.eval()"),vRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=a("code"),TRo=o("model.train()"),FRo=l(),Bse=a("p"),CRo=o("Examples:"),MRo=l(),f(Fy.$$.fragment),TBe=l(),bd=a("h2"),k5=a("a"),xse=a("span"),f(Cy.$$.fragment),ERo=l(),kse=a("span"),yRo=o("AutoModelForTableQuestionAnswering"),FBe=l(),tr=a("div"),f(My.$$.fragment),wRo=l(),vd=a("p"),ARo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Rse=a("code"),LRo=o("from_pretrained()"),BRo=o("class method or the "),Sse=a("code"),xRo=o("from_config()"),kRo=o(`class
method.`),RRo=l(),Ey=a("p"),SRo=o("This class cannot be instantiated directly using "),Pse=a("code"),PRo=o("__init__()"),$Ro=o(" (throws an error)."),IRo=l(),Jr=a("div"),f(yy.$$.fragment),DRo=l(),$se=a("p"),jRo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),NRo=l(),Td=a("p"),qRo=o(`Note:
Loading a model from its configuration file does `),Ise=a("strong"),GRo=o("not"),ORo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dse=a("code"),XRo=o("from_pretrained()"),VRo=o("to load the model weights."),zRo=l(),jse=a("p"),WRo=o("Examples:"),QRo=l(),f(wy.$$.fragment),HRo=l(),Xe=a("div"),f(Ay.$$.fragment),URo=l(),Nse=a("p"),JRo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YRo=l(),Ua=a("p"),KRo=o("The model class to instantiate is selected based on the "),qse=a("code"),ZRo=o("model_type"),eSo=o(` property of the config object (either
passed as an argument or loaded from `),Gse=a("code"),oSo=o("pretrained_model_name_or_path"),rSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=a("code"),tSo=o("pretrained_model_name_or_path"),aSo=o(":"),nSo=l(),Xse=a("ul"),R5=a("li"),Vse=a("strong"),sSo=o("tapas"),lSo=o(" \u2014 "),xj=a("a"),iSo=o("TapasForQuestionAnswering"),dSo=o(" (TAPAS model)"),cSo=l(),S5=a("p"),fSo=o("The model is set in evaluation mode by default using "),zse=a("code"),mSo=o("model.eval()"),gSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=a("code"),hSo=o("model.train()"),pSo=l(),Qse=a("p"),_So=o("Examples:"),uSo=l(),f(Ly.$$.fragment),CBe=l(),Fd=a("h2"),P5=a("a"),Hse=a("span"),f(By.$$.fragment),bSo=l(),Use=a("span"),vSo=o("AutoModelForImageClassification"),MBe=l(),ar=a("div"),f(xy.$$.fragment),TSo=l(),Cd=a("p"),FSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jse=a("code"),CSo=o("from_pretrained()"),MSo=o("class method or the "),Yse=a("code"),ESo=o("from_config()"),ySo=o(`class
method.`),wSo=l(),ky=a("p"),ASo=o("This class cannot be instantiated directly using "),Kse=a("code"),LSo=o("__init__()"),BSo=o(" (throws an error)."),xSo=l(),Yr=a("div"),f(Ry.$$.fragment),kSo=l(),Zse=a("p"),RSo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SSo=l(),Md=a("p"),PSo=o(`Note:
Loading a model from its configuration file does `),ele=a("strong"),$So=o("not"),ISo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=a("code"),DSo=o("from_pretrained()"),jSo=o("to load the model weights."),NSo=l(),rle=a("p"),qSo=o("Examples:"),GSo=l(),f(Sy.$$.fragment),OSo=l(),Ve=a("div"),f(Py.$$.fragment),XSo=l(),tle=a("p"),VSo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zSo=l(),Ja=a("p"),WSo=o("The model class to instantiate is selected based on the "),ale=a("code"),QSo=o("model_type"),HSo=o(` property of the config object (either
passed as an argument or loaded from `),nle=a("code"),USo=o("pretrained_model_name_or_path"),JSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=a("code"),YSo=o("pretrained_model_name_or_path"),KSo=o(":"),ZSo=l(),he=a("ul"),$5=a("li"),lle=a("strong"),ePo=o("beit"),oPo=o(" \u2014 "),kj=a("a"),rPo=o("BeitForImageClassification"),tPo=o(" (BEiT model)"),aPo=l(),I5=a("li"),ile=a("strong"),nPo=o("convnext"),sPo=o(" \u2014 "),Rj=a("a"),lPo=o("ConvNextForImageClassification"),iPo=o(" (ConvNext model)"),dPo=l(),Ps=a("li"),dle=a("strong"),cPo=o("deit"),fPo=o(" \u2014 "),Sj=a("a"),mPo=o("DeiTForImageClassification"),gPo=o(" or "),Pj=a("a"),hPo=o("DeiTForImageClassificationWithTeacher"),pPo=o(" (DeiT model)"),_Po=l(),D5=a("li"),cle=a("strong"),uPo=o("imagegpt"),bPo=o(" \u2014 "),$j=a("a"),vPo=o("ImageGPTForImageClassification"),TPo=o(" (ImageGPT model)"),FPo=l(),la=a("li"),fle=a("strong"),CPo=o("perceiver"),MPo=o(" \u2014 "),Ij=a("a"),EPo=o("PerceiverForImageClassificationLearned"),yPo=o(" or "),Dj=a("a"),wPo=o("PerceiverForImageClassificationFourier"),APo=o(" or "),jj=a("a"),LPo=o("PerceiverForImageClassificationConvProcessing"),BPo=o(" (Perceiver model)"),xPo=l(),j5=a("li"),mle=a("strong"),kPo=o("poolformer"),RPo=o(" \u2014 "),Nj=a("a"),SPo=o("PoolFormerForImageClassification"),PPo=o(" (PoolFormer model)"),$Po=l(),N5=a("li"),gle=a("strong"),IPo=o("resnet"),DPo=o(" \u2014 "),qj=a("a"),jPo=o("ResNetForImageClassification"),NPo=o(" (ResNet model)"),qPo=l(),q5=a("li"),hle=a("strong"),GPo=o("segformer"),OPo=o(" \u2014 "),Gj=a("a"),XPo=o("SegformerForImageClassification"),VPo=o(" (SegFormer model)"),zPo=l(),G5=a("li"),ple=a("strong"),WPo=o("swin"),QPo=o(" \u2014 "),Oj=a("a"),HPo=o("SwinForImageClassification"),UPo=o(" (Swin model)"),JPo=l(),O5=a("li"),_le=a("strong"),YPo=o("vit"),KPo=o(" \u2014 "),Xj=a("a"),ZPo=o("ViTForImageClassification"),e$o=o(" (ViT model)"),o$o=l(),X5=a("p"),r$o=o("The model is set in evaluation mode by default using "),ule=a("code"),t$o=o("model.eval()"),a$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ble=a("code"),n$o=o("model.train()"),s$o=l(),vle=a("p"),l$o=o("Examples:"),i$o=l(),f($y.$$.fragment),EBe=l(),Ed=a("h2"),V5=a("a"),Tle=a("span"),f(Iy.$$.fragment),d$o=l(),Fle=a("span"),c$o=o("AutoModelForVision2Seq"),yBe=l(),nr=a("div"),f(Dy.$$.fragment),f$o=l(),yd=a("p"),m$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cle=a("code"),g$o=o("from_pretrained()"),h$o=o("class method or the "),Mle=a("code"),p$o=o("from_config()"),_$o=o(`class
method.`),u$o=l(),jy=a("p"),b$o=o("This class cannot be instantiated directly using "),Ele=a("code"),v$o=o("__init__()"),T$o=o(" (throws an error)."),F$o=l(),Kr=a("div"),f(Ny.$$.fragment),C$o=l(),yle=a("p"),M$o=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),E$o=l(),wd=a("p"),y$o=o(`Note:
Loading a model from its configuration file does `),wle=a("strong"),w$o=o("not"),A$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ale=a("code"),L$o=o("from_pretrained()"),B$o=o("to load the model weights."),x$o=l(),Lle=a("p"),k$o=o("Examples:"),R$o=l(),f(qy.$$.fragment),S$o=l(),ze=a("div"),f(Gy.$$.fragment),P$o=l(),Ble=a("p"),$$o=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),I$o=l(),Ya=a("p"),D$o=o("The model class to instantiate is selected based on the "),xle=a("code"),j$o=o("model_type"),N$o=o(` property of the config object (either
passed as an argument or loaded from `),kle=a("code"),q$o=o("pretrained_model_name_or_path"),G$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=a("code"),O$o=o("pretrained_model_name_or_path"),X$o=o(":"),V$o=l(),Sle=a("ul"),z5=a("li"),Ple=a("strong"),z$o=o("vision-encoder-decoder"),W$o=o(" \u2014 "),Vj=a("a"),Q$o=o("VisionEncoderDecoderModel"),H$o=o(" (Vision Encoder decoder model)"),U$o=l(),W5=a("p"),J$o=o("The model is set in evaluation mode by default using "),$le=a("code"),Y$o=o("model.eval()"),K$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ile=a("code"),Z$o=o("model.train()"),eIo=l(),Dle=a("p"),oIo=o("Examples:"),rIo=l(),f(Oy.$$.fragment),wBe=l(),Ad=a("h2"),Q5=a("a"),jle=a("span"),f(Xy.$$.fragment),tIo=l(),Nle=a("span"),aIo=o("AutoModelForAudioClassification"),ABe=l(),sr=a("div"),f(Vy.$$.fragment),nIo=l(),Ld=a("p"),sIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),qle=a("code"),lIo=o("from_pretrained()"),iIo=o("class method or the "),Gle=a("code"),dIo=o("from_config()"),cIo=o(`class
method.`),fIo=l(),zy=a("p"),mIo=o("This class cannot be instantiated directly using "),Ole=a("code"),gIo=o("__init__()"),hIo=o(" (throws an error)."),pIo=l(),Zr=a("div"),f(Wy.$$.fragment),_Io=l(),Xle=a("p"),uIo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bIo=l(),Bd=a("p"),vIo=o(`Note:
Loading a model from its configuration file does `),Vle=a("strong"),TIo=o("not"),FIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zle=a("code"),CIo=o("from_pretrained()"),MIo=o("to load the model weights."),EIo=l(),Wle=a("p"),yIo=o("Examples:"),wIo=l(),f(Qy.$$.fragment),AIo=l(),We=a("div"),f(Hy.$$.fragment),LIo=l(),Qle=a("p"),BIo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xIo=l(),Ka=a("p"),kIo=o("The model class to instantiate is selected based on the "),Hle=a("code"),RIo=o("model_type"),SIo=o(` property of the config object (either
passed as an argument or loaded from `),Ule=a("code"),PIo=o("pretrained_model_name_or_path"),$Io=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jle=a("code"),IIo=o("pretrained_model_name_or_path"),DIo=o(":"),jIo=l(),Le=a("ul"),H5=a("li"),Yle=a("strong"),NIo=o("data2vec-audio"),qIo=o(" \u2014 "),zj=a("a"),GIo=o("Data2VecAudioForSequenceClassification"),OIo=o(" (Data2VecAudio model)"),XIo=l(),U5=a("li"),Kle=a("strong"),VIo=o("hubert"),zIo=o(" \u2014 "),Wj=a("a"),WIo=o("HubertForSequenceClassification"),QIo=o(" (Hubert model)"),HIo=l(),J5=a("li"),Zle=a("strong"),UIo=o("sew"),JIo=o(" \u2014 "),Qj=a("a"),YIo=o("SEWForSequenceClassification"),KIo=o(" (SEW model)"),ZIo=l(),Y5=a("li"),eie=a("strong"),eDo=o("sew-d"),oDo=o(" \u2014 "),Hj=a("a"),rDo=o("SEWDForSequenceClassification"),tDo=o(" (SEW-D model)"),aDo=l(),K5=a("li"),oie=a("strong"),nDo=o("unispeech"),sDo=o(" \u2014 "),Uj=a("a"),lDo=o("UniSpeechForSequenceClassification"),iDo=o(" (UniSpeech model)"),dDo=l(),Z5=a("li"),rie=a("strong"),cDo=o("unispeech-sat"),fDo=o(" \u2014 "),Jj=a("a"),mDo=o("UniSpeechSatForSequenceClassification"),gDo=o(" (UniSpeechSat model)"),hDo=l(),ev=a("li"),tie=a("strong"),pDo=o("wav2vec2"),_Do=o(" \u2014 "),Yj=a("a"),uDo=o("Wav2Vec2ForSequenceClassification"),bDo=o(" (Wav2Vec2 model)"),vDo=l(),ov=a("li"),aie=a("strong"),TDo=o("wavlm"),FDo=o(" \u2014 "),Kj=a("a"),CDo=o("WavLMForSequenceClassification"),MDo=o(" (WavLM model)"),EDo=l(),rv=a("p"),yDo=o("The model is set in evaluation mode by default using "),nie=a("code"),wDo=o("model.eval()"),ADo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sie=a("code"),LDo=o("model.train()"),BDo=l(),lie=a("p"),xDo=o("Examples:"),kDo=l(),f(Uy.$$.fragment),LBe=l(),xd=a("h2"),tv=a("a"),iie=a("span"),f(Jy.$$.fragment),RDo=l(),die=a("span"),SDo=o("AutoModelForAudioFrameClassification"),BBe=l(),lr=a("div"),f(Yy.$$.fragment),PDo=l(),kd=a("p"),$Do=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cie=a("code"),IDo=o("from_pretrained()"),DDo=o("class method or the "),fie=a("code"),jDo=o("from_config()"),NDo=o(`class
method.`),qDo=l(),Ky=a("p"),GDo=o("This class cannot be instantiated directly using "),mie=a("code"),ODo=o("__init__()"),XDo=o(" (throws an error)."),VDo=l(),et=a("div"),f(Zy.$$.fragment),zDo=l(),gie=a("p"),WDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),QDo=l(),Rd=a("p"),HDo=o(`Note:
Loading a model from its configuration file does `),hie=a("strong"),UDo=o("not"),JDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pie=a("code"),YDo=o("from_pretrained()"),KDo=o("to load the model weights."),ZDo=l(),_ie=a("p"),ejo=o("Examples:"),ojo=l(),f(ew.$$.fragment),rjo=l(),Qe=a("div"),f(ow.$$.fragment),tjo=l(),uie=a("p"),ajo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),njo=l(),Za=a("p"),sjo=o("The model class to instantiate is selected based on the "),bie=a("code"),ljo=o("model_type"),ijo=o(` property of the config object (either
passed as an argument or loaded from `),vie=a("code"),djo=o("pretrained_model_name_or_path"),cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=a("code"),fjo=o("pretrained_model_name_or_path"),mjo=o(":"),gjo=l(),en=a("ul"),av=a("li"),Fie=a("strong"),hjo=o("data2vec-audio"),pjo=o(" \u2014 "),Zj=a("a"),_jo=o("Data2VecAudioForAudioFrameClassification"),ujo=o(" (Data2VecAudio model)"),bjo=l(),nv=a("li"),Cie=a("strong"),vjo=o("unispeech-sat"),Tjo=o(" \u2014 "),eN=a("a"),Fjo=o("UniSpeechSatForAudioFrameClassification"),Cjo=o(" (UniSpeechSat model)"),Mjo=l(),sv=a("li"),Mie=a("strong"),Ejo=o("wav2vec2"),yjo=o(" \u2014 "),oN=a("a"),wjo=o("Wav2Vec2ForAudioFrameClassification"),Ajo=o(" (Wav2Vec2 model)"),Ljo=l(),lv=a("li"),Eie=a("strong"),Bjo=o("wavlm"),xjo=o(" \u2014 "),rN=a("a"),kjo=o("WavLMForAudioFrameClassification"),Rjo=o(" (WavLM model)"),Sjo=l(),iv=a("p"),Pjo=o("The model is set in evaluation mode by default using "),yie=a("code"),$jo=o("model.eval()"),Ijo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=a("code"),Djo=o("model.train()"),jjo=l(),Aie=a("p"),Njo=o("Examples:"),qjo=l(),f(rw.$$.fragment),xBe=l(),Sd=a("h2"),dv=a("a"),Lie=a("span"),f(tw.$$.fragment),Gjo=l(),Bie=a("span"),Ojo=o("AutoModelForCTC"),kBe=l(),ir=a("div"),f(aw.$$.fragment),Xjo=l(),Pd=a("p"),Vjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),xie=a("code"),zjo=o("from_pretrained()"),Wjo=o("class method or the "),kie=a("code"),Qjo=o("from_config()"),Hjo=o(`class
method.`),Ujo=l(),nw=a("p"),Jjo=o("This class cannot be instantiated directly using "),Rie=a("code"),Yjo=o("__init__()"),Kjo=o(" (throws an error)."),Zjo=l(),ot=a("div"),f(sw.$$.fragment),eNo=l(),Sie=a("p"),oNo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),rNo=l(),$d=a("p"),tNo=o(`Note:
Loading a model from its configuration file does `),Pie=a("strong"),aNo=o("not"),nNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=a("code"),sNo=o("from_pretrained()"),lNo=o("to load the model weights."),iNo=l(),Iie=a("p"),dNo=o("Examples:"),cNo=l(),f(lw.$$.fragment),fNo=l(),He=a("div"),f(iw.$$.fragment),mNo=l(),Die=a("p"),gNo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hNo=l(),on=a("p"),pNo=o("The model class to instantiate is selected based on the "),jie=a("code"),_No=o("model_type"),uNo=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),bNo=o("pretrained_model_name_or_path"),vNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),TNo=o("pretrained_model_name_or_path"),FNo=o(":"),CNo=l(),Be=a("ul"),cv=a("li"),Gie=a("strong"),MNo=o("data2vec-audio"),ENo=o(" \u2014 "),tN=a("a"),yNo=o("Data2VecAudioForCTC"),wNo=o(" (Data2VecAudio model)"),ANo=l(),fv=a("li"),Oie=a("strong"),LNo=o("hubert"),BNo=o(" \u2014 "),aN=a("a"),xNo=o("HubertForCTC"),kNo=o(" (Hubert model)"),RNo=l(),mv=a("li"),Xie=a("strong"),SNo=o("sew"),PNo=o(" \u2014 "),nN=a("a"),$No=o("SEWForCTC"),INo=o(" (SEW model)"),DNo=l(),gv=a("li"),Vie=a("strong"),jNo=o("sew-d"),NNo=o(" \u2014 "),sN=a("a"),qNo=o("SEWDForCTC"),GNo=o(" (SEW-D model)"),ONo=l(),hv=a("li"),zie=a("strong"),XNo=o("unispeech"),VNo=o(" \u2014 "),lN=a("a"),zNo=o("UniSpeechForCTC"),WNo=o(" (UniSpeech model)"),QNo=l(),pv=a("li"),Wie=a("strong"),HNo=o("unispeech-sat"),UNo=o(" \u2014 "),iN=a("a"),JNo=o("UniSpeechSatForCTC"),YNo=o(" (UniSpeechSat model)"),KNo=l(),_v=a("li"),Qie=a("strong"),ZNo=o("wav2vec2"),eqo=o(" \u2014 "),dN=a("a"),oqo=o("Wav2Vec2ForCTC"),rqo=o(" (Wav2Vec2 model)"),tqo=l(),uv=a("li"),Hie=a("strong"),aqo=o("wavlm"),nqo=o(" \u2014 "),cN=a("a"),sqo=o("WavLMForCTC"),lqo=o(" (WavLM model)"),iqo=l(),bv=a("p"),dqo=o("The model is set in evaluation mode by default using "),Uie=a("code"),cqo=o("model.eval()"),fqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=a("code"),mqo=o("model.train()"),gqo=l(),Yie=a("p"),hqo=o("Examples:"),pqo=l(),f(dw.$$.fragment),RBe=l(),Id=a("h2"),vv=a("a"),Kie=a("span"),f(cw.$$.fragment),_qo=l(),Zie=a("span"),uqo=o("AutoModelForSpeechSeq2Seq"),SBe=l(),dr=a("div"),f(fw.$$.fragment),bqo=l(),Dd=a("p"),vqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ede=a("code"),Tqo=o("from_pretrained()"),Fqo=o("class method or the "),ode=a("code"),Cqo=o("from_config()"),Mqo=o(`class
method.`),Eqo=l(),mw=a("p"),yqo=o("This class cannot be instantiated directly using "),rde=a("code"),wqo=o("__init__()"),Aqo=o(" (throws an error)."),Lqo=l(),rt=a("div"),f(gw.$$.fragment),Bqo=l(),tde=a("p"),xqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kqo=l(),jd=a("p"),Rqo=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),Sqo=o("not"),Pqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=a("code"),$qo=o("from_pretrained()"),Iqo=o("to load the model weights."),Dqo=l(),sde=a("p"),jqo=o("Examples:"),Nqo=l(),f(hw.$$.fragment),qqo=l(),Ue=a("div"),f(pw.$$.fragment),Gqo=l(),lde=a("p"),Oqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xqo=l(),rn=a("p"),Vqo=o("The model class to instantiate is selected based on the "),ide=a("code"),zqo=o("model_type"),Wqo=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),Qqo=o("pretrained_model_name_or_path"),Hqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),Uqo=o("pretrained_model_name_or_path"),Jqo=o(":"),Yqo=l(),_w=a("ul"),Tv=a("li"),fde=a("strong"),Kqo=o("speech-encoder-decoder"),Zqo=o(" \u2014 "),fN=a("a"),eGo=o("SpeechEncoderDecoderModel"),oGo=o(" (Speech Encoder decoder model)"),rGo=l(),Fv=a("li"),mde=a("strong"),tGo=o("speech_to_text"),aGo=o(" \u2014 "),mN=a("a"),nGo=o("Speech2TextForConditionalGeneration"),sGo=o(" (Speech2Text model)"),lGo=l(),Cv=a("p"),iGo=o("The model is set in evaluation mode by default using "),gde=a("code"),dGo=o("model.eval()"),cGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=a("code"),fGo=o("model.train()"),mGo=l(),pde=a("p"),gGo=o("Examples:"),hGo=l(),f(uw.$$.fragment),PBe=l(),Nd=a("h2"),Mv=a("a"),_de=a("span"),f(bw.$$.fragment),pGo=l(),ude=a("span"),_Go=o("AutoModelForAudioXVector"),$Be=l(),cr=a("div"),f(vw.$$.fragment),uGo=l(),qd=a("p"),bGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bde=a("code"),vGo=o("from_pretrained()"),TGo=o("class method or the "),vde=a("code"),FGo=o("from_config()"),CGo=o(`class
method.`),MGo=l(),Tw=a("p"),EGo=o("This class cannot be instantiated directly using "),Tde=a("code"),yGo=o("__init__()"),wGo=o(" (throws an error)."),AGo=l(),tt=a("div"),f(Fw.$$.fragment),LGo=l(),Fde=a("p"),BGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xGo=l(),Gd=a("p"),kGo=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),RGo=o("not"),SGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=a("code"),PGo=o("from_pretrained()"),$Go=o("to load the model weights."),IGo=l(),Ede=a("p"),DGo=o("Examples:"),jGo=l(),f(Cw.$$.fragment),NGo=l(),Je=a("div"),f(Mw.$$.fragment),qGo=l(),yde=a("p"),GGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),OGo=l(),tn=a("p"),XGo=o("The model class to instantiate is selected based on the "),wde=a("code"),VGo=o("model_type"),zGo=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),WGo=o("pretrained_model_name_or_path"),QGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=a("code"),HGo=o("pretrained_model_name_or_path"),UGo=o(":"),JGo=l(),an=a("ul"),Ev=a("li"),Bde=a("strong"),YGo=o("data2vec-audio"),KGo=o(" \u2014 "),gN=a("a"),ZGo=o("Data2VecAudioForXVector"),eOo=o(" (Data2VecAudio model)"),oOo=l(),yv=a("li"),xde=a("strong"),rOo=o("unispeech-sat"),tOo=o(" \u2014 "),hN=a("a"),aOo=o("UniSpeechSatForXVector"),nOo=o(" (UniSpeechSat model)"),sOo=l(),wv=a("li"),kde=a("strong"),lOo=o("wav2vec2"),iOo=o(" \u2014 "),pN=a("a"),dOo=o("Wav2Vec2ForXVector"),cOo=o(" (Wav2Vec2 model)"),fOo=l(),Av=a("li"),Rde=a("strong"),mOo=o("wavlm"),gOo=o(" \u2014 "),_N=a("a"),hOo=o("WavLMForXVector"),pOo=o(" (WavLM model)"),_Oo=l(),Lv=a("p"),uOo=o("The model is set in evaluation mode by default using "),Sde=a("code"),bOo=o("model.eval()"),vOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),TOo=o("model.train()"),FOo=l(),$de=a("p"),COo=o("Examples:"),MOo=l(),f(Ew.$$.fragment),IBe=l(),Od=a("h2"),Bv=a("a"),Ide=a("span"),f(yw.$$.fragment),EOo=l(),Dde=a("span"),yOo=o("AutoModelForMaskedImageModeling"),DBe=l(),fr=a("div"),f(ww.$$.fragment),wOo=l(),Xd=a("p"),AOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),jde=a("code"),LOo=o("from_pretrained()"),BOo=o("class method or the "),Nde=a("code"),xOo=o("from_config()"),kOo=o(`class
method.`),ROo=l(),Aw=a("p"),SOo=o("This class cannot be instantiated directly using "),qde=a("code"),POo=o("__init__()"),$Oo=o(" (throws an error)."),IOo=l(),at=a("div"),f(Lw.$$.fragment),DOo=l(),Gde=a("p"),jOo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),NOo=l(),Vd=a("p"),qOo=o(`Note:
Loading a model from its configuration file does `),Ode=a("strong"),GOo=o("not"),OOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=a("code"),XOo=o("from_pretrained()"),VOo=o("to load the model weights."),zOo=l(),Vde=a("p"),WOo=o("Examples:"),QOo=l(),f(Bw.$$.fragment),HOo=l(),Ye=a("div"),f(xw.$$.fragment),UOo=l(),zde=a("p"),JOo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),YOo=l(),nn=a("p"),KOo=o("The model class to instantiate is selected based on the "),Wde=a("code"),ZOo=o("model_type"),eXo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),oXo=o("pretrained_model_name_or_path"),rXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),tXo=o("pretrained_model_name_or_path"),aXo=o(":"),nXo=l(),zd=a("ul"),xv=a("li"),Ude=a("strong"),sXo=o("deit"),lXo=o(" \u2014 "),uN=a("a"),iXo=o("DeiTForMaskedImageModeling"),dXo=o(" (DeiT model)"),cXo=l(),kv=a("li"),Jde=a("strong"),fXo=o("swin"),mXo=o(" \u2014 "),bN=a("a"),gXo=o("SwinForMaskedImageModeling"),hXo=o(" (Swin model)"),pXo=l(),Rv=a("li"),Yde=a("strong"),_Xo=o("vit"),uXo=o(" \u2014 "),vN=a("a"),bXo=o("ViTForMaskedImageModeling"),vXo=o(" (ViT model)"),TXo=l(),Sv=a("p"),FXo=o("The model is set in evaluation mode by default using "),Kde=a("code"),CXo=o("model.eval()"),MXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=a("code"),EXo=o("model.train()"),yXo=l(),ece=a("p"),wXo=o("Examples:"),AXo=l(),f(kw.$$.fragment),jBe=l(),Wd=a("h2"),Pv=a("a"),oce=a("span"),f(Rw.$$.fragment),LXo=l(),rce=a("span"),BXo=o("AutoModelForObjectDetection"),NBe=l(),mr=a("div"),f(Sw.$$.fragment),xXo=l(),Qd=a("p"),kXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),tce=a("code"),RXo=o("from_pretrained()"),SXo=o("class method or the "),ace=a("code"),PXo=o("from_config()"),$Xo=o(`class
method.`),IXo=l(),Pw=a("p"),DXo=o("This class cannot be instantiated directly using "),nce=a("code"),jXo=o("__init__()"),NXo=o(" (throws an error)."),qXo=l(),nt=a("div"),f($w.$$.fragment),GXo=l(),sce=a("p"),OXo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),XXo=l(),Hd=a("p"),VXo=o(`Note:
Loading a model from its configuration file does `),lce=a("strong"),zXo=o("not"),WXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ice=a("code"),QXo=o("from_pretrained()"),HXo=o("to load the model weights."),UXo=l(),dce=a("p"),JXo=o("Examples:"),YXo=l(),f(Iw.$$.fragment),KXo=l(),Ke=a("div"),f(Dw.$$.fragment),ZXo=l(),cce=a("p"),eVo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),oVo=l(),sn=a("p"),rVo=o("The model class to instantiate is selected based on the "),fce=a("code"),tVo=o("model_type"),aVo=o(` property of the config object (either
passed as an argument or loaded from `),mce=a("code"),nVo=o("pretrained_model_name_or_path"),sVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=a("code"),lVo=o("pretrained_model_name_or_path"),iVo=o(":"),dVo=l(),hce=a("ul"),$v=a("li"),pce=a("strong"),cVo=o("detr"),fVo=o(" \u2014 "),TN=a("a"),mVo=o("DetrForObjectDetection"),gVo=o(" (DETR model)"),hVo=l(),Iv=a("p"),pVo=o("The model is set in evaluation mode by default using "),_ce=a("code"),_Vo=o("model.eval()"),uVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=a("code"),bVo=o("model.train()"),vVo=l(),bce=a("p"),TVo=o("Examples:"),FVo=l(),f(jw.$$.fragment),qBe=l(),Ud=a("h2"),Dv=a("a"),vce=a("span"),f(Nw.$$.fragment),CVo=l(),Tce=a("span"),MVo=o("AutoModelForImageSegmentation"),GBe=l(),gr=a("div"),f(qw.$$.fragment),EVo=l(),Jd=a("p"),yVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Fce=a("code"),wVo=o("from_pretrained()"),AVo=o("class method or the "),Cce=a("code"),LVo=o("from_config()"),BVo=o(`class
method.`),xVo=l(),Gw=a("p"),kVo=o("This class cannot be instantiated directly using "),Mce=a("code"),RVo=o("__init__()"),SVo=o(" (throws an error)."),PVo=l(),st=a("div"),f(Ow.$$.fragment),$Vo=l(),Ece=a("p"),IVo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),DVo=l(),Yd=a("p"),jVo=o(`Note:
Loading a model from its configuration file does `),yce=a("strong"),NVo=o("not"),qVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wce=a("code"),GVo=o("from_pretrained()"),OVo=o("to load the model weights."),XVo=l(),Ace=a("p"),VVo=o("Examples:"),zVo=l(),f(Xw.$$.fragment),WVo=l(),Ze=a("div"),f(Vw.$$.fragment),QVo=l(),Lce=a("p"),HVo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),UVo=l(),ln=a("p"),JVo=o("The model class to instantiate is selected based on the "),Bce=a("code"),YVo=o("model_type"),KVo=o(` property of the config object (either
passed as an argument or loaded from `),xce=a("code"),ZVo=o("pretrained_model_name_or_path"),ezo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=a("code"),ozo=o("pretrained_model_name_or_path"),rzo=o(":"),tzo=l(),Rce=a("ul"),jv=a("li"),Sce=a("strong"),azo=o("detr"),nzo=o(" \u2014 "),FN=a("a"),szo=o("DetrForSegmentation"),lzo=o(" (DETR model)"),izo=l(),Nv=a("p"),dzo=o("The model is set in evaluation mode by default using "),Pce=a("code"),czo=o("model.eval()"),fzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),mzo=o("model.train()"),gzo=l(),Ice=a("p"),hzo=o("Examples:"),pzo=l(),f(zw.$$.fragment),OBe=l(),Kd=a("h2"),qv=a("a"),Dce=a("span"),f(Ww.$$.fragment),_zo=l(),jce=a("span"),uzo=o("AutoModelForSemanticSegmentation"),XBe=l(),hr=a("div"),f(Qw.$$.fragment),bzo=l(),Zd=a("p"),vzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Nce=a("code"),Tzo=o("from_pretrained()"),Fzo=o("class method or the "),qce=a("code"),Czo=o("from_config()"),Mzo=o(`class
method.`),Ezo=l(),Hw=a("p"),yzo=o("This class cannot be instantiated directly using "),Gce=a("code"),wzo=o("__init__()"),Azo=o(" (throws an error)."),Lzo=l(),lt=a("div"),f(Uw.$$.fragment),Bzo=l(),Oce=a("p"),xzo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kzo=l(),ec=a("p"),Rzo=o(`Note:
Loading a model from its configuration file does `),Xce=a("strong"),Szo=o("not"),Pzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=a("code"),$zo=o("from_pretrained()"),Izo=o("to load the model weights."),Dzo=l(),zce=a("p"),jzo=o("Examples:"),Nzo=l(),f(Jw.$$.fragment),qzo=l(),eo=a("div"),f(Yw.$$.fragment),Gzo=l(),Wce=a("p"),Ozo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Xzo=l(),dn=a("p"),Vzo=o("The model class to instantiate is selected based on the "),Qce=a("code"),zzo=o("model_type"),Wzo=o(` property of the config object (either
passed as an argument or loaded from `),Hce=a("code"),Qzo=o("pretrained_model_name_or_path"),Hzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(":"),Yzo=l(),Kw=a("ul"),Gv=a("li"),Jce=a("strong"),Kzo=o("beit"),Zzo=o(" \u2014 "),CN=a("a"),eWo=o("BeitForSemanticSegmentation"),oWo=o(" (BEiT model)"),rWo=l(),Ov=a("li"),Yce=a("strong"),tWo=o("segformer"),aWo=o(" \u2014 "),MN=a("a"),nWo=o("SegformerForSemanticSegmentation"),sWo=o(" (SegFormer model)"),lWo=l(),Xv=a("p"),iWo=o("The model is set in evaluation mode by default using "),Kce=a("code"),dWo=o("model.eval()"),cWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=a("code"),fWo=o("model.train()"),mWo=l(),efe=a("p"),gWo=o("Examples:"),hWo=l(),f(Zw.$$.fragment),VBe=l(),oc=a("h2"),Vv=a("a"),ofe=a("span"),f(e6.$$.fragment),pWo=l(),rfe=a("span"),_Wo=o("TFAutoModel"),zBe=l(),pr=a("div"),f(o6.$$.fragment),uWo=l(),rc=a("p"),bWo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tfe=a("code"),vWo=o("from_pretrained()"),TWo=o("class method or the "),afe=a("code"),FWo=o("from_config()"),CWo=o(`class
method.`),MWo=l(),r6=a("p"),EWo=o("This class cannot be instantiated directly using "),nfe=a("code"),yWo=o("__init__()"),wWo=o(" (throws an error)."),AWo=l(),it=a("div"),f(t6.$$.fragment),LWo=l(),sfe=a("p"),BWo=o("Instantiates one of the base model classes of the library from a configuration."),xWo=l(),tc=a("p"),kWo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),RWo=o("not"),SWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ife=a("code"),PWo=o("from_pretrained()"),$Wo=o("to load the model weights."),IWo=l(),dfe=a("p"),DWo=o("Examples:"),jWo=l(),f(a6.$$.fragment),NWo=l(),go=a("div"),f(n6.$$.fragment),qWo=l(),cfe=a("p"),GWo=o("Instantiate one of the base model classes of the library from a pretrained model."),OWo=l(),cn=a("p"),XWo=o("The model class to instantiate is selected based on the "),ffe=a("code"),VWo=o("model_type"),zWo=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),WWo=o("pretrained_model_name_or_path"),QWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),HWo=o("pretrained_model_name_or_path"),UWo=o(":"),JWo=l(),B=a("ul"),zv=a("li"),hfe=a("strong"),YWo=o("albert"),KWo=o(" \u2014 "),EN=a("a"),ZWo=o("TFAlbertModel"),eQo=o(" (ALBERT model)"),oQo=l(),Wv=a("li"),pfe=a("strong"),rQo=o("bart"),tQo=o(" \u2014 "),yN=a("a"),aQo=o("TFBartModel"),nQo=o(" (BART model)"),sQo=l(),Qv=a("li"),_fe=a("strong"),lQo=o("bert"),iQo=o(" \u2014 "),wN=a("a"),dQo=o("TFBertModel"),cQo=o(" (BERT model)"),fQo=l(),Hv=a("li"),ufe=a("strong"),mQo=o("blenderbot"),gQo=o(" \u2014 "),AN=a("a"),hQo=o("TFBlenderbotModel"),pQo=o(" (Blenderbot model)"),_Qo=l(),Uv=a("li"),bfe=a("strong"),uQo=o("blenderbot-small"),bQo=o(" \u2014 "),LN=a("a"),vQo=o("TFBlenderbotSmallModel"),TQo=o(" (BlenderbotSmall model)"),FQo=l(),Jv=a("li"),vfe=a("strong"),CQo=o("camembert"),MQo=o(" \u2014 "),BN=a("a"),EQo=o("TFCamembertModel"),yQo=o(" (CamemBERT model)"),wQo=l(),Yv=a("li"),Tfe=a("strong"),AQo=o("clip"),LQo=o(" \u2014 "),xN=a("a"),BQo=o("TFCLIPModel"),xQo=o(" (CLIP model)"),kQo=l(),Kv=a("li"),Ffe=a("strong"),RQo=o("convbert"),SQo=o(" \u2014 "),kN=a("a"),PQo=o("TFConvBertModel"),$Qo=o(" (ConvBERT model)"),IQo=l(),Zv=a("li"),Cfe=a("strong"),DQo=o("convnext"),jQo=o(" \u2014 "),RN=a("a"),NQo=o("TFConvNextModel"),qQo=o(" (ConvNext model)"),GQo=l(),eT=a("li"),Mfe=a("strong"),OQo=o("ctrl"),XQo=o(" \u2014 "),SN=a("a"),VQo=o("TFCTRLModel"),zQo=o(" (CTRL model)"),WQo=l(),oT=a("li"),Efe=a("strong"),QQo=o("deberta"),HQo=o(" \u2014 "),PN=a("a"),UQo=o("TFDebertaModel"),JQo=o(" (DeBERTa model)"),YQo=l(),rT=a("li"),yfe=a("strong"),KQo=o("deberta-v2"),ZQo=o(" \u2014 "),$N=a("a"),eHo=o("TFDebertaV2Model"),oHo=o(" (DeBERTa-v2 model)"),rHo=l(),tT=a("li"),wfe=a("strong"),tHo=o("distilbert"),aHo=o(" \u2014 "),IN=a("a"),nHo=o("TFDistilBertModel"),sHo=o(" (DistilBERT model)"),lHo=l(),aT=a("li"),Afe=a("strong"),iHo=o("dpr"),dHo=o(" \u2014 "),DN=a("a"),cHo=o("TFDPRQuestionEncoder"),fHo=o(" (DPR model)"),mHo=l(),nT=a("li"),Lfe=a("strong"),gHo=o("electra"),hHo=o(" \u2014 "),jN=a("a"),pHo=o("TFElectraModel"),_Ho=o(" (ELECTRA model)"),uHo=l(),sT=a("li"),Bfe=a("strong"),bHo=o("flaubert"),vHo=o(" \u2014 "),NN=a("a"),THo=o("TFFlaubertModel"),FHo=o(" (FlauBERT model)"),CHo=l(),$s=a("li"),xfe=a("strong"),MHo=o("funnel"),EHo=o(" \u2014 "),qN=a("a"),yHo=o("TFFunnelModel"),wHo=o(" or "),GN=a("a"),AHo=o("TFFunnelBaseModel"),LHo=o(" (Funnel Transformer model)"),BHo=l(),lT=a("li"),kfe=a("strong"),xHo=o("gpt2"),kHo=o(" \u2014 "),ON=a("a"),RHo=o("TFGPT2Model"),SHo=o(" (OpenAI GPT-2 model)"),PHo=l(),iT=a("li"),Rfe=a("strong"),$Ho=o("hubert"),IHo=o(" \u2014 "),XN=a("a"),DHo=o("TFHubertModel"),jHo=o(" (Hubert model)"),NHo=l(),dT=a("li"),Sfe=a("strong"),qHo=o("layoutlm"),GHo=o(" \u2014 "),VN=a("a"),OHo=o("TFLayoutLMModel"),XHo=o(" (LayoutLM model)"),VHo=l(),cT=a("li"),Pfe=a("strong"),zHo=o("led"),WHo=o(" \u2014 "),zN=a("a"),QHo=o("TFLEDModel"),HHo=o(" (LED model)"),UHo=l(),fT=a("li"),$fe=a("strong"),JHo=o("longformer"),YHo=o(" \u2014 "),WN=a("a"),KHo=o("TFLongformerModel"),ZHo=o(" (Longformer model)"),eUo=l(),mT=a("li"),Ife=a("strong"),oUo=o("lxmert"),rUo=o(" \u2014 "),QN=a("a"),tUo=o("TFLxmertModel"),aUo=o(" (LXMERT model)"),nUo=l(),gT=a("li"),Dfe=a("strong"),sUo=o("marian"),lUo=o(" \u2014 "),HN=a("a"),iUo=o("TFMarianModel"),dUo=o(" (Marian model)"),cUo=l(),hT=a("li"),jfe=a("strong"),fUo=o("mbart"),mUo=o(" \u2014 "),UN=a("a"),gUo=o("TFMBartModel"),hUo=o(" (mBART model)"),pUo=l(),pT=a("li"),Nfe=a("strong"),_Uo=o("mobilebert"),uUo=o(" \u2014 "),JN=a("a"),bUo=o("TFMobileBertModel"),vUo=o(" (MobileBERT model)"),TUo=l(),_T=a("li"),qfe=a("strong"),FUo=o("mpnet"),CUo=o(" \u2014 "),YN=a("a"),MUo=o("TFMPNetModel"),EUo=o(" (MPNet model)"),yUo=l(),uT=a("li"),Gfe=a("strong"),wUo=o("mt5"),AUo=o(" \u2014 "),KN=a("a"),LUo=o("TFMT5Model"),BUo=o(" (mT5 model)"),xUo=l(),bT=a("li"),Ofe=a("strong"),kUo=o("openai-gpt"),RUo=o(" \u2014 "),ZN=a("a"),SUo=o("TFOpenAIGPTModel"),PUo=o(" (OpenAI GPT model)"),$Uo=l(),vT=a("li"),Xfe=a("strong"),IUo=o("pegasus"),DUo=o(" \u2014 "),eq=a("a"),jUo=o("TFPegasusModel"),NUo=o(" (Pegasus model)"),qUo=l(),TT=a("li"),Vfe=a("strong"),GUo=o("rembert"),OUo=o(" \u2014 "),oq=a("a"),XUo=o("TFRemBertModel"),VUo=o(" (RemBERT model)"),zUo=l(),FT=a("li"),zfe=a("strong"),WUo=o("roberta"),QUo=o(" \u2014 "),rq=a("a"),HUo=o("TFRobertaModel"),UUo=o(" (RoBERTa model)"),JUo=l(),CT=a("li"),Wfe=a("strong"),YUo=o("roformer"),KUo=o(" \u2014 "),tq=a("a"),ZUo=o("TFRoFormerModel"),eJo=o(" (RoFormer model)"),oJo=l(),MT=a("li"),Qfe=a("strong"),rJo=o("speech_to_text"),tJo=o(" \u2014 "),aq=a("a"),aJo=o("TFSpeech2TextModel"),nJo=o(" (Speech2Text model)"),sJo=l(),ET=a("li"),Hfe=a("strong"),lJo=o("t5"),iJo=o(" \u2014 "),nq=a("a"),dJo=o("TFT5Model"),cJo=o(" (T5 model)"),fJo=l(),yT=a("li"),Ufe=a("strong"),mJo=o("tapas"),gJo=o(" \u2014 "),sq=a("a"),hJo=o("TFTapasModel"),pJo=o(" (TAPAS model)"),_Jo=l(),wT=a("li"),Jfe=a("strong"),uJo=o("transfo-xl"),bJo=o(" \u2014 "),lq=a("a"),vJo=o("TFTransfoXLModel"),TJo=o(" (Transformer-XL model)"),FJo=l(),AT=a("li"),Yfe=a("strong"),CJo=o("vit"),MJo=o(" \u2014 "),iq=a("a"),EJo=o("TFViTModel"),yJo=o(" (ViT model)"),wJo=l(),LT=a("li"),Kfe=a("strong"),AJo=o("wav2vec2"),LJo=o(" \u2014 "),dq=a("a"),BJo=o("TFWav2Vec2Model"),xJo=o(" (Wav2Vec2 model)"),kJo=l(),BT=a("li"),Zfe=a("strong"),RJo=o("xlm"),SJo=o(" \u2014 "),cq=a("a"),PJo=o("TFXLMModel"),$Jo=o(" (XLM model)"),IJo=l(),xT=a("li"),eme=a("strong"),DJo=o("xlm-roberta"),jJo=o(" \u2014 "),fq=a("a"),NJo=o("TFXLMRobertaModel"),qJo=o(" (XLM-RoBERTa model)"),GJo=l(),kT=a("li"),ome=a("strong"),OJo=o("xlnet"),XJo=o(" \u2014 "),mq=a("a"),VJo=o("TFXLNetModel"),zJo=o(" (XLNet model)"),WJo=l(),rme=a("p"),QJo=o("Examples:"),HJo=l(),f(s6.$$.fragment),WBe=l(),ac=a("h2"),RT=a("a"),tme=a("span"),f(l6.$$.fragment),UJo=l(),ame=a("span"),JJo=o("TFAutoModelForPreTraining"),QBe=l(),_r=a("div"),f(i6.$$.fragment),YJo=l(),nc=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nme=a("code"),ZJo=o("from_pretrained()"),eYo=o("class method or the "),sme=a("code"),oYo=o("from_config()"),rYo=o(`class
method.`),tYo=l(),d6=a("p"),aYo=o("This class cannot be instantiated directly using "),lme=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),dt=a("div"),f(c6.$$.fragment),iYo=l(),ime=a("p"),dYo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cYo=l(),sc=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),mYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cme=a("code"),hYo=o("from_pretrained()"),pYo=o("to load the model weights."),_Yo=l(),fme=a("p"),uYo=o("Examples:"),bYo=l(),f(f6.$$.fragment),vYo=l(),ho=a("div"),f(m6.$$.fragment),TYo=l(),mme=a("p"),FYo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CYo=l(),fn=a("p"),MYo=o("The model class to instantiate is selected based on the "),gme=a("code"),EYo=o("model_type"),yYo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),wYo=o("pretrained_model_name_or_path"),AYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=a("code"),LYo=o("pretrained_model_name_or_path"),BYo=o(":"),xYo=l(),H=a("ul"),ST=a("li"),_me=a("strong"),kYo=o("albert"),RYo=o(" \u2014 "),gq=a("a"),SYo=o("TFAlbertForPreTraining"),PYo=o(" (ALBERT model)"),$Yo=l(),PT=a("li"),ume=a("strong"),IYo=o("bart"),DYo=o(" \u2014 "),hq=a("a"),jYo=o("TFBartForConditionalGeneration"),NYo=o(" (BART model)"),qYo=l(),$T=a("li"),bme=a("strong"),GYo=o("bert"),OYo=o(" \u2014 "),pq=a("a"),XYo=o("TFBertForPreTraining"),VYo=o(" (BERT model)"),zYo=l(),IT=a("li"),vme=a("strong"),WYo=o("camembert"),QYo=o(" \u2014 "),_q=a("a"),HYo=o("TFCamembertForMaskedLM"),UYo=o(" (CamemBERT model)"),JYo=l(),DT=a("li"),Tme=a("strong"),YYo=o("ctrl"),KYo=o(" \u2014 "),uq=a("a"),ZYo=o("TFCTRLLMHeadModel"),eKo=o(" (CTRL model)"),oKo=l(),jT=a("li"),Fme=a("strong"),rKo=o("distilbert"),tKo=o(" \u2014 "),bq=a("a"),aKo=o("TFDistilBertForMaskedLM"),nKo=o(" (DistilBERT model)"),sKo=l(),NT=a("li"),Cme=a("strong"),lKo=o("electra"),iKo=o(" \u2014 "),vq=a("a"),dKo=o("TFElectraForPreTraining"),cKo=o(" (ELECTRA model)"),fKo=l(),qT=a("li"),Mme=a("strong"),mKo=o("flaubert"),gKo=o(" \u2014 "),Tq=a("a"),hKo=o("TFFlaubertWithLMHeadModel"),pKo=o(" (FlauBERT model)"),_Ko=l(),GT=a("li"),Eme=a("strong"),uKo=o("funnel"),bKo=o(" \u2014 "),Fq=a("a"),vKo=o("TFFunnelForPreTraining"),TKo=o(" (Funnel Transformer model)"),FKo=l(),OT=a("li"),yme=a("strong"),CKo=o("gpt2"),MKo=o(" \u2014 "),Cq=a("a"),EKo=o("TFGPT2LMHeadModel"),yKo=o(" (OpenAI GPT-2 model)"),wKo=l(),XT=a("li"),wme=a("strong"),AKo=o("layoutlm"),LKo=o(" \u2014 "),Mq=a("a"),BKo=o("TFLayoutLMForMaskedLM"),xKo=o(" (LayoutLM model)"),kKo=l(),VT=a("li"),Ame=a("strong"),RKo=o("lxmert"),SKo=o(" \u2014 "),Eq=a("a"),PKo=o("TFLxmertForPreTraining"),$Ko=o(" (LXMERT model)"),IKo=l(),zT=a("li"),Lme=a("strong"),DKo=o("mobilebert"),jKo=o(" \u2014 "),yq=a("a"),NKo=o("TFMobileBertForPreTraining"),qKo=o(" (MobileBERT model)"),GKo=l(),WT=a("li"),Bme=a("strong"),OKo=o("mpnet"),XKo=o(" \u2014 "),wq=a("a"),VKo=o("TFMPNetForMaskedLM"),zKo=o(" (MPNet model)"),WKo=l(),QT=a("li"),xme=a("strong"),QKo=o("openai-gpt"),HKo=o(" \u2014 "),Aq=a("a"),UKo=o("TFOpenAIGPTLMHeadModel"),JKo=o(" (OpenAI GPT model)"),YKo=l(),HT=a("li"),kme=a("strong"),KKo=o("roberta"),ZKo=o(" \u2014 "),Lq=a("a"),eZo=o("TFRobertaForMaskedLM"),oZo=o(" (RoBERTa model)"),rZo=l(),UT=a("li"),Rme=a("strong"),tZo=o("t5"),aZo=o(" \u2014 "),Bq=a("a"),nZo=o("TFT5ForConditionalGeneration"),sZo=o(" (T5 model)"),lZo=l(),JT=a("li"),Sme=a("strong"),iZo=o("tapas"),dZo=o(" \u2014 "),xq=a("a"),cZo=o("TFTapasForMaskedLM"),fZo=o(" (TAPAS model)"),mZo=l(),YT=a("li"),Pme=a("strong"),gZo=o("transfo-xl"),hZo=o(" \u2014 "),kq=a("a"),pZo=o("TFTransfoXLLMHeadModel"),_Zo=o(" (Transformer-XL model)"),uZo=l(),KT=a("li"),$me=a("strong"),bZo=o("xlm"),vZo=o(" \u2014 "),Rq=a("a"),TZo=o("TFXLMWithLMHeadModel"),FZo=o(" (XLM model)"),CZo=l(),ZT=a("li"),Ime=a("strong"),MZo=o("xlm-roberta"),EZo=o(" \u2014 "),Sq=a("a"),yZo=o("TFXLMRobertaForMaskedLM"),wZo=o(" (XLM-RoBERTa model)"),AZo=l(),eF=a("li"),Dme=a("strong"),LZo=o("xlnet"),BZo=o(" \u2014 "),Pq=a("a"),xZo=o("TFXLNetLMHeadModel"),kZo=o(" (XLNet model)"),RZo=l(),jme=a("p"),SZo=o("Examples:"),PZo=l(),f(g6.$$.fragment),HBe=l(),lc=a("h2"),oF=a("a"),Nme=a("span"),f(h6.$$.fragment),$Zo=l(),qme=a("span"),IZo=o("TFAutoModelForCausalLM"),UBe=l(),ur=a("div"),f(p6.$$.fragment),DZo=l(),ic=a("p"),jZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gme=a("code"),NZo=o("from_pretrained()"),qZo=o("class method or the "),Ome=a("code"),GZo=o("from_config()"),OZo=o(`class
method.`),XZo=l(),_6=a("p"),VZo=o("This class cannot be instantiated directly using "),Xme=a("code"),zZo=o("__init__()"),WZo=o(" (throws an error)."),QZo=l(),ct=a("div"),f(u6.$$.fragment),HZo=l(),Vme=a("p"),UZo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JZo=l(),dc=a("p"),YZo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),KZo=o("not"),ZZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=a("code"),eer=o("from_pretrained()"),oer=o("to load the model weights."),rer=l(),Qme=a("p"),ter=o("Examples:"),aer=l(),f(b6.$$.fragment),ner=l(),po=a("div"),f(v6.$$.fragment),ser=l(),Hme=a("p"),ler=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ier=l(),mn=a("p"),der=o("The model class to instantiate is selected based on the "),Ume=a("code"),cer=o("model_type"),fer=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),mer=o("pretrained_model_name_or_path"),ger=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),her=o("pretrained_model_name_or_path"),per=o(":"),_er=l(),pe=a("ul"),rF=a("li"),Kme=a("strong"),uer=o("bert"),ber=o(" \u2014 "),$q=a("a"),ver=o("TFBertLMHeadModel"),Ter=o(" (BERT model)"),Fer=l(),tF=a("li"),Zme=a("strong"),Cer=o("ctrl"),Mer=o(" \u2014 "),Iq=a("a"),Eer=o("TFCTRLLMHeadModel"),yer=o(" (CTRL model)"),wer=l(),aF=a("li"),ege=a("strong"),Aer=o("gpt2"),Ler=o(" \u2014 "),Dq=a("a"),Ber=o("TFGPT2LMHeadModel"),xer=o(" (OpenAI GPT-2 model)"),ker=l(),nF=a("li"),oge=a("strong"),Rer=o("openai-gpt"),Ser=o(" \u2014 "),jq=a("a"),Per=o("TFOpenAIGPTLMHeadModel"),$er=o(" (OpenAI GPT model)"),Ier=l(),sF=a("li"),rge=a("strong"),Der=o("rembert"),jer=o(" \u2014 "),Nq=a("a"),Ner=o("TFRemBertForCausalLM"),qer=o(" (RemBERT model)"),Ger=l(),lF=a("li"),tge=a("strong"),Oer=o("roberta"),Xer=o(" \u2014 "),qq=a("a"),Ver=o("TFRobertaForCausalLM"),zer=o(" (RoBERTa model)"),Wer=l(),iF=a("li"),age=a("strong"),Qer=o("roformer"),Her=o(" \u2014 "),Gq=a("a"),Uer=o("TFRoFormerForCausalLM"),Jer=o(" (RoFormer model)"),Yer=l(),dF=a("li"),nge=a("strong"),Ker=o("transfo-xl"),Zer=o(" \u2014 "),Oq=a("a"),eor=o("TFTransfoXLLMHeadModel"),oor=o(" (Transformer-XL model)"),ror=l(),cF=a("li"),sge=a("strong"),tor=o("xlm"),aor=o(" \u2014 "),Xq=a("a"),nor=o("TFXLMWithLMHeadModel"),sor=o(" (XLM model)"),lor=l(),fF=a("li"),lge=a("strong"),ior=o("xlnet"),dor=o(" \u2014 "),Vq=a("a"),cor=o("TFXLNetLMHeadModel"),mor=o(" (XLNet model)"),gor=l(),ige=a("p"),hor=o("Examples:"),por=l(),f(T6.$$.fragment),JBe=l(),cc=a("h2"),mF=a("a"),dge=a("span"),f(F6.$$.fragment),_or=l(),cge=a("span"),uor=o("TFAutoModelForImageClassification"),YBe=l(),br=a("div"),f(C6.$$.fragment),bor=l(),fc=a("p"),vor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fge=a("code"),Tor=o("from_pretrained()"),For=o("class method or the "),mge=a("code"),Cor=o("from_config()"),Mor=o(`class
method.`),Eor=l(),M6=a("p"),yor=o("This class cannot be instantiated directly using "),gge=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),Lor=l(),ft=a("div"),f(E6.$$.fragment),Bor=l(),hge=a("p"),xor=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kor=l(),mc=a("p"),Ror=o(`Note:
Loading a model from its configuration file does `),pge=a("strong"),Sor=o("not"),Por=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ge=a("code"),$or=o("from_pretrained()"),Ior=o("to load the model weights."),Dor=l(),uge=a("p"),jor=o("Examples:"),Nor=l(),f(y6.$$.fragment),qor=l(),_o=a("div"),f(w6.$$.fragment),Gor=l(),bge=a("p"),Oor=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xor=l(),gn=a("p"),Vor=o("The model class to instantiate is selected based on the "),vge=a("code"),zor=o("model_type"),Wor=o(` property of the config object (either
passed as an argument or loaded from `),Tge=a("code"),Qor=o("pretrained_model_name_or_path"),Hor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=a("code"),Uor=o("pretrained_model_name_or_path"),Jor=o(":"),Yor=l(),A6=a("ul"),gF=a("li"),Cge=a("strong"),Kor=o("convnext"),Zor=o(" \u2014 "),zq=a("a"),err=o("TFConvNextForImageClassification"),orr=o(" (ConvNext model)"),rrr=l(),hF=a("li"),Mge=a("strong"),trr=o("vit"),arr=o(" \u2014 "),Wq=a("a"),nrr=o("TFViTForImageClassification"),srr=o(" (ViT model)"),lrr=l(),Ege=a("p"),irr=o("Examples:"),drr=l(),f(L6.$$.fragment),KBe=l(),gc=a("h2"),pF=a("a"),yge=a("span"),f(B6.$$.fragment),crr=l(),wge=a("span"),frr=o("TFAutoModelForMaskedLM"),ZBe=l(),vr=a("div"),f(x6.$$.fragment),mrr=l(),hc=a("p"),grr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Age=a("code"),hrr=o("from_pretrained()"),prr=o("class method or the "),Lge=a("code"),_rr=o("from_config()"),urr=o(`class
method.`),brr=l(),k6=a("p"),vrr=o("This class cannot be instantiated directly using "),Bge=a("code"),Trr=o("__init__()"),Frr=o(" (throws an error)."),Crr=l(),mt=a("div"),f(R6.$$.fragment),Mrr=l(),xge=a("p"),Err=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yrr=l(),pc=a("p"),wrr=o(`Note:
Loading a model from its configuration file does `),kge=a("strong"),Arr=o("not"),Lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rge=a("code"),Brr=o("from_pretrained()"),xrr=o("to load the model weights."),krr=l(),Sge=a("p"),Rrr=o("Examples:"),Srr=l(),f(S6.$$.fragment),Prr=l(),uo=a("div"),f(P6.$$.fragment),$rr=l(),Pge=a("p"),Irr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Drr=l(),hn=a("p"),jrr=o("The model class to instantiate is selected based on the "),$ge=a("code"),Nrr=o("model_type"),qrr=o(` property of the config object (either
passed as an argument or loaded from `),Ige=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),Xrr=o("pretrained_model_name_or_path"),Vrr=o(":"),zrr=l(),Y=a("ul"),_F=a("li"),jge=a("strong"),Wrr=o("albert"),Qrr=o(" \u2014 "),Qq=a("a"),Hrr=o("TFAlbertForMaskedLM"),Urr=o(" (ALBERT model)"),Jrr=l(),uF=a("li"),Nge=a("strong"),Yrr=o("bert"),Krr=o(" \u2014 "),Hq=a("a"),Zrr=o("TFBertForMaskedLM"),etr=o(" (BERT model)"),otr=l(),bF=a("li"),qge=a("strong"),rtr=o("camembert"),ttr=o(" \u2014 "),Uq=a("a"),atr=o("TFCamembertForMaskedLM"),ntr=o(" (CamemBERT model)"),str=l(),vF=a("li"),Gge=a("strong"),ltr=o("convbert"),itr=o(" \u2014 "),Jq=a("a"),dtr=o("TFConvBertForMaskedLM"),ctr=o(" (ConvBERT model)"),ftr=l(),TF=a("li"),Oge=a("strong"),mtr=o("deberta"),gtr=o(" \u2014 "),Yq=a("a"),htr=o("TFDebertaForMaskedLM"),ptr=o(" (DeBERTa model)"),_tr=l(),FF=a("li"),Xge=a("strong"),utr=o("deberta-v2"),btr=o(" \u2014 "),Kq=a("a"),vtr=o("TFDebertaV2ForMaskedLM"),Ttr=o(" (DeBERTa-v2 model)"),Ftr=l(),CF=a("li"),Vge=a("strong"),Ctr=o("distilbert"),Mtr=o(" \u2014 "),Zq=a("a"),Etr=o("TFDistilBertForMaskedLM"),ytr=o(" (DistilBERT model)"),wtr=l(),MF=a("li"),zge=a("strong"),Atr=o("electra"),Ltr=o(" \u2014 "),eG=a("a"),Btr=o("TFElectraForMaskedLM"),xtr=o(" (ELECTRA model)"),ktr=l(),EF=a("li"),Wge=a("strong"),Rtr=o("flaubert"),Str=o(" \u2014 "),oG=a("a"),Ptr=o("TFFlaubertWithLMHeadModel"),$tr=o(" (FlauBERT model)"),Itr=l(),yF=a("li"),Qge=a("strong"),Dtr=o("funnel"),jtr=o(" \u2014 "),rG=a("a"),Ntr=o("TFFunnelForMaskedLM"),qtr=o(" (Funnel Transformer model)"),Gtr=l(),wF=a("li"),Hge=a("strong"),Otr=o("layoutlm"),Xtr=o(" \u2014 "),tG=a("a"),Vtr=o("TFLayoutLMForMaskedLM"),ztr=o(" (LayoutLM model)"),Wtr=l(),AF=a("li"),Uge=a("strong"),Qtr=o("longformer"),Htr=o(" \u2014 "),aG=a("a"),Utr=o("TFLongformerForMaskedLM"),Jtr=o(" (Longformer model)"),Ytr=l(),LF=a("li"),Jge=a("strong"),Ktr=o("mobilebert"),Ztr=o(" \u2014 "),nG=a("a"),ear=o("TFMobileBertForMaskedLM"),oar=o(" (MobileBERT model)"),rar=l(),BF=a("li"),Yge=a("strong"),tar=o("mpnet"),aar=o(" \u2014 "),sG=a("a"),nar=o("TFMPNetForMaskedLM"),sar=o(" (MPNet model)"),lar=l(),xF=a("li"),Kge=a("strong"),iar=o("rembert"),dar=o(" \u2014 "),lG=a("a"),car=o("TFRemBertForMaskedLM"),far=o(" (RemBERT model)"),mar=l(),kF=a("li"),Zge=a("strong"),gar=o("roberta"),har=o(" \u2014 "),iG=a("a"),par=o("TFRobertaForMaskedLM"),_ar=o(" (RoBERTa model)"),uar=l(),RF=a("li"),ehe=a("strong"),bar=o("roformer"),Tar=o(" \u2014 "),dG=a("a"),Far=o("TFRoFormerForMaskedLM"),Car=o(" (RoFormer model)"),Mar=l(),SF=a("li"),ohe=a("strong"),Ear=o("tapas"),yar=o(" \u2014 "),cG=a("a"),war=o("TFTapasForMaskedLM"),Aar=o(" (TAPAS model)"),Lar=l(),PF=a("li"),rhe=a("strong"),Bar=o("xlm"),xar=o(" \u2014 "),fG=a("a"),kar=o("TFXLMWithLMHeadModel"),Rar=o(" (XLM model)"),Sar=l(),$F=a("li"),the=a("strong"),Par=o("xlm-roberta"),$ar=o(" \u2014 "),mG=a("a"),Iar=o("TFXLMRobertaForMaskedLM"),Dar=o(" (XLM-RoBERTa model)"),jar=l(),ahe=a("p"),Nar=o("Examples:"),qar=l(),f($6.$$.fragment),exe=l(),_c=a("h2"),IF=a("a"),nhe=a("span"),f(I6.$$.fragment),Gar=l(),she=a("span"),Oar=o("TFAutoModelForSeq2SeqLM"),oxe=l(),Tr=a("div"),f(D6.$$.fragment),Xar=l(),uc=a("p"),Var=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lhe=a("code"),zar=o("from_pretrained()"),War=o("class method or the "),ihe=a("code"),Qar=o("from_config()"),Har=o(`class
method.`),Uar=l(),j6=a("p"),Jar=o("This class cannot be instantiated directly using "),dhe=a("code"),Yar=o("__init__()"),Kar=o(" (throws an error)."),Zar=l(),gt=a("div"),f(N6.$$.fragment),enr=l(),che=a("p"),onr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rnr=l(),bc=a("p"),tnr=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),anr=o("not"),nnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mhe=a("code"),snr=o("from_pretrained()"),lnr=o("to load the model weights."),inr=l(),ghe=a("p"),dnr=o("Examples:"),cnr=l(),f(q6.$$.fragment),fnr=l(),bo=a("div"),f(G6.$$.fragment),mnr=l(),hhe=a("p"),gnr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hnr=l(),pn=a("p"),pnr=o("The model class to instantiate is selected based on the "),phe=a("code"),_nr=o("model_type"),unr=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),bnr=o("pretrained_model_name_or_path"),vnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),Tnr=o("pretrained_model_name_or_path"),Fnr=o(":"),Cnr=l(),_e=a("ul"),DF=a("li"),bhe=a("strong"),Mnr=o("bart"),Enr=o(" \u2014 "),gG=a("a"),ynr=o("TFBartForConditionalGeneration"),wnr=o(" (BART model)"),Anr=l(),jF=a("li"),vhe=a("strong"),Lnr=o("blenderbot"),Bnr=o(" \u2014 "),hG=a("a"),xnr=o("TFBlenderbotForConditionalGeneration"),knr=o(" (Blenderbot model)"),Rnr=l(),NF=a("li"),The=a("strong"),Snr=o("blenderbot-small"),Pnr=o(" \u2014 "),pG=a("a"),$nr=o("TFBlenderbotSmallForConditionalGeneration"),Inr=o(" (BlenderbotSmall model)"),Dnr=l(),qF=a("li"),Fhe=a("strong"),jnr=o("encoder-decoder"),Nnr=o(" \u2014 "),_G=a("a"),qnr=o("TFEncoderDecoderModel"),Gnr=o(" (Encoder decoder model)"),Onr=l(),GF=a("li"),Che=a("strong"),Xnr=o("led"),Vnr=o(" \u2014 "),uG=a("a"),znr=o("TFLEDForConditionalGeneration"),Wnr=o(" (LED model)"),Qnr=l(),OF=a("li"),Mhe=a("strong"),Hnr=o("marian"),Unr=o(" \u2014 "),bG=a("a"),Jnr=o("TFMarianMTModel"),Ynr=o(" (Marian model)"),Knr=l(),XF=a("li"),Ehe=a("strong"),Znr=o("mbart"),esr=o(" \u2014 "),vG=a("a"),osr=o("TFMBartForConditionalGeneration"),rsr=o(" (mBART model)"),tsr=l(),VF=a("li"),yhe=a("strong"),asr=o("mt5"),nsr=o(" \u2014 "),TG=a("a"),ssr=o("TFMT5ForConditionalGeneration"),lsr=o(" (mT5 model)"),isr=l(),zF=a("li"),whe=a("strong"),dsr=o("pegasus"),csr=o(" \u2014 "),FG=a("a"),fsr=o("TFPegasusForConditionalGeneration"),msr=o(" (Pegasus model)"),gsr=l(),WF=a("li"),Ahe=a("strong"),hsr=o("t5"),psr=o(" \u2014 "),CG=a("a"),_sr=o("TFT5ForConditionalGeneration"),usr=o(" (T5 model)"),bsr=l(),Lhe=a("p"),vsr=o("Examples:"),Tsr=l(),f(O6.$$.fragment),rxe=l(),vc=a("h2"),QF=a("a"),Bhe=a("span"),f(X6.$$.fragment),Fsr=l(),xhe=a("span"),Csr=o("TFAutoModelForSequenceClassification"),txe=l(),Fr=a("div"),f(V6.$$.fragment),Msr=l(),Tc=a("p"),Esr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),khe=a("code"),ysr=o("from_pretrained()"),wsr=o("class method or the "),Rhe=a("code"),Asr=o("from_config()"),Lsr=o(`class
method.`),Bsr=l(),z6=a("p"),xsr=o("This class cannot be instantiated directly using "),She=a("code"),ksr=o("__init__()"),Rsr=o(" (throws an error)."),Ssr=l(),ht=a("div"),f(W6.$$.fragment),Psr=l(),Phe=a("p"),$sr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Isr=l(),Fc=a("p"),Dsr=o(`Note:
Loading a model from its configuration file does `),$he=a("strong"),jsr=o("not"),Nsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ihe=a("code"),qsr=o("from_pretrained()"),Gsr=o("to load the model weights."),Osr=l(),Dhe=a("p"),Xsr=o("Examples:"),Vsr=l(),f(Q6.$$.fragment),zsr=l(),vo=a("div"),f(H6.$$.fragment),Wsr=l(),jhe=a("p"),Qsr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hsr=l(),_n=a("p"),Usr=o("The model class to instantiate is selected based on the "),Nhe=a("code"),Jsr=o("model_type"),Ysr=o(` property of the config object (either
passed as an argument or loaded from `),qhe=a("code"),Ksr=o("pretrained_model_name_or_path"),Zsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),elr=o("pretrained_model_name_or_path"),olr=o(":"),rlr=l(),X=a("ul"),HF=a("li"),Ohe=a("strong"),tlr=o("albert"),alr=o(" \u2014 "),MG=a("a"),nlr=o("TFAlbertForSequenceClassification"),slr=o(" (ALBERT model)"),llr=l(),UF=a("li"),Xhe=a("strong"),ilr=o("bert"),dlr=o(" \u2014 "),EG=a("a"),clr=o("TFBertForSequenceClassification"),flr=o(" (BERT model)"),mlr=l(),JF=a("li"),Vhe=a("strong"),glr=o("camembert"),hlr=o(" \u2014 "),yG=a("a"),plr=o("TFCamembertForSequenceClassification"),_lr=o(" (CamemBERT model)"),ulr=l(),YF=a("li"),zhe=a("strong"),blr=o("convbert"),vlr=o(" \u2014 "),wG=a("a"),Tlr=o("TFConvBertForSequenceClassification"),Flr=o(" (ConvBERT model)"),Clr=l(),KF=a("li"),Whe=a("strong"),Mlr=o("ctrl"),Elr=o(" \u2014 "),AG=a("a"),ylr=o("TFCTRLForSequenceClassification"),wlr=o(" (CTRL model)"),Alr=l(),ZF=a("li"),Qhe=a("strong"),Llr=o("deberta"),Blr=o(" \u2014 "),LG=a("a"),xlr=o("TFDebertaForSequenceClassification"),klr=o(" (DeBERTa model)"),Rlr=l(),e9=a("li"),Hhe=a("strong"),Slr=o("deberta-v2"),Plr=o(" \u2014 "),BG=a("a"),$lr=o("TFDebertaV2ForSequenceClassification"),Ilr=o(" (DeBERTa-v2 model)"),Dlr=l(),o9=a("li"),Uhe=a("strong"),jlr=o("distilbert"),Nlr=o(" \u2014 "),xG=a("a"),qlr=o("TFDistilBertForSequenceClassification"),Glr=o(" (DistilBERT model)"),Olr=l(),r9=a("li"),Jhe=a("strong"),Xlr=o("electra"),Vlr=o(" \u2014 "),kG=a("a"),zlr=o("TFElectraForSequenceClassification"),Wlr=o(" (ELECTRA model)"),Qlr=l(),t9=a("li"),Yhe=a("strong"),Hlr=o("flaubert"),Ulr=o(" \u2014 "),RG=a("a"),Jlr=o("TFFlaubertForSequenceClassification"),Ylr=o(" (FlauBERT model)"),Klr=l(),a9=a("li"),Khe=a("strong"),Zlr=o("funnel"),eir=o(" \u2014 "),SG=a("a"),oir=o("TFFunnelForSequenceClassification"),rir=o(" (Funnel Transformer model)"),tir=l(),n9=a("li"),Zhe=a("strong"),air=o("gpt2"),nir=o(" \u2014 "),PG=a("a"),sir=o("TFGPT2ForSequenceClassification"),lir=o(" (OpenAI GPT-2 model)"),iir=l(),s9=a("li"),epe=a("strong"),dir=o("layoutlm"),cir=o(" \u2014 "),$G=a("a"),fir=o("TFLayoutLMForSequenceClassification"),mir=o(" (LayoutLM model)"),gir=l(),l9=a("li"),ope=a("strong"),hir=o("longformer"),pir=o(" \u2014 "),IG=a("a"),_ir=o("TFLongformerForSequenceClassification"),uir=o(" (Longformer model)"),bir=l(),i9=a("li"),rpe=a("strong"),vir=o("mobilebert"),Tir=o(" \u2014 "),DG=a("a"),Fir=o("TFMobileBertForSequenceClassification"),Cir=o(" (MobileBERT model)"),Mir=l(),d9=a("li"),tpe=a("strong"),Eir=o("mpnet"),yir=o(" \u2014 "),jG=a("a"),wir=o("TFMPNetForSequenceClassification"),Air=o(" (MPNet model)"),Lir=l(),c9=a("li"),ape=a("strong"),Bir=o("openai-gpt"),xir=o(" \u2014 "),NG=a("a"),kir=o("TFOpenAIGPTForSequenceClassification"),Rir=o(" (OpenAI GPT model)"),Sir=l(),f9=a("li"),npe=a("strong"),Pir=o("rembert"),$ir=o(" \u2014 "),qG=a("a"),Iir=o("TFRemBertForSequenceClassification"),Dir=o(" (RemBERT model)"),jir=l(),m9=a("li"),spe=a("strong"),Nir=o("roberta"),qir=o(" \u2014 "),GG=a("a"),Gir=o("TFRobertaForSequenceClassification"),Oir=o(" (RoBERTa model)"),Xir=l(),g9=a("li"),lpe=a("strong"),Vir=o("roformer"),zir=o(" \u2014 "),OG=a("a"),Wir=o("TFRoFormerForSequenceClassification"),Qir=o(" (RoFormer model)"),Hir=l(),h9=a("li"),ipe=a("strong"),Uir=o("tapas"),Jir=o(" \u2014 "),XG=a("a"),Yir=o("TFTapasForSequenceClassification"),Kir=o(" (TAPAS model)"),Zir=l(),p9=a("li"),dpe=a("strong"),edr=o("transfo-xl"),odr=o(" \u2014 "),VG=a("a"),rdr=o("TFTransfoXLForSequenceClassification"),tdr=o(" (Transformer-XL model)"),adr=l(),_9=a("li"),cpe=a("strong"),ndr=o("xlm"),sdr=o(" \u2014 "),zG=a("a"),ldr=o("TFXLMForSequenceClassification"),idr=o(" (XLM model)"),ddr=l(),u9=a("li"),fpe=a("strong"),cdr=o("xlm-roberta"),fdr=o(" \u2014 "),WG=a("a"),mdr=o("TFXLMRobertaForSequenceClassification"),gdr=o(" (XLM-RoBERTa model)"),hdr=l(),b9=a("li"),mpe=a("strong"),pdr=o("xlnet"),_dr=o(" \u2014 "),QG=a("a"),udr=o("TFXLNetForSequenceClassification"),bdr=o(" (XLNet model)"),vdr=l(),gpe=a("p"),Tdr=o("Examples:"),Fdr=l(),f(U6.$$.fragment),axe=l(),Cc=a("h2"),v9=a("a"),hpe=a("span"),f(J6.$$.fragment),Cdr=l(),ppe=a("span"),Mdr=o("TFAutoModelForMultipleChoice"),nxe=l(),Cr=a("div"),f(Y6.$$.fragment),Edr=l(),Mc=a("p"),ydr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_pe=a("code"),wdr=o("from_pretrained()"),Adr=o("class method or the "),upe=a("code"),Ldr=o("from_config()"),Bdr=o(`class
method.`),xdr=l(),K6=a("p"),kdr=o("This class cannot be instantiated directly using "),bpe=a("code"),Rdr=o("__init__()"),Sdr=o(" (throws an error)."),Pdr=l(),pt=a("div"),f(Z6.$$.fragment),$dr=l(),vpe=a("p"),Idr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ddr=l(),Ec=a("p"),jdr=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),Ndr=o("not"),qdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=a("code"),Gdr=o("from_pretrained()"),Odr=o("to load the model weights."),Xdr=l(),Cpe=a("p"),Vdr=o("Examples:"),zdr=l(),f(eA.$$.fragment),Wdr=l(),To=a("div"),f(oA.$$.fragment),Qdr=l(),Mpe=a("p"),Hdr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Udr=l(),un=a("p"),Jdr=o("The model class to instantiate is selected based on the "),Epe=a("code"),Ydr=o("model_type"),Kdr=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),Zdr=o("pretrained_model_name_or_path"),ecr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(":"),tcr=l(),te=a("ul"),T9=a("li"),Ape=a("strong"),acr=o("albert"),ncr=o(" \u2014 "),HG=a("a"),scr=o("TFAlbertForMultipleChoice"),lcr=o(" (ALBERT model)"),icr=l(),F9=a("li"),Lpe=a("strong"),dcr=o("bert"),ccr=o(" \u2014 "),UG=a("a"),fcr=o("TFBertForMultipleChoice"),mcr=o(" (BERT model)"),gcr=l(),C9=a("li"),Bpe=a("strong"),hcr=o("camembert"),pcr=o(" \u2014 "),JG=a("a"),_cr=o("TFCamembertForMultipleChoice"),ucr=o(" (CamemBERT model)"),bcr=l(),M9=a("li"),xpe=a("strong"),vcr=o("convbert"),Tcr=o(" \u2014 "),YG=a("a"),Fcr=o("TFConvBertForMultipleChoice"),Ccr=o(" (ConvBERT model)"),Mcr=l(),E9=a("li"),kpe=a("strong"),Ecr=o("distilbert"),ycr=o(" \u2014 "),KG=a("a"),wcr=o("TFDistilBertForMultipleChoice"),Acr=o(" (DistilBERT model)"),Lcr=l(),y9=a("li"),Rpe=a("strong"),Bcr=o("electra"),xcr=o(" \u2014 "),ZG=a("a"),kcr=o("TFElectraForMultipleChoice"),Rcr=o(" (ELECTRA model)"),Scr=l(),w9=a("li"),Spe=a("strong"),Pcr=o("flaubert"),$cr=o(" \u2014 "),eO=a("a"),Icr=o("TFFlaubertForMultipleChoice"),Dcr=o(" (FlauBERT model)"),jcr=l(),A9=a("li"),Ppe=a("strong"),Ncr=o("funnel"),qcr=o(" \u2014 "),oO=a("a"),Gcr=o("TFFunnelForMultipleChoice"),Ocr=o(" (Funnel Transformer model)"),Xcr=l(),L9=a("li"),$pe=a("strong"),Vcr=o("longformer"),zcr=o(" \u2014 "),rO=a("a"),Wcr=o("TFLongformerForMultipleChoice"),Qcr=o(" (Longformer model)"),Hcr=l(),B9=a("li"),Ipe=a("strong"),Ucr=o("mobilebert"),Jcr=o(" \u2014 "),tO=a("a"),Ycr=o("TFMobileBertForMultipleChoice"),Kcr=o(" (MobileBERT model)"),Zcr=l(),x9=a("li"),Dpe=a("strong"),efr=o("mpnet"),ofr=o(" \u2014 "),aO=a("a"),rfr=o("TFMPNetForMultipleChoice"),tfr=o(" (MPNet model)"),afr=l(),k9=a("li"),jpe=a("strong"),nfr=o("rembert"),sfr=o(" \u2014 "),nO=a("a"),lfr=o("TFRemBertForMultipleChoice"),ifr=o(" (RemBERT model)"),dfr=l(),R9=a("li"),Npe=a("strong"),cfr=o("roberta"),ffr=o(" \u2014 "),sO=a("a"),mfr=o("TFRobertaForMultipleChoice"),gfr=o(" (RoBERTa model)"),hfr=l(),S9=a("li"),qpe=a("strong"),pfr=o("roformer"),_fr=o(" \u2014 "),lO=a("a"),ufr=o("TFRoFormerForMultipleChoice"),bfr=o(" (RoFormer model)"),vfr=l(),P9=a("li"),Gpe=a("strong"),Tfr=o("xlm"),Ffr=o(" \u2014 "),iO=a("a"),Cfr=o("TFXLMForMultipleChoice"),Mfr=o(" (XLM model)"),Efr=l(),$9=a("li"),Ope=a("strong"),yfr=o("xlm-roberta"),wfr=o(" \u2014 "),dO=a("a"),Afr=o("TFXLMRobertaForMultipleChoice"),Lfr=o(" (XLM-RoBERTa model)"),Bfr=l(),I9=a("li"),Xpe=a("strong"),xfr=o("xlnet"),kfr=o(" \u2014 "),cO=a("a"),Rfr=o("TFXLNetForMultipleChoice"),Sfr=o(" (XLNet model)"),Pfr=l(),Vpe=a("p"),$fr=o("Examples:"),Ifr=l(),f(rA.$$.fragment),sxe=l(),yc=a("h2"),D9=a("a"),zpe=a("span"),f(tA.$$.fragment),Dfr=l(),Wpe=a("span"),jfr=o("TFAutoModelForTableQuestionAnswering"),lxe=l(),Mr=a("div"),f(aA.$$.fragment),Nfr=l(),wc=a("p"),qfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Qpe=a("code"),Gfr=o("from_pretrained()"),Ofr=o("class method or the "),Hpe=a("code"),Xfr=o("from_config()"),Vfr=o(`class
method.`),zfr=l(),nA=a("p"),Wfr=o("This class cannot be instantiated directly using "),Upe=a("code"),Qfr=o("__init__()"),Hfr=o(" (throws an error)."),Ufr=l(),_t=a("div"),f(sA.$$.fragment),Jfr=l(),Jpe=a("p"),Yfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kfr=l(),Ac=a("p"),Zfr=o(`Note:
Loading a model from its configuration file does `),Ype=a("strong"),emr=o("not"),omr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kpe=a("code"),rmr=o("from_pretrained()"),tmr=o("to load the model weights."),amr=l(),Zpe=a("p"),nmr=o("Examples:"),smr=l(),f(lA.$$.fragment),lmr=l(),Fo=a("div"),f(iA.$$.fragment),imr=l(),e_e=a("p"),dmr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cmr=l(),bn=a("p"),fmr=o("The model class to instantiate is selected based on the "),o_e=a("code"),mmr=o("model_type"),gmr=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),hmr=o("pretrained_model_name_or_path"),pmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),_mr=o("pretrained_model_name_or_path"),umr=o(":"),bmr=l(),a_e=a("ul"),j9=a("li"),n_e=a("strong"),vmr=o("tapas"),Tmr=o(" \u2014 "),fO=a("a"),Fmr=o("TFTapasForQuestionAnswering"),Cmr=o(" (TAPAS model)"),Mmr=l(),s_e=a("p"),Emr=o("Examples:"),ymr=l(),f(dA.$$.fragment),ixe=l(),Lc=a("h2"),N9=a("a"),l_e=a("span"),f(cA.$$.fragment),wmr=l(),i_e=a("span"),Amr=o("TFAutoModelForTokenClassification"),dxe=l(),Er=a("div"),f(fA.$$.fragment),Lmr=l(),Bc=a("p"),Bmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),d_e=a("code"),xmr=o("from_pretrained()"),kmr=o("class method or the "),c_e=a("code"),Rmr=o("from_config()"),Smr=o(`class
method.`),Pmr=l(),mA=a("p"),$mr=o("This class cannot be instantiated directly using "),f_e=a("code"),Imr=o("__init__()"),Dmr=o(" (throws an error)."),jmr=l(),ut=a("div"),f(gA.$$.fragment),Nmr=l(),m_e=a("p"),qmr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Gmr=l(),xc=a("p"),Omr=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),Xmr=o("not"),Vmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),h_e=a("code"),zmr=o("from_pretrained()"),Wmr=o("to load the model weights."),Qmr=l(),p_e=a("p"),Hmr=o("Examples:"),Umr=l(),f(hA.$$.fragment),Jmr=l(),Co=a("div"),f(pA.$$.fragment),Ymr=l(),__e=a("p"),Kmr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zmr=l(),vn=a("p"),egr=o("The model class to instantiate is selected based on the "),u_e=a("code"),ogr=o("model_type"),rgr=o(` property of the config object (either
passed as an argument or loaded from `),b_e=a("code"),tgr=o("pretrained_model_name_or_path"),agr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),ngr=o("pretrained_model_name_or_path"),sgr=o(":"),lgr=l(),K=a("ul"),q9=a("li"),T_e=a("strong"),igr=o("albert"),dgr=o(" \u2014 "),mO=a("a"),cgr=o("TFAlbertForTokenClassification"),fgr=o(" (ALBERT model)"),mgr=l(),G9=a("li"),F_e=a("strong"),ggr=o("bert"),hgr=o(" \u2014 "),gO=a("a"),pgr=o("TFBertForTokenClassification"),_gr=o(" (BERT model)"),ugr=l(),O9=a("li"),C_e=a("strong"),bgr=o("camembert"),vgr=o(" \u2014 "),hO=a("a"),Tgr=o("TFCamembertForTokenClassification"),Fgr=o(" (CamemBERT model)"),Cgr=l(),X9=a("li"),M_e=a("strong"),Mgr=o("convbert"),Egr=o(" \u2014 "),pO=a("a"),ygr=o("TFConvBertForTokenClassification"),wgr=o(" (ConvBERT model)"),Agr=l(),V9=a("li"),E_e=a("strong"),Lgr=o("deberta"),Bgr=o(" \u2014 "),_O=a("a"),xgr=o("TFDebertaForTokenClassification"),kgr=o(" (DeBERTa model)"),Rgr=l(),z9=a("li"),y_e=a("strong"),Sgr=o("deberta-v2"),Pgr=o(" \u2014 "),uO=a("a"),$gr=o("TFDebertaV2ForTokenClassification"),Igr=o(" (DeBERTa-v2 model)"),Dgr=l(),W9=a("li"),w_e=a("strong"),jgr=o("distilbert"),Ngr=o(" \u2014 "),bO=a("a"),qgr=o("TFDistilBertForTokenClassification"),Ggr=o(" (DistilBERT model)"),Ogr=l(),Q9=a("li"),A_e=a("strong"),Xgr=o("electra"),Vgr=o(" \u2014 "),vO=a("a"),zgr=o("TFElectraForTokenClassification"),Wgr=o(" (ELECTRA model)"),Qgr=l(),H9=a("li"),L_e=a("strong"),Hgr=o("flaubert"),Ugr=o(" \u2014 "),TO=a("a"),Jgr=o("TFFlaubertForTokenClassification"),Ygr=o(" (FlauBERT model)"),Kgr=l(),U9=a("li"),B_e=a("strong"),Zgr=o("funnel"),ehr=o(" \u2014 "),FO=a("a"),ohr=o("TFFunnelForTokenClassification"),rhr=o(" (Funnel Transformer model)"),thr=l(),J9=a("li"),x_e=a("strong"),ahr=o("layoutlm"),nhr=o(" \u2014 "),CO=a("a"),shr=o("TFLayoutLMForTokenClassification"),lhr=o(" (LayoutLM model)"),ihr=l(),Y9=a("li"),k_e=a("strong"),dhr=o("longformer"),chr=o(" \u2014 "),MO=a("a"),fhr=o("TFLongformerForTokenClassification"),mhr=o(" (Longformer model)"),ghr=l(),K9=a("li"),R_e=a("strong"),hhr=o("mobilebert"),phr=o(" \u2014 "),EO=a("a"),_hr=o("TFMobileBertForTokenClassification"),uhr=o(" (MobileBERT model)"),bhr=l(),Z9=a("li"),S_e=a("strong"),vhr=o("mpnet"),Thr=o(" \u2014 "),yO=a("a"),Fhr=o("TFMPNetForTokenClassification"),Chr=o(" (MPNet model)"),Mhr=l(),eC=a("li"),P_e=a("strong"),Ehr=o("rembert"),yhr=o(" \u2014 "),wO=a("a"),whr=o("TFRemBertForTokenClassification"),Ahr=o(" (RemBERT model)"),Lhr=l(),oC=a("li"),$_e=a("strong"),Bhr=o("roberta"),xhr=o(" \u2014 "),AO=a("a"),khr=o("TFRobertaForTokenClassification"),Rhr=o(" (RoBERTa model)"),Shr=l(),rC=a("li"),I_e=a("strong"),Phr=o("roformer"),$hr=o(" \u2014 "),LO=a("a"),Ihr=o("TFRoFormerForTokenClassification"),Dhr=o(" (RoFormer model)"),jhr=l(),tC=a("li"),D_e=a("strong"),Nhr=o("xlm"),qhr=o(" \u2014 "),BO=a("a"),Ghr=o("TFXLMForTokenClassification"),Ohr=o(" (XLM model)"),Xhr=l(),aC=a("li"),j_e=a("strong"),Vhr=o("xlm-roberta"),zhr=o(" \u2014 "),xO=a("a"),Whr=o("TFXLMRobertaForTokenClassification"),Qhr=o(" (XLM-RoBERTa model)"),Hhr=l(),nC=a("li"),N_e=a("strong"),Uhr=o("xlnet"),Jhr=o(" \u2014 "),kO=a("a"),Yhr=o("TFXLNetForTokenClassification"),Khr=o(" (XLNet model)"),Zhr=l(),q_e=a("p"),epr=o("Examples:"),opr=l(),f(_A.$$.fragment),cxe=l(),kc=a("h2"),sC=a("a"),G_e=a("span"),f(uA.$$.fragment),rpr=l(),O_e=a("span"),tpr=o("TFAutoModelForQuestionAnswering"),fxe=l(),yr=a("div"),f(bA.$$.fragment),apr=l(),Rc=a("p"),npr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),X_e=a("code"),spr=o("from_pretrained()"),lpr=o("class method or the "),V_e=a("code"),ipr=o("from_config()"),dpr=o(`class
method.`),cpr=l(),vA=a("p"),fpr=o("This class cannot be instantiated directly using "),z_e=a("code"),mpr=o("__init__()"),gpr=o(" (throws an error)."),hpr=l(),bt=a("div"),f(TA.$$.fragment),ppr=l(),W_e=a("p"),_pr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),upr=l(),Sc=a("p"),bpr=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),vpr=o("not"),Tpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H_e=a("code"),Fpr=o("from_pretrained()"),Cpr=o("to load the model weights."),Mpr=l(),U_e=a("p"),Epr=o("Examples:"),ypr=l(),f(FA.$$.fragment),wpr=l(),Mo=a("div"),f(CA.$$.fragment),Apr=l(),J_e=a("p"),Lpr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Bpr=l(),Tn=a("p"),xpr=o("The model class to instantiate is selected based on the "),Y_e=a("code"),kpr=o("model_type"),Rpr=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),Spr=o("pretrained_model_name_or_path"),Ppr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),$pr=o("pretrained_model_name_or_path"),Ipr=o(":"),Dpr=l(),Z=a("ul"),lC=a("li"),eue=a("strong"),jpr=o("albert"),Npr=o(" \u2014 "),RO=a("a"),qpr=o("TFAlbertForQuestionAnswering"),Gpr=o(" (ALBERT model)"),Opr=l(),iC=a("li"),oue=a("strong"),Xpr=o("bert"),Vpr=o(" \u2014 "),SO=a("a"),zpr=o("TFBertForQuestionAnswering"),Wpr=o(" (BERT model)"),Qpr=l(),dC=a("li"),rue=a("strong"),Hpr=o("camembert"),Upr=o(" \u2014 "),PO=a("a"),Jpr=o("TFCamembertForQuestionAnswering"),Ypr=o(" (CamemBERT model)"),Kpr=l(),cC=a("li"),tue=a("strong"),Zpr=o("convbert"),e_r=o(" \u2014 "),$O=a("a"),o_r=o("TFConvBertForQuestionAnswering"),r_r=o(" (ConvBERT model)"),t_r=l(),fC=a("li"),aue=a("strong"),a_r=o("deberta"),n_r=o(" \u2014 "),IO=a("a"),s_r=o("TFDebertaForQuestionAnswering"),l_r=o(" (DeBERTa model)"),i_r=l(),mC=a("li"),nue=a("strong"),d_r=o("deberta-v2"),c_r=o(" \u2014 "),DO=a("a"),f_r=o("TFDebertaV2ForQuestionAnswering"),m_r=o(" (DeBERTa-v2 model)"),g_r=l(),gC=a("li"),sue=a("strong"),h_r=o("distilbert"),p_r=o(" \u2014 "),jO=a("a"),__r=o("TFDistilBertForQuestionAnswering"),u_r=o(" (DistilBERT model)"),b_r=l(),hC=a("li"),lue=a("strong"),v_r=o("electra"),T_r=o(" \u2014 "),NO=a("a"),F_r=o("TFElectraForQuestionAnswering"),C_r=o(" (ELECTRA model)"),M_r=l(),pC=a("li"),iue=a("strong"),E_r=o("flaubert"),y_r=o(" \u2014 "),qO=a("a"),w_r=o("TFFlaubertForQuestionAnsweringSimple"),A_r=o(" (FlauBERT model)"),L_r=l(),_C=a("li"),due=a("strong"),B_r=o("funnel"),x_r=o(" \u2014 "),GO=a("a"),k_r=o("TFFunnelForQuestionAnswering"),R_r=o(" (Funnel Transformer model)"),S_r=l(),uC=a("li"),cue=a("strong"),P_r=o("longformer"),$_r=o(" \u2014 "),OO=a("a"),I_r=o("TFLongformerForQuestionAnswering"),D_r=o(" (Longformer model)"),j_r=l(),bC=a("li"),fue=a("strong"),N_r=o("mobilebert"),q_r=o(" \u2014 "),XO=a("a"),G_r=o("TFMobileBertForQuestionAnswering"),O_r=o(" (MobileBERT model)"),X_r=l(),vC=a("li"),mue=a("strong"),V_r=o("mpnet"),z_r=o(" \u2014 "),VO=a("a"),W_r=o("TFMPNetForQuestionAnswering"),Q_r=o(" (MPNet model)"),H_r=l(),TC=a("li"),gue=a("strong"),U_r=o("rembert"),J_r=o(" \u2014 "),zO=a("a"),Y_r=o("TFRemBertForQuestionAnswering"),K_r=o(" (RemBERT model)"),Z_r=l(),FC=a("li"),hue=a("strong"),eur=o("roberta"),our=o(" \u2014 "),WO=a("a"),rur=o("TFRobertaForQuestionAnswering"),tur=o(" (RoBERTa model)"),aur=l(),CC=a("li"),pue=a("strong"),nur=o("roformer"),sur=o(" \u2014 "),QO=a("a"),lur=o("TFRoFormerForQuestionAnswering"),iur=o(" (RoFormer model)"),dur=l(),MC=a("li"),_ue=a("strong"),cur=o("xlm"),fur=o(" \u2014 "),HO=a("a"),mur=o("TFXLMForQuestionAnsweringSimple"),gur=o(" (XLM model)"),hur=l(),EC=a("li"),uue=a("strong"),pur=o("xlm-roberta"),_ur=o(" \u2014 "),UO=a("a"),uur=o("TFXLMRobertaForQuestionAnswering"),bur=o(" (XLM-RoBERTa model)"),vur=l(),yC=a("li"),bue=a("strong"),Tur=o("xlnet"),Fur=o(" \u2014 "),JO=a("a"),Cur=o("TFXLNetForQuestionAnsweringSimple"),Mur=o(" (XLNet model)"),Eur=l(),vue=a("p"),yur=o("Examples:"),wur=l(),f(MA.$$.fragment),mxe=l(),Pc=a("h2"),wC=a("a"),Tue=a("span"),f(EA.$$.fragment),Aur=l(),Fue=a("span"),Lur=o("TFAutoModelForVision2Seq"),gxe=l(),wr=a("div"),f(yA.$$.fragment),Bur=l(),$c=a("p"),xur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cue=a("code"),kur=o("from_pretrained()"),Rur=o("class method or the "),Mue=a("code"),Sur=o("from_config()"),Pur=o(`class
method.`),$ur=l(),wA=a("p"),Iur=o("This class cannot be instantiated directly using "),Eue=a("code"),Dur=o("__init__()"),jur=o(" (throws an error)."),Nur=l(),vt=a("div"),f(AA.$$.fragment),qur=l(),yue=a("p"),Gur=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Our=l(),Ic=a("p"),Xur=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),Vur=o("not"),zur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aue=a("code"),Wur=o("from_pretrained()"),Qur=o("to load the model weights."),Hur=l(),Lue=a("p"),Uur=o("Examples:"),Jur=l(),f(LA.$$.fragment),Yur=l(),Eo=a("div"),f(BA.$$.fragment),Kur=l(),Bue=a("p"),Zur=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),e1r=l(),Fn=a("p"),o1r=o("The model class to instantiate is selected based on the "),xue=a("code"),r1r=o("model_type"),t1r=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),a1r=o("pretrained_model_name_or_path"),n1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),s1r=o("pretrained_model_name_or_path"),l1r=o(":"),i1r=l(),Sue=a("ul"),AC=a("li"),Pue=a("strong"),d1r=o("vision-encoder-decoder"),c1r=o(" \u2014 "),YO=a("a"),f1r=o("TFVisionEncoderDecoderModel"),m1r=o(" (Vision Encoder decoder model)"),g1r=l(),$ue=a("p"),h1r=o("Examples:"),p1r=l(),f(xA.$$.fragment),hxe=l(),Dc=a("h2"),LC=a("a"),Iue=a("span"),f(kA.$$.fragment),_1r=l(),Due=a("span"),u1r=o("TFAutoModelForSpeechSeq2Seq"),pxe=l(),Ar=a("div"),f(RA.$$.fragment),b1r=l(),jc=a("p"),v1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jue=a("code"),T1r=o("from_pretrained()"),F1r=o("class method or the "),Nue=a("code"),C1r=o("from_config()"),M1r=o(`class
method.`),E1r=l(),SA=a("p"),y1r=o("This class cannot be instantiated directly using "),que=a("code"),w1r=o("__init__()"),A1r=o(" (throws an error)."),L1r=l(),Tt=a("div"),f(PA.$$.fragment),B1r=l(),Gue=a("p"),x1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),k1r=l(),Nc=a("p"),R1r=o(`Note:
Loading a model from its configuration file does `),Oue=a("strong"),S1r=o("not"),P1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xue=a("code"),$1r=o("from_pretrained()"),I1r=o("to load the model weights."),D1r=l(),Vue=a("p"),j1r=o("Examples:"),N1r=l(),f($A.$$.fragment),q1r=l(),yo=a("div"),f(IA.$$.fragment),G1r=l(),zue=a("p"),O1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),X1r=l(),Cn=a("p"),V1r=o("The model class to instantiate is selected based on the "),Wue=a("code"),z1r=o("model_type"),W1r=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),Q1r=o("pretrained_model_name_or_path"),H1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),U1r=o("pretrained_model_name_or_path"),J1r=o(":"),Y1r=l(),Uue=a("ul"),BC=a("li"),Jue=a("strong"),K1r=o("speech_to_text"),Z1r=o(" \u2014 "),KO=a("a"),e2r=o("TFSpeech2TextForConditionalGeneration"),o2r=o(" (Speech2Text model)"),r2r=l(),Yue=a("p"),t2r=o("Examples:"),a2r=l(),f(DA.$$.fragment),_xe=l(),qc=a("h2"),xC=a("a"),Kue=a("span"),f(jA.$$.fragment),n2r=l(),Zue=a("span"),s2r=o("FlaxAutoModel"),uxe=l(),Lr=a("div"),f(NA.$$.fragment),l2r=l(),Gc=a("p"),i2r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),e1e=a("code"),d2r=o("from_pretrained()"),c2r=o("class method or the "),o1e=a("code"),f2r=o("from_config()"),m2r=o(`class
method.`),g2r=l(),qA=a("p"),h2r=o("This class cannot be instantiated directly using "),r1e=a("code"),p2r=o("__init__()"),_2r=o(" (throws an error)."),u2r=l(),Ft=a("div"),f(GA.$$.fragment),b2r=l(),t1e=a("p"),v2r=o("Instantiates one of the base model classes of the library from a configuration."),T2r=l(),Oc=a("p"),F2r=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),C2r=o("not"),M2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n1e=a("code"),E2r=o("from_pretrained()"),y2r=o("to load the model weights."),w2r=l(),s1e=a("p"),A2r=o("Examples:"),L2r=l(),f(OA.$$.fragment),B2r=l(),wo=a("div"),f(XA.$$.fragment),x2r=l(),l1e=a("p"),k2r=o("Instantiate one of the base model classes of the library from a pretrained model."),R2r=l(),Mn=a("p"),S2r=o("The model class to instantiate is selected based on the "),i1e=a("code"),P2r=o("model_type"),$2r=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),I2r=o("pretrained_model_name_or_path"),D2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),j2r=o("pretrained_model_name_or_path"),N2r=o(":"),q2r=l(),z=a("ul"),kC=a("li"),f1e=a("strong"),G2r=o("albert"),O2r=o(" \u2014 "),ZO=a("a"),X2r=o("FlaxAlbertModel"),V2r=o(" (ALBERT model)"),z2r=l(),RC=a("li"),m1e=a("strong"),W2r=o("bart"),Q2r=o(" \u2014 "),eX=a("a"),H2r=o("FlaxBartModel"),U2r=o(" (BART model)"),J2r=l(),SC=a("li"),g1e=a("strong"),Y2r=o("beit"),K2r=o(" \u2014 "),oX=a("a"),Z2r=o("FlaxBeitModel"),ebr=o(" (BEiT model)"),obr=l(),PC=a("li"),h1e=a("strong"),rbr=o("bert"),tbr=o(" \u2014 "),rX=a("a"),abr=o("FlaxBertModel"),nbr=o(" (BERT model)"),sbr=l(),$C=a("li"),p1e=a("strong"),lbr=o("big_bird"),ibr=o(" \u2014 "),tX=a("a"),dbr=o("FlaxBigBirdModel"),cbr=o(" (BigBird model)"),fbr=l(),IC=a("li"),_1e=a("strong"),mbr=o("blenderbot"),gbr=o(" \u2014 "),aX=a("a"),hbr=o("FlaxBlenderbotModel"),pbr=o(" (Blenderbot model)"),_br=l(),DC=a("li"),u1e=a("strong"),ubr=o("blenderbot-small"),bbr=o(" \u2014 "),nX=a("a"),vbr=o("FlaxBlenderbotSmallModel"),Tbr=o(" (BlenderbotSmall model)"),Fbr=l(),jC=a("li"),b1e=a("strong"),Cbr=o("clip"),Mbr=o(" \u2014 "),sX=a("a"),Ebr=o("FlaxCLIPModel"),ybr=o(" (CLIP model)"),wbr=l(),NC=a("li"),v1e=a("strong"),Abr=o("distilbert"),Lbr=o(" \u2014 "),lX=a("a"),Bbr=o("FlaxDistilBertModel"),xbr=o(" (DistilBERT model)"),kbr=l(),qC=a("li"),T1e=a("strong"),Rbr=o("electra"),Sbr=o(" \u2014 "),iX=a("a"),Pbr=o("FlaxElectraModel"),$br=o(" (ELECTRA model)"),Ibr=l(),GC=a("li"),F1e=a("strong"),Dbr=o("gpt2"),jbr=o(" \u2014 "),dX=a("a"),Nbr=o("FlaxGPT2Model"),qbr=o(" (OpenAI GPT-2 model)"),Gbr=l(),OC=a("li"),C1e=a("strong"),Obr=o("gpt_neo"),Xbr=o(" \u2014 "),cX=a("a"),Vbr=o("FlaxGPTNeoModel"),zbr=o(" (GPT Neo model)"),Wbr=l(),XC=a("li"),M1e=a("strong"),Qbr=o("gptj"),Hbr=o(" \u2014 "),fX=a("a"),Ubr=o("FlaxGPTJModel"),Jbr=o(" (GPT-J model)"),Ybr=l(),VC=a("li"),E1e=a("strong"),Kbr=o("marian"),Zbr=o(" \u2014 "),mX=a("a"),e5r=o("FlaxMarianModel"),o5r=o(" (Marian model)"),r5r=l(),zC=a("li"),y1e=a("strong"),t5r=o("mbart"),a5r=o(" \u2014 "),gX=a("a"),n5r=o("FlaxMBartModel"),s5r=o(" (mBART model)"),l5r=l(),WC=a("li"),w1e=a("strong"),i5r=o("mt5"),d5r=o(" \u2014 "),hX=a("a"),c5r=o("FlaxMT5Model"),f5r=o(" (mT5 model)"),m5r=l(),QC=a("li"),A1e=a("strong"),g5r=o("pegasus"),h5r=o(" \u2014 "),pX=a("a"),p5r=o("FlaxPegasusModel"),_5r=o(" (Pegasus model)"),u5r=l(),HC=a("li"),L1e=a("strong"),b5r=o("roberta"),v5r=o(" \u2014 "),_X=a("a"),T5r=o("FlaxRobertaModel"),F5r=o(" (RoBERTa model)"),C5r=l(),UC=a("li"),B1e=a("strong"),M5r=o("roformer"),E5r=o(" \u2014 "),uX=a("a"),y5r=o("FlaxRoFormerModel"),w5r=o(" (RoFormer model)"),A5r=l(),JC=a("li"),x1e=a("strong"),L5r=o("t5"),B5r=o(" \u2014 "),bX=a("a"),x5r=o("FlaxT5Model"),k5r=o(" (T5 model)"),R5r=l(),YC=a("li"),k1e=a("strong"),S5r=o("vision-text-dual-encoder"),P5r=o(" \u2014 "),vX=a("a"),$5r=o("FlaxVisionTextDualEncoderModel"),I5r=o(" (VisionTextDualEncoder model)"),D5r=l(),KC=a("li"),R1e=a("strong"),j5r=o("vit"),N5r=o(" \u2014 "),TX=a("a"),q5r=o("FlaxViTModel"),G5r=o(" (ViT model)"),O5r=l(),ZC=a("li"),S1e=a("strong"),X5r=o("wav2vec2"),V5r=o(" \u2014 "),FX=a("a"),z5r=o("FlaxWav2Vec2Model"),W5r=o(" (Wav2Vec2 model)"),Q5r=l(),e4=a("li"),P1e=a("strong"),H5r=o("xglm"),U5r=o(" \u2014 "),CX=a("a"),J5r=o("FlaxXGLMModel"),Y5r=o(" (XGLM model)"),K5r=l(),$1e=a("p"),Z5r=o("Examples:"),evr=l(),f(VA.$$.fragment),bxe=l(),Xc=a("h2"),o4=a("a"),I1e=a("span"),f(zA.$$.fragment),ovr=l(),D1e=a("span"),rvr=o("FlaxAutoModelForCausalLM"),vxe=l(),Br=a("div"),f(WA.$$.fragment),tvr=l(),Vc=a("p"),avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),j1e=a("code"),nvr=o("from_pretrained()"),svr=o("class method or the "),N1e=a("code"),lvr=o("from_config()"),ivr=o(`class
method.`),dvr=l(),QA=a("p"),cvr=o("This class cannot be instantiated directly using "),q1e=a("code"),fvr=o("__init__()"),mvr=o(" (throws an error)."),gvr=l(),Ct=a("div"),f(HA.$$.fragment),hvr=l(),G1e=a("p"),pvr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_vr=l(),zc=a("p"),uvr=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),bvr=o("not"),vvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X1e=a("code"),Tvr=o("from_pretrained()"),Fvr=o("to load the model weights."),Cvr=l(),V1e=a("p"),Mvr=o("Examples:"),Evr=l(),f(UA.$$.fragment),yvr=l(),Ao=a("div"),f(JA.$$.fragment),wvr=l(),z1e=a("p"),Avr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lvr=l(),En=a("p"),Bvr=o("The model class to instantiate is selected based on the "),W1e=a("code"),xvr=o("model_type"),kvr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),Rvr=o("pretrained_model_name_or_path"),Svr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),Pvr=o("pretrained_model_name_or_path"),$vr=o(":"),Ivr=l(),yn=a("ul"),r4=a("li"),U1e=a("strong"),Dvr=o("gpt2"),jvr=o(" \u2014 "),MX=a("a"),Nvr=o("FlaxGPT2LMHeadModel"),qvr=o(" (OpenAI GPT-2 model)"),Gvr=l(),t4=a("li"),J1e=a("strong"),Ovr=o("gpt_neo"),Xvr=o(" \u2014 "),EX=a("a"),Vvr=o("FlaxGPTNeoForCausalLM"),zvr=o(" (GPT Neo model)"),Wvr=l(),a4=a("li"),Y1e=a("strong"),Qvr=o("gptj"),Hvr=o(" \u2014 "),yX=a("a"),Uvr=o("FlaxGPTJForCausalLM"),Jvr=o(" (GPT-J model)"),Yvr=l(),n4=a("li"),K1e=a("strong"),Kvr=o("xglm"),Zvr=o(" \u2014 "),wX=a("a"),eTr=o("FlaxXGLMForCausalLM"),oTr=o(" (XGLM model)"),rTr=l(),Z1e=a("p"),tTr=o("Examples:"),aTr=l(),f(YA.$$.fragment),Txe=l(),Wc=a("h2"),s4=a("a"),e2e=a("span"),f(KA.$$.fragment),nTr=l(),o2e=a("span"),sTr=o("FlaxAutoModelForPreTraining"),Fxe=l(),xr=a("div"),f(ZA.$$.fragment),lTr=l(),Qc=a("p"),iTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),r2e=a("code"),dTr=o("from_pretrained()"),cTr=o("class method or the "),t2e=a("code"),fTr=o("from_config()"),mTr=o(`class
method.`),gTr=l(),e0=a("p"),hTr=o("This class cannot be instantiated directly using "),a2e=a("code"),pTr=o("__init__()"),_Tr=o(" (throws an error)."),uTr=l(),Mt=a("div"),f(o0.$$.fragment),bTr=l(),n2e=a("p"),vTr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TTr=l(),Hc=a("p"),FTr=o(`Note:
Loading a model from its configuration file does `),s2e=a("strong"),CTr=o("not"),MTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l2e=a("code"),ETr=o("from_pretrained()"),yTr=o("to load the model weights."),wTr=l(),i2e=a("p"),ATr=o("Examples:"),LTr=l(),f(r0.$$.fragment),BTr=l(),Lo=a("div"),f(t0.$$.fragment),xTr=l(),d2e=a("p"),kTr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),RTr=l(),wn=a("p"),STr=o("The model class to instantiate is selected based on the "),c2e=a("code"),PTr=o("model_type"),$Tr=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),ITr=o("pretrained_model_name_or_path"),DTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),jTr=o("pretrained_model_name_or_path"),NTr=o(":"),qTr=l(),fe=a("ul"),l4=a("li"),g2e=a("strong"),GTr=o("albert"),OTr=o(" \u2014 "),AX=a("a"),XTr=o("FlaxAlbertForPreTraining"),VTr=o(" (ALBERT model)"),zTr=l(),i4=a("li"),h2e=a("strong"),WTr=o("bart"),QTr=o(" \u2014 "),LX=a("a"),HTr=o("FlaxBartForConditionalGeneration"),UTr=o(" (BART model)"),JTr=l(),d4=a("li"),p2e=a("strong"),YTr=o("bert"),KTr=o(" \u2014 "),BX=a("a"),ZTr=o("FlaxBertForPreTraining"),eFr=o(" (BERT model)"),oFr=l(),c4=a("li"),_2e=a("strong"),rFr=o("big_bird"),tFr=o(" \u2014 "),xX=a("a"),aFr=o("FlaxBigBirdForPreTraining"),nFr=o(" (BigBird model)"),sFr=l(),f4=a("li"),u2e=a("strong"),lFr=o("electra"),iFr=o(" \u2014 "),kX=a("a"),dFr=o("FlaxElectraForPreTraining"),cFr=o(" (ELECTRA model)"),fFr=l(),m4=a("li"),b2e=a("strong"),mFr=o("mbart"),gFr=o(" \u2014 "),RX=a("a"),hFr=o("FlaxMBartForConditionalGeneration"),pFr=o(" (mBART model)"),_Fr=l(),g4=a("li"),v2e=a("strong"),uFr=o("mt5"),bFr=o(" \u2014 "),SX=a("a"),vFr=o("FlaxMT5ForConditionalGeneration"),TFr=o(" (mT5 model)"),FFr=l(),h4=a("li"),T2e=a("strong"),CFr=o("roberta"),MFr=o(" \u2014 "),PX=a("a"),EFr=o("FlaxRobertaForMaskedLM"),yFr=o(" (RoBERTa model)"),wFr=l(),p4=a("li"),F2e=a("strong"),AFr=o("roformer"),LFr=o(" \u2014 "),$X=a("a"),BFr=o("FlaxRoFormerForMaskedLM"),xFr=o(" (RoFormer model)"),kFr=l(),_4=a("li"),C2e=a("strong"),RFr=o("t5"),SFr=o(" \u2014 "),IX=a("a"),PFr=o("FlaxT5ForConditionalGeneration"),$Fr=o(" (T5 model)"),IFr=l(),u4=a("li"),M2e=a("strong"),DFr=o("wav2vec2"),jFr=o(" \u2014 "),DX=a("a"),NFr=o("FlaxWav2Vec2ForPreTraining"),qFr=o(" (Wav2Vec2 model)"),GFr=l(),E2e=a("p"),OFr=o("Examples:"),XFr=l(),f(a0.$$.fragment),Cxe=l(),Uc=a("h2"),b4=a("a"),y2e=a("span"),f(n0.$$.fragment),VFr=l(),w2e=a("span"),zFr=o("FlaxAutoModelForMaskedLM"),Mxe=l(),kr=a("div"),f(s0.$$.fragment),WFr=l(),Jc=a("p"),QFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),A2e=a("code"),HFr=o("from_pretrained()"),UFr=o("class method or the "),L2e=a("code"),JFr=o("from_config()"),YFr=o(`class
method.`),KFr=l(),l0=a("p"),ZFr=o("This class cannot be instantiated directly using "),B2e=a("code"),e9r=o("__init__()"),o9r=o(" (throws an error)."),r9r=l(),Et=a("div"),f(i0.$$.fragment),t9r=l(),x2e=a("p"),a9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),n9r=l(),Yc=a("p"),s9r=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),l9r=o("not"),i9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R2e=a("code"),d9r=o("from_pretrained()"),c9r=o("to load the model weights."),f9r=l(),S2e=a("p"),m9r=o("Examples:"),g9r=l(),f(d0.$$.fragment),h9r=l(),Bo=a("div"),f(c0.$$.fragment),p9r=l(),P2e=a("p"),_9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),u9r=l(),An=a("p"),b9r=o("The model class to instantiate is selected based on the "),$2e=a("code"),v9r=o("model_type"),T9r=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),F9r=o("pretrained_model_name_or_path"),C9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),M9r=o("pretrained_model_name_or_path"),E9r=o(":"),y9r=l(),ve=a("ul"),v4=a("li"),j2e=a("strong"),w9r=o("albert"),A9r=o(" \u2014 "),jX=a("a"),L9r=o("FlaxAlbertForMaskedLM"),B9r=o(" (ALBERT model)"),x9r=l(),T4=a("li"),N2e=a("strong"),k9r=o("bart"),R9r=o(" \u2014 "),NX=a("a"),S9r=o("FlaxBartForConditionalGeneration"),P9r=o(" (BART model)"),$9r=l(),F4=a("li"),q2e=a("strong"),I9r=o("bert"),D9r=o(" \u2014 "),qX=a("a"),j9r=o("FlaxBertForMaskedLM"),N9r=o(" (BERT model)"),q9r=l(),C4=a("li"),G2e=a("strong"),G9r=o("big_bird"),O9r=o(" \u2014 "),GX=a("a"),X9r=o("FlaxBigBirdForMaskedLM"),V9r=o(" (BigBird model)"),z9r=l(),M4=a("li"),O2e=a("strong"),W9r=o("distilbert"),Q9r=o(" \u2014 "),OX=a("a"),H9r=o("FlaxDistilBertForMaskedLM"),U9r=o(" (DistilBERT model)"),J9r=l(),E4=a("li"),X2e=a("strong"),Y9r=o("electra"),K9r=o(" \u2014 "),XX=a("a"),Z9r=o("FlaxElectraForMaskedLM"),eCr=o(" (ELECTRA model)"),oCr=l(),y4=a("li"),V2e=a("strong"),rCr=o("mbart"),tCr=o(" \u2014 "),VX=a("a"),aCr=o("FlaxMBartForConditionalGeneration"),nCr=o(" (mBART model)"),sCr=l(),w4=a("li"),z2e=a("strong"),lCr=o("roberta"),iCr=o(" \u2014 "),zX=a("a"),dCr=o("FlaxRobertaForMaskedLM"),cCr=o(" (RoBERTa model)"),fCr=l(),A4=a("li"),W2e=a("strong"),mCr=o("roformer"),gCr=o(" \u2014 "),WX=a("a"),hCr=o("FlaxRoFormerForMaskedLM"),pCr=o(" (RoFormer model)"),_Cr=l(),Q2e=a("p"),uCr=o("Examples:"),bCr=l(),f(f0.$$.fragment),Exe=l(),Kc=a("h2"),L4=a("a"),H2e=a("span"),f(m0.$$.fragment),vCr=l(),U2e=a("span"),TCr=o("FlaxAutoModelForSeq2SeqLM"),yxe=l(),Rr=a("div"),f(g0.$$.fragment),FCr=l(),Zc=a("p"),CCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),J2e=a("code"),MCr=o("from_pretrained()"),ECr=o("class method or the "),Y2e=a("code"),yCr=o("from_config()"),wCr=o(`class
method.`),ACr=l(),h0=a("p"),LCr=o("This class cannot be instantiated directly using "),K2e=a("code"),BCr=o("__init__()"),xCr=o(" (throws an error)."),kCr=l(),yt=a("div"),f(p0.$$.fragment),RCr=l(),Z2e=a("p"),SCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PCr=l(),ef=a("p"),$Cr=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),ICr=o("not"),DCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),obe=a("code"),jCr=o("from_pretrained()"),NCr=o("to load the model weights."),qCr=l(),rbe=a("p"),GCr=o("Examples:"),OCr=l(),f(_0.$$.fragment),XCr=l(),xo=a("div"),f(u0.$$.fragment),VCr=l(),tbe=a("p"),zCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WCr=l(),Ln=a("p"),QCr=o("The model class to instantiate is selected based on the "),abe=a("code"),HCr=o("model_type"),UCr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),JCr=o("pretrained_model_name_or_path"),YCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),KCr=o("pretrained_model_name_or_path"),ZCr=o(":"),e4r=l(),Te=a("ul"),B4=a("li"),lbe=a("strong"),o4r=o("bart"),r4r=o(" \u2014 "),QX=a("a"),t4r=o("FlaxBartForConditionalGeneration"),a4r=o(" (BART model)"),n4r=l(),x4=a("li"),ibe=a("strong"),s4r=o("blenderbot"),l4r=o(" \u2014 "),HX=a("a"),i4r=o("FlaxBlenderbotForConditionalGeneration"),d4r=o(" (Blenderbot model)"),c4r=l(),k4=a("li"),dbe=a("strong"),f4r=o("blenderbot-small"),m4r=o(" \u2014 "),UX=a("a"),g4r=o("FlaxBlenderbotSmallForConditionalGeneration"),h4r=o(" (BlenderbotSmall model)"),p4r=l(),R4=a("li"),cbe=a("strong"),_4r=o("encoder-decoder"),u4r=o(" \u2014 "),JX=a("a"),b4r=o("FlaxEncoderDecoderModel"),v4r=o(" (Encoder decoder model)"),T4r=l(),S4=a("li"),fbe=a("strong"),F4r=o("marian"),C4r=o(" \u2014 "),YX=a("a"),M4r=o("FlaxMarianMTModel"),E4r=o(" (Marian model)"),y4r=l(),P4=a("li"),mbe=a("strong"),w4r=o("mbart"),A4r=o(" \u2014 "),KX=a("a"),L4r=o("FlaxMBartForConditionalGeneration"),B4r=o(" (mBART model)"),x4r=l(),$4=a("li"),gbe=a("strong"),k4r=o("mt5"),R4r=o(" \u2014 "),ZX=a("a"),S4r=o("FlaxMT5ForConditionalGeneration"),P4r=o(" (mT5 model)"),$4r=l(),I4=a("li"),hbe=a("strong"),I4r=o("pegasus"),D4r=o(" \u2014 "),eV=a("a"),j4r=o("FlaxPegasusForConditionalGeneration"),N4r=o(" (Pegasus model)"),q4r=l(),D4=a("li"),pbe=a("strong"),G4r=o("t5"),O4r=o(" \u2014 "),oV=a("a"),X4r=o("FlaxT5ForConditionalGeneration"),V4r=o(" (T5 model)"),z4r=l(),_be=a("p"),W4r=o("Examples:"),Q4r=l(),f(b0.$$.fragment),wxe=l(),of=a("h2"),j4=a("a"),ube=a("span"),f(v0.$$.fragment),H4r=l(),bbe=a("span"),U4r=o("FlaxAutoModelForSequenceClassification"),Axe=l(),Sr=a("div"),f(T0.$$.fragment),J4r=l(),rf=a("p"),Y4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vbe=a("code"),K4r=o("from_pretrained()"),Z4r=o("class method or the "),Tbe=a("code"),eMr=o("from_config()"),oMr=o(`class
method.`),rMr=l(),F0=a("p"),tMr=o("This class cannot be instantiated directly using "),Fbe=a("code"),aMr=o("__init__()"),nMr=o(" (throws an error)."),sMr=l(),wt=a("div"),f(C0.$$.fragment),lMr=l(),Cbe=a("p"),iMr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dMr=l(),tf=a("p"),cMr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),fMr=o("not"),mMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ebe=a("code"),gMr=o("from_pretrained()"),hMr=o("to load the model weights."),pMr=l(),ybe=a("p"),_Mr=o("Examples:"),uMr=l(),f(M0.$$.fragment),bMr=l(),ko=a("div"),f(E0.$$.fragment),vMr=l(),wbe=a("p"),TMr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FMr=l(),Bn=a("p"),CMr=o("The model class to instantiate is selected based on the "),Abe=a("code"),MMr=o("model_type"),EMr=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),yMr=o("pretrained_model_name_or_path"),wMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),AMr=o("pretrained_model_name_or_path"),LMr=o(":"),BMr=l(),Fe=a("ul"),N4=a("li"),xbe=a("strong"),xMr=o("albert"),kMr=o(" \u2014 "),rV=a("a"),RMr=o("FlaxAlbertForSequenceClassification"),SMr=o(" (ALBERT model)"),PMr=l(),q4=a("li"),kbe=a("strong"),$Mr=o("bart"),IMr=o(" \u2014 "),tV=a("a"),DMr=o("FlaxBartForSequenceClassification"),jMr=o(" (BART model)"),NMr=l(),G4=a("li"),Rbe=a("strong"),qMr=o("bert"),GMr=o(" \u2014 "),aV=a("a"),OMr=o("FlaxBertForSequenceClassification"),XMr=o(" (BERT model)"),VMr=l(),O4=a("li"),Sbe=a("strong"),zMr=o("big_bird"),WMr=o(" \u2014 "),nV=a("a"),QMr=o("FlaxBigBirdForSequenceClassification"),HMr=o(" (BigBird model)"),UMr=l(),X4=a("li"),Pbe=a("strong"),JMr=o("distilbert"),YMr=o(" \u2014 "),sV=a("a"),KMr=o("FlaxDistilBertForSequenceClassification"),ZMr=o(" (DistilBERT model)"),eEr=l(),V4=a("li"),$be=a("strong"),oEr=o("electra"),rEr=o(" \u2014 "),lV=a("a"),tEr=o("FlaxElectraForSequenceClassification"),aEr=o(" (ELECTRA model)"),nEr=l(),z4=a("li"),Ibe=a("strong"),sEr=o("mbart"),lEr=o(" \u2014 "),iV=a("a"),iEr=o("FlaxMBartForSequenceClassification"),dEr=o(" (mBART model)"),cEr=l(),W4=a("li"),Dbe=a("strong"),fEr=o("roberta"),mEr=o(" \u2014 "),dV=a("a"),gEr=o("FlaxRobertaForSequenceClassification"),hEr=o(" (RoBERTa model)"),pEr=l(),Q4=a("li"),jbe=a("strong"),_Er=o("roformer"),uEr=o(" \u2014 "),cV=a("a"),bEr=o("FlaxRoFormerForSequenceClassification"),vEr=o(" (RoFormer model)"),TEr=l(),Nbe=a("p"),FEr=o("Examples:"),CEr=l(),f(y0.$$.fragment),Lxe=l(),af=a("h2"),H4=a("a"),qbe=a("span"),f(w0.$$.fragment),MEr=l(),Gbe=a("span"),EEr=o("FlaxAutoModelForQuestionAnswering"),Bxe=l(),Pr=a("div"),f(A0.$$.fragment),yEr=l(),nf=a("p"),wEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Obe=a("code"),AEr=o("from_pretrained()"),LEr=o("class method or the "),Xbe=a("code"),BEr=o("from_config()"),xEr=o(`class
method.`),kEr=l(),L0=a("p"),REr=o("This class cannot be instantiated directly using "),Vbe=a("code"),SEr=o("__init__()"),PEr=o(" (throws an error)."),$Er=l(),At=a("div"),f(B0.$$.fragment),IEr=l(),zbe=a("p"),DEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jEr=l(),sf=a("p"),NEr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),qEr=o("not"),GEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qbe=a("code"),OEr=o("from_pretrained()"),XEr=o("to load the model weights."),VEr=l(),Hbe=a("p"),zEr=o("Examples:"),WEr=l(),f(x0.$$.fragment),QEr=l(),Ro=a("div"),f(k0.$$.fragment),HEr=l(),Ube=a("p"),UEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JEr=l(),xn=a("p"),YEr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),KEr=o("model_type"),ZEr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),e3r=o("pretrained_model_name_or_path"),o3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),r3r=o("pretrained_model_name_or_path"),t3r=o(":"),a3r=l(),Ce=a("ul"),U4=a("li"),Zbe=a("strong"),n3r=o("albert"),s3r=o(" \u2014 "),fV=a("a"),l3r=o("FlaxAlbertForQuestionAnswering"),i3r=o(" (ALBERT model)"),d3r=l(),J4=a("li"),e5e=a("strong"),c3r=o("bart"),f3r=o(" \u2014 "),mV=a("a"),m3r=o("FlaxBartForQuestionAnswering"),g3r=o(" (BART model)"),h3r=l(),Y4=a("li"),o5e=a("strong"),p3r=o("bert"),_3r=o(" \u2014 "),gV=a("a"),u3r=o("FlaxBertForQuestionAnswering"),b3r=o(" (BERT model)"),v3r=l(),K4=a("li"),r5e=a("strong"),T3r=o("big_bird"),F3r=o(" \u2014 "),hV=a("a"),C3r=o("FlaxBigBirdForQuestionAnswering"),M3r=o(" (BigBird model)"),E3r=l(),Z4=a("li"),t5e=a("strong"),y3r=o("distilbert"),w3r=o(" \u2014 "),pV=a("a"),A3r=o("FlaxDistilBertForQuestionAnswering"),L3r=o(" (DistilBERT model)"),B3r=l(),eM=a("li"),a5e=a("strong"),x3r=o("electra"),k3r=o(" \u2014 "),_V=a("a"),R3r=o("FlaxElectraForQuestionAnswering"),S3r=o(" (ELECTRA model)"),P3r=l(),oM=a("li"),n5e=a("strong"),$3r=o("mbart"),I3r=o(" \u2014 "),uV=a("a"),D3r=o("FlaxMBartForQuestionAnswering"),j3r=o(" (mBART model)"),N3r=l(),rM=a("li"),s5e=a("strong"),q3r=o("roberta"),G3r=o(" \u2014 "),bV=a("a"),O3r=o("FlaxRobertaForQuestionAnswering"),X3r=o(" (RoBERTa model)"),V3r=l(),tM=a("li"),l5e=a("strong"),z3r=o("roformer"),W3r=o(" \u2014 "),vV=a("a"),Q3r=o("FlaxRoFormerForQuestionAnswering"),H3r=o(" (RoFormer model)"),U3r=l(),i5e=a("p"),J3r=o("Examples:"),Y3r=l(),f(R0.$$.fragment),xxe=l(),lf=a("h2"),aM=a("a"),d5e=a("span"),f(S0.$$.fragment),K3r=l(),c5e=a("span"),Z3r=o("FlaxAutoModelForTokenClassification"),kxe=l(),$r=a("div"),f(P0.$$.fragment),eyr=l(),df=a("p"),oyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),f5e=a("code"),ryr=o("from_pretrained()"),tyr=o("class method or the "),m5e=a("code"),ayr=o("from_config()"),nyr=o(`class
method.`),syr=l(),$0=a("p"),lyr=o("This class cannot be instantiated directly using "),g5e=a("code"),iyr=o("__init__()"),dyr=o(" (throws an error)."),cyr=l(),Lt=a("div"),f(I0.$$.fragment),fyr=l(),h5e=a("p"),myr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gyr=l(),cf=a("p"),hyr=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),pyr=o("not"),_yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_5e=a("code"),uyr=o("from_pretrained()"),byr=o("to load the model weights."),vyr=l(),u5e=a("p"),Tyr=o("Examples:"),Fyr=l(),f(D0.$$.fragment),Cyr=l(),So=a("div"),f(j0.$$.fragment),Myr=l(),b5e=a("p"),Eyr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yyr=l(),kn=a("p"),wyr=o("The model class to instantiate is selected based on the "),v5e=a("code"),Ayr=o("model_type"),Lyr=o(` property of the config object (either
passed as an argument or loaded from `),T5e=a("code"),Byr=o("pretrained_model_name_or_path"),xyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),kyr=o("pretrained_model_name_or_path"),Ryr=o(":"),Syr=l(),so=a("ul"),nM=a("li"),C5e=a("strong"),Pyr=o("albert"),$yr=o(" \u2014 "),TV=a("a"),Iyr=o("FlaxAlbertForTokenClassification"),Dyr=o(" (ALBERT model)"),jyr=l(),sM=a("li"),M5e=a("strong"),Nyr=o("bert"),qyr=o(" \u2014 "),FV=a("a"),Gyr=o("FlaxBertForTokenClassification"),Oyr=o(" (BERT model)"),Xyr=l(),lM=a("li"),E5e=a("strong"),Vyr=o("big_bird"),zyr=o(" \u2014 "),CV=a("a"),Wyr=o("FlaxBigBirdForTokenClassification"),Qyr=o(" (BigBird model)"),Hyr=l(),iM=a("li"),y5e=a("strong"),Uyr=o("distilbert"),Jyr=o(" \u2014 "),MV=a("a"),Yyr=o("FlaxDistilBertForTokenClassification"),Kyr=o(" (DistilBERT model)"),Zyr=l(),dM=a("li"),w5e=a("strong"),ewr=o("electra"),owr=o(" \u2014 "),EV=a("a"),rwr=o("FlaxElectraForTokenClassification"),twr=o(" (ELECTRA model)"),awr=l(),cM=a("li"),A5e=a("strong"),nwr=o("roberta"),swr=o(" \u2014 "),yV=a("a"),lwr=o("FlaxRobertaForTokenClassification"),iwr=o(" (RoBERTa model)"),dwr=l(),fM=a("li"),L5e=a("strong"),cwr=o("roformer"),fwr=o(" \u2014 "),wV=a("a"),mwr=o("FlaxRoFormerForTokenClassification"),gwr=o(" (RoFormer model)"),hwr=l(),B5e=a("p"),pwr=o("Examples:"),_wr=l(),f(N0.$$.fragment),Rxe=l(),ff=a("h2"),mM=a("a"),x5e=a("span"),f(q0.$$.fragment),uwr=l(),k5e=a("span"),bwr=o("FlaxAutoModelForMultipleChoice"),Sxe=l(),Ir=a("div"),f(G0.$$.fragment),vwr=l(),mf=a("p"),Twr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),R5e=a("code"),Fwr=o("from_pretrained()"),Cwr=o("class method or the "),S5e=a("code"),Mwr=o("from_config()"),Ewr=o(`class
method.`),ywr=l(),O0=a("p"),wwr=o("This class cannot be instantiated directly using "),P5e=a("code"),Awr=o("__init__()"),Lwr=o(" (throws an error)."),Bwr=l(),Bt=a("div"),f(X0.$$.fragment),xwr=l(),$5e=a("p"),kwr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Rwr=l(),gf=a("p"),Swr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),Pwr=o("not"),$wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),D5e=a("code"),Iwr=o("from_pretrained()"),Dwr=o("to load the model weights."),jwr=l(),j5e=a("p"),Nwr=o("Examples:"),qwr=l(),f(V0.$$.fragment),Gwr=l(),Po=a("div"),f(z0.$$.fragment),Owr=l(),N5e=a("p"),Xwr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vwr=l(),Rn=a("p"),zwr=o("The model class to instantiate is selected based on the "),q5e=a("code"),Wwr=o("model_type"),Qwr=o(` property of the config object (either
passed as an argument or loaded from `),G5e=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=a("code"),Jwr=o("pretrained_model_name_or_path"),Ywr=o(":"),Kwr=l(),lo=a("ul"),gM=a("li"),X5e=a("strong"),Zwr=o("albert"),e6r=o(" \u2014 "),AV=a("a"),o6r=o("FlaxAlbertForMultipleChoice"),r6r=o(" (ALBERT model)"),t6r=l(),hM=a("li"),V5e=a("strong"),a6r=o("bert"),n6r=o(" \u2014 "),LV=a("a"),s6r=o("FlaxBertForMultipleChoice"),l6r=o(" (BERT model)"),i6r=l(),pM=a("li"),z5e=a("strong"),d6r=o("big_bird"),c6r=o(" \u2014 "),BV=a("a"),f6r=o("FlaxBigBirdForMultipleChoice"),m6r=o(" (BigBird model)"),g6r=l(),_M=a("li"),W5e=a("strong"),h6r=o("distilbert"),p6r=o(" \u2014 "),xV=a("a"),_6r=o("FlaxDistilBertForMultipleChoice"),u6r=o(" (DistilBERT model)"),b6r=l(),uM=a("li"),Q5e=a("strong"),v6r=o("electra"),T6r=o(" \u2014 "),kV=a("a"),F6r=o("FlaxElectraForMultipleChoice"),C6r=o(" (ELECTRA model)"),M6r=l(),bM=a("li"),H5e=a("strong"),E6r=o("roberta"),y6r=o(" \u2014 "),RV=a("a"),w6r=o("FlaxRobertaForMultipleChoice"),A6r=o(" (RoBERTa model)"),L6r=l(),vM=a("li"),U5e=a("strong"),B6r=o("roformer"),x6r=o(" \u2014 "),SV=a("a"),k6r=o("FlaxRoFormerForMultipleChoice"),R6r=o(" (RoFormer model)"),S6r=l(),J5e=a("p"),P6r=o("Examples:"),$6r=l(),f(W0.$$.fragment),Pxe=l(),hf=a("h2"),TM=a("a"),Y5e=a("span"),f(Q0.$$.fragment),I6r=l(),K5e=a("span"),D6r=o("FlaxAutoModelForNextSentencePrediction"),$xe=l(),Dr=a("div"),f(H0.$$.fragment),j6r=l(),pf=a("p"),N6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Z5e=a("code"),q6r=o("from_pretrained()"),G6r=o("class method or the "),eve=a("code"),O6r=o("from_config()"),X6r=o(`class
method.`),V6r=l(),U0=a("p"),z6r=o("This class cannot be instantiated directly using "),ove=a("code"),W6r=o("__init__()"),Q6r=o(" (throws an error)."),H6r=l(),xt=a("div"),f(J0.$$.fragment),U6r=l(),rve=a("p"),J6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Y6r=l(),_f=a("p"),K6r=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),Z6r=o("not"),eAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ave=a("code"),oAr=o("from_pretrained()"),rAr=o("to load the model weights."),tAr=l(),nve=a("p"),aAr=o("Examples:"),nAr=l(),f(Y0.$$.fragment),sAr=l(),$o=a("div"),f(K0.$$.fragment),lAr=l(),sve=a("p"),iAr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dAr=l(),Sn=a("p"),cAr=o("The model class to instantiate is selected based on the "),lve=a("code"),fAr=o("model_type"),mAr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),pAr=o("pretrained_model_name_or_path"),_Ar=o(":"),uAr=l(),cve=a("ul"),FM=a("li"),fve=a("strong"),bAr=o("bert"),vAr=o(" \u2014 "),PV=a("a"),TAr=o("FlaxBertForNextSentencePrediction"),FAr=o(" (BERT model)"),CAr=l(),mve=a("p"),MAr=o("Examples:"),EAr=l(),f(Z0.$$.fragment),Ixe=l(),uf=a("h2"),CM=a("a"),gve=a("span"),f(eL.$$.fragment),yAr=l(),hve=a("span"),wAr=o("FlaxAutoModelForImageClassification"),Dxe=l(),jr=a("div"),f(oL.$$.fragment),AAr=l(),bf=a("p"),LAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pve=a("code"),BAr=o("from_pretrained()"),xAr=o("class method or the "),_ve=a("code"),kAr=o("from_config()"),RAr=o(`class
method.`),SAr=l(),rL=a("p"),PAr=o("This class cannot be instantiated directly using "),uve=a("code"),$Ar=o("__init__()"),IAr=o(" (throws an error)."),DAr=l(),kt=a("div"),f(tL.$$.fragment),jAr=l(),bve=a("p"),NAr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qAr=l(),vf=a("p"),GAr=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),OAr=o("not"),XAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tve=a("code"),VAr=o("from_pretrained()"),zAr=o("to load the model weights."),WAr=l(),Fve=a("p"),QAr=o("Examples:"),HAr=l(),f(aL.$$.fragment),UAr=l(),Io=a("div"),f(nL.$$.fragment),JAr=l(),Cve=a("p"),YAr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KAr=l(),Pn=a("p"),ZAr=o("The model class to instantiate is selected based on the "),Mve=a("code"),e0r=o("model_type"),o0r=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(":"),s0r=l(),sL=a("ul"),MM=a("li"),wve=a("strong"),l0r=o("beit"),i0r=o(" \u2014 "),$V=a("a"),d0r=o("FlaxBeitForImageClassification"),c0r=o(" (BEiT model)"),f0r=l(),EM=a("li"),Ave=a("strong"),m0r=o("vit"),g0r=o(" \u2014 "),IV=a("a"),h0r=o("FlaxViTForImageClassification"),p0r=o(" (ViT model)"),_0r=l(),Lve=a("p"),u0r=o("Examples:"),b0r=l(),f(lL.$$.fragment),jxe=l(),Tf=a("h2"),yM=a("a"),Bve=a("span"),f(iL.$$.fragment),v0r=l(),xve=a("span"),T0r=o("FlaxAutoModelForVision2Seq"),Nxe=l(),Nr=a("div"),f(dL.$$.fragment),F0r=l(),Ff=a("p"),C0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kve=a("code"),M0r=o("from_pretrained()"),E0r=o("class method or the "),Rve=a("code"),y0r=o("from_config()"),w0r=o(`class
method.`),A0r=l(),cL=a("p"),L0r=o("This class cannot be instantiated directly using "),Sve=a("code"),B0r=o("__init__()"),x0r=o(" (throws an error)."),k0r=l(),Rt=a("div"),f(fL.$$.fragment),R0r=l(),Pve=a("p"),S0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),P0r=l(),Cf=a("p"),$0r=o(`Note:
Loading a model from its configuration file does `),$ve=a("strong"),I0r=o("not"),D0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ive=a("code"),j0r=o("from_pretrained()"),N0r=o("to load the model weights."),q0r=l(),Dve=a("p"),G0r=o("Examples:"),O0r=l(),f(mL.$$.fragment),X0r=l(),Do=a("div"),f(gL.$$.fragment),V0r=l(),jve=a("p"),z0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W0r=l(),$n=a("p"),Q0r=o("The model class to instantiate is selected based on the "),Nve=a("code"),H0r=o("model_type"),U0r=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),J0r=o("pretrained_model_name_or_path"),Y0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),K0r=o("pretrained_model_name_or_path"),Z0r=o(":"),eLr=l(),Ove=a("ul"),wM=a("li"),Xve=a("strong"),oLr=o("vision-encoder-decoder"),rLr=o(" \u2014 "),DV=a("a"),tLr=o("FlaxVisionEncoderDecoderModel"),aLr=o(" (Vision Encoder decoder model)"),nLr=l(),Vve=a("p"),sLr=o("Examples:"),lLr=l(),f(hL.$$.fragment),this.h()},l(c){const u=t5t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),xe=i(c),de=n(c,"H1",{class:!0});var pL=s(de);me=n(pL,"A",{id:!0,class:!0,href:!0});var zve=s(me);no=n(zve,"SPAN",{});var Wve=s(no);m(ce.$$.fragment,Wve),Wve.forEach(t),zve.forEach(t),be=i(pL),Go=n(pL,"SPAN",{});var dLr=s(Go);Li=r(dLr,"Auto Classes"),dLr.forEach(t),pL.forEach(t),Ef=i(c),sa=n(c,"P",{});var Gxe=s(sa);Bi=r(Gxe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(Gxe,"CODE",{});var cLr=s(xi);wE=r(cLr,"from_pretrained()"),cLr.forEach(t),yf=r(Gxe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Gxe.forEach(t),we=i(c),io=n(c,"P",{});var AM=s(io);ki=r(AM,"Instantiating one of "),In=n(AM,"A",{href:!0});var fLr=s(In);AE=r(fLr,"AutoConfig"),fLr.forEach(t),Dn=r(AM,", "),jn=n(AM,"A",{href:!0});var mLr=s(jn);LE=r(mLr,"AutoModel"),mLr.forEach(t),Ri=r(AM,`, and
`),Nn=n(AM,"A",{href:!0});var gLr=s(Nn);BE=r(gLr,"AutoTokenizer"),gLr.forEach(t),Si=r(AM," will directly create a class of the relevant architecture. For instance"),AM.forEach(t),wf=i(c),m($a.$$.fragment,c),co=i(c),ge=n(c,"P",{});var Oxe=s(ge);f8=r(Oxe,"will create a model that is an instance of "),Pi=n(Oxe,"A",{href:!0});var hLr=s(Pi);m8=r(hLr,"BertModel"),hLr.forEach(t),g8=r(Oxe,"."),Oxe.forEach(t),Oo=i(c),Ia=n(c,"P",{});var Xxe=s(Ia);h8=r(Xxe,"There is one class of "),Af=n(Xxe,"CODE",{});var pLr=s(Af);p8=r(pLr,"AutoModel"),pLr.forEach(t),YRe=r(Xxe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Xxe.forEach(t),G7e=i(c),$i=n(c,"H2",{class:!0});var Vxe=s($i);Lf=n(Vxe,"A",{id:!0,class:!0,href:!0});var _Lr=s(Lf);LW=n(_Lr,"SPAN",{});var uLr=s(LW);m(xE.$$.fragment,uLr),uLr.forEach(t),_Lr.forEach(t),KRe=i(Vxe),BW=n(Vxe,"SPAN",{});var bLr=s(BW);ZRe=r(bLr,"Extending the Auto Classes"),bLr.forEach(t),Vxe.forEach(t),O7e=i(c),qn=n(c,"P",{});var jV=s(qn);eSe=r(jV,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),xW=n(jV,"CODE",{});var vLr=s(xW);oSe=r(vLr,"NewModel"),vLr.forEach(t),rSe=r(jV,", make sure you have a "),kW=n(jV,"CODE",{});var TLr=s(kW);tSe=r(TLr,"NewModelConfig"),TLr.forEach(t),aSe=r(jV,` then you can add those to the auto
classes like this:`),jV.forEach(t),X7e=i(c),m(kE.$$.fragment,c),V7e=i(c),_8=n(c,"P",{});var FLr=s(_8);nSe=r(FLr,"You will then be able to use the auto classes like you would usually do!"),FLr.forEach(t),z7e=i(c),m(Bf.$$.fragment,c),W7e=i(c),Ii=n(c,"H2",{class:!0});var zxe=s(Ii);xf=n(zxe,"A",{id:!0,class:!0,href:!0});var CLr=s(xf);RW=n(CLr,"SPAN",{});var MLr=s(RW);m(RE.$$.fragment,MLr),MLr.forEach(t),CLr.forEach(t),sSe=i(zxe),SW=n(zxe,"SPAN",{});var ELr=s(SW);lSe=r(ELr,"AutoConfig"),ELr.forEach(t),zxe.forEach(t),Q7e=i(c),Xo=n(c,"DIV",{class:!0});var Is=s(Xo);m(SE.$$.fragment,Is),iSe=i(Is),PE=n(Is,"P",{});var Wxe=s(PE);dSe=r(Wxe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),u8=n(Wxe,"A",{href:!0});var yLr=s(u8);cSe=r(yLr,"from_pretrained()"),yLr.forEach(t),fSe=r(Wxe," class method."),Wxe.forEach(t),mSe=i(Is),$E=n(Is,"P",{});var Qxe=s($E);gSe=r(Qxe,"This class cannot be instantiated directly using "),PW=n(Qxe,"CODE",{});var wLr=s(PW);hSe=r(wLr,"__init__()"),wLr.forEach(t),pSe=r(Qxe," (throws an error)."),Qxe.forEach(t),_Se=i(Is),fo=n(Is,"DIV",{class:!0});var ia=s(fo);m(IE.$$.fragment,ia),uSe=i(ia),$W=n(ia,"P",{});var ALr=s($W);bSe=r(ALr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ALr.forEach(t),vSe=i(ia),Di=n(ia,"P",{});var NV=s(Di);TSe=r(NV,"The configuration class to instantiate is selected based on the "),IW=n(NV,"CODE",{});var LLr=s(IW);FSe=r(LLr,"model_type"),LLr.forEach(t),CSe=r(NV,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),DW=n(NV,"CODE",{});var BLr=s(DW);MSe=r(BLr,"pretrained_model_name_or_path"),BLr.forEach(t),ESe=r(NV,":"),NV.forEach(t),ySe=i(ia),v=n(ia,"UL",{});var T=s(v);kf=n(T,"LI",{});var Qve=s(kf);jW=n(Qve,"STRONG",{});var xLr=s(jW);wSe=r(xLr,"albert"),xLr.forEach(t),ASe=r(Qve," \u2014 "),b8=n(Qve,"A",{href:!0});var kLr=s(b8);LSe=r(kLr,"AlbertConfig"),kLr.forEach(t),BSe=r(Qve," (ALBERT model)"),Qve.forEach(t),xSe=i(T),Rf=n(T,"LI",{});var Hve=s(Rf);NW=n(Hve,"STRONG",{});var RLr=s(NW);kSe=r(RLr,"bart"),RLr.forEach(t),RSe=r(Hve," \u2014 "),v8=n(Hve,"A",{href:!0});var SLr=s(v8);SSe=r(SLr,"BartConfig"),SLr.forEach(t),PSe=r(Hve," (BART model)"),Hve.forEach(t),$Se=i(T),Sf=n(T,"LI",{});var Uve=s(Sf);qW=n(Uve,"STRONG",{});var PLr=s(qW);ISe=r(PLr,"beit"),PLr.forEach(t),DSe=r(Uve," \u2014 "),T8=n(Uve,"A",{href:!0});var $Lr=s(T8);jSe=r($Lr,"BeitConfig"),$Lr.forEach(t),NSe=r(Uve," (BEiT model)"),Uve.forEach(t),qSe=i(T),Pf=n(T,"LI",{});var Jve=s(Pf);GW=n(Jve,"STRONG",{});var ILr=s(GW);GSe=r(ILr,"bert"),ILr.forEach(t),OSe=r(Jve," \u2014 "),F8=n(Jve,"A",{href:!0});var DLr=s(F8);XSe=r(DLr,"BertConfig"),DLr.forEach(t),VSe=r(Jve," (BERT model)"),Jve.forEach(t),zSe=i(T),$f=n(T,"LI",{});var Yve=s($f);OW=n(Yve,"STRONG",{});var jLr=s(OW);WSe=r(jLr,"bert-generation"),jLr.forEach(t),QSe=r(Yve," \u2014 "),C8=n(Yve,"A",{href:!0});var NLr=s(C8);HSe=r(NLr,"BertGenerationConfig"),NLr.forEach(t),USe=r(Yve," (Bert Generation model)"),Yve.forEach(t),JSe=i(T),If=n(T,"LI",{});var Kve=s(If);XW=n(Kve,"STRONG",{});var qLr=s(XW);YSe=r(qLr,"big_bird"),qLr.forEach(t),KSe=r(Kve," \u2014 "),M8=n(Kve,"A",{href:!0});var GLr=s(M8);ZSe=r(GLr,"BigBirdConfig"),GLr.forEach(t),ePe=r(Kve," (BigBird model)"),Kve.forEach(t),oPe=i(T),Df=n(T,"LI",{});var Zve=s(Df);VW=n(Zve,"STRONG",{});var OLr=s(VW);rPe=r(OLr,"bigbird_pegasus"),OLr.forEach(t),tPe=r(Zve," \u2014 "),E8=n(Zve,"A",{href:!0});var XLr=s(E8);aPe=r(XLr,"BigBirdPegasusConfig"),XLr.forEach(t),nPe=r(Zve," (BigBirdPegasus model)"),Zve.forEach(t),sPe=i(T),jf=n(T,"LI",{});var eTe=s(jf);zW=n(eTe,"STRONG",{});var VLr=s(zW);lPe=r(VLr,"blenderbot"),VLr.forEach(t),iPe=r(eTe," \u2014 "),y8=n(eTe,"A",{href:!0});var zLr=s(y8);dPe=r(zLr,"BlenderbotConfig"),zLr.forEach(t),cPe=r(eTe," (Blenderbot model)"),eTe.forEach(t),fPe=i(T),Nf=n(T,"LI",{});var oTe=s(Nf);WW=n(oTe,"STRONG",{});var WLr=s(WW);mPe=r(WLr,"blenderbot-small"),WLr.forEach(t),gPe=r(oTe," \u2014 "),w8=n(oTe,"A",{href:!0});var QLr=s(w8);hPe=r(QLr,"BlenderbotSmallConfig"),QLr.forEach(t),pPe=r(oTe," (BlenderbotSmall model)"),oTe.forEach(t),_Pe=i(T),qf=n(T,"LI",{});var rTe=s(qf);QW=n(rTe,"STRONG",{});var HLr=s(QW);uPe=r(HLr,"camembert"),HLr.forEach(t),bPe=r(rTe," \u2014 "),A8=n(rTe,"A",{href:!0});var ULr=s(A8);vPe=r(ULr,"CamembertConfig"),ULr.forEach(t),TPe=r(rTe," (CamemBERT model)"),rTe.forEach(t),FPe=i(T),Gf=n(T,"LI",{});var tTe=s(Gf);HW=n(tTe,"STRONG",{});var JLr=s(HW);CPe=r(JLr,"canine"),JLr.forEach(t),MPe=r(tTe," \u2014 "),L8=n(tTe,"A",{href:!0});var YLr=s(L8);EPe=r(YLr,"CanineConfig"),YLr.forEach(t),yPe=r(tTe," (Canine model)"),tTe.forEach(t),wPe=i(T),Of=n(T,"LI",{});var aTe=s(Of);UW=n(aTe,"STRONG",{});var KLr=s(UW);APe=r(KLr,"clip"),KLr.forEach(t),LPe=r(aTe," \u2014 "),B8=n(aTe,"A",{href:!0});var ZLr=s(B8);BPe=r(ZLr,"CLIPConfig"),ZLr.forEach(t),xPe=r(aTe," (CLIP model)"),aTe.forEach(t),kPe=i(T),Xf=n(T,"LI",{});var nTe=s(Xf);JW=n(nTe,"STRONG",{});var e8r=s(JW);RPe=r(e8r,"convbert"),e8r.forEach(t),SPe=r(nTe," \u2014 "),x8=n(nTe,"A",{href:!0});var o8r=s(x8);PPe=r(o8r,"ConvBertConfig"),o8r.forEach(t),$Pe=r(nTe," (ConvBERT model)"),nTe.forEach(t),IPe=i(T),Vf=n(T,"LI",{});var sTe=s(Vf);YW=n(sTe,"STRONG",{});var r8r=s(YW);DPe=r(r8r,"convnext"),r8r.forEach(t),jPe=r(sTe," \u2014 "),k8=n(sTe,"A",{href:!0});var t8r=s(k8);NPe=r(t8r,"ConvNextConfig"),t8r.forEach(t),qPe=r(sTe," (ConvNext model)"),sTe.forEach(t),GPe=i(T),zf=n(T,"LI",{});var lTe=s(zf);KW=n(lTe,"STRONG",{});var a8r=s(KW);OPe=r(a8r,"ctrl"),a8r.forEach(t),XPe=r(lTe," \u2014 "),R8=n(lTe,"A",{href:!0});var n8r=s(R8);VPe=r(n8r,"CTRLConfig"),n8r.forEach(t),zPe=r(lTe," (CTRL model)"),lTe.forEach(t),WPe=i(T),Wf=n(T,"LI",{});var iTe=s(Wf);ZW=n(iTe,"STRONG",{});var s8r=s(ZW);QPe=r(s8r,"data2vec-audio"),s8r.forEach(t),HPe=r(iTe," \u2014 "),S8=n(iTe,"A",{href:!0});var l8r=s(S8);UPe=r(l8r,"Data2VecAudioConfig"),l8r.forEach(t),JPe=r(iTe," (Data2VecAudio model)"),iTe.forEach(t),YPe=i(T),Qf=n(T,"LI",{});var dTe=s(Qf);eQ=n(dTe,"STRONG",{});var i8r=s(eQ);KPe=r(i8r,"data2vec-text"),i8r.forEach(t),ZPe=r(dTe," \u2014 "),P8=n(dTe,"A",{href:!0});var d8r=s(P8);e$e=r(d8r,"Data2VecTextConfig"),d8r.forEach(t),o$e=r(dTe," (Data2VecText model)"),dTe.forEach(t),r$e=i(T),Hf=n(T,"LI",{});var cTe=s(Hf);oQ=n(cTe,"STRONG",{});var c8r=s(oQ);t$e=r(c8r,"deberta"),c8r.forEach(t),a$e=r(cTe," \u2014 "),$8=n(cTe,"A",{href:!0});var f8r=s($8);n$e=r(f8r,"DebertaConfig"),f8r.forEach(t),s$e=r(cTe," (DeBERTa model)"),cTe.forEach(t),l$e=i(T),Uf=n(T,"LI",{});var fTe=s(Uf);rQ=n(fTe,"STRONG",{});var m8r=s(rQ);i$e=r(m8r,"deberta-v2"),m8r.forEach(t),d$e=r(fTe," \u2014 "),I8=n(fTe,"A",{href:!0});var g8r=s(I8);c$e=r(g8r,"DebertaV2Config"),g8r.forEach(t),f$e=r(fTe," (DeBERTa-v2 model)"),fTe.forEach(t),m$e=i(T),Jf=n(T,"LI",{});var mTe=s(Jf);tQ=n(mTe,"STRONG",{});var h8r=s(tQ);g$e=r(h8r,"deit"),h8r.forEach(t),h$e=r(mTe," \u2014 "),D8=n(mTe,"A",{href:!0});var p8r=s(D8);p$e=r(p8r,"DeiTConfig"),p8r.forEach(t),_$e=r(mTe," (DeiT model)"),mTe.forEach(t),u$e=i(T),Yf=n(T,"LI",{});var gTe=s(Yf);aQ=n(gTe,"STRONG",{});var _8r=s(aQ);b$e=r(_8r,"detr"),_8r.forEach(t),v$e=r(gTe," \u2014 "),j8=n(gTe,"A",{href:!0});var u8r=s(j8);T$e=r(u8r,"DetrConfig"),u8r.forEach(t),F$e=r(gTe," (DETR model)"),gTe.forEach(t),C$e=i(T),Kf=n(T,"LI",{});var hTe=s(Kf);nQ=n(hTe,"STRONG",{});var b8r=s(nQ);M$e=r(b8r,"distilbert"),b8r.forEach(t),E$e=r(hTe," \u2014 "),N8=n(hTe,"A",{href:!0});var v8r=s(N8);y$e=r(v8r,"DistilBertConfig"),v8r.forEach(t),w$e=r(hTe," (DistilBERT model)"),hTe.forEach(t),A$e=i(T),Zf=n(T,"LI",{});var pTe=s(Zf);sQ=n(pTe,"STRONG",{});var T8r=s(sQ);L$e=r(T8r,"dpr"),T8r.forEach(t),B$e=r(pTe," \u2014 "),q8=n(pTe,"A",{href:!0});var F8r=s(q8);x$e=r(F8r,"DPRConfig"),F8r.forEach(t),k$e=r(pTe," (DPR model)"),pTe.forEach(t),R$e=i(T),em=n(T,"LI",{});var _Te=s(em);lQ=n(_Te,"STRONG",{});var C8r=s(lQ);S$e=r(C8r,"electra"),C8r.forEach(t),P$e=r(_Te," \u2014 "),G8=n(_Te,"A",{href:!0});var M8r=s(G8);$$e=r(M8r,"ElectraConfig"),M8r.forEach(t),I$e=r(_Te," (ELECTRA model)"),_Te.forEach(t),D$e=i(T),om=n(T,"LI",{});var uTe=s(om);iQ=n(uTe,"STRONG",{});var E8r=s(iQ);j$e=r(E8r,"encoder-decoder"),E8r.forEach(t),N$e=r(uTe," \u2014 "),O8=n(uTe,"A",{href:!0});var y8r=s(O8);q$e=r(y8r,"EncoderDecoderConfig"),y8r.forEach(t),G$e=r(uTe," (Encoder decoder model)"),uTe.forEach(t),O$e=i(T),rm=n(T,"LI",{});var bTe=s(rm);dQ=n(bTe,"STRONG",{});var w8r=s(dQ);X$e=r(w8r,"flaubert"),w8r.forEach(t),V$e=r(bTe," \u2014 "),X8=n(bTe,"A",{href:!0});var A8r=s(X8);z$e=r(A8r,"FlaubertConfig"),A8r.forEach(t),W$e=r(bTe," (FlauBERT model)"),bTe.forEach(t),Q$e=i(T),tm=n(T,"LI",{});var vTe=s(tm);cQ=n(vTe,"STRONG",{});var L8r=s(cQ);H$e=r(L8r,"fnet"),L8r.forEach(t),U$e=r(vTe," \u2014 "),V8=n(vTe,"A",{href:!0});var B8r=s(V8);J$e=r(B8r,"FNetConfig"),B8r.forEach(t),Y$e=r(vTe," (FNet model)"),vTe.forEach(t),K$e=i(T),am=n(T,"LI",{});var TTe=s(am);fQ=n(TTe,"STRONG",{});var x8r=s(fQ);Z$e=r(x8r,"fsmt"),x8r.forEach(t),eIe=r(TTe," \u2014 "),z8=n(TTe,"A",{href:!0});var k8r=s(z8);oIe=r(k8r,"FSMTConfig"),k8r.forEach(t),rIe=r(TTe," (FairSeq Machine-Translation model)"),TTe.forEach(t),tIe=i(T),nm=n(T,"LI",{});var FTe=s(nm);mQ=n(FTe,"STRONG",{});var R8r=s(mQ);aIe=r(R8r,"funnel"),R8r.forEach(t),nIe=r(FTe," \u2014 "),W8=n(FTe,"A",{href:!0});var S8r=s(W8);sIe=r(S8r,"FunnelConfig"),S8r.forEach(t),lIe=r(FTe," (Funnel Transformer model)"),FTe.forEach(t),iIe=i(T),sm=n(T,"LI",{});var CTe=s(sm);gQ=n(CTe,"STRONG",{});var P8r=s(gQ);dIe=r(P8r,"gpt2"),P8r.forEach(t),cIe=r(CTe," \u2014 "),Q8=n(CTe,"A",{href:!0});var $8r=s(Q8);fIe=r($8r,"GPT2Config"),$8r.forEach(t),mIe=r(CTe," (OpenAI GPT-2 model)"),CTe.forEach(t),gIe=i(T),lm=n(T,"LI",{});var MTe=s(lm);hQ=n(MTe,"STRONG",{});var I8r=s(hQ);hIe=r(I8r,"gpt_neo"),I8r.forEach(t),pIe=r(MTe," \u2014 "),H8=n(MTe,"A",{href:!0});var D8r=s(H8);_Ie=r(D8r,"GPTNeoConfig"),D8r.forEach(t),uIe=r(MTe," (GPT Neo model)"),MTe.forEach(t),bIe=i(T),im=n(T,"LI",{});var ETe=s(im);pQ=n(ETe,"STRONG",{});var j8r=s(pQ);vIe=r(j8r,"gptj"),j8r.forEach(t),TIe=r(ETe," \u2014 "),U8=n(ETe,"A",{href:!0});var N8r=s(U8);FIe=r(N8r,"GPTJConfig"),N8r.forEach(t),CIe=r(ETe," (GPT-J model)"),ETe.forEach(t),MIe=i(T),dm=n(T,"LI",{});var yTe=s(dm);_Q=n(yTe,"STRONG",{});var q8r=s(_Q);EIe=r(q8r,"hubert"),q8r.forEach(t),yIe=r(yTe," \u2014 "),J8=n(yTe,"A",{href:!0});var G8r=s(J8);wIe=r(G8r,"HubertConfig"),G8r.forEach(t),AIe=r(yTe," (Hubert model)"),yTe.forEach(t),LIe=i(T),cm=n(T,"LI",{});var wTe=s(cm);uQ=n(wTe,"STRONG",{});var O8r=s(uQ);BIe=r(O8r,"ibert"),O8r.forEach(t),xIe=r(wTe," \u2014 "),Y8=n(wTe,"A",{href:!0});var X8r=s(Y8);kIe=r(X8r,"IBertConfig"),X8r.forEach(t),RIe=r(wTe," (I-BERT model)"),wTe.forEach(t),SIe=i(T),fm=n(T,"LI",{});var ATe=s(fm);bQ=n(ATe,"STRONG",{});var V8r=s(bQ);PIe=r(V8r,"imagegpt"),V8r.forEach(t),$Ie=r(ATe," \u2014 "),K8=n(ATe,"A",{href:!0});var z8r=s(K8);IIe=r(z8r,"ImageGPTConfig"),z8r.forEach(t),DIe=r(ATe," (ImageGPT model)"),ATe.forEach(t),jIe=i(T),mm=n(T,"LI",{});var LTe=s(mm);vQ=n(LTe,"STRONG",{});var W8r=s(vQ);NIe=r(W8r,"layoutlm"),W8r.forEach(t),qIe=r(LTe," \u2014 "),Z8=n(LTe,"A",{href:!0});var Q8r=s(Z8);GIe=r(Q8r,"LayoutLMConfig"),Q8r.forEach(t),OIe=r(LTe," (LayoutLM model)"),LTe.forEach(t),XIe=i(T),gm=n(T,"LI",{});var BTe=s(gm);TQ=n(BTe,"STRONG",{});var H8r=s(TQ);VIe=r(H8r,"layoutlmv2"),H8r.forEach(t),zIe=r(BTe," \u2014 "),e7=n(BTe,"A",{href:!0});var U8r=s(e7);WIe=r(U8r,"LayoutLMv2Config"),U8r.forEach(t),QIe=r(BTe," (LayoutLMv2 model)"),BTe.forEach(t),HIe=i(T),hm=n(T,"LI",{});var xTe=s(hm);FQ=n(xTe,"STRONG",{});var J8r=s(FQ);UIe=r(J8r,"led"),J8r.forEach(t),JIe=r(xTe," \u2014 "),o7=n(xTe,"A",{href:!0});var Y8r=s(o7);YIe=r(Y8r,"LEDConfig"),Y8r.forEach(t),KIe=r(xTe," (LED model)"),xTe.forEach(t),ZIe=i(T),pm=n(T,"LI",{});var kTe=s(pm);CQ=n(kTe,"STRONG",{});var K8r=s(CQ);eDe=r(K8r,"longformer"),K8r.forEach(t),oDe=r(kTe," \u2014 "),r7=n(kTe,"A",{href:!0});var Z8r=s(r7);rDe=r(Z8r,"LongformerConfig"),Z8r.forEach(t),tDe=r(kTe," (Longformer model)"),kTe.forEach(t),aDe=i(T),_m=n(T,"LI",{});var RTe=s(_m);MQ=n(RTe,"STRONG",{});var e7r=s(MQ);nDe=r(e7r,"luke"),e7r.forEach(t),sDe=r(RTe," \u2014 "),t7=n(RTe,"A",{href:!0});var o7r=s(t7);lDe=r(o7r,"LukeConfig"),o7r.forEach(t),iDe=r(RTe," (LUKE model)"),RTe.forEach(t),dDe=i(T),um=n(T,"LI",{});var STe=s(um);EQ=n(STe,"STRONG",{});var r7r=s(EQ);cDe=r(r7r,"lxmert"),r7r.forEach(t),fDe=r(STe," \u2014 "),a7=n(STe,"A",{href:!0});var t7r=s(a7);mDe=r(t7r,"LxmertConfig"),t7r.forEach(t),gDe=r(STe," (LXMERT model)"),STe.forEach(t),hDe=i(T),bm=n(T,"LI",{});var PTe=s(bm);yQ=n(PTe,"STRONG",{});var a7r=s(yQ);pDe=r(a7r,"m2m_100"),a7r.forEach(t),_De=r(PTe," \u2014 "),n7=n(PTe,"A",{href:!0});var n7r=s(n7);uDe=r(n7r,"M2M100Config"),n7r.forEach(t),bDe=r(PTe," (M2M100 model)"),PTe.forEach(t),vDe=i(T),vm=n(T,"LI",{});var $Te=s(vm);wQ=n($Te,"STRONG",{});var s7r=s(wQ);TDe=r(s7r,"marian"),s7r.forEach(t),FDe=r($Te," \u2014 "),s7=n($Te,"A",{href:!0});var l7r=s(s7);CDe=r(l7r,"MarianConfig"),l7r.forEach(t),MDe=r($Te," (Marian model)"),$Te.forEach(t),EDe=i(T),Tm=n(T,"LI",{});var ITe=s(Tm);AQ=n(ITe,"STRONG",{});var i7r=s(AQ);yDe=r(i7r,"maskformer"),i7r.forEach(t),wDe=r(ITe," \u2014 "),l7=n(ITe,"A",{href:!0});var d7r=s(l7);ADe=r(d7r,"MaskFormerConfig"),d7r.forEach(t),LDe=r(ITe," (MaskFormer model)"),ITe.forEach(t),BDe=i(T),Fm=n(T,"LI",{});var DTe=s(Fm);LQ=n(DTe,"STRONG",{});var c7r=s(LQ);xDe=r(c7r,"mbart"),c7r.forEach(t),kDe=r(DTe," \u2014 "),i7=n(DTe,"A",{href:!0});var f7r=s(i7);RDe=r(f7r,"MBartConfig"),f7r.forEach(t),SDe=r(DTe," (mBART model)"),DTe.forEach(t),PDe=i(T),Cm=n(T,"LI",{});var jTe=s(Cm);BQ=n(jTe,"STRONG",{});var m7r=s(BQ);$De=r(m7r,"megatron-bert"),m7r.forEach(t),IDe=r(jTe," \u2014 "),d7=n(jTe,"A",{href:!0});var g7r=s(d7);DDe=r(g7r,"MegatronBertConfig"),g7r.forEach(t),jDe=r(jTe," (MegatronBert model)"),jTe.forEach(t),NDe=i(T),Mm=n(T,"LI",{});var NTe=s(Mm);xQ=n(NTe,"STRONG",{});var h7r=s(xQ);qDe=r(h7r,"mobilebert"),h7r.forEach(t),GDe=r(NTe," \u2014 "),c7=n(NTe,"A",{href:!0});var p7r=s(c7);ODe=r(p7r,"MobileBertConfig"),p7r.forEach(t),XDe=r(NTe," (MobileBERT model)"),NTe.forEach(t),VDe=i(T),Em=n(T,"LI",{});var qTe=s(Em);kQ=n(qTe,"STRONG",{});var _7r=s(kQ);zDe=r(_7r,"mpnet"),_7r.forEach(t),WDe=r(qTe," \u2014 "),f7=n(qTe,"A",{href:!0});var u7r=s(f7);QDe=r(u7r,"MPNetConfig"),u7r.forEach(t),HDe=r(qTe," (MPNet model)"),qTe.forEach(t),UDe=i(T),ym=n(T,"LI",{});var GTe=s(ym);RQ=n(GTe,"STRONG",{});var b7r=s(RQ);JDe=r(b7r,"mt5"),b7r.forEach(t),YDe=r(GTe," \u2014 "),m7=n(GTe,"A",{href:!0});var v7r=s(m7);KDe=r(v7r,"MT5Config"),v7r.forEach(t),ZDe=r(GTe," (mT5 model)"),GTe.forEach(t),eje=i(T),wm=n(T,"LI",{});var OTe=s(wm);SQ=n(OTe,"STRONG",{});var T7r=s(SQ);oje=r(T7r,"nystromformer"),T7r.forEach(t),rje=r(OTe," \u2014 "),g7=n(OTe,"A",{href:!0});var F7r=s(g7);tje=r(F7r,"NystromformerConfig"),F7r.forEach(t),aje=r(OTe," (Nystromformer model)"),OTe.forEach(t),nje=i(T),Am=n(T,"LI",{});var XTe=s(Am);PQ=n(XTe,"STRONG",{});var C7r=s(PQ);sje=r(C7r,"openai-gpt"),C7r.forEach(t),lje=r(XTe," \u2014 "),h7=n(XTe,"A",{href:!0});var M7r=s(h7);ije=r(M7r,"OpenAIGPTConfig"),M7r.forEach(t),dje=r(XTe," (OpenAI GPT model)"),XTe.forEach(t),cje=i(T),Lm=n(T,"LI",{});var VTe=s(Lm);$Q=n(VTe,"STRONG",{});var E7r=s($Q);fje=r(E7r,"pegasus"),E7r.forEach(t),mje=r(VTe," \u2014 "),p7=n(VTe,"A",{href:!0});var y7r=s(p7);gje=r(y7r,"PegasusConfig"),y7r.forEach(t),hje=r(VTe," (Pegasus model)"),VTe.forEach(t),pje=i(T),Bm=n(T,"LI",{});var zTe=s(Bm);IQ=n(zTe,"STRONG",{});var w7r=s(IQ);_je=r(w7r,"perceiver"),w7r.forEach(t),uje=r(zTe," \u2014 "),_7=n(zTe,"A",{href:!0});var A7r=s(_7);bje=r(A7r,"PerceiverConfig"),A7r.forEach(t),vje=r(zTe," (Perceiver model)"),zTe.forEach(t),Tje=i(T),xm=n(T,"LI",{});var WTe=s(xm);DQ=n(WTe,"STRONG",{});var L7r=s(DQ);Fje=r(L7r,"plbart"),L7r.forEach(t),Cje=r(WTe," \u2014 "),u7=n(WTe,"A",{href:!0});var B7r=s(u7);Mje=r(B7r,"PLBartConfig"),B7r.forEach(t),Eje=r(WTe," (PLBart model)"),WTe.forEach(t),yje=i(T),km=n(T,"LI",{});var QTe=s(km);jQ=n(QTe,"STRONG",{});var x7r=s(jQ);wje=r(x7r,"poolformer"),x7r.forEach(t),Aje=r(QTe," \u2014 "),b7=n(QTe,"A",{href:!0});var k7r=s(b7);Lje=r(k7r,"PoolFormerConfig"),k7r.forEach(t),Bje=r(QTe," (PoolFormer model)"),QTe.forEach(t),xje=i(T),Rm=n(T,"LI",{});var HTe=s(Rm);NQ=n(HTe,"STRONG",{});var R7r=s(NQ);kje=r(R7r,"prophetnet"),R7r.forEach(t),Rje=r(HTe," \u2014 "),v7=n(HTe,"A",{href:!0});var S7r=s(v7);Sje=r(S7r,"ProphetNetConfig"),S7r.forEach(t),Pje=r(HTe," (ProphetNet model)"),HTe.forEach(t),$je=i(T),Sm=n(T,"LI",{});var UTe=s(Sm);qQ=n(UTe,"STRONG",{});var P7r=s(qQ);Ije=r(P7r,"qdqbert"),P7r.forEach(t),Dje=r(UTe," \u2014 "),T7=n(UTe,"A",{href:!0});var $7r=s(T7);jje=r($7r,"QDQBertConfig"),$7r.forEach(t),Nje=r(UTe," (QDQBert model)"),UTe.forEach(t),qje=i(T),Pm=n(T,"LI",{});var JTe=s(Pm);GQ=n(JTe,"STRONG",{});var I7r=s(GQ);Gje=r(I7r,"rag"),I7r.forEach(t),Oje=r(JTe," \u2014 "),F7=n(JTe,"A",{href:!0});var D7r=s(F7);Xje=r(D7r,"RagConfig"),D7r.forEach(t),Vje=r(JTe," (RAG model)"),JTe.forEach(t),zje=i(T),$m=n(T,"LI",{});var YTe=s($m);OQ=n(YTe,"STRONG",{});var j7r=s(OQ);Wje=r(j7r,"realm"),j7r.forEach(t),Qje=r(YTe," \u2014 "),C7=n(YTe,"A",{href:!0});var N7r=s(C7);Hje=r(N7r,"RealmConfig"),N7r.forEach(t),Uje=r(YTe," (Realm model)"),YTe.forEach(t),Jje=i(T),Im=n(T,"LI",{});var KTe=s(Im);XQ=n(KTe,"STRONG",{});var q7r=s(XQ);Yje=r(q7r,"reformer"),q7r.forEach(t),Kje=r(KTe," \u2014 "),M7=n(KTe,"A",{href:!0});var G7r=s(M7);Zje=r(G7r,"ReformerConfig"),G7r.forEach(t),eNe=r(KTe," (Reformer model)"),KTe.forEach(t),oNe=i(T),Dm=n(T,"LI",{});var ZTe=s(Dm);VQ=n(ZTe,"STRONG",{});var O7r=s(VQ);rNe=r(O7r,"rembert"),O7r.forEach(t),tNe=r(ZTe," \u2014 "),E7=n(ZTe,"A",{href:!0});var X7r=s(E7);aNe=r(X7r,"RemBertConfig"),X7r.forEach(t),nNe=r(ZTe," (RemBERT model)"),ZTe.forEach(t),sNe=i(T),jm=n(T,"LI",{});var eFe=s(jm);zQ=n(eFe,"STRONG",{});var V7r=s(zQ);lNe=r(V7r,"resnet"),V7r.forEach(t),iNe=r(eFe," \u2014 "),y7=n(eFe,"A",{href:!0});var z7r=s(y7);dNe=r(z7r,"ResNetConfig"),z7r.forEach(t),cNe=r(eFe," (ResNet model)"),eFe.forEach(t),fNe=i(T),Nm=n(T,"LI",{});var oFe=s(Nm);WQ=n(oFe,"STRONG",{});var W7r=s(WQ);mNe=r(W7r,"retribert"),W7r.forEach(t),gNe=r(oFe," \u2014 "),w7=n(oFe,"A",{href:!0});var Q7r=s(w7);hNe=r(Q7r,"RetriBertConfig"),Q7r.forEach(t),pNe=r(oFe," (RetriBERT model)"),oFe.forEach(t),_Ne=i(T),qm=n(T,"LI",{});var rFe=s(qm);QQ=n(rFe,"STRONG",{});var H7r=s(QQ);uNe=r(H7r,"roberta"),H7r.forEach(t),bNe=r(rFe," \u2014 "),A7=n(rFe,"A",{href:!0});var U7r=s(A7);vNe=r(U7r,"RobertaConfig"),U7r.forEach(t),TNe=r(rFe," (RoBERTa model)"),rFe.forEach(t),FNe=i(T),Gm=n(T,"LI",{});var tFe=s(Gm);HQ=n(tFe,"STRONG",{});var J7r=s(HQ);CNe=r(J7r,"roformer"),J7r.forEach(t),MNe=r(tFe," \u2014 "),L7=n(tFe,"A",{href:!0});var Y7r=s(L7);ENe=r(Y7r,"RoFormerConfig"),Y7r.forEach(t),yNe=r(tFe," (RoFormer model)"),tFe.forEach(t),wNe=i(T),Om=n(T,"LI",{});var aFe=s(Om);UQ=n(aFe,"STRONG",{});var K7r=s(UQ);ANe=r(K7r,"segformer"),K7r.forEach(t),LNe=r(aFe," \u2014 "),B7=n(aFe,"A",{href:!0});var Z7r=s(B7);BNe=r(Z7r,"SegformerConfig"),Z7r.forEach(t),xNe=r(aFe," (SegFormer model)"),aFe.forEach(t),kNe=i(T),Xm=n(T,"LI",{});var nFe=s(Xm);JQ=n(nFe,"STRONG",{});var eBr=s(JQ);RNe=r(eBr,"sew"),eBr.forEach(t),SNe=r(nFe," \u2014 "),x7=n(nFe,"A",{href:!0});var oBr=s(x7);PNe=r(oBr,"SEWConfig"),oBr.forEach(t),$Ne=r(nFe," (SEW model)"),nFe.forEach(t),INe=i(T),Vm=n(T,"LI",{});var sFe=s(Vm);YQ=n(sFe,"STRONG",{});var rBr=s(YQ);DNe=r(rBr,"sew-d"),rBr.forEach(t),jNe=r(sFe," \u2014 "),k7=n(sFe,"A",{href:!0});var tBr=s(k7);NNe=r(tBr,"SEWDConfig"),tBr.forEach(t),qNe=r(sFe," (SEW-D model)"),sFe.forEach(t),GNe=i(T),zm=n(T,"LI",{});var lFe=s(zm);KQ=n(lFe,"STRONG",{});var aBr=s(KQ);ONe=r(aBr,"speech-encoder-decoder"),aBr.forEach(t),XNe=r(lFe," \u2014 "),R7=n(lFe,"A",{href:!0});var nBr=s(R7);VNe=r(nBr,"SpeechEncoderDecoderConfig"),nBr.forEach(t),zNe=r(lFe," (Speech Encoder decoder model)"),lFe.forEach(t),WNe=i(T),Wm=n(T,"LI",{});var iFe=s(Wm);ZQ=n(iFe,"STRONG",{});var sBr=s(ZQ);QNe=r(sBr,"speech_to_text"),sBr.forEach(t),HNe=r(iFe," \u2014 "),S7=n(iFe,"A",{href:!0});var lBr=s(S7);UNe=r(lBr,"Speech2TextConfig"),lBr.forEach(t),JNe=r(iFe," (Speech2Text model)"),iFe.forEach(t),YNe=i(T),Qm=n(T,"LI",{});var dFe=s(Qm);eH=n(dFe,"STRONG",{});var iBr=s(eH);KNe=r(iBr,"speech_to_text_2"),iBr.forEach(t),ZNe=r(dFe," \u2014 "),P7=n(dFe,"A",{href:!0});var dBr=s(P7);eqe=r(dBr,"Speech2Text2Config"),dBr.forEach(t),oqe=r(dFe," (Speech2Text2 model)"),dFe.forEach(t),rqe=i(T),Hm=n(T,"LI",{});var cFe=s(Hm);oH=n(cFe,"STRONG",{});var cBr=s(oH);tqe=r(cBr,"splinter"),cBr.forEach(t),aqe=r(cFe," \u2014 "),$7=n(cFe,"A",{href:!0});var fBr=s($7);nqe=r(fBr,"SplinterConfig"),fBr.forEach(t),sqe=r(cFe," (Splinter model)"),cFe.forEach(t),lqe=i(T),Um=n(T,"LI",{});var fFe=s(Um);rH=n(fFe,"STRONG",{});var mBr=s(rH);iqe=r(mBr,"squeezebert"),mBr.forEach(t),dqe=r(fFe," \u2014 "),I7=n(fFe,"A",{href:!0});var gBr=s(I7);cqe=r(gBr,"SqueezeBertConfig"),gBr.forEach(t),fqe=r(fFe," (SqueezeBERT model)"),fFe.forEach(t),mqe=i(T),Jm=n(T,"LI",{});var mFe=s(Jm);tH=n(mFe,"STRONG",{});var hBr=s(tH);gqe=r(hBr,"swin"),hBr.forEach(t),hqe=r(mFe," \u2014 "),D7=n(mFe,"A",{href:!0});var pBr=s(D7);pqe=r(pBr,"SwinConfig"),pBr.forEach(t),_qe=r(mFe," (Swin model)"),mFe.forEach(t),uqe=i(T),Ym=n(T,"LI",{});var gFe=s(Ym);aH=n(gFe,"STRONG",{});var _Br=s(aH);bqe=r(_Br,"t5"),_Br.forEach(t),vqe=r(gFe," \u2014 "),j7=n(gFe,"A",{href:!0});var uBr=s(j7);Tqe=r(uBr,"T5Config"),uBr.forEach(t),Fqe=r(gFe," (T5 model)"),gFe.forEach(t),Cqe=i(T),Km=n(T,"LI",{});var hFe=s(Km);nH=n(hFe,"STRONG",{});var bBr=s(nH);Mqe=r(bBr,"tapas"),bBr.forEach(t),Eqe=r(hFe," \u2014 "),N7=n(hFe,"A",{href:!0});var vBr=s(N7);yqe=r(vBr,"TapasConfig"),vBr.forEach(t),wqe=r(hFe," (TAPAS model)"),hFe.forEach(t),Aqe=i(T),Zm=n(T,"LI",{});var pFe=s(Zm);sH=n(pFe,"STRONG",{});var TBr=s(sH);Lqe=r(TBr,"transfo-xl"),TBr.forEach(t),Bqe=r(pFe," \u2014 "),q7=n(pFe,"A",{href:!0});var FBr=s(q7);xqe=r(FBr,"TransfoXLConfig"),FBr.forEach(t),kqe=r(pFe," (Transformer-XL model)"),pFe.forEach(t),Rqe=i(T),eg=n(T,"LI",{});var _Fe=s(eg);lH=n(_Fe,"STRONG",{});var CBr=s(lH);Sqe=r(CBr,"trocr"),CBr.forEach(t),Pqe=r(_Fe," \u2014 "),G7=n(_Fe,"A",{href:!0});var MBr=s(G7);$qe=r(MBr,"TrOCRConfig"),MBr.forEach(t),Iqe=r(_Fe," (TrOCR model)"),_Fe.forEach(t),Dqe=i(T),og=n(T,"LI",{});var uFe=s(og);iH=n(uFe,"STRONG",{});var EBr=s(iH);jqe=r(EBr,"unispeech"),EBr.forEach(t),Nqe=r(uFe," \u2014 "),O7=n(uFe,"A",{href:!0});var yBr=s(O7);qqe=r(yBr,"UniSpeechConfig"),yBr.forEach(t),Gqe=r(uFe," (UniSpeech model)"),uFe.forEach(t),Oqe=i(T),rg=n(T,"LI",{});var bFe=s(rg);dH=n(bFe,"STRONG",{});var wBr=s(dH);Xqe=r(wBr,"unispeech-sat"),wBr.forEach(t),Vqe=r(bFe," \u2014 "),X7=n(bFe,"A",{href:!0});var ABr=s(X7);zqe=r(ABr,"UniSpeechSatConfig"),ABr.forEach(t),Wqe=r(bFe," (UniSpeechSat model)"),bFe.forEach(t),Qqe=i(T),tg=n(T,"LI",{});var vFe=s(tg);cH=n(vFe,"STRONG",{});var LBr=s(cH);Hqe=r(LBr,"vilt"),LBr.forEach(t),Uqe=r(vFe," \u2014 "),V7=n(vFe,"A",{href:!0});var BBr=s(V7);Jqe=r(BBr,"ViltConfig"),BBr.forEach(t),Yqe=r(vFe," (ViLT model)"),vFe.forEach(t),Kqe=i(T),ag=n(T,"LI",{});var TFe=s(ag);fH=n(TFe,"STRONG",{});var xBr=s(fH);Zqe=r(xBr,"vision-encoder-decoder"),xBr.forEach(t),eGe=r(TFe," \u2014 "),z7=n(TFe,"A",{href:!0});var kBr=s(z7);oGe=r(kBr,"VisionEncoderDecoderConfig"),kBr.forEach(t),rGe=r(TFe," (Vision Encoder decoder model)"),TFe.forEach(t),tGe=i(T),ng=n(T,"LI",{});var FFe=s(ng);mH=n(FFe,"STRONG",{});var RBr=s(mH);aGe=r(RBr,"vision-text-dual-encoder"),RBr.forEach(t),nGe=r(FFe," \u2014 "),W7=n(FFe,"A",{href:!0});var SBr=s(W7);sGe=r(SBr,"VisionTextDualEncoderConfig"),SBr.forEach(t),lGe=r(FFe," (VisionTextDualEncoder model)"),FFe.forEach(t),iGe=i(T),sg=n(T,"LI",{});var CFe=s(sg);gH=n(CFe,"STRONG",{});var PBr=s(gH);dGe=r(PBr,"visual_bert"),PBr.forEach(t),cGe=r(CFe," \u2014 "),Q7=n(CFe,"A",{href:!0});var $Br=s(Q7);fGe=r($Br,"VisualBertConfig"),$Br.forEach(t),mGe=r(CFe," (VisualBert model)"),CFe.forEach(t),gGe=i(T),lg=n(T,"LI",{});var MFe=s(lg);hH=n(MFe,"STRONG",{});var IBr=s(hH);hGe=r(IBr,"vit"),IBr.forEach(t),pGe=r(MFe," \u2014 "),H7=n(MFe,"A",{href:!0});var DBr=s(H7);_Ge=r(DBr,"ViTConfig"),DBr.forEach(t),uGe=r(MFe," (ViT model)"),MFe.forEach(t),bGe=i(T),ig=n(T,"LI",{});var EFe=s(ig);pH=n(EFe,"STRONG",{});var jBr=s(pH);vGe=r(jBr,"vit_mae"),jBr.forEach(t),TGe=r(EFe," \u2014 "),U7=n(EFe,"A",{href:!0});var NBr=s(U7);FGe=r(NBr,"ViTMAEConfig"),NBr.forEach(t),CGe=r(EFe," (ViTMAE model)"),EFe.forEach(t),MGe=i(T),dg=n(T,"LI",{});var yFe=s(dg);_H=n(yFe,"STRONG",{});var qBr=s(_H);EGe=r(qBr,"wav2vec2"),qBr.forEach(t),yGe=r(yFe," \u2014 "),J7=n(yFe,"A",{href:!0});var GBr=s(J7);wGe=r(GBr,"Wav2Vec2Config"),GBr.forEach(t),AGe=r(yFe," (Wav2Vec2 model)"),yFe.forEach(t),LGe=i(T),cg=n(T,"LI",{});var wFe=s(cg);uH=n(wFe,"STRONG",{});var OBr=s(uH);BGe=r(OBr,"wavlm"),OBr.forEach(t),xGe=r(wFe," \u2014 "),Y7=n(wFe,"A",{href:!0});var XBr=s(Y7);kGe=r(XBr,"WavLMConfig"),XBr.forEach(t),RGe=r(wFe," (WavLM model)"),wFe.forEach(t),SGe=i(T),fg=n(T,"LI",{});var AFe=s(fg);bH=n(AFe,"STRONG",{});var VBr=s(bH);PGe=r(VBr,"xglm"),VBr.forEach(t),$Ge=r(AFe," \u2014 "),K7=n(AFe,"A",{href:!0});var zBr=s(K7);IGe=r(zBr,"XGLMConfig"),zBr.forEach(t),DGe=r(AFe," (XGLM model)"),AFe.forEach(t),jGe=i(T),mg=n(T,"LI",{});var LFe=s(mg);vH=n(LFe,"STRONG",{});var WBr=s(vH);NGe=r(WBr,"xlm"),WBr.forEach(t),qGe=r(LFe," \u2014 "),Z7=n(LFe,"A",{href:!0});var QBr=s(Z7);GGe=r(QBr,"XLMConfig"),QBr.forEach(t),OGe=r(LFe," (XLM model)"),LFe.forEach(t),XGe=i(T),gg=n(T,"LI",{});var BFe=s(gg);TH=n(BFe,"STRONG",{});var HBr=s(TH);VGe=r(HBr,"xlm-prophetnet"),HBr.forEach(t),zGe=r(BFe," \u2014 "),eB=n(BFe,"A",{href:!0});var UBr=s(eB);WGe=r(UBr,"XLMProphetNetConfig"),UBr.forEach(t),QGe=r(BFe," (XLMProphetNet model)"),BFe.forEach(t),HGe=i(T),hg=n(T,"LI",{});var xFe=s(hg);FH=n(xFe,"STRONG",{});var JBr=s(FH);UGe=r(JBr,"xlm-roberta"),JBr.forEach(t),JGe=r(xFe," \u2014 "),oB=n(xFe,"A",{href:!0});var YBr=s(oB);YGe=r(YBr,"XLMRobertaConfig"),YBr.forEach(t),KGe=r(xFe," (XLM-RoBERTa model)"),xFe.forEach(t),ZGe=i(T),pg=n(T,"LI",{});var kFe=s(pg);CH=n(kFe,"STRONG",{});var KBr=s(CH);eOe=r(KBr,"xlm-roberta-xl"),KBr.forEach(t),oOe=r(kFe," \u2014 "),rB=n(kFe,"A",{href:!0});var ZBr=s(rB);rOe=r(ZBr,"XLMRobertaXLConfig"),ZBr.forEach(t),tOe=r(kFe," (XLM-RoBERTa-XL model)"),kFe.forEach(t),aOe=i(T),_g=n(T,"LI",{});var RFe=s(_g);MH=n(RFe,"STRONG",{});var exr=s(MH);nOe=r(exr,"xlnet"),exr.forEach(t),sOe=r(RFe," \u2014 "),tB=n(RFe,"A",{href:!0});var oxr=s(tB);lOe=r(oxr,"XLNetConfig"),oxr.forEach(t),iOe=r(RFe," (XLNet model)"),RFe.forEach(t),dOe=i(T),ug=n(T,"LI",{});var SFe=s(ug);EH=n(SFe,"STRONG",{});var rxr=s(EH);cOe=r(rxr,"yoso"),rxr.forEach(t),fOe=r(SFe," \u2014 "),aB=n(SFe,"A",{href:!0});var txr=s(aB);mOe=r(txr,"YosoConfig"),txr.forEach(t),gOe=r(SFe," (YOSO model)"),SFe.forEach(t),T.forEach(t),hOe=i(ia),yH=n(ia,"P",{});var axr=s(yH);pOe=r(axr,"Examples:"),axr.forEach(t),_Oe=i(ia),m(DE.$$.fragment,ia),ia.forEach(t),uOe=i(Is),bg=n(Is,"DIV",{class:!0});var Hxe=s(bg);m(jE.$$.fragment,Hxe),bOe=i(Hxe),wH=n(Hxe,"P",{});var nxr=s(wH);vOe=r(nxr,"Register a new configuration for this class."),nxr.forEach(t),Hxe.forEach(t),Is.forEach(t),H7e=i(c),ji=n(c,"H2",{class:!0});var Uxe=s(ji);vg=n(Uxe,"A",{id:!0,class:!0,href:!0});var sxr=s(vg);AH=n(sxr,"SPAN",{});var lxr=s(AH);m(NE.$$.fragment,lxr),lxr.forEach(t),sxr.forEach(t),TOe=i(Uxe),LH=n(Uxe,"SPAN",{});var ixr=s(LH);FOe=r(ixr,"AutoTokenizer"),ixr.forEach(t),Uxe.forEach(t),U7e=i(c),Vo=n(c,"DIV",{class:!0});var Ds=s(Vo);m(qE.$$.fragment,Ds),COe=i(Ds),GE=n(Ds,"P",{});var Jxe=s(GE);MOe=r(Jxe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nB=n(Jxe,"A",{href:!0});var dxr=s(nB);EOe=r(dxr,"AutoTokenizer.from_pretrained()"),dxr.forEach(t),yOe=r(Jxe," class method."),Jxe.forEach(t),wOe=i(Ds),OE=n(Ds,"P",{});var Yxe=s(OE);AOe=r(Yxe,"This class cannot be instantiated directly using "),BH=n(Yxe,"CODE",{});var cxr=s(BH);LOe=r(cxr,"__init__()"),cxr.forEach(t),BOe=r(Yxe," (throws an error)."),Yxe.forEach(t),xOe=i(Ds),mo=n(Ds,"DIV",{class:!0});var da=s(mo);m(XE.$$.fragment,da),kOe=i(da),xH=n(da,"P",{});var fxr=s(xH);ROe=r(fxr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fxr.forEach(t),SOe=i(da),Da=n(da,"P",{});var LM=s(Da);POe=r(LM,"The tokenizer class to instantiate is selected based on the "),kH=n(LM,"CODE",{});var mxr=s(kH);$Oe=r(mxr,"model_type"),mxr.forEach(t),IOe=r(LM,` property of the config object (either
passed as an argument or loaded from `),RH=n(LM,"CODE",{});var gxr=s(RH);DOe=r(gxr,"pretrained_model_name_or_path"),gxr.forEach(t),jOe=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SH=n(LM,"CODE",{});var hxr=s(SH);NOe=r(hxr,"pretrained_model_name_or_path"),hxr.forEach(t),qOe=r(LM,":"),LM.forEach(t),GOe=i(da),M=n(da,"UL",{});var y=s(M);Gn=n(y,"LI",{});var _L=s(Gn);PH=n(_L,"STRONG",{});var pxr=s(PH);OOe=r(pxr,"albert"),pxr.forEach(t),XOe=r(_L," \u2014 "),sB=n(_L,"A",{href:!0});var _xr=s(sB);VOe=r(_xr,"AlbertTokenizer"),_xr.forEach(t),zOe=r(_L," or "),lB=n(_L,"A",{href:!0});var uxr=s(lB);WOe=r(uxr,"AlbertTokenizerFast"),uxr.forEach(t),QOe=r(_L," (ALBERT model)"),_L.forEach(t),HOe=i(y),On=n(y,"LI",{});var uL=s(On);$H=n(uL,"STRONG",{});var bxr=s($H);UOe=r(bxr,"bart"),bxr.forEach(t),JOe=r(uL," \u2014 "),iB=n(uL,"A",{href:!0});var vxr=s(iB);YOe=r(vxr,"BartTokenizer"),vxr.forEach(t),KOe=r(uL," or "),dB=n(uL,"A",{href:!0});var Txr=s(dB);ZOe=r(Txr,"BartTokenizerFast"),Txr.forEach(t),eXe=r(uL," (BART model)"),uL.forEach(t),oXe=i(y),Xn=n(y,"LI",{});var bL=s(Xn);IH=n(bL,"STRONG",{});var Fxr=s(IH);rXe=r(Fxr,"barthez"),Fxr.forEach(t),tXe=r(bL," \u2014 "),cB=n(bL,"A",{href:!0});var Cxr=s(cB);aXe=r(Cxr,"BarthezTokenizer"),Cxr.forEach(t),nXe=r(bL," or "),fB=n(bL,"A",{href:!0});var Mxr=s(fB);sXe=r(Mxr,"BarthezTokenizerFast"),Mxr.forEach(t),lXe=r(bL," (BARThez model)"),bL.forEach(t),iXe=i(y),Tg=n(y,"LI",{});var PFe=s(Tg);DH=n(PFe,"STRONG",{});var Exr=s(DH);dXe=r(Exr,"bartpho"),Exr.forEach(t),cXe=r(PFe," \u2014 "),mB=n(PFe,"A",{href:!0});var yxr=s(mB);fXe=r(yxr,"BartphoTokenizer"),yxr.forEach(t),mXe=r(PFe," (BARTpho model)"),PFe.forEach(t),gXe=i(y),Vn=n(y,"LI",{});var vL=s(Vn);jH=n(vL,"STRONG",{});var wxr=s(jH);hXe=r(wxr,"bert"),wxr.forEach(t),pXe=r(vL," \u2014 "),gB=n(vL,"A",{href:!0});var Axr=s(gB);_Xe=r(Axr,"BertTokenizer"),Axr.forEach(t),uXe=r(vL," or "),hB=n(vL,"A",{href:!0});var Lxr=s(hB);bXe=r(Lxr,"BertTokenizerFast"),Lxr.forEach(t),vXe=r(vL," (BERT model)"),vL.forEach(t),TXe=i(y),Fg=n(y,"LI",{});var $Fe=s(Fg);NH=n($Fe,"STRONG",{});var Bxr=s(NH);FXe=r(Bxr,"bert-generation"),Bxr.forEach(t),CXe=r($Fe," \u2014 "),pB=n($Fe,"A",{href:!0});var xxr=s(pB);MXe=r(xxr,"BertGenerationTokenizer"),xxr.forEach(t),EXe=r($Fe," (Bert Generation model)"),$Fe.forEach(t),yXe=i(y),Cg=n(y,"LI",{});var IFe=s(Cg);qH=n(IFe,"STRONG",{});var kxr=s(qH);wXe=r(kxr,"bert-japanese"),kxr.forEach(t),AXe=r(IFe," \u2014 "),_B=n(IFe,"A",{href:!0});var Rxr=s(_B);LXe=r(Rxr,"BertJapaneseTokenizer"),Rxr.forEach(t),BXe=r(IFe," (BertJapanese model)"),IFe.forEach(t),xXe=i(y),Mg=n(y,"LI",{});var DFe=s(Mg);GH=n(DFe,"STRONG",{});var Sxr=s(GH);kXe=r(Sxr,"bertweet"),Sxr.forEach(t),RXe=r(DFe," \u2014 "),uB=n(DFe,"A",{href:!0});var Pxr=s(uB);SXe=r(Pxr,"BertweetTokenizer"),Pxr.forEach(t),PXe=r(DFe," (Bertweet model)"),DFe.forEach(t),$Xe=i(y),zn=n(y,"LI",{});var TL=s(zn);OH=n(TL,"STRONG",{});var $xr=s(OH);IXe=r($xr,"big_bird"),$xr.forEach(t),DXe=r(TL," \u2014 "),bB=n(TL,"A",{href:!0});var Ixr=s(bB);jXe=r(Ixr,"BigBirdTokenizer"),Ixr.forEach(t),NXe=r(TL," or "),vB=n(TL,"A",{href:!0});var Dxr=s(vB);qXe=r(Dxr,"BigBirdTokenizerFast"),Dxr.forEach(t),GXe=r(TL," (BigBird model)"),TL.forEach(t),OXe=i(y),Wn=n(y,"LI",{});var FL=s(Wn);XH=n(FL,"STRONG",{});var jxr=s(XH);XXe=r(jxr,"bigbird_pegasus"),jxr.forEach(t),VXe=r(FL," \u2014 "),TB=n(FL,"A",{href:!0});var Nxr=s(TB);zXe=r(Nxr,"PegasusTokenizer"),Nxr.forEach(t),WXe=r(FL," or "),FB=n(FL,"A",{href:!0});var qxr=s(FB);QXe=r(qxr,"PegasusTokenizerFast"),qxr.forEach(t),HXe=r(FL," (BigBirdPegasus model)"),FL.forEach(t),UXe=i(y),Qn=n(y,"LI",{});var CL=s(Qn);VH=n(CL,"STRONG",{});var Gxr=s(VH);JXe=r(Gxr,"blenderbot"),Gxr.forEach(t),YXe=r(CL," \u2014 "),CB=n(CL,"A",{href:!0});var Oxr=s(CB);KXe=r(Oxr,"BlenderbotTokenizer"),Oxr.forEach(t),ZXe=r(CL," or "),MB=n(CL,"A",{href:!0});var Xxr=s(MB);eVe=r(Xxr,"BlenderbotTokenizerFast"),Xxr.forEach(t),oVe=r(CL," (Blenderbot model)"),CL.forEach(t),rVe=i(y),Eg=n(y,"LI",{});var jFe=s(Eg);zH=n(jFe,"STRONG",{});var Vxr=s(zH);tVe=r(Vxr,"blenderbot-small"),Vxr.forEach(t),aVe=r(jFe," \u2014 "),EB=n(jFe,"A",{href:!0});var zxr=s(EB);nVe=r(zxr,"BlenderbotSmallTokenizer"),zxr.forEach(t),sVe=r(jFe," (BlenderbotSmall model)"),jFe.forEach(t),lVe=i(y),yg=n(y,"LI",{});var NFe=s(yg);WH=n(NFe,"STRONG",{});var Wxr=s(WH);iVe=r(Wxr,"byt5"),Wxr.forEach(t),dVe=r(NFe," \u2014 "),yB=n(NFe,"A",{href:!0});var Qxr=s(yB);cVe=r(Qxr,"ByT5Tokenizer"),Qxr.forEach(t),fVe=r(NFe," (ByT5 model)"),NFe.forEach(t),mVe=i(y),Hn=n(y,"LI",{});var ML=s(Hn);QH=n(ML,"STRONG",{});var Hxr=s(QH);gVe=r(Hxr,"camembert"),Hxr.forEach(t),hVe=r(ML," \u2014 "),wB=n(ML,"A",{href:!0});var Uxr=s(wB);pVe=r(Uxr,"CamembertTokenizer"),Uxr.forEach(t),_Ve=r(ML," or "),AB=n(ML,"A",{href:!0});var Jxr=s(AB);uVe=r(Jxr,"CamembertTokenizerFast"),Jxr.forEach(t),bVe=r(ML," (CamemBERT model)"),ML.forEach(t),vVe=i(y),wg=n(y,"LI",{});var qFe=s(wg);HH=n(qFe,"STRONG",{});var Yxr=s(HH);TVe=r(Yxr,"canine"),Yxr.forEach(t),FVe=r(qFe," \u2014 "),LB=n(qFe,"A",{href:!0});var Kxr=s(LB);CVe=r(Kxr,"CanineTokenizer"),Kxr.forEach(t),MVe=r(qFe," (Canine model)"),qFe.forEach(t),EVe=i(y),Un=n(y,"LI",{});var EL=s(Un);UH=n(EL,"STRONG",{});var Zxr=s(UH);yVe=r(Zxr,"clip"),Zxr.forEach(t),wVe=r(EL," \u2014 "),BB=n(EL,"A",{href:!0});var ekr=s(BB);AVe=r(ekr,"CLIPTokenizer"),ekr.forEach(t),LVe=r(EL," or "),xB=n(EL,"A",{href:!0});var okr=s(xB);BVe=r(okr,"CLIPTokenizerFast"),okr.forEach(t),xVe=r(EL," (CLIP model)"),EL.forEach(t),kVe=i(y),Jn=n(y,"LI",{});var yL=s(Jn);JH=n(yL,"STRONG",{});var rkr=s(JH);RVe=r(rkr,"convbert"),rkr.forEach(t),SVe=r(yL," \u2014 "),kB=n(yL,"A",{href:!0});var tkr=s(kB);PVe=r(tkr,"ConvBertTokenizer"),tkr.forEach(t),$Ve=r(yL," or "),RB=n(yL,"A",{href:!0});var akr=s(RB);IVe=r(akr,"ConvBertTokenizerFast"),akr.forEach(t),DVe=r(yL," (ConvBERT model)"),yL.forEach(t),jVe=i(y),Yn=n(y,"LI",{});var wL=s(Yn);YH=n(wL,"STRONG",{});var nkr=s(YH);NVe=r(nkr,"cpm"),nkr.forEach(t),qVe=r(wL," \u2014 "),SB=n(wL,"A",{href:!0});var skr=s(SB);GVe=r(skr,"CpmTokenizer"),skr.forEach(t),OVe=r(wL," or "),KH=n(wL,"CODE",{});var lkr=s(KH);XVe=r(lkr,"CpmTokenizerFast"),lkr.forEach(t),VVe=r(wL," (CPM model)"),wL.forEach(t),zVe=i(y),Ag=n(y,"LI",{});var GFe=s(Ag);ZH=n(GFe,"STRONG",{});var ikr=s(ZH);WVe=r(ikr,"ctrl"),ikr.forEach(t),QVe=r(GFe," \u2014 "),PB=n(GFe,"A",{href:!0});var dkr=s(PB);HVe=r(dkr,"CTRLTokenizer"),dkr.forEach(t),UVe=r(GFe," (CTRL model)"),GFe.forEach(t),JVe=i(y),Kn=n(y,"LI",{});var AL=s(Kn);eU=n(AL,"STRONG",{});var ckr=s(eU);YVe=r(ckr,"deberta"),ckr.forEach(t),KVe=r(AL," \u2014 "),$B=n(AL,"A",{href:!0});var fkr=s($B);ZVe=r(fkr,"DebertaTokenizer"),fkr.forEach(t),eze=r(AL," or "),IB=n(AL,"A",{href:!0});var mkr=s(IB);oze=r(mkr,"DebertaTokenizerFast"),mkr.forEach(t),rze=r(AL," (DeBERTa model)"),AL.forEach(t),tze=i(y),Lg=n(y,"LI",{});var OFe=s(Lg);oU=n(OFe,"STRONG",{});var gkr=s(oU);aze=r(gkr,"deberta-v2"),gkr.forEach(t),nze=r(OFe," \u2014 "),DB=n(OFe,"A",{href:!0});var hkr=s(DB);sze=r(hkr,"DebertaV2Tokenizer"),hkr.forEach(t),lze=r(OFe," (DeBERTa-v2 model)"),OFe.forEach(t),ize=i(y),Zn=n(y,"LI",{});var LL=s(Zn);rU=n(LL,"STRONG",{});var pkr=s(rU);dze=r(pkr,"distilbert"),pkr.forEach(t),cze=r(LL," \u2014 "),jB=n(LL,"A",{href:!0});var _kr=s(jB);fze=r(_kr,"DistilBertTokenizer"),_kr.forEach(t),mze=r(LL," or "),NB=n(LL,"A",{href:!0});var ukr=s(NB);gze=r(ukr,"DistilBertTokenizerFast"),ukr.forEach(t),hze=r(LL," (DistilBERT model)"),LL.forEach(t),pze=i(y),es=n(y,"LI",{});var BL=s(es);tU=n(BL,"STRONG",{});var bkr=s(tU);_ze=r(bkr,"dpr"),bkr.forEach(t),uze=r(BL," \u2014 "),qB=n(BL,"A",{href:!0});var vkr=s(qB);bze=r(vkr,"DPRQuestionEncoderTokenizer"),vkr.forEach(t),vze=r(BL," or "),GB=n(BL,"A",{href:!0});var Tkr=s(GB);Tze=r(Tkr,"DPRQuestionEncoderTokenizerFast"),Tkr.forEach(t),Fze=r(BL," (DPR model)"),BL.forEach(t),Cze=i(y),os=n(y,"LI",{});var xL=s(os);aU=n(xL,"STRONG",{});var Fkr=s(aU);Mze=r(Fkr,"electra"),Fkr.forEach(t),Eze=r(xL," \u2014 "),OB=n(xL,"A",{href:!0});var Ckr=s(OB);yze=r(Ckr,"ElectraTokenizer"),Ckr.forEach(t),wze=r(xL," or "),XB=n(xL,"A",{href:!0});var Mkr=s(XB);Aze=r(Mkr,"ElectraTokenizerFast"),Mkr.forEach(t),Lze=r(xL," (ELECTRA model)"),xL.forEach(t),Bze=i(y),Bg=n(y,"LI",{});var XFe=s(Bg);nU=n(XFe,"STRONG",{});var Ekr=s(nU);xze=r(Ekr,"flaubert"),Ekr.forEach(t),kze=r(XFe," \u2014 "),VB=n(XFe,"A",{href:!0});var ykr=s(VB);Rze=r(ykr,"FlaubertTokenizer"),ykr.forEach(t),Sze=r(XFe," (FlauBERT model)"),XFe.forEach(t),Pze=i(y),rs=n(y,"LI",{});var kL=s(rs);sU=n(kL,"STRONG",{});var wkr=s(sU);$ze=r(wkr,"fnet"),wkr.forEach(t),Ize=r(kL," \u2014 "),zB=n(kL,"A",{href:!0});var Akr=s(zB);Dze=r(Akr,"FNetTokenizer"),Akr.forEach(t),jze=r(kL," or "),WB=n(kL,"A",{href:!0});var Lkr=s(WB);Nze=r(Lkr,"FNetTokenizerFast"),Lkr.forEach(t),qze=r(kL," (FNet model)"),kL.forEach(t),Gze=i(y),xg=n(y,"LI",{});var VFe=s(xg);lU=n(VFe,"STRONG",{});var Bkr=s(lU);Oze=r(Bkr,"fsmt"),Bkr.forEach(t),Xze=r(VFe," \u2014 "),QB=n(VFe,"A",{href:!0});var xkr=s(QB);Vze=r(xkr,"FSMTTokenizer"),xkr.forEach(t),zze=r(VFe," (FairSeq Machine-Translation model)"),VFe.forEach(t),Wze=i(y),ts=n(y,"LI",{});var RL=s(ts);iU=n(RL,"STRONG",{});var kkr=s(iU);Qze=r(kkr,"funnel"),kkr.forEach(t),Hze=r(RL," \u2014 "),HB=n(RL,"A",{href:!0});var Rkr=s(HB);Uze=r(Rkr,"FunnelTokenizer"),Rkr.forEach(t),Jze=r(RL," or "),UB=n(RL,"A",{href:!0});var Skr=s(UB);Yze=r(Skr,"FunnelTokenizerFast"),Skr.forEach(t),Kze=r(RL," (Funnel Transformer model)"),RL.forEach(t),Zze=i(y),as=n(y,"LI",{});var SL=s(as);dU=n(SL,"STRONG",{});var Pkr=s(dU);eWe=r(Pkr,"gpt2"),Pkr.forEach(t),oWe=r(SL," \u2014 "),JB=n(SL,"A",{href:!0});var $kr=s(JB);rWe=r($kr,"GPT2Tokenizer"),$kr.forEach(t),tWe=r(SL," or "),YB=n(SL,"A",{href:!0});var Ikr=s(YB);aWe=r(Ikr,"GPT2TokenizerFast"),Ikr.forEach(t),nWe=r(SL," (OpenAI GPT-2 model)"),SL.forEach(t),sWe=i(y),ns=n(y,"LI",{});var PL=s(ns);cU=n(PL,"STRONG",{});var Dkr=s(cU);lWe=r(Dkr,"gpt_neo"),Dkr.forEach(t),iWe=r(PL," \u2014 "),KB=n(PL,"A",{href:!0});var jkr=s(KB);dWe=r(jkr,"GPT2Tokenizer"),jkr.forEach(t),cWe=r(PL," or "),ZB=n(PL,"A",{href:!0});var Nkr=s(ZB);fWe=r(Nkr,"GPT2TokenizerFast"),Nkr.forEach(t),mWe=r(PL," (GPT Neo model)"),PL.forEach(t),gWe=i(y),ss=n(y,"LI",{});var $L=s(ss);fU=n($L,"STRONG",{});var qkr=s(fU);hWe=r(qkr,"herbert"),qkr.forEach(t),pWe=r($L," \u2014 "),ex=n($L,"A",{href:!0});var Gkr=s(ex);_We=r(Gkr,"HerbertTokenizer"),Gkr.forEach(t),uWe=r($L," or "),ox=n($L,"A",{href:!0});var Okr=s(ox);bWe=r(Okr,"HerbertTokenizerFast"),Okr.forEach(t),vWe=r($L," (HerBERT model)"),$L.forEach(t),TWe=i(y),kg=n(y,"LI",{});var zFe=s(kg);mU=n(zFe,"STRONG",{});var Xkr=s(mU);FWe=r(Xkr,"hubert"),Xkr.forEach(t),CWe=r(zFe," \u2014 "),rx=n(zFe,"A",{href:!0});var Vkr=s(rx);MWe=r(Vkr,"Wav2Vec2CTCTokenizer"),Vkr.forEach(t),EWe=r(zFe," (Hubert model)"),zFe.forEach(t),yWe=i(y),ls=n(y,"LI",{});var IL=s(ls);gU=n(IL,"STRONG",{});var zkr=s(gU);wWe=r(zkr,"ibert"),zkr.forEach(t),AWe=r(IL," \u2014 "),tx=n(IL,"A",{href:!0});var Wkr=s(tx);LWe=r(Wkr,"RobertaTokenizer"),Wkr.forEach(t),BWe=r(IL," or "),ax=n(IL,"A",{href:!0});var Qkr=s(ax);xWe=r(Qkr,"RobertaTokenizerFast"),Qkr.forEach(t),kWe=r(IL," (I-BERT model)"),IL.forEach(t),RWe=i(y),is=n(y,"LI",{});var DL=s(is);hU=n(DL,"STRONG",{});var Hkr=s(hU);SWe=r(Hkr,"layoutlm"),Hkr.forEach(t),PWe=r(DL," \u2014 "),nx=n(DL,"A",{href:!0});var Ukr=s(nx);$We=r(Ukr,"LayoutLMTokenizer"),Ukr.forEach(t),IWe=r(DL," or "),sx=n(DL,"A",{href:!0});var Jkr=s(sx);DWe=r(Jkr,"LayoutLMTokenizerFast"),Jkr.forEach(t),jWe=r(DL," (LayoutLM model)"),DL.forEach(t),NWe=i(y),ds=n(y,"LI",{});var jL=s(ds);pU=n(jL,"STRONG",{});var Ykr=s(pU);qWe=r(Ykr,"layoutlmv2"),Ykr.forEach(t),GWe=r(jL," \u2014 "),lx=n(jL,"A",{href:!0});var Kkr=s(lx);OWe=r(Kkr,"LayoutLMv2Tokenizer"),Kkr.forEach(t),XWe=r(jL," or "),ix=n(jL,"A",{href:!0});var Zkr=s(ix);VWe=r(Zkr,"LayoutLMv2TokenizerFast"),Zkr.forEach(t),zWe=r(jL," (LayoutLMv2 model)"),jL.forEach(t),WWe=i(y),cs=n(y,"LI",{});var NL=s(cs);_U=n(NL,"STRONG",{});var eRr=s(_U);QWe=r(eRr,"layoutxlm"),eRr.forEach(t),HWe=r(NL," \u2014 "),dx=n(NL,"A",{href:!0});var oRr=s(dx);UWe=r(oRr,"LayoutXLMTokenizer"),oRr.forEach(t),JWe=r(NL," or "),cx=n(NL,"A",{href:!0});var rRr=s(cx);YWe=r(rRr,"LayoutXLMTokenizerFast"),rRr.forEach(t),KWe=r(NL," (LayoutXLM model)"),NL.forEach(t),ZWe=i(y),fs=n(y,"LI",{});var qL=s(fs);uU=n(qL,"STRONG",{});var tRr=s(uU);eQe=r(tRr,"led"),tRr.forEach(t),oQe=r(qL," \u2014 "),fx=n(qL,"A",{href:!0});var aRr=s(fx);rQe=r(aRr,"LEDTokenizer"),aRr.forEach(t),tQe=r(qL," or "),mx=n(qL,"A",{href:!0});var nRr=s(mx);aQe=r(nRr,"LEDTokenizerFast"),nRr.forEach(t),nQe=r(qL," (LED model)"),qL.forEach(t),sQe=i(y),ms=n(y,"LI",{});var GL=s(ms);bU=n(GL,"STRONG",{});var sRr=s(bU);lQe=r(sRr,"longformer"),sRr.forEach(t),iQe=r(GL," \u2014 "),gx=n(GL,"A",{href:!0});var lRr=s(gx);dQe=r(lRr,"LongformerTokenizer"),lRr.forEach(t),cQe=r(GL," or "),hx=n(GL,"A",{href:!0});var iRr=s(hx);fQe=r(iRr,"LongformerTokenizerFast"),iRr.forEach(t),mQe=r(GL," (Longformer model)"),GL.forEach(t),gQe=i(y),Rg=n(y,"LI",{});var WFe=s(Rg);vU=n(WFe,"STRONG",{});var dRr=s(vU);hQe=r(dRr,"luke"),dRr.forEach(t),pQe=r(WFe," \u2014 "),px=n(WFe,"A",{href:!0});var cRr=s(px);_Qe=r(cRr,"LukeTokenizer"),cRr.forEach(t),uQe=r(WFe," (LUKE model)"),WFe.forEach(t),bQe=i(y),gs=n(y,"LI",{});var OL=s(gs);TU=n(OL,"STRONG",{});var fRr=s(TU);vQe=r(fRr,"lxmert"),fRr.forEach(t),TQe=r(OL," \u2014 "),_x=n(OL,"A",{href:!0});var mRr=s(_x);FQe=r(mRr,"LxmertTokenizer"),mRr.forEach(t),CQe=r(OL," or "),ux=n(OL,"A",{href:!0});var gRr=s(ux);MQe=r(gRr,"LxmertTokenizerFast"),gRr.forEach(t),EQe=r(OL," (LXMERT model)"),OL.forEach(t),yQe=i(y),Sg=n(y,"LI",{});var QFe=s(Sg);FU=n(QFe,"STRONG",{});var hRr=s(FU);wQe=r(hRr,"m2m_100"),hRr.forEach(t),AQe=r(QFe," \u2014 "),bx=n(QFe,"A",{href:!0});var pRr=s(bx);LQe=r(pRr,"M2M100Tokenizer"),pRr.forEach(t),BQe=r(QFe," (M2M100 model)"),QFe.forEach(t),xQe=i(y),Pg=n(y,"LI",{});var HFe=s(Pg);CU=n(HFe,"STRONG",{});var _Rr=s(CU);kQe=r(_Rr,"marian"),_Rr.forEach(t),RQe=r(HFe," \u2014 "),vx=n(HFe,"A",{href:!0});var uRr=s(vx);SQe=r(uRr,"MarianTokenizer"),uRr.forEach(t),PQe=r(HFe," (Marian model)"),HFe.forEach(t),$Qe=i(y),hs=n(y,"LI",{});var XL=s(hs);MU=n(XL,"STRONG",{});var bRr=s(MU);IQe=r(bRr,"mbart"),bRr.forEach(t),DQe=r(XL," \u2014 "),Tx=n(XL,"A",{href:!0});var vRr=s(Tx);jQe=r(vRr,"MBartTokenizer"),vRr.forEach(t),NQe=r(XL," or "),Fx=n(XL,"A",{href:!0});var TRr=s(Fx);qQe=r(TRr,"MBartTokenizerFast"),TRr.forEach(t),GQe=r(XL," (mBART model)"),XL.forEach(t),OQe=i(y),ps=n(y,"LI",{});var VL=s(ps);EU=n(VL,"STRONG",{});var FRr=s(EU);XQe=r(FRr,"mbart50"),FRr.forEach(t),VQe=r(VL," \u2014 "),Cx=n(VL,"A",{href:!0});var CRr=s(Cx);zQe=r(CRr,"MBart50Tokenizer"),CRr.forEach(t),WQe=r(VL," or "),Mx=n(VL,"A",{href:!0});var MRr=s(Mx);QQe=r(MRr,"MBart50TokenizerFast"),MRr.forEach(t),HQe=r(VL," (mBART-50 model)"),VL.forEach(t),UQe=i(y),$g=n(y,"LI",{});var UFe=s($g);yU=n(UFe,"STRONG",{});var ERr=s(yU);JQe=r(ERr,"mluke"),ERr.forEach(t),YQe=r(UFe," \u2014 "),Ex=n(UFe,"A",{href:!0});var yRr=s(Ex);KQe=r(yRr,"MLukeTokenizer"),yRr.forEach(t),ZQe=r(UFe," (mLUKE model)"),UFe.forEach(t),eHe=i(y),_s=n(y,"LI",{});var zL=s(_s);wU=n(zL,"STRONG",{});var wRr=s(wU);oHe=r(wRr,"mobilebert"),wRr.forEach(t),rHe=r(zL," \u2014 "),yx=n(zL,"A",{href:!0});var ARr=s(yx);tHe=r(ARr,"MobileBertTokenizer"),ARr.forEach(t),aHe=r(zL," or "),wx=n(zL,"A",{href:!0});var LRr=s(wx);nHe=r(LRr,"MobileBertTokenizerFast"),LRr.forEach(t),sHe=r(zL," (MobileBERT model)"),zL.forEach(t),lHe=i(y),us=n(y,"LI",{});var WL=s(us);AU=n(WL,"STRONG",{});var BRr=s(AU);iHe=r(BRr,"mpnet"),BRr.forEach(t),dHe=r(WL," \u2014 "),Ax=n(WL,"A",{href:!0});var xRr=s(Ax);cHe=r(xRr,"MPNetTokenizer"),xRr.forEach(t),fHe=r(WL," or "),Lx=n(WL,"A",{href:!0});var kRr=s(Lx);mHe=r(kRr,"MPNetTokenizerFast"),kRr.forEach(t),gHe=r(WL," (MPNet model)"),WL.forEach(t),hHe=i(y),bs=n(y,"LI",{});var QL=s(bs);LU=n(QL,"STRONG",{});var RRr=s(LU);pHe=r(RRr,"mt5"),RRr.forEach(t),_He=r(QL," \u2014 "),Bx=n(QL,"A",{href:!0});var SRr=s(Bx);uHe=r(SRr,"MT5Tokenizer"),SRr.forEach(t),bHe=r(QL," or "),xx=n(QL,"A",{href:!0});var PRr=s(xx);vHe=r(PRr,"MT5TokenizerFast"),PRr.forEach(t),THe=r(QL," (mT5 model)"),QL.forEach(t),FHe=i(y),vs=n(y,"LI",{});var HL=s(vs);BU=n(HL,"STRONG",{});var $Rr=s(BU);CHe=r($Rr,"openai-gpt"),$Rr.forEach(t),MHe=r(HL," \u2014 "),kx=n(HL,"A",{href:!0});var IRr=s(kx);EHe=r(IRr,"OpenAIGPTTokenizer"),IRr.forEach(t),yHe=r(HL," or "),Rx=n(HL,"A",{href:!0});var DRr=s(Rx);wHe=r(DRr,"OpenAIGPTTokenizerFast"),DRr.forEach(t),AHe=r(HL," (OpenAI GPT model)"),HL.forEach(t),LHe=i(y),Ts=n(y,"LI",{});var UL=s(Ts);xU=n(UL,"STRONG",{});var jRr=s(xU);BHe=r(jRr,"pegasus"),jRr.forEach(t),xHe=r(UL," \u2014 "),Sx=n(UL,"A",{href:!0});var NRr=s(Sx);kHe=r(NRr,"PegasusTokenizer"),NRr.forEach(t),RHe=r(UL," or "),Px=n(UL,"A",{href:!0});var qRr=s(Px);SHe=r(qRr,"PegasusTokenizerFast"),qRr.forEach(t),PHe=r(UL," (Pegasus model)"),UL.forEach(t),$He=i(y),Ig=n(y,"LI",{});var JFe=s(Ig);kU=n(JFe,"STRONG",{});var GRr=s(kU);IHe=r(GRr,"perceiver"),GRr.forEach(t),DHe=r(JFe," \u2014 "),$x=n(JFe,"A",{href:!0});var ORr=s($x);jHe=r(ORr,"PerceiverTokenizer"),ORr.forEach(t),NHe=r(JFe," (Perceiver model)"),JFe.forEach(t),qHe=i(y),Dg=n(y,"LI",{});var YFe=s(Dg);RU=n(YFe,"STRONG",{});var XRr=s(RU);GHe=r(XRr,"phobert"),XRr.forEach(t),OHe=r(YFe," \u2014 "),Ix=n(YFe,"A",{href:!0});var VRr=s(Ix);XHe=r(VRr,"PhobertTokenizer"),VRr.forEach(t),VHe=r(YFe," (PhoBERT model)"),YFe.forEach(t),zHe=i(y),jg=n(y,"LI",{});var KFe=s(jg);SU=n(KFe,"STRONG",{});var zRr=s(SU);WHe=r(zRr,"plbart"),zRr.forEach(t),QHe=r(KFe," \u2014 "),Dx=n(KFe,"A",{href:!0});var WRr=s(Dx);HHe=r(WRr,"PLBartTokenizer"),WRr.forEach(t),UHe=r(KFe," (PLBart model)"),KFe.forEach(t),JHe=i(y),Ng=n(y,"LI",{});var ZFe=s(Ng);PU=n(ZFe,"STRONG",{});var QRr=s(PU);YHe=r(QRr,"prophetnet"),QRr.forEach(t),KHe=r(ZFe," \u2014 "),jx=n(ZFe,"A",{href:!0});var HRr=s(jx);ZHe=r(HRr,"ProphetNetTokenizer"),HRr.forEach(t),eUe=r(ZFe," (ProphetNet model)"),ZFe.forEach(t),oUe=i(y),Fs=n(y,"LI",{});var JL=s(Fs);$U=n(JL,"STRONG",{});var URr=s($U);rUe=r(URr,"qdqbert"),URr.forEach(t),tUe=r(JL," \u2014 "),Nx=n(JL,"A",{href:!0});var JRr=s(Nx);aUe=r(JRr,"BertTokenizer"),JRr.forEach(t),nUe=r(JL," or "),qx=n(JL,"A",{href:!0});var YRr=s(qx);sUe=r(YRr,"BertTokenizerFast"),YRr.forEach(t),lUe=r(JL," (QDQBert model)"),JL.forEach(t),iUe=i(y),qg=n(y,"LI",{});var e9e=s(qg);IU=n(e9e,"STRONG",{});var KRr=s(IU);dUe=r(KRr,"rag"),KRr.forEach(t),cUe=r(e9e," \u2014 "),Gx=n(e9e,"A",{href:!0});var ZRr=s(Gx);fUe=r(ZRr,"RagTokenizer"),ZRr.forEach(t),mUe=r(e9e," (RAG model)"),e9e.forEach(t),gUe=i(y),Cs=n(y,"LI",{});var YL=s(Cs);DU=n(YL,"STRONG",{});var eSr=s(DU);hUe=r(eSr,"reformer"),eSr.forEach(t),pUe=r(YL," \u2014 "),Ox=n(YL,"A",{href:!0});var oSr=s(Ox);_Ue=r(oSr,"ReformerTokenizer"),oSr.forEach(t),uUe=r(YL," or "),Xx=n(YL,"A",{href:!0});var rSr=s(Xx);bUe=r(rSr,"ReformerTokenizerFast"),rSr.forEach(t),vUe=r(YL," (Reformer model)"),YL.forEach(t),TUe=i(y),Ms=n(y,"LI",{});var KL=s(Ms);jU=n(KL,"STRONG",{});var tSr=s(jU);FUe=r(tSr,"rembert"),tSr.forEach(t),CUe=r(KL," \u2014 "),Vx=n(KL,"A",{href:!0});var aSr=s(Vx);MUe=r(aSr,"RemBertTokenizer"),aSr.forEach(t),EUe=r(KL," or "),zx=n(KL,"A",{href:!0});var nSr=s(zx);yUe=r(nSr,"RemBertTokenizerFast"),nSr.forEach(t),wUe=r(KL," (RemBERT model)"),KL.forEach(t),AUe=i(y),Es=n(y,"LI",{});var ZL=s(Es);NU=n(ZL,"STRONG",{});var sSr=s(NU);LUe=r(sSr,"retribert"),sSr.forEach(t),BUe=r(ZL," \u2014 "),Wx=n(ZL,"A",{href:!0});var lSr=s(Wx);xUe=r(lSr,"RetriBertTokenizer"),lSr.forEach(t),kUe=r(ZL," or "),Qx=n(ZL,"A",{href:!0});var iSr=s(Qx);RUe=r(iSr,"RetriBertTokenizerFast"),iSr.forEach(t),SUe=r(ZL," (RetriBERT model)"),ZL.forEach(t),PUe=i(y),ys=n(y,"LI",{});var e8=s(ys);qU=n(e8,"STRONG",{});var dSr=s(qU);$Ue=r(dSr,"roberta"),dSr.forEach(t),IUe=r(e8," \u2014 "),Hx=n(e8,"A",{href:!0});var cSr=s(Hx);DUe=r(cSr,"RobertaTokenizer"),cSr.forEach(t),jUe=r(e8," or "),Ux=n(e8,"A",{href:!0});var fSr=s(Ux);NUe=r(fSr,"RobertaTokenizerFast"),fSr.forEach(t),qUe=r(e8," (RoBERTa model)"),e8.forEach(t),GUe=i(y),ws=n(y,"LI",{});var o8=s(ws);GU=n(o8,"STRONG",{});var mSr=s(GU);OUe=r(mSr,"roformer"),mSr.forEach(t),XUe=r(o8," \u2014 "),Jx=n(o8,"A",{href:!0});var gSr=s(Jx);VUe=r(gSr,"RoFormerTokenizer"),gSr.forEach(t),zUe=r(o8," or "),Yx=n(o8,"A",{href:!0});var hSr=s(Yx);WUe=r(hSr,"RoFormerTokenizerFast"),hSr.forEach(t),QUe=r(o8," (RoFormer model)"),o8.forEach(t),HUe=i(y),Gg=n(y,"LI",{});var o9e=s(Gg);OU=n(o9e,"STRONG",{});var pSr=s(OU);UUe=r(pSr,"speech_to_text"),pSr.forEach(t),JUe=r(o9e," \u2014 "),Kx=n(o9e,"A",{href:!0});var _Sr=s(Kx);YUe=r(_Sr,"Speech2TextTokenizer"),_Sr.forEach(t),KUe=r(o9e," (Speech2Text model)"),o9e.forEach(t),ZUe=i(y),Og=n(y,"LI",{});var r9e=s(Og);XU=n(r9e,"STRONG",{});var uSr=s(XU);eJe=r(uSr,"speech_to_text_2"),uSr.forEach(t),oJe=r(r9e," \u2014 "),Zx=n(r9e,"A",{href:!0});var bSr=s(Zx);rJe=r(bSr,"Speech2Text2Tokenizer"),bSr.forEach(t),tJe=r(r9e," (Speech2Text2 model)"),r9e.forEach(t),aJe=i(y),As=n(y,"LI",{});var r8=s(As);VU=n(r8,"STRONG",{});var vSr=s(VU);nJe=r(vSr,"splinter"),vSr.forEach(t),sJe=r(r8," \u2014 "),ek=n(r8,"A",{href:!0});var TSr=s(ek);lJe=r(TSr,"SplinterTokenizer"),TSr.forEach(t),iJe=r(r8," or "),ok=n(r8,"A",{href:!0});var FSr=s(ok);dJe=r(FSr,"SplinterTokenizerFast"),FSr.forEach(t),cJe=r(r8," (Splinter model)"),r8.forEach(t),fJe=i(y),Ls=n(y,"LI",{});var t8=s(Ls);zU=n(t8,"STRONG",{});var CSr=s(zU);mJe=r(CSr,"squeezebert"),CSr.forEach(t),gJe=r(t8," \u2014 "),rk=n(t8,"A",{href:!0});var MSr=s(rk);hJe=r(MSr,"SqueezeBertTokenizer"),MSr.forEach(t),pJe=r(t8," or "),tk=n(t8,"A",{href:!0});var ESr=s(tk);_Je=r(ESr,"SqueezeBertTokenizerFast"),ESr.forEach(t),uJe=r(t8," (SqueezeBERT model)"),t8.forEach(t),bJe=i(y),Bs=n(y,"LI",{});var a8=s(Bs);WU=n(a8,"STRONG",{});var ySr=s(WU);vJe=r(ySr,"t5"),ySr.forEach(t),TJe=r(a8," \u2014 "),ak=n(a8,"A",{href:!0});var wSr=s(ak);FJe=r(wSr,"T5Tokenizer"),wSr.forEach(t),CJe=r(a8," or "),nk=n(a8,"A",{href:!0});var ASr=s(nk);MJe=r(ASr,"T5TokenizerFast"),ASr.forEach(t),EJe=r(a8," (T5 model)"),a8.forEach(t),yJe=i(y),Xg=n(y,"LI",{});var t9e=s(Xg);QU=n(t9e,"STRONG",{});var LSr=s(QU);wJe=r(LSr,"tapas"),LSr.forEach(t),AJe=r(t9e," \u2014 "),sk=n(t9e,"A",{href:!0});var BSr=s(sk);LJe=r(BSr,"TapasTokenizer"),BSr.forEach(t),BJe=r(t9e," (TAPAS model)"),t9e.forEach(t),xJe=i(y),Vg=n(y,"LI",{});var a9e=s(Vg);HU=n(a9e,"STRONG",{});var xSr=s(HU);kJe=r(xSr,"transfo-xl"),xSr.forEach(t),RJe=r(a9e," \u2014 "),lk=n(a9e,"A",{href:!0});var kSr=s(lk);SJe=r(kSr,"TransfoXLTokenizer"),kSr.forEach(t),PJe=r(a9e," (Transformer-XL model)"),a9e.forEach(t),$Je=i(y),zg=n(y,"LI",{});var n9e=s(zg);UU=n(n9e,"STRONG",{});var RSr=s(UU);IJe=r(RSr,"wav2vec2"),RSr.forEach(t),DJe=r(n9e," \u2014 "),ik=n(n9e,"A",{href:!0});var SSr=s(ik);jJe=r(SSr,"Wav2Vec2CTCTokenizer"),SSr.forEach(t),NJe=r(n9e," (Wav2Vec2 model)"),n9e.forEach(t),qJe=i(y),Wg=n(y,"LI",{});var s9e=s(Wg);JU=n(s9e,"STRONG",{});var PSr=s(JU);GJe=r(PSr,"wav2vec2_phoneme"),PSr.forEach(t),OJe=r(s9e," \u2014 "),dk=n(s9e,"A",{href:!0});var $Sr=s(dk);XJe=r($Sr,"Wav2Vec2PhonemeCTCTokenizer"),$Sr.forEach(t),VJe=r(s9e," (Wav2Vec2Phoneme model)"),s9e.forEach(t),zJe=i(y),xs=n(y,"LI",{});var n8=s(xs);YU=n(n8,"STRONG",{});var ISr=s(YU);WJe=r(ISr,"xglm"),ISr.forEach(t),QJe=r(n8," \u2014 "),ck=n(n8,"A",{href:!0});var DSr=s(ck);HJe=r(DSr,"XGLMTokenizer"),DSr.forEach(t),UJe=r(n8," or "),fk=n(n8,"A",{href:!0});var jSr=s(fk);JJe=r(jSr,"XGLMTokenizerFast"),jSr.forEach(t),YJe=r(n8," (XGLM model)"),n8.forEach(t),KJe=i(y),Qg=n(y,"LI",{});var l9e=s(Qg);KU=n(l9e,"STRONG",{});var NSr=s(KU);ZJe=r(NSr,"xlm"),NSr.forEach(t),eYe=r(l9e," \u2014 "),mk=n(l9e,"A",{href:!0});var qSr=s(mk);oYe=r(qSr,"XLMTokenizer"),qSr.forEach(t),rYe=r(l9e," (XLM model)"),l9e.forEach(t),tYe=i(y),Hg=n(y,"LI",{});var i9e=s(Hg);ZU=n(i9e,"STRONG",{});var GSr=s(ZU);aYe=r(GSr,"xlm-prophetnet"),GSr.forEach(t),nYe=r(i9e," \u2014 "),gk=n(i9e,"A",{href:!0});var OSr=s(gk);sYe=r(OSr,"XLMProphetNetTokenizer"),OSr.forEach(t),lYe=r(i9e," (XLMProphetNet model)"),i9e.forEach(t),iYe=i(y),ks=n(y,"LI",{});var s8=s(ks);eJ=n(s8,"STRONG",{});var XSr=s(eJ);dYe=r(XSr,"xlm-roberta"),XSr.forEach(t),cYe=r(s8," \u2014 "),hk=n(s8,"A",{href:!0});var VSr=s(hk);fYe=r(VSr,"XLMRobertaTokenizer"),VSr.forEach(t),mYe=r(s8," or "),pk=n(s8,"A",{href:!0});var zSr=s(pk);gYe=r(zSr,"XLMRobertaTokenizerFast"),zSr.forEach(t),hYe=r(s8," (XLM-RoBERTa model)"),s8.forEach(t),pYe=i(y),Rs=n(y,"LI",{});var l8=s(Rs);oJ=n(l8,"STRONG",{});var WSr=s(oJ);_Ye=r(WSr,"xlnet"),WSr.forEach(t),uYe=r(l8," \u2014 "),_k=n(l8,"A",{href:!0});var QSr=s(_k);bYe=r(QSr,"XLNetTokenizer"),QSr.forEach(t),vYe=r(l8," or "),uk=n(l8,"A",{href:!0});var HSr=s(uk);TYe=r(HSr,"XLNetTokenizerFast"),HSr.forEach(t),FYe=r(l8," (XLNet model)"),l8.forEach(t),y.forEach(t),CYe=i(da),rJ=n(da,"P",{});var USr=s(rJ);MYe=r(USr,"Examples:"),USr.forEach(t),EYe=i(da),m(VE.$$.fragment,da),da.forEach(t),yYe=i(Ds),Ug=n(Ds,"DIV",{class:!0});var Kxe=s(Ug);m(zE.$$.fragment,Kxe),wYe=i(Kxe),tJ=n(Kxe,"P",{});var JSr=s(tJ);AYe=r(JSr,"Register a new tokenizer in this mapping."),JSr.forEach(t),Kxe.forEach(t),Ds.forEach(t),J7e=i(c),Ni=n(c,"H2",{class:!0});var Zxe=s(Ni);Jg=n(Zxe,"A",{id:!0,class:!0,href:!0});var YSr=s(Jg);aJ=n(YSr,"SPAN",{});var KSr=s(aJ);m(WE.$$.fragment,KSr),KSr.forEach(t),YSr.forEach(t),LYe=i(Zxe),nJ=n(Zxe,"SPAN",{});var ZSr=s(nJ);BYe=r(ZSr,"AutoFeatureExtractor"),ZSr.forEach(t),Zxe.forEach(t),Y7e=i(c),zo=n(c,"DIV",{class:!0});var js=s(zo);m(QE.$$.fragment,js),xYe=i(js),HE=n(js,"P",{});var eke=s(HE);kYe=r(eke,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bk=n(eke,"A",{href:!0});var ePr=s(bk);RYe=r(ePr,"AutoFeatureExtractor.from_pretrained()"),ePr.forEach(t),SYe=r(eke," class method."),eke.forEach(t),PYe=i(js),UE=n(js,"P",{});var oke=s(UE);$Ye=r(oke,"This class cannot be instantiated directly using "),sJ=n(oke,"CODE",{});var oPr=s(sJ);IYe=r(oPr,"__init__()"),oPr.forEach(t),DYe=r(oke," (throws an error)."),oke.forEach(t),jYe=i(js),ke=n(js,"DIV",{class:!0});var St=s(ke);m(JE.$$.fragment,St),NYe=i(St),lJ=n(St,"P",{});var rPr=s(lJ);qYe=r(rPr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),rPr.forEach(t),GYe=i(St),ja=n(St,"P",{});var BM=s(ja);OYe=r(BM,"The feature extractor class to instantiate is selected based on the "),iJ=n(BM,"CODE",{});var tPr=s(iJ);XYe=r(tPr,"model_type"),tPr.forEach(t),VYe=r(BM,` property of the config object
(either passed as an argument or loaded from `),dJ=n(BM,"CODE",{});var aPr=s(dJ);zYe=r(aPr,"pretrained_model_name_or_path"),aPr.forEach(t),WYe=r(BM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cJ=n(BM,"CODE",{});var nPr=s(cJ);QYe=r(nPr,"pretrained_model_name_or_path"),nPr.forEach(t),HYe=r(BM,":"),BM.forEach(t),UYe=i(St),ae=n(St,"UL",{});var le=s(ae);Yg=n(le,"LI",{});var d9e=s(Yg);fJ=n(d9e,"STRONG",{});var sPr=s(fJ);JYe=r(sPr,"beit"),sPr.forEach(t),YYe=r(d9e," \u2014 "),vk=n(d9e,"A",{href:!0});var lPr=s(vk);KYe=r(lPr,"BeitFeatureExtractor"),lPr.forEach(t),ZYe=r(d9e," (BEiT model)"),d9e.forEach(t),eKe=i(le),Kg=n(le,"LI",{});var c9e=s(Kg);mJ=n(c9e,"STRONG",{});var iPr=s(mJ);oKe=r(iPr,"clip"),iPr.forEach(t),rKe=r(c9e," \u2014 "),Tk=n(c9e,"A",{href:!0});var dPr=s(Tk);tKe=r(dPr,"CLIPFeatureExtractor"),dPr.forEach(t),aKe=r(c9e," (CLIP model)"),c9e.forEach(t),nKe=i(le),Zg=n(le,"LI",{});var f9e=s(Zg);gJ=n(f9e,"STRONG",{});var cPr=s(gJ);sKe=r(cPr,"convnext"),cPr.forEach(t),lKe=r(f9e," \u2014 "),Fk=n(f9e,"A",{href:!0});var fPr=s(Fk);iKe=r(fPr,"ConvNextFeatureExtractor"),fPr.forEach(t),dKe=r(f9e," (ConvNext model)"),f9e.forEach(t),cKe=i(le),eh=n(le,"LI",{});var m9e=s(eh);hJ=n(m9e,"STRONG",{});var mPr=s(hJ);fKe=r(mPr,"deit"),mPr.forEach(t),mKe=r(m9e," \u2014 "),Ck=n(m9e,"A",{href:!0});var gPr=s(Ck);gKe=r(gPr,"DeiTFeatureExtractor"),gPr.forEach(t),hKe=r(m9e," (DeiT model)"),m9e.forEach(t),pKe=i(le),oh=n(le,"LI",{});var g9e=s(oh);pJ=n(g9e,"STRONG",{});var hPr=s(pJ);_Ke=r(hPr,"detr"),hPr.forEach(t),uKe=r(g9e," \u2014 "),Mk=n(g9e,"A",{href:!0});var pPr=s(Mk);bKe=r(pPr,"DetrFeatureExtractor"),pPr.forEach(t),vKe=r(g9e," (DETR model)"),g9e.forEach(t),TKe=i(le),rh=n(le,"LI",{});var h9e=s(rh);_J=n(h9e,"STRONG",{});var _Pr=s(_J);FKe=r(_Pr,"hubert"),_Pr.forEach(t),CKe=r(h9e," \u2014 "),Ek=n(h9e,"A",{href:!0});var uPr=s(Ek);MKe=r(uPr,"Wav2Vec2FeatureExtractor"),uPr.forEach(t),EKe=r(h9e," (Hubert model)"),h9e.forEach(t),yKe=i(le),th=n(le,"LI",{});var p9e=s(th);uJ=n(p9e,"STRONG",{});var bPr=s(uJ);wKe=r(bPr,"layoutlmv2"),bPr.forEach(t),AKe=r(p9e," \u2014 "),yk=n(p9e,"A",{href:!0});var vPr=s(yk);LKe=r(vPr,"LayoutLMv2FeatureExtractor"),vPr.forEach(t),BKe=r(p9e," (LayoutLMv2 model)"),p9e.forEach(t),xKe=i(le),ah=n(le,"LI",{});var _9e=s(ah);bJ=n(_9e,"STRONG",{});var TPr=s(bJ);kKe=r(TPr,"perceiver"),TPr.forEach(t),RKe=r(_9e," \u2014 "),wk=n(_9e,"A",{href:!0});var FPr=s(wk);SKe=r(FPr,"PerceiverFeatureExtractor"),FPr.forEach(t),PKe=r(_9e," (Perceiver model)"),_9e.forEach(t),$Ke=i(le),nh=n(le,"LI",{});var u9e=s(nh);vJ=n(u9e,"STRONG",{});var CPr=s(vJ);IKe=r(CPr,"poolformer"),CPr.forEach(t),DKe=r(u9e," \u2014 "),Ak=n(u9e,"A",{href:!0});var MPr=s(Ak);jKe=r(MPr,"PoolFormerFeatureExtractor"),MPr.forEach(t),NKe=r(u9e," (PoolFormer model)"),u9e.forEach(t),qKe=i(le),sh=n(le,"LI",{});var b9e=s(sh);TJ=n(b9e,"STRONG",{});var EPr=s(TJ);GKe=r(EPr,"resnet"),EPr.forEach(t),OKe=r(b9e," \u2014 "),Lk=n(b9e,"A",{href:!0});var yPr=s(Lk);XKe=r(yPr,"ConvNextFeatureExtractor"),yPr.forEach(t),VKe=r(b9e," (ResNet model)"),b9e.forEach(t),zKe=i(le),lh=n(le,"LI",{});var v9e=s(lh);FJ=n(v9e,"STRONG",{});var wPr=s(FJ);WKe=r(wPr,"segformer"),wPr.forEach(t),QKe=r(v9e," \u2014 "),Bk=n(v9e,"A",{href:!0});var APr=s(Bk);HKe=r(APr,"SegformerFeatureExtractor"),APr.forEach(t),UKe=r(v9e," (SegFormer model)"),v9e.forEach(t),JKe=i(le),ih=n(le,"LI",{});var T9e=s(ih);CJ=n(T9e,"STRONG",{});var LPr=s(CJ);YKe=r(LPr,"speech_to_text"),LPr.forEach(t),KKe=r(T9e," \u2014 "),xk=n(T9e,"A",{href:!0});var BPr=s(xk);ZKe=r(BPr,"Speech2TextFeatureExtractor"),BPr.forEach(t),eZe=r(T9e," (Speech2Text model)"),T9e.forEach(t),oZe=i(le),dh=n(le,"LI",{});var F9e=s(dh);MJ=n(F9e,"STRONG",{});var xPr=s(MJ);rZe=r(xPr,"swin"),xPr.forEach(t),tZe=r(F9e," \u2014 "),kk=n(F9e,"A",{href:!0});var kPr=s(kk);aZe=r(kPr,"ViTFeatureExtractor"),kPr.forEach(t),nZe=r(F9e," (Swin model)"),F9e.forEach(t),sZe=i(le),ch=n(le,"LI",{});var C9e=s(ch);EJ=n(C9e,"STRONG",{});var RPr=s(EJ);lZe=r(RPr,"vit"),RPr.forEach(t),iZe=r(C9e," \u2014 "),Rk=n(C9e,"A",{href:!0});var SPr=s(Rk);dZe=r(SPr,"ViTFeatureExtractor"),SPr.forEach(t),cZe=r(C9e," (ViT model)"),C9e.forEach(t),fZe=i(le),fh=n(le,"LI",{});var M9e=s(fh);yJ=n(M9e,"STRONG",{});var PPr=s(yJ);mZe=r(PPr,"vit_mae"),PPr.forEach(t),gZe=r(M9e," \u2014 "),Sk=n(M9e,"A",{href:!0});var $Pr=s(Sk);hZe=r($Pr,"ViTFeatureExtractor"),$Pr.forEach(t),pZe=r(M9e," (ViTMAE model)"),M9e.forEach(t),_Ze=i(le),mh=n(le,"LI",{});var E9e=s(mh);wJ=n(E9e,"STRONG",{});var IPr=s(wJ);uZe=r(IPr,"wav2vec2"),IPr.forEach(t),bZe=r(E9e," \u2014 "),Pk=n(E9e,"A",{href:!0});var DPr=s(Pk);vZe=r(DPr,"Wav2Vec2FeatureExtractor"),DPr.forEach(t),TZe=r(E9e," (Wav2Vec2 model)"),E9e.forEach(t),le.forEach(t),FZe=i(St),m(gh.$$.fragment,St),CZe=i(St),AJ=n(St,"P",{});var jPr=s(AJ);MZe=r(jPr,"Examples:"),jPr.forEach(t),EZe=i(St),m(YE.$$.fragment,St),St.forEach(t),yZe=i(js),hh=n(js,"DIV",{class:!0});var rke=s(hh);m(KE.$$.fragment,rke),wZe=i(rke),LJ=n(rke,"P",{});var NPr=s(LJ);AZe=r(NPr,"Register a new feature extractor for this class."),NPr.forEach(t),rke.forEach(t),js.forEach(t),K7e=i(c),qi=n(c,"H2",{class:!0});var tke=s(qi);ph=n(tke,"A",{id:!0,class:!0,href:!0});var qPr=s(ph);BJ=n(qPr,"SPAN",{});var GPr=s(BJ);m(ZE.$$.fragment,GPr),GPr.forEach(t),qPr.forEach(t),LZe=i(tke),xJ=n(tke,"SPAN",{});var OPr=s(xJ);BZe=r(OPr,"AutoProcessor"),OPr.forEach(t),tke.forEach(t),Z7e=i(c),Wo=n(c,"DIV",{class:!0});var Ns=s(Wo);m(e3.$$.fragment,Ns),xZe=i(Ns),o3=n(Ns,"P",{});var ake=s(o3);kZe=r(ake,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$k=n(ake,"A",{href:!0});var XPr=s($k);RZe=r(XPr,"AutoProcessor.from_pretrained()"),XPr.forEach(t),SZe=r(ake," class method."),ake.forEach(t),PZe=i(Ns),r3=n(Ns,"P",{});var nke=s(r3);$Ze=r(nke,"This class cannot be instantiated directly using "),kJ=n(nke,"CODE",{});var VPr=s(kJ);IZe=r(VPr,"__init__()"),VPr.forEach(t),DZe=r(nke," (throws an error)."),nke.forEach(t),jZe=i(Ns),Re=n(Ns,"DIV",{class:!0});var Pt=s(Re);m(t3.$$.fragment,Pt),NZe=i(Pt),RJ=n(Pt,"P",{});var zPr=s(RJ);qZe=r(zPr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zPr.forEach(t),GZe=i(Pt),Gi=n(Pt,"P",{});var qV=s(Gi);OZe=r(qV,"The processor class to instantiate is selected based on the "),SJ=n(qV,"CODE",{});var WPr=s(SJ);XZe=r(WPr,"model_type"),WPr.forEach(t),VZe=r(qV,` property of the config object (either
passed as an argument or loaded from `),PJ=n(qV,"CODE",{});var QPr=s(PJ);zZe=r(QPr,"pretrained_model_name_or_path"),QPr.forEach(t),WZe=r(qV," if possible):"),qV.forEach(t),QZe=i(Pt),Ae=n(Pt,"UL",{});var jo=s(Ae);_h=n(jo,"LI",{});var y9e=s(_h);$J=n(y9e,"STRONG",{});var HPr=s($J);HZe=r(HPr,"clip"),HPr.forEach(t),UZe=r(y9e," \u2014 "),Ik=n(y9e,"A",{href:!0});var UPr=s(Ik);JZe=r(UPr,"CLIPProcessor"),UPr.forEach(t),YZe=r(y9e," (CLIP model)"),y9e.forEach(t),KZe=i(jo),uh=n(jo,"LI",{});var w9e=s(uh);IJ=n(w9e,"STRONG",{});var JPr=s(IJ);ZZe=r(JPr,"layoutlmv2"),JPr.forEach(t),eeo=r(w9e," \u2014 "),Dk=n(w9e,"A",{href:!0});var YPr=s(Dk);oeo=r(YPr,"LayoutLMv2Processor"),YPr.forEach(t),reo=r(w9e," (LayoutLMv2 model)"),w9e.forEach(t),teo=i(jo),bh=n(jo,"LI",{});var A9e=s(bh);DJ=n(A9e,"STRONG",{});var KPr=s(DJ);aeo=r(KPr,"layoutxlm"),KPr.forEach(t),neo=r(A9e," \u2014 "),jk=n(A9e,"A",{href:!0});var ZPr=s(jk);seo=r(ZPr,"LayoutXLMProcessor"),ZPr.forEach(t),leo=r(A9e," (LayoutXLM model)"),A9e.forEach(t),ieo=i(jo),vh=n(jo,"LI",{});var L9e=s(vh);jJ=n(L9e,"STRONG",{});var e$r=s(jJ);deo=r(e$r,"speech_to_text"),e$r.forEach(t),ceo=r(L9e," \u2014 "),Nk=n(L9e,"A",{href:!0});var o$r=s(Nk);feo=r(o$r,"Speech2TextProcessor"),o$r.forEach(t),meo=r(L9e," (Speech2Text model)"),L9e.forEach(t),geo=i(jo),Th=n(jo,"LI",{});var B9e=s(Th);NJ=n(B9e,"STRONG",{});var r$r=s(NJ);heo=r(r$r,"speech_to_text_2"),r$r.forEach(t),peo=r(B9e," \u2014 "),qk=n(B9e,"A",{href:!0});var t$r=s(qk);_eo=r(t$r,"Speech2Text2Processor"),t$r.forEach(t),ueo=r(B9e," (Speech2Text2 model)"),B9e.forEach(t),beo=i(jo),Fh=n(jo,"LI",{});var x9e=s(Fh);qJ=n(x9e,"STRONG",{});var a$r=s(qJ);veo=r(a$r,"trocr"),a$r.forEach(t),Teo=r(x9e," \u2014 "),Gk=n(x9e,"A",{href:!0});var n$r=s(Gk);Feo=r(n$r,"TrOCRProcessor"),n$r.forEach(t),Ceo=r(x9e," (TrOCR model)"),x9e.forEach(t),Meo=i(jo),Ch=n(jo,"LI",{});var k9e=s(Ch);GJ=n(k9e,"STRONG",{});var s$r=s(GJ);Eeo=r(s$r,"vision-text-dual-encoder"),s$r.forEach(t),yeo=r(k9e," \u2014 "),Ok=n(k9e,"A",{href:!0});var l$r=s(Ok);weo=r(l$r,"VisionTextDualEncoderProcessor"),l$r.forEach(t),Aeo=r(k9e," (VisionTextDualEncoder model)"),k9e.forEach(t),Leo=i(jo),Mh=n(jo,"LI",{});var R9e=s(Mh);OJ=n(R9e,"STRONG",{});var i$r=s(OJ);Beo=r(i$r,"wav2vec2"),i$r.forEach(t),xeo=r(R9e," \u2014 "),Xk=n(R9e,"A",{href:!0});var d$r=s(Xk);keo=r(d$r,"Wav2Vec2Processor"),d$r.forEach(t),Reo=r(R9e," (Wav2Vec2 model)"),R9e.forEach(t),jo.forEach(t),Seo=i(Pt),m(Eh.$$.fragment,Pt),Peo=i(Pt),XJ=n(Pt,"P",{});var c$r=s(XJ);$eo=r(c$r,"Examples:"),c$r.forEach(t),Ieo=i(Pt),m(a3.$$.fragment,Pt),Pt.forEach(t),Deo=i(Ns),yh=n(Ns,"DIV",{class:!0});var ske=s(yh);m(n3.$$.fragment,ske),jeo=i(ske),VJ=n(ske,"P",{});var f$r=s(VJ);Neo=r(f$r,"Register a new processor for this class."),f$r.forEach(t),ske.forEach(t),Ns.forEach(t),eBe=i(c),Oi=n(c,"H2",{class:!0});var lke=s(Oi);wh=n(lke,"A",{id:!0,class:!0,href:!0});var m$r=s(wh);zJ=n(m$r,"SPAN",{});var g$r=s(zJ);m(s3.$$.fragment,g$r),g$r.forEach(t),m$r.forEach(t),qeo=i(lke),WJ=n(lke,"SPAN",{});var h$r=s(WJ);Geo=r(h$r,"AutoModel"),h$r.forEach(t),lke.forEach(t),oBe=i(c),Qo=n(c,"DIV",{class:!0});var qs=s(Qo);m(l3.$$.fragment,qs),Oeo=i(qs),Xi=n(qs,"P",{});var GV=s(Xi);Xeo=r(GV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QJ=n(GV,"CODE",{});var p$r=s(QJ);Veo=r(p$r,"from_pretrained()"),p$r.forEach(t),zeo=r(GV,"class method or the "),HJ=n(GV,"CODE",{});var _$r=s(HJ);Weo=r(_$r,"from_config()"),_$r.forEach(t),Qeo=r(GV,`class
method.`),GV.forEach(t),Heo=i(qs),i3=n(qs,"P",{});var ike=s(i3);Ueo=r(ike,"This class cannot be instantiated directly using "),UJ=n(ike,"CODE",{});var u$r=s(UJ);Jeo=r(u$r,"__init__()"),u$r.forEach(t),Yeo=r(ike," (throws an error)."),ike.forEach(t),Keo=i(qs),qr=n(qs,"DIV",{class:!0});var Gs=s(qr);m(d3.$$.fragment,Gs),Zeo=i(Gs),JJ=n(Gs,"P",{});var b$r=s(JJ);eoo=r(b$r,"Instantiates one of the base model classes of the library from a configuration."),b$r.forEach(t),ooo=i(Gs),Vi=n(Gs,"P",{});var OV=s(Vi);roo=r(OV,`Note:
Loading a model from its configuration file does `),YJ=n(OV,"STRONG",{});var v$r=s(YJ);too=r(v$r,"not"),v$r.forEach(t),aoo=r(OV,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(OV,"CODE",{});var T$r=s(KJ);noo=r(T$r,"from_pretrained()"),T$r.forEach(t),soo=r(OV,"to load the model weights."),OV.forEach(t),loo=i(Gs),ZJ=n(Gs,"P",{});var F$r=s(ZJ);ioo=r(F$r,"Examples:"),F$r.forEach(t),doo=i(Gs),m(c3.$$.fragment,Gs),Gs.forEach(t),coo=i(qs),Se=n(qs,"DIV",{class:!0});var $t=s(Se);m(f3.$$.fragment,$t),foo=i($t),eY=n($t,"P",{});var C$r=s(eY);moo=r(C$r,"Instantiate one of the base model classes of the library from a pretrained model."),C$r.forEach(t),goo=i($t),Na=n($t,"P",{});var xM=s(Na);hoo=r(xM,"The model class to instantiate is selected based on the "),oY=n(xM,"CODE",{});var M$r=s(oY);poo=r(M$r,"model_type"),M$r.forEach(t),_oo=r(xM,` property of the config object (either
passed as an argument or loaded from `),rY=n(xM,"CODE",{});var E$r=s(rY);uoo=r(E$r,"pretrained_model_name_or_path"),E$r.forEach(t),boo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tY=n(xM,"CODE",{});var y$r=s(tY);voo=r(y$r,"pretrained_model_name_or_path"),y$r.forEach(t),Too=r(xM,":"),xM.forEach(t),Foo=i($t),F=n($t,"UL",{});var C=s(F);Ah=n(C,"LI",{});var S9e=s(Ah);aY=n(S9e,"STRONG",{});var w$r=s(aY);Coo=r(w$r,"albert"),w$r.forEach(t),Moo=r(S9e," \u2014 "),Vk=n(S9e,"A",{href:!0});var A$r=s(Vk);Eoo=r(A$r,"AlbertModel"),A$r.forEach(t),yoo=r(S9e," (ALBERT model)"),S9e.forEach(t),woo=i(C),Lh=n(C,"LI",{});var P9e=s(Lh);nY=n(P9e,"STRONG",{});var L$r=s(nY);Aoo=r(L$r,"bart"),L$r.forEach(t),Loo=r(P9e," \u2014 "),zk=n(P9e,"A",{href:!0});var B$r=s(zk);Boo=r(B$r,"BartModel"),B$r.forEach(t),xoo=r(P9e," (BART model)"),P9e.forEach(t),koo=i(C),Bh=n(C,"LI",{});var $9e=s(Bh);sY=n($9e,"STRONG",{});var x$r=s(sY);Roo=r(x$r,"beit"),x$r.forEach(t),Soo=r($9e," \u2014 "),Wk=n($9e,"A",{href:!0});var k$r=s(Wk);Poo=r(k$r,"BeitModel"),k$r.forEach(t),$oo=r($9e," (BEiT model)"),$9e.forEach(t),Ioo=i(C),xh=n(C,"LI",{});var I9e=s(xh);lY=n(I9e,"STRONG",{});var R$r=s(lY);Doo=r(R$r,"bert"),R$r.forEach(t),joo=r(I9e," \u2014 "),Qk=n(I9e,"A",{href:!0});var S$r=s(Qk);Noo=r(S$r,"BertModel"),S$r.forEach(t),qoo=r(I9e," (BERT model)"),I9e.forEach(t),Goo=i(C),kh=n(C,"LI",{});var D9e=s(kh);iY=n(D9e,"STRONG",{});var P$r=s(iY);Ooo=r(P$r,"bert-generation"),P$r.forEach(t),Xoo=r(D9e," \u2014 "),Hk=n(D9e,"A",{href:!0});var $$r=s(Hk);Voo=r($$r,"BertGenerationEncoder"),$$r.forEach(t),zoo=r(D9e," (Bert Generation model)"),D9e.forEach(t),Woo=i(C),Rh=n(C,"LI",{});var j9e=s(Rh);dY=n(j9e,"STRONG",{});var I$r=s(dY);Qoo=r(I$r,"big_bird"),I$r.forEach(t),Hoo=r(j9e," \u2014 "),Uk=n(j9e,"A",{href:!0});var D$r=s(Uk);Uoo=r(D$r,"BigBirdModel"),D$r.forEach(t),Joo=r(j9e," (BigBird model)"),j9e.forEach(t),Yoo=i(C),Sh=n(C,"LI",{});var N9e=s(Sh);cY=n(N9e,"STRONG",{});var j$r=s(cY);Koo=r(j$r,"bigbird_pegasus"),j$r.forEach(t),Zoo=r(N9e," \u2014 "),Jk=n(N9e,"A",{href:!0});var N$r=s(Jk);ero=r(N$r,"BigBirdPegasusModel"),N$r.forEach(t),oro=r(N9e," (BigBirdPegasus model)"),N9e.forEach(t),rro=i(C),Ph=n(C,"LI",{});var q9e=s(Ph);fY=n(q9e,"STRONG",{});var q$r=s(fY);tro=r(q$r,"blenderbot"),q$r.forEach(t),aro=r(q9e," \u2014 "),Yk=n(q9e,"A",{href:!0});var G$r=s(Yk);nro=r(G$r,"BlenderbotModel"),G$r.forEach(t),sro=r(q9e," (Blenderbot model)"),q9e.forEach(t),lro=i(C),$h=n(C,"LI",{});var G9e=s($h);mY=n(G9e,"STRONG",{});var O$r=s(mY);iro=r(O$r,"blenderbot-small"),O$r.forEach(t),dro=r(G9e," \u2014 "),Kk=n(G9e,"A",{href:!0});var X$r=s(Kk);cro=r(X$r,"BlenderbotSmallModel"),X$r.forEach(t),fro=r(G9e," (BlenderbotSmall model)"),G9e.forEach(t),mro=i(C),Ih=n(C,"LI",{});var O9e=s(Ih);gY=n(O9e,"STRONG",{});var V$r=s(gY);gro=r(V$r,"camembert"),V$r.forEach(t),hro=r(O9e," \u2014 "),Zk=n(O9e,"A",{href:!0});var z$r=s(Zk);pro=r(z$r,"CamembertModel"),z$r.forEach(t),_ro=r(O9e," (CamemBERT model)"),O9e.forEach(t),uro=i(C),Dh=n(C,"LI",{});var X9e=s(Dh);hY=n(X9e,"STRONG",{});var W$r=s(hY);bro=r(W$r,"canine"),W$r.forEach(t),vro=r(X9e," \u2014 "),eR=n(X9e,"A",{href:!0});var Q$r=s(eR);Tro=r(Q$r,"CanineModel"),Q$r.forEach(t),Fro=r(X9e," (Canine model)"),X9e.forEach(t),Cro=i(C),jh=n(C,"LI",{});var V9e=s(jh);pY=n(V9e,"STRONG",{});var H$r=s(pY);Mro=r(H$r,"clip"),H$r.forEach(t),Ero=r(V9e," \u2014 "),oR=n(V9e,"A",{href:!0});var U$r=s(oR);yro=r(U$r,"CLIPModel"),U$r.forEach(t),wro=r(V9e," (CLIP model)"),V9e.forEach(t),Aro=i(C),Nh=n(C,"LI",{});var z9e=s(Nh);_Y=n(z9e,"STRONG",{});var J$r=s(_Y);Lro=r(J$r,"convbert"),J$r.forEach(t),Bro=r(z9e," \u2014 "),rR=n(z9e,"A",{href:!0});var Y$r=s(rR);xro=r(Y$r,"ConvBertModel"),Y$r.forEach(t),kro=r(z9e," (ConvBERT model)"),z9e.forEach(t),Rro=i(C),qh=n(C,"LI",{});var W9e=s(qh);uY=n(W9e,"STRONG",{});var K$r=s(uY);Sro=r(K$r,"convnext"),K$r.forEach(t),Pro=r(W9e," \u2014 "),tR=n(W9e,"A",{href:!0});var Z$r=s(tR);$ro=r(Z$r,"ConvNextModel"),Z$r.forEach(t),Iro=r(W9e," (ConvNext model)"),W9e.forEach(t),Dro=i(C),Gh=n(C,"LI",{});var Q9e=s(Gh);bY=n(Q9e,"STRONG",{});var eIr=s(bY);jro=r(eIr,"ctrl"),eIr.forEach(t),Nro=r(Q9e," \u2014 "),aR=n(Q9e,"A",{href:!0});var oIr=s(aR);qro=r(oIr,"CTRLModel"),oIr.forEach(t),Gro=r(Q9e," (CTRL model)"),Q9e.forEach(t),Oro=i(C),Oh=n(C,"LI",{});var H9e=s(Oh);vY=n(H9e,"STRONG",{});var rIr=s(vY);Xro=r(rIr,"data2vec-audio"),rIr.forEach(t),Vro=r(H9e," \u2014 "),nR=n(H9e,"A",{href:!0});var tIr=s(nR);zro=r(tIr,"Data2VecAudioModel"),tIr.forEach(t),Wro=r(H9e," (Data2VecAudio model)"),H9e.forEach(t),Qro=i(C),Xh=n(C,"LI",{});var U9e=s(Xh);TY=n(U9e,"STRONG",{});var aIr=s(TY);Hro=r(aIr,"data2vec-text"),aIr.forEach(t),Uro=r(U9e," \u2014 "),sR=n(U9e,"A",{href:!0});var nIr=s(sR);Jro=r(nIr,"Data2VecTextModel"),nIr.forEach(t),Yro=r(U9e," (Data2VecText model)"),U9e.forEach(t),Kro=i(C),Vh=n(C,"LI",{});var J9e=s(Vh);FY=n(J9e,"STRONG",{});var sIr=s(FY);Zro=r(sIr,"deberta"),sIr.forEach(t),eto=r(J9e," \u2014 "),lR=n(J9e,"A",{href:!0});var lIr=s(lR);oto=r(lIr,"DebertaModel"),lIr.forEach(t),rto=r(J9e," (DeBERTa model)"),J9e.forEach(t),tto=i(C),zh=n(C,"LI",{});var Y9e=s(zh);CY=n(Y9e,"STRONG",{});var iIr=s(CY);ato=r(iIr,"deberta-v2"),iIr.forEach(t),nto=r(Y9e," \u2014 "),iR=n(Y9e,"A",{href:!0});var dIr=s(iR);sto=r(dIr,"DebertaV2Model"),dIr.forEach(t),lto=r(Y9e," (DeBERTa-v2 model)"),Y9e.forEach(t),ito=i(C),Wh=n(C,"LI",{});var K9e=s(Wh);MY=n(K9e,"STRONG",{});var cIr=s(MY);dto=r(cIr,"deit"),cIr.forEach(t),cto=r(K9e," \u2014 "),dR=n(K9e,"A",{href:!0});var fIr=s(dR);fto=r(fIr,"DeiTModel"),fIr.forEach(t),mto=r(K9e," (DeiT model)"),K9e.forEach(t),gto=i(C),Qh=n(C,"LI",{});var Z9e=s(Qh);EY=n(Z9e,"STRONG",{});var mIr=s(EY);hto=r(mIr,"detr"),mIr.forEach(t),pto=r(Z9e," \u2014 "),cR=n(Z9e,"A",{href:!0});var gIr=s(cR);_to=r(gIr,"DetrModel"),gIr.forEach(t),uto=r(Z9e," (DETR model)"),Z9e.forEach(t),bto=i(C),Hh=n(C,"LI",{});var eCe=s(Hh);yY=n(eCe,"STRONG",{});var hIr=s(yY);vto=r(hIr,"distilbert"),hIr.forEach(t),Tto=r(eCe," \u2014 "),fR=n(eCe,"A",{href:!0});var pIr=s(fR);Fto=r(pIr,"DistilBertModel"),pIr.forEach(t),Cto=r(eCe," (DistilBERT model)"),eCe.forEach(t),Mto=i(C),Uh=n(C,"LI",{});var oCe=s(Uh);wY=n(oCe,"STRONG",{});var _Ir=s(wY);Eto=r(_Ir,"dpr"),_Ir.forEach(t),yto=r(oCe," \u2014 "),mR=n(oCe,"A",{href:!0});var uIr=s(mR);wto=r(uIr,"DPRQuestionEncoder"),uIr.forEach(t),Ato=r(oCe," (DPR model)"),oCe.forEach(t),Lto=i(C),Jh=n(C,"LI",{});var rCe=s(Jh);AY=n(rCe,"STRONG",{});var bIr=s(AY);Bto=r(bIr,"electra"),bIr.forEach(t),xto=r(rCe," \u2014 "),gR=n(rCe,"A",{href:!0});var vIr=s(gR);kto=r(vIr,"ElectraModel"),vIr.forEach(t),Rto=r(rCe," (ELECTRA model)"),rCe.forEach(t),Sto=i(C),Yh=n(C,"LI",{});var tCe=s(Yh);LY=n(tCe,"STRONG",{});var TIr=s(LY);Pto=r(TIr,"flaubert"),TIr.forEach(t),$to=r(tCe," \u2014 "),hR=n(tCe,"A",{href:!0});var FIr=s(hR);Ito=r(FIr,"FlaubertModel"),FIr.forEach(t),Dto=r(tCe," (FlauBERT model)"),tCe.forEach(t),jto=i(C),Kh=n(C,"LI",{});var aCe=s(Kh);BY=n(aCe,"STRONG",{});var CIr=s(BY);Nto=r(CIr,"fnet"),CIr.forEach(t),qto=r(aCe," \u2014 "),pR=n(aCe,"A",{href:!0});var MIr=s(pR);Gto=r(MIr,"FNetModel"),MIr.forEach(t),Oto=r(aCe," (FNet model)"),aCe.forEach(t),Xto=i(C),Zh=n(C,"LI",{});var nCe=s(Zh);xY=n(nCe,"STRONG",{});var EIr=s(xY);Vto=r(EIr,"fsmt"),EIr.forEach(t),zto=r(nCe," \u2014 "),_R=n(nCe,"A",{href:!0});var yIr=s(_R);Wto=r(yIr,"FSMTModel"),yIr.forEach(t),Qto=r(nCe," (FairSeq Machine-Translation model)"),nCe.forEach(t),Hto=i(C),Ss=n(C,"LI",{});var i8=s(Ss);kY=n(i8,"STRONG",{});var wIr=s(kY);Uto=r(wIr,"funnel"),wIr.forEach(t),Jto=r(i8," \u2014 "),uR=n(i8,"A",{href:!0});var AIr=s(uR);Yto=r(AIr,"FunnelModel"),AIr.forEach(t),Kto=r(i8," or "),bR=n(i8,"A",{href:!0});var LIr=s(bR);Zto=r(LIr,"FunnelBaseModel"),LIr.forEach(t),eao=r(i8," (Funnel Transformer model)"),i8.forEach(t),oao=i(C),ep=n(C,"LI",{});var sCe=s(ep);RY=n(sCe,"STRONG",{});var BIr=s(RY);rao=r(BIr,"gpt2"),BIr.forEach(t),tao=r(sCe," \u2014 "),vR=n(sCe,"A",{href:!0});var xIr=s(vR);aao=r(xIr,"GPT2Model"),xIr.forEach(t),nao=r(sCe," (OpenAI GPT-2 model)"),sCe.forEach(t),sao=i(C),op=n(C,"LI",{});var lCe=s(op);SY=n(lCe,"STRONG",{});var kIr=s(SY);lao=r(kIr,"gpt_neo"),kIr.forEach(t),iao=r(lCe," \u2014 "),TR=n(lCe,"A",{href:!0});var RIr=s(TR);dao=r(RIr,"GPTNeoModel"),RIr.forEach(t),cao=r(lCe," (GPT Neo model)"),lCe.forEach(t),fao=i(C),rp=n(C,"LI",{});var iCe=s(rp);PY=n(iCe,"STRONG",{});var SIr=s(PY);mao=r(SIr,"gptj"),SIr.forEach(t),gao=r(iCe," \u2014 "),FR=n(iCe,"A",{href:!0});var PIr=s(FR);hao=r(PIr,"GPTJModel"),PIr.forEach(t),pao=r(iCe," (GPT-J model)"),iCe.forEach(t),_ao=i(C),tp=n(C,"LI",{});var dCe=s(tp);$Y=n(dCe,"STRONG",{});var $Ir=s($Y);uao=r($Ir,"hubert"),$Ir.forEach(t),bao=r(dCe," \u2014 "),CR=n(dCe,"A",{href:!0});var IIr=s(CR);vao=r(IIr,"HubertModel"),IIr.forEach(t),Tao=r(dCe," (Hubert model)"),dCe.forEach(t),Fao=i(C),ap=n(C,"LI",{});var cCe=s(ap);IY=n(cCe,"STRONG",{});var DIr=s(IY);Cao=r(DIr,"ibert"),DIr.forEach(t),Mao=r(cCe," \u2014 "),MR=n(cCe,"A",{href:!0});var jIr=s(MR);Eao=r(jIr,"IBertModel"),jIr.forEach(t),yao=r(cCe," (I-BERT model)"),cCe.forEach(t),wao=i(C),np=n(C,"LI",{});var fCe=s(np);DY=n(fCe,"STRONG",{});var NIr=s(DY);Aao=r(NIr,"imagegpt"),NIr.forEach(t),Lao=r(fCe," \u2014 "),ER=n(fCe,"A",{href:!0});var qIr=s(ER);Bao=r(qIr,"ImageGPTModel"),qIr.forEach(t),xao=r(fCe," (ImageGPT model)"),fCe.forEach(t),kao=i(C),sp=n(C,"LI",{});var mCe=s(sp);jY=n(mCe,"STRONG",{});var GIr=s(jY);Rao=r(GIr,"layoutlm"),GIr.forEach(t),Sao=r(mCe," \u2014 "),yR=n(mCe,"A",{href:!0});var OIr=s(yR);Pao=r(OIr,"LayoutLMModel"),OIr.forEach(t),$ao=r(mCe," (LayoutLM model)"),mCe.forEach(t),Iao=i(C),lp=n(C,"LI",{});var gCe=s(lp);NY=n(gCe,"STRONG",{});var XIr=s(NY);Dao=r(XIr,"layoutlmv2"),XIr.forEach(t),jao=r(gCe," \u2014 "),wR=n(gCe,"A",{href:!0});var VIr=s(wR);Nao=r(VIr,"LayoutLMv2Model"),VIr.forEach(t),qao=r(gCe," (LayoutLMv2 model)"),gCe.forEach(t),Gao=i(C),ip=n(C,"LI",{});var hCe=s(ip);qY=n(hCe,"STRONG",{});var zIr=s(qY);Oao=r(zIr,"led"),zIr.forEach(t),Xao=r(hCe," \u2014 "),AR=n(hCe,"A",{href:!0});var WIr=s(AR);Vao=r(WIr,"LEDModel"),WIr.forEach(t),zao=r(hCe," (LED model)"),hCe.forEach(t),Wao=i(C),dp=n(C,"LI",{});var pCe=s(dp);GY=n(pCe,"STRONG",{});var QIr=s(GY);Qao=r(QIr,"longformer"),QIr.forEach(t),Hao=r(pCe," \u2014 "),LR=n(pCe,"A",{href:!0});var HIr=s(LR);Uao=r(HIr,"LongformerModel"),HIr.forEach(t),Jao=r(pCe," (Longformer model)"),pCe.forEach(t),Yao=i(C),cp=n(C,"LI",{});var _Ce=s(cp);OY=n(_Ce,"STRONG",{});var UIr=s(OY);Kao=r(UIr,"luke"),UIr.forEach(t),Zao=r(_Ce," \u2014 "),BR=n(_Ce,"A",{href:!0});var JIr=s(BR);eno=r(JIr,"LukeModel"),JIr.forEach(t),ono=r(_Ce," (LUKE model)"),_Ce.forEach(t),rno=i(C),fp=n(C,"LI",{});var uCe=s(fp);XY=n(uCe,"STRONG",{});var YIr=s(XY);tno=r(YIr,"lxmert"),YIr.forEach(t),ano=r(uCe," \u2014 "),xR=n(uCe,"A",{href:!0});var KIr=s(xR);nno=r(KIr,"LxmertModel"),KIr.forEach(t),sno=r(uCe," (LXMERT model)"),uCe.forEach(t),lno=i(C),mp=n(C,"LI",{});var bCe=s(mp);VY=n(bCe,"STRONG",{});var ZIr=s(VY);ino=r(ZIr,"m2m_100"),ZIr.forEach(t),dno=r(bCe," \u2014 "),kR=n(bCe,"A",{href:!0});var eDr=s(kR);cno=r(eDr,"M2M100Model"),eDr.forEach(t),fno=r(bCe," (M2M100 model)"),bCe.forEach(t),mno=i(C),gp=n(C,"LI",{});var vCe=s(gp);zY=n(vCe,"STRONG",{});var oDr=s(zY);gno=r(oDr,"marian"),oDr.forEach(t),hno=r(vCe," \u2014 "),RR=n(vCe,"A",{href:!0});var rDr=s(RR);pno=r(rDr,"MarianModel"),rDr.forEach(t),_no=r(vCe," (Marian model)"),vCe.forEach(t),uno=i(C),hp=n(C,"LI",{});var TCe=s(hp);WY=n(TCe,"STRONG",{});var tDr=s(WY);bno=r(tDr,"maskformer"),tDr.forEach(t),vno=r(TCe," \u2014 "),SR=n(TCe,"A",{href:!0});var aDr=s(SR);Tno=r(aDr,"MaskFormerModel"),aDr.forEach(t),Fno=r(TCe," (MaskFormer model)"),TCe.forEach(t),Cno=i(C),pp=n(C,"LI",{});var FCe=s(pp);QY=n(FCe,"STRONG",{});var nDr=s(QY);Mno=r(nDr,"mbart"),nDr.forEach(t),Eno=r(FCe," \u2014 "),PR=n(FCe,"A",{href:!0});var sDr=s(PR);yno=r(sDr,"MBartModel"),sDr.forEach(t),wno=r(FCe," (mBART model)"),FCe.forEach(t),Ano=i(C),_p=n(C,"LI",{});var CCe=s(_p);HY=n(CCe,"STRONG",{});var lDr=s(HY);Lno=r(lDr,"megatron-bert"),lDr.forEach(t),Bno=r(CCe," \u2014 "),$R=n(CCe,"A",{href:!0});var iDr=s($R);xno=r(iDr,"MegatronBertModel"),iDr.forEach(t),kno=r(CCe," (MegatronBert model)"),CCe.forEach(t),Rno=i(C),up=n(C,"LI",{});var MCe=s(up);UY=n(MCe,"STRONG",{});var dDr=s(UY);Sno=r(dDr,"mobilebert"),dDr.forEach(t),Pno=r(MCe," \u2014 "),IR=n(MCe,"A",{href:!0});var cDr=s(IR);$no=r(cDr,"MobileBertModel"),cDr.forEach(t),Ino=r(MCe," (MobileBERT model)"),MCe.forEach(t),Dno=i(C),bp=n(C,"LI",{});var ECe=s(bp);JY=n(ECe,"STRONG",{});var fDr=s(JY);jno=r(fDr,"mpnet"),fDr.forEach(t),Nno=r(ECe," \u2014 "),DR=n(ECe,"A",{href:!0});var mDr=s(DR);qno=r(mDr,"MPNetModel"),mDr.forEach(t),Gno=r(ECe," (MPNet model)"),ECe.forEach(t),Ono=i(C),vp=n(C,"LI",{});var yCe=s(vp);YY=n(yCe,"STRONG",{});var gDr=s(YY);Xno=r(gDr,"mt5"),gDr.forEach(t),Vno=r(yCe," \u2014 "),jR=n(yCe,"A",{href:!0});var hDr=s(jR);zno=r(hDr,"MT5Model"),hDr.forEach(t),Wno=r(yCe," (mT5 model)"),yCe.forEach(t),Qno=i(C),Tp=n(C,"LI",{});var wCe=s(Tp);KY=n(wCe,"STRONG",{});var pDr=s(KY);Hno=r(pDr,"nystromformer"),pDr.forEach(t),Uno=r(wCe," \u2014 "),NR=n(wCe,"A",{href:!0});var _Dr=s(NR);Jno=r(_Dr,"NystromformerModel"),_Dr.forEach(t),Yno=r(wCe," (Nystromformer model)"),wCe.forEach(t),Kno=i(C),Fp=n(C,"LI",{});var ACe=s(Fp);ZY=n(ACe,"STRONG",{});var uDr=s(ZY);Zno=r(uDr,"openai-gpt"),uDr.forEach(t),eso=r(ACe," \u2014 "),qR=n(ACe,"A",{href:!0});var bDr=s(qR);oso=r(bDr,"OpenAIGPTModel"),bDr.forEach(t),rso=r(ACe," (OpenAI GPT model)"),ACe.forEach(t),tso=i(C),Cp=n(C,"LI",{});var LCe=s(Cp);eK=n(LCe,"STRONG",{});var vDr=s(eK);aso=r(vDr,"pegasus"),vDr.forEach(t),nso=r(LCe," \u2014 "),GR=n(LCe,"A",{href:!0});var TDr=s(GR);sso=r(TDr,"PegasusModel"),TDr.forEach(t),lso=r(LCe," (Pegasus model)"),LCe.forEach(t),iso=i(C),Mp=n(C,"LI",{});var BCe=s(Mp);oK=n(BCe,"STRONG",{});var FDr=s(oK);dso=r(FDr,"perceiver"),FDr.forEach(t),cso=r(BCe," \u2014 "),OR=n(BCe,"A",{href:!0});var CDr=s(OR);fso=r(CDr,"PerceiverModel"),CDr.forEach(t),mso=r(BCe," (Perceiver model)"),BCe.forEach(t),gso=i(C),Ep=n(C,"LI",{});var xCe=s(Ep);rK=n(xCe,"STRONG",{});var MDr=s(rK);hso=r(MDr,"plbart"),MDr.forEach(t),pso=r(xCe," \u2014 "),XR=n(xCe,"A",{href:!0});var EDr=s(XR);_so=r(EDr,"PLBartModel"),EDr.forEach(t),uso=r(xCe," (PLBart model)"),xCe.forEach(t),bso=i(C),yp=n(C,"LI",{});var kCe=s(yp);tK=n(kCe,"STRONG",{});var yDr=s(tK);vso=r(yDr,"poolformer"),yDr.forEach(t),Tso=r(kCe," \u2014 "),VR=n(kCe,"A",{href:!0});var wDr=s(VR);Fso=r(wDr,"PoolFormerModel"),wDr.forEach(t),Cso=r(kCe," (PoolFormer model)"),kCe.forEach(t),Mso=i(C),wp=n(C,"LI",{});var RCe=s(wp);aK=n(RCe,"STRONG",{});var ADr=s(aK);Eso=r(ADr,"prophetnet"),ADr.forEach(t),yso=r(RCe," \u2014 "),zR=n(RCe,"A",{href:!0});var LDr=s(zR);wso=r(LDr,"ProphetNetModel"),LDr.forEach(t),Aso=r(RCe," (ProphetNet model)"),RCe.forEach(t),Lso=i(C),Ap=n(C,"LI",{});var SCe=s(Ap);nK=n(SCe,"STRONG",{});var BDr=s(nK);Bso=r(BDr,"qdqbert"),BDr.forEach(t),xso=r(SCe," \u2014 "),WR=n(SCe,"A",{href:!0});var xDr=s(WR);kso=r(xDr,"QDQBertModel"),xDr.forEach(t),Rso=r(SCe," (QDQBert model)"),SCe.forEach(t),Sso=i(C),Lp=n(C,"LI",{});var PCe=s(Lp);sK=n(PCe,"STRONG",{});var kDr=s(sK);Pso=r(kDr,"reformer"),kDr.forEach(t),$so=r(PCe," \u2014 "),QR=n(PCe,"A",{href:!0});var RDr=s(QR);Iso=r(RDr,"ReformerModel"),RDr.forEach(t),Dso=r(PCe," (Reformer model)"),PCe.forEach(t),jso=i(C),Bp=n(C,"LI",{});var $Ce=s(Bp);lK=n($Ce,"STRONG",{});var SDr=s(lK);Nso=r(SDr,"rembert"),SDr.forEach(t),qso=r($Ce," \u2014 "),HR=n($Ce,"A",{href:!0});var PDr=s(HR);Gso=r(PDr,"RemBertModel"),PDr.forEach(t),Oso=r($Ce," (RemBERT model)"),$Ce.forEach(t),Xso=i(C),xp=n(C,"LI",{});var ICe=s(xp);iK=n(ICe,"STRONG",{});var $Dr=s(iK);Vso=r($Dr,"resnet"),$Dr.forEach(t),zso=r(ICe," \u2014 "),UR=n(ICe,"A",{href:!0});var IDr=s(UR);Wso=r(IDr,"ResNetModel"),IDr.forEach(t),Qso=r(ICe," (ResNet model)"),ICe.forEach(t),Hso=i(C),kp=n(C,"LI",{});var DCe=s(kp);dK=n(DCe,"STRONG",{});var DDr=s(dK);Uso=r(DDr,"retribert"),DDr.forEach(t),Jso=r(DCe," \u2014 "),JR=n(DCe,"A",{href:!0});var jDr=s(JR);Yso=r(jDr,"RetriBertModel"),jDr.forEach(t),Kso=r(DCe," (RetriBERT model)"),DCe.forEach(t),Zso=i(C),Rp=n(C,"LI",{});var jCe=s(Rp);cK=n(jCe,"STRONG",{});var NDr=s(cK);elo=r(NDr,"roberta"),NDr.forEach(t),olo=r(jCe," \u2014 "),YR=n(jCe,"A",{href:!0});var qDr=s(YR);rlo=r(qDr,"RobertaModel"),qDr.forEach(t),tlo=r(jCe," (RoBERTa model)"),jCe.forEach(t),alo=i(C),Sp=n(C,"LI",{});var NCe=s(Sp);fK=n(NCe,"STRONG",{});var GDr=s(fK);nlo=r(GDr,"roformer"),GDr.forEach(t),slo=r(NCe," \u2014 "),KR=n(NCe,"A",{href:!0});var ODr=s(KR);llo=r(ODr,"RoFormerModel"),ODr.forEach(t),ilo=r(NCe," (RoFormer model)"),NCe.forEach(t),dlo=i(C),Pp=n(C,"LI",{});var qCe=s(Pp);mK=n(qCe,"STRONG",{});var XDr=s(mK);clo=r(XDr,"segformer"),XDr.forEach(t),flo=r(qCe," \u2014 "),ZR=n(qCe,"A",{href:!0});var VDr=s(ZR);mlo=r(VDr,"SegformerModel"),VDr.forEach(t),glo=r(qCe," (SegFormer model)"),qCe.forEach(t),hlo=i(C),$p=n(C,"LI",{});var GCe=s($p);gK=n(GCe,"STRONG",{});var zDr=s(gK);plo=r(zDr,"sew"),zDr.forEach(t),_lo=r(GCe," \u2014 "),eS=n(GCe,"A",{href:!0});var WDr=s(eS);ulo=r(WDr,"SEWModel"),WDr.forEach(t),blo=r(GCe," (SEW model)"),GCe.forEach(t),vlo=i(C),Ip=n(C,"LI",{});var OCe=s(Ip);hK=n(OCe,"STRONG",{});var QDr=s(hK);Tlo=r(QDr,"sew-d"),QDr.forEach(t),Flo=r(OCe," \u2014 "),oS=n(OCe,"A",{href:!0});var HDr=s(oS);Clo=r(HDr,"SEWDModel"),HDr.forEach(t),Mlo=r(OCe," (SEW-D model)"),OCe.forEach(t),Elo=i(C),Dp=n(C,"LI",{});var XCe=s(Dp);pK=n(XCe,"STRONG",{});var UDr=s(pK);ylo=r(UDr,"speech_to_text"),UDr.forEach(t),wlo=r(XCe," \u2014 "),rS=n(XCe,"A",{href:!0});var JDr=s(rS);Alo=r(JDr,"Speech2TextModel"),JDr.forEach(t),Llo=r(XCe," (Speech2Text model)"),XCe.forEach(t),Blo=i(C),jp=n(C,"LI",{});var VCe=s(jp);_K=n(VCe,"STRONG",{});var YDr=s(_K);xlo=r(YDr,"splinter"),YDr.forEach(t),klo=r(VCe," \u2014 "),tS=n(VCe,"A",{href:!0});var KDr=s(tS);Rlo=r(KDr,"SplinterModel"),KDr.forEach(t),Slo=r(VCe," (Splinter model)"),VCe.forEach(t),Plo=i(C),Np=n(C,"LI",{});var zCe=s(Np);uK=n(zCe,"STRONG",{});var ZDr=s(uK);$lo=r(ZDr,"squeezebert"),ZDr.forEach(t),Ilo=r(zCe," \u2014 "),aS=n(zCe,"A",{href:!0});var ejr=s(aS);Dlo=r(ejr,"SqueezeBertModel"),ejr.forEach(t),jlo=r(zCe," (SqueezeBERT model)"),zCe.forEach(t),Nlo=i(C),qp=n(C,"LI",{});var WCe=s(qp);bK=n(WCe,"STRONG",{});var ojr=s(bK);qlo=r(ojr,"swin"),ojr.forEach(t),Glo=r(WCe," \u2014 "),nS=n(WCe,"A",{href:!0});var rjr=s(nS);Olo=r(rjr,"SwinModel"),rjr.forEach(t),Xlo=r(WCe," (Swin model)"),WCe.forEach(t),Vlo=i(C),Gp=n(C,"LI",{});var QCe=s(Gp);vK=n(QCe,"STRONG",{});var tjr=s(vK);zlo=r(tjr,"t5"),tjr.forEach(t),Wlo=r(QCe," \u2014 "),sS=n(QCe,"A",{href:!0});var ajr=s(sS);Qlo=r(ajr,"T5Model"),ajr.forEach(t),Hlo=r(QCe," (T5 model)"),QCe.forEach(t),Ulo=i(C),Op=n(C,"LI",{});var HCe=s(Op);TK=n(HCe,"STRONG",{});var njr=s(TK);Jlo=r(njr,"tapas"),njr.forEach(t),Ylo=r(HCe," \u2014 "),lS=n(HCe,"A",{href:!0});var sjr=s(lS);Klo=r(sjr,"TapasModel"),sjr.forEach(t),Zlo=r(HCe," (TAPAS model)"),HCe.forEach(t),eio=i(C),Xp=n(C,"LI",{});var UCe=s(Xp);FK=n(UCe,"STRONG",{});var ljr=s(FK);oio=r(ljr,"transfo-xl"),ljr.forEach(t),rio=r(UCe," \u2014 "),iS=n(UCe,"A",{href:!0});var ijr=s(iS);tio=r(ijr,"TransfoXLModel"),ijr.forEach(t),aio=r(UCe," (Transformer-XL model)"),UCe.forEach(t),nio=i(C),Vp=n(C,"LI",{});var JCe=s(Vp);CK=n(JCe,"STRONG",{});var djr=s(CK);sio=r(djr,"unispeech"),djr.forEach(t),lio=r(JCe," \u2014 "),dS=n(JCe,"A",{href:!0});var cjr=s(dS);iio=r(cjr,"UniSpeechModel"),cjr.forEach(t),dio=r(JCe," (UniSpeech model)"),JCe.forEach(t),cio=i(C),zp=n(C,"LI",{});var YCe=s(zp);MK=n(YCe,"STRONG",{});var fjr=s(MK);fio=r(fjr,"unispeech-sat"),fjr.forEach(t),mio=r(YCe," \u2014 "),cS=n(YCe,"A",{href:!0});var mjr=s(cS);gio=r(mjr,"UniSpeechSatModel"),mjr.forEach(t),hio=r(YCe," (UniSpeechSat model)"),YCe.forEach(t),pio=i(C),Wp=n(C,"LI",{});var KCe=s(Wp);EK=n(KCe,"STRONG",{});var gjr=s(EK);_io=r(gjr,"vilt"),gjr.forEach(t),uio=r(KCe," \u2014 "),fS=n(KCe,"A",{href:!0});var hjr=s(fS);bio=r(hjr,"ViltModel"),hjr.forEach(t),vio=r(KCe," (ViLT model)"),KCe.forEach(t),Tio=i(C),Qp=n(C,"LI",{});var ZCe=s(Qp);yK=n(ZCe,"STRONG",{});var pjr=s(yK);Fio=r(pjr,"vision-text-dual-encoder"),pjr.forEach(t),Cio=r(ZCe," \u2014 "),mS=n(ZCe,"A",{href:!0});var _jr=s(mS);Mio=r(_jr,"VisionTextDualEncoderModel"),_jr.forEach(t),Eio=r(ZCe," (VisionTextDualEncoder model)"),ZCe.forEach(t),yio=i(C),Hp=n(C,"LI",{});var e4e=s(Hp);wK=n(e4e,"STRONG",{});var ujr=s(wK);wio=r(ujr,"visual_bert"),ujr.forEach(t),Aio=r(e4e," \u2014 "),gS=n(e4e,"A",{href:!0});var bjr=s(gS);Lio=r(bjr,"VisualBertModel"),bjr.forEach(t),Bio=r(e4e," (VisualBert model)"),e4e.forEach(t),xio=i(C),Up=n(C,"LI",{});var o4e=s(Up);AK=n(o4e,"STRONG",{});var vjr=s(AK);kio=r(vjr,"vit"),vjr.forEach(t),Rio=r(o4e," \u2014 "),hS=n(o4e,"A",{href:!0});var Tjr=s(hS);Sio=r(Tjr,"ViTModel"),Tjr.forEach(t),Pio=r(o4e," (ViT model)"),o4e.forEach(t),$io=i(C),Jp=n(C,"LI",{});var r4e=s(Jp);LK=n(r4e,"STRONG",{});var Fjr=s(LK);Iio=r(Fjr,"vit_mae"),Fjr.forEach(t),Dio=r(r4e," \u2014 "),pS=n(r4e,"A",{href:!0});var Cjr=s(pS);jio=r(Cjr,"ViTMAEModel"),Cjr.forEach(t),Nio=r(r4e," (ViTMAE model)"),r4e.forEach(t),qio=i(C),Yp=n(C,"LI",{});var t4e=s(Yp);BK=n(t4e,"STRONG",{});var Mjr=s(BK);Gio=r(Mjr,"wav2vec2"),Mjr.forEach(t),Oio=r(t4e," \u2014 "),_S=n(t4e,"A",{href:!0});var Ejr=s(_S);Xio=r(Ejr,"Wav2Vec2Model"),Ejr.forEach(t),Vio=r(t4e," (Wav2Vec2 model)"),t4e.forEach(t),zio=i(C),Kp=n(C,"LI",{});var a4e=s(Kp);xK=n(a4e,"STRONG",{});var yjr=s(xK);Wio=r(yjr,"wavlm"),yjr.forEach(t),Qio=r(a4e," \u2014 "),uS=n(a4e,"A",{href:!0});var wjr=s(uS);Hio=r(wjr,"WavLMModel"),wjr.forEach(t),Uio=r(a4e," (WavLM model)"),a4e.forEach(t),Jio=i(C),Zp=n(C,"LI",{});var n4e=s(Zp);kK=n(n4e,"STRONG",{});var Ajr=s(kK);Yio=r(Ajr,"xglm"),Ajr.forEach(t),Kio=r(n4e," \u2014 "),bS=n(n4e,"A",{href:!0});var Ljr=s(bS);Zio=r(Ljr,"XGLMModel"),Ljr.forEach(t),edo=r(n4e," (XGLM model)"),n4e.forEach(t),odo=i(C),e_=n(C,"LI",{});var s4e=s(e_);RK=n(s4e,"STRONG",{});var Bjr=s(RK);rdo=r(Bjr,"xlm"),Bjr.forEach(t),tdo=r(s4e," \u2014 "),vS=n(s4e,"A",{href:!0});var xjr=s(vS);ado=r(xjr,"XLMModel"),xjr.forEach(t),ndo=r(s4e," (XLM model)"),s4e.forEach(t),sdo=i(C),o_=n(C,"LI",{});var l4e=s(o_);SK=n(l4e,"STRONG",{});var kjr=s(SK);ldo=r(kjr,"xlm-prophetnet"),kjr.forEach(t),ido=r(l4e," \u2014 "),TS=n(l4e,"A",{href:!0});var Rjr=s(TS);ddo=r(Rjr,"XLMProphetNetModel"),Rjr.forEach(t),cdo=r(l4e," (XLMProphetNet model)"),l4e.forEach(t),fdo=i(C),r_=n(C,"LI",{});var i4e=s(r_);PK=n(i4e,"STRONG",{});var Sjr=s(PK);mdo=r(Sjr,"xlm-roberta"),Sjr.forEach(t),gdo=r(i4e," \u2014 "),FS=n(i4e,"A",{href:!0});var Pjr=s(FS);hdo=r(Pjr,"XLMRobertaModel"),Pjr.forEach(t),pdo=r(i4e," (XLM-RoBERTa model)"),i4e.forEach(t),_do=i(C),t_=n(C,"LI",{});var d4e=s(t_);$K=n(d4e,"STRONG",{});var $jr=s($K);udo=r($jr,"xlm-roberta-xl"),$jr.forEach(t),bdo=r(d4e," \u2014 "),CS=n(d4e,"A",{href:!0});var Ijr=s(CS);vdo=r(Ijr,"XLMRobertaXLModel"),Ijr.forEach(t),Tdo=r(d4e," (XLM-RoBERTa-XL model)"),d4e.forEach(t),Fdo=i(C),a_=n(C,"LI",{});var c4e=s(a_);IK=n(c4e,"STRONG",{});var Djr=s(IK);Cdo=r(Djr,"xlnet"),Djr.forEach(t),Mdo=r(c4e," \u2014 "),MS=n(c4e,"A",{href:!0});var jjr=s(MS);Edo=r(jjr,"XLNetModel"),jjr.forEach(t),ydo=r(c4e," (XLNet model)"),c4e.forEach(t),wdo=i(C),n_=n(C,"LI",{});var f4e=s(n_);DK=n(f4e,"STRONG",{});var Njr=s(DK);Ado=r(Njr,"yoso"),Njr.forEach(t),Ldo=r(f4e," \u2014 "),ES=n(f4e,"A",{href:!0});var qjr=s(ES);Bdo=r(qjr,"YosoModel"),qjr.forEach(t),xdo=r(f4e," (YOSO model)"),f4e.forEach(t),C.forEach(t),kdo=i($t),s_=n($t,"P",{});var m4e=s(s_);Rdo=r(m4e,"The model is set in evaluation mode by default using "),jK=n(m4e,"CODE",{});var Gjr=s(jK);Sdo=r(Gjr,"model.eval()"),Gjr.forEach(t),Pdo=r(m4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NK=n(m4e,"CODE",{});var Ojr=s(NK);$do=r(Ojr,"model.train()"),Ojr.forEach(t),m4e.forEach(t),Ido=i($t),qK=n($t,"P",{});var Xjr=s(qK);Ddo=r(Xjr,"Examples:"),Xjr.forEach(t),jdo=i($t),m(m3.$$.fragment,$t),$t.forEach(t),qs.forEach(t),rBe=i(c),zi=n(c,"H2",{class:!0});var dke=s(zi);l_=n(dke,"A",{id:!0,class:!0,href:!0});var Vjr=s(l_);GK=n(Vjr,"SPAN",{});var zjr=s(GK);m(g3.$$.fragment,zjr),zjr.forEach(t),Vjr.forEach(t),Ndo=i(dke),OK=n(dke,"SPAN",{});var Wjr=s(OK);qdo=r(Wjr,"AutoModelForPreTraining"),Wjr.forEach(t),dke.forEach(t),tBe=i(c),Ho=n(c,"DIV",{class:!0});var Os=s(Ho);m(h3.$$.fragment,Os),Gdo=i(Os),Wi=n(Os,"P",{});var XV=s(Wi);Odo=r(XV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XK=n(XV,"CODE",{});var Qjr=s(XK);Xdo=r(Qjr,"from_pretrained()"),Qjr.forEach(t),Vdo=r(XV,"class method or the "),VK=n(XV,"CODE",{});var Hjr=s(VK);zdo=r(Hjr,"from_config()"),Hjr.forEach(t),Wdo=r(XV,`class
method.`),XV.forEach(t),Qdo=i(Os),p3=n(Os,"P",{});var cke=s(p3);Hdo=r(cke,"This class cannot be instantiated directly using "),zK=n(cke,"CODE",{});var Ujr=s(zK);Udo=r(Ujr,"__init__()"),Ujr.forEach(t),Jdo=r(cke," (throws an error)."),cke.forEach(t),Ydo=i(Os),Gr=n(Os,"DIV",{class:!0});var Xs=s(Gr);m(_3.$$.fragment,Xs),Kdo=i(Xs),WK=n(Xs,"P",{});var Jjr=s(WK);Zdo=r(Jjr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jjr.forEach(t),eco=i(Xs),Qi=n(Xs,"P",{});var VV=s(Qi);oco=r(VV,`Note:
Loading a model from its configuration file does `),QK=n(VV,"STRONG",{});var Yjr=s(QK);rco=r(Yjr,"not"),Yjr.forEach(t),tco=r(VV,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(VV,"CODE",{});var Kjr=s(HK);aco=r(Kjr,"from_pretrained()"),Kjr.forEach(t),nco=r(VV,"to load the model weights."),VV.forEach(t),sco=i(Xs),UK=n(Xs,"P",{});var Zjr=s(UK);lco=r(Zjr,"Examples:"),Zjr.forEach(t),ico=i(Xs),m(u3.$$.fragment,Xs),Xs.forEach(t),dco=i(Os),Pe=n(Os,"DIV",{class:!0});var It=s(Pe);m(b3.$$.fragment,It),cco=i(It),JK=n(It,"P",{});var eNr=s(JK);fco=r(eNr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eNr.forEach(t),mco=i(It),qa=n(It,"P",{});var kM=s(qa);gco=r(kM,"The model class to instantiate is selected based on the "),YK=n(kM,"CODE",{});var oNr=s(YK);hco=r(oNr,"model_type"),oNr.forEach(t),pco=r(kM,` property of the config object (either
passed as an argument or loaded from `),KK=n(kM,"CODE",{});var rNr=s(KK);_co=r(rNr,"pretrained_model_name_or_path"),rNr.forEach(t),uco=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZK=n(kM,"CODE",{});var tNr=s(ZK);bco=r(tNr,"pretrained_model_name_or_path"),tNr.forEach(t),vco=r(kM,":"),kM.forEach(t),Tco=i(It),k=n(It,"UL",{});var S=s(k);i_=n(S,"LI",{});var g4e=s(i_);eZ=n(g4e,"STRONG",{});var aNr=s(eZ);Fco=r(aNr,"albert"),aNr.forEach(t),Cco=r(g4e," \u2014 "),yS=n(g4e,"A",{href:!0});var nNr=s(yS);Mco=r(nNr,"AlbertForPreTraining"),nNr.forEach(t),Eco=r(g4e," (ALBERT model)"),g4e.forEach(t),yco=i(S),d_=n(S,"LI",{});var h4e=s(d_);oZ=n(h4e,"STRONG",{});var sNr=s(oZ);wco=r(sNr,"bart"),sNr.forEach(t),Aco=r(h4e," \u2014 "),wS=n(h4e,"A",{href:!0});var lNr=s(wS);Lco=r(lNr,"BartForConditionalGeneration"),lNr.forEach(t),Bco=r(h4e," (BART model)"),h4e.forEach(t),xco=i(S),c_=n(S,"LI",{});var p4e=s(c_);rZ=n(p4e,"STRONG",{});var iNr=s(rZ);kco=r(iNr,"bert"),iNr.forEach(t),Rco=r(p4e," \u2014 "),AS=n(p4e,"A",{href:!0});var dNr=s(AS);Sco=r(dNr,"BertForPreTraining"),dNr.forEach(t),Pco=r(p4e," (BERT model)"),p4e.forEach(t),$co=i(S),f_=n(S,"LI",{});var _4e=s(f_);tZ=n(_4e,"STRONG",{});var cNr=s(tZ);Ico=r(cNr,"big_bird"),cNr.forEach(t),Dco=r(_4e," \u2014 "),LS=n(_4e,"A",{href:!0});var fNr=s(LS);jco=r(fNr,"BigBirdForPreTraining"),fNr.forEach(t),Nco=r(_4e," (BigBird model)"),_4e.forEach(t),qco=i(S),m_=n(S,"LI",{});var u4e=s(m_);aZ=n(u4e,"STRONG",{});var mNr=s(aZ);Gco=r(mNr,"camembert"),mNr.forEach(t),Oco=r(u4e," \u2014 "),BS=n(u4e,"A",{href:!0});var gNr=s(BS);Xco=r(gNr,"CamembertForMaskedLM"),gNr.forEach(t),Vco=r(u4e," (CamemBERT model)"),u4e.forEach(t),zco=i(S),g_=n(S,"LI",{});var b4e=s(g_);nZ=n(b4e,"STRONG",{});var hNr=s(nZ);Wco=r(hNr,"ctrl"),hNr.forEach(t),Qco=r(b4e," \u2014 "),xS=n(b4e,"A",{href:!0});var pNr=s(xS);Hco=r(pNr,"CTRLLMHeadModel"),pNr.forEach(t),Uco=r(b4e," (CTRL model)"),b4e.forEach(t),Jco=i(S),h_=n(S,"LI",{});var v4e=s(h_);sZ=n(v4e,"STRONG",{});var _Nr=s(sZ);Yco=r(_Nr,"data2vec-text"),_Nr.forEach(t),Kco=r(v4e," \u2014 "),kS=n(v4e,"A",{href:!0});var uNr=s(kS);Zco=r(uNr,"Data2VecTextForMaskedLM"),uNr.forEach(t),efo=r(v4e," (Data2VecText model)"),v4e.forEach(t),ofo=i(S),p_=n(S,"LI",{});var T4e=s(p_);lZ=n(T4e,"STRONG",{});var bNr=s(lZ);rfo=r(bNr,"deberta"),bNr.forEach(t),tfo=r(T4e," \u2014 "),RS=n(T4e,"A",{href:!0});var vNr=s(RS);afo=r(vNr,"DebertaForMaskedLM"),vNr.forEach(t),nfo=r(T4e," (DeBERTa model)"),T4e.forEach(t),sfo=i(S),__=n(S,"LI",{});var F4e=s(__);iZ=n(F4e,"STRONG",{});var TNr=s(iZ);lfo=r(TNr,"deberta-v2"),TNr.forEach(t),ifo=r(F4e," \u2014 "),SS=n(F4e,"A",{href:!0});var FNr=s(SS);dfo=r(FNr,"DebertaV2ForMaskedLM"),FNr.forEach(t),cfo=r(F4e," (DeBERTa-v2 model)"),F4e.forEach(t),ffo=i(S),u_=n(S,"LI",{});var C4e=s(u_);dZ=n(C4e,"STRONG",{});var CNr=s(dZ);mfo=r(CNr,"distilbert"),CNr.forEach(t),gfo=r(C4e," \u2014 "),PS=n(C4e,"A",{href:!0});var MNr=s(PS);hfo=r(MNr,"DistilBertForMaskedLM"),MNr.forEach(t),pfo=r(C4e," (DistilBERT model)"),C4e.forEach(t),_fo=i(S),b_=n(S,"LI",{});var M4e=s(b_);cZ=n(M4e,"STRONG",{});var ENr=s(cZ);ufo=r(ENr,"electra"),ENr.forEach(t),bfo=r(M4e," \u2014 "),$S=n(M4e,"A",{href:!0});var yNr=s($S);vfo=r(yNr,"ElectraForPreTraining"),yNr.forEach(t),Tfo=r(M4e," (ELECTRA model)"),M4e.forEach(t),Ffo=i(S),v_=n(S,"LI",{});var E4e=s(v_);fZ=n(E4e,"STRONG",{});var wNr=s(fZ);Cfo=r(wNr,"flaubert"),wNr.forEach(t),Mfo=r(E4e," \u2014 "),IS=n(E4e,"A",{href:!0});var ANr=s(IS);Efo=r(ANr,"FlaubertWithLMHeadModel"),ANr.forEach(t),yfo=r(E4e," (FlauBERT model)"),E4e.forEach(t),wfo=i(S),T_=n(S,"LI",{});var y4e=s(T_);mZ=n(y4e,"STRONG",{});var LNr=s(mZ);Afo=r(LNr,"fnet"),LNr.forEach(t),Lfo=r(y4e," \u2014 "),DS=n(y4e,"A",{href:!0});var BNr=s(DS);Bfo=r(BNr,"FNetForPreTraining"),BNr.forEach(t),xfo=r(y4e," (FNet model)"),y4e.forEach(t),kfo=i(S),F_=n(S,"LI",{});var w4e=s(F_);gZ=n(w4e,"STRONG",{});var xNr=s(gZ);Rfo=r(xNr,"fsmt"),xNr.forEach(t),Sfo=r(w4e," \u2014 "),jS=n(w4e,"A",{href:!0});var kNr=s(jS);Pfo=r(kNr,"FSMTForConditionalGeneration"),kNr.forEach(t),$fo=r(w4e," (FairSeq Machine-Translation model)"),w4e.forEach(t),Ifo=i(S),C_=n(S,"LI",{});var A4e=s(C_);hZ=n(A4e,"STRONG",{});var RNr=s(hZ);Dfo=r(RNr,"funnel"),RNr.forEach(t),jfo=r(A4e," \u2014 "),NS=n(A4e,"A",{href:!0});var SNr=s(NS);Nfo=r(SNr,"FunnelForPreTraining"),SNr.forEach(t),qfo=r(A4e," (Funnel Transformer model)"),A4e.forEach(t),Gfo=i(S),M_=n(S,"LI",{});var L4e=s(M_);pZ=n(L4e,"STRONG",{});var PNr=s(pZ);Ofo=r(PNr,"gpt2"),PNr.forEach(t),Xfo=r(L4e," \u2014 "),qS=n(L4e,"A",{href:!0});var $Nr=s(qS);Vfo=r($Nr,"GPT2LMHeadModel"),$Nr.forEach(t),zfo=r(L4e," (OpenAI GPT-2 model)"),L4e.forEach(t),Wfo=i(S),E_=n(S,"LI",{});var B4e=s(E_);_Z=n(B4e,"STRONG",{});var INr=s(_Z);Qfo=r(INr,"ibert"),INr.forEach(t),Hfo=r(B4e," \u2014 "),GS=n(B4e,"A",{href:!0});var DNr=s(GS);Ufo=r(DNr,"IBertForMaskedLM"),DNr.forEach(t),Jfo=r(B4e," (I-BERT model)"),B4e.forEach(t),Yfo=i(S),y_=n(S,"LI",{});var x4e=s(y_);uZ=n(x4e,"STRONG",{});var jNr=s(uZ);Kfo=r(jNr,"layoutlm"),jNr.forEach(t),Zfo=r(x4e," \u2014 "),OS=n(x4e,"A",{href:!0});var NNr=s(OS);emo=r(NNr,"LayoutLMForMaskedLM"),NNr.forEach(t),omo=r(x4e," (LayoutLM model)"),x4e.forEach(t),rmo=i(S),w_=n(S,"LI",{});var k4e=s(w_);bZ=n(k4e,"STRONG",{});var qNr=s(bZ);tmo=r(qNr,"longformer"),qNr.forEach(t),amo=r(k4e," \u2014 "),XS=n(k4e,"A",{href:!0});var GNr=s(XS);nmo=r(GNr,"LongformerForMaskedLM"),GNr.forEach(t),smo=r(k4e," (Longformer model)"),k4e.forEach(t),lmo=i(S),A_=n(S,"LI",{});var R4e=s(A_);vZ=n(R4e,"STRONG",{});var ONr=s(vZ);imo=r(ONr,"lxmert"),ONr.forEach(t),dmo=r(R4e," \u2014 "),VS=n(R4e,"A",{href:!0});var XNr=s(VS);cmo=r(XNr,"LxmertForPreTraining"),XNr.forEach(t),fmo=r(R4e," (LXMERT model)"),R4e.forEach(t),mmo=i(S),L_=n(S,"LI",{});var S4e=s(L_);TZ=n(S4e,"STRONG",{});var VNr=s(TZ);gmo=r(VNr,"megatron-bert"),VNr.forEach(t),hmo=r(S4e," \u2014 "),zS=n(S4e,"A",{href:!0});var zNr=s(zS);pmo=r(zNr,"MegatronBertForPreTraining"),zNr.forEach(t),_mo=r(S4e," (MegatronBert model)"),S4e.forEach(t),umo=i(S),B_=n(S,"LI",{});var P4e=s(B_);FZ=n(P4e,"STRONG",{});var WNr=s(FZ);bmo=r(WNr,"mobilebert"),WNr.forEach(t),vmo=r(P4e," \u2014 "),WS=n(P4e,"A",{href:!0});var QNr=s(WS);Tmo=r(QNr,"MobileBertForPreTraining"),QNr.forEach(t),Fmo=r(P4e," (MobileBERT model)"),P4e.forEach(t),Cmo=i(S),x_=n(S,"LI",{});var $4e=s(x_);CZ=n($4e,"STRONG",{});var HNr=s(CZ);Mmo=r(HNr,"mpnet"),HNr.forEach(t),Emo=r($4e," \u2014 "),QS=n($4e,"A",{href:!0});var UNr=s(QS);ymo=r(UNr,"MPNetForMaskedLM"),UNr.forEach(t),wmo=r($4e," (MPNet model)"),$4e.forEach(t),Amo=i(S),k_=n(S,"LI",{});var I4e=s(k_);MZ=n(I4e,"STRONG",{});var JNr=s(MZ);Lmo=r(JNr,"openai-gpt"),JNr.forEach(t),Bmo=r(I4e," \u2014 "),HS=n(I4e,"A",{href:!0});var YNr=s(HS);xmo=r(YNr,"OpenAIGPTLMHeadModel"),YNr.forEach(t),kmo=r(I4e," (OpenAI GPT model)"),I4e.forEach(t),Rmo=i(S),R_=n(S,"LI",{});var D4e=s(R_);EZ=n(D4e,"STRONG",{});var KNr=s(EZ);Smo=r(KNr,"retribert"),KNr.forEach(t),Pmo=r(D4e," \u2014 "),US=n(D4e,"A",{href:!0});var ZNr=s(US);$mo=r(ZNr,"RetriBertModel"),ZNr.forEach(t),Imo=r(D4e," (RetriBERT model)"),D4e.forEach(t),Dmo=i(S),S_=n(S,"LI",{});var j4e=s(S_);yZ=n(j4e,"STRONG",{});var eqr=s(yZ);jmo=r(eqr,"roberta"),eqr.forEach(t),Nmo=r(j4e," \u2014 "),JS=n(j4e,"A",{href:!0});var oqr=s(JS);qmo=r(oqr,"RobertaForMaskedLM"),oqr.forEach(t),Gmo=r(j4e," (RoBERTa model)"),j4e.forEach(t),Omo=i(S),P_=n(S,"LI",{});var N4e=s(P_);wZ=n(N4e,"STRONG",{});var rqr=s(wZ);Xmo=r(rqr,"squeezebert"),rqr.forEach(t),Vmo=r(N4e," \u2014 "),YS=n(N4e,"A",{href:!0});var tqr=s(YS);zmo=r(tqr,"SqueezeBertForMaskedLM"),tqr.forEach(t),Wmo=r(N4e," (SqueezeBERT model)"),N4e.forEach(t),Qmo=i(S),$_=n(S,"LI",{});var q4e=s($_);AZ=n(q4e,"STRONG",{});var aqr=s(AZ);Hmo=r(aqr,"t5"),aqr.forEach(t),Umo=r(q4e," \u2014 "),KS=n(q4e,"A",{href:!0});var nqr=s(KS);Jmo=r(nqr,"T5ForConditionalGeneration"),nqr.forEach(t),Ymo=r(q4e," (T5 model)"),q4e.forEach(t),Kmo=i(S),I_=n(S,"LI",{});var G4e=s(I_);LZ=n(G4e,"STRONG",{});var sqr=s(LZ);Zmo=r(sqr,"tapas"),sqr.forEach(t),ego=r(G4e," \u2014 "),ZS=n(G4e,"A",{href:!0});var lqr=s(ZS);ogo=r(lqr,"TapasForMaskedLM"),lqr.forEach(t),rgo=r(G4e," (TAPAS model)"),G4e.forEach(t),tgo=i(S),D_=n(S,"LI",{});var O4e=s(D_);BZ=n(O4e,"STRONG",{});var iqr=s(BZ);ago=r(iqr,"transfo-xl"),iqr.forEach(t),ngo=r(O4e," \u2014 "),eP=n(O4e,"A",{href:!0});var dqr=s(eP);sgo=r(dqr,"TransfoXLLMHeadModel"),dqr.forEach(t),lgo=r(O4e," (Transformer-XL model)"),O4e.forEach(t),igo=i(S),j_=n(S,"LI",{});var X4e=s(j_);xZ=n(X4e,"STRONG",{});var cqr=s(xZ);dgo=r(cqr,"unispeech"),cqr.forEach(t),cgo=r(X4e," \u2014 "),oP=n(X4e,"A",{href:!0});var fqr=s(oP);fgo=r(fqr,"UniSpeechForPreTraining"),fqr.forEach(t),mgo=r(X4e," (UniSpeech model)"),X4e.forEach(t),ggo=i(S),N_=n(S,"LI",{});var V4e=s(N_);kZ=n(V4e,"STRONG",{});var mqr=s(kZ);hgo=r(mqr,"unispeech-sat"),mqr.forEach(t),pgo=r(V4e," \u2014 "),rP=n(V4e,"A",{href:!0});var gqr=s(rP);_go=r(gqr,"UniSpeechSatForPreTraining"),gqr.forEach(t),ugo=r(V4e," (UniSpeechSat model)"),V4e.forEach(t),bgo=i(S),q_=n(S,"LI",{});var z4e=s(q_);RZ=n(z4e,"STRONG",{});var hqr=s(RZ);vgo=r(hqr,"visual_bert"),hqr.forEach(t),Tgo=r(z4e," \u2014 "),tP=n(z4e,"A",{href:!0});var pqr=s(tP);Fgo=r(pqr,"VisualBertForPreTraining"),pqr.forEach(t),Cgo=r(z4e," (VisualBert model)"),z4e.forEach(t),Mgo=i(S),G_=n(S,"LI",{});var W4e=s(G_);SZ=n(W4e,"STRONG",{});var _qr=s(SZ);Ego=r(_qr,"vit_mae"),_qr.forEach(t),ygo=r(W4e," \u2014 "),aP=n(W4e,"A",{href:!0});var uqr=s(aP);wgo=r(uqr,"ViTMAEForPreTraining"),uqr.forEach(t),Ago=r(W4e," (ViTMAE model)"),W4e.forEach(t),Lgo=i(S),O_=n(S,"LI",{});var Q4e=s(O_);PZ=n(Q4e,"STRONG",{});var bqr=s(PZ);Bgo=r(bqr,"wav2vec2"),bqr.forEach(t),xgo=r(Q4e," \u2014 "),nP=n(Q4e,"A",{href:!0});var vqr=s(nP);kgo=r(vqr,"Wav2Vec2ForPreTraining"),vqr.forEach(t),Rgo=r(Q4e," (Wav2Vec2 model)"),Q4e.forEach(t),Sgo=i(S),X_=n(S,"LI",{});var H4e=s(X_);$Z=n(H4e,"STRONG",{});var Tqr=s($Z);Pgo=r(Tqr,"xlm"),Tqr.forEach(t),$go=r(H4e," \u2014 "),sP=n(H4e,"A",{href:!0});var Fqr=s(sP);Igo=r(Fqr,"XLMWithLMHeadModel"),Fqr.forEach(t),Dgo=r(H4e," (XLM model)"),H4e.forEach(t),jgo=i(S),V_=n(S,"LI",{});var U4e=s(V_);IZ=n(U4e,"STRONG",{});var Cqr=s(IZ);Ngo=r(Cqr,"xlm-roberta"),Cqr.forEach(t),qgo=r(U4e," \u2014 "),lP=n(U4e,"A",{href:!0});var Mqr=s(lP);Ggo=r(Mqr,"XLMRobertaForMaskedLM"),Mqr.forEach(t),Ogo=r(U4e," (XLM-RoBERTa model)"),U4e.forEach(t),Xgo=i(S),z_=n(S,"LI",{});var J4e=s(z_);DZ=n(J4e,"STRONG",{});var Eqr=s(DZ);Vgo=r(Eqr,"xlm-roberta-xl"),Eqr.forEach(t),zgo=r(J4e," \u2014 "),iP=n(J4e,"A",{href:!0});var yqr=s(iP);Wgo=r(yqr,"XLMRobertaXLForMaskedLM"),yqr.forEach(t),Qgo=r(J4e," (XLM-RoBERTa-XL model)"),J4e.forEach(t),Hgo=i(S),W_=n(S,"LI",{});var Y4e=s(W_);jZ=n(Y4e,"STRONG",{});var wqr=s(jZ);Ugo=r(wqr,"xlnet"),wqr.forEach(t),Jgo=r(Y4e," \u2014 "),dP=n(Y4e,"A",{href:!0});var Aqr=s(dP);Ygo=r(Aqr,"XLNetLMHeadModel"),Aqr.forEach(t),Kgo=r(Y4e," (XLNet model)"),Y4e.forEach(t),S.forEach(t),Zgo=i(It),Q_=n(It,"P",{});var K4e=s(Q_);eho=r(K4e,"The model is set in evaluation mode by default using "),NZ=n(K4e,"CODE",{});var Lqr=s(NZ);oho=r(Lqr,"model.eval()"),Lqr.forEach(t),rho=r(K4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qZ=n(K4e,"CODE",{});var Bqr=s(qZ);tho=r(Bqr,"model.train()"),Bqr.forEach(t),K4e.forEach(t),aho=i(It),GZ=n(It,"P",{});var xqr=s(GZ);nho=r(xqr,"Examples:"),xqr.forEach(t),sho=i(It),m(v3.$$.fragment,It),It.forEach(t),Os.forEach(t),aBe=i(c),Hi=n(c,"H2",{class:!0});var fke=s(Hi);H_=n(fke,"A",{id:!0,class:!0,href:!0});var kqr=s(H_);OZ=n(kqr,"SPAN",{});var Rqr=s(OZ);m(T3.$$.fragment,Rqr),Rqr.forEach(t),kqr.forEach(t),lho=i(fke),XZ=n(fke,"SPAN",{});var Sqr=s(XZ);iho=r(Sqr,"AutoModelForCausalLM"),Sqr.forEach(t),fke.forEach(t),nBe=i(c),Uo=n(c,"DIV",{class:!0});var Vs=s(Uo);m(F3.$$.fragment,Vs),dho=i(Vs),Ui=n(Vs,"P",{});var zV=s(Ui);cho=r(zV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VZ=n(zV,"CODE",{});var Pqr=s(VZ);fho=r(Pqr,"from_pretrained()"),Pqr.forEach(t),mho=r(zV,"class method or the "),zZ=n(zV,"CODE",{});var $qr=s(zZ);gho=r($qr,"from_config()"),$qr.forEach(t),hho=r(zV,`class
method.`),zV.forEach(t),pho=i(Vs),C3=n(Vs,"P",{});var mke=s(C3);_ho=r(mke,"This class cannot be instantiated directly using "),WZ=n(mke,"CODE",{});var Iqr=s(WZ);uho=r(Iqr,"__init__()"),Iqr.forEach(t),bho=r(mke," (throws an error)."),mke.forEach(t),vho=i(Vs),Or=n(Vs,"DIV",{class:!0});var zs=s(Or);m(M3.$$.fragment,zs),Tho=i(zs),QZ=n(zs,"P",{});var Dqr=s(QZ);Fho=r(Dqr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Dqr.forEach(t),Cho=i(zs),Ji=n(zs,"P",{});var WV=s(Ji);Mho=r(WV,`Note:
Loading a model from its configuration file does `),HZ=n(WV,"STRONG",{});var jqr=s(HZ);Eho=r(jqr,"not"),jqr.forEach(t),yho=r(WV,` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=n(WV,"CODE",{});var Nqr=s(UZ);who=r(Nqr,"from_pretrained()"),Nqr.forEach(t),Aho=r(WV,"to load the model weights."),WV.forEach(t),Lho=i(zs),JZ=n(zs,"P",{});var qqr=s(JZ);Bho=r(qqr,"Examples:"),qqr.forEach(t),xho=i(zs),m(E3.$$.fragment,zs),zs.forEach(t),kho=i(Vs),$e=n(Vs,"DIV",{class:!0});var Dt=s($e);m(y3.$$.fragment,Dt),Rho=i(Dt),YZ=n(Dt,"P",{});var Gqr=s(YZ);Sho=r(Gqr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gqr.forEach(t),Pho=i(Dt),Ga=n(Dt,"P",{});var RM=s(Ga);$ho=r(RM,"The model class to instantiate is selected based on the "),KZ=n(RM,"CODE",{});var Oqr=s(KZ);Iho=r(Oqr,"model_type"),Oqr.forEach(t),Dho=r(RM,` property of the config object (either
passed as an argument or loaded from `),ZZ=n(RM,"CODE",{});var Xqr=s(ZZ);jho=r(Xqr,"pretrained_model_name_or_path"),Xqr.forEach(t),Nho=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eee=n(RM,"CODE",{});var Vqr=s(eee);qho=r(Vqr,"pretrained_model_name_or_path"),Vqr.forEach(t),Gho=r(RM,":"),RM.forEach(t),Oho=i(Dt),$=n(Dt,"UL",{});var D=s($);U_=n(D,"LI",{});var Z4e=s(U_);oee=n(Z4e,"STRONG",{});var zqr=s(oee);Xho=r(zqr,"bart"),zqr.forEach(t),Vho=r(Z4e," \u2014 "),cP=n(Z4e,"A",{href:!0});var Wqr=s(cP);zho=r(Wqr,"BartForCausalLM"),Wqr.forEach(t),Who=r(Z4e," (BART model)"),Z4e.forEach(t),Qho=i(D),J_=n(D,"LI",{});var eMe=s(J_);ree=n(eMe,"STRONG",{});var Qqr=s(ree);Hho=r(Qqr,"bert"),Qqr.forEach(t),Uho=r(eMe," \u2014 "),fP=n(eMe,"A",{href:!0});var Hqr=s(fP);Jho=r(Hqr,"BertLMHeadModel"),Hqr.forEach(t),Yho=r(eMe," (BERT model)"),eMe.forEach(t),Kho=i(D),Y_=n(D,"LI",{});var oMe=s(Y_);tee=n(oMe,"STRONG",{});var Uqr=s(tee);Zho=r(Uqr,"bert-generation"),Uqr.forEach(t),epo=r(oMe," \u2014 "),mP=n(oMe,"A",{href:!0});var Jqr=s(mP);opo=r(Jqr,"BertGenerationDecoder"),Jqr.forEach(t),rpo=r(oMe," (Bert Generation model)"),oMe.forEach(t),tpo=i(D),K_=n(D,"LI",{});var rMe=s(K_);aee=n(rMe,"STRONG",{});var Yqr=s(aee);apo=r(Yqr,"big_bird"),Yqr.forEach(t),npo=r(rMe," \u2014 "),gP=n(rMe,"A",{href:!0});var Kqr=s(gP);spo=r(Kqr,"BigBirdForCausalLM"),Kqr.forEach(t),lpo=r(rMe," (BigBird model)"),rMe.forEach(t),ipo=i(D),Z_=n(D,"LI",{});var tMe=s(Z_);nee=n(tMe,"STRONG",{});var Zqr=s(nee);dpo=r(Zqr,"bigbird_pegasus"),Zqr.forEach(t),cpo=r(tMe," \u2014 "),hP=n(tMe,"A",{href:!0});var eGr=s(hP);fpo=r(eGr,"BigBirdPegasusForCausalLM"),eGr.forEach(t),mpo=r(tMe," (BigBirdPegasus model)"),tMe.forEach(t),gpo=i(D),eu=n(D,"LI",{});var aMe=s(eu);see=n(aMe,"STRONG",{});var oGr=s(see);hpo=r(oGr,"blenderbot"),oGr.forEach(t),ppo=r(aMe," \u2014 "),pP=n(aMe,"A",{href:!0});var rGr=s(pP);_po=r(rGr,"BlenderbotForCausalLM"),rGr.forEach(t),upo=r(aMe," (Blenderbot model)"),aMe.forEach(t),bpo=i(D),ou=n(D,"LI",{});var nMe=s(ou);lee=n(nMe,"STRONG",{});var tGr=s(lee);vpo=r(tGr,"blenderbot-small"),tGr.forEach(t),Tpo=r(nMe," \u2014 "),_P=n(nMe,"A",{href:!0});var aGr=s(_P);Fpo=r(aGr,"BlenderbotSmallForCausalLM"),aGr.forEach(t),Cpo=r(nMe," (BlenderbotSmall model)"),nMe.forEach(t),Mpo=i(D),ru=n(D,"LI",{});var sMe=s(ru);iee=n(sMe,"STRONG",{});var nGr=s(iee);Epo=r(nGr,"camembert"),nGr.forEach(t),ypo=r(sMe," \u2014 "),uP=n(sMe,"A",{href:!0});var sGr=s(uP);wpo=r(sGr,"CamembertForCausalLM"),sGr.forEach(t),Apo=r(sMe," (CamemBERT model)"),sMe.forEach(t),Lpo=i(D),tu=n(D,"LI",{});var lMe=s(tu);dee=n(lMe,"STRONG",{});var lGr=s(dee);Bpo=r(lGr,"ctrl"),lGr.forEach(t),xpo=r(lMe," \u2014 "),bP=n(lMe,"A",{href:!0});var iGr=s(bP);kpo=r(iGr,"CTRLLMHeadModel"),iGr.forEach(t),Rpo=r(lMe," (CTRL model)"),lMe.forEach(t),Spo=i(D),au=n(D,"LI",{});var iMe=s(au);cee=n(iMe,"STRONG",{});var dGr=s(cee);Ppo=r(dGr,"data2vec-text"),dGr.forEach(t),$po=r(iMe," \u2014 "),vP=n(iMe,"A",{href:!0});var cGr=s(vP);Ipo=r(cGr,"Data2VecTextForCausalLM"),cGr.forEach(t),Dpo=r(iMe," (Data2VecText model)"),iMe.forEach(t),jpo=i(D),nu=n(D,"LI",{});var dMe=s(nu);fee=n(dMe,"STRONG",{});var fGr=s(fee);Npo=r(fGr,"electra"),fGr.forEach(t),qpo=r(dMe," \u2014 "),TP=n(dMe,"A",{href:!0});var mGr=s(TP);Gpo=r(mGr,"ElectraForCausalLM"),mGr.forEach(t),Opo=r(dMe," (ELECTRA model)"),dMe.forEach(t),Xpo=i(D),su=n(D,"LI",{});var cMe=s(su);mee=n(cMe,"STRONG",{});var gGr=s(mee);Vpo=r(gGr,"gpt2"),gGr.forEach(t),zpo=r(cMe," \u2014 "),FP=n(cMe,"A",{href:!0});var hGr=s(FP);Wpo=r(hGr,"GPT2LMHeadModel"),hGr.forEach(t),Qpo=r(cMe," (OpenAI GPT-2 model)"),cMe.forEach(t),Hpo=i(D),lu=n(D,"LI",{});var fMe=s(lu);gee=n(fMe,"STRONG",{});var pGr=s(gee);Upo=r(pGr,"gpt_neo"),pGr.forEach(t),Jpo=r(fMe," \u2014 "),CP=n(fMe,"A",{href:!0});var _Gr=s(CP);Ypo=r(_Gr,"GPTNeoForCausalLM"),_Gr.forEach(t),Kpo=r(fMe," (GPT Neo model)"),fMe.forEach(t),Zpo=i(D),iu=n(D,"LI",{});var mMe=s(iu);hee=n(mMe,"STRONG",{});var uGr=s(hee);e_o=r(uGr,"gptj"),uGr.forEach(t),o_o=r(mMe," \u2014 "),MP=n(mMe,"A",{href:!0});var bGr=s(MP);r_o=r(bGr,"GPTJForCausalLM"),bGr.forEach(t),t_o=r(mMe," (GPT-J model)"),mMe.forEach(t),a_o=i(D),du=n(D,"LI",{});var gMe=s(du);pee=n(gMe,"STRONG",{});var vGr=s(pee);n_o=r(vGr,"marian"),vGr.forEach(t),s_o=r(gMe," \u2014 "),EP=n(gMe,"A",{href:!0});var TGr=s(EP);l_o=r(TGr,"MarianForCausalLM"),TGr.forEach(t),i_o=r(gMe," (Marian model)"),gMe.forEach(t),d_o=i(D),cu=n(D,"LI",{});var hMe=s(cu);_ee=n(hMe,"STRONG",{});var FGr=s(_ee);c_o=r(FGr,"mbart"),FGr.forEach(t),f_o=r(hMe," \u2014 "),yP=n(hMe,"A",{href:!0});var CGr=s(yP);m_o=r(CGr,"MBartForCausalLM"),CGr.forEach(t),g_o=r(hMe," (mBART model)"),hMe.forEach(t),h_o=i(D),fu=n(D,"LI",{});var pMe=s(fu);uee=n(pMe,"STRONG",{});var MGr=s(uee);p_o=r(MGr,"megatron-bert"),MGr.forEach(t),__o=r(pMe," \u2014 "),wP=n(pMe,"A",{href:!0});var EGr=s(wP);u_o=r(EGr,"MegatronBertForCausalLM"),EGr.forEach(t),b_o=r(pMe," (MegatronBert model)"),pMe.forEach(t),v_o=i(D),mu=n(D,"LI",{});var _Me=s(mu);bee=n(_Me,"STRONG",{});var yGr=s(bee);T_o=r(yGr,"openai-gpt"),yGr.forEach(t),F_o=r(_Me," \u2014 "),AP=n(_Me,"A",{href:!0});var wGr=s(AP);C_o=r(wGr,"OpenAIGPTLMHeadModel"),wGr.forEach(t),M_o=r(_Me," (OpenAI GPT model)"),_Me.forEach(t),E_o=i(D),gu=n(D,"LI",{});var uMe=s(gu);vee=n(uMe,"STRONG",{});var AGr=s(vee);y_o=r(AGr,"pegasus"),AGr.forEach(t),w_o=r(uMe," \u2014 "),LP=n(uMe,"A",{href:!0});var LGr=s(LP);A_o=r(LGr,"PegasusForCausalLM"),LGr.forEach(t),L_o=r(uMe," (Pegasus model)"),uMe.forEach(t),B_o=i(D),hu=n(D,"LI",{});var bMe=s(hu);Tee=n(bMe,"STRONG",{});var BGr=s(Tee);x_o=r(BGr,"plbart"),BGr.forEach(t),k_o=r(bMe," \u2014 "),BP=n(bMe,"A",{href:!0});var xGr=s(BP);R_o=r(xGr,"PLBartForCausalLM"),xGr.forEach(t),S_o=r(bMe," (PLBart model)"),bMe.forEach(t),P_o=i(D),pu=n(D,"LI",{});var vMe=s(pu);Fee=n(vMe,"STRONG",{});var kGr=s(Fee);$_o=r(kGr,"prophetnet"),kGr.forEach(t),I_o=r(vMe," \u2014 "),xP=n(vMe,"A",{href:!0});var RGr=s(xP);D_o=r(RGr,"ProphetNetForCausalLM"),RGr.forEach(t),j_o=r(vMe," (ProphetNet model)"),vMe.forEach(t),N_o=i(D),_u=n(D,"LI",{});var TMe=s(_u);Cee=n(TMe,"STRONG",{});var SGr=s(Cee);q_o=r(SGr,"qdqbert"),SGr.forEach(t),G_o=r(TMe," \u2014 "),kP=n(TMe,"A",{href:!0});var PGr=s(kP);O_o=r(PGr,"QDQBertLMHeadModel"),PGr.forEach(t),X_o=r(TMe," (QDQBert model)"),TMe.forEach(t),V_o=i(D),uu=n(D,"LI",{});var FMe=s(uu);Mee=n(FMe,"STRONG",{});var $Gr=s(Mee);z_o=r($Gr,"reformer"),$Gr.forEach(t),W_o=r(FMe," \u2014 "),RP=n(FMe,"A",{href:!0});var IGr=s(RP);Q_o=r(IGr,"ReformerModelWithLMHead"),IGr.forEach(t),H_o=r(FMe," (Reformer model)"),FMe.forEach(t),U_o=i(D),bu=n(D,"LI",{});var CMe=s(bu);Eee=n(CMe,"STRONG",{});var DGr=s(Eee);J_o=r(DGr,"rembert"),DGr.forEach(t),Y_o=r(CMe," \u2014 "),SP=n(CMe,"A",{href:!0});var jGr=s(SP);K_o=r(jGr,"RemBertForCausalLM"),jGr.forEach(t),Z_o=r(CMe," (RemBERT model)"),CMe.forEach(t),euo=i(D),vu=n(D,"LI",{});var MMe=s(vu);yee=n(MMe,"STRONG",{});var NGr=s(yee);ouo=r(NGr,"roberta"),NGr.forEach(t),ruo=r(MMe," \u2014 "),PP=n(MMe,"A",{href:!0});var qGr=s(PP);tuo=r(qGr,"RobertaForCausalLM"),qGr.forEach(t),auo=r(MMe," (RoBERTa model)"),MMe.forEach(t),nuo=i(D),Tu=n(D,"LI",{});var EMe=s(Tu);wee=n(EMe,"STRONG",{});var GGr=s(wee);suo=r(GGr,"roformer"),GGr.forEach(t),luo=r(EMe," \u2014 "),$P=n(EMe,"A",{href:!0});var OGr=s($P);iuo=r(OGr,"RoFormerForCausalLM"),OGr.forEach(t),duo=r(EMe," (RoFormer model)"),EMe.forEach(t),cuo=i(D),Fu=n(D,"LI",{});var yMe=s(Fu);Aee=n(yMe,"STRONG",{});var XGr=s(Aee);fuo=r(XGr,"speech_to_text_2"),XGr.forEach(t),muo=r(yMe," \u2014 "),IP=n(yMe,"A",{href:!0});var VGr=s(IP);guo=r(VGr,"Speech2Text2ForCausalLM"),VGr.forEach(t),huo=r(yMe," (Speech2Text2 model)"),yMe.forEach(t),puo=i(D),Cu=n(D,"LI",{});var wMe=s(Cu);Lee=n(wMe,"STRONG",{});var zGr=s(Lee);_uo=r(zGr,"transfo-xl"),zGr.forEach(t),uuo=r(wMe," \u2014 "),DP=n(wMe,"A",{href:!0});var WGr=s(DP);buo=r(WGr,"TransfoXLLMHeadModel"),WGr.forEach(t),vuo=r(wMe," (Transformer-XL model)"),wMe.forEach(t),Tuo=i(D),Mu=n(D,"LI",{});var AMe=s(Mu);Bee=n(AMe,"STRONG",{});var QGr=s(Bee);Fuo=r(QGr,"trocr"),QGr.forEach(t),Cuo=r(AMe," \u2014 "),jP=n(AMe,"A",{href:!0});var HGr=s(jP);Muo=r(HGr,"TrOCRForCausalLM"),HGr.forEach(t),Euo=r(AMe," (TrOCR model)"),AMe.forEach(t),yuo=i(D),Eu=n(D,"LI",{});var LMe=s(Eu);xee=n(LMe,"STRONG",{});var UGr=s(xee);wuo=r(UGr,"xglm"),UGr.forEach(t),Auo=r(LMe," \u2014 "),NP=n(LMe,"A",{href:!0});var JGr=s(NP);Luo=r(JGr,"XGLMForCausalLM"),JGr.forEach(t),Buo=r(LMe," (XGLM model)"),LMe.forEach(t),xuo=i(D),yu=n(D,"LI",{});var BMe=s(yu);kee=n(BMe,"STRONG",{});var YGr=s(kee);kuo=r(YGr,"xlm"),YGr.forEach(t),Ruo=r(BMe," \u2014 "),qP=n(BMe,"A",{href:!0});var KGr=s(qP);Suo=r(KGr,"XLMWithLMHeadModel"),KGr.forEach(t),Puo=r(BMe," (XLM model)"),BMe.forEach(t),$uo=i(D),wu=n(D,"LI",{});var xMe=s(wu);Ree=n(xMe,"STRONG",{});var ZGr=s(Ree);Iuo=r(ZGr,"xlm-prophetnet"),ZGr.forEach(t),Duo=r(xMe," \u2014 "),GP=n(xMe,"A",{href:!0});var eOr=s(GP);juo=r(eOr,"XLMProphetNetForCausalLM"),eOr.forEach(t),Nuo=r(xMe," (XLMProphetNet model)"),xMe.forEach(t),quo=i(D),Au=n(D,"LI",{});var kMe=s(Au);See=n(kMe,"STRONG",{});var oOr=s(See);Guo=r(oOr,"xlm-roberta"),oOr.forEach(t),Ouo=r(kMe," \u2014 "),OP=n(kMe,"A",{href:!0});var rOr=s(OP);Xuo=r(rOr,"XLMRobertaForCausalLM"),rOr.forEach(t),Vuo=r(kMe," (XLM-RoBERTa model)"),kMe.forEach(t),zuo=i(D),Lu=n(D,"LI",{});var RMe=s(Lu);Pee=n(RMe,"STRONG",{});var tOr=s(Pee);Wuo=r(tOr,"xlm-roberta-xl"),tOr.forEach(t),Quo=r(RMe," \u2014 "),XP=n(RMe,"A",{href:!0});var aOr=s(XP);Huo=r(aOr,"XLMRobertaXLForCausalLM"),aOr.forEach(t),Uuo=r(RMe," (XLM-RoBERTa-XL model)"),RMe.forEach(t),Juo=i(D),Bu=n(D,"LI",{});var SMe=s(Bu);$ee=n(SMe,"STRONG",{});var nOr=s($ee);Yuo=r(nOr,"xlnet"),nOr.forEach(t),Kuo=r(SMe," \u2014 "),VP=n(SMe,"A",{href:!0});var sOr=s(VP);Zuo=r(sOr,"XLNetLMHeadModel"),sOr.forEach(t),e1o=r(SMe," (XLNet model)"),SMe.forEach(t),D.forEach(t),o1o=i(Dt),xu=n(Dt,"P",{});var PMe=s(xu);r1o=r(PMe,"The model is set in evaluation mode by default using "),Iee=n(PMe,"CODE",{});var lOr=s(Iee);t1o=r(lOr,"model.eval()"),lOr.forEach(t),a1o=r(PMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dee=n(PMe,"CODE",{});var iOr=s(Dee);n1o=r(iOr,"model.train()"),iOr.forEach(t),PMe.forEach(t),s1o=i(Dt),jee=n(Dt,"P",{});var dOr=s(jee);l1o=r(dOr,"Examples:"),dOr.forEach(t),i1o=i(Dt),m(w3.$$.fragment,Dt),Dt.forEach(t),Vs.forEach(t),sBe=i(c),Yi=n(c,"H2",{class:!0});var gke=s(Yi);ku=n(gke,"A",{id:!0,class:!0,href:!0});var cOr=s(ku);Nee=n(cOr,"SPAN",{});var fOr=s(Nee);m(A3.$$.fragment,fOr),fOr.forEach(t),cOr.forEach(t),d1o=i(gke),qee=n(gke,"SPAN",{});var mOr=s(qee);c1o=r(mOr,"AutoModelForMaskedLM"),mOr.forEach(t),gke.forEach(t),lBe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(L3.$$.fragment,Ws),f1o=i(Ws),Ki=n(Ws,"P",{});var QV=s(Ki);m1o=r(QV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Gee=n(QV,"CODE",{});var gOr=s(Gee);g1o=r(gOr,"from_pretrained()"),gOr.forEach(t),h1o=r(QV,"class method or the "),Oee=n(QV,"CODE",{});var hOr=s(Oee);p1o=r(hOr,"from_config()"),hOr.forEach(t),_1o=r(QV,`class
method.`),QV.forEach(t),u1o=i(Ws),B3=n(Ws,"P",{});var hke=s(B3);b1o=r(hke,"This class cannot be instantiated directly using "),Xee=n(hke,"CODE",{});var pOr=s(Xee);v1o=r(pOr,"__init__()"),pOr.forEach(t),T1o=r(hke," (throws an error)."),hke.forEach(t),F1o=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Qs=s(Xr);m(x3.$$.fragment,Qs),C1o=i(Qs),Vee=n(Qs,"P",{});var _Or=s(Vee);M1o=r(_Or,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Or.forEach(t),E1o=i(Qs),Zi=n(Qs,"P",{});var HV=s(Zi);y1o=r(HV,`Note:
Loading a model from its configuration file does `),zee=n(HV,"STRONG",{});var uOr=s(zee);w1o=r(uOr,"not"),uOr.forEach(t),A1o=r(HV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=n(HV,"CODE",{});var bOr=s(Wee);L1o=r(bOr,"from_pretrained()"),bOr.forEach(t),B1o=r(HV,"to load the model weights."),HV.forEach(t),x1o=i(Qs),Qee=n(Qs,"P",{});var vOr=s(Qee);k1o=r(vOr,"Examples:"),vOr.forEach(t),R1o=i(Qs),m(k3.$$.fragment,Qs),Qs.forEach(t),S1o=i(Ws),Ie=n(Ws,"DIV",{class:!0});var jt=s(Ie);m(R3.$$.fragment,jt),P1o=i(jt),Hee=n(jt,"P",{});var TOr=s(Hee);$1o=r(TOr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TOr.forEach(t),I1o=i(jt),Oa=n(jt,"P",{});var SM=s(Oa);D1o=r(SM,"The model class to instantiate is selected based on the "),Uee=n(SM,"CODE",{});var FOr=s(Uee);j1o=r(FOr,"model_type"),FOr.forEach(t),N1o=r(SM,` property of the config object (either
passed as an argument or loaded from `),Jee=n(SM,"CODE",{});var COr=s(Jee);q1o=r(COr,"pretrained_model_name_or_path"),COr.forEach(t),G1o=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yee=n(SM,"CODE",{});var MOr=s(Yee);O1o=r(MOr,"pretrained_model_name_or_path"),MOr.forEach(t),X1o=r(SM,":"),SM.forEach(t),V1o=i(jt),I=n(jt,"UL",{});var j=s(I);Ru=n(j,"LI",{});var $Me=s(Ru);Kee=n($Me,"STRONG",{});var EOr=s(Kee);z1o=r(EOr,"albert"),EOr.forEach(t),W1o=r($Me," \u2014 "),zP=n($Me,"A",{href:!0});var yOr=s(zP);Q1o=r(yOr,"AlbertForMaskedLM"),yOr.forEach(t),H1o=r($Me," (ALBERT model)"),$Me.forEach(t),U1o=i(j),Su=n(j,"LI",{});var IMe=s(Su);Zee=n(IMe,"STRONG",{});var wOr=s(Zee);J1o=r(wOr,"bart"),wOr.forEach(t),Y1o=r(IMe," \u2014 "),WP=n(IMe,"A",{href:!0});var AOr=s(WP);K1o=r(AOr,"BartForConditionalGeneration"),AOr.forEach(t),Z1o=r(IMe," (BART model)"),IMe.forEach(t),e2o=i(j),Pu=n(j,"LI",{});var DMe=s(Pu);eoe=n(DMe,"STRONG",{});var LOr=s(eoe);o2o=r(LOr,"bert"),LOr.forEach(t),r2o=r(DMe," \u2014 "),QP=n(DMe,"A",{href:!0});var BOr=s(QP);t2o=r(BOr,"BertForMaskedLM"),BOr.forEach(t),a2o=r(DMe," (BERT model)"),DMe.forEach(t),n2o=i(j),$u=n(j,"LI",{});var jMe=s($u);ooe=n(jMe,"STRONG",{});var xOr=s(ooe);s2o=r(xOr,"big_bird"),xOr.forEach(t),l2o=r(jMe," \u2014 "),HP=n(jMe,"A",{href:!0});var kOr=s(HP);i2o=r(kOr,"BigBirdForMaskedLM"),kOr.forEach(t),d2o=r(jMe," (BigBird model)"),jMe.forEach(t),c2o=i(j),Iu=n(j,"LI",{});var NMe=s(Iu);roe=n(NMe,"STRONG",{});var ROr=s(roe);f2o=r(ROr,"camembert"),ROr.forEach(t),m2o=r(NMe," \u2014 "),UP=n(NMe,"A",{href:!0});var SOr=s(UP);g2o=r(SOr,"CamembertForMaskedLM"),SOr.forEach(t),h2o=r(NMe," (CamemBERT model)"),NMe.forEach(t),p2o=i(j),Du=n(j,"LI",{});var qMe=s(Du);toe=n(qMe,"STRONG",{});var POr=s(toe);_2o=r(POr,"convbert"),POr.forEach(t),u2o=r(qMe," \u2014 "),JP=n(qMe,"A",{href:!0});var $Or=s(JP);b2o=r($Or,"ConvBertForMaskedLM"),$Or.forEach(t),v2o=r(qMe," (ConvBERT model)"),qMe.forEach(t),T2o=i(j),ju=n(j,"LI",{});var GMe=s(ju);aoe=n(GMe,"STRONG",{});var IOr=s(aoe);F2o=r(IOr,"data2vec-text"),IOr.forEach(t),C2o=r(GMe," \u2014 "),YP=n(GMe,"A",{href:!0});var DOr=s(YP);M2o=r(DOr,"Data2VecTextForMaskedLM"),DOr.forEach(t),E2o=r(GMe," (Data2VecText model)"),GMe.forEach(t),y2o=i(j),Nu=n(j,"LI",{});var OMe=s(Nu);noe=n(OMe,"STRONG",{});var jOr=s(noe);w2o=r(jOr,"deberta"),jOr.forEach(t),A2o=r(OMe," \u2014 "),KP=n(OMe,"A",{href:!0});var NOr=s(KP);L2o=r(NOr,"DebertaForMaskedLM"),NOr.forEach(t),B2o=r(OMe," (DeBERTa model)"),OMe.forEach(t),x2o=i(j),qu=n(j,"LI",{});var XMe=s(qu);soe=n(XMe,"STRONG",{});var qOr=s(soe);k2o=r(qOr,"deberta-v2"),qOr.forEach(t),R2o=r(XMe," \u2014 "),ZP=n(XMe,"A",{href:!0});var GOr=s(ZP);S2o=r(GOr,"DebertaV2ForMaskedLM"),GOr.forEach(t),P2o=r(XMe," (DeBERTa-v2 model)"),XMe.forEach(t),$2o=i(j),Gu=n(j,"LI",{});var VMe=s(Gu);loe=n(VMe,"STRONG",{});var OOr=s(loe);I2o=r(OOr,"distilbert"),OOr.forEach(t),D2o=r(VMe," \u2014 "),e$=n(VMe,"A",{href:!0});var XOr=s(e$);j2o=r(XOr,"DistilBertForMaskedLM"),XOr.forEach(t),N2o=r(VMe," (DistilBERT model)"),VMe.forEach(t),q2o=i(j),Ou=n(j,"LI",{});var zMe=s(Ou);ioe=n(zMe,"STRONG",{});var VOr=s(ioe);G2o=r(VOr,"electra"),VOr.forEach(t),O2o=r(zMe," \u2014 "),o$=n(zMe,"A",{href:!0});var zOr=s(o$);X2o=r(zOr,"ElectraForMaskedLM"),zOr.forEach(t),V2o=r(zMe," (ELECTRA model)"),zMe.forEach(t),z2o=i(j),Xu=n(j,"LI",{});var WMe=s(Xu);doe=n(WMe,"STRONG",{});var WOr=s(doe);W2o=r(WOr,"flaubert"),WOr.forEach(t),Q2o=r(WMe," \u2014 "),r$=n(WMe,"A",{href:!0});var QOr=s(r$);H2o=r(QOr,"FlaubertWithLMHeadModel"),QOr.forEach(t),U2o=r(WMe," (FlauBERT model)"),WMe.forEach(t),J2o=i(j),Vu=n(j,"LI",{});var QMe=s(Vu);coe=n(QMe,"STRONG",{});var HOr=s(coe);Y2o=r(HOr,"fnet"),HOr.forEach(t),K2o=r(QMe," \u2014 "),t$=n(QMe,"A",{href:!0});var UOr=s(t$);Z2o=r(UOr,"FNetForMaskedLM"),UOr.forEach(t),ebo=r(QMe," (FNet model)"),QMe.forEach(t),obo=i(j),zu=n(j,"LI",{});var HMe=s(zu);foe=n(HMe,"STRONG",{});var JOr=s(foe);rbo=r(JOr,"funnel"),JOr.forEach(t),tbo=r(HMe," \u2014 "),a$=n(HMe,"A",{href:!0});var YOr=s(a$);abo=r(YOr,"FunnelForMaskedLM"),YOr.forEach(t),nbo=r(HMe," (Funnel Transformer model)"),HMe.forEach(t),sbo=i(j),Wu=n(j,"LI",{});var UMe=s(Wu);moe=n(UMe,"STRONG",{});var KOr=s(moe);lbo=r(KOr,"ibert"),KOr.forEach(t),ibo=r(UMe," \u2014 "),n$=n(UMe,"A",{href:!0});var ZOr=s(n$);dbo=r(ZOr,"IBertForMaskedLM"),ZOr.forEach(t),cbo=r(UMe," (I-BERT model)"),UMe.forEach(t),fbo=i(j),Qu=n(j,"LI",{});var JMe=s(Qu);goe=n(JMe,"STRONG",{});var eXr=s(goe);mbo=r(eXr,"layoutlm"),eXr.forEach(t),gbo=r(JMe," \u2014 "),s$=n(JMe,"A",{href:!0});var oXr=s(s$);hbo=r(oXr,"LayoutLMForMaskedLM"),oXr.forEach(t),pbo=r(JMe," (LayoutLM model)"),JMe.forEach(t),_bo=i(j),Hu=n(j,"LI",{});var YMe=s(Hu);hoe=n(YMe,"STRONG",{});var rXr=s(hoe);ubo=r(rXr,"longformer"),rXr.forEach(t),bbo=r(YMe," \u2014 "),l$=n(YMe,"A",{href:!0});var tXr=s(l$);vbo=r(tXr,"LongformerForMaskedLM"),tXr.forEach(t),Tbo=r(YMe," (Longformer model)"),YMe.forEach(t),Fbo=i(j),Uu=n(j,"LI",{});var KMe=s(Uu);poe=n(KMe,"STRONG",{});var aXr=s(poe);Cbo=r(aXr,"mbart"),aXr.forEach(t),Mbo=r(KMe," \u2014 "),i$=n(KMe,"A",{href:!0});var nXr=s(i$);Ebo=r(nXr,"MBartForConditionalGeneration"),nXr.forEach(t),ybo=r(KMe," (mBART model)"),KMe.forEach(t),wbo=i(j),Ju=n(j,"LI",{});var ZMe=s(Ju);_oe=n(ZMe,"STRONG",{});var sXr=s(_oe);Abo=r(sXr,"megatron-bert"),sXr.forEach(t),Lbo=r(ZMe," \u2014 "),d$=n(ZMe,"A",{href:!0});var lXr=s(d$);Bbo=r(lXr,"MegatronBertForMaskedLM"),lXr.forEach(t),xbo=r(ZMe," (MegatronBert model)"),ZMe.forEach(t),kbo=i(j),Yu=n(j,"LI",{});var eEe=s(Yu);uoe=n(eEe,"STRONG",{});var iXr=s(uoe);Rbo=r(iXr,"mobilebert"),iXr.forEach(t),Sbo=r(eEe," \u2014 "),c$=n(eEe,"A",{href:!0});var dXr=s(c$);Pbo=r(dXr,"MobileBertForMaskedLM"),dXr.forEach(t),$bo=r(eEe," (MobileBERT model)"),eEe.forEach(t),Ibo=i(j),Ku=n(j,"LI",{});var oEe=s(Ku);boe=n(oEe,"STRONG",{});var cXr=s(boe);Dbo=r(cXr,"mpnet"),cXr.forEach(t),jbo=r(oEe," \u2014 "),f$=n(oEe,"A",{href:!0});var fXr=s(f$);Nbo=r(fXr,"MPNetForMaskedLM"),fXr.forEach(t),qbo=r(oEe," (MPNet model)"),oEe.forEach(t),Gbo=i(j),Zu=n(j,"LI",{});var rEe=s(Zu);voe=n(rEe,"STRONG",{});var mXr=s(voe);Obo=r(mXr,"nystromformer"),mXr.forEach(t),Xbo=r(rEe," \u2014 "),m$=n(rEe,"A",{href:!0});var gXr=s(m$);Vbo=r(gXr,"NystromformerForMaskedLM"),gXr.forEach(t),zbo=r(rEe," (Nystromformer model)"),rEe.forEach(t),Wbo=i(j),e1=n(j,"LI",{});var tEe=s(e1);Toe=n(tEe,"STRONG",{});var hXr=s(Toe);Qbo=r(hXr,"perceiver"),hXr.forEach(t),Hbo=r(tEe," \u2014 "),g$=n(tEe,"A",{href:!0});var pXr=s(g$);Ubo=r(pXr,"PerceiverForMaskedLM"),pXr.forEach(t),Jbo=r(tEe," (Perceiver model)"),tEe.forEach(t),Ybo=i(j),o1=n(j,"LI",{});var aEe=s(o1);Foe=n(aEe,"STRONG",{});var _Xr=s(Foe);Kbo=r(_Xr,"qdqbert"),_Xr.forEach(t),Zbo=r(aEe," \u2014 "),h$=n(aEe,"A",{href:!0});var uXr=s(h$);e5o=r(uXr,"QDQBertForMaskedLM"),uXr.forEach(t),o5o=r(aEe," (QDQBert model)"),aEe.forEach(t),r5o=i(j),r1=n(j,"LI",{});var nEe=s(r1);Coe=n(nEe,"STRONG",{});var bXr=s(Coe);t5o=r(bXr,"reformer"),bXr.forEach(t),a5o=r(nEe," \u2014 "),p$=n(nEe,"A",{href:!0});var vXr=s(p$);n5o=r(vXr,"ReformerForMaskedLM"),vXr.forEach(t),s5o=r(nEe," (Reformer model)"),nEe.forEach(t),l5o=i(j),t1=n(j,"LI",{});var sEe=s(t1);Moe=n(sEe,"STRONG",{});var TXr=s(Moe);i5o=r(TXr,"rembert"),TXr.forEach(t),d5o=r(sEe," \u2014 "),_$=n(sEe,"A",{href:!0});var FXr=s(_$);c5o=r(FXr,"RemBertForMaskedLM"),FXr.forEach(t),f5o=r(sEe," (RemBERT model)"),sEe.forEach(t),m5o=i(j),a1=n(j,"LI",{});var lEe=s(a1);Eoe=n(lEe,"STRONG",{});var CXr=s(Eoe);g5o=r(CXr,"roberta"),CXr.forEach(t),h5o=r(lEe," \u2014 "),u$=n(lEe,"A",{href:!0});var MXr=s(u$);p5o=r(MXr,"RobertaForMaskedLM"),MXr.forEach(t),_5o=r(lEe," (RoBERTa model)"),lEe.forEach(t),u5o=i(j),n1=n(j,"LI",{});var iEe=s(n1);yoe=n(iEe,"STRONG",{});var EXr=s(yoe);b5o=r(EXr,"roformer"),EXr.forEach(t),v5o=r(iEe," \u2014 "),b$=n(iEe,"A",{href:!0});var yXr=s(b$);T5o=r(yXr,"RoFormerForMaskedLM"),yXr.forEach(t),F5o=r(iEe," (RoFormer model)"),iEe.forEach(t),C5o=i(j),s1=n(j,"LI",{});var dEe=s(s1);woe=n(dEe,"STRONG",{});var wXr=s(woe);M5o=r(wXr,"squeezebert"),wXr.forEach(t),E5o=r(dEe," \u2014 "),v$=n(dEe,"A",{href:!0});var AXr=s(v$);y5o=r(AXr,"SqueezeBertForMaskedLM"),AXr.forEach(t),w5o=r(dEe," (SqueezeBERT model)"),dEe.forEach(t),A5o=i(j),l1=n(j,"LI",{});var cEe=s(l1);Aoe=n(cEe,"STRONG",{});var LXr=s(Aoe);L5o=r(LXr,"tapas"),LXr.forEach(t),B5o=r(cEe," \u2014 "),T$=n(cEe,"A",{href:!0});var BXr=s(T$);x5o=r(BXr,"TapasForMaskedLM"),BXr.forEach(t),k5o=r(cEe," (TAPAS model)"),cEe.forEach(t),R5o=i(j),i1=n(j,"LI",{});var fEe=s(i1);Loe=n(fEe,"STRONG",{});var xXr=s(Loe);S5o=r(xXr,"wav2vec2"),xXr.forEach(t),P5o=r(fEe," \u2014 "),Boe=n(fEe,"CODE",{});var kXr=s(Boe);$5o=r(kXr,"Wav2Vec2ForMaskedLM"),kXr.forEach(t),I5o=r(fEe,"(Wav2Vec2 model)"),fEe.forEach(t),D5o=i(j),d1=n(j,"LI",{});var mEe=s(d1);xoe=n(mEe,"STRONG",{});var RXr=s(xoe);j5o=r(RXr,"xlm"),RXr.forEach(t),N5o=r(mEe," \u2014 "),F$=n(mEe,"A",{href:!0});var SXr=s(F$);q5o=r(SXr,"XLMWithLMHeadModel"),SXr.forEach(t),G5o=r(mEe," (XLM model)"),mEe.forEach(t),O5o=i(j),c1=n(j,"LI",{});var gEe=s(c1);koe=n(gEe,"STRONG",{});var PXr=s(koe);X5o=r(PXr,"xlm-roberta"),PXr.forEach(t),V5o=r(gEe," \u2014 "),C$=n(gEe,"A",{href:!0});var $Xr=s(C$);z5o=r($Xr,"XLMRobertaForMaskedLM"),$Xr.forEach(t),W5o=r(gEe," (XLM-RoBERTa model)"),gEe.forEach(t),Q5o=i(j),f1=n(j,"LI",{});var hEe=s(f1);Roe=n(hEe,"STRONG",{});var IXr=s(Roe);H5o=r(IXr,"xlm-roberta-xl"),IXr.forEach(t),U5o=r(hEe," \u2014 "),M$=n(hEe,"A",{href:!0});var DXr=s(M$);J5o=r(DXr,"XLMRobertaXLForMaskedLM"),DXr.forEach(t),Y5o=r(hEe," (XLM-RoBERTa-XL model)"),hEe.forEach(t),K5o=i(j),m1=n(j,"LI",{});var pEe=s(m1);Soe=n(pEe,"STRONG",{});var jXr=s(Soe);Z5o=r(jXr,"yoso"),jXr.forEach(t),evo=r(pEe," \u2014 "),E$=n(pEe,"A",{href:!0});var NXr=s(E$);ovo=r(NXr,"YosoForMaskedLM"),NXr.forEach(t),rvo=r(pEe," (YOSO model)"),pEe.forEach(t),j.forEach(t),tvo=i(jt),g1=n(jt,"P",{});var _Ee=s(g1);avo=r(_Ee,"The model is set in evaluation mode by default using "),Poe=n(_Ee,"CODE",{});var qXr=s(Poe);nvo=r(qXr,"model.eval()"),qXr.forEach(t),svo=r(_Ee,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$oe=n(_Ee,"CODE",{});var GXr=s($oe);lvo=r(GXr,"model.train()"),GXr.forEach(t),_Ee.forEach(t),ivo=i(jt),Ioe=n(jt,"P",{});var OXr=s(Ioe);dvo=r(OXr,"Examples:"),OXr.forEach(t),cvo=i(jt),m(S3.$$.fragment,jt),jt.forEach(t),Ws.forEach(t),iBe=i(c),ed=n(c,"H2",{class:!0});var pke=s(ed);h1=n(pke,"A",{id:!0,class:!0,href:!0});var XXr=s(h1);Doe=n(XXr,"SPAN",{});var VXr=s(Doe);m(P3.$$.fragment,VXr),VXr.forEach(t),XXr.forEach(t),fvo=i(pke),joe=n(pke,"SPAN",{});var zXr=s(joe);mvo=r(zXr,"AutoModelForSeq2SeqLM"),zXr.forEach(t),pke.forEach(t),dBe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m($3.$$.fragment,Hs),gvo=i(Hs),od=n(Hs,"P",{});var UV=s(od);hvo=r(UV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Noe=n(UV,"CODE",{});var WXr=s(Noe);pvo=r(WXr,"from_pretrained()"),WXr.forEach(t),_vo=r(UV,"class method or the "),qoe=n(UV,"CODE",{});var QXr=s(qoe);uvo=r(QXr,"from_config()"),QXr.forEach(t),bvo=r(UV,`class
method.`),UV.forEach(t),vvo=i(Hs),I3=n(Hs,"P",{});var _ke=s(I3);Tvo=r(_ke,"This class cannot be instantiated directly using "),Goe=n(_ke,"CODE",{});var HXr=s(Goe);Fvo=r(HXr,"__init__()"),HXr.forEach(t),Cvo=r(_ke," (throws an error)."),_ke.forEach(t),Mvo=i(Hs),Vr=n(Hs,"DIV",{class:!0});var Us=s(Vr);m(D3.$$.fragment,Us),Evo=i(Us),Ooe=n(Us,"P",{});var UXr=s(Ooe);yvo=r(UXr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UXr.forEach(t),wvo=i(Us),rd=n(Us,"P",{});var JV=s(rd);Avo=r(JV,`Note:
Loading a model from its configuration file does `),Xoe=n(JV,"STRONG",{});var JXr=s(Xoe);Lvo=r(JXr,"not"),JXr.forEach(t),Bvo=r(JV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Voe=n(JV,"CODE",{});var YXr=s(Voe);xvo=r(YXr,"from_pretrained()"),YXr.forEach(t),kvo=r(JV,"to load the model weights."),JV.forEach(t),Rvo=i(Us),zoe=n(Us,"P",{});var KXr=s(zoe);Svo=r(KXr,"Examples:"),KXr.forEach(t),Pvo=i(Us),m(j3.$$.fragment,Us),Us.forEach(t),$vo=i(Hs),De=n(Hs,"DIV",{class:!0});var Nt=s(De);m(N3.$$.fragment,Nt),Ivo=i(Nt),Woe=n(Nt,"P",{});var ZXr=s(Woe);Dvo=r(ZXr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZXr.forEach(t),jvo=i(Nt),Xa=n(Nt,"P",{});var PM=s(Xa);Nvo=r(PM,"The model class to instantiate is selected based on the "),Qoe=n(PM,"CODE",{});var eVr=s(Qoe);qvo=r(eVr,"model_type"),eVr.forEach(t),Gvo=r(PM,` property of the config object (either
passed as an argument or loaded from `),Hoe=n(PM,"CODE",{});var oVr=s(Hoe);Ovo=r(oVr,"pretrained_model_name_or_path"),oVr.forEach(t),Xvo=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=n(PM,"CODE",{});var rVr=s(Uoe);Vvo=r(rVr,"pretrained_model_name_or_path"),rVr.forEach(t),zvo=r(PM,":"),PM.forEach(t),Wvo=i(Nt),ne=n(Nt,"UL",{});var ie=s(ne);p1=n(ie,"LI",{});var uEe=s(p1);Joe=n(uEe,"STRONG",{});var tVr=s(Joe);Qvo=r(tVr,"bart"),tVr.forEach(t),Hvo=r(uEe," \u2014 "),y$=n(uEe,"A",{href:!0});var aVr=s(y$);Uvo=r(aVr,"BartForConditionalGeneration"),aVr.forEach(t),Jvo=r(uEe," (BART model)"),uEe.forEach(t),Yvo=i(ie),_1=n(ie,"LI",{});var bEe=s(_1);Yoe=n(bEe,"STRONG",{});var nVr=s(Yoe);Kvo=r(nVr,"bigbird_pegasus"),nVr.forEach(t),Zvo=r(bEe," \u2014 "),w$=n(bEe,"A",{href:!0});var sVr=s(w$);eTo=r(sVr,"BigBirdPegasusForConditionalGeneration"),sVr.forEach(t),oTo=r(bEe," (BigBirdPegasus model)"),bEe.forEach(t),rTo=i(ie),u1=n(ie,"LI",{});var vEe=s(u1);Koe=n(vEe,"STRONG",{});var lVr=s(Koe);tTo=r(lVr,"blenderbot"),lVr.forEach(t),aTo=r(vEe," \u2014 "),A$=n(vEe,"A",{href:!0});var iVr=s(A$);nTo=r(iVr,"BlenderbotForConditionalGeneration"),iVr.forEach(t),sTo=r(vEe," (Blenderbot model)"),vEe.forEach(t),lTo=i(ie),b1=n(ie,"LI",{});var TEe=s(b1);Zoe=n(TEe,"STRONG",{});var dVr=s(Zoe);iTo=r(dVr,"blenderbot-small"),dVr.forEach(t),dTo=r(TEe," \u2014 "),L$=n(TEe,"A",{href:!0});var cVr=s(L$);cTo=r(cVr,"BlenderbotSmallForConditionalGeneration"),cVr.forEach(t),fTo=r(TEe," (BlenderbotSmall model)"),TEe.forEach(t),mTo=i(ie),v1=n(ie,"LI",{});var FEe=s(v1);ere=n(FEe,"STRONG",{});var fVr=s(ere);gTo=r(fVr,"encoder-decoder"),fVr.forEach(t),hTo=r(FEe," \u2014 "),B$=n(FEe,"A",{href:!0});var mVr=s(B$);pTo=r(mVr,"EncoderDecoderModel"),mVr.forEach(t),_To=r(FEe," (Encoder decoder model)"),FEe.forEach(t),uTo=i(ie),T1=n(ie,"LI",{});var CEe=s(T1);ore=n(CEe,"STRONG",{});var gVr=s(ore);bTo=r(gVr,"fsmt"),gVr.forEach(t),vTo=r(CEe," \u2014 "),x$=n(CEe,"A",{href:!0});var hVr=s(x$);TTo=r(hVr,"FSMTForConditionalGeneration"),hVr.forEach(t),FTo=r(CEe," (FairSeq Machine-Translation model)"),CEe.forEach(t),CTo=i(ie),F1=n(ie,"LI",{});var MEe=s(F1);rre=n(MEe,"STRONG",{});var pVr=s(rre);MTo=r(pVr,"led"),pVr.forEach(t),ETo=r(MEe," \u2014 "),k$=n(MEe,"A",{href:!0});var _Vr=s(k$);yTo=r(_Vr,"LEDForConditionalGeneration"),_Vr.forEach(t),wTo=r(MEe," (LED model)"),MEe.forEach(t),ATo=i(ie),C1=n(ie,"LI",{});var EEe=s(C1);tre=n(EEe,"STRONG",{});var uVr=s(tre);LTo=r(uVr,"m2m_100"),uVr.forEach(t),BTo=r(EEe," \u2014 "),R$=n(EEe,"A",{href:!0});var bVr=s(R$);xTo=r(bVr,"M2M100ForConditionalGeneration"),bVr.forEach(t),kTo=r(EEe," (M2M100 model)"),EEe.forEach(t),RTo=i(ie),M1=n(ie,"LI",{});var yEe=s(M1);are=n(yEe,"STRONG",{});var vVr=s(are);STo=r(vVr,"marian"),vVr.forEach(t),PTo=r(yEe," \u2014 "),S$=n(yEe,"A",{href:!0});var TVr=s(S$);$To=r(TVr,"MarianMTModel"),TVr.forEach(t),ITo=r(yEe," (Marian model)"),yEe.forEach(t),DTo=i(ie),E1=n(ie,"LI",{});var wEe=s(E1);nre=n(wEe,"STRONG",{});var FVr=s(nre);jTo=r(FVr,"mbart"),FVr.forEach(t),NTo=r(wEe," \u2014 "),P$=n(wEe,"A",{href:!0});var CVr=s(P$);qTo=r(CVr,"MBartForConditionalGeneration"),CVr.forEach(t),GTo=r(wEe," (mBART model)"),wEe.forEach(t),OTo=i(ie),y1=n(ie,"LI",{});var AEe=s(y1);sre=n(AEe,"STRONG",{});var MVr=s(sre);XTo=r(MVr,"mt5"),MVr.forEach(t),VTo=r(AEe," \u2014 "),$$=n(AEe,"A",{href:!0});var EVr=s($$);zTo=r(EVr,"MT5ForConditionalGeneration"),EVr.forEach(t),WTo=r(AEe," (mT5 model)"),AEe.forEach(t),QTo=i(ie),w1=n(ie,"LI",{});var LEe=s(w1);lre=n(LEe,"STRONG",{});var yVr=s(lre);HTo=r(yVr,"pegasus"),yVr.forEach(t),UTo=r(LEe," \u2014 "),I$=n(LEe,"A",{href:!0});var wVr=s(I$);JTo=r(wVr,"PegasusForConditionalGeneration"),wVr.forEach(t),YTo=r(LEe," (Pegasus model)"),LEe.forEach(t),KTo=i(ie),A1=n(ie,"LI",{});var BEe=s(A1);ire=n(BEe,"STRONG",{});var AVr=s(ire);ZTo=r(AVr,"plbart"),AVr.forEach(t),eFo=r(BEe," \u2014 "),D$=n(BEe,"A",{href:!0});var LVr=s(D$);oFo=r(LVr,"PLBartForConditionalGeneration"),LVr.forEach(t),rFo=r(BEe," (PLBart model)"),BEe.forEach(t),tFo=i(ie),L1=n(ie,"LI",{});var xEe=s(L1);dre=n(xEe,"STRONG",{});var BVr=s(dre);aFo=r(BVr,"prophetnet"),BVr.forEach(t),nFo=r(xEe," \u2014 "),j$=n(xEe,"A",{href:!0});var xVr=s(j$);sFo=r(xVr,"ProphetNetForConditionalGeneration"),xVr.forEach(t),lFo=r(xEe," (ProphetNet model)"),xEe.forEach(t),iFo=i(ie),B1=n(ie,"LI",{});var kEe=s(B1);cre=n(kEe,"STRONG",{});var kVr=s(cre);dFo=r(kVr,"t5"),kVr.forEach(t),cFo=r(kEe," \u2014 "),N$=n(kEe,"A",{href:!0});var RVr=s(N$);fFo=r(RVr,"T5ForConditionalGeneration"),RVr.forEach(t),mFo=r(kEe," (T5 model)"),kEe.forEach(t),gFo=i(ie),x1=n(ie,"LI",{});var REe=s(x1);fre=n(REe,"STRONG",{});var SVr=s(fre);hFo=r(SVr,"xlm-prophetnet"),SVr.forEach(t),pFo=r(REe," \u2014 "),q$=n(REe,"A",{href:!0});var PVr=s(q$);_Fo=r(PVr,"XLMProphetNetForConditionalGeneration"),PVr.forEach(t),uFo=r(REe," (XLMProphetNet model)"),REe.forEach(t),ie.forEach(t),bFo=i(Nt),k1=n(Nt,"P",{});var SEe=s(k1);vFo=r(SEe,"The model is set in evaluation mode by default using "),mre=n(SEe,"CODE",{});var $Vr=s(mre);TFo=r($Vr,"model.eval()"),$Vr.forEach(t),FFo=r(SEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gre=n(SEe,"CODE",{});var IVr=s(gre);CFo=r(IVr,"model.train()"),IVr.forEach(t),SEe.forEach(t),MFo=i(Nt),hre=n(Nt,"P",{});var DVr=s(hre);EFo=r(DVr,"Examples:"),DVr.forEach(t),yFo=i(Nt),m(q3.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),cBe=i(c),td=n(c,"H2",{class:!0});var uke=s(td);R1=n(uke,"A",{id:!0,class:!0,href:!0});var jVr=s(R1);pre=n(jVr,"SPAN",{});var NVr=s(pre);m(G3.$$.fragment,NVr),NVr.forEach(t),jVr.forEach(t),wFo=i(uke),_re=n(uke,"SPAN",{});var qVr=s(_re);AFo=r(qVr,"AutoModelForSequenceClassification"),qVr.forEach(t),uke.forEach(t),fBe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(O3.$$.fragment,Js),LFo=i(Js),ad=n(Js,"P",{});var YV=s(ad);BFo=r(YV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ure=n(YV,"CODE",{});var GVr=s(ure);xFo=r(GVr,"from_pretrained()"),GVr.forEach(t),kFo=r(YV,"class method or the "),bre=n(YV,"CODE",{});var OVr=s(bre);RFo=r(OVr,"from_config()"),OVr.forEach(t),SFo=r(YV,`class
method.`),YV.forEach(t),PFo=i(Js),X3=n(Js,"P",{});var bke=s(X3);$Fo=r(bke,"This class cannot be instantiated directly using "),vre=n(bke,"CODE",{});var XVr=s(vre);IFo=r(XVr,"__init__()"),XVr.forEach(t),DFo=r(bke," (throws an error)."),bke.forEach(t),jFo=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(V3.$$.fragment,Ys),NFo=i(Ys),Tre=n(Ys,"P",{});var VVr=s(Tre);qFo=r(VVr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VVr.forEach(t),GFo=i(Ys),nd=n(Ys,"P",{});var KV=s(nd);OFo=r(KV,`Note:
Loading a model from its configuration file does `),Fre=n(KV,"STRONG",{});var zVr=s(Fre);XFo=r(zVr,"not"),zVr.forEach(t),VFo=r(KV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(KV,"CODE",{});var WVr=s(Cre);zFo=r(WVr,"from_pretrained()"),WVr.forEach(t),WFo=r(KV,"to load the model weights."),KV.forEach(t),QFo=i(Ys),Mre=n(Ys,"P",{});var QVr=s(Mre);HFo=r(QVr,"Examples:"),QVr.forEach(t),UFo=i(Ys),m(z3.$$.fragment,Ys),Ys.forEach(t),JFo=i(Js),je=n(Js,"DIV",{class:!0});var qt=s(je);m(W3.$$.fragment,qt),YFo=i(qt),Ere=n(qt,"P",{});var HVr=s(Ere);KFo=r(HVr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HVr.forEach(t),ZFo=i(qt),Va=n(qt,"P",{});var $M=s(Va);e9o=r($M,"The model class to instantiate is selected based on the "),yre=n($M,"CODE",{});var UVr=s(yre);o9o=r(UVr,"model_type"),UVr.forEach(t),r9o=r($M,` property of the config object (either
passed as an argument or loaded from `),wre=n($M,"CODE",{});var JVr=s(wre);t9o=r(JVr,"pretrained_model_name_or_path"),JVr.forEach(t),a9o=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Are=n($M,"CODE",{});var YVr=s(Are);n9o=r(YVr,"pretrained_model_name_or_path"),YVr.forEach(t),s9o=r($M,":"),$M.forEach(t),l9o=i(qt),A=n(qt,"UL",{});var L=s(A);S1=n(L,"LI",{});var PEe=s(S1);Lre=n(PEe,"STRONG",{});var KVr=s(Lre);i9o=r(KVr,"albert"),KVr.forEach(t),d9o=r(PEe," \u2014 "),G$=n(PEe,"A",{href:!0});var ZVr=s(G$);c9o=r(ZVr,"AlbertForSequenceClassification"),ZVr.forEach(t),f9o=r(PEe," (ALBERT model)"),PEe.forEach(t),m9o=i(L),P1=n(L,"LI",{});var $Ee=s(P1);Bre=n($Ee,"STRONG",{});var ezr=s(Bre);g9o=r(ezr,"bart"),ezr.forEach(t),h9o=r($Ee," \u2014 "),O$=n($Ee,"A",{href:!0});var ozr=s(O$);p9o=r(ozr,"BartForSequenceClassification"),ozr.forEach(t),_9o=r($Ee," (BART model)"),$Ee.forEach(t),u9o=i(L),$1=n(L,"LI",{});var IEe=s($1);xre=n(IEe,"STRONG",{});var rzr=s(xre);b9o=r(rzr,"bert"),rzr.forEach(t),v9o=r(IEe," \u2014 "),X$=n(IEe,"A",{href:!0});var tzr=s(X$);T9o=r(tzr,"BertForSequenceClassification"),tzr.forEach(t),F9o=r(IEe," (BERT model)"),IEe.forEach(t),C9o=i(L),I1=n(L,"LI",{});var DEe=s(I1);kre=n(DEe,"STRONG",{});var azr=s(kre);M9o=r(azr,"big_bird"),azr.forEach(t),E9o=r(DEe," \u2014 "),V$=n(DEe,"A",{href:!0});var nzr=s(V$);y9o=r(nzr,"BigBirdForSequenceClassification"),nzr.forEach(t),w9o=r(DEe," (BigBird model)"),DEe.forEach(t),A9o=i(L),D1=n(L,"LI",{});var jEe=s(D1);Rre=n(jEe,"STRONG",{});var szr=s(Rre);L9o=r(szr,"bigbird_pegasus"),szr.forEach(t),B9o=r(jEe," \u2014 "),z$=n(jEe,"A",{href:!0});var lzr=s(z$);x9o=r(lzr,"BigBirdPegasusForSequenceClassification"),lzr.forEach(t),k9o=r(jEe," (BigBirdPegasus model)"),jEe.forEach(t),R9o=i(L),j1=n(L,"LI",{});var NEe=s(j1);Sre=n(NEe,"STRONG",{});var izr=s(Sre);S9o=r(izr,"camembert"),izr.forEach(t),P9o=r(NEe," \u2014 "),W$=n(NEe,"A",{href:!0});var dzr=s(W$);$9o=r(dzr,"CamembertForSequenceClassification"),dzr.forEach(t),I9o=r(NEe," (CamemBERT model)"),NEe.forEach(t),D9o=i(L),N1=n(L,"LI",{});var qEe=s(N1);Pre=n(qEe,"STRONG",{});var czr=s(Pre);j9o=r(czr,"canine"),czr.forEach(t),N9o=r(qEe," \u2014 "),Q$=n(qEe,"A",{href:!0});var fzr=s(Q$);q9o=r(fzr,"CanineForSequenceClassification"),fzr.forEach(t),G9o=r(qEe," (Canine model)"),qEe.forEach(t),O9o=i(L),q1=n(L,"LI",{});var GEe=s(q1);$re=n(GEe,"STRONG",{});var mzr=s($re);X9o=r(mzr,"convbert"),mzr.forEach(t),V9o=r(GEe," \u2014 "),H$=n(GEe,"A",{href:!0});var gzr=s(H$);z9o=r(gzr,"ConvBertForSequenceClassification"),gzr.forEach(t),W9o=r(GEe," (ConvBERT model)"),GEe.forEach(t),Q9o=i(L),G1=n(L,"LI",{});var OEe=s(G1);Ire=n(OEe,"STRONG",{});var hzr=s(Ire);H9o=r(hzr,"ctrl"),hzr.forEach(t),U9o=r(OEe," \u2014 "),U$=n(OEe,"A",{href:!0});var pzr=s(U$);J9o=r(pzr,"CTRLForSequenceClassification"),pzr.forEach(t),Y9o=r(OEe," (CTRL model)"),OEe.forEach(t),K9o=i(L),O1=n(L,"LI",{});var XEe=s(O1);Dre=n(XEe,"STRONG",{});var _zr=s(Dre);Z9o=r(_zr,"data2vec-text"),_zr.forEach(t),eCo=r(XEe," \u2014 "),J$=n(XEe,"A",{href:!0});var uzr=s(J$);oCo=r(uzr,"Data2VecTextForSequenceClassification"),uzr.forEach(t),rCo=r(XEe," (Data2VecText model)"),XEe.forEach(t),tCo=i(L),X1=n(L,"LI",{});var VEe=s(X1);jre=n(VEe,"STRONG",{});var bzr=s(jre);aCo=r(bzr,"deberta"),bzr.forEach(t),nCo=r(VEe," \u2014 "),Y$=n(VEe,"A",{href:!0});var vzr=s(Y$);sCo=r(vzr,"DebertaForSequenceClassification"),vzr.forEach(t),lCo=r(VEe," (DeBERTa model)"),VEe.forEach(t),iCo=i(L),V1=n(L,"LI",{});var zEe=s(V1);Nre=n(zEe,"STRONG",{});var Tzr=s(Nre);dCo=r(Tzr,"deberta-v2"),Tzr.forEach(t),cCo=r(zEe," \u2014 "),K$=n(zEe,"A",{href:!0});var Fzr=s(K$);fCo=r(Fzr,"DebertaV2ForSequenceClassification"),Fzr.forEach(t),mCo=r(zEe," (DeBERTa-v2 model)"),zEe.forEach(t),gCo=i(L),z1=n(L,"LI",{});var WEe=s(z1);qre=n(WEe,"STRONG",{});var Czr=s(qre);hCo=r(Czr,"distilbert"),Czr.forEach(t),pCo=r(WEe," \u2014 "),Z$=n(WEe,"A",{href:!0});var Mzr=s(Z$);_Co=r(Mzr,"DistilBertForSequenceClassification"),Mzr.forEach(t),uCo=r(WEe," (DistilBERT model)"),WEe.forEach(t),bCo=i(L),W1=n(L,"LI",{});var QEe=s(W1);Gre=n(QEe,"STRONG",{});var Ezr=s(Gre);vCo=r(Ezr,"electra"),Ezr.forEach(t),TCo=r(QEe," \u2014 "),eI=n(QEe,"A",{href:!0});var yzr=s(eI);FCo=r(yzr,"ElectraForSequenceClassification"),yzr.forEach(t),CCo=r(QEe," (ELECTRA model)"),QEe.forEach(t),MCo=i(L),Q1=n(L,"LI",{});var HEe=s(Q1);Ore=n(HEe,"STRONG",{});var wzr=s(Ore);ECo=r(wzr,"flaubert"),wzr.forEach(t),yCo=r(HEe," \u2014 "),oI=n(HEe,"A",{href:!0});var Azr=s(oI);wCo=r(Azr,"FlaubertForSequenceClassification"),Azr.forEach(t),ACo=r(HEe," (FlauBERT model)"),HEe.forEach(t),LCo=i(L),H1=n(L,"LI",{});var UEe=s(H1);Xre=n(UEe,"STRONG",{});var Lzr=s(Xre);BCo=r(Lzr,"fnet"),Lzr.forEach(t),xCo=r(UEe," \u2014 "),rI=n(UEe,"A",{href:!0});var Bzr=s(rI);kCo=r(Bzr,"FNetForSequenceClassification"),Bzr.forEach(t),RCo=r(UEe," (FNet model)"),UEe.forEach(t),SCo=i(L),U1=n(L,"LI",{});var JEe=s(U1);Vre=n(JEe,"STRONG",{});var xzr=s(Vre);PCo=r(xzr,"funnel"),xzr.forEach(t),$Co=r(JEe," \u2014 "),tI=n(JEe,"A",{href:!0});var kzr=s(tI);ICo=r(kzr,"FunnelForSequenceClassification"),kzr.forEach(t),DCo=r(JEe," (Funnel Transformer model)"),JEe.forEach(t),jCo=i(L),J1=n(L,"LI",{});var YEe=s(J1);zre=n(YEe,"STRONG",{});var Rzr=s(zre);NCo=r(Rzr,"gpt2"),Rzr.forEach(t),qCo=r(YEe," \u2014 "),aI=n(YEe,"A",{href:!0});var Szr=s(aI);GCo=r(Szr,"GPT2ForSequenceClassification"),Szr.forEach(t),OCo=r(YEe," (OpenAI GPT-2 model)"),YEe.forEach(t),XCo=i(L),Y1=n(L,"LI",{});var KEe=s(Y1);Wre=n(KEe,"STRONG",{});var Pzr=s(Wre);VCo=r(Pzr,"gpt_neo"),Pzr.forEach(t),zCo=r(KEe," \u2014 "),nI=n(KEe,"A",{href:!0});var $zr=s(nI);WCo=r($zr,"GPTNeoForSequenceClassification"),$zr.forEach(t),QCo=r(KEe," (GPT Neo model)"),KEe.forEach(t),HCo=i(L),K1=n(L,"LI",{});var ZEe=s(K1);Qre=n(ZEe,"STRONG",{});var Izr=s(Qre);UCo=r(Izr,"gptj"),Izr.forEach(t),JCo=r(ZEe," \u2014 "),sI=n(ZEe,"A",{href:!0});var Dzr=s(sI);YCo=r(Dzr,"GPTJForSequenceClassification"),Dzr.forEach(t),KCo=r(ZEe," (GPT-J model)"),ZEe.forEach(t),ZCo=i(L),Z1=n(L,"LI",{});var e3e=s(Z1);Hre=n(e3e,"STRONG",{});var jzr=s(Hre);e4o=r(jzr,"ibert"),jzr.forEach(t),o4o=r(e3e," \u2014 "),lI=n(e3e,"A",{href:!0});var Nzr=s(lI);r4o=r(Nzr,"IBertForSequenceClassification"),Nzr.forEach(t),t4o=r(e3e," (I-BERT model)"),e3e.forEach(t),a4o=i(L),e2=n(L,"LI",{});var o3e=s(e2);Ure=n(o3e,"STRONG",{});var qzr=s(Ure);n4o=r(qzr,"layoutlm"),qzr.forEach(t),s4o=r(o3e," \u2014 "),iI=n(o3e,"A",{href:!0});var Gzr=s(iI);l4o=r(Gzr,"LayoutLMForSequenceClassification"),Gzr.forEach(t),i4o=r(o3e," (LayoutLM model)"),o3e.forEach(t),d4o=i(L),o2=n(L,"LI",{});var r3e=s(o2);Jre=n(r3e,"STRONG",{});var Ozr=s(Jre);c4o=r(Ozr,"layoutlmv2"),Ozr.forEach(t),f4o=r(r3e," \u2014 "),dI=n(r3e,"A",{href:!0});var Xzr=s(dI);m4o=r(Xzr,"LayoutLMv2ForSequenceClassification"),Xzr.forEach(t),g4o=r(r3e," (LayoutLMv2 model)"),r3e.forEach(t),h4o=i(L),r2=n(L,"LI",{});var t3e=s(r2);Yre=n(t3e,"STRONG",{});var Vzr=s(Yre);p4o=r(Vzr,"led"),Vzr.forEach(t),_4o=r(t3e," \u2014 "),cI=n(t3e,"A",{href:!0});var zzr=s(cI);u4o=r(zzr,"LEDForSequenceClassification"),zzr.forEach(t),b4o=r(t3e," (LED model)"),t3e.forEach(t),v4o=i(L),t2=n(L,"LI",{});var a3e=s(t2);Kre=n(a3e,"STRONG",{});var Wzr=s(Kre);T4o=r(Wzr,"longformer"),Wzr.forEach(t),F4o=r(a3e," \u2014 "),fI=n(a3e,"A",{href:!0});var Qzr=s(fI);C4o=r(Qzr,"LongformerForSequenceClassification"),Qzr.forEach(t),M4o=r(a3e," (Longformer model)"),a3e.forEach(t),E4o=i(L),a2=n(L,"LI",{});var n3e=s(a2);Zre=n(n3e,"STRONG",{});var Hzr=s(Zre);y4o=r(Hzr,"mbart"),Hzr.forEach(t),w4o=r(n3e," \u2014 "),mI=n(n3e,"A",{href:!0});var Uzr=s(mI);A4o=r(Uzr,"MBartForSequenceClassification"),Uzr.forEach(t),L4o=r(n3e," (mBART model)"),n3e.forEach(t),B4o=i(L),n2=n(L,"LI",{});var s3e=s(n2);ete=n(s3e,"STRONG",{});var Jzr=s(ete);x4o=r(Jzr,"megatron-bert"),Jzr.forEach(t),k4o=r(s3e," \u2014 "),gI=n(s3e,"A",{href:!0});var Yzr=s(gI);R4o=r(Yzr,"MegatronBertForSequenceClassification"),Yzr.forEach(t),S4o=r(s3e," (MegatronBert model)"),s3e.forEach(t),P4o=i(L),s2=n(L,"LI",{});var l3e=s(s2);ote=n(l3e,"STRONG",{});var Kzr=s(ote);$4o=r(Kzr,"mobilebert"),Kzr.forEach(t),I4o=r(l3e," \u2014 "),hI=n(l3e,"A",{href:!0});var Zzr=s(hI);D4o=r(Zzr,"MobileBertForSequenceClassification"),Zzr.forEach(t),j4o=r(l3e," (MobileBERT model)"),l3e.forEach(t),N4o=i(L),l2=n(L,"LI",{});var i3e=s(l2);rte=n(i3e,"STRONG",{});var eWr=s(rte);q4o=r(eWr,"mpnet"),eWr.forEach(t),G4o=r(i3e," \u2014 "),pI=n(i3e,"A",{href:!0});var oWr=s(pI);O4o=r(oWr,"MPNetForSequenceClassification"),oWr.forEach(t),X4o=r(i3e," (MPNet model)"),i3e.forEach(t),V4o=i(L),i2=n(L,"LI",{});var d3e=s(i2);tte=n(d3e,"STRONG",{});var rWr=s(tte);z4o=r(rWr,"nystromformer"),rWr.forEach(t),W4o=r(d3e," \u2014 "),_I=n(d3e,"A",{href:!0});var tWr=s(_I);Q4o=r(tWr,"NystromformerForSequenceClassification"),tWr.forEach(t),H4o=r(d3e," (Nystromformer model)"),d3e.forEach(t),U4o=i(L),d2=n(L,"LI",{});var c3e=s(d2);ate=n(c3e,"STRONG",{});var aWr=s(ate);J4o=r(aWr,"openai-gpt"),aWr.forEach(t),Y4o=r(c3e," \u2014 "),uI=n(c3e,"A",{href:!0});var nWr=s(uI);K4o=r(nWr,"OpenAIGPTForSequenceClassification"),nWr.forEach(t),Z4o=r(c3e," (OpenAI GPT model)"),c3e.forEach(t),eMo=i(L),c2=n(L,"LI",{});var f3e=s(c2);nte=n(f3e,"STRONG",{});var sWr=s(nte);oMo=r(sWr,"perceiver"),sWr.forEach(t),rMo=r(f3e," \u2014 "),bI=n(f3e,"A",{href:!0});var lWr=s(bI);tMo=r(lWr,"PerceiverForSequenceClassification"),lWr.forEach(t),aMo=r(f3e," (Perceiver model)"),f3e.forEach(t),nMo=i(L),f2=n(L,"LI",{});var m3e=s(f2);ste=n(m3e,"STRONG",{});var iWr=s(ste);sMo=r(iWr,"plbart"),iWr.forEach(t),lMo=r(m3e," \u2014 "),vI=n(m3e,"A",{href:!0});var dWr=s(vI);iMo=r(dWr,"PLBartForSequenceClassification"),dWr.forEach(t),dMo=r(m3e," (PLBart model)"),m3e.forEach(t),cMo=i(L),m2=n(L,"LI",{});var g3e=s(m2);lte=n(g3e,"STRONG",{});var cWr=s(lte);fMo=r(cWr,"qdqbert"),cWr.forEach(t),mMo=r(g3e," \u2014 "),TI=n(g3e,"A",{href:!0});var fWr=s(TI);gMo=r(fWr,"QDQBertForSequenceClassification"),fWr.forEach(t),hMo=r(g3e," (QDQBert model)"),g3e.forEach(t),pMo=i(L),g2=n(L,"LI",{});var h3e=s(g2);ite=n(h3e,"STRONG",{});var mWr=s(ite);_Mo=r(mWr,"reformer"),mWr.forEach(t),uMo=r(h3e," \u2014 "),FI=n(h3e,"A",{href:!0});var gWr=s(FI);bMo=r(gWr,"ReformerForSequenceClassification"),gWr.forEach(t),vMo=r(h3e," (Reformer model)"),h3e.forEach(t),TMo=i(L),h2=n(L,"LI",{});var p3e=s(h2);dte=n(p3e,"STRONG",{});var hWr=s(dte);FMo=r(hWr,"rembert"),hWr.forEach(t),CMo=r(p3e," \u2014 "),CI=n(p3e,"A",{href:!0});var pWr=s(CI);MMo=r(pWr,"RemBertForSequenceClassification"),pWr.forEach(t),EMo=r(p3e," (RemBERT model)"),p3e.forEach(t),yMo=i(L),p2=n(L,"LI",{});var _3e=s(p2);cte=n(_3e,"STRONG",{});var _Wr=s(cte);wMo=r(_Wr,"roberta"),_Wr.forEach(t),AMo=r(_3e," \u2014 "),MI=n(_3e,"A",{href:!0});var uWr=s(MI);LMo=r(uWr,"RobertaForSequenceClassification"),uWr.forEach(t),BMo=r(_3e," (RoBERTa model)"),_3e.forEach(t),xMo=i(L),_2=n(L,"LI",{});var u3e=s(_2);fte=n(u3e,"STRONG",{});var bWr=s(fte);kMo=r(bWr,"roformer"),bWr.forEach(t),RMo=r(u3e," \u2014 "),EI=n(u3e,"A",{href:!0});var vWr=s(EI);SMo=r(vWr,"RoFormerForSequenceClassification"),vWr.forEach(t),PMo=r(u3e," (RoFormer model)"),u3e.forEach(t),$Mo=i(L),u2=n(L,"LI",{});var b3e=s(u2);mte=n(b3e,"STRONG",{});var TWr=s(mte);IMo=r(TWr,"squeezebert"),TWr.forEach(t),DMo=r(b3e," \u2014 "),yI=n(b3e,"A",{href:!0});var FWr=s(yI);jMo=r(FWr,"SqueezeBertForSequenceClassification"),FWr.forEach(t),NMo=r(b3e," (SqueezeBERT model)"),b3e.forEach(t),qMo=i(L),b2=n(L,"LI",{});var v3e=s(b2);gte=n(v3e,"STRONG",{});var CWr=s(gte);GMo=r(CWr,"tapas"),CWr.forEach(t),OMo=r(v3e," \u2014 "),wI=n(v3e,"A",{href:!0});var MWr=s(wI);XMo=r(MWr,"TapasForSequenceClassification"),MWr.forEach(t),VMo=r(v3e," (TAPAS model)"),v3e.forEach(t),zMo=i(L),v2=n(L,"LI",{});var T3e=s(v2);hte=n(T3e,"STRONG",{});var EWr=s(hte);WMo=r(EWr,"transfo-xl"),EWr.forEach(t),QMo=r(T3e," \u2014 "),AI=n(T3e,"A",{href:!0});var yWr=s(AI);HMo=r(yWr,"TransfoXLForSequenceClassification"),yWr.forEach(t),UMo=r(T3e," (Transformer-XL model)"),T3e.forEach(t),JMo=i(L),T2=n(L,"LI",{});var F3e=s(T2);pte=n(F3e,"STRONG",{});var wWr=s(pte);YMo=r(wWr,"xlm"),wWr.forEach(t),KMo=r(F3e," \u2014 "),LI=n(F3e,"A",{href:!0});var AWr=s(LI);ZMo=r(AWr,"XLMForSequenceClassification"),AWr.forEach(t),eEo=r(F3e," (XLM model)"),F3e.forEach(t),oEo=i(L),F2=n(L,"LI",{});var C3e=s(F2);_te=n(C3e,"STRONG",{});var LWr=s(_te);rEo=r(LWr,"xlm-roberta"),LWr.forEach(t),tEo=r(C3e," \u2014 "),BI=n(C3e,"A",{href:!0});var BWr=s(BI);aEo=r(BWr,"XLMRobertaForSequenceClassification"),BWr.forEach(t),nEo=r(C3e," (XLM-RoBERTa model)"),C3e.forEach(t),sEo=i(L),C2=n(L,"LI",{});var M3e=s(C2);ute=n(M3e,"STRONG",{});var xWr=s(ute);lEo=r(xWr,"xlm-roberta-xl"),xWr.forEach(t),iEo=r(M3e," \u2014 "),xI=n(M3e,"A",{href:!0});var kWr=s(xI);dEo=r(kWr,"XLMRobertaXLForSequenceClassification"),kWr.forEach(t),cEo=r(M3e," (XLM-RoBERTa-XL model)"),M3e.forEach(t),fEo=i(L),M2=n(L,"LI",{});var E3e=s(M2);bte=n(E3e,"STRONG",{});var RWr=s(bte);mEo=r(RWr,"xlnet"),RWr.forEach(t),gEo=r(E3e," \u2014 "),kI=n(E3e,"A",{href:!0});var SWr=s(kI);hEo=r(SWr,"XLNetForSequenceClassification"),SWr.forEach(t),pEo=r(E3e," (XLNet model)"),E3e.forEach(t),_Eo=i(L),E2=n(L,"LI",{});var y3e=s(E2);vte=n(y3e,"STRONG",{});var PWr=s(vte);uEo=r(PWr,"yoso"),PWr.forEach(t),bEo=r(y3e," \u2014 "),RI=n(y3e,"A",{href:!0});var $Wr=s(RI);vEo=r($Wr,"YosoForSequenceClassification"),$Wr.forEach(t),TEo=r(y3e," (YOSO model)"),y3e.forEach(t),L.forEach(t),FEo=i(qt),y2=n(qt,"P",{});var w3e=s(y2);CEo=r(w3e,"The model is set in evaluation mode by default using "),Tte=n(w3e,"CODE",{});var IWr=s(Tte);MEo=r(IWr,"model.eval()"),IWr.forEach(t),EEo=r(w3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fte=n(w3e,"CODE",{});var DWr=s(Fte);yEo=r(DWr,"model.train()"),DWr.forEach(t),w3e.forEach(t),wEo=i(qt),Cte=n(qt,"P",{});var jWr=s(Cte);AEo=r(jWr,"Examples:"),jWr.forEach(t),LEo=i(qt),m(Q3.$$.fragment,qt),qt.forEach(t),Js.forEach(t),mBe=i(c),sd=n(c,"H2",{class:!0});var vke=s(sd);w2=n(vke,"A",{id:!0,class:!0,href:!0});var NWr=s(w2);Mte=n(NWr,"SPAN",{});var qWr=s(Mte);m(H3.$$.fragment,qWr),qWr.forEach(t),NWr.forEach(t),BEo=i(vke),Ete=n(vke,"SPAN",{});var GWr=s(Ete);xEo=r(GWr,"AutoModelForMultipleChoice"),GWr.forEach(t),vke.forEach(t),gBe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(U3.$$.fragment,Ks),kEo=i(Ks),ld=n(Ks,"P",{});var ZV=s(ld);REo=r(ZV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yte=n(ZV,"CODE",{});var OWr=s(yte);SEo=r(OWr,"from_pretrained()"),OWr.forEach(t),PEo=r(ZV,"class method or the "),wte=n(ZV,"CODE",{});var XWr=s(wte);$Eo=r(XWr,"from_config()"),XWr.forEach(t),IEo=r(ZV,`class
method.`),ZV.forEach(t),DEo=i(Ks),J3=n(Ks,"P",{});var Tke=s(J3);jEo=r(Tke,"This class cannot be instantiated directly using "),Ate=n(Tke,"CODE",{});var VWr=s(Ate);NEo=r(VWr,"__init__()"),VWr.forEach(t),qEo=r(Tke," (throws an error)."),Tke.forEach(t),GEo=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(Y3.$$.fragment,Zs),OEo=i(Zs),Lte=n(Zs,"P",{});var zWr=s(Lte);XEo=r(zWr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zWr.forEach(t),VEo=i(Zs),id=n(Zs,"P",{});var ez=s(id);zEo=r(ez,`Note:
Loading a model from its configuration file does `),Bte=n(ez,"STRONG",{});var WWr=s(Bte);WEo=r(WWr,"not"),WWr.forEach(t),QEo=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),xte=n(ez,"CODE",{});var QWr=s(xte);HEo=r(QWr,"from_pretrained()"),QWr.forEach(t),UEo=r(ez,"to load the model weights."),ez.forEach(t),JEo=i(Zs),kte=n(Zs,"P",{});var HWr=s(kte);YEo=r(HWr,"Examples:"),HWr.forEach(t),KEo=i(Zs),m(K3.$$.fragment,Zs),Zs.forEach(t),ZEo=i(Ks),Ne=n(Ks,"DIV",{class:!0});var Gt=s(Ne);m(Z3.$$.fragment,Gt),e3o=i(Gt),Rte=n(Gt,"P",{});var UWr=s(Rte);o3o=r(UWr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UWr.forEach(t),r3o=i(Gt),za=n(Gt,"P",{});var IM=s(za);t3o=r(IM,"The model class to instantiate is selected based on the "),Ste=n(IM,"CODE",{});var JWr=s(Ste);a3o=r(JWr,"model_type"),JWr.forEach(t),n3o=r(IM,` property of the config object (either
passed as an argument or loaded from `),Pte=n(IM,"CODE",{});var YWr=s(Pte);s3o=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),l3o=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$te=n(IM,"CODE",{});var KWr=s($te);i3o=r(KWr,"pretrained_model_name_or_path"),KWr.forEach(t),d3o=r(IM,":"),IM.forEach(t),c3o=i(Gt),G=n(Gt,"UL",{});var O=s(G);A2=n(O,"LI",{});var A3e=s(A2);Ite=n(A3e,"STRONG",{});var ZWr=s(Ite);f3o=r(ZWr,"albert"),ZWr.forEach(t),m3o=r(A3e," \u2014 "),SI=n(A3e,"A",{href:!0});var eQr=s(SI);g3o=r(eQr,"AlbertForMultipleChoice"),eQr.forEach(t),h3o=r(A3e," (ALBERT model)"),A3e.forEach(t),p3o=i(O),L2=n(O,"LI",{});var L3e=s(L2);Dte=n(L3e,"STRONG",{});var oQr=s(Dte);_3o=r(oQr,"bert"),oQr.forEach(t),u3o=r(L3e," \u2014 "),PI=n(L3e,"A",{href:!0});var rQr=s(PI);b3o=r(rQr,"BertForMultipleChoice"),rQr.forEach(t),v3o=r(L3e," (BERT model)"),L3e.forEach(t),T3o=i(O),B2=n(O,"LI",{});var B3e=s(B2);jte=n(B3e,"STRONG",{});var tQr=s(jte);F3o=r(tQr,"big_bird"),tQr.forEach(t),C3o=r(B3e," \u2014 "),$I=n(B3e,"A",{href:!0});var aQr=s($I);M3o=r(aQr,"BigBirdForMultipleChoice"),aQr.forEach(t),E3o=r(B3e," (BigBird model)"),B3e.forEach(t),y3o=i(O),x2=n(O,"LI",{});var x3e=s(x2);Nte=n(x3e,"STRONG",{});var nQr=s(Nte);w3o=r(nQr,"camembert"),nQr.forEach(t),A3o=r(x3e," \u2014 "),II=n(x3e,"A",{href:!0});var sQr=s(II);L3o=r(sQr,"CamembertForMultipleChoice"),sQr.forEach(t),B3o=r(x3e," (CamemBERT model)"),x3e.forEach(t),x3o=i(O),k2=n(O,"LI",{});var k3e=s(k2);qte=n(k3e,"STRONG",{});var lQr=s(qte);k3o=r(lQr,"canine"),lQr.forEach(t),R3o=r(k3e," \u2014 "),DI=n(k3e,"A",{href:!0});var iQr=s(DI);S3o=r(iQr,"CanineForMultipleChoice"),iQr.forEach(t),P3o=r(k3e," (Canine model)"),k3e.forEach(t),$3o=i(O),R2=n(O,"LI",{});var R3e=s(R2);Gte=n(R3e,"STRONG",{});var dQr=s(Gte);I3o=r(dQr,"convbert"),dQr.forEach(t),D3o=r(R3e," \u2014 "),jI=n(R3e,"A",{href:!0});var cQr=s(jI);j3o=r(cQr,"ConvBertForMultipleChoice"),cQr.forEach(t),N3o=r(R3e," (ConvBERT model)"),R3e.forEach(t),q3o=i(O),S2=n(O,"LI",{});var S3e=s(S2);Ote=n(S3e,"STRONG",{});var fQr=s(Ote);G3o=r(fQr,"data2vec-text"),fQr.forEach(t),O3o=r(S3e," \u2014 "),NI=n(S3e,"A",{href:!0});var mQr=s(NI);X3o=r(mQr,"Data2VecTextForMultipleChoice"),mQr.forEach(t),V3o=r(S3e," (Data2VecText model)"),S3e.forEach(t),z3o=i(O),P2=n(O,"LI",{});var P3e=s(P2);Xte=n(P3e,"STRONG",{});var gQr=s(Xte);W3o=r(gQr,"distilbert"),gQr.forEach(t),Q3o=r(P3e," \u2014 "),qI=n(P3e,"A",{href:!0});var hQr=s(qI);H3o=r(hQr,"DistilBertForMultipleChoice"),hQr.forEach(t),U3o=r(P3e," (DistilBERT model)"),P3e.forEach(t),J3o=i(O),$2=n(O,"LI",{});var $3e=s($2);Vte=n($3e,"STRONG",{});var pQr=s(Vte);Y3o=r(pQr,"electra"),pQr.forEach(t),K3o=r($3e," \u2014 "),GI=n($3e,"A",{href:!0});var _Qr=s(GI);Z3o=r(_Qr,"ElectraForMultipleChoice"),_Qr.forEach(t),eyo=r($3e," (ELECTRA model)"),$3e.forEach(t),oyo=i(O),I2=n(O,"LI",{});var I3e=s(I2);zte=n(I3e,"STRONG",{});var uQr=s(zte);ryo=r(uQr,"flaubert"),uQr.forEach(t),tyo=r(I3e," \u2014 "),OI=n(I3e,"A",{href:!0});var bQr=s(OI);ayo=r(bQr,"FlaubertForMultipleChoice"),bQr.forEach(t),nyo=r(I3e," (FlauBERT model)"),I3e.forEach(t),syo=i(O),D2=n(O,"LI",{});var D3e=s(D2);Wte=n(D3e,"STRONG",{});var vQr=s(Wte);lyo=r(vQr,"fnet"),vQr.forEach(t),iyo=r(D3e," \u2014 "),XI=n(D3e,"A",{href:!0});var TQr=s(XI);dyo=r(TQr,"FNetForMultipleChoice"),TQr.forEach(t),cyo=r(D3e," (FNet model)"),D3e.forEach(t),fyo=i(O),j2=n(O,"LI",{});var j3e=s(j2);Qte=n(j3e,"STRONG",{});var FQr=s(Qte);myo=r(FQr,"funnel"),FQr.forEach(t),gyo=r(j3e," \u2014 "),VI=n(j3e,"A",{href:!0});var CQr=s(VI);hyo=r(CQr,"FunnelForMultipleChoice"),CQr.forEach(t),pyo=r(j3e," (Funnel Transformer model)"),j3e.forEach(t),_yo=i(O),N2=n(O,"LI",{});var N3e=s(N2);Hte=n(N3e,"STRONG",{});var MQr=s(Hte);uyo=r(MQr,"ibert"),MQr.forEach(t),byo=r(N3e," \u2014 "),zI=n(N3e,"A",{href:!0});var EQr=s(zI);vyo=r(EQr,"IBertForMultipleChoice"),EQr.forEach(t),Tyo=r(N3e," (I-BERT model)"),N3e.forEach(t),Fyo=i(O),q2=n(O,"LI",{});var q3e=s(q2);Ute=n(q3e,"STRONG",{});var yQr=s(Ute);Cyo=r(yQr,"longformer"),yQr.forEach(t),Myo=r(q3e," \u2014 "),WI=n(q3e,"A",{href:!0});var wQr=s(WI);Eyo=r(wQr,"LongformerForMultipleChoice"),wQr.forEach(t),yyo=r(q3e," (Longformer model)"),q3e.forEach(t),wyo=i(O),G2=n(O,"LI",{});var G3e=s(G2);Jte=n(G3e,"STRONG",{});var AQr=s(Jte);Ayo=r(AQr,"megatron-bert"),AQr.forEach(t),Lyo=r(G3e," \u2014 "),QI=n(G3e,"A",{href:!0});var LQr=s(QI);Byo=r(LQr,"MegatronBertForMultipleChoice"),LQr.forEach(t),xyo=r(G3e," (MegatronBert model)"),G3e.forEach(t),kyo=i(O),O2=n(O,"LI",{});var O3e=s(O2);Yte=n(O3e,"STRONG",{});var BQr=s(Yte);Ryo=r(BQr,"mobilebert"),BQr.forEach(t),Syo=r(O3e," \u2014 "),HI=n(O3e,"A",{href:!0});var xQr=s(HI);Pyo=r(xQr,"MobileBertForMultipleChoice"),xQr.forEach(t),$yo=r(O3e," (MobileBERT model)"),O3e.forEach(t),Iyo=i(O),X2=n(O,"LI",{});var X3e=s(X2);Kte=n(X3e,"STRONG",{});var kQr=s(Kte);Dyo=r(kQr,"mpnet"),kQr.forEach(t),jyo=r(X3e," \u2014 "),UI=n(X3e,"A",{href:!0});var RQr=s(UI);Nyo=r(RQr,"MPNetForMultipleChoice"),RQr.forEach(t),qyo=r(X3e," (MPNet model)"),X3e.forEach(t),Gyo=i(O),V2=n(O,"LI",{});var V3e=s(V2);Zte=n(V3e,"STRONG",{});var SQr=s(Zte);Oyo=r(SQr,"nystromformer"),SQr.forEach(t),Xyo=r(V3e," \u2014 "),JI=n(V3e,"A",{href:!0});var PQr=s(JI);Vyo=r(PQr,"NystromformerForMultipleChoice"),PQr.forEach(t),zyo=r(V3e," (Nystromformer model)"),V3e.forEach(t),Wyo=i(O),z2=n(O,"LI",{});var z3e=s(z2);eae=n(z3e,"STRONG",{});var $Qr=s(eae);Qyo=r($Qr,"qdqbert"),$Qr.forEach(t),Hyo=r(z3e," \u2014 "),YI=n(z3e,"A",{href:!0});var IQr=s(YI);Uyo=r(IQr,"QDQBertForMultipleChoice"),IQr.forEach(t),Jyo=r(z3e," (QDQBert model)"),z3e.forEach(t),Yyo=i(O),W2=n(O,"LI",{});var W3e=s(W2);oae=n(W3e,"STRONG",{});var DQr=s(oae);Kyo=r(DQr,"rembert"),DQr.forEach(t),Zyo=r(W3e," \u2014 "),KI=n(W3e,"A",{href:!0});var jQr=s(KI);ewo=r(jQr,"RemBertForMultipleChoice"),jQr.forEach(t),owo=r(W3e," (RemBERT model)"),W3e.forEach(t),rwo=i(O),Q2=n(O,"LI",{});var Q3e=s(Q2);rae=n(Q3e,"STRONG",{});var NQr=s(rae);two=r(NQr,"roberta"),NQr.forEach(t),awo=r(Q3e," \u2014 "),ZI=n(Q3e,"A",{href:!0});var qQr=s(ZI);nwo=r(qQr,"RobertaForMultipleChoice"),qQr.forEach(t),swo=r(Q3e," (RoBERTa model)"),Q3e.forEach(t),lwo=i(O),H2=n(O,"LI",{});var H3e=s(H2);tae=n(H3e,"STRONG",{});var GQr=s(tae);iwo=r(GQr,"roformer"),GQr.forEach(t),dwo=r(H3e," \u2014 "),eD=n(H3e,"A",{href:!0});var OQr=s(eD);cwo=r(OQr,"RoFormerForMultipleChoice"),OQr.forEach(t),fwo=r(H3e," (RoFormer model)"),H3e.forEach(t),mwo=i(O),U2=n(O,"LI",{});var U3e=s(U2);aae=n(U3e,"STRONG",{});var XQr=s(aae);gwo=r(XQr,"squeezebert"),XQr.forEach(t),hwo=r(U3e," \u2014 "),oD=n(U3e,"A",{href:!0});var VQr=s(oD);pwo=r(VQr,"SqueezeBertForMultipleChoice"),VQr.forEach(t),_wo=r(U3e," (SqueezeBERT model)"),U3e.forEach(t),uwo=i(O),J2=n(O,"LI",{});var J3e=s(J2);nae=n(J3e,"STRONG",{});var zQr=s(nae);bwo=r(zQr,"xlm"),zQr.forEach(t),vwo=r(J3e," \u2014 "),rD=n(J3e,"A",{href:!0});var WQr=s(rD);Two=r(WQr,"XLMForMultipleChoice"),WQr.forEach(t),Fwo=r(J3e," (XLM model)"),J3e.forEach(t),Cwo=i(O),Y2=n(O,"LI",{});var Y3e=s(Y2);sae=n(Y3e,"STRONG",{});var QQr=s(sae);Mwo=r(QQr,"xlm-roberta"),QQr.forEach(t),Ewo=r(Y3e," \u2014 "),tD=n(Y3e,"A",{href:!0});var HQr=s(tD);ywo=r(HQr,"XLMRobertaForMultipleChoice"),HQr.forEach(t),wwo=r(Y3e," (XLM-RoBERTa model)"),Y3e.forEach(t),Awo=i(O),K2=n(O,"LI",{});var K3e=s(K2);lae=n(K3e,"STRONG",{});var UQr=s(lae);Lwo=r(UQr,"xlm-roberta-xl"),UQr.forEach(t),Bwo=r(K3e," \u2014 "),aD=n(K3e,"A",{href:!0});var JQr=s(aD);xwo=r(JQr,"XLMRobertaXLForMultipleChoice"),JQr.forEach(t),kwo=r(K3e," (XLM-RoBERTa-XL model)"),K3e.forEach(t),Rwo=i(O),Z2=n(O,"LI",{});var Z3e=s(Z2);iae=n(Z3e,"STRONG",{});var YQr=s(iae);Swo=r(YQr,"xlnet"),YQr.forEach(t),Pwo=r(Z3e," \u2014 "),nD=n(Z3e,"A",{href:!0});var KQr=s(nD);$wo=r(KQr,"XLNetForMultipleChoice"),KQr.forEach(t),Iwo=r(Z3e," (XLNet model)"),Z3e.forEach(t),Dwo=i(O),eb=n(O,"LI",{});var eye=s(eb);dae=n(eye,"STRONG",{});var ZQr=s(dae);jwo=r(ZQr,"yoso"),ZQr.forEach(t),Nwo=r(eye," \u2014 "),sD=n(eye,"A",{href:!0});var eHr=s(sD);qwo=r(eHr,"YosoForMultipleChoice"),eHr.forEach(t),Gwo=r(eye," (YOSO model)"),eye.forEach(t),O.forEach(t),Owo=i(Gt),ob=n(Gt,"P",{});var oye=s(ob);Xwo=r(oye,"The model is set in evaluation mode by default using "),cae=n(oye,"CODE",{});var oHr=s(cae);Vwo=r(oHr,"model.eval()"),oHr.forEach(t),zwo=r(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fae=n(oye,"CODE",{});var rHr=s(fae);Wwo=r(rHr,"model.train()"),rHr.forEach(t),oye.forEach(t),Qwo=i(Gt),mae=n(Gt,"P",{});var tHr=s(mae);Hwo=r(tHr,"Examples:"),tHr.forEach(t),Uwo=i(Gt),m(ey.$$.fragment,Gt),Gt.forEach(t),Ks.forEach(t),hBe=i(c),dd=n(c,"H2",{class:!0});var Fke=s(dd);rb=n(Fke,"A",{id:!0,class:!0,href:!0});var aHr=s(rb);gae=n(aHr,"SPAN",{});var nHr=s(gae);m(oy.$$.fragment,nHr),nHr.forEach(t),aHr.forEach(t),Jwo=i(Fke),hae=n(Fke,"SPAN",{});var sHr=s(hae);Ywo=r(sHr,"AutoModelForNextSentencePrediction"),sHr.forEach(t),Fke.forEach(t),pBe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(ry.$$.fragment,el),Kwo=i(el),cd=n(el,"P",{});var oz=s(cd);Zwo=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pae=n(oz,"CODE",{});var lHr=s(pae);e6o=r(lHr,"from_pretrained()"),lHr.forEach(t),o6o=r(oz,"class method or the "),_ae=n(oz,"CODE",{});var iHr=s(_ae);r6o=r(iHr,"from_config()"),iHr.forEach(t),t6o=r(oz,`class
method.`),oz.forEach(t),a6o=i(el),ty=n(el,"P",{});var Cke=s(ty);n6o=r(Cke,"This class cannot be instantiated directly using "),uae=n(Cke,"CODE",{});var dHr=s(uae);s6o=r(dHr,"__init__()"),dHr.forEach(t),l6o=r(Cke," (throws an error)."),Cke.forEach(t),i6o=i(el),Qr=n(el,"DIV",{class:!0});var ol=s(Qr);m(ay.$$.fragment,ol),d6o=i(ol),bae=n(ol,"P",{});var cHr=s(bae);c6o=r(cHr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cHr.forEach(t),f6o=i(ol),fd=n(ol,"P",{});var rz=s(fd);m6o=r(rz,`Note:
Loading a model from its configuration file does `),vae=n(rz,"STRONG",{});var fHr=s(vae);g6o=r(fHr,"not"),fHr.forEach(t),h6o=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tae=n(rz,"CODE",{});var mHr=s(Tae);p6o=r(mHr,"from_pretrained()"),mHr.forEach(t),_6o=r(rz,"to load the model weights."),rz.forEach(t),u6o=i(ol),Fae=n(ol,"P",{});var gHr=s(Fae);b6o=r(gHr,"Examples:"),gHr.forEach(t),v6o=i(ol),m(ny.$$.fragment,ol),ol.forEach(t),T6o=i(el),qe=n(el,"DIV",{class:!0});var Ot=s(qe);m(sy.$$.fragment,Ot),F6o=i(Ot),Cae=n(Ot,"P",{});var hHr=s(Cae);C6o=r(hHr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hHr.forEach(t),M6o=i(Ot),Wa=n(Ot,"P",{});var DM=s(Wa);E6o=r(DM,"The model class to instantiate is selected based on the "),Mae=n(DM,"CODE",{});var pHr=s(Mae);y6o=r(pHr,"model_type"),pHr.forEach(t),w6o=r(DM,` property of the config object (either
passed as an argument or loaded from `),Eae=n(DM,"CODE",{});var _Hr=s(Eae);A6o=r(_Hr,"pretrained_model_name_or_path"),_Hr.forEach(t),L6o=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yae=n(DM,"CODE",{});var uHr=s(yae);B6o=r(uHr,"pretrained_model_name_or_path"),uHr.forEach(t),x6o=r(DM,":"),DM.forEach(t),k6o=i(Ot),na=n(Ot,"UL",{});var rl=s(na);tb=n(rl,"LI",{});var rye=s(tb);wae=n(rye,"STRONG",{});var bHr=s(wae);R6o=r(bHr,"bert"),bHr.forEach(t),S6o=r(rye," \u2014 "),lD=n(rye,"A",{href:!0});var vHr=s(lD);P6o=r(vHr,"BertForNextSentencePrediction"),vHr.forEach(t),$6o=r(rye," (BERT model)"),rye.forEach(t),I6o=i(rl),ab=n(rl,"LI",{});var tye=s(ab);Aae=n(tye,"STRONG",{});var THr=s(Aae);D6o=r(THr,"fnet"),THr.forEach(t),j6o=r(tye," \u2014 "),iD=n(tye,"A",{href:!0});var FHr=s(iD);N6o=r(FHr,"FNetForNextSentencePrediction"),FHr.forEach(t),q6o=r(tye," (FNet model)"),tye.forEach(t),G6o=i(rl),nb=n(rl,"LI",{});var aye=s(nb);Lae=n(aye,"STRONG",{});var CHr=s(Lae);O6o=r(CHr,"megatron-bert"),CHr.forEach(t),X6o=r(aye," \u2014 "),dD=n(aye,"A",{href:!0});var MHr=s(dD);V6o=r(MHr,"MegatronBertForNextSentencePrediction"),MHr.forEach(t),z6o=r(aye," (MegatronBert model)"),aye.forEach(t),W6o=i(rl),sb=n(rl,"LI",{});var nye=s(sb);Bae=n(nye,"STRONG",{});var EHr=s(Bae);Q6o=r(EHr,"mobilebert"),EHr.forEach(t),H6o=r(nye," \u2014 "),cD=n(nye,"A",{href:!0});var yHr=s(cD);U6o=r(yHr,"MobileBertForNextSentencePrediction"),yHr.forEach(t),J6o=r(nye," (MobileBERT model)"),nye.forEach(t),Y6o=i(rl),lb=n(rl,"LI",{});var sye=s(lb);xae=n(sye,"STRONG",{});var wHr=s(xae);K6o=r(wHr,"qdqbert"),wHr.forEach(t),Z6o=r(sye," \u2014 "),fD=n(sye,"A",{href:!0});var AHr=s(fD);eAo=r(AHr,"QDQBertForNextSentencePrediction"),AHr.forEach(t),oAo=r(sye," (QDQBert model)"),sye.forEach(t),rl.forEach(t),rAo=i(Ot),ib=n(Ot,"P",{});var lye=s(ib);tAo=r(lye,"The model is set in evaluation mode by default using "),kae=n(lye,"CODE",{});var LHr=s(kae);aAo=r(LHr,"model.eval()"),LHr.forEach(t),nAo=r(lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rae=n(lye,"CODE",{});var BHr=s(Rae);sAo=r(BHr,"model.train()"),BHr.forEach(t),lye.forEach(t),lAo=i(Ot),Sae=n(Ot,"P",{});var xHr=s(Sae);iAo=r(xHr,"Examples:"),xHr.forEach(t),dAo=i(Ot),m(ly.$$.fragment,Ot),Ot.forEach(t),el.forEach(t),_Be=i(c),md=n(c,"H2",{class:!0});var Mke=s(md);db=n(Mke,"A",{id:!0,class:!0,href:!0});var kHr=s(db);Pae=n(kHr,"SPAN",{});var RHr=s(Pae);m(iy.$$.fragment,RHr),RHr.forEach(t),kHr.forEach(t),cAo=i(Mke),$ae=n(Mke,"SPAN",{});var SHr=s($ae);fAo=r(SHr,"AutoModelForTokenClassification"),SHr.forEach(t),Mke.forEach(t),uBe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(dy.$$.fragment,tl),mAo=i(tl),gd=n(tl,"P",{});var tz=s(gd);gAo=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Iae=n(tz,"CODE",{});var PHr=s(Iae);hAo=r(PHr,"from_pretrained()"),PHr.forEach(t),pAo=r(tz,"class method or the "),Dae=n(tz,"CODE",{});var $Hr=s(Dae);_Ao=r($Hr,"from_config()"),$Hr.forEach(t),uAo=r(tz,`class
method.`),tz.forEach(t),bAo=i(tl),cy=n(tl,"P",{});var Eke=s(cy);vAo=r(Eke,"This class cannot be instantiated directly using "),jae=n(Eke,"CODE",{});var IHr=s(jae);TAo=r(IHr,"__init__()"),IHr.forEach(t),FAo=r(Eke," (throws an error)."),Eke.forEach(t),CAo=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);m(fy.$$.fragment,al),MAo=i(al),Nae=n(al,"P",{});var DHr=s(Nae);EAo=r(DHr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DHr.forEach(t),yAo=i(al),hd=n(al,"P",{});var az=s(hd);wAo=r(az,`Note:
Loading a model from its configuration file does `),qae=n(az,"STRONG",{});var jHr=s(qae);AAo=r(jHr,"not"),jHr.forEach(t),LAo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gae=n(az,"CODE",{});var NHr=s(Gae);BAo=r(NHr,"from_pretrained()"),NHr.forEach(t),xAo=r(az,"to load the model weights."),az.forEach(t),kAo=i(al),Oae=n(al,"P",{});var qHr=s(Oae);RAo=r(qHr,"Examples:"),qHr.forEach(t),SAo=i(al),m(my.$$.fragment,al),al.forEach(t),PAo=i(tl),Ge=n(tl,"DIV",{class:!0});var Xt=s(Ge);m(gy.$$.fragment,Xt),$Ao=i(Xt),Xae=n(Xt,"P",{});var GHr=s(Xae);IAo=r(GHr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GHr.forEach(t),DAo=i(Xt),Qa=n(Xt,"P",{});var jM=s(Qa);jAo=r(jM,"The model class to instantiate is selected based on the "),Vae=n(jM,"CODE",{});var OHr=s(Vae);NAo=r(OHr,"model_type"),OHr.forEach(t),qAo=r(jM,` property of the config object (either
passed as an argument or loaded from `),zae=n(jM,"CODE",{});var XHr=s(zae);GAo=r(XHr,"pretrained_model_name_or_path"),XHr.forEach(t),OAo=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wae=n(jM,"CODE",{});var VHr=s(Wae);XAo=r(VHr,"pretrained_model_name_or_path"),VHr.forEach(t),VAo=r(jM,":"),jM.forEach(t),zAo=i(Xt),N=n(Xt,"UL",{});var q=s(N);cb=n(q,"LI",{});var iye=s(cb);Qae=n(iye,"STRONG",{});var zHr=s(Qae);WAo=r(zHr,"albert"),zHr.forEach(t),QAo=r(iye," \u2014 "),mD=n(iye,"A",{href:!0});var WHr=s(mD);HAo=r(WHr,"AlbertForTokenClassification"),WHr.forEach(t),UAo=r(iye," (ALBERT model)"),iye.forEach(t),JAo=i(q),fb=n(q,"LI",{});var dye=s(fb);Hae=n(dye,"STRONG",{});var QHr=s(Hae);YAo=r(QHr,"bert"),QHr.forEach(t),KAo=r(dye," \u2014 "),gD=n(dye,"A",{href:!0});var HHr=s(gD);ZAo=r(HHr,"BertForTokenClassification"),HHr.forEach(t),e0o=r(dye," (BERT model)"),dye.forEach(t),o0o=i(q),mb=n(q,"LI",{});var cye=s(mb);Uae=n(cye,"STRONG",{});var UHr=s(Uae);r0o=r(UHr,"big_bird"),UHr.forEach(t),t0o=r(cye," \u2014 "),hD=n(cye,"A",{href:!0});var JHr=s(hD);a0o=r(JHr,"BigBirdForTokenClassification"),JHr.forEach(t),n0o=r(cye," (BigBird model)"),cye.forEach(t),s0o=i(q),gb=n(q,"LI",{});var fye=s(gb);Jae=n(fye,"STRONG",{});var YHr=s(Jae);l0o=r(YHr,"camembert"),YHr.forEach(t),i0o=r(fye," \u2014 "),pD=n(fye,"A",{href:!0});var KHr=s(pD);d0o=r(KHr,"CamembertForTokenClassification"),KHr.forEach(t),c0o=r(fye," (CamemBERT model)"),fye.forEach(t),f0o=i(q),hb=n(q,"LI",{});var mye=s(hb);Yae=n(mye,"STRONG",{});var ZHr=s(Yae);m0o=r(ZHr,"canine"),ZHr.forEach(t),g0o=r(mye," \u2014 "),_D=n(mye,"A",{href:!0});var eUr=s(_D);h0o=r(eUr,"CanineForTokenClassification"),eUr.forEach(t),p0o=r(mye," (Canine model)"),mye.forEach(t),_0o=i(q),pb=n(q,"LI",{});var gye=s(pb);Kae=n(gye,"STRONG",{});var oUr=s(Kae);u0o=r(oUr,"convbert"),oUr.forEach(t),b0o=r(gye," \u2014 "),uD=n(gye,"A",{href:!0});var rUr=s(uD);v0o=r(rUr,"ConvBertForTokenClassification"),rUr.forEach(t),T0o=r(gye," (ConvBERT model)"),gye.forEach(t),F0o=i(q),_b=n(q,"LI",{});var hye=s(_b);Zae=n(hye,"STRONG",{});var tUr=s(Zae);C0o=r(tUr,"data2vec-text"),tUr.forEach(t),M0o=r(hye," \u2014 "),bD=n(hye,"A",{href:!0});var aUr=s(bD);E0o=r(aUr,"Data2VecTextForTokenClassification"),aUr.forEach(t),y0o=r(hye," (Data2VecText model)"),hye.forEach(t),w0o=i(q),ub=n(q,"LI",{});var pye=s(ub);ene=n(pye,"STRONG",{});var nUr=s(ene);A0o=r(nUr,"deberta"),nUr.forEach(t),L0o=r(pye," \u2014 "),vD=n(pye,"A",{href:!0});var sUr=s(vD);B0o=r(sUr,"DebertaForTokenClassification"),sUr.forEach(t),x0o=r(pye," (DeBERTa model)"),pye.forEach(t),k0o=i(q),bb=n(q,"LI",{});var _ye=s(bb);one=n(_ye,"STRONG",{});var lUr=s(one);R0o=r(lUr,"deberta-v2"),lUr.forEach(t),S0o=r(_ye," \u2014 "),TD=n(_ye,"A",{href:!0});var iUr=s(TD);P0o=r(iUr,"DebertaV2ForTokenClassification"),iUr.forEach(t),$0o=r(_ye," (DeBERTa-v2 model)"),_ye.forEach(t),I0o=i(q),vb=n(q,"LI",{});var uye=s(vb);rne=n(uye,"STRONG",{});var dUr=s(rne);D0o=r(dUr,"distilbert"),dUr.forEach(t),j0o=r(uye," \u2014 "),FD=n(uye,"A",{href:!0});var cUr=s(FD);N0o=r(cUr,"DistilBertForTokenClassification"),cUr.forEach(t),q0o=r(uye," (DistilBERT model)"),uye.forEach(t),G0o=i(q),Tb=n(q,"LI",{});var bye=s(Tb);tne=n(bye,"STRONG",{});var fUr=s(tne);O0o=r(fUr,"electra"),fUr.forEach(t),X0o=r(bye," \u2014 "),CD=n(bye,"A",{href:!0});var mUr=s(CD);V0o=r(mUr,"ElectraForTokenClassification"),mUr.forEach(t),z0o=r(bye," (ELECTRA model)"),bye.forEach(t),W0o=i(q),Fb=n(q,"LI",{});var vye=s(Fb);ane=n(vye,"STRONG",{});var gUr=s(ane);Q0o=r(gUr,"flaubert"),gUr.forEach(t),H0o=r(vye," \u2014 "),MD=n(vye,"A",{href:!0});var hUr=s(MD);U0o=r(hUr,"FlaubertForTokenClassification"),hUr.forEach(t),J0o=r(vye," (FlauBERT model)"),vye.forEach(t),Y0o=i(q),Cb=n(q,"LI",{});var Tye=s(Cb);nne=n(Tye,"STRONG",{});var pUr=s(nne);K0o=r(pUr,"fnet"),pUr.forEach(t),Z0o=r(Tye," \u2014 "),ED=n(Tye,"A",{href:!0});var _Ur=s(ED);eLo=r(_Ur,"FNetForTokenClassification"),_Ur.forEach(t),oLo=r(Tye," (FNet model)"),Tye.forEach(t),rLo=i(q),Mb=n(q,"LI",{});var Fye=s(Mb);sne=n(Fye,"STRONG",{});var uUr=s(sne);tLo=r(uUr,"funnel"),uUr.forEach(t),aLo=r(Fye," \u2014 "),yD=n(Fye,"A",{href:!0});var bUr=s(yD);nLo=r(bUr,"FunnelForTokenClassification"),bUr.forEach(t),sLo=r(Fye," (Funnel Transformer model)"),Fye.forEach(t),lLo=i(q),Eb=n(q,"LI",{});var Cye=s(Eb);lne=n(Cye,"STRONG",{});var vUr=s(lne);iLo=r(vUr,"gpt2"),vUr.forEach(t),dLo=r(Cye," \u2014 "),wD=n(Cye,"A",{href:!0});var TUr=s(wD);cLo=r(TUr,"GPT2ForTokenClassification"),TUr.forEach(t),fLo=r(Cye," (OpenAI GPT-2 model)"),Cye.forEach(t),mLo=i(q),yb=n(q,"LI",{});var Mye=s(yb);ine=n(Mye,"STRONG",{});var FUr=s(ine);gLo=r(FUr,"ibert"),FUr.forEach(t),hLo=r(Mye," \u2014 "),AD=n(Mye,"A",{href:!0});var CUr=s(AD);pLo=r(CUr,"IBertForTokenClassification"),CUr.forEach(t),_Lo=r(Mye," (I-BERT model)"),Mye.forEach(t),uLo=i(q),wb=n(q,"LI",{});var Eye=s(wb);dne=n(Eye,"STRONG",{});var MUr=s(dne);bLo=r(MUr,"layoutlm"),MUr.forEach(t),vLo=r(Eye," \u2014 "),LD=n(Eye,"A",{href:!0});var EUr=s(LD);TLo=r(EUr,"LayoutLMForTokenClassification"),EUr.forEach(t),FLo=r(Eye," (LayoutLM model)"),Eye.forEach(t),CLo=i(q),Ab=n(q,"LI",{});var yye=s(Ab);cne=n(yye,"STRONG",{});var yUr=s(cne);MLo=r(yUr,"layoutlmv2"),yUr.forEach(t),ELo=r(yye," \u2014 "),BD=n(yye,"A",{href:!0});var wUr=s(BD);yLo=r(wUr,"LayoutLMv2ForTokenClassification"),wUr.forEach(t),wLo=r(yye," (LayoutLMv2 model)"),yye.forEach(t),ALo=i(q),Lb=n(q,"LI",{});var wye=s(Lb);fne=n(wye,"STRONG",{});var AUr=s(fne);LLo=r(AUr,"longformer"),AUr.forEach(t),BLo=r(wye," \u2014 "),xD=n(wye,"A",{href:!0});var LUr=s(xD);xLo=r(LUr,"LongformerForTokenClassification"),LUr.forEach(t),kLo=r(wye," (Longformer model)"),wye.forEach(t),RLo=i(q),Bb=n(q,"LI",{});var Aye=s(Bb);mne=n(Aye,"STRONG",{});var BUr=s(mne);SLo=r(BUr,"megatron-bert"),BUr.forEach(t),PLo=r(Aye," \u2014 "),kD=n(Aye,"A",{href:!0});var xUr=s(kD);$Lo=r(xUr,"MegatronBertForTokenClassification"),xUr.forEach(t),ILo=r(Aye," (MegatronBert model)"),Aye.forEach(t),DLo=i(q),xb=n(q,"LI",{});var Lye=s(xb);gne=n(Lye,"STRONG",{});var kUr=s(gne);jLo=r(kUr,"mobilebert"),kUr.forEach(t),NLo=r(Lye," \u2014 "),RD=n(Lye,"A",{href:!0});var RUr=s(RD);qLo=r(RUr,"MobileBertForTokenClassification"),RUr.forEach(t),GLo=r(Lye," (MobileBERT model)"),Lye.forEach(t),OLo=i(q),kb=n(q,"LI",{});var Bye=s(kb);hne=n(Bye,"STRONG",{});var SUr=s(hne);XLo=r(SUr,"mpnet"),SUr.forEach(t),VLo=r(Bye," \u2014 "),SD=n(Bye,"A",{href:!0});var PUr=s(SD);zLo=r(PUr,"MPNetForTokenClassification"),PUr.forEach(t),WLo=r(Bye," (MPNet model)"),Bye.forEach(t),QLo=i(q),Rb=n(q,"LI",{});var xye=s(Rb);pne=n(xye,"STRONG",{});var $Ur=s(pne);HLo=r($Ur,"nystromformer"),$Ur.forEach(t),ULo=r(xye," \u2014 "),PD=n(xye,"A",{href:!0});var IUr=s(PD);JLo=r(IUr,"NystromformerForTokenClassification"),IUr.forEach(t),YLo=r(xye," (Nystromformer model)"),xye.forEach(t),KLo=i(q),Sb=n(q,"LI",{});var kye=s(Sb);_ne=n(kye,"STRONG",{});var DUr=s(_ne);ZLo=r(DUr,"qdqbert"),DUr.forEach(t),e8o=r(kye," \u2014 "),$D=n(kye,"A",{href:!0});var jUr=s($D);o8o=r(jUr,"QDQBertForTokenClassification"),jUr.forEach(t),r8o=r(kye," (QDQBert model)"),kye.forEach(t),t8o=i(q),Pb=n(q,"LI",{});var Rye=s(Pb);une=n(Rye,"STRONG",{});var NUr=s(une);a8o=r(NUr,"rembert"),NUr.forEach(t),n8o=r(Rye," \u2014 "),ID=n(Rye,"A",{href:!0});var qUr=s(ID);s8o=r(qUr,"RemBertForTokenClassification"),qUr.forEach(t),l8o=r(Rye," (RemBERT model)"),Rye.forEach(t),i8o=i(q),$b=n(q,"LI",{});var Sye=s($b);bne=n(Sye,"STRONG",{});var GUr=s(bne);d8o=r(GUr,"roberta"),GUr.forEach(t),c8o=r(Sye," \u2014 "),DD=n(Sye,"A",{href:!0});var OUr=s(DD);f8o=r(OUr,"RobertaForTokenClassification"),OUr.forEach(t),m8o=r(Sye," (RoBERTa model)"),Sye.forEach(t),g8o=i(q),Ib=n(q,"LI",{});var Pye=s(Ib);vne=n(Pye,"STRONG",{});var XUr=s(vne);h8o=r(XUr,"roformer"),XUr.forEach(t),p8o=r(Pye," \u2014 "),jD=n(Pye,"A",{href:!0});var VUr=s(jD);_8o=r(VUr,"RoFormerForTokenClassification"),VUr.forEach(t),u8o=r(Pye," (RoFormer model)"),Pye.forEach(t),b8o=i(q),Db=n(q,"LI",{});var $ye=s(Db);Tne=n($ye,"STRONG",{});var zUr=s(Tne);v8o=r(zUr,"squeezebert"),zUr.forEach(t),T8o=r($ye," \u2014 "),ND=n($ye,"A",{href:!0});var WUr=s(ND);F8o=r(WUr,"SqueezeBertForTokenClassification"),WUr.forEach(t),C8o=r($ye," (SqueezeBERT model)"),$ye.forEach(t),M8o=i(q),jb=n(q,"LI",{});var Iye=s(jb);Fne=n(Iye,"STRONG",{});var QUr=s(Fne);E8o=r(QUr,"xlm"),QUr.forEach(t),y8o=r(Iye," \u2014 "),qD=n(Iye,"A",{href:!0});var HUr=s(qD);w8o=r(HUr,"XLMForTokenClassification"),HUr.forEach(t),A8o=r(Iye," (XLM model)"),Iye.forEach(t),L8o=i(q),Nb=n(q,"LI",{});var Dye=s(Nb);Cne=n(Dye,"STRONG",{});var UUr=s(Cne);B8o=r(UUr,"xlm-roberta"),UUr.forEach(t),x8o=r(Dye," \u2014 "),GD=n(Dye,"A",{href:!0});var JUr=s(GD);k8o=r(JUr,"XLMRobertaForTokenClassification"),JUr.forEach(t),R8o=r(Dye," (XLM-RoBERTa model)"),Dye.forEach(t),S8o=i(q),qb=n(q,"LI",{});var jye=s(qb);Mne=n(jye,"STRONG",{});var YUr=s(Mne);P8o=r(YUr,"xlm-roberta-xl"),YUr.forEach(t),$8o=r(jye," \u2014 "),OD=n(jye,"A",{href:!0});var KUr=s(OD);I8o=r(KUr,"XLMRobertaXLForTokenClassification"),KUr.forEach(t),D8o=r(jye," (XLM-RoBERTa-XL model)"),jye.forEach(t),j8o=i(q),Gb=n(q,"LI",{});var Nye=s(Gb);Ene=n(Nye,"STRONG",{});var ZUr=s(Ene);N8o=r(ZUr,"xlnet"),ZUr.forEach(t),q8o=r(Nye," \u2014 "),XD=n(Nye,"A",{href:!0});var eJr=s(XD);G8o=r(eJr,"XLNetForTokenClassification"),eJr.forEach(t),O8o=r(Nye," (XLNet model)"),Nye.forEach(t),X8o=i(q),Ob=n(q,"LI",{});var qye=s(Ob);yne=n(qye,"STRONG",{});var oJr=s(yne);V8o=r(oJr,"yoso"),oJr.forEach(t),z8o=r(qye," \u2014 "),VD=n(qye,"A",{href:!0});var rJr=s(VD);W8o=r(rJr,"YosoForTokenClassification"),rJr.forEach(t),Q8o=r(qye," (YOSO model)"),qye.forEach(t),q.forEach(t),H8o=i(Xt),Xb=n(Xt,"P",{});var Gye=s(Xb);U8o=r(Gye,"The model is set in evaluation mode by default using "),wne=n(Gye,"CODE",{});var tJr=s(wne);J8o=r(tJr,"model.eval()"),tJr.forEach(t),Y8o=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ane=n(Gye,"CODE",{});var aJr=s(Ane);K8o=r(aJr,"model.train()"),aJr.forEach(t),Gye.forEach(t),Z8o=i(Xt),Lne=n(Xt,"P",{});var nJr=s(Lne);e7o=r(nJr,"Examples:"),nJr.forEach(t),o7o=i(Xt),m(hy.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),bBe=i(c),pd=n(c,"H2",{class:!0});var yke=s(pd);Vb=n(yke,"A",{id:!0,class:!0,href:!0});var sJr=s(Vb);Bne=n(sJr,"SPAN",{});var lJr=s(Bne);m(py.$$.fragment,lJr),lJr.forEach(t),sJr.forEach(t),r7o=i(yke),xne=n(yke,"SPAN",{});var iJr=s(xne);t7o=r(iJr,"AutoModelForQuestionAnswering"),iJr.forEach(t),yke.forEach(t),vBe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(_y.$$.fragment,nl),a7o=i(nl),_d=n(nl,"P",{});var nz=s(_d);n7o=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kne=n(nz,"CODE",{});var dJr=s(kne);s7o=r(dJr,"from_pretrained()"),dJr.forEach(t),l7o=r(nz,"class method or the "),Rne=n(nz,"CODE",{});var cJr=s(Rne);i7o=r(cJr,"from_config()"),cJr.forEach(t),d7o=r(nz,`class
method.`),nz.forEach(t),c7o=i(nl),uy=n(nl,"P",{});var wke=s(uy);f7o=r(wke,"This class cannot be instantiated directly using "),Sne=n(wke,"CODE",{});var fJr=s(Sne);m7o=r(fJr,"__init__()"),fJr.forEach(t),g7o=r(wke," (throws an error)."),wke.forEach(t),h7o=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);m(by.$$.fragment,sl),p7o=i(sl),Pne=n(sl,"P",{});var mJr=s(Pne);_7o=r(mJr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mJr.forEach(t),u7o=i(sl),ud=n(sl,"P",{});var sz=s(ud);b7o=r(sz,`Note:
Loading a model from its configuration file does `),$ne=n(sz,"STRONG",{});var gJr=s($ne);v7o=r(gJr,"not"),gJr.forEach(t),T7o=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ine=n(sz,"CODE",{});var hJr=s(Ine);F7o=r(hJr,"from_pretrained()"),hJr.forEach(t),C7o=r(sz,"to load the model weights."),sz.forEach(t),M7o=i(sl),Dne=n(sl,"P",{});var pJr=s(Dne);E7o=r(pJr,"Examples:"),pJr.forEach(t),y7o=i(sl),m(vy.$$.fragment,sl),sl.forEach(t),w7o=i(nl),Oe=n(nl,"DIV",{class:!0});var Vt=s(Oe);m(Ty.$$.fragment,Vt),A7o=i(Vt),jne=n(Vt,"P",{});var _Jr=s(jne);L7o=r(_Jr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Jr.forEach(t),B7o=i(Vt),Ha=n(Vt,"P",{});var NM=s(Ha);x7o=r(NM,"The model class to instantiate is selected based on the "),Nne=n(NM,"CODE",{});var uJr=s(Nne);k7o=r(uJr,"model_type"),uJr.forEach(t),R7o=r(NM,` property of the config object (either
passed as an argument or loaded from `),qne=n(NM,"CODE",{});var bJr=s(qne);S7o=r(bJr,"pretrained_model_name_or_path"),bJr.forEach(t),P7o=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=n(NM,"CODE",{});var vJr=s(Gne);$7o=r(vJr,"pretrained_model_name_or_path"),vJr.forEach(t),I7o=r(NM,":"),NM.forEach(t),D7o=i(Vt),R=n(Vt,"UL",{});var P=s(R);zb=n(P,"LI",{});var Oye=s(zb);One=n(Oye,"STRONG",{});var TJr=s(One);j7o=r(TJr,"albert"),TJr.forEach(t),N7o=r(Oye," \u2014 "),zD=n(Oye,"A",{href:!0});var FJr=s(zD);q7o=r(FJr,"AlbertForQuestionAnswering"),FJr.forEach(t),G7o=r(Oye," (ALBERT model)"),Oye.forEach(t),O7o=i(P),Wb=n(P,"LI",{});var Xye=s(Wb);Xne=n(Xye,"STRONG",{});var CJr=s(Xne);X7o=r(CJr,"bart"),CJr.forEach(t),V7o=r(Xye," \u2014 "),WD=n(Xye,"A",{href:!0});var MJr=s(WD);z7o=r(MJr,"BartForQuestionAnswering"),MJr.forEach(t),W7o=r(Xye," (BART model)"),Xye.forEach(t),Q7o=i(P),Qb=n(P,"LI",{});var Vye=s(Qb);Vne=n(Vye,"STRONG",{});var EJr=s(Vne);H7o=r(EJr,"bert"),EJr.forEach(t),U7o=r(Vye," \u2014 "),QD=n(Vye,"A",{href:!0});var yJr=s(QD);J7o=r(yJr,"BertForQuestionAnswering"),yJr.forEach(t),Y7o=r(Vye," (BERT model)"),Vye.forEach(t),K7o=i(P),Hb=n(P,"LI",{});var zye=s(Hb);zne=n(zye,"STRONG",{});var wJr=s(zne);Z7o=r(wJr,"big_bird"),wJr.forEach(t),eBo=r(zye," \u2014 "),HD=n(zye,"A",{href:!0});var AJr=s(HD);oBo=r(AJr,"BigBirdForQuestionAnswering"),AJr.forEach(t),rBo=r(zye," (BigBird model)"),zye.forEach(t),tBo=i(P),Ub=n(P,"LI",{});var Wye=s(Ub);Wne=n(Wye,"STRONG",{});var LJr=s(Wne);aBo=r(LJr,"bigbird_pegasus"),LJr.forEach(t),nBo=r(Wye," \u2014 "),UD=n(Wye,"A",{href:!0});var BJr=s(UD);sBo=r(BJr,"BigBirdPegasusForQuestionAnswering"),BJr.forEach(t),lBo=r(Wye," (BigBirdPegasus model)"),Wye.forEach(t),iBo=i(P),Jb=n(P,"LI",{});var Qye=s(Jb);Qne=n(Qye,"STRONG",{});var xJr=s(Qne);dBo=r(xJr,"camembert"),xJr.forEach(t),cBo=r(Qye," \u2014 "),JD=n(Qye,"A",{href:!0});var kJr=s(JD);fBo=r(kJr,"CamembertForQuestionAnswering"),kJr.forEach(t),mBo=r(Qye," (CamemBERT model)"),Qye.forEach(t),gBo=i(P),Yb=n(P,"LI",{});var Hye=s(Yb);Hne=n(Hye,"STRONG",{});var RJr=s(Hne);hBo=r(RJr,"canine"),RJr.forEach(t),pBo=r(Hye," \u2014 "),YD=n(Hye,"A",{href:!0});var SJr=s(YD);_Bo=r(SJr,"CanineForQuestionAnswering"),SJr.forEach(t),uBo=r(Hye," (Canine model)"),Hye.forEach(t),bBo=i(P),Kb=n(P,"LI",{});var Uye=s(Kb);Une=n(Uye,"STRONG",{});var PJr=s(Une);vBo=r(PJr,"convbert"),PJr.forEach(t),TBo=r(Uye," \u2014 "),KD=n(Uye,"A",{href:!0});var $Jr=s(KD);FBo=r($Jr,"ConvBertForQuestionAnswering"),$Jr.forEach(t),CBo=r(Uye," (ConvBERT model)"),Uye.forEach(t),MBo=i(P),Zb=n(P,"LI",{});var Jye=s(Zb);Jne=n(Jye,"STRONG",{});var IJr=s(Jne);EBo=r(IJr,"data2vec-text"),IJr.forEach(t),yBo=r(Jye," \u2014 "),ZD=n(Jye,"A",{href:!0});var DJr=s(ZD);wBo=r(DJr,"Data2VecTextForQuestionAnswering"),DJr.forEach(t),ABo=r(Jye," (Data2VecText model)"),Jye.forEach(t),LBo=i(P),e5=n(P,"LI",{});var Yye=s(e5);Yne=n(Yye,"STRONG",{});var jJr=s(Yne);BBo=r(jJr,"deberta"),jJr.forEach(t),xBo=r(Yye," \u2014 "),ej=n(Yye,"A",{href:!0});var NJr=s(ej);kBo=r(NJr,"DebertaForQuestionAnswering"),NJr.forEach(t),RBo=r(Yye," (DeBERTa model)"),Yye.forEach(t),SBo=i(P),o5=n(P,"LI",{});var Kye=s(o5);Kne=n(Kye,"STRONG",{});var qJr=s(Kne);PBo=r(qJr,"deberta-v2"),qJr.forEach(t),$Bo=r(Kye," \u2014 "),oj=n(Kye,"A",{href:!0});var GJr=s(oj);IBo=r(GJr,"DebertaV2ForQuestionAnswering"),GJr.forEach(t),DBo=r(Kye," (DeBERTa-v2 model)"),Kye.forEach(t),jBo=i(P),r5=n(P,"LI",{});var Zye=s(r5);Zne=n(Zye,"STRONG",{});var OJr=s(Zne);NBo=r(OJr,"distilbert"),OJr.forEach(t),qBo=r(Zye," \u2014 "),rj=n(Zye,"A",{href:!0});var XJr=s(rj);GBo=r(XJr,"DistilBertForQuestionAnswering"),XJr.forEach(t),OBo=r(Zye," (DistilBERT model)"),Zye.forEach(t),XBo=i(P),t5=n(P,"LI",{});var ewe=s(t5);ese=n(ewe,"STRONG",{});var VJr=s(ese);VBo=r(VJr,"electra"),VJr.forEach(t),zBo=r(ewe," \u2014 "),tj=n(ewe,"A",{href:!0});var zJr=s(tj);WBo=r(zJr,"ElectraForQuestionAnswering"),zJr.forEach(t),QBo=r(ewe," (ELECTRA model)"),ewe.forEach(t),HBo=i(P),a5=n(P,"LI",{});var owe=s(a5);ose=n(owe,"STRONG",{});var WJr=s(ose);UBo=r(WJr,"flaubert"),WJr.forEach(t),JBo=r(owe," \u2014 "),aj=n(owe,"A",{href:!0});var QJr=s(aj);YBo=r(QJr,"FlaubertForQuestionAnsweringSimple"),QJr.forEach(t),KBo=r(owe," (FlauBERT model)"),owe.forEach(t),ZBo=i(P),n5=n(P,"LI",{});var rwe=s(n5);rse=n(rwe,"STRONG",{});var HJr=s(rse);exo=r(HJr,"fnet"),HJr.forEach(t),oxo=r(rwe," \u2014 "),nj=n(rwe,"A",{href:!0});var UJr=s(nj);rxo=r(UJr,"FNetForQuestionAnswering"),UJr.forEach(t),txo=r(rwe," (FNet model)"),rwe.forEach(t),axo=i(P),s5=n(P,"LI",{});var twe=s(s5);tse=n(twe,"STRONG",{});var JJr=s(tse);nxo=r(JJr,"funnel"),JJr.forEach(t),sxo=r(twe," \u2014 "),sj=n(twe,"A",{href:!0});var YJr=s(sj);lxo=r(YJr,"FunnelForQuestionAnswering"),YJr.forEach(t),ixo=r(twe," (Funnel Transformer model)"),twe.forEach(t),dxo=i(P),l5=n(P,"LI",{});var awe=s(l5);ase=n(awe,"STRONG",{});var KJr=s(ase);cxo=r(KJr,"gptj"),KJr.forEach(t),fxo=r(awe," \u2014 "),lj=n(awe,"A",{href:!0});var ZJr=s(lj);mxo=r(ZJr,"GPTJForQuestionAnswering"),ZJr.forEach(t),gxo=r(awe," (GPT-J model)"),awe.forEach(t),hxo=i(P),i5=n(P,"LI",{});var nwe=s(i5);nse=n(nwe,"STRONG",{});var eYr=s(nse);pxo=r(eYr,"ibert"),eYr.forEach(t),_xo=r(nwe," \u2014 "),ij=n(nwe,"A",{href:!0});var oYr=s(ij);uxo=r(oYr,"IBertForQuestionAnswering"),oYr.forEach(t),bxo=r(nwe," (I-BERT model)"),nwe.forEach(t),vxo=i(P),d5=n(P,"LI",{});var swe=s(d5);sse=n(swe,"STRONG",{});var rYr=s(sse);Txo=r(rYr,"layoutlmv2"),rYr.forEach(t),Fxo=r(swe," \u2014 "),dj=n(swe,"A",{href:!0});var tYr=s(dj);Cxo=r(tYr,"LayoutLMv2ForQuestionAnswering"),tYr.forEach(t),Mxo=r(swe," (LayoutLMv2 model)"),swe.forEach(t),Exo=i(P),c5=n(P,"LI",{});var lwe=s(c5);lse=n(lwe,"STRONG",{});var aYr=s(lse);yxo=r(aYr,"led"),aYr.forEach(t),wxo=r(lwe," \u2014 "),cj=n(lwe,"A",{href:!0});var nYr=s(cj);Axo=r(nYr,"LEDForQuestionAnswering"),nYr.forEach(t),Lxo=r(lwe," (LED model)"),lwe.forEach(t),Bxo=i(P),f5=n(P,"LI",{});var iwe=s(f5);ise=n(iwe,"STRONG",{});var sYr=s(ise);xxo=r(sYr,"longformer"),sYr.forEach(t),kxo=r(iwe," \u2014 "),fj=n(iwe,"A",{href:!0});var lYr=s(fj);Rxo=r(lYr,"LongformerForQuestionAnswering"),lYr.forEach(t),Sxo=r(iwe," (Longformer model)"),iwe.forEach(t),Pxo=i(P),m5=n(P,"LI",{});var dwe=s(m5);dse=n(dwe,"STRONG",{});var iYr=s(dse);$xo=r(iYr,"lxmert"),iYr.forEach(t),Ixo=r(dwe," \u2014 "),mj=n(dwe,"A",{href:!0});var dYr=s(mj);Dxo=r(dYr,"LxmertForQuestionAnswering"),dYr.forEach(t),jxo=r(dwe," (LXMERT model)"),dwe.forEach(t),Nxo=i(P),g5=n(P,"LI",{});var cwe=s(g5);cse=n(cwe,"STRONG",{});var cYr=s(cse);qxo=r(cYr,"mbart"),cYr.forEach(t),Gxo=r(cwe," \u2014 "),gj=n(cwe,"A",{href:!0});var fYr=s(gj);Oxo=r(fYr,"MBartForQuestionAnswering"),fYr.forEach(t),Xxo=r(cwe," (mBART model)"),cwe.forEach(t),Vxo=i(P),h5=n(P,"LI",{});var fwe=s(h5);fse=n(fwe,"STRONG",{});var mYr=s(fse);zxo=r(mYr,"megatron-bert"),mYr.forEach(t),Wxo=r(fwe," \u2014 "),hj=n(fwe,"A",{href:!0});var gYr=s(hj);Qxo=r(gYr,"MegatronBertForQuestionAnswering"),gYr.forEach(t),Hxo=r(fwe," (MegatronBert model)"),fwe.forEach(t),Uxo=i(P),p5=n(P,"LI",{});var mwe=s(p5);mse=n(mwe,"STRONG",{});var hYr=s(mse);Jxo=r(hYr,"mobilebert"),hYr.forEach(t),Yxo=r(mwe," \u2014 "),pj=n(mwe,"A",{href:!0});var pYr=s(pj);Kxo=r(pYr,"MobileBertForQuestionAnswering"),pYr.forEach(t),Zxo=r(mwe," (MobileBERT model)"),mwe.forEach(t),eko=i(P),_5=n(P,"LI",{});var gwe=s(_5);gse=n(gwe,"STRONG",{});var _Yr=s(gse);oko=r(_Yr,"mpnet"),_Yr.forEach(t),rko=r(gwe," \u2014 "),_j=n(gwe,"A",{href:!0});var uYr=s(_j);tko=r(uYr,"MPNetForQuestionAnswering"),uYr.forEach(t),ako=r(gwe," (MPNet model)"),gwe.forEach(t),nko=i(P),u5=n(P,"LI",{});var hwe=s(u5);hse=n(hwe,"STRONG",{});var bYr=s(hse);sko=r(bYr,"nystromformer"),bYr.forEach(t),lko=r(hwe," \u2014 "),uj=n(hwe,"A",{href:!0});var vYr=s(uj);iko=r(vYr,"NystromformerForQuestionAnswering"),vYr.forEach(t),dko=r(hwe," (Nystromformer model)"),hwe.forEach(t),cko=i(P),b5=n(P,"LI",{});var pwe=s(b5);pse=n(pwe,"STRONG",{});var TYr=s(pse);fko=r(TYr,"qdqbert"),TYr.forEach(t),mko=r(pwe," \u2014 "),bj=n(pwe,"A",{href:!0});var FYr=s(bj);gko=r(FYr,"QDQBertForQuestionAnswering"),FYr.forEach(t),hko=r(pwe," (QDQBert model)"),pwe.forEach(t),pko=i(P),v5=n(P,"LI",{});var _we=s(v5);_se=n(_we,"STRONG",{});var CYr=s(_se);_ko=r(CYr,"reformer"),CYr.forEach(t),uko=r(_we," \u2014 "),vj=n(_we,"A",{href:!0});var MYr=s(vj);bko=r(MYr,"ReformerForQuestionAnswering"),MYr.forEach(t),vko=r(_we," (Reformer model)"),_we.forEach(t),Tko=i(P),T5=n(P,"LI",{});var uwe=s(T5);use=n(uwe,"STRONG",{});var EYr=s(use);Fko=r(EYr,"rembert"),EYr.forEach(t),Cko=r(uwe," \u2014 "),Tj=n(uwe,"A",{href:!0});var yYr=s(Tj);Mko=r(yYr,"RemBertForQuestionAnswering"),yYr.forEach(t),Eko=r(uwe," (RemBERT model)"),uwe.forEach(t),yko=i(P),F5=n(P,"LI",{});var bwe=s(F5);bse=n(bwe,"STRONG",{});var wYr=s(bse);wko=r(wYr,"roberta"),wYr.forEach(t),Ako=r(bwe," \u2014 "),Fj=n(bwe,"A",{href:!0});var AYr=s(Fj);Lko=r(AYr,"RobertaForQuestionAnswering"),AYr.forEach(t),Bko=r(bwe," (RoBERTa model)"),bwe.forEach(t),xko=i(P),C5=n(P,"LI",{});var vwe=s(C5);vse=n(vwe,"STRONG",{});var LYr=s(vse);kko=r(LYr,"roformer"),LYr.forEach(t),Rko=r(vwe," \u2014 "),Cj=n(vwe,"A",{href:!0});var BYr=s(Cj);Sko=r(BYr,"RoFormerForQuestionAnswering"),BYr.forEach(t),Pko=r(vwe," (RoFormer model)"),vwe.forEach(t),$ko=i(P),M5=n(P,"LI",{});var Twe=s(M5);Tse=n(Twe,"STRONG",{});var xYr=s(Tse);Iko=r(xYr,"splinter"),xYr.forEach(t),Dko=r(Twe," \u2014 "),Mj=n(Twe,"A",{href:!0});var kYr=s(Mj);jko=r(kYr,"SplinterForQuestionAnswering"),kYr.forEach(t),Nko=r(Twe," (Splinter model)"),Twe.forEach(t),qko=i(P),E5=n(P,"LI",{});var Fwe=s(E5);Fse=n(Fwe,"STRONG",{});var RYr=s(Fse);Gko=r(RYr,"squeezebert"),RYr.forEach(t),Oko=r(Fwe," \u2014 "),Ej=n(Fwe,"A",{href:!0});var SYr=s(Ej);Xko=r(SYr,"SqueezeBertForQuestionAnswering"),SYr.forEach(t),Vko=r(Fwe," (SqueezeBERT model)"),Fwe.forEach(t),zko=i(P),y5=n(P,"LI",{});var Cwe=s(y5);Cse=n(Cwe,"STRONG",{});var PYr=s(Cse);Wko=r(PYr,"xlm"),PYr.forEach(t),Qko=r(Cwe," \u2014 "),yj=n(Cwe,"A",{href:!0});var $Yr=s(yj);Hko=r($Yr,"XLMForQuestionAnsweringSimple"),$Yr.forEach(t),Uko=r(Cwe," (XLM model)"),Cwe.forEach(t),Jko=i(P),w5=n(P,"LI",{});var Mwe=s(w5);Mse=n(Mwe,"STRONG",{});var IYr=s(Mse);Yko=r(IYr,"xlm-roberta"),IYr.forEach(t),Kko=r(Mwe," \u2014 "),wj=n(Mwe,"A",{href:!0});var DYr=s(wj);Zko=r(DYr,"XLMRobertaForQuestionAnswering"),DYr.forEach(t),eRo=r(Mwe," (XLM-RoBERTa model)"),Mwe.forEach(t),oRo=i(P),A5=n(P,"LI",{});var Ewe=s(A5);Ese=n(Ewe,"STRONG",{});var jYr=s(Ese);rRo=r(jYr,"xlm-roberta-xl"),jYr.forEach(t),tRo=r(Ewe," \u2014 "),Aj=n(Ewe,"A",{href:!0});var NYr=s(Aj);aRo=r(NYr,"XLMRobertaXLForQuestionAnswering"),NYr.forEach(t),nRo=r(Ewe," (XLM-RoBERTa-XL model)"),Ewe.forEach(t),sRo=i(P),L5=n(P,"LI",{});var ywe=s(L5);yse=n(ywe,"STRONG",{});var qYr=s(yse);lRo=r(qYr,"xlnet"),qYr.forEach(t),iRo=r(ywe," \u2014 "),Lj=n(ywe,"A",{href:!0});var GYr=s(Lj);dRo=r(GYr,"XLNetForQuestionAnsweringSimple"),GYr.forEach(t),cRo=r(ywe," (XLNet model)"),ywe.forEach(t),fRo=i(P),B5=n(P,"LI",{});var wwe=s(B5);wse=n(wwe,"STRONG",{});var OYr=s(wse);mRo=r(OYr,"yoso"),OYr.forEach(t),gRo=r(wwe," \u2014 "),Bj=n(wwe,"A",{href:!0});var XYr=s(Bj);hRo=r(XYr,"YosoForQuestionAnswering"),XYr.forEach(t),pRo=r(wwe," (YOSO model)"),wwe.forEach(t),P.forEach(t),_Ro=i(Vt),x5=n(Vt,"P",{});var Awe=s(x5);uRo=r(Awe,"The model is set in evaluation mode by default using "),Ase=n(Awe,"CODE",{});var VYr=s(Ase);bRo=r(VYr,"model.eval()"),VYr.forEach(t),vRo=r(Awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=n(Awe,"CODE",{});var zYr=s(Lse);TRo=r(zYr,"model.train()"),zYr.forEach(t),Awe.forEach(t),FRo=i(Vt),Bse=n(Vt,"P",{});var WYr=s(Bse);CRo=r(WYr,"Examples:"),WYr.forEach(t),MRo=i(Vt),m(Fy.$$.fragment,Vt),Vt.forEach(t),nl.forEach(t),TBe=i(c),bd=n(c,"H2",{class:!0});var Ake=s(bd);k5=n(Ake,"A",{id:!0,class:!0,href:!0});var QYr=s(k5);xse=n(QYr,"SPAN",{});var HYr=s(xse);m(Cy.$$.fragment,HYr),HYr.forEach(t),QYr.forEach(t),ERo=i(Ake),kse=n(Ake,"SPAN",{});var UYr=s(kse);yRo=r(UYr,"AutoModelForTableQuestionAnswering"),UYr.forEach(t),Ake.forEach(t),FBe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(My.$$.fragment,ll),wRo=i(ll),vd=n(ll,"P",{});var lz=s(vd);ARo=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Rse=n(lz,"CODE",{});var JYr=s(Rse);LRo=r(JYr,"from_pretrained()"),JYr.forEach(t),BRo=r(lz,"class method or the "),Sse=n(lz,"CODE",{});var YYr=s(Sse);xRo=r(YYr,"from_config()"),YYr.forEach(t),kRo=r(lz,`class
method.`),lz.forEach(t),RRo=i(ll),Ey=n(ll,"P",{});var Lke=s(Ey);SRo=r(Lke,"This class cannot be instantiated directly using "),Pse=n(Lke,"CODE",{});var KYr=s(Pse);PRo=r(KYr,"__init__()"),KYr.forEach(t),$Ro=r(Lke," (throws an error)."),Lke.forEach(t),IRo=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);m(yy.$$.fragment,il),DRo=i(il),$se=n(il,"P",{});var ZYr=s($se);jRo=r(ZYr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ZYr.forEach(t),NRo=i(il),Td=n(il,"P",{});var iz=s(Td);qRo=r(iz,`Note:
Loading a model from its configuration file does `),Ise=n(iz,"STRONG",{});var eKr=s(Ise);GRo=r(eKr,"not"),eKr.forEach(t),ORo=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dse=n(iz,"CODE",{});var oKr=s(Dse);XRo=r(oKr,"from_pretrained()"),oKr.forEach(t),VRo=r(iz,"to load the model weights."),iz.forEach(t),zRo=i(il),jse=n(il,"P",{});var rKr=s(jse);WRo=r(rKr,"Examples:"),rKr.forEach(t),QRo=i(il),m(wy.$$.fragment,il),il.forEach(t),HRo=i(ll),Xe=n(ll,"DIV",{class:!0});var zt=s(Xe);m(Ay.$$.fragment,zt),URo=i(zt),Nse=n(zt,"P",{});var tKr=s(Nse);JRo=r(tKr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tKr.forEach(t),YRo=i(zt),Ua=n(zt,"P",{});var qM=s(Ua);KRo=r(qM,"The model class to instantiate is selected based on the "),qse=n(qM,"CODE",{});var aKr=s(qse);ZRo=r(aKr,"model_type"),aKr.forEach(t),eSo=r(qM,` property of the config object (either
passed as an argument or loaded from `),Gse=n(qM,"CODE",{});var nKr=s(Gse);oSo=r(nKr,"pretrained_model_name_or_path"),nKr.forEach(t),rSo=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=n(qM,"CODE",{});var sKr=s(Ose);tSo=r(sKr,"pretrained_model_name_or_path"),sKr.forEach(t),aSo=r(qM,":"),qM.forEach(t),nSo=i(zt),Xse=n(zt,"UL",{});var lKr=s(Xse);R5=n(lKr,"LI",{});var Lwe=s(R5);Vse=n(Lwe,"STRONG",{});var iKr=s(Vse);sSo=r(iKr,"tapas"),iKr.forEach(t),lSo=r(Lwe," \u2014 "),xj=n(Lwe,"A",{href:!0});var dKr=s(xj);iSo=r(dKr,"TapasForQuestionAnswering"),dKr.forEach(t),dSo=r(Lwe," (TAPAS model)"),Lwe.forEach(t),lKr.forEach(t),cSo=i(zt),S5=n(zt,"P",{});var Bwe=s(S5);fSo=r(Bwe,"The model is set in evaluation mode by default using "),zse=n(Bwe,"CODE",{});var cKr=s(zse);mSo=r(cKr,"model.eval()"),cKr.forEach(t),gSo=r(Bwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=n(Bwe,"CODE",{});var fKr=s(Wse);hSo=r(fKr,"model.train()"),fKr.forEach(t),Bwe.forEach(t),pSo=i(zt),Qse=n(zt,"P",{});var mKr=s(Qse);_So=r(mKr,"Examples:"),mKr.forEach(t),uSo=i(zt),m(Ly.$$.fragment,zt),zt.forEach(t),ll.forEach(t),CBe=i(c),Fd=n(c,"H2",{class:!0});var Bke=s(Fd);P5=n(Bke,"A",{id:!0,class:!0,href:!0});var gKr=s(P5);Hse=n(gKr,"SPAN",{});var hKr=s(Hse);m(By.$$.fragment,hKr),hKr.forEach(t),gKr.forEach(t),bSo=i(Bke),Use=n(Bke,"SPAN",{});var pKr=s(Use);vSo=r(pKr,"AutoModelForImageClassification"),pKr.forEach(t),Bke.forEach(t),MBe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(xy.$$.fragment,dl),TSo=i(dl),Cd=n(dl,"P",{});var dz=s(Cd);FSo=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jse=n(dz,"CODE",{});var _Kr=s(Jse);CSo=r(_Kr,"from_pretrained()"),_Kr.forEach(t),MSo=r(dz,"class method or the "),Yse=n(dz,"CODE",{});var uKr=s(Yse);ESo=r(uKr,"from_config()"),uKr.forEach(t),ySo=r(dz,`class
method.`),dz.forEach(t),wSo=i(dl),ky=n(dl,"P",{});var xke=s(ky);ASo=r(xke,"This class cannot be instantiated directly using "),Kse=n(xke,"CODE",{});var bKr=s(Kse);LSo=r(bKr,"__init__()"),bKr.forEach(t),BSo=r(xke," (throws an error)."),xke.forEach(t),xSo=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);m(Ry.$$.fragment,cl),kSo=i(cl),Zse=n(cl,"P",{});var vKr=s(Zse);RSo=r(vKr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vKr.forEach(t),SSo=i(cl),Md=n(cl,"P",{});var cz=s(Md);PSo=r(cz,`Note:
Loading a model from its configuration file does `),ele=n(cz,"STRONG",{});var TKr=s(ele);$So=r(TKr,"not"),TKr.forEach(t),ISo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=n(cz,"CODE",{});var FKr=s(ole);DSo=r(FKr,"from_pretrained()"),FKr.forEach(t),jSo=r(cz,"to load the model weights."),cz.forEach(t),NSo=i(cl),rle=n(cl,"P",{});var CKr=s(rle);qSo=r(CKr,"Examples:"),CKr.forEach(t),GSo=i(cl),m(Sy.$$.fragment,cl),cl.forEach(t),OSo=i(dl),Ve=n(dl,"DIV",{class:!0});var Wt=s(Ve);m(Py.$$.fragment,Wt),XSo=i(Wt),tle=n(Wt,"P",{});var MKr=s(tle);VSo=r(MKr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MKr.forEach(t),zSo=i(Wt),Ja=n(Wt,"P",{});var GM=s(Ja);WSo=r(GM,"The model class to instantiate is selected based on the "),ale=n(GM,"CODE",{});var EKr=s(ale);QSo=r(EKr,"model_type"),EKr.forEach(t),HSo=r(GM,` property of the config object (either
passed as an argument or loaded from `),nle=n(GM,"CODE",{});var yKr=s(nle);USo=r(yKr,"pretrained_model_name_or_path"),yKr.forEach(t),JSo=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=n(GM,"CODE",{});var wKr=s(sle);YSo=r(wKr,"pretrained_model_name_or_path"),wKr.forEach(t),KSo=r(GM,":"),GM.forEach(t),ZSo=i(Wt),he=n(Wt,"UL",{});var Me=s(he);$5=n(Me,"LI",{});var xwe=s($5);lle=n(xwe,"STRONG",{});var AKr=s(lle);ePo=r(AKr,"beit"),AKr.forEach(t),oPo=r(xwe," \u2014 "),kj=n(xwe,"A",{href:!0});var LKr=s(kj);rPo=r(LKr,"BeitForImageClassification"),LKr.forEach(t),tPo=r(xwe," (BEiT model)"),xwe.forEach(t),aPo=i(Me),I5=n(Me,"LI",{});var kwe=s(I5);ile=n(kwe,"STRONG",{});var BKr=s(ile);nPo=r(BKr,"convnext"),BKr.forEach(t),sPo=r(kwe," \u2014 "),Rj=n(kwe,"A",{href:!0});var xKr=s(Rj);lPo=r(xKr,"ConvNextForImageClassification"),xKr.forEach(t),iPo=r(kwe," (ConvNext model)"),kwe.forEach(t),dPo=i(Me),Ps=n(Me,"LI",{});var d8=s(Ps);dle=n(d8,"STRONG",{});var kKr=s(dle);cPo=r(kKr,"deit"),kKr.forEach(t),fPo=r(d8," \u2014 "),Sj=n(d8,"A",{href:!0});var RKr=s(Sj);mPo=r(RKr,"DeiTForImageClassification"),RKr.forEach(t),gPo=r(d8," or "),Pj=n(d8,"A",{href:!0});var SKr=s(Pj);hPo=r(SKr,"DeiTForImageClassificationWithTeacher"),SKr.forEach(t),pPo=r(d8," (DeiT model)"),d8.forEach(t),_Po=i(Me),D5=n(Me,"LI",{});var Rwe=s(D5);cle=n(Rwe,"STRONG",{});var PKr=s(cle);uPo=r(PKr,"imagegpt"),PKr.forEach(t),bPo=r(Rwe," \u2014 "),$j=n(Rwe,"A",{href:!0});var $Kr=s($j);vPo=r($Kr,"ImageGPTForImageClassification"),$Kr.forEach(t),TPo=r(Rwe," (ImageGPT model)"),Rwe.forEach(t),FPo=i(Me),la=n(Me,"LI",{});var Mf=s(la);fle=n(Mf,"STRONG",{});var IKr=s(fle);CPo=r(IKr,"perceiver"),IKr.forEach(t),MPo=r(Mf," \u2014 "),Ij=n(Mf,"A",{href:!0});var DKr=s(Ij);EPo=r(DKr,"PerceiverForImageClassificationLearned"),DKr.forEach(t),yPo=r(Mf," or "),Dj=n(Mf,"A",{href:!0});var jKr=s(Dj);wPo=r(jKr,"PerceiverForImageClassificationFourier"),jKr.forEach(t),APo=r(Mf," or "),jj=n(Mf,"A",{href:!0});var NKr=s(jj);LPo=r(NKr,"PerceiverForImageClassificationConvProcessing"),NKr.forEach(t),BPo=r(Mf," (Perceiver model)"),Mf.forEach(t),xPo=i(Me),j5=n(Me,"LI",{});var Swe=s(j5);mle=n(Swe,"STRONG",{});var qKr=s(mle);kPo=r(qKr,"poolformer"),qKr.forEach(t),RPo=r(Swe," \u2014 "),Nj=n(Swe,"A",{href:!0});var GKr=s(Nj);SPo=r(GKr,"PoolFormerForImageClassification"),GKr.forEach(t),PPo=r(Swe," (PoolFormer model)"),Swe.forEach(t),$Po=i(Me),N5=n(Me,"LI",{});var Pwe=s(N5);gle=n(Pwe,"STRONG",{});var OKr=s(gle);IPo=r(OKr,"resnet"),OKr.forEach(t),DPo=r(Pwe," \u2014 "),qj=n(Pwe,"A",{href:!0});var XKr=s(qj);jPo=r(XKr,"ResNetForImageClassification"),XKr.forEach(t),NPo=r(Pwe," (ResNet model)"),Pwe.forEach(t),qPo=i(Me),q5=n(Me,"LI",{});var $we=s(q5);hle=n($we,"STRONG",{});var VKr=s(hle);GPo=r(VKr,"segformer"),VKr.forEach(t),OPo=r($we," \u2014 "),Gj=n($we,"A",{href:!0});var zKr=s(Gj);XPo=r(zKr,"SegformerForImageClassification"),zKr.forEach(t),VPo=r($we," (SegFormer model)"),$we.forEach(t),zPo=i(Me),G5=n(Me,"LI",{});var Iwe=s(G5);ple=n(Iwe,"STRONG",{});var WKr=s(ple);WPo=r(WKr,"swin"),WKr.forEach(t),QPo=r(Iwe," \u2014 "),Oj=n(Iwe,"A",{href:!0});var QKr=s(Oj);HPo=r(QKr,"SwinForImageClassification"),QKr.forEach(t),UPo=r(Iwe," (Swin model)"),Iwe.forEach(t),JPo=i(Me),O5=n(Me,"LI",{});var Dwe=s(O5);_le=n(Dwe,"STRONG",{});var HKr=s(_le);YPo=r(HKr,"vit"),HKr.forEach(t),KPo=r(Dwe," \u2014 "),Xj=n(Dwe,"A",{href:!0});var UKr=s(Xj);ZPo=r(UKr,"ViTForImageClassification"),UKr.forEach(t),e$o=r(Dwe," (ViT model)"),Dwe.forEach(t),Me.forEach(t),o$o=i(Wt),X5=n(Wt,"P",{});var jwe=s(X5);r$o=r(jwe,"The model is set in evaluation mode by default using "),ule=n(jwe,"CODE",{});var JKr=s(ule);t$o=r(JKr,"model.eval()"),JKr.forEach(t),a$o=r(jwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ble=n(jwe,"CODE",{});var YKr=s(ble);n$o=r(YKr,"model.train()"),YKr.forEach(t),jwe.forEach(t),s$o=i(Wt),vle=n(Wt,"P",{});var KKr=s(vle);l$o=r(KKr,"Examples:"),KKr.forEach(t),i$o=i(Wt),m($y.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),EBe=i(c),Ed=n(c,"H2",{class:!0});var kke=s(Ed);V5=n(kke,"A",{id:!0,class:!0,href:!0});var ZKr=s(V5);Tle=n(ZKr,"SPAN",{});var eZr=s(Tle);m(Iy.$$.fragment,eZr),eZr.forEach(t),ZKr.forEach(t),d$o=i(kke),Fle=n(kke,"SPAN",{});var oZr=s(Fle);c$o=r(oZr,"AutoModelForVision2Seq"),oZr.forEach(t),kke.forEach(t),yBe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(Dy.$$.fragment,fl),f$o=i(fl),yd=n(fl,"P",{});var fz=s(yd);m$o=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cle=n(fz,"CODE",{});var rZr=s(Cle);g$o=r(rZr,"from_pretrained()"),rZr.forEach(t),h$o=r(fz,"class method or the "),Mle=n(fz,"CODE",{});var tZr=s(Mle);p$o=r(tZr,"from_config()"),tZr.forEach(t),_$o=r(fz,`class
method.`),fz.forEach(t),u$o=i(fl),jy=n(fl,"P",{});var Rke=s(jy);b$o=r(Rke,"This class cannot be instantiated directly using "),Ele=n(Rke,"CODE",{});var aZr=s(Ele);v$o=r(aZr,"__init__()"),aZr.forEach(t),T$o=r(Rke," (throws an error)."),Rke.forEach(t),F$o=i(fl),Kr=n(fl,"DIV",{class:!0});var ml=s(Kr);m(Ny.$$.fragment,ml),C$o=i(ml),yle=n(ml,"P",{});var nZr=s(yle);M$o=r(nZr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nZr.forEach(t),E$o=i(ml),wd=n(ml,"P",{});var mz=s(wd);y$o=r(mz,`Note:
Loading a model from its configuration file does `),wle=n(mz,"STRONG",{});var sZr=s(wle);w$o=r(sZr,"not"),sZr.forEach(t),A$o=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ale=n(mz,"CODE",{});var lZr=s(Ale);L$o=r(lZr,"from_pretrained()"),lZr.forEach(t),B$o=r(mz,"to load the model weights."),mz.forEach(t),x$o=i(ml),Lle=n(ml,"P",{});var iZr=s(Lle);k$o=r(iZr,"Examples:"),iZr.forEach(t),R$o=i(ml),m(qy.$$.fragment,ml),ml.forEach(t),S$o=i(fl),ze=n(fl,"DIV",{class:!0});var Qt=s(ze);m(Gy.$$.fragment,Qt),P$o=i(Qt),Ble=n(Qt,"P",{});var dZr=s(Ble);$$o=r(dZr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dZr.forEach(t),I$o=i(Qt),Ya=n(Qt,"P",{});var OM=s(Ya);D$o=r(OM,"The model class to instantiate is selected based on the "),xle=n(OM,"CODE",{});var cZr=s(xle);j$o=r(cZr,"model_type"),cZr.forEach(t),N$o=r(OM,` property of the config object (either
passed as an argument or loaded from `),kle=n(OM,"CODE",{});var fZr=s(kle);q$o=r(fZr,"pretrained_model_name_or_path"),fZr.forEach(t),G$o=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rle=n(OM,"CODE",{});var mZr=s(Rle);O$o=r(mZr,"pretrained_model_name_or_path"),mZr.forEach(t),X$o=r(OM,":"),OM.forEach(t),V$o=i(Qt),Sle=n(Qt,"UL",{});var gZr=s(Sle);z5=n(gZr,"LI",{});var Nwe=s(z5);Ple=n(Nwe,"STRONG",{});var hZr=s(Ple);z$o=r(hZr,"vision-encoder-decoder"),hZr.forEach(t),W$o=r(Nwe," \u2014 "),Vj=n(Nwe,"A",{href:!0});var pZr=s(Vj);Q$o=r(pZr,"VisionEncoderDecoderModel"),pZr.forEach(t),H$o=r(Nwe," (Vision Encoder decoder model)"),Nwe.forEach(t),gZr.forEach(t),U$o=i(Qt),W5=n(Qt,"P",{});var qwe=s(W5);J$o=r(qwe,"The model is set in evaluation mode by default using "),$le=n(qwe,"CODE",{});var _Zr=s($le);Y$o=r(_Zr,"model.eval()"),_Zr.forEach(t),K$o=r(qwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ile=n(qwe,"CODE",{});var uZr=s(Ile);Z$o=r(uZr,"model.train()"),uZr.forEach(t),qwe.forEach(t),eIo=i(Qt),Dle=n(Qt,"P",{});var bZr=s(Dle);oIo=r(bZr,"Examples:"),bZr.forEach(t),rIo=i(Qt),m(Oy.$$.fragment,Qt),Qt.forEach(t),fl.forEach(t),wBe=i(c),Ad=n(c,"H2",{class:!0});var Ske=s(Ad);Q5=n(Ske,"A",{id:!0,class:!0,href:!0});var vZr=s(Q5);jle=n(vZr,"SPAN",{});var TZr=s(jle);m(Xy.$$.fragment,TZr),TZr.forEach(t),vZr.forEach(t),tIo=i(Ske),Nle=n(Ske,"SPAN",{});var FZr=s(Nle);aIo=r(FZr,"AutoModelForAudioClassification"),FZr.forEach(t),Ske.forEach(t),ABe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(Vy.$$.fragment,gl),nIo=i(gl),Ld=n(gl,"P",{});var gz=s(Ld);sIo=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),qle=n(gz,"CODE",{});var CZr=s(qle);lIo=r(CZr,"from_pretrained()"),CZr.forEach(t),iIo=r(gz,"class method or the "),Gle=n(gz,"CODE",{});var MZr=s(Gle);dIo=r(MZr,"from_config()"),MZr.forEach(t),cIo=r(gz,`class
method.`),gz.forEach(t),fIo=i(gl),zy=n(gl,"P",{});var Pke=s(zy);mIo=r(Pke,"This class cannot be instantiated directly using "),Ole=n(Pke,"CODE",{});var EZr=s(Ole);gIo=r(EZr,"__init__()"),EZr.forEach(t),hIo=r(Pke," (throws an error)."),Pke.forEach(t),pIo=i(gl),Zr=n(gl,"DIV",{class:!0});var hl=s(Zr);m(Wy.$$.fragment,hl),_Io=i(hl),Xle=n(hl,"P",{});var yZr=s(Xle);uIo=r(yZr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),yZr.forEach(t),bIo=i(hl),Bd=n(hl,"P",{});var hz=s(Bd);vIo=r(hz,`Note:
Loading a model from its configuration file does `),Vle=n(hz,"STRONG",{});var wZr=s(Vle);TIo=r(wZr,"not"),wZr.forEach(t),FIo=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),zle=n(hz,"CODE",{});var AZr=s(zle);CIo=r(AZr,"from_pretrained()"),AZr.forEach(t),MIo=r(hz,"to load the model weights."),hz.forEach(t),EIo=i(hl),Wle=n(hl,"P",{});var LZr=s(Wle);yIo=r(LZr,"Examples:"),LZr.forEach(t),wIo=i(hl),m(Qy.$$.fragment,hl),hl.forEach(t),AIo=i(gl),We=n(gl,"DIV",{class:!0});var Ht=s(We);m(Hy.$$.fragment,Ht),LIo=i(Ht),Qle=n(Ht,"P",{});var BZr=s(Qle);BIo=r(BZr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),BZr.forEach(t),xIo=i(Ht),Ka=n(Ht,"P",{});var XM=s(Ka);kIo=r(XM,"The model class to instantiate is selected based on the "),Hle=n(XM,"CODE",{});var xZr=s(Hle);RIo=r(xZr,"model_type"),xZr.forEach(t),SIo=r(XM,` property of the config object (either
passed as an argument or loaded from `),Ule=n(XM,"CODE",{});var kZr=s(Ule);PIo=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),$Io=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jle=n(XM,"CODE",{});var RZr=s(Jle);IIo=r(RZr,"pretrained_model_name_or_path"),RZr.forEach(t),DIo=r(XM,":"),XM.forEach(t),jIo=i(Ht),Le=n(Ht,"UL",{});var No=s(Le);H5=n(No,"LI",{});var Gwe=s(H5);Yle=n(Gwe,"STRONG",{});var SZr=s(Yle);NIo=r(SZr,"data2vec-audio"),SZr.forEach(t),qIo=r(Gwe," \u2014 "),zj=n(Gwe,"A",{href:!0});var PZr=s(zj);GIo=r(PZr,"Data2VecAudioForSequenceClassification"),PZr.forEach(t),OIo=r(Gwe," (Data2VecAudio model)"),Gwe.forEach(t),XIo=i(No),U5=n(No,"LI",{});var Owe=s(U5);Kle=n(Owe,"STRONG",{});var $Zr=s(Kle);VIo=r($Zr,"hubert"),$Zr.forEach(t),zIo=r(Owe," \u2014 "),Wj=n(Owe,"A",{href:!0});var IZr=s(Wj);WIo=r(IZr,"HubertForSequenceClassification"),IZr.forEach(t),QIo=r(Owe," (Hubert model)"),Owe.forEach(t),HIo=i(No),J5=n(No,"LI",{});var Xwe=s(J5);Zle=n(Xwe,"STRONG",{});var DZr=s(Zle);UIo=r(DZr,"sew"),DZr.forEach(t),JIo=r(Xwe," \u2014 "),Qj=n(Xwe,"A",{href:!0});var jZr=s(Qj);YIo=r(jZr,"SEWForSequenceClassification"),jZr.forEach(t),KIo=r(Xwe," (SEW model)"),Xwe.forEach(t),ZIo=i(No),Y5=n(No,"LI",{});var Vwe=s(Y5);eie=n(Vwe,"STRONG",{});var NZr=s(eie);eDo=r(NZr,"sew-d"),NZr.forEach(t),oDo=r(Vwe," \u2014 "),Hj=n(Vwe,"A",{href:!0});var qZr=s(Hj);rDo=r(qZr,"SEWDForSequenceClassification"),qZr.forEach(t),tDo=r(Vwe," (SEW-D model)"),Vwe.forEach(t),aDo=i(No),K5=n(No,"LI",{});var zwe=s(K5);oie=n(zwe,"STRONG",{});var GZr=s(oie);nDo=r(GZr,"unispeech"),GZr.forEach(t),sDo=r(zwe," \u2014 "),Uj=n(zwe,"A",{href:!0});var OZr=s(Uj);lDo=r(OZr,"UniSpeechForSequenceClassification"),OZr.forEach(t),iDo=r(zwe," (UniSpeech model)"),zwe.forEach(t),dDo=i(No),Z5=n(No,"LI",{});var Wwe=s(Z5);rie=n(Wwe,"STRONG",{});var XZr=s(rie);cDo=r(XZr,"unispeech-sat"),XZr.forEach(t),fDo=r(Wwe," \u2014 "),Jj=n(Wwe,"A",{href:!0});var VZr=s(Jj);mDo=r(VZr,"UniSpeechSatForSequenceClassification"),VZr.forEach(t),gDo=r(Wwe," (UniSpeechSat model)"),Wwe.forEach(t),hDo=i(No),ev=n(No,"LI",{});var Qwe=s(ev);tie=n(Qwe,"STRONG",{});var zZr=s(tie);pDo=r(zZr,"wav2vec2"),zZr.forEach(t),_Do=r(Qwe," \u2014 "),Yj=n(Qwe,"A",{href:!0});var WZr=s(Yj);uDo=r(WZr,"Wav2Vec2ForSequenceClassification"),WZr.forEach(t),bDo=r(Qwe," (Wav2Vec2 model)"),Qwe.forEach(t),vDo=i(No),ov=n(No,"LI",{});var Hwe=s(ov);aie=n(Hwe,"STRONG",{});var QZr=s(aie);TDo=r(QZr,"wavlm"),QZr.forEach(t),FDo=r(Hwe," \u2014 "),Kj=n(Hwe,"A",{href:!0});var HZr=s(Kj);CDo=r(HZr,"WavLMForSequenceClassification"),HZr.forEach(t),MDo=r(Hwe," (WavLM model)"),Hwe.forEach(t),No.forEach(t),EDo=i(Ht),rv=n(Ht,"P",{});var Uwe=s(rv);yDo=r(Uwe,"The model is set in evaluation mode by default using "),nie=n(Uwe,"CODE",{});var UZr=s(nie);wDo=r(UZr,"model.eval()"),UZr.forEach(t),ADo=r(Uwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sie=n(Uwe,"CODE",{});var JZr=s(sie);LDo=r(JZr,"model.train()"),JZr.forEach(t),Uwe.forEach(t),BDo=i(Ht),lie=n(Ht,"P",{});var YZr=s(lie);xDo=r(YZr,"Examples:"),YZr.forEach(t),kDo=i(Ht),m(Uy.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),LBe=i(c),xd=n(c,"H2",{class:!0});var $ke=s(xd);tv=n($ke,"A",{id:!0,class:!0,href:!0});var KZr=s(tv);iie=n(KZr,"SPAN",{});var ZZr=s(iie);m(Jy.$$.fragment,ZZr),ZZr.forEach(t),KZr.forEach(t),RDo=i($ke),die=n($ke,"SPAN",{});var eet=s(die);SDo=r(eet,"AutoModelForAudioFrameClassification"),eet.forEach(t),$ke.forEach(t),BBe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(Yy.$$.fragment,pl),PDo=i(pl),kd=n(pl,"P",{});var pz=s(kd);$Do=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cie=n(pz,"CODE",{});var oet=s(cie);IDo=r(oet,"from_pretrained()"),oet.forEach(t),DDo=r(pz,"class method or the "),fie=n(pz,"CODE",{});var ret=s(fie);jDo=r(ret,"from_config()"),ret.forEach(t),NDo=r(pz,`class
method.`),pz.forEach(t),qDo=i(pl),Ky=n(pl,"P",{});var Ike=s(Ky);GDo=r(Ike,"This class cannot be instantiated directly using "),mie=n(Ike,"CODE",{});var tet=s(mie);ODo=r(tet,"__init__()"),tet.forEach(t),XDo=r(Ike," (throws an error)."),Ike.forEach(t),VDo=i(pl),et=n(pl,"DIV",{class:!0});var _l=s(et);m(Zy.$$.fragment,_l),zDo=i(_l),gie=n(_l,"P",{});var aet=s(gie);WDo=r(aet,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),aet.forEach(t),QDo=i(_l),Rd=n(_l,"P",{});var _z=s(Rd);HDo=r(_z,`Note:
Loading a model from its configuration file does `),hie=n(_z,"STRONG",{});var net=s(hie);UDo=r(net,"not"),net.forEach(t),JDo=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),pie=n(_z,"CODE",{});var set=s(pie);YDo=r(set,"from_pretrained()"),set.forEach(t),KDo=r(_z,"to load the model weights."),_z.forEach(t),ZDo=i(_l),_ie=n(_l,"P",{});var iet=s(_ie);ejo=r(iet,"Examples:"),iet.forEach(t),ojo=i(_l),m(ew.$$.fragment,_l),_l.forEach(t),rjo=i(pl),Qe=n(pl,"DIV",{class:!0});var Ut=s(Qe);m(ow.$$.fragment,Ut),tjo=i(Ut),uie=n(Ut,"P",{});var det=s(uie);ajo=r(det,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),det.forEach(t),njo=i(Ut),Za=n(Ut,"P",{});var VM=s(Za);sjo=r(VM,"The model class to instantiate is selected based on the "),bie=n(VM,"CODE",{});var cet=s(bie);ljo=r(cet,"model_type"),cet.forEach(t),ijo=r(VM,` property of the config object (either
passed as an argument or loaded from `),vie=n(VM,"CODE",{});var fet=s(vie);djo=r(fet,"pretrained_model_name_or_path"),fet.forEach(t),cjo=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=n(VM,"CODE",{});var met=s(Tie);fjo=r(met,"pretrained_model_name_or_path"),met.forEach(t),mjo=r(VM,":"),VM.forEach(t),gjo=i(Ut),en=n(Ut,"UL",{});var zM=s(en);av=n(zM,"LI",{});var Jwe=s(av);Fie=n(Jwe,"STRONG",{});var get=s(Fie);hjo=r(get,"data2vec-audio"),get.forEach(t),pjo=r(Jwe," \u2014 "),Zj=n(Jwe,"A",{href:!0});var het=s(Zj);_jo=r(het,"Data2VecAudioForAudioFrameClassification"),het.forEach(t),ujo=r(Jwe," (Data2VecAudio model)"),Jwe.forEach(t),bjo=i(zM),nv=n(zM,"LI",{});var Ywe=s(nv);Cie=n(Ywe,"STRONG",{});var pet=s(Cie);vjo=r(pet,"unispeech-sat"),pet.forEach(t),Tjo=r(Ywe," \u2014 "),eN=n(Ywe,"A",{href:!0});var _et=s(eN);Fjo=r(_et,"UniSpeechSatForAudioFrameClassification"),_et.forEach(t),Cjo=r(Ywe," (UniSpeechSat model)"),Ywe.forEach(t),Mjo=i(zM),sv=n(zM,"LI",{});var Kwe=s(sv);Mie=n(Kwe,"STRONG",{});var uet=s(Mie);Ejo=r(uet,"wav2vec2"),uet.forEach(t),yjo=r(Kwe," \u2014 "),oN=n(Kwe,"A",{href:!0});var bet=s(oN);wjo=r(bet,"Wav2Vec2ForAudioFrameClassification"),bet.forEach(t),Ajo=r(Kwe," (Wav2Vec2 model)"),Kwe.forEach(t),Ljo=i(zM),lv=n(zM,"LI",{});var Zwe=s(lv);Eie=n(Zwe,"STRONG",{});var vet=s(Eie);Bjo=r(vet,"wavlm"),vet.forEach(t),xjo=r(Zwe," \u2014 "),rN=n(Zwe,"A",{href:!0});var Tet=s(rN);kjo=r(Tet,"WavLMForAudioFrameClassification"),Tet.forEach(t),Rjo=r(Zwe," (WavLM model)"),Zwe.forEach(t),zM.forEach(t),Sjo=i(Ut),iv=n(Ut,"P",{});var e6e=s(iv);Pjo=r(e6e,"The model is set in evaluation mode by default using "),yie=n(e6e,"CODE",{});var Fet=s(yie);$jo=r(Fet,"model.eval()"),Fet.forEach(t),Ijo=r(e6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=n(e6e,"CODE",{});var Cet=s(wie);Djo=r(Cet,"model.train()"),Cet.forEach(t),e6e.forEach(t),jjo=i(Ut),Aie=n(Ut,"P",{});var Met=s(Aie);Njo=r(Met,"Examples:"),Met.forEach(t),qjo=i(Ut),m(rw.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),xBe=i(c),Sd=n(c,"H2",{class:!0});var Dke=s(Sd);dv=n(Dke,"A",{id:!0,class:!0,href:!0});var Eet=s(dv);Lie=n(Eet,"SPAN",{});var yet=s(Lie);m(tw.$$.fragment,yet),yet.forEach(t),Eet.forEach(t),Gjo=i(Dke),Bie=n(Dke,"SPAN",{});var wet=s(Bie);Ojo=r(wet,"AutoModelForCTC"),wet.forEach(t),Dke.forEach(t),kBe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(aw.$$.fragment,ul),Xjo=i(ul),Pd=n(ul,"P",{});var uz=s(Pd);Vjo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),xie=n(uz,"CODE",{});var Aet=s(xie);zjo=r(Aet,"from_pretrained()"),Aet.forEach(t),Wjo=r(uz,"class method or the "),kie=n(uz,"CODE",{});var Let=s(kie);Qjo=r(Let,"from_config()"),Let.forEach(t),Hjo=r(uz,`class
method.`),uz.forEach(t),Ujo=i(ul),nw=n(ul,"P",{});var jke=s(nw);Jjo=r(jke,"This class cannot be instantiated directly using "),Rie=n(jke,"CODE",{});var Bet=s(Rie);Yjo=r(Bet,"__init__()"),Bet.forEach(t),Kjo=r(jke," (throws an error)."),jke.forEach(t),Zjo=i(ul),ot=n(ul,"DIV",{class:!0});var bl=s(ot);m(sw.$$.fragment,bl),eNo=i(bl),Sie=n(bl,"P",{});var xet=s(Sie);oNo=r(xet,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xet.forEach(t),rNo=i(bl),$d=n(bl,"P",{});var bz=s($d);tNo=r(bz,`Note:
Loading a model from its configuration file does `),Pie=n(bz,"STRONG",{});var ket=s(Pie);aNo=r(ket,"not"),ket.forEach(t),nNo=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=n(bz,"CODE",{});var Ret=s($ie);sNo=r(Ret,"from_pretrained()"),Ret.forEach(t),lNo=r(bz,"to load the model weights."),bz.forEach(t),iNo=i(bl),Iie=n(bl,"P",{});var Set=s(Iie);dNo=r(Set,"Examples:"),Set.forEach(t),cNo=i(bl),m(lw.$$.fragment,bl),bl.forEach(t),fNo=i(ul),He=n(ul,"DIV",{class:!0});var Jt=s(He);m(iw.$$.fragment,Jt),mNo=i(Jt),Die=n(Jt,"P",{});var Pet=s(Die);gNo=r(Pet,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Pet.forEach(t),hNo=i(Jt),on=n(Jt,"P",{});var WM=s(on);pNo=r(WM,"The model class to instantiate is selected based on the "),jie=n(WM,"CODE",{});var $et=s(jie);_No=r($et,"model_type"),$et.forEach(t),uNo=r(WM,` property of the config object (either
passed as an argument or loaded from `),Nie=n(WM,"CODE",{});var Iet=s(Nie);bNo=r(Iet,"pretrained_model_name_or_path"),Iet.forEach(t),vNo=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(WM,"CODE",{});var Det=s(qie);TNo=r(Det,"pretrained_model_name_or_path"),Det.forEach(t),FNo=r(WM,":"),WM.forEach(t),CNo=i(Jt),Be=n(Jt,"UL",{});var qo=s(Be);cv=n(qo,"LI",{});var o6e=s(cv);Gie=n(o6e,"STRONG",{});var jet=s(Gie);MNo=r(jet,"data2vec-audio"),jet.forEach(t),ENo=r(o6e," \u2014 "),tN=n(o6e,"A",{href:!0});var Net=s(tN);yNo=r(Net,"Data2VecAudioForCTC"),Net.forEach(t),wNo=r(o6e," (Data2VecAudio model)"),o6e.forEach(t),ANo=i(qo),fv=n(qo,"LI",{});var r6e=s(fv);Oie=n(r6e,"STRONG",{});var qet=s(Oie);LNo=r(qet,"hubert"),qet.forEach(t),BNo=r(r6e," \u2014 "),aN=n(r6e,"A",{href:!0});var Get=s(aN);xNo=r(Get,"HubertForCTC"),Get.forEach(t),kNo=r(r6e," (Hubert model)"),r6e.forEach(t),RNo=i(qo),mv=n(qo,"LI",{});var t6e=s(mv);Xie=n(t6e,"STRONG",{});var Oet=s(Xie);SNo=r(Oet,"sew"),Oet.forEach(t),PNo=r(t6e," \u2014 "),nN=n(t6e,"A",{href:!0});var Xet=s(nN);$No=r(Xet,"SEWForCTC"),Xet.forEach(t),INo=r(t6e," (SEW model)"),t6e.forEach(t),DNo=i(qo),gv=n(qo,"LI",{});var a6e=s(gv);Vie=n(a6e,"STRONG",{});var Vet=s(Vie);jNo=r(Vet,"sew-d"),Vet.forEach(t),NNo=r(a6e," \u2014 "),sN=n(a6e,"A",{href:!0});var zet=s(sN);qNo=r(zet,"SEWDForCTC"),zet.forEach(t),GNo=r(a6e," (SEW-D model)"),a6e.forEach(t),ONo=i(qo),hv=n(qo,"LI",{});var n6e=s(hv);zie=n(n6e,"STRONG",{});var Wet=s(zie);XNo=r(Wet,"unispeech"),Wet.forEach(t),VNo=r(n6e," \u2014 "),lN=n(n6e,"A",{href:!0});var Qet=s(lN);zNo=r(Qet,"UniSpeechForCTC"),Qet.forEach(t),WNo=r(n6e," (UniSpeech model)"),n6e.forEach(t),QNo=i(qo),pv=n(qo,"LI",{});var s6e=s(pv);Wie=n(s6e,"STRONG",{});var Het=s(Wie);HNo=r(Het,"unispeech-sat"),Het.forEach(t),UNo=r(s6e," \u2014 "),iN=n(s6e,"A",{href:!0});var Uet=s(iN);JNo=r(Uet,"UniSpeechSatForCTC"),Uet.forEach(t),YNo=r(s6e," (UniSpeechSat model)"),s6e.forEach(t),KNo=i(qo),_v=n(qo,"LI",{});var l6e=s(_v);Qie=n(l6e,"STRONG",{});var Jet=s(Qie);ZNo=r(Jet,"wav2vec2"),Jet.forEach(t),eqo=r(l6e," \u2014 "),dN=n(l6e,"A",{href:!0});var Yet=s(dN);oqo=r(Yet,"Wav2Vec2ForCTC"),Yet.forEach(t),rqo=r(l6e," (Wav2Vec2 model)"),l6e.forEach(t),tqo=i(qo),uv=n(qo,"LI",{});var i6e=s(uv);Hie=n(i6e,"STRONG",{});var Ket=s(Hie);aqo=r(Ket,"wavlm"),Ket.forEach(t),nqo=r(i6e," \u2014 "),cN=n(i6e,"A",{href:!0});var Zet=s(cN);sqo=r(Zet,"WavLMForCTC"),Zet.forEach(t),lqo=r(i6e," (WavLM model)"),i6e.forEach(t),qo.forEach(t),iqo=i(Jt),bv=n(Jt,"P",{});var d6e=s(bv);dqo=r(d6e,"The model is set in evaluation mode by default using "),Uie=n(d6e,"CODE",{});var eot=s(Uie);cqo=r(eot,"model.eval()"),eot.forEach(t),fqo=r(d6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=n(d6e,"CODE",{});var oot=s(Jie);mqo=r(oot,"model.train()"),oot.forEach(t),d6e.forEach(t),gqo=i(Jt),Yie=n(Jt,"P",{});var rot=s(Yie);hqo=r(rot,"Examples:"),rot.forEach(t),pqo=i(Jt),m(dw.$$.fragment,Jt),Jt.forEach(t),ul.forEach(t),RBe=i(c),Id=n(c,"H2",{class:!0});var Nke=s(Id);vv=n(Nke,"A",{id:!0,class:!0,href:!0});var tot=s(vv);Kie=n(tot,"SPAN",{});var aot=s(Kie);m(cw.$$.fragment,aot),aot.forEach(t),tot.forEach(t),_qo=i(Nke),Zie=n(Nke,"SPAN",{});var not=s(Zie);uqo=r(not,"AutoModelForSpeechSeq2Seq"),not.forEach(t),Nke.forEach(t),SBe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(fw.$$.fragment,vl),bqo=i(vl),Dd=n(vl,"P",{});var vz=s(Dd);vqo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ede=n(vz,"CODE",{});var sot=s(ede);Tqo=r(sot,"from_pretrained()"),sot.forEach(t),Fqo=r(vz,"class method or the "),ode=n(vz,"CODE",{});var lot=s(ode);Cqo=r(lot,"from_config()"),lot.forEach(t),Mqo=r(vz,`class
method.`),vz.forEach(t),Eqo=i(vl),mw=n(vl,"P",{});var qke=s(mw);yqo=r(qke,"This class cannot be instantiated directly using "),rde=n(qke,"CODE",{});var iot=s(rde);wqo=r(iot,"__init__()"),iot.forEach(t),Aqo=r(qke," (throws an error)."),qke.forEach(t),Lqo=i(vl),rt=n(vl,"DIV",{class:!0});var Tl=s(rt);m(gw.$$.fragment,Tl),Bqo=i(Tl),tde=n(Tl,"P",{});var dot=s(tde);xqo=r(dot,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dot.forEach(t),kqo=i(Tl),jd=n(Tl,"P",{});var Tz=s(jd);Rqo=r(Tz,`Note:
Loading a model from its configuration file does `),ade=n(Tz,"STRONG",{});var cot=s(ade);Sqo=r(cot,"not"),cot.forEach(t),Pqo=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=n(Tz,"CODE",{});var fot=s(nde);$qo=r(fot,"from_pretrained()"),fot.forEach(t),Iqo=r(Tz,"to load the model weights."),Tz.forEach(t),Dqo=i(Tl),sde=n(Tl,"P",{});var mot=s(sde);jqo=r(mot,"Examples:"),mot.forEach(t),Nqo=i(Tl),m(hw.$$.fragment,Tl),Tl.forEach(t),qqo=i(vl),Ue=n(vl,"DIV",{class:!0});var Yt=s(Ue);m(pw.$$.fragment,Yt),Gqo=i(Yt),lde=n(Yt,"P",{});var got=s(lde);Oqo=r(got,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),got.forEach(t),Xqo=i(Yt),rn=n(Yt,"P",{});var QM=s(rn);Vqo=r(QM,"The model class to instantiate is selected based on the "),ide=n(QM,"CODE",{});var hot=s(ide);zqo=r(hot,"model_type"),hot.forEach(t),Wqo=r(QM,` property of the config object (either
passed as an argument or loaded from `),dde=n(QM,"CODE",{});var pot=s(dde);Qqo=r(pot,"pretrained_model_name_or_path"),pot.forEach(t),Hqo=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n(QM,"CODE",{});var _ot=s(cde);Uqo=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),Jqo=r(QM,":"),QM.forEach(t),Yqo=i(Yt),_w=n(Yt,"UL",{});var Gke=s(_w);Tv=n(Gke,"LI",{});var c6e=s(Tv);fde=n(c6e,"STRONG",{});var uot=s(fde);Kqo=r(uot,"speech-encoder-decoder"),uot.forEach(t),Zqo=r(c6e," \u2014 "),fN=n(c6e,"A",{href:!0});var bot=s(fN);eGo=r(bot,"SpeechEncoderDecoderModel"),bot.forEach(t),oGo=r(c6e," (Speech Encoder decoder model)"),c6e.forEach(t),rGo=i(Gke),Fv=n(Gke,"LI",{});var f6e=s(Fv);mde=n(f6e,"STRONG",{});var vot=s(mde);tGo=r(vot,"speech_to_text"),vot.forEach(t),aGo=r(f6e," \u2014 "),mN=n(f6e,"A",{href:!0});var Tot=s(mN);nGo=r(Tot,"Speech2TextForConditionalGeneration"),Tot.forEach(t),sGo=r(f6e," (Speech2Text model)"),f6e.forEach(t),Gke.forEach(t),lGo=i(Yt),Cv=n(Yt,"P",{});var m6e=s(Cv);iGo=r(m6e,"The model is set in evaluation mode by default using "),gde=n(m6e,"CODE",{});var Fot=s(gde);dGo=r(Fot,"model.eval()"),Fot.forEach(t),cGo=r(m6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=n(m6e,"CODE",{});var Cot=s(hde);fGo=r(Cot,"model.train()"),Cot.forEach(t),m6e.forEach(t),mGo=i(Yt),pde=n(Yt,"P",{});var Mot=s(pde);gGo=r(Mot,"Examples:"),Mot.forEach(t),hGo=i(Yt),m(uw.$$.fragment,Yt),Yt.forEach(t),vl.forEach(t),PBe=i(c),Nd=n(c,"H2",{class:!0});var Oke=s(Nd);Mv=n(Oke,"A",{id:!0,class:!0,href:!0});var Eot=s(Mv);_de=n(Eot,"SPAN",{});var yot=s(_de);m(bw.$$.fragment,yot),yot.forEach(t),Eot.forEach(t),pGo=i(Oke),ude=n(Oke,"SPAN",{});var wot=s(ude);_Go=r(wot,"AutoModelForAudioXVector"),wot.forEach(t),Oke.forEach(t),$Be=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(vw.$$.fragment,Fl),uGo=i(Fl),qd=n(Fl,"P",{});var Fz=s(qd);bGo=r(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bde=n(Fz,"CODE",{});var Aot=s(bde);vGo=r(Aot,"from_pretrained()"),Aot.forEach(t),TGo=r(Fz,"class method or the "),vde=n(Fz,"CODE",{});var Lot=s(vde);FGo=r(Lot,"from_config()"),Lot.forEach(t),CGo=r(Fz,`class
method.`),Fz.forEach(t),MGo=i(Fl),Tw=n(Fl,"P",{});var Xke=s(Tw);EGo=r(Xke,"This class cannot be instantiated directly using "),Tde=n(Xke,"CODE",{});var Bot=s(Tde);yGo=r(Bot,"__init__()"),Bot.forEach(t),wGo=r(Xke," (throws an error)."),Xke.forEach(t),AGo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Cl=s(tt);m(Fw.$$.fragment,Cl),LGo=i(Cl),Fde=n(Cl,"P",{});var xot=s(Fde);BGo=r(xot,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xot.forEach(t),xGo=i(Cl),Gd=n(Cl,"P",{});var Cz=s(Gd);kGo=r(Cz,`Note:
Loading a model from its configuration file does `),Cde=n(Cz,"STRONG",{});var kot=s(Cde);RGo=r(kot,"not"),kot.forEach(t),SGo=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mde=n(Cz,"CODE",{});var Rot=s(Mde);PGo=r(Rot,"from_pretrained()"),Rot.forEach(t),$Go=r(Cz,"to load the model weights."),Cz.forEach(t),IGo=i(Cl),Ede=n(Cl,"P",{});var Sot=s(Ede);DGo=r(Sot,"Examples:"),Sot.forEach(t),jGo=i(Cl),m(Cw.$$.fragment,Cl),Cl.forEach(t),NGo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Kt=s(Je);m(Mw.$$.fragment,Kt),qGo=i(Kt),yde=n(Kt,"P",{});var Pot=s(yde);GGo=r(Pot,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Pot.forEach(t),OGo=i(Kt),tn=n(Kt,"P",{});var HM=s(tn);XGo=r(HM,"The model class to instantiate is selected based on the "),wde=n(HM,"CODE",{});var $ot=s(wde);VGo=r($ot,"model_type"),$ot.forEach(t),zGo=r(HM,` property of the config object (either
passed as an argument or loaded from `),Ade=n(HM,"CODE",{});var Iot=s(Ade);WGo=r(Iot,"pretrained_model_name_or_path"),Iot.forEach(t),QGo=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lde=n(HM,"CODE",{});var Dot=s(Lde);HGo=r(Dot,"pretrained_model_name_or_path"),Dot.forEach(t),UGo=r(HM,":"),HM.forEach(t),JGo=i(Kt),an=n(Kt,"UL",{});var UM=s(an);Ev=n(UM,"LI",{});var g6e=s(Ev);Bde=n(g6e,"STRONG",{});var jot=s(Bde);YGo=r(jot,"data2vec-audio"),jot.forEach(t),KGo=r(g6e," \u2014 "),gN=n(g6e,"A",{href:!0});var Not=s(gN);ZGo=r(Not,"Data2VecAudioForXVector"),Not.forEach(t),eOo=r(g6e," (Data2VecAudio model)"),g6e.forEach(t),oOo=i(UM),yv=n(UM,"LI",{});var h6e=s(yv);xde=n(h6e,"STRONG",{});var qot=s(xde);rOo=r(qot,"unispeech-sat"),qot.forEach(t),tOo=r(h6e," \u2014 "),hN=n(h6e,"A",{href:!0});var Got=s(hN);aOo=r(Got,"UniSpeechSatForXVector"),Got.forEach(t),nOo=r(h6e," (UniSpeechSat model)"),h6e.forEach(t),sOo=i(UM),wv=n(UM,"LI",{});var p6e=s(wv);kde=n(p6e,"STRONG",{});var Oot=s(kde);lOo=r(Oot,"wav2vec2"),Oot.forEach(t),iOo=r(p6e," \u2014 "),pN=n(p6e,"A",{href:!0});var Xot=s(pN);dOo=r(Xot,"Wav2Vec2ForXVector"),Xot.forEach(t),cOo=r(p6e," (Wav2Vec2 model)"),p6e.forEach(t),fOo=i(UM),Av=n(UM,"LI",{});var _6e=s(Av);Rde=n(_6e,"STRONG",{});var Vot=s(Rde);mOo=r(Vot,"wavlm"),Vot.forEach(t),gOo=r(_6e," \u2014 "),_N=n(_6e,"A",{href:!0});var zot=s(_N);hOo=r(zot,"WavLMForXVector"),zot.forEach(t),pOo=r(_6e," (WavLM model)"),_6e.forEach(t),UM.forEach(t),_Oo=i(Kt),Lv=n(Kt,"P",{});var u6e=s(Lv);uOo=r(u6e,"The model is set in evaluation mode by default using "),Sde=n(u6e,"CODE",{});var Wot=s(Sde);bOo=r(Wot,"model.eval()"),Wot.forEach(t),vOo=r(u6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(u6e,"CODE",{});var Qot=s(Pde);TOo=r(Qot,"model.train()"),Qot.forEach(t),u6e.forEach(t),FOo=i(Kt),$de=n(Kt,"P",{});var Hot=s($de);COo=r(Hot,"Examples:"),Hot.forEach(t),MOo=i(Kt),m(Ew.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),IBe=i(c),Od=n(c,"H2",{class:!0});var Vke=s(Od);Bv=n(Vke,"A",{id:!0,class:!0,href:!0});var Uot=s(Bv);Ide=n(Uot,"SPAN",{});var Jot=s(Ide);m(yw.$$.fragment,Jot),Jot.forEach(t),Uot.forEach(t),EOo=i(Vke),Dde=n(Vke,"SPAN",{});var Yot=s(Dde);yOo=r(Yot,"AutoModelForMaskedImageModeling"),Yot.forEach(t),Vke.forEach(t),DBe=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(ww.$$.fragment,Ml),wOo=i(Ml),Xd=n(Ml,"P",{});var Mz=s(Xd);AOo=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),jde=n(Mz,"CODE",{});var Kot=s(jde);LOo=r(Kot,"from_pretrained()"),Kot.forEach(t),BOo=r(Mz,"class method or the "),Nde=n(Mz,"CODE",{});var Zot=s(Nde);xOo=r(Zot,"from_config()"),Zot.forEach(t),kOo=r(Mz,`class
method.`),Mz.forEach(t),ROo=i(Ml),Aw=n(Ml,"P",{});var zke=s(Aw);SOo=r(zke,"This class cannot be instantiated directly using "),qde=n(zke,"CODE",{});var ert=s(qde);POo=r(ert,"__init__()"),ert.forEach(t),$Oo=r(zke," (throws an error)."),zke.forEach(t),IOo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(Lw.$$.fragment,El),DOo=i(El),Gde=n(El,"P",{});var ort=s(Gde);jOo=r(ort,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ort.forEach(t),NOo=i(El),Vd=n(El,"P",{});var Ez=s(Vd);qOo=r(Ez,`Note:
Loading a model from its configuration file does `),Ode=n(Ez,"STRONG",{});var rrt=s(Ode);GOo=r(rrt,"not"),rrt.forEach(t),OOo=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=n(Ez,"CODE",{});var trt=s(Xde);XOo=r(trt,"from_pretrained()"),trt.forEach(t),VOo=r(Ez,"to load the model weights."),Ez.forEach(t),zOo=i(El),Vde=n(El,"P",{});var art=s(Vde);WOo=r(art,"Examples:"),art.forEach(t),QOo=i(El),m(Bw.$$.fragment,El),El.forEach(t),HOo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var Zt=s(Ye);m(xw.$$.fragment,Zt),UOo=i(Zt),zde=n(Zt,"P",{});var nrt=s(zde);JOo=r(nrt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),nrt.forEach(t),YOo=i(Zt),nn=n(Zt,"P",{});var JM=s(nn);KOo=r(JM,"The model class to instantiate is selected based on the "),Wde=n(JM,"CODE",{});var srt=s(Wde);ZOo=r(srt,"model_type"),srt.forEach(t),eXo=r(JM,` property of the config object (either
passed as an argument or loaded from `),Qde=n(JM,"CODE",{});var lrt=s(Qde);oXo=r(lrt,"pretrained_model_name_or_path"),lrt.forEach(t),rXo=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(JM,"CODE",{});var irt=s(Hde);tXo=r(irt,"pretrained_model_name_or_path"),irt.forEach(t),aXo=r(JM,":"),JM.forEach(t),nXo=i(Zt),zd=n(Zt,"UL",{});var yz=s(zd);xv=n(yz,"LI",{});var b6e=s(xv);Ude=n(b6e,"STRONG",{});var drt=s(Ude);sXo=r(drt,"deit"),drt.forEach(t),lXo=r(b6e," \u2014 "),uN=n(b6e,"A",{href:!0});var crt=s(uN);iXo=r(crt,"DeiTForMaskedImageModeling"),crt.forEach(t),dXo=r(b6e," (DeiT model)"),b6e.forEach(t),cXo=i(yz),kv=n(yz,"LI",{});var v6e=s(kv);Jde=n(v6e,"STRONG",{});var frt=s(Jde);fXo=r(frt,"swin"),frt.forEach(t),mXo=r(v6e," \u2014 "),bN=n(v6e,"A",{href:!0});var mrt=s(bN);gXo=r(mrt,"SwinForMaskedImageModeling"),mrt.forEach(t),hXo=r(v6e," (Swin model)"),v6e.forEach(t),pXo=i(yz),Rv=n(yz,"LI",{});var T6e=s(Rv);Yde=n(T6e,"STRONG",{});var grt=s(Yde);_Xo=r(grt,"vit"),grt.forEach(t),uXo=r(T6e," \u2014 "),vN=n(T6e,"A",{href:!0});var hrt=s(vN);bXo=r(hrt,"ViTForMaskedImageModeling"),hrt.forEach(t),vXo=r(T6e," (ViT model)"),T6e.forEach(t),yz.forEach(t),TXo=i(Zt),Sv=n(Zt,"P",{});var F6e=s(Sv);FXo=r(F6e,"The model is set in evaluation mode by default using "),Kde=n(F6e,"CODE",{});var prt=s(Kde);CXo=r(prt,"model.eval()"),prt.forEach(t),MXo=r(F6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=n(F6e,"CODE",{});var _rt=s(Zde);EXo=r(_rt,"model.train()"),_rt.forEach(t),F6e.forEach(t),yXo=i(Zt),ece=n(Zt,"P",{});var urt=s(ece);wXo=r(urt,"Examples:"),urt.forEach(t),AXo=i(Zt),m(kw.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),jBe=i(c),Wd=n(c,"H2",{class:!0});var Wke=s(Wd);Pv=n(Wke,"A",{id:!0,class:!0,href:!0});var brt=s(Pv);oce=n(brt,"SPAN",{});var vrt=s(oce);m(Rw.$$.fragment,vrt),vrt.forEach(t),brt.forEach(t),LXo=i(Wke),rce=n(Wke,"SPAN",{});var Trt=s(rce);BXo=r(Trt,"AutoModelForObjectDetection"),Trt.forEach(t),Wke.forEach(t),NBe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Sw.$$.fragment,yl),xXo=i(yl),Qd=n(yl,"P",{});var wz=s(Qd);kXo=r(wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),tce=n(wz,"CODE",{});var Frt=s(tce);RXo=r(Frt,"from_pretrained()"),Frt.forEach(t),SXo=r(wz,"class method or the "),ace=n(wz,"CODE",{});var Crt=s(ace);PXo=r(Crt,"from_config()"),Crt.forEach(t),$Xo=r(wz,`class
method.`),wz.forEach(t),IXo=i(yl),Pw=n(yl,"P",{});var Qke=s(Pw);DXo=r(Qke,"This class cannot be instantiated directly using "),nce=n(Qke,"CODE",{});var Mrt=s(nce);jXo=r(Mrt,"__init__()"),Mrt.forEach(t),NXo=r(Qke," (throws an error)."),Qke.forEach(t),qXo=i(yl),nt=n(yl,"DIV",{class:!0});var wl=s(nt);m($w.$$.fragment,wl),GXo=i(wl),sce=n(wl,"P",{});var Ert=s(sce);OXo=r(Ert,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ert.forEach(t),XXo=i(wl),Hd=n(wl,"P",{});var Az=s(Hd);VXo=r(Az,`Note:
Loading a model from its configuration file does `),lce=n(Az,"STRONG",{});var yrt=s(lce);zXo=r(yrt,"not"),yrt.forEach(t),WXo=r(Az,` load the model weights. It only affects the
model\u2019s configuration. Use `),ice=n(Az,"CODE",{});var wrt=s(ice);QXo=r(wrt,"from_pretrained()"),wrt.forEach(t),HXo=r(Az,"to load the model weights."),Az.forEach(t),UXo=i(wl),dce=n(wl,"P",{});var Art=s(dce);JXo=r(Art,"Examples:"),Art.forEach(t),YXo=i(wl),m(Iw.$$.fragment,wl),wl.forEach(t),KXo=i(yl),Ke=n(yl,"DIV",{class:!0});var ea=s(Ke);m(Dw.$$.fragment,ea),ZXo=i(ea),cce=n(ea,"P",{});var Lrt=s(cce);eVo=r(Lrt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lrt.forEach(t),oVo=i(ea),sn=n(ea,"P",{});var YM=s(sn);rVo=r(YM,"The model class to instantiate is selected based on the "),fce=n(YM,"CODE",{});var Brt=s(fce);tVo=r(Brt,"model_type"),Brt.forEach(t),aVo=r(YM,` property of the config object (either
passed as an argument or loaded from `),mce=n(YM,"CODE",{});var xrt=s(mce);nVo=r(xrt,"pretrained_model_name_or_path"),xrt.forEach(t),sVo=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gce=n(YM,"CODE",{});var krt=s(gce);lVo=r(krt,"pretrained_model_name_or_path"),krt.forEach(t),iVo=r(YM,":"),YM.forEach(t),dVo=i(ea),hce=n(ea,"UL",{});var Rrt=s(hce);$v=n(Rrt,"LI",{});var C6e=s($v);pce=n(C6e,"STRONG",{});var Srt=s(pce);cVo=r(Srt,"detr"),Srt.forEach(t),fVo=r(C6e," \u2014 "),TN=n(C6e,"A",{href:!0});var Prt=s(TN);mVo=r(Prt,"DetrForObjectDetection"),Prt.forEach(t),gVo=r(C6e," (DETR model)"),C6e.forEach(t),Rrt.forEach(t),hVo=i(ea),Iv=n(ea,"P",{});var M6e=s(Iv);pVo=r(M6e,"The model is set in evaluation mode by default using "),_ce=n(M6e,"CODE",{});var $rt=s(_ce);_Vo=r($rt,"model.eval()"),$rt.forEach(t),uVo=r(M6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=n(M6e,"CODE",{});var Irt=s(uce);bVo=r(Irt,"model.train()"),Irt.forEach(t),M6e.forEach(t),vVo=i(ea),bce=n(ea,"P",{});var Drt=s(bce);TVo=r(Drt,"Examples:"),Drt.forEach(t),FVo=i(ea),m(jw.$$.fragment,ea),ea.forEach(t),yl.forEach(t),qBe=i(c),Ud=n(c,"H2",{class:!0});var Hke=s(Ud);Dv=n(Hke,"A",{id:!0,class:!0,href:!0});var jrt=s(Dv);vce=n(jrt,"SPAN",{});var Nrt=s(vce);m(Nw.$$.fragment,Nrt),Nrt.forEach(t),jrt.forEach(t),CVo=i(Hke),Tce=n(Hke,"SPAN",{});var qrt=s(Tce);MVo=r(qrt,"AutoModelForImageSegmentation"),qrt.forEach(t),Hke.forEach(t),GBe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(qw.$$.fragment,Al),EVo=i(Al),Jd=n(Al,"P",{});var Lz=s(Jd);yVo=r(Lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Fce=n(Lz,"CODE",{});var Grt=s(Fce);wVo=r(Grt,"from_pretrained()"),Grt.forEach(t),AVo=r(Lz,"class method or the "),Cce=n(Lz,"CODE",{});var Ort=s(Cce);LVo=r(Ort,"from_config()"),Ort.forEach(t),BVo=r(Lz,`class
method.`),Lz.forEach(t),xVo=i(Al),Gw=n(Al,"P",{});var Uke=s(Gw);kVo=r(Uke,"This class cannot be instantiated directly using "),Mce=n(Uke,"CODE",{});var Xrt=s(Mce);RVo=r(Xrt,"__init__()"),Xrt.forEach(t),SVo=r(Uke," (throws an error)."),Uke.forEach(t),PVo=i(Al),st=n(Al,"DIV",{class:!0});var Ll=s(st);m(Ow.$$.fragment,Ll),$Vo=i(Ll),Ece=n(Ll,"P",{});var Vrt=s(Ece);IVo=r(Vrt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Vrt.forEach(t),DVo=i(Ll),Yd=n(Ll,"P",{});var Bz=s(Yd);jVo=r(Bz,`Note:
Loading a model from its configuration file does `),yce=n(Bz,"STRONG",{});var zrt=s(yce);NVo=r(zrt,"not"),zrt.forEach(t),qVo=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),wce=n(Bz,"CODE",{});var Wrt=s(wce);GVo=r(Wrt,"from_pretrained()"),Wrt.forEach(t),OVo=r(Bz,"to load the model weights."),Bz.forEach(t),XVo=i(Ll),Ace=n(Ll,"P",{});var Qrt=s(Ace);VVo=r(Qrt,"Examples:"),Qrt.forEach(t),zVo=i(Ll),m(Xw.$$.fragment,Ll),Ll.forEach(t),WVo=i(Al),Ze=n(Al,"DIV",{class:!0});var oa=s(Ze);m(Vw.$$.fragment,oa),QVo=i(oa),Lce=n(oa,"P",{});var Hrt=s(Lce);HVo=r(Hrt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Hrt.forEach(t),UVo=i(oa),ln=n(oa,"P",{});var KM=s(ln);JVo=r(KM,"The model class to instantiate is selected based on the "),Bce=n(KM,"CODE",{});var Urt=s(Bce);YVo=r(Urt,"model_type"),Urt.forEach(t),KVo=r(KM,` property of the config object (either
passed as an argument or loaded from `),xce=n(KM,"CODE",{});var Jrt=s(xce);ZVo=r(Jrt,"pretrained_model_name_or_path"),Jrt.forEach(t),ezo=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kce=n(KM,"CODE",{});var Yrt=s(kce);ozo=r(Yrt,"pretrained_model_name_or_path"),Yrt.forEach(t),rzo=r(KM,":"),KM.forEach(t),tzo=i(oa),Rce=n(oa,"UL",{});var Krt=s(Rce);jv=n(Krt,"LI",{});var E6e=s(jv);Sce=n(E6e,"STRONG",{});var Zrt=s(Sce);azo=r(Zrt,"detr"),Zrt.forEach(t),nzo=r(E6e," \u2014 "),FN=n(E6e,"A",{href:!0});var ett=s(FN);szo=r(ett,"DetrForSegmentation"),ett.forEach(t),lzo=r(E6e," (DETR model)"),E6e.forEach(t),Krt.forEach(t),izo=i(oa),Nv=n(oa,"P",{});var y6e=s(Nv);dzo=r(y6e,"The model is set in evaluation mode by default using "),Pce=n(y6e,"CODE",{});var ott=s(Pce);czo=r(ott,"model.eval()"),ott.forEach(t),fzo=r(y6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(y6e,"CODE",{});var rtt=s($ce);mzo=r(rtt,"model.train()"),rtt.forEach(t),y6e.forEach(t),gzo=i(oa),Ice=n(oa,"P",{});var ttt=s(Ice);hzo=r(ttt,"Examples:"),ttt.forEach(t),pzo=i(oa),m(zw.$$.fragment,oa),oa.forEach(t),Al.forEach(t),OBe=i(c),Kd=n(c,"H2",{class:!0});var Jke=s(Kd);qv=n(Jke,"A",{id:!0,class:!0,href:!0});var att=s(qv);Dce=n(att,"SPAN",{});var ntt=s(Dce);m(Ww.$$.fragment,ntt),ntt.forEach(t),att.forEach(t),_zo=i(Jke),jce=n(Jke,"SPAN",{});var stt=s(jce);uzo=r(stt,"AutoModelForSemanticSegmentation"),stt.forEach(t),Jke.forEach(t),XBe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(Qw.$$.fragment,Bl),bzo=i(Bl),Zd=n(Bl,"P",{});var xz=s(Zd);vzo=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Nce=n(xz,"CODE",{});var ltt=s(Nce);Tzo=r(ltt,"from_pretrained()"),ltt.forEach(t),Fzo=r(xz,"class method or the "),qce=n(xz,"CODE",{});var itt=s(qce);Czo=r(itt,"from_config()"),itt.forEach(t),Mzo=r(xz,`class
method.`),xz.forEach(t),Ezo=i(Bl),Hw=n(Bl,"P",{});var Yke=s(Hw);yzo=r(Yke,"This class cannot be instantiated directly using "),Gce=n(Yke,"CODE",{});var dtt=s(Gce);wzo=r(dtt,"__init__()"),dtt.forEach(t),Azo=r(Yke," (throws an error)."),Yke.forEach(t),Lzo=i(Bl),lt=n(Bl,"DIV",{class:!0});var xl=s(lt);m(Uw.$$.fragment,xl),Bzo=i(xl),Oce=n(xl,"P",{});var ctt=s(Oce);xzo=r(ctt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ctt.forEach(t),kzo=i(xl),ec=n(xl,"P",{});var kz=s(ec);Rzo=r(kz,`Note:
Loading a model from its configuration file does `),Xce=n(kz,"STRONG",{});var ftt=s(Xce);Szo=r(ftt,"not"),ftt.forEach(t),Pzo=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=n(kz,"CODE",{});var mtt=s(Vce);$zo=r(mtt,"from_pretrained()"),mtt.forEach(t),Izo=r(kz,"to load the model weights."),kz.forEach(t),Dzo=i(xl),zce=n(xl,"P",{});var gtt=s(zce);jzo=r(gtt,"Examples:"),gtt.forEach(t),Nzo=i(xl),m(Jw.$$.fragment,xl),xl.forEach(t),qzo=i(Bl),eo=n(Bl,"DIV",{class:!0});var ra=s(eo);m(Yw.$$.fragment,ra),Gzo=i(ra),Wce=n(ra,"P",{});var htt=s(Wce);Ozo=r(htt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),htt.forEach(t),Xzo=i(ra),dn=n(ra,"P",{});var ZM=s(dn);Vzo=r(ZM,"The model class to instantiate is selected based on the "),Qce=n(ZM,"CODE",{});var ptt=s(Qce);zzo=r(ptt,"model_type"),ptt.forEach(t),Wzo=r(ZM,` property of the config object (either
passed as an argument or loaded from `),Hce=n(ZM,"CODE",{});var _tt=s(Hce);Qzo=r(_tt,"pretrained_model_name_or_path"),_tt.forEach(t),Hzo=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=n(ZM,"CODE",{});var utt=s(Uce);Uzo=r(utt,"pretrained_model_name_or_path"),utt.forEach(t),Jzo=r(ZM,":"),ZM.forEach(t),Yzo=i(ra),Kw=n(ra,"UL",{});var Kke=s(Kw);Gv=n(Kke,"LI",{});var w6e=s(Gv);Jce=n(w6e,"STRONG",{});var btt=s(Jce);Kzo=r(btt,"beit"),btt.forEach(t),Zzo=r(w6e," \u2014 "),CN=n(w6e,"A",{href:!0});var vtt=s(CN);eWo=r(vtt,"BeitForSemanticSegmentation"),vtt.forEach(t),oWo=r(w6e," (BEiT model)"),w6e.forEach(t),rWo=i(Kke),Ov=n(Kke,"LI",{});var A6e=s(Ov);Yce=n(A6e,"STRONG",{});var Ttt=s(Yce);tWo=r(Ttt,"segformer"),Ttt.forEach(t),aWo=r(A6e," \u2014 "),MN=n(A6e,"A",{href:!0});var Ftt=s(MN);nWo=r(Ftt,"SegformerForSemanticSegmentation"),Ftt.forEach(t),sWo=r(A6e," (SegFormer model)"),A6e.forEach(t),Kke.forEach(t),lWo=i(ra),Xv=n(ra,"P",{});var L6e=s(Xv);iWo=r(L6e,"The model is set in evaluation mode by default using "),Kce=n(L6e,"CODE",{});var Ctt=s(Kce);dWo=r(Ctt,"model.eval()"),Ctt.forEach(t),cWo=r(L6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=n(L6e,"CODE",{});var Mtt=s(Zce);fWo=r(Mtt,"model.train()"),Mtt.forEach(t),L6e.forEach(t),mWo=i(ra),efe=n(ra,"P",{});var Ett=s(efe);gWo=r(Ett,"Examples:"),Ett.forEach(t),hWo=i(ra),m(Zw.$$.fragment,ra),ra.forEach(t),Bl.forEach(t),VBe=i(c),oc=n(c,"H2",{class:!0});var Zke=s(oc);Vv=n(Zke,"A",{id:!0,class:!0,href:!0});var ytt=s(Vv);ofe=n(ytt,"SPAN",{});var wtt=s(ofe);m(e6.$$.fragment,wtt),wtt.forEach(t),ytt.forEach(t),pWo=i(Zke),rfe=n(Zke,"SPAN",{});var Att=s(rfe);_Wo=r(Att,"TFAutoModel"),Att.forEach(t),Zke.forEach(t),zBe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(o6.$$.fragment,kl),uWo=i(kl),rc=n(kl,"P",{});var Rz=s(rc);bWo=r(Rz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tfe=n(Rz,"CODE",{});var Ltt=s(tfe);vWo=r(Ltt,"from_pretrained()"),Ltt.forEach(t),TWo=r(Rz,"class method or the "),afe=n(Rz,"CODE",{});var Btt=s(afe);FWo=r(Btt,"from_config()"),Btt.forEach(t),CWo=r(Rz,`class
method.`),Rz.forEach(t),MWo=i(kl),r6=n(kl,"P",{});var eRe=s(r6);EWo=r(eRe,"This class cannot be instantiated directly using "),nfe=n(eRe,"CODE",{});var xtt=s(nfe);yWo=r(xtt,"__init__()"),xtt.forEach(t),wWo=r(eRe," (throws an error)."),eRe.forEach(t),AWo=i(kl),it=n(kl,"DIV",{class:!0});var Rl=s(it);m(t6.$$.fragment,Rl),LWo=i(Rl),sfe=n(Rl,"P",{});var ktt=s(sfe);BWo=r(ktt,"Instantiates one of the base model classes of the library from a configuration."),ktt.forEach(t),xWo=i(Rl),tc=n(Rl,"P",{});var Sz=s(tc);kWo=r(Sz,`Note:
Loading a model from its configuration file does `),lfe=n(Sz,"STRONG",{});var Rtt=s(lfe);RWo=r(Rtt,"not"),Rtt.forEach(t),SWo=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ife=n(Sz,"CODE",{});var Stt=s(ife);PWo=r(Stt,"from_pretrained()"),Stt.forEach(t),$Wo=r(Sz,"to load the model weights."),Sz.forEach(t),IWo=i(Rl),dfe=n(Rl,"P",{});var Ptt=s(dfe);DWo=r(Ptt,"Examples:"),Ptt.forEach(t),jWo=i(Rl),m(a6.$$.fragment,Rl),Rl.forEach(t),NWo=i(kl),go=n(kl,"DIV",{class:!0});var ca=s(go);m(n6.$$.fragment,ca),qWo=i(ca),cfe=n(ca,"P",{});var $tt=s(cfe);GWo=r($tt,"Instantiate one of the base model classes of the library from a pretrained model."),$tt.forEach(t),OWo=i(ca),cn=n(ca,"P",{});var eE=s(cn);XWo=r(eE,"The model class to instantiate is selected based on the "),ffe=n(eE,"CODE",{});var Itt=s(ffe);VWo=r(Itt,"model_type"),Itt.forEach(t),zWo=r(eE,` property of the config object (either
passed as an argument or loaded from `),mfe=n(eE,"CODE",{});var Dtt=s(mfe);WWo=r(Dtt,"pretrained_model_name_or_path"),Dtt.forEach(t),QWo=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(eE,"CODE",{});var jtt=s(gfe);HWo=r(jtt,"pretrained_model_name_or_path"),jtt.forEach(t),UWo=r(eE,":"),eE.forEach(t),JWo=i(ca),B=n(ca,"UL",{});var x=s(B);zv=n(x,"LI",{});var B6e=s(zv);hfe=n(B6e,"STRONG",{});var Ntt=s(hfe);YWo=r(Ntt,"albert"),Ntt.forEach(t),KWo=r(B6e," \u2014 "),EN=n(B6e,"A",{href:!0});var qtt=s(EN);ZWo=r(qtt,"TFAlbertModel"),qtt.forEach(t),eQo=r(B6e," (ALBERT model)"),B6e.forEach(t),oQo=i(x),Wv=n(x,"LI",{});var x6e=s(Wv);pfe=n(x6e,"STRONG",{});var Gtt=s(pfe);rQo=r(Gtt,"bart"),Gtt.forEach(t),tQo=r(x6e," \u2014 "),yN=n(x6e,"A",{href:!0});var Ott=s(yN);aQo=r(Ott,"TFBartModel"),Ott.forEach(t),nQo=r(x6e," (BART model)"),x6e.forEach(t),sQo=i(x),Qv=n(x,"LI",{});var k6e=s(Qv);_fe=n(k6e,"STRONG",{});var Xtt=s(_fe);lQo=r(Xtt,"bert"),Xtt.forEach(t),iQo=r(k6e," \u2014 "),wN=n(k6e,"A",{href:!0});var Vtt=s(wN);dQo=r(Vtt,"TFBertModel"),Vtt.forEach(t),cQo=r(k6e," (BERT model)"),k6e.forEach(t),fQo=i(x),Hv=n(x,"LI",{});var R6e=s(Hv);ufe=n(R6e,"STRONG",{});var ztt=s(ufe);mQo=r(ztt,"blenderbot"),ztt.forEach(t),gQo=r(R6e," \u2014 "),AN=n(R6e,"A",{href:!0});var Wtt=s(AN);hQo=r(Wtt,"TFBlenderbotModel"),Wtt.forEach(t),pQo=r(R6e," (Blenderbot model)"),R6e.forEach(t),_Qo=i(x),Uv=n(x,"LI",{});var S6e=s(Uv);bfe=n(S6e,"STRONG",{});var Qtt=s(bfe);uQo=r(Qtt,"blenderbot-small"),Qtt.forEach(t),bQo=r(S6e," \u2014 "),LN=n(S6e,"A",{href:!0});var Htt=s(LN);vQo=r(Htt,"TFBlenderbotSmallModel"),Htt.forEach(t),TQo=r(S6e," (BlenderbotSmall model)"),S6e.forEach(t),FQo=i(x),Jv=n(x,"LI",{});var P6e=s(Jv);vfe=n(P6e,"STRONG",{});var Utt=s(vfe);CQo=r(Utt,"camembert"),Utt.forEach(t),MQo=r(P6e," \u2014 "),BN=n(P6e,"A",{href:!0});var Jtt=s(BN);EQo=r(Jtt,"TFCamembertModel"),Jtt.forEach(t),yQo=r(P6e," (CamemBERT model)"),P6e.forEach(t),wQo=i(x),Yv=n(x,"LI",{});var $6e=s(Yv);Tfe=n($6e,"STRONG",{});var Ytt=s(Tfe);AQo=r(Ytt,"clip"),Ytt.forEach(t),LQo=r($6e," \u2014 "),xN=n($6e,"A",{href:!0});var Ktt=s(xN);BQo=r(Ktt,"TFCLIPModel"),Ktt.forEach(t),xQo=r($6e," (CLIP model)"),$6e.forEach(t),kQo=i(x),Kv=n(x,"LI",{});var I6e=s(Kv);Ffe=n(I6e,"STRONG",{});var Ztt=s(Ffe);RQo=r(Ztt,"convbert"),Ztt.forEach(t),SQo=r(I6e," \u2014 "),kN=n(I6e,"A",{href:!0});var eat=s(kN);PQo=r(eat,"TFConvBertModel"),eat.forEach(t),$Qo=r(I6e," (ConvBERT model)"),I6e.forEach(t),IQo=i(x),Zv=n(x,"LI",{});var D6e=s(Zv);Cfe=n(D6e,"STRONG",{});var oat=s(Cfe);DQo=r(oat,"convnext"),oat.forEach(t),jQo=r(D6e," \u2014 "),RN=n(D6e,"A",{href:!0});var rat=s(RN);NQo=r(rat,"TFConvNextModel"),rat.forEach(t),qQo=r(D6e," (ConvNext model)"),D6e.forEach(t),GQo=i(x),eT=n(x,"LI",{});var j6e=s(eT);Mfe=n(j6e,"STRONG",{});var tat=s(Mfe);OQo=r(tat,"ctrl"),tat.forEach(t),XQo=r(j6e," \u2014 "),SN=n(j6e,"A",{href:!0});var aat=s(SN);VQo=r(aat,"TFCTRLModel"),aat.forEach(t),zQo=r(j6e," (CTRL model)"),j6e.forEach(t),WQo=i(x),oT=n(x,"LI",{});var N6e=s(oT);Efe=n(N6e,"STRONG",{});var nat=s(Efe);QQo=r(nat,"deberta"),nat.forEach(t),HQo=r(N6e," \u2014 "),PN=n(N6e,"A",{href:!0});var sat=s(PN);UQo=r(sat,"TFDebertaModel"),sat.forEach(t),JQo=r(N6e," (DeBERTa model)"),N6e.forEach(t),YQo=i(x),rT=n(x,"LI",{});var q6e=s(rT);yfe=n(q6e,"STRONG",{});var lat=s(yfe);KQo=r(lat,"deberta-v2"),lat.forEach(t),ZQo=r(q6e," \u2014 "),$N=n(q6e,"A",{href:!0});var iat=s($N);eHo=r(iat,"TFDebertaV2Model"),iat.forEach(t),oHo=r(q6e," (DeBERTa-v2 model)"),q6e.forEach(t),rHo=i(x),tT=n(x,"LI",{});var G6e=s(tT);wfe=n(G6e,"STRONG",{});var dat=s(wfe);tHo=r(dat,"distilbert"),dat.forEach(t),aHo=r(G6e," \u2014 "),IN=n(G6e,"A",{href:!0});var cat=s(IN);nHo=r(cat,"TFDistilBertModel"),cat.forEach(t),sHo=r(G6e," (DistilBERT model)"),G6e.forEach(t),lHo=i(x),aT=n(x,"LI",{});var O6e=s(aT);Afe=n(O6e,"STRONG",{});var fat=s(Afe);iHo=r(fat,"dpr"),fat.forEach(t),dHo=r(O6e," \u2014 "),DN=n(O6e,"A",{href:!0});var mat=s(DN);cHo=r(mat,"TFDPRQuestionEncoder"),mat.forEach(t),fHo=r(O6e," (DPR model)"),O6e.forEach(t),mHo=i(x),nT=n(x,"LI",{});var X6e=s(nT);Lfe=n(X6e,"STRONG",{});var gat=s(Lfe);gHo=r(gat,"electra"),gat.forEach(t),hHo=r(X6e," \u2014 "),jN=n(X6e,"A",{href:!0});var hat=s(jN);pHo=r(hat,"TFElectraModel"),hat.forEach(t),_Ho=r(X6e," (ELECTRA model)"),X6e.forEach(t),uHo=i(x),sT=n(x,"LI",{});var V6e=s(sT);Bfe=n(V6e,"STRONG",{});var pat=s(Bfe);bHo=r(pat,"flaubert"),pat.forEach(t),vHo=r(V6e," \u2014 "),NN=n(V6e,"A",{href:!0});var _at=s(NN);THo=r(_at,"TFFlaubertModel"),_at.forEach(t),FHo=r(V6e," (FlauBERT model)"),V6e.forEach(t),CHo=i(x),$s=n(x,"LI",{});var c8=s($s);xfe=n(c8,"STRONG",{});var uat=s(xfe);MHo=r(uat,"funnel"),uat.forEach(t),EHo=r(c8," \u2014 "),qN=n(c8,"A",{href:!0});var bat=s(qN);yHo=r(bat,"TFFunnelModel"),bat.forEach(t),wHo=r(c8," or "),GN=n(c8,"A",{href:!0});var vat=s(GN);AHo=r(vat,"TFFunnelBaseModel"),vat.forEach(t),LHo=r(c8," (Funnel Transformer model)"),c8.forEach(t),BHo=i(x),lT=n(x,"LI",{});var z6e=s(lT);kfe=n(z6e,"STRONG",{});var Tat=s(kfe);xHo=r(Tat,"gpt2"),Tat.forEach(t),kHo=r(z6e," \u2014 "),ON=n(z6e,"A",{href:!0});var Fat=s(ON);RHo=r(Fat,"TFGPT2Model"),Fat.forEach(t),SHo=r(z6e," (OpenAI GPT-2 model)"),z6e.forEach(t),PHo=i(x),iT=n(x,"LI",{});var W6e=s(iT);Rfe=n(W6e,"STRONG",{});var Cat=s(Rfe);$Ho=r(Cat,"hubert"),Cat.forEach(t),IHo=r(W6e," \u2014 "),XN=n(W6e,"A",{href:!0});var Mat=s(XN);DHo=r(Mat,"TFHubertModel"),Mat.forEach(t),jHo=r(W6e," (Hubert model)"),W6e.forEach(t),NHo=i(x),dT=n(x,"LI",{});var Q6e=s(dT);Sfe=n(Q6e,"STRONG",{});var Eat=s(Sfe);qHo=r(Eat,"layoutlm"),Eat.forEach(t),GHo=r(Q6e," \u2014 "),VN=n(Q6e,"A",{href:!0});var yat=s(VN);OHo=r(yat,"TFLayoutLMModel"),yat.forEach(t),XHo=r(Q6e," (LayoutLM model)"),Q6e.forEach(t),VHo=i(x),cT=n(x,"LI",{});var H6e=s(cT);Pfe=n(H6e,"STRONG",{});var wat=s(Pfe);zHo=r(wat,"led"),wat.forEach(t),WHo=r(H6e," \u2014 "),zN=n(H6e,"A",{href:!0});var Aat=s(zN);QHo=r(Aat,"TFLEDModel"),Aat.forEach(t),HHo=r(H6e," (LED model)"),H6e.forEach(t),UHo=i(x),fT=n(x,"LI",{});var U6e=s(fT);$fe=n(U6e,"STRONG",{});var Lat=s($fe);JHo=r(Lat,"longformer"),Lat.forEach(t),YHo=r(U6e," \u2014 "),WN=n(U6e,"A",{href:!0});var Bat=s(WN);KHo=r(Bat,"TFLongformerModel"),Bat.forEach(t),ZHo=r(U6e," (Longformer model)"),U6e.forEach(t),eUo=i(x),mT=n(x,"LI",{});var J6e=s(mT);Ife=n(J6e,"STRONG",{});var xat=s(Ife);oUo=r(xat,"lxmert"),xat.forEach(t),rUo=r(J6e," \u2014 "),QN=n(J6e,"A",{href:!0});var kat=s(QN);tUo=r(kat,"TFLxmertModel"),kat.forEach(t),aUo=r(J6e," (LXMERT model)"),J6e.forEach(t),nUo=i(x),gT=n(x,"LI",{});var Y6e=s(gT);Dfe=n(Y6e,"STRONG",{});var Rat=s(Dfe);sUo=r(Rat,"marian"),Rat.forEach(t),lUo=r(Y6e," \u2014 "),HN=n(Y6e,"A",{href:!0});var Sat=s(HN);iUo=r(Sat,"TFMarianModel"),Sat.forEach(t),dUo=r(Y6e," (Marian model)"),Y6e.forEach(t),cUo=i(x),hT=n(x,"LI",{});var K6e=s(hT);jfe=n(K6e,"STRONG",{});var Pat=s(jfe);fUo=r(Pat,"mbart"),Pat.forEach(t),mUo=r(K6e," \u2014 "),UN=n(K6e,"A",{href:!0});var $at=s(UN);gUo=r($at,"TFMBartModel"),$at.forEach(t),hUo=r(K6e," (mBART model)"),K6e.forEach(t),pUo=i(x),pT=n(x,"LI",{});var Z6e=s(pT);Nfe=n(Z6e,"STRONG",{});var Iat=s(Nfe);_Uo=r(Iat,"mobilebert"),Iat.forEach(t),uUo=r(Z6e," \u2014 "),JN=n(Z6e,"A",{href:!0});var Dat=s(JN);bUo=r(Dat,"TFMobileBertModel"),Dat.forEach(t),vUo=r(Z6e," (MobileBERT model)"),Z6e.forEach(t),TUo=i(x),_T=n(x,"LI",{});var eAe=s(_T);qfe=n(eAe,"STRONG",{});var jat=s(qfe);FUo=r(jat,"mpnet"),jat.forEach(t),CUo=r(eAe," \u2014 "),YN=n(eAe,"A",{href:!0});var Nat=s(YN);MUo=r(Nat,"TFMPNetModel"),Nat.forEach(t),EUo=r(eAe," (MPNet model)"),eAe.forEach(t),yUo=i(x),uT=n(x,"LI",{});var oAe=s(uT);Gfe=n(oAe,"STRONG",{});var qat=s(Gfe);wUo=r(qat,"mt5"),qat.forEach(t),AUo=r(oAe," \u2014 "),KN=n(oAe,"A",{href:!0});var Gat=s(KN);LUo=r(Gat,"TFMT5Model"),Gat.forEach(t),BUo=r(oAe," (mT5 model)"),oAe.forEach(t),xUo=i(x),bT=n(x,"LI",{});var rAe=s(bT);Ofe=n(rAe,"STRONG",{});var Oat=s(Ofe);kUo=r(Oat,"openai-gpt"),Oat.forEach(t),RUo=r(rAe," \u2014 "),ZN=n(rAe,"A",{href:!0});var Xat=s(ZN);SUo=r(Xat,"TFOpenAIGPTModel"),Xat.forEach(t),PUo=r(rAe," (OpenAI GPT model)"),rAe.forEach(t),$Uo=i(x),vT=n(x,"LI",{});var tAe=s(vT);Xfe=n(tAe,"STRONG",{});var Vat=s(Xfe);IUo=r(Vat,"pegasus"),Vat.forEach(t),DUo=r(tAe," \u2014 "),eq=n(tAe,"A",{href:!0});var zat=s(eq);jUo=r(zat,"TFPegasusModel"),zat.forEach(t),NUo=r(tAe," (Pegasus model)"),tAe.forEach(t),qUo=i(x),TT=n(x,"LI",{});var aAe=s(TT);Vfe=n(aAe,"STRONG",{});var Wat=s(Vfe);GUo=r(Wat,"rembert"),Wat.forEach(t),OUo=r(aAe," \u2014 "),oq=n(aAe,"A",{href:!0});var Qat=s(oq);XUo=r(Qat,"TFRemBertModel"),Qat.forEach(t),VUo=r(aAe," (RemBERT model)"),aAe.forEach(t),zUo=i(x),FT=n(x,"LI",{});var nAe=s(FT);zfe=n(nAe,"STRONG",{});var Hat=s(zfe);WUo=r(Hat,"roberta"),Hat.forEach(t),QUo=r(nAe," \u2014 "),rq=n(nAe,"A",{href:!0});var Uat=s(rq);HUo=r(Uat,"TFRobertaModel"),Uat.forEach(t),UUo=r(nAe," (RoBERTa model)"),nAe.forEach(t),JUo=i(x),CT=n(x,"LI",{});var sAe=s(CT);Wfe=n(sAe,"STRONG",{});var Jat=s(Wfe);YUo=r(Jat,"roformer"),Jat.forEach(t),KUo=r(sAe," \u2014 "),tq=n(sAe,"A",{href:!0});var Yat=s(tq);ZUo=r(Yat,"TFRoFormerModel"),Yat.forEach(t),eJo=r(sAe," (RoFormer model)"),sAe.forEach(t),oJo=i(x),MT=n(x,"LI",{});var lAe=s(MT);Qfe=n(lAe,"STRONG",{});var Kat=s(Qfe);rJo=r(Kat,"speech_to_text"),Kat.forEach(t),tJo=r(lAe," \u2014 "),aq=n(lAe,"A",{href:!0});var Zat=s(aq);aJo=r(Zat,"TFSpeech2TextModel"),Zat.forEach(t),nJo=r(lAe," (Speech2Text model)"),lAe.forEach(t),sJo=i(x),ET=n(x,"LI",{});var iAe=s(ET);Hfe=n(iAe,"STRONG",{});var ent=s(Hfe);lJo=r(ent,"t5"),ent.forEach(t),iJo=r(iAe," \u2014 "),nq=n(iAe,"A",{href:!0});var ont=s(nq);dJo=r(ont,"TFT5Model"),ont.forEach(t),cJo=r(iAe," (T5 model)"),iAe.forEach(t),fJo=i(x),yT=n(x,"LI",{});var dAe=s(yT);Ufe=n(dAe,"STRONG",{});var rnt=s(Ufe);mJo=r(rnt,"tapas"),rnt.forEach(t),gJo=r(dAe," \u2014 "),sq=n(dAe,"A",{href:!0});var tnt=s(sq);hJo=r(tnt,"TFTapasModel"),tnt.forEach(t),pJo=r(dAe," (TAPAS model)"),dAe.forEach(t),_Jo=i(x),wT=n(x,"LI",{});var cAe=s(wT);Jfe=n(cAe,"STRONG",{});var ant=s(Jfe);uJo=r(ant,"transfo-xl"),ant.forEach(t),bJo=r(cAe," \u2014 "),lq=n(cAe,"A",{href:!0});var nnt=s(lq);vJo=r(nnt,"TFTransfoXLModel"),nnt.forEach(t),TJo=r(cAe," (Transformer-XL model)"),cAe.forEach(t),FJo=i(x),AT=n(x,"LI",{});var fAe=s(AT);Yfe=n(fAe,"STRONG",{});var snt=s(Yfe);CJo=r(snt,"vit"),snt.forEach(t),MJo=r(fAe," \u2014 "),iq=n(fAe,"A",{href:!0});var lnt=s(iq);EJo=r(lnt,"TFViTModel"),lnt.forEach(t),yJo=r(fAe," (ViT model)"),fAe.forEach(t),wJo=i(x),LT=n(x,"LI",{});var mAe=s(LT);Kfe=n(mAe,"STRONG",{});var int=s(Kfe);AJo=r(int,"wav2vec2"),int.forEach(t),LJo=r(mAe," \u2014 "),dq=n(mAe,"A",{href:!0});var dnt=s(dq);BJo=r(dnt,"TFWav2Vec2Model"),dnt.forEach(t),xJo=r(mAe," (Wav2Vec2 model)"),mAe.forEach(t),kJo=i(x),BT=n(x,"LI",{});var gAe=s(BT);Zfe=n(gAe,"STRONG",{});var cnt=s(Zfe);RJo=r(cnt,"xlm"),cnt.forEach(t),SJo=r(gAe," \u2014 "),cq=n(gAe,"A",{href:!0});var fnt=s(cq);PJo=r(fnt,"TFXLMModel"),fnt.forEach(t),$Jo=r(gAe," (XLM model)"),gAe.forEach(t),IJo=i(x),xT=n(x,"LI",{});var hAe=s(xT);eme=n(hAe,"STRONG",{});var mnt=s(eme);DJo=r(mnt,"xlm-roberta"),mnt.forEach(t),jJo=r(hAe," \u2014 "),fq=n(hAe,"A",{href:!0});var gnt=s(fq);NJo=r(gnt,"TFXLMRobertaModel"),gnt.forEach(t),qJo=r(hAe," (XLM-RoBERTa model)"),hAe.forEach(t),GJo=i(x),kT=n(x,"LI",{});var pAe=s(kT);ome=n(pAe,"STRONG",{});var hnt=s(ome);OJo=r(hnt,"xlnet"),hnt.forEach(t),XJo=r(pAe," \u2014 "),mq=n(pAe,"A",{href:!0});var pnt=s(mq);VJo=r(pnt,"TFXLNetModel"),pnt.forEach(t),zJo=r(pAe," (XLNet model)"),pAe.forEach(t),x.forEach(t),WJo=i(ca),rme=n(ca,"P",{});var _nt=s(rme);QJo=r(_nt,"Examples:"),_nt.forEach(t),HJo=i(ca),m(s6.$$.fragment,ca),ca.forEach(t),kl.forEach(t),WBe=i(c),ac=n(c,"H2",{class:!0});var oRe=s(ac);RT=n(oRe,"A",{id:!0,class:!0,href:!0});var unt=s(RT);tme=n(unt,"SPAN",{});var bnt=s(tme);m(l6.$$.fragment,bnt),bnt.forEach(t),unt.forEach(t),UJo=i(oRe),ame=n(oRe,"SPAN",{});var vnt=s(ame);JJo=r(vnt,"TFAutoModelForPreTraining"),vnt.forEach(t),oRe.forEach(t),QBe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(i6.$$.fragment,Sl),YJo=i(Sl),nc=n(Sl,"P",{});var Pz=s(nc);KJo=r(Pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nme=n(Pz,"CODE",{});var Tnt=s(nme);ZJo=r(Tnt,"from_pretrained()"),Tnt.forEach(t),eYo=r(Pz,"class method or the "),sme=n(Pz,"CODE",{});var Fnt=s(sme);oYo=r(Fnt,"from_config()"),Fnt.forEach(t),rYo=r(Pz,`class
method.`),Pz.forEach(t),tYo=i(Sl),d6=n(Sl,"P",{});var rRe=s(d6);aYo=r(rRe,"This class cannot be instantiated directly using "),lme=n(rRe,"CODE",{});var Cnt=s(lme);nYo=r(Cnt,"__init__()"),Cnt.forEach(t),sYo=r(rRe," (throws an error)."),rRe.forEach(t),lYo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Pl=s(dt);m(c6.$$.fragment,Pl),iYo=i(Pl),ime=n(Pl,"P",{});var Mnt=s(ime);dYo=r(Mnt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mnt.forEach(t),cYo=i(Pl),sc=n(Pl,"P",{});var $z=s(sc);fYo=r($z,`Note:
Loading a model from its configuration file does `),dme=n($z,"STRONG",{});var Ent=s(dme);mYo=r(Ent,"not"),Ent.forEach(t),gYo=r($z,` load the model weights. It only affects the
model\u2019s configuration. Use `),cme=n($z,"CODE",{});var ynt=s(cme);hYo=r(ynt,"from_pretrained()"),ynt.forEach(t),pYo=r($z,"to load the model weights."),$z.forEach(t),_Yo=i(Pl),fme=n(Pl,"P",{});var wnt=s(fme);uYo=r(wnt,"Examples:"),wnt.forEach(t),bYo=i(Pl),m(f6.$$.fragment,Pl),Pl.forEach(t),vYo=i(Sl),ho=n(Sl,"DIV",{class:!0});var fa=s(ho);m(m6.$$.fragment,fa),TYo=i(fa),mme=n(fa,"P",{});var Ant=s(mme);FYo=r(Ant,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ant.forEach(t),CYo=i(fa),fn=n(fa,"P",{});var oE=s(fn);MYo=r(oE,"The model class to instantiate is selected based on the "),gme=n(oE,"CODE",{});var Lnt=s(gme);EYo=r(Lnt,"model_type"),Lnt.forEach(t),yYo=r(oE,` property of the config object (either
passed as an argument or loaded from `),hme=n(oE,"CODE",{});var Bnt=s(hme);wYo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),AYo=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=n(oE,"CODE",{});var xnt=s(pme);LYo=r(xnt,"pretrained_model_name_or_path"),xnt.forEach(t),BYo=r(oE,":"),oE.forEach(t),xYo=i(fa),H=n(fa,"UL",{});var U=s(H);ST=n(U,"LI",{});var _Ae=s(ST);_me=n(_Ae,"STRONG",{});var knt=s(_me);kYo=r(knt,"albert"),knt.forEach(t),RYo=r(_Ae," \u2014 "),gq=n(_Ae,"A",{href:!0});var Rnt=s(gq);SYo=r(Rnt,"TFAlbertForPreTraining"),Rnt.forEach(t),PYo=r(_Ae," (ALBERT model)"),_Ae.forEach(t),$Yo=i(U),PT=n(U,"LI",{});var uAe=s(PT);ume=n(uAe,"STRONG",{});var Snt=s(ume);IYo=r(Snt,"bart"),Snt.forEach(t),DYo=r(uAe," \u2014 "),hq=n(uAe,"A",{href:!0});var Pnt=s(hq);jYo=r(Pnt,"TFBartForConditionalGeneration"),Pnt.forEach(t),NYo=r(uAe," (BART model)"),uAe.forEach(t),qYo=i(U),$T=n(U,"LI",{});var bAe=s($T);bme=n(bAe,"STRONG",{});var $nt=s(bme);GYo=r($nt,"bert"),$nt.forEach(t),OYo=r(bAe," \u2014 "),pq=n(bAe,"A",{href:!0});var Int=s(pq);XYo=r(Int,"TFBertForPreTraining"),Int.forEach(t),VYo=r(bAe," (BERT model)"),bAe.forEach(t),zYo=i(U),IT=n(U,"LI",{});var vAe=s(IT);vme=n(vAe,"STRONG",{});var Dnt=s(vme);WYo=r(Dnt,"camembert"),Dnt.forEach(t),QYo=r(vAe," \u2014 "),_q=n(vAe,"A",{href:!0});var jnt=s(_q);HYo=r(jnt,"TFCamembertForMaskedLM"),jnt.forEach(t),UYo=r(vAe," (CamemBERT model)"),vAe.forEach(t),JYo=i(U),DT=n(U,"LI",{});var TAe=s(DT);Tme=n(TAe,"STRONG",{});var Nnt=s(Tme);YYo=r(Nnt,"ctrl"),Nnt.forEach(t),KYo=r(TAe," \u2014 "),uq=n(TAe,"A",{href:!0});var qnt=s(uq);ZYo=r(qnt,"TFCTRLLMHeadModel"),qnt.forEach(t),eKo=r(TAe," (CTRL model)"),TAe.forEach(t),oKo=i(U),jT=n(U,"LI",{});var FAe=s(jT);Fme=n(FAe,"STRONG",{});var Gnt=s(Fme);rKo=r(Gnt,"distilbert"),Gnt.forEach(t),tKo=r(FAe," \u2014 "),bq=n(FAe,"A",{href:!0});var Ont=s(bq);aKo=r(Ont,"TFDistilBertForMaskedLM"),Ont.forEach(t),nKo=r(FAe," (DistilBERT model)"),FAe.forEach(t),sKo=i(U),NT=n(U,"LI",{});var CAe=s(NT);Cme=n(CAe,"STRONG",{});var Xnt=s(Cme);lKo=r(Xnt,"electra"),Xnt.forEach(t),iKo=r(CAe," \u2014 "),vq=n(CAe,"A",{href:!0});var Vnt=s(vq);dKo=r(Vnt,"TFElectraForPreTraining"),Vnt.forEach(t),cKo=r(CAe," (ELECTRA model)"),CAe.forEach(t),fKo=i(U),qT=n(U,"LI",{});var MAe=s(qT);Mme=n(MAe,"STRONG",{});var znt=s(Mme);mKo=r(znt,"flaubert"),znt.forEach(t),gKo=r(MAe," \u2014 "),Tq=n(MAe,"A",{href:!0});var Wnt=s(Tq);hKo=r(Wnt,"TFFlaubertWithLMHeadModel"),Wnt.forEach(t),pKo=r(MAe," (FlauBERT model)"),MAe.forEach(t),_Ko=i(U),GT=n(U,"LI",{});var EAe=s(GT);Eme=n(EAe,"STRONG",{});var Qnt=s(Eme);uKo=r(Qnt,"funnel"),Qnt.forEach(t),bKo=r(EAe," \u2014 "),Fq=n(EAe,"A",{href:!0});var Hnt=s(Fq);vKo=r(Hnt,"TFFunnelForPreTraining"),Hnt.forEach(t),TKo=r(EAe," (Funnel Transformer model)"),EAe.forEach(t),FKo=i(U),OT=n(U,"LI",{});var yAe=s(OT);yme=n(yAe,"STRONG",{});var Unt=s(yme);CKo=r(Unt,"gpt2"),Unt.forEach(t),MKo=r(yAe," \u2014 "),Cq=n(yAe,"A",{href:!0});var Jnt=s(Cq);EKo=r(Jnt,"TFGPT2LMHeadModel"),Jnt.forEach(t),yKo=r(yAe," (OpenAI GPT-2 model)"),yAe.forEach(t),wKo=i(U),XT=n(U,"LI",{});var wAe=s(XT);wme=n(wAe,"STRONG",{});var Ynt=s(wme);AKo=r(Ynt,"layoutlm"),Ynt.forEach(t),LKo=r(wAe," \u2014 "),Mq=n(wAe,"A",{href:!0});var Knt=s(Mq);BKo=r(Knt,"TFLayoutLMForMaskedLM"),Knt.forEach(t),xKo=r(wAe," (LayoutLM model)"),wAe.forEach(t),kKo=i(U),VT=n(U,"LI",{});var AAe=s(VT);Ame=n(AAe,"STRONG",{});var Znt=s(Ame);RKo=r(Znt,"lxmert"),Znt.forEach(t),SKo=r(AAe," \u2014 "),Eq=n(AAe,"A",{href:!0});var est=s(Eq);PKo=r(est,"TFLxmertForPreTraining"),est.forEach(t),$Ko=r(AAe," (LXMERT model)"),AAe.forEach(t),IKo=i(U),zT=n(U,"LI",{});var LAe=s(zT);Lme=n(LAe,"STRONG",{});var ost=s(Lme);DKo=r(ost,"mobilebert"),ost.forEach(t),jKo=r(LAe," \u2014 "),yq=n(LAe,"A",{href:!0});var rst=s(yq);NKo=r(rst,"TFMobileBertForPreTraining"),rst.forEach(t),qKo=r(LAe," (MobileBERT model)"),LAe.forEach(t),GKo=i(U),WT=n(U,"LI",{});var BAe=s(WT);Bme=n(BAe,"STRONG",{});var tst=s(Bme);OKo=r(tst,"mpnet"),tst.forEach(t),XKo=r(BAe," \u2014 "),wq=n(BAe,"A",{href:!0});var ast=s(wq);VKo=r(ast,"TFMPNetForMaskedLM"),ast.forEach(t),zKo=r(BAe," (MPNet model)"),BAe.forEach(t),WKo=i(U),QT=n(U,"LI",{});var xAe=s(QT);xme=n(xAe,"STRONG",{});var nst=s(xme);QKo=r(nst,"openai-gpt"),nst.forEach(t),HKo=r(xAe," \u2014 "),Aq=n(xAe,"A",{href:!0});var sst=s(Aq);UKo=r(sst,"TFOpenAIGPTLMHeadModel"),sst.forEach(t),JKo=r(xAe," (OpenAI GPT model)"),xAe.forEach(t),YKo=i(U),HT=n(U,"LI",{});var kAe=s(HT);kme=n(kAe,"STRONG",{});var lst=s(kme);KKo=r(lst,"roberta"),lst.forEach(t),ZKo=r(kAe," \u2014 "),Lq=n(kAe,"A",{href:!0});var ist=s(Lq);eZo=r(ist,"TFRobertaForMaskedLM"),ist.forEach(t),oZo=r(kAe," (RoBERTa model)"),kAe.forEach(t),rZo=i(U),UT=n(U,"LI",{});var RAe=s(UT);Rme=n(RAe,"STRONG",{});var dst=s(Rme);tZo=r(dst,"t5"),dst.forEach(t),aZo=r(RAe," \u2014 "),Bq=n(RAe,"A",{href:!0});var cst=s(Bq);nZo=r(cst,"TFT5ForConditionalGeneration"),cst.forEach(t),sZo=r(RAe," (T5 model)"),RAe.forEach(t),lZo=i(U),JT=n(U,"LI",{});var SAe=s(JT);Sme=n(SAe,"STRONG",{});var fst=s(Sme);iZo=r(fst,"tapas"),fst.forEach(t),dZo=r(SAe," \u2014 "),xq=n(SAe,"A",{href:!0});var mst=s(xq);cZo=r(mst,"TFTapasForMaskedLM"),mst.forEach(t),fZo=r(SAe," (TAPAS model)"),SAe.forEach(t),mZo=i(U),YT=n(U,"LI",{});var PAe=s(YT);Pme=n(PAe,"STRONG",{});var gst=s(Pme);gZo=r(gst,"transfo-xl"),gst.forEach(t),hZo=r(PAe," \u2014 "),kq=n(PAe,"A",{href:!0});var hst=s(kq);pZo=r(hst,"TFTransfoXLLMHeadModel"),hst.forEach(t),_Zo=r(PAe," (Transformer-XL model)"),PAe.forEach(t),uZo=i(U),KT=n(U,"LI",{});var $Ae=s(KT);$me=n($Ae,"STRONG",{});var pst=s($me);bZo=r(pst,"xlm"),pst.forEach(t),vZo=r($Ae," \u2014 "),Rq=n($Ae,"A",{href:!0});var _st=s(Rq);TZo=r(_st,"TFXLMWithLMHeadModel"),_st.forEach(t),FZo=r($Ae," (XLM model)"),$Ae.forEach(t),CZo=i(U),ZT=n(U,"LI",{});var IAe=s(ZT);Ime=n(IAe,"STRONG",{});var ust=s(Ime);MZo=r(ust,"xlm-roberta"),ust.forEach(t),EZo=r(IAe," \u2014 "),Sq=n(IAe,"A",{href:!0});var bst=s(Sq);yZo=r(bst,"TFXLMRobertaForMaskedLM"),bst.forEach(t),wZo=r(IAe," (XLM-RoBERTa model)"),IAe.forEach(t),AZo=i(U),eF=n(U,"LI",{});var DAe=s(eF);Dme=n(DAe,"STRONG",{});var vst=s(Dme);LZo=r(vst,"xlnet"),vst.forEach(t),BZo=r(DAe," \u2014 "),Pq=n(DAe,"A",{href:!0});var Tst=s(Pq);xZo=r(Tst,"TFXLNetLMHeadModel"),Tst.forEach(t),kZo=r(DAe," (XLNet model)"),DAe.forEach(t),U.forEach(t),RZo=i(fa),jme=n(fa,"P",{});var Fst=s(jme);SZo=r(Fst,"Examples:"),Fst.forEach(t),PZo=i(fa),m(g6.$$.fragment,fa),fa.forEach(t),Sl.forEach(t),HBe=i(c),lc=n(c,"H2",{class:!0});var tRe=s(lc);oF=n(tRe,"A",{id:!0,class:!0,href:!0});var Cst=s(oF);Nme=n(Cst,"SPAN",{});var Mst=s(Nme);m(h6.$$.fragment,Mst),Mst.forEach(t),Cst.forEach(t),$Zo=i(tRe),qme=n(tRe,"SPAN",{});var Est=s(qme);IZo=r(Est,"TFAutoModelForCausalLM"),Est.forEach(t),tRe.forEach(t),UBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(p6.$$.fragment,$l),DZo=i($l),ic=n($l,"P",{});var Iz=s(ic);jZo=r(Iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gme=n(Iz,"CODE",{});var yst=s(Gme);NZo=r(yst,"from_pretrained()"),yst.forEach(t),qZo=r(Iz,"class method or the "),Ome=n(Iz,"CODE",{});var wst=s(Ome);GZo=r(wst,"from_config()"),wst.forEach(t),OZo=r(Iz,`class
method.`),Iz.forEach(t),XZo=i($l),_6=n($l,"P",{});var aRe=s(_6);VZo=r(aRe,"This class cannot be instantiated directly using "),Xme=n(aRe,"CODE",{});var Ast=s(Xme);zZo=r(Ast,"__init__()"),Ast.forEach(t),WZo=r(aRe," (throws an error)."),aRe.forEach(t),QZo=i($l),ct=n($l,"DIV",{class:!0});var Il=s(ct);m(u6.$$.fragment,Il),HZo=i(Il),Vme=n(Il,"P",{});var Lst=s(Vme);UZo=r(Lst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lst.forEach(t),JZo=i(Il),dc=n(Il,"P",{});var Dz=s(dc);YZo=r(Dz,`Note:
Loading a model from its configuration file does `),zme=n(Dz,"STRONG",{});var Bst=s(zme);KZo=r(Bst,"not"),Bst.forEach(t),ZZo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=n(Dz,"CODE",{});var xst=s(Wme);eer=r(xst,"from_pretrained()"),xst.forEach(t),oer=r(Dz,"to load the model weights."),Dz.forEach(t),rer=i(Il),Qme=n(Il,"P",{});var kst=s(Qme);ter=r(kst,"Examples:"),kst.forEach(t),aer=i(Il),m(b6.$$.fragment,Il),Il.forEach(t),ner=i($l),po=n($l,"DIV",{class:!0});var ma=s(po);m(v6.$$.fragment,ma),ser=i(ma),Hme=n(ma,"P",{});var Rst=s(Hme);ler=r(Rst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rst.forEach(t),ier=i(ma),mn=n(ma,"P",{});var rE=s(mn);der=r(rE,"The model class to instantiate is selected based on the "),Ume=n(rE,"CODE",{});var Sst=s(Ume);cer=r(Sst,"model_type"),Sst.forEach(t),fer=r(rE,` property of the config object (either
passed as an argument or loaded from `),Jme=n(rE,"CODE",{});var Pst=s(Jme);mer=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),ger=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(rE,"CODE",{});var $st=s(Yme);her=r($st,"pretrained_model_name_or_path"),$st.forEach(t),per=r(rE,":"),rE.forEach(t),_er=i(ma),pe=n(ma,"UL",{});var Ee=s(pe);rF=n(Ee,"LI",{});var jAe=s(rF);Kme=n(jAe,"STRONG",{});var Ist=s(Kme);uer=r(Ist,"bert"),Ist.forEach(t),ber=r(jAe," \u2014 "),$q=n(jAe,"A",{href:!0});var Dst=s($q);ver=r(Dst,"TFBertLMHeadModel"),Dst.forEach(t),Ter=r(jAe," (BERT model)"),jAe.forEach(t),Fer=i(Ee),tF=n(Ee,"LI",{});var NAe=s(tF);Zme=n(NAe,"STRONG",{});var jst=s(Zme);Cer=r(jst,"ctrl"),jst.forEach(t),Mer=r(NAe," \u2014 "),Iq=n(NAe,"A",{href:!0});var Nst=s(Iq);Eer=r(Nst,"TFCTRLLMHeadModel"),Nst.forEach(t),yer=r(NAe," (CTRL model)"),NAe.forEach(t),wer=i(Ee),aF=n(Ee,"LI",{});var qAe=s(aF);ege=n(qAe,"STRONG",{});var qst=s(ege);Aer=r(qst,"gpt2"),qst.forEach(t),Ler=r(qAe," \u2014 "),Dq=n(qAe,"A",{href:!0});var Gst=s(Dq);Ber=r(Gst,"TFGPT2LMHeadModel"),Gst.forEach(t),xer=r(qAe," (OpenAI GPT-2 model)"),qAe.forEach(t),ker=i(Ee),nF=n(Ee,"LI",{});var GAe=s(nF);oge=n(GAe,"STRONG",{});var Ost=s(oge);Rer=r(Ost,"openai-gpt"),Ost.forEach(t),Ser=r(GAe," \u2014 "),jq=n(GAe,"A",{href:!0});var Xst=s(jq);Per=r(Xst,"TFOpenAIGPTLMHeadModel"),Xst.forEach(t),$er=r(GAe," (OpenAI GPT model)"),GAe.forEach(t),Ier=i(Ee),sF=n(Ee,"LI",{});var OAe=s(sF);rge=n(OAe,"STRONG",{});var Vst=s(rge);Der=r(Vst,"rembert"),Vst.forEach(t),jer=r(OAe," \u2014 "),Nq=n(OAe,"A",{href:!0});var zst=s(Nq);Ner=r(zst,"TFRemBertForCausalLM"),zst.forEach(t),qer=r(OAe," (RemBERT model)"),OAe.forEach(t),Ger=i(Ee),lF=n(Ee,"LI",{});var XAe=s(lF);tge=n(XAe,"STRONG",{});var Wst=s(tge);Oer=r(Wst,"roberta"),Wst.forEach(t),Xer=r(XAe," \u2014 "),qq=n(XAe,"A",{href:!0});var Qst=s(qq);Ver=r(Qst,"TFRobertaForCausalLM"),Qst.forEach(t),zer=r(XAe," (RoBERTa model)"),XAe.forEach(t),Wer=i(Ee),iF=n(Ee,"LI",{});var VAe=s(iF);age=n(VAe,"STRONG",{});var Hst=s(age);Qer=r(Hst,"roformer"),Hst.forEach(t),Her=r(VAe," \u2014 "),Gq=n(VAe,"A",{href:!0});var Ust=s(Gq);Uer=r(Ust,"TFRoFormerForCausalLM"),Ust.forEach(t),Jer=r(VAe," (RoFormer model)"),VAe.forEach(t),Yer=i(Ee),dF=n(Ee,"LI",{});var zAe=s(dF);nge=n(zAe,"STRONG",{});var Jst=s(nge);Ker=r(Jst,"transfo-xl"),Jst.forEach(t),Zer=r(zAe," \u2014 "),Oq=n(zAe,"A",{href:!0});var Yst=s(Oq);eor=r(Yst,"TFTransfoXLLMHeadModel"),Yst.forEach(t),oor=r(zAe," (Transformer-XL model)"),zAe.forEach(t),ror=i(Ee),cF=n(Ee,"LI",{});var WAe=s(cF);sge=n(WAe,"STRONG",{});var Kst=s(sge);tor=r(Kst,"xlm"),Kst.forEach(t),aor=r(WAe," \u2014 "),Xq=n(WAe,"A",{href:!0});var Zst=s(Xq);nor=r(Zst,"TFXLMWithLMHeadModel"),Zst.forEach(t),sor=r(WAe," (XLM model)"),WAe.forEach(t),lor=i(Ee),fF=n(Ee,"LI",{});var QAe=s(fF);lge=n(QAe,"STRONG",{});var elt=s(lge);ior=r(elt,"xlnet"),elt.forEach(t),dor=r(QAe," \u2014 "),Vq=n(QAe,"A",{href:!0});var olt=s(Vq);cor=r(olt,"TFXLNetLMHeadModel"),olt.forEach(t),mor=r(QAe," (XLNet model)"),QAe.forEach(t),Ee.forEach(t),gor=i(ma),ige=n(ma,"P",{});var rlt=s(ige);hor=r(rlt,"Examples:"),rlt.forEach(t),por=i(ma),m(T6.$$.fragment,ma),ma.forEach(t),$l.forEach(t),JBe=i(c),cc=n(c,"H2",{class:!0});var nRe=s(cc);mF=n(nRe,"A",{id:!0,class:!0,href:!0});var tlt=s(mF);dge=n(tlt,"SPAN",{});var alt=s(dge);m(F6.$$.fragment,alt),alt.forEach(t),tlt.forEach(t),_or=i(nRe),cge=n(nRe,"SPAN",{});var nlt=s(cge);uor=r(nlt,"TFAutoModelForImageClassification"),nlt.forEach(t),nRe.forEach(t),YBe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(C6.$$.fragment,Dl),bor=i(Dl),fc=n(Dl,"P",{});var jz=s(fc);vor=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fge=n(jz,"CODE",{});var slt=s(fge);Tor=r(slt,"from_pretrained()"),slt.forEach(t),For=r(jz,"class method or the "),mge=n(jz,"CODE",{});var llt=s(mge);Cor=r(llt,"from_config()"),llt.forEach(t),Mor=r(jz,`class
method.`),jz.forEach(t),Eor=i(Dl),M6=n(Dl,"P",{});var sRe=s(M6);yor=r(sRe,"This class cannot be instantiated directly using "),gge=n(sRe,"CODE",{});var ilt=s(gge);wor=r(ilt,"__init__()"),ilt.forEach(t),Aor=r(sRe," (throws an error)."),sRe.forEach(t),Lor=i(Dl),ft=n(Dl,"DIV",{class:!0});var jl=s(ft);m(E6.$$.fragment,jl),Bor=i(jl),hge=n(jl,"P",{});var dlt=s(hge);xor=r(dlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dlt.forEach(t),kor=i(jl),mc=n(jl,"P",{});var Nz=s(mc);Ror=r(Nz,`Note:
Loading a model from its configuration file does `),pge=n(Nz,"STRONG",{});var clt=s(pge);Sor=r(clt,"not"),clt.forEach(t),Por=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ge=n(Nz,"CODE",{});var flt=s(_ge);$or=r(flt,"from_pretrained()"),flt.forEach(t),Ior=r(Nz,"to load the model weights."),Nz.forEach(t),Dor=i(jl),uge=n(jl,"P",{});var mlt=s(uge);jor=r(mlt,"Examples:"),mlt.forEach(t),Nor=i(jl),m(y6.$$.fragment,jl),jl.forEach(t),qor=i(Dl),_o=n(Dl,"DIV",{class:!0});var ga=s(_o);m(w6.$$.fragment,ga),Gor=i(ga),bge=n(ga,"P",{});var glt=s(bge);Oor=r(glt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),glt.forEach(t),Xor=i(ga),gn=n(ga,"P",{});var tE=s(gn);Vor=r(tE,"The model class to instantiate is selected based on the "),vge=n(tE,"CODE",{});var hlt=s(vge);zor=r(hlt,"model_type"),hlt.forEach(t),Wor=r(tE,` property of the config object (either
passed as an argument or loaded from `),Tge=n(tE,"CODE",{});var plt=s(Tge);Qor=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),Hor=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fge=n(tE,"CODE",{});var _lt=s(Fge);Uor=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),Jor=r(tE,":"),tE.forEach(t),Yor=i(ga),A6=n(ga,"UL",{});var lRe=s(A6);gF=n(lRe,"LI",{});var HAe=s(gF);Cge=n(HAe,"STRONG",{});var ult=s(Cge);Kor=r(ult,"convnext"),ult.forEach(t),Zor=r(HAe," \u2014 "),zq=n(HAe,"A",{href:!0});var blt=s(zq);err=r(blt,"TFConvNextForImageClassification"),blt.forEach(t),orr=r(HAe," (ConvNext model)"),HAe.forEach(t),rrr=i(lRe),hF=n(lRe,"LI",{});var UAe=s(hF);Mge=n(UAe,"STRONG",{});var vlt=s(Mge);trr=r(vlt,"vit"),vlt.forEach(t),arr=r(UAe," \u2014 "),Wq=n(UAe,"A",{href:!0});var Tlt=s(Wq);nrr=r(Tlt,"TFViTForImageClassification"),Tlt.forEach(t),srr=r(UAe," (ViT model)"),UAe.forEach(t),lRe.forEach(t),lrr=i(ga),Ege=n(ga,"P",{});var Flt=s(Ege);irr=r(Flt,"Examples:"),Flt.forEach(t),drr=i(ga),m(L6.$$.fragment,ga),ga.forEach(t),Dl.forEach(t),KBe=i(c),gc=n(c,"H2",{class:!0});var iRe=s(gc);pF=n(iRe,"A",{id:!0,class:!0,href:!0});var Clt=s(pF);yge=n(Clt,"SPAN",{});var Mlt=s(yge);m(B6.$$.fragment,Mlt),Mlt.forEach(t),Clt.forEach(t),crr=i(iRe),wge=n(iRe,"SPAN",{});var Elt=s(wge);frr=r(Elt,"TFAutoModelForMaskedLM"),Elt.forEach(t),iRe.forEach(t),ZBe=i(c),vr=n(c,"DIV",{class:!0});var Nl=s(vr);m(x6.$$.fragment,Nl),mrr=i(Nl),hc=n(Nl,"P",{});var qz=s(hc);grr=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Age=n(qz,"CODE",{});var ylt=s(Age);hrr=r(ylt,"from_pretrained()"),ylt.forEach(t),prr=r(qz,"class method or the "),Lge=n(qz,"CODE",{});var wlt=s(Lge);_rr=r(wlt,"from_config()"),wlt.forEach(t),urr=r(qz,`class
method.`),qz.forEach(t),brr=i(Nl),k6=n(Nl,"P",{});var dRe=s(k6);vrr=r(dRe,"This class cannot be instantiated directly using "),Bge=n(dRe,"CODE",{});var Alt=s(Bge);Trr=r(Alt,"__init__()"),Alt.forEach(t),Frr=r(dRe," (throws an error)."),dRe.forEach(t),Crr=i(Nl),mt=n(Nl,"DIV",{class:!0});var ql=s(mt);m(R6.$$.fragment,ql),Mrr=i(ql),xge=n(ql,"P",{});var Llt=s(xge);Err=r(Llt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Llt.forEach(t),yrr=i(ql),pc=n(ql,"P",{});var Gz=s(pc);wrr=r(Gz,`Note:
Loading a model from its configuration file does `),kge=n(Gz,"STRONG",{});var Blt=s(kge);Arr=r(Blt,"not"),Blt.forEach(t),Lrr=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rge=n(Gz,"CODE",{});var xlt=s(Rge);Brr=r(xlt,"from_pretrained()"),xlt.forEach(t),xrr=r(Gz,"to load the model weights."),Gz.forEach(t),krr=i(ql),Sge=n(ql,"P",{});var klt=s(Sge);Rrr=r(klt,"Examples:"),klt.forEach(t),Srr=i(ql),m(S6.$$.fragment,ql),ql.forEach(t),Prr=i(Nl),uo=n(Nl,"DIV",{class:!0});var ha=s(uo);m(P6.$$.fragment,ha),$rr=i(ha),Pge=n(ha,"P",{});var Rlt=s(Pge);Irr=r(Rlt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rlt.forEach(t),Drr=i(ha),hn=n(ha,"P",{});var aE=s(hn);jrr=r(aE,"The model class to instantiate is selected based on the "),$ge=n(aE,"CODE",{});var Slt=s($ge);Nrr=r(Slt,"model_type"),Slt.forEach(t),qrr=r(aE,` property of the config object (either
passed as an argument or loaded from `),Ige=n(aE,"CODE",{});var Plt=s(Ige);Grr=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),Orr=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(aE,"CODE",{});var $lt=s(Dge);Xrr=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),Vrr=r(aE,":"),aE.forEach(t),zrr=i(ha),Y=n(ha,"UL",{});var ee=s(Y);_F=n(ee,"LI",{});var JAe=s(_F);jge=n(JAe,"STRONG",{});var Ilt=s(jge);Wrr=r(Ilt,"albert"),Ilt.forEach(t),Qrr=r(JAe," \u2014 "),Qq=n(JAe,"A",{href:!0});var Dlt=s(Qq);Hrr=r(Dlt,"TFAlbertForMaskedLM"),Dlt.forEach(t),Urr=r(JAe," (ALBERT model)"),JAe.forEach(t),Jrr=i(ee),uF=n(ee,"LI",{});var YAe=s(uF);Nge=n(YAe,"STRONG",{});var jlt=s(Nge);Yrr=r(jlt,"bert"),jlt.forEach(t),Krr=r(YAe," \u2014 "),Hq=n(YAe,"A",{href:!0});var Nlt=s(Hq);Zrr=r(Nlt,"TFBertForMaskedLM"),Nlt.forEach(t),etr=r(YAe," (BERT model)"),YAe.forEach(t),otr=i(ee),bF=n(ee,"LI",{});var KAe=s(bF);qge=n(KAe,"STRONG",{});var qlt=s(qge);rtr=r(qlt,"camembert"),qlt.forEach(t),ttr=r(KAe," \u2014 "),Uq=n(KAe,"A",{href:!0});var Glt=s(Uq);atr=r(Glt,"TFCamembertForMaskedLM"),Glt.forEach(t),ntr=r(KAe," (CamemBERT model)"),KAe.forEach(t),str=i(ee),vF=n(ee,"LI",{});var ZAe=s(vF);Gge=n(ZAe,"STRONG",{});var Olt=s(Gge);ltr=r(Olt,"convbert"),Olt.forEach(t),itr=r(ZAe," \u2014 "),Jq=n(ZAe,"A",{href:!0});var Xlt=s(Jq);dtr=r(Xlt,"TFConvBertForMaskedLM"),Xlt.forEach(t),ctr=r(ZAe," (ConvBERT model)"),ZAe.forEach(t),ftr=i(ee),TF=n(ee,"LI",{});var e0e=s(TF);Oge=n(e0e,"STRONG",{});var Vlt=s(Oge);mtr=r(Vlt,"deberta"),Vlt.forEach(t),gtr=r(e0e," \u2014 "),Yq=n(e0e,"A",{href:!0});var zlt=s(Yq);htr=r(zlt,"TFDebertaForMaskedLM"),zlt.forEach(t),ptr=r(e0e," (DeBERTa model)"),e0e.forEach(t),_tr=i(ee),FF=n(ee,"LI",{});var o0e=s(FF);Xge=n(o0e,"STRONG",{});var Wlt=s(Xge);utr=r(Wlt,"deberta-v2"),Wlt.forEach(t),btr=r(o0e," \u2014 "),Kq=n(o0e,"A",{href:!0});var Qlt=s(Kq);vtr=r(Qlt,"TFDebertaV2ForMaskedLM"),Qlt.forEach(t),Ttr=r(o0e," (DeBERTa-v2 model)"),o0e.forEach(t),Ftr=i(ee),CF=n(ee,"LI",{});var r0e=s(CF);Vge=n(r0e,"STRONG",{});var Hlt=s(Vge);Ctr=r(Hlt,"distilbert"),Hlt.forEach(t),Mtr=r(r0e," \u2014 "),Zq=n(r0e,"A",{href:!0});var Ult=s(Zq);Etr=r(Ult,"TFDistilBertForMaskedLM"),Ult.forEach(t),ytr=r(r0e," (DistilBERT model)"),r0e.forEach(t),wtr=i(ee),MF=n(ee,"LI",{});var t0e=s(MF);zge=n(t0e,"STRONG",{});var Jlt=s(zge);Atr=r(Jlt,"electra"),Jlt.forEach(t),Ltr=r(t0e," \u2014 "),eG=n(t0e,"A",{href:!0});var Ylt=s(eG);Btr=r(Ylt,"TFElectraForMaskedLM"),Ylt.forEach(t),xtr=r(t0e," (ELECTRA model)"),t0e.forEach(t),ktr=i(ee),EF=n(ee,"LI",{});var a0e=s(EF);Wge=n(a0e,"STRONG",{});var Klt=s(Wge);Rtr=r(Klt,"flaubert"),Klt.forEach(t),Str=r(a0e," \u2014 "),oG=n(a0e,"A",{href:!0});var Zlt=s(oG);Ptr=r(Zlt,"TFFlaubertWithLMHeadModel"),Zlt.forEach(t),$tr=r(a0e," (FlauBERT model)"),a0e.forEach(t),Itr=i(ee),yF=n(ee,"LI",{});var n0e=s(yF);Qge=n(n0e,"STRONG",{});var eit=s(Qge);Dtr=r(eit,"funnel"),eit.forEach(t),jtr=r(n0e," \u2014 "),rG=n(n0e,"A",{href:!0});var oit=s(rG);Ntr=r(oit,"TFFunnelForMaskedLM"),oit.forEach(t),qtr=r(n0e," (Funnel Transformer model)"),n0e.forEach(t),Gtr=i(ee),wF=n(ee,"LI",{});var s0e=s(wF);Hge=n(s0e,"STRONG",{});var rit=s(Hge);Otr=r(rit,"layoutlm"),rit.forEach(t),Xtr=r(s0e," \u2014 "),tG=n(s0e,"A",{href:!0});var tit=s(tG);Vtr=r(tit,"TFLayoutLMForMaskedLM"),tit.forEach(t),ztr=r(s0e," (LayoutLM model)"),s0e.forEach(t),Wtr=i(ee),AF=n(ee,"LI",{});var l0e=s(AF);Uge=n(l0e,"STRONG",{});var ait=s(Uge);Qtr=r(ait,"longformer"),ait.forEach(t),Htr=r(l0e," \u2014 "),aG=n(l0e,"A",{href:!0});var nit=s(aG);Utr=r(nit,"TFLongformerForMaskedLM"),nit.forEach(t),Jtr=r(l0e," (Longformer model)"),l0e.forEach(t),Ytr=i(ee),LF=n(ee,"LI",{});var i0e=s(LF);Jge=n(i0e,"STRONG",{});var sit=s(Jge);Ktr=r(sit,"mobilebert"),sit.forEach(t),Ztr=r(i0e," \u2014 "),nG=n(i0e,"A",{href:!0});var lit=s(nG);ear=r(lit,"TFMobileBertForMaskedLM"),lit.forEach(t),oar=r(i0e," (MobileBERT model)"),i0e.forEach(t),rar=i(ee),BF=n(ee,"LI",{});var d0e=s(BF);Yge=n(d0e,"STRONG",{});var iit=s(Yge);tar=r(iit,"mpnet"),iit.forEach(t),aar=r(d0e," \u2014 "),sG=n(d0e,"A",{href:!0});var dit=s(sG);nar=r(dit,"TFMPNetForMaskedLM"),dit.forEach(t),sar=r(d0e," (MPNet model)"),d0e.forEach(t),lar=i(ee),xF=n(ee,"LI",{});var c0e=s(xF);Kge=n(c0e,"STRONG",{});var cit=s(Kge);iar=r(cit,"rembert"),cit.forEach(t),dar=r(c0e," \u2014 "),lG=n(c0e,"A",{href:!0});var fit=s(lG);car=r(fit,"TFRemBertForMaskedLM"),fit.forEach(t),far=r(c0e," (RemBERT model)"),c0e.forEach(t),mar=i(ee),kF=n(ee,"LI",{});var f0e=s(kF);Zge=n(f0e,"STRONG",{});var mit=s(Zge);gar=r(mit,"roberta"),mit.forEach(t),har=r(f0e," \u2014 "),iG=n(f0e,"A",{href:!0});var git=s(iG);par=r(git,"TFRobertaForMaskedLM"),git.forEach(t),_ar=r(f0e," (RoBERTa model)"),f0e.forEach(t),uar=i(ee),RF=n(ee,"LI",{});var m0e=s(RF);ehe=n(m0e,"STRONG",{});var hit=s(ehe);bar=r(hit,"roformer"),hit.forEach(t),Tar=r(m0e," \u2014 "),dG=n(m0e,"A",{href:!0});var pit=s(dG);Far=r(pit,"TFRoFormerForMaskedLM"),pit.forEach(t),Car=r(m0e," (RoFormer model)"),m0e.forEach(t),Mar=i(ee),SF=n(ee,"LI",{});var g0e=s(SF);ohe=n(g0e,"STRONG",{});var _it=s(ohe);Ear=r(_it,"tapas"),_it.forEach(t),yar=r(g0e," \u2014 "),cG=n(g0e,"A",{href:!0});var uit=s(cG);war=r(uit,"TFTapasForMaskedLM"),uit.forEach(t),Aar=r(g0e," (TAPAS model)"),g0e.forEach(t),Lar=i(ee),PF=n(ee,"LI",{});var h0e=s(PF);rhe=n(h0e,"STRONG",{});var bit=s(rhe);Bar=r(bit,"xlm"),bit.forEach(t),xar=r(h0e," \u2014 "),fG=n(h0e,"A",{href:!0});var vit=s(fG);kar=r(vit,"TFXLMWithLMHeadModel"),vit.forEach(t),Rar=r(h0e," (XLM model)"),h0e.forEach(t),Sar=i(ee),$F=n(ee,"LI",{});var p0e=s($F);the=n(p0e,"STRONG",{});var Tit=s(the);Par=r(Tit,"xlm-roberta"),Tit.forEach(t),$ar=r(p0e," \u2014 "),mG=n(p0e,"A",{href:!0});var Fit=s(mG);Iar=r(Fit,"TFXLMRobertaForMaskedLM"),Fit.forEach(t),Dar=r(p0e," (XLM-RoBERTa model)"),p0e.forEach(t),ee.forEach(t),jar=i(ha),ahe=n(ha,"P",{});var Cit=s(ahe);Nar=r(Cit,"Examples:"),Cit.forEach(t),qar=i(ha),m($6.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),exe=i(c),_c=n(c,"H2",{class:!0});var cRe=s(_c);IF=n(cRe,"A",{id:!0,class:!0,href:!0});var Mit=s(IF);nhe=n(Mit,"SPAN",{});var Eit=s(nhe);m(I6.$$.fragment,Eit),Eit.forEach(t),Mit.forEach(t),Gar=i(cRe),she=n(cRe,"SPAN",{});var yit=s(she);Oar=r(yit,"TFAutoModelForSeq2SeqLM"),yit.forEach(t),cRe.forEach(t),oxe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(D6.$$.fragment,Gl),Xar=i(Gl),uc=n(Gl,"P",{});var Oz=s(uc);Var=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lhe=n(Oz,"CODE",{});var wit=s(lhe);zar=r(wit,"from_pretrained()"),wit.forEach(t),War=r(Oz,"class method or the "),ihe=n(Oz,"CODE",{});var Ait=s(ihe);Qar=r(Ait,"from_config()"),Ait.forEach(t),Har=r(Oz,`class
method.`),Oz.forEach(t),Uar=i(Gl),j6=n(Gl,"P",{});var fRe=s(j6);Jar=r(fRe,"This class cannot be instantiated directly using "),dhe=n(fRe,"CODE",{});var Lit=s(dhe);Yar=r(Lit,"__init__()"),Lit.forEach(t),Kar=r(fRe," (throws an error)."),fRe.forEach(t),Zar=i(Gl),gt=n(Gl,"DIV",{class:!0});var Ol=s(gt);m(N6.$$.fragment,Ol),enr=i(Ol),che=n(Ol,"P",{});var Bit=s(che);onr=r(Bit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bit.forEach(t),rnr=i(Ol),bc=n(Ol,"P",{});var Xz=s(bc);tnr=r(Xz,`Note:
Loading a model from its configuration file does `),fhe=n(Xz,"STRONG",{});var xit=s(fhe);anr=r(xit,"not"),xit.forEach(t),nnr=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),mhe=n(Xz,"CODE",{});var kit=s(mhe);snr=r(kit,"from_pretrained()"),kit.forEach(t),lnr=r(Xz,"to load the model weights."),Xz.forEach(t),inr=i(Ol),ghe=n(Ol,"P",{});var Rit=s(ghe);dnr=r(Rit,"Examples:"),Rit.forEach(t),cnr=i(Ol),m(q6.$$.fragment,Ol),Ol.forEach(t),fnr=i(Gl),bo=n(Gl,"DIV",{class:!0});var pa=s(bo);m(G6.$$.fragment,pa),mnr=i(pa),hhe=n(pa,"P",{});var Sit=s(hhe);gnr=r(Sit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Sit.forEach(t),hnr=i(pa),pn=n(pa,"P",{});var nE=s(pn);pnr=r(nE,"The model class to instantiate is selected based on the "),phe=n(nE,"CODE",{});var Pit=s(phe);_nr=r(Pit,"model_type"),Pit.forEach(t),unr=r(nE,` property of the config object (either
passed as an argument or loaded from `),_he=n(nE,"CODE",{});var $it=s(_he);bnr=r($it,"pretrained_model_name_or_path"),$it.forEach(t),vnr=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(nE,"CODE",{});var Iit=s(uhe);Tnr=r(Iit,"pretrained_model_name_or_path"),Iit.forEach(t),Fnr=r(nE,":"),nE.forEach(t),Cnr=i(pa),_e=n(pa,"UL",{});var ye=s(_e);DF=n(ye,"LI",{});var _0e=s(DF);bhe=n(_0e,"STRONG",{});var Dit=s(bhe);Mnr=r(Dit,"bart"),Dit.forEach(t),Enr=r(_0e," \u2014 "),gG=n(_0e,"A",{href:!0});var jit=s(gG);ynr=r(jit,"TFBartForConditionalGeneration"),jit.forEach(t),wnr=r(_0e," (BART model)"),_0e.forEach(t),Anr=i(ye),jF=n(ye,"LI",{});var u0e=s(jF);vhe=n(u0e,"STRONG",{});var Nit=s(vhe);Lnr=r(Nit,"blenderbot"),Nit.forEach(t),Bnr=r(u0e," \u2014 "),hG=n(u0e,"A",{href:!0});var qit=s(hG);xnr=r(qit,"TFBlenderbotForConditionalGeneration"),qit.forEach(t),knr=r(u0e," (Blenderbot model)"),u0e.forEach(t),Rnr=i(ye),NF=n(ye,"LI",{});var b0e=s(NF);The=n(b0e,"STRONG",{});var Git=s(The);Snr=r(Git,"blenderbot-small"),Git.forEach(t),Pnr=r(b0e," \u2014 "),pG=n(b0e,"A",{href:!0});var Oit=s(pG);$nr=r(Oit,"TFBlenderbotSmallForConditionalGeneration"),Oit.forEach(t),Inr=r(b0e," (BlenderbotSmall model)"),b0e.forEach(t),Dnr=i(ye),qF=n(ye,"LI",{});var v0e=s(qF);Fhe=n(v0e,"STRONG",{});var Xit=s(Fhe);jnr=r(Xit,"encoder-decoder"),Xit.forEach(t),Nnr=r(v0e," \u2014 "),_G=n(v0e,"A",{href:!0});var Vit=s(_G);qnr=r(Vit,"TFEncoderDecoderModel"),Vit.forEach(t),Gnr=r(v0e," (Encoder decoder model)"),v0e.forEach(t),Onr=i(ye),GF=n(ye,"LI",{});var T0e=s(GF);Che=n(T0e,"STRONG",{});var zit=s(Che);Xnr=r(zit,"led"),zit.forEach(t),Vnr=r(T0e," \u2014 "),uG=n(T0e,"A",{href:!0});var Wit=s(uG);znr=r(Wit,"TFLEDForConditionalGeneration"),Wit.forEach(t),Wnr=r(T0e," (LED model)"),T0e.forEach(t),Qnr=i(ye),OF=n(ye,"LI",{});var F0e=s(OF);Mhe=n(F0e,"STRONG",{});var Qit=s(Mhe);Hnr=r(Qit,"marian"),Qit.forEach(t),Unr=r(F0e," \u2014 "),bG=n(F0e,"A",{href:!0});var Hit=s(bG);Jnr=r(Hit,"TFMarianMTModel"),Hit.forEach(t),Ynr=r(F0e," (Marian model)"),F0e.forEach(t),Knr=i(ye),XF=n(ye,"LI",{});var C0e=s(XF);Ehe=n(C0e,"STRONG",{});var Uit=s(Ehe);Znr=r(Uit,"mbart"),Uit.forEach(t),esr=r(C0e," \u2014 "),vG=n(C0e,"A",{href:!0});var Jit=s(vG);osr=r(Jit,"TFMBartForConditionalGeneration"),Jit.forEach(t),rsr=r(C0e," (mBART model)"),C0e.forEach(t),tsr=i(ye),VF=n(ye,"LI",{});var M0e=s(VF);yhe=n(M0e,"STRONG",{});var Yit=s(yhe);asr=r(Yit,"mt5"),Yit.forEach(t),nsr=r(M0e," \u2014 "),TG=n(M0e,"A",{href:!0});var Kit=s(TG);ssr=r(Kit,"TFMT5ForConditionalGeneration"),Kit.forEach(t),lsr=r(M0e," (mT5 model)"),M0e.forEach(t),isr=i(ye),zF=n(ye,"LI",{});var E0e=s(zF);whe=n(E0e,"STRONG",{});var Zit=s(whe);dsr=r(Zit,"pegasus"),Zit.forEach(t),csr=r(E0e," \u2014 "),FG=n(E0e,"A",{href:!0});var edt=s(FG);fsr=r(edt,"TFPegasusForConditionalGeneration"),edt.forEach(t),msr=r(E0e," (Pegasus model)"),E0e.forEach(t),gsr=i(ye),WF=n(ye,"LI",{});var y0e=s(WF);Ahe=n(y0e,"STRONG",{});var odt=s(Ahe);hsr=r(odt,"t5"),odt.forEach(t),psr=r(y0e," \u2014 "),CG=n(y0e,"A",{href:!0});var rdt=s(CG);_sr=r(rdt,"TFT5ForConditionalGeneration"),rdt.forEach(t),usr=r(y0e," (T5 model)"),y0e.forEach(t),ye.forEach(t),bsr=i(pa),Lhe=n(pa,"P",{});var tdt=s(Lhe);vsr=r(tdt,"Examples:"),tdt.forEach(t),Tsr=i(pa),m(O6.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),rxe=i(c),vc=n(c,"H2",{class:!0});var mRe=s(vc);QF=n(mRe,"A",{id:!0,class:!0,href:!0});var adt=s(QF);Bhe=n(adt,"SPAN",{});var ndt=s(Bhe);m(X6.$$.fragment,ndt),ndt.forEach(t),adt.forEach(t),Fsr=i(mRe),xhe=n(mRe,"SPAN",{});var sdt=s(xhe);Csr=r(sdt,"TFAutoModelForSequenceClassification"),sdt.forEach(t),mRe.forEach(t),txe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(V6.$$.fragment,Xl),Msr=i(Xl),Tc=n(Xl,"P",{});var Vz=s(Tc);Esr=r(Vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),khe=n(Vz,"CODE",{});var ldt=s(khe);ysr=r(ldt,"from_pretrained()"),ldt.forEach(t),wsr=r(Vz,"class method or the "),Rhe=n(Vz,"CODE",{});var idt=s(Rhe);Asr=r(idt,"from_config()"),idt.forEach(t),Lsr=r(Vz,`class
method.`),Vz.forEach(t),Bsr=i(Xl),z6=n(Xl,"P",{});var gRe=s(z6);xsr=r(gRe,"This class cannot be instantiated directly using "),She=n(gRe,"CODE",{});var ddt=s(She);ksr=r(ddt,"__init__()"),ddt.forEach(t),Rsr=r(gRe," (throws an error)."),gRe.forEach(t),Ssr=i(Xl),ht=n(Xl,"DIV",{class:!0});var Vl=s(ht);m(W6.$$.fragment,Vl),Psr=i(Vl),Phe=n(Vl,"P",{});var cdt=s(Phe);$sr=r(cdt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cdt.forEach(t),Isr=i(Vl),Fc=n(Vl,"P",{});var zz=s(Fc);Dsr=r(zz,`Note:
Loading a model from its configuration file does `),$he=n(zz,"STRONG",{});var fdt=s($he);jsr=r(fdt,"not"),fdt.forEach(t),Nsr=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ihe=n(zz,"CODE",{});var mdt=s(Ihe);qsr=r(mdt,"from_pretrained()"),mdt.forEach(t),Gsr=r(zz,"to load the model weights."),zz.forEach(t),Osr=i(Vl),Dhe=n(Vl,"P",{});var gdt=s(Dhe);Xsr=r(gdt,"Examples:"),gdt.forEach(t),Vsr=i(Vl),m(Q6.$$.fragment,Vl),Vl.forEach(t),zsr=i(Xl),vo=n(Xl,"DIV",{class:!0});var _a=s(vo);m(H6.$$.fragment,_a),Wsr=i(_a),jhe=n(_a,"P",{});var hdt=s(jhe);Qsr=r(hdt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hdt.forEach(t),Hsr=i(_a),_n=n(_a,"P",{});var sE=s(_n);Usr=r(sE,"The model class to instantiate is selected based on the "),Nhe=n(sE,"CODE",{});var pdt=s(Nhe);Jsr=r(pdt,"model_type"),pdt.forEach(t),Ysr=r(sE,` property of the config object (either
passed as an argument or loaded from `),qhe=n(sE,"CODE",{});var _dt=s(qhe);Ksr=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),Zsr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(sE,"CODE",{});var udt=s(Ghe);elr=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),olr=r(sE,":"),sE.forEach(t),rlr=i(_a),X=n(_a,"UL",{});var W=s(X);HF=n(W,"LI",{});var w0e=s(HF);Ohe=n(w0e,"STRONG",{});var bdt=s(Ohe);tlr=r(bdt,"albert"),bdt.forEach(t),alr=r(w0e," \u2014 "),MG=n(w0e,"A",{href:!0});var vdt=s(MG);nlr=r(vdt,"TFAlbertForSequenceClassification"),vdt.forEach(t),slr=r(w0e," (ALBERT model)"),w0e.forEach(t),llr=i(W),UF=n(W,"LI",{});var A0e=s(UF);Xhe=n(A0e,"STRONG",{});var Tdt=s(Xhe);ilr=r(Tdt,"bert"),Tdt.forEach(t),dlr=r(A0e," \u2014 "),EG=n(A0e,"A",{href:!0});var Fdt=s(EG);clr=r(Fdt,"TFBertForSequenceClassification"),Fdt.forEach(t),flr=r(A0e," (BERT model)"),A0e.forEach(t),mlr=i(W),JF=n(W,"LI",{});var L0e=s(JF);Vhe=n(L0e,"STRONG",{});var Cdt=s(Vhe);glr=r(Cdt,"camembert"),Cdt.forEach(t),hlr=r(L0e," \u2014 "),yG=n(L0e,"A",{href:!0});var Mdt=s(yG);plr=r(Mdt,"TFCamembertForSequenceClassification"),Mdt.forEach(t),_lr=r(L0e," (CamemBERT model)"),L0e.forEach(t),ulr=i(W),YF=n(W,"LI",{});var B0e=s(YF);zhe=n(B0e,"STRONG",{});var Edt=s(zhe);blr=r(Edt,"convbert"),Edt.forEach(t),vlr=r(B0e," \u2014 "),wG=n(B0e,"A",{href:!0});var ydt=s(wG);Tlr=r(ydt,"TFConvBertForSequenceClassification"),ydt.forEach(t),Flr=r(B0e," (ConvBERT model)"),B0e.forEach(t),Clr=i(W),KF=n(W,"LI",{});var x0e=s(KF);Whe=n(x0e,"STRONG",{});var wdt=s(Whe);Mlr=r(wdt,"ctrl"),wdt.forEach(t),Elr=r(x0e," \u2014 "),AG=n(x0e,"A",{href:!0});var Adt=s(AG);ylr=r(Adt,"TFCTRLForSequenceClassification"),Adt.forEach(t),wlr=r(x0e," (CTRL model)"),x0e.forEach(t),Alr=i(W),ZF=n(W,"LI",{});var k0e=s(ZF);Qhe=n(k0e,"STRONG",{});var Ldt=s(Qhe);Llr=r(Ldt,"deberta"),Ldt.forEach(t),Blr=r(k0e," \u2014 "),LG=n(k0e,"A",{href:!0});var Bdt=s(LG);xlr=r(Bdt,"TFDebertaForSequenceClassification"),Bdt.forEach(t),klr=r(k0e," (DeBERTa model)"),k0e.forEach(t),Rlr=i(W),e9=n(W,"LI",{});var R0e=s(e9);Hhe=n(R0e,"STRONG",{});var xdt=s(Hhe);Slr=r(xdt,"deberta-v2"),xdt.forEach(t),Plr=r(R0e," \u2014 "),BG=n(R0e,"A",{href:!0});var kdt=s(BG);$lr=r(kdt,"TFDebertaV2ForSequenceClassification"),kdt.forEach(t),Ilr=r(R0e," (DeBERTa-v2 model)"),R0e.forEach(t),Dlr=i(W),o9=n(W,"LI",{});var S0e=s(o9);Uhe=n(S0e,"STRONG",{});var Rdt=s(Uhe);jlr=r(Rdt,"distilbert"),Rdt.forEach(t),Nlr=r(S0e," \u2014 "),xG=n(S0e,"A",{href:!0});var Sdt=s(xG);qlr=r(Sdt,"TFDistilBertForSequenceClassification"),Sdt.forEach(t),Glr=r(S0e," (DistilBERT model)"),S0e.forEach(t),Olr=i(W),r9=n(W,"LI",{});var P0e=s(r9);Jhe=n(P0e,"STRONG",{});var Pdt=s(Jhe);Xlr=r(Pdt,"electra"),Pdt.forEach(t),Vlr=r(P0e," \u2014 "),kG=n(P0e,"A",{href:!0});var $dt=s(kG);zlr=r($dt,"TFElectraForSequenceClassification"),$dt.forEach(t),Wlr=r(P0e," (ELECTRA model)"),P0e.forEach(t),Qlr=i(W),t9=n(W,"LI",{});var $0e=s(t9);Yhe=n($0e,"STRONG",{});var Idt=s(Yhe);Hlr=r(Idt,"flaubert"),Idt.forEach(t),Ulr=r($0e," \u2014 "),RG=n($0e,"A",{href:!0});var Ddt=s(RG);Jlr=r(Ddt,"TFFlaubertForSequenceClassification"),Ddt.forEach(t),Ylr=r($0e," (FlauBERT model)"),$0e.forEach(t),Klr=i(W),a9=n(W,"LI",{});var I0e=s(a9);Khe=n(I0e,"STRONG",{});var jdt=s(Khe);Zlr=r(jdt,"funnel"),jdt.forEach(t),eir=r(I0e," \u2014 "),SG=n(I0e,"A",{href:!0});var Ndt=s(SG);oir=r(Ndt,"TFFunnelForSequenceClassification"),Ndt.forEach(t),rir=r(I0e," (Funnel Transformer model)"),I0e.forEach(t),tir=i(W),n9=n(W,"LI",{});var D0e=s(n9);Zhe=n(D0e,"STRONG",{});var qdt=s(Zhe);air=r(qdt,"gpt2"),qdt.forEach(t),nir=r(D0e," \u2014 "),PG=n(D0e,"A",{href:!0});var Gdt=s(PG);sir=r(Gdt,"TFGPT2ForSequenceClassification"),Gdt.forEach(t),lir=r(D0e," (OpenAI GPT-2 model)"),D0e.forEach(t),iir=i(W),s9=n(W,"LI",{});var j0e=s(s9);epe=n(j0e,"STRONG",{});var Odt=s(epe);dir=r(Odt,"layoutlm"),Odt.forEach(t),cir=r(j0e," \u2014 "),$G=n(j0e,"A",{href:!0});var Xdt=s($G);fir=r(Xdt,"TFLayoutLMForSequenceClassification"),Xdt.forEach(t),mir=r(j0e," (LayoutLM model)"),j0e.forEach(t),gir=i(W),l9=n(W,"LI",{});var N0e=s(l9);ope=n(N0e,"STRONG",{});var Vdt=s(ope);hir=r(Vdt,"longformer"),Vdt.forEach(t),pir=r(N0e," \u2014 "),IG=n(N0e,"A",{href:!0});var zdt=s(IG);_ir=r(zdt,"TFLongformerForSequenceClassification"),zdt.forEach(t),uir=r(N0e," (Longformer model)"),N0e.forEach(t),bir=i(W),i9=n(W,"LI",{});var q0e=s(i9);rpe=n(q0e,"STRONG",{});var Wdt=s(rpe);vir=r(Wdt,"mobilebert"),Wdt.forEach(t),Tir=r(q0e," \u2014 "),DG=n(q0e,"A",{href:!0});var Qdt=s(DG);Fir=r(Qdt,"TFMobileBertForSequenceClassification"),Qdt.forEach(t),Cir=r(q0e," (MobileBERT model)"),q0e.forEach(t),Mir=i(W),d9=n(W,"LI",{});var G0e=s(d9);tpe=n(G0e,"STRONG",{});var Hdt=s(tpe);Eir=r(Hdt,"mpnet"),Hdt.forEach(t),yir=r(G0e," \u2014 "),jG=n(G0e,"A",{href:!0});var Udt=s(jG);wir=r(Udt,"TFMPNetForSequenceClassification"),Udt.forEach(t),Air=r(G0e," (MPNet model)"),G0e.forEach(t),Lir=i(W),c9=n(W,"LI",{});var O0e=s(c9);ape=n(O0e,"STRONG",{});var Jdt=s(ape);Bir=r(Jdt,"openai-gpt"),Jdt.forEach(t),xir=r(O0e," \u2014 "),NG=n(O0e,"A",{href:!0});var Ydt=s(NG);kir=r(Ydt,"TFOpenAIGPTForSequenceClassification"),Ydt.forEach(t),Rir=r(O0e," (OpenAI GPT model)"),O0e.forEach(t),Sir=i(W),f9=n(W,"LI",{});var X0e=s(f9);npe=n(X0e,"STRONG",{});var Kdt=s(npe);Pir=r(Kdt,"rembert"),Kdt.forEach(t),$ir=r(X0e," \u2014 "),qG=n(X0e,"A",{href:!0});var Zdt=s(qG);Iir=r(Zdt,"TFRemBertForSequenceClassification"),Zdt.forEach(t),Dir=r(X0e," (RemBERT model)"),X0e.forEach(t),jir=i(W),m9=n(W,"LI",{});var V0e=s(m9);spe=n(V0e,"STRONG",{});var ect=s(spe);Nir=r(ect,"roberta"),ect.forEach(t),qir=r(V0e," \u2014 "),GG=n(V0e,"A",{href:!0});var oct=s(GG);Gir=r(oct,"TFRobertaForSequenceClassification"),oct.forEach(t),Oir=r(V0e," (RoBERTa model)"),V0e.forEach(t),Xir=i(W),g9=n(W,"LI",{});var z0e=s(g9);lpe=n(z0e,"STRONG",{});var rct=s(lpe);Vir=r(rct,"roformer"),rct.forEach(t),zir=r(z0e," \u2014 "),OG=n(z0e,"A",{href:!0});var tct=s(OG);Wir=r(tct,"TFRoFormerForSequenceClassification"),tct.forEach(t),Qir=r(z0e," (RoFormer model)"),z0e.forEach(t),Hir=i(W),h9=n(W,"LI",{});var W0e=s(h9);ipe=n(W0e,"STRONG",{});var act=s(ipe);Uir=r(act,"tapas"),act.forEach(t),Jir=r(W0e," \u2014 "),XG=n(W0e,"A",{href:!0});var nct=s(XG);Yir=r(nct,"TFTapasForSequenceClassification"),nct.forEach(t),Kir=r(W0e," (TAPAS model)"),W0e.forEach(t),Zir=i(W),p9=n(W,"LI",{});var Q0e=s(p9);dpe=n(Q0e,"STRONG",{});var sct=s(dpe);edr=r(sct,"transfo-xl"),sct.forEach(t),odr=r(Q0e," \u2014 "),VG=n(Q0e,"A",{href:!0});var lct=s(VG);rdr=r(lct,"TFTransfoXLForSequenceClassification"),lct.forEach(t),tdr=r(Q0e," (Transformer-XL model)"),Q0e.forEach(t),adr=i(W),_9=n(W,"LI",{});var H0e=s(_9);cpe=n(H0e,"STRONG",{});var ict=s(cpe);ndr=r(ict,"xlm"),ict.forEach(t),sdr=r(H0e," \u2014 "),zG=n(H0e,"A",{href:!0});var dct=s(zG);ldr=r(dct,"TFXLMForSequenceClassification"),dct.forEach(t),idr=r(H0e," (XLM model)"),H0e.forEach(t),ddr=i(W),u9=n(W,"LI",{});var U0e=s(u9);fpe=n(U0e,"STRONG",{});var cct=s(fpe);cdr=r(cct,"xlm-roberta"),cct.forEach(t),fdr=r(U0e," \u2014 "),WG=n(U0e,"A",{href:!0});var fct=s(WG);mdr=r(fct,"TFXLMRobertaForSequenceClassification"),fct.forEach(t),gdr=r(U0e," (XLM-RoBERTa model)"),U0e.forEach(t),hdr=i(W),b9=n(W,"LI",{});var J0e=s(b9);mpe=n(J0e,"STRONG",{});var mct=s(mpe);pdr=r(mct,"xlnet"),mct.forEach(t),_dr=r(J0e," \u2014 "),QG=n(J0e,"A",{href:!0});var gct=s(QG);udr=r(gct,"TFXLNetForSequenceClassification"),gct.forEach(t),bdr=r(J0e," (XLNet model)"),J0e.forEach(t),W.forEach(t),vdr=i(_a),gpe=n(_a,"P",{});var hct=s(gpe);Tdr=r(hct,"Examples:"),hct.forEach(t),Fdr=i(_a),m(U6.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),axe=i(c),Cc=n(c,"H2",{class:!0});var hRe=s(Cc);v9=n(hRe,"A",{id:!0,class:!0,href:!0});var pct=s(v9);hpe=n(pct,"SPAN",{});var _ct=s(hpe);m(J6.$$.fragment,_ct),_ct.forEach(t),pct.forEach(t),Cdr=i(hRe),ppe=n(hRe,"SPAN",{});var uct=s(ppe);Mdr=r(uct,"TFAutoModelForMultipleChoice"),uct.forEach(t),hRe.forEach(t),nxe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(Y6.$$.fragment,zl),Edr=i(zl),Mc=n(zl,"P",{});var Wz=s(Mc);ydr=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_pe=n(Wz,"CODE",{});var bct=s(_pe);wdr=r(bct,"from_pretrained()"),bct.forEach(t),Adr=r(Wz,"class method or the "),upe=n(Wz,"CODE",{});var vct=s(upe);Ldr=r(vct,"from_config()"),vct.forEach(t),Bdr=r(Wz,`class
method.`),Wz.forEach(t),xdr=i(zl),K6=n(zl,"P",{});var pRe=s(K6);kdr=r(pRe,"This class cannot be instantiated directly using "),bpe=n(pRe,"CODE",{});var Tct=s(bpe);Rdr=r(Tct,"__init__()"),Tct.forEach(t),Sdr=r(pRe," (throws an error)."),pRe.forEach(t),Pdr=i(zl),pt=n(zl,"DIV",{class:!0});var Wl=s(pt);m(Z6.$$.fragment,Wl),$dr=i(Wl),vpe=n(Wl,"P",{});var Fct=s(vpe);Idr=r(Fct,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fct.forEach(t),Ddr=i(Wl),Ec=n(Wl,"P",{});var Qz=s(Ec);jdr=r(Qz,`Note:
Loading a model from its configuration file does `),Tpe=n(Qz,"STRONG",{});var Cct=s(Tpe);Ndr=r(Cct,"not"),Cct.forEach(t),qdr=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=n(Qz,"CODE",{});var Mct=s(Fpe);Gdr=r(Mct,"from_pretrained()"),Mct.forEach(t),Odr=r(Qz,"to load the model weights."),Qz.forEach(t),Xdr=i(Wl),Cpe=n(Wl,"P",{});var Ect=s(Cpe);Vdr=r(Ect,"Examples:"),Ect.forEach(t),zdr=i(Wl),m(eA.$$.fragment,Wl),Wl.forEach(t),Wdr=i(zl),To=n(zl,"DIV",{class:!0});var ua=s(To);m(oA.$$.fragment,ua),Qdr=i(ua),Mpe=n(ua,"P",{});var yct=s(Mpe);Hdr=r(yct,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yct.forEach(t),Udr=i(ua),un=n(ua,"P",{});var lE=s(un);Jdr=r(lE,"The model class to instantiate is selected based on the "),Epe=n(lE,"CODE",{});var wct=s(Epe);Ydr=r(wct,"model_type"),wct.forEach(t),Kdr=r(lE,` property of the config object (either
passed as an argument or loaded from `),ype=n(lE,"CODE",{});var Act=s(ype);Zdr=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),ecr=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(lE,"CODE",{});var Lct=s(wpe);ocr=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),rcr=r(lE,":"),lE.forEach(t),tcr=i(ua),te=n(ua,"UL",{});var se=s(te);T9=n(se,"LI",{});var Y0e=s(T9);Ape=n(Y0e,"STRONG",{});var Bct=s(Ape);acr=r(Bct,"albert"),Bct.forEach(t),ncr=r(Y0e," \u2014 "),HG=n(Y0e,"A",{href:!0});var xct=s(HG);scr=r(xct,"TFAlbertForMultipleChoice"),xct.forEach(t),lcr=r(Y0e," (ALBERT model)"),Y0e.forEach(t),icr=i(se),F9=n(se,"LI",{});var K0e=s(F9);Lpe=n(K0e,"STRONG",{});var kct=s(Lpe);dcr=r(kct,"bert"),kct.forEach(t),ccr=r(K0e," \u2014 "),UG=n(K0e,"A",{href:!0});var Rct=s(UG);fcr=r(Rct,"TFBertForMultipleChoice"),Rct.forEach(t),mcr=r(K0e," (BERT model)"),K0e.forEach(t),gcr=i(se),C9=n(se,"LI",{});var Z0e=s(C9);Bpe=n(Z0e,"STRONG",{});var Sct=s(Bpe);hcr=r(Sct,"camembert"),Sct.forEach(t),pcr=r(Z0e," \u2014 "),JG=n(Z0e,"A",{href:!0});var Pct=s(JG);_cr=r(Pct,"TFCamembertForMultipleChoice"),Pct.forEach(t),ucr=r(Z0e," (CamemBERT model)"),Z0e.forEach(t),bcr=i(se),M9=n(se,"LI",{});var eLe=s(M9);xpe=n(eLe,"STRONG",{});var $ct=s(xpe);vcr=r($ct,"convbert"),$ct.forEach(t),Tcr=r(eLe," \u2014 "),YG=n(eLe,"A",{href:!0});var Ict=s(YG);Fcr=r(Ict,"TFConvBertForMultipleChoice"),Ict.forEach(t),Ccr=r(eLe," (ConvBERT model)"),eLe.forEach(t),Mcr=i(se),E9=n(se,"LI",{});var oLe=s(E9);kpe=n(oLe,"STRONG",{});var Dct=s(kpe);Ecr=r(Dct,"distilbert"),Dct.forEach(t),ycr=r(oLe," \u2014 "),KG=n(oLe,"A",{href:!0});var jct=s(KG);wcr=r(jct,"TFDistilBertForMultipleChoice"),jct.forEach(t),Acr=r(oLe," (DistilBERT model)"),oLe.forEach(t),Lcr=i(se),y9=n(se,"LI",{});var rLe=s(y9);Rpe=n(rLe,"STRONG",{});var Nct=s(Rpe);Bcr=r(Nct,"electra"),Nct.forEach(t),xcr=r(rLe," \u2014 "),ZG=n(rLe,"A",{href:!0});var qct=s(ZG);kcr=r(qct,"TFElectraForMultipleChoice"),qct.forEach(t),Rcr=r(rLe," (ELECTRA model)"),rLe.forEach(t),Scr=i(se),w9=n(se,"LI",{});var tLe=s(w9);Spe=n(tLe,"STRONG",{});var Gct=s(Spe);Pcr=r(Gct,"flaubert"),Gct.forEach(t),$cr=r(tLe," \u2014 "),eO=n(tLe,"A",{href:!0});var Oct=s(eO);Icr=r(Oct,"TFFlaubertForMultipleChoice"),Oct.forEach(t),Dcr=r(tLe," (FlauBERT model)"),tLe.forEach(t),jcr=i(se),A9=n(se,"LI",{});var aLe=s(A9);Ppe=n(aLe,"STRONG",{});var Xct=s(Ppe);Ncr=r(Xct,"funnel"),Xct.forEach(t),qcr=r(aLe," \u2014 "),oO=n(aLe,"A",{href:!0});var Vct=s(oO);Gcr=r(Vct,"TFFunnelForMultipleChoice"),Vct.forEach(t),Ocr=r(aLe," (Funnel Transformer model)"),aLe.forEach(t),Xcr=i(se),L9=n(se,"LI",{});var nLe=s(L9);$pe=n(nLe,"STRONG",{});var zct=s($pe);Vcr=r(zct,"longformer"),zct.forEach(t),zcr=r(nLe," \u2014 "),rO=n(nLe,"A",{href:!0});var Wct=s(rO);Wcr=r(Wct,"TFLongformerForMultipleChoice"),Wct.forEach(t),Qcr=r(nLe," (Longformer model)"),nLe.forEach(t),Hcr=i(se),B9=n(se,"LI",{});var sLe=s(B9);Ipe=n(sLe,"STRONG",{});var Qct=s(Ipe);Ucr=r(Qct,"mobilebert"),Qct.forEach(t),Jcr=r(sLe," \u2014 "),tO=n(sLe,"A",{href:!0});var Hct=s(tO);Ycr=r(Hct,"TFMobileBertForMultipleChoice"),Hct.forEach(t),Kcr=r(sLe," (MobileBERT model)"),sLe.forEach(t),Zcr=i(se),x9=n(se,"LI",{});var lLe=s(x9);Dpe=n(lLe,"STRONG",{});var Uct=s(Dpe);efr=r(Uct,"mpnet"),Uct.forEach(t),ofr=r(lLe," \u2014 "),aO=n(lLe,"A",{href:!0});var Jct=s(aO);rfr=r(Jct,"TFMPNetForMultipleChoice"),Jct.forEach(t),tfr=r(lLe," (MPNet model)"),lLe.forEach(t),afr=i(se),k9=n(se,"LI",{});var iLe=s(k9);jpe=n(iLe,"STRONG",{});var Yct=s(jpe);nfr=r(Yct,"rembert"),Yct.forEach(t),sfr=r(iLe," \u2014 "),nO=n(iLe,"A",{href:!0});var Kct=s(nO);lfr=r(Kct,"TFRemBertForMultipleChoice"),Kct.forEach(t),ifr=r(iLe," (RemBERT model)"),iLe.forEach(t),dfr=i(se),R9=n(se,"LI",{});var dLe=s(R9);Npe=n(dLe,"STRONG",{});var Zct=s(Npe);cfr=r(Zct,"roberta"),Zct.forEach(t),ffr=r(dLe," \u2014 "),sO=n(dLe,"A",{href:!0});var eft=s(sO);mfr=r(eft,"TFRobertaForMultipleChoice"),eft.forEach(t),gfr=r(dLe," (RoBERTa model)"),dLe.forEach(t),hfr=i(se),S9=n(se,"LI",{});var cLe=s(S9);qpe=n(cLe,"STRONG",{});var oft=s(qpe);pfr=r(oft,"roformer"),oft.forEach(t),_fr=r(cLe," \u2014 "),lO=n(cLe,"A",{href:!0});var rft=s(lO);ufr=r(rft,"TFRoFormerForMultipleChoice"),rft.forEach(t),bfr=r(cLe," (RoFormer model)"),cLe.forEach(t),vfr=i(se),P9=n(se,"LI",{});var fLe=s(P9);Gpe=n(fLe,"STRONG",{});var tft=s(Gpe);Tfr=r(tft,"xlm"),tft.forEach(t),Ffr=r(fLe," \u2014 "),iO=n(fLe,"A",{href:!0});var aft=s(iO);Cfr=r(aft,"TFXLMForMultipleChoice"),aft.forEach(t),Mfr=r(fLe," (XLM model)"),fLe.forEach(t),Efr=i(se),$9=n(se,"LI",{});var mLe=s($9);Ope=n(mLe,"STRONG",{});var nft=s(Ope);yfr=r(nft,"xlm-roberta"),nft.forEach(t),wfr=r(mLe," \u2014 "),dO=n(mLe,"A",{href:!0});var sft=s(dO);Afr=r(sft,"TFXLMRobertaForMultipleChoice"),sft.forEach(t),Lfr=r(mLe," (XLM-RoBERTa model)"),mLe.forEach(t),Bfr=i(se),I9=n(se,"LI",{});var gLe=s(I9);Xpe=n(gLe,"STRONG",{});var lft=s(Xpe);xfr=r(lft,"xlnet"),lft.forEach(t),kfr=r(gLe," \u2014 "),cO=n(gLe,"A",{href:!0});var ift=s(cO);Rfr=r(ift,"TFXLNetForMultipleChoice"),ift.forEach(t),Sfr=r(gLe," (XLNet model)"),gLe.forEach(t),se.forEach(t),Pfr=i(ua),Vpe=n(ua,"P",{});var dft=s(Vpe);$fr=r(dft,"Examples:"),dft.forEach(t),Ifr=i(ua),m(rA.$$.fragment,ua),ua.forEach(t),zl.forEach(t),sxe=i(c),yc=n(c,"H2",{class:!0});var _Re=s(yc);D9=n(_Re,"A",{id:!0,class:!0,href:!0});var cft=s(D9);zpe=n(cft,"SPAN",{});var fft=s(zpe);m(tA.$$.fragment,fft),fft.forEach(t),cft.forEach(t),Dfr=i(_Re),Wpe=n(_Re,"SPAN",{});var mft=s(Wpe);jfr=r(mft,"TFAutoModelForTableQuestionAnswering"),mft.forEach(t),_Re.forEach(t),lxe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(aA.$$.fragment,Ql),Nfr=i(Ql),wc=n(Ql,"P",{});var Hz=s(wc);qfr=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Qpe=n(Hz,"CODE",{});var gft=s(Qpe);Gfr=r(gft,"from_pretrained()"),gft.forEach(t),Ofr=r(Hz,"class method or the "),Hpe=n(Hz,"CODE",{});var hft=s(Hpe);Xfr=r(hft,"from_config()"),hft.forEach(t),Vfr=r(Hz,`class
method.`),Hz.forEach(t),zfr=i(Ql),nA=n(Ql,"P",{});var uRe=s(nA);Wfr=r(uRe,"This class cannot be instantiated directly using "),Upe=n(uRe,"CODE",{});var pft=s(Upe);Qfr=r(pft,"__init__()"),pft.forEach(t),Hfr=r(uRe," (throws an error)."),uRe.forEach(t),Ufr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Hl=s(_t);m(sA.$$.fragment,Hl),Jfr=i(Hl),Jpe=n(Hl,"P",{});var _ft=s(Jpe);Yfr=r(_ft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_ft.forEach(t),Kfr=i(Hl),Ac=n(Hl,"P",{});var Uz=s(Ac);Zfr=r(Uz,`Note:
Loading a model from its configuration file does `),Ype=n(Uz,"STRONG",{});var uft=s(Ype);emr=r(uft,"not"),uft.forEach(t),omr=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kpe=n(Uz,"CODE",{});var bft=s(Kpe);rmr=r(bft,"from_pretrained()"),bft.forEach(t),tmr=r(Uz,"to load the model weights."),Uz.forEach(t),amr=i(Hl),Zpe=n(Hl,"P",{});var vft=s(Zpe);nmr=r(vft,"Examples:"),vft.forEach(t),smr=i(Hl),m(lA.$$.fragment,Hl),Hl.forEach(t),lmr=i(Ql),Fo=n(Ql,"DIV",{class:!0});var ba=s(Fo);m(iA.$$.fragment,ba),imr=i(ba),e_e=n(ba,"P",{});var Tft=s(e_e);dmr=r(Tft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Tft.forEach(t),cmr=i(ba),bn=n(ba,"P",{});var iE=s(bn);fmr=r(iE,"The model class to instantiate is selected based on the "),o_e=n(iE,"CODE",{});var Fft=s(o_e);mmr=r(Fft,"model_type"),Fft.forEach(t),gmr=r(iE,` property of the config object (either
passed as an argument or loaded from `),r_e=n(iE,"CODE",{});var Cft=s(r_e);hmr=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),pmr=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(iE,"CODE",{});var Mft=s(t_e);_mr=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),umr=r(iE,":"),iE.forEach(t),bmr=i(ba),a_e=n(ba,"UL",{});var Eft=s(a_e);j9=n(Eft,"LI",{});var hLe=s(j9);n_e=n(hLe,"STRONG",{});var yft=s(n_e);vmr=r(yft,"tapas"),yft.forEach(t),Tmr=r(hLe," \u2014 "),fO=n(hLe,"A",{href:!0});var wft=s(fO);Fmr=r(wft,"TFTapasForQuestionAnswering"),wft.forEach(t),Cmr=r(hLe," (TAPAS model)"),hLe.forEach(t),Eft.forEach(t),Mmr=i(ba),s_e=n(ba,"P",{});var Aft=s(s_e);Emr=r(Aft,"Examples:"),Aft.forEach(t),ymr=i(ba),m(dA.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),ixe=i(c),Lc=n(c,"H2",{class:!0});var bRe=s(Lc);N9=n(bRe,"A",{id:!0,class:!0,href:!0});var Lft=s(N9);l_e=n(Lft,"SPAN",{});var Bft=s(l_e);m(cA.$$.fragment,Bft),Bft.forEach(t),Lft.forEach(t),wmr=i(bRe),i_e=n(bRe,"SPAN",{});var xft=s(i_e);Amr=r(xft,"TFAutoModelForTokenClassification"),xft.forEach(t),bRe.forEach(t),dxe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(fA.$$.fragment,Ul),Lmr=i(Ul),Bc=n(Ul,"P",{});var Jz=s(Bc);Bmr=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),d_e=n(Jz,"CODE",{});var kft=s(d_e);xmr=r(kft,"from_pretrained()"),kft.forEach(t),kmr=r(Jz,"class method or the "),c_e=n(Jz,"CODE",{});var Rft=s(c_e);Rmr=r(Rft,"from_config()"),Rft.forEach(t),Smr=r(Jz,`class
method.`),Jz.forEach(t),Pmr=i(Ul),mA=n(Ul,"P",{});var vRe=s(mA);$mr=r(vRe,"This class cannot be instantiated directly using "),f_e=n(vRe,"CODE",{});var Sft=s(f_e);Imr=r(Sft,"__init__()"),Sft.forEach(t),Dmr=r(vRe," (throws an error)."),vRe.forEach(t),jmr=i(Ul),ut=n(Ul,"DIV",{class:!0});var Jl=s(ut);m(gA.$$.fragment,Jl),Nmr=i(Jl),m_e=n(Jl,"P",{});var Pft=s(m_e);qmr=r(Pft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pft.forEach(t),Gmr=i(Jl),xc=n(Jl,"P",{});var Yz=s(xc);Omr=r(Yz,`Note:
Loading a model from its configuration file does `),g_e=n(Yz,"STRONG",{});var $ft=s(g_e);Xmr=r($ft,"not"),$ft.forEach(t),Vmr=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),h_e=n(Yz,"CODE",{});var Ift=s(h_e);zmr=r(Ift,"from_pretrained()"),Ift.forEach(t),Wmr=r(Yz,"to load the model weights."),Yz.forEach(t),Qmr=i(Jl),p_e=n(Jl,"P",{});var Dft=s(p_e);Hmr=r(Dft,"Examples:"),Dft.forEach(t),Umr=i(Jl),m(hA.$$.fragment,Jl),Jl.forEach(t),Jmr=i(Ul),Co=n(Ul,"DIV",{class:!0});var va=s(Co);m(pA.$$.fragment,va),Ymr=i(va),__e=n(va,"P",{});var jft=s(__e);Kmr=r(jft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jft.forEach(t),Zmr=i(va),vn=n(va,"P",{});var dE=s(vn);egr=r(dE,"The model class to instantiate is selected based on the "),u_e=n(dE,"CODE",{});var Nft=s(u_e);ogr=r(Nft,"model_type"),Nft.forEach(t),rgr=r(dE,` property of the config object (either
passed as an argument or loaded from `),b_e=n(dE,"CODE",{});var qft=s(b_e);tgr=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),agr=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=n(dE,"CODE",{});var Gft=s(v_e);ngr=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),sgr=r(dE,":"),dE.forEach(t),lgr=i(va),K=n(va,"UL",{});var oe=s(K);q9=n(oe,"LI",{});var pLe=s(q9);T_e=n(pLe,"STRONG",{});var Oft=s(T_e);igr=r(Oft,"albert"),Oft.forEach(t),dgr=r(pLe," \u2014 "),mO=n(pLe,"A",{href:!0});var Xft=s(mO);cgr=r(Xft,"TFAlbertForTokenClassification"),Xft.forEach(t),fgr=r(pLe," (ALBERT model)"),pLe.forEach(t),mgr=i(oe),G9=n(oe,"LI",{});var _Le=s(G9);F_e=n(_Le,"STRONG",{});var Vft=s(F_e);ggr=r(Vft,"bert"),Vft.forEach(t),hgr=r(_Le," \u2014 "),gO=n(_Le,"A",{href:!0});var zft=s(gO);pgr=r(zft,"TFBertForTokenClassification"),zft.forEach(t),_gr=r(_Le," (BERT model)"),_Le.forEach(t),ugr=i(oe),O9=n(oe,"LI",{});var uLe=s(O9);C_e=n(uLe,"STRONG",{});var Wft=s(C_e);bgr=r(Wft,"camembert"),Wft.forEach(t),vgr=r(uLe," \u2014 "),hO=n(uLe,"A",{href:!0});var Qft=s(hO);Tgr=r(Qft,"TFCamembertForTokenClassification"),Qft.forEach(t),Fgr=r(uLe," (CamemBERT model)"),uLe.forEach(t),Cgr=i(oe),X9=n(oe,"LI",{});var bLe=s(X9);M_e=n(bLe,"STRONG",{});var Hft=s(M_e);Mgr=r(Hft,"convbert"),Hft.forEach(t),Egr=r(bLe," \u2014 "),pO=n(bLe,"A",{href:!0});var Uft=s(pO);ygr=r(Uft,"TFConvBertForTokenClassification"),Uft.forEach(t),wgr=r(bLe," (ConvBERT model)"),bLe.forEach(t),Agr=i(oe),V9=n(oe,"LI",{});var vLe=s(V9);E_e=n(vLe,"STRONG",{});var Jft=s(E_e);Lgr=r(Jft,"deberta"),Jft.forEach(t),Bgr=r(vLe," \u2014 "),_O=n(vLe,"A",{href:!0});var Yft=s(_O);xgr=r(Yft,"TFDebertaForTokenClassification"),Yft.forEach(t),kgr=r(vLe," (DeBERTa model)"),vLe.forEach(t),Rgr=i(oe),z9=n(oe,"LI",{});var TLe=s(z9);y_e=n(TLe,"STRONG",{});var Kft=s(y_e);Sgr=r(Kft,"deberta-v2"),Kft.forEach(t),Pgr=r(TLe," \u2014 "),uO=n(TLe,"A",{href:!0});var Zft=s(uO);$gr=r(Zft,"TFDebertaV2ForTokenClassification"),Zft.forEach(t),Igr=r(TLe," (DeBERTa-v2 model)"),TLe.forEach(t),Dgr=i(oe),W9=n(oe,"LI",{});var FLe=s(W9);w_e=n(FLe,"STRONG",{});var emt=s(w_e);jgr=r(emt,"distilbert"),emt.forEach(t),Ngr=r(FLe," \u2014 "),bO=n(FLe,"A",{href:!0});var omt=s(bO);qgr=r(omt,"TFDistilBertForTokenClassification"),omt.forEach(t),Ggr=r(FLe," (DistilBERT model)"),FLe.forEach(t),Ogr=i(oe),Q9=n(oe,"LI",{});var CLe=s(Q9);A_e=n(CLe,"STRONG",{});var rmt=s(A_e);Xgr=r(rmt,"electra"),rmt.forEach(t),Vgr=r(CLe," \u2014 "),vO=n(CLe,"A",{href:!0});var tmt=s(vO);zgr=r(tmt,"TFElectraForTokenClassification"),tmt.forEach(t),Wgr=r(CLe," (ELECTRA model)"),CLe.forEach(t),Qgr=i(oe),H9=n(oe,"LI",{});var MLe=s(H9);L_e=n(MLe,"STRONG",{});var amt=s(L_e);Hgr=r(amt,"flaubert"),amt.forEach(t),Ugr=r(MLe," \u2014 "),TO=n(MLe,"A",{href:!0});var nmt=s(TO);Jgr=r(nmt,"TFFlaubertForTokenClassification"),nmt.forEach(t),Ygr=r(MLe," (FlauBERT model)"),MLe.forEach(t),Kgr=i(oe),U9=n(oe,"LI",{});var ELe=s(U9);B_e=n(ELe,"STRONG",{});var smt=s(B_e);Zgr=r(smt,"funnel"),smt.forEach(t),ehr=r(ELe," \u2014 "),FO=n(ELe,"A",{href:!0});var lmt=s(FO);ohr=r(lmt,"TFFunnelForTokenClassification"),lmt.forEach(t),rhr=r(ELe," (Funnel Transformer model)"),ELe.forEach(t),thr=i(oe),J9=n(oe,"LI",{});var yLe=s(J9);x_e=n(yLe,"STRONG",{});var imt=s(x_e);ahr=r(imt,"layoutlm"),imt.forEach(t),nhr=r(yLe," \u2014 "),CO=n(yLe,"A",{href:!0});var dmt=s(CO);shr=r(dmt,"TFLayoutLMForTokenClassification"),dmt.forEach(t),lhr=r(yLe," (LayoutLM model)"),yLe.forEach(t),ihr=i(oe),Y9=n(oe,"LI",{});var wLe=s(Y9);k_e=n(wLe,"STRONG",{});var cmt=s(k_e);dhr=r(cmt,"longformer"),cmt.forEach(t),chr=r(wLe," \u2014 "),MO=n(wLe,"A",{href:!0});var fmt=s(MO);fhr=r(fmt,"TFLongformerForTokenClassification"),fmt.forEach(t),mhr=r(wLe," (Longformer model)"),wLe.forEach(t),ghr=i(oe),K9=n(oe,"LI",{});var ALe=s(K9);R_e=n(ALe,"STRONG",{});var mmt=s(R_e);hhr=r(mmt,"mobilebert"),mmt.forEach(t),phr=r(ALe," \u2014 "),EO=n(ALe,"A",{href:!0});var gmt=s(EO);_hr=r(gmt,"TFMobileBertForTokenClassification"),gmt.forEach(t),uhr=r(ALe," (MobileBERT model)"),ALe.forEach(t),bhr=i(oe),Z9=n(oe,"LI",{});var LLe=s(Z9);S_e=n(LLe,"STRONG",{});var hmt=s(S_e);vhr=r(hmt,"mpnet"),hmt.forEach(t),Thr=r(LLe," \u2014 "),yO=n(LLe,"A",{href:!0});var pmt=s(yO);Fhr=r(pmt,"TFMPNetForTokenClassification"),pmt.forEach(t),Chr=r(LLe," (MPNet model)"),LLe.forEach(t),Mhr=i(oe),eC=n(oe,"LI",{});var BLe=s(eC);P_e=n(BLe,"STRONG",{});var _mt=s(P_e);Ehr=r(_mt,"rembert"),_mt.forEach(t),yhr=r(BLe," \u2014 "),wO=n(BLe,"A",{href:!0});var umt=s(wO);whr=r(umt,"TFRemBertForTokenClassification"),umt.forEach(t),Ahr=r(BLe," (RemBERT model)"),BLe.forEach(t),Lhr=i(oe),oC=n(oe,"LI",{});var xLe=s(oC);$_e=n(xLe,"STRONG",{});var bmt=s($_e);Bhr=r(bmt,"roberta"),bmt.forEach(t),xhr=r(xLe," \u2014 "),AO=n(xLe,"A",{href:!0});var vmt=s(AO);khr=r(vmt,"TFRobertaForTokenClassification"),vmt.forEach(t),Rhr=r(xLe," (RoBERTa model)"),xLe.forEach(t),Shr=i(oe),rC=n(oe,"LI",{});var kLe=s(rC);I_e=n(kLe,"STRONG",{});var Tmt=s(I_e);Phr=r(Tmt,"roformer"),Tmt.forEach(t),$hr=r(kLe," \u2014 "),LO=n(kLe,"A",{href:!0});var Fmt=s(LO);Ihr=r(Fmt,"TFRoFormerForTokenClassification"),Fmt.forEach(t),Dhr=r(kLe," (RoFormer model)"),kLe.forEach(t),jhr=i(oe),tC=n(oe,"LI",{});var RLe=s(tC);D_e=n(RLe,"STRONG",{});var Cmt=s(D_e);Nhr=r(Cmt,"xlm"),Cmt.forEach(t),qhr=r(RLe," \u2014 "),BO=n(RLe,"A",{href:!0});var Mmt=s(BO);Ghr=r(Mmt,"TFXLMForTokenClassification"),Mmt.forEach(t),Ohr=r(RLe," (XLM model)"),RLe.forEach(t),Xhr=i(oe),aC=n(oe,"LI",{});var SLe=s(aC);j_e=n(SLe,"STRONG",{});var Emt=s(j_e);Vhr=r(Emt,"xlm-roberta"),Emt.forEach(t),zhr=r(SLe," \u2014 "),xO=n(SLe,"A",{href:!0});var ymt=s(xO);Whr=r(ymt,"TFXLMRobertaForTokenClassification"),ymt.forEach(t),Qhr=r(SLe," (XLM-RoBERTa model)"),SLe.forEach(t),Hhr=i(oe),nC=n(oe,"LI",{});var PLe=s(nC);N_e=n(PLe,"STRONG",{});var wmt=s(N_e);Uhr=r(wmt,"xlnet"),wmt.forEach(t),Jhr=r(PLe," \u2014 "),kO=n(PLe,"A",{href:!0});var Amt=s(kO);Yhr=r(Amt,"TFXLNetForTokenClassification"),Amt.forEach(t),Khr=r(PLe," (XLNet model)"),PLe.forEach(t),oe.forEach(t),Zhr=i(va),q_e=n(va,"P",{});var Lmt=s(q_e);epr=r(Lmt,"Examples:"),Lmt.forEach(t),opr=i(va),m(_A.$$.fragment,va),va.forEach(t),Ul.forEach(t),cxe=i(c),kc=n(c,"H2",{class:!0});var TRe=s(kc);sC=n(TRe,"A",{id:!0,class:!0,href:!0});var Bmt=s(sC);G_e=n(Bmt,"SPAN",{});var xmt=s(G_e);m(uA.$$.fragment,xmt),xmt.forEach(t),Bmt.forEach(t),rpr=i(TRe),O_e=n(TRe,"SPAN",{});var kmt=s(O_e);tpr=r(kmt,"TFAutoModelForQuestionAnswering"),kmt.forEach(t),TRe.forEach(t),fxe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(bA.$$.fragment,Yl),apr=i(Yl),Rc=n(Yl,"P",{});var Kz=s(Rc);npr=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),X_e=n(Kz,"CODE",{});var Rmt=s(X_e);spr=r(Rmt,"from_pretrained()"),Rmt.forEach(t),lpr=r(Kz,"class method or the "),V_e=n(Kz,"CODE",{});var Smt=s(V_e);ipr=r(Smt,"from_config()"),Smt.forEach(t),dpr=r(Kz,`class
method.`),Kz.forEach(t),cpr=i(Yl),vA=n(Yl,"P",{});var FRe=s(vA);fpr=r(FRe,"This class cannot be instantiated directly using "),z_e=n(FRe,"CODE",{});var Pmt=s(z_e);mpr=r(Pmt,"__init__()"),Pmt.forEach(t),gpr=r(FRe," (throws an error)."),FRe.forEach(t),hpr=i(Yl),bt=n(Yl,"DIV",{class:!0});var Kl=s(bt);m(TA.$$.fragment,Kl),ppr=i(Kl),W_e=n(Kl,"P",{});var $mt=s(W_e);_pr=r($mt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$mt.forEach(t),upr=i(Kl),Sc=n(Kl,"P",{});var Zz=s(Sc);bpr=r(Zz,`Note:
Loading a model from its configuration file does `),Q_e=n(Zz,"STRONG",{});var Imt=s(Q_e);vpr=r(Imt,"not"),Imt.forEach(t),Tpr=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),H_e=n(Zz,"CODE",{});var Dmt=s(H_e);Fpr=r(Dmt,"from_pretrained()"),Dmt.forEach(t),Cpr=r(Zz,"to load the model weights."),Zz.forEach(t),Mpr=i(Kl),U_e=n(Kl,"P",{});var jmt=s(U_e);Epr=r(jmt,"Examples:"),jmt.forEach(t),ypr=i(Kl),m(FA.$$.fragment,Kl),Kl.forEach(t),wpr=i(Yl),Mo=n(Yl,"DIV",{class:!0});var Ta=s(Mo);m(CA.$$.fragment,Ta),Apr=i(Ta),J_e=n(Ta,"P",{});var Nmt=s(J_e);Lpr=r(Nmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nmt.forEach(t),Bpr=i(Ta),Tn=n(Ta,"P",{});var cE=s(Tn);xpr=r(cE,"The model class to instantiate is selected based on the "),Y_e=n(cE,"CODE",{});var qmt=s(Y_e);kpr=r(qmt,"model_type"),qmt.forEach(t),Rpr=r(cE,` property of the config object (either
passed as an argument or loaded from `),K_e=n(cE,"CODE",{});var Gmt=s(K_e);Spr=r(Gmt,"pretrained_model_name_or_path"),Gmt.forEach(t),Ppr=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(cE,"CODE",{});var Omt=s(Z_e);$pr=r(Omt,"pretrained_model_name_or_path"),Omt.forEach(t),Ipr=r(cE,":"),cE.forEach(t),Dpr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);lC=n(re,"LI",{});var $Le=s(lC);eue=n($Le,"STRONG",{});var Xmt=s(eue);jpr=r(Xmt,"albert"),Xmt.forEach(t),Npr=r($Le," \u2014 "),RO=n($Le,"A",{href:!0});var Vmt=s(RO);qpr=r(Vmt,"TFAlbertForQuestionAnswering"),Vmt.forEach(t),Gpr=r($Le," (ALBERT model)"),$Le.forEach(t),Opr=i(re),iC=n(re,"LI",{});var ILe=s(iC);oue=n(ILe,"STRONG",{});var zmt=s(oue);Xpr=r(zmt,"bert"),zmt.forEach(t),Vpr=r(ILe," \u2014 "),SO=n(ILe,"A",{href:!0});var Wmt=s(SO);zpr=r(Wmt,"TFBertForQuestionAnswering"),Wmt.forEach(t),Wpr=r(ILe," (BERT model)"),ILe.forEach(t),Qpr=i(re),dC=n(re,"LI",{});var DLe=s(dC);rue=n(DLe,"STRONG",{});var Qmt=s(rue);Hpr=r(Qmt,"camembert"),Qmt.forEach(t),Upr=r(DLe," \u2014 "),PO=n(DLe,"A",{href:!0});var Hmt=s(PO);Jpr=r(Hmt,"TFCamembertForQuestionAnswering"),Hmt.forEach(t),Ypr=r(DLe," (CamemBERT model)"),DLe.forEach(t),Kpr=i(re),cC=n(re,"LI",{});var jLe=s(cC);tue=n(jLe,"STRONG",{});var Umt=s(tue);Zpr=r(Umt,"convbert"),Umt.forEach(t),e_r=r(jLe," \u2014 "),$O=n(jLe,"A",{href:!0});var Jmt=s($O);o_r=r(Jmt,"TFConvBertForQuestionAnswering"),Jmt.forEach(t),r_r=r(jLe," (ConvBERT model)"),jLe.forEach(t),t_r=i(re),fC=n(re,"LI",{});var NLe=s(fC);aue=n(NLe,"STRONG",{});var Ymt=s(aue);a_r=r(Ymt,"deberta"),Ymt.forEach(t),n_r=r(NLe," \u2014 "),IO=n(NLe,"A",{href:!0});var Kmt=s(IO);s_r=r(Kmt,"TFDebertaForQuestionAnswering"),Kmt.forEach(t),l_r=r(NLe," (DeBERTa model)"),NLe.forEach(t),i_r=i(re),mC=n(re,"LI",{});var qLe=s(mC);nue=n(qLe,"STRONG",{});var Zmt=s(nue);d_r=r(Zmt,"deberta-v2"),Zmt.forEach(t),c_r=r(qLe," \u2014 "),DO=n(qLe,"A",{href:!0});var egt=s(DO);f_r=r(egt,"TFDebertaV2ForQuestionAnswering"),egt.forEach(t),m_r=r(qLe," (DeBERTa-v2 model)"),qLe.forEach(t),g_r=i(re),gC=n(re,"LI",{});var GLe=s(gC);sue=n(GLe,"STRONG",{});var ogt=s(sue);h_r=r(ogt,"distilbert"),ogt.forEach(t),p_r=r(GLe," \u2014 "),jO=n(GLe,"A",{href:!0});var rgt=s(jO);__r=r(rgt,"TFDistilBertForQuestionAnswering"),rgt.forEach(t),u_r=r(GLe," (DistilBERT model)"),GLe.forEach(t),b_r=i(re),hC=n(re,"LI",{});var OLe=s(hC);lue=n(OLe,"STRONG",{});var tgt=s(lue);v_r=r(tgt,"electra"),tgt.forEach(t),T_r=r(OLe," \u2014 "),NO=n(OLe,"A",{href:!0});var agt=s(NO);F_r=r(agt,"TFElectraForQuestionAnswering"),agt.forEach(t),C_r=r(OLe," (ELECTRA model)"),OLe.forEach(t),M_r=i(re),pC=n(re,"LI",{});var XLe=s(pC);iue=n(XLe,"STRONG",{});var ngt=s(iue);E_r=r(ngt,"flaubert"),ngt.forEach(t),y_r=r(XLe," \u2014 "),qO=n(XLe,"A",{href:!0});var sgt=s(qO);w_r=r(sgt,"TFFlaubertForQuestionAnsweringSimple"),sgt.forEach(t),A_r=r(XLe," (FlauBERT model)"),XLe.forEach(t),L_r=i(re),_C=n(re,"LI",{});var VLe=s(_C);due=n(VLe,"STRONG",{});var lgt=s(due);B_r=r(lgt,"funnel"),lgt.forEach(t),x_r=r(VLe," \u2014 "),GO=n(VLe,"A",{href:!0});var igt=s(GO);k_r=r(igt,"TFFunnelForQuestionAnswering"),igt.forEach(t),R_r=r(VLe," (Funnel Transformer model)"),VLe.forEach(t),S_r=i(re),uC=n(re,"LI",{});var zLe=s(uC);cue=n(zLe,"STRONG",{});var dgt=s(cue);P_r=r(dgt,"longformer"),dgt.forEach(t),$_r=r(zLe," \u2014 "),OO=n(zLe,"A",{href:!0});var cgt=s(OO);I_r=r(cgt,"TFLongformerForQuestionAnswering"),cgt.forEach(t),D_r=r(zLe," (Longformer model)"),zLe.forEach(t),j_r=i(re),bC=n(re,"LI",{});var WLe=s(bC);fue=n(WLe,"STRONG",{});var fgt=s(fue);N_r=r(fgt,"mobilebert"),fgt.forEach(t),q_r=r(WLe," \u2014 "),XO=n(WLe,"A",{href:!0});var mgt=s(XO);G_r=r(mgt,"TFMobileBertForQuestionAnswering"),mgt.forEach(t),O_r=r(WLe," (MobileBERT model)"),WLe.forEach(t),X_r=i(re),vC=n(re,"LI",{});var QLe=s(vC);mue=n(QLe,"STRONG",{});var ggt=s(mue);V_r=r(ggt,"mpnet"),ggt.forEach(t),z_r=r(QLe," \u2014 "),VO=n(QLe,"A",{href:!0});var hgt=s(VO);W_r=r(hgt,"TFMPNetForQuestionAnswering"),hgt.forEach(t),Q_r=r(QLe," (MPNet model)"),QLe.forEach(t),H_r=i(re),TC=n(re,"LI",{});var HLe=s(TC);gue=n(HLe,"STRONG",{});var pgt=s(gue);U_r=r(pgt,"rembert"),pgt.forEach(t),J_r=r(HLe," \u2014 "),zO=n(HLe,"A",{href:!0});var _gt=s(zO);Y_r=r(_gt,"TFRemBertForQuestionAnswering"),_gt.forEach(t),K_r=r(HLe," (RemBERT model)"),HLe.forEach(t),Z_r=i(re),FC=n(re,"LI",{});var ULe=s(FC);hue=n(ULe,"STRONG",{});var ugt=s(hue);eur=r(ugt,"roberta"),ugt.forEach(t),our=r(ULe," \u2014 "),WO=n(ULe,"A",{href:!0});var bgt=s(WO);rur=r(bgt,"TFRobertaForQuestionAnswering"),bgt.forEach(t),tur=r(ULe," (RoBERTa model)"),ULe.forEach(t),aur=i(re),CC=n(re,"LI",{});var JLe=s(CC);pue=n(JLe,"STRONG",{});var vgt=s(pue);nur=r(vgt,"roformer"),vgt.forEach(t),sur=r(JLe," \u2014 "),QO=n(JLe,"A",{href:!0});var Tgt=s(QO);lur=r(Tgt,"TFRoFormerForQuestionAnswering"),Tgt.forEach(t),iur=r(JLe," (RoFormer model)"),JLe.forEach(t),dur=i(re),MC=n(re,"LI",{});var YLe=s(MC);_ue=n(YLe,"STRONG",{});var Fgt=s(_ue);cur=r(Fgt,"xlm"),Fgt.forEach(t),fur=r(YLe," \u2014 "),HO=n(YLe,"A",{href:!0});var Cgt=s(HO);mur=r(Cgt,"TFXLMForQuestionAnsweringSimple"),Cgt.forEach(t),gur=r(YLe," (XLM model)"),YLe.forEach(t),hur=i(re),EC=n(re,"LI",{});var KLe=s(EC);uue=n(KLe,"STRONG",{});var Mgt=s(uue);pur=r(Mgt,"xlm-roberta"),Mgt.forEach(t),_ur=r(KLe," \u2014 "),UO=n(KLe,"A",{href:!0});var Egt=s(UO);uur=r(Egt,"TFXLMRobertaForQuestionAnswering"),Egt.forEach(t),bur=r(KLe," (XLM-RoBERTa model)"),KLe.forEach(t),vur=i(re),yC=n(re,"LI",{});var ZLe=s(yC);bue=n(ZLe,"STRONG",{});var ygt=s(bue);Tur=r(ygt,"xlnet"),ygt.forEach(t),Fur=r(ZLe," \u2014 "),JO=n(ZLe,"A",{href:!0});var wgt=s(JO);Cur=r(wgt,"TFXLNetForQuestionAnsweringSimple"),wgt.forEach(t),Mur=r(ZLe," (XLNet model)"),ZLe.forEach(t),re.forEach(t),Eur=i(Ta),vue=n(Ta,"P",{});var Agt=s(vue);yur=r(Agt,"Examples:"),Agt.forEach(t),wur=i(Ta),m(MA.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),mxe=i(c),Pc=n(c,"H2",{class:!0});var CRe=s(Pc);wC=n(CRe,"A",{id:!0,class:!0,href:!0});var Lgt=s(wC);Tue=n(Lgt,"SPAN",{});var Bgt=s(Tue);m(EA.$$.fragment,Bgt),Bgt.forEach(t),Lgt.forEach(t),Aur=i(CRe),Fue=n(CRe,"SPAN",{});var xgt=s(Fue);Lur=r(xgt,"TFAutoModelForVision2Seq"),xgt.forEach(t),CRe.forEach(t),gxe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(yA.$$.fragment,Zl),Bur=i(Zl),$c=n(Zl,"P",{});var eW=s($c);xur=r(eW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cue=n(eW,"CODE",{});var kgt=s(Cue);kur=r(kgt,"from_pretrained()"),kgt.forEach(t),Rur=r(eW,"class method or the "),Mue=n(eW,"CODE",{});var Rgt=s(Mue);Sur=r(Rgt,"from_config()"),Rgt.forEach(t),Pur=r(eW,`class
method.`),eW.forEach(t),$ur=i(Zl),wA=n(Zl,"P",{});var MRe=s(wA);Iur=r(MRe,"This class cannot be instantiated directly using "),Eue=n(MRe,"CODE",{});var Sgt=s(Eue);Dur=r(Sgt,"__init__()"),Sgt.forEach(t),jur=r(MRe," (throws an error)."),MRe.forEach(t),Nur=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(AA.$$.fragment,ei),qur=i(ei),yue=n(ei,"P",{});var Pgt=s(yue);Gur=r(Pgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pgt.forEach(t),Our=i(ei),Ic=n(ei,"P",{});var oW=s(Ic);Xur=r(oW,`Note:
Loading a model from its configuration file does `),wue=n(oW,"STRONG",{});var $gt=s(wue);Vur=r($gt,"not"),$gt.forEach(t),zur=r(oW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aue=n(oW,"CODE",{});var Igt=s(Aue);Wur=r(Igt,"from_pretrained()"),Igt.forEach(t),Qur=r(oW,"to load the model weights."),oW.forEach(t),Hur=i(ei),Lue=n(ei,"P",{});var Dgt=s(Lue);Uur=r(Dgt,"Examples:"),Dgt.forEach(t),Jur=i(ei),m(LA.$$.fragment,ei),ei.forEach(t),Yur=i(Zl),Eo=n(Zl,"DIV",{class:!0});var Fa=s(Eo);m(BA.$$.fragment,Fa),Kur=i(Fa),Bue=n(Fa,"P",{});var jgt=s(Bue);Zur=r(jgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jgt.forEach(t),e1r=i(Fa),Fn=n(Fa,"P",{});var fE=s(Fn);o1r=r(fE,"The model class to instantiate is selected based on the "),xue=n(fE,"CODE",{});var Ngt=s(xue);r1r=r(Ngt,"model_type"),Ngt.forEach(t),t1r=r(fE,` property of the config object (either
passed as an argument or loaded from `),kue=n(fE,"CODE",{});var qgt=s(kue);a1r=r(qgt,"pretrained_model_name_or_path"),qgt.forEach(t),n1r=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(fE,"CODE",{});var Ggt=s(Rue);s1r=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),l1r=r(fE,":"),fE.forEach(t),i1r=i(Fa),Sue=n(Fa,"UL",{});var Ogt=s(Sue);AC=n(Ogt,"LI",{});var e8e=s(AC);Pue=n(e8e,"STRONG",{});var Xgt=s(Pue);d1r=r(Xgt,"vision-encoder-decoder"),Xgt.forEach(t),c1r=r(e8e," \u2014 "),YO=n(e8e,"A",{href:!0});var Vgt=s(YO);f1r=r(Vgt,"TFVisionEncoderDecoderModel"),Vgt.forEach(t),m1r=r(e8e," (Vision Encoder decoder model)"),e8e.forEach(t),Ogt.forEach(t),g1r=i(Fa),$ue=n(Fa,"P",{});var zgt=s($ue);h1r=r(zgt,"Examples:"),zgt.forEach(t),p1r=i(Fa),m(xA.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),hxe=i(c),Dc=n(c,"H2",{class:!0});var ERe=s(Dc);LC=n(ERe,"A",{id:!0,class:!0,href:!0});var Wgt=s(LC);Iue=n(Wgt,"SPAN",{});var Qgt=s(Iue);m(kA.$$.fragment,Qgt),Qgt.forEach(t),Wgt.forEach(t),_1r=i(ERe),Due=n(ERe,"SPAN",{});var Hgt=s(Due);u1r=r(Hgt,"TFAutoModelForSpeechSeq2Seq"),Hgt.forEach(t),ERe.forEach(t),pxe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(RA.$$.fragment,oi),b1r=i(oi),jc=n(oi,"P",{});var rW=s(jc);v1r=r(rW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jue=n(rW,"CODE",{});var Ugt=s(jue);T1r=r(Ugt,"from_pretrained()"),Ugt.forEach(t),F1r=r(rW,"class method or the "),Nue=n(rW,"CODE",{});var Jgt=s(Nue);C1r=r(Jgt,"from_config()"),Jgt.forEach(t),M1r=r(rW,`class
method.`),rW.forEach(t),E1r=i(oi),SA=n(oi,"P",{});var yRe=s(SA);y1r=r(yRe,"This class cannot be instantiated directly using "),que=n(yRe,"CODE",{});var Ygt=s(que);w1r=r(Ygt,"__init__()"),Ygt.forEach(t),A1r=r(yRe," (throws an error)."),yRe.forEach(t),L1r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(PA.$$.fragment,ri),B1r=i(ri),Gue=n(ri,"P",{});var Kgt=s(Gue);x1r=r(Kgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Kgt.forEach(t),k1r=i(ri),Nc=n(ri,"P",{});var tW=s(Nc);R1r=r(tW,`Note:
Loading a model from its configuration file does `),Oue=n(tW,"STRONG",{});var Zgt=s(Oue);S1r=r(Zgt,"not"),Zgt.forEach(t),P1r=r(tW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xue=n(tW,"CODE",{});var eht=s(Xue);$1r=r(eht,"from_pretrained()"),eht.forEach(t),I1r=r(tW,"to load the model weights."),tW.forEach(t),D1r=i(ri),Vue=n(ri,"P",{});var oht=s(Vue);j1r=r(oht,"Examples:"),oht.forEach(t),N1r=i(ri),m($A.$$.fragment,ri),ri.forEach(t),q1r=i(oi),yo=n(oi,"DIV",{class:!0});var Ca=s(yo);m(IA.$$.fragment,Ca),G1r=i(Ca),zue=n(Ca,"P",{});var rht=s(zue);O1r=r(rht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rht.forEach(t),X1r=i(Ca),Cn=n(Ca,"P",{});var mE=s(Cn);V1r=r(mE,"The model class to instantiate is selected based on the "),Wue=n(mE,"CODE",{});var tht=s(Wue);z1r=r(tht,"model_type"),tht.forEach(t),W1r=r(mE,` property of the config object (either
passed as an argument or loaded from `),Que=n(mE,"CODE",{});var aht=s(Que);Q1r=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),H1r=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(mE,"CODE",{});var nht=s(Hue);U1r=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),J1r=r(mE,":"),mE.forEach(t),Y1r=i(Ca),Uue=n(Ca,"UL",{});var sht=s(Uue);BC=n(sht,"LI",{});var o8e=s(BC);Jue=n(o8e,"STRONG",{});var lht=s(Jue);K1r=r(lht,"speech_to_text"),lht.forEach(t),Z1r=r(o8e," \u2014 "),KO=n(o8e,"A",{href:!0});var iht=s(KO);e2r=r(iht,"TFSpeech2TextForConditionalGeneration"),iht.forEach(t),o2r=r(o8e," (Speech2Text model)"),o8e.forEach(t),sht.forEach(t),r2r=i(Ca),Yue=n(Ca,"P",{});var dht=s(Yue);t2r=r(dht,"Examples:"),dht.forEach(t),a2r=i(Ca),m(DA.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),_xe=i(c),qc=n(c,"H2",{class:!0});var wRe=s(qc);xC=n(wRe,"A",{id:!0,class:!0,href:!0});var cht=s(xC);Kue=n(cht,"SPAN",{});var fht=s(Kue);m(jA.$$.fragment,fht),fht.forEach(t),cht.forEach(t),n2r=i(wRe),Zue=n(wRe,"SPAN",{});var mht=s(Zue);s2r=r(mht,"FlaxAutoModel"),mht.forEach(t),wRe.forEach(t),uxe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(NA.$$.fragment,ti),l2r=i(ti),Gc=n(ti,"P",{});var aW=s(Gc);i2r=r(aW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),e1e=n(aW,"CODE",{});var ght=s(e1e);d2r=r(ght,"from_pretrained()"),ght.forEach(t),c2r=r(aW,"class method or the "),o1e=n(aW,"CODE",{});var hht=s(o1e);f2r=r(hht,"from_config()"),hht.forEach(t),m2r=r(aW,`class
method.`),aW.forEach(t),g2r=i(ti),qA=n(ti,"P",{});var ARe=s(qA);h2r=r(ARe,"This class cannot be instantiated directly using "),r1e=n(ARe,"CODE",{});var pht=s(r1e);p2r=r(pht,"__init__()"),pht.forEach(t),_2r=r(ARe," (throws an error)."),ARe.forEach(t),u2r=i(ti),Ft=n(ti,"DIV",{class:!0});var ai=s(Ft);m(GA.$$.fragment,ai),b2r=i(ai),t1e=n(ai,"P",{});var _ht=s(t1e);v2r=r(_ht,"Instantiates one of the base model classes of the library from a configuration."),_ht.forEach(t),T2r=i(ai),Oc=n(ai,"P",{});var nW=s(Oc);F2r=r(nW,`Note:
Loading a model from its configuration file does `),a1e=n(nW,"STRONG",{});var uht=s(a1e);C2r=r(uht,"not"),uht.forEach(t),M2r=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),n1e=n(nW,"CODE",{});var bht=s(n1e);E2r=r(bht,"from_pretrained()"),bht.forEach(t),y2r=r(nW,"to load the model weights."),nW.forEach(t),w2r=i(ai),s1e=n(ai,"P",{});var vht=s(s1e);A2r=r(vht,"Examples:"),vht.forEach(t),L2r=i(ai),m(OA.$$.fragment,ai),ai.forEach(t),B2r=i(ti),wo=n(ti,"DIV",{class:!0});var Ma=s(wo);m(XA.$$.fragment,Ma),x2r=i(Ma),l1e=n(Ma,"P",{});var Tht=s(l1e);k2r=r(Tht,"Instantiate one of the base model classes of the library from a pretrained model."),Tht.forEach(t),R2r=i(Ma),Mn=n(Ma,"P",{});var gE=s(Mn);S2r=r(gE,"The model class to instantiate is selected based on the "),i1e=n(gE,"CODE",{});var Fht=s(i1e);P2r=r(Fht,"model_type"),Fht.forEach(t),$2r=r(gE,` property of the config object (either
passed as an argument or loaded from `),d1e=n(gE,"CODE",{});var Cht=s(d1e);I2r=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),D2r=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(gE,"CODE",{});var Mht=s(c1e);j2r=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),N2r=r(gE,":"),gE.forEach(t),q2r=i(Ma),z=n(Ma,"UL",{});var Q=s(z);kC=n(Q,"LI",{});var r8e=s(kC);f1e=n(r8e,"STRONG",{});var Eht=s(f1e);G2r=r(Eht,"albert"),Eht.forEach(t),O2r=r(r8e," \u2014 "),ZO=n(r8e,"A",{href:!0});var yht=s(ZO);X2r=r(yht,"FlaxAlbertModel"),yht.forEach(t),V2r=r(r8e," (ALBERT model)"),r8e.forEach(t),z2r=i(Q),RC=n(Q,"LI",{});var t8e=s(RC);m1e=n(t8e,"STRONG",{});var wht=s(m1e);W2r=r(wht,"bart"),wht.forEach(t),Q2r=r(t8e," \u2014 "),eX=n(t8e,"A",{href:!0});var Aht=s(eX);H2r=r(Aht,"FlaxBartModel"),Aht.forEach(t),U2r=r(t8e," (BART model)"),t8e.forEach(t),J2r=i(Q),SC=n(Q,"LI",{});var a8e=s(SC);g1e=n(a8e,"STRONG",{});var Lht=s(g1e);Y2r=r(Lht,"beit"),Lht.forEach(t),K2r=r(a8e," \u2014 "),oX=n(a8e,"A",{href:!0});var Bht=s(oX);Z2r=r(Bht,"FlaxBeitModel"),Bht.forEach(t),ebr=r(a8e," (BEiT model)"),a8e.forEach(t),obr=i(Q),PC=n(Q,"LI",{});var n8e=s(PC);h1e=n(n8e,"STRONG",{});var xht=s(h1e);rbr=r(xht,"bert"),xht.forEach(t),tbr=r(n8e," \u2014 "),rX=n(n8e,"A",{href:!0});var kht=s(rX);abr=r(kht,"FlaxBertModel"),kht.forEach(t),nbr=r(n8e," (BERT model)"),n8e.forEach(t),sbr=i(Q),$C=n(Q,"LI",{});var s8e=s($C);p1e=n(s8e,"STRONG",{});var Rht=s(p1e);lbr=r(Rht,"big_bird"),Rht.forEach(t),ibr=r(s8e," \u2014 "),tX=n(s8e,"A",{href:!0});var Sht=s(tX);dbr=r(Sht,"FlaxBigBirdModel"),Sht.forEach(t),cbr=r(s8e," (BigBird model)"),s8e.forEach(t),fbr=i(Q),IC=n(Q,"LI",{});var l8e=s(IC);_1e=n(l8e,"STRONG",{});var Pht=s(_1e);mbr=r(Pht,"blenderbot"),Pht.forEach(t),gbr=r(l8e," \u2014 "),aX=n(l8e,"A",{href:!0});var $ht=s(aX);hbr=r($ht,"FlaxBlenderbotModel"),$ht.forEach(t),pbr=r(l8e," (Blenderbot model)"),l8e.forEach(t),_br=i(Q),DC=n(Q,"LI",{});var i8e=s(DC);u1e=n(i8e,"STRONG",{});var Iht=s(u1e);ubr=r(Iht,"blenderbot-small"),Iht.forEach(t),bbr=r(i8e," \u2014 "),nX=n(i8e,"A",{href:!0});var Dht=s(nX);vbr=r(Dht,"FlaxBlenderbotSmallModel"),Dht.forEach(t),Tbr=r(i8e," (BlenderbotSmall model)"),i8e.forEach(t),Fbr=i(Q),jC=n(Q,"LI",{});var d8e=s(jC);b1e=n(d8e,"STRONG",{});var jht=s(b1e);Cbr=r(jht,"clip"),jht.forEach(t),Mbr=r(d8e," \u2014 "),sX=n(d8e,"A",{href:!0});var Nht=s(sX);Ebr=r(Nht,"FlaxCLIPModel"),Nht.forEach(t),ybr=r(d8e," (CLIP model)"),d8e.forEach(t),wbr=i(Q),NC=n(Q,"LI",{});var c8e=s(NC);v1e=n(c8e,"STRONG",{});var qht=s(v1e);Abr=r(qht,"distilbert"),qht.forEach(t),Lbr=r(c8e," \u2014 "),lX=n(c8e,"A",{href:!0});var Ght=s(lX);Bbr=r(Ght,"FlaxDistilBertModel"),Ght.forEach(t),xbr=r(c8e," (DistilBERT model)"),c8e.forEach(t),kbr=i(Q),qC=n(Q,"LI",{});var f8e=s(qC);T1e=n(f8e,"STRONG",{});var Oht=s(T1e);Rbr=r(Oht,"electra"),Oht.forEach(t),Sbr=r(f8e," \u2014 "),iX=n(f8e,"A",{href:!0});var Xht=s(iX);Pbr=r(Xht,"FlaxElectraModel"),Xht.forEach(t),$br=r(f8e," (ELECTRA model)"),f8e.forEach(t),Ibr=i(Q),GC=n(Q,"LI",{});var m8e=s(GC);F1e=n(m8e,"STRONG",{});var Vht=s(F1e);Dbr=r(Vht,"gpt2"),Vht.forEach(t),jbr=r(m8e," \u2014 "),dX=n(m8e,"A",{href:!0});var zht=s(dX);Nbr=r(zht,"FlaxGPT2Model"),zht.forEach(t),qbr=r(m8e," (OpenAI GPT-2 model)"),m8e.forEach(t),Gbr=i(Q),OC=n(Q,"LI",{});var g8e=s(OC);C1e=n(g8e,"STRONG",{});var Wht=s(C1e);Obr=r(Wht,"gpt_neo"),Wht.forEach(t),Xbr=r(g8e," \u2014 "),cX=n(g8e,"A",{href:!0});var Qht=s(cX);Vbr=r(Qht,"FlaxGPTNeoModel"),Qht.forEach(t),zbr=r(g8e," (GPT Neo model)"),g8e.forEach(t),Wbr=i(Q),XC=n(Q,"LI",{});var h8e=s(XC);M1e=n(h8e,"STRONG",{});var Hht=s(M1e);Qbr=r(Hht,"gptj"),Hht.forEach(t),Hbr=r(h8e," \u2014 "),fX=n(h8e,"A",{href:!0});var Uht=s(fX);Ubr=r(Uht,"FlaxGPTJModel"),Uht.forEach(t),Jbr=r(h8e," (GPT-J model)"),h8e.forEach(t),Ybr=i(Q),VC=n(Q,"LI",{});var p8e=s(VC);E1e=n(p8e,"STRONG",{});var Jht=s(E1e);Kbr=r(Jht,"marian"),Jht.forEach(t),Zbr=r(p8e," \u2014 "),mX=n(p8e,"A",{href:!0});var Yht=s(mX);e5r=r(Yht,"FlaxMarianModel"),Yht.forEach(t),o5r=r(p8e," (Marian model)"),p8e.forEach(t),r5r=i(Q),zC=n(Q,"LI",{});var _8e=s(zC);y1e=n(_8e,"STRONG",{});var Kht=s(y1e);t5r=r(Kht,"mbart"),Kht.forEach(t),a5r=r(_8e," \u2014 "),gX=n(_8e,"A",{href:!0});var Zht=s(gX);n5r=r(Zht,"FlaxMBartModel"),Zht.forEach(t),s5r=r(_8e," (mBART model)"),_8e.forEach(t),l5r=i(Q),WC=n(Q,"LI",{});var u8e=s(WC);w1e=n(u8e,"STRONG",{});var ept=s(w1e);i5r=r(ept,"mt5"),ept.forEach(t),d5r=r(u8e," \u2014 "),hX=n(u8e,"A",{href:!0});var opt=s(hX);c5r=r(opt,"FlaxMT5Model"),opt.forEach(t),f5r=r(u8e," (mT5 model)"),u8e.forEach(t),m5r=i(Q),QC=n(Q,"LI",{});var b8e=s(QC);A1e=n(b8e,"STRONG",{});var rpt=s(A1e);g5r=r(rpt,"pegasus"),rpt.forEach(t),h5r=r(b8e," \u2014 "),pX=n(b8e,"A",{href:!0});var tpt=s(pX);p5r=r(tpt,"FlaxPegasusModel"),tpt.forEach(t),_5r=r(b8e," (Pegasus model)"),b8e.forEach(t),u5r=i(Q),HC=n(Q,"LI",{});var v8e=s(HC);L1e=n(v8e,"STRONG",{});var apt=s(L1e);b5r=r(apt,"roberta"),apt.forEach(t),v5r=r(v8e," \u2014 "),_X=n(v8e,"A",{href:!0});var npt=s(_X);T5r=r(npt,"FlaxRobertaModel"),npt.forEach(t),F5r=r(v8e," (RoBERTa model)"),v8e.forEach(t),C5r=i(Q),UC=n(Q,"LI",{});var T8e=s(UC);B1e=n(T8e,"STRONG",{});var spt=s(B1e);M5r=r(spt,"roformer"),spt.forEach(t),E5r=r(T8e," \u2014 "),uX=n(T8e,"A",{href:!0});var lpt=s(uX);y5r=r(lpt,"FlaxRoFormerModel"),lpt.forEach(t),w5r=r(T8e," (RoFormer model)"),T8e.forEach(t),A5r=i(Q),JC=n(Q,"LI",{});var F8e=s(JC);x1e=n(F8e,"STRONG",{});var ipt=s(x1e);L5r=r(ipt,"t5"),ipt.forEach(t),B5r=r(F8e," \u2014 "),bX=n(F8e,"A",{href:!0});var dpt=s(bX);x5r=r(dpt,"FlaxT5Model"),dpt.forEach(t),k5r=r(F8e," (T5 model)"),F8e.forEach(t),R5r=i(Q),YC=n(Q,"LI",{});var C8e=s(YC);k1e=n(C8e,"STRONG",{});var cpt=s(k1e);S5r=r(cpt,"vision-text-dual-encoder"),cpt.forEach(t),P5r=r(C8e," \u2014 "),vX=n(C8e,"A",{href:!0});var fpt=s(vX);$5r=r(fpt,"FlaxVisionTextDualEncoderModel"),fpt.forEach(t),I5r=r(C8e," (VisionTextDualEncoder model)"),C8e.forEach(t),D5r=i(Q),KC=n(Q,"LI",{});var M8e=s(KC);R1e=n(M8e,"STRONG",{});var mpt=s(R1e);j5r=r(mpt,"vit"),mpt.forEach(t),N5r=r(M8e," \u2014 "),TX=n(M8e,"A",{href:!0});var gpt=s(TX);q5r=r(gpt,"FlaxViTModel"),gpt.forEach(t),G5r=r(M8e," (ViT model)"),M8e.forEach(t),O5r=i(Q),ZC=n(Q,"LI",{});var E8e=s(ZC);S1e=n(E8e,"STRONG",{});var hpt=s(S1e);X5r=r(hpt,"wav2vec2"),hpt.forEach(t),V5r=r(E8e," \u2014 "),FX=n(E8e,"A",{href:!0});var ppt=s(FX);z5r=r(ppt,"FlaxWav2Vec2Model"),ppt.forEach(t),W5r=r(E8e," (Wav2Vec2 model)"),E8e.forEach(t),Q5r=i(Q),e4=n(Q,"LI",{});var y8e=s(e4);P1e=n(y8e,"STRONG",{});var _pt=s(P1e);H5r=r(_pt,"xglm"),_pt.forEach(t),U5r=r(y8e," \u2014 "),CX=n(y8e,"A",{href:!0});var upt=s(CX);J5r=r(upt,"FlaxXGLMModel"),upt.forEach(t),Y5r=r(y8e," (XGLM model)"),y8e.forEach(t),Q.forEach(t),K5r=i(Ma),$1e=n(Ma,"P",{});var bpt=s($1e);Z5r=r(bpt,"Examples:"),bpt.forEach(t),evr=i(Ma),m(VA.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),bxe=i(c),Xc=n(c,"H2",{class:!0});var LRe=s(Xc);o4=n(LRe,"A",{id:!0,class:!0,href:!0});var vpt=s(o4);I1e=n(vpt,"SPAN",{});var Tpt=s(I1e);m(zA.$$.fragment,Tpt),Tpt.forEach(t),vpt.forEach(t),ovr=i(LRe),D1e=n(LRe,"SPAN",{});var Fpt=s(D1e);rvr=r(Fpt,"FlaxAutoModelForCausalLM"),Fpt.forEach(t),LRe.forEach(t),vxe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(WA.$$.fragment,ni),tvr=i(ni),Vc=n(ni,"P",{});var sW=s(Vc);avr=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),j1e=n(sW,"CODE",{});var Cpt=s(j1e);nvr=r(Cpt,"from_pretrained()"),Cpt.forEach(t),svr=r(sW,"class method or the "),N1e=n(sW,"CODE",{});var Mpt=s(N1e);lvr=r(Mpt,"from_config()"),Mpt.forEach(t),ivr=r(sW,`class
method.`),sW.forEach(t),dvr=i(ni),QA=n(ni,"P",{});var BRe=s(QA);cvr=r(BRe,"This class cannot be instantiated directly using "),q1e=n(BRe,"CODE",{});var Ept=s(q1e);fvr=r(Ept,"__init__()"),Ept.forEach(t),mvr=r(BRe," (throws an error)."),BRe.forEach(t),gvr=i(ni),Ct=n(ni,"DIV",{class:!0});var si=s(Ct);m(HA.$$.fragment,si),hvr=i(si),G1e=n(si,"P",{});var ypt=s(G1e);pvr=r(ypt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ypt.forEach(t),_vr=i(si),zc=n(si,"P",{});var lW=s(zc);uvr=r(lW,`Note:
Loading a model from its configuration file does `),O1e=n(lW,"STRONG",{});var wpt=s(O1e);bvr=r(wpt,"not"),wpt.forEach(t),vvr=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),X1e=n(lW,"CODE",{});var Apt=s(X1e);Tvr=r(Apt,"from_pretrained()"),Apt.forEach(t),Fvr=r(lW,"to load the model weights."),lW.forEach(t),Cvr=i(si),V1e=n(si,"P",{});var Lpt=s(V1e);Mvr=r(Lpt,"Examples:"),Lpt.forEach(t),Evr=i(si),m(UA.$$.fragment,si),si.forEach(t),yvr=i(ni),Ao=n(ni,"DIV",{class:!0});var Ea=s(Ao);m(JA.$$.fragment,Ea),wvr=i(Ea),z1e=n(Ea,"P",{});var Bpt=s(z1e);Avr=r(Bpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bpt.forEach(t),Lvr=i(Ea),En=n(Ea,"P",{});var hE=s(En);Bvr=r(hE,"The model class to instantiate is selected based on the "),W1e=n(hE,"CODE",{});var xpt=s(W1e);xvr=r(xpt,"model_type"),xpt.forEach(t),kvr=r(hE,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(hE,"CODE",{});var kpt=s(Q1e);Rvr=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),Svr=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(hE,"CODE",{});var Rpt=s(H1e);Pvr=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),$vr=r(hE,":"),hE.forEach(t),Ivr=i(Ea),yn=n(Ea,"UL",{});var pE=s(yn);r4=n(pE,"LI",{});var w8e=s(r4);U1e=n(w8e,"STRONG",{});var Spt=s(U1e);Dvr=r(Spt,"gpt2"),Spt.forEach(t),jvr=r(w8e," \u2014 "),MX=n(w8e,"A",{href:!0});var Ppt=s(MX);Nvr=r(Ppt,"FlaxGPT2LMHeadModel"),Ppt.forEach(t),qvr=r(w8e," (OpenAI GPT-2 model)"),w8e.forEach(t),Gvr=i(pE),t4=n(pE,"LI",{});var A8e=s(t4);J1e=n(A8e,"STRONG",{});var $pt=s(J1e);Ovr=r($pt,"gpt_neo"),$pt.forEach(t),Xvr=r(A8e," \u2014 "),EX=n(A8e,"A",{href:!0});var Ipt=s(EX);Vvr=r(Ipt,"FlaxGPTNeoForCausalLM"),Ipt.forEach(t),zvr=r(A8e," (GPT Neo model)"),A8e.forEach(t),Wvr=i(pE),a4=n(pE,"LI",{});var L8e=s(a4);Y1e=n(L8e,"STRONG",{});var Dpt=s(Y1e);Qvr=r(Dpt,"gptj"),Dpt.forEach(t),Hvr=r(L8e," \u2014 "),yX=n(L8e,"A",{href:!0});var jpt=s(yX);Uvr=r(jpt,"FlaxGPTJForCausalLM"),jpt.forEach(t),Jvr=r(L8e," (GPT-J model)"),L8e.forEach(t),Yvr=i(pE),n4=n(pE,"LI",{});var B8e=s(n4);K1e=n(B8e,"STRONG",{});var Npt=s(K1e);Kvr=r(Npt,"xglm"),Npt.forEach(t),Zvr=r(B8e," \u2014 "),wX=n(B8e,"A",{href:!0});var qpt=s(wX);eTr=r(qpt,"FlaxXGLMForCausalLM"),qpt.forEach(t),oTr=r(B8e," (XGLM model)"),B8e.forEach(t),pE.forEach(t),rTr=i(Ea),Z1e=n(Ea,"P",{});var Gpt=s(Z1e);tTr=r(Gpt,"Examples:"),Gpt.forEach(t),aTr=i(Ea),m(YA.$$.fragment,Ea),Ea.forEach(t),ni.forEach(t),Txe=i(c),Wc=n(c,"H2",{class:!0});var xRe=s(Wc);s4=n(xRe,"A",{id:!0,class:!0,href:!0});var Opt=s(s4);e2e=n(Opt,"SPAN",{});var Xpt=s(e2e);m(KA.$$.fragment,Xpt),Xpt.forEach(t),Opt.forEach(t),nTr=i(xRe),o2e=n(xRe,"SPAN",{});var Vpt=s(o2e);sTr=r(Vpt,"FlaxAutoModelForPreTraining"),Vpt.forEach(t),xRe.forEach(t),Fxe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(ZA.$$.fragment,li),lTr=i(li),Qc=n(li,"P",{});var iW=s(Qc);iTr=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),r2e=n(iW,"CODE",{});var zpt=s(r2e);dTr=r(zpt,"from_pretrained()"),zpt.forEach(t),cTr=r(iW,"class method or the "),t2e=n(iW,"CODE",{});var Wpt=s(t2e);fTr=r(Wpt,"from_config()"),Wpt.forEach(t),mTr=r(iW,`class
method.`),iW.forEach(t),gTr=i(li),e0=n(li,"P",{});var kRe=s(e0);hTr=r(kRe,"This class cannot be instantiated directly using "),a2e=n(kRe,"CODE",{});var Qpt=s(a2e);pTr=r(Qpt,"__init__()"),Qpt.forEach(t),_Tr=r(kRe," (throws an error)."),kRe.forEach(t),uTr=i(li),Mt=n(li,"DIV",{class:!0});var ii=s(Mt);m(o0.$$.fragment,ii),bTr=i(ii),n2e=n(ii,"P",{});var Hpt=s(n2e);vTr=r(Hpt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hpt.forEach(t),TTr=i(ii),Hc=n(ii,"P",{});var dW=s(Hc);FTr=r(dW,`Note:
Loading a model from its configuration file does `),s2e=n(dW,"STRONG",{});var Upt=s(s2e);CTr=r(Upt,"not"),Upt.forEach(t),MTr=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),l2e=n(dW,"CODE",{});var Jpt=s(l2e);ETr=r(Jpt,"from_pretrained()"),Jpt.forEach(t),yTr=r(dW,"to load the model weights."),dW.forEach(t),wTr=i(ii),i2e=n(ii,"P",{});var Ypt=s(i2e);ATr=r(Ypt,"Examples:"),Ypt.forEach(t),LTr=i(ii),m(r0.$$.fragment,ii),ii.forEach(t),BTr=i(li),Lo=n(li,"DIV",{class:!0});var ya=s(Lo);m(t0.$$.fragment,ya),xTr=i(ya),d2e=n(ya,"P",{});var Kpt=s(d2e);kTr=r(Kpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kpt.forEach(t),RTr=i(ya),wn=n(ya,"P",{});var _E=s(wn);STr=r(_E,"The model class to instantiate is selected based on the "),c2e=n(_E,"CODE",{});var Zpt=s(c2e);PTr=r(Zpt,"model_type"),Zpt.forEach(t),$Tr=r(_E,` property of the config object (either
passed as an argument or loaded from `),f2e=n(_E,"CODE",{});var e_t=s(f2e);ITr=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),DTr=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(_E,"CODE",{});var o_t=s(m2e);jTr=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),NTr=r(_E,":"),_E.forEach(t),qTr=i(ya),fe=n(ya,"UL",{});var ue=s(fe);l4=n(ue,"LI",{});var x8e=s(l4);g2e=n(x8e,"STRONG",{});var r_t=s(g2e);GTr=r(r_t,"albert"),r_t.forEach(t),OTr=r(x8e," \u2014 "),AX=n(x8e,"A",{href:!0});var t_t=s(AX);XTr=r(t_t,"FlaxAlbertForPreTraining"),t_t.forEach(t),VTr=r(x8e," (ALBERT model)"),x8e.forEach(t),zTr=i(ue),i4=n(ue,"LI",{});var k8e=s(i4);h2e=n(k8e,"STRONG",{});var a_t=s(h2e);WTr=r(a_t,"bart"),a_t.forEach(t),QTr=r(k8e," \u2014 "),LX=n(k8e,"A",{href:!0});var n_t=s(LX);HTr=r(n_t,"FlaxBartForConditionalGeneration"),n_t.forEach(t),UTr=r(k8e," (BART model)"),k8e.forEach(t),JTr=i(ue),d4=n(ue,"LI",{});var R8e=s(d4);p2e=n(R8e,"STRONG",{});var s_t=s(p2e);YTr=r(s_t,"bert"),s_t.forEach(t),KTr=r(R8e," \u2014 "),BX=n(R8e,"A",{href:!0});var l_t=s(BX);ZTr=r(l_t,"FlaxBertForPreTraining"),l_t.forEach(t),eFr=r(R8e," (BERT model)"),R8e.forEach(t),oFr=i(ue),c4=n(ue,"LI",{});var S8e=s(c4);_2e=n(S8e,"STRONG",{});var i_t=s(_2e);rFr=r(i_t,"big_bird"),i_t.forEach(t),tFr=r(S8e," \u2014 "),xX=n(S8e,"A",{href:!0});var d_t=s(xX);aFr=r(d_t,"FlaxBigBirdForPreTraining"),d_t.forEach(t),nFr=r(S8e," (BigBird model)"),S8e.forEach(t),sFr=i(ue),f4=n(ue,"LI",{});var P8e=s(f4);u2e=n(P8e,"STRONG",{});var c_t=s(u2e);lFr=r(c_t,"electra"),c_t.forEach(t),iFr=r(P8e," \u2014 "),kX=n(P8e,"A",{href:!0});var f_t=s(kX);dFr=r(f_t,"FlaxElectraForPreTraining"),f_t.forEach(t),cFr=r(P8e," (ELECTRA model)"),P8e.forEach(t),fFr=i(ue),m4=n(ue,"LI",{});var $8e=s(m4);b2e=n($8e,"STRONG",{});var m_t=s(b2e);mFr=r(m_t,"mbart"),m_t.forEach(t),gFr=r($8e," \u2014 "),RX=n($8e,"A",{href:!0});var g_t=s(RX);hFr=r(g_t,"FlaxMBartForConditionalGeneration"),g_t.forEach(t),pFr=r($8e," (mBART model)"),$8e.forEach(t),_Fr=i(ue),g4=n(ue,"LI",{});var I8e=s(g4);v2e=n(I8e,"STRONG",{});var h_t=s(v2e);uFr=r(h_t,"mt5"),h_t.forEach(t),bFr=r(I8e," \u2014 "),SX=n(I8e,"A",{href:!0});var p_t=s(SX);vFr=r(p_t,"FlaxMT5ForConditionalGeneration"),p_t.forEach(t),TFr=r(I8e," (mT5 model)"),I8e.forEach(t),FFr=i(ue),h4=n(ue,"LI",{});var D8e=s(h4);T2e=n(D8e,"STRONG",{});var __t=s(T2e);CFr=r(__t,"roberta"),__t.forEach(t),MFr=r(D8e," \u2014 "),PX=n(D8e,"A",{href:!0});var u_t=s(PX);EFr=r(u_t,"FlaxRobertaForMaskedLM"),u_t.forEach(t),yFr=r(D8e," (RoBERTa model)"),D8e.forEach(t),wFr=i(ue),p4=n(ue,"LI",{});var j8e=s(p4);F2e=n(j8e,"STRONG",{});var b_t=s(F2e);AFr=r(b_t,"roformer"),b_t.forEach(t),LFr=r(j8e," \u2014 "),$X=n(j8e,"A",{href:!0});var v_t=s($X);BFr=r(v_t,"FlaxRoFormerForMaskedLM"),v_t.forEach(t),xFr=r(j8e," (RoFormer model)"),j8e.forEach(t),kFr=i(ue),_4=n(ue,"LI",{});var N8e=s(_4);C2e=n(N8e,"STRONG",{});var T_t=s(C2e);RFr=r(T_t,"t5"),T_t.forEach(t),SFr=r(N8e," \u2014 "),IX=n(N8e,"A",{href:!0});var F_t=s(IX);PFr=r(F_t,"FlaxT5ForConditionalGeneration"),F_t.forEach(t),$Fr=r(N8e," (T5 model)"),N8e.forEach(t),IFr=i(ue),u4=n(ue,"LI",{});var q8e=s(u4);M2e=n(q8e,"STRONG",{});var C_t=s(M2e);DFr=r(C_t,"wav2vec2"),C_t.forEach(t),jFr=r(q8e," \u2014 "),DX=n(q8e,"A",{href:!0});var M_t=s(DX);NFr=r(M_t,"FlaxWav2Vec2ForPreTraining"),M_t.forEach(t),qFr=r(q8e," (Wav2Vec2 model)"),q8e.forEach(t),ue.forEach(t),GFr=i(ya),E2e=n(ya,"P",{});var E_t=s(E2e);OFr=r(E_t,"Examples:"),E_t.forEach(t),XFr=i(ya),m(a0.$$.fragment,ya),ya.forEach(t),li.forEach(t),Cxe=i(c),Uc=n(c,"H2",{class:!0});var RRe=s(Uc);b4=n(RRe,"A",{id:!0,class:!0,href:!0});var y_t=s(b4);y2e=n(y_t,"SPAN",{});var w_t=s(y2e);m(n0.$$.fragment,w_t),w_t.forEach(t),y_t.forEach(t),VFr=i(RRe),w2e=n(RRe,"SPAN",{});var A_t=s(w2e);zFr=r(A_t,"FlaxAutoModelForMaskedLM"),A_t.forEach(t),RRe.forEach(t),Mxe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(s0.$$.fragment,di),WFr=i(di),Jc=n(di,"P",{});var cW=s(Jc);QFr=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),A2e=n(cW,"CODE",{});var L_t=s(A2e);HFr=r(L_t,"from_pretrained()"),L_t.forEach(t),UFr=r(cW,"class method or the "),L2e=n(cW,"CODE",{});var B_t=s(L2e);JFr=r(B_t,"from_config()"),B_t.forEach(t),YFr=r(cW,`class
method.`),cW.forEach(t),KFr=i(di),l0=n(di,"P",{});var SRe=s(l0);ZFr=r(SRe,"This class cannot be instantiated directly using "),B2e=n(SRe,"CODE",{});var x_t=s(B2e);e9r=r(x_t,"__init__()"),x_t.forEach(t),o9r=r(SRe," (throws an error)."),SRe.forEach(t),r9r=i(di),Et=n(di,"DIV",{class:!0});var ci=s(Et);m(i0.$$.fragment,ci),t9r=i(ci),x2e=n(ci,"P",{});var k_t=s(x2e);a9r=r(k_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),k_t.forEach(t),n9r=i(ci),Yc=n(ci,"P",{});var fW=s(Yc);s9r=r(fW,`Note:
Loading a model from its configuration file does `),k2e=n(fW,"STRONG",{});var R_t=s(k2e);l9r=r(R_t,"not"),R_t.forEach(t),i9r=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),R2e=n(fW,"CODE",{});var S_t=s(R2e);d9r=r(S_t,"from_pretrained()"),S_t.forEach(t),c9r=r(fW,"to load the model weights."),fW.forEach(t),f9r=i(ci),S2e=n(ci,"P",{});var P_t=s(S2e);m9r=r(P_t,"Examples:"),P_t.forEach(t),g9r=i(ci),m(d0.$$.fragment,ci),ci.forEach(t),h9r=i(di),Bo=n(di,"DIV",{class:!0});var wa=s(Bo);m(c0.$$.fragment,wa),p9r=i(wa),P2e=n(wa,"P",{});var $_t=s(P2e);_9r=r($_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$_t.forEach(t),u9r=i(wa),An=n(wa,"P",{});var uE=s(An);b9r=r(uE,"The model class to instantiate is selected based on the "),$2e=n(uE,"CODE",{});var I_t=s($2e);v9r=r(I_t,"model_type"),I_t.forEach(t),T9r=r(uE,` property of the config object (either
passed as an argument or loaded from `),I2e=n(uE,"CODE",{});var D_t=s(I2e);F9r=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),C9r=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(uE,"CODE",{});var j_t=s(D2e);M9r=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),E9r=r(uE,":"),uE.forEach(t),y9r=i(wa),ve=n(wa,"UL",{});var oo=s(ve);v4=n(oo,"LI",{});var G8e=s(v4);j2e=n(G8e,"STRONG",{});var N_t=s(j2e);w9r=r(N_t,"albert"),N_t.forEach(t),A9r=r(G8e," \u2014 "),jX=n(G8e,"A",{href:!0});var q_t=s(jX);L9r=r(q_t,"FlaxAlbertForMaskedLM"),q_t.forEach(t),B9r=r(G8e," (ALBERT model)"),G8e.forEach(t),x9r=i(oo),T4=n(oo,"LI",{});var O8e=s(T4);N2e=n(O8e,"STRONG",{});var G_t=s(N2e);k9r=r(G_t,"bart"),G_t.forEach(t),R9r=r(O8e," \u2014 "),NX=n(O8e,"A",{href:!0});var O_t=s(NX);S9r=r(O_t,"FlaxBartForConditionalGeneration"),O_t.forEach(t),P9r=r(O8e," (BART model)"),O8e.forEach(t),$9r=i(oo),F4=n(oo,"LI",{});var X8e=s(F4);q2e=n(X8e,"STRONG",{});var X_t=s(q2e);I9r=r(X_t,"bert"),X_t.forEach(t),D9r=r(X8e," \u2014 "),qX=n(X8e,"A",{href:!0});var V_t=s(qX);j9r=r(V_t,"FlaxBertForMaskedLM"),V_t.forEach(t),N9r=r(X8e," (BERT model)"),X8e.forEach(t),q9r=i(oo),C4=n(oo,"LI",{});var V8e=s(C4);G2e=n(V8e,"STRONG",{});var z_t=s(G2e);G9r=r(z_t,"big_bird"),z_t.forEach(t),O9r=r(V8e," \u2014 "),GX=n(V8e,"A",{href:!0});var W_t=s(GX);X9r=r(W_t,"FlaxBigBirdForMaskedLM"),W_t.forEach(t),V9r=r(V8e," (BigBird model)"),V8e.forEach(t),z9r=i(oo),M4=n(oo,"LI",{});var z8e=s(M4);O2e=n(z8e,"STRONG",{});var Q_t=s(O2e);W9r=r(Q_t,"distilbert"),Q_t.forEach(t),Q9r=r(z8e," \u2014 "),OX=n(z8e,"A",{href:!0});var H_t=s(OX);H9r=r(H_t,"FlaxDistilBertForMaskedLM"),H_t.forEach(t),U9r=r(z8e," (DistilBERT model)"),z8e.forEach(t),J9r=i(oo),E4=n(oo,"LI",{});var W8e=s(E4);X2e=n(W8e,"STRONG",{});var U_t=s(X2e);Y9r=r(U_t,"electra"),U_t.forEach(t),K9r=r(W8e," \u2014 "),XX=n(W8e,"A",{href:!0});var J_t=s(XX);Z9r=r(J_t,"FlaxElectraForMaskedLM"),J_t.forEach(t),eCr=r(W8e," (ELECTRA model)"),W8e.forEach(t),oCr=i(oo),y4=n(oo,"LI",{});var Q8e=s(y4);V2e=n(Q8e,"STRONG",{});var Y_t=s(V2e);rCr=r(Y_t,"mbart"),Y_t.forEach(t),tCr=r(Q8e," \u2014 "),VX=n(Q8e,"A",{href:!0});var K_t=s(VX);aCr=r(K_t,"FlaxMBartForConditionalGeneration"),K_t.forEach(t),nCr=r(Q8e," (mBART model)"),Q8e.forEach(t),sCr=i(oo),w4=n(oo,"LI",{});var H8e=s(w4);z2e=n(H8e,"STRONG",{});var Z_t=s(z2e);lCr=r(Z_t,"roberta"),Z_t.forEach(t),iCr=r(H8e," \u2014 "),zX=n(H8e,"A",{href:!0});var eut=s(zX);dCr=r(eut,"FlaxRobertaForMaskedLM"),eut.forEach(t),cCr=r(H8e," (RoBERTa model)"),H8e.forEach(t),fCr=i(oo),A4=n(oo,"LI",{});var U8e=s(A4);W2e=n(U8e,"STRONG",{});var out=s(W2e);mCr=r(out,"roformer"),out.forEach(t),gCr=r(U8e," \u2014 "),WX=n(U8e,"A",{href:!0});var rut=s(WX);hCr=r(rut,"FlaxRoFormerForMaskedLM"),rut.forEach(t),pCr=r(U8e," (RoFormer model)"),U8e.forEach(t),oo.forEach(t),_Cr=i(wa),Q2e=n(wa,"P",{});var tut=s(Q2e);uCr=r(tut,"Examples:"),tut.forEach(t),bCr=i(wa),m(f0.$$.fragment,wa),wa.forEach(t),di.forEach(t),Exe=i(c),Kc=n(c,"H2",{class:!0});var PRe=s(Kc);L4=n(PRe,"A",{id:!0,class:!0,href:!0});var aut=s(L4);H2e=n(aut,"SPAN",{});var nut=s(H2e);m(m0.$$.fragment,nut),nut.forEach(t),aut.forEach(t),vCr=i(PRe),U2e=n(PRe,"SPAN",{});var sut=s(U2e);TCr=r(sut,"FlaxAutoModelForSeq2SeqLM"),sut.forEach(t),PRe.forEach(t),yxe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(g0.$$.fragment,fi),FCr=i(fi),Zc=n(fi,"P",{});var mW=s(Zc);CCr=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),J2e=n(mW,"CODE",{});var lut=s(J2e);MCr=r(lut,"from_pretrained()"),lut.forEach(t),ECr=r(mW,"class method or the "),Y2e=n(mW,"CODE",{});var iut=s(Y2e);yCr=r(iut,"from_config()"),iut.forEach(t),wCr=r(mW,`class
method.`),mW.forEach(t),ACr=i(fi),h0=n(fi,"P",{});var $Re=s(h0);LCr=r($Re,"This class cannot be instantiated directly using "),K2e=n($Re,"CODE",{});var dut=s(K2e);BCr=r(dut,"__init__()"),dut.forEach(t),xCr=r($Re," (throws an error)."),$Re.forEach(t),kCr=i(fi),yt=n(fi,"DIV",{class:!0});var mi=s(yt);m(p0.$$.fragment,mi),RCr=i(mi),Z2e=n(mi,"P",{});var cut=s(Z2e);SCr=r(cut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cut.forEach(t),PCr=i(mi),ef=n(mi,"P",{});var gW=s(ef);$Cr=r(gW,`Note:
Loading a model from its configuration file does `),ebe=n(gW,"STRONG",{});var fut=s(ebe);ICr=r(fut,"not"),fut.forEach(t),DCr=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),obe=n(gW,"CODE",{});var mut=s(obe);jCr=r(mut,"from_pretrained()"),mut.forEach(t),NCr=r(gW,"to load the model weights."),gW.forEach(t),qCr=i(mi),rbe=n(mi,"P",{});var gut=s(rbe);GCr=r(gut,"Examples:"),gut.forEach(t),OCr=i(mi),m(_0.$$.fragment,mi),mi.forEach(t),XCr=i(fi),xo=n(fi,"DIV",{class:!0});var Aa=s(xo);m(u0.$$.fragment,Aa),VCr=i(Aa),tbe=n(Aa,"P",{});var hut=s(tbe);zCr=r(hut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hut.forEach(t),WCr=i(Aa),Ln=n(Aa,"P",{});var bE=s(Ln);QCr=r(bE,"The model class to instantiate is selected based on the "),abe=n(bE,"CODE",{});var put=s(abe);HCr=r(put,"model_type"),put.forEach(t),UCr=r(bE,` property of the config object (either
passed as an argument or loaded from `),nbe=n(bE,"CODE",{});var _ut=s(nbe);JCr=r(_ut,"pretrained_model_name_or_path"),_ut.forEach(t),YCr=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(bE,"CODE",{});var uut=s(sbe);KCr=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),ZCr=r(bE,":"),bE.forEach(t),e4r=i(Aa),Te=n(Aa,"UL",{});var ro=s(Te);B4=n(ro,"LI",{});var J8e=s(B4);lbe=n(J8e,"STRONG",{});var but=s(lbe);o4r=r(but,"bart"),but.forEach(t),r4r=r(J8e," \u2014 "),QX=n(J8e,"A",{href:!0});var vut=s(QX);t4r=r(vut,"FlaxBartForConditionalGeneration"),vut.forEach(t),a4r=r(J8e," (BART model)"),J8e.forEach(t),n4r=i(ro),x4=n(ro,"LI",{});var Y8e=s(x4);ibe=n(Y8e,"STRONG",{});var Tut=s(ibe);s4r=r(Tut,"blenderbot"),Tut.forEach(t),l4r=r(Y8e," \u2014 "),HX=n(Y8e,"A",{href:!0});var Fut=s(HX);i4r=r(Fut,"FlaxBlenderbotForConditionalGeneration"),Fut.forEach(t),d4r=r(Y8e," (Blenderbot model)"),Y8e.forEach(t),c4r=i(ro),k4=n(ro,"LI",{});var K8e=s(k4);dbe=n(K8e,"STRONG",{});var Cut=s(dbe);f4r=r(Cut,"blenderbot-small"),Cut.forEach(t),m4r=r(K8e," \u2014 "),UX=n(K8e,"A",{href:!0});var Mut=s(UX);g4r=r(Mut,"FlaxBlenderbotSmallForConditionalGeneration"),Mut.forEach(t),h4r=r(K8e," (BlenderbotSmall model)"),K8e.forEach(t),p4r=i(ro),R4=n(ro,"LI",{});var Z8e=s(R4);cbe=n(Z8e,"STRONG",{});var Eut=s(cbe);_4r=r(Eut,"encoder-decoder"),Eut.forEach(t),u4r=r(Z8e," \u2014 "),JX=n(Z8e,"A",{href:!0});var yut=s(JX);b4r=r(yut,"FlaxEncoderDecoderModel"),yut.forEach(t),v4r=r(Z8e," (Encoder decoder model)"),Z8e.forEach(t),T4r=i(ro),S4=n(ro,"LI",{});var e7e=s(S4);fbe=n(e7e,"STRONG",{});var wut=s(fbe);F4r=r(wut,"marian"),wut.forEach(t),C4r=r(e7e," \u2014 "),YX=n(e7e,"A",{href:!0});var Aut=s(YX);M4r=r(Aut,"FlaxMarianMTModel"),Aut.forEach(t),E4r=r(e7e," (Marian model)"),e7e.forEach(t),y4r=i(ro),P4=n(ro,"LI",{});var o7e=s(P4);mbe=n(o7e,"STRONG",{});var Lut=s(mbe);w4r=r(Lut,"mbart"),Lut.forEach(t),A4r=r(o7e," \u2014 "),KX=n(o7e,"A",{href:!0});var But=s(KX);L4r=r(But,"FlaxMBartForConditionalGeneration"),But.forEach(t),B4r=r(o7e," (mBART model)"),o7e.forEach(t),x4r=i(ro),$4=n(ro,"LI",{});var r7e=s($4);gbe=n(r7e,"STRONG",{});var xut=s(gbe);k4r=r(xut,"mt5"),xut.forEach(t),R4r=r(r7e," \u2014 "),ZX=n(r7e,"A",{href:!0});var kut=s(ZX);S4r=r(kut,"FlaxMT5ForConditionalGeneration"),kut.forEach(t),P4r=r(r7e," (mT5 model)"),r7e.forEach(t),$4r=i(ro),I4=n(ro,"LI",{});var t7e=s(I4);hbe=n(t7e,"STRONG",{});var Rut=s(hbe);I4r=r(Rut,"pegasus"),Rut.forEach(t),D4r=r(t7e," \u2014 "),eV=n(t7e,"A",{href:!0});var Sut=s(eV);j4r=r(Sut,"FlaxPegasusForConditionalGeneration"),Sut.forEach(t),N4r=r(t7e," (Pegasus model)"),t7e.forEach(t),q4r=i(ro),D4=n(ro,"LI",{});var a7e=s(D4);pbe=n(a7e,"STRONG",{});var Put=s(pbe);G4r=r(Put,"t5"),Put.forEach(t),O4r=r(a7e," \u2014 "),oV=n(a7e,"A",{href:!0});var $ut=s(oV);X4r=r($ut,"FlaxT5ForConditionalGeneration"),$ut.forEach(t),V4r=r(a7e," (T5 model)"),a7e.forEach(t),ro.forEach(t),z4r=i(Aa),_be=n(Aa,"P",{});var Iut=s(_be);W4r=r(Iut,"Examples:"),Iut.forEach(t),Q4r=i(Aa),m(b0.$$.fragment,Aa),Aa.forEach(t),fi.forEach(t),wxe=i(c),of=n(c,"H2",{class:!0});var IRe=s(of);j4=n(IRe,"A",{id:!0,class:!0,href:!0});var Dut=s(j4);ube=n(Dut,"SPAN",{});var jut=s(ube);m(v0.$$.fragment,jut),jut.forEach(t),Dut.forEach(t),H4r=i(IRe),bbe=n(IRe,"SPAN",{});var Nut=s(bbe);U4r=r(Nut,"FlaxAutoModelForSequenceClassification"),Nut.forEach(t),IRe.forEach(t),Axe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(T0.$$.fragment,gi),J4r=i(gi),rf=n(gi,"P",{});var hW=s(rf);Y4r=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vbe=n(hW,"CODE",{});var qut=s(vbe);K4r=r(qut,"from_pretrained()"),qut.forEach(t),Z4r=r(hW,"class method or the "),Tbe=n(hW,"CODE",{});var Gut=s(Tbe);eMr=r(Gut,"from_config()"),Gut.forEach(t),oMr=r(hW,`class
method.`),hW.forEach(t),rMr=i(gi),F0=n(gi,"P",{});var DRe=s(F0);tMr=r(DRe,"This class cannot be instantiated directly using "),Fbe=n(DRe,"CODE",{});var Out=s(Fbe);aMr=r(Out,"__init__()"),Out.forEach(t),nMr=r(DRe," (throws an error)."),DRe.forEach(t),sMr=i(gi),wt=n(gi,"DIV",{class:!0});var hi=s(wt);m(C0.$$.fragment,hi),lMr=i(hi),Cbe=n(hi,"P",{});var Xut=s(Cbe);iMr=r(Xut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xut.forEach(t),dMr=i(hi),tf=n(hi,"P",{});var pW=s(tf);cMr=r(pW,`Note:
Loading a model from its configuration file does `),Mbe=n(pW,"STRONG",{});var Vut=s(Mbe);fMr=r(Vut,"not"),Vut.forEach(t),mMr=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ebe=n(pW,"CODE",{});var zut=s(Ebe);gMr=r(zut,"from_pretrained()"),zut.forEach(t),hMr=r(pW,"to load the model weights."),pW.forEach(t),pMr=i(hi),ybe=n(hi,"P",{});var Wut=s(ybe);_Mr=r(Wut,"Examples:"),Wut.forEach(t),uMr=i(hi),m(M0.$$.fragment,hi),hi.forEach(t),bMr=i(gi),ko=n(gi,"DIV",{class:!0});var La=s(ko);m(E0.$$.fragment,La),vMr=i(La),wbe=n(La,"P",{});var Qut=s(wbe);TMr=r(Qut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qut.forEach(t),FMr=i(La),Bn=n(La,"P",{});var vE=s(Bn);CMr=r(vE,"The model class to instantiate is selected based on the "),Abe=n(vE,"CODE",{});var Hut=s(Abe);MMr=r(Hut,"model_type"),Hut.forEach(t),EMr=r(vE,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(vE,"CODE",{});var Uut=s(Lbe);yMr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),wMr=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(vE,"CODE",{});var Jut=s(Bbe);AMr=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),LMr=r(vE,":"),vE.forEach(t),BMr=i(La),Fe=n(La,"UL",{});var to=s(Fe);N4=n(to,"LI",{});var n7e=s(N4);xbe=n(n7e,"STRONG",{});var Yut=s(xbe);xMr=r(Yut,"albert"),Yut.forEach(t),kMr=r(n7e," \u2014 "),rV=n(n7e,"A",{href:!0});var Kut=s(rV);RMr=r(Kut,"FlaxAlbertForSequenceClassification"),Kut.forEach(t),SMr=r(n7e," (ALBERT model)"),n7e.forEach(t),PMr=i(to),q4=n(to,"LI",{});var s7e=s(q4);kbe=n(s7e,"STRONG",{});var Zut=s(kbe);$Mr=r(Zut,"bart"),Zut.forEach(t),IMr=r(s7e," \u2014 "),tV=n(s7e,"A",{href:!0});var e1t=s(tV);DMr=r(e1t,"FlaxBartForSequenceClassification"),e1t.forEach(t),jMr=r(s7e," (BART model)"),s7e.forEach(t),NMr=i(to),G4=n(to,"LI",{});var l7e=s(G4);Rbe=n(l7e,"STRONG",{});var o1t=s(Rbe);qMr=r(o1t,"bert"),o1t.forEach(t),GMr=r(l7e," \u2014 "),aV=n(l7e,"A",{href:!0});var r1t=s(aV);OMr=r(r1t,"FlaxBertForSequenceClassification"),r1t.forEach(t),XMr=r(l7e," (BERT model)"),l7e.forEach(t),VMr=i(to),O4=n(to,"LI",{});var i7e=s(O4);Sbe=n(i7e,"STRONG",{});var t1t=s(Sbe);zMr=r(t1t,"big_bird"),t1t.forEach(t),WMr=r(i7e," \u2014 "),nV=n(i7e,"A",{href:!0});var a1t=s(nV);QMr=r(a1t,"FlaxBigBirdForSequenceClassification"),a1t.forEach(t),HMr=r(i7e," (BigBird model)"),i7e.forEach(t),UMr=i(to),X4=n(to,"LI",{});var d7e=s(X4);Pbe=n(d7e,"STRONG",{});var n1t=s(Pbe);JMr=r(n1t,"distilbert"),n1t.forEach(t),YMr=r(d7e," \u2014 "),sV=n(d7e,"A",{href:!0});var s1t=s(sV);KMr=r(s1t,"FlaxDistilBertForSequenceClassification"),s1t.forEach(t),ZMr=r(d7e," (DistilBERT model)"),d7e.forEach(t),eEr=i(to),V4=n(to,"LI",{});var c7e=s(V4);$be=n(c7e,"STRONG",{});var l1t=s($be);oEr=r(l1t,"electra"),l1t.forEach(t),rEr=r(c7e," \u2014 "),lV=n(c7e,"A",{href:!0});var i1t=s(lV);tEr=r(i1t,"FlaxElectraForSequenceClassification"),i1t.forEach(t),aEr=r(c7e," (ELECTRA model)"),c7e.forEach(t),nEr=i(to),z4=n(to,"LI",{});var f7e=s(z4);Ibe=n(f7e,"STRONG",{});var d1t=s(Ibe);sEr=r(d1t,"mbart"),d1t.forEach(t),lEr=r(f7e," \u2014 "),iV=n(f7e,"A",{href:!0});var c1t=s(iV);iEr=r(c1t,"FlaxMBartForSequenceClassification"),c1t.forEach(t),dEr=r(f7e," (mBART model)"),f7e.forEach(t),cEr=i(to),W4=n(to,"LI",{});var m7e=s(W4);Dbe=n(m7e,"STRONG",{});var f1t=s(Dbe);fEr=r(f1t,"roberta"),f1t.forEach(t),mEr=r(m7e," \u2014 "),dV=n(m7e,"A",{href:!0});var m1t=s(dV);gEr=r(m1t,"FlaxRobertaForSequenceClassification"),m1t.forEach(t),hEr=r(m7e," (RoBERTa model)"),m7e.forEach(t),pEr=i(to),Q4=n(to,"LI",{});var g7e=s(Q4);jbe=n(g7e,"STRONG",{});var g1t=s(jbe);_Er=r(g1t,"roformer"),g1t.forEach(t),uEr=r(g7e," \u2014 "),cV=n(g7e,"A",{href:!0});var h1t=s(cV);bEr=r(h1t,"FlaxRoFormerForSequenceClassification"),h1t.forEach(t),vEr=r(g7e," (RoFormer model)"),g7e.forEach(t),to.forEach(t),TEr=i(La),Nbe=n(La,"P",{});var p1t=s(Nbe);FEr=r(p1t,"Examples:"),p1t.forEach(t),CEr=i(La),m(y0.$$.fragment,La),La.forEach(t),gi.forEach(t),Lxe=i(c),af=n(c,"H2",{class:!0});var jRe=s(af);H4=n(jRe,"A",{id:!0,class:!0,href:!0});var _1t=s(H4);qbe=n(_1t,"SPAN",{});var u1t=s(qbe);m(w0.$$.fragment,u1t),u1t.forEach(t),_1t.forEach(t),MEr=i(jRe),Gbe=n(jRe,"SPAN",{});var b1t=s(Gbe);EEr=r(b1t,"FlaxAutoModelForQuestionAnswering"),b1t.forEach(t),jRe.forEach(t),Bxe=i(c),Pr=n(c,"DIV",{class:!0});var pi=s(Pr);m(A0.$$.fragment,pi),yEr=i(pi),nf=n(pi,"P",{});var _W=s(nf);wEr=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Obe=n(_W,"CODE",{});var v1t=s(Obe);AEr=r(v1t,"from_pretrained()"),v1t.forEach(t),LEr=r(_W,"class method or the "),Xbe=n(_W,"CODE",{});var T1t=s(Xbe);BEr=r(T1t,"from_config()"),T1t.forEach(t),xEr=r(_W,`class
method.`),_W.forEach(t),kEr=i(pi),L0=n(pi,"P",{});var NRe=s(L0);REr=r(NRe,"This class cannot be instantiated directly using "),Vbe=n(NRe,"CODE",{});var F1t=s(Vbe);SEr=r(F1t,"__init__()"),F1t.forEach(t),PEr=r(NRe," (throws an error)."),NRe.forEach(t),$Er=i(pi),At=n(pi,"DIV",{class:!0});var _i=s(At);m(B0.$$.fragment,_i),IEr=i(_i),zbe=n(_i,"P",{});var C1t=s(zbe);DEr=r(C1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),C1t.forEach(t),jEr=i(_i),sf=n(_i,"P",{});var uW=s(sf);NEr=r(uW,`Note:
Loading a model from its configuration file does `),Wbe=n(uW,"STRONG",{});var M1t=s(Wbe);qEr=r(M1t,"not"),M1t.forEach(t),GEr=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qbe=n(uW,"CODE",{});var E1t=s(Qbe);OEr=r(E1t,"from_pretrained()"),E1t.forEach(t),XEr=r(uW,"to load the model weights."),uW.forEach(t),VEr=i(_i),Hbe=n(_i,"P",{});var y1t=s(Hbe);zEr=r(y1t,"Examples:"),y1t.forEach(t),WEr=i(_i),m(x0.$$.fragment,_i),_i.forEach(t),QEr=i(pi),Ro=n(pi,"DIV",{class:!0});var Ba=s(Ro);m(k0.$$.fragment,Ba),HEr=i(Ba),Ube=n(Ba,"P",{});var w1t=s(Ube);UEr=r(w1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w1t.forEach(t),JEr=i(Ba),xn=n(Ba,"P",{});var TE=s(xn);YEr=r(TE,"The model class to instantiate is selected based on the "),Jbe=n(TE,"CODE",{});var A1t=s(Jbe);KEr=r(A1t,"model_type"),A1t.forEach(t),ZEr=r(TE,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(TE,"CODE",{});var L1t=s(Ybe);e3r=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),o3r=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(TE,"CODE",{});var B1t=s(Kbe);r3r=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),t3r=r(TE,":"),TE.forEach(t),a3r=i(Ba),Ce=n(Ba,"UL",{});var ao=s(Ce);U4=n(ao,"LI",{});var h7e=s(U4);Zbe=n(h7e,"STRONG",{});var x1t=s(Zbe);n3r=r(x1t,"albert"),x1t.forEach(t),s3r=r(h7e," \u2014 "),fV=n(h7e,"A",{href:!0});var k1t=s(fV);l3r=r(k1t,"FlaxAlbertForQuestionAnswering"),k1t.forEach(t),i3r=r(h7e," (ALBERT model)"),h7e.forEach(t),d3r=i(ao),J4=n(ao,"LI",{});var p7e=s(J4);e5e=n(p7e,"STRONG",{});var R1t=s(e5e);c3r=r(R1t,"bart"),R1t.forEach(t),f3r=r(p7e," \u2014 "),mV=n(p7e,"A",{href:!0});var S1t=s(mV);m3r=r(S1t,"FlaxBartForQuestionAnswering"),S1t.forEach(t),g3r=r(p7e," (BART model)"),p7e.forEach(t),h3r=i(ao),Y4=n(ao,"LI",{});var _7e=s(Y4);o5e=n(_7e,"STRONG",{});var P1t=s(o5e);p3r=r(P1t,"bert"),P1t.forEach(t),_3r=r(_7e," \u2014 "),gV=n(_7e,"A",{href:!0});var $1t=s(gV);u3r=r($1t,"FlaxBertForQuestionAnswering"),$1t.forEach(t),b3r=r(_7e," (BERT model)"),_7e.forEach(t),v3r=i(ao),K4=n(ao,"LI",{});var u7e=s(K4);r5e=n(u7e,"STRONG",{});var I1t=s(r5e);T3r=r(I1t,"big_bird"),I1t.forEach(t),F3r=r(u7e," \u2014 "),hV=n(u7e,"A",{href:!0});var D1t=s(hV);C3r=r(D1t,"FlaxBigBirdForQuestionAnswering"),D1t.forEach(t),M3r=r(u7e," (BigBird model)"),u7e.forEach(t),E3r=i(ao),Z4=n(ao,"LI",{});var b7e=s(Z4);t5e=n(b7e,"STRONG",{});var j1t=s(t5e);y3r=r(j1t,"distilbert"),j1t.forEach(t),w3r=r(b7e," \u2014 "),pV=n(b7e,"A",{href:!0});var N1t=s(pV);A3r=r(N1t,"FlaxDistilBertForQuestionAnswering"),N1t.forEach(t),L3r=r(b7e," (DistilBERT model)"),b7e.forEach(t),B3r=i(ao),eM=n(ao,"LI",{});var v7e=s(eM);a5e=n(v7e,"STRONG",{});var q1t=s(a5e);x3r=r(q1t,"electra"),q1t.forEach(t),k3r=r(v7e," \u2014 "),_V=n(v7e,"A",{href:!0});var G1t=s(_V);R3r=r(G1t,"FlaxElectraForQuestionAnswering"),G1t.forEach(t),S3r=r(v7e," (ELECTRA model)"),v7e.forEach(t),P3r=i(ao),oM=n(ao,"LI",{});var T7e=s(oM);n5e=n(T7e,"STRONG",{});var O1t=s(n5e);$3r=r(O1t,"mbart"),O1t.forEach(t),I3r=r(T7e," \u2014 "),uV=n(T7e,"A",{href:!0});var X1t=s(uV);D3r=r(X1t,"FlaxMBartForQuestionAnswering"),X1t.forEach(t),j3r=r(T7e," (mBART model)"),T7e.forEach(t),N3r=i(ao),rM=n(ao,"LI",{});var F7e=s(rM);s5e=n(F7e,"STRONG",{});var V1t=s(s5e);q3r=r(V1t,"roberta"),V1t.forEach(t),G3r=r(F7e," \u2014 "),bV=n(F7e,"A",{href:!0});var z1t=s(bV);O3r=r(z1t,"FlaxRobertaForQuestionAnswering"),z1t.forEach(t),X3r=r(F7e," (RoBERTa model)"),F7e.forEach(t),V3r=i(ao),tM=n(ao,"LI",{});var C7e=s(tM);l5e=n(C7e,"STRONG",{});var W1t=s(l5e);z3r=r(W1t,"roformer"),W1t.forEach(t),W3r=r(C7e," \u2014 "),vV=n(C7e,"A",{href:!0});var Q1t=s(vV);Q3r=r(Q1t,"FlaxRoFormerForQuestionAnswering"),Q1t.forEach(t),H3r=r(C7e," (RoFormer model)"),C7e.forEach(t),ao.forEach(t),U3r=i(Ba),i5e=n(Ba,"P",{});var H1t=s(i5e);J3r=r(H1t,"Examples:"),H1t.forEach(t),Y3r=i(Ba),m(R0.$$.fragment,Ba),Ba.forEach(t),pi.forEach(t),xxe=i(c),lf=n(c,"H2",{class:!0});var qRe=s(lf);aM=n(qRe,"A",{id:!0,class:!0,href:!0});var U1t=s(aM);d5e=n(U1t,"SPAN",{});var J1t=s(d5e);m(S0.$$.fragment,J1t),J1t.forEach(t),U1t.forEach(t),K3r=i(qRe),c5e=n(qRe,"SPAN",{});var Y1t=s(c5e);Z3r=r(Y1t,"FlaxAutoModelForTokenClassification"),Y1t.forEach(t),qRe.forEach(t),kxe=i(c),$r=n(c,"DIV",{class:!0});var ui=s($r);m(P0.$$.fragment,ui),eyr=i(ui),df=n(ui,"P",{});var bW=s(df);oyr=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),f5e=n(bW,"CODE",{});var K1t=s(f5e);ryr=r(K1t,"from_pretrained()"),K1t.forEach(t),tyr=r(bW,"class method or the "),m5e=n(bW,"CODE",{});var Z1t=s(m5e);ayr=r(Z1t,"from_config()"),Z1t.forEach(t),nyr=r(bW,`class
method.`),bW.forEach(t),syr=i(ui),$0=n(ui,"P",{});var GRe=s($0);lyr=r(GRe,"This class cannot be instantiated directly using "),g5e=n(GRe,"CODE",{});var e2t=s(g5e);iyr=r(e2t,"__init__()"),e2t.forEach(t),dyr=r(GRe," (throws an error)."),GRe.forEach(t),cyr=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(I0.$$.fragment,bi),fyr=i(bi),h5e=n(bi,"P",{});var o2t=s(h5e);myr=r(o2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o2t.forEach(t),gyr=i(bi),cf=n(bi,"P",{});var vW=s(cf);hyr=r(vW,`Note:
Loading a model from its configuration file does `),p5e=n(vW,"STRONG",{});var r2t=s(p5e);pyr=r(r2t,"not"),r2t.forEach(t),_yr=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_5e=n(vW,"CODE",{});var t2t=s(_5e);uyr=r(t2t,"from_pretrained()"),t2t.forEach(t),byr=r(vW,"to load the model weights."),vW.forEach(t),vyr=i(bi),u5e=n(bi,"P",{});var a2t=s(u5e);Tyr=r(a2t,"Examples:"),a2t.forEach(t),Fyr=i(bi),m(D0.$$.fragment,bi),bi.forEach(t),Cyr=i(ui),So=n(ui,"DIV",{class:!0});var xa=s(So);m(j0.$$.fragment,xa),Myr=i(xa),b5e=n(xa,"P",{});var n2t=s(b5e);Eyr=r(n2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n2t.forEach(t),yyr=i(xa),kn=n(xa,"P",{});var FE=s(kn);wyr=r(FE,"The model class to instantiate is selected based on the "),v5e=n(FE,"CODE",{});var s2t=s(v5e);Ayr=r(s2t,"model_type"),s2t.forEach(t),Lyr=r(FE,` property of the config object (either
passed as an argument or loaded from `),T5e=n(FE,"CODE",{});var l2t=s(T5e);Byr=r(l2t,"pretrained_model_name_or_path"),l2t.forEach(t),xyr=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(FE,"CODE",{});var i2t=s(F5e);kyr=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),Ryr=r(FE,":"),FE.forEach(t),Syr=i(xa),so=n(xa,"UL",{});var ta=s(so);nM=n(ta,"LI",{});var M7e=s(nM);C5e=n(M7e,"STRONG",{});var d2t=s(C5e);Pyr=r(d2t,"albert"),d2t.forEach(t),$yr=r(M7e," \u2014 "),TV=n(M7e,"A",{href:!0});var c2t=s(TV);Iyr=r(c2t,"FlaxAlbertForTokenClassification"),c2t.forEach(t),Dyr=r(M7e," (ALBERT model)"),M7e.forEach(t),jyr=i(ta),sM=n(ta,"LI",{});var E7e=s(sM);M5e=n(E7e,"STRONG",{});var f2t=s(M5e);Nyr=r(f2t,"bert"),f2t.forEach(t),qyr=r(E7e," \u2014 "),FV=n(E7e,"A",{href:!0});var m2t=s(FV);Gyr=r(m2t,"FlaxBertForTokenClassification"),m2t.forEach(t),Oyr=r(E7e," (BERT model)"),E7e.forEach(t),Xyr=i(ta),lM=n(ta,"LI",{});var y7e=s(lM);E5e=n(y7e,"STRONG",{});var g2t=s(E5e);Vyr=r(g2t,"big_bird"),g2t.forEach(t),zyr=r(y7e," \u2014 "),CV=n(y7e,"A",{href:!0});var h2t=s(CV);Wyr=r(h2t,"FlaxBigBirdForTokenClassification"),h2t.forEach(t),Qyr=r(y7e," (BigBird model)"),y7e.forEach(t),Hyr=i(ta),iM=n(ta,"LI",{});var w7e=s(iM);y5e=n(w7e,"STRONG",{});var p2t=s(y5e);Uyr=r(p2t,"distilbert"),p2t.forEach(t),Jyr=r(w7e," \u2014 "),MV=n(w7e,"A",{href:!0});var _2t=s(MV);Yyr=r(_2t,"FlaxDistilBertForTokenClassification"),_2t.forEach(t),Kyr=r(w7e," (DistilBERT model)"),w7e.forEach(t),Zyr=i(ta),dM=n(ta,"LI",{});var A7e=s(dM);w5e=n(A7e,"STRONG",{});var u2t=s(w5e);ewr=r(u2t,"electra"),u2t.forEach(t),owr=r(A7e," \u2014 "),EV=n(A7e,"A",{href:!0});var b2t=s(EV);rwr=r(b2t,"FlaxElectraForTokenClassification"),b2t.forEach(t),twr=r(A7e," (ELECTRA model)"),A7e.forEach(t),awr=i(ta),cM=n(ta,"LI",{});var L7e=s(cM);A5e=n(L7e,"STRONG",{});var v2t=s(A5e);nwr=r(v2t,"roberta"),v2t.forEach(t),swr=r(L7e," \u2014 "),yV=n(L7e,"A",{href:!0});var T2t=s(yV);lwr=r(T2t,"FlaxRobertaForTokenClassification"),T2t.forEach(t),iwr=r(L7e," (RoBERTa model)"),L7e.forEach(t),dwr=i(ta),fM=n(ta,"LI",{});var B7e=s(fM);L5e=n(B7e,"STRONG",{});var F2t=s(L5e);cwr=r(F2t,"roformer"),F2t.forEach(t),fwr=r(B7e," \u2014 "),wV=n(B7e,"A",{href:!0});var C2t=s(wV);mwr=r(C2t,"FlaxRoFormerForTokenClassification"),C2t.forEach(t),gwr=r(B7e," (RoFormer model)"),B7e.forEach(t),ta.forEach(t),hwr=i(xa),B5e=n(xa,"P",{});var M2t=s(B5e);pwr=r(M2t,"Examples:"),M2t.forEach(t),_wr=i(xa),m(N0.$$.fragment,xa),xa.forEach(t),ui.forEach(t),Rxe=i(c),ff=n(c,"H2",{class:!0});var ORe=s(ff);mM=n(ORe,"A",{id:!0,class:!0,href:!0});var E2t=s(mM);x5e=n(E2t,"SPAN",{});var y2t=s(x5e);m(q0.$$.fragment,y2t),y2t.forEach(t),E2t.forEach(t),uwr=i(ORe),k5e=n(ORe,"SPAN",{});var w2t=s(k5e);bwr=r(w2t,"FlaxAutoModelForMultipleChoice"),w2t.forEach(t),ORe.forEach(t),Sxe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(G0.$$.fragment,vi),vwr=i(vi),mf=n(vi,"P",{});var TW=s(mf);Twr=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),R5e=n(TW,"CODE",{});var A2t=s(R5e);Fwr=r(A2t,"from_pretrained()"),A2t.forEach(t),Cwr=r(TW,"class method or the "),S5e=n(TW,"CODE",{});var L2t=s(S5e);Mwr=r(L2t,"from_config()"),L2t.forEach(t),Ewr=r(TW,`class
method.`),TW.forEach(t),ywr=i(vi),O0=n(vi,"P",{});var XRe=s(O0);wwr=r(XRe,"This class cannot be instantiated directly using "),P5e=n(XRe,"CODE",{});var B2t=s(P5e);Awr=r(B2t,"__init__()"),B2t.forEach(t),Lwr=r(XRe," (throws an error)."),XRe.forEach(t),Bwr=i(vi),Bt=n(vi,"DIV",{class:!0});var Ti=s(Bt);m(X0.$$.fragment,Ti),xwr=i(Ti),$5e=n(Ti,"P",{});var x2t=s($5e);kwr=r(x2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),x2t.forEach(t),Rwr=i(Ti),gf=n(Ti,"P",{});var FW=s(gf);Swr=r(FW,`Note:
Loading a model from its configuration file does `),I5e=n(FW,"STRONG",{});var k2t=s(I5e);Pwr=r(k2t,"not"),k2t.forEach(t),$wr=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),D5e=n(FW,"CODE",{});var R2t=s(D5e);Iwr=r(R2t,"from_pretrained()"),R2t.forEach(t),Dwr=r(FW,"to load the model weights."),FW.forEach(t),jwr=i(Ti),j5e=n(Ti,"P",{});var S2t=s(j5e);Nwr=r(S2t,"Examples:"),S2t.forEach(t),qwr=i(Ti),m(V0.$$.fragment,Ti),Ti.forEach(t),Gwr=i(vi),Po=n(vi,"DIV",{class:!0});var ka=s(Po);m(z0.$$.fragment,ka),Owr=i(ka),N5e=n(ka,"P",{});var P2t=s(N5e);Xwr=r(P2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P2t.forEach(t),Vwr=i(ka),Rn=n(ka,"P",{});var CE=s(Rn);zwr=r(CE,"The model class to instantiate is selected based on the "),q5e=n(CE,"CODE",{});var $2t=s(q5e);Wwr=r($2t,"model_type"),$2t.forEach(t),Qwr=r(CE,` property of the config object (either
passed as an argument or loaded from `),G5e=n(CE,"CODE",{});var I2t=s(G5e);Hwr=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),Uwr=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=n(CE,"CODE",{});var D2t=s(O5e);Jwr=r(D2t,"pretrained_model_name_or_path"),D2t.forEach(t),Ywr=r(CE,":"),CE.forEach(t),Kwr=i(ka),lo=n(ka,"UL",{});var aa=s(lo);gM=n(aa,"LI",{});var x7e=s(gM);X5e=n(x7e,"STRONG",{});var j2t=s(X5e);Zwr=r(j2t,"albert"),j2t.forEach(t),e6r=r(x7e," \u2014 "),AV=n(x7e,"A",{href:!0});var N2t=s(AV);o6r=r(N2t,"FlaxAlbertForMultipleChoice"),N2t.forEach(t),r6r=r(x7e," (ALBERT model)"),x7e.forEach(t),t6r=i(aa),hM=n(aa,"LI",{});var k7e=s(hM);V5e=n(k7e,"STRONG",{});var q2t=s(V5e);a6r=r(q2t,"bert"),q2t.forEach(t),n6r=r(k7e," \u2014 "),LV=n(k7e,"A",{href:!0});var G2t=s(LV);s6r=r(G2t,"FlaxBertForMultipleChoice"),G2t.forEach(t),l6r=r(k7e," (BERT model)"),k7e.forEach(t),i6r=i(aa),pM=n(aa,"LI",{});var R7e=s(pM);z5e=n(R7e,"STRONG",{});var O2t=s(z5e);d6r=r(O2t,"big_bird"),O2t.forEach(t),c6r=r(R7e," \u2014 "),BV=n(R7e,"A",{href:!0});var X2t=s(BV);f6r=r(X2t,"FlaxBigBirdForMultipleChoice"),X2t.forEach(t),m6r=r(R7e," (BigBird model)"),R7e.forEach(t),g6r=i(aa),_M=n(aa,"LI",{});var S7e=s(_M);W5e=n(S7e,"STRONG",{});var V2t=s(W5e);h6r=r(V2t,"distilbert"),V2t.forEach(t),p6r=r(S7e," \u2014 "),xV=n(S7e,"A",{href:!0});var z2t=s(xV);_6r=r(z2t,"FlaxDistilBertForMultipleChoice"),z2t.forEach(t),u6r=r(S7e," (DistilBERT model)"),S7e.forEach(t),b6r=i(aa),uM=n(aa,"LI",{});var P7e=s(uM);Q5e=n(P7e,"STRONG",{});var W2t=s(Q5e);v6r=r(W2t,"electra"),W2t.forEach(t),T6r=r(P7e," \u2014 "),kV=n(P7e,"A",{href:!0});var Q2t=s(kV);F6r=r(Q2t,"FlaxElectraForMultipleChoice"),Q2t.forEach(t),C6r=r(P7e," (ELECTRA model)"),P7e.forEach(t),M6r=i(aa),bM=n(aa,"LI",{});var $7e=s(bM);H5e=n($7e,"STRONG",{});var H2t=s(H5e);E6r=r(H2t,"roberta"),H2t.forEach(t),y6r=r($7e," \u2014 "),RV=n($7e,"A",{href:!0});var U2t=s(RV);w6r=r(U2t,"FlaxRobertaForMultipleChoice"),U2t.forEach(t),A6r=r($7e," (RoBERTa model)"),$7e.forEach(t),L6r=i(aa),vM=n(aa,"LI",{});var I7e=s(vM);U5e=n(I7e,"STRONG",{});var J2t=s(U5e);B6r=r(J2t,"roformer"),J2t.forEach(t),x6r=r(I7e," \u2014 "),SV=n(I7e,"A",{href:!0});var Y2t=s(SV);k6r=r(Y2t,"FlaxRoFormerForMultipleChoice"),Y2t.forEach(t),R6r=r(I7e," (RoFormer model)"),I7e.forEach(t),aa.forEach(t),S6r=i(ka),J5e=n(ka,"P",{});var K2t=s(J5e);P6r=r(K2t,"Examples:"),K2t.forEach(t),$6r=i(ka),m(W0.$$.fragment,ka),ka.forEach(t),vi.forEach(t),Pxe=i(c),hf=n(c,"H2",{class:!0});var VRe=s(hf);TM=n(VRe,"A",{id:!0,class:!0,href:!0});var Z2t=s(TM);Y5e=n(Z2t,"SPAN",{});var ebt=s(Y5e);m(Q0.$$.fragment,ebt),ebt.forEach(t),Z2t.forEach(t),I6r=i(VRe),K5e=n(VRe,"SPAN",{});var obt=s(K5e);D6r=r(obt,"FlaxAutoModelForNextSentencePrediction"),obt.forEach(t),VRe.forEach(t),$xe=i(c),Dr=n(c,"DIV",{class:!0});var Fi=s(Dr);m(H0.$$.fragment,Fi),j6r=i(Fi),pf=n(Fi,"P",{});var CW=s(pf);N6r=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Z5e=n(CW,"CODE",{});var rbt=s(Z5e);q6r=r(rbt,"from_pretrained()"),rbt.forEach(t),G6r=r(CW,"class method or the "),eve=n(CW,"CODE",{});var tbt=s(eve);O6r=r(tbt,"from_config()"),tbt.forEach(t),X6r=r(CW,`class
method.`),CW.forEach(t),V6r=i(Fi),U0=n(Fi,"P",{});var zRe=s(U0);z6r=r(zRe,"This class cannot be instantiated directly using "),ove=n(zRe,"CODE",{});var abt=s(ove);W6r=r(abt,"__init__()"),abt.forEach(t),Q6r=r(zRe," (throws an error)."),zRe.forEach(t),H6r=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ci=s(xt);m(J0.$$.fragment,Ci),U6r=i(Ci),rve=n(Ci,"P",{});var nbt=s(rve);J6r=r(nbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nbt.forEach(t),Y6r=i(Ci),_f=n(Ci,"P",{});var MW=s(_f);K6r=r(MW,`Note:
Loading a model from its configuration file does `),tve=n(MW,"STRONG",{});var sbt=s(tve);Z6r=r(sbt,"not"),sbt.forEach(t),eAr=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ave=n(MW,"CODE",{});var lbt=s(ave);oAr=r(lbt,"from_pretrained()"),lbt.forEach(t),rAr=r(MW,"to load the model weights."),MW.forEach(t),tAr=i(Ci),nve=n(Ci,"P",{});var ibt=s(nve);aAr=r(ibt,"Examples:"),ibt.forEach(t),nAr=i(Ci),m(Y0.$$.fragment,Ci),Ci.forEach(t),sAr=i(Fi),$o=n(Fi,"DIV",{class:!0});var Ra=s($o);m(K0.$$.fragment,Ra),lAr=i(Ra),sve=n(Ra,"P",{});var dbt=s(sve);iAr=r(dbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dbt.forEach(t),dAr=i(Ra),Sn=n(Ra,"P",{});var ME=s(Sn);cAr=r(ME,"The model class to instantiate is selected based on the "),lve=n(ME,"CODE",{});var cbt=s(lve);fAr=r(cbt,"model_type"),cbt.forEach(t),mAr=r(ME,` property of the config object (either
passed as an argument or loaded from `),ive=n(ME,"CODE",{});var fbt=s(ive);gAr=r(fbt,"pretrained_model_name_or_path"),fbt.forEach(t),hAr=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(ME,"CODE",{});var mbt=s(dve);pAr=r(mbt,"pretrained_model_name_or_path"),mbt.forEach(t),_Ar=r(ME,":"),ME.forEach(t),uAr=i(Ra),cve=n(Ra,"UL",{});var gbt=s(cve);FM=n(gbt,"LI",{});var D7e=s(FM);fve=n(D7e,"STRONG",{});var hbt=s(fve);bAr=r(hbt,"bert"),hbt.forEach(t),vAr=r(D7e," \u2014 "),PV=n(D7e,"A",{href:!0});var pbt=s(PV);TAr=r(pbt,"FlaxBertForNextSentencePrediction"),pbt.forEach(t),FAr=r(D7e," (BERT model)"),D7e.forEach(t),gbt.forEach(t),CAr=i(Ra),mve=n(Ra,"P",{});var _bt=s(mve);MAr=r(_bt,"Examples:"),_bt.forEach(t),EAr=i(Ra),m(Z0.$$.fragment,Ra),Ra.forEach(t),Fi.forEach(t),Ixe=i(c),uf=n(c,"H2",{class:!0});var WRe=s(uf);CM=n(WRe,"A",{id:!0,class:!0,href:!0});var ubt=s(CM);gve=n(ubt,"SPAN",{});var bbt=s(gve);m(eL.$$.fragment,bbt),bbt.forEach(t),ubt.forEach(t),yAr=i(WRe),hve=n(WRe,"SPAN",{});var vbt=s(hve);wAr=r(vbt,"FlaxAutoModelForImageClassification"),vbt.forEach(t),WRe.forEach(t),Dxe=i(c),jr=n(c,"DIV",{class:!0});var Mi=s(jr);m(oL.$$.fragment,Mi),AAr=i(Mi),bf=n(Mi,"P",{});var EW=s(bf);LAr=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pve=n(EW,"CODE",{});var Tbt=s(pve);BAr=r(Tbt,"from_pretrained()"),Tbt.forEach(t),xAr=r(EW,"class method or the "),_ve=n(EW,"CODE",{});var Fbt=s(_ve);kAr=r(Fbt,"from_config()"),Fbt.forEach(t),RAr=r(EW,`class
method.`),EW.forEach(t),SAr=i(Mi),rL=n(Mi,"P",{});var QRe=s(rL);PAr=r(QRe,"This class cannot be instantiated directly using "),uve=n(QRe,"CODE",{});var Cbt=s(uve);$Ar=r(Cbt,"__init__()"),Cbt.forEach(t),IAr=r(QRe," (throws an error)."),QRe.forEach(t),DAr=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(tL.$$.fragment,Ei),jAr=i(Ei),bve=n(Ei,"P",{});var Mbt=s(bve);NAr=r(Mbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mbt.forEach(t),qAr=i(Ei),vf=n(Ei,"P",{});var yW=s(vf);GAr=r(yW,`Note:
Loading a model from its configuration file does `),vve=n(yW,"STRONG",{});var Ebt=s(vve);OAr=r(Ebt,"not"),Ebt.forEach(t),XAr=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tve=n(yW,"CODE",{});var ybt=s(Tve);VAr=r(ybt,"from_pretrained()"),ybt.forEach(t),zAr=r(yW,"to load the model weights."),yW.forEach(t),WAr=i(Ei),Fve=n(Ei,"P",{});var wbt=s(Fve);QAr=r(wbt,"Examples:"),wbt.forEach(t),HAr=i(Ei),m(aL.$$.fragment,Ei),Ei.forEach(t),UAr=i(Mi),Io=n(Mi,"DIV",{class:!0});var Sa=s(Io);m(nL.$$.fragment,Sa),JAr=i(Sa),Cve=n(Sa,"P",{});var Abt=s(Cve);YAr=r(Abt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Abt.forEach(t),KAr=i(Sa),Pn=n(Sa,"P",{});var EE=s(Pn);ZAr=r(EE,"The model class to instantiate is selected based on the "),Mve=n(EE,"CODE",{});var Lbt=s(Mve);e0r=r(Lbt,"model_type"),Lbt.forEach(t),o0r=r(EE,` property of the config object (either
passed as an argument or loaded from `),Eve=n(EE,"CODE",{});var Bbt=s(Eve);r0r=r(Bbt,"pretrained_model_name_or_path"),Bbt.forEach(t),t0r=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(EE,"CODE",{});var xbt=s(yve);a0r=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),n0r=r(EE,":"),EE.forEach(t),s0r=i(Sa),sL=n(Sa,"UL",{});var HRe=s(sL);MM=n(HRe,"LI",{});var j7e=s(MM);wve=n(j7e,"STRONG",{});var kbt=s(wve);l0r=r(kbt,"beit"),kbt.forEach(t),i0r=r(j7e," \u2014 "),$V=n(j7e,"A",{href:!0});var Rbt=s($V);d0r=r(Rbt,"FlaxBeitForImageClassification"),Rbt.forEach(t),c0r=r(j7e," (BEiT model)"),j7e.forEach(t),f0r=i(HRe),EM=n(HRe,"LI",{});var N7e=s(EM);Ave=n(N7e,"STRONG",{});var Sbt=s(Ave);m0r=r(Sbt,"vit"),Sbt.forEach(t),g0r=r(N7e," \u2014 "),IV=n(N7e,"A",{href:!0});var Pbt=s(IV);h0r=r(Pbt,"FlaxViTForImageClassification"),Pbt.forEach(t),p0r=r(N7e," (ViT model)"),N7e.forEach(t),HRe.forEach(t),_0r=i(Sa),Lve=n(Sa,"P",{});var $bt=s(Lve);u0r=r($bt,"Examples:"),$bt.forEach(t),b0r=i(Sa),m(lL.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),jxe=i(c),Tf=n(c,"H2",{class:!0});var URe=s(Tf);yM=n(URe,"A",{id:!0,class:!0,href:!0});var Ibt=s(yM);Bve=n(Ibt,"SPAN",{});var Dbt=s(Bve);m(iL.$$.fragment,Dbt),Dbt.forEach(t),Ibt.forEach(t),v0r=i(URe),xve=n(URe,"SPAN",{});var jbt=s(xve);T0r=r(jbt,"FlaxAutoModelForVision2Seq"),jbt.forEach(t),URe.forEach(t),Nxe=i(c),Nr=n(c,"DIV",{class:!0});var yi=s(Nr);m(dL.$$.fragment,yi),F0r=i(yi),Ff=n(yi,"P",{});var wW=s(Ff);C0r=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kve=n(wW,"CODE",{});var Nbt=s(kve);M0r=r(Nbt,"from_pretrained()"),Nbt.forEach(t),E0r=r(wW,"class method or the "),Rve=n(wW,"CODE",{});var qbt=s(Rve);y0r=r(qbt,"from_config()"),qbt.forEach(t),w0r=r(wW,`class
method.`),wW.forEach(t),A0r=i(yi),cL=n(yi,"P",{});var JRe=s(cL);L0r=r(JRe,"This class cannot be instantiated directly using "),Sve=n(JRe,"CODE",{});var Gbt=s(Sve);B0r=r(Gbt,"__init__()"),Gbt.forEach(t),x0r=r(JRe," (throws an error)."),JRe.forEach(t),k0r=i(yi),Rt=n(yi,"DIV",{class:!0});var wi=s(Rt);m(fL.$$.fragment,wi),R0r=i(wi),Pve=n(wi,"P",{});var Obt=s(Pve);S0r=r(Obt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Obt.forEach(t),P0r=i(wi),Cf=n(wi,"P",{});var AW=s(Cf);$0r=r(AW,`Note:
Loading a model from its configuration file does `),$ve=n(AW,"STRONG",{});var Xbt=s($ve);I0r=r(Xbt,"not"),Xbt.forEach(t),D0r=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ive=n(AW,"CODE",{});var Vbt=s(Ive);j0r=r(Vbt,"from_pretrained()"),Vbt.forEach(t),N0r=r(AW,"to load the model weights."),AW.forEach(t),q0r=i(wi),Dve=n(wi,"P",{});var zbt=s(Dve);G0r=r(zbt,"Examples:"),zbt.forEach(t),O0r=i(wi),m(mL.$$.fragment,wi),wi.forEach(t),X0r=i(yi),Do=n(yi,"DIV",{class:!0});var Pa=s(Do);m(gL.$$.fragment,Pa),V0r=i(Pa),jve=n(Pa,"P",{});var Wbt=s(jve);z0r=r(Wbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wbt.forEach(t),W0r=i(Pa),$n=n(Pa,"P",{});var yE=s($n);Q0r=r(yE,"The model class to instantiate is selected based on the "),Nve=n(yE,"CODE",{});var Qbt=s(Nve);H0r=r(Qbt,"model_type"),Qbt.forEach(t),U0r=r(yE,` property of the config object (either
passed as an argument or loaded from `),qve=n(yE,"CODE",{});var Hbt=s(qve);J0r=r(Hbt,"pretrained_model_name_or_path"),Hbt.forEach(t),Y0r=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(yE,"CODE",{});var Ubt=s(Gve);K0r=r(Ubt,"pretrained_model_name_or_path"),Ubt.forEach(t),Z0r=r(yE,":"),yE.forEach(t),eLr=i(Pa),Ove=n(Pa,"UL",{});var Jbt=s(Ove);wM=n(Jbt,"LI",{});var q7e=s(wM);Xve=n(q7e,"STRONG",{});var Ybt=s(Xve);oLr=r(Ybt,"vision-encoder-decoder"),Ybt.forEach(t),rLr=r(q7e," \u2014 "),DV=n(q7e,"A",{href:!0});var Kbt=s(DV);tLr=r(Kbt,"FlaxVisionEncoderDecoderModel"),Kbt.forEach(t),aLr=r(q7e," (Vision Encoder decoder model)"),q7e.forEach(t),Jbt.forEach(t),nLr=i(Pa),Vve=n(Pa,"P",{});var Zbt=s(Vve);sLr=r(Zbt,"Examples:"),Zbt.forEach(t),lLr=i(Pa),m(hL.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(i5t)),d(me,"id","auto-classes"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#auto-classes"),d(de,"class","relative group"),d(In,"href","/docs/transformers/pr_15912/en/model_doc/auto#transformers.AutoConfig"),d(jn,"href","/docs/transformers/pr_15912/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/pr_15912/en/model_doc/auto#transformers.AutoTokenizer"),d(Pi,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertModel"),d(Lf,"id","extending-the-auto-classes"),d(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lf,"href","#extending-the-auto-classes"),d($i,"class","relative group"),d(xf,"id","transformers.AutoConfig"),d(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xf,"href","#transformers.AutoConfig"),d(Ii,"class","relative group"),d(u8,"href","/docs/transformers/pr_15912/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(b8,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertConfig"),d(v8,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartConfig"),d(T8,"href","/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitConfig"),d(F8,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertConfig"),d(C8,"href","/docs/transformers/pr_15912/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(M8,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdConfig"),d(E8,"href","/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(y8,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(w8,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(A8,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertConfig"),d(L8,"href","/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineConfig"),d(B8,"href","/docs/transformers/pr_15912/en/model_doc/clip#transformers.CLIPConfig"),d(x8,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertConfig"),d(k8,"href","/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextConfig"),d(R8,"href","/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLConfig"),d(S8,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(P8,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d($8,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaConfig"),d(I8,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(D8,"href","/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTConfig"),d(j8,"href","/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrConfig"),d(N8,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertConfig"),d(q8,"href","/docs/transformers/pr_15912/en/model_doc/dpr#transformers.DPRConfig"),d(G8,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraConfig"),d(O8,"href","/docs/transformers/pr_15912/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(X8,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertConfig"),d(V8,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetConfig"),d(z8,"href","/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTConfig"),d(W8,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelConfig"),d(Q8,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Config"),d(H8,"href","/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(U8,"href","/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJConfig"),d(J8,"href","/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertConfig"),d(Y8,"href","/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertConfig"),d(K8,"href","/docs/transformers/pr_15912/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Z8,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(e7,"href","/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(o7,"href","/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDConfig"),d(r7,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerConfig"),d(t7,"href","/docs/transformers/pr_15912/en/model_doc/luke#transformers.LukeConfig"),d(a7,"href","/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertConfig"),d(n7,"href","/docs/transformers/pr_15912/en/model_doc/m2m_100#transformers.M2M100Config"),d(s7,"href","/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianConfig"),d(l7,"href","/docs/transformers/pr_15912/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(i7,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartConfig"),d(d7,"href","/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(c7,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(f7,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetConfig"),d(m7,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5Config"),d(g7,"href","/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(h7,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(p7,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusConfig"),d(_7,"href","/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverConfig"),d(u7,"href","/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartConfig"),d(b7,"href","/docs/transformers/pr_15912/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(v7,"href","/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(T7,"href","/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(F7,"href","/docs/transformers/pr_15912/en/model_doc/rag#transformers.RagConfig"),d(C7,"href","/docs/transformers/pr_15912/en/model_doc/realm#transformers.RealmConfig"),d(M7,"href","/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerConfig"),d(E7,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertConfig"),d(y7,"href","/docs/transformers/pr_15912/en/model_doc/resnet#transformers.ResNetConfig"),d(w7,"href","/docs/transformers/pr_15912/en/model_doc/retribert#transformers.RetriBertConfig"),d(A7,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaConfig"),d(L7,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerConfig"),d(B7,"href","/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerConfig"),d(x7,"href","/docs/transformers/pr_15912/en/model_doc/sew#transformers.SEWConfig"),d(k7,"href","/docs/transformers/pr_15912/en/model_doc/sew-d#transformers.SEWDConfig"),d(R7,"href","/docs/transformers/pr_15912/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(S7,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(P7,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d($7,"href","/docs/transformers/pr_15912/en/model_doc/splinter#transformers.SplinterConfig"),d(I7,"href","/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(D7,"href","/docs/transformers/pr_15912/en/model_doc/swin#transformers.SwinConfig"),d(j7,"href","/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Config"),d(N7,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasConfig"),d(q7,"href","/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(G7,"href","/docs/transformers/pr_15912/en/model_doc/trocr#transformers.TrOCRConfig"),d(O7,"href","/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(X7,"href","/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(V7,"href","/docs/transformers/pr_15912/en/model_doc/vilt#transformers.ViltConfig"),d(z7,"href","/docs/transformers/pr_15912/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(W7,"href","/docs/transformers/pr_15912/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Q7,"href","/docs/transformers/pr_15912/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(H7,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTConfig"),d(U7,"href","/docs/transformers/pr_15912/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(J7,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Y7,"href","/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMConfig"),d(K7,"href","/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMConfig"),d(Z7,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMConfig"),d(eB,"href","/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(oB,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(rB,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(tB,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetConfig"),d(aB,"href","/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(bg,"class","docstring"),d(Xo,"class","docstring"),d(vg,"id","transformers.AutoTokenizer"),d(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vg,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(nB,"href","/docs/transformers/pr_15912/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(sB,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertTokenizer"),d(lB,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(iB,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartTokenizer"),d(dB,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartTokenizerFast"),d(cB,"href","/docs/transformers/pr_15912/en/model_doc/barthez#transformers.BarthezTokenizer"),d(fB,"href","/docs/transformers/pr_15912/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(mB,"href","/docs/transformers/pr_15912/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(gB,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertTokenizer"),d(hB,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertTokenizerFast"),d(pB,"href","/docs/transformers/pr_15912/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(_B,"href","/docs/transformers/pr_15912/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(uB,"href","/docs/transformers/pr_15912/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(bB,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(vB,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(TB,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(FB,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(CB,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(MB,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(EB,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(yB,"href","/docs/transformers/pr_15912/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(wB,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertTokenizer"),d(AB,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(LB,"href","/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineTokenizer"),d(BB,"href","/docs/transformers/pr_15912/en/model_doc/clip#transformers.CLIPTokenizer"),d(xB,"href","/docs/transformers/pr_15912/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(kB,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(RB,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(SB,"href","/docs/transformers/pr_15912/en/model_doc/cpm#transformers.CpmTokenizer"),d(PB,"href","/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLTokenizer"),d($B,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaTokenizer"),d(IB,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(DB,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(jB,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(NB,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(qB,"href","/docs/transformers/pr_15912/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(GB,"href","/docs/transformers/pr_15912/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(OB,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraTokenizer"),d(XB,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(VB,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(zB,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetTokenizer"),d(WB,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(QB,"href","/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(HB,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelTokenizer"),d(UB,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(JB,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(YB,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(KB,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(ZB,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(ex,"href","/docs/transformers/pr_15912/en/model_doc/herbert#transformers.HerbertTokenizer"),d(ox,"href","/docs/transformers/pr_15912/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(rx,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(tx,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ax,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(nx,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(sx,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(lx,"href","/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(ix,"href","/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(dx,"href","/docs/transformers/pr_15912/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(cx,"href","/docs/transformers/pr_15912/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(fx,"href","/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDTokenizer"),d(mx,"href","/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDTokenizerFast"),d(gx,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerTokenizer"),d(hx,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(px,"href","/docs/transformers/pr_15912/en/model_doc/luke#transformers.LukeTokenizer"),d(_x,"href","/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(ux,"href","/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(bx,"href","/docs/transformers/pr_15912/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(vx,"href","/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianTokenizer"),d(Tx,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartTokenizer"),d(Fx,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(Cx,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(Mx,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(Ex,"href","/docs/transformers/pr_15912/en/model_doc/mluke#transformers.MLukeTokenizer"),d(yx,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(wx,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Ax,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Lx,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Bx,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.T5Tokenizer"),d(xx,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.T5TokenizerFast"),d(kx,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Rx,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Sx,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Px,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d($x,"href","/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Ix,"href","/docs/transformers/pr_15912/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Dx,"href","/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartTokenizer"),d(jx,"href","/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Nx,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertTokenizer"),d(qx,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertTokenizerFast"),d(Gx,"href","/docs/transformers/pr_15912/en/model_doc/rag#transformers.RagTokenizer"),d(Ox,"href","/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Xx,"href","/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Vx,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertTokenizer"),d(zx,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Wx,"href","/docs/transformers/pr_15912/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Qx,"href","/docs/transformers/pr_15912/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Hx,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Ux,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Jx,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Yx,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Kx,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Zx,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(ek,"href","/docs/transformers/pr_15912/en/model_doc/splinter#transformers.SplinterTokenizer"),d(ok,"href","/docs/transformers/pr_15912/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(rk,"href","/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(tk,"href","/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(ak,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.T5Tokenizer"),d(nk,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.T5TokenizerFast"),d(sk,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasTokenizer"),d(lk,"href","/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(ik,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(dk,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(ck,"href","/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMTokenizer"),d(fk,"href","/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(mk,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMTokenizer"),d(gk,"href","/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(hk,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(pk,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(_k,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(uk,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(mo,"class","docstring"),d(Ug,"class","docstring"),d(Vo,"class","docstring"),d(Jg,"id","transformers.AutoFeatureExtractor"),d(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jg,"href","#transformers.AutoFeatureExtractor"),d(Ni,"class","relative group"),d(bk,"href","/docs/transformers/pr_15912/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(vk,"href","/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Tk,"href","/docs/transformers/pr_15912/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Fk,"href","/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Ck,"href","/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Mk,"href","/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Ek,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(yk,"href","/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(wk,"href","/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Ak,"href","/docs/transformers/pr_15912/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Lk,"href","/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Bk,"href","/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(xk,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(kk,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Rk,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Sk,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Pk,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(ke,"class","docstring"),d(hh,"class","docstring"),d(zo,"class","docstring"),d(ph,"id","transformers.AutoProcessor"),d(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ph,"href","#transformers.AutoProcessor"),d(qi,"class","relative group"),d($k,"href","/docs/transformers/pr_15912/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(Ik,"href","/docs/transformers/pr_15912/en/model_doc/clip#transformers.CLIPProcessor"),d(Dk,"href","/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(jk,"href","/docs/transformers/pr_15912/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(Nk,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(qk,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(Gk,"href","/docs/transformers/pr_15912/en/model_doc/trocr#transformers.TrOCRProcessor"),d(Ok,"href","/docs/transformers/pr_15912/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(Xk,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Re,"class","docstring"),d(yh,"class","docstring"),d(Wo,"class","docstring"),d(wh,"id","transformers.AutoModel"),d(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wh,"href","#transformers.AutoModel"),d(Oi,"class","relative group"),d(qr,"class","docstring"),d(Vk,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertModel"),d(zk,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartModel"),d(Wk,"href","/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitModel"),d(Qk,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertModel"),d(Hk,"href","/docs/transformers/pr_15912/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Uk,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdModel"),d(Jk,"href","/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Yk,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Kk,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Zk,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertModel"),d(eR,"href","/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineModel"),d(oR,"href","/docs/transformers/pr_15912/en/model_doc/clip#transformers.CLIPModel"),d(rR,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertModel"),d(tR,"href","/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextModel"),d(aR,"href","/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLModel"),d(nR,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(sR,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(lR,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaModel"),d(iR,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(dR,"href","/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTModel"),d(cR,"href","/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrModel"),d(fR,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertModel"),d(mR,"href","/docs/transformers/pr_15912/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(gR,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraModel"),d(hR,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertModel"),d(pR,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetModel"),d(_R,"href","/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTModel"),d(uR,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelModel"),d(bR,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelBaseModel"),d(vR,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2Model"),d(TR,"href","/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(FR,"href","/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJModel"),d(CR,"href","/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertModel"),d(MR,"href","/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertModel"),d(ER,"href","/docs/transformers/pr_15912/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(yR,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(wR,"href","/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(AR,"href","/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDModel"),d(LR,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerModel"),d(BR,"href","/docs/transformers/pr_15912/en/model_doc/luke#transformers.LukeModel"),d(xR,"href","/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertModel"),d(kR,"href","/docs/transformers/pr_15912/en/model_doc/m2m_100#transformers.M2M100Model"),d(RR,"href","/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianModel"),d(SR,"href","/docs/transformers/pr_15912/en/model_doc/maskformer#transformers.MaskFormerModel"),d(PR,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartModel"),d($R,"href","/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(IR,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertModel"),d(DR,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetModel"),d(jR,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5Model"),d(NR,"href","/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerModel"),d(qR,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(GR,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusModel"),d(OR,"href","/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverModel"),d(XR,"href","/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartModel"),d(VR,"href","/docs/transformers/pr_15912/en/model_doc/poolformer#transformers.PoolFormerModel"),d(zR,"href","/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(WR,"href","/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertModel"),d(QR,"href","/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerModel"),d(HR,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertModel"),d(UR,"href","/docs/transformers/pr_15912/en/model_doc/resnet#transformers.ResNetModel"),d(JR,"href","/docs/transformers/pr_15912/en/model_doc/retribert#transformers.RetriBertModel"),d(YR,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaModel"),d(KR,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerModel"),d(ZR,"href","/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerModel"),d(eS,"href","/docs/transformers/pr_15912/en/model_doc/sew#transformers.SEWModel"),d(oS,"href","/docs/transformers/pr_15912/en/model_doc/sew-d#transformers.SEWDModel"),d(rS,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(tS,"href","/docs/transformers/pr_15912/en/model_doc/splinter#transformers.SplinterModel"),d(aS,"href","/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(nS,"href","/docs/transformers/pr_15912/en/model_doc/swin#transformers.SwinModel"),d(sS,"href","/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5Model"),d(lS,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasModel"),d(iS,"href","/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(dS,"href","/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechModel"),d(cS,"href","/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(fS,"href","/docs/transformers/pr_15912/en/model_doc/vilt#transformers.ViltModel"),d(mS,"href","/docs/transformers/pr_15912/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(gS,"href","/docs/transformers/pr_15912/en/model_doc/visual_bert#transformers.VisualBertModel"),d(hS,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTModel"),d(pS,"href","/docs/transformers/pr_15912/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(_S,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(uS,"href","/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMModel"),d(bS,"href","/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMModel"),d(vS,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMModel"),d(TS,"href","/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(FS,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(CS,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(MS,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetModel"),d(ES,"href","/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoModel"),d(Se,"class","docstring"),d(Qo,"class","docstring"),d(l_,"id","transformers.AutoModelForPreTraining"),d(l_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l_,"href","#transformers.AutoModelForPreTraining"),d(zi,"class","relative group"),d(Gr,"class","docstring"),d(yS,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForPreTraining"),d(wS,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(AS,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForPreTraining"),d(LS,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(BS,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(xS,"href","/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(kS,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(RS,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(SS,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(PS,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d($S,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForPreTraining"),d(IS,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(DS,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForPreTraining"),d(jS,"href","/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(NS,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(qS,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(GS,"href","/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(OS,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(XS,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(VS,"href","/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(zS,"href","/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(WS,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(QS,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(HS,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(US,"href","/docs/transformers/pr_15912/en/model_doc/retribert#transformers.RetriBertModel"),d(JS,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(YS,"href","/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(KS,"href","/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(ZS,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(eP,"href","/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(oP,"href","/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(rP,"href","/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(tP,"href","/docs/transformers/pr_15912/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(aP,"href","/docs/transformers/pr_15912/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(nP,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(sP,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(lP,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(iP,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(dP,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Pe,"class","docstring"),d(Ho,"class","docstring"),d(H_,"id","transformers.AutoModelForCausalLM"),d(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H_,"href","#transformers.AutoModelForCausalLM"),d(Hi,"class","relative group"),d(Or,"class","docstring"),d(cP,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForCausalLM"),d(fP,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertLMHeadModel"),d(mP,"href","/docs/transformers/pr_15912/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(gP,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(hP,"href","/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(pP,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(_P,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(uP,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(bP,"href","/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(vP,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(TP,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForCausalLM"),d(FP,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(CP,"href","/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(MP,"href","/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(EP,"href","/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianForCausalLM"),d(yP,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartForCausalLM"),d(wP,"href","/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(AP,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(LP,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(BP,"href","/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(xP,"href","/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(kP,"href","/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(RP,"href","/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(SP,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(PP,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForCausalLM"),d($P,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(IP,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(DP,"href","/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(jP,"href","/docs/transformers/pr_15912/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(NP,"href","/docs/transformers/pr_15912/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(qP,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(GP,"href","/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(OP,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(XP,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(VP,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d($e,"class","docstring"),d(Uo,"class","docstring"),d(ku,"id","transformers.AutoModelForMaskedLM"),d(ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ku,"href","#transformers.AutoModelForMaskedLM"),d(Yi,"class","relative group"),d(Xr,"class","docstring"),d(zP,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(WP,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(QP,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForMaskedLM"),d(HP,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(UP,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(JP,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(YP,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(KP,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(ZP,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(e$,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(o$,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(r$,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(t$,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(a$,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(n$,"href","/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(s$,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(l$,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(i$,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(d$,"href","/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(c$,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(f$,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(m$,"href","/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(g$,"href","/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(h$,"href","/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(p$,"href","/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(_$,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(u$,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(b$,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(v$,"href","/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(T$,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(F$,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(C$,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(M$,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(E$,"href","/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ie,"class","docstring"),d(Jo,"class","docstring"),d(h1,"id","transformers.AutoModelForSeq2SeqLM"),d(h1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h1,"href","#transformers.AutoModelForSeq2SeqLM"),d(ed,"class","relative group"),d(Vr,"class","docstring"),d(y$,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(w$,"href","/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(A$,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(L$,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(B$,"href","/docs/transformers/pr_15912/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(x$,"href","/docs/transformers/pr_15912/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(k$,"href","/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(R$,"href","/docs/transformers/pr_15912/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(S$,"href","/docs/transformers/pr_15912/en/model_doc/marian#transformers.MarianMTModel"),d(P$,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d($$,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(I$,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(D$,"href","/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(j$,"href","/docs/transformers/pr_15912/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(N$,"href","/docs/transformers/pr_15912/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(q$,"href","/docs/transformers/pr_15912/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(R1,"id","transformers.AutoModelForSequenceClassification"),d(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R1,"href","#transformers.AutoModelForSequenceClassification"),d(td,"class","relative group"),d(zr,"class","docstring"),d(G$,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(O$,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForSequenceClassification"),d(X$,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForSequenceClassification"),d(V$,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(z$,"href","/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(W$,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Q$,"href","/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(H$,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(U$,"href","/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(J$,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Y$,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(K$,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Z$,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(eI,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(oI,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(rI,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(tI,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(aI,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(nI,"href","/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(sI,"href","/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(lI,"href","/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(iI,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(dI,"href","/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(cI,"href","/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDForSequenceClassification"),d(fI,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(mI,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(gI,"href","/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(hI,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(pI,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(_I,"href","/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(uI,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(bI,"href","/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(vI,"href","/docs/transformers/pr_15912/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(TI,"href","/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(FI,"href","/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(CI,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(MI,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(EI,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(yI,"href","/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(wI,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(AI,"href","/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(LI,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(BI,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(xI,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(kI,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(RI,"href","/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(w2,"id","transformers.AutoModelForMultipleChoice"),d(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w2,"href","#transformers.AutoModelForMultipleChoice"),d(sd,"class","relative group"),d(Wr,"class","docstring"),d(SI,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(PI,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForMultipleChoice"),d($I,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(II,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(DI,"href","/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(jI,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(NI,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(qI,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(GI,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(OI,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(XI,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(VI,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(zI,"href","/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(WI,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(QI,"href","/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(HI,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(UI,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(JI,"href","/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(YI,"href","/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(KI,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(ZI,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(eD,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(oD,"href","/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(rD,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(tD,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(aD,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(nD,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(sD,"href","/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ne,"class","docstring"),d(Zo,"class","docstring"),d(rb,"id","transformers.AutoModelForNextSentencePrediction"),d(rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rb,"href","#transformers.AutoModelForNextSentencePrediction"),d(dd,"class","relative group"),d(Qr,"class","docstring"),d(lD,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(iD,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(dD,"href","/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(cD,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(fD,"href","/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(qe,"class","docstring"),d(er,"class","docstring"),d(db,"id","transformers.AutoModelForTokenClassification"),d(db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(db,"href","#transformers.AutoModelForTokenClassification"),d(md,"class","relative group"),d(Hr,"class","docstring"),d(mD,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(gD,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForTokenClassification"),d(hD,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(pD,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(_D,"href","/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineForTokenClassification"),d(uD,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(bD,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(vD,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(TD,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(FD,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(CD,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(MD,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(ED,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(yD,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(wD,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(AD,"href","/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(LD,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(BD,"href","/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(xD,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(kD,"href","/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(RD,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(SD,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(PD,"href","/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d($D,"href","/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(ID,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(DD,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(jD,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(ND,"href","/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(qD,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(GD,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(OD,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(XD,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(VD,"href","/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(Ge,"class","docstring"),d(or,"class","docstring"),d(Vb,"id","transformers.AutoModelForQuestionAnswering"),d(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vb,"href","#transformers.AutoModelForQuestionAnswering"),d(pd,"class","relative group"),d(Ur,"class","docstring"),d(zD,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_15912/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_15912/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(nj,"href","/docs/transformers/pr_15912/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_15912/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_15912/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_15912/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_15912/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_15912/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_15912/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_15912/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_15912/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(Mj,"href","/docs/transformers/pr_15912/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(Ej,"href","/docs/transformers/pr_15912/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(yj,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(wj,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Aj,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(Lj,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(Bj,"href","/docs/transformers/pr_15912/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Oe,"class","docstring"),d(rr,"class","docstring"),d(k5,"id","transformers.AutoModelForTableQuestionAnswering"),d(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k5,"href","#transformers.AutoModelForTableQuestionAnswering"),d(bd,"class","relative group"),d(Jr,"class","docstring"),d(xj,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(P5,"id","transformers.AutoModelForImageClassification"),d(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P5,"href","#transformers.AutoModelForImageClassification"),d(Fd,"class","relative group"),d(Yr,"class","docstring"),d(kj,"href","/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitForImageClassification"),d(Rj,"href","/docs/transformers/pr_15912/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(Sj,"href","/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Pj,"href","/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d($j,"href","/docs/transformers/pr_15912/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Ij,"href","/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(Dj,"href","/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(jj,"href","/docs/transformers/pr_15912/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Nj,"href","/docs/transformers/pr_15912/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(qj,"href","/docs/transformers/pr_15912/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(Gj,"href","/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(Oj,"href","/docs/transformers/pr_15912/en/model_doc/swin#transformers.SwinForImageClassification"),d(Xj,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ve,"class","docstring"),d(ar,"class","docstring"),d(V5,"id","transformers.AutoModelForVision2Seq"),d(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V5,"href","#transformers.AutoModelForVision2Seq"),d(Ed,"class","relative group"),d(Kr,"class","docstring"),d(Vj,"href","/docs/transformers/pr_15912/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(ze,"class","docstring"),d(nr,"class","docstring"),d(Q5,"id","transformers.AutoModelForAudioClassification"),d(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q5,"href","#transformers.AutoModelForAudioClassification"),d(Ad,"class","relative group"),d(Zr,"class","docstring"),d(zj,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Wj,"href","/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(Qj,"href","/docs/transformers/pr_15912/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(Hj,"href","/docs/transformers/pr_15912/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Uj,"href","/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Jj,"href","/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Yj,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Kj,"href","/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(We,"class","docstring"),d(sr,"class","docstring"),d(tv,"id","transformers.AutoModelForAudioFrameClassification"),d(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tv,"href","#transformers.AutoModelForAudioFrameClassification"),d(xd,"class","relative group"),d(et,"class","docstring"),d(Zj,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(eN,"href","/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(oN,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(rN,"href","/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Qe,"class","docstring"),d(lr,"class","docstring"),d(dv,"id","transformers.AutoModelForCTC"),d(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dv,"href","#transformers.AutoModelForCTC"),d(Sd,"class","relative group"),d(ot,"class","docstring"),d(tN,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(aN,"href","/docs/transformers/pr_15912/en/model_doc/hubert#transformers.HubertForCTC"),d(nN,"href","/docs/transformers/pr_15912/en/model_doc/sew#transformers.SEWForCTC"),d(sN,"href","/docs/transformers/pr_15912/en/model_doc/sew-d#transformers.SEWDForCTC"),d(lN,"href","/docs/transformers/pr_15912/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(iN,"href","/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(dN,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(cN,"href","/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMForCTC"),d(He,"class","docstring"),d(ir,"class","docstring"),d(vv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Id,"class","relative group"),d(rt,"class","docstring"),d(fN,"href","/docs/transformers/pr_15912/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(mN,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ue,"class","docstring"),d(dr,"class","docstring"),d(Mv,"id","transformers.AutoModelForAudioXVector"),d(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mv,"href","#transformers.AutoModelForAudioXVector"),d(Nd,"class","relative group"),d(tt,"class","docstring"),d(gN,"href","/docs/transformers/pr_15912/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(hN,"href","/docs/transformers/pr_15912/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(pN,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(_N,"href","/docs/transformers/pr_15912/en/model_doc/wavlm#transformers.WavLMForXVector"),d(Je,"class","docstring"),d(cr,"class","docstring"),d(Bv,"id","transformers.AutoModelForMaskedImageModeling"),d(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Od,"class","relative group"),d(at,"class","docstring"),d(uN,"href","/docs/transformers/pr_15912/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(bN,"href","/docs/transformers/pr_15912/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(vN,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(Ye,"class","docstring"),d(fr,"class","docstring"),d(Pv,"id","transformers.AutoModelForObjectDetection"),d(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pv,"href","#transformers.AutoModelForObjectDetection"),d(Wd,"class","relative group"),d(nt,"class","docstring"),d(TN,"href","/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrForObjectDetection"),d(Ke,"class","docstring"),d(mr,"class","docstring"),d(Dv,"id","transformers.AutoModelForImageSegmentation"),d(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dv,"href","#transformers.AutoModelForImageSegmentation"),d(Ud,"class","relative group"),d(st,"class","docstring"),d(FN,"href","/docs/transformers/pr_15912/en/model_doc/detr#transformers.DetrForSegmentation"),d(Ze,"class","docstring"),d(gr,"class","docstring"),d(qv,"id","transformers.AutoModelForSemanticSegmentation"),d(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qv,"href","#transformers.AutoModelForSemanticSegmentation"),d(Kd,"class","relative group"),d(lt,"class","docstring"),d(CN,"href","/docs/transformers/pr_15912/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(MN,"href","/docs/transformers/pr_15912/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(eo,"class","docstring"),d(hr,"class","docstring"),d(Vv,"id","transformers.TFAutoModel"),d(Vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vv,"href","#transformers.TFAutoModel"),d(oc,"class","relative group"),d(it,"class","docstring"),d(EN,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertModel"),d(yN,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.TFBartModel"),d(wN,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertModel"),d(AN,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(LN,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(BN,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertModel"),d(xN,"href","/docs/transformers/pr_15912/en/model_doc/clip#transformers.TFCLIPModel"),d(kN,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertModel"),d(RN,"href","/docs/transformers/pr_15912/en/model_doc/convnext#transformers.TFConvNextModel"),d(SN,"href","/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.TFCTRLModel"),d(PN,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.TFDebertaModel"),d($N,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(IN,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(DN,"href","/docs/transformers/pr_15912/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(jN,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraModel"),d(NN,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(qN,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelModel"),d(GN,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(ON,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.TFGPT2Model"),d(XN,"href","/docs/transformers/pr_15912/en/model_doc/hubert#transformers.TFHubertModel"),d(VN,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(zN,"href","/docs/transformers/pr_15912/en/model_doc/led#transformers.TFLEDModel"),d(WN,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerModel"),d(QN,"href","/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.TFLxmertModel"),d(HN,"href","/docs/transformers/pr_15912/en/model_doc/marian#transformers.TFMarianModel"),d(UN,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.TFMBartModel"),d(JN,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(YN,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetModel"),d(KN,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.TFMT5Model"),d(ZN,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(eq,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.TFPegasusModel"),d(oq,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertModel"),d(rq,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaModel"),d(tq,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerModel"),d(aq,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(nq,"href","/docs/transformers/pr_15912/en/model_doc/t5#transformers.TFT5Model"),d(sq,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TFTapasModel"),d(lq,"href","/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(iq,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.TFViTModel"),d(dq,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(cq,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMModel"),d(fq,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(mq,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetModel"),d(go,"class","docstring"),d(pr,"class","docstring"),d(RT,"id","transformers.TFAutoModelForPreTraining"),d(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RT,"href","#transformers.TFAutoModelForPreTraining"),d(ac,"class","relative group"),d(dt,"class","docstring"),d(gq,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(hq,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(pq,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForPreTraining"),d(_q,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(uq,"href","/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(bq,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(vq,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(Tq,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(Fq,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(Cq,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(Mq,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(Eq,"href","/docs/transformers/pr_15912/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(yq,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(wq,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Aq,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(Lq,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Bq,"href","/docs/transformers/pr_15912/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(xq,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(kq,"href","/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Rq,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Sq,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Pq,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(ho,"class","docstring"),d(_r,"class","docstring"),d(oF,"id","transformers.TFAutoModelForCausalLM"),d(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oF,"href","#transformers.TFAutoModelForCausalLM"),d(lc,"class","relative group"),d(ct,"class","docstring"),d($q,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(Iq,"href","/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(Dq,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(jq,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(Nq,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(qq,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(Gq,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(Oq,"href","/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Xq,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Vq,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(ur,"class","docstring"),d(mF,"id","transformers.TFAutoModelForImageClassification"),d(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mF,"href","#transformers.TFAutoModelForImageClassification"),d(cc,"class","relative group"),d(ft,"class","docstring"),d(zq,"href","/docs/transformers/pr_15912/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(Wq,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(br,"class","docstring"),d(pF,"id","transformers.TFAutoModelForMaskedLM"),d(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pF,"href","#transformers.TFAutoModelForMaskedLM"),d(gc,"class","relative group"),d(mt,"class","docstring"),d(Qq,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(Hq,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(Uq,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(Jq,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(Yq,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(Kq,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(Zq,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(eG,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(oG,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(rG,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(tG,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aG,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(nG,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(sG,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lG,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(iG,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dG,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(cG,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(fG,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(mG,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uo,"class","docstring"),d(vr,"class","docstring"),d(IF,"id","transformers.TFAutoModelForSeq2SeqLM"),d(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IF,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(_c,"class","relative group"),d(gt,"class","docstring"),d(gG,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(hG,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(pG,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(_G,"href","/docs/transformers/pr_15912/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(uG,"href","/docs/transformers/pr_15912/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(bG,"href","/docs/transformers/pr_15912/en/model_doc/marian#transformers.TFMarianMTModel"),d(vG,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(TG,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(FG,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(CG,"href","/docs/transformers/pr_15912/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bo,"class","docstring"),d(Tr,"class","docstring"),d(QF,"id","transformers.TFAutoModelForSequenceClassification"),d(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QF,"href","#transformers.TFAutoModelForSequenceClassification"),d(vc,"class","relative group"),d(ht,"class","docstring"),d(MG,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(EG,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(yG,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(wG,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(AG,"href","/docs/transformers/pr_15912/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(LG,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(BG,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(xG,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(kG,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(RG,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(SG,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(PG,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d($G,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(IG,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(DG,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(jG,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(NG,"href","/docs/transformers/pr_15912/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(qG,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(GG,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(OG,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(XG,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(VG,"href","/docs/transformers/pr_15912/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(zG,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(WG,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(QG,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(Fr,"class","docstring"),d(v9,"id","transformers.TFAutoModelForMultipleChoice"),d(v9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v9,"href","#transformers.TFAutoModelForMultipleChoice"),d(Cc,"class","relative group"),d(pt,"class","docstring"),d(HG,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(UG,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(JG,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(YG,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(KG,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(ZG,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(eO,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(oO,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(rO,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(tO,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(aO,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(nO,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(sO,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(lO,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(iO,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(dO,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(cO,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Cr,"class","docstring"),d(D9,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(D9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(yc,"class","relative group"),d(_t,"class","docstring"),d(fO,"href","/docs/transformers/pr_15912/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Fo,"class","docstring"),d(Mr,"class","docstring"),d(N9,"id","transformers.TFAutoModelForTokenClassification"),d(N9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N9,"href","#transformers.TFAutoModelForTokenClassification"),d(Lc,"class","relative group"),d(ut,"class","docstring"),d(mO,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(gO,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(hO,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(pO,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(_O,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(uO,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(bO,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(vO,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(TO,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(FO,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(CO,"href","/docs/transformers/pr_15912/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(MO,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(EO,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(yO,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(wO,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(AO,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(LO,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(BO,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(xO,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(kO,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring"),d(Er,"class","docstring"),d(sC,"id","transformers.TFAutoModelForQuestionAnswering"),d(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sC,"href","#transformers.TFAutoModelForQuestionAnswering"),d(kc,"class","relative group"),d(bt,"class","docstring"),d(RO,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(SO,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(PO,"href","/docs/transformers/pr_15912/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d($O,"href","/docs/transformers/pr_15912/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(IO,"href","/docs/transformers/pr_15912/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(DO,"href","/docs/transformers/pr_15912/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(jO,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(NO,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(qO,"href","/docs/transformers/pr_15912/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(GO,"href","/docs/transformers/pr_15912/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(OO,"href","/docs/transformers/pr_15912/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(XO,"href","/docs/transformers/pr_15912/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(VO,"href","/docs/transformers/pr_15912/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(zO,"href","/docs/transformers/pr_15912/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(WO,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(QO,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(HO,"href","/docs/transformers/pr_15912/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(UO,"href","/docs/transformers/pr_15912/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(JO,"href","/docs/transformers/pr_15912/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(wC,"id","transformers.TFAutoModelForVision2Seq"),d(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wC,"href","#transformers.TFAutoModelForVision2Seq"),d(Pc,"class","relative group"),d(vt,"class","docstring"),d(YO,"href","/docs/transformers/pr_15912/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Eo,"class","docstring"),d(wr,"class","docstring"),d(LC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Dc,"class","relative group"),d(Tt,"class","docstring"),d(KO,"href","/docs/transformers/pr_15912/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring"),d(Ar,"class","docstring"),d(xC,"id","transformers.FlaxAutoModel"),d(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xC,"href","#transformers.FlaxAutoModel"),d(qc,"class","relative group"),d(Ft,"class","docstring"),d(ZO,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertModel"),d(eX,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartModel"),d(oX,"href","/docs/transformers/pr_15912/en/model_doc/beit#transformers.FlaxBeitModel"),d(rX,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertModel"),d(tX,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(aX,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(nX,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(sX,"href","/docs/transformers/pr_15912/en/model_doc/clip#transformers.FlaxCLIPModel"),d(lX,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(iX,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraModel"),d(dX,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(cX,"href","/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(fX,"href","/docs/transformers/pr_15912/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(mX,"href","/docs/transformers/pr_15912/en/model_doc/marian#transformers.FlaxMarianModel"),d(gX,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartModel"),d(hX,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.FlaxMT5Model"),d(pX,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(_X,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(uX,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(bX,"href","/docs/transformers/pr_15912/en/model_doc/t5#transformers.FlaxT5Model"),d(vX,"href","/docs/transformers/pr_15912/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(TX,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.FlaxViTModel"),d(FX,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(CX,"href","/docs/transformers/pr_15912/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(wo,"class","docstring"),d(Lr,"class","docstring"),d(o4,"id","transformers.FlaxAutoModelForCausalLM"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.FlaxAutoModelForCausalLM"),d(Xc,"class","relative group"),d(Ct,"class","docstring"),d(MX,"href","/docs/transformers/pr_15912/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(EX,"href","/docs/transformers/pr_15912/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(yX,"href","/docs/transformers/pr_15912/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(wX,"href","/docs/transformers/pr_15912/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Ao,"class","docstring"),d(Br,"class","docstring"),d(s4,"id","transformers.FlaxAutoModelForPreTraining"),d(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s4,"href","#transformers.FlaxAutoModelForPreTraining"),d(Wc,"class","relative group"),d(Mt,"class","docstring"),d(AX,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(LX,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(xX,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(kX,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(RX,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(PX,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d($X,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(IX,"href","/docs/transformers/pr_15912/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(DX,"href","/docs/transformers/pr_15912/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Lo,"class","docstring"),d(xr,"class","docstring"),d(b4,"id","transformers.FlaxAutoModelForMaskedLM"),d(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(Uc,"class","relative group"),d(Et,"class","docstring"),d(jX,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(NX,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(qX,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(GX,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(OX,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(XX,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(VX,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(zX,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(WX,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Bo,"class","docstring"),d(kr,"class","docstring"),d(L4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(Kc,"class","relative group"),d(yt,"class","docstring"),d(QX,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(HX,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(UX,"href","/docs/transformers/pr_15912/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(JX,"href","/docs/transformers/pr_15912/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(YX,"href","/docs/transformers/pr_15912/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(KX,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(ZX,"href","/docs/transformers/pr_15912/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(eV,"href","/docs/transformers/pr_15912/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(oV,"href","/docs/transformers/pr_15912/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(xo,"class","docstring"),d(Rr,"class","docstring"),d(j4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(of,"class","relative group"),d(wt,"class","docstring"),d(rV,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(tV,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(aV,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(nV,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(sV,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(lV,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(iV,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(dV,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(cV,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ko,"class","docstring"),d(Sr,"class","docstring"),d(H4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(af,"class","relative group"),d(At,"class","docstring"),d(fV,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(mV,"href","/docs/transformers/pr_15912/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(gV,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(hV,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(pV,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(_V,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(uV,"href","/docs/transformers/pr_15912/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(bV,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(vV,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Ro,"class","docstring"),d(Pr,"class","docstring"),d(aM,"id","transformers.FlaxAutoModelForTokenClassification"),d(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(lf,"class","relative group"),d(Lt,"class","docstring"),d(TV,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(FV,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(CV,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(MV,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(EV,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(yV,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(wV,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(So,"class","docstring"),d($r,"class","docstring"),d(mM,"id","transformers.FlaxAutoModelForMultipleChoice"),d(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mM,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(ff,"class","relative group"),d(Bt,"class","docstring"),d(AV,"href","/docs/transformers/pr_15912/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(LV,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(BV,"href","/docs/transformers/pr_15912/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(xV,"href","/docs/transformers/pr_15912/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(kV,"href","/docs/transformers/pr_15912/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(RV,"href","/docs/transformers/pr_15912/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(SV,"href","/docs/transformers/pr_15912/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Po,"class","docstring"),d(Ir,"class","docstring"),d(TM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(hf,"class","relative group"),d(xt,"class","docstring"),d(PV,"href","/docs/transformers/pr_15912/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(CM,"id","transformers.FlaxAutoModelForImageClassification"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.FlaxAutoModelForImageClassification"),d(uf,"class","relative group"),d(kt,"class","docstring"),d($V,"href","/docs/transformers/pr_15912/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(IV,"href","/docs/transformers/pr_15912/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Io,"class","docstring"),d(jr,"class","docstring"),d(yM,"id","transformers.FlaxAutoModelForVision2Seq"),d(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yM,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Tf,"class","relative group"),d(Rt,"class","docstring"),d(DV,"href","/docs/transformers/pr_15912/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Nr,"class","docstring")},m(c,u){e(document.head,J),b(c,xe,u),b(c,de,u),e(de,me),e(me,no),g(ce,no,null),e(de,be),e(de,Go),e(Go,Li),b(c,Ef,u),b(c,sa,u),e(sa,Bi),e(sa,xi),e(xi,wE),e(sa,yf),b(c,we,u),b(c,io,u),e(io,ki),e(io,In),e(In,AE),e(io,Dn),e(io,jn),e(jn,LE),e(io,Ri),e(io,Nn),e(Nn,BE),e(io,Si),b(c,wf,u),g($a,c,u),b(c,co,u),b(c,ge,u),e(ge,f8),e(ge,Pi),e(Pi,m8),e(ge,g8),b(c,Oo,u),b(c,Ia,u),e(Ia,h8),e(Ia,Af),e(Af,p8),e(Ia,YRe),b(c,G7e,u),b(c,$i,u),e($i,Lf),e(Lf,LW),g(xE,LW,null),e($i,KRe),e($i,BW),e(BW,ZRe),b(c,O7e,u),b(c,qn,u),e(qn,eSe),e(qn,xW),e(xW,oSe),e(qn,rSe),e(qn,kW),e(kW,tSe),e(qn,aSe),b(c,X7e,u),g(kE,c,u),b(c,V7e,u),b(c,_8,u),e(_8,nSe),b(c,z7e,u),g(Bf,c,u),b(c,W7e,u),b(c,Ii,u),e(Ii,xf),e(xf,RW),g(RE,RW,null),e(Ii,sSe),e(Ii,SW),e(SW,lSe),b(c,Q7e,u),b(c,Xo,u),g(SE,Xo,null),e(Xo,iSe),e(Xo,PE),e(PE,dSe),e(PE,u8),e(u8,cSe),e(PE,fSe),e(Xo,mSe),e(Xo,$E),e($E,gSe),e($E,PW),e(PW,hSe),e($E,pSe),e(Xo,_Se),e(Xo,fo),g(IE,fo,null),e(fo,uSe),e(fo,$W),e($W,bSe),e(fo,vSe),e(fo,Di),e(Di,TSe),e(Di,IW),e(IW,FSe),e(Di,CSe),e(Di,DW),e(DW,MSe),e(Di,ESe),e(fo,ySe),e(fo,v),e(v,kf),e(kf,jW),e(jW,wSe),e(kf,ASe),e(kf,b8),e(b8,LSe),e(kf,BSe),e(v,xSe),e(v,Rf),e(Rf,NW),e(NW,kSe),e(Rf,RSe),e(Rf,v8),e(v8,SSe),e(Rf,PSe),e(v,$Se),e(v,Sf),e(Sf,qW),e(qW,ISe),e(Sf,DSe),e(Sf,T8),e(T8,jSe),e(Sf,NSe),e(v,qSe),e(v,Pf),e(Pf,GW),e(GW,GSe),e(Pf,OSe),e(Pf,F8),e(F8,XSe),e(Pf,VSe),e(v,zSe),e(v,$f),e($f,OW),e(OW,WSe),e($f,QSe),e($f,C8),e(C8,HSe),e($f,USe),e(v,JSe),e(v,If),e(If,XW),e(XW,YSe),e(If,KSe),e(If,M8),e(M8,ZSe),e(If,ePe),e(v,oPe),e(v,Df),e(Df,VW),e(VW,rPe),e(Df,tPe),e(Df,E8),e(E8,aPe),e(Df,nPe),e(v,sPe),e(v,jf),e(jf,zW),e(zW,lPe),e(jf,iPe),e(jf,y8),e(y8,dPe),e(jf,cPe),e(v,fPe),e(v,Nf),e(Nf,WW),e(WW,mPe),e(Nf,gPe),e(Nf,w8),e(w8,hPe),e(Nf,pPe),e(v,_Pe),e(v,qf),e(qf,QW),e(QW,uPe),e(qf,bPe),e(qf,A8),e(A8,vPe),e(qf,TPe),e(v,FPe),e(v,Gf),e(Gf,HW),e(HW,CPe),e(Gf,MPe),e(Gf,L8),e(L8,EPe),e(Gf,yPe),e(v,wPe),e(v,Of),e(Of,UW),e(UW,APe),e(Of,LPe),e(Of,B8),e(B8,BPe),e(Of,xPe),e(v,kPe),e(v,Xf),e(Xf,JW),e(JW,RPe),e(Xf,SPe),e(Xf,x8),e(x8,PPe),e(Xf,$Pe),e(v,IPe),e(v,Vf),e(Vf,YW),e(YW,DPe),e(Vf,jPe),e(Vf,k8),e(k8,NPe),e(Vf,qPe),e(v,GPe),e(v,zf),e(zf,KW),e(KW,OPe),e(zf,XPe),e(zf,R8),e(R8,VPe),e(zf,zPe),e(v,WPe),e(v,Wf),e(Wf,ZW),e(ZW,QPe),e(Wf,HPe),e(Wf,S8),e(S8,UPe),e(Wf,JPe),e(v,YPe),e(v,Qf),e(Qf,eQ),e(eQ,KPe),e(Qf,ZPe),e(Qf,P8),e(P8,e$e),e(Qf,o$e),e(v,r$e),e(v,Hf),e(Hf,oQ),e(oQ,t$e),e(Hf,a$e),e(Hf,$8),e($8,n$e),e(Hf,s$e),e(v,l$e),e(v,Uf),e(Uf,rQ),e(rQ,i$e),e(Uf,d$e),e(Uf,I8),e(I8,c$e),e(Uf,f$e),e(v,m$e),e(v,Jf),e(Jf,tQ),e(tQ,g$e),e(Jf,h$e),e(Jf,D8),e(D8,p$e),e(Jf,_$e),e(v,u$e),e(v,Yf),e(Yf,aQ),e(aQ,b$e),e(Yf,v$e),e(Yf,j8),e(j8,T$e),e(Yf,F$e),e(v,C$e),e(v,Kf),e(Kf,nQ),e(nQ,M$e),e(Kf,E$e),e(Kf,N8),e(N8,y$e),e(Kf,w$e),e(v,A$e),e(v,Zf),e(Zf,sQ),e(sQ,L$e),e(Zf,B$e),e(Zf,q8),e(q8,x$e),e(Zf,k$e),e(v,R$e),e(v,em),e(em,lQ),e(lQ,S$e),e(em,P$e),e(em,G8),e(G8,$$e),e(em,I$e),e(v,D$e),e(v,om),e(om,iQ),e(iQ,j$e),e(om,N$e),e(om,O8),e(O8,q$e),e(om,G$e),e(v,O$e),e(v,rm),e(rm,dQ),e(dQ,X$e),e(rm,V$e),e(rm,X8),e(X8,z$e),e(rm,W$e),e(v,Q$e),e(v,tm),e(tm,cQ),e(cQ,H$e),e(tm,U$e),e(tm,V8),e(V8,J$e),e(tm,Y$e),e(v,K$e),e(v,am),e(am,fQ),e(fQ,Z$e),e(am,eIe),e(am,z8),e(z8,oIe),e(am,rIe),e(v,tIe),e(v,nm),e(nm,mQ),e(mQ,aIe),e(nm,nIe),e(nm,W8),e(W8,sIe),e(nm,lIe),e(v,iIe),e(v,sm),e(sm,gQ),e(gQ,dIe),e(sm,cIe),e(sm,Q8),e(Q8,fIe),e(sm,mIe),e(v,gIe),e(v,lm),e(lm,hQ),e(hQ,hIe),e(lm,pIe),e(lm,H8),e(H8,_Ie),e(lm,uIe),e(v,bIe),e(v,im),e(im,pQ),e(pQ,vIe),e(im,TIe),e(im,U8),e(U8,FIe),e(im,CIe),e(v,MIe),e(v,dm),e(dm,_Q),e(_Q,EIe),e(dm,yIe),e(dm,J8),e(J8,wIe),e(dm,AIe),e(v,LIe),e(v,cm),e(cm,uQ),e(uQ,BIe),e(cm,xIe),e(cm,Y8),e(Y8,kIe),e(cm,RIe),e(v,SIe),e(v,fm),e(fm,bQ),e(bQ,PIe),e(fm,$Ie),e(fm,K8),e(K8,IIe),e(fm,DIe),e(v,jIe),e(v,mm),e(mm,vQ),e(vQ,NIe),e(mm,qIe),e(mm,Z8),e(Z8,GIe),e(mm,OIe),e(v,XIe),e(v,gm),e(gm,TQ),e(TQ,VIe),e(gm,zIe),e(gm,e7),e(e7,WIe),e(gm,QIe),e(v,HIe),e(v,hm),e(hm,FQ),e(FQ,UIe),e(hm,JIe),e(hm,o7),e(o7,YIe),e(hm,KIe),e(v,ZIe),e(v,pm),e(pm,CQ),e(CQ,eDe),e(pm,oDe),e(pm,r7),e(r7,rDe),e(pm,tDe),e(v,aDe),e(v,_m),e(_m,MQ),e(MQ,nDe),e(_m,sDe),e(_m,t7),e(t7,lDe),e(_m,iDe),e(v,dDe),e(v,um),e(um,EQ),e(EQ,cDe),e(um,fDe),e(um,a7),e(a7,mDe),e(um,gDe),e(v,hDe),e(v,bm),e(bm,yQ),e(yQ,pDe),e(bm,_De),e(bm,n7),e(n7,uDe),e(bm,bDe),e(v,vDe),e(v,vm),e(vm,wQ),e(wQ,TDe),e(vm,FDe),e(vm,s7),e(s7,CDe),e(vm,MDe),e(v,EDe),e(v,Tm),e(Tm,AQ),e(AQ,yDe),e(Tm,wDe),e(Tm,l7),e(l7,ADe),e(Tm,LDe),e(v,BDe),e(v,Fm),e(Fm,LQ),e(LQ,xDe),e(Fm,kDe),e(Fm,i7),e(i7,RDe),e(Fm,SDe),e(v,PDe),e(v,Cm),e(Cm,BQ),e(BQ,$De),e(Cm,IDe),e(Cm,d7),e(d7,DDe),e(Cm,jDe),e(v,NDe),e(v,Mm),e(Mm,xQ),e(xQ,qDe),e(Mm,GDe),e(Mm,c7),e(c7,ODe),e(Mm,XDe),e(v,VDe),e(v,Em),e(Em,kQ),e(kQ,zDe),e(Em,WDe),e(Em,f7),e(f7,QDe),e(Em,HDe),e(v,UDe),e(v,ym),e(ym,RQ),e(RQ,JDe),e(ym,YDe),e(ym,m7),e(m7,KDe),e(ym,ZDe),e(v,eje),e(v,wm),e(wm,SQ),e(SQ,oje),e(wm,rje),e(wm,g7),e(g7,tje),e(wm,aje),e(v,nje),e(v,Am),e(Am,PQ),e(PQ,sje),e(Am,lje),e(Am,h7),e(h7,ije),e(Am,dje),e(v,cje),e(v,Lm),e(Lm,$Q),e($Q,fje),e(Lm,mje),e(Lm,p7),e(p7,gje),e(Lm,hje),e(v,pje),e(v,Bm),e(Bm,IQ),e(IQ,_je),e(Bm,uje),e(Bm,_7),e(_7,bje),e(Bm,vje),e(v,Tje),e(v,xm),e(xm,DQ),e(DQ,Fje),e(xm,Cje),e(xm,u7),e(u7,Mje),e(xm,Eje),e(v,yje),e(v,km),e(km,jQ),e(jQ,wje),e(km,Aje),e(km,b7),e(b7,Lje),e(km,Bje),e(v,xje),e(v,Rm),e(Rm,NQ),e(NQ,kje),e(Rm,Rje),e(Rm,v7),e(v7,Sje),e(Rm,Pje),e(v,$je),e(v,Sm),e(Sm,qQ),e(qQ,Ije),e(Sm,Dje),e(Sm,T7),e(T7,jje),e(Sm,Nje),e(v,qje),e(v,Pm),e(Pm,GQ),e(GQ,Gje),e(Pm,Oje),e(Pm,F7),e(F7,Xje),e(Pm,Vje),e(v,zje),e(v,$m),e($m,OQ),e(OQ,Wje),e($m,Qje),e($m,C7),e(C7,Hje),e($m,Uje),e(v,Jje),e(v,Im),e(Im,XQ),e(XQ,Yje),e(Im,Kje),e(Im,M7),e(M7,Zje),e(Im,eNe),e(v,oNe),e(v,Dm),e(Dm,VQ),e(VQ,rNe),e(Dm,tNe),e(Dm,E7),e(E7,aNe),e(Dm,nNe),e(v,sNe),e(v,jm),e(jm,zQ),e(zQ,lNe),e(jm,iNe),e(jm,y7),e(y7,dNe),e(jm,cNe),e(v,fNe),e(v,Nm),e(Nm,WQ),e(WQ,mNe),e(Nm,gNe),e(Nm,w7),e(w7,hNe),e(Nm,pNe),e(v,_Ne),e(v,qm),e(qm,QQ),e(QQ,uNe),e(qm,bNe),e(qm,A7),e(A7,vNe),e(qm,TNe),e(v,FNe),e(v,Gm),e(Gm,HQ),e(HQ,CNe),e(Gm,MNe),e(Gm,L7),e(L7,ENe),e(Gm,yNe),e(v,wNe),e(v,Om),e(Om,UQ),e(UQ,ANe),e(Om,LNe),e(Om,B7),e(B7,BNe),e(Om,xNe),e(v,kNe),e(v,Xm),e(Xm,JQ),e(JQ,RNe),e(Xm,SNe),e(Xm,x7),e(x7,PNe),e(Xm,$Ne),e(v,INe),e(v,Vm),e(Vm,YQ),e(YQ,DNe),e(Vm,jNe),e(Vm,k7),e(k7,NNe),e(Vm,qNe),e(v,GNe),e(v,zm),e(zm,KQ),e(KQ,ONe),e(zm,XNe),e(zm,R7),e(R7,VNe),e(zm,zNe),e(v,WNe),e(v,Wm),e(Wm,ZQ),e(ZQ,QNe),e(Wm,HNe),e(Wm,S7),e(S7,UNe),e(Wm,JNe),e(v,YNe),e(v,Qm),e(Qm,eH),e(eH,KNe),e(Qm,ZNe),e(Qm,P7),e(P7,eqe),e(Qm,oqe),e(v,rqe),e(v,Hm),e(Hm,oH),e(oH,tqe),e(Hm,aqe),e(Hm,$7),e($7,nqe),e(Hm,sqe),e(v,lqe),e(v,Um),e(Um,rH),e(rH,iqe),e(Um,dqe),e(Um,I7),e(I7,cqe),e(Um,fqe),e(v,mqe),e(v,Jm),e(Jm,tH),e(tH,gqe),e(Jm,hqe),e(Jm,D7),e(D7,pqe),e(Jm,_qe),e(v,uqe),e(v,Ym),e(Ym,aH),e(aH,bqe),e(Ym,vqe),e(Ym,j7),e(j7,Tqe),e(Ym,Fqe),e(v,Cqe),e(v,Km),e(Km,nH),e(nH,Mqe),e(Km,Eqe),e(Km,N7),e(N7,yqe),e(Km,wqe),e(v,Aqe),e(v,Zm),e(Zm,sH),e(sH,Lqe),e(Zm,Bqe),e(Zm,q7),e(q7,xqe),e(Zm,kqe),e(v,Rqe),e(v,eg),e(eg,lH),e(lH,Sqe),e(eg,Pqe),e(eg,G7),e(G7,$qe),e(eg,Iqe),e(v,Dqe),e(v,og),e(og,iH),e(iH,jqe),e(og,Nqe),e(og,O7),e(O7,qqe),e(og,Gqe),e(v,Oqe),e(v,rg),e(rg,dH),e(dH,Xqe),e(rg,Vqe),e(rg,X7),e(X7,zqe),e(rg,Wqe),e(v,Qqe),e(v,tg),e(tg,cH),e(cH,Hqe),e(tg,Uqe),e(tg,V7),e(V7,Jqe),e(tg,Yqe),e(v,Kqe),e(v,ag),e(ag,fH),e(fH,Zqe),e(ag,eGe),e(ag,z7),e(z7,oGe),e(ag,rGe),e(v,tGe),e(v,ng),e(ng,mH),e(mH,aGe),e(ng,nGe),e(ng,W7),e(W7,sGe),e(ng,lGe),e(v,iGe),e(v,sg),e(sg,gH),e(gH,dGe),e(sg,cGe),e(sg,Q7),e(Q7,fGe),e(sg,mGe),e(v,gGe),e(v,lg),e(lg,hH),e(hH,hGe),e(lg,pGe),e(lg,H7),e(H7,_Ge),e(lg,uGe),e(v,bGe),e(v,ig),e(ig,pH),e(pH,vGe),e(ig,TGe),e(ig,U7),e(U7,FGe),e(ig,CGe),e(v,MGe),e(v,dg),e(dg,_H),e(_H,EGe),e(dg,yGe),e(dg,J7),e(J7,wGe),e(dg,AGe),e(v,LGe),e(v,cg),e(cg,uH),e(uH,BGe),e(cg,xGe),e(cg,Y7),e(Y7,kGe),e(cg,RGe),e(v,SGe),e(v,fg),e(fg,bH),e(bH,PGe),e(fg,$Ge),e(fg,K7),e(K7,IGe),e(fg,DGe),e(v,jGe),e(v,mg),e(mg,vH),e(vH,NGe),e(mg,qGe),e(mg,Z7),e(Z7,GGe),e(mg,OGe),e(v,XGe),e(v,gg),e(gg,TH),e(TH,VGe),e(gg,zGe),e(gg,eB),e(eB,WGe),e(gg,QGe),e(v,HGe),e(v,hg),e(hg,FH),e(FH,UGe),e(hg,JGe),e(hg,oB),e(oB,YGe),e(hg,KGe),e(v,ZGe),e(v,pg),e(pg,CH),e(CH,eOe),e(pg,oOe),e(pg,rB),e(rB,rOe),e(pg,tOe),e(v,aOe),e(v,_g),e(_g,MH),e(MH,nOe),e(_g,sOe),e(_g,tB),e(tB,lOe),e(_g,iOe),e(v,dOe),e(v,ug),e(ug,EH),e(EH,cOe),e(ug,fOe),e(ug,aB),e(aB,mOe),e(ug,gOe),e(fo,hOe),e(fo,yH),e(yH,pOe),e(fo,_Oe),g(DE,fo,null),e(Xo,uOe),e(Xo,bg),g(jE,bg,null),e(bg,bOe),e(bg,wH),e(wH,vOe),b(c,H7e,u),b(c,ji,u),e(ji,vg),e(vg,AH),g(NE,AH,null),e(ji,TOe),e(ji,LH),e(LH,FOe),b(c,U7e,u),b(c,Vo,u),g(qE,Vo,null),e(Vo,COe),e(Vo,GE),e(GE,MOe),e(GE,nB),e(nB,EOe),e(GE,yOe),e(Vo,wOe),e(Vo,OE),e(OE,AOe),e(OE,BH),e(BH,LOe),e(OE,BOe),e(Vo,xOe),e(Vo,mo),g(XE,mo,null),e(mo,kOe),e(mo,xH),e(xH,ROe),e(mo,SOe),e(mo,Da),e(Da,POe),e(Da,kH),e(kH,$Oe),e(Da,IOe),e(Da,RH),e(RH,DOe),e(Da,jOe),e(Da,SH),e(SH,NOe),e(Da,qOe),e(mo,GOe),e(mo,M),e(M,Gn),e(Gn,PH),e(PH,OOe),e(Gn,XOe),e(Gn,sB),e(sB,VOe),e(Gn,zOe),e(Gn,lB),e(lB,WOe),e(Gn,QOe),e(M,HOe),e(M,On),e(On,$H),e($H,UOe),e(On,JOe),e(On,iB),e(iB,YOe),e(On,KOe),e(On,dB),e(dB,ZOe),e(On,eXe),e(M,oXe),e(M,Xn),e(Xn,IH),e(IH,rXe),e(Xn,tXe),e(Xn,cB),e(cB,aXe),e(Xn,nXe),e(Xn,fB),e(fB,sXe),e(Xn,lXe),e(M,iXe),e(M,Tg),e(Tg,DH),e(DH,dXe),e(Tg,cXe),e(Tg,mB),e(mB,fXe),e(Tg,mXe),e(M,gXe),e(M,Vn),e(Vn,jH),e(jH,hXe),e(Vn,pXe),e(Vn,gB),e(gB,_Xe),e(Vn,uXe),e(Vn,hB),e(hB,bXe),e(Vn,vXe),e(M,TXe),e(M,Fg),e(Fg,NH),e(NH,FXe),e(Fg,CXe),e(Fg,pB),e(pB,MXe),e(Fg,EXe),e(M,yXe),e(M,Cg),e(Cg,qH),e(qH,wXe),e(Cg,AXe),e(Cg,_B),e(_B,LXe),e(Cg,BXe),e(M,xXe),e(M,Mg),e(Mg,GH),e(GH,kXe),e(Mg,RXe),e(Mg,uB),e(uB,SXe),e(Mg,PXe),e(M,$Xe),e(M,zn),e(zn,OH),e(OH,IXe),e(zn,DXe),e(zn,bB),e(bB,jXe),e(zn,NXe),e(zn,vB),e(vB,qXe),e(zn,GXe),e(M,OXe),e(M,Wn),e(Wn,XH),e(XH,XXe),e(Wn,VXe),e(Wn,TB),e(TB,zXe),e(Wn,WXe),e(Wn,FB),e(FB,QXe),e(Wn,HXe),e(M,UXe),e(M,Qn),e(Qn,VH),e(VH,JXe),e(Qn,YXe),e(Qn,CB),e(CB,KXe),e(Qn,ZXe),e(Qn,MB),e(MB,eVe),e(Qn,oVe),e(M,rVe),e(M,Eg),e(Eg,zH),e(zH,tVe),e(Eg,aVe),e(Eg,EB),e(EB,nVe),e(Eg,sVe),e(M,lVe),e(M,yg),e(yg,WH),e(WH,iVe),e(yg,dVe),e(yg,yB),e(yB,cVe),e(yg,fVe),e(M,mVe),e(M,Hn),e(Hn,QH),e(QH,gVe),e(Hn,hVe),e(Hn,wB),e(wB,pVe),e(Hn,_Ve),e(Hn,AB),e(AB,uVe),e(Hn,bVe),e(M,vVe),e(M,wg),e(wg,HH),e(HH,TVe),e(wg,FVe),e(wg,LB),e(LB,CVe),e(wg,MVe),e(M,EVe),e(M,Un),e(Un,UH),e(UH,yVe),e(Un,wVe),e(Un,BB),e(BB,AVe),e(Un,LVe),e(Un,xB),e(xB,BVe),e(Un,xVe),e(M,kVe),e(M,Jn),e(Jn,JH),e(JH,RVe),e(Jn,SVe),e(Jn,kB),e(kB,PVe),e(Jn,$Ve),e(Jn,RB),e(RB,IVe),e(Jn,DVe),e(M,jVe),e(M,Yn),e(Yn,YH),e(YH,NVe),e(Yn,qVe),e(Yn,SB),e(SB,GVe),e(Yn,OVe),e(Yn,KH),e(KH,XVe),e(Yn,VVe),e(M,zVe),e(M,Ag),e(Ag,ZH),e(ZH,WVe),e(Ag,QVe),e(Ag,PB),e(PB,HVe),e(Ag,UVe),e(M,JVe),e(M,Kn),e(Kn,eU),e(eU,YVe),e(Kn,KVe),e(Kn,$B),e($B,ZVe),e(Kn,eze),e(Kn,IB),e(IB,oze),e(Kn,rze),e(M,tze),e(M,Lg),e(Lg,oU),e(oU,aze),e(Lg,nze),e(Lg,DB),e(DB,sze),e(Lg,lze),e(M,ize),e(M,Zn),e(Zn,rU),e(rU,dze),e(Zn,cze),e(Zn,jB),e(jB,fze),e(Zn,mze),e(Zn,NB),e(NB,gze),e(Zn,hze),e(M,pze),e(M,es),e(es,tU),e(tU,_ze),e(es,uze),e(es,qB),e(qB,bze),e(es,vze),e(es,GB),e(GB,Tze),e(es,Fze),e(M,Cze),e(M,os),e(os,aU),e(aU,Mze),e(os,Eze),e(os,OB),e(OB,yze),e(os,wze),e(os,XB),e(XB,Aze),e(os,Lze),e(M,Bze),e(M,Bg),e(Bg,nU),e(nU,xze),e(Bg,kze),e(Bg,VB),e(VB,Rze),e(Bg,Sze),e(M,Pze),e(M,rs),e(rs,sU),e(sU,$ze),e(rs,Ize),e(rs,zB),e(zB,Dze),e(rs,jze),e(rs,WB),e(WB,Nze),e(rs,qze),e(M,Gze),e(M,xg),e(xg,lU),e(lU,Oze),e(xg,Xze),e(xg,QB),e(QB,Vze),e(xg,zze),e(M,Wze),e(M,ts),e(ts,iU),e(iU,Qze),e(ts,Hze),e(ts,HB),e(HB,Uze),e(ts,Jze),e(ts,UB),e(UB,Yze),e(ts,Kze),e(M,Zze),e(M,as),e(as,dU),e(dU,eWe),e(as,oWe),e(as,JB),e(JB,rWe),e(as,tWe),e(as,YB),e(YB,aWe),e(as,nWe),e(M,sWe),e(M,ns),e(ns,cU),e(cU,lWe),e(ns,iWe),e(ns,KB),e(KB,dWe),e(ns,cWe),e(ns,ZB),e(ZB,fWe),e(ns,mWe),e(M,gWe),e(M,ss),e(ss,fU),e(fU,hWe),e(ss,pWe),e(ss,ex),e(ex,_We),e(ss,uWe),e(ss,ox),e(ox,bWe),e(ss,vWe),e(M,TWe),e(M,kg),e(kg,mU),e(mU,FWe),e(kg,CWe),e(kg,rx),e(rx,MWe),e(kg,EWe),e(M,yWe),e(M,ls),e(ls,gU),e(gU,wWe),e(ls,AWe),e(ls,tx),e(tx,LWe),e(ls,BWe),e(ls,ax),e(ax,xWe),e(ls,kWe),e(M,RWe),e(M,is),e(is,hU),e(hU,SWe),e(is,PWe),e(is,nx),e(nx,$We),e(is,IWe),e(is,sx),e(sx,DWe),e(is,jWe),e(M,NWe),e(M,ds),e(ds,pU),e(pU,qWe),e(ds,GWe),e(ds,lx),e(lx,OWe),e(ds,XWe),e(ds,ix),e(ix,VWe),e(ds,zWe),e(M,WWe),e(M,cs),e(cs,_U),e(_U,QWe),e(cs,HWe),e(cs,dx),e(dx,UWe),e(cs,JWe),e(cs,cx),e(cx,YWe),e(cs,KWe),e(M,ZWe),e(M,fs),e(fs,uU),e(uU,eQe),e(fs,oQe),e(fs,fx),e(fx,rQe),e(fs,tQe),e(fs,mx),e(mx,aQe),e(fs,nQe),e(M,sQe),e(M,ms),e(ms,bU),e(bU,lQe),e(ms,iQe),e(ms,gx),e(gx,dQe),e(ms,cQe),e(ms,hx),e(hx,fQe),e(ms,mQe),e(M,gQe),e(M,Rg),e(Rg,vU),e(vU,hQe),e(Rg,pQe),e(Rg,px),e(px,_Qe),e(Rg,uQe),e(M,bQe),e(M,gs),e(gs,TU),e(TU,vQe),e(gs,TQe),e(gs,_x),e(_x,FQe),e(gs,CQe),e(gs,ux),e(ux,MQe),e(gs,EQe),e(M,yQe),e(M,Sg),e(Sg,FU),e(FU,wQe),e(Sg,AQe),e(Sg,bx),e(bx,LQe),e(Sg,BQe),e(M,xQe),e(M,Pg),e(Pg,CU),e(CU,kQe),e(Pg,RQe),e(Pg,vx),e(vx,SQe),e(Pg,PQe),e(M,$Qe),e(M,hs),e(hs,MU),e(MU,IQe),e(hs,DQe),e(hs,Tx),e(Tx,jQe),e(hs,NQe),e(hs,Fx),e(Fx,qQe),e(hs,GQe),e(M,OQe),e(M,ps),e(ps,EU),e(EU,XQe),e(ps,VQe),e(ps,Cx),e(Cx,zQe),e(ps,WQe),e(ps,Mx),e(Mx,QQe),e(ps,HQe),e(M,UQe),e(M,$g),e($g,yU),e(yU,JQe),e($g,YQe),e($g,Ex),e(Ex,KQe),e($g,ZQe),e(M,eHe),e(M,_s),e(_s,wU),e(wU,oHe),e(_s,rHe),e(_s,yx),e(yx,tHe),e(_s,aHe),e(_s,wx),e(wx,nHe),e(_s,sHe),e(M,lHe),e(M,us),e(us,AU),e(AU,iHe),e(us,dHe),e(us,Ax),e(Ax,cHe),e(us,fHe),e(us,Lx),e(Lx,mHe),e(us,gHe),e(M,hHe),e(M,bs),e(bs,LU),e(LU,pHe),e(bs,_He),e(bs,Bx),e(Bx,uHe),e(bs,bHe),e(bs,xx),e(xx,vHe),e(bs,THe),e(M,FHe),e(M,vs),e(vs,BU),e(BU,CHe),e(vs,MHe),e(vs,kx),e(kx,EHe),e(vs,yHe),e(vs,Rx),e(Rx,wHe),e(vs,AHe),e(M,LHe),e(M,Ts),e(Ts,xU),e(xU,BHe),e(Ts,xHe),e(Ts,Sx),e(Sx,kHe),e(Ts,RHe),e(Ts,Px),e(Px,SHe),e(Ts,PHe),e(M,$He),e(M,Ig),e(Ig,kU),e(kU,IHe),e(Ig,DHe),e(Ig,$x),e($x,jHe),e(Ig,NHe),e(M,qHe),e(M,Dg),e(Dg,RU),e(RU,GHe),e(Dg,OHe),e(Dg,Ix),e(Ix,XHe),e(Dg,VHe),e(M,zHe),e(M,jg),e(jg,SU),e(SU,WHe),e(jg,QHe),e(jg,Dx),e(Dx,HHe),e(jg,UHe),e(M,JHe),e(M,Ng),e(Ng,PU),e(PU,YHe),e(Ng,KHe),e(Ng,jx),e(jx,ZHe),e(Ng,eUe),e(M,oUe),e(M,Fs),e(Fs,$U),e($U,rUe),e(Fs,tUe),e(Fs,Nx),e(Nx,aUe),e(Fs,nUe),e(Fs,qx),e(qx,sUe),e(Fs,lUe),e(M,iUe),e(M,qg),e(qg,IU),e(IU,dUe),e(qg,cUe),e(qg,Gx),e(Gx,fUe),e(qg,mUe),e(M,gUe),e(M,Cs),e(Cs,DU),e(DU,hUe),e(Cs,pUe),e(Cs,Ox),e(Ox,_Ue),e(Cs,uUe),e(Cs,Xx),e(Xx,bUe),e(Cs,vUe),e(M,TUe),e(M,Ms),e(Ms,jU),e(jU,FUe),e(Ms,CUe),e(Ms,Vx),e(Vx,MUe),e(Ms,EUe),e(Ms,zx),e(zx,yUe),e(Ms,wUe),e(M,AUe),e(M,Es),e(Es,NU),e(NU,LUe),e(Es,BUe),e(Es,Wx),e(Wx,xUe),e(Es,kUe),e(Es,Qx),e(Qx,RUe),e(Es,SUe),e(M,PUe),e(M,ys),e(ys,qU),e(qU,$Ue),e(ys,IUe),e(ys,Hx),e(Hx,DUe),e(ys,jUe),e(ys,Ux),e(Ux,NUe),e(ys,qUe),e(M,GUe),e(M,ws),e(ws,GU),e(GU,OUe),e(ws,XUe),e(ws,Jx),e(Jx,VUe),e(ws,zUe),e(ws,Yx),e(Yx,WUe),e(ws,QUe),e(M,HUe),e(M,Gg),e(Gg,OU),e(OU,UUe),e(Gg,JUe),e(Gg,Kx),e(Kx,YUe),e(Gg,KUe),e(M,ZUe),e(M,Og),e(Og,XU),e(XU,eJe),e(Og,oJe),e(Og,Zx),e(Zx,rJe),e(Og,tJe),e(M,aJe),e(M,As),e(As,VU),e(VU,nJe),e(As,sJe),e(As,ek),e(ek,lJe),e(As,iJe),e(As,ok),e(ok,dJe),e(As,cJe),e(M,fJe),e(M,Ls),e(Ls,zU),e(zU,mJe),e(Ls,gJe),e(Ls,rk),e(rk,hJe),e(Ls,pJe),e(Ls,tk),e(tk,_Je),e(Ls,uJe),e(M,bJe),e(M,Bs),e(Bs,WU),e(WU,vJe),e(Bs,TJe),e(Bs,ak),e(ak,FJe),e(Bs,CJe),e(Bs,nk),e(nk,MJe),e(Bs,EJe),e(M,yJe),e(M,Xg),e(Xg,QU),e(QU,wJe),e(Xg,AJe),e(Xg,sk),e(sk,LJe),e(Xg,BJe),e(M,xJe),e(M,Vg),e(Vg,HU),e(HU,kJe),e(Vg,RJe),e(Vg,lk),e(lk,SJe),e(Vg,PJe),e(M,$Je),e(M,zg),e(zg,UU),e(UU,IJe),e(zg,DJe),e(zg,ik),e(ik,jJe),e(zg,NJe),e(M,qJe),e(M,Wg),e(Wg,JU),e(JU,GJe),e(Wg,OJe),e(Wg,dk),e(dk,XJe),e(Wg,VJe),e(M,zJe),e(M,xs),e(xs,YU),e(YU,WJe),e(xs,QJe),e(xs,ck),e(ck,HJe),e(xs,UJe),e(xs,fk),e(fk,JJe),e(xs,YJe),e(M,KJe),e(M,Qg),e(Qg,KU),e(KU,ZJe),e(Qg,eYe),e(Qg,mk),e(mk,oYe),e(Qg,rYe),e(M,tYe),e(M,Hg),e(Hg,ZU),e(ZU,aYe),e(Hg,nYe),e(Hg,gk),e(gk,sYe),e(Hg,lYe),e(M,iYe),e(M,ks),e(ks,eJ),e(eJ,dYe),e(ks,cYe),e(ks,hk),e(hk,fYe),e(ks,mYe),e(ks,pk),e(pk,gYe),e(ks,hYe),e(M,pYe),e(M,Rs),e(Rs,oJ),e(oJ,_Ye),e(Rs,uYe),e(Rs,_k),e(_k,bYe),e(Rs,vYe),e(Rs,uk),e(uk,TYe),e(Rs,FYe),e(mo,CYe),e(mo,rJ),e(rJ,MYe),e(mo,EYe),g(VE,mo,null),e(Vo,yYe),e(Vo,Ug),g(zE,Ug,null),e(Ug,wYe),e(Ug,tJ),e(tJ,AYe),b(c,J7e,u),b(c,Ni,u),e(Ni,Jg),e(Jg,aJ),g(WE,aJ,null),e(Ni,LYe),e(Ni,nJ),e(nJ,BYe),b(c,Y7e,u),b(c,zo,u),g(QE,zo,null),e(zo,xYe),e(zo,HE),e(HE,kYe),e(HE,bk),e(bk,RYe),e(HE,SYe),e(zo,PYe),e(zo,UE),e(UE,$Ye),e(UE,sJ),e(sJ,IYe),e(UE,DYe),e(zo,jYe),e(zo,ke),g(JE,ke,null),e(ke,NYe),e(ke,lJ),e(lJ,qYe),e(ke,GYe),e(ke,ja),e(ja,OYe),e(ja,iJ),e(iJ,XYe),e(ja,VYe),e(ja,dJ),e(dJ,zYe),e(ja,WYe),e(ja,cJ),e(cJ,QYe),e(ja,HYe),e(ke,UYe),e(ke,ae),e(ae,Yg),e(Yg,fJ),e(fJ,JYe),e(Yg,YYe),e(Yg,vk),e(vk,KYe),e(Yg,ZYe),e(ae,eKe),e(ae,Kg),e(Kg,mJ),e(mJ,oKe),e(Kg,rKe),e(Kg,Tk),e(Tk,tKe),e(Kg,aKe),e(ae,nKe),e(ae,Zg),e(Zg,gJ),e(gJ,sKe),e(Zg,lKe),e(Zg,Fk),e(Fk,iKe),e(Zg,dKe),e(ae,cKe),e(ae,eh),e(eh,hJ),e(hJ,fKe),e(eh,mKe),e(eh,Ck),e(Ck,gKe),e(eh,hKe),e(ae,pKe),e(ae,oh),e(oh,pJ),e(pJ,_Ke),e(oh,uKe),e(oh,Mk),e(Mk,bKe),e(oh,vKe),e(ae,TKe),e(ae,rh),e(rh,_J),e(_J,FKe),e(rh,CKe),e(rh,Ek),e(Ek,MKe),e(rh,EKe),e(ae,yKe),e(ae,th),e(th,uJ),e(uJ,wKe),e(th,AKe),e(th,yk),e(yk,LKe),e(th,BKe),e(ae,xKe),e(ae,ah),e(ah,bJ),e(bJ,kKe),e(ah,RKe),e(ah,wk),e(wk,SKe),e(ah,PKe),e(ae,$Ke),e(ae,nh),e(nh,vJ),e(vJ,IKe),e(nh,DKe),e(nh,Ak),e(Ak,jKe),e(nh,NKe),e(ae,qKe),e(ae,sh),e(sh,TJ),e(TJ,GKe),e(sh,OKe),e(sh,Lk),e(Lk,XKe),e(sh,VKe),e(ae,zKe),e(ae,lh),e(lh,FJ),e(FJ,WKe),e(lh,QKe),e(lh,Bk),e(Bk,HKe),e(lh,UKe),e(ae,JKe),e(ae,ih),e(ih,CJ),e(CJ,YKe),e(ih,KKe),e(ih,xk),e(xk,ZKe),e(ih,eZe),e(ae,oZe),e(ae,dh),e(dh,MJ),e(MJ,rZe),e(dh,tZe),e(dh,kk),e(kk,aZe),e(dh,nZe),e(ae,sZe),e(ae,ch),e(ch,EJ),e(EJ,lZe),e(ch,iZe),e(ch,Rk),e(Rk,dZe),e(ch,cZe),e(ae,fZe),e(ae,fh),e(fh,yJ),e(yJ,mZe),e(fh,gZe),e(fh,Sk),e(Sk,hZe),e(fh,pZe),e(ae,_Ze),e(ae,mh),e(mh,wJ),e(wJ,uZe),e(mh,bZe),e(mh,Pk),e(Pk,vZe),e(mh,TZe),e(ke,FZe),g(gh,ke,null),e(ke,CZe),e(ke,AJ),e(AJ,MZe),e(ke,EZe),g(YE,ke,null),e(zo,yZe),e(zo,hh),g(KE,hh,null),e(hh,wZe),e(hh,LJ),e(LJ,AZe),b(c,K7e,u),b(c,qi,u),e(qi,ph),e(ph,BJ),g(ZE,BJ,null),e(qi,LZe),e(qi,xJ),e(xJ,BZe),b(c,Z7e,u),b(c,Wo,u),g(e3,Wo,null),e(Wo,xZe),e(Wo,o3),e(o3,kZe),e(o3,$k),e($k,RZe),e(o3,SZe),e(Wo,PZe),e(Wo,r3),e(r3,$Ze),e(r3,kJ),e(kJ,IZe),e(r3,DZe),e(Wo,jZe),e(Wo,Re),g(t3,Re,null),e(Re,NZe),e(Re,RJ),e(RJ,qZe),e(Re,GZe),e(Re,Gi),e(Gi,OZe),e(Gi,SJ),e(SJ,XZe),e(Gi,VZe),e(Gi,PJ),e(PJ,zZe),e(Gi,WZe),e(Re,QZe),e(Re,Ae),e(Ae,_h),e(_h,$J),e($J,HZe),e(_h,UZe),e(_h,Ik),e(Ik,JZe),e(_h,YZe),e(Ae,KZe),e(Ae,uh),e(uh,IJ),e(IJ,ZZe),e(uh,eeo),e(uh,Dk),e(Dk,oeo),e(uh,reo),e(Ae,teo),e(Ae,bh),e(bh,DJ),e(DJ,aeo),e(bh,neo),e(bh,jk),e(jk,seo),e(bh,leo),e(Ae,ieo),e(Ae,vh),e(vh,jJ),e(jJ,deo),e(vh,ceo),e(vh,Nk),e(Nk,feo),e(vh,meo),e(Ae,geo),e(Ae,Th),e(Th,NJ),e(NJ,heo),e(Th,peo),e(Th,qk),e(qk,_eo),e(Th,ueo),e(Ae,beo),e(Ae,Fh),e(Fh,qJ),e(qJ,veo),e(Fh,Teo),e(Fh,Gk),e(Gk,Feo),e(Fh,Ceo),e(Ae,Meo),e(Ae,Ch),e(Ch,GJ),e(GJ,Eeo),e(Ch,yeo),e(Ch,Ok),e(Ok,weo),e(Ch,Aeo),e(Ae,Leo),e(Ae,Mh),e(Mh,OJ),e(OJ,Beo),e(Mh,xeo),e(Mh,Xk),e(Xk,keo),e(Mh,Reo),e(Re,Seo),g(Eh,Re,null),e(Re,Peo),e(Re,XJ),e(XJ,$eo),e(Re,Ieo),g(a3,Re,null),e(Wo,Deo),e(Wo,yh),g(n3,yh,null),e(yh,jeo),e(yh,VJ),e(VJ,Neo),b(c,eBe,u),b(c,Oi,u),e(Oi,wh),e(wh,zJ),g(s3,zJ,null),e(Oi,qeo),e(Oi,WJ),e(WJ,Geo),b(c,oBe,u),b(c,Qo,u),g(l3,Qo,null),e(Qo,Oeo),e(Qo,Xi),e(Xi,Xeo),e(Xi,QJ),e(QJ,Veo),e(Xi,zeo),e(Xi,HJ),e(HJ,Weo),e(Xi,Qeo),e(Qo,Heo),e(Qo,i3),e(i3,Ueo),e(i3,UJ),e(UJ,Jeo),e(i3,Yeo),e(Qo,Keo),e(Qo,qr),g(d3,qr,null),e(qr,Zeo),e(qr,JJ),e(JJ,eoo),e(qr,ooo),e(qr,Vi),e(Vi,roo),e(Vi,YJ),e(YJ,too),e(Vi,aoo),e(Vi,KJ),e(KJ,noo),e(Vi,soo),e(qr,loo),e(qr,ZJ),e(ZJ,ioo),e(qr,doo),g(c3,qr,null),e(Qo,coo),e(Qo,Se),g(f3,Se,null),e(Se,foo),e(Se,eY),e(eY,moo),e(Se,goo),e(Se,Na),e(Na,hoo),e(Na,oY),e(oY,poo),e(Na,_oo),e(Na,rY),e(rY,uoo),e(Na,boo),e(Na,tY),e(tY,voo),e(Na,Too),e(Se,Foo),e(Se,F),e(F,Ah),e(Ah,aY),e(aY,Coo),e(Ah,Moo),e(Ah,Vk),e(Vk,Eoo),e(Ah,yoo),e(F,woo),e(F,Lh),e(Lh,nY),e(nY,Aoo),e(Lh,Loo),e(Lh,zk),e(zk,Boo),e(Lh,xoo),e(F,koo),e(F,Bh),e(Bh,sY),e(sY,Roo),e(Bh,Soo),e(Bh,Wk),e(Wk,Poo),e(Bh,$oo),e(F,Ioo),e(F,xh),e(xh,lY),e(lY,Doo),e(xh,joo),e(xh,Qk),e(Qk,Noo),e(xh,qoo),e(F,Goo),e(F,kh),e(kh,iY),e(iY,Ooo),e(kh,Xoo),e(kh,Hk),e(Hk,Voo),e(kh,zoo),e(F,Woo),e(F,Rh),e(Rh,dY),e(dY,Qoo),e(Rh,Hoo),e(Rh,Uk),e(Uk,Uoo),e(Rh,Joo),e(F,Yoo),e(F,Sh),e(Sh,cY),e(cY,Koo),e(Sh,Zoo),e(Sh,Jk),e(Jk,ero),e(Sh,oro),e(F,rro),e(F,Ph),e(Ph,fY),e(fY,tro),e(Ph,aro),e(Ph,Yk),e(Yk,nro),e(Ph,sro),e(F,lro),e(F,$h),e($h,mY),e(mY,iro),e($h,dro),e($h,Kk),e(Kk,cro),e($h,fro),e(F,mro),e(F,Ih),e(Ih,gY),e(gY,gro),e(Ih,hro),e(Ih,Zk),e(Zk,pro),e(Ih,_ro),e(F,uro),e(F,Dh),e(Dh,hY),e(hY,bro),e(Dh,vro),e(Dh,eR),e(eR,Tro),e(Dh,Fro),e(F,Cro),e(F,jh),e(jh,pY),e(pY,Mro),e(jh,Ero),e(jh,oR),e(oR,yro),e(jh,wro),e(F,Aro),e(F,Nh),e(Nh,_Y),e(_Y,Lro),e(Nh,Bro),e(Nh,rR),e(rR,xro),e(Nh,kro),e(F,Rro),e(F,qh),e(qh,uY),e(uY,Sro),e(qh,Pro),e(qh,tR),e(tR,$ro),e(qh,Iro),e(F,Dro),e(F,Gh),e(Gh,bY),e(bY,jro),e(Gh,Nro),e(Gh,aR),e(aR,qro),e(Gh,Gro),e(F,Oro),e(F,Oh),e(Oh,vY),e(vY,Xro),e(Oh,Vro),e(Oh,nR),e(nR,zro),e(Oh,Wro),e(F,Qro),e(F,Xh),e(Xh,TY),e(TY,Hro),e(Xh,Uro),e(Xh,sR),e(sR,Jro),e(Xh,Yro),e(F,Kro),e(F,Vh),e(Vh,FY),e(FY,Zro),e(Vh,eto),e(Vh,lR),e(lR,oto),e(Vh,rto),e(F,tto),e(F,zh),e(zh,CY),e(CY,ato),e(zh,nto),e(zh,iR),e(iR,sto),e(zh,lto),e(F,ito),e(F,Wh),e(Wh,MY),e(MY,dto),e(Wh,cto),e(Wh,dR),e(dR,fto),e(Wh,mto),e(F,gto),e(F,Qh),e(Qh,EY),e(EY,hto),e(Qh,pto),e(Qh,cR),e(cR,_to),e(Qh,uto),e(F,bto),e(F,Hh),e(Hh,yY),e(yY,vto),e(Hh,Tto),e(Hh,fR),e(fR,Fto),e(Hh,Cto),e(F,Mto),e(F,Uh),e(Uh,wY),e(wY,Eto),e(Uh,yto),e(Uh,mR),e(mR,wto),e(Uh,Ato),e(F,Lto),e(F,Jh),e(Jh,AY),e(AY,Bto),e(Jh,xto),e(Jh,gR),e(gR,kto),e(Jh,Rto),e(F,Sto),e(F,Yh),e(Yh,LY),e(LY,Pto),e(Yh,$to),e(Yh,hR),e(hR,Ito),e(Yh,Dto),e(F,jto),e(F,Kh),e(Kh,BY),e(BY,Nto),e(Kh,qto),e(Kh,pR),e(pR,Gto),e(Kh,Oto),e(F,Xto),e(F,Zh),e(Zh,xY),e(xY,Vto),e(Zh,zto),e(Zh,_R),e(_R,Wto),e(Zh,Qto),e(F,Hto),e(F,Ss),e(Ss,kY),e(kY,Uto),e(Ss,Jto),e(Ss,uR),e(uR,Yto),e(Ss,Kto),e(Ss,bR),e(bR,Zto),e(Ss,eao),e(F,oao),e(F,ep),e(ep,RY),e(RY,rao),e(ep,tao),e(ep,vR),e(vR,aao),e(ep,nao),e(F,sao),e(F,op),e(op,SY),e(SY,lao),e(op,iao),e(op,TR),e(TR,dao),e(op,cao),e(F,fao),e(F,rp),e(rp,PY),e(PY,mao),e(rp,gao),e(rp,FR),e(FR,hao),e(rp,pao),e(F,_ao),e(F,tp),e(tp,$Y),e($Y,uao),e(tp,bao),e(tp,CR),e(CR,vao),e(tp,Tao),e(F,Fao),e(F,ap),e(ap,IY),e(IY,Cao),e(ap,Mao),e(ap,MR),e(MR,Eao),e(ap,yao),e(F,wao),e(F,np),e(np,DY),e(DY,Aao),e(np,Lao),e(np,ER),e(ER,Bao),e(np,xao),e(F,kao),e(F,sp),e(sp,jY),e(jY,Rao),e(sp,Sao),e(sp,yR),e(yR,Pao),e(sp,$ao),e(F,Iao),e(F,lp),e(lp,NY),e(NY,Dao),e(lp,jao),e(lp,wR),e(wR,Nao),e(lp,qao),e(F,Gao),e(F,ip),e(ip,qY),e(qY,Oao),e(ip,Xao),e(ip,AR),e(AR,Vao),e(ip,zao),e(F,Wao),e(F,dp),e(dp,GY),e(GY,Qao),e(dp,Hao),e(dp,LR),e(LR,Uao),e(dp,Jao),e(F,Yao),e(F,cp),e(cp,OY),e(OY,Kao),e(cp,Zao),e(cp,BR),e(BR,eno),e(cp,ono),e(F,rno),e(F,fp),e(fp,XY),e(XY,tno),e(fp,ano),e(fp,xR),e(xR,nno),e(fp,sno),e(F,lno),e(F,mp),e(mp,VY),e(VY,ino),e(mp,dno),e(mp,kR),e(kR,cno),e(mp,fno),e(F,mno),e(F,gp),e(gp,zY),e(zY,gno),e(gp,hno),e(gp,RR),e(RR,pno),e(gp,_no),e(F,uno),e(F,hp),e(hp,WY),e(WY,bno),e(hp,vno),e(hp,SR),e(SR,Tno),e(hp,Fno),e(F,Cno),e(F,pp),e(pp,QY),e(QY,Mno),e(pp,Eno),e(pp,PR),e(PR,yno),e(pp,wno),e(F,Ano),e(F,_p),e(_p,HY),e(HY,Lno),e(_p,Bno),e(_p,$R),e($R,xno),e(_p,kno),e(F,Rno),e(F,up),e(up,UY),e(UY,Sno),e(up,Pno),e(up,IR),e(IR,$no),e(up,Ino),e(F,Dno),e(F,bp),e(bp,JY),e(JY,jno),e(bp,Nno),e(bp,DR),e(DR,qno),e(bp,Gno),e(F,Ono),e(F,vp),e(vp,YY),e(YY,Xno),e(vp,Vno),e(vp,jR),e(jR,zno),e(vp,Wno),e(F,Qno),e(F,Tp),e(Tp,KY),e(KY,Hno),e(Tp,Uno),e(Tp,NR),e(NR,Jno),e(Tp,Yno),e(F,Kno),e(F,Fp),e(Fp,ZY),e(ZY,Zno),e(Fp,eso),e(Fp,qR),e(qR,oso),e(Fp,rso),e(F,tso),e(F,Cp),e(Cp,eK),e(eK,aso),e(Cp,nso),e(Cp,GR),e(GR,sso),e(Cp,lso),e(F,iso),e(F,Mp),e(Mp,oK),e(oK,dso),e(Mp,cso),e(Mp,OR),e(OR,fso),e(Mp,mso),e(F,gso),e(F,Ep),e(Ep,rK),e(rK,hso),e(Ep,pso),e(Ep,XR),e(XR,_so),e(Ep,uso),e(F,bso),e(F,yp),e(yp,tK),e(tK,vso),e(yp,Tso),e(yp,VR),e(VR,Fso),e(yp,Cso),e(F,Mso),e(F,wp),e(wp,aK),e(aK,Eso),e(wp,yso),e(wp,zR),e(zR,wso),e(wp,Aso),e(F,Lso),e(F,Ap),e(Ap,nK),e(nK,Bso),e(Ap,xso),e(Ap,WR),e(WR,kso),e(Ap,Rso),e(F,Sso),e(F,Lp),e(Lp,sK),e(sK,Pso),e(Lp,$so),e(Lp,QR),e(QR,Iso),e(Lp,Dso),e(F,jso),e(F,Bp),e(Bp,lK),e(lK,Nso),e(Bp,qso),e(Bp,HR),e(HR,Gso),e(Bp,Oso),e(F,Xso),e(F,xp),e(xp,iK),e(iK,Vso),e(xp,zso),e(xp,UR),e(UR,Wso),e(xp,Qso),e(F,Hso),e(F,kp),e(kp,dK),e(dK,Uso),e(kp,Jso),e(kp,JR),e(JR,Yso),e(kp,Kso),e(F,Zso),e(F,Rp),e(Rp,cK),e(cK,elo),e(Rp,olo),e(Rp,YR),e(YR,rlo),e(Rp,tlo),e(F,alo),e(F,Sp),e(Sp,fK),e(fK,nlo),e(Sp,slo),e(Sp,KR),e(KR,llo),e(Sp,ilo),e(F,dlo),e(F,Pp),e(Pp,mK),e(mK,clo),e(Pp,flo),e(Pp,ZR),e(ZR,mlo),e(Pp,glo),e(F,hlo),e(F,$p),e($p,gK),e(gK,plo),e($p,_lo),e($p,eS),e(eS,ulo),e($p,blo),e(F,vlo),e(F,Ip),e(Ip,hK),e(hK,Tlo),e(Ip,Flo),e(Ip,oS),e(oS,Clo),e(Ip,Mlo),e(F,Elo),e(F,Dp),e(Dp,pK),e(pK,ylo),e(Dp,wlo),e(Dp,rS),e(rS,Alo),e(Dp,Llo),e(F,Blo),e(F,jp),e(jp,_K),e(_K,xlo),e(jp,klo),e(jp,tS),e(tS,Rlo),e(jp,Slo),e(F,Plo),e(F,Np),e(Np,uK),e(uK,$lo),e(Np,Ilo),e(Np,aS),e(aS,Dlo),e(Np,jlo),e(F,Nlo),e(F,qp),e(qp,bK),e(bK,qlo),e(qp,Glo),e(qp,nS),e(nS,Olo),e(qp,Xlo),e(F,Vlo),e(F,Gp),e(Gp,vK),e(vK,zlo),e(Gp,Wlo),e(Gp,sS),e(sS,Qlo),e(Gp,Hlo),e(F,Ulo),e(F,Op),e(Op,TK),e(TK,Jlo),e(Op,Ylo),e(Op,lS),e(lS,Klo),e(Op,Zlo),e(F,eio),e(F,Xp),e(Xp,FK),e(FK,oio),e(Xp,rio),e(Xp,iS),e(iS,tio),e(Xp,aio),e(F,nio),e(F,Vp),e(Vp,CK),e(CK,sio),e(Vp,lio),e(Vp,dS),e(dS,iio),e(Vp,dio),e(F,cio),e(F,zp),e(zp,MK),e(MK,fio),e(zp,mio),e(zp,cS),e(cS,gio),e(zp,hio),e(F,pio),e(F,Wp),e(Wp,EK),e(EK,_io),e(Wp,uio),e(Wp,fS),e(fS,bio),e(Wp,vio),e(F,Tio),e(F,Qp),e(Qp,yK),e(yK,Fio),e(Qp,Cio),e(Qp,mS),e(mS,Mio),e(Qp,Eio),e(F,yio),e(F,Hp),e(Hp,wK),e(wK,wio),e(Hp,Aio),e(Hp,gS),e(gS,Lio),e(Hp,Bio),e(F,xio),e(F,Up),e(Up,AK),e(AK,kio),e(Up,Rio),e(Up,hS),e(hS,Sio),e(Up,Pio),e(F,$io),e(F,Jp),e(Jp,LK),e(LK,Iio),e(Jp,Dio),e(Jp,pS),e(pS,jio),e(Jp,Nio),e(F,qio),e(F,Yp),e(Yp,BK),e(BK,Gio),e(Yp,Oio),e(Yp,_S),e(_S,Xio),e(Yp,Vio),e(F,zio),e(F,Kp),e(Kp,xK),e(xK,Wio),e(Kp,Qio),e(Kp,uS),e(uS,Hio),e(Kp,Uio),e(F,Jio),e(F,Zp),e(Zp,kK),e(kK,Yio),e(Zp,Kio),e(Zp,bS),e(bS,Zio),e(Zp,edo),e(F,odo),e(F,e_),e(e_,RK),e(RK,rdo),e(e_,tdo),e(e_,vS),e(vS,ado),e(e_,ndo),e(F,sdo),e(F,o_),e(o_,SK),e(SK,ldo),e(o_,ido),e(o_,TS),e(TS,ddo),e(o_,cdo),e(F,fdo),e(F,r_),e(r_,PK),e(PK,mdo),e(r_,gdo),e(r_,FS),e(FS,hdo),e(r_,pdo),e(F,_do),e(F,t_),e(t_,$K),e($K,udo),e(t_,bdo),e(t_,CS),e(CS,vdo),e(t_,Tdo),e(F,Fdo),e(F,a_),e(a_,IK),e(IK,Cdo),e(a_,Mdo),e(a_,MS),e(MS,Edo),e(a_,ydo),e(F,wdo),e(F,n_),e(n_,DK),e(DK,Ado),e(n_,Ldo),e(n_,ES),e(ES,Bdo),e(n_,xdo),e(Se,kdo),e(Se,s_),e(s_,Rdo),e(s_,jK),e(jK,Sdo),e(s_,Pdo),e(s_,NK),e(NK,$do),e(Se,Ido),e(Se,qK),e(qK,Ddo),e(Se,jdo),g(m3,Se,null),b(c,rBe,u),b(c,zi,u),e(zi,l_),e(l_,GK),g(g3,GK,null),e(zi,Ndo),e(zi,OK),e(OK,qdo),b(c,tBe,u),b(c,Ho,u),g(h3,Ho,null),e(Ho,Gdo),e(Ho,Wi),e(Wi,Odo),e(Wi,XK),e(XK,Xdo),e(Wi,Vdo),e(Wi,VK),e(VK,zdo),e(Wi,Wdo),e(Ho,Qdo),e(Ho,p3),e(p3,Hdo),e(p3,zK),e(zK,Udo),e(p3,Jdo),e(Ho,Ydo),e(Ho,Gr),g(_3,Gr,null),e(Gr,Kdo),e(Gr,WK),e(WK,Zdo),e(Gr,eco),e(Gr,Qi),e(Qi,oco),e(Qi,QK),e(QK,rco),e(Qi,tco),e(Qi,HK),e(HK,aco),e(Qi,nco),e(Gr,sco),e(Gr,UK),e(UK,lco),e(Gr,ico),g(u3,Gr,null),e(Ho,dco),e(Ho,Pe),g(b3,Pe,null),e(Pe,cco),e(Pe,JK),e(JK,fco),e(Pe,mco),e(Pe,qa),e(qa,gco),e(qa,YK),e(YK,hco),e(qa,pco),e(qa,KK),e(KK,_co),e(qa,uco),e(qa,ZK),e(ZK,bco),e(qa,vco),e(Pe,Tco),e(Pe,k),e(k,i_),e(i_,eZ),e(eZ,Fco),e(i_,Cco),e(i_,yS),e(yS,Mco),e(i_,Eco),e(k,yco),e(k,d_),e(d_,oZ),e(oZ,wco),e(d_,Aco),e(d_,wS),e(wS,Lco),e(d_,Bco),e(k,xco),e(k,c_),e(c_,rZ),e(rZ,kco),e(c_,Rco),e(c_,AS),e(AS,Sco),e(c_,Pco),e(k,$co),e(k,f_),e(f_,tZ),e(tZ,Ico),e(f_,Dco),e(f_,LS),e(LS,jco),e(f_,Nco),e(k,qco),e(k,m_),e(m_,aZ),e(aZ,Gco),e(m_,Oco),e(m_,BS),e(BS,Xco),e(m_,Vco),e(k,zco),e(k,g_),e(g_,nZ),e(nZ,Wco),e(g_,Qco),e(g_,xS),e(xS,Hco),e(g_,Uco),e(k,Jco),e(k,h_),e(h_,sZ),e(sZ,Yco),e(h_,Kco),e(h_,kS),e(kS,Zco),e(h_,efo),e(k,ofo),e(k,p_),e(p_,lZ),e(lZ,rfo),e(p_,tfo),e(p_,RS),e(RS,afo),e(p_,nfo),e(k,sfo),e(k,__),e(__,iZ),e(iZ,lfo),e(__,ifo),e(__,SS),e(SS,dfo),e(__,cfo),e(k,ffo),e(k,u_),e(u_,dZ),e(dZ,mfo),e(u_,gfo),e(u_,PS),e(PS,hfo),e(u_,pfo),e(k,_fo),e(k,b_),e(b_,cZ),e(cZ,ufo),e(b_,bfo),e(b_,$S),e($S,vfo),e(b_,Tfo),e(k,Ffo),e(k,v_),e(v_,fZ),e(fZ,Cfo),e(v_,Mfo),e(v_,IS),e(IS,Efo),e(v_,yfo),e(k,wfo),e(k,T_),e(T_,mZ),e(mZ,Afo),e(T_,Lfo),e(T_,DS),e(DS,Bfo),e(T_,xfo),e(k,kfo),e(k,F_),e(F_,gZ),e(gZ,Rfo),e(F_,Sfo),e(F_,jS),e(jS,Pfo),e(F_,$fo),e(k,Ifo),e(k,C_),e(C_,hZ),e(hZ,Dfo),e(C_,jfo),e(C_,NS),e(NS,Nfo),e(C_,qfo),e(k,Gfo),e(k,M_),e(M_,pZ),e(pZ,Ofo),e(M_,Xfo),e(M_,qS),e(qS,Vfo),e(M_,zfo),e(k,Wfo),e(k,E_),e(E_,_Z),e(_Z,Qfo),e(E_,Hfo),e(E_,GS),e(GS,Ufo),e(E_,Jfo),e(k,Yfo),e(k,y_),e(y_,uZ),e(uZ,Kfo),e(y_,Zfo),e(y_,OS),e(OS,emo),e(y_,omo),e(k,rmo),e(k,w_),e(w_,bZ),e(bZ,tmo),e(w_,amo),e(w_,XS),e(XS,nmo),e(w_,smo),e(k,lmo),e(k,A_),e(A_,vZ),e(vZ,imo),e(A_,dmo),e(A_,VS),e(VS,cmo),e(A_,fmo),e(k,mmo),e(k,L_),e(L_,TZ),e(TZ,gmo),e(L_,hmo),e(L_,zS),e(zS,pmo),e(L_,_mo),e(k,umo),e(k,B_),e(B_,FZ),e(FZ,bmo),e(B_,vmo),e(B_,WS),e(WS,Tmo),e(B_,Fmo),e(k,Cmo),e(k,x_),e(x_,CZ),e(CZ,Mmo),e(x_,Emo),e(x_,QS),e(QS,ymo),e(x_,wmo),e(k,Amo),e(k,k_),e(k_,MZ),e(MZ,Lmo),e(k_,Bmo),e(k_,HS),e(HS,xmo),e(k_,kmo),e(k,Rmo),e(k,R_),e(R_,EZ),e(EZ,Smo),e(R_,Pmo),e(R_,US),e(US,$mo),e(R_,Imo),e(k,Dmo),e(k,S_),e(S_,yZ),e(yZ,jmo),e(S_,Nmo),e(S_,JS),e(JS,qmo),e(S_,Gmo),e(k,Omo),e(k,P_),e(P_,wZ),e(wZ,Xmo),e(P_,Vmo),e(P_,YS),e(YS,zmo),e(P_,Wmo),e(k,Qmo),e(k,$_),e($_,AZ),e(AZ,Hmo),e($_,Umo),e($_,KS),e(KS,Jmo),e($_,Ymo),e(k,Kmo),e(k,I_),e(I_,LZ),e(LZ,Zmo),e(I_,ego),e(I_,ZS),e(ZS,ogo),e(I_,rgo),e(k,tgo),e(k,D_),e(D_,BZ),e(BZ,ago),e(D_,ngo),e(D_,eP),e(eP,sgo),e(D_,lgo),e(k,igo),e(k,j_),e(j_,xZ),e(xZ,dgo),e(j_,cgo),e(j_,oP),e(oP,fgo),e(j_,mgo),e(k,ggo),e(k,N_),e(N_,kZ),e(kZ,hgo),e(N_,pgo),e(N_,rP),e(rP,_go),e(N_,ugo),e(k,bgo),e(k,q_),e(q_,RZ),e(RZ,vgo),e(q_,Tgo),e(q_,tP),e(tP,Fgo),e(q_,Cgo),e(k,Mgo),e(k,G_),e(G_,SZ),e(SZ,Ego),e(G_,ygo),e(G_,aP),e(aP,wgo),e(G_,Ago),e(k,Lgo),e(k,O_),e(O_,PZ),e(PZ,Bgo),e(O_,xgo),e(O_,nP),e(nP,kgo),e(O_,Rgo),e(k,Sgo),e(k,X_),e(X_,$Z),e($Z,Pgo),e(X_,$go),e(X_,sP),e(sP,Igo),e(X_,Dgo),e(k,jgo),e(k,V_),e(V_,IZ),e(IZ,Ngo),e(V_,qgo),e(V_,lP),e(lP,Ggo),e(V_,Ogo),e(k,Xgo),e(k,z_),e(z_,DZ),e(DZ,Vgo),e(z_,zgo),e(z_,iP),e(iP,Wgo),e(z_,Qgo),e(k,Hgo),e(k,W_),e(W_,jZ),e(jZ,Ugo),e(W_,Jgo),e(W_,dP),e(dP,Ygo),e(W_,Kgo),e(Pe,Zgo),e(Pe,Q_),e(Q_,eho),e(Q_,NZ),e(NZ,oho),e(Q_,rho),e(Q_,qZ),e(qZ,tho),e(Pe,aho),e(Pe,GZ),e(GZ,nho),e(Pe,sho),g(v3,Pe,null),b(c,aBe,u),b(c,Hi,u),e(Hi,H_),e(H_,OZ),g(T3,OZ,null),e(Hi,lho),e(Hi,XZ),e(XZ,iho),b(c,nBe,u),b(c,Uo,u),g(F3,Uo,null),e(Uo,dho),e(Uo,Ui),e(Ui,cho),e(Ui,VZ),e(VZ,fho),e(Ui,mho),e(Ui,zZ),e(zZ,gho),e(Ui,hho),e(Uo,pho),e(Uo,C3),e(C3,_ho),e(C3,WZ),e(WZ,uho),e(C3,bho),e(Uo,vho),e(Uo,Or),g(M3,Or,null),e(Or,Tho),e(Or,QZ),e(QZ,Fho),e(Or,Cho),e(Or,Ji),e(Ji,Mho),e(Ji,HZ),e(HZ,Eho),e(Ji,yho),e(Ji,UZ),e(UZ,who),e(Ji,Aho),e(Or,Lho),e(Or,JZ),e(JZ,Bho),e(Or,xho),g(E3,Or,null),e(Uo,kho),e(Uo,$e),g(y3,$e,null),e($e,Rho),e($e,YZ),e(YZ,Sho),e($e,Pho),e($e,Ga),e(Ga,$ho),e(Ga,KZ),e(KZ,Iho),e(Ga,Dho),e(Ga,ZZ),e(ZZ,jho),e(Ga,Nho),e(Ga,eee),e(eee,qho),e(Ga,Gho),e($e,Oho),e($e,$),e($,U_),e(U_,oee),e(oee,Xho),e(U_,Vho),e(U_,cP),e(cP,zho),e(U_,Who),e($,Qho),e($,J_),e(J_,ree),e(ree,Hho),e(J_,Uho),e(J_,fP),e(fP,Jho),e(J_,Yho),e($,Kho),e($,Y_),e(Y_,tee),e(tee,Zho),e(Y_,epo),e(Y_,mP),e(mP,opo),e(Y_,rpo),e($,tpo),e($,K_),e(K_,aee),e(aee,apo),e(K_,npo),e(K_,gP),e(gP,spo),e(K_,lpo),e($,ipo),e($,Z_),e(Z_,nee),e(nee,dpo),e(Z_,cpo),e(Z_,hP),e(hP,fpo),e(Z_,mpo),e($,gpo),e($,eu),e(eu,see),e(see,hpo),e(eu,ppo),e(eu,pP),e(pP,_po),e(eu,upo),e($,bpo),e($,ou),e(ou,lee),e(lee,vpo),e(ou,Tpo),e(ou,_P),e(_P,Fpo),e(ou,Cpo),e($,Mpo),e($,ru),e(ru,iee),e(iee,Epo),e(ru,ypo),e(ru,uP),e(uP,wpo),e(ru,Apo),e($,Lpo),e($,tu),e(tu,dee),e(dee,Bpo),e(tu,xpo),e(tu,bP),e(bP,kpo),e(tu,Rpo),e($,Spo),e($,au),e(au,cee),e(cee,Ppo),e(au,$po),e(au,vP),e(vP,Ipo),e(au,Dpo),e($,jpo),e($,nu),e(nu,fee),e(fee,Npo),e(nu,qpo),e(nu,TP),e(TP,Gpo),e(nu,Opo),e($,Xpo),e($,su),e(su,mee),e(mee,Vpo),e(su,zpo),e(su,FP),e(FP,Wpo),e(su,Qpo),e($,Hpo),e($,lu),e(lu,gee),e(gee,Upo),e(lu,Jpo),e(lu,CP),e(CP,Ypo),e(lu,Kpo),e($,Zpo),e($,iu),e(iu,hee),e(hee,e_o),e(iu,o_o),e(iu,MP),e(MP,r_o),e(iu,t_o),e($,a_o),e($,du),e(du,pee),e(pee,n_o),e(du,s_o),e(du,EP),e(EP,l_o),e(du,i_o),e($,d_o),e($,cu),e(cu,_ee),e(_ee,c_o),e(cu,f_o),e(cu,yP),e(yP,m_o),e(cu,g_o),e($,h_o),e($,fu),e(fu,uee),e(uee,p_o),e(fu,__o),e(fu,wP),e(wP,u_o),e(fu,b_o),e($,v_o),e($,mu),e(mu,bee),e(bee,T_o),e(mu,F_o),e(mu,AP),e(AP,C_o),e(mu,M_o),e($,E_o),e($,gu),e(gu,vee),e(vee,y_o),e(gu,w_o),e(gu,LP),e(LP,A_o),e(gu,L_o),e($,B_o),e($,hu),e(hu,Tee),e(Tee,x_o),e(hu,k_o),e(hu,BP),e(BP,R_o),e(hu,S_o),e($,P_o),e($,pu),e(pu,Fee),e(Fee,$_o),e(pu,I_o),e(pu,xP),e(xP,D_o),e(pu,j_o),e($,N_o),e($,_u),e(_u,Cee),e(Cee,q_o),e(_u,G_o),e(_u,kP),e(kP,O_o),e(_u,X_o),e($,V_o),e($,uu),e(uu,Mee),e(Mee,z_o),e(uu,W_o),e(uu,RP),e(RP,Q_o),e(uu,H_o),e($,U_o),e($,bu),e(bu,Eee),e(Eee,J_o),e(bu,Y_o),e(bu,SP),e(SP,K_o),e(bu,Z_o),e($,euo),e($,vu),e(vu,yee),e(yee,ouo),e(vu,ruo),e(vu,PP),e(PP,tuo),e(vu,auo),e($,nuo),e($,Tu),e(Tu,wee),e(wee,suo),e(Tu,luo),e(Tu,$P),e($P,iuo),e(Tu,duo),e($,cuo),e($,Fu),e(Fu,Aee),e(Aee,fuo),e(Fu,muo),e(Fu,IP),e(IP,guo),e(Fu,huo),e($,puo),e($,Cu),e(Cu,Lee),e(Lee,_uo),e(Cu,uuo),e(Cu,DP),e(DP,buo),e(Cu,vuo),e($,Tuo),e($,Mu),e(Mu,Bee),e(Bee,Fuo),e(Mu,Cuo),e(Mu,jP),e(jP,Muo),e(Mu,Euo),e($,yuo),e($,Eu),e(Eu,xee),e(xee,wuo),e(Eu,Auo),e(Eu,NP),e(NP,Luo),e(Eu,Buo),e($,xuo),e($,yu),e(yu,kee),e(kee,kuo),e(yu,Ruo),e(yu,qP),e(qP,Suo),e(yu,Puo),e($,$uo),e($,wu),e(wu,Ree),e(Ree,Iuo),e(wu,Duo),e(wu,GP),e(GP,juo),e(wu,Nuo),e($,quo),e($,Au),e(Au,See),e(See,Guo),e(Au,Ouo),e(Au,OP),e(OP,Xuo),e(Au,Vuo),e($,zuo),e($,Lu),e(Lu,Pee),e(Pee,Wuo),e(Lu,Quo),e(Lu,XP),e(XP,Huo),e(Lu,Uuo),e($,Juo),e($,Bu),e(Bu,$ee),e($ee,Yuo),e(Bu,Kuo),e(Bu,VP),e(VP,Zuo),e(Bu,e1o),e($e,o1o),e($e,xu),e(xu,r1o),e(xu,Iee),e(Iee,t1o),e(xu,a1o),e(xu,Dee),e(Dee,n1o),e($e,s1o),e($e,jee),e(jee,l1o),e($e,i1o),g(w3,$e,null),b(c,sBe,u),b(c,Yi,u),e(Yi,ku),e(ku,Nee),g(A3,Nee,null),e(Yi,d1o),e(Yi,qee),e(qee,c1o),b(c,lBe,u),b(c,Jo,u),g(L3,Jo,null),e(Jo,f1o),e(Jo,Ki),e(Ki,m1o),e(Ki,Gee),e(Gee,g1o),e(Ki,h1o),e(Ki,Oee),e(Oee,p1o),e(Ki,_1o),e(Jo,u1o),e(Jo,B3),e(B3,b1o),e(B3,Xee),e(Xee,v1o),e(B3,T1o),e(Jo,F1o),e(Jo,Xr),g(x3,Xr,null),e(Xr,C1o),e(Xr,Vee),e(Vee,M1o),e(Xr,E1o),e(Xr,Zi),e(Zi,y1o),e(Zi,zee),e(zee,w1o),e(Zi,A1o),e(Zi,Wee),e(Wee,L1o),e(Zi,B1o),e(Xr,x1o),e(Xr,Qee),e(Qee,k1o),e(Xr,R1o),g(k3,Xr,null),e(Jo,S1o),e(Jo,Ie),g(R3,Ie,null),e(Ie,P1o),e(Ie,Hee),e(Hee,$1o),e(Ie,I1o),e(Ie,Oa),e(Oa,D1o),e(Oa,Uee),e(Uee,j1o),e(Oa,N1o),e(Oa,Jee),e(Jee,q1o),e(Oa,G1o),e(Oa,Yee),e(Yee,O1o),e(Oa,X1o),e(Ie,V1o),e(Ie,I),e(I,Ru),e(Ru,Kee),e(Kee,z1o),e(Ru,W1o),e(Ru,zP),e(zP,Q1o),e(Ru,H1o),e(I,U1o),e(I,Su),e(Su,Zee),e(Zee,J1o),e(Su,Y1o),e(Su,WP),e(WP,K1o),e(Su,Z1o),e(I,e2o),e(I,Pu),e(Pu,eoe),e(eoe,o2o),e(Pu,r2o),e(Pu,QP),e(QP,t2o),e(Pu,a2o),e(I,n2o),e(I,$u),e($u,ooe),e(ooe,s2o),e($u,l2o),e($u,HP),e(HP,i2o),e($u,d2o),e(I,c2o),e(I,Iu),e(Iu,roe),e(roe,f2o),e(Iu,m2o),e(Iu,UP),e(UP,g2o),e(Iu,h2o),e(I,p2o),e(I,Du),e(Du,toe),e(toe,_2o),e(Du,u2o),e(Du,JP),e(JP,b2o),e(Du,v2o),e(I,T2o),e(I,ju),e(ju,aoe),e(aoe,F2o),e(ju,C2o),e(ju,YP),e(YP,M2o),e(ju,E2o),e(I,y2o),e(I,Nu),e(Nu,noe),e(noe,w2o),e(Nu,A2o),e(Nu,KP),e(KP,L2o),e(Nu,B2o),e(I,x2o),e(I,qu),e(qu,soe),e(soe,k2o),e(qu,R2o),e(qu,ZP),e(ZP,S2o),e(qu,P2o),e(I,$2o),e(I,Gu),e(Gu,loe),e(loe,I2o),e(Gu,D2o),e(Gu,e$),e(e$,j2o),e(Gu,N2o),e(I,q2o),e(I,Ou),e(Ou,ioe),e(ioe,G2o),e(Ou,O2o),e(Ou,o$),e(o$,X2o),e(Ou,V2o),e(I,z2o),e(I,Xu),e(Xu,doe),e(doe,W2o),e(Xu,Q2o),e(Xu,r$),e(r$,H2o),e(Xu,U2o),e(I,J2o),e(I,Vu),e(Vu,coe),e(coe,Y2o),e(Vu,K2o),e(Vu,t$),e(t$,Z2o),e(Vu,ebo),e(I,obo),e(I,zu),e(zu,foe),e(foe,rbo),e(zu,tbo),e(zu,a$),e(a$,abo),e(zu,nbo),e(I,sbo),e(I,Wu),e(Wu,moe),e(moe,lbo),e(Wu,ibo),e(Wu,n$),e(n$,dbo),e(Wu,cbo),e(I,fbo),e(I,Qu),e(Qu,goe),e(goe,mbo),e(Qu,gbo),e(Qu,s$),e(s$,hbo),e(Qu,pbo),e(I,_bo),e(I,Hu),e(Hu,hoe),e(hoe,ubo),e(Hu,bbo),e(Hu,l$),e(l$,vbo),e(Hu,Tbo),e(I,Fbo),e(I,Uu),e(Uu,poe),e(poe,Cbo),e(Uu,Mbo),e(Uu,i$),e(i$,Ebo),e(Uu,ybo),e(I,wbo),e(I,Ju),e(Ju,_oe),e(_oe,Abo),e(Ju,Lbo),e(Ju,d$),e(d$,Bbo),e(Ju,xbo),e(I,kbo),e(I,Yu),e(Yu,uoe),e(uoe,Rbo),e(Yu,Sbo),e(Yu,c$),e(c$,Pbo),e(Yu,$bo),e(I,Ibo),e(I,Ku),e(Ku,boe),e(boe,Dbo),e(Ku,jbo),e(Ku,f$),e(f$,Nbo),e(Ku,qbo),e(I,Gbo),e(I,Zu),e(Zu,voe),e(voe,Obo),e(Zu,Xbo),e(Zu,m$),e(m$,Vbo),e(Zu,zbo),e(I,Wbo),e(I,e1),e(e1,Toe),e(Toe,Qbo),e(e1,Hbo),e(e1,g$),e(g$,Ubo),e(e1,Jbo),e(I,Ybo),e(I,o1),e(o1,Foe),e(Foe,Kbo),e(o1,Zbo),e(o1,h$),e(h$,e5o),e(o1,o5o),e(I,r5o),e(I,r1),e(r1,Coe),e(Coe,t5o),e(r1,a5o),e(r1,p$),e(p$,n5o),e(r1,s5o),e(I,l5o),e(I,t1),e(t1,Moe),e(Moe,i5o),e(t1,d5o),e(t1,_$),e(_$,c5o),e(t1,f5o),e(I,m5o),e(I,a1),e(a1,Eoe),e(Eoe,g5o),e(a1,h5o),e(a1,u$),e(u$,p5o),e(a1,_5o),e(I,u5o),e(I,n1),e(n1,yoe),e(yoe,b5o),e(n1,v5o),e(n1,b$),e(b$,T5o),e(n1,F5o),e(I,C5o),e(I,s1),e(s1,woe),e(woe,M5o),e(s1,E5o),e(s1,v$),e(v$,y5o),e(s1,w5o),e(I,A5o),e(I,l1),e(l1,Aoe),e(Aoe,L5o),e(l1,B5o),e(l1,T$),e(T$,x5o),e(l1,k5o),e(I,R5o),e(I,i1),e(i1,Loe),e(Loe,S5o),e(i1,P5o),e(i1,Boe),e(Boe,$5o),e(i1,I5o),e(I,D5o),e(I,d1),e(d1,xoe),e(xoe,j5o),e(d1,N5o),e(d1,F$),e(F$,q5o),e(d1,G5o),e(I,O5o),e(I,c1),e(c1,koe),e(koe,X5o),e(c1,V5o),e(c1,C$),e(C$,z5o),e(c1,W5o),e(I,Q5o),e(I,f1),e(f1,Roe),e(Roe,H5o),e(f1,U5o),e(f1,M$),e(M$,J5o),e(f1,Y5o),e(I,K5o),e(I,m1),e(m1,Soe),e(Soe,Z5o),e(m1,evo),e(m1,E$),e(E$,ovo),e(m1,rvo),e(Ie,tvo),e(Ie,g1),e(g1,avo),e(g1,Poe),e(Poe,nvo),e(g1,svo),e(g1,$oe),e($oe,lvo),e(Ie,ivo),e(Ie,Ioe),e(Ioe,dvo),e(Ie,cvo),g(S3,Ie,null),b(c,iBe,u),b(c,ed,u),e(ed,h1),e(h1,Doe),g(P3,Doe,null),e(ed,fvo),e(ed,joe),e(joe,mvo),b(c,dBe,u),b(c,Yo,u),g($3,Yo,null),e(Yo,gvo),e(Yo,od),e(od,hvo),e(od,Noe),e(Noe,pvo),e(od,_vo),e(od,qoe),e(qoe,uvo),e(od,bvo),e(Yo,vvo),e(Yo,I3),e(I3,Tvo),e(I3,Goe),e(Goe,Fvo),e(I3,Cvo),e(Yo,Mvo),e(Yo,Vr),g(D3,Vr,null),e(Vr,Evo),e(Vr,Ooe),e(Ooe,yvo),e(Vr,wvo),e(Vr,rd),e(rd,Avo),e(rd,Xoe),e(Xoe,Lvo),e(rd,Bvo),e(rd,Voe),e(Voe,xvo),e(rd,kvo),e(Vr,Rvo),e(Vr,zoe),e(zoe,Svo),e(Vr,Pvo),g(j3,Vr,null),e(Yo,$vo),e(Yo,De),g(N3,De,null),e(De,Ivo),e(De,Woe),e(Woe,Dvo),e(De,jvo),e(De,Xa),e(Xa,Nvo),e(Xa,Qoe),e(Qoe,qvo),e(Xa,Gvo),e(Xa,Hoe),e(Hoe,Ovo),e(Xa,Xvo),e(Xa,Uoe),e(Uoe,Vvo),e(Xa,zvo),e(De,Wvo),e(De,ne),e(ne,p1),e(p1,Joe),e(Joe,Qvo),e(p1,Hvo),e(p1,y$),e(y$,Uvo),e(p1,Jvo),e(ne,Yvo),e(ne,_1),e(_1,Yoe),e(Yoe,Kvo),e(_1,Zvo),e(_1,w$),e(w$,eTo),e(_1,oTo),e(ne,rTo),e(ne,u1),e(u1,Koe),e(Koe,tTo),e(u1,aTo),e(u1,A$),e(A$,nTo),e(u1,sTo),e(ne,lTo),e(ne,b1),e(b1,Zoe),e(Zoe,iTo),e(b1,dTo),e(b1,L$),e(L$,cTo),e(b1,fTo),e(ne,mTo),e(ne,v1),e(v1,ere),e(ere,gTo),e(v1,hTo),e(v1,B$),e(B$,pTo),e(v1,_To),e(ne,uTo),e(ne,T1),e(T1,ore),e(ore,bTo),e(T1,vTo),e(T1,x$),e(x$,TTo),e(T1,FTo),e(ne,CTo),e(ne,F1),e(F1,rre),e(rre,MTo),e(F1,ETo),e(F1,k$),e(k$,yTo),e(F1,wTo),e(ne,ATo),e(ne,C1),e(C1,tre),e(tre,LTo),e(C1,BTo),e(C1,R$),e(R$,xTo),e(C1,kTo),e(ne,RTo),e(ne,M1),e(M1,are),e(are,STo),e(M1,PTo),e(M1,S$),e(S$,$To),e(M1,ITo),e(ne,DTo),e(ne,E1),e(E1,nre),e(nre,jTo),e(E1,NTo),e(E1,P$),e(P$,qTo),e(E1,GTo),e(ne,OTo),e(ne,y1),e(y1,sre),e(sre,XTo),e(y1,VTo),e(y1,$$),e($$,zTo),e(y1,WTo),e(ne,QTo),e(ne,w1),e(w1,lre),e(lre,HTo),e(w1,UTo),e(w1,I$),e(I$,JTo),e(w1,YTo),e(ne,KTo),e(ne,A1),e(A1,ire),e(ire,ZTo),e(A1,eFo),e(A1,D$),e(D$,oFo),e(A1,rFo),e(ne,tFo),e(ne,L1),e(L1,dre),e(dre,aFo),e(L1,nFo),e(L1,j$),e(j$,sFo),e(L1,lFo),e(ne,iFo),e(ne,B1),e(B1,cre),e(cre,dFo),e(B1,cFo),e(B1,N$),e(N$,fFo),e(B1,mFo),e(ne,gFo),e(ne,x1),e(x1,fre),e(fre,hFo),e(x1,pFo),e(x1,q$),e(q$,_Fo),e(x1,uFo),e(De,bFo),e(De,k1),e(k1,vFo),e(k1,mre),e(mre,TFo),e(k1,FFo),e(k1,gre),e(gre,CFo),e(De,MFo),e(De,hre),e(hre,EFo),e(De,yFo),g(q3,De,null),b(c,cBe,u),b(c,td,u),e(td,R1),e(R1,pre),g(G3,pre,null),e(td,wFo),e(td,_re),e(_re,AFo),b(c,fBe,u),b(c,Ko,u),g(O3,Ko,null),e(Ko,LFo),e(Ko,ad),e(ad,BFo),e(ad,ure),e(ure,xFo),e(ad,kFo),e(ad,bre),e(bre,RFo),e(ad,SFo),e(Ko,PFo),e(Ko,X3),e(X3,$Fo),e(X3,vre),e(vre,IFo),e(X3,DFo),e(Ko,jFo),e(Ko,zr),g(V3,zr,null),e(zr,NFo),e(zr,Tre),e(Tre,qFo),e(zr,GFo),e(zr,nd),e(nd,OFo),e(nd,Fre),e(Fre,XFo),e(nd,VFo),e(nd,Cre),e(Cre,zFo),e(nd,WFo),e(zr,QFo),e(zr,Mre),e(Mre,HFo),e(zr,UFo),g(z3,zr,null),e(Ko,JFo),e(Ko,je),g(W3,je,null),e(je,YFo),e(je,Ere),e(Ere,KFo),e(je,ZFo),e(je,Va),e(Va,e9o),e(Va,yre),e(yre,o9o),e(Va,r9o),e(Va,wre),e(wre,t9o),e(Va,a9o),e(Va,Are),e(Are,n9o),e(Va,s9o),e(je,l9o),e(je,A),e(A,S1),e(S1,Lre),e(Lre,i9o),e(S1,d9o),e(S1,G$),e(G$,c9o),e(S1,f9o),e(A,m9o),e(A,P1),e(P1,Bre),e(Bre,g9o),e(P1,h9o),e(P1,O$),e(O$,p9o),e(P1,_9o),e(A,u9o),e(A,$1),e($1,xre),e(xre,b9o),e($1,v9o),e($1,X$),e(X$,T9o),e($1,F9o),e(A,C9o),e(A,I1),e(I1,kre),e(kre,M9o),e(I1,E9o),e(I1,V$),e(V$,y9o),e(I1,w9o),e(A,A9o),e(A,D1),e(D1,Rre),e(Rre,L9o),e(D1,B9o),e(D1,z$),e(z$,x9o),e(D1,k9o),e(A,R9o),e(A,j1),e(j1,Sre),e(Sre,S9o),e(j1,P9o),e(j1,W$),e(W$,$9o),e(j1,I9o),e(A,D9o),e(A,N1),e(N1,Pre),e(Pre,j9o),e(N1,N9o),e(N1,Q$),e(Q$,q9o),e(N1,G9o),e(A,O9o),e(A,q1),e(q1,$re),e($re,X9o),e(q1,V9o),e(q1,H$),e(H$,z9o),e(q1,W9o),e(A,Q9o),e(A,G1),e(G1,Ire),e(Ire,H9o),e(G1,U9o),e(G1,U$),e(U$,J9o),e(G1,Y9o),e(A,K9o),e(A,O1),e(O1,Dre),e(Dre,Z9o),e(O1,eCo),e(O1,J$),e(J$,oCo),e(O1,rCo),e(A,tCo),e(A,X1),e(X1,jre),e(jre,aCo),e(X1,nCo),e(X1,Y$),e(Y$,sCo),e(X1,lCo),e(A,iCo),e(A,V1),e(V1,Nre),e(Nre,dCo),e(V1,cCo),e(V1,K$),e(K$,fCo),e(V1,mCo),e(A,gCo),e(A,z1),e(z1,qre),e(qre,hCo),e(z1,pCo),e(z1,Z$),e(Z$,_Co),e(z1,uCo),e(A,bCo),e(A,W1),e(W1,Gre),e(Gre,vCo),e(W1,TCo),e(W1,eI),e(eI,FCo),e(W1,CCo),e(A,MCo),e(A,Q1),e(Q1,Ore),e(Ore,ECo),e(Q1,yCo),e(Q1,oI),e(oI,wCo),e(Q1,ACo),e(A,LCo),e(A,H1),e(H1,Xre),e(Xre,BCo),e(H1,xCo),e(H1,rI),e(rI,kCo),e(H1,RCo),e(A,SCo),e(A,U1),e(U1,Vre),e(Vre,PCo),e(U1,$Co),e(U1,tI),e(tI,ICo),e(U1,DCo),e(A,jCo),e(A,J1),e(J1,zre),e(zre,NCo),e(J1,qCo),e(J1,aI),e(aI,GCo),e(J1,OCo),e(A,XCo),e(A,Y1),e(Y1,Wre),e(Wre,VCo),e(Y1,zCo),e(Y1,nI),e(nI,WCo),e(Y1,QCo),e(A,HCo),e(A,K1),e(K1,Qre),e(Qre,UCo),e(K1,JCo),e(K1,sI),e(sI,YCo),e(K1,KCo),e(A,ZCo),e(A,Z1),e(Z1,Hre),e(Hre,e4o),e(Z1,o4o),e(Z1,lI),e(lI,r4o),e(Z1,t4o),e(A,a4o),e(A,e2),e(e2,Ure),e(Ure,n4o),e(e2,s4o),e(e2,iI),e(iI,l4o),e(e2,i4o),e(A,d4o),e(A,o2),e(o2,Jre),e(Jre,c4o),e(o2,f4o),e(o2,dI),e(dI,m4o),e(o2,g4o),e(A,h4o),e(A,r2),e(r2,Yre),e(Yre,p4o),e(r2,_4o),e(r2,cI),e(cI,u4o),e(r2,b4o),e(A,v4o),e(A,t2),e(t2,Kre),e(Kre,T4o),e(t2,F4o),e(t2,fI),e(fI,C4o),e(t2,M4o),e(A,E4o),e(A,a2),e(a2,Zre),e(Zre,y4o),e(a2,w4o),e(a2,mI),e(mI,A4o),e(a2,L4o),e(A,B4o),e(A,n2),e(n2,ete),e(ete,x4o),e(n2,k4o),e(n2,gI),e(gI,R4o),e(n2,S4o),e(A,P4o),e(A,s2),e(s2,ote),e(ote,$4o),e(s2,I4o),e(s2,hI),e(hI,D4o),e(s2,j4o),e(A,N4o),e(A,l2),e(l2,rte),e(rte,q4o),e(l2,G4o),e(l2,pI),e(pI,O4o),e(l2,X4o),e(A,V4o),e(A,i2),e(i2,tte),e(tte,z4o),e(i2,W4o),e(i2,_I),e(_I,Q4o),e(i2,H4o),e(A,U4o),e(A,d2),e(d2,ate),e(ate,J4o),e(d2,Y4o),e(d2,uI),e(uI,K4o),e(d2,Z4o),e(A,eMo),e(A,c2),e(c2,nte),e(nte,oMo),e(c2,rMo),e(c2,bI),e(bI,tMo),e(c2,aMo),e(A,nMo),e(A,f2),e(f2,ste),e(ste,sMo),e(f2,lMo),e(f2,vI),e(vI,iMo),e(f2,dMo),e(A,cMo),e(A,m2),e(m2,lte),e(lte,fMo),e(m2,mMo),e(m2,TI),e(TI,gMo),e(m2,hMo),e(A,pMo),e(A,g2),e(g2,ite),e(ite,_Mo),e(g2,uMo),e(g2,FI),e(FI,bMo),e(g2,vMo),e(A,TMo),e(A,h2),e(h2,dte),e(dte,FMo),e(h2,CMo),e(h2,CI),e(CI,MMo),e(h2,EMo),e(A,yMo),e(A,p2),e(p2,cte),e(cte,wMo),e(p2,AMo),e(p2,MI),e(MI,LMo),e(p2,BMo),e(A,xMo),e(A,_2),e(_2,fte),e(fte,kMo),e(_2,RMo),e(_2,EI),e(EI,SMo),e(_2,PMo),e(A,$Mo),e(A,u2),e(u2,mte),e(mte,IMo),e(u2,DMo),e(u2,yI),e(yI,jMo),e(u2,NMo),e(A,qMo),e(A,b2),e(b2,gte),e(gte,GMo),e(b2,OMo),e(b2,wI),e(wI,XMo),e(b2,VMo),e(A,zMo),e(A,v2),e(v2,hte),e(hte,WMo),e(v2,QMo),e(v2,AI),e(AI,HMo),e(v2,UMo),e(A,JMo),e(A,T2),e(T2,pte),e(pte,YMo),e(T2,KMo),e(T2,LI),e(LI,ZMo),e(T2,eEo),e(A,oEo),e(A,F2),e(F2,_te),e(_te,rEo),e(F2,tEo),e(F2,BI),e(BI,aEo),e(F2,nEo),e(A,sEo),e(A,C2),e(C2,ute),e(ute,lEo),e(C2,iEo),e(C2,xI),e(xI,dEo),e(C2,cEo),e(A,fEo),e(A,M2),e(M2,bte),e(bte,mEo),e(M2,gEo),e(M2,kI),e(kI,hEo),e(M2,pEo),e(A,_Eo),e(A,E2),e(E2,vte),e(vte,uEo),e(E2,bEo),e(E2,RI),e(RI,vEo),e(E2,TEo),e(je,FEo),e(je,y2),e(y2,CEo),e(y2,Tte),e(Tte,MEo),e(y2,EEo),e(y2,Fte),e(Fte,yEo),e(je,wEo),e(je,Cte),e(Cte,AEo),e(je,LEo),g(Q3,je,null),b(c,mBe,u),b(c,sd,u),e(sd,w2),e(w2,Mte),g(H3,Mte,null),e(sd,BEo),e(sd,Ete),e(Ete,xEo),b(c,gBe,u),b(c,Zo,u),g(U3,Zo,null),e(Zo,kEo),e(Zo,ld),e(ld,REo),e(ld,yte),e(yte,SEo),e(ld,PEo),e(ld,wte),e(wte,$Eo),e(ld,IEo),e(Zo,DEo),e(Zo,J3),e(J3,jEo),e(J3,Ate),e(Ate,NEo),e(J3,qEo),e(Zo,GEo),e(Zo,Wr),g(Y3,Wr,null),e(Wr,OEo),e(Wr,Lte),e(Lte,XEo),e(Wr,VEo),e(Wr,id),e(id,zEo),e(id,Bte),e(Bte,WEo),e(id,QEo),e(id,xte),e(xte,HEo),e(id,UEo),e(Wr,JEo),e(Wr,kte),e(kte,YEo),e(Wr,KEo),g(K3,Wr,null),e(Zo,ZEo),e(Zo,Ne),g(Z3,Ne,null),e(Ne,e3o),e(Ne,Rte),e(Rte,o3o),e(Ne,r3o),e(Ne,za),e(za,t3o),e(za,Ste),e(Ste,a3o),e(za,n3o),e(za,Pte),e(Pte,s3o),e(za,l3o),e(za,$te),e($te,i3o),e(za,d3o),e(Ne,c3o),e(Ne,G),e(G,A2),e(A2,Ite),e(Ite,f3o),e(A2,m3o),e(A2,SI),e(SI,g3o),e(A2,h3o),e(G,p3o),e(G,L2),e(L2,Dte),e(Dte,_3o),e(L2,u3o),e(L2,PI),e(PI,b3o),e(L2,v3o),e(G,T3o),e(G,B2),e(B2,jte),e(jte,F3o),e(B2,C3o),e(B2,$I),e($I,M3o),e(B2,E3o),e(G,y3o),e(G,x2),e(x2,Nte),e(Nte,w3o),e(x2,A3o),e(x2,II),e(II,L3o),e(x2,B3o),e(G,x3o),e(G,k2),e(k2,qte),e(qte,k3o),e(k2,R3o),e(k2,DI),e(DI,S3o),e(k2,P3o),e(G,$3o),e(G,R2),e(R2,Gte),e(Gte,I3o),e(R2,D3o),e(R2,jI),e(jI,j3o),e(R2,N3o),e(G,q3o),e(G,S2),e(S2,Ote),e(Ote,G3o),e(S2,O3o),e(S2,NI),e(NI,X3o),e(S2,V3o),e(G,z3o),e(G,P2),e(P2,Xte),e(Xte,W3o),e(P2,Q3o),e(P2,qI),e(qI,H3o),e(P2,U3o),e(G,J3o),e(G,$2),e($2,Vte),e(Vte,Y3o),e($2,K3o),e($2,GI),e(GI,Z3o),e($2,eyo),e(G,oyo),e(G,I2),e(I2,zte),e(zte,ryo),e(I2,tyo),e(I2,OI),e(OI,ayo),e(I2,nyo),e(G,syo),e(G,D2),e(D2,Wte),e(Wte,lyo),e(D2,iyo),e(D2,XI),e(XI,dyo),e(D2,cyo),e(G,fyo),e(G,j2),e(j2,Qte),e(Qte,myo),e(j2,gyo),e(j2,VI),e(VI,hyo),e(j2,pyo),e(G,_yo),e(G,N2),e(N2,Hte),e(Hte,uyo),e(N2,byo),e(N2,zI),e(zI,vyo),e(N2,Tyo),e(G,Fyo),e(G,q2),e(q2,Ute),e(Ute,Cyo),e(q2,Myo),e(q2,WI),e(WI,Eyo),e(q2,yyo),e(G,wyo),e(G,G2),e(G2,Jte),e(Jte,Ayo),e(G2,Lyo),e(G2,QI),e(QI,Byo),e(G2,xyo),e(G,kyo),e(G,O2),e(O2,Yte),e(Yte,Ryo),e(O2,Syo),e(O2,HI),e(HI,Pyo),e(O2,$yo),e(G,Iyo),e(G,X2),e(X2,Kte),e(Kte,Dyo),e(X2,jyo),e(X2,UI),e(UI,Nyo),e(X2,qyo),e(G,Gyo),e(G,V2),e(V2,Zte),e(Zte,Oyo),e(V2,Xyo),e(V2,JI),e(JI,Vyo),e(V2,zyo),e(G,Wyo),e(G,z2),e(z2,eae),e(eae,Qyo),e(z2,Hyo),e(z2,YI),e(YI,Uyo),e(z2,Jyo),e(G,Yyo),e(G,W2),e(W2,oae),e(oae,Kyo),e(W2,Zyo),e(W2,KI),e(KI,ewo),e(W2,owo),e(G,rwo),e(G,Q2),e(Q2,rae),e(rae,two),e(Q2,awo),e(Q2,ZI),e(ZI,nwo),e(Q2,swo),e(G,lwo),e(G,H2),e(H2,tae),e(tae,iwo),e(H2,dwo),e(H2,eD),e(eD,cwo),e(H2,fwo),e(G,mwo),e(G,U2),e(U2,aae),e(aae,gwo),e(U2,hwo),e(U2,oD),e(oD,pwo),e(U2,_wo),e(G,uwo),e(G,J2),e(J2,nae),e(nae,bwo),e(J2,vwo),e(J2,rD),e(rD,Two),e(J2,Fwo),e(G,Cwo),e(G,Y2),e(Y2,sae),e(sae,Mwo),e(Y2,Ewo),e(Y2,tD),e(tD,ywo),e(Y2,wwo),e(G,Awo),e(G,K2),e(K2,lae),e(lae,Lwo),e(K2,Bwo),e(K2,aD),e(aD,xwo),e(K2,kwo),e(G,Rwo),e(G,Z2),e(Z2,iae),e(iae,Swo),e(Z2,Pwo),e(Z2,nD),e(nD,$wo),e(Z2,Iwo),e(G,Dwo),e(G,eb),e(eb,dae),e(dae,jwo),e(eb,Nwo),e(eb,sD),e(sD,qwo),e(eb,Gwo),e(Ne,Owo),e(Ne,ob),e(ob,Xwo),e(ob,cae),e(cae,Vwo),e(ob,zwo),e(ob,fae),e(fae,Wwo),e(Ne,Qwo),e(Ne,mae),e(mae,Hwo),e(Ne,Uwo),g(ey,Ne,null),b(c,hBe,u),b(c,dd,u),e(dd,rb),e(rb,gae),g(oy,gae,null),e(dd,Jwo),e(dd,hae),e(hae,Ywo),b(c,pBe,u),b(c,er,u),g(ry,er,null),e(er,Kwo),e(er,cd),e(cd,Zwo),e(cd,pae),e(pae,e6o),e(cd,o6o),e(cd,_ae),e(_ae,r6o),e(cd,t6o),e(er,a6o),e(er,ty),e(ty,n6o),e(ty,uae),e(uae,s6o),e(ty,l6o),e(er,i6o),e(er,Qr),g(ay,Qr,null),e(Qr,d6o),e(Qr,bae),e(bae,c6o),e(Qr,f6o),e(Qr,fd),e(fd,m6o),e(fd,vae),e(vae,g6o),e(fd,h6o),e(fd,Tae),e(Tae,p6o),e(fd,_6o),e(Qr,u6o),e(Qr,Fae),e(Fae,b6o),e(Qr,v6o),g(ny,Qr,null),e(er,T6o),e(er,qe),g(sy,qe,null),e(qe,F6o),e(qe,Cae),e(Cae,C6o),e(qe,M6o),e(qe,Wa),e(Wa,E6o),e(Wa,Mae),e(Mae,y6o),e(Wa,w6o),e(Wa,Eae),e(Eae,A6o),e(Wa,L6o),e(Wa,yae),e(yae,B6o),e(Wa,x6o),e(qe,k6o),e(qe,na),e(na,tb),e(tb,wae),e(wae,R6o),e(tb,S6o),e(tb,lD),e(lD,P6o),e(tb,$6o),e(na,I6o),e(na,ab),e(ab,Aae),e(Aae,D6o),e(ab,j6o),e(ab,iD),e(iD,N6o),e(ab,q6o),e(na,G6o),e(na,nb),e(nb,Lae),e(Lae,O6o),e(nb,X6o),e(nb,dD),e(dD,V6o),e(nb,z6o),e(na,W6o),e(na,sb),e(sb,Bae),e(Bae,Q6o),e(sb,H6o),e(sb,cD),e(cD,U6o),e(sb,J6o),e(na,Y6o),e(na,lb),e(lb,xae),e(xae,K6o),e(lb,Z6o),e(lb,fD),e(fD,eAo),e(lb,oAo),e(qe,rAo),e(qe,ib),e(ib,tAo),e(ib,kae),e(kae,aAo),e(ib,nAo),e(ib,Rae),e(Rae,sAo),e(qe,lAo),e(qe,Sae),e(Sae,iAo),e(qe,dAo),g(ly,qe,null),b(c,_Be,u),b(c,md,u),e(md,db),e(db,Pae),g(iy,Pae,null),e(md,cAo),e(md,$ae),e($ae,fAo),b(c,uBe,u),b(c,or,u),g(dy,or,null),e(or,mAo),e(or,gd),e(gd,gAo),e(gd,Iae),e(Iae,hAo),e(gd,pAo),e(gd,Dae),e(Dae,_Ao),e(gd,uAo),e(or,bAo),e(or,cy),e(cy,vAo),e(cy,jae),e(jae,TAo),e(cy,FAo),e(or,CAo),e(or,Hr),g(fy,Hr,null),e(Hr,MAo),e(Hr,Nae),e(Nae,EAo),e(Hr,yAo),e(Hr,hd),e(hd,wAo),e(hd,qae),e(qae,AAo),e(hd,LAo),e(hd,Gae),e(Gae,BAo),e(hd,xAo),e(Hr,kAo),e(Hr,Oae),e(Oae,RAo),e(Hr,SAo),g(my,Hr,null),e(or,PAo),e(or,Ge),g(gy,Ge,null),e(Ge,$Ao),e(Ge,Xae),e(Xae,IAo),e(Ge,DAo),e(Ge,Qa),e(Qa,jAo),e(Qa,Vae),e(Vae,NAo),e(Qa,qAo),e(Qa,zae),e(zae,GAo),e(Qa,OAo),e(Qa,Wae),e(Wae,XAo),e(Qa,VAo),e(Ge,zAo),e(Ge,N),e(N,cb),e(cb,Qae),e(Qae,WAo),e(cb,QAo),e(cb,mD),e(mD,HAo),e(cb,UAo),e(N,JAo),e(N,fb),e(fb,Hae),e(Hae,YAo),e(fb,KAo),e(fb,gD),e(gD,ZAo),e(fb,e0o),e(N,o0o),e(N,mb),e(mb,Uae),e(Uae,r0o),e(mb,t0o),e(mb,hD),e(hD,a0o),e(mb,n0o),e(N,s0o),e(N,gb),e(gb,Jae),e(Jae,l0o),e(gb,i0o),e(gb,pD),e(pD,d0o),e(gb,c0o),e(N,f0o),e(N,hb),e(hb,Yae),e(Yae,m0o),e(hb,g0o),e(hb,_D),e(_D,h0o),e(hb,p0o),e(N,_0o),e(N,pb),e(pb,Kae),e(Kae,u0o),e(pb,b0o),e(pb,uD),e(uD,v0o),e(pb,T0o),e(N,F0o),e(N,_b),e(_b,Zae),e(Zae,C0o),e(_b,M0o),e(_b,bD),e(bD,E0o),e(_b,y0o),e(N,w0o),e(N,ub),e(ub,ene),e(ene,A0o),e(ub,L0o),e(ub,vD),e(vD,B0o),e(ub,x0o),e(N,k0o),e(N,bb),e(bb,one),e(one,R0o),e(bb,S0o),e(bb,TD),e(TD,P0o),e(bb,$0o),e(N,I0o),e(N,vb),e(vb,rne),e(rne,D0o),e(vb,j0o),e(vb,FD),e(FD,N0o),e(vb,q0o),e(N,G0o),e(N,Tb),e(Tb,tne),e(tne,O0o),e(Tb,X0o),e(Tb,CD),e(CD,V0o),e(Tb,z0o),e(N,W0o),e(N,Fb),e(Fb,ane),e(ane,Q0o),e(Fb,H0o),e(Fb,MD),e(MD,U0o),e(Fb,J0o),e(N,Y0o),e(N,Cb),e(Cb,nne),e(nne,K0o),e(Cb,Z0o),e(Cb,ED),e(ED,eLo),e(Cb,oLo),e(N,rLo),e(N,Mb),e(Mb,sne),e(sne,tLo),e(Mb,aLo),e(Mb,yD),e(yD,nLo),e(Mb,sLo),e(N,lLo),e(N,Eb),e(Eb,lne),e(lne,iLo),e(Eb,dLo),e(Eb,wD),e(wD,cLo),e(Eb,fLo),e(N,mLo),e(N,yb),e(yb,ine),e(ine,gLo),e(yb,hLo),e(yb,AD),e(AD,pLo),e(yb,_Lo),e(N,uLo),e(N,wb),e(wb,dne),e(dne,bLo),e(wb,vLo),e(wb,LD),e(LD,TLo),e(wb,FLo),e(N,CLo),e(N,Ab),e(Ab,cne),e(cne,MLo),e(Ab,ELo),e(Ab,BD),e(BD,yLo),e(Ab,wLo),e(N,ALo),e(N,Lb),e(Lb,fne),e(fne,LLo),e(Lb,BLo),e(Lb,xD),e(xD,xLo),e(Lb,kLo),e(N,RLo),e(N,Bb),e(Bb,mne),e(mne,SLo),e(Bb,PLo),e(Bb,kD),e(kD,$Lo),e(Bb,ILo),e(N,DLo),e(N,xb),e(xb,gne),e(gne,jLo),e(xb,NLo),e(xb,RD),e(RD,qLo),e(xb,GLo),e(N,OLo),e(N,kb),e(kb,hne),e(hne,XLo),e(kb,VLo),e(kb,SD),e(SD,zLo),e(kb,WLo),e(N,QLo),e(N,Rb),e(Rb,pne),e(pne,HLo),e(Rb,ULo),e(Rb,PD),e(PD,JLo),e(Rb,YLo),e(N,KLo),e(N,Sb),e(Sb,_ne),e(_ne,ZLo),e(Sb,e8o),e(Sb,$D),e($D,o8o),e(Sb,r8o),e(N,t8o),e(N,Pb),e(Pb,une),e(une,a8o),e(Pb,n8o),e(Pb,ID),e(ID,s8o),e(Pb,l8o),e(N,i8o),e(N,$b),e($b,bne),e(bne,d8o),e($b,c8o),e($b,DD),e(DD,f8o),e($b,m8o),e(N,g8o),e(N,Ib),e(Ib,vne),e(vne,h8o),e(Ib,p8o),e(Ib,jD),e(jD,_8o),e(Ib,u8o),e(N,b8o),e(N,Db),e(Db,Tne),e(Tne,v8o),e(Db,T8o),e(Db,ND),e(ND,F8o),e(Db,C8o),e(N,M8o),e(N,jb),e(jb,Fne),e(Fne,E8o),e(jb,y8o),e(jb,qD),e(qD,w8o),e(jb,A8o),e(N,L8o),e(N,Nb),e(Nb,Cne),e(Cne,B8o),e(Nb,x8o),e(Nb,GD),e(GD,k8o),e(Nb,R8o),e(N,S8o),e(N,qb),e(qb,Mne),e(Mne,P8o),e(qb,$8o),e(qb,OD),e(OD,I8o),e(qb,D8o),e(N,j8o),e(N,Gb),e(Gb,Ene),e(Ene,N8o),e(Gb,q8o),e(Gb,XD),e(XD,G8o),e(Gb,O8o),e(N,X8o),e(N,Ob),e(Ob,yne),e(yne,V8o),e(Ob,z8o),e(Ob,VD),e(VD,W8o),e(Ob,Q8o),e(Ge,H8o),e(Ge,Xb),e(Xb,U8o),e(Xb,wne),e(wne,J8o),e(Xb,Y8o),e(Xb,Ane),e(Ane,K8o),e(Ge,Z8o),e(Ge,Lne),e(Lne,e7o),e(Ge,o7o),g(hy,Ge,null),b(c,bBe,u),b(c,pd,u),e(pd,Vb),e(Vb,Bne),g(py,Bne,null),e(pd,r7o),e(pd,xne),e(xne,t7o),b(c,vBe,u),b(c,rr,u),g(_y,rr,null),e(rr,a7o),e(rr,_d),e(_d,n7o),e(_d,kne),e(kne,s7o),e(_d,l7o),e(_d,Rne),e(Rne,i7o),e(_d,d7o),e(rr,c7o),e(rr,uy),e(uy,f7o),e(uy,Sne),e(Sne,m7o),e(uy,g7o),e(rr,h7o),e(rr,Ur),g(by,Ur,null),e(Ur,p7o),e(Ur,Pne),e(Pne,_7o),e(Ur,u7o),e(Ur,ud),e(ud,b7o),e(ud,$ne),e($ne,v7o),e(ud,T7o),e(ud,Ine),e(Ine,F7o),e(ud,C7o),e(Ur,M7o),e(Ur,Dne),e(Dne,E7o),e(Ur,y7o),g(vy,Ur,null),e(rr,w7o),e(rr,Oe),g(Ty,Oe,null),e(Oe,A7o),e(Oe,jne),e(jne,L7o),e(Oe,B7o),e(Oe,Ha),e(Ha,x7o),e(Ha,Nne),e(Nne,k7o),e(Ha,R7o),e(Ha,qne),e(qne,S7o),e(Ha,P7o),e(Ha,Gne),e(Gne,$7o),e(Ha,I7o),e(Oe,D7o),e(Oe,R),e(R,zb),e(zb,One),e(One,j7o),e(zb,N7o),e(zb,zD),e(zD,q7o),e(zb,G7o),e(R,O7o),e(R,Wb),e(Wb,Xne),e(Xne,X7o),e(Wb,V7o),e(Wb,WD),e(WD,z7o),e(Wb,W7o),e(R,Q7o),e(R,Qb),e(Qb,Vne),e(Vne,H7o),e(Qb,U7o),e(Qb,QD),e(QD,J7o),e(Qb,Y7o),e(R,K7o),e(R,Hb),e(Hb,zne),e(zne,Z7o),e(Hb,eBo),e(Hb,HD),e(HD,oBo),e(Hb,rBo),e(R,tBo),e(R,Ub),e(Ub,Wne),e(Wne,aBo),e(Ub,nBo),e(Ub,UD),e(UD,sBo),e(Ub,lBo),e(R,iBo),e(R,Jb),e(Jb,Qne),e(Qne,dBo),e(Jb,cBo),e(Jb,JD),e(JD,fBo),e(Jb,mBo),e(R,gBo),e(R,Yb),e(Yb,Hne),e(Hne,hBo),e(Yb,pBo),e(Yb,YD),e(YD,_Bo),e(Yb,uBo),e(R,bBo),e(R,Kb),e(Kb,Une),e(Une,vBo),e(Kb,TBo),e(Kb,KD),e(KD,FBo),e(Kb,CBo),e(R,MBo),e(R,Zb),e(Zb,Jne),e(Jne,EBo),e(Zb,yBo),e(Zb,ZD),e(ZD,wBo),e(Zb,ABo),e(R,LBo),e(R,e5),e(e5,Yne),e(Yne,BBo),e(e5,xBo),e(e5,ej),e(ej,kBo),e(e5,RBo),e(R,SBo),e(R,o5),e(o5,Kne),e(Kne,PBo),e(o5,$Bo),e(o5,oj),e(oj,IBo),e(o5,DBo),e(R,jBo),e(R,r5),e(r5,Zne),e(Zne,NBo),e(r5,qBo),e(r5,rj),e(rj,GBo),e(r5,OBo),e(R,XBo),e(R,t5),e(t5,ese),e(ese,VBo),e(t5,zBo),e(t5,tj),e(tj,WBo),e(t5,QBo),e(R,HBo),e(R,a5),e(a5,ose),e(ose,UBo),e(a5,JBo),e(a5,aj),e(aj,YBo),e(a5,KBo),e(R,ZBo),e(R,n5),e(n5,rse),e(rse,exo),e(n5,oxo),e(n5,nj),e(nj,rxo),e(n5,txo),e(R,axo),e(R,s5),e(s5,tse),e(tse,nxo),e(s5,sxo),e(s5,sj),e(sj,lxo),e(s5,ixo),e(R,dxo),e(R,l5),e(l5,ase),e(ase,cxo),e(l5,fxo),e(l5,lj),e(lj,mxo),e(l5,gxo),e(R,hxo),e(R,i5),e(i5,nse),e(nse,pxo),e(i5,_xo),e(i5,ij),e(ij,uxo),e(i5,bxo),e(R,vxo),e(R,d5),e(d5,sse),e(sse,Txo),e(d5,Fxo),e(d5,dj),e(dj,Cxo),e(d5,Mxo),e(R,Exo),e(R,c5),e(c5,lse),e(lse,yxo),e(c5,wxo),e(c5,cj),e(cj,Axo),e(c5,Lxo),e(R,Bxo),e(R,f5),e(f5,ise),e(ise,xxo),e(f5,kxo),e(f5,fj),e(fj,Rxo),e(f5,Sxo),e(R,Pxo),e(R,m5),e(m5,dse),e(dse,$xo),e(m5,Ixo),e(m5,mj),e(mj,Dxo),e(m5,jxo),e(R,Nxo),e(R,g5),e(g5,cse),e(cse,qxo),e(g5,Gxo),e(g5,gj),e(gj,Oxo),e(g5,Xxo),e(R,Vxo),e(R,h5),e(h5,fse),e(fse,zxo),e(h5,Wxo),e(h5,hj),e(hj,Qxo),e(h5,Hxo),e(R,Uxo),e(R,p5),e(p5,mse),e(mse,Jxo),e(p5,Yxo),e(p5,pj),e(pj,Kxo),e(p5,Zxo),e(R,eko),e(R,_5),e(_5,gse),e(gse,oko),e(_5,rko),e(_5,_j),e(_j,tko),e(_5,ako),e(R,nko),e(R,u5),e(u5,hse),e(hse,sko),e(u5,lko),e(u5,uj),e(uj,iko),e(u5,dko),e(R,cko),e(R,b5),e(b5,pse),e(pse,fko),e(b5,mko),e(b5,bj),e(bj,gko),e(b5,hko),e(R,pko),e(R,v5),e(v5,_se),e(_se,_ko),e(v5,uko),e(v5,vj),e(vj,bko),e(v5,vko),e(R,Tko),e(R,T5),e(T5,use),e(use,Fko),e(T5,Cko),e(T5,Tj),e(Tj,Mko),e(T5,Eko),e(R,yko),e(R,F5),e(F5,bse),e(bse,wko),e(F5,Ako),e(F5,Fj),e(Fj,Lko),e(F5,Bko),e(R,xko),e(R,C5),e(C5,vse),e(vse,kko),e(C5,Rko),e(C5,Cj),e(Cj,Sko),e(C5,Pko),e(R,$ko),e(R,M5),e(M5,Tse),e(Tse,Iko),e(M5,Dko),e(M5,Mj),e(Mj,jko),e(M5,Nko),e(R,qko),e(R,E5),e(E5,Fse),e(Fse,Gko),e(E5,Oko),e(E5,Ej),e(Ej,Xko),e(E5,Vko),e(R,zko),e(R,y5),e(y5,Cse),e(Cse,Wko),e(y5,Qko),e(y5,yj),e(yj,Hko),e(y5,Uko),e(R,Jko),e(R,w5),e(w5,Mse),e(Mse,Yko),e(w5,Kko),e(w5,wj),e(wj,Zko),e(w5,eRo),e(R,oRo),e(R,A5),e(A5,Ese),e(Ese,rRo),e(A5,tRo),e(A5,Aj),e(Aj,aRo),e(A5,nRo),e(R,sRo),e(R,L5),e(L5,yse),e(yse,lRo),e(L5,iRo),e(L5,Lj),e(Lj,dRo),e(L5,cRo),e(R,fRo),e(R,B5),e(B5,wse),e(wse,mRo),e(B5,gRo),e(B5,Bj),e(Bj,hRo),e(B5,pRo),e(Oe,_Ro),e(Oe,x5),e(x5,uRo),e(x5,Ase),e(Ase,bRo),e(x5,vRo),e(x5,Lse),e(Lse,TRo),e(Oe,FRo),e(Oe,Bse),e(Bse,CRo),e(Oe,MRo),g(Fy,Oe,null),b(c,TBe,u),b(c,bd,u),e(bd,k5),e(k5,xse),g(Cy,xse,null),e(bd,ERo),e(bd,kse),e(kse,yRo),b(c,FBe,u),b(c,tr,u),g(My,tr,null),e(tr,wRo),e(tr,vd),e(vd,ARo),e(vd,Rse),e(Rse,LRo),e(vd,BRo),e(vd,Sse),e(Sse,xRo),e(vd,kRo),e(tr,RRo),e(tr,Ey),e(Ey,SRo),e(Ey,Pse),e(Pse,PRo),e(Ey,$Ro),e(tr,IRo),e(tr,Jr),g(yy,Jr,null),e(Jr,DRo),e(Jr,$se),e($se,jRo),e(Jr,NRo),e(Jr,Td),e(Td,qRo),e(Td,Ise),e(Ise,GRo),e(Td,ORo),e(Td,Dse),e(Dse,XRo),e(Td,VRo),e(Jr,zRo),e(Jr,jse),e(jse,WRo),e(Jr,QRo),g(wy,Jr,null),e(tr,HRo),e(tr,Xe),g(Ay,Xe,null),e(Xe,URo),e(Xe,Nse),e(Nse,JRo),e(Xe,YRo),e(Xe,Ua),e(Ua,KRo),e(Ua,qse),e(qse,ZRo),e(Ua,eSo),e(Ua,Gse),e(Gse,oSo),e(Ua,rSo),e(Ua,Ose),e(Ose,tSo),e(Ua,aSo),e(Xe,nSo),e(Xe,Xse),e(Xse,R5),e(R5,Vse),e(Vse,sSo),e(R5,lSo),e(R5,xj),e(xj,iSo),e(R5,dSo),e(Xe,cSo),e(Xe,S5),e(S5,fSo),e(S5,zse),e(zse,mSo),e(S5,gSo),e(S5,Wse),e(Wse,hSo),e(Xe,pSo),e(Xe,Qse),e(Qse,_So),e(Xe,uSo),g(Ly,Xe,null),b(c,CBe,u),b(c,Fd,u),e(Fd,P5),e(P5,Hse),g(By,Hse,null),e(Fd,bSo),e(Fd,Use),e(Use,vSo),b(c,MBe,u),b(c,ar,u),g(xy,ar,null),e(ar,TSo),e(ar,Cd),e(Cd,FSo),e(Cd,Jse),e(Jse,CSo),e(Cd,MSo),e(Cd,Yse),e(Yse,ESo),e(Cd,ySo),e(ar,wSo),e(ar,ky),e(ky,ASo),e(ky,Kse),e(Kse,LSo),e(ky,BSo),e(ar,xSo),e(ar,Yr),g(Ry,Yr,null),e(Yr,kSo),e(Yr,Zse),e(Zse,RSo),e(Yr,SSo),e(Yr,Md),e(Md,PSo),e(Md,ele),e(ele,$So),e(Md,ISo),e(Md,ole),e(ole,DSo),e(Md,jSo),e(Yr,NSo),e(Yr,rle),e(rle,qSo),e(Yr,GSo),g(Sy,Yr,null),e(ar,OSo),e(ar,Ve),g(Py,Ve,null),e(Ve,XSo),e(Ve,tle),e(tle,VSo),e(Ve,zSo),e(Ve,Ja),e(Ja,WSo),e(Ja,ale),e(ale,QSo),e(Ja,HSo),e(Ja,nle),e(nle,USo),e(Ja,JSo),e(Ja,sle),e(sle,YSo),e(Ja,KSo),e(Ve,ZSo),e(Ve,he),e(he,$5),e($5,lle),e(lle,ePo),e($5,oPo),e($5,kj),e(kj,rPo),e($5,tPo),e(he,aPo),e(he,I5),e(I5,ile),e(ile,nPo),e(I5,sPo),e(I5,Rj),e(Rj,lPo),e(I5,iPo),e(he,dPo),e(he,Ps),e(Ps,dle),e(dle,cPo),e(Ps,fPo),e(Ps,Sj),e(Sj,mPo),e(Ps,gPo),e(Ps,Pj),e(Pj,hPo),e(Ps,pPo),e(he,_Po),e(he,D5),e(D5,cle),e(cle,uPo),e(D5,bPo),e(D5,$j),e($j,vPo),e(D5,TPo),e(he,FPo),e(he,la),e(la,fle),e(fle,CPo),e(la,MPo),e(la,Ij),e(Ij,EPo),e(la,yPo),e(la,Dj),e(Dj,wPo),e(la,APo),e(la,jj),e(jj,LPo),e(la,BPo),e(he,xPo),e(he,j5),e(j5,mle),e(mle,kPo),e(j5,RPo),e(j5,Nj),e(Nj,SPo),e(j5,PPo),e(he,$Po),e(he,N5),e(N5,gle),e(gle,IPo),e(N5,DPo),e(N5,qj),e(qj,jPo),e(N5,NPo),e(he,qPo),e(he,q5),e(q5,hle),e(hle,GPo),e(q5,OPo),e(q5,Gj),e(Gj,XPo),e(q5,VPo),e(he,zPo),e(he,G5),e(G5,ple),e(ple,WPo),e(G5,QPo),e(G5,Oj),e(Oj,HPo),e(G5,UPo),e(he,JPo),e(he,O5),e(O5,_le),e(_le,YPo),e(O5,KPo),e(O5,Xj),e(Xj,ZPo),e(O5,e$o),e(Ve,o$o),e(Ve,X5),e(X5,r$o),e(X5,ule),e(ule,t$o),e(X5,a$o),e(X5,ble),e(ble,n$o),e(Ve,s$o),e(Ve,vle),e(vle,l$o),e(Ve,i$o),g($y,Ve,null),b(c,EBe,u),b(c,Ed,u),e(Ed,V5),e(V5,Tle),g(Iy,Tle,null),e(Ed,d$o),e(Ed,Fle),e(Fle,c$o),b(c,yBe,u),b(c,nr,u),g(Dy,nr,null),e(nr,f$o),e(nr,yd),e(yd,m$o),e(yd,Cle),e(Cle,g$o),e(yd,h$o),e(yd,Mle),e(Mle,p$o),e(yd,_$o),e(nr,u$o),e(nr,jy),e(jy,b$o),e(jy,Ele),e(Ele,v$o),e(jy,T$o),e(nr,F$o),e(nr,Kr),g(Ny,Kr,null),e(Kr,C$o),e(Kr,yle),e(yle,M$o),e(Kr,E$o),e(Kr,wd),e(wd,y$o),e(wd,wle),e(wle,w$o),e(wd,A$o),e(wd,Ale),e(Ale,L$o),e(wd,B$o),e(Kr,x$o),e(Kr,Lle),e(Lle,k$o),e(Kr,R$o),g(qy,Kr,null),e(nr,S$o),e(nr,ze),g(Gy,ze,null),e(ze,P$o),e(ze,Ble),e(Ble,$$o),e(ze,I$o),e(ze,Ya),e(Ya,D$o),e(Ya,xle),e(xle,j$o),e(Ya,N$o),e(Ya,kle),e(kle,q$o),e(Ya,G$o),e(Ya,Rle),e(Rle,O$o),e(Ya,X$o),e(ze,V$o),e(ze,Sle),e(Sle,z5),e(z5,Ple),e(Ple,z$o),e(z5,W$o),e(z5,Vj),e(Vj,Q$o),e(z5,H$o),e(ze,U$o),e(ze,W5),e(W5,J$o),e(W5,$le),e($le,Y$o),e(W5,K$o),e(W5,Ile),e(Ile,Z$o),e(ze,eIo),e(ze,Dle),e(Dle,oIo),e(ze,rIo),g(Oy,ze,null),b(c,wBe,u),b(c,Ad,u),e(Ad,Q5),e(Q5,jle),g(Xy,jle,null),e(Ad,tIo),e(Ad,Nle),e(Nle,aIo),b(c,ABe,u),b(c,sr,u),g(Vy,sr,null),e(sr,nIo),e(sr,Ld),e(Ld,sIo),e(Ld,qle),e(qle,lIo),e(Ld,iIo),e(Ld,Gle),e(Gle,dIo),e(Ld,cIo),e(sr,fIo),e(sr,zy),e(zy,mIo),e(zy,Ole),e(Ole,gIo),e(zy,hIo),e(sr,pIo),e(sr,Zr),g(Wy,Zr,null),e(Zr,_Io),e(Zr,Xle),e(Xle,uIo),e(Zr,bIo),e(Zr,Bd),e(Bd,vIo),e(Bd,Vle),e(Vle,TIo),e(Bd,FIo),e(Bd,zle),e(zle,CIo),e(Bd,MIo),e(Zr,EIo),e(Zr,Wle),e(Wle,yIo),e(Zr,wIo),g(Qy,Zr,null),e(sr,AIo),e(sr,We),g(Hy,We,null),e(We,LIo),e(We,Qle),e(Qle,BIo),e(We,xIo),e(We,Ka),e(Ka,kIo),e(Ka,Hle),e(Hle,RIo),e(Ka,SIo),e(Ka,Ule),e(Ule,PIo),e(Ka,$Io),e(Ka,Jle),e(Jle,IIo),e(Ka,DIo),e(We,jIo),e(We,Le),e(Le,H5),e(H5,Yle),e(Yle,NIo),e(H5,qIo),e(H5,zj),e(zj,GIo),e(H5,OIo),e(Le,XIo),e(Le,U5),e(U5,Kle),e(Kle,VIo),e(U5,zIo),e(U5,Wj),e(Wj,WIo),e(U5,QIo),e(Le,HIo),e(Le,J5),e(J5,Zle),e(Zle,UIo),e(J5,JIo),e(J5,Qj),e(Qj,YIo),e(J5,KIo),e(Le,ZIo),e(Le,Y5),e(Y5,eie),e(eie,eDo),e(Y5,oDo),e(Y5,Hj),e(Hj,rDo),e(Y5,tDo),e(Le,aDo),e(Le,K5),e(K5,oie),e(oie,nDo),e(K5,sDo),e(K5,Uj),e(Uj,lDo),e(K5,iDo),e(Le,dDo),e(Le,Z5),e(Z5,rie),e(rie,cDo),e(Z5,fDo),e(Z5,Jj),e(Jj,mDo),e(Z5,gDo),e(Le,hDo),e(Le,ev),e(ev,tie),e(tie,pDo),e(ev,_Do),e(ev,Yj),e(Yj,uDo),e(ev,bDo),e(Le,vDo),e(Le,ov),e(ov,aie),e(aie,TDo),e(ov,FDo),e(ov,Kj),e(Kj,CDo),e(ov,MDo),e(We,EDo),e(We,rv),e(rv,yDo),e(rv,nie),e(nie,wDo),e(rv,ADo),e(rv,sie),e(sie,LDo),e(We,BDo),e(We,lie),e(lie,xDo),e(We,kDo),g(Uy,We,null),b(c,LBe,u),b(c,xd,u),e(xd,tv),e(tv,iie),g(Jy,iie,null),e(xd,RDo),e(xd,die),e(die,SDo),b(c,BBe,u),b(c,lr,u),g(Yy,lr,null),e(lr,PDo),e(lr,kd),e(kd,$Do),e(kd,cie),e(cie,IDo),e(kd,DDo),e(kd,fie),e(fie,jDo),e(kd,NDo),e(lr,qDo),e(lr,Ky),e(Ky,GDo),e(Ky,mie),e(mie,ODo),e(Ky,XDo),e(lr,VDo),e(lr,et),g(Zy,et,null),e(et,zDo),e(et,gie),e(gie,WDo),e(et,QDo),e(et,Rd),e(Rd,HDo),e(Rd,hie),e(hie,UDo),e(Rd,JDo),e(Rd,pie),e(pie,YDo),e(Rd,KDo),e(et,ZDo),e(et,_ie),e(_ie,ejo),e(et,ojo),g(ew,et,null),e(lr,rjo),e(lr,Qe),g(ow,Qe,null),e(Qe,tjo),e(Qe,uie),e(uie,ajo),e(Qe,njo),e(Qe,Za),e(Za,sjo),e(Za,bie),e(bie,ljo),e(Za,ijo),e(Za,vie),e(vie,djo),e(Za,cjo),e(Za,Tie),e(Tie,fjo),e(Za,mjo),e(Qe,gjo),e(Qe,en),e(en,av),e(av,Fie),e(Fie,hjo),e(av,pjo),e(av,Zj),e(Zj,_jo),e(av,ujo),e(en,bjo),e(en,nv),e(nv,Cie),e(Cie,vjo),e(nv,Tjo),e(nv,eN),e(eN,Fjo),e(nv,Cjo),e(en,Mjo),e(en,sv),e(sv,Mie),e(Mie,Ejo),e(sv,yjo),e(sv,oN),e(oN,wjo),e(sv,Ajo),e(en,Ljo),e(en,lv),e(lv,Eie),e(Eie,Bjo),e(lv,xjo),e(lv,rN),e(rN,kjo),e(lv,Rjo),e(Qe,Sjo),e(Qe,iv),e(iv,Pjo),e(iv,yie),e(yie,$jo),e(iv,Ijo),e(iv,wie),e(wie,Djo),e(Qe,jjo),e(Qe,Aie),e(Aie,Njo),e(Qe,qjo),g(rw,Qe,null),b(c,xBe,u),b(c,Sd,u),e(Sd,dv),e(dv,Lie),g(tw,Lie,null),e(Sd,Gjo),e(Sd,Bie),e(Bie,Ojo),b(c,kBe,u),b(c,ir,u),g(aw,ir,null),e(ir,Xjo),e(ir,Pd),e(Pd,Vjo),e(Pd,xie),e(xie,zjo),e(Pd,Wjo),e(Pd,kie),e(kie,Qjo),e(Pd,Hjo),e(ir,Ujo),e(ir,nw),e(nw,Jjo),e(nw,Rie),e(Rie,Yjo),e(nw,Kjo),e(ir,Zjo),e(ir,ot),g(sw,ot,null),e(ot,eNo),e(ot,Sie),e(Sie,oNo),e(ot,rNo),e(ot,$d),e($d,tNo),e($d,Pie),e(Pie,aNo),e($d,nNo),e($d,$ie),e($ie,sNo),e($d,lNo),e(ot,iNo),e(ot,Iie),e(Iie,dNo),e(ot,cNo),g(lw,ot,null),e(ir,fNo),e(ir,He),g(iw,He,null),e(He,mNo),e(He,Die),e(Die,gNo),e(He,hNo),e(He,on),e(on,pNo),e(on,jie),e(jie,_No),e(on,uNo),e(on,Nie),e(Nie,bNo),e(on,vNo),e(on,qie),e(qie,TNo),e(on,FNo),e(He,CNo),e(He,Be),e(Be,cv),e(cv,Gie),e(Gie,MNo),e(cv,ENo),e(cv,tN),e(tN,yNo),e(cv,wNo),e(Be,ANo),e(Be,fv),e(fv,Oie),e(Oie,LNo),e(fv,BNo),e(fv,aN),e(aN,xNo),e(fv,kNo),e(Be,RNo),e(Be,mv),e(mv,Xie),e(Xie,SNo),e(mv,PNo),e(mv,nN),e(nN,$No),e(mv,INo),e(Be,DNo),e(Be,gv),e(gv,Vie),e(Vie,jNo),e(gv,NNo),e(gv,sN),e(sN,qNo),e(gv,GNo),e(Be,ONo),e(Be,hv),e(hv,zie),e(zie,XNo),e(hv,VNo),e(hv,lN),e(lN,zNo),e(hv,WNo),e(Be,QNo),e(Be,pv),e(pv,Wie),e(Wie,HNo),e(pv,UNo),e(pv,iN),e(iN,JNo),e(pv,YNo),e(Be,KNo),e(Be,_v),e(_v,Qie),e(Qie,ZNo),e(_v,eqo),e(_v,dN),e(dN,oqo),e(_v,rqo),e(Be,tqo),e(Be,uv),e(uv,Hie),e(Hie,aqo),e(uv,nqo),e(uv,cN),e(cN,sqo),e(uv,lqo),e(He,iqo),e(He,bv),e(bv,dqo),e(bv,Uie),e(Uie,cqo),e(bv,fqo),e(bv,Jie),e(Jie,mqo),e(He,gqo),e(He,Yie),e(Yie,hqo),e(He,pqo),g(dw,He,null),b(c,RBe,u),b(c,Id,u),e(Id,vv),e(vv,Kie),g(cw,Kie,null),e(Id,_qo),e(Id,Zie),e(Zie,uqo),b(c,SBe,u),b(c,dr,u),g(fw,dr,null),e(dr,bqo),e(dr,Dd),e(Dd,vqo),e(Dd,ede),e(ede,Tqo),e(Dd,Fqo),e(Dd,ode),e(ode,Cqo),e(Dd,Mqo),e(dr,Eqo),e(dr,mw),e(mw,yqo),e(mw,rde),e(rde,wqo),e(mw,Aqo),e(dr,Lqo),e(dr,rt),g(gw,rt,null),e(rt,Bqo),e(rt,tde),e(tde,xqo),e(rt,kqo),e(rt,jd),e(jd,Rqo),e(jd,ade),e(ade,Sqo),e(jd,Pqo),e(jd,nde),e(nde,$qo),e(jd,Iqo),e(rt,Dqo),e(rt,sde),e(sde,jqo),e(rt,Nqo),g(hw,rt,null),e(dr,qqo),e(dr,Ue),g(pw,Ue,null),e(Ue,Gqo),e(Ue,lde),e(lde,Oqo),e(Ue,Xqo),e(Ue,rn),e(rn,Vqo),e(rn,ide),e(ide,zqo),e(rn,Wqo),e(rn,dde),e(dde,Qqo),e(rn,Hqo),e(rn,cde),e(cde,Uqo),e(rn,Jqo),e(Ue,Yqo),e(Ue,_w),e(_w,Tv),e(Tv,fde),e(fde,Kqo),e(Tv,Zqo),e(Tv,fN),e(fN,eGo),e(Tv,oGo),e(_w,rGo),e(_w,Fv),e(Fv,mde),e(mde,tGo),e(Fv,aGo),e(Fv,mN),e(mN,nGo),e(Fv,sGo),e(Ue,lGo),e(Ue,Cv),e(Cv,iGo),e(Cv,gde),e(gde,dGo),e(Cv,cGo),e(Cv,hde),e(hde,fGo),e(Ue,mGo),e(Ue,pde),e(pde,gGo),e(Ue,hGo),g(uw,Ue,null),b(c,PBe,u),b(c,Nd,u),e(Nd,Mv),e(Mv,_de),g(bw,_de,null),e(Nd,pGo),e(Nd,ude),e(ude,_Go),b(c,$Be,u),b(c,cr,u),g(vw,cr,null),e(cr,uGo),e(cr,qd),e(qd,bGo),e(qd,bde),e(bde,vGo),e(qd,TGo),e(qd,vde),e(vde,FGo),e(qd,CGo),e(cr,MGo),e(cr,Tw),e(Tw,EGo),e(Tw,Tde),e(Tde,yGo),e(Tw,wGo),e(cr,AGo),e(cr,tt),g(Fw,tt,null),e(tt,LGo),e(tt,Fde),e(Fde,BGo),e(tt,xGo),e(tt,Gd),e(Gd,kGo),e(Gd,Cde),e(Cde,RGo),e(Gd,SGo),e(Gd,Mde),e(Mde,PGo),e(Gd,$Go),e(tt,IGo),e(tt,Ede),e(Ede,DGo),e(tt,jGo),g(Cw,tt,null),e(cr,NGo),e(cr,Je),g(Mw,Je,null),e(Je,qGo),e(Je,yde),e(yde,GGo),e(Je,OGo),e(Je,tn),e(tn,XGo),e(tn,wde),e(wde,VGo),e(tn,zGo),e(tn,Ade),e(Ade,WGo),e(tn,QGo),e(tn,Lde),e(Lde,HGo),e(tn,UGo),e(Je,JGo),e(Je,an),e(an,Ev),e(Ev,Bde),e(Bde,YGo),e(Ev,KGo),e(Ev,gN),e(gN,ZGo),e(Ev,eOo),e(an,oOo),e(an,yv),e(yv,xde),e(xde,rOo),e(yv,tOo),e(yv,hN),e(hN,aOo),e(yv,nOo),e(an,sOo),e(an,wv),e(wv,kde),e(kde,lOo),e(wv,iOo),e(wv,pN),e(pN,dOo),e(wv,cOo),e(an,fOo),e(an,Av),e(Av,Rde),e(Rde,mOo),e(Av,gOo),e(Av,_N),e(_N,hOo),e(Av,pOo),e(Je,_Oo),e(Je,Lv),e(Lv,uOo),e(Lv,Sde),e(Sde,bOo),e(Lv,vOo),e(Lv,Pde),e(Pde,TOo),e(Je,FOo),e(Je,$de),e($de,COo),e(Je,MOo),g(Ew,Je,null),b(c,IBe,u),b(c,Od,u),e(Od,Bv),e(Bv,Ide),g(yw,Ide,null),e(Od,EOo),e(Od,Dde),e(Dde,yOo),b(c,DBe,u),b(c,fr,u),g(ww,fr,null),e(fr,wOo),e(fr,Xd),e(Xd,AOo),e(Xd,jde),e(jde,LOo),e(Xd,BOo),e(Xd,Nde),e(Nde,xOo),e(Xd,kOo),e(fr,ROo),e(fr,Aw),e(Aw,SOo),e(Aw,qde),e(qde,POo),e(Aw,$Oo),e(fr,IOo),e(fr,at),g(Lw,at,null),e(at,DOo),e(at,Gde),e(Gde,jOo),e(at,NOo),e(at,Vd),e(Vd,qOo),e(Vd,Ode),e(Ode,GOo),e(Vd,OOo),e(Vd,Xde),e(Xde,XOo),e(Vd,VOo),e(at,zOo),e(at,Vde),e(Vde,WOo),e(at,QOo),g(Bw,at,null),e(fr,HOo),e(fr,Ye),g(xw,Ye,null),e(Ye,UOo),e(Ye,zde),e(zde,JOo),e(Ye,YOo),e(Ye,nn),e(nn,KOo),e(nn,Wde),e(Wde,ZOo),e(nn,eXo),e(nn,Qde),e(Qde,oXo),e(nn,rXo),e(nn,Hde),e(Hde,tXo),e(nn,aXo),e(Ye,nXo),e(Ye,zd),e(zd,xv),e(xv,Ude),e(Ude,sXo),e(xv,lXo),e(xv,uN),e(uN,iXo),e(xv,dXo),e(zd,cXo),e(zd,kv),e(kv,Jde),e(Jde,fXo),e(kv,mXo),e(kv,bN),e(bN,gXo),e(kv,hXo),e(zd,pXo),e(zd,Rv),e(Rv,Yde),e(Yde,_Xo),e(Rv,uXo),e(Rv,vN),e(vN,bXo),e(Rv,vXo),e(Ye,TXo),e(Ye,Sv),e(Sv,FXo),e(Sv,Kde),e(Kde,CXo),e(Sv,MXo),e(Sv,Zde),e(Zde,EXo),e(Ye,yXo),e(Ye,ece),e(ece,wXo),e(Ye,AXo),g(kw,Ye,null),b(c,jBe,u),b(c,Wd,u),e(Wd,Pv),e(Pv,oce),g(Rw,oce,null),e(Wd,LXo),e(Wd,rce),e(rce,BXo),b(c,NBe,u),b(c,mr,u),g(Sw,mr,null),e(mr,xXo),e(mr,Qd),e(Qd,kXo),e(Qd,tce),e(tce,RXo),e(Qd,SXo),e(Qd,ace),e(ace,PXo),e(Qd,$Xo),e(mr,IXo),e(mr,Pw),e(Pw,DXo),e(Pw,nce),e(nce,jXo),e(Pw,NXo),e(mr,qXo),e(mr,nt),g($w,nt,null),e(nt,GXo),e(nt,sce),e(sce,OXo),e(nt,XXo),e(nt,Hd),e(Hd,VXo),e(Hd,lce),e(lce,zXo),e(Hd,WXo),e(Hd,ice),e(ice,QXo),e(Hd,HXo),e(nt,UXo),e(nt,dce),e(dce,JXo),e(nt,YXo),g(Iw,nt,null),e(mr,KXo),e(mr,Ke),g(Dw,Ke,null),e(Ke,ZXo),e(Ke,cce),e(cce,eVo),e(Ke,oVo),e(Ke,sn),e(sn,rVo),e(sn,fce),e(fce,tVo),e(sn,aVo),e(sn,mce),e(mce,nVo),e(sn,sVo),e(sn,gce),e(gce,lVo),e(sn,iVo),e(Ke,dVo),e(Ke,hce),e(hce,$v),e($v,pce),e(pce,cVo),e($v,fVo),e($v,TN),e(TN,mVo),e($v,gVo),e(Ke,hVo),e(Ke,Iv),e(Iv,pVo),e(Iv,_ce),e(_ce,_Vo),e(Iv,uVo),e(Iv,uce),e(uce,bVo),e(Ke,vVo),e(Ke,bce),e(bce,TVo),e(Ke,FVo),g(jw,Ke,null),b(c,qBe,u),b(c,Ud,u),e(Ud,Dv),e(Dv,vce),g(Nw,vce,null),e(Ud,CVo),e(Ud,Tce),e(Tce,MVo),b(c,GBe,u),b(c,gr,u),g(qw,gr,null),e(gr,EVo),e(gr,Jd),e(Jd,yVo),e(Jd,Fce),e(Fce,wVo),e(Jd,AVo),e(Jd,Cce),e(Cce,LVo),e(Jd,BVo),e(gr,xVo),e(gr,Gw),e(Gw,kVo),e(Gw,Mce),e(Mce,RVo),e(Gw,SVo),e(gr,PVo),e(gr,st),g(Ow,st,null),e(st,$Vo),e(st,Ece),e(Ece,IVo),e(st,DVo),e(st,Yd),e(Yd,jVo),e(Yd,yce),e(yce,NVo),e(Yd,qVo),e(Yd,wce),e(wce,GVo),e(Yd,OVo),e(st,XVo),e(st,Ace),e(Ace,VVo),e(st,zVo),g(Xw,st,null),e(gr,WVo),e(gr,Ze),g(Vw,Ze,null),e(Ze,QVo),e(Ze,Lce),e(Lce,HVo),e(Ze,UVo),e(Ze,ln),e(ln,JVo),e(ln,Bce),e(Bce,YVo),e(ln,KVo),e(ln,xce),e(xce,ZVo),e(ln,ezo),e(ln,kce),e(kce,ozo),e(ln,rzo),e(Ze,tzo),e(Ze,Rce),e(Rce,jv),e(jv,Sce),e(Sce,azo),e(jv,nzo),e(jv,FN),e(FN,szo),e(jv,lzo),e(Ze,izo),e(Ze,Nv),e(Nv,dzo),e(Nv,Pce),e(Pce,czo),e(Nv,fzo),e(Nv,$ce),e($ce,mzo),e(Ze,gzo),e(Ze,Ice),e(Ice,hzo),e(Ze,pzo),g(zw,Ze,null),b(c,OBe,u),b(c,Kd,u),e(Kd,qv),e(qv,Dce),g(Ww,Dce,null),e(Kd,_zo),e(Kd,jce),e(jce,uzo),b(c,XBe,u),b(c,hr,u),g(Qw,hr,null),e(hr,bzo),e(hr,Zd),e(Zd,vzo),e(Zd,Nce),e(Nce,Tzo),e(Zd,Fzo),e(Zd,qce),e(qce,Czo),e(Zd,Mzo),e(hr,Ezo),e(hr,Hw),e(Hw,yzo),e(Hw,Gce),e(Gce,wzo),e(Hw,Azo),e(hr,Lzo),e(hr,lt),g(Uw,lt,null),e(lt,Bzo),e(lt,Oce),e(Oce,xzo),e(lt,kzo),e(lt,ec),e(ec,Rzo),e(ec,Xce),e(Xce,Szo),e(ec,Pzo),e(ec,Vce),e(Vce,$zo),e(ec,Izo),e(lt,Dzo),e(lt,zce),e(zce,jzo),e(lt,Nzo),g(Jw,lt,null),e(hr,qzo),e(hr,eo),g(Yw,eo,null),e(eo,Gzo),e(eo,Wce),e(Wce,Ozo),e(eo,Xzo),e(eo,dn),e(dn,Vzo),e(dn,Qce),e(Qce,zzo),e(dn,Wzo),e(dn,Hce),e(Hce,Qzo),e(dn,Hzo),e(dn,Uce),e(Uce,Uzo),e(dn,Jzo),e(eo,Yzo),e(eo,Kw),e(Kw,Gv),e(Gv,Jce),e(Jce,Kzo),e(Gv,Zzo),e(Gv,CN),e(CN,eWo),e(Gv,oWo),e(Kw,rWo),e(Kw,Ov),e(Ov,Yce),e(Yce,tWo),e(Ov,aWo),e(Ov,MN),e(MN,nWo),e(Ov,sWo),e(eo,lWo),e(eo,Xv),e(Xv,iWo),e(Xv,Kce),e(Kce,dWo),e(Xv,cWo),e(Xv,Zce),e(Zce,fWo),e(eo,mWo),e(eo,efe),e(efe,gWo),e(eo,hWo),g(Zw,eo,null),b(c,VBe,u),b(c,oc,u),e(oc,Vv),e(Vv,ofe),g(e6,ofe,null),e(oc,pWo),e(oc,rfe),e(rfe,_Wo),b(c,zBe,u),b(c,pr,u),g(o6,pr,null),e(pr,uWo),e(pr,rc),e(rc,bWo),e(rc,tfe),e(tfe,vWo),e(rc,TWo),e(rc,afe),e(afe,FWo),e(rc,CWo),e(pr,MWo),e(pr,r6),e(r6,EWo),e(r6,nfe),e(nfe,yWo),e(r6,wWo),e(pr,AWo),e(pr,it),g(t6,it,null),e(it,LWo),e(it,sfe),e(sfe,BWo),e(it,xWo),e(it,tc),e(tc,kWo),e(tc,lfe),e(lfe,RWo),e(tc,SWo),e(tc,ife),e(ife,PWo),e(tc,$Wo),e(it,IWo),e(it,dfe),e(dfe,DWo),e(it,jWo),g(a6,it,null),e(pr,NWo),e(pr,go),g(n6,go,null),e(go,qWo),e(go,cfe),e(cfe,GWo),e(go,OWo),e(go,cn),e(cn,XWo),e(cn,ffe),e(ffe,VWo),e(cn,zWo),e(cn,mfe),e(mfe,WWo),e(cn,QWo),e(cn,gfe),e(gfe,HWo),e(cn,UWo),e(go,JWo),e(go,B),e(B,zv),e(zv,hfe),e(hfe,YWo),e(zv,KWo),e(zv,EN),e(EN,ZWo),e(zv,eQo),e(B,oQo),e(B,Wv),e(Wv,pfe),e(pfe,rQo),e(Wv,tQo),e(Wv,yN),e(yN,aQo),e(Wv,nQo),e(B,sQo),e(B,Qv),e(Qv,_fe),e(_fe,lQo),e(Qv,iQo),e(Qv,wN),e(wN,dQo),e(Qv,cQo),e(B,fQo),e(B,Hv),e(Hv,ufe),e(ufe,mQo),e(Hv,gQo),e(Hv,AN),e(AN,hQo),e(Hv,pQo),e(B,_Qo),e(B,Uv),e(Uv,bfe),e(bfe,uQo),e(Uv,bQo),e(Uv,LN),e(LN,vQo),e(Uv,TQo),e(B,FQo),e(B,Jv),e(Jv,vfe),e(vfe,CQo),e(Jv,MQo),e(Jv,BN),e(BN,EQo),e(Jv,yQo),e(B,wQo),e(B,Yv),e(Yv,Tfe),e(Tfe,AQo),e(Yv,LQo),e(Yv,xN),e(xN,BQo),e(Yv,xQo),e(B,kQo),e(B,Kv),e(Kv,Ffe),e(Ffe,RQo),e(Kv,SQo),e(Kv,kN),e(kN,PQo),e(Kv,$Qo),e(B,IQo),e(B,Zv),e(Zv,Cfe),e(Cfe,DQo),e(Zv,jQo),e(Zv,RN),e(RN,NQo),e(Zv,qQo),e(B,GQo),e(B,eT),e(eT,Mfe),e(Mfe,OQo),e(eT,XQo),e(eT,SN),e(SN,VQo),e(eT,zQo),e(B,WQo),e(B,oT),e(oT,Efe),e(Efe,QQo),e(oT,HQo),e(oT,PN),e(PN,UQo),e(oT,JQo),e(B,YQo),e(B,rT),e(rT,yfe),e(yfe,KQo),e(rT,ZQo),e(rT,$N),e($N,eHo),e(rT,oHo),e(B,rHo),e(B,tT),e(tT,wfe),e(wfe,tHo),e(tT,aHo),e(tT,IN),e(IN,nHo),e(tT,sHo),e(B,lHo),e(B,aT),e(aT,Afe),e(Afe,iHo),e(aT,dHo),e(aT,DN),e(DN,cHo),e(aT,fHo),e(B,mHo),e(B,nT),e(nT,Lfe),e(Lfe,gHo),e(nT,hHo),e(nT,jN),e(jN,pHo),e(nT,_Ho),e(B,uHo),e(B,sT),e(sT,Bfe),e(Bfe,bHo),e(sT,vHo),e(sT,NN),e(NN,THo),e(sT,FHo),e(B,CHo),e(B,$s),e($s,xfe),e(xfe,MHo),e($s,EHo),e($s,qN),e(qN,yHo),e($s,wHo),e($s,GN),e(GN,AHo),e($s,LHo),e(B,BHo),e(B,lT),e(lT,kfe),e(kfe,xHo),e(lT,kHo),e(lT,ON),e(ON,RHo),e(lT,SHo),e(B,PHo),e(B,iT),e(iT,Rfe),e(Rfe,$Ho),e(iT,IHo),e(iT,XN),e(XN,DHo),e(iT,jHo),e(B,NHo),e(B,dT),e(dT,Sfe),e(Sfe,qHo),e(dT,GHo),e(dT,VN),e(VN,OHo),e(dT,XHo),e(B,VHo),e(B,cT),e(cT,Pfe),e(Pfe,zHo),e(cT,WHo),e(cT,zN),e(zN,QHo),e(cT,HHo),e(B,UHo),e(B,fT),e(fT,$fe),e($fe,JHo),e(fT,YHo),e(fT,WN),e(WN,KHo),e(fT,ZHo),e(B,eUo),e(B,mT),e(mT,Ife),e(Ife,oUo),e(mT,rUo),e(mT,QN),e(QN,tUo),e(mT,aUo),e(B,nUo),e(B,gT),e(gT,Dfe),e(Dfe,sUo),e(gT,lUo),e(gT,HN),e(HN,iUo),e(gT,dUo),e(B,cUo),e(B,hT),e(hT,jfe),e(jfe,fUo),e(hT,mUo),e(hT,UN),e(UN,gUo),e(hT,hUo),e(B,pUo),e(B,pT),e(pT,Nfe),e(Nfe,_Uo),e(pT,uUo),e(pT,JN),e(JN,bUo),e(pT,vUo),e(B,TUo),e(B,_T),e(_T,qfe),e(qfe,FUo),e(_T,CUo),e(_T,YN),e(YN,MUo),e(_T,EUo),e(B,yUo),e(B,uT),e(uT,Gfe),e(Gfe,wUo),e(uT,AUo),e(uT,KN),e(KN,LUo),e(uT,BUo),e(B,xUo),e(B,bT),e(bT,Ofe),e(Ofe,kUo),e(bT,RUo),e(bT,ZN),e(ZN,SUo),e(bT,PUo),e(B,$Uo),e(B,vT),e(vT,Xfe),e(Xfe,IUo),e(vT,DUo),e(vT,eq),e(eq,jUo),e(vT,NUo),e(B,qUo),e(B,TT),e(TT,Vfe),e(Vfe,GUo),e(TT,OUo),e(TT,oq),e(oq,XUo),e(TT,VUo),e(B,zUo),e(B,FT),e(FT,zfe),e(zfe,WUo),e(FT,QUo),e(FT,rq),e(rq,HUo),e(FT,UUo),e(B,JUo),e(B,CT),e(CT,Wfe),e(Wfe,YUo),e(CT,KUo),e(CT,tq),e(tq,ZUo),e(CT,eJo),e(B,oJo),e(B,MT),e(MT,Qfe),e(Qfe,rJo),e(MT,tJo),e(MT,aq),e(aq,aJo),e(MT,nJo),e(B,sJo),e(B,ET),e(ET,Hfe),e(Hfe,lJo),e(ET,iJo),e(ET,nq),e(nq,dJo),e(ET,cJo),e(B,fJo),e(B,yT),e(yT,Ufe),e(Ufe,mJo),e(yT,gJo),e(yT,sq),e(sq,hJo),e(yT,pJo),e(B,_Jo),e(B,wT),e(wT,Jfe),e(Jfe,uJo),e(wT,bJo),e(wT,lq),e(lq,vJo),e(wT,TJo),e(B,FJo),e(B,AT),e(AT,Yfe),e(Yfe,CJo),e(AT,MJo),e(AT,iq),e(iq,EJo),e(AT,yJo),e(B,wJo),e(B,LT),e(LT,Kfe),e(Kfe,AJo),e(LT,LJo),e(LT,dq),e(dq,BJo),e(LT,xJo),e(B,kJo),e(B,BT),e(BT,Zfe),e(Zfe,RJo),e(BT,SJo),e(BT,cq),e(cq,PJo),e(BT,$Jo),e(B,IJo),e(B,xT),e(xT,eme),e(eme,DJo),e(xT,jJo),e(xT,fq),e(fq,NJo),e(xT,qJo),e(B,GJo),e(B,kT),e(kT,ome),e(ome,OJo),e(kT,XJo),e(kT,mq),e(mq,VJo),e(kT,zJo),e(go,WJo),e(go,rme),e(rme,QJo),e(go,HJo),g(s6,go,null),b(c,WBe,u),b(c,ac,u),e(ac,RT),e(RT,tme),g(l6,tme,null),e(ac,UJo),e(ac,ame),e(ame,JJo),b(c,QBe,u),b(c,_r,u),g(i6,_r,null),e(_r,YJo),e(_r,nc),e(nc,KJo),e(nc,nme),e(nme,ZJo),e(nc,eYo),e(nc,sme),e(sme,oYo),e(nc,rYo),e(_r,tYo),e(_r,d6),e(d6,aYo),e(d6,lme),e(lme,nYo),e(d6,sYo),e(_r,lYo),e(_r,dt),g(c6,dt,null),e(dt,iYo),e(dt,ime),e(ime,dYo),e(dt,cYo),e(dt,sc),e(sc,fYo),e(sc,dme),e(dme,mYo),e(sc,gYo),e(sc,cme),e(cme,hYo),e(sc,pYo),e(dt,_Yo),e(dt,fme),e(fme,uYo),e(dt,bYo),g(f6,dt,null),e(_r,vYo),e(_r,ho),g(m6,ho,null),e(ho,TYo),e(ho,mme),e(mme,FYo),e(ho,CYo),e(ho,fn),e(fn,MYo),e(fn,gme),e(gme,EYo),e(fn,yYo),e(fn,hme),e(hme,wYo),e(fn,AYo),e(fn,pme),e(pme,LYo),e(fn,BYo),e(ho,xYo),e(ho,H),e(H,ST),e(ST,_me),e(_me,kYo),e(ST,RYo),e(ST,gq),e(gq,SYo),e(ST,PYo),e(H,$Yo),e(H,PT),e(PT,ume),e(ume,IYo),e(PT,DYo),e(PT,hq),e(hq,jYo),e(PT,NYo),e(H,qYo),e(H,$T),e($T,bme),e(bme,GYo),e($T,OYo),e($T,pq),e(pq,XYo),e($T,VYo),e(H,zYo),e(H,IT),e(IT,vme),e(vme,WYo),e(IT,QYo),e(IT,_q),e(_q,HYo),e(IT,UYo),e(H,JYo),e(H,DT),e(DT,Tme),e(Tme,YYo),e(DT,KYo),e(DT,uq),e(uq,ZYo),e(DT,eKo),e(H,oKo),e(H,jT),e(jT,Fme),e(Fme,rKo),e(jT,tKo),e(jT,bq),e(bq,aKo),e(jT,nKo),e(H,sKo),e(H,NT),e(NT,Cme),e(Cme,lKo),e(NT,iKo),e(NT,vq),e(vq,dKo),e(NT,cKo),e(H,fKo),e(H,qT),e(qT,Mme),e(Mme,mKo),e(qT,gKo),e(qT,Tq),e(Tq,hKo),e(qT,pKo),e(H,_Ko),e(H,GT),e(GT,Eme),e(Eme,uKo),e(GT,bKo),e(GT,Fq),e(Fq,vKo),e(GT,TKo),e(H,FKo),e(H,OT),e(OT,yme),e(yme,CKo),e(OT,MKo),e(OT,Cq),e(Cq,EKo),e(OT,yKo),e(H,wKo),e(H,XT),e(XT,wme),e(wme,AKo),e(XT,LKo),e(XT,Mq),e(Mq,BKo),e(XT,xKo),e(H,kKo),e(H,VT),e(VT,Ame),e(Ame,RKo),e(VT,SKo),e(VT,Eq),e(Eq,PKo),e(VT,$Ko),e(H,IKo),e(H,zT),e(zT,Lme),e(Lme,DKo),e(zT,jKo),e(zT,yq),e(yq,NKo),e(zT,qKo),e(H,GKo),e(H,WT),e(WT,Bme),e(Bme,OKo),e(WT,XKo),e(WT,wq),e(wq,VKo),e(WT,zKo),e(H,WKo),e(H,QT),e(QT,xme),e(xme,QKo),e(QT,HKo),e(QT,Aq),e(Aq,UKo),e(QT,JKo),e(H,YKo),e(H,HT),e(HT,kme),e(kme,KKo),e(HT,ZKo),e(HT,Lq),e(Lq,eZo),e(HT,oZo),e(H,rZo),e(H,UT),e(UT,Rme),e(Rme,tZo),e(UT,aZo),e(UT,Bq),e(Bq,nZo),e(UT,sZo),e(H,lZo),e(H,JT),e(JT,Sme),e(Sme,iZo),e(JT,dZo),e(JT,xq),e(xq,cZo),e(JT,fZo),e(H,mZo),e(H,YT),e(YT,Pme),e(Pme,gZo),e(YT,hZo),e(YT,kq),e(kq,pZo),e(YT,_Zo),e(H,uZo),e(H,KT),e(KT,$me),e($me,bZo),e(KT,vZo),e(KT,Rq),e(Rq,TZo),e(KT,FZo),e(H,CZo),e(H,ZT),e(ZT,Ime),e(Ime,MZo),e(ZT,EZo),e(ZT,Sq),e(Sq,yZo),e(ZT,wZo),e(H,AZo),e(H,eF),e(eF,Dme),e(Dme,LZo),e(eF,BZo),e(eF,Pq),e(Pq,xZo),e(eF,kZo),e(ho,RZo),e(ho,jme),e(jme,SZo),e(ho,PZo),g(g6,ho,null),b(c,HBe,u),b(c,lc,u),e(lc,oF),e(oF,Nme),g(h6,Nme,null),e(lc,$Zo),e(lc,qme),e(qme,IZo),b(c,UBe,u),b(c,ur,u),g(p6,ur,null),e(ur,DZo),e(ur,ic),e(ic,jZo),e(ic,Gme),e(Gme,NZo),e(ic,qZo),e(ic,Ome),e(Ome,GZo),e(ic,OZo),e(ur,XZo),e(ur,_6),e(_6,VZo),e(_6,Xme),e(Xme,zZo),e(_6,WZo),e(ur,QZo),e(ur,ct),g(u6,ct,null),e(ct,HZo),e(ct,Vme),e(Vme,UZo),e(ct,JZo),e(ct,dc),e(dc,YZo),e(dc,zme),e(zme,KZo),e(dc,ZZo),e(dc,Wme),e(Wme,eer),e(dc,oer),e(ct,rer),e(ct,Qme),e(Qme,ter),e(ct,aer),g(b6,ct,null),e(ur,ner),e(ur,po),g(v6,po,null),e(po,ser),e(po,Hme),e(Hme,ler),e(po,ier),e(po,mn),e(mn,der),e(mn,Ume),e(Ume,cer),e(mn,fer),e(mn,Jme),e(Jme,mer),e(mn,ger),e(mn,Yme),e(Yme,her),e(mn,per),e(po,_er),e(po,pe),e(pe,rF),e(rF,Kme),e(Kme,uer),e(rF,ber),e(rF,$q),e($q,ver),e(rF,Ter),e(pe,Fer),e(pe,tF),e(tF,Zme),e(Zme,Cer),e(tF,Mer),e(tF,Iq),e(Iq,Eer),e(tF,yer),e(pe,wer),e(pe,aF),e(aF,ege),e(ege,Aer),e(aF,Ler),e(aF,Dq),e(Dq,Ber),e(aF,xer),e(pe,ker),e(pe,nF),e(nF,oge),e(oge,Rer),e(nF,Ser),e(nF,jq),e(jq,Per),e(nF,$er),e(pe,Ier),e(pe,sF),e(sF,rge),e(rge,Der),e(sF,jer),e(sF,Nq),e(Nq,Ner),e(sF,qer),e(pe,Ger),e(pe,lF),e(lF,tge),e(tge,Oer),e(lF,Xer),e(lF,qq),e(qq,Ver),e(lF,zer),e(pe,Wer),e(pe,iF),e(iF,age),e(age,Qer),e(iF,Her),e(iF,Gq),e(Gq,Uer),e(iF,Jer),e(pe,Yer),e(pe,dF),e(dF,nge),e(nge,Ker),e(dF,Zer),e(dF,Oq),e(Oq,eor),e(dF,oor),e(pe,ror),e(pe,cF),e(cF,sge),e(sge,tor),e(cF,aor),e(cF,Xq),e(Xq,nor),e(cF,sor),e(pe,lor),e(pe,fF),e(fF,lge),e(lge,ior),e(fF,dor),e(fF,Vq),e(Vq,cor),e(fF,mor),e(po,gor),e(po,ige),e(ige,hor),e(po,por),g(T6,po,null),b(c,JBe,u),b(c,cc,u),e(cc,mF),e(mF,dge),g(F6,dge,null),e(cc,_or),e(cc,cge),e(cge,uor),b(c,YBe,u),b(c,br,u),g(C6,br,null),e(br,bor),e(br,fc),e(fc,vor),e(fc,fge),e(fge,Tor),e(fc,For),e(fc,mge),e(mge,Cor),e(fc,Mor),e(br,Eor),e(br,M6),e(M6,yor),e(M6,gge),e(gge,wor),e(M6,Aor),e(br,Lor),e(br,ft),g(E6,ft,null),e(ft,Bor),e(ft,hge),e(hge,xor),e(ft,kor),e(ft,mc),e(mc,Ror),e(mc,pge),e(pge,Sor),e(mc,Por),e(mc,_ge),e(_ge,$or),e(mc,Ior),e(ft,Dor),e(ft,uge),e(uge,jor),e(ft,Nor),g(y6,ft,null),e(br,qor),e(br,_o),g(w6,_o,null),e(_o,Gor),e(_o,bge),e(bge,Oor),e(_o,Xor),e(_o,gn),e(gn,Vor),e(gn,vge),e(vge,zor),e(gn,Wor),e(gn,Tge),e(Tge,Qor),e(gn,Hor),e(gn,Fge),e(Fge,Uor),e(gn,Jor),e(_o,Yor),e(_o,A6),e(A6,gF),e(gF,Cge),e(Cge,Kor),e(gF,Zor),e(gF,zq),e(zq,err),e(gF,orr),e(A6,rrr),e(A6,hF),e(hF,Mge),e(Mge,trr),e(hF,arr),e(hF,Wq),e(Wq,nrr),e(hF,srr),e(_o,lrr),e(_o,Ege),e(Ege,irr),e(_o,drr),g(L6,_o,null),b(c,KBe,u),b(c,gc,u),e(gc,pF),e(pF,yge),g(B6,yge,null),e(gc,crr),e(gc,wge),e(wge,frr),b(c,ZBe,u),b(c,vr,u),g(x6,vr,null),e(vr,mrr),e(vr,hc),e(hc,grr),e(hc,Age),e(Age,hrr),e(hc,prr),e(hc,Lge),e(Lge,_rr),e(hc,urr),e(vr,brr),e(vr,k6),e(k6,vrr),e(k6,Bge),e(Bge,Trr),e(k6,Frr),e(vr,Crr),e(vr,mt),g(R6,mt,null),e(mt,Mrr),e(mt,xge),e(xge,Err),e(mt,yrr),e(mt,pc),e(pc,wrr),e(pc,kge),e(kge,Arr),e(pc,Lrr),e(pc,Rge),e(Rge,Brr),e(pc,xrr),e(mt,krr),e(mt,Sge),e(Sge,Rrr),e(mt,Srr),g(S6,mt,null),e(vr,Prr),e(vr,uo),g(P6,uo,null),e(uo,$rr),e(uo,Pge),e(Pge,Irr),e(uo,Drr),e(uo,hn),e(hn,jrr),e(hn,$ge),e($ge,Nrr),e(hn,qrr),e(hn,Ige),e(Ige,Grr),e(hn,Orr),e(hn,Dge),e(Dge,Xrr),e(hn,Vrr),e(uo,zrr),e(uo,Y),e(Y,_F),e(_F,jge),e(jge,Wrr),e(_F,Qrr),e(_F,Qq),e(Qq,Hrr),e(_F,Urr),e(Y,Jrr),e(Y,uF),e(uF,Nge),e(Nge,Yrr),e(uF,Krr),e(uF,Hq),e(Hq,Zrr),e(uF,etr),e(Y,otr),e(Y,bF),e(bF,qge),e(qge,rtr),e(bF,ttr),e(bF,Uq),e(Uq,atr),e(bF,ntr),e(Y,str),e(Y,vF),e(vF,Gge),e(Gge,ltr),e(vF,itr),e(vF,Jq),e(Jq,dtr),e(vF,ctr),e(Y,ftr),e(Y,TF),e(TF,Oge),e(Oge,mtr),e(TF,gtr),e(TF,Yq),e(Yq,htr),e(TF,ptr),e(Y,_tr),e(Y,FF),e(FF,Xge),e(Xge,utr),e(FF,btr),e(FF,Kq),e(Kq,vtr),e(FF,Ttr),e(Y,Ftr),e(Y,CF),e(CF,Vge),e(Vge,Ctr),e(CF,Mtr),e(CF,Zq),e(Zq,Etr),e(CF,ytr),e(Y,wtr),e(Y,MF),e(MF,zge),e(zge,Atr),e(MF,Ltr),e(MF,eG),e(eG,Btr),e(MF,xtr),e(Y,ktr),e(Y,EF),e(EF,Wge),e(Wge,Rtr),e(EF,Str),e(EF,oG),e(oG,Ptr),e(EF,$tr),e(Y,Itr),e(Y,yF),e(yF,Qge),e(Qge,Dtr),e(yF,jtr),e(yF,rG),e(rG,Ntr),e(yF,qtr),e(Y,Gtr),e(Y,wF),e(wF,Hge),e(Hge,Otr),e(wF,Xtr),e(wF,tG),e(tG,Vtr),e(wF,ztr),e(Y,Wtr),e(Y,AF),e(AF,Uge),e(Uge,Qtr),e(AF,Htr),e(AF,aG),e(aG,Utr),e(AF,Jtr),e(Y,Ytr),e(Y,LF),e(LF,Jge),e(Jge,Ktr),e(LF,Ztr),e(LF,nG),e(nG,ear),e(LF,oar),e(Y,rar),e(Y,BF),e(BF,Yge),e(Yge,tar),e(BF,aar),e(BF,sG),e(sG,nar),e(BF,sar),e(Y,lar),e(Y,xF),e(xF,Kge),e(Kge,iar),e(xF,dar),e(xF,lG),e(lG,car),e(xF,far),e(Y,mar),e(Y,kF),e(kF,Zge),e(Zge,gar),e(kF,har),e(kF,iG),e(iG,par),e(kF,_ar),e(Y,uar),e(Y,RF),e(RF,ehe),e(ehe,bar),e(RF,Tar),e(RF,dG),e(dG,Far),e(RF,Car),e(Y,Mar),e(Y,SF),e(SF,ohe),e(ohe,Ear),e(SF,yar),e(SF,cG),e(cG,war),e(SF,Aar),e(Y,Lar),e(Y,PF),e(PF,rhe),e(rhe,Bar),e(PF,xar),e(PF,fG),e(fG,kar),e(PF,Rar),e(Y,Sar),e(Y,$F),e($F,the),e(the,Par),e($F,$ar),e($F,mG),e(mG,Iar),e($F,Dar),e(uo,jar),e(uo,ahe),e(ahe,Nar),e(uo,qar),g($6,uo,null),b(c,exe,u),b(c,_c,u),e(_c,IF),e(IF,nhe),g(I6,nhe,null),e(_c,Gar),e(_c,she),e(she,Oar),b(c,oxe,u),b(c,Tr,u),g(D6,Tr,null),e(Tr,Xar),e(Tr,uc),e(uc,Var),e(uc,lhe),e(lhe,zar),e(uc,War),e(uc,ihe),e(ihe,Qar),e(uc,Har),e(Tr,Uar),e(Tr,j6),e(j6,Jar),e(j6,dhe),e(dhe,Yar),e(j6,Kar),e(Tr,Zar),e(Tr,gt),g(N6,gt,null),e(gt,enr),e(gt,che),e(che,onr),e(gt,rnr),e(gt,bc),e(bc,tnr),e(bc,fhe),e(fhe,anr),e(bc,nnr),e(bc,mhe),e(mhe,snr),e(bc,lnr),e(gt,inr),e(gt,ghe),e(ghe,dnr),e(gt,cnr),g(q6,gt,null),e(Tr,fnr),e(Tr,bo),g(G6,bo,null),e(bo,mnr),e(bo,hhe),e(hhe,gnr),e(bo,hnr),e(bo,pn),e(pn,pnr),e(pn,phe),e(phe,_nr),e(pn,unr),e(pn,_he),e(_he,bnr),e(pn,vnr),e(pn,uhe),e(uhe,Tnr),e(pn,Fnr),e(bo,Cnr),e(bo,_e),e(_e,DF),e(DF,bhe),e(bhe,Mnr),e(DF,Enr),e(DF,gG),e(gG,ynr),e(DF,wnr),e(_e,Anr),e(_e,jF),e(jF,vhe),e(vhe,Lnr),e(jF,Bnr),e(jF,hG),e(hG,xnr),e(jF,knr),e(_e,Rnr),e(_e,NF),e(NF,The),e(The,Snr),e(NF,Pnr),e(NF,pG),e(pG,$nr),e(NF,Inr),e(_e,Dnr),e(_e,qF),e(qF,Fhe),e(Fhe,jnr),e(qF,Nnr),e(qF,_G),e(_G,qnr),e(qF,Gnr),e(_e,Onr),e(_e,GF),e(GF,Che),e(Che,Xnr),e(GF,Vnr),e(GF,uG),e(uG,znr),e(GF,Wnr),e(_e,Qnr),e(_e,OF),e(OF,Mhe),e(Mhe,Hnr),e(OF,Unr),e(OF,bG),e(bG,Jnr),e(OF,Ynr),e(_e,Knr),e(_e,XF),e(XF,Ehe),e(Ehe,Znr),e(XF,esr),e(XF,vG),e(vG,osr),e(XF,rsr),e(_e,tsr),e(_e,VF),e(VF,yhe),e(yhe,asr),e(VF,nsr),e(VF,TG),e(TG,ssr),e(VF,lsr),e(_e,isr),e(_e,zF),e(zF,whe),e(whe,dsr),e(zF,csr),e(zF,FG),e(FG,fsr),e(zF,msr),e(_e,gsr),e(_e,WF),e(WF,Ahe),e(Ahe,hsr),e(WF,psr),e(WF,CG),e(CG,_sr),e(WF,usr),e(bo,bsr),e(bo,Lhe),e(Lhe,vsr),e(bo,Tsr),g(O6,bo,null),b(c,rxe,u),b(c,vc,u),e(vc,QF),e(QF,Bhe),g(X6,Bhe,null),e(vc,Fsr),e(vc,xhe),e(xhe,Csr),b(c,txe,u),b(c,Fr,u),g(V6,Fr,null),e(Fr,Msr),e(Fr,Tc),e(Tc,Esr),e(Tc,khe),e(khe,ysr),e(Tc,wsr),e(Tc,Rhe),e(Rhe,Asr),e(Tc,Lsr),e(Fr,Bsr),e(Fr,z6),e(z6,xsr),e(z6,She),e(She,ksr),e(z6,Rsr),e(Fr,Ssr),e(Fr,ht),g(W6,ht,null),e(ht,Psr),e(ht,Phe),e(Phe,$sr),e(ht,Isr),e(ht,Fc),e(Fc,Dsr),e(Fc,$he),e($he,jsr),e(Fc,Nsr),e(Fc,Ihe),e(Ihe,qsr),e(Fc,Gsr),e(ht,Osr),e(ht,Dhe),e(Dhe,Xsr),e(ht,Vsr),g(Q6,ht,null),e(Fr,zsr),e(Fr,vo),g(H6,vo,null),e(vo,Wsr),e(vo,jhe),e(jhe,Qsr),e(vo,Hsr),e(vo,_n),e(_n,Usr),e(_n,Nhe),e(Nhe,Jsr),e(_n,Ysr),e(_n,qhe),e(qhe,Ksr),e(_n,Zsr),e(_n,Ghe),e(Ghe,elr),e(_n,olr),e(vo,rlr),e(vo,X),e(X,HF),e(HF,Ohe),e(Ohe,tlr),e(HF,alr),e(HF,MG),e(MG,nlr),e(HF,slr),e(X,llr),e(X,UF),e(UF,Xhe),e(Xhe,ilr),e(UF,dlr),e(UF,EG),e(EG,clr),e(UF,flr),e(X,mlr),e(X,JF),e(JF,Vhe),e(Vhe,glr),e(JF,hlr),e(JF,yG),e(yG,plr),e(JF,_lr),e(X,ulr),e(X,YF),e(YF,zhe),e(zhe,blr),e(YF,vlr),e(YF,wG),e(wG,Tlr),e(YF,Flr),e(X,Clr),e(X,KF),e(KF,Whe),e(Whe,Mlr),e(KF,Elr),e(KF,AG),e(AG,ylr),e(KF,wlr),e(X,Alr),e(X,ZF),e(ZF,Qhe),e(Qhe,Llr),e(ZF,Blr),e(ZF,LG),e(LG,xlr),e(ZF,klr),e(X,Rlr),e(X,e9),e(e9,Hhe),e(Hhe,Slr),e(e9,Plr),e(e9,BG),e(BG,$lr),e(e9,Ilr),e(X,Dlr),e(X,o9),e(o9,Uhe),e(Uhe,jlr),e(o9,Nlr),e(o9,xG),e(xG,qlr),e(o9,Glr),e(X,Olr),e(X,r9),e(r9,Jhe),e(Jhe,Xlr),e(r9,Vlr),e(r9,kG),e(kG,zlr),e(r9,Wlr),e(X,Qlr),e(X,t9),e(t9,Yhe),e(Yhe,Hlr),e(t9,Ulr),e(t9,RG),e(RG,Jlr),e(t9,Ylr),e(X,Klr),e(X,a9),e(a9,Khe),e(Khe,Zlr),e(a9,eir),e(a9,SG),e(SG,oir),e(a9,rir),e(X,tir),e(X,n9),e(n9,Zhe),e(Zhe,air),e(n9,nir),e(n9,PG),e(PG,sir),e(n9,lir),e(X,iir),e(X,s9),e(s9,epe),e(epe,dir),e(s9,cir),e(s9,$G),e($G,fir),e(s9,mir),e(X,gir),e(X,l9),e(l9,ope),e(ope,hir),e(l9,pir),e(l9,IG),e(IG,_ir),e(l9,uir),e(X,bir),e(X,i9),e(i9,rpe),e(rpe,vir),e(i9,Tir),e(i9,DG),e(DG,Fir),e(i9,Cir),e(X,Mir),e(X,d9),e(d9,tpe),e(tpe,Eir),e(d9,yir),e(d9,jG),e(jG,wir),e(d9,Air),e(X,Lir),e(X,c9),e(c9,ape),e(ape,Bir),e(c9,xir),e(c9,NG),e(NG,kir),e(c9,Rir),e(X,Sir),e(X,f9),e(f9,npe),e(npe,Pir),e(f9,$ir),e(f9,qG),e(qG,Iir),e(f9,Dir),e(X,jir),e(X,m9),e(m9,spe),e(spe,Nir),e(m9,qir),e(m9,GG),e(GG,Gir),e(m9,Oir),e(X,Xir),e(X,g9),e(g9,lpe),e(lpe,Vir),e(g9,zir),e(g9,OG),e(OG,Wir),e(g9,Qir),e(X,Hir),e(X,h9),e(h9,ipe),e(ipe,Uir),e(h9,Jir),e(h9,XG),e(XG,Yir),e(h9,Kir),e(X,Zir),e(X,p9),e(p9,dpe),e(dpe,edr),e(p9,odr),e(p9,VG),e(VG,rdr),e(p9,tdr),e(X,adr),e(X,_9),e(_9,cpe),e(cpe,ndr),e(_9,sdr),e(_9,zG),e(zG,ldr),e(_9,idr),e(X,ddr),e(X,u9),e(u9,fpe),e(fpe,cdr),e(u9,fdr),e(u9,WG),e(WG,mdr),e(u9,gdr),e(X,hdr),e(X,b9),e(b9,mpe),e(mpe,pdr),e(b9,_dr),e(b9,QG),e(QG,udr),e(b9,bdr),e(vo,vdr),e(vo,gpe),e(gpe,Tdr),e(vo,Fdr),g(U6,vo,null),b(c,axe,u),b(c,Cc,u),e(Cc,v9),e(v9,hpe),g(J6,hpe,null),e(Cc,Cdr),e(Cc,ppe),e(ppe,Mdr),b(c,nxe,u),b(c,Cr,u),g(Y6,Cr,null),e(Cr,Edr),e(Cr,Mc),e(Mc,ydr),e(Mc,_pe),e(_pe,wdr),e(Mc,Adr),e(Mc,upe),e(upe,Ldr),e(Mc,Bdr),e(Cr,xdr),e(Cr,K6),e(K6,kdr),e(K6,bpe),e(bpe,Rdr),e(K6,Sdr),e(Cr,Pdr),e(Cr,pt),g(Z6,pt,null),e(pt,$dr),e(pt,vpe),e(vpe,Idr),e(pt,Ddr),e(pt,Ec),e(Ec,jdr),e(Ec,Tpe),e(Tpe,Ndr),e(Ec,qdr),e(Ec,Fpe),e(Fpe,Gdr),e(Ec,Odr),e(pt,Xdr),e(pt,Cpe),e(Cpe,Vdr),e(pt,zdr),g(eA,pt,null),e(Cr,Wdr),e(Cr,To),g(oA,To,null),e(To,Qdr),e(To,Mpe),e(Mpe,Hdr),e(To,Udr),e(To,un),e(un,Jdr),e(un,Epe),e(Epe,Ydr),e(un,Kdr),e(un,ype),e(ype,Zdr),e(un,ecr),e(un,wpe),e(wpe,ocr),e(un,rcr),e(To,tcr),e(To,te),e(te,T9),e(T9,Ape),e(Ape,acr),e(T9,ncr),e(T9,HG),e(HG,scr),e(T9,lcr),e(te,icr),e(te,F9),e(F9,Lpe),e(Lpe,dcr),e(F9,ccr),e(F9,UG),e(UG,fcr),e(F9,mcr),e(te,gcr),e(te,C9),e(C9,Bpe),e(Bpe,hcr),e(C9,pcr),e(C9,JG),e(JG,_cr),e(C9,ucr),e(te,bcr),e(te,M9),e(M9,xpe),e(xpe,vcr),e(M9,Tcr),e(M9,YG),e(YG,Fcr),e(M9,Ccr),e(te,Mcr),e(te,E9),e(E9,kpe),e(kpe,Ecr),e(E9,ycr),e(E9,KG),e(KG,wcr),e(E9,Acr),e(te,Lcr),e(te,y9),e(y9,Rpe),e(Rpe,Bcr),e(y9,xcr),e(y9,ZG),e(ZG,kcr),e(y9,Rcr),e(te,Scr),e(te,w9),e(w9,Spe),e(Spe,Pcr),e(w9,$cr),e(w9,eO),e(eO,Icr),e(w9,Dcr),e(te,jcr),e(te,A9),e(A9,Ppe),e(Ppe,Ncr),e(A9,qcr),e(A9,oO),e(oO,Gcr),e(A9,Ocr),e(te,Xcr),e(te,L9),e(L9,$pe),e($pe,Vcr),e(L9,zcr),e(L9,rO),e(rO,Wcr),e(L9,Qcr),e(te,Hcr),e(te,B9),e(B9,Ipe),e(Ipe,Ucr),e(B9,Jcr),e(B9,tO),e(tO,Ycr),e(B9,Kcr),e(te,Zcr),e(te,x9),e(x9,Dpe),e(Dpe,efr),e(x9,ofr),e(x9,aO),e(aO,rfr),e(x9,tfr),e(te,afr),e(te,k9),e(k9,jpe),e(jpe,nfr),e(k9,sfr),e(k9,nO),e(nO,lfr),e(k9,ifr),e(te,dfr),e(te,R9),e(R9,Npe),e(Npe,cfr),e(R9,ffr),e(R9,sO),e(sO,mfr),e(R9,gfr),e(te,hfr),e(te,S9),e(S9,qpe),e(qpe,pfr),e(S9,_fr),e(S9,lO),e(lO,ufr),e(S9,bfr),e(te,vfr),e(te,P9),e(P9,Gpe),e(Gpe,Tfr),e(P9,Ffr),e(P9,iO),e(iO,Cfr),e(P9,Mfr),e(te,Efr),e(te,$9),e($9,Ope),e(Ope,yfr),e($9,wfr),e($9,dO),e(dO,Afr),e($9,Lfr),e(te,Bfr),e(te,I9),e(I9,Xpe),e(Xpe,xfr),e(I9,kfr),e(I9,cO),e(cO,Rfr),e(I9,Sfr),e(To,Pfr),e(To,Vpe),e(Vpe,$fr),e(To,Ifr),g(rA,To,null),b(c,sxe,u),b(c,yc,u),e(yc,D9),e(D9,zpe),g(tA,zpe,null),e(yc,Dfr),e(yc,Wpe),e(Wpe,jfr),b(c,lxe,u),b(c,Mr,u),g(aA,Mr,null),e(Mr,Nfr),e(Mr,wc),e(wc,qfr),e(wc,Qpe),e(Qpe,Gfr),e(wc,Ofr),e(wc,Hpe),e(Hpe,Xfr),e(wc,Vfr),e(Mr,zfr),e(Mr,nA),e(nA,Wfr),e(nA,Upe),e(Upe,Qfr),e(nA,Hfr),e(Mr,Ufr),e(Mr,_t),g(sA,_t,null),e(_t,Jfr),e(_t,Jpe),e(Jpe,Yfr),e(_t,Kfr),e(_t,Ac),e(Ac,Zfr),e(Ac,Ype),e(Ype,emr),e(Ac,omr),e(Ac,Kpe),e(Kpe,rmr),e(Ac,tmr),e(_t,amr),e(_t,Zpe),e(Zpe,nmr),e(_t,smr),g(lA,_t,null),e(Mr,lmr),e(Mr,Fo),g(iA,Fo,null),e(Fo,imr),e(Fo,e_e),e(e_e,dmr),e(Fo,cmr),e(Fo,bn),e(bn,fmr),e(bn,o_e),e(o_e,mmr),e(bn,gmr),e(bn,r_e),e(r_e,hmr),e(bn,pmr),e(bn,t_e),e(t_e,_mr),e(bn,umr),e(Fo,bmr),e(Fo,a_e),e(a_e,j9),e(j9,n_e),e(n_e,vmr),e(j9,Tmr),e(j9,fO),e(fO,Fmr),e(j9,Cmr),e(Fo,Mmr),e(Fo,s_e),e(s_e,Emr),e(Fo,ymr),g(dA,Fo,null),b(c,ixe,u),b(c,Lc,u),e(Lc,N9),e(N9,l_e),g(cA,l_e,null),e(Lc,wmr),e(Lc,i_e),e(i_e,Amr),b(c,dxe,u),b(c,Er,u),g(fA,Er,null),e(Er,Lmr),e(Er,Bc),e(Bc,Bmr),e(Bc,d_e),e(d_e,xmr),e(Bc,kmr),e(Bc,c_e),e(c_e,Rmr),e(Bc,Smr),e(Er,Pmr),e(Er,mA),e(mA,$mr),e(mA,f_e),e(f_e,Imr),e(mA,Dmr),e(Er,jmr),e(Er,ut),g(gA,ut,null),e(ut,Nmr),e(ut,m_e),e(m_e,qmr),e(ut,Gmr),e(ut,xc),e(xc,Omr),e(xc,g_e),e(g_e,Xmr),e(xc,Vmr),e(xc,h_e),e(h_e,zmr),e(xc,Wmr),e(ut,Qmr),e(ut,p_e),e(p_e,Hmr),e(ut,Umr),g(hA,ut,null),e(Er,Jmr),e(Er,Co),g(pA,Co,null),e(Co,Ymr),e(Co,__e),e(__e,Kmr),e(Co,Zmr),e(Co,vn),e(vn,egr),e(vn,u_e),e(u_e,ogr),e(vn,rgr),e(vn,b_e),e(b_e,tgr),e(vn,agr),e(vn,v_e),e(v_e,ngr),e(vn,sgr),e(Co,lgr),e(Co,K),e(K,q9),e(q9,T_e),e(T_e,igr),e(q9,dgr),e(q9,mO),e(mO,cgr),e(q9,fgr),e(K,mgr),e(K,G9),e(G9,F_e),e(F_e,ggr),e(G9,hgr),e(G9,gO),e(gO,pgr),e(G9,_gr),e(K,ugr),e(K,O9),e(O9,C_e),e(C_e,bgr),e(O9,vgr),e(O9,hO),e(hO,Tgr),e(O9,Fgr),e(K,Cgr),e(K,X9),e(X9,M_e),e(M_e,Mgr),e(X9,Egr),e(X9,pO),e(pO,ygr),e(X9,wgr),e(K,Agr),e(K,V9),e(V9,E_e),e(E_e,Lgr),e(V9,Bgr),e(V9,_O),e(_O,xgr),e(V9,kgr),e(K,Rgr),e(K,z9),e(z9,y_e),e(y_e,Sgr),e(z9,Pgr),e(z9,uO),e(uO,$gr),e(z9,Igr),e(K,Dgr),e(K,W9),e(W9,w_e),e(w_e,jgr),e(W9,Ngr),e(W9,bO),e(bO,qgr),e(W9,Ggr),e(K,Ogr),e(K,Q9),e(Q9,A_e),e(A_e,Xgr),e(Q9,Vgr),e(Q9,vO),e(vO,zgr),e(Q9,Wgr),e(K,Qgr),e(K,H9),e(H9,L_e),e(L_e,Hgr),e(H9,Ugr),e(H9,TO),e(TO,Jgr),e(H9,Ygr),e(K,Kgr),e(K,U9),e(U9,B_e),e(B_e,Zgr),e(U9,ehr),e(U9,FO),e(FO,ohr),e(U9,rhr),e(K,thr),e(K,J9),e(J9,x_e),e(x_e,ahr),e(J9,nhr),e(J9,CO),e(CO,shr),e(J9,lhr),e(K,ihr),e(K,Y9),e(Y9,k_e),e(k_e,dhr),e(Y9,chr),e(Y9,MO),e(MO,fhr),e(Y9,mhr),e(K,ghr),e(K,K9),e(K9,R_e),e(R_e,hhr),e(K9,phr),e(K9,EO),e(EO,_hr),e(K9,uhr),e(K,bhr),e(K,Z9),e(Z9,S_e),e(S_e,vhr),e(Z9,Thr),e(Z9,yO),e(yO,Fhr),e(Z9,Chr),e(K,Mhr),e(K,eC),e(eC,P_e),e(P_e,Ehr),e(eC,yhr),e(eC,wO),e(wO,whr),e(eC,Ahr),e(K,Lhr),e(K,oC),e(oC,$_e),e($_e,Bhr),e(oC,xhr),e(oC,AO),e(AO,khr),e(oC,Rhr),e(K,Shr),e(K,rC),e(rC,I_e),e(I_e,Phr),e(rC,$hr),e(rC,LO),e(LO,Ihr),e(rC,Dhr),e(K,jhr),e(K,tC),e(tC,D_e),e(D_e,Nhr),e(tC,qhr),e(tC,BO),e(BO,Ghr),e(tC,Ohr),e(K,Xhr),e(K,aC),e(aC,j_e),e(j_e,Vhr),e(aC,zhr),e(aC,xO),e(xO,Whr),e(aC,Qhr),e(K,Hhr),e(K,nC),e(nC,N_e),e(N_e,Uhr),e(nC,Jhr),e(nC,kO),e(kO,Yhr),e(nC,Khr),e(Co,Zhr),e(Co,q_e),e(q_e,epr),e(Co,opr),g(_A,Co,null),b(c,cxe,u),b(c,kc,u),e(kc,sC),e(sC,G_e),g(uA,G_e,null),e(kc,rpr),e(kc,O_e),e(O_e,tpr),b(c,fxe,u),b(c,yr,u),g(bA,yr,null),e(yr,apr),e(yr,Rc),e(Rc,npr),e(Rc,X_e),e(X_e,spr),e(Rc,lpr),e(Rc,V_e),e(V_e,ipr),e(Rc,dpr),e(yr,cpr),e(yr,vA),e(vA,fpr),e(vA,z_e),e(z_e,mpr),e(vA,gpr),e(yr,hpr),e(yr,bt),g(TA,bt,null),e(bt,ppr),e(bt,W_e),e(W_e,_pr),e(bt,upr),e(bt,Sc),e(Sc,bpr),e(Sc,Q_e),e(Q_e,vpr),e(Sc,Tpr),e(Sc,H_e),e(H_e,Fpr),e(Sc,Cpr),e(bt,Mpr),e(bt,U_e),e(U_e,Epr),e(bt,ypr),g(FA,bt,null),e(yr,wpr),e(yr,Mo),g(CA,Mo,null),e(Mo,Apr),e(Mo,J_e),e(J_e,Lpr),e(Mo,Bpr),e(Mo,Tn),e(Tn,xpr),e(Tn,Y_e),e(Y_e,kpr),e(Tn,Rpr),e(Tn,K_e),e(K_e,Spr),e(Tn,Ppr),e(Tn,Z_e),e(Z_e,$pr),e(Tn,Ipr),e(Mo,Dpr),e(Mo,Z),e(Z,lC),e(lC,eue),e(eue,jpr),e(lC,Npr),e(lC,RO),e(RO,qpr),e(lC,Gpr),e(Z,Opr),e(Z,iC),e(iC,oue),e(oue,Xpr),e(iC,Vpr),e(iC,SO),e(SO,zpr),e(iC,Wpr),e(Z,Qpr),e(Z,dC),e(dC,rue),e(rue,Hpr),e(dC,Upr),e(dC,PO),e(PO,Jpr),e(dC,Ypr),e(Z,Kpr),e(Z,cC),e(cC,tue),e(tue,Zpr),e(cC,e_r),e(cC,$O),e($O,o_r),e(cC,r_r),e(Z,t_r),e(Z,fC),e(fC,aue),e(aue,a_r),e(fC,n_r),e(fC,IO),e(IO,s_r),e(fC,l_r),e(Z,i_r),e(Z,mC),e(mC,nue),e(nue,d_r),e(mC,c_r),e(mC,DO),e(DO,f_r),e(mC,m_r),e(Z,g_r),e(Z,gC),e(gC,sue),e(sue,h_r),e(gC,p_r),e(gC,jO),e(jO,__r),e(gC,u_r),e(Z,b_r),e(Z,hC),e(hC,lue),e(lue,v_r),e(hC,T_r),e(hC,NO),e(NO,F_r),e(hC,C_r),e(Z,M_r),e(Z,pC),e(pC,iue),e(iue,E_r),e(pC,y_r),e(pC,qO),e(qO,w_r),e(pC,A_r),e(Z,L_r),e(Z,_C),e(_C,due),e(due,B_r),e(_C,x_r),e(_C,GO),e(GO,k_r),e(_C,R_r),e(Z,S_r),e(Z,uC),e(uC,cue),e(cue,P_r),e(uC,$_r),e(uC,OO),e(OO,I_r),e(uC,D_r),e(Z,j_r),e(Z,bC),e(bC,fue),e(fue,N_r),e(bC,q_r),e(bC,XO),e(XO,G_r),e(bC,O_r),e(Z,X_r),e(Z,vC),e(vC,mue),e(mue,V_r),e(vC,z_r),e(vC,VO),e(VO,W_r),e(vC,Q_r),e(Z,H_r),e(Z,TC),e(TC,gue),e(gue,U_r),e(TC,J_r),e(TC,zO),e(zO,Y_r),e(TC,K_r),e(Z,Z_r),e(Z,FC),e(FC,hue),e(hue,eur),e(FC,our),e(FC,WO),e(WO,rur),e(FC,tur),e(Z,aur),e(Z,CC),e(CC,pue),e(pue,nur),e(CC,sur),e(CC,QO),e(QO,lur),e(CC,iur),e(Z,dur),e(Z,MC),e(MC,_ue),e(_ue,cur),e(MC,fur),e(MC,HO),e(HO,mur),e(MC,gur),e(Z,hur),e(Z,EC),e(EC,uue),e(uue,pur),e(EC,_ur),e(EC,UO),e(UO,uur),e(EC,bur),e(Z,vur),e(Z,yC),e(yC,bue),e(bue,Tur),e(yC,Fur),e(yC,JO),e(JO,Cur),e(yC,Mur),e(Mo,Eur),e(Mo,vue),e(vue,yur),e(Mo,wur),g(MA,Mo,null),b(c,mxe,u),b(c,Pc,u),e(Pc,wC),e(wC,Tue),g(EA,Tue,null),e(Pc,Aur),e(Pc,Fue),e(Fue,Lur),b(c,gxe,u),b(c,wr,u),g(yA,wr,null),e(wr,Bur),e(wr,$c),e($c,xur),e($c,Cue),e(Cue,kur),e($c,Rur),e($c,Mue),e(Mue,Sur),e($c,Pur),e(wr,$ur),e(wr,wA),e(wA,Iur),e(wA,Eue),e(Eue,Dur),e(wA,jur),e(wr,Nur),e(wr,vt),g(AA,vt,null),e(vt,qur),e(vt,yue),e(yue,Gur),e(vt,Our),e(vt,Ic),e(Ic,Xur),e(Ic,wue),e(wue,Vur),e(Ic,zur),e(Ic,Aue),e(Aue,Wur),e(Ic,Qur),e(vt,Hur),e(vt,Lue),e(Lue,Uur),e(vt,Jur),g(LA,vt,null),e(wr,Yur),e(wr,Eo),g(BA,Eo,null),e(Eo,Kur),e(Eo,Bue),e(Bue,Zur),e(Eo,e1r),e(Eo,Fn),e(Fn,o1r),e(Fn,xue),e(xue,r1r),e(Fn,t1r),e(Fn,kue),e(kue,a1r),e(Fn,n1r),e(Fn,Rue),e(Rue,s1r),e(Fn,l1r),e(Eo,i1r),e(Eo,Sue),e(Sue,AC),e(AC,Pue),e(Pue,d1r),e(AC,c1r),e(AC,YO),e(YO,f1r),e(AC,m1r),e(Eo,g1r),e(Eo,$ue),e($ue,h1r),e(Eo,p1r),g(xA,Eo,null),b(c,hxe,u),b(c,Dc,u),e(Dc,LC),e(LC,Iue),g(kA,Iue,null),e(Dc,_1r),e(Dc,Due),e(Due,u1r),b(c,pxe,u),b(c,Ar,u),g(RA,Ar,null),e(Ar,b1r),e(Ar,jc),e(jc,v1r),e(jc,jue),e(jue,T1r),e(jc,F1r),e(jc,Nue),e(Nue,C1r),e(jc,M1r),e(Ar,E1r),e(Ar,SA),e(SA,y1r),e(SA,que),e(que,w1r),e(SA,A1r),e(Ar,L1r),e(Ar,Tt),g(PA,Tt,null),e(Tt,B1r),e(Tt,Gue),e(Gue,x1r),e(Tt,k1r),e(Tt,Nc),e(Nc,R1r),e(Nc,Oue),e(Oue,S1r),e(Nc,P1r),e(Nc,Xue),e(Xue,$1r),e(Nc,I1r),e(Tt,D1r),e(Tt,Vue),e(Vue,j1r),e(Tt,N1r),g($A,Tt,null),e(Ar,q1r),e(Ar,yo),g(IA,yo,null),e(yo,G1r),e(yo,zue),e(zue,O1r),e(yo,X1r),e(yo,Cn),e(Cn,V1r),e(Cn,Wue),e(Wue,z1r),e(Cn,W1r),e(Cn,Que),e(Que,Q1r),e(Cn,H1r),e(Cn,Hue),e(Hue,U1r),e(Cn,J1r),e(yo,Y1r),e(yo,Uue),e(Uue,BC),e(BC,Jue),e(Jue,K1r),e(BC,Z1r),e(BC,KO),e(KO,e2r),e(BC,o2r),e(yo,r2r),e(yo,Yue),e(Yue,t2r),e(yo,a2r),g(DA,yo,null),b(c,_xe,u),b(c,qc,u),e(qc,xC),e(xC,Kue),g(jA,Kue,null),e(qc,n2r),e(qc,Zue),e(Zue,s2r),b(c,uxe,u),b(c,Lr,u),g(NA,Lr,null),e(Lr,l2r),e(Lr,Gc),e(Gc,i2r),e(Gc,e1e),e(e1e,d2r),e(Gc,c2r),e(Gc,o1e),e(o1e,f2r),e(Gc,m2r),e(Lr,g2r),e(Lr,qA),e(qA,h2r),e(qA,r1e),e(r1e,p2r),e(qA,_2r),e(Lr,u2r),e(Lr,Ft),g(GA,Ft,null),e(Ft,b2r),e(Ft,t1e),e(t1e,v2r),e(Ft,T2r),e(Ft,Oc),e(Oc,F2r),e(Oc,a1e),e(a1e,C2r),e(Oc,M2r),e(Oc,n1e),e(n1e,E2r),e(Oc,y2r),e(Ft,w2r),e(Ft,s1e),e(s1e,A2r),e(Ft,L2r),g(OA,Ft,null),e(Lr,B2r),e(Lr,wo),g(XA,wo,null),e(wo,x2r),e(wo,l1e),e(l1e,k2r),e(wo,R2r),e(wo,Mn),e(Mn,S2r),e(Mn,i1e),e(i1e,P2r),e(Mn,$2r),e(Mn,d1e),e(d1e,I2r),e(Mn,D2r),e(Mn,c1e),e(c1e,j2r),e(Mn,N2r),e(wo,q2r),e(wo,z),e(z,kC),e(kC,f1e),e(f1e,G2r),e(kC,O2r),e(kC,ZO),e(ZO,X2r),e(kC,V2r),e(z,z2r),e(z,RC),e(RC,m1e),e(m1e,W2r),e(RC,Q2r),e(RC,eX),e(eX,H2r),e(RC,U2r),e(z,J2r),e(z,SC),e(SC,g1e),e(g1e,Y2r),e(SC,K2r),e(SC,oX),e(oX,Z2r),e(SC,ebr),e(z,obr),e(z,PC),e(PC,h1e),e(h1e,rbr),e(PC,tbr),e(PC,rX),e(rX,abr),e(PC,nbr),e(z,sbr),e(z,$C),e($C,p1e),e(p1e,lbr),e($C,ibr),e($C,tX),e(tX,dbr),e($C,cbr),e(z,fbr),e(z,IC),e(IC,_1e),e(_1e,mbr),e(IC,gbr),e(IC,aX),e(aX,hbr),e(IC,pbr),e(z,_br),e(z,DC),e(DC,u1e),e(u1e,ubr),e(DC,bbr),e(DC,nX),e(nX,vbr),e(DC,Tbr),e(z,Fbr),e(z,jC),e(jC,b1e),e(b1e,Cbr),e(jC,Mbr),e(jC,sX),e(sX,Ebr),e(jC,ybr),e(z,wbr),e(z,NC),e(NC,v1e),e(v1e,Abr),e(NC,Lbr),e(NC,lX),e(lX,Bbr),e(NC,xbr),e(z,kbr),e(z,qC),e(qC,T1e),e(T1e,Rbr),e(qC,Sbr),e(qC,iX),e(iX,Pbr),e(qC,$br),e(z,Ibr),e(z,GC),e(GC,F1e),e(F1e,Dbr),e(GC,jbr),e(GC,dX),e(dX,Nbr),e(GC,qbr),e(z,Gbr),e(z,OC),e(OC,C1e),e(C1e,Obr),e(OC,Xbr),e(OC,cX),e(cX,Vbr),e(OC,zbr),e(z,Wbr),e(z,XC),e(XC,M1e),e(M1e,Qbr),e(XC,Hbr),e(XC,fX),e(fX,Ubr),e(XC,Jbr),e(z,Ybr),e(z,VC),e(VC,E1e),e(E1e,Kbr),e(VC,Zbr),e(VC,mX),e(mX,e5r),e(VC,o5r),e(z,r5r),e(z,zC),e(zC,y1e),e(y1e,t5r),e(zC,a5r),e(zC,gX),e(gX,n5r),e(zC,s5r),e(z,l5r),e(z,WC),e(WC,w1e),e(w1e,i5r),e(WC,d5r),e(WC,hX),e(hX,c5r),e(WC,f5r),e(z,m5r),e(z,QC),e(QC,A1e),e(A1e,g5r),e(QC,h5r),e(QC,pX),e(pX,p5r),e(QC,_5r),e(z,u5r),e(z,HC),e(HC,L1e),e(L1e,b5r),e(HC,v5r),e(HC,_X),e(_X,T5r),e(HC,F5r),e(z,C5r),e(z,UC),e(UC,B1e),e(B1e,M5r),e(UC,E5r),e(UC,uX),e(uX,y5r),e(UC,w5r),e(z,A5r),e(z,JC),e(JC,x1e),e(x1e,L5r),e(JC,B5r),e(JC,bX),e(bX,x5r),e(JC,k5r),e(z,R5r),e(z,YC),e(YC,k1e),e(k1e,S5r),e(YC,P5r),e(YC,vX),e(vX,$5r),e(YC,I5r),e(z,D5r),e(z,KC),e(KC,R1e),e(R1e,j5r),e(KC,N5r),e(KC,TX),e(TX,q5r),e(KC,G5r),e(z,O5r),e(z,ZC),e(ZC,S1e),e(S1e,X5r),e(ZC,V5r),e(ZC,FX),e(FX,z5r),e(ZC,W5r),e(z,Q5r),e(z,e4),e(e4,P1e),e(P1e,H5r),e(e4,U5r),e(e4,CX),e(CX,J5r),e(e4,Y5r),e(wo,K5r),e(wo,$1e),e($1e,Z5r),e(wo,evr),g(VA,wo,null),b(c,bxe,u),b(c,Xc,u),e(Xc,o4),e(o4,I1e),g(zA,I1e,null),e(Xc,ovr),e(Xc,D1e),e(D1e,rvr),b(c,vxe,u),b(c,Br,u),g(WA,Br,null),e(Br,tvr),e(Br,Vc),e(Vc,avr),e(Vc,j1e),e(j1e,nvr),e(Vc,svr),e(Vc,N1e),e(N1e,lvr),e(Vc,ivr),e(Br,dvr),e(Br,QA),e(QA,cvr),e(QA,q1e),e(q1e,fvr),e(QA,mvr),e(Br,gvr),e(Br,Ct),g(HA,Ct,null),e(Ct,hvr),e(Ct,G1e),e(G1e,pvr),e(Ct,_vr),e(Ct,zc),e(zc,uvr),e(zc,O1e),e(O1e,bvr),e(zc,vvr),e(zc,X1e),e(X1e,Tvr),e(zc,Fvr),e(Ct,Cvr),e(Ct,V1e),e(V1e,Mvr),e(Ct,Evr),g(UA,Ct,null),e(Br,yvr),e(Br,Ao),g(JA,Ao,null),e(Ao,wvr),e(Ao,z1e),e(z1e,Avr),e(Ao,Lvr),e(Ao,En),e(En,Bvr),e(En,W1e),e(W1e,xvr),e(En,kvr),e(En,Q1e),e(Q1e,Rvr),e(En,Svr),e(En,H1e),e(H1e,Pvr),e(En,$vr),e(Ao,Ivr),e(Ao,yn),e(yn,r4),e(r4,U1e),e(U1e,Dvr),e(r4,jvr),e(r4,MX),e(MX,Nvr),e(r4,qvr),e(yn,Gvr),e(yn,t4),e(t4,J1e),e(J1e,Ovr),e(t4,Xvr),e(t4,EX),e(EX,Vvr),e(t4,zvr),e(yn,Wvr),e(yn,a4),e(a4,Y1e),e(Y1e,Qvr),e(a4,Hvr),e(a4,yX),e(yX,Uvr),e(a4,Jvr),e(yn,Yvr),e(yn,n4),e(n4,K1e),e(K1e,Kvr),e(n4,Zvr),e(n4,wX),e(wX,eTr),e(n4,oTr),e(Ao,rTr),e(Ao,Z1e),e(Z1e,tTr),e(Ao,aTr),g(YA,Ao,null),b(c,Txe,u),b(c,Wc,u),e(Wc,s4),e(s4,e2e),g(KA,e2e,null),e(Wc,nTr),e(Wc,o2e),e(o2e,sTr),b(c,Fxe,u),b(c,xr,u),g(ZA,xr,null),e(xr,lTr),e(xr,Qc),e(Qc,iTr),e(Qc,r2e),e(r2e,dTr),e(Qc,cTr),e(Qc,t2e),e(t2e,fTr),e(Qc,mTr),e(xr,gTr),e(xr,e0),e(e0,hTr),e(e0,a2e),e(a2e,pTr),e(e0,_Tr),e(xr,uTr),e(xr,Mt),g(o0,Mt,null),e(Mt,bTr),e(Mt,n2e),e(n2e,vTr),e(Mt,TTr),e(Mt,Hc),e(Hc,FTr),e(Hc,s2e),e(s2e,CTr),e(Hc,MTr),e(Hc,l2e),e(l2e,ETr),e(Hc,yTr),e(Mt,wTr),e(Mt,i2e),e(i2e,ATr),e(Mt,LTr),g(r0,Mt,null),e(xr,BTr),e(xr,Lo),g(t0,Lo,null),e(Lo,xTr),e(Lo,d2e),e(d2e,kTr),e(Lo,RTr),e(Lo,wn),e(wn,STr),e(wn,c2e),e(c2e,PTr),e(wn,$Tr),e(wn,f2e),e(f2e,ITr),e(wn,DTr),e(wn,m2e),e(m2e,jTr),e(wn,NTr),e(Lo,qTr),e(Lo,fe),e(fe,l4),e(l4,g2e),e(g2e,GTr),e(l4,OTr),e(l4,AX),e(AX,XTr),e(l4,VTr),e(fe,zTr),e(fe,i4),e(i4,h2e),e(h2e,WTr),e(i4,QTr),e(i4,LX),e(LX,HTr),e(i4,UTr),e(fe,JTr),e(fe,d4),e(d4,p2e),e(p2e,YTr),e(d4,KTr),e(d4,BX),e(BX,ZTr),e(d4,eFr),e(fe,oFr),e(fe,c4),e(c4,_2e),e(_2e,rFr),e(c4,tFr),e(c4,xX),e(xX,aFr),e(c4,nFr),e(fe,sFr),e(fe,f4),e(f4,u2e),e(u2e,lFr),e(f4,iFr),e(f4,kX),e(kX,dFr),e(f4,cFr),e(fe,fFr),e(fe,m4),e(m4,b2e),e(b2e,mFr),e(m4,gFr),e(m4,RX),e(RX,hFr),e(m4,pFr),e(fe,_Fr),e(fe,g4),e(g4,v2e),e(v2e,uFr),e(g4,bFr),e(g4,SX),e(SX,vFr),e(g4,TFr),e(fe,FFr),e(fe,h4),e(h4,T2e),e(T2e,CFr),e(h4,MFr),e(h4,PX),e(PX,EFr),e(h4,yFr),e(fe,wFr),e(fe,p4),e(p4,F2e),e(F2e,AFr),e(p4,LFr),e(p4,$X),e($X,BFr),e(p4,xFr),e(fe,kFr),e(fe,_4),e(_4,C2e),e(C2e,RFr),e(_4,SFr),e(_4,IX),e(IX,PFr),e(_4,$Fr),e(fe,IFr),e(fe,u4),e(u4,M2e),e(M2e,DFr),e(u4,jFr),e(u4,DX),e(DX,NFr),e(u4,qFr),e(Lo,GFr),e(Lo,E2e),e(E2e,OFr),e(Lo,XFr),g(a0,Lo,null),b(c,Cxe,u),b(c,Uc,u),e(Uc,b4),e(b4,y2e),g(n0,y2e,null),e(Uc,VFr),e(Uc,w2e),e(w2e,zFr),b(c,Mxe,u),b(c,kr,u),g(s0,kr,null),e(kr,WFr),e(kr,Jc),e(Jc,QFr),e(Jc,A2e),e(A2e,HFr),e(Jc,UFr),e(Jc,L2e),e(L2e,JFr),e(Jc,YFr),e(kr,KFr),e(kr,l0),e(l0,ZFr),e(l0,B2e),e(B2e,e9r),e(l0,o9r),e(kr,r9r),e(kr,Et),g(i0,Et,null),e(Et,t9r),e(Et,x2e),e(x2e,a9r),e(Et,n9r),e(Et,Yc),e(Yc,s9r),e(Yc,k2e),e(k2e,l9r),e(Yc,i9r),e(Yc,R2e),e(R2e,d9r),e(Yc,c9r),e(Et,f9r),e(Et,S2e),e(S2e,m9r),e(Et,g9r),g(d0,Et,null),e(kr,h9r),e(kr,Bo),g(c0,Bo,null),e(Bo,p9r),e(Bo,P2e),e(P2e,_9r),e(Bo,u9r),e(Bo,An),e(An,b9r),e(An,$2e),e($2e,v9r),e(An,T9r),e(An,I2e),e(I2e,F9r),e(An,C9r),e(An,D2e),e(D2e,M9r),e(An,E9r),e(Bo,y9r),e(Bo,ve),e(ve,v4),e(v4,j2e),e(j2e,w9r),e(v4,A9r),e(v4,jX),e(jX,L9r),e(v4,B9r),e(ve,x9r),e(ve,T4),e(T4,N2e),e(N2e,k9r),e(T4,R9r),e(T4,NX),e(NX,S9r),e(T4,P9r),e(ve,$9r),e(ve,F4),e(F4,q2e),e(q2e,I9r),e(F4,D9r),e(F4,qX),e(qX,j9r),e(F4,N9r),e(ve,q9r),e(ve,C4),e(C4,G2e),e(G2e,G9r),e(C4,O9r),e(C4,GX),e(GX,X9r),e(C4,V9r),e(ve,z9r),e(ve,M4),e(M4,O2e),e(O2e,W9r),e(M4,Q9r),e(M4,OX),e(OX,H9r),e(M4,U9r),e(ve,J9r),e(ve,E4),e(E4,X2e),e(X2e,Y9r),e(E4,K9r),e(E4,XX),e(XX,Z9r),e(E4,eCr),e(ve,oCr),e(ve,y4),e(y4,V2e),e(V2e,rCr),e(y4,tCr),e(y4,VX),e(VX,aCr),e(y4,nCr),e(ve,sCr),e(ve,w4),e(w4,z2e),e(z2e,lCr),e(w4,iCr),e(w4,zX),e(zX,dCr),e(w4,cCr),e(ve,fCr),e(ve,A4),e(A4,W2e),e(W2e,mCr),e(A4,gCr),e(A4,WX),e(WX,hCr),e(A4,pCr),e(Bo,_Cr),e(Bo,Q2e),e(Q2e,uCr),e(Bo,bCr),g(f0,Bo,null),b(c,Exe,u),b(c,Kc,u),e(Kc,L4),e(L4,H2e),g(m0,H2e,null),e(Kc,vCr),e(Kc,U2e),e(U2e,TCr),b(c,yxe,u),b(c,Rr,u),g(g0,Rr,null),e(Rr,FCr),e(Rr,Zc),e(Zc,CCr),e(Zc,J2e),e(J2e,MCr),e(Zc,ECr),e(Zc,Y2e),e(Y2e,yCr),e(Zc,wCr),e(Rr,ACr),e(Rr,h0),e(h0,LCr),e(h0,K2e),e(K2e,BCr),e(h0,xCr),e(Rr,kCr),e(Rr,yt),g(p0,yt,null),e(yt,RCr),e(yt,Z2e),e(Z2e,SCr),e(yt,PCr),e(yt,ef),e(ef,$Cr),e(ef,ebe),e(ebe,ICr),e(ef,DCr),e(ef,obe),e(obe,jCr),e(ef,NCr),e(yt,qCr),e(yt,rbe),e(rbe,GCr),e(yt,OCr),g(_0,yt,null),e(Rr,XCr),e(Rr,xo),g(u0,xo,null),e(xo,VCr),e(xo,tbe),e(tbe,zCr),e(xo,WCr),e(xo,Ln),e(Ln,QCr),e(Ln,abe),e(abe,HCr),e(Ln,UCr),e(Ln,nbe),e(nbe,JCr),e(Ln,YCr),e(Ln,sbe),e(sbe,KCr),e(Ln,ZCr),e(xo,e4r),e(xo,Te),e(Te,B4),e(B4,lbe),e(lbe,o4r),e(B4,r4r),e(B4,QX),e(QX,t4r),e(B4,a4r),e(Te,n4r),e(Te,x4),e(x4,ibe),e(ibe,s4r),e(x4,l4r),e(x4,HX),e(HX,i4r),e(x4,d4r),e(Te,c4r),e(Te,k4),e(k4,dbe),e(dbe,f4r),e(k4,m4r),e(k4,UX),e(UX,g4r),e(k4,h4r),e(Te,p4r),e(Te,R4),e(R4,cbe),e(cbe,_4r),e(R4,u4r),e(R4,JX),e(JX,b4r),e(R4,v4r),e(Te,T4r),e(Te,S4),e(S4,fbe),e(fbe,F4r),e(S4,C4r),e(S4,YX),e(YX,M4r),e(S4,E4r),e(Te,y4r),e(Te,P4),e(P4,mbe),e(mbe,w4r),e(P4,A4r),e(P4,KX),e(KX,L4r),e(P4,B4r),e(Te,x4r),e(Te,$4),e($4,gbe),e(gbe,k4r),e($4,R4r),e($4,ZX),e(ZX,S4r),e($4,P4r),e(Te,$4r),e(Te,I4),e(I4,hbe),e(hbe,I4r),e(I4,D4r),e(I4,eV),e(eV,j4r),e(I4,N4r),e(Te,q4r),e(Te,D4),e(D4,pbe),e(pbe,G4r),e(D4,O4r),e(D4,oV),e(oV,X4r),e(D4,V4r),e(xo,z4r),e(xo,_be),e(_be,W4r),e(xo,Q4r),g(b0,xo,null),b(c,wxe,u),b(c,of,u),e(of,j4),e(j4,ube),g(v0,ube,null),e(of,H4r),e(of,bbe),e(bbe,U4r),b(c,Axe,u),b(c,Sr,u),g(T0,Sr,null),e(Sr,J4r),e(Sr,rf),e(rf,Y4r),e(rf,vbe),e(vbe,K4r),e(rf,Z4r),e(rf,Tbe),e(Tbe,eMr),e(rf,oMr),e(Sr,rMr),e(Sr,F0),e(F0,tMr),e(F0,Fbe),e(Fbe,aMr),e(F0,nMr),e(Sr,sMr),e(Sr,wt),g(C0,wt,null),e(wt,lMr),e(wt,Cbe),e(Cbe,iMr),e(wt,dMr),e(wt,tf),e(tf,cMr),e(tf,Mbe),e(Mbe,fMr),e(tf,mMr),e(tf,Ebe),e(Ebe,gMr),e(tf,hMr),e(wt,pMr),e(wt,ybe),e(ybe,_Mr),e(wt,uMr),g(M0,wt,null),e(Sr,bMr),e(Sr,ko),g(E0,ko,null),e(ko,vMr),e(ko,wbe),e(wbe,TMr),e(ko,FMr),e(ko,Bn),e(Bn,CMr),e(Bn,Abe),e(Abe,MMr),e(Bn,EMr),e(Bn,Lbe),e(Lbe,yMr),e(Bn,wMr),e(Bn,Bbe),e(Bbe,AMr),e(Bn,LMr),e(ko,BMr),e(ko,Fe),e(Fe,N4),e(N4,xbe),e(xbe,xMr),e(N4,kMr),e(N4,rV),e(rV,RMr),e(N4,SMr),e(Fe,PMr),e(Fe,q4),e(q4,kbe),e(kbe,$Mr),e(q4,IMr),e(q4,tV),e(tV,DMr),e(q4,jMr),e(Fe,NMr),e(Fe,G4),e(G4,Rbe),e(Rbe,qMr),e(G4,GMr),e(G4,aV),e(aV,OMr),e(G4,XMr),e(Fe,VMr),e(Fe,O4),e(O4,Sbe),e(Sbe,zMr),e(O4,WMr),e(O4,nV),e(nV,QMr),e(O4,HMr),e(Fe,UMr),e(Fe,X4),e(X4,Pbe),e(Pbe,JMr),e(X4,YMr),e(X4,sV),e(sV,KMr),e(X4,ZMr),e(Fe,eEr),e(Fe,V4),e(V4,$be),e($be,oEr),e(V4,rEr),e(V4,lV),e(lV,tEr),e(V4,aEr),e(Fe,nEr),e(Fe,z4),e(z4,Ibe),e(Ibe,sEr),e(z4,lEr),e(z4,iV),e(iV,iEr),e(z4,dEr),e(Fe,cEr),e(Fe,W4),e(W4,Dbe),e(Dbe,fEr),e(W4,mEr),e(W4,dV),e(dV,gEr),e(W4,hEr),e(Fe,pEr),e(Fe,Q4),e(Q4,jbe),e(jbe,_Er),e(Q4,uEr),e(Q4,cV),e(cV,bEr),e(Q4,vEr),e(ko,TEr),e(ko,Nbe),e(Nbe,FEr),e(ko,CEr),g(y0,ko,null),b(c,Lxe,u),b(c,af,u),e(af,H4),e(H4,qbe),g(w0,qbe,null),e(af,MEr),e(af,Gbe),e(Gbe,EEr),b(c,Bxe,u),b(c,Pr,u),g(A0,Pr,null),e(Pr,yEr),e(Pr,nf),e(nf,wEr),e(nf,Obe),e(Obe,AEr),e(nf,LEr),e(nf,Xbe),e(Xbe,BEr),e(nf,xEr),e(Pr,kEr),e(Pr,L0),e(L0,REr),e(L0,Vbe),e(Vbe,SEr),e(L0,PEr),e(Pr,$Er),e(Pr,At),g(B0,At,null),e(At,IEr),e(At,zbe),e(zbe,DEr),e(At,jEr),e(At,sf),e(sf,NEr),e(sf,Wbe),e(Wbe,qEr),e(sf,GEr),e(sf,Qbe),e(Qbe,OEr),e(sf,XEr),e(At,VEr),e(At,Hbe),e(Hbe,zEr),e(At,WEr),g(x0,At,null),e(Pr,QEr),e(Pr,Ro),g(k0,Ro,null),e(Ro,HEr),e(Ro,Ube),e(Ube,UEr),e(Ro,JEr),e(Ro,xn),e(xn,YEr),e(xn,Jbe),e(Jbe,KEr),e(xn,ZEr),e(xn,Ybe),e(Ybe,e3r),e(xn,o3r),e(xn,Kbe),e(Kbe,r3r),e(xn,t3r),e(Ro,a3r),e(Ro,Ce),e(Ce,U4),e(U4,Zbe),e(Zbe,n3r),e(U4,s3r),e(U4,fV),e(fV,l3r),e(U4,i3r),e(Ce,d3r),e(Ce,J4),e(J4,e5e),e(e5e,c3r),e(J4,f3r),e(J4,mV),e(mV,m3r),e(J4,g3r),e(Ce,h3r),e(Ce,Y4),e(Y4,o5e),e(o5e,p3r),e(Y4,_3r),e(Y4,gV),e(gV,u3r),e(Y4,b3r),e(Ce,v3r),e(Ce,K4),e(K4,r5e),e(r5e,T3r),e(K4,F3r),e(K4,hV),e(hV,C3r),e(K4,M3r),e(Ce,E3r),e(Ce,Z4),e(Z4,t5e),e(t5e,y3r),e(Z4,w3r),e(Z4,pV),e(pV,A3r),e(Z4,L3r),e(Ce,B3r),e(Ce,eM),e(eM,a5e),e(a5e,x3r),e(eM,k3r),e(eM,_V),e(_V,R3r),e(eM,S3r),e(Ce,P3r),e(Ce,oM),e(oM,n5e),e(n5e,$3r),e(oM,I3r),e(oM,uV),e(uV,D3r),e(oM,j3r),e(Ce,N3r),e(Ce,rM),e(rM,s5e),e(s5e,q3r),e(rM,G3r),e(rM,bV),e(bV,O3r),e(rM,X3r),e(Ce,V3r),e(Ce,tM),e(tM,l5e),e(l5e,z3r),e(tM,W3r),e(tM,vV),e(vV,Q3r),e(tM,H3r),e(Ro,U3r),e(Ro,i5e),e(i5e,J3r),e(Ro,Y3r),g(R0,Ro,null),b(c,xxe,u),b(c,lf,u),e(lf,aM),e(aM,d5e),g(S0,d5e,null),e(lf,K3r),e(lf,c5e),e(c5e,Z3r),b(c,kxe,u),b(c,$r,u),g(P0,$r,null),e($r,eyr),e($r,df),e(df,oyr),e(df,f5e),e(f5e,ryr),e(df,tyr),e(df,m5e),e(m5e,ayr),e(df,nyr),e($r,syr),e($r,$0),e($0,lyr),e($0,g5e),e(g5e,iyr),e($0,dyr),e($r,cyr),e($r,Lt),g(I0,Lt,null),e(Lt,fyr),e(Lt,h5e),e(h5e,myr),e(Lt,gyr),e(Lt,cf),e(cf,hyr),e(cf,p5e),e(p5e,pyr),e(cf,_yr),e(cf,_5e),e(_5e,uyr),e(cf,byr),e(Lt,vyr),e(Lt,u5e),e(u5e,Tyr),e(Lt,Fyr),g(D0,Lt,null),e($r,Cyr),e($r,So),g(j0,So,null),e(So,Myr),e(So,b5e),e(b5e,Eyr),e(So,yyr),e(So,kn),e(kn,wyr),e(kn,v5e),e(v5e,Ayr),e(kn,Lyr),e(kn,T5e),e(T5e,Byr),e(kn,xyr),e(kn,F5e),e(F5e,kyr),e(kn,Ryr),e(So,Syr),e(So,so),e(so,nM),e(nM,C5e),e(C5e,Pyr),e(nM,$yr),e(nM,TV),e(TV,Iyr),e(nM,Dyr),e(so,jyr),e(so,sM),e(sM,M5e),e(M5e,Nyr),e(sM,qyr),e(sM,FV),e(FV,Gyr),e(sM,Oyr),e(so,Xyr),e(so,lM),e(lM,E5e),e(E5e,Vyr),e(lM,zyr),e(lM,CV),e(CV,Wyr),e(lM,Qyr),e(so,Hyr),e(so,iM),e(iM,y5e),e(y5e,Uyr),e(iM,Jyr),e(iM,MV),e(MV,Yyr),e(iM,Kyr),e(so,Zyr),e(so,dM),e(dM,w5e),e(w5e,ewr),e(dM,owr),e(dM,EV),e(EV,rwr),e(dM,twr),e(so,awr),e(so,cM),e(cM,A5e),e(A5e,nwr),e(cM,swr),e(cM,yV),e(yV,lwr),e(cM,iwr),e(so,dwr),e(so,fM),e(fM,L5e),e(L5e,cwr),e(fM,fwr),e(fM,wV),e(wV,mwr),e(fM,gwr),e(So,hwr),e(So,B5e),e(B5e,pwr),e(So,_wr),g(N0,So,null),b(c,Rxe,u),b(c,ff,u),e(ff,mM),e(mM,x5e),g(q0,x5e,null),e(ff,uwr),e(ff,k5e),e(k5e,bwr),b(c,Sxe,u),b(c,Ir,u),g(G0,Ir,null),e(Ir,vwr),e(Ir,mf),e(mf,Twr),e(mf,R5e),e(R5e,Fwr),e(mf,Cwr),e(mf,S5e),e(S5e,Mwr),e(mf,Ewr),e(Ir,ywr),e(Ir,O0),e(O0,wwr),e(O0,P5e),e(P5e,Awr),e(O0,Lwr),e(Ir,Bwr),e(Ir,Bt),g(X0,Bt,null),e(Bt,xwr),e(Bt,$5e),e($5e,kwr),e(Bt,Rwr),e(Bt,gf),e(gf,Swr),e(gf,I5e),e(I5e,Pwr),e(gf,$wr),e(gf,D5e),e(D5e,Iwr),e(gf,Dwr),e(Bt,jwr),e(Bt,j5e),e(j5e,Nwr),e(Bt,qwr),g(V0,Bt,null),e(Ir,Gwr),e(Ir,Po),g(z0,Po,null),e(Po,Owr),e(Po,N5e),e(N5e,Xwr),e(Po,Vwr),e(Po,Rn),e(Rn,zwr),e(Rn,q5e),e(q5e,Wwr),e(Rn,Qwr),e(Rn,G5e),e(G5e,Hwr),e(Rn,Uwr),e(Rn,O5e),e(O5e,Jwr),e(Rn,Ywr),e(Po,Kwr),e(Po,lo),e(lo,gM),e(gM,X5e),e(X5e,Zwr),e(gM,e6r),e(gM,AV),e(AV,o6r),e(gM,r6r),e(lo,t6r),e(lo,hM),e(hM,V5e),e(V5e,a6r),e(hM,n6r),e(hM,LV),e(LV,s6r),e(hM,l6r),e(lo,i6r),e(lo,pM),e(pM,z5e),e(z5e,d6r),e(pM,c6r),e(pM,BV),e(BV,f6r),e(pM,m6r),e(lo,g6r),e(lo,_M),e(_M,W5e),e(W5e,h6r),e(_M,p6r),e(_M,xV),e(xV,_6r),e(_M,u6r),e(lo,b6r),e(lo,uM),e(uM,Q5e),e(Q5e,v6r),e(uM,T6r),e(uM,kV),e(kV,F6r),e(uM,C6r),e(lo,M6r),e(lo,bM),e(bM,H5e),e(H5e,E6r),e(bM,y6r),e(bM,RV),e(RV,w6r),e(bM,A6r),e(lo,L6r),e(lo,vM),e(vM,U5e),e(U5e,B6r),e(vM,x6r),e(vM,SV),e(SV,k6r),e(vM,R6r),e(Po,S6r),e(Po,J5e),e(J5e,P6r),e(Po,$6r),g(W0,Po,null),b(c,Pxe,u),b(c,hf,u),e(hf,TM),e(TM,Y5e),g(Q0,Y5e,null),e(hf,I6r),e(hf,K5e),e(K5e,D6r),b(c,$xe,u),b(c,Dr,u),g(H0,Dr,null),e(Dr,j6r),e(Dr,pf),e(pf,N6r),e(pf,Z5e),e(Z5e,q6r),e(pf,G6r),e(pf,eve),e(eve,O6r),e(pf,X6r),e(Dr,V6r),e(Dr,U0),e(U0,z6r),e(U0,ove),e(ove,W6r),e(U0,Q6r),e(Dr,H6r),e(Dr,xt),g(J0,xt,null),e(xt,U6r),e(xt,rve),e(rve,J6r),e(xt,Y6r),e(xt,_f),e(_f,K6r),e(_f,tve),e(tve,Z6r),e(_f,eAr),e(_f,ave),e(ave,oAr),e(_f,rAr),e(xt,tAr),e(xt,nve),e(nve,aAr),e(xt,nAr),g(Y0,xt,null),e(Dr,sAr),e(Dr,$o),g(K0,$o,null),e($o,lAr),e($o,sve),e(sve,iAr),e($o,dAr),e($o,Sn),e(Sn,cAr),e(Sn,lve),e(lve,fAr),e(Sn,mAr),e(Sn,ive),e(ive,gAr),e(Sn,hAr),e(Sn,dve),e(dve,pAr),e(Sn,_Ar),e($o,uAr),e($o,cve),e(cve,FM),e(FM,fve),e(fve,bAr),e(FM,vAr),e(FM,PV),e(PV,TAr),e(FM,FAr),e($o,CAr),e($o,mve),e(mve,MAr),e($o,EAr),g(Z0,$o,null),b(c,Ixe,u),b(c,uf,u),e(uf,CM),e(CM,gve),g(eL,gve,null),e(uf,yAr),e(uf,hve),e(hve,wAr),b(c,Dxe,u),b(c,jr,u),g(oL,jr,null),e(jr,AAr),e(jr,bf),e(bf,LAr),e(bf,pve),e(pve,BAr),e(bf,xAr),e(bf,_ve),e(_ve,kAr),e(bf,RAr),e(jr,SAr),e(jr,rL),e(rL,PAr),e(rL,uve),e(uve,$Ar),e(rL,IAr),e(jr,DAr),e(jr,kt),g(tL,kt,null),e(kt,jAr),e(kt,bve),e(bve,NAr),e(kt,qAr),e(kt,vf),e(vf,GAr),e(vf,vve),e(vve,OAr),e(vf,XAr),e(vf,Tve),e(Tve,VAr),e(vf,zAr),e(kt,WAr),e(kt,Fve),e(Fve,QAr),e(kt,HAr),g(aL,kt,null),e(jr,UAr),e(jr,Io),g(nL,Io,null),e(Io,JAr),e(Io,Cve),e(Cve,YAr),e(Io,KAr),e(Io,Pn),e(Pn,ZAr),e(Pn,Mve),e(Mve,e0r),e(Pn,o0r),e(Pn,Eve),e(Eve,r0r),e(Pn,t0r),e(Pn,yve),e(yve,a0r),e(Pn,n0r),e(Io,s0r),e(Io,sL),e(sL,MM),e(MM,wve),e(wve,l0r),e(MM,i0r),e(MM,$V),e($V,d0r),e(MM,c0r),e(sL,f0r),e(sL,EM),e(EM,Ave),e(Ave,m0r),e(EM,g0r),e(EM,IV),e(IV,h0r),e(EM,p0r),e(Io,_0r),e(Io,Lve),e(Lve,u0r),e(Io,b0r),g(lL,Io,null),b(c,jxe,u),b(c,Tf,u),e(Tf,yM),e(yM,Bve),g(iL,Bve,null),e(Tf,v0r),e(Tf,xve),e(xve,T0r),b(c,Nxe,u),b(c,Nr,u),g(dL,Nr,null),e(Nr,F0r),e(Nr,Ff),e(Ff,C0r),e(Ff,kve),e(kve,M0r),e(Ff,E0r),e(Ff,Rve),e(Rve,y0r),e(Ff,w0r),e(Nr,A0r),e(Nr,cL),e(cL,L0r),e(cL,Sve),e(Sve,B0r),e(cL,x0r),e(Nr,k0r),e(Nr,Rt),g(fL,Rt,null),e(Rt,R0r),e(Rt,Pve),e(Pve,S0r),e(Rt,P0r),e(Rt,Cf),e(Cf,$0r),e(Cf,$ve),e($ve,I0r),e(Cf,D0r),e(Cf,Ive),e(Ive,j0r),e(Cf,N0r),e(Rt,q0r),e(Rt,Dve),e(Dve,G0r),e(Rt,O0r),g(mL,Rt,null),e(Nr,X0r),e(Nr,Do),g(gL,Do,null),e(Do,V0r),e(Do,jve),e(jve,z0r),e(Do,W0r),e(Do,$n),e($n,Q0r),e($n,Nve),e(Nve,H0r),e($n,U0r),e($n,qve),e(qve,J0r),e($n,Y0r),e($n,Gve),e(Gve,K0r),e($n,Z0r),e(Do,eLr),e(Do,Ove),e(Ove,wM),e(wM,Xve),e(Xve,oLr),e(wM,rLr),e(wM,DV),e(DV,tLr),e(wM,aLr),e(Do,nLr),e(Do,Vve),e(Vve,sLr),e(Do,lLr),g(hL,Do,null),qxe=!0},p(c,[u]){const pL={};u&2&&(pL.$$scope={dirty:u,ctx:c}),Bf.$set(pL);const zve={};u&2&&(zve.$$scope={dirty:u,ctx:c}),gh.$set(zve);const Wve={};u&2&&(Wve.$$scope={dirty:u,ctx:c}),Eh.$set(Wve)},i(c){qxe||(h(ce.$$.fragment,c),h($a.$$.fragment,c),h(xE.$$.fragment,c),h(kE.$$.fragment,c),h(Bf.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h(IE.$$.fragment,c),h(DE.$$.fragment,c),h(jE.$$.fragment,c),h(NE.$$.fragment,c),h(qE.$$.fragment,c),h(XE.$$.fragment,c),h(VE.$$.fragment,c),h(zE.$$.fragment,c),h(WE.$$.fragment,c),h(QE.$$.fragment,c),h(JE.$$.fragment,c),h(gh.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(e3.$$.fragment,c),h(t3.$$.fragment,c),h(Eh.$$.fragment,c),h(a3.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(F3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(y3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(R3.$$.fragment,c),h(S3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(D3.$$.fragment,c),h(j3.$$.fragment,c),h(N3.$$.fragment,c),h(q3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Dy.$$.fragment,c),h(Ny.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(E6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(L6.$$.fragment,c),h(B6.$$.fragment,c),h(x6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(D6.$$.fragment,c),h(N6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(DA.$$.fragment,c),h(jA.$$.fragment,c),h(NA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h(I0.$$.fragment,c),h(D0.$$.fragment,c),h(j0.$$.fragment,c),h(N0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),qxe=!0)},o(c){p(ce.$$.fragment,c),p($a.$$.fragment,c),p(xE.$$.fragment,c),p(kE.$$.fragment,c),p(Bf.$$.fragment,c),p(RE.$$.fragment,c),p(SE.$$.fragment,c),p(IE.$$.fragment,c),p(DE.$$.fragment,c),p(jE.$$.fragment,c),p(NE.$$.fragment,c),p(qE.$$.fragment,c),p(XE.$$.fragment,c),p(VE.$$.fragment,c),p(zE.$$.fragment,c),p(WE.$$.fragment,c),p(QE.$$.fragment,c),p(JE.$$.fragment,c),p(gh.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(e3.$$.fragment,c),p(t3.$$.fragment,c),p(Eh.$$.fragment,c),p(a3.$$.fragment,c),p(n3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(F3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(y3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(R3.$$.fragment,c),p(S3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(D3.$$.fragment,c),p(j3.$$.fragment,c),p(N3.$$.fragment,c),p(q3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Dy.$$.fragment,c),p(Ny.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Dw.$$.fragment,c),p(jw.$$.fragment,c),p(Nw.$$.fragment,c),p(qw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Zw.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(s6.$$.fragment,c),p(l6.$$.fragment,c),p(i6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(g6.$$.fragment,c),p(h6.$$.fragment,c),p(p6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(T6.$$.fragment,c),p(F6.$$.fragment,c),p(C6.$$.fragment,c),p(E6.$$.fragment,c),p(y6.$$.fragment,c),p(w6.$$.fragment,c),p(L6.$$.fragment,c),p(B6.$$.fragment,c),p(x6.$$.fragment,c),p(R6.$$.fragment,c),p(S6.$$.fragment,c),p(P6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(D6.$$.fragment,c),p(N6.$$.fragment,c),p(q6.$$.fragment,c),p(G6.$$.fragment,c),p(O6.$$.fragment,c),p(X6.$$.fragment,c),p(V6.$$.fragment,c),p(W6.$$.fragment,c),p(Q6.$$.fragment,c),p(H6.$$.fragment,c),p(U6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(DA.$$.fragment,c),p(jA.$$.fragment,c),p(NA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p(P0.$$.fragment,c),p(I0.$$.fragment,c),p(D0.$$.fragment,c),p(j0.$$.fragment,c),p(N0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),qxe=!1},d(c){t(J),c&&t(xe),c&&t(de),_(ce),c&&t(Ef),c&&t(sa),c&&t(we),c&&t(io),c&&t(wf),_($a,c),c&&t(co),c&&t(ge),c&&t(Oo),c&&t(Ia),c&&t(G7e),c&&t($i),_(xE),c&&t(O7e),c&&t(qn),c&&t(X7e),_(kE,c),c&&t(V7e),c&&t(_8),c&&t(z7e),_(Bf,c),c&&t(W7e),c&&t(Ii),_(RE),c&&t(Q7e),c&&t(Xo),_(SE),_(IE),_(DE),_(jE),c&&t(H7e),c&&t(ji),_(NE),c&&t(U7e),c&&t(Vo),_(qE),_(XE),_(VE),_(zE),c&&t(J7e),c&&t(Ni),_(WE),c&&t(Y7e),c&&t(zo),_(QE),_(JE),_(gh),_(YE),_(KE),c&&t(K7e),c&&t(qi),_(ZE),c&&t(Z7e),c&&t(Wo),_(e3),_(t3),_(Eh),_(a3),_(n3),c&&t(eBe),c&&t(Oi),_(s3),c&&t(oBe),c&&t(Qo),_(l3),_(d3),_(c3),_(f3),_(m3),c&&t(rBe),c&&t(zi),_(g3),c&&t(tBe),c&&t(Ho),_(h3),_(_3),_(u3),_(b3),_(v3),c&&t(aBe),c&&t(Hi),_(T3),c&&t(nBe),c&&t(Uo),_(F3),_(M3),_(E3),_(y3),_(w3),c&&t(sBe),c&&t(Yi),_(A3),c&&t(lBe),c&&t(Jo),_(L3),_(x3),_(k3),_(R3),_(S3),c&&t(iBe),c&&t(ed),_(P3),c&&t(dBe),c&&t(Yo),_($3),_(D3),_(j3),_(N3),_(q3),c&&t(cBe),c&&t(td),_(G3),c&&t(fBe),c&&t(Ko),_(O3),_(V3),_(z3),_(W3),_(Q3),c&&t(mBe),c&&t(sd),_(H3),c&&t(gBe),c&&t(Zo),_(U3),_(Y3),_(K3),_(Z3),_(ey),c&&t(hBe),c&&t(dd),_(oy),c&&t(pBe),c&&t(er),_(ry),_(ay),_(ny),_(sy),_(ly),c&&t(_Be),c&&t(md),_(iy),c&&t(uBe),c&&t(or),_(dy),_(fy),_(my),_(gy),_(hy),c&&t(bBe),c&&t(pd),_(py),c&&t(vBe),c&&t(rr),_(_y),_(by),_(vy),_(Ty),_(Fy),c&&t(TBe),c&&t(bd),_(Cy),c&&t(FBe),c&&t(tr),_(My),_(yy),_(wy),_(Ay),_(Ly),c&&t(CBe),c&&t(Fd),_(By),c&&t(MBe),c&&t(ar),_(xy),_(Ry),_(Sy),_(Py),_($y),c&&t(EBe),c&&t(Ed),_(Iy),c&&t(yBe),c&&t(nr),_(Dy),_(Ny),_(qy),_(Gy),_(Oy),c&&t(wBe),c&&t(Ad),_(Xy),c&&t(ABe),c&&t(sr),_(Vy),_(Wy),_(Qy),_(Hy),_(Uy),c&&t(LBe),c&&t(xd),_(Jy),c&&t(BBe),c&&t(lr),_(Yy),_(Zy),_(ew),_(ow),_(rw),c&&t(xBe),c&&t(Sd),_(tw),c&&t(kBe),c&&t(ir),_(aw),_(sw),_(lw),_(iw),_(dw),c&&t(RBe),c&&t(Id),_(cw),c&&t(SBe),c&&t(dr),_(fw),_(gw),_(hw),_(pw),_(uw),c&&t(PBe),c&&t(Nd),_(bw),c&&t($Be),c&&t(cr),_(vw),_(Fw),_(Cw),_(Mw),_(Ew),c&&t(IBe),c&&t(Od),_(yw),c&&t(DBe),c&&t(fr),_(ww),_(Lw),_(Bw),_(xw),_(kw),c&&t(jBe),c&&t(Wd),_(Rw),c&&t(NBe),c&&t(mr),_(Sw),_($w),_(Iw),_(Dw),_(jw),c&&t(qBe),c&&t(Ud),_(Nw),c&&t(GBe),c&&t(gr),_(qw),_(Ow),_(Xw),_(Vw),_(zw),c&&t(OBe),c&&t(Kd),_(Ww),c&&t(XBe),c&&t(hr),_(Qw),_(Uw),_(Jw),_(Yw),_(Zw),c&&t(VBe),c&&t(oc),_(e6),c&&t(zBe),c&&t(pr),_(o6),_(t6),_(a6),_(n6),_(s6),c&&t(WBe),c&&t(ac),_(l6),c&&t(QBe),c&&t(_r),_(i6),_(c6),_(f6),_(m6),_(g6),c&&t(HBe),c&&t(lc),_(h6),c&&t(UBe),c&&t(ur),_(p6),_(u6),_(b6),_(v6),_(T6),c&&t(JBe),c&&t(cc),_(F6),c&&t(YBe),c&&t(br),_(C6),_(E6),_(y6),_(w6),_(L6),c&&t(KBe),c&&t(gc),_(B6),c&&t(ZBe),c&&t(vr),_(x6),_(R6),_(S6),_(P6),_($6),c&&t(exe),c&&t(_c),_(I6),c&&t(oxe),c&&t(Tr),_(D6),_(N6),_(q6),_(G6),_(O6),c&&t(rxe),c&&t(vc),_(X6),c&&t(txe),c&&t(Fr),_(V6),_(W6),_(Q6),_(H6),_(U6),c&&t(axe),c&&t(Cc),_(J6),c&&t(nxe),c&&t(Cr),_(Y6),_(Z6),_(eA),_(oA),_(rA),c&&t(sxe),c&&t(yc),_(tA),c&&t(lxe),c&&t(Mr),_(aA),_(sA),_(lA),_(iA),_(dA),c&&t(ixe),c&&t(Lc),_(cA),c&&t(dxe),c&&t(Er),_(fA),_(gA),_(hA),_(pA),_(_A),c&&t(cxe),c&&t(kc),_(uA),c&&t(fxe),c&&t(yr),_(bA),_(TA),_(FA),_(CA),_(MA),c&&t(mxe),c&&t(Pc),_(EA),c&&t(gxe),c&&t(wr),_(yA),_(AA),_(LA),_(BA),_(xA),c&&t(hxe),c&&t(Dc),_(kA),c&&t(pxe),c&&t(Ar),_(RA),_(PA),_($A),_(IA),_(DA),c&&t(_xe),c&&t(qc),_(jA),c&&t(uxe),c&&t(Lr),_(NA),_(GA),_(OA),_(XA),_(VA),c&&t(bxe),c&&t(Xc),_(zA),c&&t(vxe),c&&t(Br),_(WA),_(HA),_(UA),_(JA),_(YA),c&&t(Txe),c&&t(Wc),_(KA),c&&t(Fxe),c&&t(xr),_(ZA),_(o0),_(r0),_(t0),_(a0),c&&t(Cxe),c&&t(Uc),_(n0),c&&t(Mxe),c&&t(kr),_(s0),_(i0),_(d0),_(c0),_(f0),c&&t(Exe),c&&t(Kc),_(m0),c&&t(yxe),c&&t(Rr),_(g0),_(p0),_(_0),_(u0),_(b0),c&&t(wxe),c&&t(of),_(v0),c&&t(Axe),c&&t(Sr),_(T0),_(C0),_(M0),_(E0),_(y0),c&&t(Lxe),c&&t(af),_(w0),c&&t(Bxe),c&&t(Pr),_(A0),_(B0),_(x0),_(k0),_(R0),c&&t(xxe),c&&t(lf),_(S0),c&&t(kxe),c&&t($r),_(P0),_(I0),_(D0),_(j0),_(N0),c&&t(Rxe),c&&t(ff),_(q0),c&&t(Sxe),c&&t(Ir),_(G0),_(X0),_(V0),_(z0),_(W0),c&&t(Pxe),c&&t(hf),_(Q0),c&&t($xe),c&&t(Dr),_(H0),_(J0),_(Y0),_(K0),_(Z0),c&&t(Ixe),c&&t(uf),_(eL),c&&t(Dxe),c&&t(jr),_(oL),_(tL),_(aL),_(nL),_(lL),c&&t(jxe),c&&t(Tf),_(iL),c&&t(Nxe),c&&t(Nr),_(dL),_(fL),_(mL),_(gL),_(hL)}}}const i5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function d5t(Ai,J,xe){let{fw:de}=J;return Ai.$$set=me=>{"fw"in me&&xe(0,de=me.fw)},[de]}class _5t extends e5t{constructor(J){super();o5t(this,J,d5t,l5t,r5t,{fw:0})}}export{_5t as default,i5t as metadata};
