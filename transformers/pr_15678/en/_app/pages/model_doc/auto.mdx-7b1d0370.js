import{S as npt,i as spt,s as lpt,e as a,k as l,w as f,t as o,L as ipt,c as n,d as t,m as i,a as s,x as m,h as r,b as c,J as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-9e2b328e.js";import{T as _Er}from"../../chunks/Tip-76f97a76.js";import{D as M}from"../../chunks/Docstring-50fd6873.js";import{C as w}from"../../chunks/CodeBlock-b9ff96e9.js";import{I as z}from"../../chunks/IconCopyLink-fd0e58fd.js";import"../../chunks/CopyButton-4b97cbf7.js";function dpt(yi){let J,Ae,le,me,to,ce,ue,Do,wi,Ef,sa,Ai,Li,UC,yf,ye,io,Bi,Pn,JC,$n,In,YC,ki,jn,KC,xi,wf,$a;return{c(){J=a("p"),Ae=o("If your "),le=a("code"),me=o("NewModelConfig"),to=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Do=o(`, make sure its
`),wi=a("code"),Ef=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Ai=a("code"),Li=o('"new-model"'),UC=o(")."),yf=l(),ye=a("p"),io=o("Likewise, if your "),Bi=a("code"),Pn=o("NewModel"),JC=o(" is a subclass of "),$n=a("a"),In=o("PreTrainedModel"),YC=o(`, make sure its
`),ki=a("code"),jn=o("config_class"),KC=o(` attribute is set to the same class you use when registering the model (here
`),xi=a("code"),wf=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Ae=r(ge,"If your "),le=n(ge,"CODE",{});var S0=s(le);me=r(S0,"NewModelConfig"),S0.forEach(t),to=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Ri=s(ce);ue=r(Ri,"PretrainedConfig"),Ri.forEach(t),Do=r(ge,`, make sure its
`),wi=n(ge,"CODE",{});var P0=s(wi);Ef=r(P0,"model_type"),P0.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Ai=n(ge,"CODE",{});var $0=s(Ai);Li=r($0,'"new-model"'),$0.forEach(t),UC=r(ge,")."),ge.forEach(t),yf=i(co),ye=n(co,"P",{});var qo=s(ye);io=r(qo,"Likewise, if your "),Bi=n(qo,"CODE",{});var Ia=s(Bi);Pn=r(Ia,"NewModel"),Ia.forEach(t),JC=r(qo," is a subclass of "),$n=n(qo,"A",{href:!0});var I0=s($n);In=r(I0,"PreTrainedModel"),I0.forEach(t),YC=r(qo,`, make sure its
`),ki=n(qo,"CODE",{});var Af=s(ki);jn=r(Af,"config_class"),Af.forEach(t),KC=r(qo,` attribute is set to the same class you use when registering the model (here
`),xi=n(qo,"CODE",{});var j0=s(xi);wf=r(j0,"NewModelConfig"),j0.forEach(t),$a=r(qo,")."),qo.forEach(t),this.h()},h(){c($n,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Ae),e(J,le),e(le,me),e(J,to),e(J,ce),e(ce,ue),e(J,Do),e(J,wi),e(wi,Ef),e(J,sa),e(J,Ai),e(Ai,Li),e(J,UC),b(co,yf,ge),b(co,ye,ge),e(ye,io),e(ye,Bi),e(Bi,Pn),e(ye,JC),e(ye,$n),e($n,In),e(ye,YC),e(ye,ki),e(ki,jn),e(ye,KC),e(ye,xi),e(xi,wf),e(ye,$a)},d(co){co&&t(J),co&&t(yf),co&&t(ye)}}}function cpt(yi){let J,Ae,le,me,to;return{c(){J=a("p"),Ae=o("Passing "),le=a("code"),me=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),le=n(ue,"CODE",{});var Do=s(le);me=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,le),e(le,me),e(J,to)},d(ce){ce&&t(J)}}}function fpt(yi){let J,Ae,le,me,to;return{c(){J=a("p"),Ae=o("Passing "),le=a("code"),me=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),le=n(ue,"CODE",{});var Do=s(le);me=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,le),e(le,me),e(J,to)},d(ce){ce&&t(J)}}}function mpt(yi){let J,Ae,le,me,to,ce,ue,Do,wi,Ef,sa,Ai,Li,UC,yf,ye,io,Bi,Pn,JC,$n,In,YC,ki,jn,KC,xi,wf,$a,co,ge,S0,Ri,P0,$0,qo,Ia,I0,Af,j0,Oke,S0e,Si,Lf,MV,ZC,Xke,EV,zke,P0e,Nn,Vke,yV,Wke,Qke,wV,Hke,Uke,$0e,e4,I0e,N0,Jke,j0e,Bf,N0e,Pi,kf,AV,o4,Yke,LV,Kke,D0e,Go,r4,Zke,t4,exe,D0,oxe,rxe,txe,a4,axe,BV,nxe,sxe,lxe,fo,n4,ixe,kV,dxe,cxe,$i,fxe,xV,mxe,gxe,RV,hxe,pxe,_xe,v,xf,SV,uxe,bxe,q0,vxe,Txe,Fxe,Rf,PV,Cxe,Mxe,G0,Exe,yxe,wxe,Sf,$V,Axe,Lxe,O0,Bxe,kxe,xxe,Pf,IV,Rxe,Sxe,X0,Pxe,$xe,Ixe,$f,jV,jxe,Nxe,z0,Dxe,qxe,Gxe,If,NV,Oxe,Xxe,V0,zxe,Vxe,Wxe,jf,DV,Qxe,Hxe,W0,Uxe,Jxe,Yxe,Nf,qV,Kxe,Zxe,Q0,eRe,oRe,rRe,Df,GV,tRe,aRe,H0,nRe,sRe,lRe,qf,OV,iRe,dRe,U0,cRe,fRe,mRe,Gf,XV,gRe,hRe,J0,pRe,_Re,uRe,Of,zV,bRe,vRe,Y0,TRe,FRe,CRe,Xf,VV,MRe,ERe,K0,yRe,wRe,ARe,zf,WV,LRe,BRe,Z0,kRe,xRe,RRe,Vf,QV,SRe,PRe,eL,$Re,IRe,jRe,Wf,HV,NRe,DRe,oL,qRe,GRe,ORe,Qf,UV,XRe,zRe,rL,VRe,WRe,QRe,Hf,JV,HRe,URe,tL,JRe,YRe,KRe,Uf,YV,ZRe,eSe,aL,oSe,rSe,tSe,Jf,KV,aSe,nSe,nL,sSe,lSe,iSe,Yf,ZV,dSe,cSe,sL,fSe,mSe,gSe,Kf,eW,hSe,pSe,lL,_Se,uSe,bSe,Zf,oW,vSe,TSe,iL,FSe,CSe,MSe,em,rW,ESe,ySe,dL,wSe,ASe,LSe,om,tW,BSe,kSe,cL,xSe,RSe,SSe,rm,aW,PSe,$Se,fL,ISe,jSe,NSe,tm,nW,DSe,qSe,mL,GSe,OSe,XSe,am,sW,zSe,VSe,gL,WSe,QSe,HSe,nm,lW,USe,JSe,hL,YSe,KSe,ZSe,sm,iW,ePe,oPe,pL,rPe,tPe,aPe,lm,dW,nPe,sPe,_L,lPe,iPe,dPe,im,cW,cPe,fPe,uL,mPe,gPe,hPe,dm,fW,pPe,_Pe,bL,uPe,bPe,vPe,cm,mW,TPe,FPe,vL,CPe,MPe,EPe,fm,gW,yPe,wPe,TL,APe,LPe,BPe,mm,hW,kPe,xPe,FL,RPe,SPe,PPe,gm,pW,$Pe,IPe,CL,jPe,NPe,DPe,hm,_W,qPe,GPe,ML,OPe,XPe,zPe,pm,uW,VPe,WPe,EL,QPe,HPe,UPe,_m,bW,JPe,YPe,yL,KPe,ZPe,e$e,um,vW,o$e,r$e,wL,t$e,a$e,n$e,bm,TW,s$e,l$e,AL,i$e,d$e,c$e,vm,FW,f$e,m$e,LL,g$e,h$e,p$e,Tm,CW,_$e,u$e,BL,b$e,v$e,T$e,Fm,MW,F$e,C$e,kL,M$e,E$e,y$e,Cm,EW,w$e,A$e,xL,L$e,B$e,k$e,Mm,yW,x$e,R$e,RL,S$e,P$e,$$e,Em,wW,I$e,j$e,SL,N$e,D$e,q$e,ym,AW,G$e,O$e,PL,X$e,z$e,V$e,wm,LW,W$e,Q$e,$L,H$e,U$e,J$e,Am,BW,Y$e,K$e,IL,Z$e,eIe,oIe,Lm,kW,rIe,tIe,jL,aIe,nIe,sIe,Bm,xW,lIe,iIe,NL,dIe,cIe,fIe,km,RW,mIe,gIe,DL,hIe,pIe,_Ie,xm,SW,uIe,bIe,qL,vIe,TIe,FIe,Rm,PW,CIe,MIe,GL,EIe,yIe,wIe,Sm,$W,AIe,LIe,OL,BIe,kIe,xIe,Pm,IW,RIe,SIe,XL,PIe,$Ie,IIe,$m,jW,jIe,NIe,zL,DIe,qIe,GIe,Im,NW,OIe,XIe,VL,zIe,VIe,WIe,jm,DW,QIe,HIe,WL,UIe,JIe,YIe,Nm,qW,KIe,ZIe,QL,eje,oje,rje,Dm,GW,tje,aje,HL,nje,sje,lje,qm,OW,ije,dje,UL,cje,fje,mje,Gm,XW,gje,hje,JL,pje,_je,uje,Om,zW,bje,vje,YL,Tje,Fje,Cje,Xm,VW,Mje,Eje,KL,yje,wje,Aje,zm,WW,Lje,Bje,ZL,kje,xje,Rje,Vm,QW,Sje,Pje,e9,$je,Ije,jje,Wm,HW,Nje,Dje,o9,qje,Gje,Oje,Qm,UW,Xje,zje,r9,Vje,Wje,Qje,Hm,JW,Hje,Uje,t9,Jje,Yje,Kje,Um,YW,Zje,eNe,a9,oNe,rNe,tNe,Jm,KW,aNe,nNe,n9,sNe,lNe,iNe,Ym,ZW,dNe,cNe,s9,fNe,mNe,gNe,Km,eQ,hNe,pNe,l9,_Ne,uNe,bNe,Zm,oQ,vNe,TNe,i9,FNe,CNe,MNe,eg,rQ,ENe,yNe,d9,wNe,ANe,LNe,og,tQ,BNe,kNe,c9,xNe,RNe,SNe,rg,aQ,PNe,$Ne,f9,INe,jNe,NNe,tg,nQ,DNe,qNe,m9,GNe,ONe,XNe,ag,sQ,zNe,VNe,g9,WNe,QNe,HNe,ng,lQ,UNe,JNe,h9,YNe,KNe,ZNe,sg,iQ,eDe,oDe,p9,rDe,tDe,aDe,lg,dQ,nDe,sDe,_9,lDe,iDe,dDe,ig,cQ,cDe,fDe,u9,mDe,gDe,hDe,dg,fQ,pDe,_De,b9,uDe,bDe,vDe,cg,mQ,TDe,FDe,v9,CDe,MDe,EDe,fg,gQ,yDe,wDe,T9,ADe,LDe,BDe,mg,hQ,kDe,xDe,F9,RDe,SDe,PDe,pQ,$De,IDe,s4,jDe,gg,l4,NDe,_Q,DDe,q0e,Ii,hg,uQ,i4,qDe,bQ,GDe,G0e,Oo,d4,ODe,c4,XDe,C9,zDe,VDe,WDe,f4,QDe,vQ,HDe,UDe,JDe,mo,m4,YDe,TQ,KDe,ZDe,ja,eqe,FQ,oqe,rqe,CQ,tqe,aqe,MQ,nqe,sqe,lqe,E,Dn,EQ,iqe,dqe,M9,cqe,fqe,E9,mqe,gqe,hqe,qn,yQ,pqe,_qe,y9,uqe,bqe,w9,vqe,Tqe,Fqe,Gn,wQ,Cqe,Mqe,A9,Eqe,yqe,L9,wqe,Aqe,Lqe,pg,AQ,Bqe,kqe,B9,xqe,Rqe,Sqe,On,LQ,Pqe,$qe,k9,Iqe,jqe,x9,Nqe,Dqe,qqe,_g,BQ,Gqe,Oqe,R9,Xqe,zqe,Vqe,ug,kQ,Wqe,Qqe,S9,Hqe,Uqe,Jqe,bg,xQ,Yqe,Kqe,P9,Zqe,eGe,oGe,Xn,RQ,rGe,tGe,$9,aGe,nGe,I9,sGe,lGe,iGe,zn,SQ,dGe,cGe,j9,fGe,mGe,N9,gGe,hGe,pGe,Vn,PQ,_Ge,uGe,D9,bGe,vGe,q9,TGe,FGe,CGe,vg,$Q,MGe,EGe,G9,yGe,wGe,AGe,Tg,IQ,LGe,BGe,O9,kGe,xGe,RGe,Wn,jQ,SGe,PGe,X9,$Ge,IGe,z9,jGe,NGe,DGe,Fg,NQ,qGe,GGe,V9,OGe,XGe,zGe,Qn,DQ,VGe,WGe,W9,QGe,HGe,Q9,UGe,JGe,YGe,Hn,qQ,KGe,ZGe,H9,eOe,oOe,U9,rOe,tOe,aOe,Un,GQ,nOe,sOe,J9,lOe,iOe,OQ,dOe,cOe,fOe,Cg,XQ,mOe,gOe,Y9,hOe,pOe,_Oe,Jn,zQ,uOe,bOe,K9,vOe,TOe,Z9,FOe,COe,MOe,Mg,VQ,EOe,yOe,eB,wOe,AOe,LOe,Yn,WQ,BOe,kOe,oB,xOe,ROe,rB,SOe,POe,$Oe,Kn,QQ,IOe,jOe,tB,NOe,DOe,aB,qOe,GOe,OOe,Zn,HQ,XOe,zOe,nB,VOe,WOe,sB,QOe,HOe,UOe,Eg,UQ,JOe,YOe,lB,KOe,ZOe,eXe,es,JQ,oXe,rXe,iB,tXe,aXe,dB,nXe,sXe,lXe,yg,YQ,iXe,dXe,cB,cXe,fXe,mXe,os,KQ,gXe,hXe,fB,pXe,_Xe,mB,uXe,bXe,vXe,rs,ZQ,TXe,FXe,gB,CXe,MXe,hB,EXe,yXe,wXe,ts,eH,AXe,LXe,pB,BXe,kXe,_B,xXe,RXe,SXe,as,oH,PXe,$Xe,uB,IXe,jXe,bB,NXe,DXe,qXe,wg,rH,GXe,OXe,vB,XXe,zXe,VXe,ns,tH,WXe,QXe,TB,HXe,UXe,FB,JXe,YXe,KXe,ss,aH,ZXe,eze,CB,oze,rze,MB,tze,aze,nze,ls,nH,sze,lze,EB,ize,dze,yB,cze,fze,mze,is,sH,gze,hze,wB,pze,_ze,AB,uze,bze,vze,ds,lH,Tze,Fze,LB,Cze,Mze,BB,Eze,yze,wze,cs,iH,Aze,Lze,kB,Bze,kze,xB,xze,Rze,Sze,Ag,dH,Pze,$ze,RB,Ize,jze,Nze,fs,cH,Dze,qze,SB,Gze,Oze,PB,Xze,zze,Vze,Lg,fH,Wze,Qze,$B,Hze,Uze,Jze,Bg,mH,Yze,Kze,IB,Zze,eVe,oVe,ms,gH,rVe,tVe,jB,aVe,nVe,NB,sVe,lVe,iVe,gs,hH,dVe,cVe,DB,fVe,mVe,qB,gVe,hVe,pVe,kg,pH,_Ve,uVe,GB,bVe,vVe,TVe,hs,_H,FVe,CVe,OB,MVe,EVe,XB,yVe,wVe,AVe,ps,uH,LVe,BVe,zB,kVe,xVe,VB,RVe,SVe,PVe,_s,bH,$Ve,IVe,WB,jVe,NVe,QB,DVe,qVe,GVe,us,vH,OVe,XVe,HB,zVe,VVe,UB,WVe,QVe,HVe,bs,TH,UVe,JVe,JB,YVe,KVe,YB,ZVe,eWe,oWe,xg,FH,rWe,tWe,KB,aWe,nWe,sWe,Rg,CH,lWe,iWe,ZB,dWe,cWe,fWe,Sg,MH,mWe,gWe,ek,hWe,pWe,_We,vs,EH,uWe,bWe,ok,vWe,TWe,rk,FWe,CWe,MWe,Pg,yH,EWe,yWe,tk,wWe,AWe,LWe,Ts,wH,BWe,kWe,ak,xWe,RWe,nk,SWe,PWe,$We,Fs,AH,IWe,jWe,sk,NWe,DWe,lk,qWe,GWe,OWe,Cs,LH,XWe,zWe,ik,VWe,WWe,dk,QWe,HWe,UWe,Ms,BH,JWe,YWe,ck,KWe,ZWe,fk,eQe,oQe,rQe,Es,kH,tQe,aQe,mk,nQe,sQe,gk,lQe,iQe,dQe,$g,xH,cQe,fQe,hk,mQe,gQe,hQe,Ig,RH,pQe,_Qe,pk,uQe,bQe,vQe,ys,SH,TQe,FQe,_k,CQe,MQe,uk,EQe,yQe,wQe,ws,PH,AQe,LQe,bk,BQe,kQe,vk,xQe,RQe,SQe,As,$H,PQe,$Qe,Tk,IQe,jQe,Fk,NQe,DQe,qQe,jg,IH,GQe,OQe,Ck,XQe,zQe,VQe,Ng,jH,WQe,QQe,Mk,HQe,UQe,JQe,Dg,NH,YQe,KQe,Ek,ZQe,eHe,oHe,qg,DH,rHe,tHe,yk,aHe,nHe,sHe,Ls,qH,lHe,iHe,wk,dHe,cHe,Ak,fHe,mHe,gHe,Gg,GH,hHe,pHe,Lk,_He,uHe,bHe,Og,OH,vHe,THe,Bk,FHe,CHe,MHe,Bs,XH,EHe,yHe,kk,wHe,AHe,xk,LHe,BHe,kHe,ks,zH,xHe,RHe,Rk,SHe,PHe,Sk,$He,IHe,jHe,VH,NHe,DHe,g4,qHe,Xg,h4,GHe,WH,OHe,O0e,ji,zg,QH,p4,XHe,HH,zHe,X0e,Xo,_4,VHe,u4,WHe,Pk,QHe,HHe,UHe,b4,JHe,UH,YHe,KHe,ZHe,Le,v4,eUe,JH,oUe,rUe,Na,tUe,YH,aUe,nUe,KH,sUe,lUe,ZH,iUe,dUe,cUe,ne,Vg,eU,fUe,mUe,$k,gUe,hUe,pUe,Wg,oU,_Ue,uUe,Ik,bUe,vUe,TUe,Qg,rU,FUe,CUe,jk,MUe,EUe,yUe,Hg,tU,wUe,AUe,Nk,LUe,BUe,kUe,Ug,aU,xUe,RUe,Dk,SUe,PUe,$Ue,Jg,nU,IUe,jUe,qk,NUe,DUe,qUe,Yg,sU,GUe,OUe,Gk,XUe,zUe,VUe,Kg,lU,WUe,QUe,Ok,HUe,UUe,JUe,Zg,iU,YUe,KUe,Xk,ZUe,eJe,oJe,eh,dU,rJe,tJe,zk,aJe,nJe,sJe,oh,cU,lJe,iJe,Vk,dJe,cJe,fJe,rh,fU,mJe,gJe,Wk,hJe,pJe,_Je,th,mU,uJe,bJe,Qk,vJe,TJe,FJe,ah,gU,CJe,MJe,Hk,EJe,yJe,wJe,nh,hU,AJe,LJe,Uk,BJe,kJe,xJe,sh,RJe,pU,SJe,PJe,T4,$Je,lh,F4,IJe,_U,jJe,z0e,Ni,ih,uU,C4,NJe,bU,DJe,V0e,zo,M4,qJe,E4,GJe,Jk,OJe,XJe,zJe,y4,VJe,vU,WJe,QJe,HJe,Be,w4,UJe,TU,JJe,YJe,Di,KJe,FU,ZJe,eYe,CU,oYe,rYe,tYe,we,dh,MU,aYe,nYe,Yk,sYe,lYe,iYe,ch,EU,dYe,cYe,Kk,fYe,mYe,gYe,fh,yU,hYe,pYe,Zk,_Ye,uYe,bYe,mh,wU,vYe,TYe,ex,FYe,CYe,MYe,gh,AU,EYe,yYe,ox,wYe,AYe,LYe,hh,LU,BYe,kYe,rx,xYe,RYe,SYe,ph,BU,PYe,$Ye,tx,IYe,jYe,NYe,_h,kU,DYe,qYe,ax,GYe,OYe,XYe,uh,zYe,xU,VYe,WYe,A4,QYe,bh,L4,HYe,RU,UYe,W0e,qi,vh,SU,B4,JYe,PU,YYe,Q0e,Vo,k4,KYe,Gi,ZYe,$U,eKe,oKe,IU,rKe,tKe,aKe,x4,nKe,jU,sKe,lKe,iKe,Nr,R4,dKe,NU,cKe,fKe,Oi,mKe,DU,gKe,hKe,qU,pKe,_Ke,uKe,GU,bKe,vKe,S4,TKe,ke,P4,FKe,OU,CKe,MKe,Da,EKe,XU,yKe,wKe,zU,AKe,LKe,VU,BKe,kKe,xKe,F,Th,WU,RKe,SKe,nx,PKe,$Ke,IKe,Fh,QU,jKe,NKe,sx,DKe,qKe,GKe,Ch,HU,OKe,XKe,lx,zKe,VKe,WKe,Mh,UU,QKe,HKe,ix,UKe,JKe,YKe,Eh,JU,KKe,ZKe,dx,eZe,oZe,rZe,yh,YU,tZe,aZe,cx,nZe,sZe,lZe,wh,KU,iZe,dZe,fx,cZe,fZe,mZe,Ah,ZU,gZe,hZe,mx,pZe,_Ze,uZe,Lh,eJ,bZe,vZe,gx,TZe,FZe,CZe,Bh,oJ,MZe,EZe,hx,yZe,wZe,AZe,kh,rJ,LZe,BZe,px,kZe,xZe,RZe,xh,tJ,SZe,PZe,_x,$Ze,IZe,jZe,Rh,aJ,NZe,DZe,ux,qZe,GZe,OZe,Sh,nJ,XZe,zZe,bx,VZe,WZe,QZe,Ph,sJ,HZe,UZe,vx,JZe,YZe,KZe,$h,lJ,ZZe,eeo,Tx,oeo,reo,teo,Ih,iJ,aeo,neo,Fx,seo,leo,ieo,jh,dJ,deo,ceo,Cx,feo,meo,geo,Nh,cJ,heo,peo,Mx,_eo,ueo,beo,Dh,fJ,veo,Teo,Ex,Feo,Ceo,Meo,qh,mJ,Eeo,yeo,yx,weo,Aeo,Leo,Gh,gJ,Beo,keo,wx,xeo,Reo,Seo,Oh,hJ,Peo,$eo,Ax,Ieo,jeo,Neo,Xh,pJ,Deo,qeo,Lx,Geo,Oeo,Xeo,zh,_J,zeo,Veo,Bx,Weo,Qeo,Heo,xs,uJ,Ueo,Jeo,kx,Yeo,Keo,xx,Zeo,eoo,ooo,Vh,bJ,roo,too,Rx,aoo,noo,soo,Wh,vJ,loo,ioo,Sx,doo,coo,foo,Qh,TJ,moo,goo,Px,hoo,poo,_oo,Hh,FJ,uoo,boo,$x,voo,Too,Foo,Uh,CJ,Coo,Moo,Ix,Eoo,yoo,woo,Jh,MJ,Aoo,Loo,jx,Boo,koo,xoo,Yh,EJ,Roo,Soo,Nx,Poo,$oo,Ioo,Kh,yJ,joo,Noo,Dx,Doo,qoo,Goo,Zh,wJ,Ooo,Xoo,qx,zoo,Voo,Woo,ep,AJ,Qoo,Hoo,Gx,Uoo,Joo,Yoo,op,LJ,Koo,Zoo,Ox,ero,oro,rro,rp,BJ,tro,aro,Xx,nro,sro,lro,tp,kJ,iro,dro,zx,cro,fro,mro,ap,xJ,gro,hro,Vx,pro,_ro,uro,np,RJ,bro,vro,Wx,Tro,Fro,Cro,sp,SJ,Mro,Ero,Qx,yro,wro,Aro,lp,PJ,Lro,Bro,Hx,kro,xro,Rro,ip,$J,Sro,Pro,Ux,$ro,Iro,jro,dp,IJ,Nro,Dro,Jx,qro,Gro,Oro,cp,jJ,Xro,zro,Yx,Vro,Wro,Qro,fp,NJ,Hro,Uro,Kx,Jro,Yro,Kro,mp,DJ,Zro,eto,Zx,oto,rto,tto,gp,qJ,ato,nto,eR,sto,lto,ito,hp,GJ,dto,cto,oR,fto,mto,gto,pp,OJ,hto,pto,rR,_to,uto,bto,_p,XJ,vto,Tto,tR,Fto,Cto,Mto,up,zJ,Eto,yto,aR,wto,Ato,Lto,bp,VJ,Bto,kto,nR,xto,Rto,Sto,vp,WJ,Pto,$to,sR,Ito,jto,Nto,Tp,QJ,Dto,qto,lR,Gto,Oto,Xto,Fp,HJ,zto,Vto,iR,Wto,Qto,Hto,Cp,UJ,Uto,Jto,dR,Yto,Kto,Zto,Mp,JJ,eao,oao,cR,rao,tao,aao,Ep,YJ,nao,sao,fR,lao,iao,dao,yp,KJ,cao,fao,mR,mao,gao,hao,wp,ZJ,pao,_ao,gR,uao,bao,vao,Ap,eY,Tao,Fao,hR,Cao,Mao,Eao,Lp,oY,yao,wao,pR,Aao,Lao,Bao,Bp,rY,kao,xao,_R,Rao,Sao,Pao,kp,tY,$ao,Iao,uR,jao,Nao,Dao,xp,aY,qao,Gao,bR,Oao,Xao,zao,Rp,nY,Vao,Wao,vR,Qao,Hao,Uao,Sp,sY,Jao,Yao,TR,Kao,Zao,eno,Pp,lY,ono,rno,FR,tno,ano,nno,$p,iY,sno,lno,CR,ino,dno,cno,Ip,dY,fno,mno,MR,gno,hno,pno,jp,cY,_no,uno,ER,bno,vno,Tno,Np,fY,Fno,Cno,yR,Mno,Eno,yno,Dp,mY,wno,Ano,wR,Lno,Bno,kno,qp,gY,xno,Rno,AR,Sno,Pno,$no,Gp,hY,Ino,jno,LR,Nno,Dno,qno,Op,pY,Gno,Ono,BR,Xno,zno,Vno,Xp,_Y,Wno,Qno,kR,Hno,Uno,Jno,zp,uY,Yno,Kno,xR,Zno,eso,oso,Vp,bY,rso,tso,RR,aso,nso,sso,Wp,vY,lso,iso,SR,dso,cso,fso,Qp,TY,mso,gso,PR,hso,pso,_so,Hp,uso,FY,bso,vso,CY,Tso,Fso,MY,Cso,Mso,$4,H0e,Xi,Up,EY,I4,Eso,yY,yso,U0e,Wo,j4,wso,zi,Aso,wY,Lso,Bso,AY,kso,xso,Rso,N4,Sso,LY,Pso,$so,Iso,Dr,D4,jso,BY,Nso,Dso,Vi,qso,kY,Gso,Oso,xY,Xso,zso,Vso,RY,Wso,Qso,q4,Hso,xe,G4,Uso,SY,Jso,Yso,qa,Kso,PY,Zso,elo,$Y,olo,rlo,IY,tlo,alo,nlo,x,Jp,jY,slo,llo,$R,ilo,dlo,clo,Yp,NY,flo,mlo,IR,glo,hlo,plo,Kp,DY,_lo,ulo,jR,blo,vlo,Tlo,Zp,qY,Flo,Clo,NR,Mlo,Elo,ylo,e_,GY,wlo,Alo,DR,Llo,Blo,klo,o_,OY,xlo,Rlo,qR,Slo,Plo,$lo,r_,XY,Ilo,jlo,GR,Nlo,Dlo,qlo,t_,zY,Glo,Olo,OR,Xlo,zlo,Vlo,a_,VY,Wlo,Qlo,XR,Hlo,Ulo,Jlo,n_,WY,Ylo,Klo,zR,Zlo,eio,oio,s_,QY,rio,tio,VR,aio,nio,sio,l_,HY,lio,iio,WR,dio,cio,fio,i_,UY,mio,gio,QR,hio,pio,_io,d_,JY,uio,bio,HR,vio,Tio,Fio,c_,YY,Cio,Mio,UR,Eio,yio,wio,f_,KY,Aio,Lio,JR,Bio,kio,xio,m_,ZY,Rio,Sio,YR,Pio,$io,Iio,g_,eK,jio,Nio,KR,Dio,qio,Gio,h_,oK,Oio,Xio,ZR,zio,Vio,Wio,p_,rK,Qio,Hio,eS,Uio,Jio,Yio,__,tK,Kio,Zio,oS,edo,odo,rdo,u_,aK,tdo,ado,rS,ndo,sdo,ldo,b_,nK,ido,ddo,tS,cdo,fdo,mdo,v_,sK,gdo,hdo,aS,pdo,_do,udo,T_,lK,bdo,vdo,nS,Tdo,Fdo,Cdo,F_,iK,Mdo,Edo,sS,ydo,wdo,Ado,C_,dK,Ldo,Bdo,lS,kdo,xdo,Rdo,M_,cK,Sdo,Pdo,iS,$do,Ido,jdo,E_,fK,Ndo,Ddo,dS,qdo,Gdo,Odo,y_,mK,Xdo,zdo,cS,Vdo,Wdo,Qdo,w_,gK,Hdo,Udo,fS,Jdo,Ydo,Kdo,A_,hK,Zdo,eco,mS,oco,rco,tco,L_,pK,aco,nco,gS,sco,lco,ico,B_,_K,dco,cco,hS,fco,mco,gco,k_,uK,hco,pco,pS,_co,uco,bco,x_,bK,vco,Tco,_S,Fco,Cco,Mco,R_,vK,Eco,yco,uS,wco,Aco,Lco,S_,TK,Bco,kco,bS,xco,Rco,Sco,P_,Pco,FK,$co,Ico,CK,jco,Nco,MK,Dco,qco,O4,J0e,Wi,$_,EK,X4,Gco,yK,Oco,Y0e,Qo,z4,Xco,Qi,zco,wK,Vco,Wco,AK,Qco,Hco,Uco,V4,Jco,LK,Yco,Kco,Zco,qr,W4,efo,BK,ofo,rfo,Hi,tfo,kK,afo,nfo,xK,sfo,lfo,ifo,RK,dfo,cfo,Q4,ffo,Re,H4,mfo,SK,gfo,hfo,Ga,pfo,PK,_fo,ufo,$K,bfo,vfo,IK,Tfo,Ffo,Cfo,I,I_,jK,Mfo,Efo,vS,yfo,wfo,Afo,j_,NK,Lfo,Bfo,TS,kfo,xfo,Rfo,N_,DK,Sfo,Pfo,FS,$fo,Ifo,jfo,D_,qK,Nfo,Dfo,CS,qfo,Gfo,Ofo,q_,GK,Xfo,zfo,MS,Vfo,Wfo,Qfo,G_,OK,Hfo,Ufo,ES,Jfo,Yfo,Kfo,O_,XK,Zfo,emo,yS,omo,rmo,tmo,X_,zK,amo,nmo,wS,smo,lmo,imo,z_,VK,dmo,cmo,AS,fmo,mmo,gmo,V_,WK,hmo,pmo,LS,_mo,umo,bmo,W_,QK,vmo,Tmo,BS,Fmo,Cmo,Mmo,Q_,HK,Emo,ymo,kS,wmo,Amo,Lmo,H_,UK,Bmo,kmo,xS,xmo,Rmo,Smo,U_,JK,Pmo,$mo,RS,Imo,jmo,Nmo,J_,YK,Dmo,qmo,SS,Gmo,Omo,Xmo,Y_,KK,zmo,Vmo,PS,Wmo,Qmo,Hmo,K_,ZK,Umo,Jmo,$S,Ymo,Kmo,Zmo,Z_,eZ,ego,ogo,IS,rgo,tgo,ago,eu,oZ,ngo,sgo,jS,lgo,igo,dgo,ou,rZ,cgo,fgo,NS,mgo,ggo,hgo,ru,tZ,pgo,_go,DS,ugo,bgo,vgo,tu,aZ,Tgo,Fgo,qS,Cgo,Mgo,Ego,au,nZ,ygo,wgo,GS,Ago,Lgo,Bgo,nu,sZ,kgo,xgo,OS,Rgo,Sgo,Pgo,su,lZ,$go,Igo,XS,jgo,Ngo,Dgo,lu,iZ,qgo,Ggo,zS,Ogo,Xgo,zgo,iu,dZ,Vgo,Wgo,VS,Qgo,Hgo,Ugo,du,cZ,Jgo,Ygo,WS,Kgo,Zgo,eho,cu,fZ,oho,rho,QS,tho,aho,nho,fu,mZ,sho,lho,HS,iho,dho,cho,mu,gZ,fho,mho,US,gho,hho,pho,gu,hZ,_ho,uho,JS,bho,vho,Tho,hu,pZ,Fho,Cho,YS,Mho,Eho,yho,pu,who,_Z,Aho,Lho,uZ,Bho,kho,bZ,xho,Rho,U4,K0e,Ui,_u,vZ,J4,Sho,TZ,Pho,Z0e,Ho,Y4,$ho,Ji,Iho,FZ,jho,Nho,CZ,Dho,qho,Gho,K4,Oho,MZ,Xho,zho,Vho,Gr,Z4,Who,EZ,Qho,Hho,Yi,Uho,yZ,Jho,Yho,wZ,Kho,Zho,epo,AZ,opo,rpo,eM,tpo,Se,oM,apo,LZ,npo,spo,Oa,lpo,BZ,ipo,dpo,kZ,cpo,fpo,xZ,mpo,gpo,hpo,$,uu,RZ,ppo,_po,KS,upo,bpo,vpo,bu,SZ,Tpo,Fpo,ZS,Cpo,Mpo,Epo,vu,PZ,ypo,wpo,eP,Apo,Lpo,Bpo,Tu,$Z,kpo,xpo,oP,Rpo,Spo,Ppo,Fu,IZ,$po,Ipo,rP,jpo,Npo,Dpo,Cu,jZ,qpo,Gpo,tP,Opo,Xpo,zpo,Mu,NZ,Vpo,Wpo,aP,Qpo,Hpo,Upo,Eu,DZ,Jpo,Ypo,nP,Kpo,Zpo,e_o,yu,qZ,o_o,r_o,sP,t_o,a_o,n_o,wu,GZ,s_o,l_o,lP,i_o,d_o,c_o,Au,OZ,f_o,m_o,iP,g_o,h_o,p_o,Lu,XZ,__o,u_o,dP,b_o,v_o,T_o,Bu,zZ,F_o,C_o,cP,M_o,E_o,y_o,ku,VZ,w_o,A_o,fP,L_o,B_o,k_o,xu,WZ,x_o,R_o,mP,S_o,P_o,$_o,Ru,QZ,I_o,j_o,gP,N_o,D_o,q_o,Su,HZ,G_o,O_o,hP,X_o,z_o,V_o,Pu,UZ,W_o,Q_o,pP,H_o,U_o,J_o,$u,JZ,Y_o,K_o,_P,Z_o,euo,ouo,Iu,YZ,ruo,tuo,uP,auo,nuo,suo,ju,KZ,luo,iuo,bP,duo,cuo,fuo,Nu,ZZ,muo,guo,vP,huo,puo,_uo,Du,eee,uuo,buo,TP,vuo,Tuo,Fuo,qu,oee,Cuo,Muo,FP,Euo,yuo,wuo,Gu,ree,Auo,Luo,CP,Buo,kuo,xuo,Ou,tee,Ruo,Suo,MP,Puo,$uo,Iuo,Xu,aee,juo,Nuo,EP,Duo,quo,Guo,zu,nee,Ouo,Xuo,yP,zuo,Vuo,Wuo,Vu,see,Quo,Huo,wP,Uuo,Juo,Yuo,Wu,lee,Kuo,Zuo,iee,e1o,o1o,r1o,Qu,dee,t1o,a1o,AP,n1o,s1o,l1o,Hu,cee,i1o,d1o,LP,c1o,f1o,m1o,Uu,fee,g1o,h1o,BP,p1o,_1o,u1o,Ju,mee,b1o,v1o,kP,T1o,F1o,C1o,Yu,M1o,gee,E1o,y1o,hee,w1o,A1o,pee,L1o,B1o,rM,eLe,Ki,Ku,_ee,tM,k1o,uee,x1o,oLe,Uo,aM,R1o,Zi,S1o,bee,P1o,$1o,vee,I1o,j1o,N1o,nM,D1o,Tee,q1o,G1o,O1o,Or,sM,X1o,Fee,z1o,V1o,ed,W1o,Cee,Q1o,H1o,Mee,U1o,J1o,Y1o,Eee,K1o,Z1o,lM,ebo,Pe,iM,obo,yee,rbo,tbo,Xa,abo,wee,nbo,sbo,Aee,lbo,ibo,Lee,dbo,cbo,fbo,se,Zu,Bee,mbo,gbo,xP,hbo,pbo,_bo,e1,kee,ubo,bbo,RP,vbo,Tbo,Fbo,o1,xee,Cbo,Mbo,SP,Ebo,ybo,wbo,r1,Ree,Abo,Lbo,PP,Bbo,kbo,xbo,t1,See,Rbo,Sbo,$P,Pbo,$bo,Ibo,a1,Pee,jbo,Nbo,IP,Dbo,qbo,Gbo,n1,$ee,Obo,Xbo,jP,zbo,Vbo,Wbo,s1,Iee,Qbo,Hbo,NP,Ubo,Jbo,Ybo,l1,jee,Kbo,Zbo,DP,e5o,o5o,r5o,i1,Nee,t5o,a5o,qP,n5o,s5o,l5o,d1,Dee,i5o,d5o,GP,c5o,f5o,m5o,c1,qee,g5o,h5o,OP,p5o,_5o,u5o,f1,Gee,b5o,v5o,XP,T5o,F5o,C5o,m1,Oee,M5o,E5o,zP,y5o,w5o,A5o,g1,Xee,L5o,B5o,VP,k5o,x5o,R5o,h1,S5o,zee,P5o,$5o,Vee,I5o,j5o,Wee,N5o,D5o,dM,rLe,od,p1,Qee,cM,q5o,Hee,G5o,tLe,Jo,fM,O5o,rd,X5o,Uee,z5o,V5o,Jee,W5o,Q5o,H5o,mM,U5o,Yee,J5o,Y5o,K5o,Xr,gM,Z5o,Kee,e2o,o2o,td,r2o,Zee,t2o,a2o,eoe,n2o,s2o,l2o,ooe,i2o,d2o,hM,c2o,$e,pM,f2o,roe,m2o,g2o,za,h2o,toe,p2o,_2o,aoe,u2o,b2o,noe,v2o,T2o,F2o,A,_1,soe,C2o,M2o,WP,E2o,y2o,w2o,u1,loe,A2o,L2o,QP,B2o,k2o,x2o,b1,ioe,R2o,S2o,HP,P2o,$2o,I2o,v1,doe,j2o,N2o,UP,D2o,q2o,G2o,T1,coe,O2o,X2o,JP,z2o,V2o,W2o,F1,foe,Q2o,H2o,YP,U2o,J2o,Y2o,C1,moe,K2o,Z2o,KP,evo,ovo,rvo,M1,goe,tvo,avo,ZP,nvo,svo,lvo,E1,hoe,ivo,dvo,e$,cvo,fvo,mvo,y1,poe,gvo,hvo,o$,pvo,_vo,uvo,w1,_oe,bvo,vvo,r$,Tvo,Fvo,Cvo,A1,uoe,Mvo,Evo,t$,yvo,wvo,Avo,L1,boe,Lvo,Bvo,a$,kvo,xvo,Rvo,B1,voe,Svo,Pvo,n$,$vo,Ivo,jvo,k1,Toe,Nvo,Dvo,s$,qvo,Gvo,Ovo,x1,Foe,Xvo,zvo,l$,Vvo,Wvo,Qvo,R1,Coe,Hvo,Uvo,i$,Jvo,Yvo,Kvo,S1,Moe,Zvo,e6o,d$,o6o,r6o,t6o,P1,Eoe,a6o,n6o,c$,s6o,l6o,i6o,$1,yoe,d6o,c6o,f$,f6o,m6o,g6o,I1,woe,h6o,p6o,m$,_6o,u6o,b6o,j1,Aoe,v6o,T6o,g$,F6o,C6o,M6o,N1,Loe,E6o,y6o,h$,w6o,A6o,L6o,D1,Boe,B6o,k6o,p$,x6o,R6o,S6o,q1,koe,P6o,$6o,_$,I6o,j6o,N6o,G1,xoe,D6o,q6o,u$,G6o,O6o,X6o,O1,Roe,z6o,V6o,b$,W6o,Q6o,H6o,X1,Soe,U6o,J6o,v$,Y6o,K6o,Z6o,z1,Poe,eTo,oTo,T$,rTo,tTo,aTo,V1,$oe,nTo,sTo,F$,lTo,iTo,dTo,W1,Ioe,cTo,fTo,C$,mTo,gTo,hTo,Q1,joe,pTo,_To,M$,uTo,bTo,vTo,H1,Noe,TTo,FTo,E$,CTo,MTo,ETo,U1,Doe,yTo,wTo,y$,ATo,LTo,BTo,J1,qoe,kTo,xTo,w$,RTo,STo,PTo,Y1,Goe,$To,ITo,A$,jTo,NTo,DTo,K1,Ooe,qTo,GTo,L$,OTo,XTo,zTo,Z1,Xoe,VTo,WTo,B$,QTo,HTo,UTo,eb,zoe,JTo,YTo,k$,KTo,ZTo,e7o,ob,Voe,o7o,r7o,x$,t7o,a7o,n7o,rb,Woe,s7o,l7o,R$,i7o,d7o,c7o,tb,Qoe,f7o,m7o,S$,g7o,h7o,p7o,ab,Hoe,_7o,u7o,P$,b7o,v7o,T7o,nb,Uoe,F7o,C7o,$$,M7o,E7o,y7o,sb,w7o,Joe,A7o,L7o,Yoe,B7o,k7o,Koe,x7o,R7o,_M,aLe,ad,lb,Zoe,uM,S7o,ere,P7o,nLe,Yo,bM,$7o,nd,I7o,ore,j7o,N7o,rre,D7o,q7o,G7o,vM,O7o,tre,X7o,z7o,V7o,zr,TM,W7o,are,Q7o,H7o,sd,U7o,nre,J7o,Y7o,sre,K7o,Z7o,e8o,lre,o8o,r8o,FM,t8o,Ie,CM,a8o,ire,n8o,s8o,Va,l8o,dre,i8o,d8o,cre,c8o,f8o,fre,m8o,g8o,h8o,G,ib,mre,p8o,_8o,I$,u8o,b8o,v8o,db,gre,T8o,F8o,j$,C8o,M8o,E8o,cb,hre,y8o,w8o,N$,A8o,L8o,B8o,fb,pre,k8o,x8o,D$,R8o,S8o,P8o,mb,_re,$8o,I8o,q$,j8o,N8o,D8o,gb,ure,q8o,G8o,G$,O8o,X8o,z8o,hb,bre,V8o,W8o,O$,Q8o,H8o,U8o,pb,vre,J8o,Y8o,X$,K8o,Z8o,eFo,_b,Tre,oFo,rFo,z$,tFo,aFo,nFo,ub,Fre,sFo,lFo,V$,iFo,dFo,cFo,bb,Cre,fFo,mFo,W$,gFo,hFo,pFo,vb,Mre,_Fo,uFo,Q$,bFo,vFo,TFo,Tb,Ere,FFo,CFo,H$,MFo,EFo,yFo,Fb,yre,wFo,AFo,U$,LFo,BFo,kFo,Cb,wre,xFo,RFo,J$,SFo,PFo,$Fo,Mb,Are,IFo,jFo,Y$,NFo,DFo,qFo,Eb,Lre,GFo,OFo,K$,XFo,zFo,VFo,yb,Bre,WFo,QFo,Z$,HFo,UFo,JFo,wb,kre,YFo,KFo,eI,ZFo,eCo,oCo,Ab,xre,rCo,tCo,oI,aCo,nCo,sCo,Lb,Rre,lCo,iCo,rI,dCo,cCo,fCo,Bb,Sre,mCo,gCo,tI,hCo,pCo,_Co,kb,Pre,uCo,bCo,aI,vCo,TCo,FCo,xb,$re,CCo,MCo,nI,ECo,yCo,wCo,Rb,Ire,ACo,LCo,sI,BCo,kCo,xCo,Sb,jre,RCo,SCo,lI,PCo,$Co,ICo,Pb,Nre,jCo,NCo,iI,DCo,qCo,GCo,$b,OCo,Dre,XCo,zCo,qre,VCo,WCo,Gre,QCo,HCo,MM,sLe,ld,Ib,Ore,EM,UCo,Xre,JCo,lLe,Ko,yM,YCo,id,KCo,zre,ZCo,e4o,Vre,o4o,r4o,t4o,wM,a4o,Wre,n4o,s4o,l4o,Vr,AM,i4o,Qre,d4o,c4o,dd,f4o,Hre,m4o,g4o,Ure,h4o,p4o,_4o,Jre,u4o,b4o,LM,v4o,je,BM,T4o,Yre,F4o,C4o,Wa,M4o,Kre,E4o,y4o,Zre,w4o,A4o,ete,L4o,B4o,k4o,na,jb,ote,x4o,R4o,dI,S4o,P4o,$4o,Nb,rte,I4o,j4o,cI,N4o,D4o,q4o,Db,tte,G4o,O4o,fI,X4o,z4o,V4o,qb,ate,W4o,Q4o,mI,H4o,U4o,J4o,Gb,nte,Y4o,K4o,gI,Z4o,eMo,oMo,Ob,rMo,ste,tMo,aMo,lte,nMo,sMo,ite,lMo,iMo,kM,iLe,cd,Xb,dte,xM,dMo,cte,cMo,dLe,Zo,RM,fMo,fd,mMo,fte,gMo,hMo,mte,pMo,_Mo,uMo,SM,bMo,gte,vMo,TMo,FMo,Wr,PM,CMo,hte,MMo,EMo,md,yMo,pte,wMo,AMo,_te,LMo,BMo,kMo,ute,xMo,RMo,$M,SMo,Ne,IM,PMo,bte,$Mo,IMo,Qa,jMo,vte,NMo,DMo,Tte,qMo,GMo,Fte,OMo,XMo,zMo,N,zb,Cte,VMo,WMo,hI,QMo,HMo,UMo,Vb,Mte,JMo,YMo,pI,KMo,ZMo,eEo,Wb,Ete,oEo,rEo,_I,tEo,aEo,nEo,Qb,yte,sEo,lEo,uI,iEo,dEo,cEo,Hb,wte,fEo,mEo,bI,gEo,hEo,pEo,Ub,Ate,_Eo,uEo,vI,bEo,vEo,TEo,Jb,Lte,FEo,CEo,TI,MEo,EEo,yEo,Yb,Bte,wEo,AEo,FI,LEo,BEo,kEo,Kb,kte,xEo,REo,CI,SEo,PEo,$Eo,Zb,xte,IEo,jEo,MI,NEo,DEo,qEo,e5,Rte,GEo,OEo,EI,XEo,zEo,VEo,o5,Ste,WEo,QEo,yI,HEo,UEo,JEo,r5,Pte,YEo,KEo,wI,ZEo,e3o,o3o,t5,$te,r3o,t3o,AI,a3o,n3o,s3o,a5,Ite,l3o,i3o,LI,d3o,c3o,f3o,n5,jte,m3o,g3o,BI,h3o,p3o,_3o,s5,Nte,u3o,b3o,kI,v3o,T3o,F3o,l5,Dte,C3o,M3o,xI,E3o,y3o,w3o,i5,qte,A3o,L3o,RI,B3o,k3o,x3o,d5,Gte,R3o,S3o,SI,P3o,$3o,I3o,c5,Ote,j3o,N3o,PI,D3o,q3o,G3o,f5,Xte,O3o,X3o,$I,z3o,V3o,W3o,m5,zte,Q3o,H3o,II,U3o,J3o,Y3o,g5,Vte,K3o,Z3o,jI,eyo,oyo,ryo,h5,Wte,tyo,ayo,NI,nyo,syo,lyo,p5,Qte,iyo,dyo,DI,cyo,fyo,myo,_5,Hte,gyo,hyo,qI,pyo,_yo,uyo,u5,Ute,byo,vyo,GI,Tyo,Fyo,Cyo,b5,Jte,Myo,Eyo,OI,yyo,wyo,Ayo,v5,Yte,Lyo,Byo,XI,kyo,xyo,Ryo,T5,Kte,Syo,Pyo,zI,$yo,Iyo,jyo,F5,Zte,Nyo,Dyo,VI,qyo,Gyo,Oyo,C5,Xyo,eae,zyo,Vyo,oae,Wyo,Qyo,rae,Hyo,Uyo,jM,cLe,gd,M5,tae,NM,Jyo,aae,Yyo,fLe,er,DM,Kyo,hd,Zyo,nae,ewo,owo,sae,rwo,two,awo,qM,nwo,lae,swo,lwo,iwo,Qr,GM,dwo,iae,cwo,fwo,pd,mwo,dae,gwo,hwo,cae,pwo,_wo,uwo,fae,bwo,vwo,OM,Two,De,XM,Fwo,mae,Cwo,Mwo,Ha,Ewo,gae,ywo,wwo,hae,Awo,Lwo,pae,Bwo,kwo,xwo,R,E5,_ae,Rwo,Swo,WI,Pwo,$wo,Iwo,y5,uae,jwo,Nwo,QI,Dwo,qwo,Gwo,w5,bae,Owo,Xwo,HI,zwo,Vwo,Wwo,A5,vae,Qwo,Hwo,UI,Uwo,Jwo,Ywo,L5,Tae,Kwo,Zwo,JI,eAo,oAo,rAo,B5,Fae,tAo,aAo,YI,nAo,sAo,lAo,k5,Cae,iAo,dAo,KI,cAo,fAo,mAo,x5,Mae,gAo,hAo,ZI,pAo,_Ao,uAo,R5,Eae,bAo,vAo,ej,TAo,FAo,CAo,S5,yae,MAo,EAo,oj,yAo,wAo,AAo,P5,wae,LAo,BAo,rj,kAo,xAo,RAo,$5,Aae,SAo,PAo,tj,$Ao,IAo,jAo,I5,Lae,NAo,DAo,aj,qAo,GAo,OAo,j5,Bae,XAo,zAo,nj,VAo,WAo,QAo,N5,kae,HAo,UAo,sj,JAo,YAo,KAo,D5,xae,ZAo,e0o,lj,o0o,r0o,t0o,q5,Rae,a0o,n0o,ij,s0o,l0o,i0o,G5,Sae,d0o,c0o,dj,f0o,m0o,g0o,O5,Pae,h0o,p0o,cj,_0o,u0o,b0o,X5,$ae,v0o,T0o,fj,F0o,C0o,M0o,z5,Iae,E0o,y0o,mj,w0o,A0o,L0o,V5,jae,B0o,k0o,gj,x0o,R0o,S0o,W5,Nae,P0o,$0o,hj,I0o,j0o,N0o,Q5,Dae,D0o,q0o,pj,G0o,O0o,X0o,H5,qae,z0o,V0o,_j,W0o,Q0o,H0o,U5,Gae,U0o,J0o,uj,Y0o,K0o,Z0o,J5,Oae,eLo,oLo,bj,rLo,tLo,aLo,Y5,Xae,nLo,sLo,vj,lLo,iLo,dLo,K5,zae,cLo,fLo,Tj,mLo,gLo,hLo,Z5,Vae,pLo,_Lo,Fj,uLo,bLo,vLo,e2,Wae,TLo,FLo,Cj,CLo,MLo,ELo,o2,Qae,yLo,wLo,Mj,ALo,LLo,BLo,r2,Hae,kLo,xLo,Ej,RLo,SLo,PLo,t2,Uae,$Lo,ILo,yj,jLo,NLo,DLo,a2,Jae,qLo,GLo,wj,OLo,XLo,zLo,n2,Yae,VLo,WLo,Aj,QLo,HLo,ULo,s2,Kae,JLo,YLo,Lj,KLo,ZLo,e9o,l2,Zae,o9o,r9o,Bj,t9o,a9o,n9o,i2,s9o,ene,l9o,i9o,one,d9o,c9o,rne,f9o,m9o,zM,mLe,_d,d2,tne,VM,g9o,ane,h9o,gLe,or,WM,p9o,ud,_9o,nne,u9o,b9o,sne,v9o,T9o,F9o,QM,C9o,lne,M9o,E9o,y9o,Hr,HM,w9o,ine,A9o,L9o,bd,B9o,dne,k9o,x9o,cne,R9o,S9o,P9o,fne,$9o,I9o,UM,j9o,qe,JM,N9o,mne,D9o,q9o,Ua,G9o,gne,O9o,X9o,hne,z9o,V9o,pne,W9o,Q9o,H9o,_ne,c2,une,U9o,J9o,kj,Y9o,K9o,Z9o,f2,eBo,bne,oBo,rBo,vne,tBo,aBo,Tne,nBo,sBo,YM,hLe,vd,m2,Fne,KM,lBo,Cne,iBo,pLe,rr,ZM,dBo,Td,cBo,Mne,fBo,mBo,Ene,gBo,hBo,pBo,eE,_Bo,yne,uBo,bBo,vBo,Ur,oE,TBo,wne,FBo,CBo,Fd,MBo,Ane,EBo,yBo,Lne,wBo,ABo,LBo,Bne,BBo,kBo,rE,xBo,Ge,tE,RBo,kne,SBo,PBo,Ja,$Bo,xne,IBo,jBo,Rne,NBo,DBo,Sne,qBo,GBo,OBo,be,g2,Pne,XBo,zBo,xj,VBo,WBo,QBo,h2,$ne,HBo,UBo,Rj,JBo,YBo,KBo,Rs,Ine,ZBo,eko,Sj,oko,rko,Pj,tko,ako,nko,p2,jne,sko,lko,$j,iko,dko,cko,la,Nne,fko,mko,Ij,gko,hko,jj,pko,_ko,Nj,uko,bko,vko,_2,Dne,Tko,Fko,Dj,Cko,Mko,Eko,u2,qne,yko,wko,qj,Ako,Lko,Bko,b2,Gne,kko,xko,Gj,Rko,Sko,Pko,v2,One,$ko,Iko,Oj,jko,Nko,Dko,T2,qko,Xne,Gko,Oko,zne,Xko,zko,Vne,Vko,Wko,aE,_Le,Cd,F2,Wne,nE,Qko,Qne,Hko,uLe,tr,sE,Uko,Md,Jko,Hne,Yko,Kko,Une,Zko,exo,oxo,lE,rxo,Jne,txo,axo,nxo,Jr,iE,sxo,Yne,lxo,ixo,Ed,dxo,Kne,cxo,fxo,Zne,mxo,gxo,hxo,ese,pxo,_xo,dE,uxo,Oe,cE,bxo,ose,vxo,Txo,Ya,Fxo,rse,Cxo,Mxo,tse,Exo,yxo,ase,wxo,Axo,Lxo,nse,C2,sse,Bxo,kxo,Xj,xxo,Rxo,Sxo,M2,Pxo,lse,$xo,Ixo,ise,jxo,Nxo,dse,Dxo,qxo,fE,bLe,yd,E2,cse,mE,Gxo,fse,Oxo,vLe,ar,gE,Xxo,wd,zxo,mse,Vxo,Wxo,gse,Qxo,Hxo,Uxo,hE,Jxo,hse,Yxo,Kxo,Zxo,Yr,pE,eRo,pse,oRo,rRo,Ad,tRo,_se,aRo,nRo,use,sRo,lRo,iRo,bse,dRo,cRo,_E,fRo,Xe,uE,mRo,vse,gRo,hRo,Ka,pRo,Tse,_Ro,uRo,Fse,bRo,vRo,Cse,TRo,FRo,CRo,ao,y2,Mse,MRo,ERo,zj,yRo,wRo,ARo,w2,Ese,LRo,BRo,Vj,kRo,xRo,RRo,A2,yse,SRo,PRo,Wj,$Ro,IRo,jRo,L2,wse,NRo,DRo,Qj,qRo,GRo,ORo,B2,Ase,XRo,zRo,Hj,VRo,WRo,QRo,k2,Lse,HRo,URo,Uj,JRo,YRo,KRo,x2,Bse,ZRo,eSo,Jj,oSo,rSo,tSo,R2,aSo,kse,nSo,sSo,xse,lSo,iSo,Rse,dSo,cSo,bE,TLe,Ld,S2,Sse,vE,fSo,Pse,mSo,FLe,nr,TE,gSo,Bd,hSo,$se,pSo,_So,Ise,uSo,bSo,vSo,FE,TSo,jse,FSo,CSo,MSo,Kr,CE,ESo,Nse,ySo,wSo,kd,ASo,Dse,LSo,BSo,qse,kSo,xSo,RSo,Gse,SSo,PSo,ME,$So,ze,EE,ISo,Ose,jSo,NSo,Za,DSo,Xse,qSo,GSo,zse,OSo,XSo,Vse,zSo,VSo,WSo,xd,P2,Wse,QSo,HSo,Yj,USo,JSo,YSo,$2,Qse,KSo,ZSo,Kj,ePo,oPo,rPo,I2,Hse,tPo,aPo,Zj,nPo,sPo,lPo,j2,iPo,Use,dPo,cPo,Jse,fPo,mPo,Yse,gPo,hPo,yE,CLe,Rd,N2,Kse,wE,pPo,Zse,_Po,MLe,sr,AE,uPo,Sd,bPo,ele,vPo,TPo,ole,FPo,CPo,MPo,LE,EPo,rle,yPo,wPo,APo,Zr,BE,LPo,tle,BPo,kPo,Pd,xPo,ale,RPo,SPo,nle,PPo,$Po,IPo,sle,jPo,NPo,kE,DPo,Ve,xE,qPo,lle,GPo,OPo,en,XPo,ile,zPo,VPo,dle,WPo,QPo,cle,HPo,UPo,JPo,no,D2,fle,YPo,KPo,eN,ZPo,e$o,o$o,q2,mle,r$o,t$o,oN,a$o,n$o,s$o,G2,gle,l$o,i$o,rN,d$o,c$o,f$o,O2,hle,m$o,g$o,tN,h$o,p$o,_$o,X2,ple,u$o,b$o,aN,v$o,T$o,F$o,z2,_le,C$o,M$o,nN,E$o,y$o,w$o,V2,ule,A$o,L$o,sN,B$o,k$o,x$o,W2,R$o,ble,S$o,P$o,vle,$$o,I$o,Tle,j$o,N$o,RE,ELe,$d,Q2,Fle,SE,D$o,Cle,q$o,yLe,lr,PE,G$o,Id,O$o,Mle,X$o,z$o,Ele,V$o,W$o,Q$o,$E,H$o,yle,U$o,J$o,Y$o,et,IE,K$o,wle,Z$o,eIo,jd,oIo,Ale,rIo,tIo,Lle,aIo,nIo,sIo,Ble,lIo,iIo,jE,dIo,We,NE,cIo,kle,fIo,mIo,on,gIo,xle,hIo,pIo,Rle,_Io,uIo,Sle,bIo,vIo,TIo,DE,H2,Ple,FIo,CIo,lN,MIo,EIo,yIo,U2,$le,wIo,AIo,iN,LIo,BIo,kIo,J2,xIo,Ile,RIo,SIo,jle,PIo,$Io,Nle,IIo,jIo,qE,wLe,Nd,Y2,Dle,GE,NIo,qle,DIo,ALe,ir,OE,qIo,Dd,GIo,Gle,OIo,XIo,Ole,zIo,VIo,WIo,XE,QIo,Xle,HIo,UIo,JIo,ot,zE,YIo,zle,KIo,ZIo,qd,ejo,Vle,ojo,rjo,Wle,tjo,ajo,njo,Qle,sjo,ljo,VE,ijo,Qe,WE,djo,Hle,cjo,fjo,rn,mjo,Ule,gjo,hjo,Jle,pjo,_jo,Yle,ujo,bjo,vjo,Gd,K2,Kle,Tjo,Fjo,dN,Cjo,Mjo,Ejo,Z2,Zle,yjo,wjo,cN,Ajo,Ljo,Bjo,ev,eie,kjo,xjo,fN,Rjo,Sjo,Pjo,ov,$jo,oie,Ijo,jjo,rie,Njo,Djo,tie,qjo,Gjo,QE,LLe,Od,rv,aie,HE,Ojo,nie,Xjo,BLe,dr,UE,zjo,Xd,Vjo,sie,Wjo,Qjo,lie,Hjo,Ujo,Jjo,JE,Yjo,iie,Kjo,Zjo,eNo,rt,YE,oNo,die,rNo,tNo,zd,aNo,cie,nNo,sNo,fie,lNo,iNo,dNo,mie,cNo,fNo,KE,mNo,He,ZE,gNo,gie,hNo,pNo,tn,_No,hie,uNo,bNo,pie,vNo,TNo,_ie,FNo,CNo,MNo,Vd,tv,uie,ENo,yNo,mN,wNo,ANo,LNo,av,bie,BNo,kNo,gN,xNo,RNo,SNo,nv,vie,PNo,$No,hN,INo,jNo,NNo,sv,DNo,Tie,qNo,GNo,Fie,ONo,XNo,Cie,zNo,VNo,e3,kLe,Wd,lv,Mie,o3,WNo,Eie,QNo,xLe,cr,r3,HNo,Qd,UNo,yie,JNo,YNo,wie,KNo,ZNo,eDo,t3,oDo,Aie,rDo,tDo,aDo,tt,a3,nDo,Lie,sDo,lDo,Hd,iDo,Bie,dDo,cDo,kie,fDo,mDo,gDo,xie,hDo,pDo,n3,_Do,Ue,s3,uDo,Rie,bDo,vDo,an,TDo,Sie,FDo,CDo,Pie,MDo,EDo,$ie,yDo,wDo,ADo,Iie,iv,jie,LDo,BDo,pN,kDo,xDo,RDo,dv,SDo,Nie,PDo,$Do,Die,IDo,jDo,qie,NDo,DDo,l3,RLe,Ud,cv,Gie,i3,qDo,Oie,GDo,SLe,fr,d3,ODo,Jd,XDo,Xie,zDo,VDo,zie,WDo,QDo,HDo,c3,UDo,Vie,JDo,YDo,KDo,at,f3,ZDo,Wie,eqo,oqo,Yd,rqo,Qie,tqo,aqo,Hie,nqo,sqo,lqo,Uie,iqo,dqo,m3,cqo,Je,g3,fqo,Jie,mqo,gqo,nn,hqo,Yie,pqo,_qo,Kie,uqo,bqo,Zie,vqo,Tqo,Fqo,ede,fv,ode,Cqo,Mqo,_N,Eqo,yqo,wqo,mv,Aqo,rde,Lqo,Bqo,tde,kqo,xqo,ade,Rqo,Sqo,h3,PLe,Kd,gv,nde,p3,Pqo,sde,$qo,$Le,mr,_3,Iqo,Zd,jqo,lde,Nqo,Dqo,ide,qqo,Gqo,Oqo,u3,Xqo,dde,zqo,Vqo,Wqo,nt,b3,Qqo,cde,Hqo,Uqo,ec,Jqo,fde,Yqo,Kqo,mde,Zqo,eGo,oGo,gde,rGo,tGo,v3,aGo,Ye,T3,nGo,hde,sGo,lGo,sn,iGo,pde,dGo,cGo,_de,fGo,mGo,ude,gGo,hGo,pGo,F3,hv,bde,_Go,uGo,uN,bGo,vGo,TGo,pv,vde,FGo,CGo,bN,MGo,EGo,yGo,_v,wGo,Tde,AGo,LGo,Fde,BGo,kGo,Cde,xGo,RGo,C3,ILe,oc,uv,Mde,M3,SGo,Ede,PGo,jLe,gr,E3,$Go,rc,IGo,yde,jGo,NGo,wde,DGo,qGo,GGo,y3,OGo,Ade,XGo,zGo,VGo,st,w3,WGo,Lde,QGo,HGo,tc,UGo,Bde,JGo,YGo,kde,KGo,ZGo,eOo,xde,oOo,rOo,A3,tOo,go,L3,aOo,Rde,nOo,sOo,ln,lOo,Sde,iOo,dOo,Pde,cOo,fOo,$de,mOo,gOo,hOo,B,bv,Ide,pOo,_Oo,vN,uOo,bOo,vOo,vv,jde,TOo,FOo,TN,COo,MOo,EOo,Tv,Nde,yOo,wOo,FN,AOo,LOo,BOo,Fv,Dde,kOo,xOo,CN,ROo,SOo,POo,Cv,qde,$Oo,IOo,MN,jOo,NOo,DOo,Mv,Gde,qOo,GOo,EN,OOo,XOo,zOo,Ev,Ode,VOo,WOo,yN,QOo,HOo,UOo,yv,Xde,JOo,YOo,wN,KOo,ZOo,eXo,wv,zde,oXo,rXo,AN,tXo,aXo,nXo,Av,Vde,sXo,lXo,LN,iXo,dXo,cXo,Lv,Wde,fXo,mXo,BN,gXo,hXo,pXo,Bv,Qde,_Xo,uXo,kN,bXo,vXo,TXo,kv,Hde,FXo,CXo,xN,MXo,EXo,yXo,xv,Ude,wXo,AXo,RN,LXo,BXo,kXo,Rv,Jde,xXo,RXo,SN,SXo,PXo,$Xo,Ss,Yde,IXo,jXo,PN,NXo,DXo,$N,qXo,GXo,OXo,Sv,Kde,XXo,zXo,IN,VXo,WXo,QXo,Pv,Zde,HXo,UXo,jN,JXo,YXo,KXo,$v,ece,ZXo,ezo,NN,ozo,rzo,tzo,Iv,oce,azo,nzo,DN,szo,lzo,izo,jv,rce,dzo,czo,qN,fzo,mzo,gzo,Nv,tce,hzo,pzo,GN,_zo,uzo,bzo,Dv,ace,vzo,Tzo,ON,Fzo,Czo,Mzo,qv,nce,Ezo,yzo,XN,wzo,Azo,Lzo,Gv,sce,Bzo,kzo,zN,xzo,Rzo,Szo,Ov,lce,Pzo,$zo,VN,Izo,jzo,Nzo,Xv,ice,Dzo,qzo,WN,Gzo,Ozo,Xzo,zv,dce,zzo,Vzo,QN,Wzo,Qzo,Hzo,Vv,cce,Uzo,Jzo,HN,Yzo,Kzo,Zzo,Wv,fce,eVo,oVo,UN,rVo,tVo,aVo,Qv,mce,nVo,sVo,JN,lVo,iVo,dVo,Hv,gce,cVo,fVo,YN,mVo,gVo,hVo,Uv,hce,pVo,_Vo,KN,uVo,bVo,vVo,Jv,pce,TVo,FVo,ZN,CVo,MVo,EVo,Yv,_ce,yVo,wVo,eD,AVo,LVo,BVo,Kv,uce,kVo,xVo,oD,RVo,SVo,PVo,Zv,bce,$Vo,IVo,rD,jVo,NVo,DVo,e6,vce,qVo,GVo,tD,OVo,XVo,zVo,o6,Tce,VVo,WVo,aD,QVo,HVo,UVo,r6,Fce,JVo,YVo,nD,KVo,ZVo,eWo,t6,Cce,oWo,rWo,sD,tWo,aWo,nWo,Mce,sWo,lWo,B3,NLe,ac,a6,Ece,k3,iWo,yce,dWo,DLe,hr,x3,cWo,nc,fWo,wce,mWo,gWo,Ace,hWo,pWo,_Wo,R3,uWo,Lce,bWo,vWo,TWo,lt,S3,FWo,Bce,CWo,MWo,sc,EWo,kce,yWo,wWo,xce,AWo,LWo,BWo,Rce,kWo,xWo,P3,RWo,ho,$3,SWo,Sce,PWo,$Wo,dn,IWo,Pce,jWo,NWo,$ce,DWo,qWo,Ice,GWo,OWo,XWo,H,n6,jce,zWo,VWo,lD,WWo,QWo,HWo,s6,Nce,UWo,JWo,iD,YWo,KWo,ZWo,l6,Dce,eQo,oQo,dD,rQo,tQo,aQo,i6,qce,nQo,sQo,cD,lQo,iQo,dQo,d6,Gce,cQo,fQo,fD,mQo,gQo,hQo,c6,Oce,pQo,_Qo,mD,uQo,bQo,vQo,f6,Xce,TQo,FQo,gD,CQo,MQo,EQo,m6,zce,yQo,wQo,hD,AQo,LQo,BQo,g6,Vce,kQo,xQo,pD,RQo,SQo,PQo,h6,Wce,$Qo,IQo,_D,jQo,NQo,DQo,p6,Qce,qQo,GQo,uD,OQo,XQo,zQo,_6,Hce,VQo,WQo,bD,QQo,HQo,UQo,u6,Uce,JQo,YQo,vD,KQo,ZQo,eHo,b6,Jce,oHo,rHo,TD,tHo,aHo,nHo,v6,Yce,sHo,lHo,FD,iHo,dHo,cHo,T6,Kce,fHo,mHo,CD,gHo,hHo,pHo,F6,Zce,_Ho,uHo,MD,bHo,vHo,THo,C6,efe,FHo,CHo,ED,MHo,EHo,yHo,M6,ofe,wHo,AHo,yD,LHo,BHo,kHo,E6,rfe,xHo,RHo,wD,SHo,PHo,$Ho,y6,tfe,IHo,jHo,AD,NHo,DHo,qHo,w6,afe,GHo,OHo,LD,XHo,zHo,VHo,nfe,WHo,QHo,I3,qLe,lc,A6,sfe,j3,HHo,lfe,UHo,GLe,pr,N3,JHo,ic,YHo,ife,KHo,ZHo,dfe,eUo,oUo,rUo,D3,tUo,cfe,aUo,nUo,sUo,it,q3,lUo,ffe,iUo,dUo,dc,cUo,mfe,fUo,mUo,gfe,gUo,hUo,pUo,hfe,_Uo,uUo,G3,bUo,po,O3,vUo,pfe,TUo,FUo,cn,CUo,_fe,MUo,EUo,ufe,yUo,wUo,bfe,AUo,LUo,BUo,he,L6,vfe,kUo,xUo,BD,RUo,SUo,PUo,B6,Tfe,$Uo,IUo,kD,jUo,NUo,DUo,k6,Ffe,qUo,GUo,xD,OUo,XUo,zUo,x6,Cfe,VUo,WUo,RD,QUo,HUo,UUo,R6,Mfe,JUo,YUo,SD,KUo,ZUo,eJo,S6,Efe,oJo,rJo,PD,tJo,aJo,nJo,P6,yfe,sJo,lJo,$D,iJo,dJo,cJo,$6,wfe,fJo,mJo,ID,gJo,hJo,pJo,I6,Afe,_Jo,uJo,jD,bJo,vJo,TJo,j6,Lfe,FJo,CJo,ND,MJo,EJo,yJo,Bfe,wJo,AJo,X3,OLe,cc,N6,kfe,z3,LJo,xfe,BJo,XLe,_r,V3,kJo,fc,xJo,Rfe,RJo,SJo,Sfe,PJo,$Jo,IJo,W3,jJo,Pfe,NJo,DJo,qJo,dt,Q3,GJo,$fe,OJo,XJo,mc,zJo,Ife,VJo,WJo,jfe,QJo,HJo,UJo,Nfe,JJo,YJo,H3,KJo,_o,U3,ZJo,Dfe,eYo,oYo,fn,rYo,qfe,tYo,aYo,Gfe,nYo,sYo,Ofe,lYo,iYo,dYo,Xfe,D6,zfe,cYo,fYo,DD,mYo,gYo,hYo,Vfe,pYo,_Yo,J3,zLe,gc,q6,Wfe,Y3,uYo,Qfe,bYo,VLe,ur,K3,vYo,hc,TYo,Hfe,FYo,CYo,Ufe,MYo,EYo,yYo,Z3,wYo,Jfe,AYo,LYo,BYo,ct,ey,kYo,Yfe,xYo,RYo,pc,SYo,Kfe,PYo,$Yo,Zfe,IYo,jYo,NYo,eme,DYo,qYo,oy,GYo,uo,ry,OYo,ome,XYo,zYo,mn,VYo,rme,WYo,QYo,tme,HYo,UYo,ame,JYo,YYo,KYo,Y,G6,nme,ZYo,eKo,qD,oKo,rKo,tKo,O6,sme,aKo,nKo,GD,sKo,lKo,iKo,X6,lme,dKo,cKo,OD,fKo,mKo,gKo,z6,ime,hKo,pKo,XD,_Ko,uKo,bKo,V6,dme,vKo,TKo,zD,FKo,CKo,MKo,W6,cme,EKo,yKo,VD,wKo,AKo,LKo,Q6,fme,BKo,kKo,WD,xKo,RKo,SKo,H6,mme,PKo,$Ko,QD,IKo,jKo,NKo,U6,gme,DKo,qKo,HD,GKo,OKo,XKo,J6,hme,zKo,VKo,UD,WKo,QKo,HKo,Y6,pme,UKo,JKo,JD,YKo,KKo,ZKo,K6,_me,eZo,oZo,YD,rZo,tZo,aZo,Z6,ume,nZo,sZo,KD,lZo,iZo,dZo,eT,bme,cZo,fZo,ZD,mZo,gZo,hZo,oT,vme,pZo,_Zo,eq,uZo,bZo,vZo,rT,Tme,TZo,FZo,oq,CZo,MZo,EZo,tT,Fme,yZo,wZo,rq,AZo,LZo,BZo,aT,Cme,kZo,xZo,tq,RZo,SZo,PZo,nT,Mme,$Zo,IZo,aq,jZo,NZo,DZo,sT,Eme,qZo,GZo,nq,OZo,XZo,zZo,yme,VZo,WZo,ty,WLe,_c,lT,wme,ay,QZo,Ame,HZo,QLe,br,ny,UZo,uc,JZo,Lme,YZo,KZo,Bme,ZZo,eer,oer,sy,rer,kme,ter,aer,ner,ft,ly,ser,xme,ler,ier,bc,der,Rme,cer,fer,Sme,mer,ger,her,Pme,per,_er,iy,uer,bo,dy,ber,$me,ver,Ter,gn,Fer,Ime,Cer,Mer,jme,Eer,yer,Nme,wer,Aer,Ler,pe,iT,Dme,Ber,ker,sq,xer,Rer,Ser,dT,qme,Per,$er,lq,Ier,jer,Ner,cT,Gme,Der,qer,iq,Ger,Oer,Xer,fT,Ome,zer,Ver,dq,Wer,Qer,Her,mT,Xme,Uer,Jer,cq,Yer,Ker,Zer,gT,zme,eor,oor,fq,ror,tor,aor,hT,Vme,nor,sor,mq,lor,ior,dor,pT,Wme,cor,mor,gq,gor,hor,por,_T,Qme,_or,uor,hq,bor,vor,Tor,uT,Hme,For,Cor,pq,Mor,Eor,yor,Ume,wor,Aor,cy,HLe,vc,bT,Jme,fy,Lor,Yme,Bor,ULe,vr,my,kor,Tc,xor,Kme,Ror,Sor,Zme,Por,$or,Ior,gy,jor,ege,Nor,Dor,qor,mt,hy,Gor,oge,Oor,Xor,Fc,zor,rge,Vor,Wor,tge,Qor,Hor,Uor,age,Jor,Yor,py,Kor,vo,_y,Zor,nge,err,orr,hn,rrr,sge,trr,arr,lge,nrr,srr,ige,lrr,irr,drr,X,vT,dge,crr,frr,_q,mrr,grr,hrr,TT,cge,prr,_rr,uq,urr,brr,vrr,FT,fge,Trr,Frr,bq,Crr,Mrr,Err,CT,mge,yrr,wrr,vq,Arr,Lrr,Brr,MT,gge,krr,xrr,Tq,Rrr,Srr,Prr,ET,hge,$rr,Irr,Fq,jrr,Nrr,Drr,yT,pge,qrr,Grr,Cq,Orr,Xrr,zrr,wT,_ge,Vrr,Wrr,Mq,Qrr,Hrr,Urr,AT,uge,Jrr,Yrr,Eq,Krr,Zrr,etr,LT,bge,otr,rtr,yq,ttr,atr,ntr,BT,vge,str,ltr,wq,itr,dtr,ctr,kT,Tge,ftr,mtr,Aq,gtr,htr,ptr,xT,Fge,_tr,utr,Lq,btr,vtr,Ttr,RT,Cge,Ftr,Ctr,Bq,Mtr,Etr,ytr,ST,Mge,wtr,Atr,kq,Ltr,Btr,ktr,PT,Ege,xtr,Rtr,xq,Str,Ptr,$tr,$T,yge,Itr,jtr,Rq,Ntr,Dtr,qtr,IT,wge,Gtr,Otr,Sq,Xtr,ztr,Vtr,jT,Age,Wtr,Qtr,Pq,Htr,Utr,Jtr,NT,Lge,Ytr,Ktr,$q,Ztr,ear,oar,DT,Bge,rar,tar,Iq,aar,nar,sar,qT,kge,lar,iar,jq,dar,car,far,GT,xge,mar,gar,Nq,har,par,_ar,OT,Rge,uar,bar,Dq,Tar,Far,Car,XT,Sge,Mar,Ear,qq,yar,war,Aar,Pge,Lar,Bar,uy,JLe,Cc,zT,$ge,by,kar,Ige,xar,YLe,Tr,vy,Rar,Mc,Sar,jge,Par,$ar,Nge,Iar,jar,Nar,Ty,Dar,Dge,qar,Gar,Oar,gt,Fy,Xar,qge,zar,Var,Ec,War,Gge,Qar,Har,Oge,Uar,Jar,Yar,Xge,Kar,Zar,Cy,enr,To,My,onr,zge,rnr,tnr,pn,anr,Vge,nnr,snr,Wge,lnr,inr,Qge,dnr,cnr,fnr,te,VT,Hge,mnr,gnr,Gq,hnr,pnr,_nr,WT,Uge,unr,bnr,Oq,vnr,Tnr,Fnr,QT,Jge,Cnr,Mnr,Xq,Enr,ynr,wnr,HT,Yge,Anr,Lnr,zq,Bnr,knr,xnr,UT,Kge,Rnr,Snr,Vq,Pnr,$nr,Inr,JT,Zge,jnr,Nnr,Wq,Dnr,qnr,Gnr,YT,ehe,Onr,Xnr,Qq,znr,Vnr,Wnr,KT,ohe,Qnr,Hnr,Hq,Unr,Jnr,Ynr,ZT,rhe,Knr,Znr,Uq,esr,osr,rsr,e7,the,tsr,asr,Jq,nsr,ssr,lsr,o7,ahe,isr,dsr,Yq,csr,fsr,msr,r7,nhe,gsr,hsr,Kq,psr,_sr,usr,t7,she,bsr,vsr,Zq,Tsr,Fsr,Csr,a7,lhe,Msr,Esr,eG,ysr,wsr,Asr,n7,ihe,Lsr,Bsr,oG,ksr,xsr,Rsr,s7,dhe,Ssr,Psr,rG,$sr,Isr,jsr,l7,che,Nsr,Dsr,tG,qsr,Gsr,Osr,fhe,Xsr,zsr,Ey,KLe,yc,i7,mhe,yy,Vsr,ghe,Wsr,ZLe,Fr,wy,Qsr,wc,Hsr,hhe,Usr,Jsr,phe,Ysr,Ksr,Zsr,Ay,elr,_he,olr,rlr,tlr,ht,Ly,alr,uhe,nlr,slr,Ac,llr,bhe,ilr,dlr,vhe,clr,flr,mlr,The,glr,hlr,By,plr,Fo,ky,_lr,Fhe,ulr,blr,_n,vlr,Che,Tlr,Flr,Mhe,Clr,Mlr,Ehe,Elr,ylr,wlr,yhe,d7,whe,Alr,Llr,aG,Blr,klr,xlr,Ahe,Rlr,Slr,xy,e9e,Lc,c7,Lhe,Ry,Plr,Bhe,$lr,o9e,Cr,Sy,Ilr,Bc,jlr,khe,Nlr,Dlr,xhe,qlr,Glr,Olr,Py,Xlr,Rhe,zlr,Vlr,Wlr,pt,$y,Qlr,She,Hlr,Ulr,kc,Jlr,Phe,Ylr,Klr,$he,Zlr,eir,oir,Ihe,rir,tir,Iy,air,Co,jy,nir,jhe,sir,lir,un,iir,Nhe,dir,cir,Dhe,fir,mir,qhe,gir,hir,pir,K,f7,Ghe,_ir,uir,nG,bir,vir,Tir,m7,Ohe,Fir,Cir,sG,Mir,Eir,yir,g7,Xhe,wir,Air,lG,Lir,Bir,kir,h7,zhe,xir,Rir,iG,Sir,Pir,$ir,p7,Vhe,Iir,jir,dG,Nir,Dir,qir,_7,Whe,Gir,Oir,cG,Xir,zir,Vir,u7,Qhe,Wir,Qir,fG,Hir,Uir,Jir,b7,Hhe,Yir,Kir,mG,Zir,edr,odr,v7,Uhe,rdr,tdr,gG,adr,ndr,sdr,T7,Jhe,ldr,idr,hG,ddr,cdr,fdr,F7,Yhe,mdr,gdr,pG,hdr,pdr,_dr,C7,Khe,udr,bdr,_G,vdr,Tdr,Fdr,M7,Zhe,Cdr,Mdr,uG,Edr,ydr,wdr,E7,epe,Adr,Ldr,bG,Bdr,kdr,xdr,y7,ope,Rdr,Sdr,vG,Pdr,$dr,Idr,w7,rpe,jdr,Ndr,TG,Ddr,qdr,Gdr,A7,tpe,Odr,Xdr,FG,zdr,Vdr,Wdr,L7,ape,Qdr,Hdr,CG,Udr,Jdr,Ydr,B7,npe,Kdr,Zdr,MG,ecr,ocr,rcr,k7,spe,tcr,acr,EG,ncr,scr,lcr,lpe,icr,dcr,Ny,r9e,xc,x7,ipe,Dy,ccr,dpe,fcr,t9e,Mr,qy,mcr,Rc,gcr,cpe,hcr,pcr,fpe,_cr,ucr,bcr,Gy,vcr,mpe,Tcr,Fcr,Ccr,_t,Oy,Mcr,gpe,Ecr,ycr,Sc,wcr,hpe,Acr,Lcr,ppe,Bcr,kcr,xcr,_pe,Rcr,Scr,Xy,Pcr,Mo,zy,$cr,upe,Icr,jcr,bn,Ncr,bpe,Dcr,qcr,vpe,Gcr,Ocr,Tpe,Xcr,zcr,Vcr,Z,R7,Fpe,Wcr,Qcr,yG,Hcr,Ucr,Jcr,S7,Cpe,Ycr,Kcr,wG,Zcr,efr,ofr,P7,Mpe,rfr,tfr,AG,afr,nfr,sfr,$7,Epe,lfr,ifr,LG,dfr,cfr,ffr,I7,ype,mfr,gfr,BG,hfr,pfr,_fr,j7,wpe,ufr,bfr,kG,vfr,Tfr,Ffr,N7,Ape,Cfr,Mfr,xG,Efr,yfr,wfr,D7,Lpe,Afr,Lfr,RG,Bfr,kfr,xfr,q7,Bpe,Rfr,Sfr,SG,Pfr,$fr,Ifr,G7,kpe,jfr,Nfr,PG,Dfr,qfr,Gfr,O7,xpe,Ofr,Xfr,$G,zfr,Vfr,Wfr,X7,Rpe,Qfr,Hfr,IG,Ufr,Jfr,Yfr,z7,Spe,Kfr,Zfr,jG,emr,omr,rmr,V7,Ppe,tmr,amr,NG,nmr,smr,lmr,W7,$pe,imr,dmr,DG,cmr,fmr,mmr,Q7,Ipe,gmr,hmr,qG,pmr,_mr,umr,H7,jpe,bmr,vmr,GG,Tmr,Fmr,Cmr,U7,Npe,Mmr,Emr,OG,ymr,wmr,Amr,J7,Dpe,Lmr,Bmr,XG,kmr,xmr,Rmr,qpe,Smr,Pmr,Vy,a9e,Pc,Y7,Gpe,Wy,$mr,Ope,Imr,n9e,Er,Qy,jmr,$c,Nmr,Xpe,Dmr,qmr,zpe,Gmr,Omr,Xmr,Hy,zmr,Vpe,Vmr,Wmr,Qmr,ut,Uy,Hmr,Wpe,Umr,Jmr,Ic,Ymr,Qpe,Kmr,Zmr,Hpe,egr,ogr,rgr,Upe,tgr,agr,Jy,ngr,Eo,Yy,sgr,Jpe,lgr,igr,vn,dgr,Ype,cgr,fgr,Kpe,mgr,ggr,Zpe,hgr,pgr,_gr,e_e,K7,o_e,ugr,bgr,zG,vgr,Tgr,Fgr,r_e,Cgr,Mgr,Ky,s9e,jc,Z7,t_e,Zy,Egr,a_e,ygr,l9e,yr,ew,wgr,Nc,Agr,n_e,Lgr,Bgr,s_e,kgr,xgr,Rgr,ow,Sgr,l_e,Pgr,$gr,Igr,bt,rw,jgr,i_e,Ngr,Dgr,Dc,qgr,d_e,Ggr,Ogr,c_e,Xgr,zgr,Vgr,f_e,Wgr,Qgr,tw,Hgr,yo,aw,Ugr,m_e,Jgr,Ygr,Tn,Kgr,g_e,Zgr,ehr,h_e,ohr,rhr,p_e,thr,ahr,nhr,__e,e8,u_e,shr,lhr,VG,ihr,dhr,chr,b_e,fhr,mhr,nw,i9e,qc,o8,v_e,sw,ghr,T_e,hhr,d9e,wr,lw,phr,Gc,_hr,F_e,uhr,bhr,C_e,vhr,Thr,Fhr,iw,Chr,M_e,Mhr,Ehr,yhr,vt,dw,whr,E_e,Ahr,Lhr,Oc,Bhr,y_e,khr,xhr,w_e,Rhr,Shr,Phr,A_e,$hr,Ihr,cw,jhr,wo,fw,Nhr,L_e,Dhr,qhr,Fn,Ghr,B_e,Ohr,Xhr,k_e,zhr,Vhr,x_e,Whr,Qhr,Hhr,V,r8,R_e,Uhr,Jhr,WG,Yhr,Khr,Zhr,t8,S_e,epr,opr,QG,rpr,tpr,apr,a8,P_e,npr,spr,HG,lpr,ipr,dpr,n8,$_e,cpr,fpr,UG,mpr,gpr,hpr,s8,I_e,ppr,_pr,JG,upr,bpr,vpr,l8,j_e,Tpr,Fpr,YG,Cpr,Mpr,Epr,i8,N_e,ypr,wpr,KG,Apr,Lpr,Bpr,d8,D_e,kpr,xpr,ZG,Rpr,Spr,Ppr,c8,q_e,$pr,Ipr,eO,jpr,Npr,Dpr,f8,G_e,qpr,Gpr,oO,Opr,Xpr,zpr,m8,O_e,Vpr,Wpr,rO,Qpr,Hpr,Upr,g8,X_e,Jpr,Ypr,tO,Kpr,Zpr,e_r,h8,z_e,o_r,r_r,aO,t_r,a_r,n_r,p8,V_e,s_r,l_r,nO,i_r,d_r,c_r,_8,W_e,f_r,m_r,sO,g_r,h_r,p_r,u8,Q_e,__r,u_r,lO,b_r,v_r,T_r,b8,H_e,F_r,C_r,iO,M_r,E_r,y_r,v8,U_e,w_r,A_r,dO,L_r,B_r,k_r,T8,J_e,x_r,R_r,cO,S_r,P_r,$_r,F8,Y_e,I_r,j_r,fO,N_r,D_r,q_r,C8,K_e,G_r,O_r,mO,X_r,z_r,V_r,M8,Z_e,W_r,Q_r,gO,H_r,U_r,J_r,E8,eue,Y_r,K_r,hO,Z_r,eur,our,y8,oue,rur,tur,pO,aur,nur,sur,rue,lur,iur,mw,c9e,Xc,w8,tue,gw,dur,aue,cur,f9e,Ar,hw,fur,zc,mur,nue,gur,hur,sue,pur,_ur,uur,pw,bur,lue,vur,Tur,Fur,Tt,_w,Cur,iue,Mur,Eur,Vc,yur,due,wur,Aur,cue,Lur,Bur,kur,fue,xur,Rur,uw,Sur,Ao,bw,Pur,mue,$ur,Iur,Cn,jur,gue,Nur,Dur,hue,qur,Gur,pue,Our,Xur,zur,Mn,A8,_ue,Vur,Wur,_O,Qur,Hur,Uur,L8,uue,Jur,Yur,uO,Kur,Zur,e1r,B8,bue,o1r,r1r,bO,t1r,a1r,n1r,k8,vue,s1r,l1r,vO,i1r,d1r,c1r,Tue,f1r,m1r,vw,m9e,Wc,x8,Fue,Tw,g1r,Cue,h1r,g9e,Lr,Fw,p1r,Qc,_1r,Mue,u1r,b1r,Eue,v1r,T1r,F1r,Cw,C1r,yue,M1r,E1r,y1r,Ft,Mw,w1r,wue,A1r,L1r,Hc,B1r,Aue,k1r,x1r,Lue,R1r,S1r,P1r,Bue,$1r,I1r,Ew,j1r,Lo,yw,N1r,kue,D1r,q1r,En,G1r,xue,O1r,X1r,Rue,z1r,V1r,Sue,W1r,Q1r,H1r,fe,R8,Pue,U1r,J1r,TO,Y1r,K1r,Z1r,S8,$ue,ebr,obr,FO,rbr,tbr,abr,P8,Iue,nbr,sbr,CO,lbr,ibr,dbr,$8,jue,cbr,fbr,MO,mbr,gbr,hbr,I8,Nue,pbr,_br,EO,ubr,bbr,vbr,j8,Due,Tbr,Fbr,yO,Cbr,Mbr,Ebr,N8,que,ybr,wbr,wO,Abr,Lbr,Bbr,D8,Gue,kbr,xbr,AO,Rbr,Sbr,Pbr,q8,Oue,$br,Ibr,LO,jbr,Nbr,Dbr,G8,Xue,qbr,Gbr,BO,Obr,Xbr,zbr,O8,zue,Vbr,Wbr,kO,Qbr,Hbr,Ubr,Vue,Jbr,Ybr,ww,h9e,Uc,X8,Wue,Aw,Kbr,Que,Zbr,p9e,Br,Lw,e5r,Jc,o5r,Hue,r5r,t5r,Uue,a5r,n5r,s5r,Bw,l5r,Jue,i5r,d5r,c5r,Ct,kw,f5r,Yue,m5r,g5r,Yc,h5r,Kue,p5r,_5r,Zue,u5r,b5r,v5r,e1e,T5r,F5r,xw,C5r,Bo,Rw,M5r,o1e,E5r,y5r,yn,w5r,r1e,A5r,L5r,t1e,B5r,k5r,a1e,x5r,R5r,S5r,ve,z8,n1e,P5r,$5r,xO,I5r,j5r,N5r,V8,s1e,D5r,q5r,RO,G5r,O5r,X5r,W8,l1e,z5r,V5r,SO,W5r,Q5r,H5r,Q8,i1e,U5r,J5r,PO,Y5r,K5r,Z5r,H8,d1e,e2r,o2r,$O,r2r,t2r,a2r,U8,c1e,n2r,s2r,IO,l2r,i2r,d2r,J8,f1e,c2r,f2r,jO,m2r,g2r,h2r,Y8,m1e,p2r,_2r,NO,u2r,b2r,v2r,K8,g1e,T2r,F2r,DO,C2r,M2r,E2r,h1e,y2r,w2r,Sw,_9e,Kc,Z8,p1e,Pw,A2r,_1e,L2r,u9e,kr,$w,B2r,Zc,k2r,u1e,x2r,R2r,b1e,S2r,P2r,$2r,Iw,I2r,v1e,j2r,N2r,D2r,Mt,jw,q2r,T1e,G2r,O2r,ef,X2r,F1e,z2r,V2r,C1e,W2r,Q2r,H2r,M1e,U2r,J2r,Nw,Y2r,ko,Dw,K2r,E1e,Z2r,evr,wn,ovr,y1e,rvr,tvr,w1e,avr,nvr,A1e,svr,lvr,ivr,Te,eF,L1e,dvr,cvr,qO,fvr,mvr,gvr,oF,B1e,hvr,pvr,GO,_vr,uvr,bvr,rF,k1e,vvr,Tvr,OO,Fvr,Cvr,Mvr,tF,x1e,Evr,yvr,XO,wvr,Avr,Lvr,aF,R1e,Bvr,kvr,zO,xvr,Rvr,Svr,nF,S1e,Pvr,$vr,VO,Ivr,jvr,Nvr,sF,P1e,Dvr,qvr,WO,Gvr,Ovr,Xvr,lF,$1e,zvr,Vvr,QO,Wvr,Qvr,Hvr,iF,I1e,Uvr,Jvr,HO,Yvr,Kvr,Zvr,j1e,e6r,o6r,qw,b9e,of,dF,N1e,Gw,r6r,D1e,t6r,v9e,xr,Ow,a6r,rf,n6r,q1e,s6r,l6r,G1e,i6r,d6r,c6r,Xw,f6r,O1e,m6r,g6r,h6r,Et,zw,p6r,X1e,_6r,u6r,tf,b6r,z1e,v6r,T6r,V1e,F6r,C6r,M6r,W1e,E6r,y6r,Vw,w6r,xo,Ww,A6r,Q1e,L6r,B6r,An,k6r,H1e,x6r,R6r,U1e,S6r,P6r,J1e,$6r,I6r,j6r,Fe,cF,Y1e,N6r,D6r,UO,q6r,G6r,O6r,fF,K1e,X6r,z6r,JO,V6r,W6r,Q6r,mF,Z1e,H6r,U6r,YO,J6r,Y6r,K6r,gF,ebe,Z6r,eTr,KO,oTr,rTr,tTr,hF,obe,aTr,nTr,ZO,sTr,lTr,iTr,pF,rbe,dTr,cTr,eX,fTr,mTr,gTr,_F,tbe,hTr,pTr,oX,_Tr,uTr,bTr,uF,abe,vTr,TTr,rX,FTr,CTr,MTr,bF,nbe,ETr,yTr,tX,wTr,ATr,LTr,sbe,BTr,kTr,Qw,T9e,af,vF,lbe,Hw,xTr,ibe,RTr,F9e,Rr,Uw,STr,nf,PTr,dbe,$Tr,ITr,cbe,jTr,NTr,DTr,Jw,qTr,fbe,GTr,OTr,XTr,yt,Yw,zTr,mbe,VTr,WTr,sf,QTr,gbe,HTr,UTr,hbe,JTr,YTr,KTr,pbe,ZTr,e7r,Kw,o7r,Ro,Zw,r7r,_be,t7r,a7r,Ln,n7r,ube,s7r,l7r,bbe,i7r,d7r,vbe,c7r,f7r,m7r,Ce,TF,Tbe,g7r,h7r,aX,p7r,_7r,u7r,FF,Fbe,b7r,v7r,nX,T7r,F7r,C7r,CF,Cbe,M7r,E7r,sX,y7r,w7r,A7r,MF,Mbe,L7r,B7r,lX,k7r,x7r,R7r,EF,Ebe,S7r,P7r,iX,$7r,I7r,j7r,yF,ybe,N7r,D7r,dX,q7r,G7r,O7r,wF,wbe,X7r,z7r,cX,V7r,W7r,Q7r,AF,Abe,H7r,U7r,fX,J7r,Y7r,K7r,LF,Lbe,Z7r,e8r,mX,o8r,r8r,t8r,Bbe,a8r,n8r,eA,C9e,lf,BF,kbe,oA,s8r,xbe,l8r,M9e,Sr,rA,i8r,df,d8r,Rbe,c8r,f8r,Sbe,m8r,g8r,h8r,tA,p8r,Pbe,_8r,u8r,b8r,wt,aA,v8r,$be,T8r,F8r,cf,C8r,Ibe,M8r,E8r,jbe,y8r,w8r,A8r,Nbe,L8r,B8r,nA,k8r,So,sA,x8r,Dbe,R8r,S8r,Bn,P8r,qbe,$8r,I8r,Gbe,j8r,N8r,Obe,D8r,q8r,G8r,so,kF,Xbe,O8r,X8r,gX,z8r,V8r,W8r,xF,zbe,Q8r,H8r,hX,U8r,J8r,Y8r,RF,Vbe,K8r,Z8r,pX,eFr,oFr,rFr,SF,Wbe,tFr,aFr,_X,nFr,sFr,lFr,PF,Qbe,iFr,dFr,uX,cFr,fFr,mFr,$F,Hbe,gFr,hFr,bX,pFr,_Fr,uFr,IF,Ube,bFr,vFr,vX,TFr,FFr,CFr,Jbe,MFr,EFr,lA,E9e,ff,jF,Ybe,iA,yFr,Kbe,wFr,y9e,Pr,dA,AFr,mf,LFr,Zbe,BFr,kFr,e5e,xFr,RFr,SFr,cA,PFr,o5e,$Fr,IFr,jFr,At,fA,NFr,r5e,DFr,qFr,gf,GFr,t5e,OFr,XFr,a5e,zFr,VFr,WFr,n5e,QFr,HFr,mA,UFr,Po,gA,JFr,s5e,YFr,KFr,kn,ZFr,l5e,eCr,oCr,i5e,rCr,tCr,d5e,aCr,nCr,sCr,lo,NF,c5e,lCr,iCr,TX,dCr,cCr,fCr,DF,f5e,mCr,gCr,FX,hCr,pCr,_Cr,qF,m5e,uCr,bCr,CX,vCr,TCr,FCr,GF,g5e,CCr,MCr,MX,ECr,yCr,wCr,OF,h5e,ACr,LCr,EX,BCr,kCr,xCr,XF,p5e,RCr,SCr,yX,PCr,$Cr,ICr,zF,_5e,jCr,NCr,wX,DCr,qCr,GCr,u5e,OCr,XCr,hA,w9e,hf,VF,b5e,pA,zCr,v5e,VCr,A9e,$r,_A,WCr,pf,QCr,T5e,HCr,UCr,F5e,JCr,YCr,KCr,uA,ZCr,C5e,e4r,o4r,r4r,Lt,bA,t4r,M5e,a4r,n4r,_f,s4r,E5e,l4r,i4r,y5e,d4r,c4r,f4r,w5e,m4r,g4r,vA,h4r,$o,TA,p4r,A5e,_4r,u4r,xn,b4r,L5e,v4r,T4r,B5e,F4r,C4r,k5e,M4r,E4r,y4r,x5e,WF,R5e,w4r,A4r,AX,L4r,B4r,k4r,S5e,x4r,R4r,FA,L9e,uf,QF,P5e,CA,S4r,$5e,P4r,B9e,Ir,MA,$4r,bf,I4r,I5e,j4r,N4r,j5e,D4r,q4r,G4r,EA,O4r,N5e,X4r,z4r,V4r,Bt,yA,W4r,D5e,Q4r,H4r,vf,U4r,q5e,J4r,Y4r,G5e,K4r,Z4r,eMr,O5e,oMr,rMr,wA,tMr,Io,AA,aMr,X5e,nMr,sMr,Rn,lMr,z5e,iMr,dMr,V5e,cMr,fMr,W5e,mMr,gMr,hMr,LA,HF,Q5e,pMr,_Mr,LX,uMr,bMr,vMr,UF,H5e,TMr,FMr,BX,CMr,MMr,EMr,U5e,yMr,wMr,BA,k9e,Tf,JF,J5e,kA,AMr,Y5e,LMr,x9e,jr,xA,BMr,Ff,kMr,K5e,xMr,RMr,Z5e,SMr,PMr,$Mr,RA,IMr,e2e,jMr,NMr,DMr,kt,SA,qMr,o2e,GMr,OMr,Cf,XMr,r2e,zMr,VMr,t2e,WMr,QMr,HMr,a2e,UMr,JMr,PA,YMr,jo,$A,KMr,n2e,ZMr,eEr,Sn,oEr,s2e,rEr,tEr,l2e,aEr,nEr,i2e,sEr,lEr,iEr,d2e,YF,c2e,dEr,cEr,kX,fEr,mEr,gEr,f2e,hEr,pEr,IA,R9e;return ce=new z({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ZC=new z({}),e4=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new _Er({props:{warning:"&lcub;true}",$$slots:{default:[dpt]},$$scope:{ctx:yi}}}),o4=new z({}),r4=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/configuration_auto.py#L512"}}),n4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/configuration_auto.py#L535",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),s4=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),l4=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/configuration_auto.py#L657",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),i4=new z({}),d4=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/tokenization_auto.py#L350"}}),m4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/tokenization_auto.py#L364",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15678/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),g4=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),h4=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/tokenization_auto.py#L560",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),p4=new z({}),_4=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),v4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15678/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),sh=new _Er({props:{$$slots:{default:[cpt]},$$scope:{ctx:yi}}}),T4=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),F4=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),C4=new z({}),M4=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/processing_auto.py#L71"}}),w4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),uh=new _Er({props:{$$slots:{default:[fpt]},$$scope:{ctx:yi}}}),A4=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),L4=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),B4=new z({}),k4=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L667"}}),R4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),S4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),P4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I4=new z({}),j4=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L674"}}),D4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),q4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),G4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X4=new z({}),z4=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L689"}}),W4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Q4=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),H4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U4=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J4=new z({}),Y4=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L696"}}),Z4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),eM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),oM=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tM=new z({}),aM=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L703"}}),sM=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),lM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),iM=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cM=new z({}),fM=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L712"}}),gM=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),hM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),pM=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_M=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uM=new z({}),bM=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L746"}}),TM=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),FM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),CM=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),MM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EM=new z({}),yM=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L753"}}),AM=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),LM=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),BM=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kM=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xM=new z({}),RM=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L739"}}),PM=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),$M=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),IM=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jM=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NM=new z({}),DM=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L721"}}),GM=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),OM=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),XM=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zM=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VM=new z({}),WM=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L728"}}),HM=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),UM=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),JM=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YM=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KM=new z({}),ZM=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L762"}}),oE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),rE=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),tE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aE=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nE=new z({}),sE=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L792"}}),iE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),dE=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),cE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fE=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mE=new z({}),gE=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L799"}}),pE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),_E=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),uE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vE=new z({}),TE=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L822"}}),CE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ME=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),EE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wE=new z({}),AE=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L806"}}),BE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),kE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),xE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SE=new z({}),PE=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L813"}}),IE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),jE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),NE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GE=new z({}),OE=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L831"}}),zE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),VE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),WE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HE=new z({}),UE=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L838"}}),YE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),KE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),ZE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o3=new z({}),r3=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L785"}}),a3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),n3=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),s3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l3=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i3=new z({}),d3=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L769"}}),f3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),m3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),g3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p3=new z({}),_3=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_auto.py#L776"}}),b3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),v3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),T3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M3=new z({}),E3=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L371"}}),w3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),A3=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),L3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B3=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k3=new z({}),x3=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L378"}}),S3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),P3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),$3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j3=new z({}),N3=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L393"}}),q3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),G3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),O3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z3=new z({}),V3=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L400"}}),Q3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),H3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),U3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J3=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y3=new z({}),K3=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L414"}}),ey=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new z({}),ny=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),dy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new z({}),my=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),hy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),py=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),_y=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new z({}),vy=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),Fy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),My=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new z({}),wy=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),Ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),By=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),ky=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new z({}),Sy=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),$y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new z({}),qy=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L439"}}),Oy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new z({}),Qy=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L407"}}),Uy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new z({}),ew=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new z({}),lw=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L220"}}),dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),fw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new z({}),hw=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L234"}}),_w=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new z({}),Fw=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L227"}}),Mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),yw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new z({}),Lw=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),Rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new z({}),$w=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),Dw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new z({}),Ow=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),zw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),Ww=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new z({}),Uw=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),Yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),Zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new z({}),rA=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L273"}}),aA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),sA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new z({}),dA=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),fA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),gA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new z({}),_A=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),bA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),TA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new z({}),MA=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),yA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),AA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new z({}),xA=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),SA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),PA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),$A=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15678/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Ae=l(),le=a("h1"),me=a("a"),to=a("span"),f(ce.$$.fragment),ue=l(),Do=a("span"),wi=o("Auto Classes"),Ef=l(),sa=a("p"),Ai=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=a("code"),UC=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),Bi=o("Instantiating one of "),Pn=a("a"),JC=o("AutoConfig"),$n=o(", "),In=a("a"),YC=o("AutoModel"),ki=o(`, and
`),jn=a("a"),KC=o("AutoTokenizer"),xi=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),f($a.$$.fragment),co=l(),ge=a("p"),S0=o("will create a model that is an instance of "),Ri=a("a"),P0=o("BertModel"),$0=o("."),qo=l(),Ia=a("p"),I0=o("There is one class of "),Af=a("code"),j0=o("AutoModel"),Oke=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),S0e=l(),Si=a("h2"),Lf=a("a"),MV=a("span"),f(ZC.$$.fragment),Xke=l(),EV=a("span"),zke=o("Extending the Auto Classes"),P0e=l(),Nn=a("p"),Vke=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),yV=a("code"),Wke=o("NewModel"),Qke=o(", make sure you have a "),wV=a("code"),Hke=o("NewModelConfig"),Uke=o(` then you can add those to the auto
classes like this:`),$0e=l(),f(e4.$$.fragment),I0e=l(),N0=a("p"),Jke=o("You will then be able to use the auto classes like you would usually do!"),j0e=l(),f(Bf.$$.fragment),N0e=l(),Pi=a("h2"),kf=a("a"),AV=a("span"),f(o4.$$.fragment),Yke=l(),LV=a("span"),Kke=o("AutoConfig"),D0e=l(),Go=a("div"),f(r4.$$.fragment),Zke=l(),t4=a("p"),exe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),D0=a("a"),oxe=o("from_pretrained()"),rxe=o(" class method."),txe=l(),a4=a("p"),axe=o("This class cannot be instantiated directly using "),BV=a("code"),nxe=o("__init__()"),sxe=o(" (throws an error)."),lxe=l(),fo=a("div"),f(n4.$$.fragment),ixe=l(),kV=a("p"),dxe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),cxe=l(),$i=a("p"),fxe=o("The configuration class to instantiate is selected based on the "),xV=a("code"),mxe=o("model_type"),gxe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),RV=a("code"),hxe=o("pretrained_model_name_or_path"),pxe=o(":"),_xe=l(),v=a("ul"),xf=a("li"),SV=a("strong"),uxe=o("albert"),bxe=o(" \u2014 "),q0=a("a"),vxe=o("AlbertConfig"),Txe=o(" (ALBERT model)"),Fxe=l(),Rf=a("li"),PV=a("strong"),Cxe=o("bart"),Mxe=o(" \u2014 "),G0=a("a"),Exe=o("BartConfig"),yxe=o(" (BART model)"),wxe=l(),Sf=a("li"),$V=a("strong"),Axe=o("beit"),Lxe=o(" \u2014 "),O0=a("a"),Bxe=o("BeitConfig"),kxe=o(" (BEiT model)"),xxe=l(),Pf=a("li"),IV=a("strong"),Rxe=o("bert"),Sxe=o(" \u2014 "),X0=a("a"),Pxe=o("BertConfig"),$xe=o(" (BERT model)"),Ixe=l(),$f=a("li"),jV=a("strong"),jxe=o("bert-generation"),Nxe=o(" \u2014 "),z0=a("a"),Dxe=o("BertGenerationConfig"),qxe=o(" (Bert Generation model)"),Gxe=l(),If=a("li"),NV=a("strong"),Oxe=o("big_bird"),Xxe=o(" \u2014 "),V0=a("a"),zxe=o("BigBirdConfig"),Vxe=o(" (BigBird model)"),Wxe=l(),jf=a("li"),DV=a("strong"),Qxe=o("bigbird_pegasus"),Hxe=o(" \u2014 "),W0=a("a"),Uxe=o("BigBirdPegasusConfig"),Jxe=o(" (BigBirdPegasus model)"),Yxe=l(),Nf=a("li"),qV=a("strong"),Kxe=o("blenderbot"),Zxe=o(" \u2014 "),Q0=a("a"),eRe=o("BlenderbotConfig"),oRe=o(" (Blenderbot model)"),rRe=l(),Df=a("li"),GV=a("strong"),tRe=o("blenderbot-small"),aRe=o(" \u2014 "),H0=a("a"),nRe=o("BlenderbotSmallConfig"),sRe=o(" (BlenderbotSmall model)"),lRe=l(),qf=a("li"),OV=a("strong"),iRe=o("camembert"),dRe=o(" \u2014 "),U0=a("a"),cRe=o("CamembertConfig"),fRe=o(" (CamemBERT model)"),mRe=l(),Gf=a("li"),XV=a("strong"),gRe=o("canine"),hRe=o(" \u2014 "),J0=a("a"),pRe=o("CanineConfig"),_Re=o(" (Canine model)"),uRe=l(),Of=a("li"),zV=a("strong"),bRe=o("clip"),vRe=o(" \u2014 "),Y0=a("a"),TRe=o("CLIPConfig"),FRe=o(" (CLIP model)"),CRe=l(),Xf=a("li"),VV=a("strong"),MRe=o("convbert"),ERe=o(" \u2014 "),K0=a("a"),yRe=o("ConvBertConfig"),wRe=o(" (ConvBERT model)"),ARe=l(),zf=a("li"),WV=a("strong"),LRe=o("convnext"),BRe=o(" \u2014 "),Z0=a("a"),kRe=o("ConvNextConfig"),xRe=o(" (ConvNext model)"),RRe=l(),Vf=a("li"),QV=a("strong"),SRe=o("ctrl"),PRe=o(" \u2014 "),eL=a("a"),$Re=o("CTRLConfig"),IRe=o(" (CTRL model)"),jRe=l(),Wf=a("li"),HV=a("strong"),NRe=o("deberta"),DRe=o(" \u2014 "),oL=a("a"),qRe=o("DebertaConfig"),GRe=o(" (DeBERTa model)"),ORe=l(),Qf=a("li"),UV=a("strong"),XRe=o("deberta-v2"),zRe=o(" \u2014 "),rL=a("a"),VRe=o("DebertaV2Config"),WRe=o(" (DeBERTa-v2 model)"),QRe=l(),Hf=a("li"),JV=a("strong"),HRe=o("deit"),URe=o(" \u2014 "),tL=a("a"),JRe=o("DeiTConfig"),YRe=o(" (DeiT model)"),KRe=l(),Uf=a("li"),YV=a("strong"),ZRe=o("detr"),eSe=o(" \u2014 "),aL=a("a"),oSe=o("DetrConfig"),rSe=o(" (DETR model)"),tSe=l(),Jf=a("li"),KV=a("strong"),aSe=o("distilbert"),nSe=o(" \u2014 "),nL=a("a"),sSe=o("DistilBertConfig"),lSe=o(" (DistilBERT model)"),iSe=l(),Yf=a("li"),ZV=a("strong"),dSe=o("dpr"),cSe=o(" \u2014 "),sL=a("a"),fSe=o("DPRConfig"),mSe=o(" (DPR model)"),gSe=l(),Kf=a("li"),eW=a("strong"),hSe=o("electra"),pSe=o(" \u2014 "),lL=a("a"),_Se=o("ElectraConfig"),uSe=o(" (ELECTRA model)"),bSe=l(),Zf=a("li"),oW=a("strong"),vSe=o("encoder-decoder"),TSe=o(" \u2014 "),iL=a("a"),FSe=o("EncoderDecoderConfig"),CSe=o(" (Encoder decoder model)"),MSe=l(),em=a("li"),rW=a("strong"),ESe=o("flaubert"),ySe=o(" \u2014 "),dL=a("a"),wSe=o("FlaubertConfig"),ASe=o(" (FlauBERT model)"),LSe=l(),om=a("li"),tW=a("strong"),BSe=o("fnet"),kSe=o(" \u2014 "),cL=a("a"),xSe=o("FNetConfig"),RSe=o(" (FNet model)"),SSe=l(),rm=a("li"),aW=a("strong"),PSe=o("fsmt"),$Se=o(" \u2014 "),fL=a("a"),ISe=o("FSMTConfig"),jSe=o(" (FairSeq Machine-Translation model)"),NSe=l(),tm=a("li"),nW=a("strong"),DSe=o("funnel"),qSe=o(" \u2014 "),mL=a("a"),GSe=o("FunnelConfig"),OSe=o(" (Funnel Transformer model)"),XSe=l(),am=a("li"),sW=a("strong"),zSe=o("gpt2"),VSe=o(" \u2014 "),gL=a("a"),WSe=o("GPT2Config"),QSe=o(" (OpenAI GPT-2 model)"),HSe=l(),nm=a("li"),lW=a("strong"),USe=o("gpt_neo"),JSe=o(" \u2014 "),hL=a("a"),YSe=o("GPTNeoConfig"),KSe=o(" (GPT Neo model)"),ZSe=l(),sm=a("li"),iW=a("strong"),ePe=o("gptj"),oPe=o(" \u2014 "),pL=a("a"),rPe=o("GPTJConfig"),tPe=o(" (GPT-J model)"),aPe=l(),lm=a("li"),dW=a("strong"),nPe=o("hubert"),sPe=o(" \u2014 "),_L=a("a"),lPe=o("HubertConfig"),iPe=o(" (Hubert model)"),dPe=l(),im=a("li"),cW=a("strong"),cPe=o("ibert"),fPe=o(" \u2014 "),uL=a("a"),mPe=o("IBertConfig"),gPe=o(" (I-BERT model)"),hPe=l(),dm=a("li"),fW=a("strong"),pPe=o("imagegpt"),_Pe=o(" \u2014 "),bL=a("a"),uPe=o("ImageGPTConfig"),bPe=o(" (ImageGPT model)"),vPe=l(),cm=a("li"),mW=a("strong"),TPe=o("layoutlm"),FPe=o(" \u2014 "),vL=a("a"),CPe=o("LayoutLMConfig"),MPe=o(" (LayoutLM model)"),EPe=l(),fm=a("li"),gW=a("strong"),yPe=o("layoutlmv2"),wPe=o(" \u2014 "),TL=a("a"),APe=o("LayoutLMv2Config"),LPe=o(" (LayoutLMv2 model)"),BPe=l(),mm=a("li"),hW=a("strong"),kPe=o("led"),xPe=o(" \u2014 "),FL=a("a"),RPe=o("LEDConfig"),SPe=o(" (LED model)"),PPe=l(),gm=a("li"),pW=a("strong"),$Pe=o("longformer"),IPe=o(" \u2014 "),CL=a("a"),jPe=o("LongformerConfig"),NPe=o(" (Longformer model)"),DPe=l(),hm=a("li"),_W=a("strong"),qPe=o("luke"),GPe=o(" \u2014 "),ML=a("a"),OPe=o("LukeConfig"),XPe=o(" (LUKE model)"),zPe=l(),pm=a("li"),uW=a("strong"),VPe=o("lxmert"),WPe=o(" \u2014 "),EL=a("a"),QPe=o("LxmertConfig"),HPe=o(" (LXMERT model)"),UPe=l(),_m=a("li"),bW=a("strong"),JPe=o("m2m_100"),YPe=o(" \u2014 "),yL=a("a"),KPe=o("M2M100Config"),ZPe=o(" (M2M100 model)"),e$e=l(),um=a("li"),vW=a("strong"),o$e=o("marian"),r$e=o(" \u2014 "),wL=a("a"),t$e=o("MarianConfig"),a$e=o(" (Marian model)"),n$e=l(),bm=a("li"),TW=a("strong"),s$e=o("mbart"),l$e=o(" \u2014 "),AL=a("a"),i$e=o("MBartConfig"),d$e=o(" (mBART model)"),c$e=l(),vm=a("li"),FW=a("strong"),f$e=o("megatron-bert"),m$e=o(" \u2014 "),LL=a("a"),g$e=o("MegatronBertConfig"),h$e=o(" (MegatronBert model)"),p$e=l(),Tm=a("li"),CW=a("strong"),_$e=o("mobilebert"),u$e=o(" \u2014 "),BL=a("a"),b$e=o("MobileBertConfig"),v$e=o(" (MobileBERT model)"),T$e=l(),Fm=a("li"),MW=a("strong"),F$e=o("mpnet"),C$e=o(" \u2014 "),kL=a("a"),M$e=o("MPNetConfig"),E$e=o(" (MPNet model)"),y$e=l(),Cm=a("li"),EW=a("strong"),w$e=o("mt5"),A$e=o(" \u2014 "),xL=a("a"),L$e=o("MT5Config"),B$e=o(" (mT5 model)"),k$e=l(),Mm=a("li"),yW=a("strong"),x$e=o("nystromformer"),R$e=o(" \u2014 "),RL=a("a"),S$e=o("NystromformerConfig"),P$e=o(" (Nystromformer model)"),$$e=l(),Em=a("li"),wW=a("strong"),I$e=o("openai-gpt"),j$e=o(" \u2014 "),SL=a("a"),N$e=o("OpenAIGPTConfig"),D$e=o(" (OpenAI GPT model)"),q$e=l(),ym=a("li"),AW=a("strong"),G$e=o("pegasus"),O$e=o(" \u2014 "),PL=a("a"),X$e=o("PegasusConfig"),z$e=o(" (Pegasus model)"),V$e=l(),wm=a("li"),LW=a("strong"),W$e=o("perceiver"),Q$e=o(" \u2014 "),$L=a("a"),H$e=o("PerceiverConfig"),U$e=o(" (Perceiver model)"),J$e=l(),Am=a("li"),BW=a("strong"),Y$e=o("poolformer"),K$e=o(" \u2014 "),IL=a("a"),Z$e=o("PoolFormerConfig"),eIe=o(" (PoolFormer model)"),oIe=l(),Lm=a("li"),kW=a("strong"),rIe=o("prophetnet"),tIe=o(" \u2014 "),jL=a("a"),aIe=o("ProphetNetConfig"),nIe=o(" (ProphetNet model)"),sIe=l(),Bm=a("li"),xW=a("strong"),lIe=o("qdqbert"),iIe=o(" \u2014 "),NL=a("a"),dIe=o("QDQBertConfig"),cIe=o(" (QDQBert model)"),fIe=l(),km=a("li"),RW=a("strong"),mIe=o("rag"),gIe=o(" \u2014 "),DL=a("a"),hIe=o("RagConfig"),pIe=o(" (RAG model)"),_Ie=l(),xm=a("li"),SW=a("strong"),uIe=o("realm"),bIe=o(" \u2014 "),qL=a("a"),vIe=o("RealmConfig"),TIe=o(" (Realm model)"),FIe=l(),Rm=a("li"),PW=a("strong"),CIe=o("reformer"),MIe=o(" \u2014 "),GL=a("a"),EIe=o("ReformerConfig"),yIe=o(" (Reformer model)"),wIe=l(),Sm=a("li"),$W=a("strong"),AIe=o("rembert"),LIe=o(" \u2014 "),OL=a("a"),BIe=o("RemBertConfig"),kIe=o(" (RemBERT model)"),xIe=l(),Pm=a("li"),IW=a("strong"),RIe=o("retribert"),SIe=o(" \u2014 "),XL=a("a"),PIe=o("RetriBertConfig"),$Ie=o(" (RetriBERT model)"),IIe=l(),$m=a("li"),jW=a("strong"),jIe=o("roberta"),NIe=o(" \u2014 "),zL=a("a"),DIe=o("RobertaConfig"),qIe=o(" (RoBERTa model)"),GIe=l(),Im=a("li"),NW=a("strong"),OIe=o("roformer"),XIe=o(" \u2014 "),VL=a("a"),zIe=o("RoFormerConfig"),VIe=o(" (RoFormer model)"),WIe=l(),jm=a("li"),DW=a("strong"),QIe=o("segformer"),HIe=o(" \u2014 "),WL=a("a"),UIe=o("SegformerConfig"),JIe=o(" (SegFormer model)"),YIe=l(),Nm=a("li"),qW=a("strong"),KIe=o("sew"),ZIe=o(" \u2014 "),QL=a("a"),eje=o("SEWConfig"),oje=o(" (SEW model)"),rje=l(),Dm=a("li"),GW=a("strong"),tje=o("sew-d"),aje=o(" \u2014 "),HL=a("a"),nje=o("SEWDConfig"),sje=o(" (SEW-D model)"),lje=l(),qm=a("li"),OW=a("strong"),ije=o("speech-encoder-decoder"),dje=o(" \u2014 "),UL=a("a"),cje=o("SpeechEncoderDecoderConfig"),fje=o(" (Speech Encoder decoder model)"),mje=l(),Gm=a("li"),XW=a("strong"),gje=o("speech_to_text"),hje=o(" \u2014 "),JL=a("a"),pje=o("Speech2TextConfig"),_je=o(" (Speech2Text model)"),uje=l(),Om=a("li"),zW=a("strong"),bje=o("speech_to_text_2"),vje=o(" \u2014 "),YL=a("a"),Tje=o("Speech2Text2Config"),Fje=o(" (Speech2Text2 model)"),Cje=l(),Xm=a("li"),VW=a("strong"),Mje=o("splinter"),Eje=o(" \u2014 "),KL=a("a"),yje=o("SplinterConfig"),wje=o(" (Splinter model)"),Aje=l(),zm=a("li"),WW=a("strong"),Lje=o("squeezebert"),Bje=o(" \u2014 "),ZL=a("a"),kje=o("SqueezeBertConfig"),xje=o(" (SqueezeBERT model)"),Rje=l(),Vm=a("li"),QW=a("strong"),Sje=o("swin"),Pje=o(" \u2014 "),e9=a("a"),$je=o("SwinConfig"),Ije=o(" (Swin model)"),jje=l(),Wm=a("li"),HW=a("strong"),Nje=o("t5"),Dje=o(" \u2014 "),o9=a("a"),qje=o("T5Config"),Gje=o(" (T5 model)"),Oje=l(),Qm=a("li"),UW=a("strong"),Xje=o("tapas"),zje=o(" \u2014 "),r9=a("a"),Vje=o("TapasConfig"),Wje=o(" (TAPAS model)"),Qje=l(),Hm=a("li"),JW=a("strong"),Hje=o("transfo-xl"),Uje=o(" \u2014 "),t9=a("a"),Jje=o("TransfoXLConfig"),Yje=o(" (Transformer-XL model)"),Kje=l(),Um=a("li"),YW=a("strong"),Zje=o("trocr"),eNe=o(" \u2014 "),a9=a("a"),oNe=o("TrOCRConfig"),rNe=o(" (TrOCR model)"),tNe=l(),Jm=a("li"),KW=a("strong"),aNe=o("unispeech"),nNe=o(" \u2014 "),n9=a("a"),sNe=o("UniSpeechConfig"),lNe=o(" (UniSpeech model)"),iNe=l(),Ym=a("li"),ZW=a("strong"),dNe=o("unispeech-sat"),cNe=o(" \u2014 "),s9=a("a"),fNe=o("UniSpeechSatConfig"),mNe=o(" (UniSpeechSat model)"),gNe=l(),Km=a("li"),eQ=a("strong"),hNe=o("vilt"),pNe=o(" \u2014 "),l9=a("a"),_Ne=o("ViltConfig"),uNe=o(" (ViLT model)"),bNe=l(),Zm=a("li"),oQ=a("strong"),vNe=o("vision-encoder-decoder"),TNe=o(" \u2014 "),i9=a("a"),FNe=o("VisionEncoderDecoderConfig"),CNe=o(" (Vision Encoder decoder model)"),MNe=l(),eg=a("li"),rQ=a("strong"),ENe=o("vision-text-dual-encoder"),yNe=o(" \u2014 "),d9=a("a"),wNe=o("VisionTextDualEncoderConfig"),ANe=o(" (VisionTextDualEncoder model)"),LNe=l(),og=a("li"),tQ=a("strong"),BNe=o("visual_bert"),kNe=o(" \u2014 "),c9=a("a"),xNe=o("VisualBertConfig"),RNe=o(" (VisualBert model)"),SNe=l(),rg=a("li"),aQ=a("strong"),PNe=o("vit"),$Ne=o(" \u2014 "),f9=a("a"),INe=o("ViTConfig"),jNe=o(" (ViT model)"),NNe=l(),tg=a("li"),nQ=a("strong"),DNe=o("vit_mae"),qNe=o(" \u2014 "),m9=a("a"),GNe=o("ViTMAEConfig"),ONe=o(" (ViTMAE model)"),XNe=l(),ag=a("li"),sQ=a("strong"),zNe=o("wav2vec2"),VNe=o(" \u2014 "),g9=a("a"),WNe=o("Wav2Vec2Config"),QNe=o(" (Wav2Vec2 model)"),HNe=l(),ng=a("li"),lQ=a("strong"),UNe=o("wavlm"),JNe=o(" \u2014 "),h9=a("a"),YNe=o("WavLMConfig"),KNe=o(" (WavLM model)"),ZNe=l(),sg=a("li"),iQ=a("strong"),eDe=o("xglm"),oDe=o(" \u2014 "),p9=a("a"),rDe=o("XGLMConfig"),tDe=o(" (XGLM model)"),aDe=l(),lg=a("li"),dQ=a("strong"),nDe=o("xlm"),sDe=o(" \u2014 "),_9=a("a"),lDe=o("XLMConfig"),iDe=o(" (XLM model)"),dDe=l(),ig=a("li"),cQ=a("strong"),cDe=o("xlm-prophetnet"),fDe=o(" \u2014 "),u9=a("a"),mDe=o("XLMProphetNetConfig"),gDe=o(" (XLMProphetNet model)"),hDe=l(),dg=a("li"),fQ=a("strong"),pDe=o("xlm-roberta"),_De=o(" \u2014 "),b9=a("a"),uDe=o("XLMRobertaConfig"),bDe=o(" (XLM-RoBERTa model)"),vDe=l(),cg=a("li"),mQ=a("strong"),TDe=o("xlm-roberta-xl"),FDe=o(" \u2014 "),v9=a("a"),CDe=o("XLMRobertaXLConfig"),MDe=o(" (XLM-RoBERTa-XL model)"),EDe=l(),fg=a("li"),gQ=a("strong"),yDe=o("xlnet"),wDe=o(" \u2014 "),T9=a("a"),ADe=o("XLNetConfig"),LDe=o(" (XLNet model)"),BDe=l(),mg=a("li"),hQ=a("strong"),kDe=o("yoso"),xDe=o(" \u2014 "),F9=a("a"),RDe=o("YosoConfig"),SDe=o(" (YOSO model)"),PDe=l(),pQ=a("p"),$De=o("Examples:"),IDe=l(),f(s4.$$.fragment),jDe=l(),gg=a("div"),f(l4.$$.fragment),NDe=l(),_Q=a("p"),DDe=o("Register a new configuration for this class."),q0e=l(),Ii=a("h2"),hg=a("a"),uQ=a("span"),f(i4.$$.fragment),qDe=l(),bQ=a("span"),GDe=o("AutoTokenizer"),G0e=l(),Oo=a("div"),f(d4.$$.fragment),ODe=l(),c4=a("p"),XDe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),C9=a("a"),zDe=o("AutoTokenizer.from_pretrained()"),VDe=o(" class method."),WDe=l(),f4=a("p"),QDe=o("This class cannot be instantiated directly using "),vQ=a("code"),HDe=o("__init__()"),UDe=o(" (throws an error)."),JDe=l(),mo=a("div"),f(m4.$$.fragment),YDe=l(),TQ=a("p"),KDe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ZDe=l(),ja=a("p"),eqe=o("The tokenizer class to instantiate is selected based on the "),FQ=a("code"),oqe=o("model_type"),rqe=o(` property of the config object (either
passed as an argument or loaded from `),CQ=a("code"),tqe=o("pretrained_model_name_or_path"),aqe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MQ=a("code"),nqe=o("pretrained_model_name_or_path"),sqe=o(":"),lqe=l(),E=a("ul"),Dn=a("li"),EQ=a("strong"),iqe=o("albert"),dqe=o(" \u2014 "),M9=a("a"),cqe=o("AlbertTokenizer"),fqe=o(" or "),E9=a("a"),mqe=o("AlbertTokenizerFast"),gqe=o(" (ALBERT model)"),hqe=l(),qn=a("li"),yQ=a("strong"),pqe=o("bart"),_qe=o(" \u2014 "),y9=a("a"),uqe=o("BartTokenizer"),bqe=o(" or "),w9=a("a"),vqe=o("BartTokenizerFast"),Tqe=o(" (BART model)"),Fqe=l(),Gn=a("li"),wQ=a("strong"),Cqe=o("barthez"),Mqe=o(" \u2014 "),A9=a("a"),Eqe=o("BarthezTokenizer"),yqe=o(" or "),L9=a("a"),wqe=o("BarthezTokenizerFast"),Aqe=o(" (BARThez model)"),Lqe=l(),pg=a("li"),AQ=a("strong"),Bqe=o("bartpho"),kqe=o(" \u2014 "),B9=a("a"),xqe=o("BartphoTokenizer"),Rqe=o(" (BARTpho model)"),Sqe=l(),On=a("li"),LQ=a("strong"),Pqe=o("bert"),$qe=o(" \u2014 "),k9=a("a"),Iqe=o("BertTokenizer"),jqe=o(" or "),x9=a("a"),Nqe=o("BertTokenizerFast"),Dqe=o(" (BERT model)"),qqe=l(),_g=a("li"),BQ=a("strong"),Gqe=o("bert-generation"),Oqe=o(" \u2014 "),R9=a("a"),Xqe=o("BertGenerationTokenizer"),zqe=o(" (Bert Generation model)"),Vqe=l(),ug=a("li"),kQ=a("strong"),Wqe=o("bert-japanese"),Qqe=o(" \u2014 "),S9=a("a"),Hqe=o("BertJapaneseTokenizer"),Uqe=o(" (BertJapanese model)"),Jqe=l(),bg=a("li"),xQ=a("strong"),Yqe=o("bertweet"),Kqe=o(" \u2014 "),P9=a("a"),Zqe=o("BertweetTokenizer"),eGe=o(" (Bertweet model)"),oGe=l(),Xn=a("li"),RQ=a("strong"),rGe=o("big_bird"),tGe=o(" \u2014 "),$9=a("a"),aGe=o("BigBirdTokenizer"),nGe=o(" or "),I9=a("a"),sGe=o("BigBirdTokenizerFast"),lGe=o(" (BigBird model)"),iGe=l(),zn=a("li"),SQ=a("strong"),dGe=o("bigbird_pegasus"),cGe=o(" \u2014 "),j9=a("a"),fGe=o("PegasusTokenizer"),mGe=o(" or "),N9=a("a"),gGe=o("PegasusTokenizerFast"),hGe=o(" (BigBirdPegasus model)"),pGe=l(),Vn=a("li"),PQ=a("strong"),_Ge=o("blenderbot"),uGe=o(" \u2014 "),D9=a("a"),bGe=o("BlenderbotTokenizer"),vGe=o(" or "),q9=a("a"),TGe=o("BlenderbotTokenizerFast"),FGe=o(" (Blenderbot model)"),CGe=l(),vg=a("li"),$Q=a("strong"),MGe=o("blenderbot-small"),EGe=o(" \u2014 "),G9=a("a"),yGe=o("BlenderbotSmallTokenizer"),wGe=o(" (BlenderbotSmall model)"),AGe=l(),Tg=a("li"),IQ=a("strong"),LGe=o("byt5"),BGe=o(" \u2014 "),O9=a("a"),kGe=o("ByT5Tokenizer"),xGe=o(" (ByT5 model)"),RGe=l(),Wn=a("li"),jQ=a("strong"),SGe=o("camembert"),PGe=o(" \u2014 "),X9=a("a"),$Ge=o("CamembertTokenizer"),IGe=o(" or "),z9=a("a"),jGe=o("CamembertTokenizerFast"),NGe=o(" (CamemBERT model)"),DGe=l(),Fg=a("li"),NQ=a("strong"),qGe=o("canine"),GGe=o(" \u2014 "),V9=a("a"),OGe=o("CanineTokenizer"),XGe=o(" (Canine model)"),zGe=l(),Qn=a("li"),DQ=a("strong"),VGe=o("clip"),WGe=o(" \u2014 "),W9=a("a"),QGe=o("CLIPTokenizer"),HGe=o(" or "),Q9=a("a"),UGe=o("CLIPTokenizerFast"),JGe=o(" (CLIP model)"),YGe=l(),Hn=a("li"),qQ=a("strong"),KGe=o("convbert"),ZGe=o(" \u2014 "),H9=a("a"),eOe=o("ConvBertTokenizer"),oOe=o(" or "),U9=a("a"),rOe=o("ConvBertTokenizerFast"),tOe=o(" (ConvBERT model)"),aOe=l(),Un=a("li"),GQ=a("strong"),nOe=o("cpm"),sOe=o(" \u2014 "),J9=a("a"),lOe=o("CpmTokenizer"),iOe=o(" or "),OQ=a("code"),dOe=o("CpmTokenizerFast"),cOe=o(" (CPM model)"),fOe=l(),Cg=a("li"),XQ=a("strong"),mOe=o("ctrl"),gOe=o(" \u2014 "),Y9=a("a"),hOe=o("CTRLTokenizer"),pOe=o(" (CTRL model)"),_Oe=l(),Jn=a("li"),zQ=a("strong"),uOe=o("deberta"),bOe=o(" \u2014 "),K9=a("a"),vOe=o("DebertaTokenizer"),TOe=o(" or "),Z9=a("a"),FOe=o("DebertaTokenizerFast"),COe=o(" (DeBERTa model)"),MOe=l(),Mg=a("li"),VQ=a("strong"),EOe=o("deberta-v2"),yOe=o(" \u2014 "),eB=a("a"),wOe=o("DebertaV2Tokenizer"),AOe=o(" (DeBERTa-v2 model)"),LOe=l(),Yn=a("li"),WQ=a("strong"),BOe=o("distilbert"),kOe=o(" \u2014 "),oB=a("a"),xOe=o("DistilBertTokenizer"),ROe=o(" or "),rB=a("a"),SOe=o("DistilBertTokenizerFast"),POe=o(" (DistilBERT model)"),$Oe=l(),Kn=a("li"),QQ=a("strong"),IOe=o("dpr"),jOe=o(" \u2014 "),tB=a("a"),NOe=o("DPRQuestionEncoderTokenizer"),DOe=o(" or "),aB=a("a"),qOe=o("DPRQuestionEncoderTokenizerFast"),GOe=o(" (DPR model)"),OOe=l(),Zn=a("li"),HQ=a("strong"),XOe=o("electra"),zOe=o(" \u2014 "),nB=a("a"),VOe=o("ElectraTokenizer"),WOe=o(" or "),sB=a("a"),QOe=o("ElectraTokenizerFast"),HOe=o(" (ELECTRA model)"),UOe=l(),Eg=a("li"),UQ=a("strong"),JOe=o("flaubert"),YOe=o(" \u2014 "),lB=a("a"),KOe=o("FlaubertTokenizer"),ZOe=o(" (FlauBERT model)"),eXe=l(),es=a("li"),JQ=a("strong"),oXe=o("fnet"),rXe=o(" \u2014 "),iB=a("a"),tXe=o("FNetTokenizer"),aXe=o(" or "),dB=a("a"),nXe=o("FNetTokenizerFast"),sXe=o(" (FNet model)"),lXe=l(),yg=a("li"),YQ=a("strong"),iXe=o("fsmt"),dXe=o(" \u2014 "),cB=a("a"),cXe=o("FSMTTokenizer"),fXe=o(" (FairSeq Machine-Translation model)"),mXe=l(),os=a("li"),KQ=a("strong"),gXe=o("funnel"),hXe=o(" \u2014 "),fB=a("a"),pXe=o("FunnelTokenizer"),_Xe=o(" or "),mB=a("a"),uXe=o("FunnelTokenizerFast"),bXe=o(" (Funnel Transformer model)"),vXe=l(),rs=a("li"),ZQ=a("strong"),TXe=o("gpt2"),FXe=o(" \u2014 "),gB=a("a"),CXe=o("GPT2Tokenizer"),MXe=o(" or "),hB=a("a"),EXe=o("GPT2TokenizerFast"),yXe=o(" (OpenAI GPT-2 model)"),wXe=l(),ts=a("li"),eH=a("strong"),AXe=o("gpt_neo"),LXe=o(" \u2014 "),pB=a("a"),BXe=o("GPT2Tokenizer"),kXe=o(" or "),_B=a("a"),xXe=o("GPT2TokenizerFast"),RXe=o(" (GPT Neo model)"),SXe=l(),as=a("li"),oH=a("strong"),PXe=o("herbert"),$Xe=o(" \u2014 "),uB=a("a"),IXe=o("HerbertTokenizer"),jXe=o(" or "),bB=a("a"),NXe=o("HerbertTokenizerFast"),DXe=o(" (HerBERT model)"),qXe=l(),wg=a("li"),rH=a("strong"),GXe=o("hubert"),OXe=o(" \u2014 "),vB=a("a"),XXe=o("Wav2Vec2CTCTokenizer"),zXe=o(" (Hubert model)"),VXe=l(),ns=a("li"),tH=a("strong"),WXe=o("ibert"),QXe=o(" \u2014 "),TB=a("a"),HXe=o("RobertaTokenizer"),UXe=o(" or "),FB=a("a"),JXe=o("RobertaTokenizerFast"),YXe=o(" (I-BERT model)"),KXe=l(),ss=a("li"),aH=a("strong"),ZXe=o("layoutlm"),eze=o(" \u2014 "),CB=a("a"),oze=o("LayoutLMTokenizer"),rze=o(" or "),MB=a("a"),tze=o("LayoutLMTokenizerFast"),aze=o(" (LayoutLM model)"),nze=l(),ls=a("li"),nH=a("strong"),sze=o("layoutlmv2"),lze=o(" \u2014 "),EB=a("a"),ize=o("LayoutLMv2Tokenizer"),dze=o(" or "),yB=a("a"),cze=o("LayoutLMv2TokenizerFast"),fze=o(" (LayoutLMv2 model)"),mze=l(),is=a("li"),sH=a("strong"),gze=o("layoutxlm"),hze=o(" \u2014 "),wB=a("a"),pze=o("LayoutXLMTokenizer"),_ze=o(" or "),AB=a("a"),uze=o("LayoutXLMTokenizerFast"),bze=o(" (LayoutXLM model)"),vze=l(),ds=a("li"),lH=a("strong"),Tze=o("led"),Fze=o(" \u2014 "),LB=a("a"),Cze=o("LEDTokenizer"),Mze=o(" or "),BB=a("a"),Eze=o("LEDTokenizerFast"),yze=o(" (LED model)"),wze=l(),cs=a("li"),iH=a("strong"),Aze=o("longformer"),Lze=o(" \u2014 "),kB=a("a"),Bze=o("LongformerTokenizer"),kze=o(" or "),xB=a("a"),xze=o("LongformerTokenizerFast"),Rze=o(" (Longformer model)"),Sze=l(),Ag=a("li"),dH=a("strong"),Pze=o("luke"),$ze=o(" \u2014 "),RB=a("a"),Ize=o("LukeTokenizer"),jze=o(" (LUKE model)"),Nze=l(),fs=a("li"),cH=a("strong"),Dze=o("lxmert"),qze=o(" \u2014 "),SB=a("a"),Gze=o("LxmertTokenizer"),Oze=o(" or "),PB=a("a"),Xze=o("LxmertTokenizerFast"),zze=o(" (LXMERT model)"),Vze=l(),Lg=a("li"),fH=a("strong"),Wze=o("m2m_100"),Qze=o(" \u2014 "),$B=a("a"),Hze=o("M2M100Tokenizer"),Uze=o(" (M2M100 model)"),Jze=l(),Bg=a("li"),mH=a("strong"),Yze=o("marian"),Kze=o(" \u2014 "),IB=a("a"),Zze=o("MarianTokenizer"),eVe=o(" (Marian model)"),oVe=l(),ms=a("li"),gH=a("strong"),rVe=o("mbart"),tVe=o(" \u2014 "),jB=a("a"),aVe=o("MBartTokenizer"),nVe=o(" or "),NB=a("a"),sVe=o("MBartTokenizerFast"),lVe=o(" (mBART model)"),iVe=l(),gs=a("li"),hH=a("strong"),dVe=o("mbart50"),cVe=o(" \u2014 "),DB=a("a"),fVe=o("MBart50Tokenizer"),mVe=o(" or "),qB=a("a"),gVe=o("MBart50TokenizerFast"),hVe=o(" (mBART-50 model)"),pVe=l(),kg=a("li"),pH=a("strong"),_Ve=o("mluke"),uVe=o(" \u2014 "),GB=a("a"),bVe=o("MLukeTokenizer"),vVe=o(" (mLUKE model)"),TVe=l(),hs=a("li"),_H=a("strong"),FVe=o("mobilebert"),CVe=o(" \u2014 "),OB=a("a"),MVe=o("MobileBertTokenizer"),EVe=o(" or "),XB=a("a"),yVe=o("MobileBertTokenizerFast"),wVe=o(" (MobileBERT model)"),AVe=l(),ps=a("li"),uH=a("strong"),LVe=o("mpnet"),BVe=o(" \u2014 "),zB=a("a"),kVe=o("MPNetTokenizer"),xVe=o(" or "),VB=a("a"),RVe=o("MPNetTokenizerFast"),SVe=o(" (MPNet model)"),PVe=l(),_s=a("li"),bH=a("strong"),$Ve=o("mt5"),IVe=o(" \u2014 "),WB=a("a"),jVe=o("MT5Tokenizer"),NVe=o(" or "),QB=a("a"),DVe=o("MT5TokenizerFast"),qVe=o(" (mT5 model)"),GVe=l(),us=a("li"),vH=a("strong"),OVe=o("openai-gpt"),XVe=o(" \u2014 "),HB=a("a"),zVe=o("OpenAIGPTTokenizer"),VVe=o(" or "),UB=a("a"),WVe=o("OpenAIGPTTokenizerFast"),QVe=o(" (OpenAI GPT model)"),HVe=l(),bs=a("li"),TH=a("strong"),UVe=o("pegasus"),JVe=o(" \u2014 "),JB=a("a"),YVe=o("PegasusTokenizer"),KVe=o(" or "),YB=a("a"),ZVe=o("PegasusTokenizerFast"),eWe=o(" (Pegasus model)"),oWe=l(),xg=a("li"),FH=a("strong"),rWe=o("perceiver"),tWe=o(" \u2014 "),KB=a("a"),aWe=o("PerceiverTokenizer"),nWe=o(" (Perceiver model)"),sWe=l(),Rg=a("li"),CH=a("strong"),lWe=o("phobert"),iWe=o(" \u2014 "),ZB=a("a"),dWe=o("PhobertTokenizer"),cWe=o(" (PhoBERT model)"),fWe=l(),Sg=a("li"),MH=a("strong"),mWe=o("prophetnet"),gWe=o(" \u2014 "),ek=a("a"),hWe=o("ProphetNetTokenizer"),pWe=o(" (ProphetNet model)"),_We=l(),vs=a("li"),EH=a("strong"),uWe=o("qdqbert"),bWe=o(" \u2014 "),ok=a("a"),vWe=o("BertTokenizer"),TWe=o(" or "),rk=a("a"),FWe=o("BertTokenizerFast"),CWe=o(" (QDQBert model)"),MWe=l(),Pg=a("li"),yH=a("strong"),EWe=o("rag"),yWe=o(" \u2014 "),tk=a("a"),wWe=o("RagTokenizer"),AWe=o(" (RAG model)"),LWe=l(),Ts=a("li"),wH=a("strong"),BWe=o("reformer"),kWe=o(" \u2014 "),ak=a("a"),xWe=o("ReformerTokenizer"),RWe=o(" or "),nk=a("a"),SWe=o("ReformerTokenizerFast"),PWe=o(" (Reformer model)"),$We=l(),Fs=a("li"),AH=a("strong"),IWe=o("rembert"),jWe=o(" \u2014 "),sk=a("a"),NWe=o("RemBertTokenizer"),DWe=o(" or "),lk=a("a"),qWe=o("RemBertTokenizerFast"),GWe=o(" (RemBERT model)"),OWe=l(),Cs=a("li"),LH=a("strong"),XWe=o("retribert"),zWe=o(" \u2014 "),ik=a("a"),VWe=o("RetriBertTokenizer"),WWe=o(" or "),dk=a("a"),QWe=o("RetriBertTokenizerFast"),HWe=o(" (RetriBERT model)"),UWe=l(),Ms=a("li"),BH=a("strong"),JWe=o("roberta"),YWe=o(" \u2014 "),ck=a("a"),KWe=o("RobertaTokenizer"),ZWe=o(" or "),fk=a("a"),eQe=o("RobertaTokenizerFast"),oQe=o(" (RoBERTa model)"),rQe=l(),Es=a("li"),kH=a("strong"),tQe=o("roformer"),aQe=o(" \u2014 "),mk=a("a"),nQe=o("RoFormerTokenizer"),sQe=o(" or "),gk=a("a"),lQe=o("RoFormerTokenizerFast"),iQe=o(" (RoFormer model)"),dQe=l(),$g=a("li"),xH=a("strong"),cQe=o("speech_to_text"),fQe=o(" \u2014 "),hk=a("a"),mQe=o("Speech2TextTokenizer"),gQe=o(" (Speech2Text model)"),hQe=l(),Ig=a("li"),RH=a("strong"),pQe=o("speech_to_text_2"),_Qe=o(" \u2014 "),pk=a("a"),uQe=o("Speech2Text2Tokenizer"),bQe=o(" (Speech2Text2 model)"),vQe=l(),ys=a("li"),SH=a("strong"),TQe=o("splinter"),FQe=o(" \u2014 "),_k=a("a"),CQe=o("SplinterTokenizer"),MQe=o(" or "),uk=a("a"),EQe=o("SplinterTokenizerFast"),yQe=o(" (Splinter model)"),wQe=l(),ws=a("li"),PH=a("strong"),AQe=o("squeezebert"),LQe=o(" \u2014 "),bk=a("a"),BQe=o("SqueezeBertTokenizer"),kQe=o(" or "),vk=a("a"),xQe=o("SqueezeBertTokenizerFast"),RQe=o(" (SqueezeBERT model)"),SQe=l(),As=a("li"),$H=a("strong"),PQe=o("t5"),$Qe=o(" \u2014 "),Tk=a("a"),IQe=o("T5Tokenizer"),jQe=o(" or "),Fk=a("a"),NQe=o("T5TokenizerFast"),DQe=o(" (T5 model)"),qQe=l(),jg=a("li"),IH=a("strong"),GQe=o("tapas"),OQe=o(" \u2014 "),Ck=a("a"),XQe=o("TapasTokenizer"),zQe=o(" (TAPAS model)"),VQe=l(),Ng=a("li"),jH=a("strong"),WQe=o("transfo-xl"),QQe=o(" \u2014 "),Mk=a("a"),HQe=o("TransfoXLTokenizer"),UQe=o(" (Transformer-XL model)"),JQe=l(),Dg=a("li"),NH=a("strong"),YQe=o("wav2vec2"),KQe=o(" \u2014 "),Ek=a("a"),ZQe=o("Wav2Vec2CTCTokenizer"),eHe=o(" (Wav2Vec2 model)"),oHe=l(),qg=a("li"),DH=a("strong"),rHe=o("wav2vec2_phoneme"),tHe=o(" \u2014 "),yk=a("a"),aHe=o("Wav2Vec2PhonemeCTCTokenizer"),nHe=o(" (Wav2Vec2Phoneme model)"),sHe=l(),Ls=a("li"),qH=a("strong"),lHe=o("xglm"),iHe=o(" \u2014 "),wk=a("a"),dHe=o("XGLMTokenizer"),cHe=o(" or "),Ak=a("a"),fHe=o("XGLMTokenizerFast"),mHe=o(" (XGLM model)"),gHe=l(),Gg=a("li"),GH=a("strong"),hHe=o("xlm"),pHe=o(" \u2014 "),Lk=a("a"),_He=o("XLMTokenizer"),uHe=o(" (XLM model)"),bHe=l(),Og=a("li"),OH=a("strong"),vHe=o("xlm-prophetnet"),THe=o(" \u2014 "),Bk=a("a"),FHe=o("XLMProphetNetTokenizer"),CHe=o(" (XLMProphetNet model)"),MHe=l(),Bs=a("li"),XH=a("strong"),EHe=o("xlm-roberta"),yHe=o(" \u2014 "),kk=a("a"),wHe=o("XLMRobertaTokenizer"),AHe=o(" or "),xk=a("a"),LHe=o("XLMRobertaTokenizerFast"),BHe=o(" (XLM-RoBERTa model)"),kHe=l(),ks=a("li"),zH=a("strong"),xHe=o("xlnet"),RHe=o(" \u2014 "),Rk=a("a"),SHe=o("XLNetTokenizer"),PHe=o(" or "),Sk=a("a"),$He=o("XLNetTokenizerFast"),IHe=o(" (XLNet model)"),jHe=l(),VH=a("p"),NHe=o("Examples:"),DHe=l(),f(g4.$$.fragment),qHe=l(),Xg=a("div"),f(h4.$$.fragment),GHe=l(),WH=a("p"),OHe=o("Register a new tokenizer in this mapping."),O0e=l(),ji=a("h2"),zg=a("a"),QH=a("span"),f(p4.$$.fragment),XHe=l(),HH=a("span"),zHe=o("AutoFeatureExtractor"),X0e=l(),Xo=a("div"),f(_4.$$.fragment),VHe=l(),u4=a("p"),WHe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Pk=a("a"),QHe=o("AutoFeatureExtractor.from_pretrained()"),HHe=o(" class method."),UHe=l(),b4=a("p"),JHe=o("This class cannot be instantiated directly using "),UH=a("code"),YHe=o("__init__()"),KHe=o(" (throws an error)."),ZHe=l(),Le=a("div"),f(v4.$$.fragment),eUe=l(),JH=a("p"),oUe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),rUe=l(),Na=a("p"),tUe=o("The feature extractor class to instantiate is selected based on the "),YH=a("code"),aUe=o("model_type"),nUe=o(` property of the config object
(either passed as an argument or loaded from `),KH=a("code"),sUe=o("pretrained_model_name_or_path"),lUe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ZH=a("code"),iUe=o("pretrained_model_name_or_path"),dUe=o(":"),cUe=l(),ne=a("ul"),Vg=a("li"),eU=a("strong"),fUe=o("beit"),mUe=o(" \u2014 "),$k=a("a"),gUe=o("BeitFeatureExtractor"),hUe=o(" (BEiT model)"),pUe=l(),Wg=a("li"),oU=a("strong"),_Ue=o("clip"),uUe=o(" \u2014 "),Ik=a("a"),bUe=o("CLIPFeatureExtractor"),vUe=o(" (CLIP model)"),TUe=l(),Qg=a("li"),rU=a("strong"),FUe=o("convnext"),CUe=o(" \u2014 "),jk=a("a"),MUe=o("ConvNextFeatureExtractor"),EUe=o(" (ConvNext model)"),yUe=l(),Hg=a("li"),tU=a("strong"),wUe=o("deit"),AUe=o(" \u2014 "),Nk=a("a"),LUe=o("DeiTFeatureExtractor"),BUe=o(" (DeiT model)"),kUe=l(),Ug=a("li"),aU=a("strong"),xUe=o("detr"),RUe=o(" \u2014 "),Dk=a("a"),SUe=o("DetrFeatureExtractor"),PUe=o(" (DETR model)"),$Ue=l(),Jg=a("li"),nU=a("strong"),IUe=o("hubert"),jUe=o(" \u2014 "),qk=a("a"),NUe=o("Wav2Vec2FeatureExtractor"),DUe=o(" (Hubert model)"),qUe=l(),Yg=a("li"),sU=a("strong"),GUe=o("layoutlmv2"),OUe=o(" \u2014 "),Gk=a("a"),XUe=o("LayoutLMv2FeatureExtractor"),zUe=o(" (LayoutLMv2 model)"),VUe=l(),Kg=a("li"),lU=a("strong"),WUe=o("perceiver"),QUe=o(" \u2014 "),Ok=a("a"),HUe=o("PerceiverFeatureExtractor"),UUe=o(" (Perceiver model)"),JUe=l(),Zg=a("li"),iU=a("strong"),YUe=o("poolformer"),KUe=o(" \u2014 "),Xk=a("a"),ZUe=o("PoolFormerFeatureExtractor"),eJe=o(" (PoolFormer model)"),oJe=l(),eh=a("li"),dU=a("strong"),rJe=o("segformer"),tJe=o(" \u2014 "),zk=a("a"),aJe=o("SegformerFeatureExtractor"),nJe=o(" (SegFormer model)"),sJe=l(),oh=a("li"),cU=a("strong"),lJe=o("speech_to_text"),iJe=o(" \u2014 "),Vk=a("a"),dJe=o("Speech2TextFeatureExtractor"),cJe=o(" (Speech2Text model)"),fJe=l(),rh=a("li"),fU=a("strong"),mJe=o("swin"),gJe=o(" \u2014 "),Wk=a("a"),hJe=o("ViTFeatureExtractor"),pJe=o(" (Swin model)"),_Je=l(),th=a("li"),mU=a("strong"),uJe=o("vit"),bJe=o(" \u2014 "),Qk=a("a"),vJe=o("ViTFeatureExtractor"),TJe=o(" (ViT model)"),FJe=l(),ah=a("li"),gU=a("strong"),CJe=o("vit_mae"),MJe=o(" \u2014 "),Hk=a("a"),EJe=o("ViTFeatureExtractor"),yJe=o(" (ViTMAE model)"),wJe=l(),nh=a("li"),hU=a("strong"),AJe=o("wav2vec2"),LJe=o(" \u2014 "),Uk=a("a"),BJe=o("Wav2Vec2FeatureExtractor"),kJe=o(" (Wav2Vec2 model)"),xJe=l(),f(sh.$$.fragment),RJe=l(),pU=a("p"),SJe=o("Examples:"),PJe=l(),f(T4.$$.fragment),$Je=l(),lh=a("div"),f(F4.$$.fragment),IJe=l(),_U=a("p"),jJe=o("Register a new feature extractor for this class."),z0e=l(),Ni=a("h2"),ih=a("a"),uU=a("span"),f(C4.$$.fragment),NJe=l(),bU=a("span"),DJe=o("AutoProcessor"),V0e=l(),zo=a("div"),f(M4.$$.fragment),qJe=l(),E4=a("p"),GJe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Jk=a("a"),OJe=o("AutoProcessor.from_pretrained()"),XJe=o(" class method."),zJe=l(),y4=a("p"),VJe=o("This class cannot be instantiated directly using "),vU=a("code"),WJe=o("__init__()"),QJe=o(" (throws an error)."),HJe=l(),Be=a("div"),f(w4.$$.fragment),UJe=l(),TU=a("p"),JJe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),YJe=l(),Di=a("p"),KJe=o("The processor class to instantiate is selected based on the "),FU=a("code"),ZJe=o("model_type"),eYe=o(` property of the config object (either
passed as an argument or loaded from `),CU=a("code"),oYe=o("pretrained_model_name_or_path"),rYe=o(" if possible):"),tYe=l(),we=a("ul"),dh=a("li"),MU=a("strong"),aYe=o("clip"),nYe=o(" \u2014 "),Yk=a("a"),sYe=o("CLIPProcessor"),lYe=o(" (CLIP model)"),iYe=l(),ch=a("li"),EU=a("strong"),dYe=o("layoutlmv2"),cYe=o(" \u2014 "),Kk=a("a"),fYe=o("LayoutLMv2Processor"),mYe=o(" (LayoutLMv2 model)"),gYe=l(),fh=a("li"),yU=a("strong"),hYe=o("layoutxlm"),pYe=o(" \u2014 "),Zk=a("a"),_Ye=o("LayoutXLMProcessor"),uYe=o(" (LayoutXLM model)"),bYe=l(),mh=a("li"),wU=a("strong"),vYe=o("speech_to_text"),TYe=o(" \u2014 "),ex=a("a"),FYe=o("Speech2TextProcessor"),CYe=o(" (Speech2Text model)"),MYe=l(),gh=a("li"),AU=a("strong"),EYe=o("speech_to_text_2"),yYe=o(" \u2014 "),ox=a("a"),wYe=o("Speech2Text2Processor"),AYe=o(" (Speech2Text2 model)"),LYe=l(),hh=a("li"),LU=a("strong"),BYe=o("trocr"),kYe=o(" \u2014 "),rx=a("a"),xYe=o("TrOCRProcessor"),RYe=o(" (TrOCR model)"),SYe=l(),ph=a("li"),BU=a("strong"),PYe=o("vision-text-dual-encoder"),$Ye=o(" \u2014 "),tx=a("a"),IYe=o("VisionTextDualEncoderProcessor"),jYe=o(" (VisionTextDualEncoder model)"),NYe=l(),_h=a("li"),kU=a("strong"),DYe=o("wav2vec2"),qYe=o(" \u2014 "),ax=a("a"),GYe=o("Wav2Vec2Processor"),OYe=o(" (Wav2Vec2 model)"),XYe=l(),f(uh.$$.fragment),zYe=l(),xU=a("p"),VYe=o("Examples:"),WYe=l(),f(A4.$$.fragment),QYe=l(),bh=a("div"),f(L4.$$.fragment),HYe=l(),RU=a("p"),UYe=o("Register a new processor for this class."),W0e=l(),qi=a("h2"),vh=a("a"),SU=a("span"),f(B4.$$.fragment),JYe=l(),PU=a("span"),YYe=o("AutoModel"),Q0e=l(),Vo=a("div"),f(k4.$$.fragment),KYe=l(),Gi=a("p"),ZYe=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$U=a("code"),eKe=o("from_pretrained()"),oKe=o("class method or the "),IU=a("code"),rKe=o("from_config()"),tKe=o(`class
method.`),aKe=l(),x4=a("p"),nKe=o("This class cannot be instantiated directly using "),jU=a("code"),sKe=o("__init__()"),lKe=o(" (throws an error)."),iKe=l(),Nr=a("div"),f(R4.$$.fragment),dKe=l(),NU=a("p"),cKe=o("Instantiates one of the base model classes of the library from a configuration."),fKe=l(),Oi=a("p"),mKe=o(`Note:
Loading a model from its configuration file does `),DU=a("strong"),gKe=o("not"),hKe=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("code"),pKe=o("from_pretrained()"),_Ke=o("to load the model weights."),uKe=l(),GU=a("p"),bKe=o("Examples:"),vKe=l(),f(S4.$$.fragment),TKe=l(),ke=a("div"),f(P4.$$.fragment),FKe=l(),OU=a("p"),CKe=o("Instantiate one of the base model classes of the library from a pretrained model."),MKe=l(),Da=a("p"),EKe=o("The model class to instantiate is selected based on the "),XU=a("code"),yKe=o("model_type"),wKe=o(` property of the config object (either
passed as an argument or loaded from `),zU=a("code"),AKe=o("pretrained_model_name_or_path"),LKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VU=a("code"),BKe=o("pretrained_model_name_or_path"),kKe=o(":"),xKe=l(),F=a("ul"),Th=a("li"),WU=a("strong"),RKe=o("albert"),SKe=o(" \u2014 "),nx=a("a"),PKe=o("AlbertModel"),$Ke=o(" (ALBERT model)"),IKe=l(),Fh=a("li"),QU=a("strong"),jKe=o("bart"),NKe=o(" \u2014 "),sx=a("a"),DKe=o("BartModel"),qKe=o(" (BART model)"),GKe=l(),Ch=a("li"),HU=a("strong"),OKe=o("beit"),XKe=o(" \u2014 "),lx=a("a"),zKe=o("BeitModel"),VKe=o(" (BEiT model)"),WKe=l(),Mh=a("li"),UU=a("strong"),QKe=o("bert"),HKe=o(" \u2014 "),ix=a("a"),UKe=o("BertModel"),JKe=o(" (BERT model)"),YKe=l(),Eh=a("li"),JU=a("strong"),KKe=o("bert-generation"),ZKe=o(" \u2014 "),dx=a("a"),eZe=o("BertGenerationEncoder"),oZe=o(" (Bert Generation model)"),rZe=l(),yh=a("li"),YU=a("strong"),tZe=o("big_bird"),aZe=o(" \u2014 "),cx=a("a"),nZe=o("BigBirdModel"),sZe=o(" (BigBird model)"),lZe=l(),wh=a("li"),KU=a("strong"),iZe=o("bigbird_pegasus"),dZe=o(" \u2014 "),fx=a("a"),cZe=o("BigBirdPegasusModel"),fZe=o(" (BigBirdPegasus model)"),mZe=l(),Ah=a("li"),ZU=a("strong"),gZe=o("blenderbot"),hZe=o(" \u2014 "),mx=a("a"),pZe=o("BlenderbotModel"),_Ze=o(" (Blenderbot model)"),uZe=l(),Lh=a("li"),eJ=a("strong"),bZe=o("blenderbot-small"),vZe=o(" \u2014 "),gx=a("a"),TZe=o("BlenderbotSmallModel"),FZe=o(" (BlenderbotSmall model)"),CZe=l(),Bh=a("li"),oJ=a("strong"),MZe=o("camembert"),EZe=o(" \u2014 "),hx=a("a"),yZe=o("CamembertModel"),wZe=o(" (CamemBERT model)"),AZe=l(),kh=a("li"),rJ=a("strong"),LZe=o("canine"),BZe=o(" \u2014 "),px=a("a"),kZe=o("CanineModel"),xZe=o(" (Canine model)"),RZe=l(),xh=a("li"),tJ=a("strong"),SZe=o("clip"),PZe=o(" \u2014 "),_x=a("a"),$Ze=o("CLIPModel"),IZe=o(" (CLIP model)"),jZe=l(),Rh=a("li"),aJ=a("strong"),NZe=o("convbert"),DZe=o(" \u2014 "),ux=a("a"),qZe=o("ConvBertModel"),GZe=o(" (ConvBERT model)"),OZe=l(),Sh=a("li"),nJ=a("strong"),XZe=o("convnext"),zZe=o(" \u2014 "),bx=a("a"),VZe=o("ConvNextModel"),WZe=o(" (ConvNext model)"),QZe=l(),Ph=a("li"),sJ=a("strong"),HZe=o("ctrl"),UZe=o(" \u2014 "),vx=a("a"),JZe=o("CTRLModel"),YZe=o(" (CTRL model)"),KZe=l(),$h=a("li"),lJ=a("strong"),ZZe=o("deberta"),eeo=o(" \u2014 "),Tx=a("a"),oeo=o("DebertaModel"),reo=o(" (DeBERTa model)"),teo=l(),Ih=a("li"),iJ=a("strong"),aeo=o("deberta-v2"),neo=o(" \u2014 "),Fx=a("a"),seo=o("DebertaV2Model"),leo=o(" (DeBERTa-v2 model)"),ieo=l(),jh=a("li"),dJ=a("strong"),deo=o("deit"),ceo=o(" \u2014 "),Cx=a("a"),feo=o("DeiTModel"),meo=o(" (DeiT model)"),geo=l(),Nh=a("li"),cJ=a("strong"),heo=o("detr"),peo=o(" \u2014 "),Mx=a("a"),_eo=o("DetrModel"),ueo=o(" (DETR model)"),beo=l(),Dh=a("li"),fJ=a("strong"),veo=o("distilbert"),Teo=o(" \u2014 "),Ex=a("a"),Feo=o("DistilBertModel"),Ceo=o(" (DistilBERT model)"),Meo=l(),qh=a("li"),mJ=a("strong"),Eeo=o("dpr"),yeo=o(" \u2014 "),yx=a("a"),weo=o("DPRQuestionEncoder"),Aeo=o(" (DPR model)"),Leo=l(),Gh=a("li"),gJ=a("strong"),Beo=o("electra"),keo=o(" \u2014 "),wx=a("a"),xeo=o("ElectraModel"),Reo=o(" (ELECTRA model)"),Seo=l(),Oh=a("li"),hJ=a("strong"),Peo=o("flaubert"),$eo=o(" \u2014 "),Ax=a("a"),Ieo=o("FlaubertModel"),jeo=o(" (FlauBERT model)"),Neo=l(),Xh=a("li"),pJ=a("strong"),Deo=o("fnet"),qeo=o(" \u2014 "),Lx=a("a"),Geo=o("FNetModel"),Oeo=o(" (FNet model)"),Xeo=l(),zh=a("li"),_J=a("strong"),zeo=o("fsmt"),Veo=o(" \u2014 "),Bx=a("a"),Weo=o("FSMTModel"),Qeo=o(" (FairSeq Machine-Translation model)"),Heo=l(),xs=a("li"),uJ=a("strong"),Ueo=o("funnel"),Jeo=o(" \u2014 "),kx=a("a"),Yeo=o("FunnelModel"),Keo=o(" or "),xx=a("a"),Zeo=o("FunnelBaseModel"),eoo=o(" (Funnel Transformer model)"),ooo=l(),Vh=a("li"),bJ=a("strong"),roo=o("gpt2"),too=o(" \u2014 "),Rx=a("a"),aoo=o("GPT2Model"),noo=o(" (OpenAI GPT-2 model)"),soo=l(),Wh=a("li"),vJ=a("strong"),loo=o("gpt_neo"),ioo=o(" \u2014 "),Sx=a("a"),doo=o("GPTNeoModel"),coo=o(" (GPT Neo model)"),foo=l(),Qh=a("li"),TJ=a("strong"),moo=o("gptj"),goo=o(" \u2014 "),Px=a("a"),hoo=o("GPTJModel"),poo=o(" (GPT-J model)"),_oo=l(),Hh=a("li"),FJ=a("strong"),uoo=o("hubert"),boo=o(" \u2014 "),$x=a("a"),voo=o("HubertModel"),Too=o(" (Hubert model)"),Foo=l(),Uh=a("li"),CJ=a("strong"),Coo=o("ibert"),Moo=o(" \u2014 "),Ix=a("a"),Eoo=o("IBertModel"),yoo=o(" (I-BERT model)"),woo=l(),Jh=a("li"),MJ=a("strong"),Aoo=o("imagegpt"),Loo=o(" \u2014 "),jx=a("a"),Boo=o("ImageGPTModel"),koo=o(" (ImageGPT model)"),xoo=l(),Yh=a("li"),EJ=a("strong"),Roo=o("layoutlm"),Soo=o(" \u2014 "),Nx=a("a"),Poo=o("LayoutLMModel"),$oo=o(" (LayoutLM model)"),Ioo=l(),Kh=a("li"),yJ=a("strong"),joo=o("layoutlmv2"),Noo=o(" \u2014 "),Dx=a("a"),Doo=o("LayoutLMv2Model"),qoo=o(" (LayoutLMv2 model)"),Goo=l(),Zh=a("li"),wJ=a("strong"),Ooo=o("led"),Xoo=o(" \u2014 "),qx=a("a"),zoo=o("LEDModel"),Voo=o(" (LED model)"),Woo=l(),ep=a("li"),AJ=a("strong"),Qoo=o("longformer"),Hoo=o(" \u2014 "),Gx=a("a"),Uoo=o("LongformerModel"),Joo=o(" (Longformer model)"),Yoo=l(),op=a("li"),LJ=a("strong"),Koo=o("luke"),Zoo=o(" \u2014 "),Ox=a("a"),ero=o("LukeModel"),oro=o(" (LUKE model)"),rro=l(),rp=a("li"),BJ=a("strong"),tro=o("lxmert"),aro=o(" \u2014 "),Xx=a("a"),nro=o("LxmertModel"),sro=o(" (LXMERT model)"),lro=l(),tp=a("li"),kJ=a("strong"),iro=o("m2m_100"),dro=o(" \u2014 "),zx=a("a"),cro=o("M2M100Model"),fro=o(" (M2M100 model)"),mro=l(),ap=a("li"),xJ=a("strong"),gro=o("marian"),hro=o(" \u2014 "),Vx=a("a"),pro=o("MarianModel"),_ro=o(" (Marian model)"),uro=l(),np=a("li"),RJ=a("strong"),bro=o("mbart"),vro=o(" \u2014 "),Wx=a("a"),Tro=o("MBartModel"),Fro=o(" (mBART model)"),Cro=l(),sp=a("li"),SJ=a("strong"),Mro=o("megatron-bert"),Ero=o(" \u2014 "),Qx=a("a"),yro=o("MegatronBertModel"),wro=o(" (MegatronBert model)"),Aro=l(),lp=a("li"),PJ=a("strong"),Lro=o("mobilebert"),Bro=o(" \u2014 "),Hx=a("a"),kro=o("MobileBertModel"),xro=o(" (MobileBERT model)"),Rro=l(),ip=a("li"),$J=a("strong"),Sro=o("mpnet"),Pro=o(" \u2014 "),Ux=a("a"),$ro=o("MPNetModel"),Iro=o(" (MPNet model)"),jro=l(),dp=a("li"),IJ=a("strong"),Nro=o("mt5"),Dro=o(" \u2014 "),Jx=a("a"),qro=o("MT5Model"),Gro=o(" (mT5 model)"),Oro=l(),cp=a("li"),jJ=a("strong"),Xro=o("nystromformer"),zro=o(" \u2014 "),Yx=a("a"),Vro=o("NystromformerModel"),Wro=o(" (Nystromformer model)"),Qro=l(),fp=a("li"),NJ=a("strong"),Hro=o("openai-gpt"),Uro=o(" \u2014 "),Kx=a("a"),Jro=o("OpenAIGPTModel"),Yro=o(" (OpenAI GPT model)"),Kro=l(),mp=a("li"),DJ=a("strong"),Zro=o("pegasus"),eto=o(" \u2014 "),Zx=a("a"),oto=o("PegasusModel"),rto=o(" (Pegasus model)"),tto=l(),gp=a("li"),qJ=a("strong"),ato=o("perceiver"),nto=o(" \u2014 "),eR=a("a"),sto=o("PerceiverModel"),lto=o(" (Perceiver model)"),ito=l(),hp=a("li"),GJ=a("strong"),dto=o("poolformer"),cto=o(" \u2014 "),oR=a("a"),fto=o("PoolFormerModel"),mto=o(" (PoolFormer model)"),gto=l(),pp=a("li"),OJ=a("strong"),hto=o("prophetnet"),pto=o(" \u2014 "),rR=a("a"),_to=o("ProphetNetModel"),uto=o(" (ProphetNet model)"),bto=l(),_p=a("li"),XJ=a("strong"),vto=o("qdqbert"),Tto=o(" \u2014 "),tR=a("a"),Fto=o("QDQBertModel"),Cto=o(" (QDQBert model)"),Mto=l(),up=a("li"),zJ=a("strong"),Eto=o("reformer"),yto=o(" \u2014 "),aR=a("a"),wto=o("ReformerModel"),Ato=o(" (Reformer model)"),Lto=l(),bp=a("li"),VJ=a("strong"),Bto=o("rembert"),kto=o(" \u2014 "),nR=a("a"),xto=o("RemBertModel"),Rto=o(" (RemBERT model)"),Sto=l(),vp=a("li"),WJ=a("strong"),Pto=o("retribert"),$to=o(" \u2014 "),sR=a("a"),Ito=o("RetriBertModel"),jto=o(" (RetriBERT model)"),Nto=l(),Tp=a("li"),QJ=a("strong"),Dto=o("roberta"),qto=o(" \u2014 "),lR=a("a"),Gto=o("RobertaModel"),Oto=o(" (RoBERTa model)"),Xto=l(),Fp=a("li"),HJ=a("strong"),zto=o("roformer"),Vto=o(" \u2014 "),iR=a("a"),Wto=o("RoFormerModel"),Qto=o(" (RoFormer model)"),Hto=l(),Cp=a("li"),UJ=a("strong"),Uto=o("segformer"),Jto=o(" \u2014 "),dR=a("a"),Yto=o("SegformerModel"),Kto=o(" (SegFormer model)"),Zto=l(),Mp=a("li"),JJ=a("strong"),eao=o("sew"),oao=o(" \u2014 "),cR=a("a"),rao=o("SEWModel"),tao=o(" (SEW model)"),aao=l(),Ep=a("li"),YJ=a("strong"),nao=o("sew-d"),sao=o(" \u2014 "),fR=a("a"),lao=o("SEWDModel"),iao=o(" (SEW-D model)"),dao=l(),yp=a("li"),KJ=a("strong"),cao=o("speech_to_text"),fao=o(" \u2014 "),mR=a("a"),mao=o("Speech2TextModel"),gao=o(" (Speech2Text model)"),hao=l(),wp=a("li"),ZJ=a("strong"),pao=o("splinter"),_ao=o(" \u2014 "),gR=a("a"),uao=o("SplinterModel"),bao=o(" (Splinter model)"),vao=l(),Ap=a("li"),eY=a("strong"),Tao=o("squeezebert"),Fao=o(" \u2014 "),hR=a("a"),Cao=o("SqueezeBertModel"),Mao=o(" (SqueezeBERT model)"),Eao=l(),Lp=a("li"),oY=a("strong"),yao=o("swin"),wao=o(" \u2014 "),pR=a("a"),Aao=o("SwinModel"),Lao=o(" (Swin model)"),Bao=l(),Bp=a("li"),rY=a("strong"),kao=o("t5"),xao=o(" \u2014 "),_R=a("a"),Rao=o("T5Model"),Sao=o(" (T5 model)"),Pao=l(),kp=a("li"),tY=a("strong"),$ao=o("tapas"),Iao=o(" \u2014 "),uR=a("a"),jao=o("TapasModel"),Nao=o(" (TAPAS model)"),Dao=l(),xp=a("li"),aY=a("strong"),qao=o("transfo-xl"),Gao=o(" \u2014 "),bR=a("a"),Oao=o("TransfoXLModel"),Xao=o(" (Transformer-XL model)"),zao=l(),Rp=a("li"),nY=a("strong"),Vao=o("unispeech"),Wao=o(" \u2014 "),vR=a("a"),Qao=o("UniSpeechModel"),Hao=o(" (UniSpeech model)"),Uao=l(),Sp=a("li"),sY=a("strong"),Jao=o("unispeech-sat"),Yao=o(" \u2014 "),TR=a("a"),Kao=o("UniSpeechSatModel"),Zao=o(" (UniSpeechSat model)"),eno=l(),Pp=a("li"),lY=a("strong"),ono=o("vilt"),rno=o(" \u2014 "),FR=a("a"),tno=o("ViltModel"),ano=o(" (ViLT model)"),nno=l(),$p=a("li"),iY=a("strong"),sno=o("vision-text-dual-encoder"),lno=o(" \u2014 "),CR=a("a"),ino=o("VisionTextDualEncoderModel"),dno=o(" (VisionTextDualEncoder model)"),cno=l(),Ip=a("li"),dY=a("strong"),fno=o("visual_bert"),mno=o(" \u2014 "),MR=a("a"),gno=o("VisualBertModel"),hno=o(" (VisualBert model)"),pno=l(),jp=a("li"),cY=a("strong"),_no=o("vit"),uno=o(" \u2014 "),ER=a("a"),bno=o("ViTModel"),vno=o(" (ViT model)"),Tno=l(),Np=a("li"),fY=a("strong"),Fno=o("vit_mae"),Cno=o(" \u2014 "),yR=a("a"),Mno=o("ViTMAEModel"),Eno=o(" (ViTMAE model)"),yno=l(),Dp=a("li"),mY=a("strong"),wno=o("wav2vec2"),Ano=o(" \u2014 "),wR=a("a"),Lno=o("Wav2Vec2Model"),Bno=o(" (Wav2Vec2 model)"),kno=l(),qp=a("li"),gY=a("strong"),xno=o("wavlm"),Rno=o(" \u2014 "),AR=a("a"),Sno=o("WavLMModel"),Pno=o(" (WavLM model)"),$no=l(),Gp=a("li"),hY=a("strong"),Ino=o("xglm"),jno=o(" \u2014 "),LR=a("a"),Nno=o("XGLMModel"),Dno=o(" (XGLM model)"),qno=l(),Op=a("li"),pY=a("strong"),Gno=o("xlm"),Ono=o(" \u2014 "),BR=a("a"),Xno=o("XLMModel"),zno=o(" (XLM model)"),Vno=l(),Xp=a("li"),_Y=a("strong"),Wno=o("xlm-prophetnet"),Qno=o(" \u2014 "),kR=a("a"),Hno=o("XLMProphetNetModel"),Uno=o(" (XLMProphetNet model)"),Jno=l(),zp=a("li"),uY=a("strong"),Yno=o("xlm-roberta"),Kno=o(" \u2014 "),xR=a("a"),Zno=o("XLMRobertaModel"),eso=o(" (XLM-RoBERTa model)"),oso=l(),Vp=a("li"),bY=a("strong"),rso=o("xlm-roberta-xl"),tso=o(" \u2014 "),RR=a("a"),aso=o("XLMRobertaXLModel"),nso=o(" (XLM-RoBERTa-XL model)"),sso=l(),Wp=a("li"),vY=a("strong"),lso=o("xlnet"),iso=o(" \u2014 "),SR=a("a"),dso=o("XLNetModel"),cso=o(" (XLNet model)"),fso=l(),Qp=a("li"),TY=a("strong"),mso=o("yoso"),gso=o(" \u2014 "),PR=a("a"),hso=o("YosoModel"),pso=o(" (YOSO model)"),_so=l(),Hp=a("p"),uso=o("The model is set in evaluation mode by default using "),FY=a("code"),bso=o("model.eval()"),vso=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CY=a("code"),Tso=o("model.train()"),Fso=l(),MY=a("p"),Cso=o("Examples:"),Mso=l(),f($4.$$.fragment),H0e=l(),Xi=a("h2"),Up=a("a"),EY=a("span"),f(I4.$$.fragment),Eso=l(),yY=a("span"),yso=o("AutoModelForPreTraining"),U0e=l(),Wo=a("div"),f(j4.$$.fragment),wso=l(),zi=a("p"),Aso=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wY=a("code"),Lso=o("from_pretrained()"),Bso=o("class method or the "),AY=a("code"),kso=o("from_config()"),xso=o(`class
method.`),Rso=l(),N4=a("p"),Sso=o("This class cannot be instantiated directly using "),LY=a("code"),Pso=o("__init__()"),$so=o(" (throws an error)."),Iso=l(),Dr=a("div"),f(D4.$$.fragment),jso=l(),BY=a("p"),Nso=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Dso=l(),Vi=a("p"),qso=o(`Note:
Loading a model from its configuration file does `),kY=a("strong"),Gso=o("not"),Oso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("code"),Xso=o("from_pretrained()"),zso=o("to load the model weights."),Vso=l(),RY=a("p"),Wso=o("Examples:"),Qso=l(),f(q4.$$.fragment),Hso=l(),xe=a("div"),f(G4.$$.fragment),Uso=l(),SY=a("p"),Jso=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Yso=l(),qa=a("p"),Kso=o("The model class to instantiate is selected based on the "),PY=a("code"),Zso=o("model_type"),elo=o(` property of the config object (either
passed as an argument or loaded from `),$Y=a("code"),olo=o("pretrained_model_name_or_path"),rlo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IY=a("code"),tlo=o("pretrained_model_name_or_path"),alo=o(":"),nlo=l(),x=a("ul"),Jp=a("li"),jY=a("strong"),slo=o("albert"),llo=o(" \u2014 "),$R=a("a"),ilo=o("AlbertForPreTraining"),dlo=o(" (ALBERT model)"),clo=l(),Yp=a("li"),NY=a("strong"),flo=o("bart"),mlo=o(" \u2014 "),IR=a("a"),glo=o("BartForConditionalGeneration"),hlo=o(" (BART model)"),plo=l(),Kp=a("li"),DY=a("strong"),_lo=o("bert"),ulo=o(" \u2014 "),jR=a("a"),blo=o("BertForPreTraining"),vlo=o(" (BERT model)"),Tlo=l(),Zp=a("li"),qY=a("strong"),Flo=o("big_bird"),Clo=o(" \u2014 "),NR=a("a"),Mlo=o("BigBirdForPreTraining"),Elo=o(" (BigBird model)"),ylo=l(),e_=a("li"),GY=a("strong"),wlo=o("camembert"),Alo=o(" \u2014 "),DR=a("a"),Llo=o("CamembertForMaskedLM"),Blo=o(" (CamemBERT model)"),klo=l(),o_=a("li"),OY=a("strong"),xlo=o("ctrl"),Rlo=o(" \u2014 "),qR=a("a"),Slo=o("CTRLLMHeadModel"),Plo=o(" (CTRL model)"),$lo=l(),r_=a("li"),XY=a("strong"),Ilo=o("deberta"),jlo=o(" \u2014 "),GR=a("a"),Nlo=o("DebertaForMaskedLM"),Dlo=o(" (DeBERTa model)"),qlo=l(),t_=a("li"),zY=a("strong"),Glo=o("deberta-v2"),Olo=o(" \u2014 "),OR=a("a"),Xlo=o("DebertaV2ForMaskedLM"),zlo=o(" (DeBERTa-v2 model)"),Vlo=l(),a_=a("li"),VY=a("strong"),Wlo=o("distilbert"),Qlo=o(" \u2014 "),XR=a("a"),Hlo=o("DistilBertForMaskedLM"),Ulo=o(" (DistilBERT model)"),Jlo=l(),n_=a("li"),WY=a("strong"),Ylo=o("electra"),Klo=o(" \u2014 "),zR=a("a"),Zlo=o("ElectraForPreTraining"),eio=o(" (ELECTRA model)"),oio=l(),s_=a("li"),QY=a("strong"),rio=o("flaubert"),tio=o(" \u2014 "),VR=a("a"),aio=o("FlaubertWithLMHeadModel"),nio=o(" (FlauBERT model)"),sio=l(),l_=a("li"),HY=a("strong"),lio=o("fnet"),iio=o(" \u2014 "),WR=a("a"),dio=o("FNetForPreTraining"),cio=o(" (FNet model)"),fio=l(),i_=a("li"),UY=a("strong"),mio=o("fsmt"),gio=o(" \u2014 "),QR=a("a"),hio=o("FSMTForConditionalGeneration"),pio=o(" (FairSeq Machine-Translation model)"),_io=l(),d_=a("li"),JY=a("strong"),uio=o("funnel"),bio=o(" \u2014 "),HR=a("a"),vio=o("FunnelForPreTraining"),Tio=o(" (Funnel Transformer model)"),Fio=l(),c_=a("li"),YY=a("strong"),Cio=o("gpt2"),Mio=o(" \u2014 "),UR=a("a"),Eio=o("GPT2LMHeadModel"),yio=o(" (OpenAI GPT-2 model)"),wio=l(),f_=a("li"),KY=a("strong"),Aio=o("ibert"),Lio=o(" \u2014 "),JR=a("a"),Bio=o("IBertForMaskedLM"),kio=o(" (I-BERT model)"),xio=l(),m_=a("li"),ZY=a("strong"),Rio=o("layoutlm"),Sio=o(" \u2014 "),YR=a("a"),Pio=o("LayoutLMForMaskedLM"),$io=o(" (LayoutLM model)"),Iio=l(),g_=a("li"),eK=a("strong"),jio=o("longformer"),Nio=o(" \u2014 "),KR=a("a"),Dio=o("LongformerForMaskedLM"),qio=o(" (Longformer model)"),Gio=l(),h_=a("li"),oK=a("strong"),Oio=o("lxmert"),Xio=o(" \u2014 "),ZR=a("a"),zio=o("LxmertForPreTraining"),Vio=o(" (LXMERT model)"),Wio=l(),p_=a("li"),rK=a("strong"),Qio=o("megatron-bert"),Hio=o(" \u2014 "),eS=a("a"),Uio=o("MegatronBertForPreTraining"),Jio=o(" (MegatronBert model)"),Yio=l(),__=a("li"),tK=a("strong"),Kio=o("mobilebert"),Zio=o(" \u2014 "),oS=a("a"),edo=o("MobileBertForPreTraining"),odo=o(" (MobileBERT model)"),rdo=l(),u_=a("li"),aK=a("strong"),tdo=o("mpnet"),ado=o(" \u2014 "),rS=a("a"),ndo=o("MPNetForMaskedLM"),sdo=o(" (MPNet model)"),ldo=l(),b_=a("li"),nK=a("strong"),ido=o("openai-gpt"),ddo=o(" \u2014 "),tS=a("a"),cdo=o("OpenAIGPTLMHeadModel"),fdo=o(" (OpenAI GPT model)"),mdo=l(),v_=a("li"),sK=a("strong"),gdo=o("retribert"),hdo=o(" \u2014 "),aS=a("a"),pdo=o("RetriBertModel"),_do=o(" (RetriBERT model)"),udo=l(),T_=a("li"),lK=a("strong"),bdo=o("roberta"),vdo=o(" \u2014 "),nS=a("a"),Tdo=o("RobertaForMaskedLM"),Fdo=o(" (RoBERTa model)"),Cdo=l(),F_=a("li"),iK=a("strong"),Mdo=o("squeezebert"),Edo=o(" \u2014 "),sS=a("a"),ydo=o("SqueezeBertForMaskedLM"),wdo=o(" (SqueezeBERT model)"),Ado=l(),C_=a("li"),dK=a("strong"),Ldo=o("t5"),Bdo=o(" \u2014 "),lS=a("a"),kdo=o("T5ForConditionalGeneration"),xdo=o(" (T5 model)"),Rdo=l(),M_=a("li"),cK=a("strong"),Sdo=o("tapas"),Pdo=o(" \u2014 "),iS=a("a"),$do=o("TapasForMaskedLM"),Ido=o(" (TAPAS model)"),jdo=l(),E_=a("li"),fK=a("strong"),Ndo=o("transfo-xl"),Ddo=o(" \u2014 "),dS=a("a"),qdo=o("TransfoXLLMHeadModel"),Gdo=o(" (Transformer-XL model)"),Odo=l(),y_=a("li"),mK=a("strong"),Xdo=o("unispeech"),zdo=o(" \u2014 "),cS=a("a"),Vdo=o("UniSpeechForPreTraining"),Wdo=o(" (UniSpeech model)"),Qdo=l(),w_=a("li"),gK=a("strong"),Hdo=o("unispeech-sat"),Udo=o(" \u2014 "),fS=a("a"),Jdo=o("UniSpeechSatForPreTraining"),Ydo=o(" (UniSpeechSat model)"),Kdo=l(),A_=a("li"),hK=a("strong"),Zdo=o("visual_bert"),eco=o(" \u2014 "),mS=a("a"),oco=o("VisualBertForPreTraining"),rco=o(" (VisualBert model)"),tco=l(),L_=a("li"),pK=a("strong"),aco=o("vit_mae"),nco=o(" \u2014 "),gS=a("a"),sco=o("ViTMAEForPreTraining"),lco=o(" (ViTMAE model)"),ico=l(),B_=a("li"),_K=a("strong"),dco=o("wav2vec2"),cco=o(" \u2014 "),hS=a("a"),fco=o("Wav2Vec2ForPreTraining"),mco=o(" (Wav2Vec2 model)"),gco=l(),k_=a("li"),uK=a("strong"),hco=o("xlm"),pco=o(" \u2014 "),pS=a("a"),_co=o("XLMWithLMHeadModel"),uco=o(" (XLM model)"),bco=l(),x_=a("li"),bK=a("strong"),vco=o("xlm-roberta"),Tco=o(" \u2014 "),_S=a("a"),Fco=o("XLMRobertaForMaskedLM"),Cco=o(" (XLM-RoBERTa model)"),Mco=l(),R_=a("li"),vK=a("strong"),Eco=o("xlm-roberta-xl"),yco=o(" \u2014 "),uS=a("a"),wco=o("XLMRobertaXLForMaskedLM"),Aco=o(" (XLM-RoBERTa-XL model)"),Lco=l(),S_=a("li"),TK=a("strong"),Bco=o("xlnet"),kco=o(" \u2014 "),bS=a("a"),xco=o("XLNetLMHeadModel"),Rco=o(" (XLNet model)"),Sco=l(),P_=a("p"),Pco=o("The model is set in evaluation mode by default using "),FK=a("code"),$co=o("model.eval()"),Ico=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CK=a("code"),jco=o("model.train()"),Nco=l(),MK=a("p"),Dco=o("Examples:"),qco=l(),f(O4.$$.fragment),J0e=l(),Wi=a("h2"),$_=a("a"),EK=a("span"),f(X4.$$.fragment),Gco=l(),yK=a("span"),Oco=o("AutoModelForCausalLM"),Y0e=l(),Qo=a("div"),f(z4.$$.fragment),Xco=l(),Qi=a("p"),zco=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wK=a("code"),Vco=o("from_pretrained()"),Wco=o("class method or the "),AK=a("code"),Qco=o("from_config()"),Hco=o(`class
method.`),Uco=l(),V4=a("p"),Jco=o("This class cannot be instantiated directly using "),LK=a("code"),Yco=o("__init__()"),Kco=o(" (throws an error)."),Zco=l(),qr=a("div"),f(W4.$$.fragment),efo=l(),BK=a("p"),ofo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rfo=l(),Hi=a("p"),tfo=o(`Note:
Loading a model from its configuration file does `),kK=a("strong"),afo=o("not"),nfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("code"),sfo=o("from_pretrained()"),lfo=o("to load the model weights."),ifo=l(),RK=a("p"),dfo=o("Examples:"),cfo=l(),f(Q4.$$.fragment),ffo=l(),Re=a("div"),f(H4.$$.fragment),mfo=l(),SK=a("p"),gfo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hfo=l(),Ga=a("p"),pfo=o("The model class to instantiate is selected based on the "),PK=a("code"),_fo=o("model_type"),ufo=o(` property of the config object (either
passed as an argument or loaded from `),$K=a("code"),bfo=o("pretrained_model_name_or_path"),vfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IK=a("code"),Tfo=o("pretrained_model_name_or_path"),Ffo=o(":"),Cfo=l(),I=a("ul"),I_=a("li"),jK=a("strong"),Mfo=o("bart"),Efo=o(" \u2014 "),vS=a("a"),yfo=o("BartForCausalLM"),wfo=o(" (BART model)"),Afo=l(),j_=a("li"),NK=a("strong"),Lfo=o("bert"),Bfo=o(" \u2014 "),TS=a("a"),kfo=o("BertLMHeadModel"),xfo=o(" (BERT model)"),Rfo=l(),N_=a("li"),DK=a("strong"),Sfo=o("bert-generation"),Pfo=o(" \u2014 "),FS=a("a"),$fo=o("BertGenerationDecoder"),Ifo=o(" (Bert Generation model)"),jfo=l(),D_=a("li"),qK=a("strong"),Nfo=o("big_bird"),Dfo=o(" \u2014 "),CS=a("a"),qfo=o("BigBirdForCausalLM"),Gfo=o(" (BigBird model)"),Ofo=l(),q_=a("li"),GK=a("strong"),Xfo=o("bigbird_pegasus"),zfo=o(" \u2014 "),MS=a("a"),Vfo=o("BigBirdPegasusForCausalLM"),Wfo=o(" (BigBirdPegasus model)"),Qfo=l(),G_=a("li"),OK=a("strong"),Hfo=o("blenderbot"),Ufo=o(" \u2014 "),ES=a("a"),Jfo=o("BlenderbotForCausalLM"),Yfo=o(" (Blenderbot model)"),Kfo=l(),O_=a("li"),XK=a("strong"),Zfo=o("blenderbot-small"),emo=o(" \u2014 "),yS=a("a"),omo=o("BlenderbotSmallForCausalLM"),rmo=o(" (BlenderbotSmall model)"),tmo=l(),X_=a("li"),zK=a("strong"),amo=o("camembert"),nmo=o(" \u2014 "),wS=a("a"),smo=o("CamembertForCausalLM"),lmo=o(" (CamemBERT model)"),imo=l(),z_=a("li"),VK=a("strong"),dmo=o("ctrl"),cmo=o(" \u2014 "),AS=a("a"),fmo=o("CTRLLMHeadModel"),mmo=o(" (CTRL model)"),gmo=l(),V_=a("li"),WK=a("strong"),hmo=o("electra"),pmo=o(" \u2014 "),LS=a("a"),_mo=o("ElectraForCausalLM"),umo=o(" (ELECTRA model)"),bmo=l(),W_=a("li"),QK=a("strong"),vmo=o("gpt2"),Tmo=o(" \u2014 "),BS=a("a"),Fmo=o("GPT2LMHeadModel"),Cmo=o(" (OpenAI GPT-2 model)"),Mmo=l(),Q_=a("li"),HK=a("strong"),Emo=o("gpt_neo"),ymo=o(" \u2014 "),kS=a("a"),wmo=o("GPTNeoForCausalLM"),Amo=o(" (GPT Neo model)"),Lmo=l(),H_=a("li"),UK=a("strong"),Bmo=o("gptj"),kmo=o(" \u2014 "),xS=a("a"),xmo=o("GPTJForCausalLM"),Rmo=o(" (GPT-J model)"),Smo=l(),U_=a("li"),JK=a("strong"),Pmo=o("marian"),$mo=o(" \u2014 "),RS=a("a"),Imo=o("MarianForCausalLM"),jmo=o(" (Marian model)"),Nmo=l(),J_=a("li"),YK=a("strong"),Dmo=o("mbart"),qmo=o(" \u2014 "),SS=a("a"),Gmo=o("MBartForCausalLM"),Omo=o(" (mBART model)"),Xmo=l(),Y_=a("li"),KK=a("strong"),zmo=o("megatron-bert"),Vmo=o(" \u2014 "),PS=a("a"),Wmo=o("MegatronBertForCausalLM"),Qmo=o(" (MegatronBert model)"),Hmo=l(),K_=a("li"),ZK=a("strong"),Umo=o("openai-gpt"),Jmo=o(" \u2014 "),$S=a("a"),Ymo=o("OpenAIGPTLMHeadModel"),Kmo=o(" (OpenAI GPT model)"),Zmo=l(),Z_=a("li"),eZ=a("strong"),ego=o("pegasus"),ogo=o(" \u2014 "),IS=a("a"),rgo=o("PegasusForCausalLM"),tgo=o(" (Pegasus model)"),ago=l(),eu=a("li"),oZ=a("strong"),ngo=o("prophetnet"),sgo=o(" \u2014 "),jS=a("a"),lgo=o("ProphetNetForCausalLM"),igo=o(" (ProphetNet model)"),dgo=l(),ou=a("li"),rZ=a("strong"),cgo=o("qdqbert"),fgo=o(" \u2014 "),NS=a("a"),mgo=o("QDQBertLMHeadModel"),ggo=o(" (QDQBert model)"),hgo=l(),ru=a("li"),tZ=a("strong"),pgo=o("reformer"),_go=o(" \u2014 "),DS=a("a"),ugo=o("ReformerModelWithLMHead"),bgo=o(" (Reformer model)"),vgo=l(),tu=a("li"),aZ=a("strong"),Tgo=o("rembert"),Fgo=o(" \u2014 "),qS=a("a"),Cgo=o("RemBertForCausalLM"),Mgo=o(" (RemBERT model)"),Ego=l(),au=a("li"),nZ=a("strong"),ygo=o("roberta"),wgo=o(" \u2014 "),GS=a("a"),Ago=o("RobertaForCausalLM"),Lgo=o(" (RoBERTa model)"),Bgo=l(),nu=a("li"),sZ=a("strong"),kgo=o("roformer"),xgo=o(" \u2014 "),OS=a("a"),Rgo=o("RoFormerForCausalLM"),Sgo=o(" (RoFormer model)"),Pgo=l(),su=a("li"),lZ=a("strong"),$go=o("speech_to_text_2"),Igo=o(" \u2014 "),XS=a("a"),jgo=o("Speech2Text2ForCausalLM"),Ngo=o(" (Speech2Text2 model)"),Dgo=l(),lu=a("li"),iZ=a("strong"),qgo=o("transfo-xl"),Ggo=o(" \u2014 "),zS=a("a"),Ogo=o("TransfoXLLMHeadModel"),Xgo=o(" (Transformer-XL model)"),zgo=l(),iu=a("li"),dZ=a("strong"),Vgo=o("trocr"),Wgo=o(" \u2014 "),VS=a("a"),Qgo=o("TrOCRForCausalLM"),Hgo=o(" (TrOCR model)"),Ugo=l(),du=a("li"),cZ=a("strong"),Jgo=o("xglm"),Ygo=o(" \u2014 "),WS=a("a"),Kgo=o("XGLMForCausalLM"),Zgo=o(" (XGLM model)"),eho=l(),cu=a("li"),fZ=a("strong"),oho=o("xlm"),rho=o(" \u2014 "),QS=a("a"),tho=o("XLMWithLMHeadModel"),aho=o(" (XLM model)"),nho=l(),fu=a("li"),mZ=a("strong"),sho=o("xlm-prophetnet"),lho=o(" \u2014 "),HS=a("a"),iho=o("XLMProphetNetForCausalLM"),dho=o(" (XLMProphetNet model)"),cho=l(),mu=a("li"),gZ=a("strong"),fho=o("xlm-roberta"),mho=o(" \u2014 "),US=a("a"),gho=o("XLMRobertaForCausalLM"),hho=o(" (XLM-RoBERTa model)"),pho=l(),gu=a("li"),hZ=a("strong"),_ho=o("xlm-roberta-xl"),uho=o(" \u2014 "),JS=a("a"),bho=o("XLMRobertaXLForCausalLM"),vho=o(" (XLM-RoBERTa-XL model)"),Tho=l(),hu=a("li"),pZ=a("strong"),Fho=o("xlnet"),Cho=o(" \u2014 "),YS=a("a"),Mho=o("XLNetLMHeadModel"),Eho=o(" (XLNet model)"),yho=l(),pu=a("p"),who=o("The model is set in evaluation mode by default using "),_Z=a("code"),Aho=o("model.eval()"),Lho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uZ=a("code"),Bho=o("model.train()"),kho=l(),bZ=a("p"),xho=o("Examples:"),Rho=l(),f(U4.$$.fragment),K0e=l(),Ui=a("h2"),_u=a("a"),vZ=a("span"),f(J4.$$.fragment),Sho=l(),TZ=a("span"),Pho=o("AutoModelForMaskedLM"),Z0e=l(),Ho=a("div"),f(Y4.$$.fragment),$ho=l(),Ji=a("p"),Iho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FZ=a("code"),jho=o("from_pretrained()"),Nho=o("class method or the "),CZ=a("code"),Dho=o("from_config()"),qho=o(`class
method.`),Gho=l(),K4=a("p"),Oho=o("This class cannot be instantiated directly using "),MZ=a("code"),Xho=o("__init__()"),zho=o(" (throws an error)."),Vho=l(),Gr=a("div"),f(Z4.$$.fragment),Who=l(),EZ=a("p"),Qho=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hho=l(),Yi=a("p"),Uho=o(`Note:
Loading a model from its configuration file does `),yZ=a("strong"),Jho=o("not"),Yho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("code"),Kho=o("from_pretrained()"),Zho=o("to load the model weights."),epo=l(),AZ=a("p"),opo=o("Examples:"),rpo=l(),f(eM.$$.fragment),tpo=l(),Se=a("div"),f(oM.$$.fragment),apo=l(),LZ=a("p"),npo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),spo=l(),Oa=a("p"),lpo=o("The model class to instantiate is selected based on the "),BZ=a("code"),ipo=o("model_type"),dpo=o(` property of the config object (either
passed as an argument or loaded from `),kZ=a("code"),cpo=o("pretrained_model_name_or_path"),fpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xZ=a("code"),mpo=o("pretrained_model_name_or_path"),gpo=o(":"),hpo=l(),$=a("ul"),uu=a("li"),RZ=a("strong"),ppo=o("albert"),_po=o(" \u2014 "),KS=a("a"),upo=o("AlbertForMaskedLM"),bpo=o(" (ALBERT model)"),vpo=l(),bu=a("li"),SZ=a("strong"),Tpo=o("bart"),Fpo=o(" \u2014 "),ZS=a("a"),Cpo=o("BartForConditionalGeneration"),Mpo=o(" (BART model)"),Epo=l(),vu=a("li"),PZ=a("strong"),ypo=o("bert"),wpo=o(" \u2014 "),eP=a("a"),Apo=o("BertForMaskedLM"),Lpo=o(" (BERT model)"),Bpo=l(),Tu=a("li"),$Z=a("strong"),kpo=o("big_bird"),xpo=o(" \u2014 "),oP=a("a"),Rpo=o("BigBirdForMaskedLM"),Spo=o(" (BigBird model)"),Ppo=l(),Fu=a("li"),IZ=a("strong"),$po=o("camembert"),Ipo=o(" \u2014 "),rP=a("a"),jpo=o("CamembertForMaskedLM"),Npo=o(" (CamemBERT model)"),Dpo=l(),Cu=a("li"),jZ=a("strong"),qpo=o("convbert"),Gpo=o(" \u2014 "),tP=a("a"),Opo=o("ConvBertForMaskedLM"),Xpo=o(" (ConvBERT model)"),zpo=l(),Mu=a("li"),NZ=a("strong"),Vpo=o("deberta"),Wpo=o(" \u2014 "),aP=a("a"),Qpo=o("DebertaForMaskedLM"),Hpo=o(" (DeBERTa model)"),Upo=l(),Eu=a("li"),DZ=a("strong"),Jpo=o("deberta-v2"),Ypo=o(" \u2014 "),nP=a("a"),Kpo=o("DebertaV2ForMaskedLM"),Zpo=o(" (DeBERTa-v2 model)"),e_o=l(),yu=a("li"),qZ=a("strong"),o_o=o("distilbert"),r_o=o(" \u2014 "),sP=a("a"),t_o=o("DistilBertForMaskedLM"),a_o=o(" (DistilBERT model)"),n_o=l(),wu=a("li"),GZ=a("strong"),s_o=o("electra"),l_o=o(" \u2014 "),lP=a("a"),i_o=o("ElectraForMaskedLM"),d_o=o(" (ELECTRA model)"),c_o=l(),Au=a("li"),OZ=a("strong"),f_o=o("flaubert"),m_o=o(" \u2014 "),iP=a("a"),g_o=o("FlaubertWithLMHeadModel"),h_o=o(" (FlauBERT model)"),p_o=l(),Lu=a("li"),XZ=a("strong"),__o=o("fnet"),u_o=o(" \u2014 "),dP=a("a"),b_o=o("FNetForMaskedLM"),v_o=o(" (FNet model)"),T_o=l(),Bu=a("li"),zZ=a("strong"),F_o=o("funnel"),C_o=o(" \u2014 "),cP=a("a"),M_o=o("FunnelForMaskedLM"),E_o=o(" (Funnel Transformer model)"),y_o=l(),ku=a("li"),VZ=a("strong"),w_o=o("ibert"),A_o=o(" \u2014 "),fP=a("a"),L_o=o("IBertForMaskedLM"),B_o=o(" (I-BERT model)"),k_o=l(),xu=a("li"),WZ=a("strong"),x_o=o("layoutlm"),R_o=o(" \u2014 "),mP=a("a"),S_o=o("LayoutLMForMaskedLM"),P_o=o(" (LayoutLM model)"),$_o=l(),Ru=a("li"),QZ=a("strong"),I_o=o("longformer"),j_o=o(" \u2014 "),gP=a("a"),N_o=o("LongformerForMaskedLM"),D_o=o(" (Longformer model)"),q_o=l(),Su=a("li"),HZ=a("strong"),G_o=o("mbart"),O_o=o(" \u2014 "),hP=a("a"),X_o=o("MBartForConditionalGeneration"),z_o=o(" (mBART model)"),V_o=l(),Pu=a("li"),UZ=a("strong"),W_o=o("megatron-bert"),Q_o=o(" \u2014 "),pP=a("a"),H_o=o("MegatronBertForMaskedLM"),U_o=o(" (MegatronBert model)"),J_o=l(),$u=a("li"),JZ=a("strong"),Y_o=o("mobilebert"),K_o=o(" \u2014 "),_P=a("a"),Z_o=o("MobileBertForMaskedLM"),euo=o(" (MobileBERT model)"),ouo=l(),Iu=a("li"),YZ=a("strong"),ruo=o("mpnet"),tuo=o(" \u2014 "),uP=a("a"),auo=o("MPNetForMaskedLM"),nuo=o(" (MPNet model)"),suo=l(),ju=a("li"),KZ=a("strong"),luo=o("nystromformer"),iuo=o(" \u2014 "),bP=a("a"),duo=o("NystromformerForMaskedLM"),cuo=o(" (Nystromformer model)"),fuo=l(),Nu=a("li"),ZZ=a("strong"),muo=o("perceiver"),guo=o(" \u2014 "),vP=a("a"),huo=o("PerceiverForMaskedLM"),puo=o(" (Perceiver model)"),_uo=l(),Du=a("li"),eee=a("strong"),uuo=o("qdqbert"),buo=o(" \u2014 "),TP=a("a"),vuo=o("QDQBertForMaskedLM"),Tuo=o(" (QDQBert model)"),Fuo=l(),qu=a("li"),oee=a("strong"),Cuo=o("reformer"),Muo=o(" \u2014 "),FP=a("a"),Euo=o("ReformerForMaskedLM"),yuo=o(" (Reformer model)"),wuo=l(),Gu=a("li"),ree=a("strong"),Auo=o("rembert"),Luo=o(" \u2014 "),CP=a("a"),Buo=o("RemBertForMaskedLM"),kuo=o(" (RemBERT model)"),xuo=l(),Ou=a("li"),tee=a("strong"),Ruo=o("roberta"),Suo=o(" \u2014 "),MP=a("a"),Puo=o("RobertaForMaskedLM"),$uo=o(" (RoBERTa model)"),Iuo=l(),Xu=a("li"),aee=a("strong"),juo=o("roformer"),Nuo=o(" \u2014 "),EP=a("a"),Duo=o("RoFormerForMaskedLM"),quo=o(" (RoFormer model)"),Guo=l(),zu=a("li"),nee=a("strong"),Ouo=o("squeezebert"),Xuo=o(" \u2014 "),yP=a("a"),zuo=o("SqueezeBertForMaskedLM"),Vuo=o(" (SqueezeBERT model)"),Wuo=l(),Vu=a("li"),see=a("strong"),Quo=o("tapas"),Huo=o(" \u2014 "),wP=a("a"),Uuo=o("TapasForMaskedLM"),Juo=o(" (TAPAS model)"),Yuo=l(),Wu=a("li"),lee=a("strong"),Kuo=o("wav2vec2"),Zuo=o(" \u2014 "),iee=a("code"),e1o=o("Wav2Vec2ForMaskedLM"),o1o=o("(Wav2Vec2 model)"),r1o=l(),Qu=a("li"),dee=a("strong"),t1o=o("xlm"),a1o=o(" \u2014 "),AP=a("a"),n1o=o("XLMWithLMHeadModel"),s1o=o(" (XLM model)"),l1o=l(),Hu=a("li"),cee=a("strong"),i1o=o("xlm-roberta"),d1o=o(" \u2014 "),LP=a("a"),c1o=o("XLMRobertaForMaskedLM"),f1o=o(" (XLM-RoBERTa model)"),m1o=l(),Uu=a("li"),fee=a("strong"),g1o=o("xlm-roberta-xl"),h1o=o(" \u2014 "),BP=a("a"),p1o=o("XLMRobertaXLForMaskedLM"),_1o=o(" (XLM-RoBERTa-XL model)"),u1o=l(),Ju=a("li"),mee=a("strong"),b1o=o("yoso"),v1o=o(" \u2014 "),kP=a("a"),T1o=o("YosoForMaskedLM"),F1o=o(" (YOSO model)"),C1o=l(),Yu=a("p"),M1o=o("The model is set in evaluation mode by default using "),gee=a("code"),E1o=o("model.eval()"),y1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hee=a("code"),w1o=o("model.train()"),A1o=l(),pee=a("p"),L1o=o("Examples:"),B1o=l(),f(rM.$$.fragment),eLe=l(),Ki=a("h2"),Ku=a("a"),_ee=a("span"),f(tM.$$.fragment),k1o=l(),uee=a("span"),x1o=o("AutoModelForSeq2SeqLM"),oLe=l(),Uo=a("div"),f(aM.$$.fragment),R1o=l(),Zi=a("p"),S1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bee=a("code"),P1o=o("from_pretrained()"),$1o=o("class method or the "),vee=a("code"),I1o=o("from_config()"),j1o=o(`class
method.`),N1o=l(),nM=a("p"),D1o=o("This class cannot be instantiated directly using "),Tee=a("code"),q1o=o("__init__()"),G1o=o(" (throws an error)."),O1o=l(),Or=a("div"),f(sM.$$.fragment),X1o=l(),Fee=a("p"),z1o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),V1o=l(),ed=a("p"),W1o=o(`Note:
Loading a model from its configuration file does `),Cee=a("strong"),Q1o=o("not"),H1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=a("code"),U1o=o("from_pretrained()"),J1o=o("to load the model weights."),Y1o=l(),Eee=a("p"),K1o=o("Examples:"),Z1o=l(),f(lM.$$.fragment),ebo=l(),Pe=a("div"),f(iM.$$.fragment),obo=l(),yee=a("p"),rbo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tbo=l(),Xa=a("p"),abo=o("The model class to instantiate is selected based on the "),wee=a("code"),nbo=o("model_type"),sbo=o(` property of the config object (either
passed as an argument or loaded from `),Aee=a("code"),lbo=o("pretrained_model_name_or_path"),ibo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lee=a("code"),dbo=o("pretrained_model_name_or_path"),cbo=o(":"),fbo=l(),se=a("ul"),Zu=a("li"),Bee=a("strong"),mbo=o("bart"),gbo=o(" \u2014 "),xP=a("a"),hbo=o("BartForConditionalGeneration"),pbo=o(" (BART model)"),_bo=l(),e1=a("li"),kee=a("strong"),ubo=o("bigbird_pegasus"),bbo=o(" \u2014 "),RP=a("a"),vbo=o("BigBirdPegasusForConditionalGeneration"),Tbo=o(" (BigBirdPegasus model)"),Fbo=l(),o1=a("li"),xee=a("strong"),Cbo=o("blenderbot"),Mbo=o(" \u2014 "),SP=a("a"),Ebo=o("BlenderbotForConditionalGeneration"),ybo=o(" (Blenderbot model)"),wbo=l(),r1=a("li"),Ree=a("strong"),Abo=o("blenderbot-small"),Lbo=o(" \u2014 "),PP=a("a"),Bbo=o("BlenderbotSmallForConditionalGeneration"),kbo=o(" (BlenderbotSmall model)"),xbo=l(),t1=a("li"),See=a("strong"),Rbo=o("encoder-decoder"),Sbo=o(" \u2014 "),$P=a("a"),Pbo=o("EncoderDecoderModel"),$bo=o(" (Encoder decoder model)"),Ibo=l(),a1=a("li"),Pee=a("strong"),jbo=o("fsmt"),Nbo=o(" \u2014 "),IP=a("a"),Dbo=o("FSMTForConditionalGeneration"),qbo=o(" (FairSeq Machine-Translation model)"),Gbo=l(),n1=a("li"),$ee=a("strong"),Obo=o("led"),Xbo=o(" \u2014 "),jP=a("a"),zbo=o("LEDForConditionalGeneration"),Vbo=o(" (LED model)"),Wbo=l(),s1=a("li"),Iee=a("strong"),Qbo=o("m2m_100"),Hbo=o(" \u2014 "),NP=a("a"),Ubo=o("M2M100ForConditionalGeneration"),Jbo=o(" (M2M100 model)"),Ybo=l(),l1=a("li"),jee=a("strong"),Kbo=o("marian"),Zbo=o(" \u2014 "),DP=a("a"),e5o=o("MarianMTModel"),o5o=o(" (Marian model)"),r5o=l(),i1=a("li"),Nee=a("strong"),t5o=o("mbart"),a5o=o(" \u2014 "),qP=a("a"),n5o=o("MBartForConditionalGeneration"),s5o=o(" (mBART model)"),l5o=l(),d1=a("li"),Dee=a("strong"),i5o=o("mt5"),d5o=o(" \u2014 "),GP=a("a"),c5o=o("MT5ForConditionalGeneration"),f5o=o(" (mT5 model)"),m5o=l(),c1=a("li"),qee=a("strong"),g5o=o("pegasus"),h5o=o(" \u2014 "),OP=a("a"),p5o=o("PegasusForConditionalGeneration"),_5o=o(" (Pegasus model)"),u5o=l(),f1=a("li"),Gee=a("strong"),b5o=o("prophetnet"),v5o=o(" \u2014 "),XP=a("a"),T5o=o("ProphetNetForConditionalGeneration"),F5o=o(" (ProphetNet model)"),C5o=l(),m1=a("li"),Oee=a("strong"),M5o=o("t5"),E5o=o(" \u2014 "),zP=a("a"),y5o=o("T5ForConditionalGeneration"),w5o=o(" (T5 model)"),A5o=l(),g1=a("li"),Xee=a("strong"),L5o=o("xlm-prophetnet"),B5o=o(" \u2014 "),VP=a("a"),k5o=o("XLMProphetNetForConditionalGeneration"),x5o=o(" (XLMProphetNet model)"),R5o=l(),h1=a("p"),S5o=o("The model is set in evaluation mode by default using "),zee=a("code"),P5o=o("model.eval()"),$5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vee=a("code"),I5o=o("model.train()"),j5o=l(),Wee=a("p"),N5o=o("Examples:"),D5o=l(),f(dM.$$.fragment),rLe=l(),od=a("h2"),p1=a("a"),Qee=a("span"),f(cM.$$.fragment),q5o=l(),Hee=a("span"),G5o=o("AutoModelForSequenceClassification"),tLe=l(),Jo=a("div"),f(fM.$$.fragment),O5o=l(),rd=a("p"),X5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Uee=a("code"),z5o=o("from_pretrained()"),V5o=o("class method or the "),Jee=a("code"),W5o=o("from_config()"),Q5o=o(`class
method.`),H5o=l(),mM=a("p"),U5o=o("This class cannot be instantiated directly using "),Yee=a("code"),J5o=o("__init__()"),Y5o=o(" (throws an error)."),K5o=l(),Xr=a("div"),f(gM.$$.fragment),Z5o=l(),Kee=a("p"),e2o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o2o=l(),td=a("p"),r2o=o(`Note:
Loading a model from its configuration file does `),Zee=a("strong"),t2o=o("not"),a2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=a("code"),n2o=o("from_pretrained()"),s2o=o("to load the model weights."),l2o=l(),ooe=a("p"),i2o=o("Examples:"),d2o=l(),f(hM.$$.fragment),c2o=l(),$e=a("div"),f(pM.$$.fragment),f2o=l(),roe=a("p"),m2o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g2o=l(),za=a("p"),h2o=o("The model class to instantiate is selected based on the "),toe=a("code"),p2o=o("model_type"),_2o=o(` property of the config object (either
passed as an argument or loaded from `),aoe=a("code"),u2o=o("pretrained_model_name_or_path"),b2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),noe=a("code"),v2o=o("pretrained_model_name_or_path"),T2o=o(":"),F2o=l(),A=a("ul"),_1=a("li"),soe=a("strong"),C2o=o("albert"),M2o=o(" \u2014 "),WP=a("a"),E2o=o("AlbertForSequenceClassification"),y2o=o(" (ALBERT model)"),w2o=l(),u1=a("li"),loe=a("strong"),A2o=o("bart"),L2o=o(" \u2014 "),QP=a("a"),B2o=o("BartForSequenceClassification"),k2o=o(" (BART model)"),x2o=l(),b1=a("li"),ioe=a("strong"),R2o=o("bert"),S2o=o(" \u2014 "),HP=a("a"),P2o=o("BertForSequenceClassification"),$2o=o(" (BERT model)"),I2o=l(),v1=a("li"),doe=a("strong"),j2o=o("big_bird"),N2o=o(" \u2014 "),UP=a("a"),D2o=o("BigBirdForSequenceClassification"),q2o=o(" (BigBird model)"),G2o=l(),T1=a("li"),coe=a("strong"),O2o=o("bigbird_pegasus"),X2o=o(" \u2014 "),JP=a("a"),z2o=o("BigBirdPegasusForSequenceClassification"),V2o=o(" (BigBirdPegasus model)"),W2o=l(),F1=a("li"),foe=a("strong"),Q2o=o("camembert"),H2o=o(" \u2014 "),YP=a("a"),U2o=o("CamembertForSequenceClassification"),J2o=o(" (CamemBERT model)"),Y2o=l(),C1=a("li"),moe=a("strong"),K2o=o("canine"),Z2o=o(" \u2014 "),KP=a("a"),evo=o("CanineForSequenceClassification"),ovo=o(" (Canine model)"),rvo=l(),M1=a("li"),goe=a("strong"),tvo=o("convbert"),avo=o(" \u2014 "),ZP=a("a"),nvo=o("ConvBertForSequenceClassification"),svo=o(" (ConvBERT model)"),lvo=l(),E1=a("li"),hoe=a("strong"),ivo=o("ctrl"),dvo=o(" \u2014 "),e$=a("a"),cvo=o("CTRLForSequenceClassification"),fvo=o(" (CTRL model)"),mvo=l(),y1=a("li"),poe=a("strong"),gvo=o("deberta"),hvo=o(" \u2014 "),o$=a("a"),pvo=o("DebertaForSequenceClassification"),_vo=o(" (DeBERTa model)"),uvo=l(),w1=a("li"),_oe=a("strong"),bvo=o("deberta-v2"),vvo=o(" \u2014 "),r$=a("a"),Tvo=o("DebertaV2ForSequenceClassification"),Fvo=o(" (DeBERTa-v2 model)"),Cvo=l(),A1=a("li"),uoe=a("strong"),Mvo=o("distilbert"),Evo=o(" \u2014 "),t$=a("a"),yvo=o("DistilBertForSequenceClassification"),wvo=o(" (DistilBERT model)"),Avo=l(),L1=a("li"),boe=a("strong"),Lvo=o("electra"),Bvo=o(" \u2014 "),a$=a("a"),kvo=o("ElectraForSequenceClassification"),xvo=o(" (ELECTRA model)"),Rvo=l(),B1=a("li"),voe=a("strong"),Svo=o("flaubert"),Pvo=o(" \u2014 "),n$=a("a"),$vo=o("FlaubertForSequenceClassification"),Ivo=o(" (FlauBERT model)"),jvo=l(),k1=a("li"),Toe=a("strong"),Nvo=o("fnet"),Dvo=o(" \u2014 "),s$=a("a"),qvo=o("FNetForSequenceClassification"),Gvo=o(" (FNet model)"),Ovo=l(),x1=a("li"),Foe=a("strong"),Xvo=o("funnel"),zvo=o(" \u2014 "),l$=a("a"),Vvo=o("FunnelForSequenceClassification"),Wvo=o(" (Funnel Transformer model)"),Qvo=l(),R1=a("li"),Coe=a("strong"),Hvo=o("gpt2"),Uvo=o(" \u2014 "),i$=a("a"),Jvo=o("GPT2ForSequenceClassification"),Yvo=o(" (OpenAI GPT-2 model)"),Kvo=l(),S1=a("li"),Moe=a("strong"),Zvo=o("gpt_neo"),e6o=o(" \u2014 "),d$=a("a"),o6o=o("GPTNeoForSequenceClassification"),r6o=o(" (GPT Neo model)"),t6o=l(),P1=a("li"),Eoe=a("strong"),a6o=o("gptj"),n6o=o(" \u2014 "),c$=a("a"),s6o=o("GPTJForSequenceClassification"),l6o=o(" (GPT-J model)"),i6o=l(),$1=a("li"),yoe=a("strong"),d6o=o("ibert"),c6o=o(" \u2014 "),f$=a("a"),f6o=o("IBertForSequenceClassification"),m6o=o(" (I-BERT model)"),g6o=l(),I1=a("li"),woe=a("strong"),h6o=o("layoutlm"),p6o=o(" \u2014 "),m$=a("a"),_6o=o("LayoutLMForSequenceClassification"),u6o=o(" (LayoutLM model)"),b6o=l(),j1=a("li"),Aoe=a("strong"),v6o=o("layoutlmv2"),T6o=o(" \u2014 "),g$=a("a"),F6o=o("LayoutLMv2ForSequenceClassification"),C6o=o(" (LayoutLMv2 model)"),M6o=l(),N1=a("li"),Loe=a("strong"),E6o=o("led"),y6o=o(" \u2014 "),h$=a("a"),w6o=o("LEDForSequenceClassification"),A6o=o(" (LED model)"),L6o=l(),D1=a("li"),Boe=a("strong"),B6o=o("longformer"),k6o=o(" \u2014 "),p$=a("a"),x6o=o("LongformerForSequenceClassification"),R6o=o(" (Longformer model)"),S6o=l(),q1=a("li"),koe=a("strong"),P6o=o("mbart"),$6o=o(" \u2014 "),_$=a("a"),I6o=o("MBartForSequenceClassification"),j6o=o(" (mBART model)"),N6o=l(),G1=a("li"),xoe=a("strong"),D6o=o("megatron-bert"),q6o=o(" \u2014 "),u$=a("a"),G6o=o("MegatronBertForSequenceClassification"),O6o=o(" (MegatronBert model)"),X6o=l(),O1=a("li"),Roe=a("strong"),z6o=o("mobilebert"),V6o=o(" \u2014 "),b$=a("a"),W6o=o("MobileBertForSequenceClassification"),Q6o=o(" (MobileBERT model)"),H6o=l(),X1=a("li"),Soe=a("strong"),U6o=o("mpnet"),J6o=o(" \u2014 "),v$=a("a"),Y6o=o("MPNetForSequenceClassification"),K6o=o(" (MPNet model)"),Z6o=l(),z1=a("li"),Poe=a("strong"),eTo=o("nystromformer"),oTo=o(" \u2014 "),T$=a("a"),rTo=o("NystromformerForSequenceClassification"),tTo=o(" (Nystromformer model)"),aTo=l(),V1=a("li"),$oe=a("strong"),nTo=o("openai-gpt"),sTo=o(" \u2014 "),F$=a("a"),lTo=o("OpenAIGPTForSequenceClassification"),iTo=o(" (OpenAI GPT model)"),dTo=l(),W1=a("li"),Ioe=a("strong"),cTo=o("perceiver"),fTo=o(" \u2014 "),C$=a("a"),mTo=o("PerceiverForSequenceClassification"),gTo=o(" (Perceiver model)"),hTo=l(),Q1=a("li"),joe=a("strong"),pTo=o("qdqbert"),_To=o(" \u2014 "),M$=a("a"),uTo=o("QDQBertForSequenceClassification"),bTo=o(" (QDQBert model)"),vTo=l(),H1=a("li"),Noe=a("strong"),TTo=o("reformer"),FTo=o(" \u2014 "),E$=a("a"),CTo=o("ReformerForSequenceClassification"),MTo=o(" (Reformer model)"),ETo=l(),U1=a("li"),Doe=a("strong"),yTo=o("rembert"),wTo=o(" \u2014 "),y$=a("a"),ATo=o("RemBertForSequenceClassification"),LTo=o(" (RemBERT model)"),BTo=l(),J1=a("li"),qoe=a("strong"),kTo=o("roberta"),xTo=o(" \u2014 "),w$=a("a"),RTo=o("RobertaForSequenceClassification"),STo=o(" (RoBERTa model)"),PTo=l(),Y1=a("li"),Goe=a("strong"),$To=o("roformer"),ITo=o(" \u2014 "),A$=a("a"),jTo=o("RoFormerForSequenceClassification"),NTo=o(" (RoFormer model)"),DTo=l(),K1=a("li"),Ooe=a("strong"),qTo=o("squeezebert"),GTo=o(" \u2014 "),L$=a("a"),OTo=o("SqueezeBertForSequenceClassification"),XTo=o(" (SqueezeBERT model)"),zTo=l(),Z1=a("li"),Xoe=a("strong"),VTo=o("tapas"),WTo=o(" \u2014 "),B$=a("a"),QTo=o("TapasForSequenceClassification"),HTo=o(" (TAPAS model)"),UTo=l(),eb=a("li"),zoe=a("strong"),JTo=o("transfo-xl"),YTo=o(" \u2014 "),k$=a("a"),KTo=o("TransfoXLForSequenceClassification"),ZTo=o(" (Transformer-XL model)"),e7o=l(),ob=a("li"),Voe=a("strong"),o7o=o("xlm"),r7o=o(" \u2014 "),x$=a("a"),t7o=o("XLMForSequenceClassification"),a7o=o(" (XLM model)"),n7o=l(),rb=a("li"),Woe=a("strong"),s7o=o("xlm-roberta"),l7o=o(" \u2014 "),R$=a("a"),i7o=o("XLMRobertaForSequenceClassification"),d7o=o(" (XLM-RoBERTa model)"),c7o=l(),tb=a("li"),Qoe=a("strong"),f7o=o("xlm-roberta-xl"),m7o=o(" \u2014 "),S$=a("a"),g7o=o("XLMRobertaXLForSequenceClassification"),h7o=o(" (XLM-RoBERTa-XL model)"),p7o=l(),ab=a("li"),Hoe=a("strong"),_7o=o("xlnet"),u7o=o(" \u2014 "),P$=a("a"),b7o=o("XLNetForSequenceClassification"),v7o=o(" (XLNet model)"),T7o=l(),nb=a("li"),Uoe=a("strong"),F7o=o("yoso"),C7o=o(" \u2014 "),$$=a("a"),M7o=o("YosoForSequenceClassification"),E7o=o(" (YOSO model)"),y7o=l(),sb=a("p"),w7o=o("The model is set in evaluation mode by default using "),Joe=a("code"),A7o=o("model.eval()"),L7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yoe=a("code"),B7o=o("model.train()"),k7o=l(),Koe=a("p"),x7o=o("Examples:"),R7o=l(),f(_M.$$.fragment),aLe=l(),ad=a("h2"),lb=a("a"),Zoe=a("span"),f(uM.$$.fragment),S7o=l(),ere=a("span"),P7o=o("AutoModelForMultipleChoice"),nLe=l(),Yo=a("div"),f(bM.$$.fragment),$7o=l(),nd=a("p"),I7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ore=a("code"),j7o=o("from_pretrained()"),N7o=o("class method or the "),rre=a("code"),D7o=o("from_config()"),q7o=o(`class
method.`),G7o=l(),vM=a("p"),O7o=o("This class cannot be instantiated directly using "),tre=a("code"),X7o=o("__init__()"),z7o=o(" (throws an error)."),V7o=l(),zr=a("div"),f(TM.$$.fragment),W7o=l(),are=a("p"),Q7o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H7o=l(),sd=a("p"),U7o=o(`Note:
Loading a model from its configuration file does `),nre=a("strong"),J7o=o("not"),Y7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=a("code"),K7o=o("from_pretrained()"),Z7o=o("to load the model weights."),e8o=l(),lre=a("p"),o8o=o("Examples:"),r8o=l(),f(FM.$$.fragment),t8o=l(),Ie=a("div"),f(CM.$$.fragment),a8o=l(),ire=a("p"),n8o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),s8o=l(),Va=a("p"),l8o=o("The model class to instantiate is selected based on the "),dre=a("code"),i8o=o("model_type"),d8o=o(` property of the config object (either
passed as an argument or loaded from `),cre=a("code"),c8o=o("pretrained_model_name_or_path"),f8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fre=a("code"),m8o=o("pretrained_model_name_or_path"),g8o=o(":"),h8o=l(),G=a("ul"),ib=a("li"),mre=a("strong"),p8o=o("albert"),_8o=o(" \u2014 "),I$=a("a"),u8o=o("AlbertForMultipleChoice"),b8o=o(" (ALBERT model)"),v8o=l(),db=a("li"),gre=a("strong"),T8o=o("bert"),F8o=o(" \u2014 "),j$=a("a"),C8o=o("BertForMultipleChoice"),M8o=o(" (BERT model)"),E8o=l(),cb=a("li"),hre=a("strong"),y8o=o("big_bird"),w8o=o(" \u2014 "),N$=a("a"),A8o=o("BigBirdForMultipleChoice"),L8o=o(" (BigBird model)"),B8o=l(),fb=a("li"),pre=a("strong"),k8o=o("camembert"),x8o=o(" \u2014 "),D$=a("a"),R8o=o("CamembertForMultipleChoice"),S8o=o(" (CamemBERT model)"),P8o=l(),mb=a("li"),_re=a("strong"),$8o=o("canine"),I8o=o(" \u2014 "),q$=a("a"),j8o=o("CanineForMultipleChoice"),N8o=o(" (Canine model)"),D8o=l(),gb=a("li"),ure=a("strong"),q8o=o("convbert"),G8o=o(" \u2014 "),G$=a("a"),O8o=o("ConvBertForMultipleChoice"),X8o=o(" (ConvBERT model)"),z8o=l(),hb=a("li"),bre=a("strong"),V8o=o("distilbert"),W8o=o(" \u2014 "),O$=a("a"),Q8o=o("DistilBertForMultipleChoice"),H8o=o(" (DistilBERT model)"),U8o=l(),pb=a("li"),vre=a("strong"),J8o=o("electra"),Y8o=o(" \u2014 "),X$=a("a"),K8o=o("ElectraForMultipleChoice"),Z8o=o(" (ELECTRA model)"),eFo=l(),_b=a("li"),Tre=a("strong"),oFo=o("flaubert"),rFo=o(" \u2014 "),z$=a("a"),tFo=o("FlaubertForMultipleChoice"),aFo=o(" (FlauBERT model)"),nFo=l(),ub=a("li"),Fre=a("strong"),sFo=o("fnet"),lFo=o(" \u2014 "),V$=a("a"),iFo=o("FNetForMultipleChoice"),dFo=o(" (FNet model)"),cFo=l(),bb=a("li"),Cre=a("strong"),fFo=o("funnel"),mFo=o(" \u2014 "),W$=a("a"),gFo=o("FunnelForMultipleChoice"),hFo=o(" (Funnel Transformer model)"),pFo=l(),vb=a("li"),Mre=a("strong"),_Fo=o("ibert"),uFo=o(" \u2014 "),Q$=a("a"),bFo=o("IBertForMultipleChoice"),vFo=o(" (I-BERT model)"),TFo=l(),Tb=a("li"),Ere=a("strong"),FFo=o("longformer"),CFo=o(" \u2014 "),H$=a("a"),MFo=o("LongformerForMultipleChoice"),EFo=o(" (Longformer model)"),yFo=l(),Fb=a("li"),yre=a("strong"),wFo=o("megatron-bert"),AFo=o(" \u2014 "),U$=a("a"),LFo=o("MegatronBertForMultipleChoice"),BFo=o(" (MegatronBert model)"),kFo=l(),Cb=a("li"),wre=a("strong"),xFo=o("mobilebert"),RFo=o(" \u2014 "),J$=a("a"),SFo=o("MobileBertForMultipleChoice"),PFo=o(" (MobileBERT model)"),$Fo=l(),Mb=a("li"),Are=a("strong"),IFo=o("mpnet"),jFo=o(" \u2014 "),Y$=a("a"),NFo=o("MPNetForMultipleChoice"),DFo=o(" (MPNet model)"),qFo=l(),Eb=a("li"),Lre=a("strong"),GFo=o("nystromformer"),OFo=o(" \u2014 "),K$=a("a"),XFo=o("NystromformerForMultipleChoice"),zFo=o(" (Nystromformer model)"),VFo=l(),yb=a("li"),Bre=a("strong"),WFo=o("qdqbert"),QFo=o(" \u2014 "),Z$=a("a"),HFo=o("QDQBertForMultipleChoice"),UFo=o(" (QDQBert model)"),JFo=l(),wb=a("li"),kre=a("strong"),YFo=o("rembert"),KFo=o(" \u2014 "),eI=a("a"),ZFo=o("RemBertForMultipleChoice"),eCo=o(" (RemBERT model)"),oCo=l(),Ab=a("li"),xre=a("strong"),rCo=o("roberta"),tCo=o(" \u2014 "),oI=a("a"),aCo=o("RobertaForMultipleChoice"),nCo=o(" (RoBERTa model)"),sCo=l(),Lb=a("li"),Rre=a("strong"),lCo=o("roformer"),iCo=o(" \u2014 "),rI=a("a"),dCo=o("RoFormerForMultipleChoice"),cCo=o(" (RoFormer model)"),fCo=l(),Bb=a("li"),Sre=a("strong"),mCo=o("squeezebert"),gCo=o(" \u2014 "),tI=a("a"),hCo=o("SqueezeBertForMultipleChoice"),pCo=o(" (SqueezeBERT model)"),_Co=l(),kb=a("li"),Pre=a("strong"),uCo=o("xlm"),bCo=o(" \u2014 "),aI=a("a"),vCo=o("XLMForMultipleChoice"),TCo=o(" (XLM model)"),FCo=l(),xb=a("li"),$re=a("strong"),CCo=o("xlm-roberta"),MCo=o(" \u2014 "),nI=a("a"),ECo=o("XLMRobertaForMultipleChoice"),yCo=o(" (XLM-RoBERTa model)"),wCo=l(),Rb=a("li"),Ire=a("strong"),ACo=o("xlm-roberta-xl"),LCo=o(" \u2014 "),sI=a("a"),BCo=o("XLMRobertaXLForMultipleChoice"),kCo=o(" (XLM-RoBERTa-XL model)"),xCo=l(),Sb=a("li"),jre=a("strong"),RCo=o("xlnet"),SCo=o(" \u2014 "),lI=a("a"),PCo=o("XLNetForMultipleChoice"),$Co=o(" (XLNet model)"),ICo=l(),Pb=a("li"),Nre=a("strong"),jCo=o("yoso"),NCo=o(" \u2014 "),iI=a("a"),DCo=o("YosoForMultipleChoice"),qCo=o(" (YOSO model)"),GCo=l(),$b=a("p"),OCo=o("The model is set in evaluation mode by default using "),Dre=a("code"),XCo=o("model.eval()"),zCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qre=a("code"),VCo=o("model.train()"),WCo=l(),Gre=a("p"),QCo=o("Examples:"),HCo=l(),f(MM.$$.fragment),sLe=l(),ld=a("h2"),Ib=a("a"),Ore=a("span"),f(EM.$$.fragment),UCo=l(),Xre=a("span"),JCo=o("AutoModelForNextSentencePrediction"),lLe=l(),Ko=a("div"),f(yM.$$.fragment),YCo=l(),id=a("p"),KCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zre=a("code"),ZCo=o("from_pretrained()"),e4o=o("class method or the "),Vre=a("code"),o4o=o("from_config()"),r4o=o(`class
method.`),t4o=l(),wM=a("p"),a4o=o("This class cannot be instantiated directly using "),Wre=a("code"),n4o=o("__init__()"),s4o=o(" (throws an error)."),l4o=l(),Vr=a("div"),f(AM.$$.fragment),i4o=l(),Qre=a("p"),d4o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c4o=l(),dd=a("p"),f4o=o(`Note:
Loading a model from its configuration file does `),Hre=a("strong"),m4o=o("not"),g4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ure=a("code"),h4o=o("from_pretrained()"),p4o=o("to load the model weights."),_4o=l(),Jre=a("p"),u4o=o("Examples:"),b4o=l(),f(LM.$$.fragment),v4o=l(),je=a("div"),f(BM.$$.fragment),T4o=l(),Yre=a("p"),F4o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),C4o=l(),Wa=a("p"),M4o=o("The model class to instantiate is selected based on the "),Kre=a("code"),E4o=o("model_type"),y4o=o(` property of the config object (either
passed as an argument or loaded from `),Zre=a("code"),w4o=o("pretrained_model_name_or_path"),A4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ete=a("code"),L4o=o("pretrained_model_name_or_path"),B4o=o(":"),k4o=l(),na=a("ul"),jb=a("li"),ote=a("strong"),x4o=o("bert"),R4o=o(" \u2014 "),dI=a("a"),S4o=o("BertForNextSentencePrediction"),P4o=o(" (BERT model)"),$4o=l(),Nb=a("li"),rte=a("strong"),I4o=o("fnet"),j4o=o(" \u2014 "),cI=a("a"),N4o=o("FNetForNextSentencePrediction"),D4o=o(" (FNet model)"),q4o=l(),Db=a("li"),tte=a("strong"),G4o=o("megatron-bert"),O4o=o(" \u2014 "),fI=a("a"),X4o=o("MegatronBertForNextSentencePrediction"),z4o=o(" (MegatronBert model)"),V4o=l(),qb=a("li"),ate=a("strong"),W4o=o("mobilebert"),Q4o=o(" \u2014 "),mI=a("a"),H4o=o("MobileBertForNextSentencePrediction"),U4o=o(" (MobileBERT model)"),J4o=l(),Gb=a("li"),nte=a("strong"),Y4o=o("qdqbert"),K4o=o(" \u2014 "),gI=a("a"),Z4o=o("QDQBertForNextSentencePrediction"),eMo=o(" (QDQBert model)"),oMo=l(),Ob=a("p"),rMo=o("The model is set in evaluation mode by default using "),ste=a("code"),tMo=o("model.eval()"),aMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lte=a("code"),nMo=o("model.train()"),sMo=l(),ite=a("p"),lMo=o("Examples:"),iMo=l(),f(kM.$$.fragment),iLe=l(),cd=a("h2"),Xb=a("a"),dte=a("span"),f(xM.$$.fragment),dMo=l(),cte=a("span"),cMo=o("AutoModelForTokenClassification"),dLe=l(),Zo=a("div"),f(RM.$$.fragment),fMo=l(),fd=a("p"),mMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fte=a("code"),gMo=o("from_pretrained()"),hMo=o("class method or the "),mte=a("code"),pMo=o("from_config()"),_Mo=o(`class
method.`),uMo=l(),SM=a("p"),bMo=o("This class cannot be instantiated directly using "),gte=a("code"),vMo=o("__init__()"),TMo=o(" (throws an error)."),FMo=l(),Wr=a("div"),f(PM.$$.fragment),CMo=l(),hte=a("p"),MMo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EMo=l(),md=a("p"),yMo=o(`Note:
Loading a model from its configuration file does `),pte=a("strong"),wMo=o("not"),AMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_te=a("code"),LMo=o("from_pretrained()"),BMo=o("to load the model weights."),kMo=l(),ute=a("p"),xMo=o("Examples:"),RMo=l(),f($M.$$.fragment),SMo=l(),Ne=a("div"),f(IM.$$.fragment),PMo=l(),bte=a("p"),$Mo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),IMo=l(),Qa=a("p"),jMo=o("The model class to instantiate is selected based on the "),vte=a("code"),NMo=o("model_type"),DMo=o(` property of the config object (either
passed as an argument or loaded from `),Tte=a("code"),qMo=o("pretrained_model_name_or_path"),GMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fte=a("code"),OMo=o("pretrained_model_name_or_path"),XMo=o(":"),zMo=l(),N=a("ul"),zb=a("li"),Cte=a("strong"),VMo=o("albert"),WMo=o(" \u2014 "),hI=a("a"),QMo=o("AlbertForTokenClassification"),HMo=o(" (ALBERT model)"),UMo=l(),Vb=a("li"),Mte=a("strong"),JMo=o("bert"),YMo=o(" \u2014 "),pI=a("a"),KMo=o("BertForTokenClassification"),ZMo=o(" (BERT model)"),eEo=l(),Wb=a("li"),Ete=a("strong"),oEo=o("big_bird"),rEo=o(" \u2014 "),_I=a("a"),tEo=o("BigBirdForTokenClassification"),aEo=o(" (BigBird model)"),nEo=l(),Qb=a("li"),yte=a("strong"),sEo=o("camembert"),lEo=o(" \u2014 "),uI=a("a"),iEo=o("CamembertForTokenClassification"),dEo=o(" (CamemBERT model)"),cEo=l(),Hb=a("li"),wte=a("strong"),fEo=o("canine"),mEo=o(" \u2014 "),bI=a("a"),gEo=o("CanineForTokenClassification"),hEo=o(" (Canine model)"),pEo=l(),Ub=a("li"),Ate=a("strong"),_Eo=o("convbert"),uEo=o(" \u2014 "),vI=a("a"),bEo=o("ConvBertForTokenClassification"),vEo=o(" (ConvBERT model)"),TEo=l(),Jb=a("li"),Lte=a("strong"),FEo=o("deberta"),CEo=o(" \u2014 "),TI=a("a"),MEo=o("DebertaForTokenClassification"),EEo=o(" (DeBERTa model)"),yEo=l(),Yb=a("li"),Bte=a("strong"),wEo=o("deberta-v2"),AEo=o(" \u2014 "),FI=a("a"),LEo=o("DebertaV2ForTokenClassification"),BEo=o(" (DeBERTa-v2 model)"),kEo=l(),Kb=a("li"),kte=a("strong"),xEo=o("distilbert"),REo=o(" \u2014 "),CI=a("a"),SEo=o("DistilBertForTokenClassification"),PEo=o(" (DistilBERT model)"),$Eo=l(),Zb=a("li"),xte=a("strong"),IEo=o("electra"),jEo=o(" \u2014 "),MI=a("a"),NEo=o("ElectraForTokenClassification"),DEo=o(" (ELECTRA model)"),qEo=l(),e5=a("li"),Rte=a("strong"),GEo=o("flaubert"),OEo=o(" \u2014 "),EI=a("a"),XEo=o("FlaubertForTokenClassification"),zEo=o(" (FlauBERT model)"),VEo=l(),o5=a("li"),Ste=a("strong"),WEo=o("fnet"),QEo=o(" \u2014 "),yI=a("a"),HEo=o("FNetForTokenClassification"),UEo=o(" (FNet model)"),JEo=l(),r5=a("li"),Pte=a("strong"),YEo=o("funnel"),KEo=o(" \u2014 "),wI=a("a"),ZEo=o("FunnelForTokenClassification"),e3o=o(" (Funnel Transformer model)"),o3o=l(),t5=a("li"),$te=a("strong"),r3o=o("gpt2"),t3o=o(" \u2014 "),AI=a("a"),a3o=o("GPT2ForTokenClassification"),n3o=o(" (OpenAI GPT-2 model)"),s3o=l(),a5=a("li"),Ite=a("strong"),l3o=o("ibert"),i3o=o(" \u2014 "),LI=a("a"),d3o=o("IBertForTokenClassification"),c3o=o(" (I-BERT model)"),f3o=l(),n5=a("li"),jte=a("strong"),m3o=o("layoutlm"),g3o=o(" \u2014 "),BI=a("a"),h3o=o("LayoutLMForTokenClassification"),p3o=o(" (LayoutLM model)"),_3o=l(),s5=a("li"),Nte=a("strong"),u3o=o("layoutlmv2"),b3o=o(" \u2014 "),kI=a("a"),v3o=o("LayoutLMv2ForTokenClassification"),T3o=o(" (LayoutLMv2 model)"),F3o=l(),l5=a("li"),Dte=a("strong"),C3o=o("longformer"),M3o=o(" \u2014 "),xI=a("a"),E3o=o("LongformerForTokenClassification"),y3o=o(" (Longformer model)"),w3o=l(),i5=a("li"),qte=a("strong"),A3o=o("megatron-bert"),L3o=o(" \u2014 "),RI=a("a"),B3o=o("MegatronBertForTokenClassification"),k3o=o(" (MegatronBert model)"),x3o=l(),d5=a("li"),Gte=a("strong"),R3o=o("mobilebert"),S3o=o(" \u2014 "),SI=a("a"),P3o=o("MobileBertForTokenClassification"),$3o=o(" (MobileBERT model)"),I3o=l(),c5=a("li"),Ote=a("strong"),j3o=o("mpnet"),N3o=o(" \u2014 "),PI=a("a"),D3o=o("MPNetForTokenClassification"),q3o=o(" (MPNet model)"),G3o=l(),f5=a("li"),Xte=a("strong"),O3o=o("nystromformer"),X3o=o(" \u2014 "),$I=a("a"),z3o=o("NystromformerForTokenClassification"),V3o=o(" (Nystromformer model)"),W3o=l(),m5=a("li"),zte=a("strong"),Q3o=o("qdqbert"),H3o=o(" \u2014 "),II=a("a"),U3o=o("QDQBertForTokenClassification"),J3o=o(" (QDQBert model)"),Y3o=l(),g5=a("li"),Vte=a("strong"),K3o=o("rembert"),Z3o=o(" \u2014 "),jI=a("a"),eyo=o("RemBertForTokenClassification"),oyo=o(" (RemBERT model)"),ryo=l(),h5=a("li"),Wte=a("strong"),tyo=o("roberta"),ayo=o(" \u2014 "),NI=a("a"),nyo=o("RobertaForTokenClassification"),syo=o(" (RoBERTa model)"),lyo=l(),p5=a("li"),Qte=a("strong"),iyo=o("roformer"),dyo=o(" \u2014 "),DI=a("a"),cyo=o("RoFormerForTokenClassification"),fyo=o(" (RoFormer model)"),myo=l(),_5=a("li"),Hte=a("strong"),gyo=o("squeezebert"),hyo=o(" \u2014 "),qI=a("a"),pyo=o("SqueezeBertForTokenClassification"),_yo=o(" (SqueezeBERT model)"),uyo=l(),u5=a("li"),Ute=a("strong"),byo=o("xlm"),vyo=o(" \u2014 "),GI=a("a"),Tyo=o("XLMForTokenClassification"),Fyo=o(" (XLM model)"),Cyo=l(),b5=a("li"),Jte=a("strong"),Myo=o("xlm-roberta"),Eyo=o(" \u2014 "),OI=a("a"),yyo=o("XLMRobertaForTokenClassification"),wyo=o(" (XLM-RoBERTa model)"),Ayo=l(),v5=a("li"),Yte=a("strong"),Lyo=o("xlm-roberta-xl"),Byo=o(" \u2014 "),XI=a("a"),kyo=o("XLMRobertaXLForTokenClassification"),xyo=o(" (XLM-RoBERTa-XL model)"),Ryo=l(),T5=a("li"),Kte=a("strong"),Syo=o("xlnet"),Pyo=o(" \u2014 "),zI=a("a"),$yo=o("XLNetForTokenClassification"),Iyo=o(" (XLNet model)"),jyo=l(),F5=a("li"),Zte=a("strong"),Nyo=o("yoso"),Dyo=o(" \u2014 "),VI=a("a"),qyo=o("YosoForTokenClassification"),Gyo=o(" (YOSO model)"),Oyo=l(),C5=a("p"),Xyo=o("The model is set in evaluation mode by default using "),eae=a("code"),zyo=o("model.eval()"),Vyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oae=a("code"),Wyo=o("model.train()"),Qyo=l(),rae=a("p"),Hyo=o("Examples:"),Uyo=l(),f(jM.$$.fragment),cLe=l(),gd=a("h2"),M5=a("a"),tae=a("span"),f(NM.$$.fragment),Jyo=l(),aae=a("span"),Yyo=o("AutoModelForQuestionAnswering"),fLe=l(),er=a("div"),f(DM.$$.fragment),Kyo=l(),hd=a("p"),Zyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nae=a("code"),ewo=o("from_pretrained()"),owo=o("class method or the "),sae=a("code"),rwo=o("from_config()"),two=o(`class
method.`),awo=l(),qM=a("p"),nwo=o("This class cannot be instantiated directly using "),lae=a("code"),swo=o("__init__()"),lwo=o(" (throws an error)."),iwo=l(),Qr=a("div"),f(GM.$$.fragment),dwo=l(),iae=a("p"),cwo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fwo=l(),pd=a("p"),mwo=o(`Note:
Loading a model from its configuration file does `),dae=a("strong"),gwo=o("not"),hwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cae=a("code"),pwo=o("from_pretrained()"),_wo=o("to load the model weights."),uwo=l(),fae=a("p"),bwo=o("Examples:"),vwo=l(),f(OM.$$.fragment),Two=l(),De=a("div"),f(XM.$$.fragment),Fwo=l(),mae=a("p"),Cwo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mwo=l(),Ha=a("p"),Ewo=o("The model class to instantiate is selected based on the "),gae=a("code"),ywo=o("model_type"),wwo=o(` property of the config object (either
passed as an argument or loaded from `),hae=a("code"),Awo=o("pretrained_model_name_or_path"),Lwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=a("code"),Bwo=o("pretrained_model_name_or_path"),kwo=o(":"),xwo=l(),R=a("ul"),E5=a("li"),_ae=a("strong"),Rwo=o("albert"),Swo=o(" \u2014 "),WI=a("a"),Pwo=o("AlbertForQuestionAnswering"),$wo=o(" (ALBERT model)"),Iwo=l(),y5=a("li"),uae=a("strong"),jwo=o("bart"),Nwo=o(" \u2014 "),QI=a("a"),Dwo=o("BartForQuestionAnswering"),qwo=o(" (BART model)"),Gwo=l(),w5=a("li"),bae=a("strong"),Owo=o("bert"),Xwo=o(" \u2014 "),HI=a("a"),zwo=o("BertForQuestionAnswering"),Vwo=o(" (BERT model)"),Wwo=l(),A5=a("li"),vae=a("strong"),Qwo=o("big_bird"),Hwo=o(" \u2014 "),UI=a("a"),Uwo=o("BigBirdForQuestionAnswering"),Jwo=o(" (BigBird model)"),Ywo=l(),L5=a("li"),Tae=a("strong"),Kwo=o("bigbird_pegasus"),Zwo=o(" \u2014 "),JI=a("a"),eAo=o("BigBirdPegasusForQuestionAnswering"),oAo=o(" (BigBirdPegasus model)"),rAo=l(),B5=a("li"),Fae=a("strong"),tAo=o("camembert"),aAo=o(" \u2014 "),YI=a("a"),nAo=o("CamembertForQuestionAnswering"),sAo=o(" (CamemBERT model)"),lAo=l(),k5=a("li"),Cae=a("strong"),iAo=o("canine"),dAo=o(" \u2014 "),KI=a("a"),cAo=o("CanineForQuestionAnswering"),fAo=o(" (Canine model)"),mAo=l(),x5=a("li"),Mae=a("strong"),gAo=o("convbert"),hAo=o(" \u2014 "),ZI=a("a"),pAo=o("ConvBertForQuestionAnswering"),_Ao=o(" (ConvBERT model)"),uAo=l(),R5=a("li"),Eae=a("strong"),bAo=o("deberta"),vAo=o(" \u2014 "),ej=a("a"),TAo=o("DebertaForQuestionAnswering"),FAo=o(" (DeBERTa model)"),CAo=l(),S5=a("li"),yae=a("strong"),MAo=o("deberta-v2"),EAo=o(" \u2014 "),oj=a("a"),yAo=o("DebertaV2ForQuestionAnswering"),wAo=o(" (DeBERTa-v2 model)"),AAo=l(),P5=a("li"),wae=a("strong"),LAo=o("distilbert"),BAo=o(" \u2014 "),rj=a("a"),kAo=o("DistilBertForQuestionAnswering"),xAo=o(" (DistilBERT model)"),RAo=l(),$5=a("li"),Aae=a("strong"),SAo=o("electra"),PAo=o(" \u2014 "),tj=a("a"),$Ao=o("ElectraForQuestionAnswering"),IAo=o(" (ELECTRA model)"),jAo=l(),I5=a("li"),Lae=a("strong"),NAo=o("flaubert"),DAo=o(" \u2014 "),aj=a("a"),qAo=o("FlaubertForQuestionAnsweringSimple"),GAo=o(" (FlauBERT model)"),OAo=l(),j5=a("li"),Bae=a("strong"),XAo=o("fnet"),zAo=o(" \u2014 "),nj=a("a"),VAo=o("FNetForQuestionAnswering"),WAo=o(" (FNet model)"),QAo=l(),N5=a("li"),kae=a("strong"),HAo=o("funnel"),UAo=o(" \u2014 "),sj=a("a"),JAo=o("FunnelForQuestionAnswering"),YAo=o(" (Funnel Transformer model)"),KAo=l(),D5=a("li"),xae=a("strong"),ZAo=o("gptj"),e0o=o(" \u2014 "),lj=a("a"),o0o=o("GPTJForQuestionAnswering"),r0o=o(" (GPT-J model)"),t0o=l(),q5=a("li"),Rae=a("strong"),a0o=o("ibert"),n0o=o(" \u2014 "),ij=a("a"),s0o=o("IBertForQuestionAnswering"),l0o=o(" (I-BERT model)"),i0o=l(),G5=a("li"),Sae=a("strong"),d0o=o("layoutlmv2"),c0o=o(" \u2014 "),dj=a("a"),f0o=o("LayoutLMv2ForQuestionAnswering"),m0o=o(" (LayoutLMv2 model)"),g0o=l(),O5=a("li"),Pae=a("strong"),h0o=o("led"),p0o=o(" \u2014 "),cj=a("a"),_0o=o("LEDForQuestionAnswering"),u0o=o(" (LED model)"),b0o=l(),X5=a("li"),$ae=a("strong"),v0o=o("longformer"),T0o=o(" \u2014 "),fj=a("a"),F0o=o("LongformerForQuestionAnswering"),C0o=o(" (Longformer model)"),M0o=l(),z5=a("li"),Iae=a("strong"),E0o=o("lxmert"),y0o=o(" \u2014 "),mj=a("a"),w0o=o("LxmertForQuestionAnswering"),A0o=o(" (LXMERT model)"),L0o=l(),V5=a("li"),jae=a("strong"),B0o=o("mbart"),k0o=o(" \u2014 "),gj=a("a"),x0o=o("MBartForQuestionAnswering"),R0o=o(" (mBART model)"),S0o=l(),W5=a("li"),Nae=a("strong"),P0o=o("megatron-bert"),$0o=o(" \u2014 "),hj=a("a"),I0o=o("MegatronBertForQuestionAnswering"),j0o=o(" (MegatronBert model)"),N0o=l(),Q5=a("li"),Dae=a("strong"),D0o=o("mobilebert"),q0o=o(" \u2014 "),pj=a("a"),G0o=o("MobileBertForQuestionAnswering"),O0o=o(" (MobileBERT model)"),X0o=l(),H5=a("li"),qae=a("strong"),z0o=o("mpnet"),V0o=o(" \u2014 "),_j=a("a"),W0o=o("MPNetForQuestionAnswering"),Q0o=o(" (MPNet model)"),H0o=l(),U5=a("li"),Gae=a("strong"),U0o=o("nystromformer"),J0o=o(" \u2014 "),uj=a("a"),Y0o=o("NystromformerForQuestionAnswering"),K0o=o(" (Nystromformer model)"),Z0o=l(),J5=a("li"),Oae=a("strong"),eLo=o("qdqbert"),oLo=o(" \u2014 "),bj=a("a"),rLo=o("QDQBertForQuestionAnswering"),tLo=o(" (QDQBert model)"),aLo=l(),Y5=a("li"),Xae=a("strong"),nLo=o("reformer"),sLo=o(" \u2014 "),vj=a("a"),lLo=o("ReformerForQuestionAnswering"),iLo=o(" (Reformer model)"),dLo=l(),K5=a("li"),zae=a("strong"),cLo=o("rembert"),fLo=o(" \u2014 "),Tj=a("a"),mLo=o("RemBertForQuestionAnswering"),gLo=o(" (RemBERT model)"),hLo=l(),Z5=a("li"),Vae=a("strong"),pLo=o("roberta"),_Lo=o(" \u2014 "),Fj=a("a"),uLo=o("RobertaForQuestionAnswering"),bLo=o(" (RoBERTa model)"),vLo=l(),e2=a("li"),Wae=a("strong"),TLo=o("roformer"),FLo=o(" \u2014 "),Cj=a("a"),CLo=o("RoFormerForQuestionAnswering"),MLo=o(" (RoFormer model)"),ELo=l(),o2=a("li"),Qae=a("strong"),yLo=o("splinter"),wLo=o(" \u2014 "),Mj=a("a"),ALo=o("SplinterForQuestionAnswering"),LLo=o(" (Splinter model)"),BLo=l(),r2=a("li"),Hae=a("strong"),kLo=o("squeezebert"),xLo=o(" \u2014 "),Ej=a("a"),RLo=o("SqueezeBertForQuestionAnswering"),SLo=o(" (SqueezeBERT model)"),PLo=l(),t2=a("li"),Uae=a("strong"),$Lo=o("xlm"),ILo=o(" \u2014 "),yj=a("a"),jLo=o("XLMForQuestionAnsweringSimple"),NLo=o(" (XLM model)"),DLo=l(),a2=a("li"),Jae=a("strong"),qLo=o("xlm-roberta"),GLo=o(" \u2014 "),wj=a("a"),OLo=o("XLMRobertaForQuestionAnswering"),XLo=o(" (XLM-RoBERTa model)"),zLo=l(),n2=a("li"),Yae=a("strong"),VLo=o("xlm-roberta-xl"),WLo=o(" \u2014 "),Aj=a("a"),QLo=o("XLMRobertaXLForQuestionAnswering"),HLo=o(" (XLM-RoBERTa-XL model)"),ULo=l(),s2=a("li"),Kae=a("strong"),JLo=o("xlnet"),YLo=o(" \u2014 "),Lj=a("a"),KLo=o("XLNetForQuestionAnsweringSimple"),ZLo=o(" (XLNet model)"),e9o=l(),l2=a("li"),Zae=a("strong"),o9o=o("yoso"),r9o=o(" \u2014 "),Bj=a("a"),t9o=o("YosoForQuestionAnswering"),a9o=o(" (YOSO model)"),n9o=l(),i2=a("p"),s9o=o("The model is set in evaluation mode by default using "),ene=a("code"),l9o=o("model.eval()"),i9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),one=a("code"),d9o=o("model.train()"),c9o=l(),rne=a("p"),f9o=o("Examples:"),m9o=l(),f(zM.$$.fragment),mLe=l(),_d=a("h2"),d2=a("a"),tne=a("span"),f(VM.$$.fragment),g9o=l(),ane=a("span"),h9o=o("AutoModelForTableQuestionAnswering"),gLe=l(),or=a("div"),f(WM.$$.fragment),p9o=l(),ud=a("p"),_9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nne=a("code"),u9o=o("from_pretrained()"),b9o=o("class method or the "),sne=a("code"),v9o=o("from_config()"),T9o=o(`class
method.`),F9o=l(),QM=a("p"),C9o=o("This class cannot be instantiated directly using "),lne=a("code"),M9o=o("__init__()"),E9o=o(" (throws an error)."),y9o=l(),Hr=a("div"),f(HM.$$.fragment),w9o=l(),ine=a("p"),A9o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),L9o=l(),bd=a("p"),B9o=o(`Note:
Loading a model from its configuration file does `),dne=a("strong"),k9o=o("not"),x9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cne=a("code"),R9o=o("from_pretrained()"),S9o=o("to load the model weights."),P9o=l(),fne=a("p"),$9o=o("Examples:"),I9o=l(),f(UM.$$.fragment),j9o=l(),qe=a("div"),f(JM.$$.fragment),N9o=l(),mne=a("p"),D9o=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),q9o=l(),Ua=a("p"),G9o=o("The model class to instantiate is selected based on the "),gne=a("code"),O9o=o("model_type"),X9o=o(` property of the config object (either
passed as an argument or loaded from `),hne=a("code"),z9o=o("pretrained_model_name_or_path"),V9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pne=a("code"),W9o=o("pretrained_model_name_or_path"),Q9o=o(":"),H9o=l(),_ne=a("ul"),c2=a("li"),une=a("strong"),U9o=o("tapas"),J9o=o(" \u2014 "),kj=a("a"),Y9o=o("TapasForQuestionAnswering"),K9o=o(" (TAPAS model)"),Z9o=l(),f2=a("p"),eBo=o("The model is set in evaluation mode by default using "),bne=a("code"),oBo=o("model.eval()"),rBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vne=a("code"),tBo=o("model.train()"),aBo=l(),Tne=a("p"),nBo=o("Examples:"),sBo=l(),f(YM.$$.fragment),hLe=l(),vd=a("h2"),m2=a("a"),Fne=a("span"),f(KM.$$.fragment),lBo=l(),Cne=a("span"),iBo=o("AutoModelForImageClassification"),pLe=l(),rr=a("div"),f(ZM.$$.fragment),dBo=l(),Td=a("p"),cBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mne=a("code"),fBo=o("from_pretrained()"),mBo=o("class method or the "),Ene=a("code"),gBo=o("from_config()"),hBo=o(`class
method.`),pBo=l(),eE=a("p"),_Bo=o("This class cannot be instantiated directly using "),yne=a("code"),uBo=o("__init__()"),bBo=o(" (throws an error)."),vBo=l(),Ur=a("div"),f(oE.$$.fragment),TBo=l(),wne=a("p"),FBo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),CBo=l(),Fd=a("p"),MBo=o(`Note:
Loading a model from its configuration file does `),Ane=a("strong"),EBo=o("not"),yBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lne=a("code"),wBo=o("from_pretrained()"),ABo=o("to load the model weights."),LBo=l(),Bne=a("p"),BBo=o("Examples:"),kBo=l(),f(rE.$$.fragment),xBo=l(),Ge=a("div"),f(tE.$$.fragment),RBo=l(),kne=a("p"),SBo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PBo=l(),Ja=a("p"),$Bo=o("The model class to instantiate is selected based on the "),xne=a("code"),IBo=o("model_type"),jBo=o(` property of the config object (either
passed as an argument or loaded from `),Rne=a("code"),NBo=o("pretrained_model_name_or_path"),DBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sne=a("code"),qBo=o("pretrained_model_name_or_path"),GBo=o(":"),OBo=l(),be=a("ul"),g2=a("li"),Pne=a("strong"),XBo=o("beit"),zBo=o(" \u2014 "),xj=a("a"),VBo=o("BeitForImageClassification"),WBo=o(" (BEiT model)"),QBo=l(),h2=a("li"),$ne=a("strong"),HBo=o("convnext"),UBo=o(" \u2014 "),Rj=a("a"),JBo=o("ConvNextForImageClassification"),YBo=o(" (ConvNext model)"),KBo=l(),Rs=a("li"),Ine=a("strong"),ZBo=o("deit"),eko=o(" \u2014 "),Sj=a("a"),oko=o("DeiTForImageClassification"),rko=o(" or "),Pj=a("a"),tko=o("DeiTForImageClassificationWithTeacher"),ako=o(" (DeiT model)"),nko=l(),p2=a("li"),jne=a("strong"),sko=o("imagegpt"),lko=o(" \u2014 "),$j=a("a"),iko=o("ImageGPTForImageClassification"),dko=o(" (ImageGPT model)"),cko=l(),la=a("li"),Nne=a("strong"),fko=o("perceiver"),mko=o(" \u2014 "),Ij=a("a"),gko=o("PerceiverForImageClassificationLearned"),hko=o(" or "),jj=a("a"),pko=o("PerceiverForImageClassificationFourier"),_ko=o(" or "),Nj=a("a"),uko=o("PerceiverForImageClassificationConvProcessing"),bko=o(" (Perceiver model)"),vko=l(),_2=a("li"),Dne=a("strong"),Tko=o("poolformer"),Fko=o(" \u2014 "),Dj=a("a"),Cko=o("PoolFormerForImageClassification"),Mko=o(" (PoolFormer model)"),Eko=l(),u2=a("li"),qne=a("strong"),yko=o("segformer"),wko=o(" \u2014 "),qj=a("a"),Ako=o("SegformerForImageClassification"),Lko=o(" (SegFormer model)"),Bko=l(),b2=a("li"),Gne=a("strong"),kko=o("swin"),xko=o(" \u2014 "),Gj=a("a"),Rko=o("SwinForImageClassification"),Sko=o(" (Swin model)"),Pko=l(),v2=a("li"),One=a("strong"),$ko=o("vit"),Iko=o(" \u2014 "),Oj=a("a"),jko=o("ViTForImageClassification"),Nko=o(" (ViT model)"),Dko=l(),T2=a("p"),qko=o("The model is set in evaluation mode by default using "),Xne=a("code"),Gko=o("model.eval()"),Oko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=a("code"),Xko=o("model.train()"),zko=l(),Vne=a("p"),Vko=o("Examples:"),Wko=l(),f(aE.$$.fragment),_Le=l(),Cd=a("h2"),F2=a("a"),Wne=a("span"),f(nE.$$.fragment),Qko=l(),Qne=a("span"),Hko=o("AutoModelForVision2Seq"),uLe=l(),tr=a("div"),f(sE.$$.fragment),Uko=l(),Md=a("p"),Jko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Hne=a("code"),Yko=o("from_pretrained()"),Kko=o("class method or the "),Une=a("code"),Zko=o("from_config()"),exo=o(`class
method.`),oxo=l(),lE=a("p"),rxo=o("This class cannot be instantiated directly using "),Jne=a("code"),txo=o("__init__()"),axo=o(" (throws an error)."),nxo=l(),Jr=a("div"),f(iE.$$.fragment),sxo=l(),Yne=a("p"),lxo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ixo=l(),Ed=a("p"),dxo=o(`Note:
Loading a model from its configuration file does `),Kne=a("strong"),cxo=o("not"),fxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zne=a("code"),mxo=o("from_pretrained()"),gxo=o("to load the model weights."),hxo=l(),ese=a("p"),pxo=o("Examples:"),_xo=l(),f(dE.$$.fragment),uxo=l(),Oe=a("div"),f(cE.$$.fragment),bxo=l(),ose=a("p"),vxo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Txo=l(),Ya=a("p"),Fxo=o("The model class to instantiate is selected based on the "),rse=a("code"),Cxo=o("model_type"),Mxo=o(` property of the config object (either
passed as an argument or loaded from `),tse=a("code"),Exo=o("pretrained_model_name_or_path"),yxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ase=a("code"),wxo=o("pretrained_model_name_or_path"),Axo=o(":"),Lxo=l(),nse=a("ul"),C2=a("li"),sse=a("strong"),Bxo=o("vision-encoder-decoder"),kxo=o(" \u2014 "),Xj=a("a"),xxo=o("VisionEncoderDecoderModel"),Rxo=o(" (Vision Encoder decoder model)"),Sxo=l(),M2=a("p"),Pxo=o("The model is set in evaluation mode by default using "),lse=a("code"),$xo=o("model.eval()"),Ixo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ise=a("code"),jxo=o("model.train()"),Nxo=l(),dse=a("p"),Dxo=o("Examples:"),qxo=l(),f(fE.$$.fragment),bLe=l(),yd=a("h2"),E2=a("a"),cse=a("span"),f(mE.$$.fragment),Gxo=l(),fse=a("span"),Oxo=o("AutoModelForAudioClassification"),vLe=l(),ar=a("div"),f(gE.$$.fragment),Xxo=l(),wd=a("p"),zxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),mse=a("code"),Vxo=o("from_pretrained()"),Wxo=o("class method or the "),gse=a("code"),Qxo=o("from_config()"),Hxo=o(`class
method.`),Uxo=l(),hE=a("p"),Jxo=o("This class cannot be instantiated directly using "),hse=a("code"),Yxo=o("__init__()"),Kxo=o(" (throws an error)."),Zxo=l(),Yr=a("div"),f(pE.$$.fragment),eRo=l(),pse=a("p"),oRo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rRo=l(),Ad=a("p"),tRo=o(`Note:
Loading a model from its configuration file does `),_se=a("strong"),aRo=o("not"),nRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),use=a("code"),sRo=o("from_pretrained()"),lRo=o("to load the model weights."),iRo=l(),bse=a("p"),dRo=o("Examples:"),cRo=l(),f(_E.$$.fragment),fRo=l(),Xe=a("div"),f(uE.$$.fragment),mRo=l(),vse=a("p"),gRo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),hRo=l(),Ka=a("p"),pRo=o("The model class to instantiate is selected based on the "),Tse=a("code"),_Ro=o("model_type"),uRo=o(` property of the config object (either
passed as an argument or loaded from `),Fse=a("code"),bRo=o("pretrained_model_name_or_path"),vRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=a("code"),TRo=o("pretrained_model_name_or_path"),FRo=o(":"),CRo=l(),ao=a("ul"),y2=a("li"),Mse=a("strong"),MRo=o("hubert"),ERo=o(" \u2014 "),zj=a("a"),yRo=o("HubertForSequenceClassification"),wRo=o(" (Hubert model)"),ARo=l(),w2=a("li"),Ese=a("strong"),LRo=o("sew"),BRo=o(" \u2014 "),Vj=a("a"),kRo=o("SEWForSequenceClassification"),xRo=o(" (SEW model)"),RRo=l(),A2=a("li"),yse=a("strong"),SRo=o("sew-d"),PRo=o(" \u2014 "),Wj=a("a"),$Ro=o("SEWDForSequenceClassification"),IRo=o(" (SEW-D model)"),jRo=l(),L2=a("li"),wse=a("strong"),NRo=o("unispeech"),DRo=o(" \u2014 "),Qj=a("a"),qRo=o("UniSpeechForSequenceClassification"),GRo=o(" (UniSpeech model)"),ORo=l(),B2=a("li"),Ase=a("strong"),XRo=o("unispeech-sat"),zRo=o(" \u2014 "),Hj=a("a"),VRo=o("UniSpeechSatForSequenceClassification"),WRo=o(" (UniSpeechSat model)"),QRo=l(),k2=a("li"),Lse=a("strong"),HRo=o("wav2vec2"),URo=o(" \u2014 "),Uj=a("a"),JRo=o("Wav2Vec2ForSequenceClassification"),YRo=o(" (Wav2Vec2 model)"),KRo=l(),x2=a("li"),Bse=a("strong"),ZRo=o("wavlm"),eSo=o(" \u2014 "),Jj=a("a"),oSo=o("WavLMForSequenceClassification"),rSo=o(" (WavLM model)"),tSo=l(),R2=a("p"),aSo=o("The model is set in evaluation mode by default using "),kse=a("code"),nSo=o("model.eval()"),sSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xse=a("code"),lSo=o("model.train()"),iSo=l(),Rse=a("p"),dSo=o("Examples:"),cSo=l(),f(bE.$$.fragment),TLe=l(),Ld=a("h2"),S2=a("a"),Sse=a("span"),f(vE.$$.fragment),fSo=l(),Pse=a("span"),mSo=o("AutoModelForAudioFrameClassification"),FLe=l(),nr=a("div"),f(TE.$$.fragment),gSo=l(),Bd=a("p"),hSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$se=a("code"),pSo=o("from_pretrained()"),_So=o("class method or the "),Ise=a("code"),uSo=o("from_config()"),bSo=o(`class
method.`),vSo=l(),FE=a("p"),TSo=o("This class cannot be instantiated directly using "),jse=a("code"),FSo=o("__init__()"),CSo=o(" (throws an error)."),MSo=l(),Kr=a("div"),f(CE.$$.fragment),ESo=l(),Nse=a("p"),ySo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wSo=l(),kd=a("p"),ASo=o(`Note:
Loading a model from its configuration file does `),Dse=a("strong"),LSo=o("not"),BSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=a("code"),kSo=o("from_pretrained()"),xSo=o("to load the model weights."),RSo=l(),Gse=a("p"),SSo=o("Examples:"),PSo=l(),f(ME.$$.fragment),$So=l(),ze=a("div"),f(EE.$$.fragment),ISo=l(),Ose=a("p"),jSo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),NSo=l(),Za=a("p"),DSo=o("The model class to instantiate is selected based on the "),Xse=a("code"),qSo=o("model_type"),GSo=o(` property of the config object (either
passed as an argument or loaded from `),zse=a("code"),OSo=o("pretrained_model_name_or_path"),XSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vse=a("code"),zSo=o("pretrained_model_name_or_path"),VSo=o(":"),WSo=l(),xd=a("ul"),P2=a("li"),Wse=a("strong"),QSo=o("unispeech-sat"),HSo=o(" \u2014 "),Yj=a("a"),USo=o("UniSpeechSatForAudioFrameClassification"),JSo=o(" (UniSpeechSat model)"),YSo=l(),$2=a("li"),Qse=a("strong"),KSo=o("wav2vec2"),ZSo=o(" \u2014 "),Kj=a("a"),ePo=o("Wav2Vec2ForAudioFrameClassification"),oPo=o(" (Wav2Vec2 model)"),rPo=l(),I2=a("li"),Hse=a("strong"),tPo=o("wavlm"),aPo=o(" \u2014 "),Zj=a("a"),nPo=o("WavLMForAudioFrameClassification"),sPo=o(" (WavLM model)"),lPo=l(),j2=a("p"),iPo=o("The model is set in evaluation mode by default using "),Use=a("code"),dPo=o("model.eval()"),cPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jse=a("code"),fPo=o("model.train()"),mPo=l(),Yse=a("p"),gPo=o("Examples:"),hPo=l(),f(yE.$$.fragment),CLe=l(),Rd=a("h2"),N2=a("a"),Kse=a("span"),f(wE.$$.fragment),pPo=l(),Zse=a("span"),_Po=o("AutoModelForCTC"),MLe=l(),sr=a("div"),f(AE.$$.fragment),uPo=l(),Sd=a("p"),bPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ele=a("code"),vPo=o("from_pretrained()"),TPo=o("class method or the "),ole=a("code"),FPo=o("from_config()"),CPo=o(`class
method.`),MPo=l(),LE=a("p"),EPo=o("This class cannot be instantiated directly using "),rle=a("code"),yPo=o("__init__()"),wPo=o(" (throws an error)."),APo=l(),Zr=a("div"),f(BE.$$.fragment),LPo=l(),tle=a("p"),BPo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kPo=l(),Pd=a("p"),xPo=o(`Note:
Loading a model from its configuration file does `),ale=a("strong"),RPo=o("not"),SPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nle=a("code"),PPo=o("from_pretrained()"),$Po=o("to load the model weights."),IPo=l(),sle=a("p"),jPo=o("Examples:"),NPo=l(),f(kE.$$.fragment),DPo=l(),Ve=a("div"),f(xE.$$.fragment),qPo=l(),lle=a("p"),GPo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),OPo=l(),en=a("p"),XPo=o("The model class to instantiate is selected based on the "),ile=a("code"),zPo=o("model_type"),VPo=o(` property of the config object (either
passed as an argument or loaded from `),dle=a("code"),WPo=o("pretrained_model_name_or_path"),QPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cle=a("code"),HPo=o("pretrained_model_name_or_path"),UPo=o(":"),JPo=l(),no=a("ul"),D2=a("li"),fle=a("strong"),YPo=o("hubert"),KPo=o(" \u2014 "),eN=a("a"),ZPo=o("HubertForCTC"),e$o=o(" (Hubert model)"),o$o=l(),q2=a("li"),mle=a("strong"),r$o=o("sew"),t$o=o(" \u2014 "),oN=a("a"),a$o=o("SEWForCTC"),n$o=o(" (SEW model)"),s$o=l(),G2=a("li"),gle=a("strong"),l$o=o("sew-d"),i$o=o(" \u2014 "),rN=a("a"),d$o=o("SEWDForCTC"),c$o=o(" (SEW-D model)"),f$o=l(),O2=a("li"),hle=a("strong"),m$o=o("unispeech"),g$o=o(" \u2014 "),tN=a("a"),h$o=o("UniSpeechForCTC"),p$o=o(" (UniSpeech model)"),_$o=l(),X2=a("li"),ple=a("strong"),u$o=o("unispeech-sat"),b$o=o(" \u2014 "),aN=a("a"),v$o=o("UniSpeechSatForCTC"),T$o=o(" (UniSpeechSat model)"),F$o=l(),z2=a("li"),_le=a("strong"),C$o=o("wav2vec2"),M$o=o(" \u2014 "),nN=a("a"),E$o=o("Wav2Vec2ForCTC"),y$o=o(" (Wav2Vec2 model)"),w$o=l(),V2=a("li"),ule=a("strong"),A$o=o("wavlm"),L$o=o(" \u2014 "),sN=a("a"),B$o=o("WavLMForCTC"),k$o=o(" (WavLM model)"),x$o=l(),W2=a("p"),R$o=o("The model is set in evaluation mode by default using "),ble=a("code"),S$o=o("model.eval()"),P$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=a("code"),$$o=o("model.train()"),I$o=l(),Tle=a("p"),j$o=o("Examples:"),N$o=l(),f(RE.$$.fragment),ELe=l(),$d=a("h2"),Q2=a("a"),Fle=a("span"),f(SE.$$.fragment),D$o=l(),Cle=a("span"),q$o=o("AutoModelForSpeechSeq2Seq"),yLe=l(),lr=a("div"),f(PE.$$.fragment),G$o=l(),Id=a("p"),O$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mle=a("code"),X$o=o("from_pretrained()"),z$o=o("class method or the "),Ele=a("code"),V$o=o("from_config()"),W$o=o(`class
method.`),Q$o=l(),$E=a("p"),H$o=o("This class cannot be instantiated directly using "),yle=a("code"),U$o=o("__init__()"),J$o=o(" (throws an error)."),Y$o=l(),et=a("div"),f(IE.$$.fragment),K$o=l(),wle=a("p"),Z$o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eIo=l(),jd=a("p"),oIo=o(`Note:
Loading a model from its configuration file does `),Ale=a("strong"),rIo=o("not"),tIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lle=a("code"),aIo=o("from_pretrained()"),nIo=o("to load the model weights."),sIo=l(),Ble=a("p"),lIo=o("Examples:"),iIo=l(),f(jE.$$.fragment),dIo=l(),We=a("div"),f(NE.$$.fragment),cIo=l(),kle=a("p"),fIo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mIo=l(),on=a("p"),gIo=o("The model class to instantiate is selected based on the "),xle=a("code"),hIo=o("model_type"),pIo=o(` property of the config object (either
passed as an argument or loaded from `),Rle=a("code"),_Io=o("pretrained_model_name_or_path"),uIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sle=a("code"),bIo=o("pretrained_model_name_or_path"),vIo=o(":"),TIo=l(),DE=a("ul"),H2=a("li"),Ple=a("strong"),FIo=o("speech-encoder-decoder"),CIo=o(" \u2014 "),lN=a("a"),MIo=o("SpeechEncoderDecoderModel"),EIo=o(" (Speech Encoder decoder model)"),yIo=l(),U2=a("li"),$le=a("strong"),wIo=o("speech_to_text"),AIo=o(" \u2014 "),iN=a("a"),LIo=o("Speech2TextForConditionalGeneration"),BIo=o(" (Speech2Text model)"),kIo=l(),J2=a("p"),xIo=o("The model is set in evaluation mode by default using "),Ile=a("code"),RIo=o("model.eval()"),SIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jle=a("code"),PIo=o("model.train()"),$Io=l(),Nle=a("p"),IIo=o("Examples:"),jIo=l(),f(qE.$$.fragment),wLe=l(),Nd=a("h2"),Y2=a("a"),Dle=a("span"),f(GE.$$.fragment),NIo=l(),qle=a("span"),DIo=o("AutoModelForAudioXVector"),ALe=l(),ir=a("div"),f(OE.$$.fragment),qIo=l(),Dd=a("p"),GIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Gle=a("code"),OIo=o("from_pretrained()"),XIo=o("class method or the "),Ole=a("code"),zIo=o("from_config()"),VIo=o(`class
method.`),WIo=l(),XE=a("p"),QIo=o("This class cannot be instantiated directly using "),Xle=a("code"),HIo=o("__init__()"),UIo=o(" (throws an error)."),JIo=l(),ot=a("div"),f(zE.$$.fragment),YIo=l(),zle=a("p"),KIo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ZIo=l(),qd=a("p"),ejo=o(`Note:
Loading a model from its configuration file does `),Vle=a("strong"),ojo=o("not"),rjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wle=a("code"),tjo=o("from_pretrained()"),ajo=o("to load the model weights."),njo=l(),Qle=a("p"),sjo=o("Examples:"),ljo=l(),f(VE.$$.fragment),ijo=l(),Qe=a("div"),f(WE.$$.fragment),djo=l(),Hle=a("p"),cjo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fjo=l(),rn=a("p"),mjo=o("The model class to instantiate is selected based on the "),Ule=a("code"),gjo=o("model_type"),hjo=o(` property of the config object (either
passed as an argument or loaded from `),Jle=a("code"),pjo=o("pretrained_model_name_or_path"),_jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=a("code"),ujo=o("pretrained_model_name_or_path"),bjo=o(":"),vjo=l(),Gd=a("ul"),K2=a("li"),Kle=a("strong"),Tjo=o("unispeech-sat"),Fjo=o(" \u2014 "),dN=a("a"),Cjo=o("UniSpeechSatForXVector"),Mjo=o(" (UniSpeechSat model)"),Ejo=l(),Z2=a("li"),Zle=a("strong"),yjo=o("wav2vec2"),wjo=o(" \u2014 "),cN=a("a"),Ajo=o("Wav2Vec2ForXVector"),Ljo=o(" (Wav2Vec2 model)"),Bjo=l(),ev=a("li"),eie=a("strong"),kjo=o("wavlm"),xjo=o(" \u2014 "),fN=a("a"),Rjo=o("WavLMForXVector"),Sjo=o(" (WavLM model)"),Pjo=l(),ov=a("p"),$jo=o("The model is set in evaluation mode by default using "),oie=a("code"),Ijo=o("model.eval()"),jjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),Njo=o("model.train()"),Djo=l(),tie=a("p"),qjo=o("Examples:"),Gjo=l(),f(QE.$$.fragment),LLe=l(),Od=a("h2"),rv=a("a"),aie=a("span"),f(HE.$$.fragment),Ojo=l(),nie=a("span"),Xjo=o("AutoModelForMaskedImageModeling"),BLe=l(),dr=a("div"),f(UE.$$.fragment),zjo=l(),Xd=a("p"),Vjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sie=a("code"),Wjo=o("from_pretrained()"),Qjo=o("class method or the "),lie=a("code"),Hjo=o("from_config()"),Ujo=o(`class
method.`),Jjo=l(),JE=a("p"),Yjo=o("This class cannot be instantiated directly using "),iie=a("code"),Kjo=o("__init__()"),Zjo=o(" (throws an error)."),eNo=l(),rt=a("div"),f(YE.$$.fragment),oNo=l(),die=a("p"),rNo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),tNo=l(),zd=a("p"),aNo=o(`Note:
Loading a model from its configuration file does `),cie=a("strong"),nNo=o("not"),sNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=a("code"),lNo=o("from_pretrained()"),iNo=o("to load the model weights."),dNo=l(),mie=a("p"),cNo=o("Examples:"),fNo=l(),f(KE.$$.fragment),mNo=l(),He=a("div"),f(ZE.$$.fragment),gNo=l(),gie=a("p"),hNo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pNo=l(),tn=a("p"),_No=o("The model class to instantiate is selected based on the "),hie=a("code"),uNo=o("model_type"),bNo=o(` property of the config object (either
passed as an argument or loaded from `),pie=a("code"),vNo=o("pretrained_model_name_or_path"),TNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=a("code"),FNo=o("pretrained_model_name_or_path"),CNo=o(":"),MNo=l(),Vd=a("ul"),tv=a("li"),uie=a("strong"),ENo=o("deit"),yNo=o(" \u2014 "),mN=a("a"),wNo=o("DeiTForMaskedImageModeling"),ANo=o(" (DeiT model)"),LNo=l(),av=a("li"),bie=a("strong"),BNo=o("swin"),kNo=o(" \u2014 "),gN=a("a"),xNo=o("SwinForMaskedImageModeling"),RNo=o(" (Swin model)"),SNo=l(),nv=a("li"),vie=a("strong"),PNo=o("vit"),$No=o(" \u2014 "),hN=a("a"),INo=o("ViTForMaskedImageModeling"),jNo=o(" (ViT model)"),NNo=l(),sv=a("p"),DNo=o("The model is set in evaluation mode by default using "),Tie=a("code"),qNo=o("model.eval()"),GNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=a("code"),ONo=o("model.train()"),XNo=l(),Cie=a("p"),zNo=o("Examples:"),VNo=l(),f(e3.$$.fragment),kLe=l(),Wd=a("h2"),lv=a("a"),Mie=a("span"),f(o3.$$.fragment),WNo=l(),Eie=a("span"),QNo=o("AutoModelForObjectDetection"),xLe=l(),cr=a("div"),f(r3.$$.fragment),HNo=l(),Qd=a("p"),UNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),yie=a("code"),JNo=o("from_pretrained()"),YNo=o("class method or the "),wie=a("code"),KNo=o("from_config()"),ZNo=o(`class
method.`),eDo=l(),t3=a("p"),oDo=o("This class cannot be instantiated directly using "),Aie=a("code"),rDo=o("__init__()"),tDo=o(" (throws an error)."),aDo=l(),tt=a("div"),f(a3.$$.fragment),nDo=l(),Lie=a("p"),sDo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),lDo=l(),Hd=a("p"),iDo=o(`Note:
Loading a model from its configuration file does `),Bie=a("strong"),dDo=o("not"),cDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kie=a("code"),fDo=o("from_pretrained()"),mDo=o("to load the model weights."),gDo=l(),xie=a("p"),hDo=o("Examples:"),pDo=l(),f(n3.$$.fragment),_Do=l(),Ue=a("div"),f(s3.$$.fragment),uDo=l(),Rie=a("p"),bDo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vDo=l(),an=a("p"),TDo=o("The model class to instantiate is selected based on the "),Sie=a("code"),FDo=o("model_type"),CDo=o(` property of the config object (either
passed as an argument or loaded from `),Pie=a("code"),MDo=o("pretrained_model_name_or_path"),EDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ie=a("code"),yDo=o("pretrained_model_name_or_path"),wDo=o(":"),ADo=l(),Iie=a("ul"),iv=a("li"),jie=a("strong"),LDo=o("detr"),BDo=o(" \u2014 "),pN=a("a"),kDo=o("DetrForObjectDetection"),xDo=o(" (DETR model)"),RDo=l(),dv=a("p"),SDo=o("The model is set in evaluation mode by default using "),Nie=a("code"),PDo=o("model.eval()"),$Do=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=a("code"),IDo=o("model.train()"),jDo=l(),qie=a("p"),NDo=o("Examples:"),DDo=l(),f(l3.$$.fragment),RLe=l(),Ud=a("h2"),cv=a("a"),Gie=a("span"),f(i3.$$.fragment),qDo=l(),Oie=a("span"),GDo=o("AutoModelForImageSegmentation"),SLe=l(),fr=a("div"),f(d3.$$.fragment),ODo=l(),Jd=a("p"),XDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Xie=a("code"),zDo=o("from_pretrained()"),VDo=o("class method or the "),zie=a("code"),WDo=o("from_config()"),QDo=o(`class
method.`),HDo=l(),c3=a("p"),UDo=o("This class cannot be instantiated directly using "),Vie=a("code"),JDo=o("__init__()"),YDo=o(" (throws an error)."),KDo=l(),at=a("div"),f(f3.$$.fragment),ZDo=l(),Wie=a("p"),eqo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),oqo=l(),Yd=a("p"),rqo=o(`Note:
Loading a model from its configuration file does `),Qie=a("strong"),tqo=o("not"),aqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hie=a("code"),nqo=o("from_pretrained()"),sqo=o("to load the model weights."),lqo=l(),Uie=a("p"),iqo=o("Examples:"),dqo=l(),f(m3.$$.fragment),cqo=l(),Je=a("div"),f(g3.$$.fragment),fqo=l(),Jie=a("p"),mqo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),gqo=l(),nn=a("p"),hqo=o("The model class to instantiate is selected based on the "),Yie=a("code"),pqo=o("model_type"),_qo=o(` property of the config object (either
passed as an argument or loaded from `),Kie=a("code"),uqo=o("pretrained_model_name_or_path"),bqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zie=a("code"),vqo=o("pretrained_model_name_or_path"),Tqo=o(":"),Fqo=l(),ede=a("ul"),fv=a("li"),ode=a("strong"),Cqo=o("detr"),Mqo=o(" \u2014 "),_N=a("a"),Eqo=o("DetrForSegmentation"),yqo=o(" (DETR model)"),wqo=l(),mv=a("p"),Aqo=o("The model is set in evaluation mode by default using "),rde=a("code"),Lqo=o("model.eval()"),Bqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=a("code"),kqo=o("model.train()"),xqo=l(),ade=a("p"),Rqo=o("Examples:"),Sqo=l(),f(h3.$$.fragment),PLe=l(),Kd=a("h2"),gv=a("a"),nde=a("span"),f(p3.$$.fragment),Pqo=l(),sde=a("span"),$qo=o("AutoModelForSemanticSegmentation"),$Le=l(),mr=a("div"),f(_3.$$.fragment),Iqo=l(),Zd=a("p"),jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lde=a("code"),Nqo=o("from_pretrained()"),Dqo=o("class method or the "),ide=a("code"),qqo=o("from_config()"),Gqo=o(`class
method.`),Oqo=l(),u3=a("p"),Xqo=o("This class cannot be instantiated directly using "),dde=a("code"),zqo=o("__init__()"),Vqo=o(" (throws an error)."),Wqo=l(),nt=a("div"),f(b3.$$.fragment),Qqo=l(),cde=a("p"),Hqo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Uqo=l(),ec=a("p"),Jqo=o(`Note:
Loading a model from its configuration file does `),fde=a("strong"),Yqo=o("not"),Kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mde=a("code"),Zqo=o("from_pretrained()"),eGo=o("to load the model weights."),oGo=l(),gde=a("p"),rGo=o("Examples:"),tGo=l(),f(v3.$$.fragment),aGo=l(),Ye=a("div"),f(T3.$$.fragment),nGo=l(),hde=a("p"),sGo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lGo=l(),sn=a("p"),iGo=o("The model class to instantiate is selected based on the "),pde=a("code"),dGo=o("model_type"),cGo=o(` property of the config object (either
passed as an argument or loaded from `),_de=a("code"),fGo=o("pretrained_model_name_or_path"),mGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=a("code"),gGo=o("pretrained_model_name_or_path"),hGo=o(":"),pGo=l(),F3=a("ul"),hv=a("li"),bde=a("strong"),_Go=o("beit"),uGo=o(" \u2014 "),uN=a("a"),bGo=o("BeitForSemanticSegmentation"),vGo=o(" (BEiT model)"),TGo=l(),pv=a("li"),vde=a("strong"),FGo=o("segformer"),CGo=o(" \u2014 "),bN=a("a"),MGo=o("SegformerForSemanticSegmentation"),EGo=o(" (SegFormer model)"),yGo=l(),_v=a("p"),wGo=o("The model is set in evaluation mode by default using "),Tde=a("code"),AGo=o("model.eval()"),LGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fde=a("code"),BGo=o("model.train()"),kGo=l(),Cde=a("p"),xGo=o("Examples:"),RGo=l(),f(C3.$$.fragment),ILe=l(),oc=a("h2"),uv=a("a"),Mde=a("span"),f(M3.$$.fragment),SGo=l(),Ede=a("span"),PGo=o("TFAutoModel"),jLe=l(),gr=a("div"),f(E3.$$.fragment),$Go=l(),rc=a("p"),IGo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yde=a("code"),jGo=o("from_pretrained()"),NGo=o("class method or the "),wde=a("code"),DGo=o("from_config()"),qGo=o(`class
method.`),GGo=l(),y3=a("p"),OGo=o("This class cannot be instantiated directly using "),Ade=a("code"),XGo=o("__init__()"),zGo=o(" (throws an error)."),VGo=l(),st=a("div"),f(w3.$$.fragment),WGo=l(),Lde=a("p"),QGo=o("Instantiates one of the base model classes of the library from a configuration."),HGo=l(),tc=a("p"),UGo=o(`Note:
Loading a model from its configuration file does `),Bde=a("strong"),JGo=o("not"),YGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=a("code"),KGo=o("from_pretrained()"),ZGo=o("to load the model weights."),eOo=l(),xde=a("p"),oOo=o("Examples:"),rOo=l(),f(A3.$$.fragment),tOo=l(),go=a("div"),f(L3.$$.fragment),aOo=l(),Rde=a("p"),nOo=o("Instantiate one of the base model classes of the library from a pretrained model."),sOo=l(),ln=a("p"),lOo=o("The model class to instantiate is selected based on the "),Sde=a("code"),iOo=o("model_type"),dOo=o(` property of the config object (either
passed as an argument or loaded from `),Pde=a("code"),cOo=o("pretrained_model_name_or_path"),fOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=a("code"),mOo=o("pretrained_model_name_or_path"),gOo=o(":"),hOo=l(),B=a("ul"),bv=a("li"),Ide=a("strong"),pOo=o("albert"),_Oo=o(" \u2014 "),vN=a("a"),uOo=o("TFAlbertModel"),bOo=o(" (ALBERT model)"),vOo=l(),vv=a("li"),jde=a("strong"),TOo=o("bart"),FOo=o(" \u2014 "),TN=a("a"),COo=o("TFBartModel"),MOo=o(" (BART model)"),EOo=l(),Tv=a("li"),Nde=a("strong"),yOo=o("bert"),wOo=o(" \u2014 "),FN=a("a"),AOo=o("TFBertModel"),LOo=o(" (BERT model)"),BOo=l(),Fv=a("li"),Dde=a("strong"),kOo=o("blenderbot"),xOo=o(" \u2014 "),CN=a("a"),ROo=o("TFBlenderbotModel"),SOo=o(" (Blenderbot model)"),POo=l(),Cv=a("li"),qde=a("strong"),$Oo=o("blenderbot-small"),IOo=o(" \u2014 "),MN=a("a"),jOo=o("TFBlenderbotSmallModel"),NOo=o(" (BlenderbotSmall model)"),DOo=l(),Mv=a("li"),Gde=a("strong"),qOo=o("camembert"),GOo=o(" \u2014 "),EN=a("a"),OOo=o("TFCamembertModel"),XOo=o(" (CamemBERT model)"),zOo=l(),Ev=a("li"),Ode=a("strong"),VOo=o("clip"),WOo=o(" \u2014 "),yN=a("a"),QOo=o("TFCLIPModel"),HOo=o(" (CLIP model)"),UOo=l(),yv=a("li"),Xde=a("strong"),JOo=o("convbert"),YOo=o(" \u2014 "),wN=a("a"),KOo=o("TFConvBertModel"),ZOo=o(" (ConvBERT model)"),eXo=l(),wv=a("li"),zde=a("strong"),oXo=o("ctrl"),rXo=o(" \u2014 "),AN=a("a"),tXo=o("TFCTRLModel"),aXo=o(" (CTRL model)"),nXo=l(),Av=a("li"),Vde=a("strong"),sXo=o("deberta"),lXo=o(" \u2014 "),LN=a("a"),iXo=o("TFDebertaModel"),dXo=o(" (DeBERTa model)"),cXo=l(),Lv=a("li"),Wde=a("strong"),fXo=o("deberta-v2"),mXo=o(" \u2014 "),BN=a("a"),gXo=o("TFDebertaV2Model"),hXo=o(" (DeBERTa-v2 model)"),pXo=l(),Bv=a("li"),Qde=a("strong"),_Xo=o("distilbert"),uXo=o(" \u2014 "),kN=a("a"),bXo=o("TFDistilBertModel"),vXo=o(" (DistilBERT model)"),TXo=l(),kv=a("li"),Hde=a("strong"),FXo=o("dpr"),CXo=o(" \u2014 "),xN=a("a"),MXo=o("TFDPRQuestionEncoder"),EXo=o(" (DPR model)"),yXo=l(),xv=a("li"),Ude=a("strong"),wXo=o("electra"),AXo=o(" \u2014 "),RN=a("a"),LXo=o("TFElectraModel"),BXo=o(" (ELECTRA model)"),kXo=l(),Rv=a("li"),Jde=a("strong"),xXo=o("flaubert"),RXo=o(" \u2014 "),SN=a("a"),SXo=o("TFFlaubertModel"),PXo=o(" (FlauBERT model)"),$Xo=l(),Ss=a("li"),Yde=a("strong"),IXo=o("funnel"),jXo=o(" \u2014 "),PN=a("a"),NXo=o("TFFunnelModel"),DXo=o(" or "),$N=a("a"),qXo=o("TFFunnelBaseModel"),GXo=o(" (Funnel Transformer model)"),OXo=l(),Sv=a("li"),Kde=a("strong"),XXo=o("gpt2"),zXo=o(" \u2014 "),IN=a("a"),VXo=o("TFGPT2Model"),WXo=o(" (OpenAI GPT-2 model)"),QXo=l(),Pv=a("li"),Zde=a("strong"),HXo=o("hubert"),UXo=o(" \u2014 "),jN=a("a"),JXo=o("TFHubertModel"),YXo=o(" (Hubert model)"),KXo=l(),$v=a("li"),ece=a("strong"),ZXo=o("layoutlm"),ezo=o(" \u2014 "),NN=a("a"),ozo=o("TFLayoutLMModel"),rzo=o(" (LayoutLM model)"),tzo=l(),Iv=a("li"),oce=a("strong"),azo=o("led"),nzo=o(" \u2014 "),DN=a("a"),szo=o("TFLEDModel"),lzo=o(" (LED model)"),izo=l(),jv=a("li"),rce=a("strong"),dzo=o("longformer"),czo=o(" \u2014 "),qN=a("a"),fzo=o("TFLongformerModel"),mzo=o(" (Longformer model)"),gzo=l(),Nv=a("li"),tce=a("strong"),hzo=o("lxmert"),pzo=o(" \u2014 "),GN=a("a"),_zo=o("TFLxmertModel"),uzo=o(" (LXMERT model)"),bzo=l(),Dv=a("li"),ace=a("strong"),vzo=o("marian"),Tzo=o(" \u2014 "),ON=a("a"),Fzo=o("TFMarianModel"),Czo=o(" (Marian model)"),Mzo=l(),qv=a("li"),nce=a("strong"),Ezo=o("mbart"),yzo=o(" \u2014 "),XN=a("a"),wzo=o("TFMBartModel"),Azo=o(" (mBART model)"),Lzo=l(),Gv=a("li"),sce=a("strong"),Bzo=o("mobilebert"),kzo=o(" \u2014 "),zN=a("a"),xzo=o("TFMobileBertModel"),Rzo=o(" (MobileBERT model)"),Szo=l(),Ov=a("li"),lce=a("strong"),Pzo=o("mpnet"),$zo=o(" \u2014 "),VN=a("a"),Izo=o("TFMPNetModel"),jzo=o(" (MPNet model)"),Nzo=l(),Xv=a("li"),ice=a("strong"),Dzo=o("mt5"),qzo=o(" \u2014 "),WN=a("a"),Gzo=o("TFMT5Model"),Ozo=o(" (mT5 model)"),Xzo=l(),zv=a("li"),dce=a("strong"),zzo=o("openai-gpt"),Vzo=o(" \u2014 "),QN=a("a"),Wzo=o("TFOpenAIGPTModel"),Qzo=o(" (OpenAI GPT model)"),Hzo=l(),Vv=a("li"),cce=a("strong"),Uzo=o("pegasus"),Jzo=o(" \u2014 "),HN=a("a"),Yzo=o("TFPegasusModel"),Kzo=o(" (Pegasus model)"),Zzo=l(),Wv=a("li"),fce=a("strong"),eVo=o("rembert"),oVo=o(" \u2014 "),UN=a("a"),rVo=o("TFRemBertModel"),tVo=o(" (RemBERT model)"),aVo=l(),Qv=a("li"),mce=a("strong"),nVo=o("roberta"),sVo=o(" \u2014 "),JN=a("a"),lVo=o("TFRobertaModel"),iVo=o(" (RoBERTa model)"),dVo=l(),Hv=a("li"),gce=a("strong"),cVo=o("roformer"),fVo=o(" \u2014 "),YN=a("a"),mVo=o("TFRoFormerModel"),gVo=o(" (RoFormer model)"),hVo=l(),Uv=a("li"),hce=a("strong"),pVo=o("speech_to_text"),_Vo=o(" \u2014 "),KN=a("a"),uVo=o("TFSpeech2TextModel"),bVo=o(" (Speech2Text model)"),vVo=l(),Jv=a("li"),pce=a("strong"),TVo=o("t5"),FVo=o(" \u2014 "),ZN=a("a"),CVo=o("TFT5Model"),MVo=o(" (T5 model)"),EVo=l(),Yv=a("li"),_ce=a("strong"),yVo=o("tapas"),wVo=o(" \u2014 "),eD=a("a"),AVo=o("TFTapasModel"),LVo=o(" (TAPAS model)"),BVo=l(),Kv=a("li"),uce=a("strong"),kVo=o("transfo-xl"),xVo=o(" \u2014 "),oD=a("a"),RVo=o("TFTransfoXLModel"),SVo=o(" (Transformer-XL model)"),PVo=l(),Zv=a("li"),bce=a("strong"),$Vo=o("vit"),IVo=o(" \u2014 "),rD=a("a"),jVo=o("TFViTModel"),NVo=o(" (ViT model)"),DVo=l(),e6=a("li"),vce=a("strong"),qVo=o("wav2vec2"),GVo=o(" \u2014 "),tD=a("a"),OVo=o("TFWav2Vec2Model"),XVo=o(" (Wav2Vec2 model)"),zVo=l(),o6=a("li"),Tce=a("strong"),VVo=o("xlm"),WVo=o(" \u2014 "),aD=a("a"),QVo=o("TFXLMModel"),HVo=o(" (XLM model)"),UVo=l(),r6=a("li"),Fce=a("strong"),JVo=o("xlm-roberta"),YVo=o(" \u2014 "),nD=a("a"),KVo=o("TFXLMRobertaModel"),ZVo=o(" (XLM-RoBERTa model)"),eWo=l(),t6=a("li"),Cce=a("strong"),oWo=o("xlnet"),rWo=o(" \u2014 "),sD=a("a"),tWo=o("TFXLNetModel"),aWo=o(" (XLNet model)"),nWo=l(),Mce=a("p"),sWo=o("Examples:"),lWo=l(),f(B3.$$.fragment),NLe=l(),ac=a("h2"),a6=a("a"),Ece=a("span"),f(k3.$$.fragment),iWo=l(),yce=a("span"),dWo=o("TFAutoModelForPreTraining"),DLe=l(),hr=a("div"),f(x3.$$.fragment),cWo=l(),nc=a("p"),fWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wce=a("code"),mWo=o("from_pretrained()"),gWo=o("class method or the "),Ace=a("code"),hWo=o("from_config()"),pWo=o(`class
method.`),_Wo=l(),R3=a("p"),uWo=o("This class cannot be instantiated directly using "),Lce=a("code"),bWo=o("__init__()"),vWo=o(" (throws an error)."),TWo=l(),lt=a("div"),f(S3.$$.fragment),FWo=l(),Bce=a("p"),CWo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MWo=l(),sc=a("p"),EWo=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),yWo=o("not"),wWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xce=a("code"),AWo=o("from_pretrained()"),LWo=o("to load the model weights."),BWo=l(),Rce=a("p"),kWo=o("Examples:"),xWo=l(),f(P3.$$.fragment),RWo=l(),ho=a("div"),f($3.$$.fragment),SWo=l(),Sce=a("p"),PWo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$Wo=l(),dn=a("p"),IWo=o("The model class to instantiate is selected based on the "),Pce=a("code"),jWo=o("model_type"),NWo=o(` property of the config object (either
passed as an argument or loaded from `),$ce=a("code"),DWo=o("pretrained_model_name_or_path"),qWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=a("code"),GWo=o("pretrained_model_name_or_path"),OWo=o(":"),XWo=l(),H=a("ul"),n6=a("li"),jce=a("strong"),zWo=o("albert"),VWo=o(" \u2014 "),lD=a("a"),WWo=o("TFAlbertForPreTraining"),QWo=o(" (ALBERT model)"),HWo=l(),s6=a("li"),Nce=a("strong"),UWo=o("bart"),JWo=o(" \u2014 "),iD=a("a"),YWo=o("TFBartForConditionalGeneration"),KWo=o(" (BART model)"),ZWo=l(),l6=a("li"),Dce=a("strong"),eQo=o("bert"),oQo=o(" \u2014 "),dD=a("a"),rQo=o("TFBertForPreTraining"),tQo=o(" (BERT model)"),aQo=l(),i6=a("li"),qce=a("strong"),nQo=o("camembert"),sQo=o(" \u2014 "),cD=a("a"),lQo=o("TFCamembertForMaskedLM"),iQo=o(" (CamemBERT model)"),dQo=l(),d6=a("li"),Gce=a("strong"),cQo=o("ctrl"),fQo=o(" \u2014 "),fD=a("a"),mQo=o("TFCTRLLMHeadModel"),gQo=o(" (CTRL model)"),hQo=l(),c6=a("li"),Oce=a("strong"),pQo=o("distilbert"),_Qo=o(" \u2014 "),mD=a("a"),uQo=o("TFDistilBertForMaskedLM"),bQo=o(" (DistilBERT model)"),vQo=l(),f6=a("li"),Xce=a("strong"),TQo=o("electra"),FQo=o(" \u2014 "),gD=a("a"),CQo=o("TFElectraForPreTraining"),MQo=o(" (ELECTRA model)"),EQo=l(),m6=a("li"),zce=a("strong"),yQo=o("flaubert"),wQo=o(" \u2014 "),hD=a("a"),AQo=o("TFFlaubertWithLMHeadModel"),LQo=o(" (FlauBERT model)"),BQo=l(),g6=a("li"),Vce=a("strong"),kQo=o("funnel"),xQo=o(" \u2014 "),pD=a("a"),RQo=o("TFFunnelForPreTraining"),SQo=o(" (Funnel Transformer model)"),PQo=l(),h6=a("li"),Wce=a("strong"),$Qo=o("gpt2"),IQo=o(" \u2014 "),_D=a("a"),jQo=o("TFGPT2LMHeadModel"),NQo=o(" (OpenAI GPT-2 model)"),DQo=l(),p6=a("li"),Qce=a("strong"),qQo=o("layoutlm"),GQo=o(" \u2014 "),uD=a("a"),OQo=o("TFLayoutLMForMaskedLM"),XQo=o(" (LayoutLM model)"),zQo=l(),_6=a("li"),Hce=a("strong"),VQo=o("lxmert"),WQo=o(" \u2014 "),bD=a("a"),QQo=o("TFLxmertForPreTraining"),HQo=o(" (LXMERT model)"),UQo=l(),u6=a("li"),Uce=a("strong"),JQo=o("mobilebert"),YQo=o(" \u2014 "),vD=a("a"),KQo=o("TFMobileBertForPreTraining"),ZQo=o(" (MobileBERT model)"),eHo=l(),b6=a("li"),Jce=a("strong"),oHo=o("mpnet"),rHo=o(" \u2014 "),TD=a("a"),tHo=o("TFMPNetForMaskedLM"),aHo=o(" (MPNet model)"),nHo=l(),v6=a("li"),Yce=a("strong"),sHo=o("openai-gpt"),lHo=o(" \u2014 "),FD=a("a"),iHo=o("TFOpenAIGPTLMHeadModel"),dHo=o(" (OpenAI GPT model)"),cHo=l(),T6=a("li"),Kce=a("strong"),fHo=o("roberta"),mHo=o(" \u2014 "),CD=a("a"),gHo=o("TFRobertaForMaskedLM"),hHo=o(" (RoBERTa model)"),pHo=l(),F6=a("li"),Zce=a("strong"),_Ho=o("t5"),uHo=o(" \u2014 "),MD=a("a"),bHo=o("TFT5ForConditionalGeneration"),vHo=o(" (T5 model)"),THo=l(),C6=a("li"),efe=a("strong"),FHo=o("tapas"),CHo=o(" \u2014 "),ED=a("a"),MHo=o("TFTapasForMaskedLM"),EHo=o(" (TAPAS model)"),yHo=l(),M6=a("li"),ofe=a("strong"),wHo=o("transfo-xl"),AHo=o(" \u2014 "),yD=a("a"),LHo=o("TFTransfoXLLMHeadModel"),BHo=o(" (Transformer-XL model)"),kHo=l(),E6=a("li"),rfe=a("strong"),xHo=o("xlm"),RHo=o(" \u2014 "),wD=a("a"),SHo=o("TFXLMWithLMHeadModel"),PHo=o(" (XLM model)"),$Ho=l(),y6=a("li"),tfe=a("strong"),IHo=o("xlm-roberta"),jHo=o(" \u2014 "),AD=a("a"),NHo=o("TFXLMRobertaForMaskedLM"),DHo=o(" (XLM-RoBERTa model)"),qHo=l(),w6=a("li"),afe=a("strong"),GHo=o("xlnet"),OHo=o(" \u2014 "),LD=a("a"),XHo=o("TFXLNetLMHeadModel"),zHo=o(" (XLNet model)"),VHo=l(),nfe=a("p"),WHo=o("Examples:"),QHo=l(),f(I3.$$.fragment),qLe=l(),lc=a("h2"),A6=a("a"),sfe=a("span"),f(j3.$$.fragment),HHo=l(),lfe=a("span"),UHo=o("TFAutoModelForCausalLM"),GLe=l(),pr=a("div"),f(N3.$$.fragment),JHo=l(),ic=a("p"),YHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ife=a("code"),KHo=o("from_pretrained()"),ZHo=o("class method or the "),dfe=a("code"),eUo=o("from_config()"),oUo=o(`class
method.`),rUo=l(),D3=a("p"),tUo=o("This class cannot be instantiated directly using "),cfe=a("code"),aUo=o("__init__()"),nUo=o(" (throws an error)."),sUo=l(),it=a("div"),f(q3.$$.fragment),lUo=l(),ffe=a("p"),iUo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dUo=l(),dc=a("p"),cUo=o(`Note:
Loading a model from its configuration file does `),mfe=a("strong"),fUo=o("not"),mUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gfe=a("code"),gUo=o("from_pretrained()"),hUo=o("to load the model weights."),pUo=l(),hfe=a("p"),_Uo=o("Examples:"),uUo=l(),f(G3.$$.fragment),bUo=l(),po=a("div"),f(O3.$$.fragment),vUo=l(),pfe=a("p"),TUo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FUo=l(),cn=a("p"),CUo=o("The model class to instantiate is selected based on the "),_fe=a("code"),MUo=o("model_type"),EUo=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),yUo=o("pretrained_model_name_or_path"),wUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=a("code"),AUo=o("pretrained_model_name_or_path"),LUo=o(":"),BUo=l(),he=a("ul"),L6=a("li"),vfe=a("strong"),kUo=o("bert"),xUo=o(" \u2014 "),BD=a("a"),RUo=o("TFBertLMHeadModel"),SUo=o(" (BERT model)"),PUo=l(),B6=a("li"),Tfe=a("strong"),$Uo=o("ctrl"),IUo=o(" \u2014 "),kD=a("a"),jUo=o("TFCTRLLMHeadModel"),NUo=o(" (CTRL model)"),DUo=l(),k6=a("li"),Ffe=a("strong"),qUo=o("gpt2"),GUo=o(" \u2014 "),xD=a("a"),OUo=o("TFGPT2LMHeadModel"),XUo=o(" (OpenAI GPT-2 model)"),zUo=l(),x6=a("li"),Cfe=a("strong"),VUo=o("openai-gpt"),WUo=o(" \u2014 "),RD=a("a"),QUo=o("TFOpenAIGPTLMHeadModel"),HUo=o(" (OpenAI GPT model)"),UUo=l(),R6=a("li"),Mfe=a("strong"),JUo=o("rembert"),YUo=o(" \u2014 "),SD=a("a"),KUo=o("TFRemBertForCausalLM"),ZUo=o(" (RemBERT model)"),eJo=l(),S6=a("li"),Efe=a("strong"),oJo=o("roberta"),rJo=o(" \u2014 "),PD=a("a"),tJo=o("TFRobertaForCausalLM"),aJo=o(" (RoBERTa model)"),nJo=l(),P6=a("li"),yfe=a("strong"),sJo=o("roformer"),lJo=o(" \u2014 "),$D=a("a"),iJo=o("TFRoFormerForCausalLM"),dJo=o(" (RoFormer model)"),cJo=l(),$6=a("li"),wfe=a("strong"),fJo=o("transfo-xl"),mJo=o(" \u2014 "),ID=a("a"),gJo=o("TFTransfoXLLMHeadModel"),hJo=o(" (Transformer-XL model)"),pJo=l(),I6=a("li"),Afe=a("strong"),_Jo=o("xlm"),uJo=o(" \u2014 "),jD=a("a"),bJo=o("TFXLMWithLMHeadModel"),vJo=o(" (XLM model)"),TJo=l(),j6=a("li"),Lfe=a("strong"),FJo=o("xlnet"),CJo=o(" \u2014 "),ND=a("a"),MJo=o("TFXLNetLMHeadModel"),EJo=o(" (XLNet model)"),yJo=l(),Bfe=a("p"),wJo=o("Examples:"),AJo=l(),f(X3.$$.fragment),OLe=l(),cc=a("h2"),N6=a("a"),kfe=a("span"),f(z3.$$.fragment),LJo=l(),xfe=a("span"),BJo=o("TFAutoModelForImageClassification"),XLe=l(),_r=a("div"),f(V3.$$.fragment),kJo=l(),fc=a("p"),xJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rfe=a("code"),RJo=o("from_pretrained()"),SJo=o("class method or the "),Sfe=a("code"),PJo=o("from_config()"),$Jo=o(`class
method.`),IJo=l(),W3=a("p"),jJo=o("This class cannot be instantiated directly using "),Pfe=a("code"),NJo=o("__init__()"),DJo=o(" (throws an error)."),qJo=l(),dt=a("div"),f(Q3.$$.fragment),GJo=l(),$fe=a("p"),OJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XJo=l(),mc=a("p"),zJo=o(`Note:
Loading a model from its configuration file does `),Ife=a("strong"),VJo=o("not"),WJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jfe=a("code"),QJo=o("from_pretrained()"),HJo=o("to load the model weights."),UJo=l(),Nfe=a("p"),JJo=o("Examples:"),YJo=l(),f(H3.$$.fragment),KJo=l(),_o=a("div"),f(U3.$$.fragment),ZJo=l(),Dfe=a("p"),eYo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oYo=l(),fn=a("p"),rYo=o("The model class to instantiate is selected based on the "),qfe=a("code"),tYo=o("model_type"),aYo=o(` property of the config object (either
passed as an argument or loaded from `),Gfe=a("code"),nYo=o("pretrained_model_name_or_path"),sYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(":"),dYo=l(),Xfe=a("ul"),D6=a("li"),zfe=a("strong"),cYo=o("vit"),fYo=o(" \u2014 "),DD=a("a"),mYo=o("TFViTForImageClassification"),gYo=o(" (ViT model)"),hYo=l(),Vfe=a("p"),pYo=o("Examples:"),_Yo=l(),f(J3.$$.fragment),zLe=l(),gc=a("h2"),q6=a("a"),Wfe=a("span"),f(Y3.$$.fragment),uYo=l(),Qfe=a("span"),bYo=o("TFAutoModelForMaskedLM"),VLe=l(),ur=a("div"),f(K3.$$.fragment),vYo=l(),hc=a("p"),TYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hfe=a("code"),FYo=o("from_pretrained()"),CYo=o("class method or the "),Ufe=a("code"),MYo=o("from_config()"),EYo=o(`class
method.`),yYo=l(),Z3=a("p"),wYo=o("This class cannot be instantiated directly using "),Jfe=a("code"),AYo=o("__init__()"),LYo=o(" (throws an error)."),BYo=l(),ct=a("div"),f(ey.$$.fragment),kYo=l(),Yfe=a("p"),xYo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RYo=l(),pc=a("p"),SYo=o(`Note:
Loading a model from its configuration file does `),Kfe=a("strong"),PYo=o("not"),$Yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zfe=a("code"),IYo=o("from_pretrained()"),jYo=o("to load the model weights."),NYo=l(),eme=a("p"),DYo=o("Examples:"),qYo=l(),f(oy.$$.fragment),GYo=l(),uo=a("div"),f(ry.$$.fragment),OYo=l(),ome=a("p"),XYo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zYo=l(),mn=a("p"),VYo=o("The model class to instantiate is selected based on the "),rme=a("code"),WYo=o("model_type"),QYo=o(` property of the config object (either
passed as an argument or loaded from `),tme=a("code"),HYo=o("pretrained_model_name_or_path"),UYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ame=a("code"),JYo=o("pretrained_model_name_or_path"),YYo=o(":"),KYo=l(),Y=a("ul"),G6=a("li"),nme=a("strong"),ZYo=o("albert"),eKo=o(" \u2014 "),qD=a("a"),oKo=o("TFAlbertForMaskedLM"),rKo=o(" (ALBERT model)"),tKo=l(),O6=a("li"),sme=a("strong"),aKo=o("bert"),nKo=o(" \u2014 "),GD=a("a"),sKo=o("TFBertForMaskedLM"),lKo=o(" (BERT model)"),iKo=l(),X6=a("li"),lme=a("strong"),dKo=o("camembert"),cKo=o(" \u2014 "),OD=a("a"),fKo=o("TFCamembertForMaskedLM"),mKo=o(" (CamemBERT model)"),gKo=l(),z6=a("li"),ime=a("strong"),hKo=o("convbert"),pKo=o(" \u2014 "),XD=a("a"),_Ko=o("TFConvBertForMaskedLM"),uKo=o(" (ConvBERT model)"),bKo=l(),V6=a("li"),dme=a("strong"),vKo=o("deberta"),TKo=o(" \u2014 "),zD=a("a"),FKo=o("TFDebertaForMaskedLM"),CKo=o(" (DeBERTa model)"),MKo=l(),W6=a("li"),cme=a("strong"),EKo=o("deberta-v2"),yKo=o(" \u2014 "),VD=a("a"),wKo=o("TFDebertaV2ForMaskedLM"),AKo=o(" (DeBERTa-v2 model)"),LKo=l(),Q6=a("li"),fme=a("strong"),BKo=o("distilbert"),kKo=o(" \u2014 "),WD=a("a"),xKo=o("TFDistilBertForMaskedLM"),RKo=o(" (DistilBERT model)"),SKo=l(),H6=a("li"),mme=a("strong"),PKo=o("electra"),$Ko=o(" \u2014 "),QD=a("a"),IKo=o("TFElectraForMaskedLM"),jKo=o(" (ELECTRA model)"),NKo=l(),U6=a("li"),gme=a("strong"),DKo=o("flaubert"),qKo=o(" \u2014 "),HD=a("a"),GKo=o("TFFlaubertWithLMHeadModel"),OKo=o(" (FlauBERT model)"),XKo=l(),J6=a("li"),hme=a("strong"),zKo=o("funnel"),VKo=o(" \u2014 "),UD=a("a"),WKo=o("TFFunnelForMaskedLM"),QKo=o(" (Funnel Transformer model)"),HKo=l(),Y6=a("li"),pme=a("strong"),UKo=o("layoutlm"),JKo=o(" \u2014 "),JD=a("a"),YKo=o("TFLayoutLMForMaskedLM"),KKo=o(" (LayoutLM model)"),ZKo=l(),K6=a("li"),_me=a("strong"),eZo=o("longformer"),oZo=o(" \u2014 "),YD=a("a"),rZo=o("TFLongformerForMaskedLM"),tZo=o(" (Longformer model)"),aZo=l(),Z6=a("li"),ume=a("strong"),nZo=o("mobilebert"),sZo=o(" \u2014 "),KD=a("a"),lZo=o("TFMobileBertForMaskedLM"),iZo=o(" (MobileBERT model)"),dZo=l(),eT=a("li"),bme=a("strong"),cZo=o("mpnet"),fZo=o(" \u2014 "),ZD=a("a"),mZo=o("TFMPNetForMaskedLM"),gZo=o(" (MPNet model)"),hZo=l(),oT=a("li"),vme=a("strong"),pZo=o("rembert"),_Zo=o(" \u2014 "),eq=a("a"),uZo=o("TFRemBertForMaskedLM"),bZo=o(" (RemBERT model)"),vZo=l(),rT=a("li"),Tme=a("strong"),TZo=o("roberta"),FZo=o(" \u2014 "),oq=a("a"),CZo=o("TFRobertaForMaskedLM"),MZo=o(" (RoBERTa model)"),EZo=l(),tT=a("li"),Fme=a("strong"),yZo=o("roformer"),wZo=o(" \u2014 "),rq=a("a"),AZo=o("TFRoFormerForMaskedLM"),LZo=o(" (RoFormer model)"),BZo=l(),aT=a("li"),Cme=a("strong"),kZo=o("tapas"),xZo=o(" \u2014 "),tq=a("a"),RZo=o("TFTapasForMaskedLM"),SZo=o(" (TAPAS model)"),PZo=l(),nT=a("li"),Mme=a("strong"),$Zo=o("xlm"),IZo=o(" \u2014 "),aq=a("a"),jZo=o("TFXLMWithLMHeadModel"),NZo=o(" (XLM model)"),DZo=l(),sT=a("li"),Eme=a("strong"),qZo=o("xlm-roberta"),GZo=o(" \u2014 "),nq=a("a"),OZo=o("TFXLMRobertaForMaskedLM"),XZo=o(" (XLM-RoBERTa model)"),zZo=l(),yme=a("p"),VZo=o("Examples:"),WZo=l(),f(ty.$$.fragment),WLe=l(),_c=a("h2"),lT=a("a"),wme=a("span"),f(ay.$$.fragment),QZo=l(),Ame=a("span"),HZo=o("TFAutoModelForSeq2SeqLM"),QLe=l(),br=a("div"),f(ny.$$.fragment),UZo=l(),uc=a("p"),JZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Lme=a("code"),YZo=o("from_pretrained()"),KZo=o("class method or the "),Bme=a("code"),ZZo=o("from_config()"),eer=o(`class
method.`),oer=l(),sy=a("p"),rer=o("This class cannot be instantiated directly using "),kme=a("code"),ter=o("__init__()"),aer=o(" (throws an error)."),ner=l(),ft=a("div"),f(ly.$$.fragment),ser=l(),xme=a("p"),ler=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ier=l(),bc=a("p"),der=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),cer=o("not"),fer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sme=a("code"),mer=o("from_pretrained()"),ger=o("to load the model weights."),her=l(),Pme=a("p"),per=o("Examples:"),_er=l(),f(iy.$$.fragment),uer=l(),bo=a("div"),f(dy.$$.fragment),ber=l(),$me=a("p"),ver=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ter=l(),gn=a("p"),Fer=o("The model class to instantiate is selected based on the "),Ime=a("code"),Cer=o("model_type"),Mer=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),Eer=o("pretrained_model_name_or_path"),yer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),wer=o("pretrained_model_name_or_path"),Aer=o(":"),Ler=l(),pe=a("ul"),iT=a("li"),Dme=a("strong"),Ber=o("bart"),ker=o(" \u2014 "),sq=a("a"),xer=o("TFBartForConditionalGeneration"),Rer=o(" (BART model)"),Ser=l(),dT=a("li"),qme=a("strong"),Per=o("blenderbot"),$er=o(" \u2014 "),lq=a("a"),Ier=o("TFBlenderbotForConditionalGeneration"),jer=o(" (Blenderbot model)"),Ner=l(),cT=a("li"),Gme=a("strong"),Der=o("blenderbot-small"),qer=o(" \u2014 "),iq=a("a"),Ger=o("TFBlenderbotSmallForConditionalGeneration"),Oer=o(" (BlenderbotSmall model)"),Xer=l(),fT=a("li"),Ome=a("strong"),zer=o("encoder-decoder"),Ver=o(" \u2014 "),dq=a("a"),Wer=o("TFEncoderDecoderModel"),Qer=o(" (Encoder decoder model)"),Her=l(),mT=a("li"),Xme=a("strong"),Uer=o("led"),Jer=o(" \u2014 "),cq=a("a"),Yer=o("TFLEDForConditionalGeneration"),Ker=o(" (LED model)"),Zer=l(),gT=a("li"),zme=a("strong"),eor=o("marian"),oor=o(" \u2014 "),fq=a("a"),ror=o("TFMarianMTModel"),tor=o(" (Marian model)"),aor=l(),hT=a("li"),Vme=a("strong"),nor=o("mbart"),sor=o(" \u2014 "),mq=a("a"),lor=o("TFMBartForConditionalGeneration"),ior=o(" (mBART model)"),dor=l(),pT=a("li"),Wme=a("strong"),cor=o("mt5"),mor=o(" \u2014 "),gq=a("a"),gor=o("TFMT5ForConditionalGeneration"),hor=o(" (mT5 model)"),por=l(),_T=a("li"),Qme=a("strong"),_or=o("pegasus"),uor=o(" \u2014 "),hq=a("a"),bor=o("TFPegasusForConditionalGeneration"),vor=o(" (Pegasus model)"),Tor=l(),uT=a("li"),Hme=a("strong"),For=o("t5"),Cor=o(" \u2014 "),pq=a("a"),Mor=o("TFT5ForConditionalGeneration"),Eor=o(" (T5 model)"),yor=l(),Ume=a("p"),wor=o("Examples:"),Aor=l(),f(cy.$$.fragment),HLe=l(),vc=a("h2"),bT=a("a"),Jme=a("span"),f(fy.$$.fragment),Lor=l(),Yme=a("span"),Bor=o("TFAutoModelForSequenceClassification"),ULe=l(),vr=a("div"),f(my.$$.fragment),kor=l(),Tc=a("p"),xor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Kme=a("code"),Ror=o("from_pretrained()"),Sor=o("class method or the "),Zme=a("code"),Por=o("from_config()"),$or=o(`class
method.`),Ior=l(),gy=a("p"),jor=o("This class cannot be instantiated directly using "),ege=a("code"),Nor=o("__init__()"),Dor=o(" (throws an error)."),qor=l(),mt=a("div"),f(hy.$$.fragment),Gor=l(),oge=a("p"),Oor=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xor=l(),Fc=a("p"),zor=o(`Note:
Loading a model from its configuration file does `),rge=a("strong"),Vor=o("not"),Wor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tge=a("code"),Qor=o("from_pretrained()"),Hor=o("to load the model weights."),Uor=l(),age=a("p"),Jor=o("Examples:"),Yor=l(),f(py.$$.fragment),Kor=l(),vo=a("div"),f(_y.$$.fragment),Zor=l(),nge=a("p"),err=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),orr=l(),hn=a("p"),rrr=o("The model class to instantiate is selected based on the "),sge=a("code"),trr=o("model_type"),arr=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),nrr=o("pretrained_model_name_or_path"),srr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(":"),drr=l(),X=a("ul"),vT=a("li"),dge=a("strong"),crr=o("albert"),frr=o(" \u2014 "),_q=a("a"),mrr=o("TFAlbertForSequenceClassification"),grr=o(" (ALBERT model)"),hrr=l(),TT=a("li"),cge=a("strong"),prr=o("bert"),_rr=o(" \u2014 "),uq=a("a"),urr=o("TFBertForSequenceClassification"),brr=o(" (BERT model)"),vrr=l(),FT=a("li"),fge=a("strong"),Trr=o("camembert"),Frr=o(" \u2014 "),bq=a("a"),Crr=o("TFCamembertForSequenceClassification"),Mrr=o(" (CamemBERT model)"),Err=l(),CT=a("li"),mge=a("strong"),yrr=o("convbert"),wrr=o(" \u2014 "),vq=a("a"),Arr=o("TFConvBertForSequenceClassification"),Lrr=o(" (ConvBERT model)"),Brr=l(),MT=a("li"),gge=a("strong"),krr=o("ctrl"),xrr=o(" \u2014 "),Tq=a("a"),Rrr=o("TFCTRLForSequenceClassification"),Srr=o(" (CTRL model)"),Prr=l(),ET=a("li"),hge=a("strong"),$rr=o("deberta"),Irr=o(" \u2014 "),Fq=a("a"),jrr=o("TFDebertaForSequenceClassification"),Nrr=o(" (DeBERTa model)"),Drr=l(),yT=a("li"),pge=a("strong"),qrr=o("deberta-v2"),Grr=o(" \u2014 "),Cq=a("a"),Orr=o("TFDebertaV2ForSequenceClassification"),Xrr=o(" (DeBERTa-v2 model)"),zrr=l(),wT=a("li"),_ge=a("strong"),Vrr=o("distilbert"),Wrr=o(" \u2014 "),Mq=a("a"),Qrr=o("TFDistilBertForSequenceClassification"),Hrr=o(" (DistilBERT model)"),Urr=l(),AT=a("li"),uge=a("strong"),Jrr=o("electra"),Yrr=o(" \u2014 "),Eq=a("a"),Krr=o("TFElectraForSequenceClassification"),Zrr=o(" (ELECTRA model)"),etr=l(),LT=a("li"),bge=a("strong"),otr=o("flaubert"),rtr=o(" \u2014 "),yq=a("a"),ttr=o("TFFlaubertForSequenceClassification"),atr=o(" (FlauBERT model)"),ntr=l(),BT=a("li"),vge=a("strong"),str=o("funnel"),ltr=o(" \u2014 "),wq=a("a"),itr=o("TFFunnelForSequenceClassification"),dtr=o(" (Funnel Transformer model)"),ctr=l(),kT=a("li"),Tge=a("strong"),ftr=o("gpt2"),mtr=o(" \u2014 "),Aq=a("a"),gtr=o("TFGPT2ForSequenceClassification"),htr=o(" (OpenAI GPT-2 model)"),ptr=l(),xT=a("li"),Fge=a("strong"),_tr=o("layoutlm"),utr=o(" \u2014 "),Lq=a("a"),btr=o("TFLayoutLMForSequenceClassification"),vtr=o(" (LayoutLM model)"),Ttr=l(),RT=a("li"),Cge=a("strong"),Ftr=o("longformer"),Ctr=o(" \u2014 "),Bq=a("a"),Mtr=o("TFLongformerForSequenceClassification"),Etr=o(" (Longformer model)"),ytr=l(),ST=a("li"),Mge=a("strong"),wtr=o("mobilebert"),Atr=o(" \u2014 "),kq=a("a"),Ltr=o("TFMobileBertForSequenceClassification"),Btr=o(" (MobileBERT model)"),ktr=l(),PT=a("li"),Ege=a("strong"),xtr=o("mpnet"),Rtr=o(" \u2014 "),xq=a("a"),Str=o("TFMPNetForSequenceClassification"),Ptr=o(" (MPNet model)"),$tr=l(),$T=a("li"),yge=a("strong"),Itr=o("openai-gpt"),jtr=o(" \u2014 "),Rq=a("a"),Ntr=o("TFOpenAIGPTForSequenceClassification"),Dtr=o(" (OpenAI GPT model)"),qtr=l(),IT=a("li"),wge=a("strong"),Gtr=o("rembert"),Otr=o(" \u2014 "),Sq=a("a"),Xtr=o("TFRemBertForSequenceClassification"),ztr=o(" (RemBERT model)"),Vtr=l(),jT=a("li"),Age=a("strong"),Wtr=o("roberta"),Qtr=o(" \u2014 "),Pq=a("a"),Htr=o("TFRobertaForSequenceClassification"),Utr=o(" (RoBERTa model)"),Jtr=l(),NT=a("li"),Lge=a("strong"),Ytr=o("roformer"),Ktr=o(" \u2014 "),$q=a("a"),Ztr=o("TFRoFormerForSequenceClassification"),ear=o(" (RoFormer model)"),oar=l(),DT=a("li"),Bge=a("strong"),rar=o("tapas"),tar=o(" \u2014 "),Iq=a("a"),aar=o("TFTapasForSequenceClassification"),nar=o(" (TAPAS model)"),sar=l(),qT=a("li"),kge=a("strong"),lar=o("transfo-xl"),iar=o(" \u2014 "),jq=a("a"),dar=o("TFTransfoXLForSequenceClassification"),car=o(" (Transformer-XL model)"),far=l(),GT=a("li"),xge=a("strong"),mar=o("xlm"),gar=o(" \u2014 "),Nq=a("a"),har=o("TFXLMForSequenceClassification"),par=o(" (XLM model)"),_ar=l(),OT=a("li"),Rge=a("strong"),uar=o("xlm-roberta"),bar=o(" \u2014 "),Dq=a("a"),Tar=o("TFXLMRobertaForSequenceClassification"),Far=o(" (XLM-RoBERTa model)"),Car=l(),XT=a("li"),Sge=a("strong"),Mar=o("xlnet"),Ear=o(" \u2014 "),qq=a("a"),yar=o("TFXLNetForSequenceClassification"),war=o(" (XLNet model)"),Aar=l(),Pge=a("p"),Lar=o("Examples:"),Bar=l(),f(uy.$$.fragment),JLe=l(),Cc=a("h2"),zT=a("a"),$ge=a("span"),f(by.$$.fragment),kar=l(),Ige=a("span"),xar=o("TFAutoModelForMultipleChoice"),YLe=l(),Tr=a("div"),f(vy.$$.fragment),Rar=l(),Mc=a("p"),Sar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jge=a("code"),Par=o("from_pretrained()"),$ar=o("class method or the "),Nge=a("code"),Iar=o("from_config()"),jar=o(`class
method.`),Nar=l(),Ty=a("p"),Dar=o("This class cannot be instantiated directly using "),Dge=a("code"),qar=o("__init__()"),Gar=o(" (throws an error)."),Oar=l(),gt=a("div"),f(Fy.$$.fragment),Xar=l(),qge=a("p"),zar=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Var=l(),Ec=a("p"),War=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),Qar=o("not"),Har=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oge=a("code"),Uar=o("from_pretrained()"),Jar=o("to load the model weights."),Yar=l(),Xge=a("p"),Kar=o("Examples:"),Zar=l(),f(Cy.$$.fragment),enr=l(),To=a("div"),f(My.$$.fragment),onr=l(),zge=a("p"),rnr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tnr=l(),pn=a("p"),anr=o("The model class to instantiate is selected based on the "),Vge=a("code"),nnr=o("model_type"),snr=o(` property of the config object (either
passed as an argument or loaded from `),Wge=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),dnr=o("pretrained_model_name_or_path"),cnr=o(":"),fnr=l(),te=a("ul"),VT=a("li"),Hge=a("strong"),mnr=o("albert"),gnr=o(" \u2014 "),Gq=a("a"),hnr=o("TFAlbertForMultipleChoice"),pnr=o(" (ALBERT model)"),_nr=l(),WT=a("li"),Uge=a("strong"),unr=o("bert"),bnr=o(" \u2014 "),Oq=a("a"),vnr=o("TFBertForMultipleChoice"),Tnr=o(" (BERT model)"),Fnr=l(),QT=a("li"),Jge=a("strong"),Cnr=o("camembert"),Mnr=o(" \u2014 "),Xq=a("a"),Enr=o("TFCamembertForMultipleChoice"),ynr=o(" (CamemBERT model)"),wnr=l(),HT=a("li"),Yge=a("strong"),Anr=o("convbert"),Lnr=o(" \u2014 "),zq=a("a"),Bnr=o("TFConvBertForMultipleChoice"),knr=o(" (ConvBERT model)"),xnr=l(),UT=a("li"),Kge=a("strong"),Rnr=o("distilbert"),Snr=o(" \u2014 "),Vq=a("a"),Pnr=o("TFDistilBertForMultipleChoice"),$nr=o(" (DistilBERT model)"),Inr=l(),JT=a("li"),Zge=a("strong"),jnr=o("electra"),Nnr=o(" \u2014 "),Wq=a("a"),Dnr=o("TFElectraForMultipleChoice"),qnr=o(" (ELECTRA model)"),Gnr=l(),YT=a("li"),ehe=a("strong"),Onr=o("flaubert"),Xnr=o(" \u2014 "),Qq=a("a"),znr=o("TFFlaubertForMultipleChoice"),Vnr=o(" (FlauBERT model)"),Wnr=l(),KT=a("li"),ohe=a("strong"),Qnr=o("funnel"),Hnr=o(" \u2014 "),Hq=a("a"),Unr=o("TFFunnelForMultipleChoice"),Jnr=o(" (Funnel Transformer model)"),Ynr=l(),ZT=a("li"),rhe=a("strong"),Knr=o("longformer"),Znr=o(" \u2014 "),Uq=a("a"),esr=o("TFLongformerForMultipleChoice"),osr=o(" (Longformer model)"),rsr=l(),e7=a("li"),the=a("strong"),tsr=o("mobilebert"),asr=o(" \u2014 "),Jq=a("a"),nsr=o("TFMobileBertForMultipleChoice"),ssr=o(" (MobileBERT model)"),lsr=l(),o7=a("li"),ahe=a("strong"),isr=o("mpnet"),dsr=o(" \u2014 "),Yq=a("a"),csr=o("TFMPNetForMultipleChoice"),fsr=o(" (MPNet model)"),msr=l(),r7=a("li"),nhe=a("strong"),gsr=o("rembert"),hsr=o(" \u2014 "),Kq=a("a"),psr=o("TFRemBertForMultipleChoice"),_sr=o(" (RemBERT model)"),usr=l(),t7=a("li"),she=a("strong"),bsr=o("roberta"),vsr=o(" \u2014 "),Zq=a("a"),Tsr=o("TFRobertaForMultipleChoice"),Fsr=o(" (RoBERTa model)"),Csr=l(),a7=a("li"),lhe=a("strong"),Msr=o("roformer"),Esr=o(" \u2014 "),eG=a("a"),ysr=o("TFRoFormerForMultipleChoice"),wsr=o(" (RoFormer model)"),Asr=l(),n7=a("li"),ihe=a("strong"),Lsr=o("xlm"),Bsr=o(" \u2014 "),oG=a("a"),ksr=o("TFXLMForMultipleChoice"),xsr=o(" (XLM model)"),Rsr=l(),s7=a("li"),dhe=a("strong"),Ssr=o("xlm-roberta"),Psr=o(" \u2014 "),rG=a("a"),$sr=o("TFXLMRobertaForMultipleChoice"),Isr=o(" (XLM-RoBERTa model)"),jsr=l(),l7=a("li"),che=a("strong"),Nsr=o("xlnet"),Dsr=o(" \u2014 "),tG=a("a"),qsr=o("TFXLNetForMultipleChoice"),Gsr=o(" (XLNet model)"),Osr=l(),fhe=a("p"),Xsr=o("Examples:"),zsr=l(),f(Ey.$$.fragment),KLe=l(),yc=a("h2"),i7=a("a"),mhe=a("span"),f(yy.$$.fragment),Vsr=l(),ghe=a("span"),Wsr=o("TFAutoModelForTableQuestionAnswering"),ZLe=l(),Fr=a("div"),f(wy.$$.fragment),Qsr=l(),wc=a("p"),Hsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hhe=a("code"),Usr=o("from_pretrained()"),Jsr=o("class method or the "),phe=a("code"),Ysr=o("from_config()"),Ksr=o(`class
method.`),Zsr=l(),Ay=a("p"),elr=o("This class cannot be instantiated directly using "),_he=a("code"),olr=o("__init__()"),rlr=o(" (throws an error)."),tlr=l(),ht=a("div"),f(Ly.$$.fragment),alr=l(),uhe=a("p"),nlr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),slr=l(),Ac=a("p"),llr=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),ilr=o("not"),dlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vhe=a("code"),clr=o("from_pretrained()"),flr=o("to load the model weights."),mlr=l(),The=a("p"),glr=o("Examples:"),hlr=l(),f(By.$$.fragment),plr=l(),Fo=a("div"),f(ky.$$.fragment),_lr=l(),Fhe=a("p"),ulr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),blr=l(),_n=a("p"),vlr=o("The model class to instantiate is selected based on the "),Che=a("code"),Tlr=o("model_type"),Flr=o(` property of the config object (either
passed as an argument or loaded from `),Mhe=a("code"),Clr=o("pretrained_model_name_or_path"),Mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=a("code"),Elr=o("pretrained_model_name_or_path"),ylr=o(":"),wlr=l(),yhe=a("ul"),d7=a("li"),whe=a("strong"),Alr=o("tapas"),Llr=o(" \u2014 "),aG=a("a"),Blr=o("TFTapasForQuestionAnswering"),klr=o(" (TAPAS model)"),xlr=l(),Ahe=a("p"),Rlr=o("Examples:"),Slr=l(),f(xy.$$.fragment),e9e=l(),Lc=a("h2"),c7=a("a"),Lhe=a("span"),f(Ry.$$.fragment),Plr=l(),Bhe=a("span"),$lr=o("TFAutoModelForTokenClassification"),o9e=l(),Cr=a("div"),f(Sy.$$.fragment),Ilr=l(),Bc=a("p"),jlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),khe=a("code"),Nlr=o("from_pretrained()"),Dlr=o("class method or the "),xhe=a("code"),qlr=o("from_config()"),Glr=o(`class
method.`),Olr=l(),Py=a("p"),Xlr=o("This class cannot be instantiated directly using "),Rhe=a("code"),zlr=o("__init__()"),Vlr=o(" (throws an error)."),Wlr=l(),pt=a("div"),f($y.$$.fragment),Qlr=l(),She=a("p"),Hlr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ulr=l(),kc=a("p"),Jlr=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),Ylr=o("not"),Klr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$he=a("code"),Zlr=o("from_pretrained()"),eir=o("to load the model weights."),oir=l(),Ihe=a("p"),rir=o("Examples:"),tir=l(),f(Iy.$$.fragment),air=l(),Co=a("div"),f(jy.$$.fragment),nir=l(),jhe=a("p"),sir=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lir=l(),un=a("p"),iir=o("The model class to instantiate is selected based on the "),Nhe=a("code"),dir=o("model_type"),cir=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),fir=o("pretrained_model_name_or_path"),mir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),gir=o("pretrained_model_name_or_path"),hir=o(":"),pir=l(),K=a("ul"),f7=a("li"),Ghe=a("strong"),_ir=o("albert"),uir=o(" \u2014 "),nG=a("a"),bir=o("TFAlbertForTokenClassification"),vir=o(" (ALBERT model)"),Tir=l(),m7=a("li"),Ohe=a("strong"),Fir=o("bert"),Cir=o(" \u2014 "),sG=a("a"),Mir=o("TFBertForTokenClassification"),Eir=o(" (BERT model)"),yir=l(),g7=a("li"),Xhe=a("strong"),wir=o("camembert"),Air=o(" \u2014 "),lG=a("a"),Lir=o("TFCamembertForTokenClassification"),Bir=o(" (CamemBERT model)"),kir=l(),h7=a("li"),zhe=a("strong"),xir=o("convbert"),Rir=o(" \u2014 "),iG=a("a"),Sir=o("TFConvBertForTokenClassification"),Pir=o(" (ConvBERT model)"),$ir=l(),p7=a("li"),Vhe=a("strong"),Iir=o("deberta"),jir=o(" \u2014 "),dG=a("a"),Nir=o("TFDebertaForTokenClassification"),Dir=o(" (DeBERTa model)"),qir=l(),_7=a("li"),Whe=a("strong"),Gir=o("deberta-v2"),Oir=o(" \u2014 "),cG=a("a"),Xir=o("TFDebertaV2ForTokenClassification"),zir=o(" (DeBERTa-v2 model)"),Vir=l(),u7=a("li"),Qhe=a("strong"),Wir=o("distilbert"),Qir=o(" \u2014 "),fG=a("a"),Hir=o("TFDistilBertForTokenClassification"),Uir=o(" (DistilBERT model)"),Jir=l(),b7=a("li"),Hhe=a("strong"),Yir=o("electra"),Kir=o(" \u2014 "),mG=a("a"),Zir=o("TFElectraForTokenClassification"),edr=o(" (ELECTRA model)"),odr=l(),v7=a("li"),Uhe=a("strong"),rdr=o("flaubert"),tdr=o(" \u2014 "),gG=a("a"),adr=o("TFFlaubertForTokenClassification"),ndr=o(" (FlauBERT model)"),sdr=l(),T7=a("li"),Jhe=a("strong"),ldr=o("funnel"),idr=o(" \u2014 "),hG=a("a"),ddr=o("TFFunnelForTokenClassification"),cdr=o(" (Funnel Transformer model)"),fdr=l(),F7=a("li"),Yhe=a("strong"),mdr=o("layoutlm"),gdr=o(" \u2014 "),pG=a("a"),hdr=o("TFLayoutLMForTokenClassification"),pdr=o(" (LayoutLM model)"),_dr=l(),C7=a("li"),Khe=a("strong"),udr=o("longformer"),bdr=o(" \u2014 "),_G=a("a"),vdr=o("TFLongformerForTokenClassification"),Tdr=o(" (Longformer model)"),Fdr=l(),M7=a("li"),Zhe=a("strong"),Cdr=o("mobilebert"),Mdr=o(" \u2014 "),uG=a("a"),Edr=o("TFMobileBertForTokenClassification"),ydr=o(" (MobileBERT model)"),wdr=l(),E7=a("li"),epe=a("strong"),Adr=o("mpnet"),Ldr=o(" \u2014 "),bG=a("a"),Bdr=o("TFMPNetForTokenClassification"),kdr=o(" (MPNet model)"),xdr=l(),y7=a("li"),ope=a("strong"),Rdr=o("rembert"),Sdr=o(" \u2014 "),vG=a("a"),Pdr=o("TFRemBertForTokenClassification"),$dr=o(" (RemBERT model)"),Idr=l(),w7=a("li"),rpe=a("strong"),jdr=o("roberta"),Ndr=o(" \u2014 "),TG=a("a"),Ddr=o("TFRobertaForTokenClassification"),qdr=o(" (RoBERTa model)"),Gdr=l(),A7=a("li"),tpe=a("strong"),Odr=o("roformer"),Xdr=o(" \u2014 "),FG=a("a"),zdr=o("TFRoFormerForTokenClassification"),Vdr=o(" (RoFormer model)"),Wdr=l(),L7=a("li"),ape=a("strong"),Qdr=o("xlm"),Hdr=o(" \u2014 "),CG=a("a"),Udr=o("TFXLMForTokenClassification"),Jdr=o(" (XLM model)"),Ydr=l(),B7=a("li"),npe=a("strong"),Kdr=o("xlm-roberta"),Zdr=o(" \u2014 "),MG=a("a"),ecr=o("TFXLMRobertaForTokenClassification"),ocr=o(" (XLM-RoBERTa model)"),rcr=l(),k7=a("li"),spe=a("strong"),tcr=o("xlnet"),acr=o(" \u2014 "),EG=a("a"),ncr=o("TFXLNetForTokenClassification"),scr=o(" (XLNet model)"),lcr=l(),lpe=a("p"),icr=o("Examples:"),dcr=l(),f(Ny.$$.fragment),r9e=l(),xc=a("h2"),x7=a("a"),ipe=a("span"),f(Dy.$$.fragment),ccr=l(),dpe=a("span"),fcr=o("TFAutoModelForQuestionAnswering"),t9e=l(),Mr=a("div"),f(qy.$$.fragment),mcr=l(),Rc=a("p"),gcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cpe=a("code"),hcr=o("from_pretrained()"),pcr=o("class method or the "),fpe=a("code"),_cr=o("from_config()"),ucr=o(`class
method.`),bcr=l(),Gy=a("p"),vcr=o("This class cannot be instantiated directly using "),mpe=a("code"),Tcr=o("__init__()"),Fcr=o(" (throws an error)."),Ccr=l(),_t=a("div"),f(Oy.$$.fragment),Mcr=l(),gpe=a("p"),Ecr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ycr=l(),Sc=a("p"),wcr=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),Acr=o("not"),Lcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ppe=a("code"),Bcr=o("from_pretrained()"),kcr=o("to load the model weights."),xcr=l(),_pe=a("p"),Rcr=o("Examples:"),Scr=l(),f(Xy.$$.fragment),Pcr=l(),Mo=a("div"),f(zy.$$.fragment),$cr=l(),upe=a("p"),Icr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jcr=l(),bn=a("p"),Ncr=o("The model class to instantiate is selected based on the "),bpe=a("code"),Dcr=o("model_type"),qcr=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),Gcr=o("pretrained_model_name_or_path"),Ocr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),Xcr=o("pretrained_model_name_or_path"),zcr=o(":"),Vcr=l(),Z=a("ul"),R7=a("li"),Fpe=a("strong"),Wcr=o("albert"),Qcr=o(" \u2014 "),yG=a("a"),Hcr=o("TFAlbertForQuestionAnswering"),Ucr=o(" (ALBERT model)"),Jcr=l(),S7=a("li"),Cpe=a("strong"),Ycr=o("bert"),Kcr=o(" \u2014 "),wG=a("a"),Zcr=o("TFBertForQuestionAnswering"),efr=o(" (BERT model)"),ofr=l(),P7=a("li"),Mpe=a("strong"),rfr=o("camembert"),tfr=o(" \u2014 "),AG=a("a"),afr=o("TFCamembertForQuestionAnswering"),nfr=o(" (CamemBERT model)"),sfr=l(),$7=a("li"),Epe=a("strong"),lfr=o("convbert"),ifr=o(" \u2014 "),LG=a("a"),dfr=o("TFConvBertForQuestionAnswering"),cfr=o(" (ConvBERT model)"),ffr=l(),I7=a("li"),ype=a("strong"),mfr=o("deberta"),gfr=o(" \u2014 "),BG=a("a"),hfr=o("TFDebertaForQuestionAnswering"),pfr=o(" (DeBERTa model)"),_fr=l(),j7=a("li"),wpe=a("strong"),ufr=o("deberta-v2"),bfr=o(" \u2014 "),kG=a("a"),vfr=o("TFDebertaV2ForQuestionAnswering"),Tfr=o(" (DeBERTa-v2 model)"),Ffr=l(),N7=a("li"),Ape=a("strong"),Cfr=o("distilbert"),Mfr=o(" \u2014 "),xG=a("a"),Efr=o("TFDistilBertForQuestionAnswering"),yfr=o(" (DistilBERT model)"),wfr=l(),D7=a("li"),Lpe=a("strong"),Afr=o("electra"),Lfr=o(" \u2014 "),RG=a("a"),Bfr=o("TFElectraForQuestionAnswering"),kfr=o(" (ELECTRA model)"),xfr=l(),q7=a("li"),Bpe=a("strong"),Rfr=o("flaubert"),Sfr=o(" \u2014 "),SG=a("a"),Pfr=o("TFFlaubertForQuestionAnsweringSimple"),$fr=o(" (FlauBERT model)"),Ifr=l(),G7=a("li"),kpe=a("strong"),jfr=o("funnel"),Nfr=o(" \u2014 "),PG=a("a"),Dfr=o("TFFunnelForQuestionAnswering"),qfr=o(" (Funnel Transformer model)"),Gfr=l(),O7=a("li"),xpe=a("strong"),Ofr=o("longformer"),Xfr=o(" \u2014 "),$G=a("a"),zfr=o("TFLongformerForQuestionAnswering"),Vfr=o(" (Longformer model)"),Wfr=l(),X7=a("li"),Rpe=a("strong"),Qfr=o("mobilebert"),Hfr=o(" \u2014 "),IG=a("a"),Ufr=o("TFMobileBertForQuestionAnswering"),Jfr=o(" (MobileBERT model)"),Yfr=l(),z7=a("li"),Spe=a("strong"),Kfr=o("mpnet"),Zfr=o(" \u2014 "),jG=a("a"),emr=o("TFMPNetForQuestionAnswering"),omr=o(" (MPNet model)"),rmr=l(),V7=a("li"),Ppe=a("strong"),tmr=o("rembert"),amr=o(" \u2014 "),NG=a("a"),nmr=o("TFRemBertForQuestionAnswering"),smr=o(" (RemBERT model)"),lmr=l(),W7=a("li"),$pe=a("strong"),imr=o("roberta"),dmr=o(" \u2014 "),DG=a("a"),cmr=o("TFRobertaForQuestionAnswering"),fmr=o(" (RoBERTa model)"),mmr=l(),Q7=a("li"),Ipe=a("strong"),gmr=o("roformer"),hmr=o(" \u2014 "),qG=a("a"),pmr=o("TFRoFormerForQuestionAnswering"),_mr=o(" (RoFormer model)"),umr=l(),H7=a("li"),jpe=a("strong"),bmr=o("xlm"),vmr=o(" \u2014 "),GG=a("a"),Tmr=o("TFXLMForQuestionAnsweringSimple"),Fmr=o(" (XLM model)"),Cmr=l(),U7=a("li"),Npe=a("strong"),Mmr=o("xlm-roberta"),Emr=o(" \u2014 "),OG=a("a"),ymr=o("TFXLMRobertaForQuestionAnswering"),wmr=o(" (XLM-RoBERTa model)"),Amr=l(),J7=a("li"),Dpe=a("strong"),Lmr=o("xlnet"),Bmr=o(" \u2014 "),XG=a("a"),kmr=o("TFXLNetForQuestionAnsweringSimple"),xmr=o(" (XLNet model)"),Rmr=l(),qpe=a("p"),Smr=o("Examples:"),Pmr=l(),f(Vy.$$.fragment),a9e=l(),Pc=a("h2"),Y7=a("a"),Gpe=a("span"),f(Wy.$$.fragment),$mr=l(),Ope=a("span"),Imr=o("TFAutoModelForVision2Seq"),n9e=l(),Er=a("div"),f(Qy.$$.fragment),jmr=l(),$c=a("p"),Nmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Xpe=a("code"),Dmr=o("from_pretrained()"),qmr=o("class method or the "),zpe=a("code"),Gmr=o("from_config()"),Omr=o(`class
method.`),Xmr=l(),Hy=a("p"),zmr=o("This class cannot be instantiated directly using "),Vpe=a("code"),Vmr=o("__init__()"),Wmr=o(" (throws an error)."),Qmr=l(),ut=a("div"),f(Uy.$$.fragment),Hmr=l(),Wpe=a("p"),Umr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jmr=l(),Ic=a("p"),Ymr=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),Kmr=o("not"),Zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hpe=a("code"),egr=o("from_pretrained()"),ogr=o("to load the model weights."),rgr=l(),Upe=a("p"),tgr=o("Examples:"),agr=l(),f(Jy.$$.fragment),ngr=l(),Eo=a("div"),f(Yy.$$.fragment),sgr=l(),Jpe=a("p"),lgr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),igr=l(),vn=a("p"),dgr=o("The model class to instantiate is selected based on the "),Ype=a("code"),cgr=o("model_type"),fgr=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),mgr=o("pretrained_model_name_or_path"),ggr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),hgr=o("pretrained_model_name_or_path"),pgr=o(":"),_gr=l(),e_e=a("ul"),K7=a("li"),o_e=a("strong"),ugr=o("vision-encoder-decoder"),bgr=o(" \u2014 "),zG=a("a"),vgr=o("TFVisionEncoderDecoderModel"),Tgr=o(" (Vision Encoder decoder model)"),Fgr=l(),r_e=a("p"),Cgr=o("Examples:"),Mgr=l(),f(Ky.$$.fragment),s9e=l(),jc=a("h2"),Z7=a("a"),t_e=a("span"),f(Zy.$$.fragment),Egr=l(),a_e=a("span"),ygr=o("TFAutoModelForSpeechSeq2Seq"),l9e=l(),yr=a("div"),f(ew.$$.fragment),wgr=l(),Nc=a("p"),Agr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),n_e=a("code"),Lgr=o("from_pretrained()"),Bgr=o("class method or the "),s_e=a("code"),kgr=o("from_config()"),xgr=o(`class
method.`),Rgr=l(),ow=a("p"),Sgr=o("This class cannot be instantiated directly using "),l_e=a("code"),Pgr=o("__init__()"),$gr=o(" (throws an error)."),Igr=l(),bt=a("div"),f(rw.$$.fragment),jgr=l(),i_e=a("p"),Ngr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dgr=l(),Dc=a("p"),qgr=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),Ggr=o("not"),Ogr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c_e=a("code"),Xgr=o("from_pretrained()"),zgr=o("to load the model weights."),Vgr=l(),f_e=a("p"),Wgr=o("Examples:"),Qgr=l(),f(tw.$$.fragment),Hgr=l(),yo=a("div"),f(aw.$$.fragment),Ugr=l(),m_e=a("p"),Jgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ygr=l(),Tn=a("p"),Kgr=o("The model class to instantiate is selected based on the "),g_e=a("code"),Zgr=o("model_type"),ehr=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),ohr=o("pretrained_model_name_or_path"),rhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),thr=o("pretrained_model_name_or_path"),ahr=o(":"),nhr=l(),__e=a("ul"),e8=a("li"),u_e=a("strong"),shr=o("speech_to_text"),lhr=o(" \u2014 "),VG=a("a"),ihr=o("TFSpeech2TextForConditionalGeneration"),dhr=o(" (Speech2Text model)"),chr=l(),b_e=a("p"),fhr=o("Examples:"),mhr=l(),f(nw.$$.fragment),i9e=l(),qc=a("h2"),o8=a("a"),v_e=a("span"),f(sw.$$.fragment),ghr=l(),T_e=a("span"),hhr=o("FlaxAutoModel"),d9e=l(),wr=a("div"),f(lw.$$.fragment),phr=l(),Gc=a("p"),_hr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),F_e=a("code"),uhr=o("from_pretrained()"),bhr=o("class method or the "),C_e=a("code"),vhr=o("from_config()"),Thr=o(`class
method.`),Fhr=l(),iw=a("p"),Chr=o("This class cannot be instantiated directly using "),M_e=a("code"),Mhr=o("__init__()"),Ehr=o(" (throws an error)."),yhr=l(),vt=a("div"),f(dw.$$.fragment),whr=l(),E_e=a("p"),Ahr=o("Instantiates one of the base model classes of the library from a configuration."),Lhr=l(),Oc=a("p"),Bhr=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),khr=o("not"),xhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),w_e=a("code"),Rhr=o("from_pretrained()"),Shr=o("to load the model weights."),Phr=l(),A_e=a("p"),$hr=o("Examples:"),Ihr=l(),f(cw.$$.fragment),jhr=l(),wo=a("div"),f(fw.$$.fragment),Nhr=l(),L_e=a("p"),Dhr=o("Instantiate one of the base model classes of the library from a pretrained model."),qhr=l(),Fn=a("p"),Ghr=o("The model class to instantiate is selected based on the "),B_e=a("code"),Ohr=o("model_type"),Xhr=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),zhr=o("pretrained_model_name_or_path"),Vhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),Whr=o("pretrained_model_name_or_path"),Qhr=o(":"),Hhr=l(),V=a("ul"),r8=a("li"),R_e=a("strong"),Uhr=o("albert"),Jhr=o(" \u2014 "),WG=a("a"),Yhr=o("FlaxAlbertModel"),Khr=o(" (ALBERT model)"),Zhr=l(),t8=a("li"),S_e=a("strong"),epr=o("bart"),opr=o(" \u2014 "),QG=a("a"),rpr=o("FlaxBartModel"),tpr=o(" (BART model)"),apr=l(),a8=a("li"),P_e=a("strong"),npr=o("beit"),spr=o(" \u2014 "),HG=a("a"),lpr=o("FlaxBeitModel"),ipr=o(" (BEiT model)"),dpr=l(),n8=a("li"),$_e=a("strong"),cpr=o("bert"),fpr=o(" \u2014 "),UG=a("a"),mpr=o("FlaxBertModel"),gpr=o(" (BERT model)"),hpr=l(),s8=a("li"),I_e=a("strong"),ppr=o("big_bird"),_pr=o(" \u2014 "),JG=a("a"),upr=o("FlaxBigBirdModel"),bpr=o(" (BigBird model)"),vpr=l(),l8=a("li"),j_e=a("strong"),Tpr=o("blenderbot"),Fpr=o(" \u2014 "),YG=a("a"),Cpr=o("FlaxBlenderbotModel"),Mpr=o(" (Blenderbot model)"),Epr=l(),i8=a("li"),N_e=a("strong"),ypr=o("blenderbot-small"),wpr=o(" \u2014 "),KG=a("a"),Apr=o("FlaxBlenderbotSmallModel"),Lpr=o(" (BlenderbotSmall model)"),Bpr=l(),d8=a("li"),D_e=a("strong"),kpr=o("clip"),xpr=o(" \u2014 "),ZG=a("a"),Rpr=o("FlaxCLIPModel"),Spr=o(" (CLIP model)"),Ppr=l(),c8=a("li"),q_e=a("strong"),$pr=o("distilbert"),Ipr=o(" \u2014 "),eO=a("a"),jpr=o("FlaxDistilBertModel"),Npr=o(" (DistilBERT model)"),Dpr=l(),f8=a("li"),G_e=a("strong"),qpr=o("electra"),Gpr=o(" \u2014 "),oO=a("a"),Opr=o("FlaxElectraModel"),Xpr=o(" (ELECTRA model)"),zpr=l(),m8=a("li"),O_e=a("strong"),Vpr=o("gpt2"),Wpr=o(" \u2014 "),rO=a("a"),Qpr=o("FlaxGPT2Model"),Hpr=o(" (OpenAI GPT-2 model)"),Upr=l(),g8=a("li"),X_e=a("strong"),Jpr=o("gpt_neo"),Ypr=o(" \u2014 "),tO=a("a"),Kpr=o("FlaxGPTNeoModel"),Zpr=o(" (GPT Neo model)"),e_r=l(),h8=a("li"),z_e=a("strong"),o_r=o("gptj"),r_r=o(" \u2014 "),aO=a("a"),t_r=o("FlaxGPTJModel"),a_r=o(" (GPT-J model)"),n_r=l(),p8=a("li"),V_e=a("strong"),s_r=o("marian"),l_r=o(" \u2014 "),nO=a("a"),i_r=o("FlaxMarianModel"),d_r=o(" (Marian model)"),c_r=l(),_8=a("li"),W_e=a("strong"),f_r=o("mbart"),m_r=o(" \u2014 "),sO=a("a"),g_r=o("FlaxMBartModel"),h_r=o(" (mBART model)"),p_r=l(),u8=a("li"),Q_e=a("strong"),__r=o("mt5"),u_r=o(" \u2014 "),lO=a("a"),b_r=o("FlaxMT5Model"),v_r=o(" (mT5 model)"),T_r=l(),b8=a("li"),H_e=a("strong"),F_r=o("pegasus"),C_r=o(" \u2014 "),iO=a("a"),M_r=o("FlaxPegasusModel"),E_r=o(" (Pegasus model)"),y_r=l(),v8=a("li"),U_e=a("strong"),w_r=o("roberta"),A_r=o(" \u2014 "),dO=a("a"),L_r=o("FlaxRobertaModel"),B_r=o(" (RoBERTa model)"),k_r=l(),T8=a("li"),J_e=a("strong"),x_r=o("roformer"),R_r=o(" \u2014 "),cO=a("a"),S_r=o("FlaxRoFormerModel"),P_r=o(" (RoFormer model)"),$_r=l(),F8=a("li"),Y_e=a("strong"),I_r=o("t5"),j_r=o(" \u2014 "),fO=a("a"),N_r=o("FlaxT5Model"),D_r=o(" (T5 model)"),q_r=l(),C8=a("li"),K_e=a("strong"),G_r=o("vision-text-dual-encoder"),O_r=o(" \u2014 "),mO=a("a"),X_r=o("FlaxVisionTextDualEncoderModel"),z_r=o(" (VisionTextDualEncoder model)"),V_r=l(),M8=a("li"),Z_e=a("strong"),W_r=o("vit"),Q_r=o(" \u2014 "),gO=a("a"),H_r=o("FlaxViTModel"),U_r=o(" (ViT model)"),J_r=l(),E8=a("li"),eue=a("strong"),Y_r=o("wav2vec2"),K_r=o(" \u2014 "),hO=a("a"),Z_r=o("FlaxWav2Vec2Model"),eur=o(" (Wav2Vec2 model)"),our=l(),y8=a("li"),oue=a("strong"),rur=o("xglm"),tur=o(" \u2014 "),pO=a("a"),aur=o("FlaxXGLMModel"),nur=o(" (XGLM model)"),sur=l(),rue=a("p"),lur=o("Examples:"),iur=l(),f(mw.$$.fragment),c9e=l(),Xc=a("h2"),w8=a("a"),tue=a("span"),f(gw.$$.fragment),dur=l(),aue=a("span"),cur=o("FlaxAutoModelForCausalLM"),f9e=l(),Ar=a("div"),f(hw.$$.fragment),fur=l(),zc=a("p"),mur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nue=a("code"),gur=o("from_pretrained()"),hur=o("class method or the "),sue=a("code"),pur=o("from_config()"),_ur=o(`class
method.`),uur=l(),pw=a("p"),bur=o("This class cannot be instantiated directly using "),lue=a("code"),vur=o("__init__()"),Tur=o(" (throws an error)."),Fur=l(),Tt=a("div"),f(_w.$$.fragment),Cur=l(),iue=a("p"),Mur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Eur=l(),Vc=a("p"),yur=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),wur=o("not"),Aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=a("code"),Lur=o("from_pretrained()"),Bur=o("to load the model weights."),kur=l(),fue=a("p"),xur=o("Examples:"),Rur=l(),f(uw.$$.fragment),Sur=l(),Ao=a("div"),f(bw.$$.fragment),Pur=l(),mue=a("p"),$ur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Iur=l(),Cn=a("p"),jur=o("The model class to instantiate is selected based on the "),gue=a("code"),Nur=o("model_type"),Dur=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),qur=o("pretrained_model_name_or_path"),Gur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),Our=o("pretrained_model_name_or_path"),Xur=o(":"),zur=l(),Mn=a("ul"),A8=a("li"),_ue=a("strong"),Vur=o("gpt2"),Wur=o(" \u2014 "),_O=a("a"),Qur=o("FlaxGPT2LMHeadModel"),Hur=o(" (OpenAI GPT-2 model)"),Uur=l(),L8=a("li"),uue=a("strong"),Jur=o("gpt_neo"),Yur=o(" \u2014 "),uO=a("a"),Kur=o("FlaxGPTNeoForCausalLM"),Zur=o(" (GPT Neo model)"),e1r=l(),B8=a("li"),bue=a("strong"),o1r=o("gptj"),r1r=o(" \u2014 "),bO=a("a"),t1r=o("FlaxGPTJForCausalLM"),a1r=o(" (GPT-J model)"),n1r=l(),k8=a("li"),vue=a("strong"),s1r=o("xglm"),l1r=o(" \u2014 "),vO=a("a"),i1r=o("FlaxXGLMForCausalLM"),d1r=o(" (XGLM model)"),c1r=l(),Tue=a("p"),f1r=o("Examples:"),m1r=l(),f(vw.$$.fragment),m9e=l(),Wc=a("h2"),x8=a("a"),Fue=a("span"),f(Tw.$$.fragment),g1r=l(),Cue=a("span"),h1r=o("FlaxAutoModelForPreTraining"),g9e=l(),Lr=a("div"),f(Fw.$$.fragment),p1r=l(),Qc=a("p"),_1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Mue=a("code"),u1r=o("from_pretrained()"),b1r=o("class method or the "),Eue=a("code"),v1r=o("from_config()"),T1r=o(`class
method.`),F1r=l(),Cw=a("p"),C1r=o("This class cannot be instantiated directly using "),yue=a("code"),M1r=o("__init__()"),E1r=o(" (throws an error)."),y1r=l(),Ft=a("div"),f(Mw.$$.fragment),w1r=l(),wue=a("p"),A1r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L1r=l(),Hc=a("p"),B1r=o(`Note:
Loading a model from its configuration file does `),Aue=a("strong"),k1r=o("not"),x1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lue=a("code"),R1r=o("from_pretrained()"),S1r=o("to load the model weights."),P1r=l(),Bue=a("p"),$1r=o("Examples:"),I1r=l(),f(Ew.$$.fragment),j1r=l(),Lo=a("div"),f(yw.$$.fragment),N1r=l(),kue=a("p"),D1r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),q1r=l(),En=a("p"),G1r=o("The model class to instantiate is selected based on the "),xue=a("code"),O1r=o("model_type"),X1r=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),z1r=o("pretrained_model_name_or_path"),V1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),W1r=o("pretrained_model_name_or_path"),Q1r=o(":"),H1r=l(),fe=a("ul"),R8=a("li"),Pue=a("strong"),U1r=o("albert"),J1r=o(" \u2014 "),TO=a("a"),Y1r=o("FlaxAlbertForPreTraining"),K1r=o(" (ALBERT model)"),Z1r=l(),S8=a("li"),$ue=a("strong"),ebr=o("bart"),obr=o(" \u2014 "),FO=a("a"),rbr=o("FlaxBartForConditionalGeneration"),tbr=o(" (BART model)"),abr=l(),P8=a("li"),Iue=a("strong"),nbr=o("bert"),sbr=o(" \u2014 "),CO=a("a"),lbr=o("FlaxBertForPreTraining"),ibr=o(" (BERT model)"),dbr=l(),$8=a("li"),jue=a("strong"),cbr=o("big_bird"),fbr=o(" \u2014 "),MO=a("a"),mbr=o("FlaxBigBirdForPreTraining"),gbr=o(" (BigBird model)"),hbr=l(),I8=a("li"),Nue=a("strong"),pbr=o("electra"),_br=o(" \u2014 "),EO=a("a"),ubr=o("FlaxElectraForPreTraining"),bbr=o(" (ELECTRA model)"),vbr=l(),j8=a("li"),Due=a("strong"),Tbr=o("mbart"),Fbr=o(" \u2014 "),yO=a("a"),Cbr=o("FlaxMBartForConditionalGeneration"),Mbr=o(" (mBART model)"),Ebr=l(),N8=a("li"),que=a("strong"),ybr=o("mt5"),wbr=o(" \u2014 "),wO=a("a"),Abr=o("FlaxMT5ForConditionalGeneration"),Lbr=o(" (mT5 model)"),Bbr=l(),D8=a("li"),Gue=a("strong"),kbr=o("roberta"),xbr=o(" \u2014 "),AO=a("a"),Rbr=o("FlaxRobertaForMaskedLM"),Sbr=o(" (RoBERTa model)"),Pbr=l(),q8=a("li"),Oue=a("strong"),$br=o("roformer"),Ibr=o(" \u2014 "),LO=a("a"),jbr=o("FlaxRoFormerForMaskedLM"),Nbr=o(" (RoFormer model)"),Dbr=l(),G8=a("li"),Xue=a("strong"),qbr=o("t5"),Gbr=o(" \u2014 "),BO=a("a"),Obr=o("FlaxT5ForConditionalGeneration"),Xbr=o(" (T5 model)"),zbr=l(),O8=a("li"),zue=a("strong"),Vbr=o("wav2vec2"),Wbr=o(" \u2014 "),kO=a("a"),Qbr=o("FlaxWav2Vec2ForPreTraining"),Hbr=o(" (Wav2Vec2 model)"),Ubr=l(),Vue=a("p"),Jbr=o("Examples:"),Ybr=l(),f(ww.$$.fragment),h9e=l(),Uc=a("h2"),X8=a("a"),Wue=a("span"),f(Aw.$$.fragment),Kbr=l(),Que=a("span"),Zbr=o("FlaxAutoModelForMaskedLM"),p9e=l(),Br=a("div"),f(Lw.$$.fragment),e5r=l(),Jc=a("p"),o5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hue=a("code"),r5r=o("from_pretrained()"),t5r=o("class method or the "),Uue=a("code"),a5r=o("from_config()"),n5r=o(`class
method.`),s5r=l(),Bw=a("p"),l5r=o("This class cannot be instantiated directly using "),Jue=a("code"),i5r=o("__init__()"),d5r=o(" (throws an error)."),c5r=l(),Ct=a("div"),f(kw.$$.fragment),f5r=l(),Yue=a("p"),m5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),g5r=l(),Yc=a("p"),h5r=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),p5r=o("not"),_5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zue=a("code"),u5r=o("from_pretrained()"),b5r=o("to load the model weights."),v5r=l(),e1e=a("p"),T5r=o("Examples:"),F5r=l(),f(xw.$$.fragment),C5r=l(),Bo=a("div"),f(Rw.$$.fragment),M5r=l(),o1e=a("p"),E5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y5r=l(),yn=a("p"),w5r=o("The model class to instantiate is selected based on the "),r1e=a("code"),A5r=o("model_type"),L5r=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),B5r=o("pretrained_model_name_or_path"),k5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),x5r=o("pretrained_model_name_or_path"),R5r=o(":"),S5r=l(),ve=a("ul"),z8=a("li"),n1e=a("strong"),P5r=o("albert"),$5r=o(" \u2014 "),xO=a("a"),I5r=o("FlaxAlbertForMaskedLM"),j5r=o(" (ALBERT model)"),N5r=l(),V8=a("li"),s1e=a("strong"),D5r=o("bart"),q5r=o(" \u2014 "),RO=a("a"),G5r=o("FlaxBartForConditionalGeneration"),O5r=o(" (BART model)"),X5r=l(),W8=a("li"),l1e=a("strong"),z5r=o("bert"),V5r=o(" \u2014 "),SO=a("a"),W5r=o("FlaxBertForMaskedLM"),Q5r=o(" (BERT model)"),H5r=l(),Q8=a("li"),i1e=a("strong"),U5r=o("big_bird"),J5r=o(" \u2014 "),PO=a("a"),Y5r=o("FlaxBigBirdForMaskedLM"),K5r=o(" (BigBird model)"),Z5r=l(),H8=a("li"),d1e=a("strong"),e2r=o("distilbert"),o2r=o(" \u2014 "),$O=a("a"),r2r=o("FlaxDistilBertForMaskedLM"),t2r=o(" (DistilBERT model)"),a2r=l(),U8=a("li"),c1e=a("strong"),n2r=o("electra"),s2r=o(" \u2014 "),IO=a("a"),l2r=o("FlaxElectraForMaskedLM"),i2r=o(" (ELECTRA model)"),d2r=l(),J8=a("li"),f1e=a("strong"),c2r=o("mbart"),f2r=o(" \u2014 "),jO=a("a"),m2r=o("FlaxMBartForConditionalGeneration"),g2r=o(" (mBART model)"),h2r=l(),Y8=a("li"),m1e=a("strong"),p2r=o("roberta"),_2r=o(" \u2014 "),NO=a("a"),u2r=o("FlaxRobertaForMaskedLM"),b2r=o(" (RoBERTa model)"),v2r=l(),K8=a("li"),g1e=a("strong"),T2r=o("roformer"),F2r=o(" \u2014 "),DO=a("a"),C2r=o("FlaxRoFormerForMaskedLM"),M2r=o(" (RoFormer model)"),E2r=l(),h1e=a("p"),y2r=o("Examples:"),w2r=l(),f(Sw.$$.fragment),_9e=l(),Kc=a("h2"),Z8=a("a"),p1e=a("span"),f(Pw.$$.fragment),A2r=l(),_1e=a("span"),L2r=o("FlaxAutoModelForSeq2SeqLM"),u9e=l(),kr=a("div"),f($w.$$.fragment),B2r=l(),Zc=a("p"),k2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),u1e=a("code"),x2r=o("from_pretrained()"),R2r=o("class method or the "),b1e=a("code"),S2r=o("from_config()"),P2r=o(`class
method.`),$2r=l(),Iw=a("p"),I2r=o("This class cannot be instantiated directly using "),v1e=a("code"),j2r=o("__init__()"),N2r=o(" (throws an error)."),D2r=l(),Mt=a("div"),f(jw.$$.fragment),q2r=l(),T1e=a("p"),G2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O2r=l(),ef=a("p"),X2r=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),z2r=o("not"),V2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),C1e=a("code"),W2r=o("from_pretrained()"),Q2r=o("to load the model weights."),H2r=l(),M1e=a("p"),U2r=o("Examples:"),J2r=l(),f(Nw.$$.fragment),Y2r=l(),ko=a("div"),f(Dw.$$.fragment),K2r=l(),E1e=a("p"),Z2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),evr=l(),wn=a("p"),ovr=o("The model class to instantiate is selected based on the "),y1e=a("code"),rvr=o("model_type"),tvr=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),avr=o("pretrained_model_name_or_path"),nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(":"),ivr=l(),Te=a("ul"),eF=a("li"),L1e=a("strong"),dvr=o("bart"),cvr=o(" \u2014 "),qO=a("a"),fvr=o("FlaxBartForConditionalGeneration"),mvr=o(" (BART model)"),gvr=l(),oF=a("li"),B1e=a("strong"),hvr=o("blenderbot"),pvr=o(" \u2014 "),GO=a("a"),_vr=o("FlaxBlenderbotForConditionalGeneration"),uvr=o(" (Blenderbot model)"),bvr=l(),rF=a("li"),k1e=a("strong"),vvr=o("blenderbot-small"),Tvr=o(" \u2014 "),OO=a("a"),Fvr=o("FlaxBlenderbotSmallForConditionalGeneration"),Cvr=o(" (BlenderbotSmall model)"),Mvr=l(),tF=a("li"),x1e=a("strong"),Evr=o("encoder-decoder"),yvr=o(" \u2014 "),XO=a("a"),wvr=o("FlaxEncoderDecoderModel"),Avr=o(" (Encoder decoder model)"),Lvr=l(),aF=a("li"),R1e=a("strong"),Bvr=o("marian"),kvr=o(" \u2014 "),zO=a("a"),xvr=o("FlaxMarianMTModel"),Rvr=o(" (Marian model)"),Svr=l(),nF=a("li"),S1e=a("strong"),Pvr=o("mbart"),$vr=o(" \u2014 "),VO=a("a"),Ivr=o("FlaxMBartForConditionalGeneration"),jvr=o(" (mBART model)"),Nvr=l(),sF=a("li"),P1e=a("strong"),Dvr=o("mt5"),qvr=o(" \u2014 "),WO=a("a"),Gvr=o("FlaxMT5ForConditionalGeneration"),Ovr=o(" (mT5 model)"),Xvr=l(),lF=a("li"),$1e=a("strong"),zvr=o("pegasus"),Vvr=o(" \u2014 "),QO=a("a"),Wvr=o("FlaxPegasusForConditionalGeneration"),Qvr=o(" (Pegasus model)"),Hvr=l(),iF=a("li"),I1e=a("strong"),Uvr=o("t5"),Jvr=o(" \u2014 "),HO=a("a"),Yvr=o("FlaxT5ForConditionalGeneration"),Kvr=o(" (T5 model)"),Zvr=l(),j1e=a("p"),e6r=o("Examples:"),o6r=l(),f(qw.$$.fragment),b9e=l(),of=a("h2"),dF=a("a"),N1e=a("span"),f(Gw.$$.fragment),r6r=l(),D1e=a("span"),t6r=o("FlaxAutoModelForSequenceClassification"),v9e=l(),xr=a("div"),f(Ow.$$.fragment),a6r=l(),rf=a("p"),n6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),q1e=a("code"),s6r=o("from_pretrained()"),l6r=o("class method or the "),G1e=a("code"),i6r=o("from_config()"),d6r=o(`class
method.`),c6r=l(),Xw=a("p"),f6r=o("This class cannot be instantiated directly using "),O1e=a("code"),m6r=o("__init__()"),g6r=o(" (throws an error)."),h6r=l(),Et=a("div"),f(zw.$$.fragment),p6r=l(),X1e=a("p"),_6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),u6r=l(),tf=a("p"),b6r=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),v6r=o("not"),T6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V1e=a("code"),F6r=o("from_pretrained()"),C6r=o("to load the model weights."),M6r=l(),W1e=a("p"),E6r=o("Examples:"),y6r=l(),f(Vw.$$.fragment),w6r=l(),xo=a("div"),f(Ww.$$.fragment),A6r=l(),Q1e=a("p"),L6r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B6r=l(),An=a("p"),k6r=o("The model class to instantiate is selected based on the "),H1e=a("code"),x6r=o("model_type"),R6r=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),S6r=o("pretrained_model_name_or_path"),P6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),$6r=o("pretrained_model_name_or_path"),I6r=o(":"),j6r=l(),Fe=a("ul"),cF=a("li"),Y1e=a("strong"),N6r=o("albert"),D6r=o(" \u2014 "),UO=a("a"),q6r=o("FlaxAlbertForSequenceClassification"),G6r=o(" (ALBERT model)"),O6r=l(),fF=a("li"),K1e=a("strong"),X6r=o("bart"),z6r=o(" \u2014 "),JO=a("a"),V6r=o("FlaxBartForSequenceClassification"),W6r=o(" (BART model)"),Q6r=l(),mF=a("li"),Z1e=a("strong"),H6r=o("bert"),U6r=o(" \u2014 "),YO=a("a"),J6r=o("FlaxBertForSequenceClassification"),Y6r=o(" (BERT model)"),K6r=l(),gF=a("li"),ebe=a("strong"),Z6r=o("big_bird"),eTr=o(" \u2014 "),KO=a("a"),oTr=o("FlaxBigBirdForSequenceClassification"),rTr=o(" (BigBird model)"),tTr=l(),hF=a("li"),obe=a("strong"),aTr=o("distilbert"),nTr=o(" \u2014 "),ZO=a("a"),sTr=o("FlaxDistilBertForSequenceClassification"),lTr=o(" (DistilBERT model)"),iTr=l(),pF=a("li"),rbe=a("strong"),dTr=o("electra"),cTr=o(" \u2014 "),eX=a("a"),fTr=o("FlaxElectraForSequenceClassification"),mTr=o(" (ELECTRA model)"),gTr=l(),_F=a("li"),tbe=a("strong"),hTr=o("mbart"),pTr=o(" \u2014 "),oX=a("a"),_Tr=o("FlaxMBartForSequenceClassification"),uTr=o(" (mBART model)"),bTr=l(),uF=a("li"),abe=a("strong"),vTr=o("roberta"),TTr=o(" \u2014 "),rX=a("a"),FTr=o("FlaxRobertaForSequenceClassification"),CTr=o(" (RoBERTa model)"),MTr=l(),bF=a("li"),nbe=a("strong"),ETr=o("roformer"),yTr=o(" \u2014 "),tX=a("a"),wTr=o("FlaxRoFormerForSequenceClassification"),ATr=o(" (RoFormer model)"),LTr=l(),sbe=a("p"),BTr=o("Examples:"),kTr=l(),f(Qw.$$.fragment),T9e=l(),af=a("h2"),vF=a("a"),lbe=a("span"),f(Hw.$$.fragment),xTr=l(),ibe=a("span"),RTr=o("FlaxAutoModelForQuestionAnswering"),F9e=l(),Rr=a("div"),f(Uw.$$.fragment),STr=l(),nf=a("p"),PTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dbe=a("code"),$Tr=o("from_pretrained()"),ITr=o("class method or the "),cbe=a("code"),jTr=o("from_config()"),NTr=o(`class
method.`),DTr=l(),Jw=a("p"),qTr=o("This class cannot be instantiated directly using "),fbe=a("code"),GTr=o("__init__()"),OTr=o(" (throws an error)."),XTr=l(),yt=a("div"),f(Yw.$$.fragment),zTr=l(),mbe=a("p"),VTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),WTr=l(),sf=a("p"),QTr=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),HTr=o("not"),UTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hbe=a("code"),JTr=o("from_pretrained()"),YTr=o("to load the model weights."),KTr=l(),pbe=a("p"),ZTr=o("Examples:"),e7r=l(),f(Kw.$$.fragment),o7r=l(),Ro=a("div"),f(Zw.$$.fragment),r7r=l(),_be=a("p"),t7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a7r=l(),Ln=a("p"),n7r=o("The model class to instantiate is selected based on the "),ube=a("code"),s7r=o("model_type"),l7r=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),i7r=o("pretrained_model_name_or_path"),d7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),c7r=o("pretrained_model_name_or_path"),f7r=o(":"),m7r=l(),Ce=a("ul"),TF=a("li"),Tbe=a("strong"),g7r=o("albert"),h7r=o(" \u2014 "),aX=a("a"),p7r=o("FlaxAlbertForQuestionAnswering"),_7r=o(" (ALBERT model)"),u7r=l(),FF=a("li"),Fbe=a("strong"),b7r=o("bart"),v7r=o(" \u2014 "),nX=a("a"),T7r=o("FlaxBartForQuestionAnswering"),F7r=o(" (BART model)"),C7r=l(),CF=a("li"),Cbe=a("strong"),M7r=o("bert"),E7r=o(" \u2014 "),sX=a("a"),y7r=o("FlaxBertForQuestionAnswering"),w7r=o(" (BERT model)"),A7r=l(),MF=a("li"),Mbe=a("strong"),L7r=o("big_bird"),B7r=o(" \u2014 "),lX=a("a"),k7r=o("FlaxBigBirdForQuestionAnswering"),x7r=o(" (BigBird model)"),R7r=l(),EF=a("li"),Ebe=a("strong"),S7r=o("distilbert"),P7r=o(" \u2014 "),iX=a("a"),$7r=o("FlaxDistilBertForQuestionAnswering"),I7r=o(" (DistilBERT model)"),j7r=l(),yF=a("li"),ybe=a("strong"),N7r=o("electra"),D7r=o(" \u2014 "),dX=a("a"),q7r=o("FlaxElectraForQuestionAnswering"),G7r=o(" (ELECTRA model)"),O7r=l(),wF=a("li"),wbe=a("strong"),X7r=o("mbart"),z7r=o(" \u2014 "),cX=a("a"),V7r=o("FlaxMBartForQuestionAnswering"),W7r=o(" (mBART model)"),Q7r=l(),AF=a("li"),Abe=a("strong"),H7r=o("roberta"),U7r=o(" \u2014 "),fX=a("a"),J7r=o("FlaxRobertaForQuestionAnswering"),Y7r=o(" (RoBERTa model)"),K7r=l(),LF=a("li"),Lbe=a("strong"),Z7r=o("roformer"),e8r=o(" \u2014 "),mX=a("a"),o8r=o("FlaxRoFormerForQuestionAnswering"),r8r=o(" (RoFormer model)"),t8r=l(),Bbe=a("p"),a8r=o("Examples:"),n8r=l(),f(eA.$$.fragment),C9e=l(),lf=a("h2"),BF=a("a"),kbe=a("span"),f(oA.$$.fragment),s8r=l(),xbe=a("span"),l8r=o("FlaxAutoModelForTokenClassification"),M9e=l(),Sr=a("div"),f(rA.$$.fragment),i8r=l(),df=a("p"),d8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rbe=a("code"),c8r=o("from_pretrained()"),f8r=o("class method or the "),Sbe=a("code"),m8r=o("from_config()"),g8r=o(`class
method.`),h8r=l(),tA=a("p"),p8r=o("This class cannot be instantiated directly using "),Pbe=a("code"),_8r=o("__init__()"),u8r=o(" (throws an error)."),b8r=l(),wt=a("div"),f(aA.$$.fragment),v8r=l(),$be=a("p"),T8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),F8r=l(),cf=a("p"),C8r=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),M8r=o("not"),E8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jbe=a("code"),y8r=o("from_pretrained()"),w8r=o("to load the model weights."),A8r=l(),Nbe=a("p"),L8r=o("Examples:"),B8r=l(),f(nA.$$.fragment),k8r=l(),So=a("div"),f(sA.$$.fragment),x8r=l(),Dbe=a("p"),R8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),S8r=l(),Bn=a("p"),P8r=o("The model class to instantiate is selected based on the "),qbe=a("code"),$8r=o("model_type"),I8r=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),j8r=o("pretrained_model_name_or_path"),N8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),D8r=o("pretrained_model_name_or_path"),q8r=o(":"),G8r=l(),so=a("ul"),kF=a("li"),Xbe=a("strong"),O8r=o("albert"),X8r=o(" \u2014 "),gX=a("a"),z8r=o("FlaxAlbertForTokenClassification"),V8r=o(" (ALBERT model)"),W8r=l(),xF=a("li"),zbe=a("strong"),Q8r=o("bert"),H8r=o(" \u2014 "),hX=a("a"),U8r=o("FlaxBertForTokenClassification"),J8r=o(" (BERT model)"),Y8r=l(),RF=a("li"),Vbe=a("strong"),K8r=o("big_bird"),Z8r=o(" \u2014 "),pX=a("a"),eFr=o("FlaxBigBirdForTokenClassification"),oFr=o(" (BigBird model)"),rFr=l(),SF=a("li"),Wbe=a("strong"),tFr=o("distilbert"),aFr=o(" \u2014 "),_X=a("a"),nFr=o("FlaxDistilBertForTokenClassification"),sFr=o(" (DistilBERT model)"),lFr=l(),PF=a("li"),Qbe=a("strong"),iFr=o("electra"),dFr=o(" \u2014 "),uX=a("a"),cFr=o("FlaxElectraForTokenClassification"),fFr=o(" (ELECTRA model)"),mFr=l(),$F=a("li"),Hbe=a("strong"),gFr=o("roberta"),hFr=o(" \u2014 "),bX=a("a"),pFr=o("FlaxRobertaForTokenClassification"),_Fr=o(" (RoBERTa model)"),uFr=l(),IF=a("li"),Ube=a("strong"),bFr=o("roformer"),vFr=o(" \u2014 "),vX=a("a"),TFr=o("FlaxRoFormerForTokenClassification"),FFr=o(" (RoFormer model)"),CFr=l(),Jbe=a("p"),MFr=o("Examples:"),EFr=l(),f(lA.$$.fragment),E9e=l(),ff=a("h2"),jF=a("a"),Ybe=a("span"),f(iA.$$.fragment),yFr=l(),Kbe=a("span"),wFr=o("FlaxAutoModelForMultipleChoice"),y9e=l(),Pr=a("div"),f(dA.$$.fragment),AFr=l(),mf=a("p"),LFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Zbe=a("code"),BFr=o("from_pretrained()"),kFr=o("class method or the "),e5e=a("code"),xFr=o("from_config()"),RFr=o(`class
method.`),SFr=l(),cA=a("p"),PFr=o("This class cannot be instantiated directly using "),o5e=a("code"),$Fr=o("__init__()"),IFr=o(" (throws an error)."),jFr=l(),At=a("div"),f(fA.$$.fragment),NFr=l(),r5e=a("p"),DFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qFr=l(),gf=a("p"),GFr=o(`Note:
Loading a model from its configuration file does `),t5e=a("strong"),OFr=o("not"),XFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a5e=a("code"),zFr=o("from_pretrained()"),VFr=o("to load the model weights."),WFr=l(),n5e=a("p"),QFr=o("Examples:"),HFr=l(),f(mA.$$.fragment),UFr=l(),Po=a("div"),f(gA.$$.fragment),JFr=l(),s5e=a("p"),YFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KFr=l(),kn=a("p"),ZFr=o("The model class to instantiate is selected based on the "),l5e=a("code"),eCr=o("model_type"),oCr=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),rCr=o("pretrained_model_name_or_path"),tCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),aCr=o("pretrained_model_name_or_path"),nCr=o(":"),sCr=l(),lo=a("ul"),NF=a("li"),c5e=a("strong"),lCr=o("albert"),iCr=o(" \u2014 "),TX=a("a"),dCr=o("FlaxAlbertForMultipleChoice"),cCr=o(" (ALBERT model)"),fCr=l(),DF=a("li"),f5e=a("strong"),mCr=o("bert"),gCr=o(" \u2014 "),FX=a("a"),hCr=o("FlaxBertForMultipleChoice"),pCr=o(" (BERT model)"),_Cr=l(),qF=a("li"),m5e=a("strong"),uCr=o("big_bird"),bCr=o(" \u2014 "),CX=a("a"),vCr=o("FlaxBigBirdForMultipleChoice"),TCr=o(" (BigBird model)"),FCr=l(),GF=a("li"),g5e=a("strong"),CCr=o("distilbert"),MCr=o(" \u2014 "),MX=a("a"),ECr=o("FlaxDistilBertForMultipleChoice"),yCr=o(" (DistilBERT model)"),wCr=l(),OF=a("li"),h5e=a("strong"),ACr=o("electra"),LCr=o(" \u2014 "),EX=a("a"),BCr=o("FlaxElectraForMultipleChoice"),kCr=o(" (ELECTRA model)"),xCr=l(),XF=a("li"),p5e=a("strong"),RCr=o("roberta"),SCr=o(" \u2014 "),yX=a("a"),PCr=o("FlaxRobertaForMultipleChoice"),$Cr=o(" (RoBERTa model)"),ICr=l(),zF=a("li"),_5e=a("strong"),jCr=o("roformer"),NCr=o(" \u2014 "),wX=a("a"),DCr=o("FlaxRoFormerForMultipleChoice"),qCr=o(" (RoFormer model)"),GCr=l(),u5e=a("p"),OCr=o("Examples:"),XCr=l(),f(hA.$$.fragment),w9e=l(),hf=a("h2"),VF=a("a"),b5e=a("span"),f(pA.$$.fragment),zCr=l(),v5e=a("span"),VCr=o("FlaxAutoModelForNextSentencePrediction"),A9e=l(),$r=a("div"),f(_A.$$.fragment),WCr=l(),pf=a("p"),QCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),T5e=a("code"),HCr=o("from_pretrained()"),UCr=o("class method or the "),F5e=a("code"),JCr=o("from_config()"),YCr=o(`class
method.`),KCr=l(),uA=a("p"),ZCr=o("This class cannot be instantiated directly using "),C5e=a("code"),e4r=o("__init__()"),o4r=o(" (throws an error)."),r4r=l(),Lt=a("div"),f(bA.$$.fragment),t4r=l(),M5e=a("p"),a4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n4r=l(),_f=a("p"),s4r=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),l4r=o("not"),i4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y5e=a("code"),d4r=o("from_pretrained()"),c4r=o("to load the model weights."),f4r=l(),w5e=a("p"),m4r=o("Examples:"),g4r=l(),f(vA.$$.fragment),h4r=l(),$o=a("div"),f(TA.$$.fragment),p4r=l(),A5e=a("p"),_4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u4r=l(),xn=a("p"),b4r=o("The model class to instantiate is selected based on the "),L5e=a("code"),v4r=o("model_type"),T4r=o(` property of the config object (either
passed as an argument or loaded from `),B5e=a("code"),F4r=o("pretrained_model_name_or_path"),C4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(":"),y4r=l(),x5e=a("ul"),WF=a("li"),R5e=a("strong"),w4r=o("bert"),A4r=o(" \u2014 "),AX=a("a"),L4r=o("FlaxBertForNextSentencePrediction"),B4r=o(" (BERT model)"),k4r=l(),S5e=a("p"),x4r=o("Examples:"),R4r=l(),f(FA.$$.fragment),L9e=l(),uf=a("h2"),QF=a("a"),P5e=a("span"),f(CA.$$.fragment),S4r=l(),$5e=a("span"),P4r=o("FlaxAutoModelForImageClassification"),B9e=l(),Ir=a("div"),f(MA.$$.fragment),$4r=l(),bf=a("p"),I4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),I5e=a("code"),j4r=o("from_pretrained()"),N4r=o("class method or the "),j5e=a("code"),D4r=o("from_config()"),q4r=o(`class
method.`),G4r=l(),EA=a("p"),O4r=o("This class cannot be instantiated directly using "),N5e=a("code"),X4r=o("__init__()"),z4r=o(" (throws an error)."),V4r=l(),Bt=a("div"),f(yA.$$.fragment),W4r=l(),D5e=a("p"),Q4r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),H4r=l(),vf=a("p"),U4r=o(`Note:
Loading a model from its configuration file does `),q5e=a("strong"),J4r=o("not"),Y4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G5e=a("code"),K4r=o("from_pretrained()"),Z4r=o("to load the model weights."),eMr=l(),O5e=a("p"),oMr=o("Examples:"),rMr=l(),f(wA.$$.fragment),tMr=l(),Io=a("div"),f(AA.$$.fragment),aMr=l(),X5e=a("p"),nMr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),sMr=l(),Rn=a("p"),lMr=o("The model class to instantiate is selected based on the "),z5e=a("code"),iMr=o("model_type"),dMr=o(` property of the config object (either
passed as an argument or loaded from `),V5e=a("code"),cMr=o("pretrained_model_name_or_path"),fMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),mMr=o("pretrained_model_name_or_path"),gMr=o(":"),hMr=l(),LA=a("ul"),HF=a("li"),Q5e=a("strong"),pMr=o("beit"),_Mr=o(" \u2014 "),LX=a("a"),uMr=o("FlaxBeitForImageClassification"),bMr=o(" (BEiT model)"),vMr=l(),UF=a("li"),H5e=a("strong"),TMr=o("vit"),FMr=o(" \u2014 "),BX=a("a"),CMr=o("FlaxViTForImageClassification"),MMr=o(" (ViT model)"),EMr=l(),U5e=a("p"),yMr=o("Examples:"),wMr=l(),f(BA.$$.fragment),k9e=l(),Tf=a("h2"),JF=a("a"),J5e=a("span"),f(kA.$$.fragment),AMr=l(),Y5e=a("span"),LMr=o("FlaxAutoModelForVision2Seq"),x9e=l(),jr=a("div"),f(xA.$$.fragment),BMr=l(),Ff=a("p"),kMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),K5e=a("code"),xMr=o("from_pretrained()"),RMr=o("class method or the "),Z5e=a("code"),SMr=o("from_config()"),PMr=o(`class
method.`),$Mr=l(),RA=a("p"),IMr=o("This class cannot be instantiated directly using "),e2e=a("code"),jMr=o("__init__()"),NMr=o(" (throws an error)."),DMr=l(),kt=a("div"),f(SA.$$.fragment),qMr=l(),o2e=a("p"),GMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OMr=l(),Cf=a("p"),XMr=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),zMr=o("not"),VMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),t2e=a("code"),WMr=o("from_pretrained()"),QMr=o("to load the model weights."),HMr=l(),a2e=a("p"),UMr=o("Examples:"),JMr=l(),f(PA.$$.fragment),YMr=l(),jo=a("div"),f($A.$$.fragment),KMr=l(),n2e=a("p"),ZMr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eEr=l(),Sn=a("p"),oEr=o("The model class to instantiate is selected based on the "),s2e=a("code"),rEr=o("model_type"),tEr=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),aEr=o("pretrained_model_name_or_path"),nEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),sEr=o("pretrained_model_name_or_path"),lEr=o(":"),iEr=l(),d2e=a("ul"),YF=a("li"),c2e=a("strong"),dEr=o("vision-encoder-decoder"),cEr=o(" \u2014 "),kX=a("a"),fEr=o("FlaxVisionEncoderDecoderModel"),mEr=o(" (Vision Encoder decoder model)"),gEr=l(),f2e=a("p"),hEr=o("Examples:"),pEr=l(),f(IA.$$.fragment),this.h()},l(d){const u=ipt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Ae=i(d),le=n(d,"H1",{class:!0});var jA=s(le);me=n(jA,"A",{id:!0,class:!0,href:!0});var m2e=s(me);to=n(m2e,"SPAN",{});var g2e=s(to);m(ce.$$.fragment,g2e),g2e.forEach(t),m2e.forEach(t),ue=i(jA),Do=n(jA,"SPAN",{});var uEr=s(Do);wi=r(uEr,"Auto Classes"),uEr.forEach(t),jA.forEach(t),Ef=i(d),sa=n(d,"P",{});var S9e=s(sa);Ai=r(S9e,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Li=n(S9e,"CODE",{});var bEr=s(Li);UC=r(bEr,"from_pretrained()"),bEr.forEach(t),yf=r(S9e,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),S9e.forEach(t),ye=i(d),io=n(d,"P",{});var KF=s(io);Bi=r(KF,"Instantiating one of "),Pn=n(KF,"A",{href:!0});var vEr=s(Pn);JC=r(vEr,"AutoConfig"),vEr.forEach(t),$n=r(KF,", "),In=n(KF,"A",{href:!0});var TEr=s(In);YC=r(TEr,"AutoModel"),TEr.forEach(t),ki=r(KF,`, and
`),jn=n(KF,"A",{href:!0});var FEr=s(jn);KC=r(FEr,"AutoTokenizer"),FEr.forEach(t),xi=r(KF," will directly create a class of the relevant architecture. For instance"),KF.forEach(t),wf=i(d),m($a.$$.fragment,d),co=i(d),ge=n(d,"P",{});var P9e=s(ge);S0=r(P9e,"will create a model that is an instance of "),Ri=n(P9e,"A",{href:!0});var CEr=s(Ri);P0=r(CEr,"BertModel"),CEr.forEach(t),$0=r(P9e,"."),P9e.forEach(t),qo=i(d),Ia=n(d,"P",{});var $9e=s(Ia);I0=r($9e,"There is one class of "),Af=n($9e,"CODE",{});var MEr=s(Af);j0=r(MEr,"AutoModel"),MEr.forEach(t),Oke=r($9e," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$9e.forEach(t),S0e=i(d),Si=n(d,"H2",{class:!0});var I9e=s(Si);Lf=n(I9e,"A",{id:!0,class:!0,href:!0});var EEr=s(Lf);MV=n(EEr,"SPAN",{});var yEr=s(MV);m(ZC.$$.fragment,yEr),yEr.forEach(t),EEr.forEach(t),Xke=i(I9e),EV=n(I9e,"SPAN",{});var wEr=s(EV);zke=r(wEr,"Extending the Auto Classes"),wEr.forEach(t),I9e.forEach(t),P0e=i(d),Nn=n(d,"P",{});var xX=s(Nn);Vke=r(xX,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),yV=n(xX,"CODE",{});var AEr=s(yV);Wke=r(AEr,"NewModel"),AEr.forEach(t),Qke=r(xX,", make sure you have a "),wV=n(xX,"CODE",{});var LEr=s(wV);Hke=r(LEr,"NewModelConfig"),LEr.forEach(t),Uke=r(xX,` then you can add those to the auto
classes like this:`),xX.forEach(t),$0e=i(d),m(e4.$$.fragment,d),I0e=i(d),N0=n(d,"P",{});var BEr=s(N0);Jke=r(BEr,"You will then be able to use the auto classes like you would usually do!"),BEr.forEach(t),j0e=i(d),m(Bf.$$.fragment,d),N0e=i(d),Pi=n(d,"H2",{class:!0});var j9e=s(Pi);kf=n(j9e,"A",{id:!0,class:!0,href:!0});var kEr=s(kf);AV=n(kEr,"SPAN",{});var xEr=s(AV);m(o4.$$.fragment,xEr),xEr.forEach(t),kEr.forEach(t),Yke=i(j9e),LV=n(j9e,"SPAN",{});var REr=s(LV);Kke=r(REr,"AutoConfig"),REr.forEach(t),j9e.forEach(t),D0e=i(d),Go=n(d,"DIV",{class:!0});var Ps=s(Go);m(r4.$$.fragment,Ps),Zke=i(Ps),t4=n(Ps,"P",{});var N9e=s(t4);exe=r(N9e,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),D0=n(N9e,"A",{href:!0});var SEr=s(D0);oxe=r(SEr,"from_pretrained()"),SEr.forEach(t),rxe=r(N9e," class method."),N9e.forEach(t),txe=i(Ps),a4=n(Ps,"P",{});var D9e=s(a4);axe=r(D9e,"This class cannot be instantiated directly using "),BV=n(D9e,"CODE",{});var PEr=s(BV);nxe=r(PEr,"__init__()"),PEr.forEach(t),sxe=r(D9e," (throws an error)."),D9e.forEach(t),lxe=i(Ps),fo=n(Ps,"DIV",{class:!0});var ia=s(fo);m(n4.$$.fragment,ia),ixe=i(ia),kV=n(ia,"P",{});var $Er=s(kV);dxe=r($Er,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),$Er.forEach(t),cxe=i(ia),$i=n(ia,"P",{});var RX=s($i);fxe=r(RX,"The configuration class to instantiate is selected based on the "),xV=n(RX,"CODE",{});var IEr=s(xV);mxe=r(IEr,"model_type"),IEr.forEach(t),gxe=r(RX,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),RV=n(RX,"CODE",{});var jEr=s(RV);hxe=r(jEr,"pretrained_model_name_or_path"),jEr.forEach(t),pxe=r(RX,":"),RX.forEach(t),_xe=i(ia),v=n(ia,"UL",{});var T=s(v);xf=n(T,"LI",{});var h2e=s(xf);SV=n(h2e,"STRONG",{});var NEr=s(SV);uxe=r(NEr,"albert"),NEr.forEach(t),bxe=r(h2e," \u2014 "),q0=n(h2e,"A",{href:!0});var DEr=s(q0);vxe=r(DEr,"AlbertConfig"),DEr.forEach(t),Txe=r(h2e," (ALBERT model)"),h2e.forEach(t),Fxe=i(T),Rf=n(T,"LI",{});var p2e=s(Rf);PV=n(p2e,"STRONG",{});var qEr=s(PV);Cxe=r(qEr,"bart"),qEr.forEach(t),Mxe=r(p2e," \u2014 "),G0=n(p2e,"A",{href:!0});var GEr=s(G0);Exe=r(GEr,"BartConfig"),GEr.forEach(t),yxe=r(p2e," (BART model)"),p2e.forEach(t),wxe=i(T),Sf=n(T,"LI",{});var _2e=s(Sf);$V=n(_2e,"STRONG",{});var OEr=s($V);Axe=r(OEr,"beit"),OEr.forEach(t),Lxe=r(_2e," \u2014 "),O0=n(_2e,"A",{href:!0});var XEr=s(O0);Bxe=r(XEr,"BeitConfig"),XEr.forEach(t),kxe=r(_2e," (BEiT model)"),_2e.forEach(t),xxe=i(T),Pf=n(T,"LI",{});var u2e=s(Pf);IV=n(u2e,"STRONG",{});var zEr=s(IV);Rxe=r(zEr,"bert"),zEr.forEach(t),Sxe=r(u2e," \u2014 "),X0=n(u2e,"A",{href:!0});var VEr=s(X0);Pxe=r(VEr,"BertConfig"),VEr.forEach(t),$xe=r(u2e," (BERT model)"),u2e.forEach(t),Ixe=i(T),$f=n(T,"LI",{});var b2e=s($f);jV=n(b2e,"STRONG",{});var WEr=s(jV);jxe=r(WEr,"bert-generation"),WEr.forEach(t),Nxe=r(b2e," \u2014 "),z0=n(b2e,"A",{href:!0});var QEr=s(z0);Dxe=r(QEr,"BertGenerationConfig"),QEr.forEach(t),qxe=r(b2e," (Bert Generation model)"),b2e.forEach(t),Gxe=i(T),If=n(T,"LI",{});var v2e=s(If);NV=n(v2e,"STRONG",{});var HEr=s(NV);Oxe=r(HEr,"big_bird"),HEr.forEach(t),Xxe=r(v2e," \u2014 "),V0=n(v2e,"A",{href:!0});var UEr=s(V0);zxe=r(UEr,"BigBirdConfig"),UEr.forEach(t),Vxe=r(v2e," (BigBird model)"),v2e.forEach(t),Wxe=i(T),jf=n(T,"LI",{});var T2e=s(jf);DV=n(T2e,"STRONG",{});var JEr=s(DV);Qxe=r(JEr,"bigbird_pegasus"),JEr.forEach(t),Hxe=r(T2e," \u2014 "),W0=n(T2e,"A",{href:!0});var YEr=s(W0);Uxe=r(YEr,"BigBirdPegasusConfig"),YEr.forEach(t),Jxe=r(T2e," (BigBirdPegasus model)"),T2e.forEach(t),Yxe=i(T),Nf=n(T,"LI",{});var F2e=s(Nf);qV=n(F2e,"STRONG",{});var KEr=s(qV);Kxe=r(KEr,"blenderbot"),KEr.forEach(t),Zxe=r(F2e," \u2014 "),Q0=n(F2e,"A",{href:!0});var ZEr=s(Q0);eRe=r(ZEr,"BlenderbotConfig"),ZEr.forEach(t),oRe=r(F2e," (Blenderbot model)"),F2e.forEach(t),rRe=i(T),Df=n(T,"LI",{});var C2e=s(Df);GV=n(C2e,"STRONG",{});var e3r=s(GV);tRe=r(e3r,"blenderbot-small"),e3r.forEach(t),aRe=r(C2e," \u2014 "),H0=n(C2e,"A",{href:!0});var o3r=s(H0);nRe=r(o3r,"BlenderbotSmallConfig"),o3r.forEach(t),sRe=r(C2e," (BlenderbotSmall model)"),C2e.forEach(t),lRe=i(T),qf=n(T,"LI",{});var M2e=s(qf);OV=n(M2e,"STRONG",{});var r3r=s(OV);iRe=r(r3r,"camembert"),r3r.forEach(t),dRe=r(M2e," \u2014 "),U0=n(M2e,"A",{href:!0});var t3r=s(U0);cRe=r(t3r,"CamembertConfig"),t3r.forEach(t),fRe=r(M2e," (CamemBERT model)"),M2e.forEach(t),mRe=i(T),Gf=n(T,"LI",{});var E2e=s(Gf);XV=n(E2e,"STRONG",{});var a3r=s(XV);gRe=r(a3r,"canine"),a3r.forEach(t),hRe=r(E2e," \u2014 "),J0=n(E2e,"A",{href:!0});var n3r=s(J0);pRe=r(n3r,"CanineConfig"),n3r.forEach(t),_Re=r(E2e," (Canine model)"),E2e.forEach(t),uRe=i(T),Of=n(T,"LI",{});var y2e=s(Of);zV=n(y2e,"STRONG",{});var s3r=s(zV);bRe=r(s3r,"clip"),s3r.forEach(t),vRe=r(y2e," \u2014 "),Y0=n(y2e,"A",{href:!0});var l3r=s(Y0);TRe=r(l3r,"CLIPConfig"),l3r.forEach(t),FRe=r(y2e," (CLIP model)"),y2e.forEach(t),CRe=i(T),Xf=n(T,"LI",{});var w2e=s(Xf);VV=n(w2e,"STRONG",{});var i3r=s(VV);MRe=r(i3r,"convbert"),i3r.forEach(t),ERe=r(w2e," \u2014 "),K0=n(w2e,"A",{href:!0});var d3r=s(K0);yRe=r(d3r,"ConvBertConfig"),d3r.forEach(t),wRe=r(w2e," (ConvBERT model)"),w2e.forEach(t),ARe=i(T),zf=n(T,"LI",{});var A2e=s(zf);WV=n(A2e,"STRONG",{});var c3r=s(WV);LRe=r(c3r,"convnext"),c3r.forEach(t),BRe=r(A2e," \u2014 "),Z0=n(A2e,"A",{href:!0});var f3r=s(Z0);kRe=r(f3r,"ConvNextConfig"),f3r.forEach(t),xRe=r(A2e," (ConvNext model)"),A2e.forEach(t),RRe=i(T),Vf=n(T,"LI",{});var L2e=s(Vf);QV=n(L2e,"STRONG",{});var m3r=s(QV);SRe=r(m3r,"ctrl"),m3r.forEach(t),PRe=r(L2e," \u2014 "),eL=n(L2e,"A",{href:!0});var g3r=s(eL);$Re=r(g3r,"CTRLConfig"),g3r.forEach(t),IRe=r(L2e," (CTRL model)"),L2e.forEach(t),jRe=i(T),Wf=n(T,"LI",{});var B2e=s(Wf);HV=n(B2e,"STRONG",{});var h3r=s(HV);NRe=r(h3r,"deberta"),h3r.forEach(t),DRe=r(B2e," \u2014 "),oL=n(B2e,"A",{href:!0});var p3r=s(oL);qRe=r(p3r,"DebertaConfig"),p3r.forEach(t),GRe=r(B2e," (DeBERTa model)"),B2e.forEach(t),ORe=i(T),Qf=n(T,"LI",{});var k2e=s(Qf);UV=n(k2e,"STRONG",{});var _3r=s(UV);XRe=r(_3r,"deberta-v2"),_3r.forEach(t),zRe=r(k2e," \u2014 "),rL=n(k2e,"A",{href:!0});var u3r=s(rL);VRe=r(u3r,"DebertaV2Config"),u3r.forEach(t),WRe=r(k2e," (DeBERTa-v2 model)"),k2e.forEach(t),QRe=i(T),Hf=n(T,"LI",{});var x2e=s(Hf);JV=n(x2e,"STRONG",{});var b3r=s(JV);HRe=r(b3r,"deit"),b3r.forEach(t),URe=r(x2e," \u2014 "),tL=n(x2e,"A",{href:!0});var v3r=s(tL);JRe=r(v3r,"DeiTConfig"),v3r.forEach(t),YRe=r(x2e," (DeiT model)"),x2e.forEach(t),KRe=i(T),Uf=n(T,"LI",{});var R2e=s(Uf);YV=n(R2e,"STRONG",{});var T3r=s(YV);ZRe=r(T3r,"detr"),T3r.forEach(t),eSe=r(R2e," \u2014 "),aL=n(R2e,"A",{href:!0});var F3r=s(aL);oSe=r(F3r,"DetrConfig"),F3r.forEach(t),rSe=r(R2e," (DETR model)"),R2e.forEach(t),tSe=i(T),Jf=n(T,"LI",{});var S2e=s(Jf);KV=n(S2e,"STRONG",{});var C3r=s(KV);aSe=r(C3r,"distilbert"),C3r.forEach(t),nSe=r(S2e," \u2014 "),nL=n(S2e,"A",{href:!0});var M3r=s(nL);sSe=r(M3r,"DistilBertConfig"),M3r.forEach(t),lSe=r(S2e," (DistilBERT model)"),S2e.forEach(t),iSe=i(T),Yf=n(T,"LI",{});var P2e=s(Yf);ZV=n(P2e,"STRONG",{});var E3r=s(ZV);dSe=r(E3r,"dpr"),E3r.forEach(t),cSe=r(P2e," \u2014 "),sL=n(P2e,"A",{href:!0});var y3r=s(sL);fSe=r(y3r,"DPRConfig"),y3r.forEach(t),mSe=r(P2e," (DPR model)"),P2e.forEach(t),gSe=i(T),Kf=n(T,"LI",{});var $2e=s(Kf);eW=n($2e,"STRONG",{});var w3r=s(eW);hSe=r(w3r,"electra"),w3r.forEach(t),pSe=r($2e," \u2014 "),lL=n($2e,"A",{href:!0});var A3r=s(lL);_Se=r(A3r,"ElectraConfig"),A3r.forEach(t),uSe=r($2e," (ELECTRA model)"),$2e.forEach(t),bSe=i(T),Zf=n(T,"LI",{});var I2e=s(Zf);oW=n(I2e,"STRONG",{});var L3r=s(oW);vSe=r(L3r,"encoder-decoder"),L3r.forEach(t),TSe=r(I2e," \u2014 "),iL=n(I2e,"A",{href:!0});var B3r=s(iL);FSe=r(B3r,"EncoderDecoderConfig"),B3r.forEach(t),CSe=r(I2e," (Encoder decoder model)"),I2e.forEach(t),MSe=i(T),em=n(T,"LI",{});var j2e=s(em);rW=n(j2e,"STRONG",{});var k3r=s(rW);ESe=r(k3r,"flaubert"),k3r.forEach(t),ySe=r(j2e," \u2014 "),dL=n(j2e,"A",{href:!0});var x3r=s(dL);wSe=r(x3r,"FlaubertConfig"),x3r.forEach(t),ASe=r(j2e," (FlauBERT model)"),j2e.forEach(t),LSe=i(T),om=n(T,"LI",{});var N2e=s(om);tW=n(N2e,"STRONG",{});var R3r=s(tW);BSe=r(R3r,"fnet"),R3r.forEach(t),kSe=r(N2e," \u2014 "),cL=n(N2e,"A",{href:!0});var S3r=s(cL);xSe=r(S3r,"FNetConfig"),S3r.forEach(t),RSe=r(N2e," (FNet model)"),N2e.forEach(t),SSe=i(T),rm=n(T,"LI",{});var D2e=s(rm);aW=n(D2e,"STRONG",{});var P3r=s(aW);PSe=r(P3r,"fsmt"),P3r.forEach(t),$Se=r(D2e," \u2014 "),fL=n(D2e,"A",{href:!0});var $3r=s(fL);ISe=r($3r,"FSMTConfig"),$3r.forEach(t),jSe=r(D2e," (FairSeq Machine-Translation model)"),D2e.forEach(t),NSe=i(T),tm=n(T,"LI",{});var q2e=s(tm);nW=n(q2e,"STRONG",{});var I3r=s(nW);DSe=r(I3r,"funnel"),I3r.forEach(t),qSe=r(q2e," \u2014 "),mL=n(q2e,"A",{href:!0});var j3r=s(mL);GSe=r(j3r,"FunnelConfig"),j3r.forEach(t),OSe=r(q2e," (Funnel Transformer model)"),q2e.forEach(t),XSe=i(T),am=n(T,"LI",{});var G2e=s(am);sW=n(G2e,"STRONG",{});var N3r=s(sW);zSe=r(N3r,"gpt2"),N3r.forEach(t),VSe=r(G2e," \u2014 "),gL=n(G2e,"A",{href:!0});var D3r=s(gL);WSe=r(D3r,"GPT2Config"),D3r.forEach(t),QSe=r(G2e," (OpenAI GPT-2 model)"),G2e.forEach(t),HSe=i(T),nm=n(T,"LI",{});var O2e=s(nm);lW=n(O2e,"STRONG",{});var q3r=s(lW);USe=r(q3r,"gpt_neo"),q3r.forEach(t),JSe=r(O2e," \u2014 "),hL=n(O2e,"A",{href:!0});var G3r=s(hL);YSe=r(G3r,"GPTNeoConfig"),G3r.forEach(t),KSe=r(O2e," (GPT Neo model)"),O2e.forEach(t),ZSe=i(T),sm=n(T,"LI",{});var X2e=s(sm);iW=n(X2e,"STRONG",{});var O3r=s(iW);ePe=r(O3r,"gptj"),O3r.forEach(t),oPe=r(X2e," \u2014 "),pL=n(X2e,"A",{href:!0});var X3r=s(pL);rPe=r(X3r,"GPTJConfig"),X3r.forEach(t),tPe=r(X2e," (GPT-J model)"),X2e.forEach(t),aPe=i(T),lm=n(T,"LI",{});var z2e=s(lm);dW=n(z2e,"STRONG",{});var z3r=s(dW);nPe=r(z3r,"hubert"),z3r.forEach(t),sPe=r(z2e," \u2014 "),_L=n(z2e,"A",{href:!0});var V3r=s(_L);lPe=r(V3r,"HubertConfig"),V3r.forEach(t),iPe=r(z2e," (Hubert model)"),z2e.forEach(t),dPe=i(T),im=n(T,"LI",{});var V2e=s(im);cW=n(V2e,"STRONG",{});var W3r=s(cW);cPe=r(W3r,"ibert"),W3r.forEach(t),fPe=r(V2e," \u2014 "),uL=n(V2e,"A",{href:!0});var Q3r=s(uL);mPe=r(Q3r,"IBertConfig"),Q3r.forEach(t),gPe=r(V2e," (I-BERT model)"),V2e.forEach(t),hPe=i(T),dm=n(T,"LI",{});var W2e=s(dm);fW=n(W2e,"STRONG",{});var H3r=s(fW);pPe=r(H3r,"imagegpt"),H3r.forEach(t),_Pe=r(W2e," \u2014 "),bL=n(W2e,"A",{href:!0});var U3r=s(bL);uPe=r(U3r,"ImageGPTConfig"),U3r.forEach(t),bPe=r(W2e," (ImageGPT model)"),W2e.forEach(t),vPe=i(T),cm=n(T,"LI",{});var Q2e=s(cm);mW=n(Q2e,"STRONG",{});var J3r=s(mW);TPe=r(J3r,"layoutlm"),J3r.forEach(t),FPe=r(Q2e," \u2014 "),vL=n(Q2e,"A",{href:!0});var Y3r=s(vL);CPe=r(Y3r,"LayoutLMConfig"),Y3r.forEach(t),MPe=r(Q2e," (LayoutLM model)"),Q2e.forEach(t),EPe=i(T),fm=n(T,"LI",{});var H2e=s(fm);gW=n(H2e,"STRONG",{});var K3r=s(gW);yPe=r(K3r,"layoutlmv2"),K3r.forEach(t),wPe=r(H2e," \u2014 "),TL=n(H2e,"A",{href:!0});var Z3r=s(TL);APe=r(Z3r,"LayoutLMv2Config"),Z3r.forEach(t),LPe=r(H2e," (LayoutLMv2 model)"),H2e.forEach(t),BPe=i(T),mm=n(T,"LI",{});var U2e=s(mm);hW=n(U2e,"STRONG",{});var eyr=s(hW);kPe=r(eyr,"led"),eyr.forEach(t),xPe=r(U2e," \u2014 "),FL=n(U2e,"A",{href:!0});var oyr=s(FL);RPe=r(oyr,"LEDConfig"),oyr.forEach(t),SPe=r(U2e," (LED model)"),U2e.forEach(t),PPe=i(T),gm=n(T,"LI",{});var J2e=s(gm);pW=n(J2e,"STRONG",{});var ryr=s(pW);$Pe=r(ryr,"longformer"),ryr.forEach(t),IPe=r(J2e," \u2014 "),CL=n(J2e,"A",{href:!0});var tyr=s(CL);jPe=r(tyr,"LongformerConfig"),tyr.forEach(t),NPe=r(J2e," (Longformer model)"),J2e.forEach(t),DPe=i(T),hm=n(T,"LI",{});var Y2e=s(hm);_W=n(Y2e,"STRONG",{});var ayr=s(_W);qPe=r(ayr,"luke"),ayr.forEach(t),GPe=r(Y2e," \u2014 "),ML=n(Y2e,"A",{href:!0});var nyr=s(ML);OPe=r(nyr,"LukeConfig"),nyr.forEach(t),XPe=r(Y2e," (LUKE model)"),Y2e.forEach(t),zPe=i(T),pm=n(T,"LI",{});var K2e=s(pm);uW=n(K2e,"STRONG",{});var syr=s(uW);VPe=r(syr,"lxmert"),syr.forEach(t),WPe=r(K2e," \u2014 "),EL=n(K2e,"A",{href:!0});var lyr=s(EL);QPe=r(lyr,"LxmertConfig"),lyr.forEach(t),HPe=r(K2e," (LXMERT model)"),K2e.forEach(t),UPe=i(T),_m=n(T,"LI",{});var Z2e=s(_m);bW=n(Z2e,"STRONG",{});var iyr=s(bW);JPe=r(iyr,"m2m_100"),iyr.forEach(t),YPe=r(Z2e," \u2014 "),yL=n(Z2e,"A",{href:!0});var dyr=s(yL);KPe=r(dyr,"M2M100Config"),dyr.forEach(t),ZPe=r(Z2e," (M2M100 model)"),Z2e.forEach(t),e$e=i(T),um=n(T,"LI",{});var eve=s(um);vW=n(eve,"STRONG",{});var cyr=s(vW);o$e=r(cyr,"marian"),cyr.forEach(t),r$e=r(eve," \u2014 "),wL=n(eve,"A",{href:!0});var fyr=s(wL);t$e=r(fyr,"MarianConfig"),fyr.forEach(t),a$e=r(eve," (Marian model)"),eve.forEach(t),n$e=i(T),bm=n(T,"LI",{});var ove=s(bm);TW=n(ove,"STRONG",{});var myr=s(TW);s$e=r(myr,"mbart"),myr.forEach(t),l$e=r(ove," \u2014 "),AL=n(ove,"A",{href:!0});var gyr=s(AL);i$e=r(gyr,"MBartConfig"),gyr.forEach(t),d$e=r(ove," (mBART model)"),ove.forEach(t),c$e=i(T),vm=n(T,"LI",{});var rve=s(vm);FW=n(rve,"STRONG",{});var hyr=s(FW);f$e=r(hyr,"megatron-bert"),hyr.forEach(t),m$e=r(rve," \u2014 "),LL=n(rve,"A",{href:!0});var pyr=s(LL);g$e=r(pyr,"MegatronBertConfig"),pyr.forEach(t),h$e=r(rve," (MegatronBert model)"),rve.forEach(t),p$e=i(T),Tm=n(T,"LI",{});var tve=s(Tm);CW=n(tve,"STRONG",{});var _yr=s(CW);_$e=r(_yr,"mobilebert"),_yr.forEach(t),u$e=r(tve," \u2014 "),BL=n(tve,"A",{href:!0});var uyr=s(BL);b$e=r(uyr,"MobileBertConfig"),uyr.forEach(t),v$e=r(tve," (MobileBERT model)"),tve.forEach(t),T$e=i(T),Fm=n(T,"LI",{});var ave=s(Fm);MW=n(ave,"STRONG",{});var byr=s(MW);F$e=r(byr,"mpnet"),byr.forEach(t),C$e=r(ave," \u2014 "),kL=n(ave,"A",{href:!0});var vyr=s(kL);M$e=r(vyr,"MPNetConfig"),vyr.forEach(t),E$e=r(ave," (MPNet model)"),ave.forEach(t),y$e=i(T),Cm=n(T,"LI",{});var nve=s(Cm);EW=n(nve,"STRONG",{});var Tyr=s(EW);w$e=r(Tyr,"mt5"),Tyr.forEach(t),A$e=r(nve," \u2014 "),xL=n(nve,"A",{href:!0});var Fyr=s(xL);L$e=r(Fyr,"MT5Config"),Fyr.forEach(t),B$e=r(nve," (mT5 model)"),nve.forEach(t),k$e=i(T),Mm=n(T,"LI",{});var sve=s(Mm);yW=n(sve,"STRONG",{});var Cyr=s(yW);x$e=r(Cyr,"nystromformer"),Cyr.forEach(t),R$e=r(sve," \u2014 "),RL=n(sve,"A",{href:!0});var Myr=s(RL);S$e=r(Myr,"NystromformerConfig"),Myr.forEach(t),P$e=r(sve," (Nystromformer model)"),sve.forEach(t),$$e=i(T),Em=n(T,"LI",{});var lve=s(Em);wW=n(lve,"STRONG",{});var Eyr=s(wW);I$e=r(Eyr,"openai-gpt"),Eyr.forEach(t),j$e=r(lve," \u2014 "),SL=n(lve,"A",{href:!0});var yyr=s(SL);N$e=r(yyr,"OpenAIGPTConfig"),yyr.forEach(t),D$e=r(lve," (OpenAI GPT model)"),lve.forEach(t),q$e=i(T),ym=n(T,"LI",{});var ive=s(ym);AW=n(ive,"STRONG",{});var wyr=s(AW);G$e=r(wyr,"pegasus"),wyr.forEach(t),O$e=r(ive," \u2014 "),PL=n(ive,"A",{href:!0});var Ayr=s(PL);X$e=r(Ayr,"PegasusConfig"),Ayr.forEach(t),z$e=r(ive," (Pegasus model)"),ive.forEach(t),V$e=i(T),wm=n(T,"LI",{});var dve=s(wm);LW=n(dve,"STRONG",{});var Lyr=s(LW);W$e=r(Lyr,"perceiver"),Lyr.forEach(t),Q$e=r(dve," \u2014 "),$L=n(dve,"A",{href:!0});var Byr=s($L);H$e=r(Byr,"PerceiverConfig"),Byr.forEach(t),U$e=r(dve," (Perceiver model)"),dve.forEach(t),J$e=i(T),Am=n(T,"LI",{});var cve=s(Am);BW=n(cve,"STRONG",{});var kyr=s(BW);Y$e=r(kyr,"poolformer"),kyr.forEach(t),K$e=r(cve," \u2014 "),IL=n(cve,"A",{href:!0});var xyr=s(IL);Z$e=r(xyr,"PoolFormerConfig"),xyr.forEach(t),eIe=r(cve," (PoolFormer model)"),cve.forEach(t),oIe=i(T),Lm=n(T,"LI",{});var fve=s(Lm);kW=n(fve,"STRONG",{});var Ryr=s(kW);rIe=r(Ryr,"prophetnet"),Ryr.forEach(t),tIe=r(fve," \u2014 "),jL=n(fve,"A",{href:!0});var Syr=s(jL);aIe=r(Syr,"ProphetNetConfig"),Syr.forEach(t),nIe=r(fve," (ProphetNet model)"),fve.forEach(t),sIe=i(T),Bm=n(T,"LI",{});var mve=s(Bm);xW=n(mve,"STRONG",{});var Pyr=s(xW);lIe=r(Pyr,"qdqbert"),Pyr.forEach(t),iIe=r(mve," \u2014 "),NL=n(mve,"A",{href:!0});var $yr=s(NL);dIe=r($yr,"QDQBertConfig"),$yr.forEach(t),cIe=r(mve," (QDQBert model)"),mve.forEach(t),fIe=i(T),km=n(T,"LI",{});var gve=s(km);RW=n(gve,"STRONG",{});var Iyr=s(RW);mIe=r(Iyr,"rag"),Iyr.forEach(t),gIe=r(gve," \u2014 "),DL=n(gve,"A",{href:!0});var jyr=s(DL);hIe=r(jyr,"RagConfig"),jyr.forEach(t),pIe=r(gve," (RAG model)"),gve.forEach(t),_Ie=i(T),xm=n(T,"LI",{});var hve=s(xm);SW=n(hve,"STRONG",{});var Nyr=s(SW);uIe=r(Nyr,"realm"),Nyr.forEach(t),bIe=r(hve," \u2014 "),qL=n(hve,"A",{href:!0});var Dyr=s(qL);vIe=r(Dyr,"RealmConfig"),Dyr.forEach(t),TIe=r(hve," (Realm model)"),hve.forEach(t),FIe=i(T),Rm=n(T,"LI",{});var pve=s(Rm);PW=n(pve,"STRONG",{});var qyr=s(PW);CIe=r(qyr,"reformer"),qyr.forEach(t),MIe=r(pve," \u2014 "),GL=n(pve,"A",{href:!0});var Gyr=s(GL);EIe=r(Gyr,"ReformerConfig"),Gyr.forEach(t),yIe=r(pve," (Reformer model)"),pve.forEach(t),wIe=i(T),Sm=n(T,"LI",{});var _ve=s(Sm);$W=n(_ve,"STRONG",{});var Oyr=s($W);AIe=r(Oyr,"rembert"),Oyr.forEach(t),LIe=r(_ve," \u2014 "),OL=n(_ve,"A",{href:!0});var Xyr=s(OL);BIe=r(Xyr,"RemBertConfig"),Xyr.forEach(t),kIe=r(_ve," (RemBERT model)"),_ve.forEach(t),xIe=i(T),Pm=n(T,"LI",{});var uve=s(Pm);IW=n(uve,"STRONG",{});var zyr=s(IW);RIe=r(zyr,"retribert"),zyr.forEach(t),SIe=r(uve," \u2014 "),XL=n(uve,"A",{href:!0});var Vyr=s(XL);PIe=r(Vyr,"RetriBertConfig"),Vyr.forEach(t),$Ie=r(uve," (RetriBERT model)"),uve.forEach(t),IIe=i(T),$m=n(T,"LI",{});var bve=s($m);jW=n(bve,"STRONG",{});var Wyr=s(jW);jIe=r(Wyr,"roberta"),Wyr.forEach(t),NIe=r(bve," \u2014 "),zL=n(bve,"A",{href:!0});var Qyr=s(zL);DIe=r(Qyr,"RobertaConfig"),Qyr.forEach(t),qIe=r(bve," (RoBERTa model)"),bve.forEach(t),GIe=i(T),Im=n(T,"LI",{});var vve=s(Im);NW=n(vve,"STRONG",{});var Hyr=s(NW);OIe=r(Hyr,"roformer"),Hyr.forEach(t),XIe=r(vve," \u2014 "),VL=n(vve,"A",{href:!0});var Uyr=s(VL);zIe=r(Uyr,"RoFormerConfig"),Uyr.forEach(t),VIe=r(vve," (RoFormer model)"),vve.forEach(t),WIe=i(T),jm=n(T,"LI",{});var Tve=s(jm);DW=n(Tve,"STRONG",{});var Jyr=s(DW);QIe=r(Jyr,"segformer"),Jyr.forEach(t),HIe=r(Tve," \u2014 "),WL=n(Tve,"A",{href:!0});var Yyr=s(WL);UIe=r(Yyr,"SegformerConfig"),Yyr.forEach(t),JIe=r(Tve," (SegFormer model)"),Tve.forEach(t),YIe=i(T),Nm=n(T,"LI",{});var Fve=s(Nm);qW=n(Fve,"STRONG",{});var Kyr=s(qW);KIe=r(Kyr,"sew"),Kyr.forEach(t),ZIe=r(Fve," \u2014 "),QL=n(Fve,"A",{href:!0});var Zyr=s(QL);eje=r(Zyr,"SEWConfig"),Zyr.forEach(t),oje=r(Fve," (SEW model)"),Fve.forEach(t),rje=i(T),Dm=n(T,"LI",{});var Cve=s(Dm);GW=n(Cve,"STRONG",{});var ewr=s(GW);tje=r(ewr,"sew-d"),ewr.forEach(t),aje=r(Cve," \u2014 "),HL=n(Cve,"A",{href:!0});var owr=s(HL);nje=r(owr,"SEWDConfig"),owr.forEach(t),sje=r(Cve," (SEW-D model)"),Cve.forEach(t),lje=i(T),qm=n(T,"LI",{});var Mve=s(qm);OW=n(Mve,"STRONG",{});var rwr=s(OW);ije=r(rwr,"speech-encoder-decoder"),rwr.forEach(t),dje=r(Mve," \u2014 "),UL=n(Mve,"A",{href:!0});var twr=s(UL);cje=r(twr,"SpeechEncoderDecoderConfig"),twr.forEach(t),fje=r(Mve," (Speech Encoder decoder model)"),Mve.forEach(t),mje=i(T),Gm=n(T,"LI",{});var Eve=s(Gm);XW=n(Eve,"STRONG",{});var awr=s(XW);gje=r(awr,"speech_to_text"),awr.forEach(t),hje=r(Eve," \u2014 "),JL=n(Eve,"A",{href:!0});var nwr=s(JL);pje=r(nwr,"Speech2TextConfig"),nwr.forEach(t),_je=r(Eve," (Speech2Text model)"),Eve.forEach(t),uje=i(T),Om=n(T,"LI",{});var yve=s(Om);zW=n(yve,"STRONG",{});var swr=s(zW);bje=r(swr,"speech_to_text_2"),swr.forEach(t),vje=r(yve," \u2014 "),YL=n(yve,"A",{href:!0});var lwr=s(YL);Tje=r(lwr,"Speech2Text2Config"),lwr.forEach(t),Fje=r(yve," (Speech2Text2 model)"),yve.forEach(t),Cje=i(T),Xm=n(T,"LI",{});var wve=s(Xm);VW=n(wve,"STRONG",{});var iwr=s(VW);Mje=r(iwr,"splinter"),iwr.forEach(t),Eje=r(wve," \u2014 "),KL=n(wve,"A",{href:!0});var dwr=s(KL);yje=r(dwr,"SplinterConfig"),dwr.forEach(t),wje=r(wve," (Splinter model)"),wve.forEach(t),Aje=i(T),zm=n(T,"LI",{});var Ave=s(zm);WW=n(Ave,"STRONG",{});var cwr=s(WW);Lje=r(cwr,"squeezebert"),cwr.forEach(t),Bje=r(Ave," \u2014 "),ZL=n(Ave,"A",{href:!0});var fwr=s(ZL);kje=r(fwr,"SqueezeBertConfig"),fwr.forEach(t),xje=r(Ave," (SqueezeBERT model)"),Ave.forEach(t),Rje=i(T),Vm=n(T,"LI",{});var Lve=s(Vm);QW=n(Lve,"STRONG",{});var mwr=s(QW);Sje=r(mwr,"swin"),mwr.forEach(t),Pje=r(Lve," \u2014 "),e9=n(Lve,"A",{href:!0});var gwr=s(e9);$je=r(gwr,"SwinConfig"),gwr.forEach(t),Ije=r(Lve," (Swin model)"),Lve.forEach(t),jje=i(T),Wm=n(T,"LI",{});var Bve=s(Wm);HW=n(Bve,"STRONG",{});var hwr=s(HW);Nje=r(hwr,"t5"),hwr.forEach(t),Dje=r(Bve," \u2014 "),o9=n(Bve,"A",{href:!0});var pwr=s(o9);qje=r(pwr,"T5Config"),pwr.forEach(t),Gje=r(Bve," (T5 model)"),Bve.forEach(t),Oje=i(T),Qm=n(T,"LI",{});var kve=s(Qm);UW=n(kve,"STRONG",{});var _wr=s(UW);Xje=r(_wr,"tapas"),_wr.forEach(t),zje=r(kve," \u2014 "),r9=n(kve,"A",{href:!0});var uwr=s(r9);Vje=r(uwr,"TapasConfig"),uwr.forEach(t),Wje=r(kve," (TAPAS model)"),kve.forEach(t),Qje=i(T),Hm=n(T,"LI",{});var xve=s(Hm);JW=n(xve,"STRONG",{});var bwr=s(JW);Hje=r(bwr,"transfo-xl"),bwr.forEach(t),Uje=r(xve," \u2014 "),t9=n(xve,"A",{href:!0});var vwr=s(t9);Jje=r(vwr,"TransfoXLConfig"),vwr.forEach(t),Yje=r(xve," (Transformer-XL model)"),xve.forEach(t),Kje=i(T),Um=n(T,"LI",{});var Rve=s(Um);YW=n(Rve,"STRONG",{});var Twr=s(YW);Zje=r(Twr,"trocr"),Twr.forEach(t),eNe=r(Rve," \u2014 "),a9=n(Rve,"A",{href:!0});var Fwr=s(a9);oNe=r(Fwr,"TrOCRConfig"),Fwr.forEach(t),rNe=r(Rve," (TrOCR model)"),Rve.forEach(t),tNe=i(T),Jm=n(T,"LI",{});var Sve=s(Jm);KW=n(Sve,"STRONG",{});var Cwr=s(KW);aNe=r(Cwr,"unispeech"),Cwr.forEach(t),nNe=r(Sve," \u2014 "),n9=n(Sve,"A",{href:!0});var Mwr=s(n9);sNe=r(Mwr,"UniSpeechConfig"),Mwr.forEach(t),lNe=r(Sve," (UniSpeech model)"),Sve.forEach(t),iNe=i(T),Ym=n(T,"LI",{});var Pve=s(Ym);ZW=n(Pve,"STRONG",{});var Ewr=s(ZW);dNe=r(Ewr,"unispeech-sat"),Ewr.forEach(t),cNe=r(Pve," \u2014 "),s9=n(Pve,"A",{href:!0});var ywr=s(s9);fNe=r(ywr,"UniSpeechSatConfig"),ywr.forEach(t),mNe=r(Pve," (UniSpeechSat model)"),Pve.forEach(t),gNe=i(T),Km=n(T,"LI",{});var $ve=s(Km);eQ=n($ve,"STRONG",{});var wwr=s(eQ);hNe=r(wwr,"vilt"),wwr.forEach(t),pNe=r($ve," \u2014 "),l9=n($ve,"A",{href:!0});var Awr=s(l9);_Ne=r(Awr,"ViltConfig"),Awr.forEach(t),uNe=r($ve," (ViLT model)"),$ve.forEach(t),bNe=i(T),Zm=n(T,"LI",{});var Ive=s(Zm);oQ=n(Ive,"STRONG",{});var Lwr=s(oQ);vNe=r(Lwr,"vision-encoder-decoder"),Lwr.forEach(t),TNe=r(Ive," \u2014 "),i9=n(Ive,"A",{href:!0});var Bwr=s(i9);FNe=r(Bwr,"VisionEncoderDecoderConfig"),Bwr.forEach(t),CNe=r(Ive," (Vision Encoder decoder model)"),Ive.forEach(t),MNe=i(T),eg=n(T,"LI",{});var jve=s(eg);rQ=n(jve,"STRONG",{});var kwr=s(rQ);ENe=r(kwr,"vision-text-dual-encoder"),kwr.forEach(t),yNe=r(jve," \u2014 "),d9=n(jve,"A",{href:!0});var xwr=s(d9);wNe=r(xwr,"VisionTextDualEncoderConfig"),xwr.forEach(t),ANe=r(jve," (VisionTextDualEncoder model)"),jve.forEach(t),LNe=i(T),og=n(T,"LI",{});var Nve=s(og);tQ=n(Nve,"STRONG",{});var Rwr=s(tQ);BNe=r(Rwr,"visual_bert"),Rwr.forEach(t),kNe=r(Nve," \u2014 "),c9=n(Nve,"A",{href:!0});var Swr=s(c9);xNe=r(Swr,"VisualBertConfig"),Swr.forEach(t),RNe=r(Nve," (VisualBert model)"),Nve.forEach(t),SNe=i(T),rg=n(T,"LI",{});var Dve=s(rg);aQ=n(Dve,"STRONG",{});var Pwr=s(aQ);PNe=r(Pwr,"vit"),Pwr.forEach(t),$Ne=r(Dve," \u2014 "),f9=n(Dve,"A",{href:!0});var $wr=s(f9);INe=r($wr,"ViTConfig"),$wr.forEach(t),jNe=r(Dve," (ViT model)"),Dve.forEach(t),NNe=i(T),tg=n(T,"LI",{});var qve=s(tg);nQ=n(qve,"STRONG",{});var Iwr=s(nQ);DNe=r(Iwr,"vit_mae"),Iwr.forEach(t),qNe=r(qve," \u2014 "),m9=n(qve,"A",{href:!0});var jwr=s(m9);GNe=r(jwr,"ViTMAEConfig"),jwr.forEach(t),ONe=r(qve," (ViTMAE model)"),qve.forEach(t),XNe=i(T),ag=n(T,"LI",{});var Gve=s(ag);sQ=n(Gve,"STRONG",{});var Nwr=s(sQ);zNe=r(Nwr,"wav2vec2"),Nwr.forEach(t),VNe=r(Gve," \u2014 "),g9=n(Gve,"A",{href:!0});var Dwr=s(g9);WNe=r(Dwr,"Wav2Vec2Config"),Dwr.forEach(t),QNe=r(Gve," (Wav2Vec2 model)"),Gve.forEach(t),HNe=i(T),ng=n(T,"LI",{});var Ove=s(ng);lQ=n(Ove,"STRONG",{});var qwr=s(lQ);UNe=r(qwr,"wavlm"),qwr.forEach(t),JNe=r(Ove," \u2014 "),h9=n(Ove,"A",{href:!0});var Gwr=s(h9);YNe=r(Gwr,"WavLMConfig"),Gwr.forEach(t),KNe=r(Ove," (WavLM model)"),Ove.forEach(t),ZNe=i(T),sg=n(T,"LI",{});var Xve=s(sg);iQ=n(Xve,"STRONG",{});var Owr=s(iQ);eDe=r(Owr,"xglm"),Owr.forEach(t),oDe=r(Xve," \u2014 "),p9=n(Xve,"A",{href:!0});var Xwr=s(p9);rDe=r(Xwr,"XGLMConfig"),Xwr.forEach(t),tDe=r(Xve," (XGLM model)"),Xve.forEach(t),aDe=i(T),lg=n(T,"LI",{});var zve=s(lg);dQ=n(zve,"STRONG",{});var zwr=s(dQ);nDe=r(zwr,"xlm"),zwr.forEach(t),sDe=r(zve," \u2014 "),_9=n(zve,"A",{href:!0});var Vwr=s(_9);lDe=r(Vwr,"XLMConfig"),Vwr.forEach(t),iDe=r(zve," (XLM model)"),zve.forEach(t),dDe=i(T),ig=n(T,"LI",{});var Vve=s(ig);cQ=n(Vve,"STRONG",{});var Wwr=s(cQ);cDe=r(Wwr,"xlm-prophetnet"),Wwr.forEach(t),fDe=r(Vve," \u2014 "),u9=n(Vve,"A",{href:!0});var Qwr=s(u9);mDe=r(Qwr,"XLMProphetNetConfig"),Qwr.forEach(t),gDe=r(Vve," (XLMProphetNet model)"),Vve.forEach(t),hDe=i(T),dg=n(T,"LI",{});var Wve=s(dg);fQ=n(Wve,"STRONG",{});var Hwr=s(fQ);pDe=r(Hwr,"xlm-roberta"),Hwr.forEach(t),_De=r(Wve," \u2014 "),b9=n(Wve,"A",{href:!0});var Uwr=s(b9);uDe=r(Uwr,"XLMRobertaConfig"),Uwr.forEach(t),bDe=r(Wve," (XLM-RoBERTa model)"),Wve.forEach(t),vDe=i(T),cg=n(T,"LI",{});var Qve=s(cg);mQ=n(Qve,"STRONG",{});var Jwr=s(mQ);TDe=r(Jwr,"xlm-roberta-xl"),Jwr.forEach(t),FDe=r(Qve," \u2014 "),v9=n(Qve,"A",{href:!0});var Ywr=s(v9);CDe=r(Ywr,"XLMRobertaXLConfig"),Ywr.forEach(t),MDe=r(Qve," (XLM-RoBERTa-XL model)"),Qve.forEach(t),EDe=i(T),fg=n(T,"LI",{});var Hve=s(fg);gQ=n(Hve,"STRONG",{});var Kwr=s(gQ);yDe=r(Kwr,"xlnet"),Kwr.forEach(t),wDe=r(Hve," \u2014 "),T9=n(Hve,"A",{href:!0});var Zwr=s(T9);ADe=r(Zwr,"XLNetConfig"),Zwr.forEach(t),LDe=r(Hve," (XLNet model)"),Hve.forEach(t),BDe=i(T),mg=n(T,"LI",{});var Uve=s(mg);hQ=n(Uve,"STRONG",{});var eAr=s(hQ);kDe=r(eAr,"yoso"),eAr.forEach(t),xDe=r(Uve," \u2014 "),F9=n(Uve,"A",{href:!0});var oAr=s(F9);RDe=r(oAr,"YosoConfig"),oAr.forEach(t),SDe=r(Uve," (YOSO model)"),Uve.forEach(t),T.forEach(t),PDe=i(ia),pQ=n(ia,"P",{});var rAr=s(pQ);$De=r(rAr,"Examples:"),rAr.forEach(t),IDe=i(ia),m(s4.$$.fragment,ia),ia.forEach(t),jDe=i(Ps),gg=n(Ps,"DIV",{class:!0});var q9e=s(gg);m(l4.$$.fragment,q9e),NDe=i(q9e),_Q=n(q9e,"P",{});var tAr=s(_Q);DDe=r(tAr,"Register a new configuration for this class."),tAr.forEach(t),q9e.forEach(t),Ps.forEach(t),q0e=i(d),Ii=n(d,"H2",{class:!0});var G9e=s(Ii);hg=n(G9e,"A",{id:!0,class:!0,href:!0});var aAr=s(hg);uQ=n(aAr,"SPAN",{});var nAr=s(uQ);m(i4.$$.fragment,nAr),nAr.forEach(t),aAr.forEach(t),qDe=i(G9e),bQ=n(G9e,"SPAN",{});var sAr=s(bQ);GDe=r(sAr,"AutoTokenizer"),sAr.forEach(t),G9e.forEach(t),G0e=i(d),Oo=n(d,"DIV",{class:!0});var $s=s(Oo);m(d4.$$.fragment,$s),ODe=i($s),c4=n($s,"P",{});var O9e=s(c4);XDe=r(O9e,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),C9=n(O9e,"A",{href:!0});var lAr=s(C9);zDe=r(lAr,"AutoTokenizer.from_pretrained()"),lAr.forEach(t),VDe=r(O9e," class method."),O9e.forEach(t),WDe=i($s),f4=n($s,"P",{});var X9e=s(f4);QDe=r(X9e,"This class cannot be instantiated directly using "),vQ=n(X9e,"CODE",{});var iAr=s(vQ);HDe=r(iAr,"__init__()"),iAr.forEach(t),UDe=r(X9e," (throws an error)."),X9e.forEach(t),JDe=i($s),mo=n($s,"DIV",{class:!0});var da=s(mo);m(m4.$$.fragment,da),YDe=i(da),TQ=n(da,"P",{});var dAr=s(TQ);KDe=r(dAr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),dAr.forEach(t),ZDe=i(da),ja=n(da,"P",{});var ZF=s(ja);eqe=r(ZF,"The tokenizer class to instantiate is selected based on the "),FQ=n(ZF,"CODE",{});var cAr=s(FQ);oqe=r(cAr,"model_type"),cAr.forEach(t),rqe=r(ZF,` property of the config object (either
passed as an argument or loaded from `),CQ=n(ZF,"CODE",{});var fAr=s(CQ);tqe=r(fAr,"pretrained_model_name_or_path"),fAr.forEach(t),aqe=r(ZF,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MQ=n(ZF,"CODE",{});var mAr=s(MQ);nqe=r(mAr,"pretrained_model_name_or_path"),mAr.forEach(t),sqe=r(ZF,":"),ZF.forEach(t),lqe=i(da),E=n(da,"UL",{});var y=s(E);Dn=n(y,"LI",{});var NA=s(Dn);EQ=n(NA,"STRONG",{});var gAr=s(EQ);iqe=r(gAr,"albert"),gAr.forEach(t),dqe=r(NA," \u2014 "),M9=n(NA,"A",{href:!0});var hAr=s(M9);cqe=r(hAr,"AlbertTokenizer"),hAr.forEach(t),fqe=r(NA," or "),E9=n(NA,"A",{href:!0});var pAr=s(E9);mqe=r(pAr,"AlbertTokenizerFast"),pAr.forEach(t),gqe=r(NA," (ALBERT model)"),NA.forEach(t),hqe=i(y),qn=n(y,"LI",{});var DA=s(qn);yQ=n(DA,"STRONG",{});var _Ar=s(yQ);pqe=r(_Ar,"bart"),_Ar.forEach(t),_qe=r(DA," \u2014 "),y9=n(DA,"A",{href:!0});var uAr=s(y9);uqe=r(uAr,"BartTokenizer"),uAr.forEach(t),bqe=r(DA," or "),w9=n(DA,"A",{href:!0});var bAr=s(w9);vqe=r(bAr,"BartTokenizerFast"),bAr.forEach(t),Tqe=r(DA," (BART model)"),DA.forEach(t),Fqe=i(y),Gn=n(y,"LI",{});var qA=s(Gn);wQ=n(qA,"STRONG",{});var vAr=s(wQ);Cqe=r(vAr,"barthez"),vAr.forEach(t),Mqe=r(qA," \u2014 "),A9=n(qA,"A",{href:!0});var TAr=s(A9);Eqe=r(TAr,"BarthezTokenizer"),TAr.forEach(t),yqe=r(qA," or "),L9=n(qA,"A",{href:!0});var FAr=s(L9);wqe=r(FAr,"BarthezTokenizerFast"),FAr.forEach(t),Aqe=r(qA," (BARThez model)"),qA.forEach(t),Lqe=i(y),pg=n(y,"LI",{});var Jve=s(pg);AQ=n(Jve,"STRONG",{});var CAr=s(AQ);Bqe=r(CAr,"bartpho"),CAr.forEach(t),kqe=r(Jve," \u2014 "),B9=n(Jve,"A",{href:!0});var MAr=s(B9);xqe=r(MAr,"BartphoTokenizer"),MAr.forEach(t),Rqe=r(Jve," (BARTpho model)"),Jve.forEach(t),Sqe=i(y),On=n(y,"LI",{});var GA=s(On);LQ=n(GA,"STRONG",{});var EAr=s(LQ);Pqe=r(EAr,"bert"),EAr.forEach(t),$qe=r(GA," \u2014 "),k9=n(GA,"A",{href:!0});var yAr=s(k9);Iqe=r(yAr,"BertTokenizer"),yAr.forEach(t),jqe=r(GA," or "),x9=n(GA,"A",{href:!0});var wAr=s(x9);Nqe=r(wAr,"BertTokenizerFast"),wAr.forEach(t),Dqe=r(GA," (BERT model)"),GA.forEach(t),qqe=i(y),_g=n(y,"LI",{});var Yve=s(_g);BQ=n(Yve,"STRONG",{});var AAr=s(BQ);Gqe=r(AAr,"bert-generation"),AAr.forEach(t),Oqe=r(Yve," \u2014 "),R9=n(Yve,"A",{href:!0});var LAr=s(R9);Xqe=r(LAr,"BertGenerationTokenizer"),LAr.forEach(t),zqe=r(Yve," (Bert Generation model)"),Yve.forEach(t),Vqe=i(y),ug=n(y,"LI",{});var Kve=s(ug);kQ=n(Kve,"STRONG",{});var BAr=s(kQ);Wqe=r(BAr,"bert-japanese"),BAr.forEach(t),Qqe=r(Kve," \u2014 "),S9=n(Kve,"A",{href:!0});var kAr=s(S9);Hqe=r(kAr,"BertJapaneseTokenizer"),kAr.forEach(t),Uqe=r(Kve," (BertJapanese model)"),Kve.forEach(t),Jqe=i(y),bg=n(y,"LI",{});var Zve=s(bg);xQ=n(Zve,"STRONG",{});var xAr=s(xQ);Yqe=r(xAr,"bertweet"),xAr.forEach(t),Kqe=r(Zve," \u2014 "),P9=n(Zve,"A",{href:!0});var RAr=s(P9);Zqe=r(RAr,"BertweetTokenizer"),RAr.forEach(t),eGe=r(Zve," (Bertweet model)"),Zve.forEach(t),oGe=i(y),Xn=n(y,"LI",{});var OA=s(Xn);RQ=n(OA,"STRONG",{});var SAr=s(RQ);rGe=r(SAr,"big_bird"),SAr.forEach(t),tGe=r(OA," \u2014 "),$9=n(OA,"A",{href:!0});var PAr=s($9);aGe=r(PAr,"BigBirdTokenizer"),PAr.forEach(t),nGe=r(OA," or "),I9=n(OA,"A",{href:!0});var $Ar=s(I9);sGe=r($Ar,"BigBirdTokenizerFast"),$Ar.forEach(t),lGe=r(OA," (BigBird model)"),OA.forEach(t),iGe=i(y),zn=n(y,"LI",{});var XA=s(zn);SQ=n(XA,"STRONG",{});var IAr=s(SQ);dGe=r(IAr,"bigbird_pegasus"),IAr.forEach(t),cGe=r(XA," \u2014 "),j9=n(XA,"A",{href:!0});var jAr=s(j9);fGe=r(jAr,"PegasusTokenizer"),jAr.forEach(t),mGe=r(XA," or "),N9=n(XA,"A",{href:!0});var NAr=s(N9);gGe=r(NAr,"PegasusTokenizerFast"),NAr.forEach(t),hGe=r(XA," (BigBirdPegasus model)"),XA.forEach(t),pGe=i(y),Vn=n(y,"LI",{});var zA=s(Vn);PQ=n(zA,"STRONG",{});var DAr=s(PQ);_Ge=r(DAr,"blenderbot"),DAr.forEach(t),uGe=r(zA," \u2014 "),D9=n(zA,"A",{href:!0});var qAr=s(D9);bGe=r(qAr,"BlenderbotTokenizer"),qAr.forEach(t),vGe=r(zA," or "),q9=n(zA,"A",{href:!0});var GAr=s(q9);TGe=r(GAr,"BlenderbotTokenizerFast"),GAr.forEach(t),FGe=r(zA," (Blenderbot model)"),zA.forEach(t),CGe=i(y),vg=n(y,"LI",{});var e6e=s(vg);$Q=n(e6e,"STRONG",{});var OAr=s($Q);MGe=r(OAr,"blenderbot-small"),OAr.forEach(t),EGe=r(e6e," \u2014 "),G9=n(e6e,"A",{href:!0});var XAr=s(G9);yGe=r(XAr,"BlenderbotSmallTokenizer"),XAr.forEach(t),wGe=r(e6e," (BlenderbotSmall model)"),e6e.forEach(t),AGe=i(y),Tg=n(y,"LI",{});var o6e=s(Tg);IQ=n(o6e,"STRONG",{});var zAr=s(IQ);LGe=r(zAr,"byt5"),zAr.forEach(t),BGe=r(o6e," \u2014 "),O9=n(o6e,"A",{href:!0});var VAr=s(O9);kGe=r(VAr,"ByT5Tokenizer"),VAr.forEach(t),xGe=r(o6e," (ByT5 model)"),o6e.forEach(t),RGe=i(y),Wn=n(y,"LI",{});var VA=s(Wn);jQ=n(VA,"STRONG",{});var WAr=s(jQ);SGe=r(WAr,"camembert"),WAr.forEach(t),PGe=r(VA," \u2014 "),X9=n(VA,"A",{href:!0});var QAr=s(X9);$Ge=r(QAr,"CamembertTokenizer"),QAr.forEach(t),IGe=r(VA," or "),z9=n(VA,"A",{href:!0});var HAr=s(z9);jGe=r(HAr,"CamembertTokenizerFast"),HAr.forEach(t),NGe=r(VA," (CamemBERT model)"),VA.forEach(t),DGe=i(y),Fg=n(y,"LI",{});var r6e=s(Fg);NQ=n(r6e,"STRONG",{});var UAr=s(NQ);qGe=r(UAr,"canine"),UAr.forEach(t),GGe=r(r6e," \u2014 "),V9=n(r6e,"A",{href:!0});var JAr=s(V9);OGe=r(JAr,"CanineTokenizer"),JAr.forEach(t),XGe=r(r6e," (Canine model)"),r6e.forEach(t),zGe=i(y),Qn=n(y,"LI",{});var WA=s(Qn);DQ=n(WA,"STRONG",{});var YAr=s(DQ);VGe=r(YAr,"clip"),YAr.forEach(t),WGe=r(WA," \u2014 "),W9=n(WA,"A",{href:!0});var KAr=s(W9);QGe=r(KAr,"CLIPTokenizer"),KAr.forEach(t),HGe=r(WA," or "),Q9=n(WA,"A",{href:!0});var ZAr=s(Q9);UGe=r(ZAr,"CLIPTokenizerFast"),ZAr.forEach(t),JGe=r(WA," (CLIP model)"),WA.forEach(t),YGe=i(y),Hn=n(y,"LI",{});var QA=s(Hn);qQ=n(QA,"STRONG",{});var e0r=s(qQ);KGe=r(e0r,"convbert"),e0r.forEach(t),ZGe=r(QA," \u2014 "),H9=n(QA,"A",{href:!0});var o0r=s(H9);eOe=r(o0r,"ConvBertTokenizer"),o0r.forEach(t),oOe=r(QA," or "),U9=n(QA,"A",{href:!0});var r0r=s(U9);rOe=r(r0r,"ConvBertTokenizerFast"),r0r.forEach(t),tOe=r(QA," (ConvBERT model)"),QA.forEach(t),aOe=i(y),Un=n(y,"LI",{});var HA=s(Un);GQ=n(HA,"STRONG",{});var t0r=s(GQ);nOe=r(t0r,"cpm"),t0r.forEach(t),sOe=r(HA," \u2014 "),J9=n(HA,"A",{href:!0});var a0r=s(J9);lOe=r(a0r,"CpmTokenizer"),a0r.forEach(t),iOe=r(HA," or "),OQ=n(HA,"CODE",{});var n0r=s(OQ);dOe=r(n0r,"CpmTokenizerFast"),n0r.forEach(t),cOe=r(HA," (CPM model)"),HA.forEach(t),fOe=i(y),Cg=n(y,"LI",{});var t6e=s(Cg);XQ=n(t6e,"STRONG",{});var s0r=s(XQ);mOe=r(s0r,"ctrl"),s0r.forEach(t),gOe=r(t6e," \u2014 "),Y9=n(t6e,"A",{href:!0});var l0r=s(Y9);hOe=r(l0r,"CTRLTokenizer"),l0r.forEach(t),pOe=r(t6e," (CTRL model)"),t6e.forEach(t),_Oe=i(y),Jn=n(y,"LI",{});var UA=s(Jn);zQ=n(UA,"STRONG",{});var i0r=s(zQ);uOe=r(i0r,"deberta"),i0r.forEach(t),bOe=r(UA," \u2014 "),K9=n(UA,"A",{href:!0});var d0r=s(K9);vOe=r(d0r,"DebertaTokenizer"),d0r.forEach(t),TOe=r(UA," or "),Z9=n(UA,"A",{href:!0});var c0r=s(Z9);FOe=r(c0r,"DebertaTokenizerFast"),c0r.forEach(t),COe=r(UA," (DeBERTa model)"),UA.forEach(t),MOe=i(y),Mg=n(y,"LI",{});var a6e=s(Mg);VQ=n(a6e,"STRONG",{});var f0r=s(VQ);EOe=r(f0r,"deberta-v2"),f0r.forEach(t),yOe=r(a6e," \u2014 "),eB=n(a6e,"A",{href:!0});var m0r=s(eB);wOe=r(m0r,"DebertaV2Tokenizer"),m0r.forEach(t),AOe=r(a6e," (DeBERTa-v2 model)"),a6e.forEach(t),LOe=i(y),Yn=n(y,"LI",{});var JA=s(Yn);WQ=n(JA,"STRONG",{});var g0r=s(WQ);BOe=r(g0r,"distilbert"),g0r.forEach(t),kOe=r(JA," \u2014 "),oB=n(JA,"A",{href:!0});var h0r=s(oB);xOe=r(h0r,"DistilBertTokenizer"),h0r.forEach(t),ROe=r(JA," or "),rB=n(JA,"A",{href:!0});var p0r=s(rB);SOe=r(p0r,"DistilBertTokenizerFast"),p0r.forEach(t),POe=r(JA," (DistilBERT model)"),JA.forEach(t),$Oe=i(y),Kn=n(y,"LI",{});var YA=s(Kn);QQ=n(YA,"STRONG",{});var _0r=s(QQ);IOe=r(_0r,"dpr"),_0r.forEach(t),jOe=r(YA," \u2014 "),tB=n(YA,"A",{href:!0});var u0r=s(tB);NOe=r(u0r,"DPRQuestionEncoderTokenizer"),u0r.forEach(t),DOe=r(YA," or "),aB=n(YA,"A",{href:!0});var b0r=s(aB);qOe=r(b0r,"DPRQuestionEncoderTokenizerFast"),b0r.forEach(t),GOe=r(YA," (DPR model)"),YA.forEach(t),OOe=i(y),Zn=n(y,"LI",{});var KA=s(Zn);HQ=n(KA,"STRONG",{});var v0r=s(HQ);XOe=r(v0r,"electra"),v0r.forEach(t),zOe=r(KA," \u2014 "),nB=n(KA,"A",{href:!0});var T0r=s(nB);VOe=r(T0r,"ElectraTokenizer"),T0r.forEach(t),WOe=r(KA," or "),sB=n(KA,"A",{href:!0});var F0r=s(sB);QOe=r(F0r,"ElectraTokenizerFast"),F0r.forEach(t),HOe=r(KA," (ELECTRA model)"),KA.forEach(t),UOe=i(y),Eg=n(y,"LI",{});var n6e=s(Eg);UQ=n(n6e,"STRONG",{});var C0r=s(UQ);JOe=r(C0r,"flaubert"),C0r.forEach(t),YOe=r(n6e," \u2014 "),lB=n(n6e,"A",{href:!0});var M0r=s(lB);KOe=r(M0r,"FlaubertTokenizer"),M0r.forEach(t),ZOe=r(n6e," (FlauBERT model)"),n6e.forEach(t),eXe=i(y),es=n(y,"LI",{});var ZA=s(es);JQ=n(ZA,"STRONG",{});var E0r=s(JQ);oXe=r(E0r,"fnet"),E0r.forEach(t),rXe=r(ZA," \u2014 "),iB=n(ZA,"A",{href:!0});var y0r=s(iB);tXe=r(y0r,"FNetTokenizer"),y0r.forEach(t),aXe=r(ZA," or "),dB=n(ZA,"A",{href:!0});var w0r=s(dB);nXe=r(w0r,"FNetTokenizerFast"),w0r.forEach(t),sXe=r(ZA," (FNet model)"),ZA.forEach(t),lXe=i(y),yg=n(y,"LI",{});var s6e=s(yg);YQ=n(s6e,"STRONG",{});var A0r=s(YQ);iXe=r(A0r,"fsmt"),A0r.forEach(t),dXe=r(s6e," \u2014 "),cB=n(s6e,"A",{href:!0});var L0r=s(cB);cXe=r(L0r,"FSMTTokenizer"),L0r.forEach(t),fXe=r(s6e," (FairSeq Machine-Translation model)"),s6e.forEach(t),mXe=i(y),os=n(y,"LI",{});var e0=s(os);KQ=n(e0,"STRONG",{});var B0r=s(KQ);gXe=r(B0r,"funnel"),B0r.forEach(t),hXe=r(e0," \u2014 "),fB=n(e0,"A",{href:!0});var k0r=s(fB);pXe=r(k0r,"FunnelTokenizer"),k0r.forEach(t),_Xe=r(e0," or "),mB=n(e0,"A",{href:!0});var x0r=s(mB);uXe=r(x0r,"FunnelTokenizerFast"),x0r.forEach(t),bXe=r(e0," (Funnel Transformer model)"),e0.forEach(t),vXe=i(y),rs=n(y,"LI",{});var o0=s(rs);ZQ=n(o0,"STRONG",{});var R0r=s(ZQ);TXe=r(R0r,"gpt2"),R0r.forEach(t),FXe=r(o0," \u2014 "),gB=n(o0,"A",{href:!0});var S0r=s(gB);CXe=r(S0r,"GPT2Tokenizer"),S0r.forEach(t),MXe=r(o0," or "),hB=n(o0,"A",{href:!0});var P0r=s(hB);EXe=r(P0r,"GPT2TokenizerFast"),P0r.forEach(t),yXe=r(o0," (OpenAI GPT-2 model)"),o0.forEach(t),wXe=i(y),ts=n(y,"LI",{});var r0=s(ts);eH=n(r0,"STRONG",{});var $0r=s(eH);AXe=r($0r,"gpt_neo"),$0r.forEach(t),LXe=r(r0," \u2014 "),pB=n(r0,"A",{href:!0});var I0r=s(pB);BXe=r(I0r,"GPT2Tokenizer"),I0r.forEach(t),kXe=r(r0," or "),_B=n(r0,"A",{href:!0});var j0r=s(_B);xXe=r(j0r,"GPT2TokenizerFast"),j0r.forEach(t),RXe=r(r0," (GPT Neo model)"),r0.forEach(t),SXe=i(y),as=n(y,"LI",{});var t0=s(as);oH=n(t0,"STRONG",{});var N0r=s(oH);PXe=r(N0r,"herbert"),N0r.forEach(t),$Xe=r(t0," \u2014 "),uB=n(t0,"A",{href:!0});var D0r=s(uB);IXe=r(D0r,"HerbertTokenizer"),D0r.forEach(t),jXe=r(t0," or "),bB=n(t0,"A",{href:!0});var q0r=s(bB);NXe=r(q0r,"HerbertTokenizerFast"),q0r.forEach(t),DXe=r(t0," (HerBERT model)"),t0.forEach(t),qXe=i(y),wg=n(y,"LI",{});var l6e=s(wg);rH=n(l6e,"STRONG",{});var G0r=s(rH);GXe=r(G0r,"hubert"),G0r.forEach(t),OXe=r(l6e," \u2014 "),vB=n(l6e,"A",{href:!0});var O0r=s(vB);XXe=r(O0r,"Wav2Vec2CTCTokenizer"),O0r.forEach(t),zXe=r(l6e," (Hubert model)"),l6e.forEach(t),VXe=i(y),ns=n(y,"LI",{});var a0=s(ns);tH=n(a0,"STRONG",{});var X0r=s(tH);WXe=r(X0r,"ibert"),X0r.forEach(t),QXe=r(a0," \u2014 "),TB=n(a0,"A",{href:!0});var z0r=s(TB);HXe=r(z0r,"RobertaTokenizer"),z0r.forEach(t),UXe=r(a0," or "),FB=n(a0,"A",{href:!0});var V0r=s(FB);JXe=r(V0r,"RobertaTokenizerFast"),V0r.forEach(t),YXe=r(a0," (I-BERT model)"),a0.forEach(t),KXe=i(y),ss=n(y,"LI",{});var n0=s(ss);aH=n(n0,"STRONG",{});var W0r=s(aH);ZXe=r(W0r,"layoutlm"),W0r.forEach(t),eze=r(n0," \u2014 "),CB=n(n0,"A",{href:!0});var Q0r=s(CB);oze=r(Q0r,"LayoutLMTokenizer"),Q0r.forEach(t),rze=r(n0," or "),MB=n(n0,"A",{href:!0});var H0r=s(MB);tze=r(H0r,"LayoutLMTokenizerFast"),H0r.forEach(t),aze=r(n0," (LayoutLM model)"),n0.forEach(t),nze=i(y),ls=n(y,"LI",{});var s0=s(ls);nH=n(s0,"STRONG",{});var U0r=s(nH);sze=r(U0r,"layoutlmv2"),U0r.forEach(t),lze=r(s0," \u2014 "),EB=n(s0,"A",{href:!0});var J0r=s(EB);ize=r(J0r,"LayoutLMv2Tokenizer"),J0r.forEach(t),dze=r(s0," or "),yB=n(s0,"A",{href:!0});var Y0r=s(yB);cze=r(Y0r,"LayoutLMv2TokenizerFast"),Y0r.forEach(t),fze=r(s0," (LayoutLMv2 model)"),s0.forEach(t),mze=i(y),is=n(y,"LI",{});var l0=s(is);sH=n(l0,"STRONG",{});var K0r=s(sH);gze=r(K0r,"layoutxlm"),K0r.forEach(t),hze=r(l0," \u2014 "),wB=n(l0,"A",{href:!0});var Z0r=s(wB);pze=r(Z0r,"LayoutXLMTokenizer"),Z0r.forEach(t),_ze=r(l0," or "),AB=n(l0,"A",{href:!0});var eLr=s(AB);uze=r(eLr,"LayoutXLMTokenizerFast"),eLr.forEach(t),bze=r(l0," (LayoutXLM model)"),l0.forEach(t),vze=i(y),ds=n(y,"LI",{});var i0=s(ds);lH=n(i0,"STRONG",{});var oLr=s(lH);Tze=r(oLr,"led"),oLr.forEach(t),Fze=r(i0," \u2014 "),LB=n(i0,"A",{href:!0});var rLr=s(LB);Cze=r(rLr,"LEDTokenizer"),rLr.forEach(t),Mze=r(i0," or "),BB=n(i0,"A",{href:!0});var tLr=s(BB);Eze=r(tLr,"LEDTokenizerFast"),tLr.forEach(t),yze=r(i0," (LED model)"),i0.forEach(t),wze=i(y),cs=n(y,"LI",{});var d0=s(cs);iH=n(d0,"STRONG",{});var aLr=s(iH);Aze=r(aLr,"longformer"),aLr.forEach(t),Lze=r(d0," \u2014 "),kB=n(d0,"A",{href:!0});var nLr=s(kB);Bze=r(nLr,"LongformerTokenizer"),nLr.forEach(t),kze=r(d0," or "),xB=n(d0,"A",{href:!0});var sLr=s(xB);xze=r(sLr,"LongformerTokenizerFast"),sLr.forEach(t),Rze=r(d0," (Longformer model)"),d0.forEach(t),Sze=i(y),Ag=n(y,"LI",{});var i6e=s(Ag);dH=n(i6e,"STRONG",{});var lLr=s(dH);Pze=r(lLr,"luke"),lLr.forEach(t),$ze=r(i6e," \u2014 "),RB=n(i6e,"A",{href:!0});var iLr=s(RB);Ize=r(iLr,"LukeTokenizer"),iLr.forEach(t),jze=r(i6e," (LUKE model)"),i6e.forEach(t),Nze=i(y),fs=n(y,"LI",{});var c0=s(fs);cH=n(c0,"STRONG",{});var dLr=s(cH);Dze=r(dLr,"lxmert"),dLr.forEach(t),qze=r(c0," \u2014 "),SB=n(c0,"A",{href:!0});var cLr=s(SB);Gze=r(cLr,"LxmertTokenizer"),cLr.forEach(t),Oze=r(c0," or "),PB=n(c0,"A",{href:!0});var fLr=s(PB);Xze=r(fLr,"LxmertTokenizerFast"),fLr.forEach(t),zze=r(c0," (LXMERT model)"),c0.forEach(t),Vze=i(y),Lg=n(y,"LI",{});var d6e=s(Lg);fH=n(d6e,"STRONG",{});var mLr=s(fH);Wze=r(mLr,"m2m_100"),mLr.forEach(t),Qze=r(d6e," \u2014 "),$B=n(d6e,"A",{href:!0});var gLr=s($B);Hze=r(gLr,"M2M100Tokenizer"),gLr.forEach(t),Uze=r(d6e," (M2M100 model)"),d6e.forEach(t),Jze=i(y),Bg=n(y,"LI",{});var c6e=s(Bg);mH=n(c6e,"STRONG",{});var hLr=s(mH);Yze=r(hLr,"marian"),hLr.forEach(t),Kze=r(c6e," \u2014 "),IB=n(c6e,"A",{href:!0});var pLr=s(IB);Zze=r(pLr,"MarianTokenizer"),pLr.forEach(t),eVe=r(c6e," (Marian model)"),c6e.forEach(t),oVe=i(y),ms=n(y,"LI",{});var f0=s(ms);gH=n(f0,"STRONG",{});var _Lr=s(gH);rVe=r(_Lr,"mbart"),_Lr.forEach(t),tVe=r(f0," \u2014 "),jB=n(f0,"A",{href:!0});var uLr=s(jB);aVe=r(uLr,"MBartTokenizer"),uLr.forEach(t),nVe=r(f0," or "),NB=n(f0,"A",{href:!0});var bLr=s(NB);sVe=r(bLr,"MBartTokenizerFast"),bLr.forEach(t),lVe=r(f0," (mBART model)"),f0.forEach(t),iVe=i(y),gs=n(y,"LI",{});var m0=s(gs);hH=n(m0,"STRONG",{});var vLr=s(hH);dVe=r(vLr,"mbart50"),vLr.forEach(t),cVe=r(m0," \u2014 "),DB=n(m0,"A",{href:!0});var TLr=s(DB);fVe=r(TLr,"MBart50Tokenizer"),TLr.forEach(t),mVe=r(m0," or "),qB=n(m0,"A",{href:!0});var FLr=s(qB);gVe=r(FLr,"MBart50TokenizerFast"),FLr.forEach(t),hVe=r(m0," (mBART-50 model)"),m0.forEach(t),pVe=i(y),kg=n(y,"LI",{});var f6e=s(kg);pH=n(f6e,"STRONG",{});var CLr=s(pH);_Ve=r(CLr,"mluke"),CLr.forEach(t),uVe=r(f6e," \u2014 "),GB=n(f6e,"A",{href:!0});var MLr=s(GB);bVe=r(MLr,"MLukeTokenizer"),MLr.forEach(t),vVe=r(f6e," (mLUKE model)"),f6e.forEach(t),TVe=i(y),hs=n(y,"LI",{});var g0=s(hs);_H=n(g0,"STRONG",{});var ELr=s(_H);FVe=r(ELr,"mobilebert"),ELr.forEach(t),CVe=r(g0," \u2014 "),OB=n(g0,"A",{href:!0});var yLr=s(OB);MVe=r(yLr,"MobileBertTokenizer"),yLr.forEach(t),EVe=r(g0," or "),XB=n(g0,"A",{href:!0});var wLr=s(XB);yVe=r(wLr,"MobileBertTokenizerFast"),wLr.forEach(t),wVe=r(g0," (MobileBERT model)"),g0.forEach(t),AVe=i(y),ps=n(y,"LI",{});var h0=s(ps);uH=n(h0,"STRONG",{});var ALr=s(uH);LVe=r(ALr,"mpnet"),ALr.forEach(t),BVe=r(h0," \u2014 "),zB=n(h0,"A",{href:!0});var LLr=s(zB);kVe=r(LLr,"MPNetTokenizer"),LLr.forEach(t),xVe=r(h0," or "),VB=n(h0,"A",{href:!0});var BLr=s(VB);RVe=r(BLr,"MPNetTokenizerFast"),BLr.forEach(t),SVe=r(h0," (MPNet model)"),h0.forEach(t),PVe=i(y),_s=n(y,"LI",{});var p0=s(_s);bH=n(p0,"STRONG",{});var kLr=s(bH);$Ve=r(kLr,"mt5"),kLr.forEach(t),IVe=r(p0," \u2014 "),WB=n(p0,"A",{href:!0});var xLr=s(WB);jVe=r(xLr,"MT5Tokenizer"),xLr.forEach(t),NVe=r(p0," or "),QB=n(p0,"A",{href:!0});var RLr=s(QB);DVe=r(RLr,"MT5TokenizerFast"),RLr.forEach(t),qVe=r(p0," (mT5 model)"),p0.forEach(t),GVe=i(y),us=n(y,"LI",{});var _0=s(us);vH=n(_0,"STRONG",{});var SLr=s(vH);OVe=r(SLr,"openai-gpt"),SLr.forEach(t),XVe=r(_0," \u2014 "),HB=n(_0,"A",{href:!0});var PLr=s(HB);zVe=r(PLr,"OpenAIGPTTokenizer"),PLr.forEach(t),VVe=r(_0," or "),UB=n(_0,"A",{href:!0});var $Lr=s(UB);WVe=r($Lr,"OpenAIGPTTokenizerFast"),$Lr.forEach(t),QVe=r(_0," (OpenAI GPT model)"),_0.forEach(t),HVe=i(y),bs=n(y,"LI",{});var u0=s(bs);TH=n(u0,"STRONG",{});var ILr=s(TH);UVe=r(ILr,"pegasus"),ILr.forEach(t),JVe=r(u0," \u2014 "),JB=n(u0,"A",{href:!0});var jLr=s(JB);YVe=r(jLr,"PegasusTokenizer"),jLr.forEach(t),KVe=r(u0," or "),YB=n(u0,"A",{href:!0});var NLr=s(YB);ZVe=r(NLr,"PegasusTokenizerFast"),NLr.forEach(t),eWe=r(u0," (Pegasus model)"),u0.forEach(t),oWe=i(y),xg=n(y,"LI",{});var m6e=s(xg);FH=n(m6e,"STRONG",{});var DLr=s(FH);rWe=r(DLr,"perceiver"),DLr.forEach(t),tWe=r(m6e," \u2014 "),KB=n(m6e,"A",{href:!0});var qLr=s(KB);aWe=r(qLr,"PerceiverTokenizer"),qLr.forEach(t),nWe=r(m6e," (Perceiver model)"),m6e.forEach(t),sWe=i(y),Rg=n(y,"LI",{});var g6e=s(Rg);CH=n(g6e,"STRONG",{});var GLr=s(CH);lWe=r(GLr,"phobert"),GLr.forEach(t),iWe=r(g6e," \u2014 "),ZB=n(g6e,"A",{href:!0});var OLr=s(ZB);dWe=r(OLr,"PhobertTokenizer"),OLr.forEach(t),cWe=r(g6e," (PhoBERT model)"),g6e.forEach(t),fWe=i(y),Sg=n(y,"LI",{});var h6e=s(Sg);MH=n(h6e,"STRONG",{});var XLr=s(MH);mWe=r(XLr,"prophetnet"),XLr.forEach(t),gWe=r(h6e," \u2014 "),ek=n(h6e,"A",{href:!0});var zLr=s(ek);hWe=r(zLr,"ProphetNetTokenizer"),zLr.forEach(t),pWe=r(h6e," (ProphetNet model)"),h6e.forEach(t),_We=i(y),vs=n(y,"LI",{});var b0=s(vs);EH=n(b0,"STRONG",{});var VLr=s(EH);uWe=r(VLr,"qdqbert"),VLr.forEach(t),bWe=r(b0," \u2014 "),ok=n(b0,"A",{href:!0});var WLr=s(ok);vWe=r(WLr,"BertTokenizer"),WLr.forEach(t),TWe=r(b0," or "),rk=n(b0,"A",{href:!0});var QLr=s(rk);FWe=r(QLr,"BertTokenizerFast"),QLr.forEach(t),CWe=r(b0," (QDQBert model)"),b0.forEach(t),MWe=i(y),Pg=n(y,"LI",{});var p6e=s(Pg);yH=n(p6e,"STRONG",{});var HLr=s(yH);EWe=r(HLr,"rag"),HLr.forEach(t),yWe=r(p6e," \u2014 "),tk=n(p6e,"A",{href:!0});var ULr=s(tk);wWe=r(ULr,"RagTokenizer"),ULr.forEach(t),AWe=r(p6e," (RAG model)"),p6e.forEach(t),LWe=i(y),Ts=n(y,"LI",{});var v0=s(Ts);wH=n(v0,"STRONG",{});var JLr=s(wH);BWe=r(JLr,"reformer"),JLr.forEach(t),kWe=r(v0," \u2014 "),ak=n(v0,"A",{href:!0});var YLr=s(ak);xWe=r(YLr,"ReformerTokenizer"),YLr.forEach(t),RWe=r(v0," or "),nk=n(v0,"A",{href:!0});var KLr=s(nk);SWe=r(KLr,"ReformerTokenizerFast"),KLr.forEach(t),PWe=r(v0," (Reformer model)"),v0.forEach(t),$We=i(y),Fs=n(y,"LI",{});var T0=s(Fs);AH=n(T0,"STRONG",{});var ZLr=s(AH);IWe=r(ZLr,"rembert"),ZLr.forEach(t),jWe=r(T0," \u2014 "),sk=n(T0,"A",{href:!0});var e9r=s(sk);NWe=r(e9r,"RemBertTokenizer"),e9r.forEach(t),DWe=r(T0," or "),lk=n(T0,"A",{href:!0});var o9r=s(lk);qWe=r(o9r,"RemBertTokenizerFast"),o9r.forEach(t),GWe=r(T0," (RemBERT model)"),T0.forEach(t),OWe=i(y),Cs=n(y,"LI",{});var F0=s(Cs);LH=n(F0,"STRONG",{});var r9r=s(LH);XWe=r(r9r,"retribert"),r9r.forEach(t),zWe=r(F0," \u2014 "),ik=n(F0,"A",{href:!0});var t9r=s(ik);VWe=r(t9r,"RetriBertTokenizer"),t9r.forEach(t),WWe=r(F0," or "),dk=n(F0,"A",{href:!0});var a9r=s(dk);QWe=r(a9r,"RetriBertTokenizerFast"),a9r.forEach(t),HWe=r(F0," (RetriBERT model)"),F0.forEach(t),UWe=i(y),Ms=n(y,"LI",{});var C0=s(Ms);BH=n(C0,"STRONG",{});var n9r=s(BH);JWe=r(n9r,"roberta"),n9r.forEach(t),YWe=r(C0," \u2014 "),ck=n(C0,"A",{href:!0});var s9r=s(ck);KWe=r(s9r,"RobertaTokenizer"),s9r.forEach(t),ZWe=r(C0," or "),fk=n(C0,"A",{href:!0});var l9r=s(fk);eQe=r(l9r,"RobertaTokenizerFast"),l9r.forEach(t),oQe=r(C0," (RoBERTa model)"),C0.forEach(t),rQe=i(y),Es=n(y,"LI",{});var M0=s(Es);kH=n(M0,"STRONG",{});var i9r=s(kH);tQe=r(i9r,"roformer"),i9r.forEach(t),aQe=r(M0," \u2014 "),mk=n(M0,"A",{href:!0});var d9r=s(mk);nQe=r(d9r,"RoFormerTokenizer"),d9r.forEach(t),sQe=r(M0," or "),gk=n(M0,"A",{href:!0});var c9r=s(gk);lQe=r(c9r,"RoFormerTokenizerFast"),c9r.forEach(t),iQe=r(M0," (RoFormer model)"),M0.forEach(t),dQe=i(y),$g=n(y,"LI",{});var _6e=s($g);xH=n(_6e,"STRONG",{});var f9r=s(xH);cQe=r(f9r,"speech_to_text"),f9r.forEach(t),fQe=r(_6e," \u2014 "),hk=n(_6e,"A",{href:!0});var m9r=s(hk);mQe=r(m9r,"Speech2TextTokenizer"),m9r.forEach(t),gQe=r(_6e," (Speech2Text model)"),_6e.forEach(t),hQe=i(y),Ig=n(y,"LI",{});var u6e=s(Ig);RH=n(u6e,"STRONG",{});var g9r=s(RH);pQe=r(g9r,"speech_to_text_2"),g9r.forEach(t),_Qe=r(u6e," \u2014 "),pk=n(u6e,"A",{href:!0});var h9r=s(pk);uQe=r(h9r,"Speech2Text2Tokenizer"),h9r.forEach(t),bQe=r(u6e," (Speech2Text2 model)"),u6e.forEach(t),vQe=i(y),ys=n(y,"LI",{});var E0=s(ys);SH=n(E0,"STRONG",{});var p9r=s(SH);TQe=r(p9r,"splinter"),p9r.forEach(t),FQe=r(E0," \u2014 "),_k=n(E0,"A",{href:!0});var _9r=s(_k);CQe=r(_9r,"SplinterTokenizer"),_9r.forEach(t),MQe=r(E0," or "),uk=n(E0,"A",{href:!0});var u9r=s(uk);EQe=r(u9r,"SplinterTokenizerFast"),u9r.forEach(t),yQe=r(E0," (Splinter model)"),E0.forEach(t),wQe=i(y),ws=n(y,"LI",{});var y0=s(ws);PH=n(y0,"STRONG",{});var b9r=s(PH);AQe=r(b9r,"squeezebert"),b9r.forEach(t),LQe=r(y0," \u2014 "),bk=n(y0,"A",{href:!0});var v9r=s(bk);BQe=r(v9r,"SqueezeBertTokenizer"),v9r.forEach(t),kQe=r(y0," or "),vk=n(y0,"A",{href:!0});var T9r=s(vk);xQe=r(T9r,"SqueezeBertTokenizerFast"),T9r.forEach(t),RQe=r(y0," (SqueezeBERT model)"),y0.forEach(t),SQe=i(y),As=n(y,"LI",{});var w0=s(As);$H=n(w0,"STRONG",{});var F9r=s($H);PQe=r(F9r,"t5"),F9r.forEach(t),$Qe=r(w0," \u2014 "),Tk=n(w0,"A",{href:!0});var C9r=s(Tk);IQe=r(C9r,"T5Tokenizer"),C9r.forEach(t),jQe=r(w0," or "),Fk=n(w0,"A",{href:!0});var M9r=s(Fk);NQe=r(M9r,"T5TokenizerFast"),M9r.forEach(t),DQe=r(w0," (T5 model)"),w0.forEach(t),qQe=i(y),jg=n(y,"LI",{});var b6e=s(jg);IH=n(b6e,"STRONG",{});var E9r=s(IH);GQe=r(E9r,"tapas"),E9r.forEach(t),OQe=r(b6e," \u2014 "),Ck=n(b6e,"A",{href:!0});var y9r=s(Ck);XQe=r(y9r,"TapasTokenizer"),y9r.forEach(t),zQe=r(b6e," (TAPAS model)"),b6e.forEach(t),VQe=i(y),Ng=n(y,"LI",{});var v6e=s(Ng);jH=n(v6e,"STRONG",{});var w9r=s(jH);WQe=r(w9r,"transfo-xl"),w9r.forEach(t),QQe=r(v6e," \u2014 "),Mk=n(v6e,"A",{href:!0});var A9r=s(Mk);HQe=r(A9r,"TransfoXLTokenizer"),A9r.forEach(t),UQe=r(v6e," (Transformer-XL model)"),v6e.forEach(t),JQe=i(y),Dg=n(y,"LI",{});var T6e=s(Dg);NH=n(T6e,"STRONG",{});var L9r=s(NH);YQe=r(L9r,"wav2vec2"),L9r.forEach(t),KQe=r(T6e," \u2014 "),Ek=n(T6e,"A",{href:!0});var B9r=s(Ek);ZQe=r(B9r,"Wav2Vec2CTCTokenizer"),B9r.forEach(t),eHe=r(T6e," (Wav2Vec2 model)"),T6e.forEach(t),oHe=i(y),qg=n(y,"LI",{});var F6e=s(qg);DH=n(F6e,"STRONG",{});var k9r=s(DH);rHe=r(k9r,"wav2vec2_phoneme"),k9r.forEach(t),tHe=r(F6e," \u2014 "),yk=n(F6e,"A",{href:!0});var x9r=s(yk);aHe=r(x9r,"Wav2Vec2PhonemeCTCTokenizer"),x9r.forEach(t),nHe=r(F6e," (Wav2Vec2Phoneme model)"),F6e.forEach(t),sHe=i(y),Ls=n(y,"LI",{});var A0=s(Ls);qH=n(A0,"STRONG",{});var R9r=s(qH);lHe=r(R9r,"xglm"),R9r.forEach(t),iHe=r(A0," \u2014 "),wk=n(A0,"A",{href:!0});var S9r=s(wk);dHe=r(S9r,"XGLMTokenizer"),S9r.forEach(t),cHe=r(A0," or "),Ak=n(A0,"A",{href:!0});var P9r=s(Ak);fHe=r(P9r,"XGLMTokenizerFast"),P9r.forEach(t),mHe=r(A0," (XGLM model)"),A0.forEach(t),gHe=i(y),Gg=n(y,"LI",{});var C6e=s(Gg);GH=n(C6e,"STRONG",{});var $9r=s(GH);hHe=r($9r,"xlm"),$9r.forEach(t),pHe=r(C6e," \u2014 "),Lk=n(C6e,"A",{href:!0});var I9r=s(Lk);_He=r(I9r,"XLMTokenizer"),I9r.forEach(t),uHe=r(C6e," (XLM model)"),C6e.forEach(t),bHe=i(y),Og=n(y,"LI",{});var M6e=s(Og);OH=n(M6e,"STRONG",{});var j9r=s(OH);vHe=r(j9r,"xlm-prophetnet"),j9r.forEach(t),THe=r(M6e," \u2014 "),Bk=n(M6e,"A",{href:!0});var N9r=s(Bk);FHe=r(N9r,"XLMProphetNetTokenizer"),N9r.forEach(t),CHe=r(M6e," (XLMProphetNet model)"),M6e.forEach(t),MHe=i(y),Bs=n(y,"LI",{});var L0=s(Bs);XH=n(L0,"STRONG",{});var D9r=s(XH);EHe=r(D9r,"xlm-roberta"),D9r.forEach(t),yHe=r(L0," \u2014 "),kk=n(L0,"A",{href:!0});var q9r=s(kk);wHe=r(q9r,"XLMRobertaTokenizer"),q9r.forEach(t),AHe=r(L0," or "),xk=n(L0,"A",{href:!0});var G9r=s(xk);LHe=r(G9r,"XLMRobertaTokenizerFast"),G9r.forEach(t),BHe=r(L0," (XLM-RoBERTa model)"),L0.forEach(t),kHe=i(y),ks=n(y,"LI",{});var B0=s(ks);zH=n(B0,"STRONG",{});var O9r=s(zH);xHe=r(O9r,"xlnet"),O9r.forEach(t),RHe=r(B0," \u2014 "),Rk=n(B0,"A",{href:!0});var X9r=s(Rk);SHe=r(X9r,"XLNetTokenizer"),X9r.forEach(t),PHe=r(B0," or "),Sk=n(B0,"A",{href:!0});var z9r=s(Sk);$He=r(z9r,"XLNetTokenizerFast"),z9r.forEach(t),IHe=r(B0," (XLNet model)"),B0.forEach(t),y.forEach(t),jHe=i(da),VH=n(da,"P",{});var V9r=s(VH);NHe=r(V9r,"Examples:"),V9r.forEach(t),DHe=i(da),m(g4.$$.fragment,da),da.forEach(t),qHe=i($s),Xg=n($s,"DIV",{class:!0});var z9e=s(Xg);m(h4.$$.fragment,z9e),GHe=i(z9e),WH=n(z9e,"P",{});var W9r=s(WH);OHe=r(W9r,"Register a new tokenizer in this mapping."),W9r.forEach(t),z9e.forEach(t),$s.forEach(t),O0e=i(d),ji=n(d,"H2",{class:!0});var V9e=s(ji);zg=n(V9e,"A",{id:!0,class:!0,href:!0});var Q9r=s(zg);QH=n(Q9r,"SPAN",{});var H9r=s(QH);m(p4.$$.fragment,H9r),H9r.forEach(t),Q9r.forEach(t),XHe=i(V9e),HH=n(V9e,"SPAN",{});var U9r=s(HH);zHe=r(U9r,"AutoFeatureExtractor"),U9r.forEach(t),V9e.forEach(t),X0e=i(d),Xo=n(d,"DIV",{class:!0});var Is=s(Xo);m(_4.$$.fragment,Is),VHe=i(Is),u4=n(Is,"P",{});var W9e=s(u4);WHe=r(W9e,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Pk=n(W9e,"A",{href:!0});var J9r=s(Pk);QHe=r(J9r,"AutoFeatureExtractor.from_pretrained()"),J9r.forEach(t),HHe=r(W9e," class method."),W9e.forEach(t),UHe=i(Is),b4=n(Is,"P",{});var Q9e=s(b4);JHe=r(Q9e,"This class cannot be instantiated directly using "),UH=n(Q9e,"CODE",{});var Y9r=s(UH);YHe=r(Y9r,"__init__()"),Y9r.forEach(t),KHe=r(Q9e," (throws an error)."),Q9e.forEach(t),ZHe=i(Is),Le=n(Is,"DIV",{class:!0});var xt=s(Le);m(v4.$$.fragment,xt),eUe=i(xt),JH=n(xt,"P",{});var K9r=s(JH);oUe=r(K9r,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),K9r.forEach(t),rUe=i(xt),Na=n(xt,"P",{});var eC=s(Na);tUe=r(eC,"The feature extractor class to instantiate is selected based on the "),YH=n(eC,"CODE",{});var Z9r=s(YH);aUe=r(Z9r,"model_type"),Z9r.forEach(t),nUe=r(eC,` property of the config object
(either passed as an argument or loaded from `),KH=n(eC,"CODE",{});var eBr=s(KH);sUe=r(eBr,"pretrained_model_name_or_path"),eBr.forEach(t),lUe=r(eC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ZH=n(eC,"CODE",{});var oBr=s(ZH);iUe=r(oBr,"pretrained_model_name_or_path"),oBr.forEach(t),dUe=r(eC,":"),eC.forEach(t),cUe=i(xt),ne=n(xt,"UL",{});var ie=s(ne);Vg=n(ie,"LI",{});var E6e=s(Vg);eU=n(E6e,"STRONG",{});var rBr=s(eU);fUe=r(rBr,"beit"),rBr.forEach(t),mUe=r(E6e," \u2014 "),$k=n(E6e,"A",{href:!0});var tBr=s($k);gUe=r(tBr,"BeitFeatureExtractor"),tBr.forEach(t),hUe=r(E6e," (BEiT model)"),E6e.forEach(t),pUe=i(ie),Wg=n(ie,"LI",{});var y6e=s(Wg);oU=n(y6e,"STRONG",{});var aBr=s(oU);_Ue=r(aBr,"clip"),aBr.forEach(t),uUe=r(y6e," \u2014 "),Ik=n(y6e,"A",{href:!0});var nBr=s(Ik);bUe=r(nBr,"CLIPFeatureExtractor"),nBr.forEach(t),vUe=r(y6e," (CLIP model)"),y6e.forEach(t),TUe=i(ie),Qg=n(ie,"LI",{});var w6e=s(Qg);rU=n(w6e,"STRONG",{});var sBr=s(rU);FUe=r(sBr,"convnext"),sBr.forEach(t),CUe=r(w6e," \u2014 "),jk=n(w6e,"A",{href:!0});var lBr=s(jk);MUe=r(lBr,"ConvNextFeatureExtractor"),lBr.forEach(t),EUe=r(w6e," (ConvNext model)"),w6e.forEach(t),yUe=i(ie),Hg=n(ie,"LI",{});var A6e=s(Hg);tU=n(A6e,"STRONG",{});var iBr=s(tU);wUe=r(iBr,"deit"),iBr.forEach(t),AUe=r(A6e," \u2014 "),Nk=n(A6e,"A",{href:!0});var dBr=s(Nk);LUe=r(dBr,"DeiTFeatureExtractor"),dBr.forEach(t),BUe=r(A6e," (DeiT model)"),A6e.forEach(t),kUe=i(ie),Ug=n(ie,"LI",{});var L6e=s(Ug);aU=n(L6e,"STRONG",{});var cBr=s(aU);xUe=r(cBr,"detr"),cBr.forEach(t),RUe=r(L6e," \u2014 "),Dk=n(L6e,"A",{href:!0});var fBr=s(Dk);SUe=r(fBr,"DetrFeatureExtractor"),fBr.forEach(t),PUe=r(L6e," (DETR model)"),L6e.forEach(t),$Ue=i(ie),Jg=n(ie,"LI",{});var B6e=s(Jg);nU=n(B6e,"STRONG",{});var mBr=s(nU);IUe=r(mBr,"hubert"),mBr.forEach(t),jUe=r(B6e," \u2014 "),qk=n(B6e,"A",{href:!0});var gBr=s(qk);NUe=r(gBr,"Wav2Vec2FeatureExtractor"),gBr.forEach(t),DUe=r(B6e," (Hubert model)"),B6e.forEach(t),qUe=i(ie),Yg=n(ie,"LI",{});var k6e=s(Yg);sU=n(k6e,"STRONG",{});var hBr=s(sU);GUe=r(hBr,"layoutlmv2"),hBr.forEach(t),OUe=r(k6e," \u2014 "),Gk=n(k6e,"A",{href:!0});var pBr=s(Gk);XUe=r(pBr,"LayoutLMv2FeatureExtractor"),pBr.forEach(t),zUe=r(k6e," (LayoutLMv2 model)"),k6e.forEach(t),VUe=i(ie),Kg=n(ie,"LI",{});var x6e=s(Kg);lU=n(x6e,"STRONG",{});var _Br=s(lU);WUe=r(_Br,"perceiver"),_Br.forEach(t),QUe=r(x6e," \u2014 "),Ok=n(x6e,"A",{href:!0});var uBr=s(Ok);HUe=r(uBr,"PerceiverFeatureExtractor"),uBr.forEach(t),UUe=r(x6e," (Perceiver model)"),x6e.forEach(t),JUe=i(ie),Zg=n(ie,"LI",{});var R6e=s(Zg);iU=n(R6e,"STRONG",{});var bBr=s(iU);YUe=r(bBr,"poolformer"),bBr.forEach(t),KUe=r(R6e," \u2014 "),Xk=n(R6e,"A",{href:!0});var vBr=s(Xk);ZUe=r(vBr,"PoolFormerFeatureExtractor"),vBr.forEach(t),eJe=r(R6e," (PoolFormer model)"),R6e.forEach(t),oJe=i(ie),eh=n(ie,"LI",{});var S6e=s(eh);dU=n(S6e,"STRONG",{});var TBr=s(dU);rJe=r(TBr,"segformer"),TBr.forEach(t),tJe=r(S6e," \u2014 "),zk=n(S6e,"A",{href:!0});var FBr=s(zk);aJe=r(FBr,"SegformerFeatureExtractor"),FBr.forEach(t),nJe=r(S6e," (SegFormer model)"),S6e.forEach(t),sJe=i(ie),oh=n(ie,"LI",{});var P6e=s(oh);cU=n(P6e,"STRONG",{});var CBr=s(cU);lJe=r(CBr,"speech_to_text"),CBr.forEach(t),iJe=r(P6e," \u2014 "),Vk=n(P6e,"A",{href:!0});var MBr=s(Vk);dJe=r(MBr,"Speech2TextFeatureExtractor"),MBr.forEach(t),cJe=r(P6e," (Speech2Text model)"),P6e.forEach(t),fJe=i(ie),rh=n(ie,"LI",{});var $6e=s(rh);fU=n($6e,"STRONG",{});var EBr=s(fU);mJe=r(EBr,"swin"),EBr.forEach(t),gJe=r($6e," \u2014 "),Wk=n($6e,"A",{href:!0});var yBr=s(Wk);hJe=r(yBr,"ViTFeatureExtractor"),yBr.forEach(t),pJe=r($6e," (Swin model)"),$6e.forEach(t),_Je=i(ie),th=n(ie,"LI",{});var I6e=s(th);mU=n(I6e,"STRONG",{});var wBr=s(mU);uJe=r(wBr,"vit"),wBr.forEach(t),bJe=r(I6e," \u2014 "),Qk=n(I6e,"A",{href:!0});var ABr=s(Qk);vJe=r(ABr,"ViTFeatureExtractor"),ABr.forEach(t),TJe=r(I6e," (ViT model)"),I6e.forEach(t),FJe=i(ie),ah=n(ie,"LI",{});var j6e=s(ah);gU=n(j6e,"STRONG",{});var LBr=s(gU);CJe=r(LBr,"vit_mae"),LBr.forEach(t),MJe=r(j6e," \u2014 "),Hk=n(j6e,"A",{href:!0});var BBr=s(Hk);EJe=r(BBr,"ViTFeatureExtractor"),BBr.forEach(t),yJe=r(j6e," (ViTMAE model)"),j6e.forEach(t),wJe=i(ie),nh=n(ie,"LI",{});var N6e=s(nh);hU=n(N6e,"STRONG",{});var kBr=s(hU);AJe=r(kBr,"wav2vec2"),kBr.forEach(t),LJe=r(N6e," \u2014 "),Uk=n(N6e,"A",{href:!0});var xBr=s(Uk);BJe=r(xBr,"Wav2Vec2FeatureExtractor"),xBr.forEach(t),kJe=r(N6e," (Wav2Vec2 model)"),N6e.forEach(t),ie.forEach(t),xJe=i(xt),m(sh.$$.fragment,xt),RJe=i(xt),pU=n(xt,"P",{});var RBr=s(pU);SJe=r(RBr,"Examples:"),RBr.forEach(t),PJe=i(xt),m(T4.$$.fragment,xt),xt.forEach(t),$Je=i(Is),lh=n(Is,"DIV",{class:!0});var H9e=s(lh);m(F4.$$.fragment,H9e),IJe=i(H9e),_U=n(H9e,"P",{});var SBr=s(_U);jJe=r(SBr,"Register a new feature extractor for this class."),SBr.forEach(t),H9e.forEach(t),Is.forEach(t),z0e=i(d),Ni=n(d,"H2",{class:!0});var U9e=s(Ni);ih=n(U9e,"A",{id:!0,class:!0,href:!0});var PBr=s(ih);uU=n(PBr,"SPAN",{});var $Br=s(uU);m(C4.$$.fragment,$Br),$Br.forEach(t),PBr.forEach(t),NJe=i(U9e),bU=n(U9e,"SPAN",{});var IBr=s(bU);DJe=r(IBr,"AutoProcessor"),IBr.forEach(t),U9e.forEach(t),V0e=i(d),zo=n(d,"DIV",{class:!0});var js=s(zo);m(M4.$$.fragment,js),qJe=i(js),E4=n(js,"P",{});var J9e=s(E4);GJe=r(J9e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Jk=n(J9e,"A",{href:!0});var jBr=s(Jk);OJe=r(jBr,"AutoProcessor.from_pretrained()"),jBr.forEach(t),XJe=r(J9e," class method."),J9e.forEach(t),zJe=i(js),y4=n(js,"P",{});var Y9e=s(y4);VJe=r(Y9e,"This class cannot be instantiated directly using "),vU=n(Y9e,"CODE",{});var NBr=s(vU);WJe=r(NBr,"__init__()"),NBr.forEach(t),QJe=r(Y9e," (throws an error)."),Y9e.forEach(t),HJe=i(js),Be=n(js,"DIV",{class:!0});var Rt=s(Be);m(w4.$$.fragment,Rt),UJe=i(Rt),TU=n(Rt,"P",{});var DBr=s(TU);JJe=r(DBr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),DBr.forEach(t),YJe=i(Rt),Di=n(Rt,"P",{});var SX=s(Di);KJe=r(SX,"The processor class to instantiate is selected based on the "),FU=n(SX,"CODE",{});var qBr=s(FU);ZJe=r(qBr,"model_type"),qBr.forEach(t),eYe=r(SX,` property of the config object (either
passed as an argument or loaded from `),CU=n(SX,"CODE",{});var GBr=s(CU);oYe=r(GBr,"pretrained_model_name_or_path"),GBr.forEach(t),rYe=r(SX," if possible):"),SX.forEach(t),tYe=i(Rt),we=n(Rt,"UL",{});var No=s(we);dh=n(No,"LI",{});var D6e=s(dh);MU=n(D6e,"STRONG",{});var OBr=s(MU);aYe=r(OBr,"clip"),OBr.forEach(t),nYe=r(D6e," \u2014 "),Yk=n(D6e,"A",{href:!0});var XBr=s(Yk);sYe=r(XBr,"CLIPProcessor"),XBr.forEach(t),lYe=r(D6e," (CLIP model)"),D6e.forEach(t),iYe=i(No),ch=n(No,"LI",{});var q6e=s(ch);EU=n(q6e,"STRONG",{});var zBr=s(EU);dYe=r(zBr,"layoutlmv2"),zBr.forEach(t),cYe=r(q6e," \u2014 "),Kk=n(q6e,"A",{href:!0});var VBr=s(Kk);fYe=r(VBr,"LayoutLMv2Processor"),VBr.forEach(t),mYe=r(q6e," (LayoutLMv2 model)"),q6e.forEach(t),gYe=i(No),fh=n(No,"LI",{});var G6e=s(fh);yU=n(G6e,"STRONG",{});var WBr=s(yU);hYe=r(WBr,"layoutxlm"),WBr.forEach(t),pYe=r(G6e," \u2014 "),Zk=n(G6e,"A",{href:!0});var QBr=s(Zk);_Ye=r(QBr,"LayoutXLMProcessor"),QBr.forEach(t),uYe=r(G6e," (LayoutXLM model)"),G6e.forEach(t),bYe=i(No),mh=n(No,"LI",{});var O6e=s(mh);wU=n(O6e,"STRONG",{});var HBr=s(wU);vYe=r(HBr,"speech_to_text"),HBr.forEach(t),TYe=r(O6e," \u2014 "),ex=n(O6e,"A",{href:!0});var UBr=s(ex);FYe=r(UBr,"Speech2TextProcessor"),UBr.forEach(t),CYe=r(O6e," (Speech2Text model)"),O6e.forEach(t),MYe=i(No),gh=n(No,"LI",{});var X6e=s(gh);AU=n(X6e,"STRONG",{});var JBr=s(AU);EYe=r(JBr,"speech_to_text_2"),JBr.forEach(t),yYe=r(X6e," \u2014 "),ox=n(X6e,"A",{href:!0});var YBr=s(ox);wYe=r(YBr,"Speech2Text2Processor"),YBr.forEach(t),AYe=r(X6e," (Speech2Text2 model)"),X6e.forEach(t),LYe=i(No),hh=n(No,"LI",{});var z6e=s(hh);LU=n(z6e,"STRONG",{});var KBr=s(LU);BYe=r(KBr,"trocr"),KBr.forEach(t),kYe=r(z6e," \u2014 "),rx=n(z6e,"A",{href:!0});var ZBr=s(rx);xYe=r(ZBr,"TrOCRProcessor"),ZBr.forEach(t),RYe=r(z6e," (TrOCR model)"),z6e.forEach(t),SYe=i(No),ph=n(No,"LI",{});var V6e=s(ph);BU=n(V6e,"STRONG",{});var ekr=s(BU);PYe=r(ekr,"vision-text-dual-encoder"),ekr.forEach(t),$Ye=r(V6e," \u2014 "),tx=n(V6e,"A",{href:!0});var okr=s(tx);IYe=r(okr,"VisionTextDualEncoderProcessor"),okr.forEach(t),jYe=r(V6e," (VisionTextDualEncoder model)"),V6e.forEach(t),NYe=i(No),_h=n(No,"LI",{});var W6e=s(_h);kU=n(W6e,"STRONG",{});var rkr=s(kU);DYe=r(rkr,"wav2vec2"),rkr.forEach(t),qYe=r(W6e," \u2014 "),ax=n(W6e,"A",{href:!0});var tkr=s(ax);GYe=r(tkr,"Wav2Vec2Processor"),tkr.forEach(t),OYe=r(W6e," (Wav2Vec2 model)"),W6e.forEach(t),No.forEach(t),XYe=i(Rt),m(uh.$$.fragment,Rt),zYe=i(Rt),xU=n(Rt,"P",{});var akr=s(xU);VYe=r(akr,"Examples:"),akr.forEach(t),WYe=i(Rt),m(A4.$$.fragment,Rt),Rt.forEach(t),QYe=i(js),bh=n(js,"DIV",{class:!0});var K9e=s(bh);m(L4.$$.fragment,K9e),HYe=i(K9e),RU=n(K9e,"P",{});var nkr=s(RU);UYe=r(nkr,"Register a new processor for this class."),nkr.forEach(t),K9e.forEach(t),js.forEach(t),W0e=i(d),qi=n(d,"H2",{class:!0});var Z9e=s(qi);vh=n(Z9e,"A",{id:!0,class:!0,href:!0});var skr=s(vh);SU=n(skr,"SPAN",{});var lkr=s(SU);m(B4.$$.fragment,lkr),lkr.forEach(t),skr.forEach(t),JYe=i(Z9e),PU=n(Z9e,"SPAN",{});var ikr=s(PU);YYe=r(ikr,"AutoModel"),ikr.forEach(t),Z9e.forEach(t),Q0e=i(d),Vo=n(d,"DIV",{class:!0});var Ns=s(Vo);m(k4.$$.fragment,Ns),KYe=i(Ns),Gi=n(Ns,"P",{});var PX=s(Gi);ZYe=r(PX,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$U=n(PX,"CODE",{});var dkr=s($U);eKe=r(dkr,"from_pretrained()"),dkr.forEach(t),oKe=r(PX,"class method or the "),IU=n(PX,"CODE",{});var ckr=s(IU);rKe=r(ckr,"from_config()"),ckr.forEach(t),tKe=r(PX,`class
method.`),PX.forEach(t),aKe=i(Ns),x4=n(Ns,"P",{});var eBe=s(x4);nKe=r(eBe,"This class cannot be instantiated directly using "),jU=n(eBe,"CODE",{});var fkr=s(jU);sKe=r(fkr,"__init__()"),fkr.forEach(t),lKe=r(eBe," (throws an error)."),eBe.forEach(t),iKe=i(Ns),Nr=n(Ns,"DIV",{class:!0});var Ds=s(Nr);m(R4.$$.fragment,Ds),dKe=i(Ds),NU=n(Ds,"P",{});var mkr=s(NU);cKe=r(mkr,"Instantiates one of the base model classes of the library from a configuration."),mkr.forEach(t),fKe=i(Ds),Oi=n(Ds,"P",{});var $X=s(Oi);mKe=r($X,`Note:
Loading a model from its configuration file does `),DU=n($X,"STRONG",{});var gkr=s(DU);gKe=r(gkr,"not"),gkr.forEach(t),hKe=r($X,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n($X,"CODE",{});var hkr=s(qU);pKe=r(hkr,"from_pretrained()"),hkr.forEach(t),_Ke=r($X,"to load the model weights."),$X.forEach(t),uKe=i(Ds),GU=n(Ds,"P",{});var pkr=s(GU);bKe=r(pkr,"Examples:"),pkr.forEach(t),vKe=i(Ds),m(S4.$$.fragment,Ds),Ds.forEach(t),TKe=i(Ns),ke=n(Ns,"DIV",{class:!0});var St=s(ke);m(P4.$$.fragment,St),FKe=i(St),OU=n(St,"P",{});var _kr=s(OU);CKe=r(_kr,"Instantiate one of the base model classes of the library from a pretrained model."),_kr.forEach(t),MKe=i(St),Da=n(St,"P",{});var oC=s(Da);EKe=r(oC,"The model class to instantiate is selected based on the "),XU=n(oC,"CODE",{});var ukr=s(XU);yKe=r(ukr,"model_type"),ukr.forEach(t),wKe=r(oC,` property of the config object (either
passed as an argument or loaded from `),zU=n(oC,"CODE",{});var bkr=s(zU);AKe=r(bkr,"pretrained_model_name_or_path"),bkr.forEach(t),LKe=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VU=n(oC,"CODE",{});var vkr=s(VU);BKe=r(vkr,"pretrained_model_name_or_path"),vkr.forEach(t),kKe=r(oC,":"),oC.forEach(t),xKe=i(St),F=n(St,"UL",{});var C=s(F);Th=n(C,"LI",{});var Q6e=s(Th);WU=n(Q6e,"STRONG",{});var Tkr=s(WU);RKe=r(Tkr,"albert"),Tkr.forEach(t),SKe=r(Q6e," \u2014 "),nx=n(Q6e,"A",{href:!0});var Fkr=s(nx);PKe=r(Fkr,"AlbertModel"),Fkr.forEach(t),$Ke=r(Q6e," (ALBERT model)"),Q6e.forEach(t),IKe=i(C),Fh=n(C,"LI",{});var H6e=s(Fh);QU=n(H6e,"STRONG",{});var Ckr=s(QU);jKe=r(Ckr,"bart"),Ckr.forEach(t),NKe=r(H6e," \u2014 "),sx=n(H6e,"A",{href:!0});var Mkr=s(sx);DKe=r(Mkr,"BartModel"),Mkr.forEach(t),qKe=r(H6e," (BART model)"),H6e.forEach(t),GKe=i(C),Ch=n(C,"LI",{});var U6e=s(Ch);HU=n(U6e,"STRONG",{});var Ekr=s(HU);OKe=r(Ekr,"beit"),Ekr.forEach(t),XKe=r(U6e," \u2014 "),lx=n(U6e,"A",{href:!0});var ykr=s(lx);zKe=r(ykr,"BeitModel"),ykr.forEach(t),VKe=r(U6e," (BEiT model)"),U6e.forEach(t),WKe=i(C),Mh=n(C,"LI",{});var J6e=s(Mh);UU=n(J6e,"STRONG",{});var wkr=s(UU);QKe=r(wkr,"bert"),wkr.forEach(t),HKe=r(J6e," \u2014 "),ix=n(J6e,"A",{href:!0});var Akr=s(ix);UKe=r(Akr,"BertModel"),Akr.forEach(t),JKe=r(J6e," (BERT model)"),J6e.forEach(t),YKe=i(C),Eh=n(C,"LI",{});var Y6e=s(Eh);JU=n(Y6e,"STRONG",{});var Lkr=s(JU);KKe=r(Lkr,"bert-generation"),Lkr.forEach(t),ZKe=r(Y6e," \u2014 "),dx=n(Y6e,"A",{href:!0});var Bkr=s(dx);eZe=r(Bkr,"BertGenerationEncoder"),Bkr.forEach(t),oZe=r(Y6e," (Bert Generation model)"),Y6e.forEach(t),rZe=i(C),yh=n(C,"LI",{});var K6e=s(yh);YU=n(K6e,"STRONG",{});var kkr=s(YU);tZe=r(kkr,"big_bird"),kkr.forEach(t),aZe=r(K6e," \u2014 "),cx=n(K6e,"A",{href:!0});var xkr=s(cx);nZe=r(xkr,"BigBirdModel"),xkr.forEach(t),sZe=r(K6e," (BigBird model)"),K6e.forEach(t),lZe=i(C),wh=n(C,"LI",{});var Z6e=s(wh);KU=n(Z6e,"STRONG",{});var Rkr=s(KU);iZe=r(Rkr,"bigbird_pegasus"),Rkr.forEach(t),dZe=r(Z6e," \u2014 "),fx=n(Z6e,"A",{href:!0});var Skr=s(fx);cZe=r(Skr,"BigBirdPegasusModel"),Skr.forEach(t),fZe=r(Z6e," (BigBirdPegasus model)"),Z6e.forEach(t),mZe=i(C),Ah=n(C,"LI",{});var eTe=s(Ah);ZU=n(eTe,"STRONG",{});var Pkr=s(ZU);gZe=r(Pkr,"blenderbot"),Pkr.forEach(t),hZe=r(eTe," \u2014 "),mx=n(eTe,"A",{href:!0});var $kr=s(mx);pZe=r($kr,"BlenderbotModel"),$kr.forEach(t),_Ze=r(eTe," (Blenderbot model)"),eTe.forEach(t),uZe=i(C),Lh=n(C,"LI",{});var oTe=s(Lh);eJ=n(oTe,"STRONG",{});var Ikr=s(eJ);bZe=r(Ikr,"blenderbot-small"),Ikr.forEach(t),vZe=r(oTe," \u2014 "),gx=n(oTe,"A",{href:!0});var jkr=s(gx);TZe=r(jkr,"BlenderbotSmallModel"),jkr.forEach(t),FZe=r(oTe," (BlenderbotSmall model)"),oTe.forEach(t),CZe=i(C),Bh=n(C,"LI",{});var rTe=s(Bh);oJ=n(rTe,"STRONG",{});var Nkr=s(oJ);MZe=r(Nkr,"camembert"),Nkr.forEach(t),EZe=r(rTe," \u2014 "),hx=n(rTe,"A",{href:!0});var Dkr=s(hx);yZe=r(Dkr,"CamembertModel"),Dkr.forEach(t),wZe=r(rTe," (CamemBERT model)"),rTe.forEach(t),AZe=i(C),kh=n(C,"LI",{});var tTe=s(kh);rJ=n(tTe,"STRONG",{});var qkr=s(rJ);LZe=r(qkr,"canine"),qkr.forEach(t),BZe=r(tTe," \u2014 "),px=n(tTe,"A",{href:!0});var Gkr=s(px);kZe=r(Gkr,"CanineModel"),Gkr.forEach(t),xZe=r(tTe," (Canine model)"),tTe.forEach(t),RZe=i(C),xh=n(C,"LI",{});var aTe=s(xh);tJ=n(aTe,"STRONG",{});var Okr=s(tJ);SZe=r(Okr,"clip"),Okr.forEach(t),PZe=r(aTe," \u2014 "),_x=n(aTe,"A",{href:!0});var Xkr=s(_x);$Ze=r(Xkr,"CLIPModel"),Xkr.forEach(t),IZe=r(aTe," (CLIP model)"),aTe.forEach(t),jZe=i(C),Rh=n(C,"LI",{});var nTe=s(Rh);aJ=n(nTe,"STRONG",{});var zkr=s(aJ);NZe=r(zkr,"convbert"),zkr.forEach(t),DZe=r(nTe," \u2014 "),ux=n(nTe,"A",{href:!0});var Vkr=s(ux);qZe=r(Vkr,"ConvBertModel"),Vkr.forEach(t),GZe=r(nTe," (ConvBERT model)"),nTe.forEach(t),OZe=i(C),Sh=n(C,"LI",{});var sTe=s(Sh);nJ=n(sTe,"STRONG",{});var Wkr=s(nJ);XZe=r(Wkr,"convnext"),Wkr.forEach(t),zZe=r(sTe," \u2014 "),bx=n(sTe,"A",{href:!0});var Qkr=s(bx);VZe=r(Qkr,"ConvNextModel"),Qkr.forEach(t),WZe=r(sTe," (ConvNext model)"),sTe.forEach(t),QZe=i(C),Ph=n(C,"LI",{});var lTe=s(Ph);sJ=n(lTe,"STRONG",{});var Hkr=s(sJ);HZe=r(Hkr,"ctrl"),Hkr.forEach(t),UZe=r(lTe," \u2014 "),vx=n(lTe,"A",{href:!0});var Ukr=s(vx);JZe=r(Ukr,"CTRLModel"),Ukr.forEach(t),YZe=r(lTe," (CTRL model)"),lTe.forEach(t),KZe=i(C),$h=n(C,"LI",{});var iTe=s($h);lJ=n(iTe,"STRONG",{});var Jkr=s(lJ);ZZe=r(Jkr,"deberta"),Jkr.forEach(t),eeo=r(iTe," \u2014 "),Tx=n(iTe,"A",{href:!0});var Ykr=s(Tx);oeo=r(Ykr,"DebertaModel"),Ykr.forEach(t),reo=r(iTe," (DeBERTa model)"),iTe.forEach(t),teo=i(C),Ih=n(C,"LI",{});var dTe=s(Ih);iJ=n(dTe,"STRONG",{});var Kkr=s(iJ);aeo=r(Kkr,"deberta-v2"),Kkr.forEach(t),neo=r(dTe," \u2014 "),Fx=n(dTe,"A",{href:!0});var Zkr=s(Fx);seo=r(Zkr,"DebertaV2Model"),Zkr.forEach(t),leo=r(dTe," (DeBERTa-v2 model)"),dTe.forEach(t),ieo=i(C),jh=n(C,"LI",{});var cTe=s(jh);dJ=n(cTe,"STRONG",{});var exr=s(dJ);deo=r(exr,"deit"),exr.forEach(t),ceo=r(cTe," \u2014 "),Cx=n(cTe,"A",{href:!0});var oxr=s(Cx);feo=r(oxr,"DeiTModel"),oxr.forEach(t),meo=r(cTe," (DeiT model)"),cTe.forEach(t),geo=i(C),Nh=n(C,"LI",{});var fTe=s(Nh);cJ=n(fTe,"STRONG",{});var rxr=s(cJ);heo=r(rxr,"detr"),rxr.forEach(t),peo=r(fTe," \u2014 "),Mx=n(fTe,"A",{href:!0});var txr=s(Mx);_eo=r(txr,"DetrModel"),txr.forEach(t),ueo=r(fTe," (DETR model)"),fTe.forEach(t),beo=i(C),Dh=n(C,"LI",{});var mTe=s(Dh);fJ=n(mTe,"STRONG",{});var axr=s(fJ);veo=r(axr,"distilbert"),axr.forEach(t),Teo=r(mTe," \u2014 "),Ex=n(mTe,"A",{href:!0});var nxr=s(Ex);Feo=r(nxr,"DistilBertModel"),nxr.forEach(t),Ceo=r(mTe," (DistilBERT model)"),mTe.forEach(t),Meo=i(C),qh=n(C,"LI",{});var gTe=s(qh);mJ=n(gTe,"STRONG",{});var sxr=s(mJ);Eeo=r(sxr,"dpr"),sxr.forEach(t),yeo=r(gTe," \u2014 "),yx=n(gTe,"A",{href:!0});var lxr=s(yx);weo=r(lxr,"DPRQuestionEncoder"),lxr.forEach(t),Aeo=r(gTe," (DPR model)"),gTe.forEach(t),Leo=i(C),Gh=n(C,"LI",{});var hTe=s(Gh);gJ=n(hTe,"STRONG",{});var ixr=s(gJ);Beo=r(ixr,"electra"),ixr.forEach(t),keo=r(hTe," \u2014 "),wx=n(hTe,"A",{href:!0});var dxr=s(wx);xeo=r(dxr,"ElectraModel"),dxr.forEach(t),Reo=r(hTe," (ELECTRA model)"),hTe.forEach(t),Seo=i(C),Oh=n(C,"LI",{});var pTe=s(Oh);hJ=n(pTe,"STRONG",{});var cxr=s(hJ);Peo=r(cxr,"flaubert"),cxr.forEach(t),$eo=r(pTe," \u2014 "),Ax=n(pTe,"A",{href:!0});var fxr=s(Ax);Ieo=r(fxr,"FlaubertModel"),fxr.forEach(t),jeo=r(pTe," (FlauBERT model)"),pTe.forEach(t),Neo=i(C),Xh=n(C,"LI",{});var _Te=s(Xh);pJ=n(_Te,"STRONG",{});var mxr=s(pJ);Deo=r(mxr,"fnet"),mxr.forEach(t),qeo=r(_Te," \u2014 "),Lx=n(_Te,"A",{href:!0});var gxr=s(Lx);Geo=r(gxr,"FNetModel"),gxr.forEach(t),Oeo=r(_Te," (FNet model)"),_Te.forEach(t),Xeo=i(C),zh=n(C,"LI",{});var uTe=s(zh);_J=n(uTe,"STRONG",{});var hxr=s(_J);zeo=r(hxr,"fsmt"),hxr.forEach(t),Veo=r(uTe," \u2014 "),Bx=n(uTe,"A",{href:!0});var pxr=s(Bx);Weo=r(pxr,"FSMTModel"),pxr.forEach(t),Qeo=r(uTe," (FairSeq Machine-Translation model)"),uTe.forEach(t),Heo=i(C),xs=n(C,"LI",{});var k0=s(xs);uJ=n(k0,"STRONG",{});var _xr=s(uJ);Ueo=r(_xr,"funnel"),_xr.forEach(t),Jeo=r(k0," \u2014 "),kx=n(k0,"A",{href:!0});var uxr=s(kx);Yeo=r(uxr,"FunnelModel"),uxr.forEach(t),Keo=r(k0," or "),xx=n(k0,"A",{href:!0});var bxr=s(xx);Zeo=r(bxr,"FunnelBaseModel"),bxr.forEach(t),eoo=r(k0," (Funnel Transformer model)"),k0.forEach(t),ooo=i(C),Vh=n(C,"LI",{});var bTe=s(Vh);bJ=n(bTe,"STRONG",{});var vxr=s(bJ);roo=r(vxr,"gpt2"),vxr.forEach(t),too=r(bTe," \u2014 "),Rx=n(bTe,"A",{href:!0});var Txr=s(Rx);aoo=r(Txr,"GPT2Model"),Txr.forEach(t),noo=r(bTe," (OpenAI GPT-2 model)"),bTe.forEach(t),soo=i(C),Wh=n(C,"LI",{});var vTe=s(Wh);vJ=n(vTe,"STRONG",{});var Fxr=s(vJ);loo=r(Fxr,"gpt_neo"),Fxr.forEach(t),ioo=r(vTe," \u2014 "),Sx=n(vTe,"A",{href:!0});var Cxr=s(Sx);doo=r(Cxr,"GPTNeoModel"),Cxr.forEach(t),coo=r(vTe," (GPT Neo model)"),vTe.forEach(t),foo=i(C),Qh=n(C,"LI",{});var TTe=s(Qh);TJ=n(TTe,"STRONG",{});var Mxr=s(TJ);moo=r(Mxr,"gptj"),Mxr.forEach(t),goo=r(TTe," \u2014 "),Px=n(TTe,"A",{href:!0});var Exr=s(Px);hoo=r(Exr,"GPTJModel"),Exr.forEach(t),poo=r(TTe," (GPT-J model)"),TTe.forEach(t),_oo=i(C),Hh=n(C,"LI",{});var FTe=s(Hh);FJ=n(FTe,"STRONG",{});var yxr=s(FJ);uoo=r(yxr,"hubert"),yxr.forEach(t),boo=r(FTe," \u2014 "),$x=n(FTe,"A",{href:!0});var wxr=s($x);voo=r(wxr,"HubertModel"),wxr.forEach(t),Too=r(FTe," (Hubert model)"),FTe.forEach(t),Foo=i(C),Uh=n(C,"LI",{});var CTe=s(Uh);CJ=n(CTe,"STRONG",{});var Axr=s(CJ);Coo=r(Axr,"ibert"),Axr.forEach(t),Moo=r(CTe," \u2014 "),Ix=n(CTe,"A",{href:!0});var Lxr=s(Ix);Eoo=r(Lxr,"IBertModel"),Lxr.forEach(t),yoo=r(CTe," (I-BERT model)"),CTe.forEach(t),woo=i(C),Jh=n(C,"LI",{});var MTe=s(Jh);MJ=n(MTe,"STRONG",{});var Bxr=s(MJ);Aoo=r(Bxr,"imagegpt"),Bxr.forEach(t),Loo=r(MTe," \u2014 "),jx=n(MTe,"A",{href:!0});var kxr=s(jx);Boo=r(kxr,"ImageGPTModel"),kxr.forEach(t),koo=r(MTe," (ImageGPT model)"),MTe.forEach(t),xoo=i(C),Yh=n(C,"LI",{});var ETe=s(Yh);EJ=n(ETe,"STRONG",{});var xxr=s(EJ);Roo=r(xxr,"layoutlm"),xxr.forEach(t),Soo=r(ETe," \u2014 "),Nx=n(ETe,"A",{href:!0});var Rxr=s(Nx);Poo=r(Rxr,"LayoutLMModel"),Rxr.forEach(t),$oo=r(ETe," (LayoutLM model)"),ETe.forEach(t),Ioo=i(C),Kh=n(C,"LI",{});var yTe=s(Kh);yJ=n(yTe,"STRONG",{});var Sxr=s(yJ);joo=r(Sxr,"layoutlmv2"),Sxr.forEach(t),Noo=r(yTe," \u2014 "),Dx=n(yTe,"A",{href:!0});var Pxr=s(Dx);Doo=r(Pxr,"LayoutLMv2Model"),Pxr.forEach(t),qoo=r(yTe," (LayoutLMv2 model)"),yTe.forEach(t),Goo=i(C),Zh=n(C,"LI",{});var wTe=s(Zh);wJ=n(wTe,"STRONG",{});var $xr=s(wJ);Ooo=r($xr,"led"),$xr.forEach(t),Xoo=r(wTe," \u2014 "),qx=n(wTe,"A",{href:!0});var Ixr=s(qx);zoo=r(Ixr,"LEDModel"),Ixr.forEach(t),Voo=r(wTe," (LED model)"),wTe.forEach(t),Woo=i(C),ep=n(C,"LI",{});var ATe=s(ep);AJ=n(ATe,"STRONG",{});var jxr=s(AJ);Qoo=r(jxr,"longformer"),jxr.forEach(t),Hoo=r(ATe," \u2014 "),Gx=n(ATe,"A",{href:!0});var Nxr=s(Gx);Uoo=r(Nxr,"LongformerModel"),Nxr.forEach(t),Joo=r(ATe," (Longformer model)"),ATe.forEach(t),Yoo=i(C),op=n(C,"LI",{});var LTe=s(op);LJ=n(LTe,"STRONG",{});var Dxr=s(LJ);Koo=r(Dxr,"luke"),Dxr.forEach(t),Zoo=r(LTe," \u2014 "),Ox=n(LTe,"A",{href:!0});var qxr=s(Ox);ero=r(qxr,"LukeModel"),qxr.forEach(t),oro=r(LTe," (LUKE model)"),LTe.forEach(t),rro=i(C),rp=n(C,"LI",{});var BTe=s(rp);BJ=n(BTe,"STRONG",{});var Gxr=s(BJ);tro=r(Gxr,"lxmert"),Gxr.forEach(t),aro=r(BTe," \u2014 "),Xx=n(BTe,"A",{href:!0});var Oxr=s(Xx);nro=r(Oxr,"LxmertModel"),Oxr.forEach(t),sro=r(BTe," (LXMERT model)"),BTe.forEach(t),lro=i(C),tp=n(C,"LI",{});var kTe=s(tp);kJ=n(kTe,"STRONG",{});var Xxr=s(kJ);iro=r(Xxr,"m2m_100"),Xxr.forEach(t),dro=r(kTe," \u2014 "),zx=n(kTe,"A",{href:!0});var zxr=s(zx);cro=r(zxr,"M2M100Model"),zxr.forEach(t),fro=r(kTe," (M2M100 model)"),kTe.forEach(t),mro=i(C),ap=n(C,"LI",{});var xTe=s(ap);xJ=n(xTe,"STRONG",{});var Vxr=s(xJ);gro=r(Vxr,"marian"),Vxr.forEach(t),hro=r(xTe," \u2014 "),Vx=n(xTe,"A",{href:!0});var Wxr=s(Vx);pro=r(Wxr,"MarianModel"),Wxr.forEach(t),_ro=r(xTe," (Marian model)"),xTe.forEach(t),uro=i(C),np=n(C,"LI",{});var RTe=s(np);RJ=n(RTe,"STRONG",{});var Qxr=s(RJ);bro=r(Qxr,"mbart"),Qxr.forEach(t),vro=r(RTe," \u2014 "),Wx=n(RTe,"A",{href:!0});var Hxr=s(Wx);Tro=r(Hxr,"MBartModel"),Hxr.forEach(t),Fro=r(RTe," (mBART model)"),RTe.forEach(t),Cro=i(C),sp=n(C,"LI",{});var STe=s(sp);SJ=n(STe,"STRONG",{});var Uxr=s(SJ);Mro=r(Uxr,"megatron-bert"),Uxr.forEach(t),Ero=r(STe," \u2014 "),Qx=n(STe,"A",{href:!0});var Jxr=s(Qx);yro=r(Jxr,"MegatronBertModel"),Jxr.forEach(t),wro=r(STe," (MegatronBert model)"),STe.forEach(t),Aro=i(C),lp=n(C,"LI",{});var PTe=s(lp);PJ=n(PTe,"STRONG",{});var Yxr=s(PJ);Lro=r(Yxr,"mobilebert"),Yxr.forEach(t),Bro=r(PTe," \u2014 "),Hx=n(PTe,"A",{href:!0});var Kxr=s(Hx);kro=r(Kxr,"MobileBertModel"),Kxr.forEach(t),xro=r(PTe," (MobileBERT model)"),PTe.forEach(t),Rro=i(C),ip=n(C,"LI",{});var $Te=s(ip);$J=n($Te,"STRONG",{});var Zxr=s($J);Sro=r(Zxr,"mpnet"),Zxr.forEach(t),Pro=r($Te," \u2014 "),Ux=n($Te,"A",{href:!0});var eRr=s(Ux);$ro=r(eRr,"MPNetModel"),eRr.forEach(t),Iro=r($Te," (MPNet model)"),$Te.forEach(t),jro=i(C),dp=n(C,"LI",{});var ITe=s(dp);IJ=n(ITe,"STRONG",{});var oRr=s(IJ);Nro=r(oRr,"mt5"),oRr.forEach(t),Dro=r(ITe," \u2014 "),Jx=n(ITe,"A",{href:!0});var rRr=s(Jx);qro=r(rRr,"MT5Model"),rRr.forEach(t),Gro=r(ITe," (mT5 model)"),ITe.forEach(t),Oro=i(C),cp=n(C,"LI",{});var jTe=s(cp);jJ=n(jTe,"STRONG",{});var tRr=s(jJ);Xro=r(tRr,"nystromformer"),tRr.forEach(t),zro=r(jTe," \u2014 "),Yx=n(jTe,"A",{href:!0});var aRr=s(Yx);Vro=r(aRr,"NystromformerModel"),aRr.forEach(t),Wro=r(jTe," (Nystromformer model)"),jTe.forEach(t),Qro=i(C),fp=n(C,"LI",{});var NTe=s(fp);NJ=n(NTe,"STRONG",{});var nRr=s(NJ);Hro=r(nRr,"openai-gpt"),nRr.forEach(t),Uro=r(NTe," \u2014 "),Kx=n(NTe,"A",{href:!0});var sRr=s(Kx);Jro=r(sRr,"OpenAIGPTModel"),sRr.forEach(t),Yro=r(NTe," (OpenAI GPT model)"),NTe.forEach(t),Kro=i(C),mp=n(C,"LI",{});var DTe=s(mp);DJ=n(DTe,"STRONG",{});var lRr=s(DJ);Zro=r(lRr,"pegasus"),lRr.forEach(t),eto=r(DTe," \u2014 "),Zx=n(DTe,"A",{href:!0});var iRr=s(Zx);oto=r(iRr,"PegasusModel"),iRr.forEach(t),rto=r(DTe," (Pegasus model)"),DTe.forEach(t),tto=i(C),gp=n(C,"LI",{});var qTe=s(gp);qJ=n(qTe,"STRONG",{});var dRr=s(qJ);ato=r(dRr,"perceiver"),dRr.forEach(t),nto=r(qTe," \u2014 "),eR=n(qTe,"A",{href:!0});var cRr=s(eR);sto=r(cRr,"PerceiverModel"),cRr.forEach(t),lto=r(qTe," (Perceiver model)"),qTe.forEach(t),ito=i(C),hp=n(C,"LI",{});var GTe=s(hp);GJ=n(GTe,"STRONG",{});var fRr=s(GJ);dto=r(fRr,"poolformer"),fRr.forEach(t),cto=r(GTe," \u2014 "),oR=n(GTe,"A",{href:!0});var mRr=s(oR);fto=r(mRr,"PoolFormerModel"),mRr.forEach(t),mto=r(GTe," (PoolFormer model)"),GTe.forEach(t),gto=i(C),pp=n(C,"LI",{});var OTe=s(pp);OJ=n(OTe,"STRONG",{});var gRr=s(OJ);hto=r(gRr,"prophetnet"),gRr.forEach(t),pto=r(OTe," \u2014 "),rR=n(OTe,"A",{href:!0});var hRr=s(rR);_to=r(hRr,"ProphetNetModel"),hRr.forEach(t),uto=r(OTe," (ProphetNet model)"),OTe.forEach(t),bto=i(C),_p=n(C,"LI",{});var XTe=s(_p);XJ=n(XTe,"STRONG",{});var pRr=s(XJ);vto=r(pRr,"qdqbert"),pRr.forEach(t),Tto=r(XTe," \u2014 "),tR=n(XTe,"A",{href:!0});var _Rr=s(tR);Fto=r(_Rr,"QDQBertModel"),_Rr.forEach(t),Cto=r(XTe," (QDQBert model)"),XTe.forEach(t),Mto=i(C),up=n(C,"LI",{});var zTe=s(up);zJ=n(zTe,"STRONG",{});var uRr=s(zJ);Eto=r(uRr,"reformer"),uRr.forEach(t),yto=r(zTe," \u2014 "),aR=n(zTe,"A",{href:!0});var bRr=s(aR);wto=r(bRr,"ReformerModel"),bRr.forEach(t),Ato=r(zTe," (Reformer model)"),zTe.forEach(t),Lto=i(C),bp=n(C,"LI",{});var VTe=s(bp);VJ=n(VTe,"STRONG",{});var vRr=s(VJ);Bto=r(vRr,"rembert"),vRr.forEach(t),kto=r(VTe," \u2014 "),nR=n(VTe,"A",{href:!0});var TRr=s(nR);xto=r(TRr,"RemBertModel"),TRr.forEach(t),Rto=r(VTe," (RemBERT model)"),VTe.forEach(t),Sto=i(C),vp=n(C,"LI",{});var WTe=s(vp);WJ=n(WTe,"STRONG",{});var FRr=s(WJ);Pto=r(FRr,"retribert"),FRr.forEach(t),$to=r(WTe," \u2014 "),sR=n(WTe,"A",{href:!0});var CRr=s(sR);Ito=r(CRr,"RetriBertModel"),CRr.forEach(t),jto=r(WTe," (RetriBERT model)"),WTe.forEach(t),Nto=i(C),Tp=n(C,"LI",{});var QTe=s(Tp);QJ=n(QTe,"STRONG",{});var MRr=s(QJ);Dto=r(MRr,"roberta"),MRr.forEach(t),qto=r(QTe," \u2014 "),lR=n(QTe,"A",{href:!0});var ERr=s(lR);Gto=r(ERr,"RobertaModel"),ERr.forEach(t),Oto=r(QTe," (RoBERTa model)"),QTe.forEach(t),Xto=i(C),Fp=n(C,"LI",{});var HTe=s(Fp);HJ=n(HTe,"STRONG",{});var yRr=s(HJ);zto=r(yRr,"roformer"),yRr.forEach(t),Vto=r(HTe," \u2014 "),iR=n(HTe,"A",{href:!0});var wRr=s(iR);Wto=r(wRr,"RoFormerModel"),wRr.forEach(t),Qto=r(HTe," (RoFormer model)"),HTe.forEach(t),Hto=i(C),Cp=n(C,"LI",{});var UTe=s(Cp);UJ=n(UTe,"STRONG",{});var ARr=s(UJ);Uto=r(ARr,"segformer"),ARr.forEach(t),Jto=r(UTe," \u2014 "),dR=n(UTe,"A",{href:!0});var LRr=s(dR);Yto=r(LRr,"SegformerModel"),LRr.forEach(t),Kto=r(UTe," (SegFormer model)"),UTe.forEach(t),Zto=i(C),Mp=n(C,"LI",{});var JTe=s(Mp);JJ=n(JTe,"STRONG",{});var BRr=s(JJ);eao=r(BRr,"sew"),BRr.forEach(t),oao=r(JTe," \u2014 "),cR=n(JTe,"A",{href:!0});var kRr=s(cR);rao=r(kRr,"SEWModel"),kRr.forEach(t),tao=r(JTe," (SEW model)"),JTe.forEach(t),aao=i(C),Ep=n(C,"LI",{});var YTe=s(Ep);YJ=n(YTe,"STRONG",{});var xRr=s(YJ);nao=r(xRr,"sew-d"),xRr.forEach(t),sao=r(YTe," \u2014 "),fR=n(YTe,"A",{href:!0});var RRr=s(fR);lao=r(RRr,"SEWDModel"),RRr.forEach(t),iao=r(YTe," (SEW-D model)"),YTe.forEach(t),dao=i(C),yp=n(C,"LI",{});var KTe=s(yp);KJ=n(KTe,"STRONG",{});var SRr=s(KJ);cao=r(SRr,"speech_to_text"),SRr.forEach(t),fao=r(KTe," \u2014 "),mR=n(KTe,"A",{href:!0});var PRr=s(mR);mao=r(PRr,"Speech2TextModel"),PRr.forEach(t),gao=r(KTe," (Speech2Text model)"),KTe.forEach(t),hao=i(C),wp=n(C,"LI",{});var ZTe=s(wp);ZJ=n(ZTe,"STRONG",{});var $Rr=s(ZJ);pao=r($Rr,"splinter"),$Rr.forEach(t),_ao=r(ZTe," \u2014 "),gR=n(ZTe,"A",{href:!0});var IRr=s(gR);uao=r(IRr,"SplinterModel"),IRr.forEach(t),bao=r(ZTe," (Splinter model)"),ZTe.forEach(t),vao=i(C),Ap=n(C,"LI",{});var e7e=s(Ap);eY=n(e7e,"STRONG",{});var jRr=s(eY);Tao=r(jRr,"squeezebert"),jRr.forEach(t),Fao=r(e7e," \u2014 "),hR=n(e7e,"A",{href:!0});var NRr=s(hR);Cao=r(NRr,"SqueezeBertModel"),NRr.forEach(t),Mao=r(e7e," (SqueezeBERT model)"),e7e.forEach(t),Eao=i(C),Lp=n(C,"LI",{});var o7e=s(Lp);oY=n(o7e,"STRONG",{});var DRr=s(oY);yao=r(DRr,"swin"),DRr.forEach(t),wao=r(o7e," \u2014 "),pR=n(o7e,"A",{href:!0});var qRr=s(pR);Aao=r(qRr,"SwinModel"),qRr.forEach(t),Lao=r(o7e," (Swin model)"),o7e.forEach(t),Bao=i(C),Bp=n(C,"LI",{});var r7e=s(Bp);rY=n(r7e,"STRONG",{});var GRr=s(rY);kao=r(GRr,"t5"),GRr.forEach(t),xao=r(r7e," \u2014 "),_R=n(r7e,"A",{href:!0});var ORr=s(_R);Rao=r(ORr,"T5Model"),ORr.forEach(t),Sao=r(r7e," (T5 model)"),r7e.forEach(t),Pao=i(C),kp=n(C,"LI",{});var t7e=s(kp);tY=n(t7e,"STRONG",{});var XRr=s(tY);$ao=r(XRr,"tapas"),XRr.forEach(t),Iao=r(t7e," \u2014 "),uR=n(t7e,"A",{href:!0});var zRr=s(uR);jao=r(zRr,"TapasModel"),zRr.forEach(t),Nao=r(t7e," (TAPAS model)"),t7e.forEach(t),Dao=i(C),xp=n(C,"LI",{});var a7e=s(xp);aY=n(a7e,"STRONG",{});var VRr=s(aY);qao=r(VRr,"transfo-xl"),VRr.forEach(t),Gao=r(a7e," \u2014 "),bR=n(a7e,"A",{href:!0});var WRr=s(bR);Oao=r(WRr,"TransfoXLModel"),WRr.forEach(t),Xao=r(a7e," (Transformer-XL model)"),a7e.forEach(t),zao=i(C),Rp=n(C,"LI",{});var n7e=s(Rp);nY=n(n7e,"STRONG",{});var QRr=s(nY);Vao=r(QRr,"unispeech"),QRr.forEach(t),Wao=r(n7e," \u2014 "),vR=n(n7e,"A",{href:!0});var HRr=s(vR);Qao=r(HRr,"UniSpeechModel"),HRr.forEach(t),Hao=r(n7e," (UniSpeech model)"),n7e.forEach(t),Uao=i(C),Sp=n(C,"LI",{});var s7e=s(Sp);sY=n(s7e,"STRONG",{});var URr=s(sY);Jao=r(URr,"unispeech-sat"),URr.forEach(t),Yao=r(s7e," \u2014 "),TR=n(s7e,"A",{href:!0});var JRr=s(TR);Kao=r(JRr,"UniSpeechSatModel"),JRr.forEach(t),Zao=r(s7e," (UniSpeechSat model)"),s7e.forEach(t),eno=i(C),Pp=n(C,"LI",{});var l7e=s(Pp);lY=n(l7e,"STRONG",{});var YRr=s(lY);ono=r(YRr,"vilt"),YRr.forEach(t),rno=r(l7e," \u2014 "),FR=n(l7e,"A",{href:!0});var KRr=s(FR);tno=r(KRr,"ViltModel"),KRr.forEach(t),ano=r(l7e," (ViLT model)"),l7e.forEach(t),nno=i(C),$p=n(C,"LI",{});var i7e=s($p);iY=n(i7e,"STRONG",{});var ZRr=s(iY);sno=r(ZRr,"vision-text-dual-encoder"),ZRr.forEach(t),lno=r(i7e," \u2014 "),CR=n(i7e,"A",{href:!0});var eSr=s(CR);ino=r(eSr,"VisionTextDualEncoderModel"),eSr.forEach(t),dno=r(i7e," (VisionTextDualEncoder model)"),i7e.forEach(t),cno=i(C),Ip=n(C,"LI",{});var d7e=s(Ip);dY=n(d7e,"STRONG",{});var oSr=s(dY);fno=r(oSr,"visual_bert"),oSr.forEach(t),mno=r(d7e," \u2014 "),MR=n(d7e,"A",{href:!0});var rSr=s(MR);gno=r(rSr,"VisualBertModel"),rSr.forEach(t),hno=r(d7e," (VisualBert model)"),d7e.forEach(t),pno=i(C),jp=n(C,"LI",{});var c7e=s(jp);cY=n(c7e,"STRONG",{});var tSr=s(cY);_no=r(tSr,"vit"),tSr.forEach(t),uno=r(c7e," \u2014 "),ER=n(c7e,"A",{href:!0});var aSr=s(ER);bno=r(aSr,"ViTModel"),aSr.forEach(t),vno=r(c7e," (ViT model)"),c7e.forEach(t),Tno=i(C),Np=n(C,"LI",{});var f7e=s(Np);fY=n(f7e,"STRONG",{});var nSr=s(fY);Fno=r(nSr,"vit_mae"),nSr.forEach(t),Cno=r(f7e," \u2014 "),yR=n(f7e,"A",{href:!0});var sSr=s(yR);Mno=r(sSr,"ViTMAEModel"),sSr.forEach(t),Eno=r(f7e," (ViTMAE model)"),f7e.forEach(t),yno=i(C),Dp=n(C,"LI",{});var m7e=s(Dp);mY=n(m7e,"STRONG",{});var lSr=s(mY);wno=r(lSr,"wav2vec2"),lSr.forEach(t),Ano=r(m7e," \u2014 "),wR=n(m7e,"A",{href:!0});var iSr=s(wR);Lno=r(iSr,"Wav2Vec2Model"),iSr.forEach(t),Bno=r(m7e," (Wav2Vec2 model)"),m7e.forEach(t),kno=i(C),qp=n(C,"LI",{});var g7e=s(qp);gY=n(g7e,"STRONG",{});var dSr=s(gY);xno=r(dSr,"wavlm"),dSr.forEach(t),Rno=r(g7e," \u2014 "),AR=n(g7e,"A",{href:!0});var cSr=s(AR);Sno=r(cSr,"WavLMModel"),cSr.forEach(t),Pno=r(g7e," (WavLM model)"),g7e.forEach(t),$no=i(C),Gp=n(C,"LI",{});var h7e=s(Gp);hY=n(h7e,"STRONG",{});var fSr=s(hY);Ino=r(fSr,"xglm"),fSr.forEach(t),jno=r(h7e," \u2014 "),LR=n(h7e,"A",{href:!0});var mSr=s(LR);Nno=r(mSr,"XGLMModel"),mSr.forEach(t),Dno=r(h7e," (XGLM model)"),h7e.forEach(t),qno=i(C),Op=n(C,"LI",{});var p7e=s(Op);pY=n(p7e,"STRONG",{});var gSr=s(pY);Gno=r(gSr,"xlm"),gSr.forEach(t),Ono=r(p7e," \u2014 "),BR=n(p7e,"A",{href:!0});var hSr=s(BR);Xno=r(hSr,"XLMModel"),hSr.forEach(t),zno=r(p7e," (XLM model)"),p7e.forEach(t),Vno=i(C),Xp=n(C,"LI",{});var _7e=s(Xp);_Y=n(_7e,"STRONG",{});var pSr=s(_Y);Wno=r(pSr,"xlm-prophetnet"),pSr.forEach(t),Qno=r(_7e," \u2014 "),kR=n(_7e,"A",{href:!0});var _Sr=s(kR);Hno=r(_Sr,"XLMProphetNetModel"),_Sr.forEach(t),Uno=r(_7e," (XLMProphetNet model)"),_7e.forEach(t),Jno=i(C),zp=n(C,"LI",{});var u7e=s(zp);uY=n(u7e,"STRONG",{});var uSr=s(uY);Yno=r(uSr,"xlm-roberta"),uSr.forEach(t),Kno=r(u7e," \u2014 "),xR=n(u7e,"A",{href:!0});var bSr=s(xR);Zno=r(bSr,"XLMRobertaModel"),bSr.forEach(t),eso=r(u7e," (XLM-RoBERTa model)"),u7e.forEach(t),oso=i(C),Vp=n(C,"LI",{});var b7e=s(Vp);bY=n(b7e,"STRONG",{});var vSr=s(bY);rso=r(vSr,"xlm-roberta-xl"),vSr.forEach(t),tso=r(b7e," \u2014 "),RR=n(b7e,"A",{href:!0});var TSr=s(RR);aso=r(TSr,"XLMRobertaXLModel"),TSr.forEach(t),nso=r(b7e," (XLM-RoBERTa-XL model)"),b7e.forEach(t),sso=i(C),Wp=n(C,"LI",{});var v7e=s(Wp);vY=n(v7e,"STRONG",{});var FSr=s(vY);lso=r(FSr,"xlnet"),FSr.forEach(t),iso=r(v7e," \u2014 "),SR=n(v7e,"A",{href:!0});var CSr=s(SR);dso=r(CSr,"XLNetModel"),CSr.forEach(t),cso=r(v7e," (XLNet model)"),v7e.forEach(t),fso=i(C),Qp=n(C,"LI",{});var T7e=s(Qp);TY=n(T7e,"STRONG",{});var MSr=s(TY);mso=r(MSr,"yoso"),MSr.forEach(t),gso=r(T7e," \u2014 "),PR=n(T7e,"A",{href:!0});var ESr=s(PR);hso=r(ESr,"YosoModel"),ESr.forEach(t),pso=r(T7e," (YOSO model)"),T7e.forEach(t),C.forEach(t),_so=i(St),Hp=n(St,"P",{});var F7e=s(Hp);uso=r(F7e,"The model is set in evaluation mode by default using "),FY=n(F7e,"CODE",{});var ySr=s(FY);bso=r(ySr,"model.eval()"),ySr.forEach(t),vso=r(F7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CY=n(F7e,"CODE",{});var wSr=s(CY);Tso=r(wSr,"model.train()"),wSr.forEach(t),F7e.forEach(t),Fso=i(St),MY=n(St,"P",{});var ASr=s(MY);Cso=r(ASr,"Examples:"),ASr.forEach(t),Mso=i(St),m($4.$$.fragment,St),St.forEach(t),Ns.forEach(t),H0e=i(d),Xi=n(d,"H2",{class:!0});var oBe=s(Xi);Up=n(oBe,"A",{id:!0,class:!0,href:!0});var LSr=s(Up);EY=n(LSr,"SPAN",{});var BSr=s(EY);m(I4.$$.fragment,BSr),BSr.forEach(t),LSr.forEach(t),Eso=i(oBe),yY=n(oBe,"SPAN",{});var kSr=s(yY);yso=r(kSr,"AutoModelForPreTraining"),kSr.forEach(t),oBe.forEach(t),U0e=i(d),Wo=n(d,"DIV",{class:!0});var qs=s(Wo);m(j4.$$.fragment,qs),wso=i(qs),zi=n(qs,"P",{});var IX=s(zi);Aso=r(IX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wY=n(IX,"CODE",{});var xSr=s(wY);Lso=r(xSr,"from_pretrained()"),xSr.forEach(t),Bso=r(IX,"class method or the "),AY=n(IX,"CODE",{});var RSr=s(AY);kso=r(RSr,"from_config()"),RSr.forEach(t),xso=r(IX,`class
method.`),IX.forEach(t),Rso=i(qs),N4=n(qs,"P",{});var rBe=s(N4);Sso=r(rBe,"This class cannot be instantiated directly using "),LY=n(rBe,"CODE",{});var SSr=s(LY);Pso=r(SSr,"__init__()"),SSr.forEach(t),$so=r(rBe," (throws an error)."),rBe.forEach(t),Iso=i(qs),Dr=n(qs,"DIV",{class:!0});var Gs=s(Dr);m(D4.$$.fragment,Gs),jso=i(Gs),BY=n(Gs,"P",{});var PSr=s(BY);Nso=r(PSr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PSr.forEach(t),Dso=i(Gs),Vi=n(Gs,"P",{});var jX=s(Vi);qso=r(jX,`Note:
Loading a model from its configuration file does `),kY=n(jX,"STRONG",{});var $Sr=s(kY);Gso=r($Sr,"not"),$Sr.forEach(t),Oso=r(jX,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(jX,"CODE",{});var ISr=s(xY);Xso=r(ISr,"from_pretrained()"),ISr.forEach(t),zso=r(jX,"to load the model weights."),jX.forEach(t),Vso=i(Gs),RY=n(Gs,"P",{});var jSr=s(RY);Wso=r(jSr,"Examples:"),jSr.forEach(t),Qso=i(Gs),m(q4.$$.fragment,Gs),Gs.forEach(t),Hso=i(qs),xe=n(qs,"DIV",{class:!0});var Pt=s(xe);m(G4.$$.fragment,Pt),Uso=i(Pt),SY=n(Pt,"P",{});var NSr=s(SY);Jso=r(NSr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NSr.forEach(t),Yso=i(Pt),qa=n(Pt,"P",{});var rC=s(qa);Kso=r(rC,"The model class to instantiate is selected based on the "),PY=n(rC,"CODE",{});var DSr=s(PY);Zso=r(DSr,"model_type"),DSr.forEach(t),elo=r(rC,` property of the config object (either
passed as an argument or loaded from `),$Y=n(rC,"CODE",{});var qSr=s($Y);olo=r(qSr,"pretrained_model_name_or_path"),qSr.forEach(t),rlo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IY=n(rC,"CODE",{});var GSr=s(IY);tlo=r(GSr,"pretrained_model_name_or_path"),GSr.forEach(t),alo=r(rC,":"),rC.forEach(t),nlo=i(Pt),x=n(Pt,"UL",{});var S=s(x);Jp=n(S,"LI",{});var C7e=s(Jp);jY=n(C7e,"STRONG",{});var OSr=s(jY);slo=r(OSr,"albert"),OSr.forEach(t),llo=r(C7e," \u2014 "),$R=n(C7e,"A",{href:!0});var XSr=s($R);ilo=r(XSr,"AlbertForPreTraining"),XSr.forEach(t),dlo=r(C7e," (ALBERT model)"),C7e.forEach(t),clo=i(S),Yp=n(S,"LI",{});var M7e=s(Yp);NY=n(M7e,"STRONG",{});var zSr=s(NY);flo=r(zSr,"bart"),zSr.forEach(t),mlo=r(M7e," \u2014 "),IR=n(M7e,"A",{href:!0});var VSr=s(IR);glo=r(VSr,"BartForConditionalGeneration"),VSr.forEach(t),hlo=r(M7e," (BART model)"),M7e.forEach(t),plo=i(S),Kp=n(S,"LI",{});var E7e=s(Kp);DY=n(E7e,"STRONG",{});var WSr=s(DY);_lo=r(WSr,"bert"),WSr.forEach(t),ulo=r(E7e," \u2014 "),jR=n(E7e,"A",{href:!0});var QSr=s(jR);blo=r(QSr,"BertForPreTraining"),QSr.forEach(t),vlo=r(E7e," (BERT model)"),E7e.forEach(t),Tlo=i(S),Zp=n(S,"LI",{});var y7e=s(Zp);qY=n(y7e,"STRONG",{});var HSr=s(qY);Flo=r(HSr,"big_bird"),HSr.forEach(t),Clo=r(y7e," \u2014 "),NR=n(y7e,"A",{href:!0});var USr=s(NR);Mlo=r(USr,"BigBirdForPreTraining"),USr.forEach(t),Elo=r(y7e," (BigBird model)"),y7e.forEach(t),ylo=i(S),e_=n(S,"LI",{});var w7e=s(e_);GY=n(w7e,"STRONG",{});var JSr=s(GY);wlo=r(JSr,"camembert"),JSr.forEach(t),Alo=r(w7e," \u2014 "),DR=n(w7e,"A",{href:!0});var YSr=s(DR);Llo=r(YSr,"CamembertForMaskedLM"),YSr.forEach(t),Blo=r(w7e," (CamemBERT model)"),w7e.forEach(t),klo=i(S),o_=n(S,"LI",{});var A7e=s(o_);OY=n(A7e,"STRONG",{});var KSr=s(OY);xlo=r(KSr,"ctrl"),KSr.forEach(t),Rlo=r(A7e," \u2014 "),qR=n(A7e,"A",{href:!0});var ZSr=s(qR);Slo=r(ZSr,"CTRLLMHeadModel"),ZSr.forEach(t),Plo=r(A7e," (CTRL model)"),A7e.forEach(t),$lo=i(S),r_=n(S,"LI",{});var L7e=s(r_);XY=n(L7e,"STRONG",{});var ePr=s(XY);Ilo=r(ePr,"deberta"),ePr.forEach(t),jlo=r(L7e," \u2014 "),GR=n(L7e,"A",{href:!0});var oPr=s(GR);Nlo=r(oPr,"DebertaForMaskedLM"),oPr.forEach(t),Dlo=r(L7e," (DeBERTa model)"),L7e.forEach(t),qlo=i(S),t_=n(S,"LI",{});var B7e=s(t_);zY=n(B7e,"STRONG",{});var rPr=s(zY);Glo=r(rPr,"deberta-v2"),rPr.forEach(t),Olo=r(B7e," \u2014 "),OR=n(B7e,"A",{href:!0});var tPr=s(OR);Xlo=r(tPr,"DebertaV2ForMaskedLM"),tPr.forEach(t),zlo=r(B7e," (DeBERTa-v2 model)"),B7e.forEach(t),Vlo=i(S),a_=n(S,"LI",{});var k7e=s(a_);VY=n(k7e,"STRONG",{});var aPr=s(VY);Wlo=r(aPr,"distilbert"),aPr.forEach(t),Qlo=r(k7e," \u2014 "),XR=n(k7e,"A",{href:!0});var nPr=s(XR);Hlo=r(nPr,"DistilBertForMaskedLM"),nPr.forEach(t),Ulo=r(k7e," (DistilBERT model)"),k7e.forEach(t),Jlo=i(S),n_=n(S,"LI",{});var x7e=s(n_);WY=n(x7e,"STRONG",{});var sPr=s(WY);Ylo=r(sPr,"electra"),sPr.forEach(t),Klo=r(x7e," \u2014 "),zR=n(x7e,"A",{href:!0});var lPr=s(zR);Zlo=r(lPr,"ElectraForPreTraining"),lPr.forEach(t),eio=r(x7e," (ELECTRA model)"),x7e.forEach(t),oio=i(S),s_=n(S,"LI",{});var R7e=s(s_);QY=n(R7e,"STRONG",{});var iPr=s(QY);rio=r(iPr,"flaubert"),iPr.forEach(t),tio=r(R7e," \u2014 "),VR=n(R7e,"A",{href:!0});var dPr=s(VR);aio=r(dPr,"FlaubertWithLMHeadModel"),dPr.forEach(t),nio=r(R7e," (FlauBERT model)"),R7e.forEach(t),sio=i(S),l_=n(S,"LI",{});var S7e=s(l_);HY=n(S7e,"STRONG",{});var cPr=s(HY);lio=r(cPr,"fnet"),cPr.forEach(t),iio=r(S7e," \u2014 "),WR=n(S7e,"A",{href:!0});var fPr=s(WR);dio=r(fPr,"FNetForPreTraining"),fPr.forEach(t),cio=r(S7e," (FNet model)"),S7e.forEach(t),fio=i(S),i_=n(S,"LI",{});var P7e=s(i_);UY=n(P7e,"STRONG",{});var mPr=s(UY);mio=r(mPr,"fsmt"),mPr.forEach(t),gio=r(P7e," \u2014 "),QR=n(P7e,"A",{href:!0});var gPr=s(QR);hio=r(gPr,"FSMTForConditionalGeneration"),gPr.forEach(t),pio=r(P7e," (FairSeq Machine-Translation model)"),P7e.forEach(t),_io=i(S),d_=n(S,"LI",{});var $7e=s(d_);JY=n($7e,"STRONG",{});var hPr=s(JY);uio=r(hPr,"funnel"),hPr.forEach(t),bio=r($7e," \u2014 "),HR=n($7e,"A",{href:!0});var pPr=s(HR);vio=r(pPr,"FunnelForPreTraining"),pPr.forEach(t),Tio=r($7e," (Funnel Transformer model)"),$7e.forEach(t),Fio=i(S),c_=n(S,"LI",{});var I7e=s(c_);YY=n(I7e,"STRONG",{});var _Pr=s(YY);Cio=r(_Pr,"gpt2"),_Pr.forEach(t),Mio=r(I7e," \u2014 "),UR=n(I7e,"A",{href:!0});var uPr=s(UR);Eio=r(uPr,"GPT2LMHeadModel"),uPr.forEach(t),yio=r(I7e," (OpenAI GPT-2 model)"),I7e.forEach(t),wio=i(S),f_=n(S,"LI",{});var j7e=s(f_);KY=n(j7e,"STRONG",{});var bPr=s(KY);Aio=r(bPr,"ibert"),bPr.forEach(t),Lio=r(j7e," \u2014 "),JR=n(j7e,"A",{href:!0});var vPr=s(JR);Bio=r(vPr,"IBertForMaskedLM"),vPr.forEach(t),kio=r(j7e," (I-BERT model)"),j7e.forEach(t),xio=i(S),m_=n(S,"LI",{});var N7e=s(m_);ZY=n(N7e,"STRONG",{});var TPr=s(ZY);Rio=r(TPr,"layoutlm"),TPr.forEach(t),Sio=r(N7e," \u2014 "),YR=n(N7e,"A",{href:!0});var FPr=s(YR);Pio=r(FPr,"LayoutLMForMaskedLM"),FPr.forEach(t),$io=r(N7e," (LayoutLM model)"),N7e.forEach(t),Iio=i(S),g_=n(S,"LI",{});var D7e=s(g_);eK=n(D7e,"STRONG",{});var CPr=s(eK);jio=r(CPr,"longformer"),CPr.forEach(t),Nio=r(D7e," \u2014 "),KR=n(D7e,"A",{href:!0});var MPr=s(KR);Dio=r(MPr,"LongformerForMaskedLM"),MPr.forEach(t),qio=r(D7e," (Longformer model)"),D7e.forEach(t),Gio=i(S),h_=n(S,"LI",{});var q7e=s(h_);oK=n(q7e,"STRONG",{});var EPr=s(oK);Oio=r(EPr,"lxmert"),EPr.forEach(t),Xio=r(q7e," \u2014 "),ZR=n(q7e,"A",{href:!0});var yPr=s(ZR);zio=r(yPr,"LxmertForPreTraining"),yPr.forEach(t),Vio=r(q7e," (LXMERT model)"),q7e.forEach(t),Wio=i(S),p_=n(S,"LI",{});var G7e=s(p_);rK=n(G7e,"STRONG",{});var wPr=s(rK);Qio=r(wPr,"megatron-bert"),wPr.forEach(t),Hio=r(G7e," \u2014 "),eS=n(G7e,"A",{href:!0});var APr=s(eS);Uio=r(APr,"MegatronBertForPreTraining"),APr.forEach(t),Jio=r(G7e," (MegatronBert model)"),G7e.forEach(t),Yio=i(S),__=n(S,"LI",{});var O7e=s(__);tK=n(O7e,"STRONG",{});var LPr=s(tK);Kio=r(LPr,"mobilebert"),LPr.forEach(t),Zio=r(O7e," \u2014 "),oS=n(O7e,"A",{href:!0});var BPr=s(oS);edo=r(BPr,"MobileBertForPreTraining"),BPr.forEach(t),odo=r(O7e," (MobileBERT model)"),O7e.forEach(t),rdo=i(S),u_=n(S,"LI",{});var X7e=s(u_);aK=n(X7e,"STRONG",{});var kPr=s(aK);tdo=r(kPr,"mpnet"),kPr.forEach(t),ado=r(X7e," \u2014 "),rS=n(X7e,"A",{href:!0});var xPr=s(rS);ndo=r(xPr,"MPNetForMaskedLM"),xPr.forEach(t),sdo=r(X7e," (MPNet model)"),X7e.forEach(t),ldo=i(S),b_=n(S,"LI",{});var z7e=s(b_);nK=n(z7e,"STRONG",{});var RPr=s(nK);ido=r(RPr,"openai-gpt"),RPr.forEach(t),ddo=r(z7e," \u2014 "),tS=n(z7e,"A",{href:!0});var SPr=s(tS);cdo=r(SPr,"OpenAIGPTLMHeadModel"),SPr.forEach(t),fdo=r(z7e," (OpenAI GPT model)"),z7e.forEach(t),mdo=i(S),v_=n(S,"LI",{});var V7e=s(v_);sK=n(V7e,"STRONG",{});var PPr=s(sK);gdo=r(PPr,"retribert"),PPr.forEach(t),hdo=r(V7e," \u2014 "),aS=n(V7e,"A",{href:!0});var $Pr=s(aS);pdo=r($Pr,"RetriBertModel"),$Pr.forEach(t),_do=r(V7e," (RetriBERT model)"),V7e.forEach(t),udo=i(S),T_=n(S,"LI",{});var W7e=s(T_);lK=n(W7e,"STRONG",{});var IPr=s(lK);bdo=r(IPr,"roberta"),IPr.forEach(t),vdo=r(W7e," \u2014 "),nS=n(W7e,"A",{href:!0});var jPr=s(nS);Tdo=r(jPr,"RobertaForMaskedLM"),jPr.forEach(t),Fdo=r(W7e," (RoBERTa model)"),W7e.forEach(t),Cdo=i(S),F_=n(S,"LI",{});var Q7e=s(F_);iK=n(Q7e,"STRONG",{});var NPr=s(iK);Mdo=r(NPr,"squeezebert"),NPr.forEach(t),Edo=r(Q7e," \u2014 "),sS=n(Q7e,"A",{href:!0});var DPr=s(sS);ydo=r(DPr,"SqueezeBertForMaskedLM"),DPr.forEach(t),wdo=r(Q7e," (SqueezeBERT model)"),Q7e.forEach(t),Ado=i(S),C_=n(S,"LI",{});var H7e=s(C_);dK=n(H7e,"STRONG",{});var qPr=s(dK);Ldo=r(qPr,"t5"),qPr.forEach(t),Bdo=r(H7e," \u2014 "),lS=n(H7e,"A",{href:!0});var GPr=s(lS);kdo=r(GPr,"T5ForConditionalGeneration"),GPr.forEach(t),xdo=r(H7e," (T5 model)"),H7e.forEach(t),Rdo=i(S),M_=n(S,"LI",{});var U7e=s(M_);cK=n(U7e,"STRONG",{});var OPr=s(cK);Sdo=r(OPr,"tapas"),OPr.forEach(t),Pdo=r(U7e," \u2014 "),iS=n(U7e,"A",{href:!0});var XPr=s(iS);$do=r(XPr,"TapasForMaskedLM"),XPr.forEach(t),Ido=r(U7e," (TAPAS model)"),U7e.forEach(t),jdo=i(S),E_=n(S,"LI",{});var J7e=s(E_);fK=n(J7e,"STRONG",{});var zPr=s(fK);Ndo=r(zPr,"transfo-xl"),zPr.forEach(t),Ddo=r(J7e," \u2014 "),dS=n(J7e,"A",{href:!0});var VPr=s(dS);qdo=r(VPr,"TransfoXLLMHeadModel"),VPr.forEach(t),Gdo=r(J7e," (Transformer-XL model)"),J7e.forEach(t),Odo=i(S),y_=n(S,"LI",{});var Y7e=s(y_);mK=n(Y7e,"STRONG",{});var WPr=s(mK);Xdo=r(WPr,"unispeech"),WPr.forEach(t),zdo=r(Y7e," \u2014 "),cS=n(Y7e,"A",{href:!0});var QPr=s(cS);Vdo=r(QPr,"UniSpeechForPreTraining"),QPr.forEach(t),Wdo=r(Y7e," (UniSpeech model)"),Y7e.forEach(t),Qdo=i(S),w_=n(S,"LI",{});var K7e=s(w_);gK=n(K7e,"STRONG",{});var HPr=s(gK);Hdo=r(HPr,"unispeech-sat"),HPr.forEach(t),Udo=r(K7e," \u2014 "),fS=n(K7e,"A",{href:!0});var UPr=s(fS);Jdo=r(UPr,"UniSpeechSatForPreTraining"),UPr.forEach(t),Ydo=r(K7e," (UniSpeechSat model)"),K7e.forEach(t),Kdo=i(S),A_=n(S,"LI",{});var Z7e=s(A_);hK=n(Z7e,"STRONG",{});var JPr=s(hK);Zdo=r(JPr,"visual_bert"),JPr.forEach(t),eco=r(Z7e," \u2014 "),mS=n(Z7e,"A",{href:!0});var YPr=s(mS);oco=r(YPr,"VisualBertForPreTraining"),YPr.forEach(t),rco=r(Z7e," (VisualBert model)"),Z7e.forEach(t),tco=i(S),L_=n(S,"LI",{});var e8e=s(L_);pK=n(e8e,"STRONG",{});var KPr=s(pK);aco=r(KPr,"vit_mae"),KPr.forEach(t),nco=r(e8e," \u2014 "),gS=n(e8e,"A",{href:!0});var ZPr=s(gS);sco=r(ZPr,"ViTMAEForPreTraining"),ZPr.forEach(t),lco=r(e8e," (ViTMAE model)"),e8e.forEach(t),ico=i(S),B_=n(S,"LI",{});var o8e=s(B_);_K=n(o8e,"STRONG",{});var e$r=s(_K);dco=r(e$r,"wav2vec2"),e$r.forEach(t),cco=r(o8e," \u2014 "),hS=n(o8e,"A",{href:!0});var o$r=s(hS);fco=r(o$r,"Wav2Vec2ForPreTraining"),o$r.forEach(t),mco=r(o8e," (Wav2Vec2 model)"),o8e.forEach(t),gco=i(S),k_=n(S,"LI",{});var r8e=s(k_);uK=n(r8e,"STRONG",{});var r$r=s(uK);hco=r(r$r,"xlm"),r$r.forEach(t),pco=r(r8e," \u2014 "),pS=n(r8e,"A",{href:!0});var t$r=s(pS);_co=r(t$r,"XLMWithLMHeadModel"),t$r.forEach(t),uco=r(r8e," (XLM model)"),r8e.forEach(t),bco=i(S),x_=n(S,"LI",{});var t8e=s(x_);bK=n(t8e,"STRONG",{});var a$r=s(bK);vco=r(a$r,"xlm-roberta"),a$r.forEach(t),Tco=r(t8e," \u2014 "),_S=n(t8e,"A",{href:!0});var n$r=s(_S);Fco=r(n$r,"XLMRobertaForMaskedLM"),n$r.forEach(t),Cco=r(t8e," (XLM-RoBERTa model)"),t8e.forEach(t),Mco=i(S),R_=n(S,"LI",{});var a8e=s(R_);vK=n(a8e,"STRONG",{});var s$r=s(vK);Eco=r(s$r,"xlm-roberta-xl"),s$r.forEach(t),yco=r(a8e," \u2014 "),uS=n(a8e,"A",{href:!0});var l$r=s(uS);wco=r(l$r,"XLMRobertaXLForMaskedLM"),l$r.forEach(t),Aco=r(a8e," (XLM-RoBERTa-XL model)"),a8e.forEach(t),Lco=i(S),S_=n(S,"LI",{});var n8e=s(S_);TK=n(n8e,"STRONG",{});var i$r=s(TK);Bco=r(i$r,"xlnet"),i$r.forEach(t),kco=r(n8e," \u2014 "),bS=n(n8e,"A",{href:!0});var d$r=s(bS);xco=r(d$r,"XLNetLMHeadModel"),d$r.forEach(t),Rco=r(n8e," (XLNet model)"),n8e.forEach(t),S.forEach(t),Sco=i(Pt),P_=n(Pt,"P",{});var s8e=s(P_);Pco=r(s8e,"The model is set in evaluation mode by default using "),FK=n(s8e,"CODE",{});var c$r=s(FK);$co=r(c$r,"model.eval()"),c$r.forEach(t),Ico=r(s8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CK=n(s8e,"CODE",{});var f$r=s(CK);jco=r(f$r,"model.train()"),f$r.forEach(t),s8e.forEach(t),Nco=i(Pt),MK=n(Pt,"P",{});var m$r=s(MK);Dco=r(m$r,"Examples:"),m$r.forEach(t),qco=i(Pt),m(O4.$$.fragment,Pt),Pt.forEach(t),qs.forEach(t),J0e=i(d),Wi=n(d,"H2",{class:!0});var tBe=s(Wi);$_=n(tBe,"A",{id:!0,class:!0,href:!0});var g$r=s($_);EK=n(g$r,"SPAN",{});var h$r=s(EK);m(X4.$$.fragment,h$r),h$r.forEach(t),g$r.forEach(t),Gco=i(tBe),yK=n(tBe,"SPAN",{});var p$r=s(yK);Oco=r(p$r,"AutoModelForCausalLM"),p$r.forEach(t),tBe.forEach(t),Y0e=i(d),Qo=n(d,"DIV",{class:!0});var Os=s(Qo);m(z4.$$.fragment,Os),Xco=i(Os),Qi=n(Os,"P",{});var NX=s(Qi);zco=r(NX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wK=n(NX,"CODE",{});var _$r=s(wK);Vco=r(_$r,"from_pretrained()"),_$r.forEach(t),Wco=r(NX,"class method or the "),AK=n(NX,"CODE",{});var u$r=s(AK);Qco=r(u$r,"from_config()"),u$r.forEach(t),Hco=r(NX,`class
method.`),NX.forEach(t),Uco=i(Os),V4=n(Os,"P",{});var aBe=s(V4);Jco=r(aBe,"This class cannot be instantiated directly using "),LK=n(aBe,"CODE",{});var b$r=s(LK);Yco=r(b$r,"__init__()"),b$r.forEach(t),Kco=r(aBe," (throws an error)."),aBe.forEach(t),Zco=i(Os),qr=n(Os,"DIV",{class:!0});var Xs=s(qr);m(W4.$$.fragment,Xs),efo=i(Xs),BK=n(Xs,"P",{});var v$r=s(BK);ofo=r(v$r,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),v$r.forEach(t),rfo=i(Xs),Hi=n(Xs,"P",{});var DX=s(Hi);tfo=r(DX,`Note:
Loading a model from its configuration file does `),kK=n(DX,"STRONG",{});var T$r=s(kK);afo=r(T$r,"not"),T$r.forEach(t),nfo=r(DX,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(DX,"CODE",{});var F$r=s(xK);sfo=r(F$r,"from_pretrained()"),F$r.forEach(t),lfo=r(DX,"to load the model weights."),DX.forEach(t),ifo=i(Xs),RK=n(Xs,"P",{});var C$r=s(RK);dfo=r(C$r,"Examples:"),C$r.forEach(t),cfo=i(Xs),m(Q4.$$.fragment,Xs),Xs.forEach(t),ffo=i(Os),Re=n(Os,"DIV",{class:!0});var $t=s(Re);m(H4.$$.fragment,$t),mfo=i($t),SK=n($t,"P",{});var M$r=s(SK);gfo=r(M$r,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),M$r.forEach(t),hfo=i($t),Ga=n($t,"P",{});var tC=s(Ga);pfo=r(tC,"The model class to instantiate is selected based on the "),PK=n(tC,"CODE",{});var E$r=s(PK);_fo=r(E$r,"model_type"),E$r.forEach(t),ufo=r(tC,` property of the config object (either
passed as an argument or loaded from `),$K=n(tC,"CODE",{});var y$r=s($K);bfo=r(y$r,"pretrained_model_name_or_path"),y$r.forEach(t),vfo=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IK=n(tC,"CODE",{});var w$r=s(IK);Tfo=r(w$r,"pretrained_model_name_or_path"),w$r.forEach(t),Ffo=r(tC,":"),tC.forEach(t),Cfo=i($t),I=n($t,"UL",{});var D=s(I);I_=n(D,"LI",{});var l8e=s(I_);jK=n(l8e,"STRONG",{});var A$r=s(jK);Mfo=r(A$r,"bart"),A$r.forEach(t),Efo=r(l8e," \u2014 "),vS=n(l8e,"A",{href:!0});var L$r=s(vS);yfo=r(L$r,"BartForCausalLM"),L$r.forEach(t),wfo=r(l8e," (BART model)"),l8e.forEach(t),Afo=i(D),j_=n(D,"LI",{});var i8e=s(j_);NK=n(i8e,"STRONG",{});var B$r=s(NK);Lfo=r(B$r,"bert"),B$r.forEach(t),Bfo=r(i8e," \u2014 "),TS=n(i8e,"A",{href:!0});var k$r=s(TS);kfo=r(k$r,"BertLMHeadModel"),k$r.forEach(t),xfo=r(i8e," (BERT model)"),i8e.forEach(t),Rfo=i(D),N_=n(D,"LI",{});var d8e=s(N_);DK=n(d8e,"STRONG",{});var x$r=s(DK);Sfo=r(x$r,"bert-generation"),x$r.forEach(t),Pfo=r(d8e," \u2014 "),FS=n(d8e,"A",{href:!0});var R$r=s(FS);$fo=r(R$r,"BertGenerationDecoder"),R$r.forEach(t),Ifo=r(d8e," (Bert Generation model)"),d8e.forEach(t),jfo=i(D),D_=n(D,"LI",{});var c8e=s(D_);qK=n(c8e,"STRONG",{});var S$r=s(qK);Nfo=r(S$r,"big_bird"),S$r.forEach(t),Dfo=r(c8e," \u2014 "),CS=n(c8e,"A",{href:!0});var P$r=s(CS);qfo=r(P$r,"BigBirdForCausalLM"),P$r.forEach(t),Gfo=r(c8e," (BigBird model)"),c8e.forEach(t),Ofo=i(D),q_=n(D,"LI",{});var f8e=s(q_);GK=n(f8e,"STRONG",{});var $$r=s(GK);Xfo=r($$r,"bigbird_pegasus"),$$r.forEach(t),zfo=r(f8e," \u2014 "),MS=n(f8e,"A",{href:!0});var I$r=s(MS);Vfo=r(I$r,"BigBirdPegasusForCausalLM"),I$r.forEach(t),Wfo=r(f8e," (BigBirdPegasus model)"),f8e.forEach(t),Qfo=i(D),G_=n(D,"LI",{});var m8e=s(G_);OK=n(m8e,"STRONG",{});var j$r=s(OK);Hfo=r(j$r,"blenderbot"),j$r.forEach(t),Ufo=r(m8e," \u2014 "),ES=n(m8e,"A",{href:!0});var N$r=s(ES);Jfo=r(N$r,"BlenderbotForCausalLM"),N$r.forEach(t),Yfo=r(m8e," (Blenderbot model)"),m8e.forEach(t),Kfo=i(D),O_=n(D,"LI",{});var g8e=s(O_);XK=n(g8e,"STRONG",{});var D$r=s(XK);Zfo=r(D$r,"blenderbot-small"),D$r.forEach(t),emo=r(g8e," \u2014 "),yS=n(g8e,"A",{href:!0});var q$r=s(yS);omo=r(q$r,"BlenderbotSmallForCausalLM"),q$r.forEach(t),rmo=r(g8e," (BlenderbotSmall model)"),g8e.forEach(t),tmo=i(D),X_=n(D,"LI",{});var h8e=s(X_);zK=n(h8e,"STRONG",{});var G$r=s(zK);amo=r(G$r,"camembert"),G$r.forEach(t),nmo=r(h8e," \u2014 "),wS=n(h8e,"A",{href:!0});var O$r=s(wS);smo=r(O$r,"CamembertForCausalLM"),O$r.forEach(t),lmo=r(h8e," (CamemBERT model)"),h8e.forEach(t),imo=i(D),z_=n(D,"LI",{});var p8e=s(z_);VK=n(p8e,"STRONG",{});var X$r=s(VK);dmo=r(X$r,"ctrl"),X$r.forEach(t),cmo=r(p8e," \u2014 "),AS=n(p8e,"A",{href:!0});var z$r=s(AS);fmo=r(z$r,"CTRLLMHeadModel"),z$r.forEach(t),mmo=r(p8e," (CTRL model)"),p8e.forEach(t),gmo=i(D),V_=n(D,"LI",{});var _8e=s(V_);WK=n(_8e,"STRONG",{});var V$r=s(WK);hmo=r(V$r,"electra"),V$r.forEach(t),pmo=r(_8e," \u2014 "),LS=n(_8e,"A",{href:!0});var W$r=s(LS);_mo=r(W$r,"ElectraForCausalLM"),W$r.forEach(t),umo=r(_8e," (ELECTRA model)"),_8e.forEach(t),bmo=i(D),W_=n(D,"LI",{});var u8e=s(W_);QK=n(u8e,"STRONG",{});var Q$r=s(QK);vmo=r(Q$r,"gpt2"),Q$r.forEach(t),Tmo=r(u8e," \u2014 "),BS=n(u8e,"A",{href:!0});var H$r=s(BS);Fmo=r(H$r,"GPT2LMHeadModel"),H$r.forEach(t),Cmo=r(u8e," (OpenAI GPT-2 model)"),u8e.forEach(t),Mmo=i(D),Q_=n(D,"LI",{});var b8e=s(Q_);HK=n(b8e,"STRONG",{});var U$r=s(HK);Emo=r(U$r,"gpt_neo"),U$r.forEach(t),ymo=r(b8e," \u2014 "),kS=n(b8e,"A",{href:!0});var J$r=s(kS);wmo=r(J$r,"GPTNeoForCausalLM"),J$r.forEach(t),Amo=r(b8e," (GPT Neo model)"),b8e.forEach(t),Lmo=i(D),H_=n(D,"LI",{});var v8e=s(H_);UK=n(v8e,"STRONG",{});var Y$r=s(UK);Bmo=r(Y$r,"gptj"),Y$r.forEach(t),kmo=r(v8e," \u2014 "),xS=n(v8e,"A",{href:!0});var K$r=s(xS);xmo=r(K$r,"GPTJForCausalLM"),K$r.forEach(t),Rmo=r(v8e," (GPT-J model)"),v8e.forEach(t),Smo=i(D),U_=n(D,"LI",{});var T8e=s(U_);JK=n(T8e,"STRONG",{});var Z$r=s(JK);Pmo=r(Z$r,"marian"),Z$r.forEach(t),$mo=r(T8e," \u2014 "),RS=n(T8e,"A",{href:!0});var eIr=s(RS);Imo=r(eIr,"MarianForCausalLM"),eIr.forEach(t),jmo=r(T8e," (Marian model)"),T8e.forEach(t),Nmo=i(D),J_=n(D,"LI",{});var F8e=s(J_);YK=n(F8e,"STRONG",{});var oIr=s(YK);Dmo=r(oIr,"mbart"),oIr.forEach(t),qmo=r(F8e," \u2014 "),SS=n(F8e,"A",{href:!0});var rIr=s(SS);Gmo=r(rIr,"MBartForCausalLM"),rIr.forEach(t),Omo=r(F8e," (mBART model)"),F8e.forEach(t),Xmo=i(D),Y_=n(D,"LI",{});var C8e=s(Y_);KK=n(C8e,"STRONG",{});var tIr=s(KK);zmo=r(tIr,"megatron-bert"),tIr.forEach(t),Vmo=r(C8e," \u2014 "),PS=n(C8e,"A",{href:!0});var aIr=s(PS);Wmo=r(aIr,"MegatronBertForCausalLM"),aIr.forEach(t),Qmo=r(C8e," (MegatronBert model)"),C8e.forEach(t),Hmo=i(D),K_=n(D,"LI",{});var M8e=s(K_);ZK=n(M8e,"STRONG",{});var nIr=s(ZK);Umo=r(nIr,"openai-gpt"),nIr.forEach(t),Jmo=r(M8e," \u2014 "),$S=n(M8e,"A",{href:!0});var sIr=s($S);Ymo=r(sIr,"OpenAIGPTLMHeadModel"),sIr.forEach(t),Kmo=r(M8e," (OpenAI GPT model)"),M8e.forEach(t),Zmo=i(D),Z_=n(D,"LI",{});var E8e=s(Z_);eZ=n(E8e,"STRONG",{});var lIr=s(eZ);ego=r(lIr,"pegasus"),lIr.forEach(t),ogo=r(E8e," \u2014 "),IS=n(E8e,"A",{href:!0});var iIr=s(IS);rgo=r(iIr,"PegasusForCausalLM"),iIr.forEach(t),tgo=r(E8e," (Pegasus model)"),E8e.forEach(t),ago=i(D),eu=n(D,"LI",{});var y8e=s(eu);oZ=n(y8e,"STRONG",{});var dIr=s(oZ);ngo=r(dIr,"prophetnet"),dIr.forEach(t),sgo=r(y8e," \u2014 "),jS=n(y8e,"A",{href:!0});var cIr=s(jS);lgo=r(cIr,"ProphetNetForCausalLM"),cIr.forEach(t),igo=r(y8e," (ProphetNet model)"),y8e.forEach(t),dgo=i(D),ou=n(D,"LI",{});var w8e=s(ou);rZ=n(w8e,"STRONG",{});var fIr=s(rZ);cgo=r(fIr,"qdqbert"),fIr.forEach(t),fgo=r(w8e," \u2014 "),NS=n(w8e,"A",{href:!0});var mIr=s(NS);mgo=r(mIr,"QDQBertLMHeadModel"),mIr.forEach(t),ggo=r(w8e," (QDQBert model)"),w8e.forEach(t),hgo=i(D),ru=n(D,"LI",{});var A8e=s(ru);tZ=n(A8e,"STRONG",{});var gIr=s(tZ);pgo=r(gIr,"reformer"),gIr.forEach(t),_go=r(A8e," \u2014 "),DS=n(A8e,"A",{href:!0});var hIr=s(DS);ugo=r(hIr,"ReformerModelWithLMHead"),hIr.forEach(t),bgo=r(A8e," (Reformer model)"),A8e.forEach(t),vgo=i(D),tu=n(D,"LI",{});var L8e=s(tu);aZ=n(L8e,"STRONG",{});var pIr=s(aZ);Tgo=r(pIr,"rembert"),pIr.forEach(t),Fgo=r(L8e," \u2014 "),qS=n(L8e,"A",{href:!0});var _Ir=s(qS);Cgo=r(_Ir,"RemBertForCausalLM"),_Ir.forEach(t),Mgo=r(L8e," (RemBERT model)"),L8e.forEach(t),Ego=i(D),au=n(D,"LI",{});var B8e=s(au);nZ=n(B8e,"STRONG",{});var uIr=s(nZ);ygo=r(uIr,"roberta"),uIr.forEach(t),wgo=r(B8e," \u2014 "),GS=n(B8e,"A",{href:!0});var bIr=s(GS);Ago=r(bIr,"RobertaForCausalLM"),bIr.forEach(t),Lgo=r(B8e," (RoBERTa model)"),B8e.forEach(t),Bgo=i(D),nu=n(D,"LI",{});var k8e=s(nu);sZ=n(k8e,"STRONG",{});var vIr=s(sZ);kgo=r(vIr,"roformer"),vIr.forEach(t),xgo=r(k8e," \u2014 "),OS=n(k8e,"A",{href:!0});var TIr=s(OS);Rgo=r(TIr,"RoFormerForCausalLM"),TIr.forEach(t),Sgo=r(k8e," (RoFormer model)"),k8e.forEach(t),Pgo=i(D),su=n(D,"LI",{});var x8e=s(su);lZ=n(x8e,"STRONG",{});var FIr=s(lZ);$go=r(FIr,"speech_to_text_2"),FIr.forEach(t),Igo=r(x8e," \u2014 "),XS=n(x8e,"A",{href:!0});var CIr=s(XS);jgo=r(CIr,"Speech2Text2ForCausalLM"),CIr.forEach(t),Ngo=r(x8e," (Speech2Text2 model)"),x8e.forEach(t),Dgo=i(D),lu=n(D,"LI",{});var R8e=s(lu);iZ=n(R8e,"STRONG",{});var MIr=s(iZ);qgo=r(MIr,"transfo-xl"),MIr.forEach(t),Ggo=r(R8e," \u2014 "),zS=n(R8e,"A",{href:!0});var EIr=s(zS);Ogo=r(EIr,"TransfoXLLMHeadModel"),EIr.forEach(t),Xgo=r(R8e," (Transformer-XL model)"),R8e.forEach(t),zgo=i(D),iu=n(D,"LI",{});var S8e=s(iu);dZ=n(S8e,"STRONG",{});var yIr=s(dZ);Vgo=r(yIr,"trocr"),yIr.forEach(t),Wgo=r(S8e," \u2014 "),VS=n(S8e,"A",{href:!0});var wIr=s(VS);Qgo=r(wIr,"TrOCRForCausalLM"),wIr.forEach(t),Hgo=r(S8e," (TrOCR model)"),S8e.forEach(t),Ugo=i(D),du=n(D,"LI",{});var P8e=s(du);cZ=n(P8e,"STRONG",{});var AIr=s(cZ);Jgo=r(AIr,"xglm"),AIr.forEach(t),Ygo=r(P8e," \u2014 "),WS=n(P8e,"A",{href:!0});var LIr=s(WS);Kgo=r(LIr,"XGLMForCausalLM"),LIr.forEach(t),Zgo=r(P8e," (XGLM model)"),P8e.forEach(t),eho=i(D),cu=n(D,"LI",{});var $8e=s(cu);fZ=n($8e,"STRONG",{});var BIr=s(fZ);oho=r(BIr,"xlm"),BIr.forEach(t),rho=r($8e," \u2014 "),QS=n($8e,"A",{href:!0});var kIr=s(QS);tho=r(kIr,"XLMWithLMHeadModel"),kIr.forEach(t),aho=r($8e," (XLM model)"),$8e.forEach(t),nho=i(D),fu=n(D,"LI",{});var I8e=s(fu);mZ=n(I8e,"STRONG",{});var xIr=s(mZ);sho=r(xIr,"xlm-prophetnet"),xIr.forEach(t),lho=r(I8e," \u2014 "),HS=n(I8e,"A",{href:!0});var RIr=s(HS);iho=r(RIr,"XLMProphetNetForCausalLM"),RIr.forEach(t),dho=r(I8e," (XLMProphetNet model)"),I8e.forEach(t),cho=i(D),mu=n(D,"LI",{});var j8e=s(mu);gZ=n(j8e,"STRONG",{});var SIr=s(gZ);fho=r(SIr,"xlm-roberta"),SIr.forEach(t),mho=r(j8e," \u2014 "),US=n(j8e,"A",{href:!0});var PIr=s(US);gho=r(PIr,"XLMRobertaForCausalLM"),PIr.forEach(t),hho=r(j8e," (XLM-RoBERTa model)"),j8e.forEach(t),pho=i(D),gu=n(D,"LI",{});var N8e=s(gu);hZ=n(N8e,"STRONG",{});var $Ir=s(hZ);_ho=r($Ir,"xlm-roberta-xl"),$Ir.forEach(t),uho=r(N8e," \u2014 "),JS=n(N8e,"A",{href:!0});var IIr=s(JS);bho=r(IIr,"XLMRobertaXLForCausalLM"),IIr.forEach(t),vho=r(N8e," (XLM-RoBERTa-XL model)"),N8e.forEach(t),Tho=i(D),hu=n(D,"LI",{});var D8e=s(hu);pZ=n(D8e,"STRONG",{});var jIr=s(pZ);Fho=r(jIr,"xlnet"),jIr.forEach(t),Cho=r(D8e," \u2014 "),YS=n(D8e,"A",{href:!0});var NIr=s(YS);Mho=r(NIr,"XLNetLMHeadModel"),NIr.forEach(t),Eho=r(D8e," (XLNet model)"),D8e.forEach(t),D.forEach(t),yho=i($t),pu=n($t,"P",{});var q8e=s(pu);who=r(q8e,"The model is set in evaluation mode by default using "),_Z=n(q8e,"CODE",{});var DIr=s(_Z);Aho=r(DIr,"model.eval()"),DIr.forEach(t),Lho=r(q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uZ=n(q8e,"CODE",{});var qIr=s(uZ);Bho=r(qIr,"model.train()"),qIr.forEach(t),q8e.forEach(t),kho=i($t),bZ=n($t,"P",{});var GIr=s(bZ);xho=r(GIr,"Examples:"),GIr.forEach(t),Rho=i($t),m(U4.$$.fragment,$t),$t.forEach(t),Os.forEach(t),K0e=i(d),Ui=n(d,"H2",{class:!0});var nBe=s(Ui);_u=n(nBe,"A",{id:!0,class:!0,href:!0});var OIr=s(_u);vZ=n(OIr,"SPAN",{});var XIr=s(vZ);m(J4.$$.fragment,XIr),XIr.forEach(t),OIr.forEach(t),Sho=i(nBe),TZ=n(nBe,"SPAN",{});var zIr=s(TZ);Pho=r(zIr,"AutoModelForMaskedLM"),zIr.forEach(t),nBe.forEach(t),Z0e=i(d),Ho=n(d,"DIV",{class:!0});var zs=s(Ho);m(Y4.$$.fragment,zs),$ho=i(zs),Ji=n(zs,"P",{});var qX=s(Ji);Iho=r(qX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FZ=n(qX,"CODE",{});var VIr=s(FZ);jho=r(VIr,"from_pretrained()"),VIr.forEach(t),Nho=r(qX,"class method or the "),CZ=n(qX,"CODE",{});var WIr=s(CZ);Dho=r(WIr,"from_config()"),WIr.forEach(t),qho=r(qX,`class
method.`),qX.forEach(t),Gho=i(zs),K4=n(zs,"P",{});var sBe=s(K4);Oho=r(sBe,"This class cannot be instantiated directly using "),MZ=n(sBe,"CODE",{});var QIr=s(MZ);Xho=r(QIr,"__init__()"),QIr.forEach(t),zho=r(sBe," (throws an error)."),sBe.forEach(t),Vho=i(zs),Gr=n(zs,"DIV",{class:!0});var Vs=s(Gr);m(Z4.$$.fragment,Vs),Who=i(Vs),EZ=n(Vs,"P",{});var HIr=s(EZ);Qho=r(HIr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HIr.forEach(t),Hho=i(Vs),Yi=n(Vs,"P",{});var GX=s(Yi);Uho=r(GX,`Note:
Loading a model from its configuration file does `),yZ=n(GX,"STRONG",{});var UIr=s(yZ);Jho=r(UIr,"not"),UIr.forEach(t),Yho=r(GX,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(GX,"CODE",{});var JIr=s(wZ);Kho=r(JIr,"from_pretrained()"),JIr.forEach(t),Zho=r(GX,"to load the model weights."),GX.forEach(t),epo=i(Vs),AZ=n(Vs,"P",{});var YIr=s(AZ);opo=r(YIr,"Examples:"),YIr.forEach(t),rpo=i(Vs),m(eM.$$.fragment,Vs),Vs.forEach(t),tpo=i(zs),Se=n(zs,"DIV",{class:!0});var It=s(Se);m(oM.$$.fragment,It),apo=i(It),LZ=n(It,"P",{});var KIr=s(LZ);npo=r(KIr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KIr.forEach(t),spo=i(It),Oa=n(It,"P",{});var aC=s(Oa);lpo=r(aC,"The model class to instantiate is selected based on the "),BZ=n(aC,"CODE",{});var ZIr=s(BZ);ipo=r(ZIr,"model_type"),ZIr.forEach(t),dpo=r(aC,` property of the config object (either
passed as an argument or loaded from `),kZ=n(aC,"CODE",{});var ejr=s(kZ);cpo=r(ejr,"pretrained_model_name_or_path"),ejr.forEach(t),fpo=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xZ=n(aC,"CODE",{});var ojr=s(xZ);mpo=r(ojr,"pretrained_model_name_or_path"),ojr.forEach(t),gpo=r(aC,":"),aC.forEach(t),hpo=i(It),$=n(It,"UL",{});var j=s($);uu=n(j,"LI",{});var G8e=s(uu);RZ=n(G8e,"STRONG",{});var rjr=s(RZ);ppo=r(rjr,"albert"),rjr.forEach(t),_po=r(G8e," \u2014 "),KS=n(G8e,"A",{href:!0});var tjr=s(KS);upo=r(tjr,"AlbertForMaskedLM"),tjr.forEach(t),bpo=r(G8e," (ALBERT model)"),G8e.forEach(t),vpo=i(j),bu=n(j,"LI",{});var O8e=s(bu);SZ=n(O8e,"STRONG",{});var ajr=s(SZ);Tpo=r(ajr,"bart"),ajr.forEach(t),Fpo=r(O8e," \u2014 "),ZS=n(O8e,"A",{href:!0});var njr=s(ZS);Cpo=r(njr,"BartForConditionalGeneration"),njr.forEach(t),Mpo=r(O8e," (BART model)"),O8e.forEach(t),Epo=i(j),vu=n(j,"LI",{});var X8e=s(vu);PZ=n(X8e,"STRONG",{});var sjr=s(PZ);ypo=r(sjr,"bert"),sjr.forEach(t),wpo=r(X8e," \u2014 "),eP=n(X8e,"A",{href:!0});var ljr=s(eP);Apo=r(ljr,"BertForMaskedLM"),ljr.forEach(t),Lpo=r(X8e," (BERT model)"),X8e.forEach(t),Bpo=i(j),Tu=n(j,"LI",{});var z8e=s(Tu);$Z=n(z8e,"STRONG",{});var ijr=s($Z);kpo=r(ijr,"big_bird"),ijr.forEach(t),xpo=r(z8e," \u2014 "),oP=n(z8e,"A",{href:!0});var djr=s(oP);Rpo=r(djr,"BigBirdForMaskedLM"),djr.forEach(t),Spo=r(z8e," (BigBird model)"),z8e.forEach(t),Ppo=i(j),Fu=n(j,"LI",{});var V8e=s(Fu);IZ=n(V8e,"STRONG",{});var cjr=s(IZ);$po=r(cjr,"camembert"),cjr.forEach(t),Ipo=r(V8e," \u2014 "),rP=n(V8e,"A",{href:!0});var fjr=s(rP);jpo=r(fjr,"CamembertForMaskedLM"),fjr.forEach(t),Npo=r(V8e," (CamemBERT model)"),V8e.forEach(t),Dpo=i(j),Cu=n(j,"LI",{});var W8e=s(Cu);jZ=n(W8e,"STRONG",{});var mjr=s(jZ);qpo=r(mjr,"convbert"),mjr.forEach(t),Gpo=r(W8e," \u2014 "),tP=n(W8e,"A",{href:!0});var gjr=s(tP);Opo=r(gjr,"ConvBertForMaskedLM"),gjr.forEach(t),Xpo=r(W8e," (ConvBERT model)"),W8e.forEach(t),zpo=i(j),Mu=n(j,"LI",{});var Q8e=s(Mu);NZ=n(Q8e,"STRONG",{});var hjr=s(NZ);Vpo=r(hjr,"deberta"),hjr.forEach(t),Wpo=r(Q8e," \u2014 "),aP=n(Q8e,"A",{href:!0});var pjr=s(aP);Qpo=r(pjr,"DebertaForMaskedLM"),pjr.forEach(t),Hpo=r(Q8e," (DeBERTa model)"),Q8e.forEach(t),Upo=i(j),Eu=n(j,"LI",{});var H8e=s(Eu);DZ=n(H8e,"STRONG",{});var _jr=s(DZ);Jpo=r(_jr,"deberta-v2"),_jr.forEach(t),Ypo=r(H8e," \u2014 "),nP=n(H8e,"A",{href:!0});var ujr=s(nP);Kpo=r(ujr,"DebertaV2ForMaskedLM"),ujr.forEach(t),Zpo=r(H8e," (DeBERTa-v2 model)"),H8e.forEach(t),e_o=i(j),yu=n(j,"LI",{});var U8e=s(yu);qZ=n(U8e,"STRONG",{});var bjr=s(qZ);o_o=r(bjr,"distilbert"),bjr.forEach(t),r_o=r(U8e," \u2014 "),sP=n(U8e,"A",{href:!0});var vjr=s(sP);t_o=r(vjr,"DistilBertForMaskedLM"),vjr.forEach(t),a_o=r(U8e," (DistilBERT model)"),U8e.forEach(t),n_o=i(j),wu=n(j,"LI",{});var J8e=s(wu);GZ=n(J8e,"STRONG",{});var Tjr=s(GZ);s_o=r(Tjr,"electra"),Tjr.forEach(t),l_o=r(J8e," \u2014 "),lP=n(J8e,"A",{href:!0});var Fjr=s(lP);i_o=r(Fjr,"ElectraForMaskedLM"),Fjr.forEach(t),d_o=r(J8e," (ELECTRA model)"),J8e.forEach(t),c_o=i(j),Au=n(j,"LI",{});var Y8e=s(Au);OZ=n(Y8e,"STRONG",{});var Cjr=s(OZ);f_o=r(Cjr,"flaubert"),Cjr.forEach(t),m_o=r(Y8e," \u2014 "),iP=n(Y8e,"A",{href:!0});var Mjr=s(iP);g_o=r(Mjr,"FlaubertWithLMHeadModel"),Mjr.forEach(t),h_o=r(Y8e," (FlauBERT model)"),Y8e.forEach(t),p_o=i(j),Lu=n(j,"LI",{});var K8e=s(Lu);XZ=n(K8e,"STRONG",{});var Ejr=s(XZ);__o=r(Ejr,"fnet"),Ejr.forEach(t),u_o=r(K8e," \u2014 "),dP=n(K8e,"A",{href:!0});var yjr=s(dP);b_o=r(yjr,"FNetForMaskedLM"),yjr.forEach(t),v_o=r(K8e," (FNet model)"),K8e.forEach(t),T_o=i(j),Bu=n(j,"LI",{});var Z8e=s(Bu);zZ=n(Z8e,"STRONG",{});var wjr=s(zZ);F_o=r(wjr,"funnel"),wjr.forEach(t),C_o=r(Z8e," \u2014 "),cP=n(Z8e,"A",{href:!0});var Ajr=s(cP);M_o=r(Ajr,"FunnelForMaskedLM"),Ajr.forEach(t),E_o=r(Z8e," (Funnel Transformer model)"),Z8e.forEach(t),y_o=i(j),ku=n(j,"LI",{});var eFe=s(ku);VZ=n(eFe,"STRONG",{});var Ljr=s(VZ);w_o=r(Ljr,"ibert"),Ljr.forEach(t),A_o=r(eFe," \u2014 "),fP=n(eFe,"A",{href:!0});var Bjr=s(fP);L_o=r(Bjr,"IBertForMaskedLM"),Bjr.forEach(t),B_o=r(eFe," (I-BERT model)"),eFe.forEach(t),k_o=i(j),xu=n(j,"LI",{});var oFe=s(xu);WZ=n(oFe,"STRONG",{});var kjr=s(WZ);x_o=r(kjr,"layoutlm"),kjr.forEach(t),R_o=r(oFe," \u2014 "),mP=n(oFe,"A",{href:!0});var xjr=s(mP);S_o=r(xjr,"LayoutLMForMaskedLM"),xjr.forEach(t),P_o=r(oFe," (LayoutLM model)"),oFe.forEach(t),$_o=i(j),Ru=n(j,"LI",{});var rFe=s(Ru);QZ=n(rFe,"STRONG",{});var Rjr=s(QZ);I_o=r(Rjr,"longformer"),Rjr.forEach(t),j_o=r(rFe," \u2014 "),gP=n(rFe,"A",{href:!0});var Sjr=s(gP);N_o=r(Sjr,"LongformerForMaskedLM"),Sjr.forEach(t),D_o=r(rFe," (Longformer model)"),rFe.forEach(t),q_o=i(j),Su=n(j,"LI",{});var tFe=s(Su);HZ=n(tFe,"STRONG",{});var Pjr=s(HZ);G_o=r(Pjr,"mbart"),Pjr.forEach(t),O_o=r(tFe," \u2014 "),hP=n(tFe,"A",{href:!0});var $jr=s(hP);X_o=r($jr,"MBartForConditionalGeneration"),$jr.forEach(t),z_o=r(tFe," (mBART model)"),tFe.forEach(t),V_o=i(j),Pu=n(j,"LI",{});var aFe=s(Pu);UZ=n(aFe,"STRONG",{});var Ijr=s(UZ);W_o=r(Ijr,"megatron-bert"),Ijr.forEach(t),Q_o=r(aFe," \u2014 "),pP=n(aFe,"A",{href:!0});var jjr=s(pP);H_o=r(jjr,"MegatronBertForMaskedLM"),jjr.forEach(t),U_o=r(aFe," (MegatronBert model)"),aFe.forEach(t),J_o=i(j),$u=n(j,"LI",{});var nFe=s($u);JZ=n(nFe,"STRONG",{});var Njr=s(JZ);Y_o=r(Njr,"mobilebert"),Njr.forEach(t),K_o=r(nFe," \u2014 "),_P=n(nFe,"A",{href:!0});var Djr=s(_P);Z_o=r(Djr,"MobileBertForMaskedLM"),Djr.forEach(t),euo=r(nFe," (MobileBERT model)"),nFe.forEach(t),ouo=i(j),Iu=n(j,"LI",{});var sFe=s(Iu);YZ=n(sFe,"STRONG",{});var qjr=s(YZ);ruo=r(qjr,"mpnet"),qjr.forEach(t),tuo=r(sFe," \u2014 "),uP=n(sFe,"A",{href:!0});var Gjr=s(uP);auo=r(Gjr,"MPNetForMaskedLM"),Gjr.forEach(t),nuo=r(sFe," (MPNet model)"),sFe.forEach(t),suo=i(j),ju=n(j,"LI",{});var lFe=s(ju);KZ=n(lFe,"STRONG",{});var Ojr=s(KZ);luo=r(Ojr,"nystromformer"),Ojr.forEach(t),iuo=r(lFe," \u2014 "),bP=n(lFe,"A",{href:!0});var Xjr=s(bP);duo=r(Xjr,"NystromformerForMaskedLM"),Xjr.forEach(t),cuo=r(lFe," (Nystromformer model)"),lFe.forEach(t),fuo=i(j),Nu=n(j,"LI",{});var iFe=s(Nu);ZZ=n(iFe,"STRONG",{});var zjr=s(ZZ);muo=r(zjr,"perceiver"),zjr.forEach(t),guo=r(iFe," \u2014 "),vP=n(iFe,"A",{href:!0});var Vjr=s(vP);huo=r(Vjr,"PerceiverForMaskedLM"),Vjr.forEach(t),puo=r(iFe," (Perceiver model)"),iFe.forEach(t),_uo=i(j),Du=n(j,"LI",{});var dFe=s(Du);eee=n(dFe,"STRONG",{});var Wjr=s(eee);uuo=r(Wjr,"qdqbert"),Wjr.forEach(t),buo=r(dFe," \u2014 "),TP=n(dFe,"A",{href:!0});var Qjr=s(TP);vuo=r(Qjr,"QDQBertForMaskedLM"),Qjr.forEach(t),Tuo=r(dFe," (QDQBert model)"),dFe.forEach(t),Fuo=i(j),qu=n(j,"LI",{});var cFe=s(qu);oee=n(cFe,"STRONG",{});var Hjr=s(oee);Cuo=r(Hjr,"reformer"),Hjr.forEach(t),Muo=r(cFe," \u2014 "),FP=n(cFe,"A",{href:!0});var Ujr=s(FP);Euo=r(Ujr,"ReformerForMaskedLM"),Ujr.forEach(t),yuo=r(cFe," (Reformer model)"),cFe.forEach(t),wuo=i(j),Gu=n(j,"LI",{});var fFe=s(Gu);ree=n(fFe,"STRONG",{});var Jjr=s(ree);Auo=r(Jjr,"rembert"),Jjr.forEach(t),Luo=r(fFe," \u2014 "),CP=n(fFe,"A",{href:!0});var Yjr=s(CP);Buo=r(Yjr,"RemBertForMaskedLM"),Yjr.forEach(t),kuo=r(fFe," (RemBERT model)"),fFe.forEach(t),xuo=i(j),Ou=n(j,"LI",{});var mFe=s(Ou);tee=n(mFe,"STRONG",{});var Kjr=s(tee);Ruo=r(Kjr,"roberta"),Kjr.forEach(t),Suo=r(mFe," \u2014 "),MP=n(mFe,"A",{href:!0});var Zjr=s(MP);Puo=r(Zjr,"RobertaForMaskedLM"),Zjr.forEach(t),$uo=r(mFe," (RoBERTa model)"),mFe.forEach(t),Iuo=i(j),Xu=n(j,"LI",{});var gFe=s(Xu);aee=n(gFe,"STRONG",{});var eNr=s(aee);juo=r(eNr,"roformer"),eNr.forEach(t),Nuo=r(gFe," \u2014 "),EP=n(gFe,"A",{href:!0});var oNr=s(EP);Duo=r(oNr,"RoFormerForMaskedLM"),oNr.forEach(t),quo=r(gFe," (RoFormer model)"),gFe.forEach(t),Guo=i(j),zu=n(j,"LI",{});var hFe=s(zu);nee=n(hFe,"STRONG",{});var rNr=s(nee);Ouo=r(rNr,"squeezebert"),rNr.forEach(t),Xuo=r(hFe," \u2014 "),yP=n(hFe,"A",{href:!0});var tNr=s(yP);zuo=r(tNr,"SqueezeBertForMaskedLM"),tNr.forEach(t),Vuo=r(hFe," (SqueezeBERT model)"),hFe.forEach(t),Wuo=i(j),Vu=n(j,"LI",{});var pFe=s(Vu);see=n(pFe,"STRONG",{});var aNr=s(see);Quo=r(aNr,"tapas"),aNr.forEach(t),Huo=r(pFe," \u2014 "),wP=n(pFe,"A",{href:!0});var nNr=s(wP);Uuo=r(nNr,"TapasForMaskedLM"),nNr.forEach(t),Juo=r(pFe," (TAPAS model)"),pFe.forEach(t),Yuo=i(j),Wu=n(j,"LI",{});var _Fe=s(Wu);lee=n(_Fe,"STRONG",{});var sNr=s(lee);Kuo=r(sNr,"wav2vec2"),sNr.forEach(t),Zuo=r(_Fe," \u2014 "),iee=n(_Fe,"CODE",{});var lNr=s(iee);e1o=r(lNr,"Wav2Vec2ForMaskedLM"),lNr.forEach(t),o1o=r(_Fe,"(Wav2Vec2 model)"),_Fe.forEach(t),r1o=i(j),Qu=n(j,"LI",{});var uFe=s(Qu);dee=n(uFe,"STRONG",{});var iNr=s(dee);t1o=r(iNr,"xlm"),iNr.forEach(t),a1o=r(uFe," \u2014 "),AP=n(uFe,"A",{href:!0});var dNr=s(AP);n1o=r(dNr,"XLMWithLMHeadModel"),dNr.forEach(t),s1o=r(uFe," (XLM model)"),uFe.forEach(t),l1o=i(j),Hu=n(j,"LI",{});var bFe=s(Hu);cee=n(bFe,"STRONG",{});var cNr=s(cee);i1o=r(cNr,"xlm-roberta"),cNr.forEach(t),d1o=r(bFe," \u2014 "),LP=n(bFe,"A",{href:!0});var fNr=s(LP);c1o=r(fNr,"XLMRobertaForMaskedLM"),fNr.forEach(t),f1o=r(bFe," (XLM-RoBERTa model)"),bFe.forEach(t),m1o=i(j),Uu=n(j,"LI",{});var vFe=s(Uu);fee=n(vFe,"STRONG",{});var mNr=s(fee);g1o=r(mNr,"xlm-roberta-xl"),mNr.forEach(t),h1o=r(vFe," \u2014 "),BP=n(vFe,"A",{href:!0});var gNr=s(BP);p1o=r(gNr,"XLMRobertaXLForMaskedLM"),gNr.forEach(t),_1o=r(vFe," (XLM-RoBERTa-XL model)"),vFe.forEach(t),u1o=i(j),Ju=n(j,"LI",{});var TFe=s(Ju);mee=n(TFe,"STRONG",{});var hNr=s(mee);b1o=r(hNr,"yoso"),hNr.forEach(t),v1o=r(TFe," \u2014 "),kP=n(TFe,"A",{href:!0});var pNr=s(kP);T1o=r(pNr,"YosoForMaskedLM"),pNr.forEach(t),F1o=r(TFe," (YOSO model)"),TFe.forEach(t),j.forEach(t),C1o=i(It),Yu=n(It,"P",{});var FFe=s(Yu);M1o=r(FFe,"The model is set in evaluation mode by default using "),gee=n(FFe,"CODE",{});var _Nr=s(gee);E1o=r(_Nr,"model.eval()"),_Nr.forEach(t),y1o=r(FFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hee=n(FFe,"CODE",{});var uNr=s(hee);w1o=r(uNr,"model.train()"),uNr.forEach(t),FFe.forEach(t),A1o=i(It),pee=n(It,"P",{});var bNr=s(pee);L1o=r(bNr,"Examples:"),bNr.forEach(t),B1o=i(It),m(rM.$$.fragment,It),It.forEach(t),zs.forEach(t),eLe=i(d),Ki=n(d,"H2",{class:!0});var lBe=s(Ki);Ku=n(lBe,"A",{id:!0,class:!0,href:!0});var vNr=s(Ku);_ee=n(vNr,"SPAN",{});var TNr=s(_ee);m(tM.$$.fragment,TNr),TNr.forEach(t),vNr.forEach(t),k1o=i(lBe),uee=n(lBe,"SPAN",{});var FNr=s(uee);x1o=r(FNr,"AutoModelForSeq2SeqLM"),FNr.forEach(t),lBe.forEach(t),oLe=i(d),Uo=n(d,"DIV",{class:!0});var Ws=s(Uo);m(aM.$$.fragment,Ws),R1o=i(Ws),Zi=n(Ws,"P",{});var OX=s(Zi);S1o=r(OX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bee=n(OX,"CODE",{});var CNr=s(bee);P1o=r(CNr,"from_pretrained()"),CNr.forEach(t),$1o=r(OX,"class method or the "),vee=n(OX,"CODE",{});var MNr=s(vee);I1o=r(MNr,"from_config()"),MNr.forEach(t),j1o=r(OX,`class
method.`),OX.forEach(t),N1o=i(Ws),nM=n(Ws,"P",{});var iBe=s(nM);D1o=r(iBe,"This class cannot be instantiated directly using "),Tee=n(iBe,"CODE",{});var ENr=s(Tee);q1o=r(ENr,"__init__()"),ENr.forEach(t),G1o=r(iBe," (throws an error)."),iBe.forEach(t),O1o=i(Ws),Or=n(Ws,"DIV",{class:!0});var Qs=s(Or);m(sM.$$.fragment,Qs),X1o=i(Qs),Fee=n(Qs,"P",{});var yNr=s(Fee);z1o=r(yNr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yNr.forEach(t),V1o=i(Qs),ed=n(Qs,"P",{});var XX=s(ed);W1o=r(XX,`Note:
Loading a model from its configuration file does `),Cee=n(XX,"STRONG",{});var wNr=s(Cee);Q1o=r(wNr,"not"),wNr.forEach(t),H1o=r(XX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=n(XX,"CODE",{});var ANr=s(Mee);U1o=r(ANr,"from_pretrained()"),ANr.forEach(t),J1o=r(XX,"to load the model weights."),XX.forEach(t),Y1o=i(Qs),Eee=n(Qs,"P",{});var LNr=s(Eee);K1o=r(LNr,"Examples:"),LNr.forEach(t),Z1o=i(Qs),m(lM.$$.fragment,Qs),Qs.forEach(t),ebo=i(Ws),Pe=n(Ws,"DIV",{class:!0});var jt=s(Pe);m(iM.$$.fragment,jt),obo=i(jt),yee=n(jt,"P",{});var BNr=s(yee);rbo=r(BNr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),BNr.forEach(t),tbo=i(jt),Xa=n(jt,"P",{});var nC=s(Xa);abo=r(nC,"The model class to instantiate is selected based on the "),wee=n(nC,"CODE",{});var kNr=s(wee);nbo=r(kNr,"model_type"),kNr.forEach(t),sbo=r(nC,` property of the config object (either
passed as an argument or loaded from `),Aee=n(nC,"CODE",{});var xNr=s(Aee);lbo=r(xNr,"pretrained_model_name_or_path"),xNr.forEach(t),ibo=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lee=n(nC,"CODE",{});var RNr=s(Lee);dbo=r(RNr,"pretrained_model_name_or_path"),RNr.forEach(t),cbo=r(nC,":"),nC.forEach(t),fbo=i(jt),se=n(jt,"UL",{});var de=s(se);Zu=n(de,"LI",{});var CFe=s(Zu);Bee=n(CFe,"STRONG",{});var SNr=s(Bee);mbo=r(SNr,"bart"),SNr.forEach(t),gbo=r(CFe," \u2014 "),xP=n(CFe,"A",{href:!0});var PNr=s(xP);hbo=r(PNr,"BartForConditionalGeneration"),PNr.forEach(t),pbo=r(CFe," (BART model)"),CFe.forEach(t),_bo=i(de),e1=n(de,"LI",{});var MFe=s(e1);kee=n(MFe,"STRONG",{});var $Nr=s(kee);ubo=r($Nr,"bigbird_pegasus"),$Nr.forEach(t),bbo=r(MFe," \u2014 "),RP=n(MFe,"A",{href:!0});var INr=s(RP);vbo=r(INr,"BigBirdPegasusForConditionalGeneration"),INr.forEach(t),Tbo=r(MFe," (BigBirdPegasus model)"),MFe.forEach(t),Fbo=i(de),o1=n(de,"LI",{});var EFe=s(o1);xee=n(EFe,"STRONG",{});var jNr=s(xee);Cbo=r(jNr,"blenderbot"),jNr.forEach(t),Mbo=r(EFe," \u2014 "),SP=n(EFe,"A",{href:!0});var NNr=s(SP);Ebo=r(NNr,"BlenderbotForConditionalGeneration"),NNr.forEach(t),ybo=r(EFe," (Blenderbot model)"),EFe.forEach(t),wbo=i(de),r1=n(de,"LI",{});var yFe=s(r1);Ree=n(yFe,"STRONG",{});var DNr=s(Ree);Abo=r(DNr,"blenderbot-small"),DNr.forEach(t),Lbo=r(yFe," \u2014 "),PP=n(yFe,"A",{href:!0});var qNr=s(PP);Bbo=r(qNr,"BlenderbotSmallForConditionalGeneration"),qNr.forEach(t),kbo=r(yFe," (BlenderbotSmall model)"),yFe.forEach(t),xbo=i(de),t1=n(de,"LI",{});var wFe=s(t1);See=n(wFe,"STRONG",{});var GNr=s(See);Rbo=r(GNr,"encoder-decoder"),GNr.forEach(t),Sbo=r(wFe," \u2014 "),$P=n(wFe,"A",{href:!0});var ONr=s($P);Pbo=r(ONr,"EncoderDecoderModel"),ONr.forEach(t),$bo=r(wFe," (Encoder decoder model)"),wFe.forEach(t),Ibo=i(de),a1=n(de,"LI",{});var AFe=s(a1);Pee=n(AFe,"STRONG",{});var XNr=s(Pee);jbo=r(XNr,"fsmt"),XNr.forEach(t),Nbo=r(AFe," \u2014 "),IP=n(AFe,"A",{href:!0});var zNr=s(IP);Dbo=r(zNr,"FSMTForConditionalGeneration"),zNr.forEach(t),qbo=r(AFe," (FairSeq Machine-Translation model)"),AFe.forEach(t),Gbo=i(de),n1=n(de,"LI",{});var LFe=s(n1);$ee=n(LFe,"STRONG",{});var VNr=s($ee);Obo=r(VNr,"led"),VNr.forEach(t),Xbo=r(LFe," \u2014 "),jP=n(LFe,"A",{href:!0});var WNr=s(jP);zbo=r(WNr,"LEDForConditionalGeneration"),WNr.forEach(t),Vbo=r(LFe," (LED model)"),LFe.forEach(t),Wbo=i(de),s1=n(de,"LI",{});var BFe=s(s1);Iee=n(BFe,"STRONG",{});var QNr=s(Iee);Qbo=r(QNr,"m2m_100"),QNr.forEach(t),Hbo=r(BFe," \u2014 "),NP=n(BFe,"A",{href:!0});var HNr=s(NP);Ubo=r(HNr,"M2M100ForConditionalGeneration"),HNr.forEach(t),Jbo=r(BFe," (M2M100 model)"),BFe.forEach(t),Ybo=i(de),l1=n(de,"LI",{});var kFe=s(l1);jee=n(kFe,"STRONG",{});var UNr=s(jee);Kbo=r(UNr,"marian"),UNr.forEach(t),Zbo=r(kFe," \u2014 "),DP=n(kFe,"A",{href:!0});var JNr=s(DP);e5o=r(JNr,"MarianMTModel"),JNr.forEach(t),o5o=r(kFe," (Marian model)"),kFe.forEach(t),r5o=i(de),i1=n(de,"LI",{});var xFe=s(i1);Nee=n(xFe,"STRONG",{});var YNr=s(Nee);t5o=r(YNr,"mbart"),YNr.forEach(t),a5o=r(xFe," \u2014 "),qP=n(xFe,"A",{href:!0});var KNr=s(qP);n5o=r(KNr,"MBartForConditionalGeneration"),KNr.forEach(t),s5o=r(xFe," (mBART model)"),xFe.forEach(t),l5o=i(de),d1=n(de,"LI",{});var RFe=s(d1);Dee=n(RFe,"STRONG",{});var ZNr=s(Dee);i5o=r(ZNr,"mt5"),ZNr.forEach(t),d5o=r(RFe," \u2014 "),GP=n(RFe,"A",{href:!0});var eDr=s(GP);c5o=r(eDr,"MT5ForConditionalGeneration"),eDr.forEach(t),f5o=r(RFe," (mT5 model)"),RFe.forEach(t),m5o=i(de),c1=n(de,"LI",{});var SFe=s(c1);qee=n(SFe,"STRONG",{});var oDr=s(qee);g5o=r(oDr,"pegasus"),oDr.forEach(t),h5o=r(SFe," \u2014 "),OP=n(SFe,"A",{href:!0});var rDr=s(OP);p5o=r(rDr,"PegasusForConditionalGeneration"),rDr.forEach(t),_5o=r(SFe," (Pegasus model)"),SFe.forEach(t),u5o=i(de),f1=n(de,"LI",{});var PFe=s(f1);Gee=n(PFe,"STRONG",{});var tDr=s(Gee);b5o=r(tDr,"prophetnet"),tDr.forEach(t),v5o=r(PFe," \u2014 "),XP=n(PFe,"A",{href:!0});var aDr=s(XP);T5o=r(aDr,"ProphetNetForConditionalGeneration"),aDr.forEach(t),F5o=r(PFe," (ProphetNet model)"),PFe.forEach(t),C5o=i(de),m1=n(de,"LI",{});var $Fe=s(m1);Oee=n($Fe,"STRONG",{});var nDr=s(Oee);M5o=r(nDr,"t5"),nDr.forEach(t),E5o=r($Fe," \u2014 "),zP=n($Fe,"A",{href:!0});var sDr=s(zP);y5o=r(sDr,"T5ForConditionalGeneration"),sDr.forEach(t),w5o=r($Fe," (T5 model)"),$Fe.forEach(t),A5o=i(de),g1=n(de,"LI",{});var IFe=s(g1);Xee=n(IFe,"STRONG",{});var lDr=s(Xee);L5o=r(lDr,"xlm-prophetnet"),lDr.forEach(t),B5o=r(IFe," \u2014 "),VP=n(IFe,"A",{href:!0});var iDr=s(VP);k5o=r(iDr,"XLMProphetNetForConditionalGeneration"),iDr.forEach(t),x5o=r(IFe," (XLMProphetNet model)"),IFe.forEach(t),de.forEach(t),R5o=i(jt),h1=n(jt,"P",{});var jFe=s(h1);S5o=r(jFe,"The model is set in evaluation mode by default using "),zee=n(jFe,"CODE",{});var dDr=s(zee);P5o=r(dDr,"model.eval()"),dDr.forEach(t),$5o=r(jFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vee=n(jFe,"CODE",{});var cDr=s(Vee);I5o=r(cDr,"model.train()"),cDr.forEach(t),jFe.forEach(t),j5o=i(jt),Wee=n(jt,"P",{});var fDr=s(Wee);N5o=r(fDr,"Examples:"),fDr.forEach(t),D5o=i(jt),m(dM.$$.fragment,jt),jt.forEach(t),Ws.forEach(t),rLe=i(d),od=n(d,"H2",{class:!0});var dBe=s(od);p1=n(dBe,"A",{id:!0,class:!0,href:!0});var mDr=s(p1);Qee=n(mDr,"SPAN",{});var gDr=s(Qee);m(cM.$$.fragment,gDr),gDr.forEach(t),mDr.forEach(t),q5o=i(dBe),Hee=n(dBe,"SPAN",{});var hDr=s(Hee);G5o=r(hDr,"AutoModelForSequenceClassification"),hDr.forEach(t),dBe.forEach(t),tLe=i(d),Jo=n(d,"DIV",{class:!0});var Hs=s(Jo);m(fM.$$.fragment,Hs),O5o=i(Hs),rd=n(Hs,"P",{});var zX=s(rd);X5o=r(zX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Uee=n(zX,"CODE",{});var pDr=s(Uee);z5o=r(pDr,"from_pretrained()"),pDr.forEach(t),V5o=r(zX,"class method or the "),Jee=n(zX,"CODE",{});var _Dr=s(Jee);W5o=r(_Dr,"from_config()"),_Dr.forEach(t),Q5o=r(zX,`class
method.`),zX.forEach(t),H5o=i(Hs),mM=n(Hs,"P",{});var cBe=s(mM);U5o=r(cBe,"This class cannot be instantiated directly using "),Yee=n(cBe,"CODE",{});var uDr=s(Yee);J5o=r(uDr,"__init__()"),uDr.forEach(t),Y5o=r(cBe," (throws an error)."),cBe.forEach(t),K5o=i(Hs),Xr=n(Hs,"DIV",{class:!0});var Us=s(Xr);m(gM.$$.fragment,Us),Z5o=i(Us),Kee=n(Us,"P",{});var bDr=s(Kee);e2o=r(bDr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bDr.forEach(t),o2o=i(Us),td=n(Us,"P",{});var VX=s(td);r2o=r(VX,`Note:
Loading a model from its configuration file does `),Zee=n(VX,"STRONG",{});var vDr=s(Zee);t2o=r(vDr,"not"),vDr.forEach(t),a2o=r(VX,` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=n(VX,"CODE",{});var TDr=s(eoe);n2o=r(TDr,"from_pretrained()"),TDr.forEach(t),s2o=r(VX,"to load the model weights."),VX.forEach(t),l2o=i(Us),ooe=n(Us,"P",{});var FDr=s(ooe);i2o=r(FDr,"Examples:"),FDr.forEach(t),d2o=i(Us),m(hM.$$.fragment,Us),Us.forEach(t),c2o=i(Hs),$e=n(Hs,"DIV",{class:!0});var Nt=s($e);m(pM.$$.fragment,Nt),f2o=i(Nt),roe=n(Nt,"P",{});var CDr=s(roe);m2o=r(CDr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CDr.forEach(t),g2o=i(Nt),za=n(Nt,"P",{});var sC=s(za);h2o=r(sC,"The model class to instantiate is selected based on the "),toe=n(sC,"CODE",{});var MDr=s(toe);p2o=r(MDr,"model_type"),MDr.forEach(t),_2o=r(sC,` property of the config object (either
passed as an argument or loaded from `),aoe=n(sC,"CODE",{});var EDr=s(aoe);u2o=r(EDr,"pretrained_model_name_or_path"),EDr.forEach(t),b2o=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),noe=n(sC,"CODE",{});var yDr=s(noe);v2o=r(yDr,"pretrained_model_name_or_path"),yDr.forEach(t),T2o=r(sC,":"),sC.forEach(t),F2o=i(Nt),A=n(Nt,"UL",{});var L=s(A);_1=n(L,"LI",{});var NFe=s(_1);soe=n(NFe,"STRONG",{});var wDr=s(soe);C2o=r(wDr,"albert"),wDr.forEach(t),M2o=r(NFe," \u2014 "),WP=n(NFe,"A",{href:!0});var ADr=s(WP);E2o=r(ADr,"AlbertForSequenceClassification"),ADr.forEach(t),y2o=r(NFe," (ALBERT model)"),NFe.forEach(t),w2o=i(L),u1=n(L,"LI",{});var DFe=s(u1);loe=n(DFe,"STRONG",{});var LDr=s(loe);A2o=r(LDr,"bart"),LDr.forEach(t),L2o=r(DFe," \u2014 "),QP=n(DFe,"A",{href:!0});var BDr=s(QP);B2o=r(BDr,"BartForSequenceClassification"),BDr.forEach(t),k2o=r(DFe," (BART model)"),DFe.forEach(t),x2o=i(L),b1=n(L,"LI",{});var qFe=s(b1);ioe=n(qFe,"STRONG",{});var kDr=s(ioe);R2o=r(kDr,"bert"),kDr.forEach(t),S2o=r(qFe," \u2014 "),HP=n(qFe,"A",{href:!0});var xDr=s(HP);P2o=r(xDr,"BertForSequenceClassification"),xDr.forEach(t),$2o=r(qFe," (BERT model)"),qFe.forEach(t),I2o=i(L),v1=n(L,"LI",{});var GFe=s(v1);doe=n(GFe,"STRONG",{});var RDr=s(doe);j2o=r(RDr,"big_bird"),RDr.forEach(t),N2o=r(GFe," \u2014 "),UP=n(GFe,"A",{href:!0});var SDr=s(UP);D2o=r(SDr,"BigBirdForSequenceClassification"),SDr.forEach(t),q2o=r(GFe," (BigBird model)"),GFe.forEach(t),G2o=i(L),T1=n(L,"LI",{});var OFe=s(T1);coe=n(OFe,"STRONG",{});var PDr=s(coe);O2o=r(PDr,"bigbird_pegasus"),PDr.forEach(t),X2o=r(OFe," \u2014 "),JP=n(OFe,"A",{href:!0});var $Dr=s(JP);z2o=r($Dr,"BigBirdPegasusForSequenceClassification"),$Dr.forEach(t),V2o=r(OFe," (BigBirdPegasus model)"),OFe.forEach(t),W2o=i(L),F1=n(L,"LI",{});var XFe=s(F1);foe=n(XFe,"STRONG",{});var IDr=s(foe);Q2o=r(IDr,"camembert"),IDr.forEach(t),H2o=r(XFe," \u2014 "),YP=n(XFe,"A",{href:!0});var jDr=s(YP);U2o=r(jDr,"CamembertForSequenceClassification"),jDr.forEach(t),J2o=r(XFe," (CamemBERT model)"),XFe.forEach(t),Y2o=i(L),C1=n(L,"LI",{});var zFe=s(C1);moe=n(zFe,"STRONG",{});var NDr=s(moe);K2o=r(NDr,"canine"),NDr.forEach(t),Z2o=r(zFe," \u2014 "),KP=n(zFe,"A",{href:!0});var DDr=s(KP);evo=r(DDr,"CanineForSequenceClassification"),DDr.forEach(t),ovo=r(zFe," (Canine model)"),zFe.forEach(t),rvo=i(L),M1=n(L,"LI",{});var VFe=s(M1);goe=n(VFe,"STRONG",{});var qDr=s(goe);tvo=r(qDr,"convbert"),qDr.forEach(t),avo=r(VFe," \u2014 "),ZP=n(VFe,"A",{href:!0});var GDr=s(ZP);nvo=r(GDr,"ConvBertForSequenceClassification"),GDr.forEach(t),svo=r(VFe," (ConvBERT model)"),VFe.forEach(t),lvo=i(L),E1=n(L,"LI",{});var WFe=s(E1);hoe=n(WFe,"STRONG",{});var ODr=s(hoe);ivo=r(ODr,"ctrl"),ODr.forEach(t),dvo=r(WFe," \u2014 "),e$=n(WFe,"A",{href:!0});var XDr=s(e$);cvo=r(XDr,"CTRLForSequenceClassification"),XDr.forEach(t),fvo=r(WFe," (CTRL model)"),WFe.forEach(t),mvo=i(L),y1=n(L,"LI",{});var QFe=s(y1);poe=n(QFe,"STRONG",{});var zDr=s(poe);gvo=r(zDr,"deberta"),zDr.forEach(t),hvo=r(QFe," \u2014 "),o$=n(QFe,"A",{href:!0});var VDr=s(o$);pvo=r(VDr,"DebertaForSequenceClassification"),VDr.forEach(t),_vo=r(QFe," (DeBERTa model)"),QFe.forEach(t),uvo=i(L),w1=n(L,"LI",{});var HFe=s(w1);_oe=n(HFe,"STRONG",{});var WDr=s(_oe);bvo=r(WDr,"deberta-v2"),WDr.forEach(t),vvo=r(HFe," \u2014 "),r$=n(HFe,"A",{href:!0});var QDr=s(r$);Tvo=r(QDr,"DebertaV2ForSequenceClassification"),QDr.forEach(t),Fvo=r(HFe," (DeBERTa-v2 model)"),HFe.forEach(t),Cvo=i(L),A1=n(L,"LI",{});var UFe=s(A1);uoe=n(UFe,"STRONG",{});var HDr=s(uoe);Mvo=r(HDr,"distilbert"),HDr.forEach(t),Evo=r(UFe," \u2014 "),t$=n(UFe,"A",{href:!0});var UDr=s(t$);yvo=r(UDr,"DistilBertForSequenceClassification"),UDr.forEach(t),wvo=r(UFe," (DistilBERT model)"),UFe.forEach(t),Avo=i(L),L1=n(L,"LI",{});var JFe=s(L1);boe=n(JFe,"STRONG",{});var JDr=s(boe);Lvo=r(JDr,"electra"),JDr.forEach(t),Bvo=r(JFe," \u2014 "),a$=n(JFe,"A",{href:!0});var YDr=s(a$);kvo=r(YDr,"ElectraForSequenceClassification"),YDr.forEach(t),xvo=r(JFe," (ELECTRA model)"),JFe.forEach(t),Rvo=i(L),B1=n(L,"LI",{});var YFe=s(B1);voe=n(YFe,"STRONG",{});var KDr=s(voe);Svo=r(KDr,"flaubert"),KDr.forEach(t),Pvo=r(YFe," \u2014 "),n$=n(YFe,"A",{href:!0});var ZDr=s(n$);$vo=r(ZDr,"FlaubertForSequenceClassification"),ZDr.forEach(t),Ivo=r(YFe," (FlauBERT model)"),YFe.forEach(t),jvo=i(L),k1=n(L,"LI",{});var KFe=s(k1);Toe=n(KFe,"STRONG",{});var eqr=s(Toe);Nvo=r(eqr,"fnet"),eqr.forEach(t),Dvo=r(KFe," \u2014 "),s$=n(KFe,"A",{href:!0});var oqr=s(s$);qvo=r(oqr,"FNetForSequenceClassification"),oqr.forEach(t),Gvo=r(KFe," (FNet model)"),KFe.forEach(t),Ovo=i(L),x1=n(L,"LI",{});var ZFe=s(x1);Foe=n(ZFe,"STRONG",{});var rqr=s(Foe);Xvo=r(rqr,"funnel"),rqr.forEach(t),zvo=r(ZFe," \u2014 "),l$=n(ZFe,"A",{href:!0});var tqr=s(l$);Vvo=r(tqr,"FunnelForSequenceClassification"),tqr.forEach(t),Wvo=r(ZFe," (Funnel Transformer model)"),ZFe.forEach(t),Qvo=i(L),R1=n(L,"LI",{});var eCe=s(R1);Coe=n(eCe,"STRONG",{});var aqr=s(Coe);Hvo=r(aqr,"gpt2"),aqr.forEach(t),Uvo=r(eCe," \u2014 "),i$=n(eCe,"A",{href:!0});var nqr=s(i$);Jvo=r(nqr,"GPT2ForSequenceClassification"),nqr.forEach(t),Yvo=r(eCe," (OpenAI GPT-2 model)"),eCe.forEach(t),Kvo=i(L),S1=n(L,"LI",{});var oCe=s(S1);Moe=n(oCe,"STRONG",{});var sqr=s(Moe);Zvo=r(sqr,"gpt_neo"),sqr.forEach(t),e6o=r(oCe," \u2014 "),d$=n(oCe,"A",{href:!0});var lqr=s(d$);o6o=r(lqr,"GPTNeoForSequenceClassification"),lqr.forEach(t),r6o=r(oCe," (GPT Neo model)"),oCe.forEach(t),t6o=i(L),P1=n(L,"LI",{});var rCe=s(P1);Eoe=n(rCe,"STRONG",{});var iqr=s(Eoe);a6o=r(iqr,"gptj"),iqr.forEach(t),n6o=r(rCe," \u2014 "),c$=n(rCe,"A",{href:!0});var dqr=s(c$);s6o=r(dqr,"GPTJForSequenceClassification"),dqr.forEach(t),l6o=r(rCe," (GPT-J model)"),rCe.forEach(t),i6o=i(L),$1=n(L,"LI",{});var tCe=s($1);yoe=n(tCe,"STRONG",{});var cqr=s(yoe);d6o=r(cqr,"ibert"),cqr.forEach(t),c6o=r(tCe," \u2014 "),f$=n(tCe,"A",{href:!0});var fqr=s(f$);f6o=r(fqr,"IBertForSequenceClassification"),fqr.forEach(t),m6o=r(tCe," (I-BERT model)"),tCe.forEach(t),g6o=i(L),I1=n(L,"LI",{});var aCe=s(I1);woe=n(aCe,"STRONG",{});var mqr=s(woe);h6o=r(mqr,"layoutlm"),mqr.forEach(t),p6o=r(aCe," \u2014 "),m$=n(aCe,"A",{href:!0});var gqr=s(m$);_6o=r(gqr,"LayoutLMForSequenceClassification"),gqr.forEach(t),u6o=r(aCe," (LayoutLM model)"),aCe.forEach(t),b6o=i(L),j1=n(L,"LI",{});var nCe=s(j1);Aoe=n(nCe,"STRONG",{});var hqr=s(Aoe);v6o=r(hqr,"layoutlmv2"),hqr.forEach(t),T6o=r(nCe," \u2014 "),g$=n(nCe,"A",{href:!0});var pqr=s(g$);F6o=r(pqr,"LayoutLMv2ForSequenceClassification"),pqr.forEach(t),C6o=r(nCe," (LayoutLMv2 model)"),nCe.forEach(t),M6o=i(L),N1=n(L,"LI",{});var sCe=s(N1);Loe=n(sCe,"STRONG",{});var _qr=s(Loe);E6o=r(_qr,"led"),_qr.forEach(t),y6o=r(sCe," \u2014 "),h$=n(sCe,"A",{href:!0});var uqr=s(h$);w6o=r(uqr,"LEDForSequenceClassification"),uqr.forEach(t),A6o=r(sCe," (LED model)"),sCe.forEach(t),L6o=i(L),D1=n(L,"LI",{});var lCe=s(D1);Boe=n(lCe,"STRONG",{});var bqr=s(Boe);B6o=r(bqr,"longformer"),bqr.forEach(t),k6o=r(lCe," \u2014 "),p$=n(lCe,"A",{href:!0});var vqr=s(p$);x6o=r(vqr,"LongformerForSequenceClassification"),vqr.forEach(t),R6o=r(lCe," (Longformer model)"),lCe.forEach(t),S6o=i(L),q1=n(L,"LI",{});var iCe=s(q1);koe=n(iCe,"STRONG",{});var Tqr=s(koe);P6o=r(Tqr,"mbart"),Tqr.forEach(t),$6o=r(iCe," \u2014 "),_$=n(iCe,"A",{href:!0});var Fqr=s(_$);I6o=r(Fqr,"MBartForSequenceClassification"),Fqr.forEach(t),j6o=r(iCe," (mBART model)"),iCe.forEach(t),N6o=i(L),G1=n(L,"LI",{});var dCe=s(G1);xoe=n(dCe,"STRONG",{});var Cqr=s(xoe);D6o=r(Cqr,"megatron-bert"),Cqr.forEach(t),q6o=r(dCe," \u2014 "),u$=n(dCe,"A",{href:!0});var Mqr=s(u$);G6o=r(Mqr,"MegatronBertForSequenceClassification"),Mqr.forEach(t),O6o=r(dCe," (MegatronBert model)"),dCe.forEach(t),X6o=i(L),O1=n(L,"LI",{});var cCe=s(O1);Roe=n(cCe,"STRONG",{});var Eqr=s(Roe);z6o=r(Eqr,"mobilebert"),Eqr.forEach(t),V6o=r(cCe," \u2014 "),b$=n(cCe,"A",{href:!0});var yqr=s(b$);W6o=r(yqr,"MobileBertForSequenceClassification"),yqr.forEach(t),Q6o=r(cCe," (MobileBERT model)"),cCe.forEach(t),H6o=i(L),X1=n(L,"LI",{});var fCe=s(X1);Soe=n(fCe,"STRONG",{});var wqr=s(Soe);U6o=r(wqr,"mpnet"),wqr.forEach(t),J6o=r(fCe," \u2014 "),v$=n(fCe,"A",{href:!0});var Aqr=s(v$);Y6o=r(Aqr,"MPNetForSequenceClassification"),Aqr.forEach(t),K6o=r(fCe," (MPNet model)"),fCe.forEach(t),Z6o=i(L),z1=n(L,"LI",{});var mCe=s(z1);Poe=n(mCe,"STRONG",{});var Lqr=s(Poe);eTo=r(Lqr,"nystromformer"),Lqr.forEach(t),oTo=r(mCe," \u2014 "),T$=n(mCe,"A",{href:!0});var Bqr=s(T$);rTo=r(Bqr,"NystromformerForSequenceClassification"),Bqr.forEach(t),tTo=r(mCe," (Nystromformer model)"),mCe.forEach(t),aTo=i(L),V1=n(L,"LI",{});var gCe=s(V1);$oe=n(gCe,"STRONG",{});var kqr=s($oe);nTo=r(kqr,"openai-gpt"),kqr.forEach(t),sTo=r(gCe," \u2014 "),F$=n(gCe,"A",{href:!0});var xqr=s(F$);lTo=r(xqr,"OpenAIGPTForSequenceClassification"),xqr.forEach(t),iTo=r(gCe," (OpenAI GPT model)"),gCe.forEach(t),dTo=i(L),W1=n(L,"LI",{});var hCe=s(W1);Ioe=n(hCe,"STRONG",{});var Rqr=s(Ioe);cTo=r(Rqr,"perceiver"),Rqr.forEach(t),fTo=r(hCe," \u2014 "),C$=n(hCe,"A",{href:!0});var Sqr=s(C$);mTo=r(Sqr,"PerceiverForSequenceClassification"),Sqr.forEach(t),gTo=r(hCe," (Perceiver model)"),hCe.forEach(t),hTo=i(L),Q1=n(L,"LI",{});var pCe=s(Q1);joe=n(pCe,"STRONG",{});var Pqr=s(joe);pTo=r(Pqr,"qdqbert"),Pqr.forEach(t),_To=r(pCe," \u2014 "),M$=n(pCe,"A",{href:!0});var $qr=s(M$);uTo=r($qr,"QDQBertForSequenceClassification"),$qr.forEach(t),bTo=r(pCe," (QDQBert model)"),pCe.forEach(t),vTo=i(L),H1=n(L,"LI",{});var _Ce=s(H1);Noe=n(_Ce,"STRONG",{});var Iqr=s(Noe);TTo=r(Iqr,"reformer"),Iqr.forEach(t),FTo=r(_Ce," \u2014 "),E$=n(_Ce,"A",{href:!0});var jqr=s(E$);CTo=r(jqr,"ReformerForSequenceClassification"),jqr.forEach(t),MTo=r(_Ce," (Reformer model)"),_Ce.forEach(t),ETo=i(L),U1=n(L,"LI",{});var uCe=s(U1);Doe=n(uCe,"STRONG",{});var Nqr=s(Doe);yTo=r(Nqr,"rembert"),Nqr.forEach(t),wTo=r(uCe," \u2014 "),y$=n(uCe,"A",{href:!0});var Dqr=s(y$);ATo=r(Dqr,"RemBertForSequenceClassification"),Dqr.forEach(t),LTo=r(uCe," (RemBERT model)"),uCe.forEach(t),BTo=i(L),J1=n(L,"LI",{});var bCe=s(J1);qoe=n(bCe,"STRONG",{});var qqr=s(qoe);kTo=r(qqr,"roberta"),qqr.forEach(t),xTo=r(bCe," \u2014 "),w$=n(bCe,"A",{href:!0});var Gqr=s(w$);RTo=r(Gqr,"RobertaForSequenceClassification"),Gqr.forEach(t),STo=r(bCe," (RoBERTa model)"),bCe.forEach(t),PTo=i(L),Y1=n(L,"LI",{});var vCe=s(Y1);Goe=n(vCe,"STRONG",{});var Oqr=s(Goe);$To=r(Oqr,"roformer"),Oqr.forEach(t),ITo=r(vCe," \u2014 "),A$=n(vCe,"A",{href:!0});var Xqr=s(A$);jTo=r(Xqr,"RoFormerForSequenceClassification"),Xqr.forEach(t),NTo=r(vCe," (RoFormer model)"),vCe.forEach(t),DTo=i(L),K1=n(L,"LI",{});var TCe=s(K1);Ooe=n(TCe,"STRONG",{});var zqr=s(Ooe);qTo=r(zqr,"squeezebert"),zqr.forEach(t),GTo=r(TCe," \u2014 "),L$=n(TCe,"A",{href:!0});var Vqr=s(L$);OTo=r(Vqr,"SqueezeBertForSequenceClassification"),Vqr.forEach(t),XTo=r(TCe," (SqueezeBERT model)"),TCe.forEach(t),zTo=i(L),Z1=n(L,"LI",{});var FCe=s(Z1);Xoe=n(FCe,"STRONG",{});var Wqr=s(Xoe);VTo=r(Wqr,"tapas"),Wqr.forEach(t),WTo=r(FCe," \u2014 "),B$=n(FCe,"A",{href:!0});var Qqr=s(B$);QTo=r(Qqr,"TapasForSequenceClassification"),Qqr.forEach(t),HTo=r(FCe," (TAPAS model)"),FCe.forEach(t),UTo=i(L),eb=n(L,"LI",{});var CCe=s(eb);zoe=n(CCe,"STRONG",{});var Hqr=s(zoe);JTo=r(Hqr,"transfo-xl"),Hqr.forEach(t),YTo=r(CCe," \u2014 "),k$=n(CCe,"A",{href:!0});var Uqr=s(k$);KTo=r(Uqr,"TransfoXLForSequenceClassification"),Uqr.forEach(t),ZTo=r(CCe," (Transformer-XL model)"),CCe.forEach(t),e7o=i(L),ob=n(L,"LI",{});var MCe=s(ob);Voe=n(MCe,"STRONG",{});var Jqr=s(Voe);o7o=r(Jqr,"xlm"),Jqr.forEach(t),r7o=r(MCe," \u2014 "),x$=n(MCe,"A",{href:!0});var Yqr=s(x$);t7o=r(Yqr,"XLMForSequenceClassification"),Yqr.forEach(t),a7o=r(MCe," (XLM model)"),MCe.forEach(t),n7o=i(L),rb=n(L,"LI",{});var ECe=s(rb);Woe=n(ECe,"STRONG",{});var Kqr=s(Woe);s7o=r(Kqr,"xlm-roberta"),Kqr.forEach(t),l7o=r(ECe," \u2014 "),R$=n(ECe,"A",{href:!0});var Zqr=s(R$);i7o=r(Zqr,"XLMRobertaForSequenceClassification"),Zqr.forEach(t),d7o=r(ECe," (XLM-RoBERTa model)"),ECe.forEach(t),c7o=i(L),tb=n(L,"LI",{});var yCe=s(tb);Qoe=n(yCe,"STRONG",{});var eGr=s(Qoe);f7o=r(eGr,"xlm-roberta-xl"),eGr.forEach(t),m7o=r(yCe," \u2014 "),S$=n(yCe,"A",{href:!0});var oGr=s(S$);g7o=r(oGr,"XLMRobertaXLForSequenceClassification"),oGr.forEach(t),h7o=r(yCe," (XLM-RoBERTa-XL model)"),yCe.forEach(t),p7o=i(L),ab=n(L,"LI",{});var wCe=s(ab);Hoe=n(wCe,"STRONG",{});var rGr=s(Hoe);_7o=r(rGr,"xlnet"),rGr.forEach(t),u7o=r(wCe," \u2014 "),P$=n(wCe,"A",{href:!0});var tGr=s(P$);b7o=r(tGr,"XLNetForSequenceClassification"),tGr.forEach(t),v7o=r(wCe," (XLNet model)"),wCe.forEach(t),T7o=i(L),nb=n(L,"LI",{});var ACe=s(nb);Uoe=n(ACe,"STRONG",{});var aGr=s(Uoe);F7o=r(aGr,"yoso"),aGr.forEach(t),C7o=r(ACe," \u2014 "),$$=n(ACe,"A",{href:!0});var nGr=s($$);M7o=r(nGr,"YosoForSequenceClassification"),nGr.forEach(t),E7o=r(ACe," (YOSO model)"),ACe.forEach(t),L.forEach(t),y7o=i(Nt),sb=n(Nt,"P",{});var LCe=s(sb);w7o=r(LCe,"The model is set in evaluation mode by default using "),Joe=n(LCe,"CODE",{});var sGr=s(Joe);A7o=r(sGr,"model.eval()"),sGr.forEach(t),L7o=r(LCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yoe=n(LCe,"CODE",{});var lGr=s(Yoe);B7o=r(lGr,"model.train()"),lGr.forEach(t),LCe.forEach(t),k7o=i(Nt),Koe=n(Nt,"P",{});var iGr=s(Koe);x7o=r(iGr,"Examples:"),iGr.forEach(t),R7o=i(Nt),m(_M.$$.fragment,Nt),Nt.forEach(t),Hs.forEach(t),aLe=i(d),ad=n(d,"H2",{class:!0});var fBe=s(ad);lb=n(fBe,"A",{id:!0,class:!0,href:!0});var dGr=s(lb);Zoe=n(dGr,"SPAN",{});var cGr=s(Zoe);m(uM.$$.fragment,cGr),cGr.forEach(t),dGr.forEach(t),S7o=i(fBe),ere=n(fBe,"SPAN",{});var fGr=s(ere);P7o=r(fGr,"AutoModelForMultipleChoice"),fGr.forEach(t),fBe.forEach(t),nLe=i(d),Yo=n(d,"DIV",{class:!0});var Js=s(Yo);m(bM.$$.fragment,Js),$7o=i(Js),nd=n(Js,"P",{});var WX=s(nd);I7o=r(WX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ore=n(WX,"CODE",{});var mGr=s(ore);j7o=r(mGr,"from_pretrained()"),mGr.forEach(t),N7o=r(WX,"class method or the "),rre=n(WX,"CODE",{});var gGr=s(rre);D7o=r(gGr,"from_config()"),gGr.forEach(t),q7o=r(WX,`class
method.`),WX.forEach(t),G7o=i(Js),vM=n(Js,"P",{});var mBe=s(vM);O7o=r(mBe,"This class cannot be instantiated directly using "),tre=n(mBe,"CODE",{});var hGr=s(tre);X7o=r(hGr,"__init__()"),hGr.forEach(t),z7o=r(mBe," (throws an error)."),mBe.forEach(t),V7o=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(TM.$$.fragment,Ys),W7o=i(Ys),are=n(Ys,"P",{});var pGr=s(are);Q7o=r(pGr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pGr.forEach(t),H7o=i(Ys),sd=n(Ys,"P",{});var QX=s(sd);U7o=r(QX,`Note:
Loading a model from its configuration file does `),nre=n(QX,"STRONG",{});var _Gr=s(nre);J7o=r(_Gr,"not"),_Gr.forEach(t),Y7o=r(QX,` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=n(QX,"CODE",{});var uGr=s(sre);K7o=r(uGr,"from_pretrained()"),uGr.forEach(t),Z7o=r(QX,"to load the model weights."),QX.forEach(t),e8o=i(Ys),lre=n(Ys,"P",{});var bGr=s(lre);o8o=r(bGr,"Examples:"),bGr.forEach(t),r8o=i(Ys),m(FM.$$.fragment,Ys),Ys.forEach(t),t8o=i(Js),Ie=n(Js,"DIV",{class:!0});var Dt=s(Ie);m(CM.$$.fragment,Dt),a8o=i(Dt),ire=n(Dt,"P",{});var vGr=s(ire);n8o=r(vGr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vGr.forEach(t),s8o=i(Dt),Va=n(Dt,"P",{});var lC=s(Va);l8o=r(lC,"The model class to instantiate is selected based on the "),dre=n(lC,"CODE",{});var TGr=s(dre);i8o=r(TGr,"model_type"),TGr.forEach(t),d8o=r(lC,` property of the config object (either
passed as an argument or loaded from `),cre=n(lC,"CODE",{});var FGr=s(cre);c8o=r(FGr,"pretrained_model_name_or_path"),FGr.forEach(t),f8o=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fre=n(lC,"CODE",{});var CGr=s(fre);m8o=r(CGr,"pretrained_model_name_or_path"),CGr.forEach(t),g8o=r(lC,":"),lC.forEach(t),h8o=i(Dt),G=n(Dt,"UL",{});var O=s(G);ib=n(O,"LI",{});var BCe=s(ib);mre=n(BCe,"STRONG",{});var MGr=s(mre);p8o=r(MGr,"albert"),MGr.forEach(t),_8o=r(BCe," \u2014 "),I$=n(BCe,"A",{href:!0});var EGr=s(I$);u8o=r(EGr,"AlbertForMultipleChoice"),EGr.forEach(t),b8o=r(BCe," (ALBERT model)"),BCe.forEach(t),v8o=i(O),db=n(O,"LI",{});var kCe=s(db);gre=n(kCe,"STRONG",{});var yGr=s(gre);T8o=r(yGr,"bert"),yGr.forEach(t),F8o=r(kCe," \u2014 "),j$=n(kCe,"A",{href:!0});var wGr=s(j$);C8o=r(wGr,"BertForMultipleChoice"),wGr.forEach(t),M8o=r(kCe," (BERT model)"),kCe.forEach(t),E8o=i(O),cb=n(O,"LI",{});var xCe=s(cb);hre=n(xCe,"STRONG",{});var AGr=s(hre);y8o=r(AGr,"big_bird"),AGr.forEach(t),w8o=r(xCe," \u2014 "),N$=n(xCe,"A",{href:!0});var LGr=s(N$);A8o=r(LGr,"BigBirdForMultipleChoice"),LGr.forEach(t),L8o=r(xCe," (BigBird model)"),xCe.forEach(t),B8o=i(O),fb=n(O,"LI",{});var RCe=s(fb);pre=n(RCe,"STRONG",{});var BGr=s(pre);k8o=r(BGr,"camembert"),BGr.forEach(t),x8o=r(RCe," \u2014 "),D$=n(RCe,"A",{href:!0});var kGr=s(D$);R8o=r(kGr,"CamembertForMultipleChoice"),kGr.forEach(t),S8o=r(RCe," (CamemBERT model)"),RCe.forEach(t),P8o=i(O),mb=n(O,"LI",{});var SCe=s(mb);_re=n(SCe,"STRONG",{});var xGr=s(_re);$8o=r(xGr,"canine"),xGr.forEach(t),I8o=r(SCe," \u2014 "),q$=n(SCe,"A",{href:!0});var RGr=s(q$);j8o=r(RGr,"CanineForMultipleChoice"),RGr.forEach(t),N8o=r(SCe," (Canine model)"),SCe.forEach(t),D8o=i(O),gb=n(O,"LI",{});var PCe=s(gb);ure=n(PCe,"STRONG",{});var SGr=s(ure);q8o=r(SGr,"convbert"),SGr.forEach(t),G8o=r(PCe," \u2014 "),G$=n(PCe,"A",{href:!0});var PGr=s(G$);O8o=r(PGr,"ConvBertForMultipleChoice"),PGr.forEach(t),X8o=r(PCe," (ConvBERT model)"),PCe.forEach(t),z8o=i(O),hb=n(O,"LI",{});var $Ce=s(hb);bre=n($Ce,"STRONG",{});var $Gr=s(bre);V8o=r($Gr,"distilbert"),$Gr.forEach(t),W8o=r($Ce," \u2014 "),O$=n($Ce,"A",{href:!0});var IGr=s(O$);Q8o=r(IGr,"DistilBertForMultipleChoice"),IGr.forEach(t),H8o=r($Ce," (DistilBERT model)"),$Ce.forEach(t),U8o=i(O),pb=n(O,"LI",{});var ICe=s(pb);vre=n(ICe,"STRONG",{});var jGr=s(vre);J8o=r(jGr,"electra"),jGr.forEach(t),Y8o=r(ICe," \u2014 "),X$=n(ICe,"A",{href:!0});var NGr=s(X$);K8o=r(NGr,"ElectraForMultipleChoice"),NGr.forEach(t),Z8o=r(ICe," (ELECTRA model)"),ICe.forEach(t),eFo=i(O),_b=n(O,"LI",{});var jCe=s(_b);Tre=n(jCe,"STRONG",{});var DGr=s(Tre);oFo=r(DGr,"flaubert"),DGr.forEach(t),rFo=r(jCe," \u2014 "),z$=n(jCe,"A",{href:!0});var qGr=s(z$);tFo=r(qGr,"FlaubertForMultipleChoice"),qGr.forEach(t),aFo=r(jCe," (FlauBERT model)"),jCe.forEach(t),nFo=i(O),ub=n(O,"LI",{});var NCe=s(ub);Fre=n(NCe,"STRONG",{});var GGr=s(Fre);sFo=r(GGr,"fnet"),GGr.forEach(t),lFo=r(NCe," \u2014 "),V$=n(NCe,"A",{href:!0});var OGr=s(V$);iFo=r(OGr,"FNetForMultipleChoice"),OGr.forEach(t),dFo=r(NCe," (FNet model)"),NCe.forEach(t),cFo=i(O),bb=n(O,"LI",{});var DCe=s(bb);Cre=n(DCe,"STRONG",{});var XGr=s(Cre);fFo=r(XGr,"funnel"),XGr.forEach(t),mFo=r(DCe," \u2014 "),W$=n(DCe,"A",{href:!0});var zGr=s(W$);gFo=r(zGr,"FunnelForMultipleChoice"),zGr.forEach(t),hFo=r(DCe," (Funnel Transformer model)"),DCe.forEach(t),pFo=i(O),vb=n(O,"LI",{});var qCe=s(vb);Mre=n(qCe,"STRONG",{});var VGr=s(Mre);_Fo=r(VGr,"ibert"),VGr.forEach(t),uFo=r(qCe," \u2014 "),Q$=n(qCe,"A",{href:!0});var WGr=s(Q$);bFo=r(WGr,"IBertForMultipleChoice"),WGr.forEach(t),vFo=r(qCe," (I-BERT model)"),qCe.forEach(t),TFo=i(O),Tb=n(O,"LI",{});var GCe=s(Tb);Ere=n(GCe,"STRONG",{});var QGr=s(Ere);FFo=r(QGr,"longformer"),QGr.forEach(t),CFo=r(GCe," \u2014 "),H$=n(GCe,"A",{href:!0});var HGr=s(H$);MFo=r(HGr,"LongformerForMultipleChoice"),HGr.forEach(t),EFo=r(GCe," (Longformer model)"),GCe.forEach(t),yFo=i(O),Fb=n(O,"LI",{});var OCe=s(Fb);yre=n(OCe,"STRONG",{});var UGr=s(yre);wFo=r(UGr,"megatron-bert"),UGr.forEach(t),AFo=r(OCe," \u2014 "),U$=n(OCe,"A",{href:!0});var JGr=s(U$);LFo=r(JGr,"MegatronBertForMultipleChoice"),JGr.forEach(t),BFo=r(OCe," (MegatronBert model)"),OCe.forEach(t),kFo=i(O),Cb=n(O,"LI",{});var XCe=s(Cb);wre=n(XCe,"STRONG",{});var YGr=s(wre);xFo=r(YGr,"mobilebert"),YGr.forEach(t),RFo=r(XCe," \u2014 "),J$=n(XCe,"A",{href:!0});var KGr=s(J$);SFo=r(KGr,"MobileBertForMultipleChoice"),KGr.forEach(t),PFo=r(XCe," (MobileBERT model)"),XCe.forEach(t),$Fo=i(O),Mb=n(O,"LI",{});var zCe=s(Mb);Are=n(zCe,"STRONG",{});var ZGr=s(Are);IFo=r(ZGr,"mpnet"),ZGr.forEach(t),jFo=r(zCe," \u2014 "),Y$=n(zCe,"A",{href:!0});var eOr=s(Y$);NFo=r(eOr,"MPNetForMultipleChoice"),eOr.forEach(t),DFo=r(zCe," (MPNet model)"),zCe.forEach(t),qFo=i(O),Eb=n(O,"LI",{});var VCe=s(Eb);Lre=n(VCe,"STRONG",{});var oOr=s(Lre);GFo=r(oOr,"nystromformer"),oOr.forEach(t),OFo=r(VCe," \u2014 "),K$=n(VCe,"A",{href:!0});var rOr=s(K$);XFo=r(rOr,"NystromformerForMultipleChoice"),rOr.forEach(t),zFo=r(VCe," (Nystromformer model)"),VCe.forEach(t),VFo=i(O),yb=n(O,"LI",{});var WCe=s(yb);Bre=n(WCe,"STRONG",{});var tOr=s(Bre);WFo=r(tOr,"qdqbert"),tOr.forEach(t),QFo=r(WCe," \u2014 "),Z$=n(WCe,"A",{href:!0});var aOr=s(Z$);HFo=r(aOr,"QDQBertForMultipleChoice"),aOr.forEach(t),UFo=r(WCe," (QDQBert model)"),WCe.forEach(t),JFo=i(O),wb=n(O,"LI",{});var QCe=s(wb);kre=n(QCe,"STRONG",{});var nOr=s(kre);YFo=r(nOr,"rembert"),nOr.forEach(t),KFo=r(QCe," \u2014 "),eI=n(QCe,"A",{href:!0});var sOr=s(eI);ZFo=r(sOr,"RemBertForMultipleChoice"),sOr.forEach(t),eCo=r(QCe," (RemBERT model)"),QCe.forEach(t),oCo=i(O),Ab=n(O,"LI",{});var HCe=s(Ab);xre=n(HCe,"STRONG",{});var lOr=s(xre);rCo=r(lOr,"roberta"),lOr.forEach(t),tCo=r(HCe," \u2014 "),oI=n(HCe,"A",{href:!0});var iOr=s(oI);aCo=r(iOr,"RobertaForMultipleChoice"),iOr.forEach(t),nCo=r(HCe," (RoBERTa model)"),HCe.forEach(t),sCo=i(O),Lb=n(O,"LI",{});var UCe=s(Lb);Rre=n(UCe,"STRONG",{});var dOr=s(Rre);lCo=r(dOr,"roformer"),dOr.forEach(t),iCo=r(UCe," \u2014 "),rI=n(UCe,"A",{href:!0});var cOr=s(rI);dCo=r(cOr,"RoFormerForMultipleChoice"),cOr.forEach(t),cCo=r(UCe," (RoFormer model)"),UCe.forEach(t),fCo=i(O),Bb=n(O,"LI",{});var JCe=s(Bb);Sre=n(JCe,"STRONG",{});var fOr=s(Sre);mCo=r(fOr,"squeezebert"),fOr.forEach(t),gCo=r(JCe," \u2014 "),tI=n(JCe,"A",{href:!0});var mOr=s(tI);hCo=r(mOr,"SqueezeBertForMultipleChoice"),mOr.forEach(t),pCo=r(JCe," (SqueezeBERT model)"),JCe.forEach(t),_Co=i(O),kb=n(O,"LI",{});var YCe=s(kb);Pre=n(YCe,"STRONG",{});var gOr=s(Pre);uCo=r(gOr,"xlm"),gOr.forEach(t),bCo=r(YCe," \u2014 "),aI=n(YCe,"A",{href:!0});var hOr=s(aI);vCo=r(hOr,"XLMForMultipleChoice"),hOr.forEach(t),TCo=r(YCe," (XLM model)"),YCe.forEach(t),FCo=i(O),xb=n(O,"LI",{});var KCe=s(xb);$re=n(KCe,"STRONG",{});var pOr=s($re);CCo=r(pOr,"xlm-roberta"),pOr.forEach(t),MCo=r(KCe," \u2014 "),nI=n(KCe,"A",{href:!0});var _Or=s(nI);ECo=r(_Or,"XLMRobertaForMultipleChoice"),_Or.forEach(t),yCo=r(KCe," (XLM-RoBERTa model)"),KCe.forEach(t),wCo=i(O),Rb=n(O,"LI",{});var ZCe=s(Rb);Ire=n(ZCe,"STRONG",{});var uOr=s(Ire);ACo=r(uOr,"xlm-roberta-xl"),uOr.forEach(t),LCo=r(ZCe," \u2014 "),sI=n(ZCe,"A",{href:!0});var bOr=s(sI);BCo=r(bOr,"XLMRobertaXLForMultipleChoice"),bOr.forEach(t),kCo=r(ZCe," (XLM-RoBERTa-XL model)"),ZCe.forEach(t),xCo=i(O),Sb=n(O,"LI",{});var e4e=s(Sb);jre=n(e4e,"STRONG",{});var vOr=s(jre);RCo=r(vOr,"xlnet"),vOr.forEach(t),SCo=r(e4e," \u2014 "),lI=n(e4e,"A",{href:!0});var TOr=s(lI);PCo=r(TOr,"XLNetForMultipleChoice"),TOr.forEach(t),$Co=r(e4e," (XLNet model)"),e4e.forEach(t),ICo=i(O),Pb=n(O,"LI",{});var o4e=s(Pb);Nre=n(o4e,"STRONG",{});var FOr=s(Nre);jCo=r(FOr,"yoso"),FOr.forEach(t),NCo=r(o4e," \u2014 "),iI=n(o4e,"A",{href:!0});var COr=s(iI);DCo=r(COr,"YosoForMultipleChoice"),COr.forEach(t),qCo=r(o4e," (YOSO model)"),o4e.forEach(t),O.forEach(t),GCo=i(Dt),$b=n(Dt,"P",{});var r4e=s($b);OCo=r(r4e,"The model is set in evaluation mode by default using "),Dre=n(r4e,"CODE",{});var MOr=s(Dre);XCo=r(MOr,"model.eval()"),MOr.forEach(t),zCo=r(r4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qre=n(r4e,"CODE",{});var EOr=s(qre);VCo=r(EOr,"model.train()"),EOr.forEach(t),r4e.forEach(t),WCo=i(Dt),Gre=n(Dt,"P",{});var yOr=s(Gre);QCo=r(yOr,"Examples:"),yOr.forEach(t),HCo=i(Dt),m(MM.$$.fragment,Dt),Dt.forEach(t),Js.forEach(t),sLe=i(d),ld=n(d,"H2",{class:!0});var gBe=s(ld);Ib=n(gBe,"A",{id:!0,class:!0,href:!0});var wOr=s(Ib);Ore=n(wOr,"SPAN",{});var AOr=s(Ore);m(EM.$$.fragment,AOr),AOr.forEach(t),wOr.forEach(t),UCo=i(gBe),Xre=n(gBe,"SPAN",{});var LOr=s(Xre);JCo=r(LOr,"AutoModelForNextSentencePrediction"),LOr.forEach(t),gBe.forEach(t),lLe=i(d),Ko=n(d,"DIV",{class:!0});var Ks=s(Ko);m(yM.$$.fragment,Ks),YCo=i(Ks),id=n(Ks,"P",{});var HX=s(id);KCo=r(HX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zre=n(HX,"CODE",{});var BOr=s(zre);ZCo=r(BOr,"from_pretrained()"),BOr.forEach(t),e4o=r(HX,"class method or the "),Vre=n(HX,"CODE",{});var kOr=s(Vre);o4o=r(kOr,"from_config()"),kOr.forEach(t),r4o=r(HX,`class
method.`),HX.forEach(t),t4o=i(Ks),wM=n(Ks,"P",{});var hBe=s(wM);a4o=r(hBe,"This class cannot be instantiated directly using "),Wre=n(hBe,"CODE",{});var xOr=s(Wre);n4o=r(xOr,"__init__()"),xOr.forEach(t),s4o=r(hBe," (throws an error)."),hBe.forEach(t),l4o=i(Ks),Vr=n(Ks,"DIV",{class:!0});var Zs=s(Vr);m(AM.$$.fragment,Zs),i4o=i(Zs),Qre=n(Zs,"P",{});var ROr=s(Qre);d4o=r(ROr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ROr.forEach(t),c4o=i(Zs),dd=n(Zs,"P",{});var UX=s(dd);f4o=r(UX,`Note:
Loading a model from its configuration file does `),Hre=n(UX,"STRONG",{});var SOr=s(Hre);m4o=r(SOr,"not"),SOr.forEach(t),g4o=r(UX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ure=n(UX,"CODE",{});var POr=s(Ure);h4o=r(POr,"from_pretrained()"),POr.forEach(t),p4o=r(UX,"to load the model weights."),UX.forEach(t),_4o=i(Zs),Jre=n(Zs,"P",{});var $Or=s(Jre);u4o=r($Or,"Examples:"),$Or.forEach(t),b4o=i(Zs),m(LM.$$.fragment,Zs),Zs.forEach(t),v4o=i(Ks),je=n(Ks,"DIV",{class:!0});var qt=s(je);m(BM.$$.fragment,qt),T4o=i(qt),Yre=n(qt,"P",{});var IOr=s(Yre);F4o=r(IOr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IOr.forEach(t),C4o=i(qt),Wa=n(qt,"P",{});var iC=s(Wa);M4o=r(iC,"The model class to instantiate is selected based on the "),Kre=n(iC,"CODE",{});var jOr=s(Kre);E4o=r(jOr,"model_type"),jOr.forEach(t),y4o=r(iC,` property of the config object (either
passed as an argument or loaded from `),Zre=n(iC,"CODE",{});var NOr=s(Zre);w4o=r(NOr,"pretrained_model_name_or_path"),NOr.forEach(t),A4o=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ete=n(iC,"CODE",{});var DOr=s(ete);L4o=r(DOr,"pretrained_model_name_or_path"),DOr.forEach(t),B4o=r(iC,":"),iC.forEach(t),k4o=i(qt),na=n(qt,"UL",{});var el=s(na);jb=n(el,"LI",{});var t4e=s(jb);ote=n(t4e,"STRONG",{});var qOr=s(ote);x4o=r(qOr,"bert"),qOr.forEach(t),R4o=r(t4e," \u2014 "),dI=n(t4e,"A",{href:!0});var GOr=s(dI);S4o=r(GOr,"BertForNextSentencePrediction"),GOr.forEach(t),P4o=r(t4e," (BERT model)"),t4e.forEach(t),$4o=i(el),Nb=n(el,"LI",{});var a4e=s(Nb);rte=n(a4e,"STRONG",{});var OOr=s(rte);I4o=r(OOr,"fnet"),OOr.forEach(t),j4o=r(a4e," \u2014 "),cI=n(a4e,"A",{href:!0});var XOr=s(cI);N4o=r(XOr,"FNetForNextSentencePrediction"),XOr.forEach(t),D4o=r(a4e," (FNet model)"),a4e.forEach(t),q4o=i(el),Db=n(el,"LI",{});var n4e=s(Db);tte=n(n4e,"STRONG",{});var zOr=s(tte);G4o=r(zOr,"megatron-bert"),zOr.forEach(t),O4o=r(n4e," \u2014 "),fI=n(n4e,"A",{href:!0});var VOr=s(fI);X4o=r(VOr,"MegatronBertForNextSentencePrediction"),VOr.forEach(t),z4o=r(n4e," (MegatronBert model)"),n4e.forEach(t),V4o=i(el),qb=n(el,"LI",{});var s4e=s(qb);ate=n(s4e,"STRONG",{});var WOr=s(ate);W4o=r(WOr,"mobilebert"),WOr.forEach(t),Q4o=r(s4e," \u2014 "),mI=n(s4e,"A",{href:!0});var QOr=s(mI);H4o=r(QOr,"MobileBertForNextSentencePrediction"),QOr.forEach(t),U4o=r(s4e," (MobileBERT model)"),s4e.forEach(t),J4o=i(el),Gb=n(el,"LI",{});var l4e=s(Gb);nte=n(l4e,"STRONG",{});var HOr=s(nte);Y4o=r(HOr,"qdqbert"),HOr.forEach(t),K4o=r(l4e," \u2014 "),gI=n(l4e,"A",{href:!0});var UOr=s(gI);Z4o=r(UOr,"QDQBertForNextSentencePrediction"),UOr.forEach(t),eMo=r(l4e," (QDQBert model)"),l4e.forEach(t),el.forEach(t),oMo=i(qt),Ob=n(qt,"P",{});var i4e=s(Ob);rMo=r(i4e,"The model is set in evaluation mode by default using "),ste=n(i4e,"CODE",{});var JOr=s(ste);tMo=r(JOr,"model.eval()"),JOr.forEach(t),aMo=r(i4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lte=n(i4e,"CODE",{});var YOr=s(lte);nMo=r(YOr,"model.train()"),YOr.forEach(t),i4e.forEach(t),sMo=i(qt),ite=n(qt,"P",{});var KOr=s(ite);lMo=r(KOr,"Examples:"),KOr.forEach(t),iMo=i(qt),m(kM.$$.fragment,qt),qt.forEach(t),Ks.forEach(t),iLe=i(d),cd=n(d,"H2",{class:!0});var pBe=s(cd);Xb=n(pBe,"A",{id:!0,class:!0,href:!0});var ZOr=s(Xb);dte=n(ZOr,"SPAN",{});var eXr=s(dte);m(xM.$$.fragment,eXr),eXr.forEach(t),ZOr.forEach(t),dMo=i(pBe),cte=n(pBe,"SPAN",{});var oXr=s(cte);cMo=r(oXr,"AutoModelForTokenClassification"),oXr.forEach(t),pBe.forEach(t),dLe=i(d),Zo=n(d,"DIV",{class:!0});var ol=s(Zo);m(RM.$$.fragment,ol),fMo=i(ol),fd=n(ol,"P",{});var JX=s(fd);mMo=r(JX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fte=n(JX,"CODE",{});var rXr=s(fte);gMo=r(rXr,"from_pretrained()"),rXr.forEach(t),hMo=r(JX,"class method or the "),mte=n(JX,"CODE",{});var tXr=s(mte);pMo=r(tXr,"from_config()"),tXr.forEach(t),_Mo=r(JX,`class
method.`),JX.forEach(t),uMo=i(ol),SM=n(ol,"P",{});var _Be=s(SM);bMo=r(_Be,"This class cannot be instantiated directly using "),gte=n(_Be,"CODE",{});var aXr=s(gte);vMo=r(aXr,"__init__()"),aXr.forEach(t),TMo=r(_Be," (throws an error)."),_Be.forEach(t),FMo=i(ol),Wr=n(ol,"DIV",{class:!0});var rl=s(Wr);m(PM.$$.fragment,rl),CMo=i(rl),hte=n(rl,"P",{});var nXr=s(hte);MMo=r(nXr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nXr.forEach(t),EMo=i(rl),md=n(rl,"P",{});var YX=s(md);yMo=r(YX,`Note:
Loading a model from its configuration file does `),pte=n(YX,"STRONG",{});var sXr=s(pte);wMo=r(sXr,"not"),sXr.forEach(t),AMo=r(YX,` load the model weights. It only affects the
model\u2019s configuration. Use `),_te=n(YX,"CODE",{});var lXr=s(_te);LMo=r(lXr,"from_pretrained()"),lXr.forEach(t),BMo=r(YX,"to load the model weights."),YX.forEach(t),kMo=i(rl),ute=n(rl,"P",{});var iXr=s(ute);xMo=r(iXr,"Examples:"),iXr.forEach(t),RMo=i(rl),m($M.$$.fragment,rl),rl.forEach(t),SMo=i(ol),Ne=n(ol,"DIV",{class:!0});var Gt=s(Ne);m(IM.$$.fragment,Gt),PMo=i(Gt),bte=n(Gt,"P",{});var dXr=s(bte);$Mo=r(dXr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dXr.forEach(t),IMo=i(Gt),Qa=n(Gt,"P",{});var dC=s(Qa);jMo=r(dC,"The model class to instantiate is selected based on the "),vte=n(dC,"CODE",{});var cXr=s(vte);NMo=r(cXr,"model_type"),cXr.forEach(t),DMo=r(dC,` property of the config object (either
passed as an argument or loaded from `),Tte=n(dC,"CODE",{});var fXr=s(Tte);qMo=r(fXr,"pretrained_model_name_or_path"),fXr.forEach(t),GMo=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fte=n(dC,"CODE",{});var mXr=s(Fte);OMo=r(mXr,"pretrained_model_name_or_path"),mXr.forEach(t),XMo=r(dC,":"),dC.forEach(t),zMo=i(Gt),N=n(Gt,"UL",{});var q=s(N);zb=n(q,"LI",{});var d4e=s(zb);Cte=n(d4e,"STRONG",{});var gXr=s(Cte);VMo=r(gXr,"albert"),gXr.forEach(t),WMo=r(d4e," \u2014 "),hI=n(d4e,"A",{href:!0});var hXr=s(hI);QMo=r(hXr,"AlbertForTokenClassification"),hXr.forEach(t),HMo=r(d4e," (ALBERT model)"),d4e.forEach(t),UMo=i(q),Vb=n(q,"LI",{});var c4e=s(Vb);Mte=n(c4e,"STRONG",{});var pXr=s(Mte);JMo=r(pXr,"bert"),pXr.forEach(t),YMo=r(c4e," \u2014 "),pI=n(c4e,"A",{href:!0});var _Xr=s(pI);KMo=r(_Xr,"BertForTokenClassification"),_Xr.forEach(t),ZMo=r(c4e," (BERT model)"),c4e.forEach(t),eEo=i(q),Wb=n(q,"LI",{});var f4e=s(Wb);Ete=n(f4e,"STRONG",{});var uXr=s(Ete);oEo=r(uXr,"big_bird"),uXr.forEach(t),rEo=r(f4e," \u2014 "),_I=n(f4e,"A",{href:!0});var bXr=s(_I);tEo=r(bXr,"BigBirdForTokenClassification"),bXr.forEach(t),aEo=r(f4e," (BigBird model)"),f4e.forEach(t),nEo=i(q),Qb=n(q,"LI",{});var m4e=s(Qb);yte=n(m4e,"STRONG",{});var vXr=s(yte);sEo=r(vXr,"camembert"),vXr.forEach(t),lEo=r(m4e," \u2014 "),uI=n(m4e,"A",{href:!0});var TXr=s(uI);iEo=r(TXr,"CamembertForTokenClassification"),TXr.forEach(t),dEo=r(m4e," (CamemBERT model)"),m4e.forEach(t),cEo=i(q),Hb=n(q,"LI",{});var g4e=s(Hb);wte=n(g4e,"STRONG",{});var FXr=s(wte);fEo=r(FXr,"canine"),FXr.forEach(t),mEo=r(g4e," \u2014 "),bI=n(g4e,"A",{href:!0});var CXr=s(bI);gEo=r(CXr,"CanineForTokenClassification"),CXr.forEach(t),hEo=r(g4e," (Canine model)"),g4e.forEach(t),pEo=i(q),Ub=n(q,"LI",{});var h4e=s(Ub);Ate=n(h4e,"STRONG",{});var MXr=s(Ate);_Eo=r(MXr,"convbert"),MXr.forEach(t),uEo=r(h4e," \u2014 "),vI=n(h4e,"A",{href:!0});var EXr=s(vI);bEo=r(EXr,"ConvBertForTokenClassification"),EXr.forEach(t),vEo=r(h4e," (ConvBERT model)"),h4e.forEach(t),TEo=i(q),Jb=n(q,"LI",{});var p4e=s(Jb);Lte=n(p4e,"STRONG",{});var yXr=s(Lte);FEo=r(yXr,"deberta"),yXr.forEach(t),CEo=r(p4e," \u2014 "),TI=n(p4e,"A",{href:!0});var wXr=s(TI);MEo=r(wXr,"DebertaForTokenClassification"),wXr.forEach(t),EEo=r(p4e," (DeBERTa model)"),p4e.forEach(t),yEo=i(q),Yb=n(q,"LI",{});var _4e=s(Yb);Bte=n(_4e,"STRONG",{});var AXr=s(Bte);wEo=r(AXr,"deberta-v2"),AXr.forEach(t),AEo=r(_4e," \u2014 "),FI=n(_4e,"A",{href:!0});var LXr=s(FI);LEo=r(LXr,"DebertaV2ForTokenClassification"),LXr.forEach(t),BEo=r(_4e," (DeBERTa-v2 model)"),_4e.forEach(t),kEo=i(q),Kb=n(q,"LI",{});var u4e=s(Kb);kte=n(u4e,"STRONG",{});var BXr=s(kte);xEo=r(BXr,"distilbert"),BXr.forEach(t),REo=r(u4e," \u2014 "),CI=n(u4e,"A",{href:!0});var kXr=s(CI);SEo=r(kXr,"DistilBertForTokenClassification"),kXr.forEach(t),PEo=r(u4e," (DistilBERT model)"),u4e.forEach(t),$Eo=i(q),Zb=n(q,"LI",{});var b4e=s(Zb);xte=n(b4e,"STRONG",{});var xXr=s(xte);IEo=r(xXr,"electra"),xXr.forEach(t),jEo=r(b4e," \u2014 "),MI=n(b4e,"A",{href:!0});var RXr=s(MI);NEo=r(RXr,"ElectraForTokenClassification"),RXr.forEach(t),DEo=r(b4e," (ELECTRA model)"),b4e.forEach(t),qEo=i(q),e5=n(q,"LI",{});var v4e=s(e5);Rte=n(v4e,"STRONG",{});var SXr=s(Rte);GEo=r(SXr,"flaubert"),SXr.forEach(t),OEo=r(v4e," \u2014 "),EI=n(v4e,"A",{href:!0});var PXr=s(EI);XEo=r(PXr,"FlaubertForTokenClassification"),PXr.forEach(t),zEo=r(v4e," (FlauBERT model)"),v4e.forEach(t),VEo=i(q),o5=n(q,"LI",{});var T4e=s(o5);Ste=n(T4e,"STRONG",{});var $Xr=s(Ste);WEo=r($Xr,"fnet"),$Xr.forEach(t),QEo=r(T4e," \u2014 "),yI=n(T4e,"A",{href:!0});var IXr=s(yI);HEo=r(IXr,"FNetForTokenClassification"),IXr.forEach(t),UEo=r(T4e," (FNet model)"),T4e.forEach(t),JEo=i(q),r5=n(q,"LI",{});var F4e=s(r5);Pte=n(F4e,"STRONG",{});var jXr=s(Pte);YEo=r(jXr,"funnel"),jXr.forEach(t),KEo=r(F4e," \u2014 "),wI=n(F4e,"A",{href:!0});var NXr=s(wI);ZEo=r(NXr,"FunnelForTokenClassification"),NXr.forEach(t),e3o=r(F4e," (Funnel Transformer model)"),F4e.forEach(t),o3o=i(q),t5=n(q,"LI",{});var C4e=s(t5);$te=n(C4e,"STRONG",{});var DXr=s($te);r3o=r(DXr,"gpt2"),DXr.forEach(t),t3o=r(C4e," \u2014 "),AI=n(C4e,"A",{href:!0});var qXr=s(AI);a3o=r(qXr,"GPT2ForTokenClassification"),qXr.forEach(t),n3o=r(C4e," (OpenAI GPT-2 model)"),C4e.forEach(t),s3o=i(q),a5=n(q,"LI",{});var M4e=s(a5);Ite=n(M4e,"STRONG",{});var GXr=s(Ite);l3o=r(GXr,"ibert"),GXr.forEach(t),i3o=r(M4e," \u2014 "),LI=n(M4e,"A",{href:!0});var OXr=s(LI);d3o=r(OXr,"IBertForTokenClassification"),OXr.forEach(t),c3o=r(M4e," (I-BERT model)"),M4e.forEach(t),f3o=i(q),n5=n(q,"LI",{});var E4e=s(n5);jte=n(E4e,"STRONG",{});var XXr=s(jte);m3o=r(XXr,"layoutlm"),XXr.forEach(t),g3o=r(E4e," \u2014 "),BI=n(E4e,"A",{href:!0});var zXr=s(BI);h3o=r(zXr,"LayoutLMForTokenClassification"),zXr.forEach(t),p3o=r(E4e," (LayoutLM model)"),E4e.forEach(t),_3o=i(q),s5=n(q,"LI",{});var y4e=s(s5);Nte=n(y4e,"STRONG",{});var VXr=s(Nte);u3o=r(VXr,"layoutlmv2"),VXr.forEach(t),b3o=r(y4e," \u2014 "),kI=n(y4e,"A",{href:!0});var WXr=s(kI);v3o=r(WXr,"LayoutLMv2ForTokenClassification"),WXr.forEach(t),T3o=r(y4e," (LayoutLMv2 model)"),y4e.forEach(t),F3o=i(q),l5=n(q,"LI",{});var w4e=s(l5);Dte=n(w4e,"STRONG",{});var QXr=s(Dte);C3o=r(QXr,"longformer"),QXr.forEach(t),M3o=r(w4e," \u2014 "),xI=n(w4e,"A",{href:!0});var HXr=s(xI);E3o=r(HXr,"LongformerForTokenClassification"),HXr.forEach(t),y3o=r(w4e," (Longformer model)"),w4e.forEach(t),w3o=i(q),i5=n(q,"LI",{});var A4e=s(i5);qte=n(A4e,"STRONG",{});var UXr=s(qte);A3o=r(UXr,"megatron-bert"),UXr.forEach(t),L3o=r(A4e," \u2014 "),RI=n(A4e,"A",{href:!0});var JXr=s(RI);B3o=r(JXr,"MegatronBertForTokenClassification"),JXr.forEach(t),k3o=r(A4e," (MegatronBert model)"),A4e.forEach(t),x3o=i(q),d5=n(q,"LI",{});var L4e=s(d5);Gte=n(L4e,"STRONG",{});var YXr=s(Gte);R3o=r(YXr,"mobilebert"),YXr.forEach(t),S3o=r(L4e," \u2014 "),SI=n(L4e,"A",{href:!0});var KXr=s(SI);P3o=r(KXr,"MobileBertForTokenClassification"),KXr.forEach(t),$3o=r(L4e," (MobileBERT model)"),L4e.forEach(t),I3o=i(q),c5=n(q,"LI",{});var B4e=s(c5);Ote=n(B4e,"STRONG",{});var ZXr=s(Ote);j3o=r(ZXr,"mpnet"),ZXr.forEach(t),N3o=r(B4e," \u2014 "),PI=n(B4e,"A",{href:!0});var ezr=s(PI);D3o=r(ezr,"MPNetForTokenClassification"),ezr.forEach(t),q3o=r(B4e," (MPNet model)"),B4e.forEach(t),G3o=i(q),f5=n(q,"LI",{});var k4e=s(f5);Xte=n(k4e,"STRONG",{});var ozr=s(Xte);O3o=r(ozr,"nystromformer"),ozr.forEach(t),X3o=r(k4e," \u2014 "),$I=n(k4e,"A",{href:!0});var rzr=s($I);z3o=r(rzr,"NystromformerForTokenClassification"),rzr.forEach(t),V3o=r(k4e," (Nystromformer model)"),k4e.forEach(t),W3o=i(q),m5=n(q,"LI",{});var x4e=s(m5);zte=n(x4e,"STRONG",{});var tzr=s(zte);Q3o=r(tzr,"qdqbert"),tzr.forEach(t),H3o=r(x4e," \u2014 "),II=n(x4e,"A",{href:!0});var azr=s(II);U3o=r(azr,"QDQBertForTokenClassification"),azr.forEach(t),J3o=r(x4e," (QDQBert model)"),x4e.forEach(t),Y3o=i(q),g5=n(q,"LI",{});var R4e=s(g5);Vte=n(R4e,"STRONG",{});var nzr=s(Vte);K3o=r(nzr,"rembert"),nzr.forEach(t),Z3o=r(R4e," \u2014 "),jI=n(R4e,"A",{href:!0});var szr=s(jI);eyo=r(szr,"RemBertForTokenClassification"),szr.forEach(t),oyo=r(R4e," (RemBERT model)"),R4e.forEach(t),ryo=i(q),h5=n(q,"LI",{});var S4e=s(h5);Wte=n(S4e,"STRONG",{});var lzr=s(Wte);tyo=r(lzr,"roberta"),lzr.forEach(t),ayo=r(S4e," \u2014 "),NI=n(S4e,"A",{href:!0});var izr=s(NI);nyo=r(izr,"RobertaForTokenClassification"),izr.forEach(t),syo=r(S4e," (RoBERTa model)"),S4e.forEach(t),lyo=i(q),p5=n(q,"LI",{});var P4e=s(p5);Qte=n(P4e,"STRONG",{});var dzr=s(Qte);iyo=r(dzr,"roformer"),dzr.forEach(t),dyo=r(P4e," \u2014 "),DI=n(P4e,"A",{href:!0});var czr=s(DI);cyo=r(czr,"RoFormerForTokenClassification"),czr.forEach(t),fyo=r(P4e," (RoFormer model)"),P4e.forEach(t),myo=i(q),_5=n(q,"LI",{});var $4e=s(_5);Hte=n($4e,"STRONG",{});var fzr=s(Hte);gyo=r(fzr,"squeezebert"),fzr.forEach(t),hyo=r($4e," \u2014 "),qI=n($4e,"A",{href:!0});var mzr=s(qI);pyo=r(mzr,"SqueezeBertForTokenClassification"),mzr.forEach(t),_yo=r($4e," (SqueezeBERT model)"),$4e.forEach(t),uyo=i(q),u5=n(q,"LI",{});var I4e=s(u5);Ute=n(I4e,"STRONG",{});var gzr=s(Ute);byo=r(gzr,"xlm"),gzr.forEach(t),vyo=r(I4e," \u2014 "),GI=n(I4e,"A",{href:!0});var hzr=s(GI);Tyo=r(hzr,"XLMForTokenClassification"),hzr.forEach(t),Fyo=r(I4e," (XLM model)"),I4e.forEach(t),Cyo=i(q),b5=n(q,"LI",{});var j4e=s(b5);Jte=n(j4e,"STRONG",{});var pzr=s(Jte);Myo=r(pzr,"xlm-roberta"),pzr.forEach(t),Eyo=r(j4e," \u2014 "),OI=n(j4e,"A",{href:!0});var _zr=s(OI);yyo=r(_zr,"XLMRobertaForTokenClassification"),_zr.forEach(t),wyo=r(j4e," (XLM-RoBERTa model)"),j4e.forEach(t),Ayo=i(q),v5=n(q,"LI",{});var N4e=s(v5);Yte=n(N4e,"STRONG",{});var uzr=s(Yte);Lyo=r(uzr,"xlm-roberta-xl"),uzr.forEach(t),Byo=r(N4e," \u2014 "),XI=n(N4e,"A",{href:!0});var bzr=s(XI);kyo=r(bzr,"XLMRobertaXLForTokenClassification"),bzr.forEach(t),xyo=r(N4e," (XLM-RoBERTa-XL model)"),N4e.forEach(t),Ryo=i(q),T5=n(q,"LI",{});var D4e=s(T5);Kte=n(D4e,"STRONG",{});var vzr=s(Kte);Syo=r(vzr,"xlnet"),vzr.forEach(t),Pyo=r(D4e," \u2014 "),zI=n(D4e,"A",{href:!0});var Tzr=s(zI);$yo=r(Tzr,"XLNetForTokenClassification"),Tzr.forEach(t),Iyo=r(D4e," (XLNet model)"),D4e.forEach(t),jyo=i(q),F5=n(q,"LI",{});var q4e=s(F5);Zte=n(q4e,"STRONG",{});var Fzr=s(Zte);Nyo=r(Fzr,"yoso"),Fzr.forEach(t),Dyo=r(q4e," \u2014 "),VI=n(q4e,"A",{href:!0});var Czr=s(VI);qyo=r(Czr,"YosoForTokenClassification"),Czr.forEach(t),Gyo=r(q4e," (YOSO model)"),q4e.forEach(t),q.forEach(t),Oyo=i(Gt),C5=n(Gt,"P",{});var G4e=s(C5);Xyo=r(G4e,"The model is set in evaluation mode by default using "),eae=n(G4e,"CODE",{});var Mzr=s(eae);zyo=r(Mzr,"model.eval()"),Mzr.forEach(t),Vyo=r(G4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oae=n(G4e,"CODE",{});var Ezr=s(oae);Wyo=r(Ezr,"model.train()"),Ezr.forEach(t),G4e.forEach(t),Qyo=i(Gt),rae=n(Gt,"P",{});var yzr=s(rae);Hyo=r(yzr,"Examples:"),yzr.forEach(t),Uyo=i(Gt),m(jM.$$.fragment,Gt),Gt.forEach(t),ol.forEach(t),cLe=i(d),gd=n(d,"H2",{class:!0});var uBe=s(gd);M5=n(uBe,"A",{id:!0,class:!0,href:!0});var wzr=s(M5);tae=n(wzr,"SPAN",{});var Azr=s(tae);m(NM.$$.fragment,Azr),Azr.forEach(t),wzr.forEach(t),Jyo=i(uBe),aae=n(uBe,"SPAN",{});var Lzr=s(aae);Yyo=r(Lzr,"AutoModelForQuestionAnswering"),Lzr.forEach(t),uBe.forEach(t),fLe=i(d),er=n(d,"DIV",{class:!0});var tl=s(er);m(DM.$$.fragment,tl),Kyo=i(tl),hd=n(tl,"P",{});var KX=s(hd);Zyo=r(KX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nae=n(KX,"CODE",{});var Bzr=s(nae);ewo=r(Bzr,"from_pretrained()"),Bzr.forEach(t),owo=r(KX,"class method or the "),sae=n(KX,"CODE",{});var kzr=s(sae);rwo=r(kzr,"from_config()"),kzr.forEach(t),two=r(KX,`class
method.`),KX.forEach(t),awo=i(tl),qM=n(tl,"P",{});var bBe=s(qM);nwo=r(bBe,"This class cannot be instantiated directly using "),lae=n(bBe,"CODE",{});var xzr=s(lae);swo=r(xzr,"__init__()"),xzr.forEach(t),lwo=r(bBe," (throws an error)."),bBe.forEach(t),iwo=i(tl),Qr=n(tl,"DIV",{class:!0});var al=s(Qr);m(GM.$$.fragment,al),dwo=i(al),iae=n(al,"P",{});var Rzr=s(iae);cwo=r(Rzr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rzr.forEach(t),fwo=i(al),pd=n(al,"P",{});var ZX=s(pd);mwo=r(ZX,`Note:
Loading a model from its configuration file does `),dae=n(ZX,"STRONG",{});var Szr=s(dae);gwo=r(Szr,"not"),Szr.forEach(t),hwo=r(ZX,` load the model weights. It only affects the
model\u2019s configuration. Use `),cae=n(ZX,"CODE",{});var Pzr=s(cae);pwo=r(Pzr,"from_pretrained()"),Pzr.forEach(t),_wo=r(ZX,"to load the model weights."),ZX.forEach(t),uwo=i(al),fae=n(al,"P",{});var $zr=s(fae);bwo=r($zr,"Examples:"),$zr.forEach(t),vwo=i(al),m(OM.$$.fragment,al),al.forEach(t),Two=i(tl),De=n(tl,"DIV",{class:!0});var Ot=s(De);m(XM.$$.fragment,Ot),Fwo=i(Ot),mae=n(Ot,"P",{});var Izr=s(mae);Cwo=r(Izr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Izr.forEach(t),Mwo=i(Ot),Ha=n(Ot,"P",{});var cC=s(Ha);Ewo=r(cC,"The model class to instantiate is selected based on the "),gae=n(cC,"CODE",{});var jzr=s(gae);ywo=r(jzr,"model_type"),jzr.forEach(t),wwo=r(cC,` property of the config object (either
passed as an argument or loaded from `),hae=n(cC,"CODE",{});var Nzr=s(hae);Awo=r(Nzr,"pretrained_model_name_or_path"),Nzr.forEach(t),Lwo=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=n(cC,"CODE",{});var Dzr=s(pae);Bwo=r(Dzr,"pretrained_model_name_or_path"),Dzr.forEach(t),kwo=r(cC,":"),cC.forEach(t),xwo=i(Ot),R=n(Ot,"UL",{});var P=s(R);E5=n(P,"LI",{});var O4e=s(E5);_ae=n(O4e,"STRONG",{});var qzr=s(_ae);Rwo=r(qzr,"albert"),qzr.forEach(t),Swo=r(O4e," \u2014 "),WI=n(O4e,"A",{href:!0});var Gzr=s(WI);Pwo=r(Gzr,"AlbertForQuestionAnswering"),Gzr.forEach(t),$wo=r(O4e," (ALBERT model)"),O4e.forEach(t),Iwo=i(P),y5=n(P,"LI",{});var X4e=s(y5);uae=n(X4e,"STRONG",{});var Ozr=s(uae);jwo=r(Ozr,"bart"),Ozr.forEach(t),Nwo=r(X4e," \u2014 "),QI=n(X4e,"A",{href:!0});var Xzr=s(QI);Dwo=r(Xzr,"BartForQuestionAnswering"),Xzr.forEach(t),qwo=r(X4e," (BART model)"),X4e.forEach(t),Gwo=i(P),w5=n(P,"LI",{});var z4e=s(w5);bae=n(z4e,"STRONG",{});var zzr=s(bae);Owo=r(zzr,"bert"),zzr.forEach(t),Xwo=r(z4e," \u2014 "),HI=n(z4e,"A",{href:!0});var Vzr=s(HI);zwo=r(Vzr,"BertForQuestionAnswering"),Vzr.forEach(t),Vwo=r(z4e," (BERT model)"),z4e.forEach(t),Wwo=i(P),A5=n(P,"LI",{});var V4e=s(A5);vae=n(V4e,"STRONG",{});var Wzr=s(vae);Qwo=r(Wzr,"big_bird"),Wzr.forEach(t),Hwo=r(V4e," \u2014 "),UI=n(V4e,"A",{href:!0});var Qzr=s(UI);Uwo=r(Qzr,"BigBirdForQuestionAnswering"),Qzr.forEach(t),Jwo=r(V4e," (BigBird model)"),V4e.forEach(t),Ywo=i(P),L5=n(P,"LI",{});var W4e=s(L5);Tae=n(W4e,"STRONG",{});var Hzr=s(Tae);Kwo=r(Hzr,"bigbird_pegasus"),Hzr.forEach(t),Zwo=r(W4e," \u2014 "),JI=n(W4e,"A",{href:!0});var Uzr=s(JI);eAo=r(Uzr,"BigBirdPegasusForQuestionAnswering"),Uzr.forEach(t),oAo=r(W4e," (BigBirdPegasus model)"),W4e.forEach(t),rAo=i(P),B5=n(P,"LI",{});var Q4e=s(B5);Fae=n(Q4e,"STRONG",{});var Jzr=s(Fae);tAo=r(Jzr,"camembert"),Jzr.forEach(t),aAo=r(Q4e," \u2014 "),YI=n(Q4e,"A",{href:!0});var Yzr=s(YI);nAo=r(Yzr,"CamembertForQuestionAnswering"),Yzr.forEach(t),sAo=r(Q4e," (CamemBERT model)"),Q4e.forEach(t),lAo=i(P),k5=n(P,"LI",{});var H4e=s(k5);Cae=n(H4e,"STRONG",{});var Kzr=s(Cae);iAo=r(Kzr,"canine"),Kzr.forEach(t),dAo=r(H4e," \u2014 "),KI=n(H4e,"A",{href:!0});var Zzr=s(KI);cAo=r(Zzr,"CanineForQuestionAnswering"),Zzr.forEach(t),fAo=r(H4e," (Canine model)"),H4e.forEach(t),mAo=i(P),x5=n(P,"LI",{});var U4e=s(x5);Mae=n(U4e,"STRONG",{});var eVr=s(Mae);gAo=r(eVr,"convbert"),eVr.forEach(t),hAo=r(U4e," \u2014 "),ZI=n(U4e,"A",{href:!0});var oVr=s(ZI);pAo=r(oVr,"ConvBertForQuestionAnswering"),oVr.forEach(t),_Ao=r(U4e," (ConvBERT model)"),U4e.forEach(t),uAo=i(P),R5=n(P,"LI",{});var J4e=s(R5);Eae=n(J4e,"STRONG",{});var rVr=s(Eae);bAo=r(rVr,"deberta"),rVr.forEach(t),vAo=r(J4e," \u2014 "),ej=n(J4e,"A",{href:!0});var tVr=s(ej);TAo=r(tVr,"DebertaForQuestionAnswering"),tVr.forEach(t),FAo=r(J4e," (DeBERTa model)"),J4e.forEach(t),CAo=i(P),S5=n(P,"LI",{});var Y4e=s(S5);yae=n(Y4e,"STRONG",{});var aVr=s(yae);MAo=r(aVr,"deberta-v2"),aVr.forEach(t),EAo=r(Y4e," \u2014 "),oj=n(Y4e,"A",{href:!0});var nVr=s(oj);yAo=r(nVr,"DebertaV2ForQuestionAnswering"),nVr.forEach(t),wAo=r(Y4e," (DeBERTa-v2 model)"),Y4e.forEach(t),AAo=i(P),P5=n(P,"LI",{});var K4e=s(P5);wae=n(K4e,"STRONG",{});var sVr=s(wae);LAo=r(sVr,"distilbert"),sVr.forEach(t),BAo=r(K4e," \u2014 "),rj=n(K4e,"A",{href:!0});var lVr=s(rj);kAo=r(lVr,"DistilBertForQuestionAnswering"),lVr.forEach(t),xAo=r(K4e," (DistilBERT model)"),K4e.forEach(t),RAo=i(P),$5=n(P,"LI",{});var Z4e=s($5);Aae=n(Z4e,"STRONG",{});var iVr=s(Aae);SAo=r(iVr,"electra"),iVr.forEach(t),PAo=r(Z4e," \u2014 "),tj=n(Z4e,"A",{href:!0});var dVr=s(tj);$Ao=r(dVr,"ElectraForQuestionAnswering"),dVr.forEach(t),IAo=r(Z4e," (ELECTRA model)"),Z4e.forEach(t),jAo=i(P),I5=n(P,"LI",{});var eMe=s(I5);Lae=n(eMe,"STRONG",{});var cVr=s(Lae);NAo=r(cVr,"flaubert"),cVr.forEach(t),DAo=r(eMe," \u2014 "),aj=n(eMe,"A",{href:!0});var fVr=s(aj);qAo=r(fVr,"FlaubertForQuestionAnsweringSimple"),fVr.forEach(t),GAo=r(eMe," (FlauBERT model)"),eMe.forEach(t),OAo=i(P),j5=n(P,"LI",{});var oMe=s(j5);Bae=n(oMe,"STRONG",{});var mVr=s(Bae);XAo=r(mVr,"fnet"),mVr.forEach(t),zAo=r(oMe," \u2014 "),nj=n(oMe,"A",{href:!0});var gVr=s(nj);VAo=r(gVr,"FNetForQuestionAnswering"),gVr.forEach(t),WAo=r(oMe," (FNet model)"),oMe.forEach(t),QAo=i(P),N5=n(P,"LI",{});var rMe=s(N5);kae=n(rMe,"STRONG",{});var hVr=s(kae);HAo=r(hVr,"funnel"),hVr.forEach(t),UAo=r(rMe," \u2014 "),sj=n(rMe,"A",{href:!0});var pVr=s(sj);JAo=r(pVr,"FunnelForQuestionAnswering"),pVr.forEach(t),YAo=r(rMe," (Funnel Transformer model)"),rMe.forEach(t),KAo=i(P),D5=n(P,"LI",{});var tMe=s(D5);xae=n(tMe,"STRONG",{});var _Vr=s(xae);ZAo=r(_Vr,"gptj"),_Vr.forEach(t),e0o=r(tMe," \u2014 "),lj=n(tMe,"A",{href:!0});var uVr=s(lj);o0o=r(uVr,"GPTJForQuestionAnswering"),uVr.forEach(t),r0o=r(tMe," (GPT-J model)"),tMe.forEach(t),t0o=i(P),q5=n(P,"LI",{});var aMe=s(q5);Rae=n(aMe,"STRONG",{});var bVr=s(Rae);a0o=r(bVr,"ibert"),bVr.forEach(t),n0o=r(aMe," \u2014 "),ij=n(aMe,"A",{href:!0});var vVr=s(ij);s0o=r(vVr,"IBertForQuestionAnswering"),vVr.forEach(t),l0o=r(aMe," (I-BERT model)"),aMe.forEach(t),i0o=i(P),G5=n(P,"LI",{});var nMe=s(G5);Sae=n(nMe,"STRONG",{});var TVr=s(Sae);d0o=r(TVr,"layoutlmv2"),TVr.forEach(t),c0o=r(nMe," \u2014 "),dj=n(nMe,"A",{href:!0});var FVr=s(dj);f0o=r(FVr,"LayoutLMv2ForQuestionAnswering"),FVr.forEach(t),m0o=r(nMe," (LayoutLMv2 model)"),nMe.forEach(t),g0o=i(P),O5=n(P,"LI",{});var sMe=s(O5);Pae=n(sMe,"STRONG",{});var CVr=s(Pae);h0o=r(CVr,"led"),CVr.forEach(t),p0o=r(sMe," \u2014 "),cj=n(sMe,"A",{href:!0});var MVr=s(cj);_0o=r(MVr,"LEDForQuestionAnswering"),MVr.forEach(t),u0o=r(sMe," (LED model)"),sMe.forEach(t),b0o=i(P),X5=n(P,"LI",{});var lMe=s(X5);$ae=n(lMe,"STRONG",{});var EVr=s($ae);v0o=r(EVr,"longformer"),EVr.forEach(t),T0o=r(lMe," \u2014 "),fj=n(lMe,"A",{href:!0});var yVr=s(fj);F0o=r(yVr,"LongformerForQuestionAnswering"),yVr.forEach(t),C0o=r(lMe," (Longformer model)"),lMe.forEach(t),M0o=i(P),z5=n(P,"LI",{});var iMe=s(z5);Iae=n(iMe,"STRONG",{});var wVr=s(Iae);E0o=r(wVr,"lxmert"),wVr.forEach(t),y0o=r(iMe," \u2014 "),mj=n(iMe,"A",{href:!0});var AVr=s(mj);w0o=r(AVr,"LxmertForQuestionAnswering"),AVr.forEach(t),A0o=r(iMe," (LXMERT model)"),iMe.forEach(t),L0o=i(P),V5=n(P,"LI",{});var dMe=s(V5);jae=n(dMe,"STRONG",{});var LVr=s(jae);B0o=r(LVr,"mbart"),LVr.forEach(t),k0o=r(dMe," \u2014 "),gj=n(dMe,"A",{href:!0});var BVr=s(gj);x0o=r(BVr,"MBartForQuestionAnswering"),BVr.forEach(t),R0o=r(dMe," (mBART model)"),dMe.forEach(t),S0o=i(P),W5=n(P,"LI",{});var cMe=s(W5);Nae=n(cMe,"STRONG",{});var kVr=s(Nae);P0o=r(kVr,"megatron-bert"),kVr.forEach(t),$0o=r(cMe," \u2014 "),hj=n(cMe,"A",{href:!0});var xVr=s(hj);I0o=r(xVr,"MegatronBertForQuestionAnswering"),xVr.forEach(t),j0o=r(cMe," (MegatronBert model)"),cMe.forEach(t),N0o=i(P),Q5=n(P,"LI",{});var fMe=s(Q5);Dae=n(fMe,"STRONG",{});var RVr=s(Dae);D0o=r(RVr,"mobilebert"),RVr.forEach(t),q0o=r(fMe," \u2014 "),pj=n(fMe,"A",{href:!0});var SVr=s(pj);G0o=r(SVr,"MobileBertForQuestionAnswering"),SVr.forEach(t),O0o=r(fMe," (MobileBERT model)"),fMe.forEach(t),X0o=i(P),H5=n(P,"LI",{});var mMe=s(H5);qae=n(mMe,"STRONG",{});var PVr=s(qae);z0o=r(PVr,"mpnet"),PVr.forEach(t),V0o=r(mMe," \u2014 "),_j=n(mMe,"A",{href:!0});var $Vr=s(_j);W0o=r($Vr,"MPNetForQuestionAnswering"),$Vr.forEach(t),Q0o=r(mMe," (MPNet model)"),mMe.forEach(t),H0o=i(P),U5=n(P,"LI",{});var gMe=s(U5);Gae=n(gMe,"STRONG",{});var IVr=s(Gae);U0o=r(IVr,"nystromformer"),IVr.forEach(t),J0o=r(gMe," \u2014 "),uj=n(gMe,"A",{href:!0});var jVr=s(uj);Y0o=r(jVr,"NystromformerForQuestionAnswering"),jVr.forEach(t),K0o=r(gMe," (Nystromformer model)"),gMe.forEach(t),Z0o=i(P),J5=n(P,"LI",{});var hMe=s(J5);Oae=n(hMe,"STRONG",{});var NVr=s(Oae);eLo=r(NVr,"qdqbert"),NVr.forEach(t),oLo=r(hMe," \u2014 "),bj=n(hMe,"A",{href:!0});var DVr=s(bj);rLo=r(DVr,"QDQBertForQuestionAnswering"),DVr.forEach(t),tLo=r(hMe," (QDQBert model)"),hMe.forEach(t),aLo=i(P),Y5=n(P,"LI",{});var pMe=s(Y5);Xae=n(pMe,"STRONG",{});var qVr=s(Xae);nLo=r(qVr,"reformer"),qVr.forEach(t),sLo=r(pMe," \u2014 "),vj=n(pMe,"A",{href:!0});var GVr=s(vj);lLo=r(GVr,"ReformerForQuestionAnswering"),GVr.forEach(t),iLo=r(pMe," (Reformer model)"),pMe.forEach(t),dLo=i(P),K5=n(P,"LI",{});var _Me=s(K5);zae=n(_Me,"STRONG",{});var OVr=s(zae);cLo=r(OVr,"rembert"),OVr.forEach(t),fLo=r(_Me," \u2014 "),Tj=n(_Me,"A",{href:!0});var XVr=s(Tj);mLo=r(XVr,"RemBertForQuestionAnswering"),XVr.forEach(t),gLo=r(_Me," (RemBERT model)"),_Me.forEach(t),hLo=i(P),Z5=n(P,"LI",{});var uMe=s(Z5);Vae=n(uMe,"STRONG",{});var zVr=s(Vae);pLo=r(zVr,"roberta"),zVr.forEach(t),_Lo=r(uMe," \u2014 "),Fj=n(uMe,"A",{href:!0});var VVr=s(Fj);uLo=r(VVr,"RobertaForQuestionAnswering"),VVr.forEach(t),bLo=r(uMe," (RoBERTa model)"),uMe.forEach(t),vLo=i(P),e2=n(P,"LI",{});var bMe=s(e2);Wae=n(bMe,"STRONG",{});var WVr=s(Wae);TLo=r(WVr,"roformer"),WVr.forEach(t),FLo=r(bMe," \u2014 "),Cj=n(bMe,"A",{href:!0});var QVr=s(Cj);CLo=r(QVr,"RoFormerForQuestionAnswering"),QVr.forEach(t),MLo=r(bMe," (RoFormer model)"),bMe.forEach(t),ELo=i(P),o2=n(P,"LI",{});var vMe=s(o2);Qae=n(vMe,"STRONG",{});var HVr=s(Qae);yLo=r(HVr,"splinter"),HVr.forEach(t),wLo=r(vMe," \u2014 "),Mj=n(vMe,"A",{href:!0});var UVr=s(Mj);ALo=r(UVr,"SplinterForQuestionAnswering"),UVr.forEach(t),LLo=r(vMe," (Splinter model)"),vMe.forEach(t),BLo=i(P),r2=n(P,"LI",{});var TMe=s(r2);Hae=n(TMe,"STRONG",{});var JVr=s(Hae);kLo=r(JVr,"squeezebert"),JVr.forEach(t),xLo=r(TMe," \u2014 "),Ej=n(TMe,"A",{href:!0});var YVr=s(Ej);RLo=r(YVr,"SqueezeBertForQuestionAnswering"),YVr.forEach(t),SLo=r(TMe," (SqueezeBERT model)"),TMe.forEach(t),PLo=i(P),t2=n(P,"LI",{});var FMe=s(t2);Uae=n(FMe,"STRONG",{});var KVr=s(Uae);$Lo=r(KVr,"xlm"),KVr.forEach(t),ILo=r(FMe," \u2014 "),yj=n(FMe,"A",{href:!0});var ZVr=s(yj);jLo=r(ZVr,"XLMForQuestionAnsweringSimple"),ZVr.forEach(t),NLo=r(FMe," (XLM model)"),FMe.forEach(t),DLo=i(P),a2=n(P,"LI",{});var CMe=s(a2);Jae=n(CMe,"STRONG",{});var eWr=s(Jae);qLo=r(eWr,"xlm-roberta"),eWr.forEach(t),GLo=r(CMe," \u2014 "),wj=n(CMe,"A",{href:!0});var oWr=s(wj);OLo=r(oWr,"XLMRobertaForQuestionAnswering"),oWr.forEach(t),XLo=r(CMe," (XLM-RoBERTa model)"),CMe.forEach(t),zLo=i(P),n2=n(P,"LI",{});var MMe=s(n2);Yae=n(MMe,"STRONG",{});var rWr=s(Yae);VLo=r(rWr,"xlm-roberta-xl"),rWr.forEach(t),WLo=r(MMe," \u2014 "),Aj=n(MMe,"A",{href:!0});var tWr=s(Aj);QLo=r(tWr,"XLMRobertaXLForQuestionAnswering"),tWr.forEach(t),HLo=r(MMe," (XLM-RoBERTa-XL model)"),MMe.forEach(t),ULo=i(P),s2=n(P,"LI",{});var EMe=s(s2);Kae=n(EMe,"STRONG",{});var aWr=s(Kae);JLo=r(aWr,"xlnet"),aWr.forEach(t),YLo=r(EMe," \u2014 "),Lj=n(EMe,"A",{href:!0});var nWr=s(Lj);KLo=r(nWr,"XLNetForQuestionAnsweringSimple"),nWr.forEach(t),ZLo=r(EMe," (XLNet model)"),EMe.forEach(t),e9o=i(P),l2=n(P,"LI",{});var yMe=s(l2);Zae=n(yMe,"STRONG",{});var sWr=s(Zae);o9o=r(sWr,"yoso"),sWr.forEach(t),r9o=r(yMe," \u2014 "),Bj=n(yMe,"A",{href:!0});var lWr=s(Bj);t9o=r(lWr,"YosoForQuestionAnswering"),lWr.forEach(t),a9o=r(yMe," (YOSO model)"),yMe.forEach(t),P.forEach(t),n9o=i(Ot),i2=n(Ot,"P",{});var wMe=s(i2);s9o=r(wMe,"The model is set in evaluation mode by default using "),ene=n(wMe,"CODE",{});var iWr=s(ene);l9o=r(iWr,"model.eval()"),iWr.forEach(t),i9o=r(wMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),one=n(wMe,"CODE",{});var dWr=s(one);d9o=r(dWr,"model.train()"),dWr.forEach(t),wMe.forEach(t),c9o=i(Ot),rne=n(Ot,"P",{});var cWr=s(rne);f9o=r(cWr,"Examples:"),cWr.forEach(t),m9o=i(Ot),m(zM.$$.fragment,Ot),Ot.forEach(t),tl.forEach(t),mLe=i(d),_d=n(d,"H2",{class:!0});var vBe=s(_d);d2=n(vBe,"A",{id:!0,class:!0,href:!0});var fWr=s(d2);tne=n(fWr,"SPAN",{});var mWr=s(tne);m(VM.$$.fragment,mWr),mWr.forEach(t),fWr.forEach(t),g9o=i(vBe),ane=n(vBe,"SPAN",{});var gWr=s(ane);h9o=r(gWr,"AutoModelForTableQuestionAnswering"),gWr.forEach(t),vBe.forEach(t),gLe=i(d),or=n(d,"DIV",{class:!0});var nl=s(or);m(WM.$$.fragment,nl),p9o=i(nl),ud=n(nl,"P",{});var ez=s(ud);_9o=r(ez,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nne=n(ez,"CODE",{});var hWr=s(nne);u9o=r(hWr,"from_pretrained()"),hWr.forEach(t),b9o=r(ez,"class method or the "),sne=n(ez,"CODE",{});var pWr=s(sne);v9o=r(pWr,"from_config()"),pWr.forEach(t),T9o=r(ez,`class
method.`),ez.forEach(t),F9o=i(nl),QM=n(nl,"P",{});var TBe=s(QM);C9o=r(TBe,"This class cannot be instantiated directly using "),lne=n(TBe,"CODE",{});var _Wr=s(lne);M9o=r(_Wr,"__init__()"),_Wr.forEach(t),E9o=r(TBe," (throws an error)."),TBe.forEach(t),y9o=i(nl),Hr=n(nl,"DIV",{class:!0});var sl=s(Hr);m(HM.$$.fragment,sl),w9o=i(sl),ine=n(sl,"P",{});var uWr=s(ine);A9o=r(uWr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uWr.forEach(t),L9o=i(sl),bd=n(sl,"P",{});var oz=s(bd);B9o=r(oz,`Note:
Loading a model from its configuration file does `),dne=n(oz,"STRONG",{});var bWr=s(dne);k9o=r(bWr,"not"),bWr.forEach(t),x9o=r(oz,` load the model weights. It only affects the
model\u2019s configuration. Use `),cne=n(oz,"CODE",{});var vWr=s(cne);R9o=r(vWr,"from_pretrained()"),vWr.forEach(t),S9o=r(oz,"to load the model weights."),oz.forEach(t),P9o=i(sl),fne=n(sl,"P",{});var TWr=s(fne);$9o=r(TWr,"Examples:"),TWr.forEach(t),I9o=i(sl),m(UM.$$.fragment,sl),sl.forEach(t),j9o=i(nl),qe=n(nl,"DIV",{class:!0});var Xt=s(qe);m(JM.$$.fragment,Xt),N9o=i(Xt),mne=n(Xt,"P",{});var FWr=s(mne);D9o=r(FWr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FWr.forEach(t),q9o=i(Xt),Ua=n(Xt,"P",{});var fC=s(Ua);G9o=r(fC,"The model class to instantiate is selected based on the "),gne=n(fC,"CODE",{});var CWr=s(gne);O9o=r(CWr,"model_type"),CWr.forEach(t),X9o=r(fC,` property of the config object (either
passed as an argument or loaded from `),hne=n(fC,"CODE",{});var MWr=s(hne);z9o=r(MWr,"pretrained_model_name_or_path"),MWr.forEach(t),V9o=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pne=n(fC,"CODE",{});var EWr=s(pne);W9o=r(EWr,"pretrained_model_name_or_path"),EWr.forEach(t),Q9o=r(fC,":"),fC.forEach(t),H9o=i(Xt),_ne=n(Xt,"UL",{});var yWr=s(_ne);c2=n(yWr,"LI",{});var AMe=s(c2);une=n(AMe,"STRONG",{});var wWr=s(une);U9o=r(wWr,"tapas"),wWr.forEach(t),J9o=r(AMe," \u2014 "),kj=n(AMe,"A",{href:!0});var AWr=s(kj);Y9o=r(AWr,"TapasForQuestionAnswering"),AWr.forEach(t),K9o=r(AMe," (TAPAS model)"),AMe.forEach(t),yWr.forEach(t),Z9o=i(Xt),f2=n(Xt,"P",{});var LMe=s(f2);eBo=r(LMe,"The model is set in evaluation mode by default using "),bne=n(LMe,"CODE",{});var LWr=s(bne);oBo=r(LWr,"model.eval()"),LWr.forEach(t),rBo=r(LMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vne=n(LMe,"CODE",{});var BWr=s(vne);tBo=r(BWr,"model.train()"),BWr.forEach(t),LMe.forEach(t),aBo=i(Xt),Tne=n(Xt,"P",{});var kWr=s(Tne);nBo=r(kWr,"Examples:"),kWr.forEach(t),sBo=i(Xt),m(YM.$$.fragment,Xt),Xt.forEach(t),nl.forEach(t),hLe=i(d),vd=n(d,"H2",{class:!0});var FBe=s(vd);m2=n(FBe,"A",{id:!0,class:!0,href:!0});var xWr=s(m2);Fne=n(xWr,"SPAN",{});var RWr=s(Fne);m(KM.$$.fragment,RWr),RWr.forEach(t),xWr.forEach(t),lBo=i(FBe),Cne=n(FBe,"SPAN",{});var SWr=s(Cne);iBo=r(SWr,"AutoModelForImageClassification"),SWr.forEach(t),FBe.forEach(t),pLe=i(d),rr=n(d,"DIV",{class:!0});var ll=s(rr);m(ZM.$$.fragment,ll),dBo=i(ll),Td=n(ll,"P",{});var rz=s(Td);cBo=r(rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mne=n(rz,"CODE",{});var PWr=s(Mne);fBo=r(PWr,"from_pretrained()"),PWr.forEach(t),mBo=r(rz,"class method or the "),Ene=n(rz,"CODE",{});var $Wr=s(Ene);gBo=r($Wr,"from_config()"),$Wr.forEach(t),hBo=r(rz,`class
method.`),rz.forEach(t),pBo=i(ll),eE=n(ll,"P",{});var CBe=s(eE);_Bo=r(CBe,"This class cannot be instantiated directly using "),yne=n(CBe,"CODE",{});var IWr=s(yne);uBo=r(IWr,"__init__()"),IWr.forEach(t),bBo=r(CBe," (throws an error)."),CBe.forEach(t),vBo=i(ll),Ur=n(ll,"DIV",{class:!0});var il=s(Ur);m(oE.$$.fragment,il),TBo=i(il),wne=n(il,"P",{});var jWr=s(wne);FBo=r(jWr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jWr.forEach(t),CBo=i(il),Fd=n(il,"P",{});var tz=s(Fd);MBo=r(tz,`Note:
Loading a model from its configuration file does `),Ane=n(tz,"STRONG",{});var NWr=s(Ane);EBo=r(NWr,"not"),NWr.forEach(t),yBo=r(tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lne=n(tz,"CODE",{});var DWr=s(Lne);wBo=r(DWr,"from_pretrained()"),DWr.forEach(t),ABo=r(tz,"to load the model weights."),tz.forEach(t),LBo=i(il),Bne=n(il,"P",{});var qWr=s(Bne);BBo=r(qWr,"Examples:"),qWr.forEach(t),kBo=i(il),m(rE.$$.fragment,il),il.forEach(t),xBo=i(ll),Ge=n(ll,"DIV",{class:!0});var zt=s(Ge);m(tE.$$.fragment,zt),RBo=i(zt),kne=n(zt,"P",{});var GWr=s(kne);SBo=r(GWr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GWr.forEach(t),PBo=i(zt),Ja=n(zt,"P",{});var mC=s(Ja);$Bo=r(mC,"The model class to instantiate is selected based on the "),xne=n(mC,"CODE",{});var OWr=s(xne);IBo=r(OWr,"model_type"),OWr.forEach(t),jBo=r(mC,` property of the config object (either
passed as an argument or loaded from `),Rne=n(mC,"CODE",{});var XWr=s(Rne);NBo=r(XWr,"pretrained_model_name_or_path"),XWr.forEach(t),DBo=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sne=n(mC,"CODE",{});var zWr=s(Sne);qBo=r(zWr,"pretrained_model_name_or_path"),zWr.forEach(t),GBo=r(mC,":"),mC.forEach(t),OBo=i(zt),be=n(zt,"UL",{});var Ke=s(be);g2=n(Ke,"LI",{});var BMe=s(g2);Pne=n(BMe,"STRONG",{});var VWr=s(Pne);XBo=r(VWr,"beit"),VWr.forEach(t),zBo=r(BMe," \u2014 "),xj=n(BMe,"A",{href:!0});var WWr=s(xj);VBo=r(WWr,"BeitForImageClassification"),WWr.forEach(t),WBo=r(BMe," (BEiT model)"),BMe.forEach(t),QBo=i(Ke),h2=n(Ke,"LI",{});var kMe=s(h2);$ne=n(kMe,"STRONG",{});var QWr=s($ne);HBo=r(QWr,"convnext"),QWr.forEach(t),UBo=r(kMe," \u2014 "),Rj=n(kMe,"A",{href:!0});var HWr=s(Rj);JBo=r(HWr,"ConvNextForImageClassification"),HWr.forEach(t),YBo=r(kMe," (ConvNext model)"),kMe.forEach(t),KBo=i(Ke),Rs=n(Ke,"LI",{});var x0=s(Rs);Ine=n(x0,"STRONG",{});var UWr=s(Ine);ZBo=r(UWr,"deit"),UWr.forEach(t),eko=r(x0," \u2014 "),Sj=n(x0,"A",{href:!0});var JWr=s(Sj);oko=r(JWr,"DeiTForImageClassification"),JWr.forEach(t),rko=r(x0," or "),Pj=n(x0,"A",{href:!0});var YWr=s(Pj);tko=r(YWr,"DeiTForImageClassificationWithTeacher"),YWr.forEach(t),ako=r(x0," (DeiT model)"),x0.forEach(t),nko=i(Ke),p2=n(Ke,"LI",{});var xMe=s(p2);jne=n(xMe,"STRONG",{});var KWr=s(jne);sko=r(KWr,"imagegpt"),KWr.forEach(t),lko=r(xMe," \u2014 "),$j=n(xMe,"A",{href:!0});var ZWr=s($j);iko=r(ZWr,"ImageGPTForImageClassification"),ZWr.forEach(t),dko=r(xMe," (ImageGPT model)"),xMe.forEach(t),cko=i(Ke),la=n(Ke,"LI",{});var Mf=s(la);Nne=n(Mf,"STRONG",{});var eQr=s(Nne);fko=r(eQr,"perceiver"),eQr.forEach(t),mko=r(Mf," \u2014 "),Ij=n(Mf,"A",{href:!0});var oQr=s(Ij);gko=r(oQr,"PerceiverForImageClassificationLearned"),oQr.forEach(t),hko=r(Mf," or "),jj=n(Mf,"A",{href:!0});var rQr=s(jj);pko=r(rQr,"PerceiverForImageClassificationFourier"),rQr.forEach(t),_ko=r(Mf," or "),Nj=n(Mf,"A",{href:!0});var tQr=s(Nj);uko=r(tQr,"PerceiverForImageClassificationConvProcessing"),tQr.forEach(t),bko=r(Mf," (Perceiver model)"),Mf.forEach(t),vko=i(Ke),_2=n(Ke,"LI",{});var RMe=s(_2);Dne=n(RMe,"STRONG",{});var aQr=s(Dne);Tko=r(aQr,"poolformer"),aQr.forEach(t),Fko=r(RMe," \u2014 "),Dj=n(RMe,"A",{href:!0});var nQr=s(Dj);Cko=r(nQr,"PoolFormerForImageClassification"),nQr.forEach(t),Mko=r(RMe," (PoolFormer model)"),RMe.forEach(t),Eko=i(Ke),u2=n(Ke,"LI",{});var SMe=s(u2);qne=n(SMe,"STRONG",{});var sQr=s(qne);yko=r(sQr,"segformer"),sQr.forEach(t),wko=r(SMe," \u2014 "),qj=n(SMe,"A",{href:!0});var lQr=s(qj);Ako=r(lQr,"SegformerForImageClassification"),lQr.forEach(t),Lko=r(SMe," (SegFormer model)"),SMe.forEach(t),Bko=i(Ke),b2=n(Ke,"LI",{});var PMe=s(b2);Gne=n(PMe,"STRONG",{});var iQr=s(Gne);kko=r(iQr,"swin"),iQr.forEach(t),xko=r(PMe," \u2014 "),Gj=n(PMe,"A",{href:!0});var dQr=s(Gj);Rko=r(dQr,"SwinForImageClassification"),dQr.forEach(t),Sko=r(PMe," (Swin model)"),PMe.forEach(t),Pko=i(Ke),v2=n(Ke,"LI",{});var $Me=s(v2);One=n($Me,"STRONG",{});var cQr=s(One);$ko=r(cQr,"vit"),cQr.forEach(t),Iko=r($Me," \u2014 "),Oj=n($Me,"A",{href:!0});var fQr=s(Oj);jko=r(fQr,"ViTForImageClassification"),fQr.forEach(t),Nko=r($Me," (ViT model)"),$Me.forEach(t),Ke.forEach(t),Dko=i(zt),T2=n(zt,"P",{});var IMe=s(T2);qko=r(IMe,"The model is set in evaluation mode by default using "),Xne=n(IMe,"CODE",{});var mQr=s(Xne);Gko=r(mQr,"model.eval()"),mQr.forEach(t),Oko=r(IMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=n(IMe,"CODE",{});var gQr=s(zne);Xko=r(gQr,"model.train()"),gQr.forEach(t),IMe.forEach(t),zko=i(zt),Vne=n(zt,"P",{});var hQr=s(Vne);Vko=r(hQr,"Examples:"),hQr.forEach(t),Wko=i(zt),m(aE.$$.fragment,zt),zt.forEach(t),ll.forEach(t),_Le=i(d),Cd=n(d,"H2",{class:!0});var MBe=s(Cd);F2=n(MBe,"A",{id:!0,class:!0,href:!0});var pQr=s(F2);Wne=n(pQr,"SPAN",{});var _Qr=s(Wne);m(nE.$$.fragment,_Qr),_Qr.forEach(t),pQr.forEach(t),Qko=i(MBe),Qne=n(MBe,"SPAN",{});var uQr=s(Qne);Hko=r(uQr,"AutoModelForVision2Seq"),uQr.forEach(t),MBe.forEach(t),uLe=i(d),tr=n(d,"DIV",{class:!0});var dl=s(tr);m(sE.$$.fragment,dl),Uko=i(dl),Md=n(dl,"P",{});var az=s(Md);Jko=r(az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Hne=n(az,"CODE",{});var bQr=s(Hne);Yko=r(bQr,"from_pretrained()"),bQr.forEach(t),Kko=r(az,"class method or the "),Une=n(az,"CODE",{});var vQr=s(Une);Zko=r(vQr,"from_config()"),vQr.forEach(t),exo=r(az,`class
method.`),az.forEach(t),oxo=i(dl),lE=n(dl,"P",{});var EBe=s(lE);rxo=r(EBe,"This class cannot be instantiated directly using "),Jne=n(EBe,"CODE",{});var TQr=s(Jne);txo=r(TQr,"__init__()"),TQr.forEach(t),axo=r(EBe," (throws an error)."),EBe.forEach(t),nxo=i(dl),Jr=n(dl,"DIV",{class:!0});var cl=s(Jr);m(iE.$$.fragment,cl),sxo=i(cl),Yne=n(cl,"P",{});var FQr=s(Yne);lxo=r(FQr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FQr.forEach(t),ixo=i(cl),Ed=n(cl,"P",{});var nz=s(Ed);dxo=r(nz,`Note:
Loading a model from its configuration file does `),Kne=n(nz,"STRONG",{});var CQr=s(Kne);cxo=r(CQr,"not"),CQr.forEach(t),fxo=r(nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zne=n(nz,"CODE",{});var MQr=s(Zne);mxo=r(MQr,"from_pretrained()"),MQr.forEach(t),gxo=r(nz,"to load the model weights."),nz.forEach(t),hxo=i(cl),ese=n(cl,"P",{});var EQr=s(ese);pxo=r(EQr,"Examples:"),EQr.forEach(t),_xo=i(cl),m(dE.$$.fragment,cl),cl.forEach(t),uxo=i(dl),Oe=n(dl,"DIV",{class:!0});var Vt=s(Oe);m(cE.$$.fragment,Vt),bxo=i(Vt),ose=n(Vt,"P",{});var yQr=s(ose);vxo=r(yQr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yQr.forEach(t),Txo=i(Vt),Ya=n(Vt,"P",{});var gC=s(Ya);Fxo=r(gC,"The model class to instantiate is selected based on the "),rse=n(gC,"CODE",{});var wQr=s(rse);Cxo=r(wQr,"model_type"),wQr.forEach(t),Mxo=r(gC,` property of the config object (either
passed as an argument or loaded from `),tse=n(gC,"CODE",{});var AQr=s(tse);Exo=r(AQr,"pretrained_model_name_or_path"),AQr.forEach(t),yxo=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ase=n(gC,"CODE",{});var LQr=s(ase);wxo=r(LQr,"pretrained_model_name_or_path"),LQr.forEach(t),Axo=r(gC,":"),gC.forEach(t),Lxo=i(Vt),nse=n(Vt,"UL",{});var BQr=s(nse);C2=n(BQr,"LI",{});var jMe=s(C2);sse=n(jMe,"STRONG",{});var kQr=s(sse);Bxo=r(kQr,"vision-encoder-decoder"),kQr.forEach(t),kxo=r(jMe," \u2014 "),Xj=n(jMe,"A",{href:!0});var xQr=s(Xj);xxo=r(xQr,"VisionEncoderDecoderModel"),xQr.forEach(t),Rxo=r(jMe," (Vision Encoder decoder model)"),jMe.forEach(t),BQr.forEach(t),Sxo=i(Vt),M2=n(Vt,"P",{});var NMe=s(M2);Pxo=r(NMe,"The model is set in evaluation mode by default using "),lse=n(NMe,"CODE",{});var RQr=s(lse);$xo=r(RQr,"model.eval()"),RQr.forEach(t),Ixo=r(NMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ise=n(NMe,"CODE",{});var SQr=s(ise);jxo=r(SQr,"model.train()"),SQr.forEach(t),NMe.forEach(t),Nxo=i(Vt),dse=n(Vt,"P",{});var PQr=s(dse);Dxo=r(PQr,"Examples:"),PQr.forEach(t),qxo=i(Vt),m(fE.$$.fragment,Vt),Vt.forEach(t),dl.forEach(t),bLe=i(d),yd=n(d,"H2",{class:!0});var yBe=s(yd);E2=n(yBe,"A",{id:!0,class:!0,href:!0});var $Qr=s(E2);cse=n($Qr,"SPAN",{});var IQr=s(cse);m(mE.$$.fragment,IQr),IQr.forEach(t),$Qr.forEach(t),Gxo=i(yBe),fse=n(yBe,"SPAN",{});var jQr=s(fse);Oxo=r(jQr,"AutoModelForAudioClassification"),jQr.forEach(t),yBe.forEach(t),vLe=i(d),ar=n(d,"DIV",{class:!0});var fl=s(ar);m(gE.$$.fragment,fl),Xxo=i(fl),wd=n(fl,"P",{});var sz=s(wd);zxo=r(sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),mse=n(sz,"CODE",{});var NQr=s(mse);Vxo=r(NQr,"from_pretrained()"),NQr.forEach(t),Wxo=r(sz,"class method or the "),gse=n(sz,"CODE",{});var DQr=s(gse);Qxo=r(DQr,"from_config()"),DQr.forEach(t),Hxo=r(sz,`class
method.`),sz.forEach(t),Uxo=i(fl),hE=n(fl,"P",{});var wBe=s(hE);Jxo=r(wBe,"This class cannot be instantiated directly using "),hse=n(wBe,"CODE",{});var qQr=s(hse);Yxo=r(qQr,"__init__()"),qQr.forEach(t),Kxo=r(wBe," (throws an error)."),wBe.forEach(t),Zxo=i(fl),Yr=n(fl,"DIV",{class:!0});var ml=s(Yr);m(pE.$$.fragment,ml),eRo=i(ml),pse=n(ml,"P",{});var GQr=s(pse);oRo=r(GQr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),GQr.forEach(t),rRo=i(ml),Ad=n(ml,"P",{});var lz=s(Ad);tRo=r(lz,`Note:
Loading a model from its configuration file does `),_se=n(lz,"STRONG",{});var OQr=s(_se);aRo=r(OQr,"not"),OQr.forEach(t),nRo=r(lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),use=n(lz,"CODE",{});var XQr=s(use);sRo=r(XQr,"from_pretrained()"),XQr.forEach(t),lRo=r(lz,"to load the model weights."),lz.forEach(t),iRo=i(ml),bse=n(ml,"P",{});var zQr=s(bse);dRo=r(zQr,"Examples:"),zQr.forEach(t),cRo=i(ml),m(_E.$$.fragment,ml),ml.forEach(t),fRo=i(fl),Xe=n(fl,"DIV",{class:!0});var Wt=s(Xe);m(uE.$$.fragment,Wt),mRo=i(Wt),vse=n(Wt,"P",{});var VQr=s(vse);gRo=r(VQr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),VQr.forEach(t),hRo=i(Wt),Ka=n(Wt,"P",{});var hC=s(Ka);pRo=r(hC,"The model class to instantiate is selected based on the "),Tse=n(hC,"CODE",{});var WQr=s(Tse);_Ro=r(WQr,"model_type"),WQr.forEach(t),uRo=r(hC,` property of the config object (either
passed as an argument or loaded from `),Fse=n(hC,"CODE",{});var QQr=s(Fse);bRo=r(QQr,"pretrained_model_name_or_path"),QQr.forEach(t),vRo=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cse=n(hC,"CODE",{});var HQr=s(Cse);TRo=r(HQr,"pretrained_model_name_or_path"),HQr.forEach(t),FRo=r(hC,":"),hC.forEach(t),CRo=i(Wt),ao=n(Wt,"UL",{});var Qt=s(ao);y2=n(Qt,"LI",{});var DMe=s(y2);Mse=n(DMe,"STRONG",{});var UQr=s(Mse);MRo=r(UQr,"hubert"),UQr.forEach(t),ERo=r(DMe," \u2014 "),zj=n(DMe,"A",{href:!0});var JQr=s(zj);yRo=r(JQr,"HubertForSequenceClassification"),JQr.forEach(t),wRo=r(DMe," (Hubert model)"),DMe.forEach(t),ARo=i(Qt),w2=n(Qt,"LI",{});var qMe=s(w2);Ese=n(qMe,"STRONG",{});var YQr=s(Ese);LRo=r(YQr,"sew"),YQr.forEach(t),BRo=r(qMe," \u2014 "),Vj=n(qMe,"A",{href:!0});var KQr=s(Vj);kRo=r(KQr,"SEWForSequenceClassification"),KQr.forEach(t),xRo=r(qMe," (SEW model)"),qMe.forEach(t),RRo=i(Qt),A2=n(Qt,"LI",{});var GMe=s(A2);yse=n(GMe,"STRONG",{});var ZQr=s(yse);SRo=r(ZQr,"sew-d"),ZQr.forEach(t),PRo=r(GMe," \u2014 "),Wj=n(GMe,"A",{href:!0});var eHr=s(Wj);$Ro=r(eHr,"SEWDForSequenceClassification"),eHr.forEach(t),IRo=r(GMe," (SEW-D model)"),GMe.forEach(t),jRo=i(Qt),L2=n(Qt,"LI",{});var OMe=s(L2);wse=n(OMe,"STRONG",{});var oHr=s(wse);NRo=r(oHr,"unispeech"),oHr.forEach(t),DRo=r(OMe," \u2014 "),Qj=n(OMe,"A",{href:!0});var rHr=s(Qj);qRo=r(rHr,"UniSpeechForSequenceClassification"),rHr.forEach(t),GRo=r(OMe," (UniSpeech model)"),OMe.forEach(t),ORo=i(Qt),B2=n(Qt,"LI",{});var XMe=s(B2);Ase=n(XMe,"STRONG",{});var tHr=s(Ase);XRo=r(tHr,"unispeech-sat"),tHr.forEach(t),zRo=r(XMe," \u2014 "),Hj=n(XMe,"A",{href:!0});var aHr=s(Hj);VRo=r(aHr,"UniSpeechSatForSequenceClassification"),aHr.forEach(t),WRo=r(XMe," (UniSpeechSat model)"),XMe.forEach(t),QRo=i(Qt),k2=n(Qt,"LI",{});var zMe=s(k2);Lse=n(zMe,"STRONG",{});var nHr=s(Lse);HRo=r(nHr,"wav2vec2"),nHr.forEach(t),URo=r(zMe," \u2014 "),Uj=n(zMe,"A",{href:!0});var sHr=s(Uj);JRo=r(sHr,"Wav2Vec2ForSequenceClassification"),sHr.forEach(t),YRo=r(zMe," (Wav2Vec2 model)"),zMe.forEach(t),KRo=i(Qt),x2=n(Qt,"LI",{});var VMe=s(x2);Bse=n(VMe,"STRONG",{});var lHr=s(Bse);ZRo=r(lHr,"wavlm"),lHr.forEach(t),eSo=r(VMe," \u2014 "),Jj=n(VMe,"A",{href:!0});var iHr=s(Jj);oSo=r(iHr,"WavLMForSequenceClassification"),iHr.forEach(t),rSo=r(VMe," (WavLM model)"),VMe.forEach(t),Qt.forEach(t),tSo=i(Wt),R2=n(Wt,"P",{});var WMe=s(R2);aSo=r(WMe,"The model is set in evaluation mode by default using "),kse=n(WMe,"CODE",{});var dHr=s(kse);nSo=r(dHr,"model.eval()"),dHr.forEach(t),sSo=r(WMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xse=n(WMe,"CODE",{});var cHr=s(xse);lSo=r(cHr,"model.train()"),cHr.forEach(t),WMe.forEach(t),iSo=i(Wt),Rse=n(Wt,"P",{});var fHr=s(Rse);dSo=r(fHr,"Examples:"),fHr.forEach(t),cSo=i(Wt),m(bE.$$.fragment,Wt),Wt.forEach(t),fl.forEach(t),TLe=i(d),Ld=n(d,"H2",{class:!0});var ABe=s(Ld);S2=n(ABe,"A",{id:!0,class:!0,href:!0});var mHr=s(S2);Sse=n(mHr,"SPAN",{});var gHr=s(Sse);m(vE.$$.fragment,gHr),gHr.forEach(t),mHr.forEach(t),fSo=i(ABe),Pse=n(ABe,"SPAN",{});var hHr=s(Pse);mSo=r(hHr,"AutoModelForAudioFrameClassification"),hHr.forEach(t),ABe.forEach(t),FLe=i(d),nr=n(d,"DIV",{class:!0});var gl=s(nr);m(TE.$$.fragment,gl),gSo=i(gl),Bd=n(gl,"P",{});var iz=s(Bd);hSo=r(iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),$se=n(iz,"CODE",{});var pHr=s($se);pSo=r(pHr,"from_pretrained()"),pHr.forEach(t),_So=r(iz,"class method or the "),Ise=n(iz,"CODE",{});var _Hr=s(Ise);uSo=r(_Hr,"from_config()"),_Hr.forEach(t),bSo=r(iz,`class
method.`),iz.forEach(t),vSo=i(gl),FE=n(gl,"P",{});var LBe=s(FE);TSo=r(LBe,"This class cannot be instantiated directly using "),jse=n(LBe,"CODE",{});var uHr=s(jse);FSo=r(uHr,"__init__()"),uHr.forEach(t),CSo=r(LBe," (throws an error)."),LBe.forEach(t),MSo=i(gl),Kr=n(gl,"DIV",{class:!0});var hl=s(Kr);m(CE.$$.fragment,hl),ESo=i(hl),Nse=n(hl,"P",{});var bHr=s(Nse);ySo=r(bHr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),bHr.forEach(t),wSo=i(hl),kd=n(hl,"P",{});var dz=s(kd);ASo=r(dz,`Note:
Loading a model from its configuration file does `),Dse=n(dz,"STRONG",{});var vHr=s(Dse);LSo=r(vHr,"not"),vHr.forEach(t),BSo=r(dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=n(dz,"CODE",{});var THr=s(qse);kSo=r(THr,"from_pretrained()"),THr.forEach(t),xSo=r(dz,"to load the model weights."),dz.forEach(t),RSo=i(hl),Gse=n(hl,"P",{});var FHr=s(Gse);SSo=r(FHr,"Examples:"),FHr.forEach(t),PSo=i(hl),m(ME.$$.fragment,hl),hl.forEach(t),$So=i(gl),ze=n(gl,"DIV",{class:!0});var Ht=s(ze);m(EE.$$.fragment,Ht),ISo=i(Ht),Ose=n(Ht,"P",{});var CHr=s(Ose);jSo=r(CHr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),CHr.forEach(t),NSo=i(Ht),Za=n(Ht,"P",{});var pC=s(Za);DSo=r(pC,"The model class to instantiate is selected based on the "),Xse=n(pC,"CODE",{});var MHr=s(Xse);qSo=r(MHr,"model_type"),MHr.forEach(t),GSo=r(pC,` property of the config object (either
passed as an argument or loaded from `),zse=n(pC,"CODE",{});var EHr=s(zse);OSo=r(EHr,"pretrained_model_name_or_path"),EHr.forEach(t),XSo=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vse=n(pC,"CODE",{});var yHr=s(Vse);zSo=r(yHr,"pretrained_model_name_or_path"),yHr.forEach(t),VSo=r(pC,":"),pC.forEach(t),WSo=i(Ht),xd=n(Ht,"UL",{});var cz=s(xd);P2=n(cz,"LI",{});var QMe=s(P2);Wse=n(QMe,"STRONG",{});var wHr=s(Wse);QSo=r(wHr,"unispeech-sat"),wHr.forEach(t),HSo=r(QMe," \u2014 "),Yj=n(QMe,"A",{href:!0});var AHr=s(Yj);USo=r(AHr,"UniSpeechSatForAudioFrameClassification"),AHr.forEach(t),JSo=r(QMe," (UniSpeechSat model)"),QMe.forEach(t),YSo=i(cz),$2=n(cz,"LI",{});var HMe=s($2);Qse=n(HMe,"STRONG",{});var LHr=s(Qse);KSo=r(LHr,"wav2vec2"),LHr.forEach(t),ZSo=r(HMe," \u2014 "),Kj=n(HMe,"A",{href:!0});var BHr=s(Kj);ePo=r(BHr,"Wav2Vec2ForAudioFrameClassification"),BHr.forEach(t),oPo=r(HMe," (Wav2Vec2 model)"),HMe.forEach(t),rPo=i(cz),I2=n(cz,"LI",{});var UMe=s(I2);Hse=n(UMe,"STRONG",{});var kHr=s(Hse);tPo=r(kHr,"wavlm"),kHr.forEach(t),aPo=r(UMe," \u2014 "),Zj=n(UMe,"A",{href:!0});var xHr=s(Zj);nPo=r(xHr,"WavLMForAudioFrameClassification"),xHr.forEach(t),sPo=r(UMe," (WavLM model)"),UMe.forEach(t),cz.forEach(t),lPo=i(Ht),j2=n(Ht,"P",{});var JMe=s(j2);iPo=r(JMe,"The model is set in evaluation mode by default using "),Use=n(JMe,"CODE",{});var RHr=s(Use);dPo=r(RHr,"model.eval()"),RHr.forEach(t),cPo=r(JMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jse=n(JMe,"CODE",{});var SHr=s(Jse);fPo=r(SHr,"model.train()"),SHr.forEach(t),JMe.forEach(t),mPo=i(Ht),Yse=n(Ht,"P",{});var PHr=s(Yse);gPo=r(PHr,"Examples:"),PHr.forEach(t),hPo=i(Ht),m(yE.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),CLe=i(d),Rd=n(d,"H2",{class:!0});var BBe=s(Rd);N2=n(BBe,"A",{id:!0,class:!0,href:!0});var $Hr=s(N2);Kse=n($Hr,"SPAN",{});var IHr=s(Kse);m(wE.$$.fragment,IHr),IHr.forEach(t),$Hr.forEach(t),pPo=i(BBe),Zse=n(BBe,"SPAN",{});var jHr=s(Zse);_Po=r(jHr,"AutoModelForCTC"),jHr.forEach(t),BBe.forEach(t),MLe=i(d),sr=n(d,"DIV",{class:!0});var pl=s(sr);m(AE.$$.fragment,pl),uPo=i(pl),Sd=n(pl,"P",{});var fz=s(Sd);bPo=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ele=n(fz,"CODE",{});var NHr=s(ele);vPo=r(NHr,"from_pretrained()"),NHr.forEach(t),TPo=r(fz,"class method or the "),ole=n(fz,"CODE",{});var DHr=s(ole);FPo=r(DHr,"from_config()"),DHr.forEach(t),CPo=r(fz,`class
method.`),fz.forEach(t),MPo=i(pl),LE=n(pl,"P",{});var kBe=s(LE);EPo=r(kBe,"This class cannot be instantiated directly using "),rle=n(kBe,"CODE",{});var qHr=s(rle);yPo=r(qHr,"__init__()"),qHr.forEach(t),wPo=r(kBe," (throws an error)."),kBe.forEach(t),APo=i(pl),Zr=n(pl,"DIV",{class:!0});var _l=s(Zr);m(BE.$$.fragment,_l),LPo=i(_l),tle=n(_l,"P",{});var GHr=s(tle);BPo=r(GHr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),GHr.forEach(t),kPo=i(_l),Pd=n(_l,"P",{});var mz=s(Pd);xPo=r(mz,`Note:
Loading a model from its configuration file does `),ale=n(mz,"STRONG",{});var OHr=s(ale);RPo=r(OHr,"not"),OHr.forEach(t),SPo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nle=n(mz,"CODE",{});var XHr=s(nle);PPo=r(XHr,"from_pretrained()"),XHr.forEach(t),$Po=r(mz,"to load the model weights."),mz.forEach(t),IPo=i(_l),sle=n(_l,"P",{});var zHr=s(sle);jPo=r(zHr,"Examples:"),zHr.forEach(t),NPo=i(_l),m(kE.$$.fragment,_l),_l.forEach(t),DPo=i(pl),Ve=n(pl,"DIV",{class:!0});var Ut=s(Ve);m(xE.$$.fragment,Ut),qPo=i(Ut),lle=n(Ut,"P",{});var VHr=s(lle);GPo=r(VHr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),VHr.forEach(t),OPo=i(Ut),en=n(Ut,"P",{});var _C=s(en);XPo=r(_C,"The model class to instantiate is selected based on the "),ile=n(_C,"CODE",{});var WHr=s(ile);zPo=r(WHr,"model_type"),WHr.forEach(t),VPo=r(_C,` property of the config object (either
passed as an argument or loaded from `),dle=n(_C,"CODE",{});var QHr=s(dle);WPo=r(QHr,"pretrained_model_name_or_path"),QHr.forEach(t),QPo=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cle=n(_C,"CODE",{});var HHr=s(cle);HPo=r(HHr,"pretrained_model_name_or_path"),HHr.forEach(t),UPo=r(_C,":"),_C.forEach(t),JPo=i(Ut),no=n(Ut,"UL",{});var Jt=s(no);D2=n(Jt,"LI",{});var YMe=s(D2);fle=n(YMe,"STRONG",{});var UHr=s(fle);YPo=r(UHr,"hubert"),UHr.forEach(t),KPo=r(YMe," \u2014 "),eN=n(YMe,"A",{href:!0});var JHr=s(eN);ZPo=r(JHr,"HubertForCTC"),JHr.forEach(t),e$o=r(YMe," (Hubert model)"),YMe.forEach(t),o$o=i(Jt),q2=n(Jt,"LI",{});var KMe=s(q2);mle=n(KMe,"STRONG",{});var YHr=s(mle);r$o=r(YHr,"sew"),YHr.forEach(t),t$o=r(KMe," \u2014 "),oN=n(KMe,"A",{href:!0});var KHr=s(oN);a$o=r(KHr,"SEWForCTC"),KHr.forEach(t),n$o=r(KMe," (SEW model)"),KMe.forEach(t),s$o=i(Jt),G2=n(Jt,"LI",{});var ZMe=s(G2);gle=n(ZMe,"STRONG",{});var ZHr=s(gle);l$o=r(ZHr,"sew-d"),ZHr.forEach(t),i$o=r(ZMe," \u2014 "),rN=n(ZMe,"A",{href:!0});var eUr=s(rN);d$o=r(eUr,"SEWDForCTC"),eUr.forEach(t),c$o=r(ZMe," (SEW-D model)"),ZMe.forEach(t),f$o=i(Jt),O2=n(Jt,"LI",{});var eEe=s(O2);hle=n(eEe,"STRONG",{});var oUr=s(hle);m$o=r(oUr,"unispeech"),oUr.forEach(t),g$o=r(eEe," \u2014 "),tN=n(eEe,"A",{href:!0});var rUr=s(tN);h$o=r(rUr,"UniSpeechForCTC"),rUr.forEach(t),p$o=r(eEe," (UniSpeech model)"),eEe.forEach(t),_$o=i(Jt),X2=n(Jt,"LI",{});var oEe=s(X2);ple=n(oEe,"STRONG",{});var tUr=s(ple);u$o=r(tUr,"unispeech-sat"),tUr.forEach(t),b$o=r(oEe," \u2014 "),aN=n(oEe,"A",{href:!0});var aUr=s(aN);v$o=r(aUr,"UniSpeechSatForCTC"),aUr.forEach(t),T$o=r(oEe," (UniSpeechSat model)"),oEe.forEach(t),F$o=i(Jt),z2=n(Jt,"LI",{});var rEe=s(z2);_le=n(rEe,"STRONG",{});var nUr=s(_le);C$o=r(nUr,"wav2vec2"),nUr.forEach(t),M$o=r(rEe," \u2014 "),nN=n(rEe,"A",{href:!0});var sUr=s(nN);E$o=r(sUr,"Wav2Vec2ForCTC"),sUr.forEach(t),y$o=r(rEe," (Wav2Vec2 model)"),rEe.forEach(t),w$o=i(Jt),V2=n(Jt,"LI",{});var tEe=s(V2);ule=n(tEe,"STRONG",{});var lUr=s(ule);A$o=r(lUr,"wavlm"),lUr.forEach(t),L$o=r(tEe," \u2014 "),sN=n(tEe,"A",{href:!0});var iUr=s(sN);B$o=r(iUr,"WavLMForCTC"),iUr.forEach(t),k$o=r(tEe," (WavLM model)"),tEe.forEach(t),Jt.forEach(t),x$o=i(Ut),W2=n(Ut,"P",{});var aEe=s(W2);R$o=r(aEe,"The model is set in evaluation mode by default using "),ble=n(aEe,"CODE",{});var dUr=s(ble);S$o=r(dUr,"model.eval()"),dUr.forEach(t),P$o=r(aEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=n(aEe,"CODE",{});var cUr=s(vle);$$o=r(cUr,"model.train()"),cUr.forEach(t),aEe.forEach(t),I$o=i(Ut),Tle=n(Ut,"P",{});var fUr=s(Tle);j$o=r(fUr,"Examples:"),fUr.forEach(t),N$o=i(Ut),m(RE.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),ELe=i(d),$d=n(d,"H2",{class:!0});var xBe=s($d);Q2=n(xBe,"A",{id:!0,class:!0,href:!0});var mUr=s(Q2);Fle=n(mUr,"SPAN",{});var gUr=s(Fle);m(SE.$$.fragment,gUr),gUr.forEach(t),mUr.forEach(t),D$o=i(xBe),Cle=n(xBe,"SPAN",{});var hUr=s(Cle);q$o=r(hUr,"AutoModelForSpeechSeq2Seq"),hUr.forEach(t),xBe.forEach(t),yLe=i(d),lr=n(d,"DIV",{class:!0});var ul=s(lr);m(PE.$$.fragment,ul),G$o=i(ul),Id=n(ul,"P",{});var gz=s(Id);O$o=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mle=n(gz,"CODE",{});var pUr=s(Mle);X$o=r(pUr,"from_pretrained()"),pUr.forEach(t),z$o=r(gz,"class method or the "),Ele=n(gz,"CODE",{});var _Ur=s(Ele);V$o=r(_Ur,"from_config()"),_Ur.forEach(t),W$o=r(gz,`class
method.`),gz.forEach(t),Q$o=i(ul),$E=n(ul,"P",{});var RBe=s($E);H$o=r(RBe,"This class cannot be instantiated directly using "),yle=n(RBe,"CODE",{});var uUr=s(yle);U$o=r(uUr,"__init__()"),uUr.forEach(t),J$o=r(RBe," (throws an error)."),RBe.forEach(t),Y$o=i(ul),et=n(ul,"DIV",{class:!0});var bl=s(et);m(IE.$$.fragment,bl),K$o=i(bl),wle=n(bl,"P",{});var bUr=s(wle);Z$o=r(bUr,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bUr.forEach(t),eIo=i(bl),jd=n(bl,"P",{});var hz=s(jd);oIo=r(hz,`Note:
Loading a model from its configuration file does `),Ale=n(hz,"STRONG",{});var vUr=s(Ale);rIo=r(vUr,"not"),vUr.forEach(t),tIo=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lle=n(hz,"CODE",{});var TUr=s(Lle);aIo=r(TUr,"from_pretrained()"),TUr.forEach(t),nIo=r(hz,"to load the model weights."),hz.forEach(t),sIo=i(bl),Ble=n(bl,"P",{});var FUr=s(Ble);lIo=r(FUr,"Examples:"),FUr.forEach(t),iIo=i(bl),m(jE.$$.fragment,bl),bl.forEach(t),dIo=i(ul),We=n(ul,"DIV",{class:!0});var Yt=s(We);m(NE.$$.fragment,Yt),cIo=i(Yt),kle=n(Yt,"P",{});var CUr=s(kle);fIo=r(CUr,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),CUr.forEach(t),mIo=i(Yt),on=n(Yt,"P",{});var uC=s(on);gIo=r(uC,"The model class to instantiate is selected based on the "),xle=n(uC,"CODE",{});var MUr=s(xle);hIo=r(MUr,"model_type"),MUr.forEach(t),pIo=r(uC,` property of the config object (either
passed as an argument or loaded from `),Rle=n(uC,"CODE",{});var EUr=s(Rle);_Io=r(EUr,"pretrained_model_name_or_path"),EUr.forEach(t),uIo=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sle=n(uC,"CODE",{});var yUr=s(Sle);bIo=r(yUr,"pretrained_model_name_or_path"),yUr.forEach(t),vIo=r(uC,":"),uC.forEach(t),TIo=i(Yt),DE=n(Yt,"UL",{});var SBe=s(DE);H2=n(SBe,"LI",{});var nEe=s(H2);Ple=n(nEe,"STRONG",{});var wUr=s(Ple);FIo=r(wUr,"speech-encoder-decoder"),wUr.forEach(t),CIo=r(nEe," \u2014 "),lN=n(nEe,"A",{href:!0});var AUr=s(lN);MIo=r(AUr,"SpeechEncoderDecoderModel"),AUr.forEach(t),EIo=r(nEe," (Speech Encoder decoder model)"),nEe.forEach(t),yIo=i(SBe),U2=n(SBe,"LI",{});var sEe=s(U2);$le=n(sEe,"STRONG",{});var LUr=s($le);wIo=r(LUr,"speech_to_text"),LUr.forEach(t),AIo=r(sEe," \u2014 "),iN=n(sEe,"A",{href:!0});var BUr=s(iN);LIo=r(BUr,"Speech2TextForConditionalGeneration"),BUr.forEach(t),BIo=r(sEe," (Speech2Text model)"),sEe.forEach(t),SBe.forEach(t),kIo=i(Yt),J2=n(Yt,"P",{});var lEe=s(J2);xIo=r(lEe,"The model is set in evaluation mode by default using "),Ile=n(lEe,"CODE",{});var kUr=s(Ile);RIo=r(kUr,"model.eval()"),kUr.forEach(t),SIo=r(lEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jle=n(lEe,"CODE",{});var xUr=s(jle);PIo=r(xUr,"model.train()"),xUr.forEach(t),lEe.forEach(t),$Io=i(Yt),Nle=n(Yt,"P",{});var RUr=s(Nle);IIo=r(RUr,"Examples:"),RUr.forEach(t),jIo=i(Yt),m(qE.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),wLe=i(d),Nd=n(d,"H2",{class:!0});var PBe=s(Nd);Y2=n(PBe,"A",{id:!0,class:!0,href:!0});var SUr=s(Y2);Dle=n(SUr,"SPAN",{});var PUr=s(Dle);m(GE.$$.fragment,PUr),PUr.forEach(t),SUr.forEach(t),NIo=i(PBe),qle=n(PBe,"SPAN",{});var $Ur=s(qle);DIo=r($Ur,"AutoModelForAudioXVector"),$Ur.forEach(t),PBe.forEach(t),ALe=i(d),ir=n(d,"DIV",{class:!0});var vl=s(ir);m(OE.$$.fragment,vl),qIo=i(vl),Dd=n(vl,"P",{});var pz=s(Dd);GIo=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Gle=n(pz,"CODE",{});var IUr=s(Gle);OIo=r(IUr,"from_pretrained()"),IUr.forEach(t),XIo=r(pz,"class method or the "),Ole=n(pz,"CODE",{});var jUr=s(Ole);zIo=r(jUr,"from_config()"),jUr.forEach(t),VIo=r(pz,`class
method.`),pz.forEach(t),WIo=i(vl),XE=n(vl,"P",{});var $Be=s(XE);QIo=r($Be,"This class cannot be instantiated directly using "),Xle=n($Be,"CODE",{});var NUr=s(Xle);HIo=r(NUr,"__init__()"),NUr.forEach(t),UIo=r($Be," (throws an error)."),$Be.forEach(t),JIo=i(vl),ot=n(vl,"DIV",{class:!0});var Tl=s(ot);m(zE.$$.fragment,Tl),YIo=i(Tl),zle=n(Tl,"P",{});var DUr=s(zle);KIo=r(DUr,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),DUr.forEach(t),ZIo=i(Tl),qd=n(Tl,"P",{});var _z=s(qd);ejo=r(_z,`Note:
Loading a model from its configuration file does `),Vle=n(_z,"STRONG",{});var qUr=s(Vle);ojo=r(qUr,"not"),qUr.forEach(t),rjo=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wle=n(_z,"CODE",{});var GUr=s(Wle);tjo=r(GUr,"from_pretrained()"),GUr.forEach(t),ajo=r(_z,"to load the model weights."),_z.forEach(t),njo=i(Tl),Qle=n(Tl,"P",{});var OUr=s(Qle);sjo=r(OUr,"Examples:"),OUr.forEach(t),ljo=i(Tl),m(VE.$$.fragment,Tl),Tl.forEach(t),ijo=i(vl),Qe=n(vl,"DIV",{class:!0});var Kt=s(Qe);m(WE.$$.fragment,Kt),djo=i(Kt),Hle=n(Kt,"P",{});var XUr=s(Hle);cjo=r(XUr,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),XUr.forEach(t),fjo=i(Kt),rn=n(Kt,"P",{});var bC=s(rn);mjo=r(bC,"The model class to instantiate is selected based on the "),Ule=n(bC,"CODE",{});var zUr=s(Ule);gjo=r(zUr,"model_type"),zUr.forEach(t),hjo=r(bC,` property of the config object (either
passed as an argument or loaded from `),Jle=n(bC,"CODE",{});var VUr=s(Jle);pjo=r(VUr,"pretrained_model_name_or_path"),VUr.forEach(t),_jo=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=n(bC,"CODE",{});var WUr=s(Yle);ujo=r(WUr,"pretrained_model_name_or_path"),WUr.forEach(t),bjo=r(bC,":"),bC.forEach(t),vjo=i(Kt),Gd=n(Kt,"UL",{});var uz=s(Gd);K2=n(uz,"LI",{});var iEe=s(K2);Kle=n(iEe,"STRONG",{});var QUr=s(Kle);Tjo=r(QUr,"unispeech-sat"),QUr.forEach(t),Fjo=r(iEe," \u2014 "),dN=n(iEe,"A",{href:!0});var HUr=s(dN);Cjo=r(HUr,"UniSpeechSatForXVector"),HUr.forEach(t),Mjo=r(iEe," (UniSpeechSat model)"),iEe.forEach(t),Ejo=i(uz),Z2=n(uz,"LI",{});var dEe=s(Z2);Zle=n(dEe,"STRONG",{});var UUr=s(Zle);yjo=r(UUr,"wav2vec2"),UUr.forEach(t),wjo=r(dEe," \u2014 "),cN=n(dEe,"A",{href:!0});var JUr=s(cN);Ajo=r(JUr,"Wav2Vec2ForXVector"),JUr.forEach(t),Ljo=r(dEe," (Wav2Vec2 model)"),dEe.forEach(t),Bjo=i(uz),ev=n(uz,"LI",{});var cEe=s(ev);eie=n(cEe,"STRONG",{});var YUr=s(eie);kjo=r(YUr,"wavlm"),YUr.forEach(t),xjo=r(cEe," \u2014 "),fN=n(cEe,"A",{href:!0});var KUr=s(fN);Rjo=r(KUr,"WavLMForXVector"),KUr.forEach(t),Sjo=r(cEe," (WavLM model)"),cEe.forEach(t),uz.forEach(t),Pjo=i(Kt),ov=n(Kt,"P",{});var fEe=s(ov);$jo=r(fEe,"The model is set in evaluation mode by default using "),oie=n(fEe,"CODE",{});var ZUr=s(oie);Ijo=r(ZUr,"model.eval()"),ZUr.forEach(t),jjo=r(fEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n(fEe,"CODE",{});var eJr=s(rie);Njo=r(eJr,"model.train()"),eJr.forEach(t),fEe.forEach(t),Djo=i(Kt),tie=n(Kt,"P",{});var oJr=s(tie);qjo=r(oJr,"Examples:"),oJr.forEach(t),Gjo=i(Kt),m(QE.$$.fragment,Kt),Kt.forEach(t),vl.forEach(t),LLe=i(d),Od=n(d,"H2",{class:!0});var IBe=s(Od);rv=n(IBe,"A",{id:!0,class:!0,href:!0});var rJr=s(rv);aie=n(rJr,"SPAN",{});var tJr=s(aie);m(HE.$$.fragment,tJr),tJr.forEach(t),rJr.forEach(t),Ojo=i(IBe),nie=n(IBe,"SPAN",{});var aJr=s(nie);Xjo=r(aJr,"AutoModelForMaskedImageModeling"),aJr.forEach(t),IBe.forEach(t),BLe=i(d),dr=n(d,"DIV",{class:!0});var Fl=s(dr);m(UE.$$.fragment,Fl),zjo=i(Fl),Xd=n(Fl,"P",{});var bz=s(Xd);Vjo=r(bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sie=n(bz,"CODE",{});var nJr=s(sie);Wjo=r(nJr,"from_pretrained()"),nJr.forEach(t),Qjo=r(bz,"class method or the "),lie=n(bz,"CODE",{});var sJr=s(lie);Hjo=r(sJr,"from_config()"),sJr.forEach(t),Ujo=r(bz,`class
method.`),bz.forEach(t),Jjo=i(Fl),JE=n(Fl,"P",{});var jBe=s(JE);Yjo=r(jBe,"This class cannot be instantiated directly using "),iie=n(jBe,"CODE",{});var lJr=s(iie);Kjo=r(lJr,"__init__()"),lJr.forEach(t),Zjo=r(jBe," (throws an error)."),jBe.forEach(t),eNo=i(Fl),rt=n(Fl,"DIV",{class:!0});var Cl=s(rt);m(YE.$$.fragment,Cl),oNo=i(Cl),die=n(Cl,"P",{});var iJr=s(die);rNo=r(iJr,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),iJr.forEach(t),tNo=i(Cl),zd=n(Cl,"P",{});var vz=s(zd);aNo=r(vz,`Note:
Loading a model from its configuration file does `),cie=n(vz,"STRONG",{});var dJr=s(cie);nNo=r(dJr,"not"),dJr.forEach(t),sNo=r(vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=n(vz,"CODE",{});var cJr=s(fie);lNo=r(cJr,"from_pretrained()"),cJr.forEach(t),iNo=r(vz,"to load the model weights."),vz.forEach(t),dNo=i(Cl),mie=n(Cl,"P",{});var fJr=s(mie);cNo=r(fJr,"Examples:"),fJr.forEach(t),fNo=i(Cl),m(KE.$$.fragment,Cl),Cl.forEach(t),mNo=i(Fl),He=n(Fl,"DIV",{class:!0});var Zt=s(He);m(ZE.$$.fragment,Zt),gNo=i(Zt),gie=n(Zt,"P",{});var mJr=s(gie);hNo=r(mJr,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mJr.forEach(t),pNo=i(Zt),tn=n(Zt,"P",{});var vC=s(tn);_No=r(vC,"The model class to instantiate is selected based on the "),hie=n(vC,"CODE",{});var gJr=s(hie);uNo=r(gJr,"model_type"),gJr.forEach(t),bNo=r(vC,` property of the config object (either
passed as an argument or loaded from `),pie=n(vC,"CODE",{});var hJr=s(pie);vNo=r(hJr,"pretrained_model_name_or_path"),hJr.forEach(t),TNo=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=n(vC,"CODE",{});var pJr=s(_ie);FNo=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),CNo=r(vC,":"),vC.forEach(t),MNo=i(Zt),Vd=n(Zt,"UL",{});var Tz=s(Vd);tv=n(Tz,"LI",{});var mEe=s(tv);uie=n(mEe,"STRONG",{});var _Jr=s(uie);ENo=r(_Jr,"deit"),_Jr.forEach(t),yNo=r(mEe," \u2014 "),mN=n(mEe,"A",{href:!0});var uJr=s(mN);wNo=r(uJr,"DeiTForMaskedImageModeling"),uJr.forEach(t),ANo=r(mEe," (DeiT model)"),mEe.forEach(t),LNo=i(Tz),av=n(Tz,"LI",{});var gEe=s(av);bie=n(gEe,"STRONG",{});var bJr=s(bie);BNo=r(bJr,"swin"),bJr.forEach(t),kNo=r(gEe," \u2014 "),gN=n(gEe,"A",{href:!0});var vJr=s(gN);xNo=r(vJr,"SwinForMaskedImageModeling"),vJr.forEach(t),RNo=r(gEe," (Swin model)"),gEe.forEach(t),SNo=i(Tz),nv=n(Tz,"LI",{});var hEe=s(nv);vie=n(hEe,"STRONG",{});var TJr=s(vie);PNo=r(TJr,"vit"),TJr.forEach(t),$No=r(hEe," \u2014 "),hN=n(hEe,"A",{href:!0});var FJr=s(hN);INo=r(FJr,"ViTForMaskedImageModeling"),FJr.forEach(t),jNo=r(hEe," (ViT model)"),hEe.forEach(t),Tz.forEach(t),NNo=i(Zt),sv=n(Zt,"P",{});var pEe=s(sv);DNo=r(pEe,"The model is set in evaluation mode by default using "),Tie=n(pEe,"CODE",{});var CJr=s(Tie);qNo=r(CJr,"model.eval()"),CJr.forEach(t),GNo=r(pEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=n(pEe,"CODE",{});var MJr=s(Fie);ONo=r(MJr,"model.train()"),MJr.forEach(t),pEe.forEach(t),XNo=i(Zt),Cie=n(Zt,"P",{});var EJr=s(Cie);zNo=r(EJr,"Examples:"),EJr.forEach(t),VNo=i(Zt),m(e3.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),kLe=i(d),Wd=n(d,"H2",{class:!0});var NBe=s(Wd);lv=n(NBe,"A",{id:!0,class:!0,href:!0});var yJr=s(lv);Mie=n(yJr,"SPAN",{});var wJr=s(Mie);m(o3.$$.fragment,wJr),wJr.forEach(t),yJr.forEach(t),WNo=i(NBe),Eie=n(NBe,"SPAN",{});var AJr=s(Eie);QNo=r(AJr,"AutoModelForObjectDetection"),AJr.forEach(t),NBe.forEach(t),xLe=i(d),cr=n(d,"DIV",{class:!0});var Ml=s(cr);m(r3.$$.fragment,Ml),HNo=i(Ml),Qd=n(Ml,"P",{});var Fz=s(Qd);UNo=r(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),yie=n(Fz,"CODE",{});var LJr=s(yie);JNo=r(LJr,"from_pretrained()"),LJr.forEach(t),YNo=r(Fz,"class method or the "),wie=n(Fz,"CODE",{});var BJr=s(wie);KNo=r(BJr,"from_config()"),BJr.forEach(t),ZNo=r(Fz,`class
method.`),Fz.forEach(t),eDo=i(Ml),t3=n(Ml,"P",{});var DBe=s(t3);oDo=r(DBe,"This class cannot be instantiated directly using "),Aie=n(DBe,"CODE",{});var kJr=s(Aie);rDo=r(kJr,"__init__()"),kJr.forEach(t),tDo=r(DBe," (throws an error)."),DBe.forEach(t),aDo=i(Ml),tt=n(Ml,"DIV",{class:!0});var El=s(tt);m(a3.$$.fragment,El),nDo=i(El),Lie=n(El,"P",{});var xJr=s(Lie);sDo=r(xJr,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xJr.forEach(t),lDo=i(El),Hd=n(El,"P",{});var Cz=s(Hd);iDo=r(Cz,`Note:
Loading a model from its configuration file does `),Bie=n(Cz,"STRONG",{});var RJr=s(Bie);dDo=r(RJr,"not"),RJr.forEach(t),cDo=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kie=n(Cz,"CODE",{});var SJr=s(kie);fDo=r(SJr,"from_pretrained()"),SJr.forEach(t),mDo=r(Cz,"to load the model weights."),Cz.forEach(t),gDo=i(El),xie=n(El,"P",{});var PJr=s(xie);hDo=r(PJr,"Examples:"),PJr.forEach(t),pDo=i(El),m(n3.$$.fragment,El),El.forEach(t),_Do=i(Ml),Ue=n(Ml,"DIV",{class:!0});var ea=s(Ue);m(s3.$$.fragment,ea),uDo=i(ea),Rie=n(ea,"P",{});var $Jr=s(Rie);bDo=r($Jr,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),$Jr.forEach(t),vDo=i(ea),an=n(ea,"P",{});var TC=s(an);TDo=r(TC,"The model class to instantiate is selected based on the "),Sie=n(TC,"CODE",{});var IJr=s(Sie);FDo=r(IJr,"model_type"),IJr.forEach(t),CDo=r(TC,` property of the config object (either
passed as an argument or loaded from `),Pie=n(TC,"CODE",{});var jJr=s(Pie);MDo=r(jJr,"pretrained_model_name_or_path"),jJr.forEach(t),EDo=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ie=n(TC,"CODE",{});var NJr=s($ie);yDo=r(NJr,"pretrained_model_name_or_path"),NJr.forEach(t),wDo=r(TC,":"),TC.forEach(t),ADo=i(ea),Iie=n(ea,"UL",{});var DJr=s(Iie);iv=n(DJr,"LI",{});var _Ee=s(iv);jie=n(_Ee,"STRONG",{});var qJr=s(jie);LDo=r(qJr,"detr"),qJr.forEach(t),BDo=r(_Ee," \u2014 "),pN=n(_Ee,"A",{href:!0});var GJr=s(pN);kDo=r(GJr,"DetrForObjectDetection"),GJr.forEach(t),xDo=r(_Ee," (DETR model)"),_Ee.forEach(t),DJr.forEach(t),RDo=i(ea),dv=n(ea,"P",{});var uEe=s(dv);SDo=r(uEe,"The model is set in evaluation mode by default using "),Nie=n(uEe,"CODE",{});var OJr=s(Nie);PDo=r(OJr,"model.eval()"),OJr.forEach(t),$Do=r(uEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=n(uEe,"CODE",{});var XJr=s(Die);IDo=r(XJr,"model.train()"),XJr.forEach(t),uEe.forEach(t),jDo=i(ea),qie=n(ea,"P",{});var zJr=s(qie);NDo=r(zJr,"Examples:"),zJr.forEach(t),DDo=i(ea),m(l3.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),RLe=i(d),Ud=n(d,"H2",{class:!0});var qBe=s(Ud);cv=n(qBe,"A",{id:!0,class:!0,href:!0});var VJr=s(cv);Gie=n(VJr,"SPAN",{});var WJr=s(Gie);m(i3.$$.fragment,WJr),WJr.forEach(t),VJr.forEach(t),qDo=i(qBe),Oie=n(qBe,"SPAN",{});var QJr=s(Oie);GDo=r(QJr,"AutoModelForImageSegmentation"),QJr.forEach(t),qBe.forEach(t),SLe=i(d),fr=n(d,"DIV",{class:!0});var yl=s(fr);m(d3.$$.fragment,yl),ODo=i(yl),Jd=n(yl,"P",{});var Mz=s(Jd);XDo=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Xie=n(Mz,"CODE",{});var HJr=s(Xie);zDo=r(HJr,"from_pretrained()"),HJr.forEach(t),VDo=r(Mz,"class method or the "),zie=n(Mz,"CODE",{});var UJr=s(zie);WDo=r(UJr,"from_config()"),UJr.forEach(t),QDo=r(Mz,`class
method.`),Mz.forEach(t),HDo=i(yl),c3=n(yl,"P",{});var GBe=s(c3);UDo=r(GBe,"This class cannot be instantiated directly using "),Vie=n(GBe,"CODE",{});var JJr=s(Vie);JDo=r(JJr,"__init__()"),JJr.forEach(t),YDo=r(GBe," (throws an error)."),GBe.forEach(t),KDo=i(yl),at=n(yl,"DIV",{class:!0});var wl=s(at);m(f3.$$.fragment,wl),ZDo=i(wl),Wie=n(wl,"P",{});var YJr=s(Wie);eqo=r(YJr,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),YJr.forEach(t),oqo=i(wl),Yd=n(wl,"P",{});var Ez=s(Yd);rqo=r(Ez,`Note:
Loading a model from its configuration file does `),Qie=n(Ez,"STRONG",{});var KJr=s(Qie);tqo=r(KJr,"not"),KJr.forEach(t),aqo=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hie=n(Ez,"CODE",{});var ZJr=s(Hie);nqo=r(ZJr,"from_pretrained()"),ZJr.forEach(t),sqo=r(Ez,"to load the model weights."),Ez.forEach(t),lqo=i(wl),Uie=n(wl,"P",{});var eYr=s(Uie);iqo=r(eYr,"Examples:"),eYr.forEach(t),dqo=i(wl),m(m3.$$.fragment,wl),wl.forEach(t),cqo=i(yl),Je=n(yl,"DIV",{class:!0});var oa=s(Je);m(g3.$$.fragment,oa),fqo=i(oa),Jie=n(oa,"P",{});var oYr=s(Jie);mqo=r(oYr,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),oYr.forEach(t),gqo=i(oa),nn=n(oa,"P",{});var FC=s(nn);hqo=r(FC,"The model class to instantiate is selected based on the "),Yie=n(FC,"CODE",{});var rYr=s(Yie);pqo=r(rYr,"model_type"),rYr.forEach(t),_qo=r(FC,` property of the config object (either
passed as an argument or loaded from `),Kie=n(FC,"CODE",{});var tYr=s(Kie);uqo=r(tYr,"pretrained_model_name_or_path"),tYr.forEach(t),bqo=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zie=n(FC,"CODE",{});var aYr=s(Zie);vqo=r(aYr,"pretrained_model_name_or_path"),aYr.forEach(t),Tqo=r(FC,":"),FC.forEach(t),Fqo=i(oa),ede=n(oa,"UL",{});var nYr=s(ede);fv=n(nYr,"LI",{});var bEe=s(fv);ode=n(bEe,"STRONG",{});var sYr=s(ode);Cqo=r(sYr,"detr"),sYr.forEach(t),Mqo=r(bEe," \u2014 "),_N=n(bEe,"A",{href:!0});var lYr=s(_N);Eqo=r(lYr,"DetrForSegmentation"),lYr.forEach(t),yqo=r(bEe," (DETR model)"),bEe.forEach(t),nYr.forEach(t),wqo=i(oa),mv=n(oa,"P",{});var vEe=s(mv);Aqo=r(vEe,"The model is set in evaluation mode by default using "),rde=n(vEe,"CODE",{});var iYr=s(rde);Lqo=r(iYr,"model.eval()"),iYr.forEach(t),Bqo=r(vEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=n(vEe,"CODE",{});var dYr=s(tde);kqo=r(dYr,"model.train()"),dYr.forEach(t),vEe.forEach(t),xqo=i(oa),ade=n(oa,"P",{});var cYr=s(ade);Rqo=r(cYr,"Examples:"),cYr.forEach(t),Sqo=i(oa),m(h3.$$.fragment,oa),oa.forEach(t),yl.forEach(t),PLe=i(d),Kd=n(d,"H2",{class:!0});var OBe=s(Kd);gv=n(OBe,"A",{id:!0,class:!0,href:!0});var fYr=s(gv);nde=n(fYr,"SPAN",{});var mYr=s(nde);m(p3.$$.fragment,mYr),mYr.forEach(t),fYr.forEach(t),Pqo=i(OBe),sde=n(OBe,"SPAN",{});var gYr=s(sde);$qo=r(gYr,"AutoModelForSemanticSegmentation"),gYr.forEach(t),OBe.forEach(t),$Le=i(d),mr=n(d,"DIV",{class:!0});var Al=s(mr);m(_3.$$.fragment,Al),Iqo=i(Al),Zd=n(Al,"P",{});var yz=s(Zd);jqo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),lde=n(yz,"CODE",{});var hYr=s(lde);Nqo=r(hYr,"from_pretrained()"),hYr.forEach(t),Dqo=r(yz,"class method or the "),ide=n(yz,"CODE",{});var pYr=s(ide);qqo=r(pYr,"from_config()"),pYr.forEach(t),Gqo=r(yz,`class
method.`),yz.forEach(t),Oqo=i(Al),u3=n(Al,"P",{});var XBe=s(u3);Xqo=r(XBe,"This class cannot be instantiated directly using "),dde=n(XBe,"CODE",{});var _Yr=s(dde);zqo=r(_Yr,"__init__()"),_Yr.forEach(t),Vqo=r(XBe," (throws an error)."),XBe.forEach(t),Wqo=i(Al),nt=n(Al,"DIV",{class:!0});var Ll=s(nt);m(b3.$$.fragment,Ll),Qqo=i(Ll),cde=n(Ll,"P",{});var uYr=s(cde);Hqo=r(uYr,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),uYr.forEach(t),Uqo=i(Ll),ec=n(Ll,"P",{});var wz=s(ec);Jqo=r(wz,`Note:
Loading a model from its configuration file does `),fde=n(wz,"STRONG",{});var bYr=s(fde);Yqo=r(bYr,"not"),bYr.forEach(t),Kqo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),mde=n(wz,"CODE",{});var vYr=s(mde);Zqo=r(vYr,"from_pretrained()"),vYr.forEach(t),eGo=r(wz,"to load the model weights."),wz.forEach(t),oGo=i(Ll),gde=n(Ll,"P",{});var TYr=s(gde);rGo=r(TYr,"Examples:"),TYr.forEach(t),tGo=i(Ll),m(v3.$$.fragment,Ll),Ll.forEach(t),aGo=i(Al),Ye=n(Al,"DIV",{class:!0});var ra=s(Ye);m(T3.$$.fragment,ra),nGo=i(ra),hde=n(ra,"P",{});var FYr=s(hde);sGo=r(FYr,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),FYr.forEach(t),lGo=i(ra),sn=n(ra,"P",{});var CC=s(sn);iGo=r(CC,"The model class to instantiate is selected based on the "),pde=n(CC,"CODE",{});var CYr=s(pde);dGo=r(CYr,"model_type"),CYr.forEach(t),cGo=r(CC,` property of the config object (either
passed as an argument or loaded from `),_de=n(CC,"CODE",{});var MYr=s(_de);fGo=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),mGo=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=n(CC,"CODE",{});var EYr=s(ude);gGo=r(EYr,"pretrained_model_name_or_path"),EYr.forEach(t),hGo=r(CC,":"),CC.forEach(t),pGo=i(ra),F3=n(ra,"UL",{});var zBe=s(F3);hv=n(zBe,"LI",{});var TEe=s(hv);bde=n(TEe,"STRONG",{});var yYr=s(bde);_Go=r(yYr,"beit"),yYr.forEach(t),uGo=r(TEe," \u2014 "),uN=n(TEe,"A",{href:!0});var wYr=s(uN);bGo=r(wYr,"BeitForSemanticSegmentation"),wYr.forEach(t),vGo=r(TEe," (BEiT model)"),TEe.forEach(t),TGo=i(zBe),pv=n(zBe,"LI",{});var FEe=s(pv);vde=n(FEe,"STRONG",{});var AYr=s(vde);FGo=r(AYr,"segformer"),AYr.forEach(t),CGo=r(FEe," \u2014 "),bN=n(FEe,"A",{href:!0});var LYr=s(bN);MGo=r(LYr,"SegformerForSemanticSegmentation"),LYr.forEach(t),EGo=r(FEe," (SegFormer model)"),FEe.forEach(t),zBe.forEach(t),yGo=i(ra),_v=n(ra,"P",{});var CEe=s(_v);wGo=r(CEe,"The model is set in evaluation mode by default using "),Tde=n(CEe,"CODE",{});var BYr=s(Tde);AGo=r(BYr,"model.eval()"),BYr.forEach(t),LGo=r(CEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fde=n(CEe,"CODE",{});var kYr=s(Fde);BGo=r(kYr,"model.train()"),kYr.forEach(t),CEe.forEach(t),kGo=i(ra),Cde=n(ra,"P",{});var xYr=s(Cde);xGo=r(xYr,"Examples:"),xYr.forEach(t),RGo=i(ra),m(C3.$$.fragment,ra),ra.forEach(t),Al.forEach(t),ILe=i(d),oc=n(d,"H2",{class:!0});var VBe=s(oc);uv=n(VBe,"A",{id:!0,class:!0,href:!0});var RYr=s(uv);Mde=n(RYr,"SPAN",{});var SYr=s(Mde);m(M3.$$.fragment,SYr),SYr.forEach(t),RYr.forEach(t),SGo=i(VBe),Ede=n(VBe,"SPAN",{});var PYr=s(Ede);PGo=r(PYr,"TFAutoModel"),PYr.forEach(t),VBe.forEach(t),jLe=i(d),gr=n(d,"DIV",{class:!0});var Bl=s(gr);m(E3.$$.fragment,Bl),$Go=i(Bl),rc=n(Bl,"P",{});var Az=s(rc);IGo=r(Az,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yde=n(Az,"CODE",{});var $Yr=s(yde);jGo=r($Yr,"from_pretrained()"),$Yr.forEach(t),NGo=r(Az,"class method or the "),wde=n(Az,"CODE",{});var IYr=s(wde);DGo=r(IYr,"from_config()"),IYr.forEach(t),qGo=r(Az,`class
method.`),Az.forEach(t),GGo=i(Bl),y3=n(Bl,"P",{});var WBe=s(y3);OGo=r(WBe,"This class cannot be instantiated directly using "),Ade=n(WBe,"CODE",{});var jYr=s(Ade);XGo=r(jYr,"__init__()"),jYr.forEach(t),zGo=r(WBe," (throws an error)."),WBe.forEach(t),VGo=i(Bl),st=n(Bl,"DIV",{class:!0});var kl=s(st);m(w3.$$.fragment,kl),WGo=i(kl),Lde=n(kl,"P",{});var NYr=s(Lde);QGo=r(NYr,"Instantiates one of the base model classes of the library from a configuration."),NYr.forEach(t),HGo=i(kl),tc=n(kl,"P",{});var Lz=s(tc);UGo=r(Lz,`Note:
Loading a model from its configuration file does `),Bde=n(Lz,"STRONG",{});var DYr=s(Bde);JGo=r(DYr,"not"),DYr.forEach(t),YGo=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kde=n(Lz,"CODE",{});var qYr=s(kde);KGo=r(qYr,"from_pretrained()"),qYr.forEach(t),ZGo=r(Lz,"to load the model weights."),Lz.forEach(t),eOo=i(kl),xde=n(kl,"P",{});var GYr=s(xde);oOo=r(GYr,"Examples:"),GYr.forEach(t),rOo=i(kl),m(A3.$$.fragment,kl),kl.forEach(t),tOo=i(Bl),go=n(Bl,"DIV",{class:!0});var ca=s(go);m(L3.$$.fragment,ca),aOo=i(ca),Rde=n(ca,"P",{});var OYr=s(Rde);nOo=r(OYr,"Instantiate one of the base model classes of the library from a pretrained model."),OYr.forEach(t),sOo=i(ca),ln=n(ca,"P",{});var MC=s(ln);lOo=r(MC,"The model class to instantiate is selected based on the "),Sde=n(MC,"CODE",{});var XYr=s(Sde);iOo=r(XYr,"model_type"),XYr.forEach(t),dOo=r(MC,` property of the config object (either
passed as an argument or loaded from `),Pde=n(MC,"CODE",{});var zYr=s(Pde);cOo=r(zYr,"pretrained_model_name_or_path"),zYr.forEach(t),fOo=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=n(MC,"CODE",{});var VYr=s($de);mOo=r(VYr,"pretrained_model_name_or_path"),VYr.forEach(t),gOo=r(MC,":"),MC.forEach(t),hOo=i(ca),B=n(ca,"UL",{});var k=s(B);bv=n(k,"LI",{});var MEe=s(bv);Ide=n(MEe,"STRONG",{});var WYr=s(Ide);pOo=r(WYr,"albert"),WYr.forEach(t),_Oo=r(MEe," \u2014 "),vN=n(MEe,"A",{href:!0});var QYr=s(vN);uOo=r(QYr,"TFAlbertModel"),QYr.forEach(t),bOo=r(MEe," (ALBERT model)"),MEe.forEach(t),vOo=i(k),vv=n(k,"LI",{});var EEe=s(vv);jde=n(EEe,"STRONG",{});var HYr=s(jde);TOo=r(HYr,"bart"),HYr.forEach(t),FOo=r(EEe," \u2014 "),TN=n(EEe,"A",{href:!0});var UYr=s(TN);COo=r(UYr,"TFBartModel"),UYr.forEach(t),MOo=r(EEe," (BART model)"),EEe.forEach(t),EOo=i(k),Tv=n(k,"LI",{});var yEe=s(Tv);Nde=n(yEe,"STRONG",{});var JYr=s(Nde);yOo=r(JYr,"bert"),JYr.forEach(t),wOo=r(yEe," \u2014 "),FN=n(yEe,"A",{href:!0});var YYr=s(FN);AOo=r(YYr,"TFBertModel"),YYr.forEach(t),LOo=r(yEe," (BERT model)"),yEe.forEach(t),BOo=i(k),Fv=n(k,"LI",{});var wEe=s(Fv);Dde=n(wEe,"STRONG",{});var KYr=s(Dde);kOo=r(KYr,"blenderbot"),KYr.forEach(t),xOo=r(wEe," \u2014 "),CN=n(wEe,"A",{href:!0});var ZYr=s(CN);ROo=r(ZYr,"TFBlenderbotModel"),ZYr.forEach(t),SOo=r(wEe," (Blenderbot model)"),wEe.forEach(t),POo=i(k),Cv=n(k,"LI",{});var AEe=s(Cv);qde=n(AEe,"STRONG",{});var eKr=s(qde);$Oo=r(eKr,"blenderbot-small"),eKr.forEach(t),IOo=r(AEe," \u2014 "),MN=n(AEe,"A",{href:!0});var oKr=s(MN);jOo=r(oKr,"TFBlenderbotSmallModel"),oKr.forEach(t),NOo=r(AEe," (BlenderbotSmall model)"),AEe.forEach(t),DOo=i(k),Mv=n(k,"LI",{});var LEe=s(Mv);Gde=n(LEe,"STRONG",{});var rKr=s(Gde);qOo=r(rKr,"camembert"),rKr.forEach(t),GOo=r(LEe," \u2014 "),EN=n(LEe,"A",{href:!0});var tKr=s(EN);OOo=r(tKr,"TFCamembertModel"),tKr.forEach(t),XOo=r(LEe," (CamemBERT model)"),LEe.forEach(t),zOo=i(k),Ev=n(k,"LI",{});var BEe=s(Ev);Ode=n(BEe,"STRONG",{});var aKr=s(Ode);VOo=r(aKr,"clip"),aKr.forEach(t),WOo=r(BEe," \u2014 "),yN=n(BEe,"A",{href:!0});var nKr=s(yN);QOo=r(nKr,"TFCLIPModel"),nKr.forEach(t),HOo=r(BEe," (CLIP model)"),BEe.forEach(t),UOo=i(k),yv=n(k,"LI",{});var kEe=s(yv);Xde=n(kEe,"STRONG",{});var sKr=s(Xde);JOo=r(sKr,"convbert"),sKr.forEach(t),YOo=r(kEe," \u2014 "),wN=n(kEe,"A",{href:!0});var lKr=s(wN);KOo=r(lKr,"TFConvBertModel"),lKr.forEach(t),ZOo=r(kEe," (ConvBERT model)"),kEe.forEach(t),eXo=i(k),wv=n(k,"LI",{});var xEe=s(wv);zde=n(xEe,"STRONG",{});var iKr=s(zde);oXo=r(iKr,"ctrl"),iKr.forEach(t),rXo=r(xEe," \u2014 "),AN=n(xEe,"A",{href:!0});var dKr=s(AN);tXo=r(dKr,"TFCTRLModel"),dKr.forEach(t),aXo=r(xEe," (CTRL model)"),xEe.forEach(t),nXo=i(k),Av=n(k,"LI",{});var REe=s(Av);Vde=n(REe,"STRONG",{});var cKr=s(Vde);sXo=r(cKr,"deberta"),cKr.forEach(t),lXo=r(REe," \u2014 "),LN=n(REe,"A",{href:!0});var fKr=s(LN);iXo=r(fKr,"TFDebertaModel"),fKr.forEach(t),dXo=r(REe," (DeBERTa model)"),REe.forEach(t),cXo=i(k),Lv=n(k,"LI",{});var SEe=s(Lv);Wde=n(SEe,"STRONG",{});var mKr=s(Wde);fXo=r(mKr,"deberta-v2"),mKr.forEach(t),mXo=r(SEe," \u2014 "),BN=n(SEe,"A",{href:!0});var gKr=s(BN);gXo=r(gKr,"TFDebertaV2Model"),gKr.forEach(t),hXo=r(SEe," (DeBERTa-v2 model)"),SEe.forEach(t),pXo=i(k),Bv=n(k,"LI",{});var PEe=s(Bv);Qde=n(PEe,"STRONG",{});var hKr=s(Qde);_Xo=r(hKr,"distilbert"),hKr.forEach(t),uXo=r(PEe," \u2014 "),kN=n(PEe,"A",{href:!0});var pKr=s(kN);bXo=r(pKr,"TFDistilBertModel"),pKr.forEach(t),vXo=r(PEe," (DistilBERT model)"),PEe.forEach(t),TXo=i(k),kv=n(k,"LI",{});var $Ee=s(kv);Hde=n($Ee,"STRONG",{});var _Kr=s(Hde);FXo=r(_Kr,"dpr"),_Kr.forEach(t),CXo=r($Ee," \u2014 "),xN=n($Ee,"A",{href:!0});var uKr=s(xN);MXo=r(uKr,"TFDPRQuestionEncoder"),uKr.forEach(t),EXo=r($Ee," (DPR model)"),$Ee.forEach(t),yXo=i(k),xv=n(k,"LI",{});var IEe=s(xv);Ude=n(IEe,"STRONG",{});var bKr=s(Ude);wXo=r(bKr,"electra"),bKr.forEach(t),AXo=r(IEe," \u2014 "),RN=n(IEe,"A",{href:!0});var vKr=s(RN);LXo=r(vKr,"TFElectraModel"),vKr.forEach(t),BXo=r(IEe," (ELECTRA model)"),IEe.forEach(t),kXo=i(k),Rv=n(k,"LI",{});var jEe=s(Rv);Jde=n(jEe,"STRONG",{});var TKr=s(Jde);xXo=r(TKr,"flaubert"),TKr.forEach(t),RXo=r(jEe," \u2014 "),SN=n(jEe,"A",{href:!0});var FKr=s(SN);SXo=r(FKr,"TFFlaubertModel"),FKr.forEach(t),PXo=r(jEe," (FlauBERT model)"),jEe.forEach(t),$Xo=i(k),Ss=n(k,"LI",{});var R0=s(Ss);Yde=n(R0,"STRONG",{});var CKr=s(Yde);IXo=r(CKr,"funnel"),CKr.forEach(t),jXo=r(R0," \u2014 "),PN=n(R0,"A",{href:!0});var MKr=s(PN);NXo=r(MKr,"TFFunnelModel"),MKr.forEach(t),DXo=r(R0," or "),$N=n(R0,"A",{href:!0});var EKr=s($N);qXo=r(EKr,"TFFunnelBaseModel"),EKr.forEach(t),GXo=r(R0," (Funnel Transformer model)"),R0.forEach(t),OXo=i(k),Sv=n(k,"LI",{});var NEe=s(Sv);Kde=n(NEe,"STRONG",{});var yKr=s(Kde);XXo=r(yKr,"gpt2"),yKr.forEach(t),zXo=r(NEe," \u2014 "),IN=n(NEe,"A",{href:!0});var wKr=s(IN);VXo=r(wKr,"TFGPT2Model"),wKr.forEach(t),WXo=r(NEe," (OpenAI GPT-2 model)"),NEe.forEach(t),QXo=i(k),Pv=n(k,"LI",{});var DEe=s(Pv);Zde=n(DEe,"STRONG",{});var AKr=s(Zde);HXo=r(AKr,"hubert"),AKr.forEach(t),UXo=r(DEe," \u2014 "),jN=n(DEe,"A",{href:!0});var LKr=s(jN);JXo=r(LKr,"TFHubertModel"),LKr.forEach(t),YXo=r(DEe," (Hubert model)"),DEe.forEach(t),KXo=i(k),$v=n(k,"LI",{});var qEe=s($v);ece=n(qEe,"STRONG",{});var BKr=s(ece);ZXo=r(BKr,"layoutlm"),BKr.forEach(t),ezo=r(qEe," \u2014 "),NN=n(qEe,"A",{href:!0});var kKr=s(NN);ozo=r(kKr,"TFLayoutLMModel"),kKr.forEach(t),rzo=r(qEe," (LayoutLM model)"),qEe.forEach(t),tzo=i(k),Iv=n(k,"LI",{});var GEe=s(Iv);oce=n(GEe,"STRONG",{});var xKr=s(oce);azo=r(xKr,"led"),xKr.forEach(t),nzo=r(GEe," \u2014 "),DN=n(GEe,"A",{href:!0});var RKr=s(DN);szo=r(RKr,"TFLEDModel"),RKr.forEach(t),lzo=r(GEe," (LED model)"),GEe.forEach(t),izo=i(k),jv=n(k,"LI",{});var OEe=s(jv);rce=n(OEe,"STRONG",{});var SKr=s(rce);dzo=r(SKr,"longformer"),SKr.forEach(t),czo=r(OEe," \u2014 "),qN=n(OEe,"A",{href:!0});var PKr=s(qN);fzo=r(PKr,"TFLongformerModel"),PKr.forEach(t),mzo=r(OEe," (Longformer model)"),OEe.forEach(t),gzo=i(k),Nv=n(k,"LI",{});var XEe=s(Nv);tce=n(XEe,"STRONG",{});var $Kr=s(tce);hzo=r($Kr,"lxmert"),$Kr.forEach(t),pzo=r(XEe," \u2014 "),GN=n(XEe,"A",{href:!0});var IKr=s(GN);_zo=r(IKr,"TFLxmertModel"),IKr.forEach(t),uzo=r(XEe," (LXMERT model)"),XEe.forEach(t),bzo=i(k),Dv=n(k,"LI",{});var zEe=s(Dv);ace=n(zEe,"STRONG",{});var jKr=s(ace);vzo=r(jKr,"marian"),jKr.forEach(t),Tzo=r(zEe," \u2014 "),ON=n(zEe,"A",{href:!0});var NKr=s(ON);Fzo=r(NKr,"TFMarianModel"),NKr.forEach(t),Czo=r(zEe," (Marian model)"),zEe.forEach(t),Mzo=i(k),qv=n(k,"LI",{});var VEe=s(qv);nce=n(VEe,"STRONG",{});var DKr=s(nce);Ezo=r(DKr,"mbart"),DKr.forEach(t),yzo=r(VEe," \u2014 "),XN=n(VEe,"A",{href:!0});var qKr=s(XN);wzo=r(qKr,"TFMBartModel"),qKr.forEach(t),Azo=r(VEe," (mBART model)"),VEe.forEach(t),Lzo=i(k),Gv=n(k,"LI",{});var WEe=s(Gv);sce=n(WEe,"STRONG",{});var GKr=s(sce);Bzo=r(GKr,"mobilebert"),GKr.forEach(t),kzo=r(WEe," \u2014 "),zN=n(WEe,"A",{href:!0});var OKr=s(zN);xzo=r(OKr,"TFMobileBertModel"),OKr.forEach(t),Rzo=r(WEe," (MobileBERT model)"),WEe.forEach(t),Szo=i(k),Ov=n(k,"LI",{});var QEe=s(Ov);lce=n(QEe,"STRONG",{});var XKr=s(lce);Pzo=r(XKr,"mpnet"),XKr.forEach(t),$zo=r(QEe," \u2014 "),VN=n(QEe,"A",{href:!0});var zKr=s(VN);Izo=r(zKr,"TFMPNetModel"),zKr.forEach(t),jzo=r(QEe," (MPNet model)"),QEe.forEach(t),Nzo=i(k),Xv=n(k,"LI",{});var HEe=s(Xv);ice=n(HEe,"STRONG",{});var VKr=s(ice);Dzo=r(VKr,"mt5"),VKr.forEach(t),qzo=r(HEe," \u2014 "),WN=n(HEe,"A",{href:!0});var WKr=s(WN);Gzo=r(WKr,"TFMT5Model"),WKr.forEach(t),Ozo=r(HEe," (mT5 model)"),HEe.forEach(t),Xzo=i(k),zv=n(k,"LI",{});var UEe=s(zv);dce=n(UEe,"STRONG",{});var QKr=s(dce);zzo=r(QKr,"openai-gpt"),QKr.forEach(t),Vzo=r(UEe," \u2014 "),QN=n(UEe,"A",{href:!0});var HKr=s(QN);Wzo=r(HKr,"TFOpenAIGPTModel"),HKr.forEach(t),Qzo=r(UEe," (OpenAI GPT model)"),UEe.forEach(t),Hzo=i(k),Vv=n(k,"LI",{});var JEe=s(Vv);cce=n(JEe,"STRONG",{});var UKr=s(cce);Uzo=r(UKr,"pegasus"),UKr.forEach(t),Jzo=r(JEe," \u2014 "),HN=n(JEe,"A",{href:!0});var JKr=s(HN);Yzo=r(JKr,"TFPegasusModel"),JKr.forEach(t),Kzo=r(JEe," (Pegasus model)"),JEe.forEach(t),Zzo=i(k),Wv=n(k,"LI",{});var YEe=s(Wv);fce=n(YEe,"STRONG",{});var YKr=s(fce);eVo=r(YKr,"rembert"),YKr.forEach(t),oVo=r(YEe," \u2014 "),UN=n(YEe,"A",{href:!0});var KKr=s(UN);rVo=r(KKr,"TFRemBertModel"),KKr.forEach(t),tVo=r(YEe," (RemBERT model)"),YEe.forEach(t),aVo=i(k),Qv=n(k,"LI",{});var KEe=s(Qv);mce=n(KEe,"STRONG",{});var ZKr=s(mce);nVo=r(ZKr,"roberta"),ZKr.forEach(t),sVo=r(KEe," \u2014 "),JN=n(KEe,"A",{href:!0});var eZr=s(JN);lVo=r(eZr,"TFRobertaModel"),eZr.forEach(t),iVo=r(KEe," (RoBERTa model)"),KEe.forEach(t),dVo=i(k),Hv=n(k,"LI",{});var ZEe=s(Hv);gce=n(ZEe,"STRONG",{});var oZr=s(gce);cVo=r(oZr,"roformer"),oZr.forEach(t),fVo=r(ZEe," \u2014 "),YN=n(ZEe,"A",{href:!0});var rZr=s(YN);mVo=r(rZr,"TFRoFormerModel"),rZr.forEach(t),gVo=r(ZEe," (RoFormer model)"),ZEe.forEach(t),hVo=i(k),Uv=n(k,"LI",{});var e3e=s(Uv);hce=n(e3e,"STRONG",{});var tZr=s(hce);pVo=r(tZr,"speech_to_text"),tZr.forEach(t),_Vo=r(e3e," \u2014 "),KN=n(e3e,"A",{href:!0});var aZr=s(KN);uVo=r(aZr,"TFSpeech2TextModel"),aZr.forEach(t),bVo=r(e3e," (Speech2Text model)"),e3e.forEach(t),vVo=i(k),Jv=n(k,"LI",{});var o3e=s(Jv);pce=n(o3e,"STRONG",{});var nZr=s(pce);TVo=r(nZr,"t5"),nZr.forEach(t),FVo=r(o3e," \u2014 "),ZN=n(o3e,"A",{href:!0});var sZr=s(ZN);CVo=r(sZr,"TFT5Model"),sZr.forEach(t),MVo=r(o3e," (T5 model)"),o3e.forEach(t),EVo=i(k),Yv=n(k,"LI",{});var r3e=s(Yv);_ce=n(r3e,"STRONG",{});var lZr=s(_ce);yVo=r(lZr,"tapas"),lZr.forEach(t),wVo=r(r3e," \u2014 "),eD=n(r3e,"A",{href:!0});var iZr=s(eD);AVo=r(iZr,"TFTapasModel"),iZr.forEach(t),LVo=r(r3e," (TAPAS model)"),r3e.forEach(t),BVo=i(k),Kv=n(k,"LI",{});var t3e=s(Kv);uce=n(t3e,"STRONG",{});var dZr=s(uce);kVo=r(dZr,"transfo-xl"),dZr.forEach(t),xVo=r(t3e," \u2014 "),oD=n(t3e,"A",{href:!0});var cZr=s(oD);RVo=r(cZr,"TFTransfoXLModel"),cZr.forEach(t),SVo=r(t3e," (Transformer-XL model)"),t3e.forEach(t),PVo=i(k),Zv=n(k,"LI",{});var a3e=s(Zv);bce=n(a3e,"STRONG",{});var fZr=s(bce);$Vo=r(fZr,"vit"),fZr.forEach(t),IVo=r(a3e," \u2014 "),rD=n(a3e,"A",{href:!0});var mZr=s(rD);jVo=r(mZr,"TFViTModel"),mZr.forEach(t),NVo=r(a3e," (ViT model)"),a3e.forEach(t),DVo=i(k),e6=n(k,"LI",{});var n3e=s(e6);vce=n(n3e,"STRONG",{});var gZr=s(vce);qVo=r(gZr,"wav2vec2"),gZr.forEach(t),GVo=r(n3e," \u2014 "),tD=n(n3e,"A",{href:!0});var hZr=s(tD);OVo=r(hZr,"TFWav2Vec2Model"),hZr.forEach(t),XVo=r(n3e," (Wav2Vec2 model)"),n3e.forEach(t),zVo=i(k),o6=n(k,"LI",{});var s3e=s(o6);Tce=n(s3e,"STRONG",{});var pZr=s(Tce);VVo=r(pZr,"xlm"),pZr.forEach(t),WVo=r(s3e," \u2014 "),aD=n(s3e,"A",{href:!0});var _Zr=s(aD);QVo=r(_Zr,"TFXLMModel"),_Zr.forEach(t),HVo=r(s3e," (XLM model)"),s3e.forEach(t),UVo=i(k),r6=n(k,"LI",{});var l3e=s(r6);Fce=n(l3e,"STRONG",{});var uZr=s(Fce);JVo=r(uZr,"xlm-roberta"),uZr.forEach(t),YVo=r(l3e," \u2014 "),nD=n(l3e,"A",{href:!0});var bZr=s(nD);KVo=r(bZr,"TFXLMRobertaModel"),bZr.forEach(t),ZVo=r(l3e," (XLM-RoBERTa model)"),l3e.forEach(t),eWo=i(k),t6=n(k,"LI",{});var i3e=s(t6);Cce=n(i3e,"STRONG",{});var vZr=s(Cce);oWo=r(vZr,"xlnet"),vZr.forEach(t),rWo=r(i3e," \u2014 "),sD=n(i3e,"A",{href:!0});var TZr=s(sD);tWo=r(TZr,"TFXLNetModel"),TZr.forEach(t),aWo=r(i3e," (XLNet model)"),i3e.forEach(t),k.forEach(t),nWo=i(ca),Mce=n(ca,"P",{});var FZr=s(Mce);sWo=r(FZr,"Examples:"),FZr.forEach(t),lWo=i(ca),m(B3.$$.fragment,ca),ca.forEach(t),Bl.forEach(t),NLe=i(d),ac=n(d,"H2",{class:!0});var QBe=s(ac);a6=n(QBe,"A",{id:!0,class:!0,href:!0});var CZr=s(a6);Ece=n(CZr,"SPAN",{});var MZr=s(Ece);m(k3.$$.fragment,MZr),MZr.forEach(t),CZr.forEach(t),iWo=i(QBe),yce=n(QBe,"SPAN",{});var EZr=s(yce);dWo=r(EZr,"TFAutoModelForPreTraining"),EZr.forEach(t),QBe.forEach(t),DLe=i(d),hr=n(d,"DIV",{class:!0});var xl=s(hr);m(x3.$$.fragment,xl),cWo=i(xl),nc=n(xl,"P",{});var Bz=s(nc);fWo=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wce=n(Bz,"CODE",{});var yZr=s(wce);mWo=r(yZr,"from_pretrained()"),yZr.forEach(t),gWo=r(Bz,"class method or the "),Ace=n(Bz,"CODE",{});var wZr=s(Ace);hWo=r(wZr,"from_config()"),wZr.forEach(t),pWo=r(Bz,`class
method.`),Bz.forEach(t),_Wo=i(xl),R3=n(xl,"P",{});var HBe=s(R3);uWo=r(HBe,"This class cannot be instantiated directly using "),Lce=n(HBe,"CODE",{});var AZr=s(Lce);bWo=r(AZr,"__init__()"),AZr.forEach(t),vWo=r(HBe," (throws an error)."),HBe.forEach(t),TWo=i(xl),lt=n(xl,"DIV",{class:!0});var Rl=s(lt);m(S3.$$.fragment,Rl),FWo=i(Rl),Bce=n(Rl,"P",{});var LZr=s(Bce);CWo=r(LZr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),LZr.forEach(t),MWo=i(Rl),sc=n(Rl,"P",{});var kz=s(sc);EWo=r(kz,`Note:
Loading a model from its configuration file does `),kce=n(kz,"STRONG",{});var BZr=s(kce);yWo=r(BZr,"not"),BZr.forEach(t),wWo=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),xce=n(kz,"CODE",{});var kZr=s(xce);AWo=r(kZr,"from_pretrained()"),kZr.forEach(t),LWo=r(kz,"to load the model weights."),kz.forEach(t),BWo=i(Rl),Rce=n(Rl,"P",{});var xZr=s(Rce);kWo=r(xZr,"Examples:"),xZr.forEach(t),xWo=i(Rl),m(P3.$$.fragment,Rl),Rl.forEach(t),RWo=i(xl),ho=n(xl,"DIV",{class:!0});var fa=s(ho);m($3.$$.fragment,fa),SWo=i(fa),Sce=n(fa,"P",{});var RZr=s(Sce);PWo=r(RZr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),RZr.forEach(t),$Wo=i(fa),dn=n(fa,"P",{});var EC=s(dn);IWo=r(EC,"The model class to instantiate is selected based on the "),Pce=n(EC,"CODE",{});var SZr=s(Pce);jWo=r(SZr,"model_type"),SZr.forEach(t),NWo=r(EC,` property of the config object (either
passed as an argument or loaded from `),$ce=n(EC,"CODE",{});var PZr=s($ce);DWo=r(PZr,"pretrained_model_name_or_path"),PZr.forEach(t),qWo=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=n(EC,"CODE",{});var $Zr=s(Ice);GWo=r($Zr,"pretrained_model_name_or_path"),$Zr.forEach(t),OWo=r(EC,":"),EC.forEach(t),XWo=i(fa),H=n(fa,"UL",{});var U=s(H);n6=n(U,"LI",{});var d3e=s(n6);jce=n(d3e,"STRONG",{});var IZr=s(jce);zWo=r(IZr,"albert"),IZr.forEach(t),VWo=r(d3e," \u2014 "),lD=n(d3e,"A",{href:!0});var jZr=s(lD);WWo=r(jZr,"TFAlbertForPreTraining"),jZr.forEach(t),QWo=r(d3e," (ALBERT model)"),d3e.forEach(t),HWo=i(U),s6=n(U,"LI",{});var c3e=s(s6);Nce=n(c3e,"STRONG",{});var NZr=s(Nce);UWo=r(NZr,"bart"),NZr.forEach(t),JWo=r(c3e," \u2014 "),iD=n(c3e,"A",{href:!0});var DZr=s(iD);YWo=r(DZr,"TFBartForConditionalGeneration"),DZr.forEach(t),KWo=r(c3e," (BART model)"),c3e.forEach(t),ZWo=i(U),l6=n(U,"LI",{});var f3e=s(l6);Dce=n(f3e,"STRONG",{});var qZr=s(Dce);eQo=r(qZr,"bert"),qZr.forEach(t),oQo=r(f3e," \u2014 "),dD=n(f3e,"A",{href:!0});var GZr=s(dD);rQo=r(GZr,"TFBertForPreTraining"),GZr.forEach(t),tQo=r(f3e," (BERT model)"),f3e.forEach(t),aQo=i(U),i6=n(U,"LI",{});var m3e=s(i6);qce=n(m3e,"STRONG",{});var OZr=s(qce);nQo=r(OZr,"camembert"),OZr.forEach(t),sQo=r(m3e," \u2014 "),cD=n(m3e,"A",{href:!0});var XZr=s(cD);lQo=r(XZr,"TFCamembertForMaskedLM"),XZr.forEach(t),iQo=r(m3e," (CamemBERT model)"),m3e.forEach(t),dQo=i(U),d6=n(U,"LI",{});var g3e=s(d6);Gce=n(g3e,"STRONG",{});var zZr=s(Gce);cQo=r(zZr,"ctrl"),zZr.forEach(t),fQo=r(g3e," \u2014 "),fD=n(g3e,"A",{href:!0});var VZr=s(fD);mQo=r(VZr,"TFCTRLLMHeadModel"),VZr.forEach(t),gQo=r(g3e," (CTRL model)"),g3e.forEach(t),hQo=i(U),c6=n(U,"LI",{});var h3e=s(c6);Oce=n(h3e,"STRONG",{});var WZr=s(Oce);pQo=r(WZr,"distilbert"),WZr.forEach(t),_Qo=r(h3e," \u2014 "),mD=n(h3e,"A",{href:!0});var QZr=s(mD);uQo=r(QZr,"TFDistilBertForMaskedLM"),QZr.forEach(t),bQo=r(h3e," (DistilBERT model)"),h3e.forEach(t),vQo=i(U),f6=n(U,"LI",{});var p3e=s(f6);Xce=n(p3e,"STRONG",{});var HZr=s(Xce);TQo=r(HZr,"electra"),HZr.forEach(t),FQo=r(p3e," \u2014 "),gD=n(p3e,"A",{href:!0});var UZr=s(gD);CQo=r(UZr,"TFElectraForPreTraining"),UZr.forEach(t),MQo=r(p3e," (ELECTRA model)"),p3e.forEach(t),EQo=i(U),m6=n(U,"LI",{});var _3e=s(m6);zce=n(_3e,"STRONG",{});var JZr=s(zce);yQo=r(JZr,"flaubert"),JZr.forEach(t),wQo=r(_3e," \u2014 "),hD=n(_3e,"A",{href:!0});var YZr=s(hD);AQo=r(YZr,"TFFlaubertWithLMHeadModel"),YZr.forEach(t),LQo=r(_3e," (FlauBERT model)"),_3e.forEach(t),BQo=i(U),g6=n(U,"LI",{});var u3e=s(g6);Vce=n(u3e,"STRONG",{});var KZr=s(Vce);kQo=r(KZr,"funnel"),KZr.forEach(t),xQo=r(u3e," \u2014 "),pD=n(u3e,"A",{href:!0});var ZZr=s(pD);RQo=r(ZZr,"TFFunnelForPreTraining"),ZZr.forEach(t),SQo=r(u3e," (Funnel Transformer model)"),u3e.forEach(t),PQo=i(U),h6=n(U,"LI",{});var b3e=s(h6);Wce=n(b3e,"STRONG",{});var eet=s(Wce);$Qo=r(eet,"gpt2"),eet.forEach(t),IQo=r(b3e," \u2014 "),_D=n(b3e,"A",{href:!0});var oet=s(_D);jQo=r(oet,"TFGPT2LMHeadModel"),oet.forEach(t),NQo=r(b3e," (OpenAI GPT-2 model)"),b3e.forEach(t),DQo=i(U),p6=n(U,"LI",{});var v3e=s(p6);Qce=n(v3e,"STRONG",{});var ret=s(Qce);qQo=r(ret,"layoutlm"),ret.forEach(t),GQo=r(v3e," \u2014 "),uD=n(v3e,"A",{href:!0});var tet=s(uD);OQo=r(tet,"TFLayoutLMForMaskedLM"),tet.forEach(t),XQo=r(v3e," (LayoutLM model)"),v3e.forEach(t),zQo=i(U),_6=n(U,"LI",{});var T3e=s(_6);Hce=n(T3e,"STRONG",{});var aet=s(Hce);VQo=r(aet,"lxmert"),aet.forEach(t),WQo=r(T3e," \u2014 "),bD=n(T3e,"A",{href:!0});var net=s(bD);QQo=r(net,"TFLxmertForPreTraining"),net.forEach(t),HQo=r(T3e," (LXMERT model)"),T3e.forEach(t),UQo=i(U),u6=n(U,"LI",{});var F3e=s(u6);Uce=n(F3e,"STRONG",{});var set=s(Uce);JQo=r(set,"mobilebert"),set.forEach(t),YQo=r(F3e," \u2014 "),vD=n(F3e,"A",{href:!0});var iet=s(vD);KQo=r(iet,"TFMobileBertForPreTraining"),iet.forEach(t),ZQo=r(F3e," (MobileBERT model)"),F3e.forEach(t),eHo=i(U),b6=n(U,"LI",{});var C3e=s(b6);Jce=n(C3e,"STRONG",{});var det=s(Jce);oHo=r(det,"mpnet"),det.forEach(t),rHo=r(C3e," \u2014 "),TD=n(C3e,"A",{href:!0});var cet=s(TD);tHo=r(cet,"TFMPNetForMaskedLM"),cet.forEach(t),aHo=r(C3e," (MPNet model)"),C3e.forEach(t),nHo=i(U),v6=n(U,"LI",{});var M3e=s(v6);Yce=n(M3e,"STRONG",{});var fet=s(Yce);sHo=r(fet,"openai-gpt"),fet.forEach(t),lHo=r(M3e," \u2014 "),FD=n(M3e,"A",{href:!0});var met=s(FD);iHo=r(met,"TFOpenAIGPTLMHeadModel"),met.forEach(t),dHo=r(M3e," (OpenAI GPT model)"),M3e.forEach(t),cHo=i(U),T6=n(U,"LI",{});var E3e=s(T6);Kce=n(E3e,"STRONG",{});var get=s(Kce);fHo=r(get,"roberta"),get.forEach(t),mHo=r(E3e," \u2014 "),CD=n(E3e,"A",{href:!0});var het=s(CD);gHo=r(het,"TFRobertaForMaskedLM"),het.forEach(t),hHo=r(E3e," (RoBERTa model)"),E3e.forEach(t),pHo=i(U),F6=n(U,"LI",{});var y3e=s(F6);Zce=n(y3e,"STRONG",{});var pet=s(Zce);_Ho=r(pet,"t5"),pet.forEach(t),uHo=r(y3e," \u2014 "),MD=n(y3e,"A",{href:!0});var _et=s(MD);bHo=r(_et,"TFT5ForConditionalGeneration"),_et.forEach(t),vHo=r(y3e," (T5 model)"),y3e.forEach(t),THo=i(U),C6=n(U,"LI",{});var w3e=s(C6);efe=n(w3e,"STRONG",{});var uet=s(efe);FHo=r(uet,"tapas"),uet.forEach(t),CHo=r(w3e," \u2014 "),ED=n(w3e,"A",{href:!0});var bet=s(ED);MHo=r(bet,"TFTapasForMaskedLM"),bet.forEach(t),EHo=r(w3e," (TAPAS model)"),w3e.forEach(t),yHo=i(U),M6=n(U,"LI",{});var A3e=s(M6);ofe=n(A3e,"STRONG",{});var vet=s(ofe);wHo=r(vet,"transfo-xl"),vet.forEach(t),AHo=r(A3e," \u2014 "),yD=n(A3e,"A",{href:!0});var Tet=s(yD);LHo=r(Tet,"TFTransfoXLLMHeadModel"),Tet.forEach(t),BHo=r(A3e," (Transformer-XL model)"),A3e.forEach(t),kHo=i(U),E6=n(U,"LI",{});var L3e=s(E6);rfe=n(L3e,"STRONG",{});var Fet=s(rfe);xHo=r(Fet,"xlm"),Fet.forEach(t),RHo=r(L3e," \u2014 "),wD=n(L3e,"A",{href:!0});var Cet=s(wD);SHo=r(Cet,"TFXLMWithLMHeadModel"),Cet.forEach(t),PHo=r(L3e," (XLM model)"),L3e.forEach(t),$Ho=i(U),y6=n(U,"LI",{});var B3e=s(y6);tfe=n(B3e,"STRONG",{});var Met=s(tfe);IHo=r(Met,"xlm-roberta"),Met.forEach(t),jHo=r(B3e," \u2014 "),AD=n(B3e,"A",{href:!0});var Eet=s(AD);NHo=r(Eet,"TFXLMRobertaForMaskedLM"),Eet.forEach(t),DHo=r(B3e," (XLM-RoBERTa model)"),B3e.forEach(t),qHo=i(U),w6=n(U,"LI",{});var k3e=s(w6);afe=n(k3e,"STRONG",{});var yet=s(afe);GHo=r(yet,"xlnet"),yet.forEach(t),OHo=r(k3e," \u2014 "),LD=n(k3e,"A",{href:!0});var wet=s(LD);XHo=r(wet,"TFXLNetLMHeadModel"),wet.forEach(t),zHo=r(k3e," (XLNet model)"),k3e.forEach(t),U.forEach(t),VHo=i(fa),nfe=n(fa,"P",{});var Aet=s(nfe);WHo=r(Aet,"Examples:"),Aet.forEach(t),QHo=i(fa),m(I3.$$.fragment,fa),fa.forEach(t),xl.forEach(t),qLe=i(d),lc=n(d,"H2",{class:!0});var UBe=s(lc);A6=n(UBe,"A",{id:!0,class:!0,href:!0});var Let=s(A6);sfe=n(Let,"SPAN",{});var Bet=s(sfe);m(j3.$$.fragment,Bet),Bet.forEach(t),Let.forEach(t),HHo=i(UBe),lfe=n(UBe,"SPAN",{});var ket=s(lfe);UHo=r(ket,"TFAutoModelForCausalLM"),ket.forEach(t),UBe.forEach(t),GLe=i(d),pr=n(d,"DIV",{class:!0});var Sl=s(pr);m(N3.$$.fragment,Sl),JHo=i(Sl),ic=n(Sl,"P",{});var xz=s(ic);YHo=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ife=n(xz,"CODE",{});var xet=s(ife);KHo=r(xet,"from_pretrained()"),xet.forEach(t),ZHo=r(xz,"class method or the "),dfe=n(xz,"CODE",{});var Ret=s(dfe);eUo=r(Ret,"from_config()"),Ret.forEach(t),oUo=r(xz,`class
method.`),xz.forEach(t),rUo=i(Sl),D3=n(Sl,"P",{});var JBe=s(D3);tUo=r(JBe,"This class cannot be instantiated directly using "),cfe=n(JBe,"CODE",{});var Set=s(cfe);aUo=r(Set,"__init__()"),Set.forEach(t),nUo=r(JBe," (throws an error)."),JBe.forEach(t),sUo=i(Sl),it=n(Sl,"DIV",{class:!0});var Pl=s(it);m(q3.$$.fragment,Pl),lUo=i(Pl),ffe=n(Pl,"P",{});var Pet=s(ffe);iUo=r(Pet,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pet.forEach(t),dUo=i(Pl),dc=n(Pl,"P",{});var Rz=s(dc);cUo=r(Rz,`Note:
Loading a model from its configuration file does `),mfe=n(Rz,"STRONG",{});var $et=s(mfe);fUo=r($et,"not"),$et.forEach(t),mUo=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),gfe=n(Rz,"CODE",{});var Iet=s(gfe);gUo=r(Iet,"from_pretrained()"),Iet.forEach(t),hUo=r(Rz,"to load the model weights."),Rz.forEach(t),pUo=i(Pl),hfe=n(Pl,"P",{});var jet=s(hfe);_Uo=r(jet,"Examples:"),jet.forEach(t),uUo=i(Pl),m(G3.$$.fragment,Pl),Pl.forEach(t),bUo=i(Sl),po=n(Sl,"DIV",{class:!0});var ma=s(po);m(O3.$$.fragment,ma),vUo=i(ma),pfe=n(ma,"P",{});var Net=s(pfe);TUo=r(Net,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Net.forEach(t),FUo=i(ma),cn=n(ma,"P",{});var yC=s(cn);CUo=r(yC,"The model class to instantiate is selected based on the "),_fe=n(yC,"CODE",{});var Det=s(_fe);MUo=r(Det,"model_type"),Det.forEach(t),EUo=r(yC,` property of the config object (either
passed as an argument or loaded from `),ufe=n(yC,"CODE",{});var qet=s(ufe);yUo=r(qet,"pretrained_model_name_or_path"),qet.forEach(t),wUo=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=n(yC,"CODE",{});var Get=s(bfe);AUo=r(Get,"pretrained_model_name_or_path"),Get.forEach(t),LUo=r(yC,":"),yC.forEach(t),BUo=i(ma),he=n(ma,"UL",{});var Me=s(he);L6=n(Me,"LI",{});var x3e=s(L6);vfe=n(x3e,"STRONG",{});var Oet=s(vfe);kUo=r(Oet,"bert"),Oet.forEach(t),xUo=r(x3e," \u2014 "),BD=n(x3e,"A",{href:!0});var Xet=s(BD);RUo=r(Xet,"TFBertLMHeadModel"),Xet.forEach(t),SUo=r(x3e," (BERT model)"),x3e.forEach(t),PUo=i(Me),B6=n(Me,"LI",{});var R3e=s(B6);Tfe=n(R3e,"STRONG",{});var zet=s(Tfe);$Uo=r(zet,"ctrl"),zet.forEach(t),IUo=r(R3e," \u2014 "),kD=n(R3e,"A",{href:!0});var Vet=s(kD);jUo=r(Vet,"TFCTRLLMHeadModel"),Vet.forEach(t),NUo=r(R3e," (CTRL model)"),R3e.forEach(t),DUo=i(Me),k6=n(Me,"LI",{});var S3e=s(k6);Ffe=n(S3e,"STRONG",{});var Wet=s(Ffe);qUo=r(Wet,"gpt2"),Wet.forEach(t),GUo=r(S3e," \u2014 "),xD=n(S3e,"A",{href:!0});var Qet=s(xD);OUo=r(Qet,"TFGPT2LMHeadModel"),Qet.forEach(t),XUo=r(S3e," (OpenAI GPT-2 model)"),S3e.forEach(t),zUo=i(Me),x6=n(Me,"LI",{});var P3e=s(x6);Cfe=n(P3e,"STRONG",{});var Het=s(Cfe);VUo=r(Het,"openai-gpt"),Het.forEach(t),WUo=r(P3e," \u2014 "),RD=n(P3e,"A",{href:!0});var Uet=s(RD);QUo=r(Uet,"TFOpenAIGPTLMHeadModel"),Uet.forEach(t),HUo=r(P3e," (OpenAI GPT model)"),P3e.forEach(t),UUo=i(Me),R6=n(Me,"LI",{});var $3e=s(R6);Mfe=n($3e,"STRONG",{});var Jet=s(Mfe);JUo=r(Jet,"rembert"),Jet.forEach(t),YUo=r($3e," \u2014 "),SD=n($3e,"A",{href:!0});var Yet=s(SD);KUo=r(Yet,"TFRemBertForCausalLM"),Yet.forEach(t),ZUo=r($3e," (RemBERT model)"),$3e.forEach(t),eJo=i(Me),S6=n(Me,"LI",{});var I3e=s(S6);Efe=n(I3e,"STRONG",{});var Ket=s(Efe);oJo=r(Ket,"roberta"),Ket.forEach(t),rJo=r(I3e," \u2014 "),PD=n(I3e,"A",{href:!0});var Zet=s(PD);tJo=r(Zet,"TFRobertaForCausalLM"),Zet.forEach(t),aJo=r(I3e," (RoBERTa model)"),I3e.forEach(t),nJo=i(Me),P6=n(Me,"LI",{});var j3e=s(P6);yfe=n(j3e,"STRONG",{});var eot=s(yfe);sJo=r(eot,"roformer"),eot.forEach(t),lJo=r(j3e," \u2014 "),$D=n(j3e,"A",{href:!0});var oot=s($D);iJo=r(oot,"TFRoFormerForCausalLM"),oot.forEach(t),dJo=r(j3e," (RoFormer model)"),j3e.forEach(t),cJo=i(Me),$6=n(Me,"LI",{});var N3e=s($6);wfe=n(N3e,"STRONG",{});var rot=s(wfe);fJo=r(rot,"transfo-xl"),rot.forEach(t),mJo=r(N3e," \u2014 "),ID=n(N3e,"A",{href:!0});var tot=s(ID);gJo=r(tot,"TFTransfoXLLMHeadModel"),tot.forEach(t),hJo=r(N3e," (Transformer-XL model)"),N3e.forEach(t),pJo=i(Me),I6=n(Me,"LI",{});var D3e=s(I6);Afe=n(D3e,"STRONG",{});var aot=s(Afe);_Jo=r(aot,"xlm"),aot.forEach(t),uJo=r(D3e," \u2014 "),jD=n(D3e,"A",{href:!0});var not=s(jD);bJo=r(not,"TFXLMWithLMHeadModel"),not.forEach(t),vJo=r(D3e," (XLM model)"),D3e.forEach(t),TJo=i(Me),j6=n(Me,"LI",{});var q3e=s(j6);Lfe=n(q3e,"STRONG",{});var sot=s(Lfe);FJo=r(sot,"xlnet"),sot.forEach(t),CJo=r(q3e," \u2014 "),ND=n(q3e,"A",{href:!0});var lot=s(ND);MJo=r(lot,"TFXLNetLMHeadModel"),lot.forEach(t),EJo=r(q3e," (XLNet model)"),q3e.forEach(t),Me.forEach(t),yJo=i(ma),Bfe=n(ma,"P",{});var iot=s(Bfe);wJo=r(iot,"Examples:"),iot.forEach(t),AJo=i(ma),m(X3.$$.fragment,ma),ma.forEach(t),Sl.forEach(t),OLe=i(d),cc=n(d,"H2",{class:!0});var YBe=s(cc);N6=n(YBe,"A",{id:!0,class:!0,href:!0});var dot=s(N6);kfe=n(dot,"SPAN",{});var cot=s(kfe);m(z3.$$.fragment,cot),cot.forEach(t),dot.forEach(t),LJo=i(YBe),xfe=n(YBe,"SPAN",{});var fot=s(xfe);BJo=r(fot,"TFAutoModelForImageClassification"),fot.forEach(t),YBe.forEach(t),XLe=i(d),_r=n(d,"DIV",{class:!0});var $l=s(_r);m(V3.$$.fragment,$l),kJo=i($l),fc=n($l,"P",{});var Sz=s(fc);xJo=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Rfe=n(Sz,"CODE",{});var mot=s(Rfe);RJo=r(mot,"from_pretrained()"),mot.forEach(t),SJo=r(Sz,"class method or the "),Sfe=n(Sz,"CODE",{});var got=s(Sfe);PJo=r(got,"from_config()"),got.forEach(t),$Jo=r(Sz,`class
method.`),Sz.forEach(t),IJo=i($l),W3=n($l,"P",{});var KBe=s(W3);jJo=r(KBe,"This class cannot be instantiated directly using "),Pfe=n(KBe,"CODE",{});var hot=s(Pfe);NJo=r(hot,"__init__()"),hot.forEach(t),DJo=r(KBe," (throws an error)."),KBe.forEach(t),qJo=i($l),dt=n($l,"DIV",{class:!0});var Il=s(dt);m(Q3.$$.fragment,Il),GJo=i(Il),$fe=n(Il,"P",{});var pot=s($fe);OJo=r(pot,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pot.forEach(t),XJo=i(Il),mc=n(Il,"P",{});var Pz=s(mc);zJo=r(Pz,`Note:
Loading a model from its configuration file does `),Ife=n(Pz,"STRONG",{});var _ot=s(Ife);VJo=r(_ot,"not"),_ot.forEach(t),WJo=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),jfe=n(Pz,"CODE",{});var uot=s(jfe);QJo=r(uot,"from_pretrained()"),uot.forEach(t),HJo=r(Pz,"to load the model weights."),Pz.forEach(t),UJo=i(Il),Nfe=n(Il,"P",{});var bot=s(Nfe);JJo=r(bot,"Examples:"),bot.forEach(t),YJo=i(Il),m(H3.$$.fragment,Il),Il.forEach(t),KJo=i($l),_o=n($l,"DIV",{class:!0});var ga=s(_o);m(U3.$$.fragment,ga),ZJo=i(ga),Dfe=n(ga,"P",{});var vot=s(Dfe);eYo=r(vot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vot.forEach(t),oYo=i(ga),fn=n(ga,"P",{});var wC=s(fn);rYo=r(wC,"The model class to instantiate is selected based on the "),qfe=n(wC,"CODE",{});var Tot=s(qfe);tYo=r(Tot,"model_type"),Tot.forEach(t),aYo=r(wC,` property of the config object (either
passed as an argument or loaded from `),Gfe=n(wC,"CODE",{});var Fot=s(Gfe);nYo=r(Fot,"pretrained_model_name_or_path"),Fot.forEach(t),sYo=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=n(wC,"CODE",{});var Cot=s(Ofe);lYo=r(Cot,"pretrained_model_name_or_path"),Cot.forEach(t),iYo=r(wC,":"),wC.forEach(t),dYo=i(ga),Xfe=n(ga,"UL",{});var Mot=s(Xfe);D6=n(Mot,"LI",{});var G3e=s(D6);zfe=n(G3e,"STRONG",{});var Eot=s(zfe);cYo=r(Eot,"vit"),Eot.forEach(t),fYo=r(G3e," \u2014 "),DD=n(G3e,"A",{href:!0});var yot=s(DD);mYo=r(yot,"TFViTForImageClassification"),yot.forEach(t),gYo=r(G3e," (ViT model)"),G3e.forEach(t),Mot.forEach(t),hYo=i(ga),Vfe=n(ga,"P",{});var wot=s(Vfe);pYo=r(wot,"Examples:"),wot.forEach(t),_Yo=i(ga),m(J3.$$.fragment,ga),ga.forEach(t),$l.forEach(t),zLe=i(d),gc=n(d,"H2",{class:!0});var ZBe=s(gc);q6=n(ZBe,"A",{id:!0,class:!0,href:!0});var Aot=s(q6);Wfe=n(Aot,"SPAN",{});var Lot=s(Wfe);m(Y3.$$.fragment,Lot),Lot.forEach(t),Aot.forEach(t),uYo=i(ZBe),Qfe=n(ZBe,"SPAN",{});var Bot=s(Qfe);bYo=r(Bot,"TFAutoModelForMaskedLM"),Bot.forEach(t),ZBe.forEach(t),VLe=i(d),ur=n(d,"DIV",{class:!0});var jl=s(ur);m(K3.$$.fragment,jl),vYo=i(jl),hc=n(jl,"P",{});var $z=s(hc);TYo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hfe=n($z,"CODE",{});var kot=s(Hfe);FYo=r(kot,"from_pretrained()"),kot.forEach(t),CYo=r($z,"class method or the "),Ufe=n($z,"CODE",{});var xot=s(Ufe);MYo=r(xot,"from_config()"),xot.forEach(t),EYo=r($z,`class
method.`),$z.forEach(t),yYo=i(jl),Z3=n(jl,"P",{});var eke=s(Z3);wYo=r(eke,"This class cannot be instantiated directly using "),Jfe=n(eke,"CODE",{});var Rot=s(Jfe);AYo=r(Rot,"__init__()"),Rot.forEach(t),LYo=r(eke," (throws an error)."),eke.forEach(t),BYo=i(jl),ct=n(jl,"DIV",{class:!0});var Nl=s(ct);m(ey.$$.fragment,Nl),kYo=i(Nl),Yfe=n(Nl,"P",{});var Sot=s(Yfe);xYo=r(Sot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Sot.forEach(t),RYo=i(Nl),pc=n(Nl,"P",{});var Iz=s(pc);SYo=r(Iz,`Note:
Loading a model from its configuration file does `),Kfe=n(Iz,"STRONG",{});var Pot=s(Kfe);PYo=r(Pot,"not"),Pot.forEach(t),$Yo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zfe=n(Iz,"CODE",{});var $ot=s(Zfe);IYo=r($ot,"from_pretrained()"),$ot.forEach(t),jYo=r(Iz,"to load the model weights."),Iz.forEach(t),NYo=i(Nl),eme=n(Nl,"P",{});var Iot=s(eme);DYo=r(Iot,"Examples:"),Iot.forEach(t),qYo=i(Nl),m(oy.$$.fragment,Nl),Nl.forEach(t),GYo=i(jl),uo=n(jl,"DIV",{class:!0});var ha=s(uo);m(ry.$$.fragment,ha),OYo=i(ha),ome=n(ha,"P",{});var jot=s(ome);XYo=r(jot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jot.forEach(t),zYo=i(ha),mn=n(ha,"P",{});var AC=s(mn);VYo=r(AC,"The model class to instantiate is selected based on the "),rme=n(AC,"CODE",{});var Not=s(rme);WYo=r(Not,"model_type"),Not.forEach(t),QYo=r(AC,` property of the config object (either
passed as an argument or loaded from `),tme=n(AC,"CODE",{});var Dot=s(tme);HYo=r(Dot,"pretrained_model_name_or_path"),Dot.forEach(t),UYo=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ame=n(AC,"CODE",{});var qot=s(ame);JYo=r(qot,"pretrained_model_name_or_path"),qot.forEach(t),YYo=r(AC,":"),AC.forEach(t),KYo=i(ha),Y=n(ha,"UL",{});var ee=s(Y);G6=n(ee,"LI",{});var O3e=s(G6);nme=n(O3e,"STRONG",{});var Got=s(nme);ZYo=r(Got,"albert"),Got.forEach(t),eKo=r(O3e," \u2014 "),qD=n(O3e,"A",{href:!0});var Oot=s(qD);oKo=r(Oot,"TFAlbertForMaskedLM"),Oot.forEach(t),rKo=r(O3e," (ALBERT model)"),O3e.forEach(t),tKo=i(ee),O6=n(ee,"LI",{});var X3e=s(O6);sme=n(X3e,"STRONG",{});var Xot=s(sme);aKo=r(Xot,"bert"),Xot.forEach(t),nKo=r(X3e," \u2014 "),GD=n(X3e,"A",{href:!0});var zot=s(GD);sKo=r(zot,"TFBertForMaskedLM"),zot.forEach(t),lKo=r(X3e," (BERT model)"),X3e.forEach(t),iKo=i(ee),X6=n(ee,"LI",{});var z3e=s(X6);lme=n(z3e,"STRONG",{});var Vot=s(lme);dKo=r(Vot,"camembert"),Vot.forEach(t),cKo=r(z3e," \u2014 "),OD=n(z3e,"A",{href:!0});var Wot=s(OD);fKo=r(Wot,"TFCamembertForMaskedLM"),Wot.forEach(t),mKo=r(z3e," (CamemBERT model)"),z3e.forEach(t),gKo=i(ee),z6=n(ee,"LI",{});var V3e=s(z6);ime=n(V3e,"STRONG",{});var Qot=s(ime);hKo=r(Qot,"convbert"),Qot.forEach(t),pKo=r(V3e," \u2014 "),XD=n(V3e,"A",{href:!0});var Hot=s(XD);_Ko=r(Hot,"TFConvBertForMaskedLM"),Hot.forEach(t),uKo=r(V3e," (ConvBERT model)"),V3e.forEach(t),bKo=i(ee),V6=n(ee,"LI",{});var W3e=s(V6);dme=n(W3e,"STRONG",{});var Uot=s(dme);vKo=r(Uot,"deberta"),Uot.forEach(t),TKo=r(W3e," \u2014 "),zD=n(W3e,"A",{href:!0});var Jot=s(zD);FKo=r(Jot,"TFDebertaForMaskedLM"),Jot.forEach(t),CKo=r(W3e," (DeBERTa model)"),W3e.forEach(t),MKo=i(ee),W6=n(ee,"LI",{});var Q3e=s(W6);cme=n(Q3e,"STRONG",{});var Yot=s(cme);EKo=r(Yot,"deberta-v2"),Yot.forEach(t),yKo=r(Q3e," \u2014 "),VD=n(Q3e,"A",{href:!0});var Kot=s(VD);wKo=r(Kot,"TFDebertaV2ForMaskedLM"),Kot.forEach(t),AKo=r(Q3e," (DeBERTa-v2 model)"),Q3e.forEach(t),LKo=i(ee),Q6=n(ee,"LI",{});var H3e=s(Q6);fme=n(H3e,"STRONG",{});var Zot=s(fme);BKo=r(Zot,"distilbert"),Zot.forEach(t),kKo=r(H3e," \u2014 "),WD=n(H3e,"A",{href:!0});var ert=s(WD);xKo=r(ert,"TFDistilBertForMaskedLM"),ert.forEach(t),RKo=r(H3e," (DistilBERT model)"),H3e.forEach(t),SKo=i(ee),H6=n(ee,"LI",{});var U3e=s(H6);mme=n(U3e,"STRONG",{});var ort=s(mme);PKo=r(ort,"electra"),ort.forEach(t),$Ko=r(U3e," \u2014 "),QD=n(U3e,"A",{href:!0});var rrt=s(QD);IKo=r(rrt,"TFElectraForMaskedLM"),rrt.forEach(t),jKo=r(U3e," (ELECTRA model)"),U3e.forEach(t),NKo=i(ee),U6=n(ee,"LI",{});var J3e=s(U6);gme=n(J3e,"STRONG",{});var trt=s(gme);DKo=r(trt,"flaubert"),trt.forEach(t),qKo=r(J3e," \u2014 "),HD=n(J3e,"A",{href:!0});var art=s(HD);GKo=r(art,"TFFlaubertWithLMHeadModel"),art.forEach(t),OKo=r(J3e," (FlauBERT model)"),J3e.forEach(t),XKo=i(ee),J6=n(ee,"LI",{});var Y3e=s(J6);hme=n(Y3e,"STRONG",{});var nrt=s(hme);zKo=r(nrt,"funnel"),nrt.forEach(t),VKo=r(Y3e," \u2014 "),UD=n(Y3e,"A",{href:!0});var srt=s(UD);WKo=r(srt,"TFFunnelForMaskedLM"),srt.forEach(t),QKo=r(Y3e," (Funnel Transformer model)"),Y3e.forEach(t),HKo=i(ee),Y6=n(ee,"LI",{});var K3e=s(Y6);pme=n(K3e,"STRONG",{});var lrt=s(pme);UKo=r(lrt,"layoutlm"),lrt.forEach(t),JKo=r(K3e," \u2014 "),JD=n(K3e,"A",{href:!0});var irt=s(JD);YKo=r(irt,"TFLayoutLMForMaskedLM"),irt.forEach(t),KKo=r(K3e," (LayoutLM model)"),K3e.forEach(t),ZKo=i(ee),K6=n(ee,"LI",{});var Z3e=s(K6);_me=n(Z3e,"STRONG",{});var drt=s(_me);eZo=r(drt,"longformer"),drt.forEach(t),oZo=r(Z3e," \u2014 "),YD=n(Z3e,"A",{href:!0});var crt=s(YD);rZo=r(crt,"TFLongformerForMaskedLM"),crt.forEach(t),tZo=r(Z3e," (Longformer model)"),Z3e.forEach(t),aZo=i(ee),Z6=n(ee,"LI",{});var eye=s(Z6);ume=n(eye,"STRONG",{});var frt=s(ume);nZo=r(frt,"mobilebert"),frt.forEach(t),sZo=r(eye," \u2014 "),KD=n(eye,"A",{href:!0});var mrt=s(KD);lZo=r(mrt,"TFMobileBertForMaskedLM"),mrt.forEach(t),iZo=r(eye," (MobileBERT model)"),eye.forEach(t),dZo=i(ee),eT=n(ee,"LI",{});var oye=s(eT);bme=n(oye,"STRONG",{});var grt=s(bme);cZo=r(grt,"mpnet"),grt.forEach(t),fZo=r(oye," \u2014 "),ZD=n(oye,"A",{href:!0});var hrt=s(ZD);mZo=r(hrt,"TFMPNetForMaskedLM"),hrt.forEach(t),gZo=r(oye," (MPNet model)"),oye.forEach(t),hZo=i(ee),oT=n(ee,"LI",{});var rye=s(oT);vme=n(rye,"STRONG",{});var prt=s(vme);pZo=r(prt,"rembert"),prt.forEach(t),_Zo=r(rye," \u2014 "),eq=n(rye,"A",{href:!0});var _rt=s(eq);uZo=r(_rt,"TFRemBertForMaskedLM"),_rt.forEach(t),bZo=r(rye," (RemBERT model)"),rye.forEach(t),vZo=i(ee),rT=n(ee,"LI",{});var tye=s(rT);Tme=n(tye,"STRONG",{});var urt=s(Tme);TZo=r(urt,"roberta"),urt.forEach(t),FZo=r(tye," \u2014 "),oq=n(tye,"A",{href:!0});var brt=s(oq);CZo=r(brt,"TFRobertaForMaskedLM"),brt.forEach(t),MZo=r(tye," (RoBERTa model)"),tye.forEach(t),EZo=i(ee),tT=n(ee,"LI",{});var aye=s(tT);Fme=n(aye,"STRONG",{});var vrt=s(Fme);yZo=r(vrt,"roformer"),vrt.forEach(t),wZo=r(aye," \u2014 "),rq=n(aye,"A",{href:!0});var Trt=s(rq);AZo=r(Trt,"TFRoFormerForMaskedLM"),Trt.forEach(t),LZo=r(aye," (RoFormer model)"),aye.forEach(t),BZo=i(ee),aT=n(ee,"LI",{});var nye=s(aT);Cme=n(nye,"STRONG",{});var Frt=s(Cme);kZo=r(Frt,"tapas"),Frt.forEach(t),xZo=r(nye," \u2014 "),tq=n(nye,"A",{href:!0});var Crt=s(tq);RZo=r(Crt,"TFTapasForMaskedLM"),Crt.forEach(t),SZo=r(nye," (TAPAS model)"),nye.forEach(t),PZo=i(ee),nT=n(ee,"LI",{});var sye=s(nT);Mme=n(sye,"STRONG",{});var Mrt=s(Mme);$Zo=r(Mrt,"xlm"),Mrt.forEach(t),IZo=r(sye," \u2014 "),aq=n(sye,"A",{href:!0});var Ert=s(aq);jZo=r(Ert,"TFXLMWithLMHeadModel"),Ert.forEach(t),NZo=r(sye," (XLM model)"),sye.forEach(t),DZo=i(ee),sT=n(ee,"LI",{});var lye=s(sT);Eme=n(lye,"STRONG",{});var yrt=s(Eme);qZo=r(yrt,"xlm-roberta"),yrt.forEach(t),GZo=r(lye," \u2014 "),nq=n(lye,"A",{href:!0});var wrt=s(nq);OZo=r(wrt,"TFXLMRobertaForMaskedLM"),wrt.forEach(t),XZo=r(lye," (XLM-RoBERTa model)"),lye.forEach(t),ee.forEach(t),zZo=i(ha),yme=n(ha,"P",{});var Art=s(yme);VZo=r(Art,"Examples:"),Art.forEach(t),WZo=i(ha),m(ty.$$.fragment,ha),ha.forEach(t),jl.forEach(t),WLe=i(d),_c=n(d,"H2",{class:!0});var oke=s(_c);lT=n(oke,"A",{id:!0,class:!0,href:!0});var Lrt=s(lT);wme=n(Lrt,"SPAN",{});var Brt=s(wme);m(ay.$$.fragment,Brt),Brt.forEach(t),Lrt.forEach(t),QZo=i(oke),Ame=n(oke,"SPAN",{});var krt=s(Ame);HZo=r(krt,"TFAutoModelForSeq2SeqLM"),krt.forEach(t),oke.forEach(t),QLe=i(d),br=n(d,"DIV",{class:!0});var Dl=s(br);m(ny.$$.fragment,Dl),UZo=i(Dl),uc=n(Dl,"P",{});var jz=s(uc);JZo=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Lme=n(jz,"CODE",{});var xrt=s(Lme);YZo=r(xrt,"from_pretrained()"),xrt.forEach(t),KZo=r(jz,"class method or the "),Bme=n(jz,"CODE",{});var Rrt=s(Bme);ZZo=r(Rrt,"from_config()"),Rrt.forEach(t),eer=r(jz,`class
method.`),jz.forEach(t),oer=i(Dl),sy=n(Dl,"P",{});var rke=s(sy);rer=r(rke,"This class cannot be instantiated directly using "),kme=n(rke,"CODE",{});var Srt=s(kme);ter=r(Srt,"__init__()"),Srt.forEach(t),aer=r(rke," (throws an error)."),rke.forEach(t),ner=i(Dl),ft=n(Dl,"DIV",{class:!0});var ql=s(ft);m(ly.$$.fragment,ql),ser=i(ql),xme=n(ql,"P",{});var Prt=s(xme);ler=r(Prt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Prt.forEach(t),ier=i(ql),bc=n(ql,"P",{});var Nz=s(bc);der=r(Nz,`Note:
Loading a model from its configuration file does `),Rme=n(Nz,"STRONG",{});var $rt=s(Rme);cer=r($rt,"not"),$rt.forEach(t),fer=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sme=n(Nz,"CODE",{});var Irt=s(Sme);mer=r(Irt,"from_pretrained()"),Irt.forEach(t),ger=r(Nz,"to load the model weights."),Nz.forEach(t),her=i(ql),Pme=n(ql,"P",{});var jrt=s(Pme);per=r(jrt,"Examples:"),jrt.forEach(t),_er=i(ql),m(iy.$$.fragment,ql),ql.forEach(t),uer=i(Dl),bo=n(Dl,"DIV",{class:!0});var pa=s(bo);m(dy.$$.fragment,pa),ber=i(pa),$me=n(pa,"P",{});var Nrt=s($me);ver=r(Nrt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Nrt.forEach(t),Ter=i(pa),gn=n(pa,"P",{});var LC=s(gn);Fer=r(LC,"The model class to instantiate is selected based on the "),Ime=n(LC,"CODE",{});var Drt=s(Ime);Cer=r(Drt,"model_type"),Drt.forEach(t),Mer=r(LC,` property of the config object (either
passed as an argument or loaded from `),jme=n(LC,"CODE",{});var qrt=s(jme);Eer=r(qrt,"pretrained_model_name_or_path"),qrt.forEach(t),yer=r(LC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(LC,"CODE",{});var Grt=s(Nme);wer=r(Grt,"pretrained_model_name_or_path"),Grt.forEach(t),Aer=r(LC,":"),LC.forEach(t),Ler=i(pa),pe=n(pa,"UL",{});var Ee=s(pe);iT=n(Ee,"LI",{});var iye=s(iT);Dme=n(iye,"STRONG",{});var Ort=s(Dme);Ber=r(Ort,"bart"),Ort.forEach(t),ker=r(iye," \u2014 "),sq=n(iye,"A",{href:!0});var Xrt=s(sq);xer=r(Xrt,"TFBartForConditionalGeneration"),Xrt.forEach(t),Rer=r(iye," (BART model)"),iye.forEach(t),Ser=i(Ee),dT=n(Ee,"LI",{});var dye=s(dT);qme=n(dye,"STRONG",{});var zrt=s(qme);Per=r(zrt,"blenderbot"),zrt.forEach(t),$er=r(dye," \u2014 "),lq=n(dye,"A",{href:!0});var Vrt=s(lq);Ier=r(Vrt,"TFBlenderbotForConditionalGeneration"),Vrt.forEach(t),jer=r(dye," (Blenderbot model)"),dye.forEach(t),Ner=i(Ee),cT=n(Ee,"LI",{});var cye=s(cT);Gme=n(cye,"STRONG",{});var Wrt=s(Gme);Der=r(Wrt,"blenderbot-small"),Wrt.forEach(t),qer=r(cye," \u2014 "),iq=n(cye,"A",{href:!0});var Qrt=s(iq);Ger=r(Qrt,"TFBlenderbotSmallForConditionalGeneration"),Qrt.forEach(t),Oer=r(cye," (BlenderbotSmall model)"),cye.forEach(t),Xer=i(Ee),fT=n(Ee,"LI",{});var fye=s(fT);Ome=n(fye,"STRONG",{});var Hrt=s(Ome);zer=r(Hrt,"encoder-decoder"),Hrt.forEach(t),Ver=r(fye," \u2014 "),dq=n(fye,"A",{href:!0});var Urt=s(dq);Wer=r(Urt,"TFEncoderDecoderModel"),Urt.forEach(t),Qer=r(fye," (Encoder decoder model)"),fye.forEach(t),Her=i(Ee),mT=n(Ee,"LI",{});var mye=s(mT);Xme=n(mye,"STRONG",{});var Jrt=s(Xme);Uer=r(Jrt,"led"),Jrt.forEach(t),Jer=r(mye," \u2014 "),cq=n(mye,"A",{href:!0});var Yrt=s(cq);Yer=r(Yrt,"TFLEDForConditionalGeneration"),Yrt.forEach(t),Ker=r(mye," (LED model)"),mye.forEach(t),Zer=i(Ee),gT=n(Ee,"LI",{});var gye=s(gT);zme=n(gye,"STRONG",{});var Krt=s(zme);eor=r(Krt,"marian"),Krt.forEach(t),oor=r(gye," \u2014 "),fq=n(gye,"A",{href:!0});var Zrt=s(fq);ror=r(Zrt,"TFMarianMTModel"),Zrt.forEach(t),tor=r(gye," (Marian model)"),gye.forEach(t),aor=i(Ee),hT=n(Ee,"LI",{});var hye=s(hT);Vme=n(hye,"STRONG",{});var ett=s(Vme);nor=r(ett,"mbart"),ett.forEach(t),sor=r(hye," \u2014 "),mq=n(hye,"A",{href:!0});var ott=s(mq);lor=r(ott,"TFMBartForConditionalGeneration"),ott.forEach(t),ior=r(hye," (mBART model)"),hye.forEach(t),dor=i(Ee),pT=n(Ee,"LI",{});var pye=s(pT);Wme=n(pye,"STRONG",{});var rtt=s(Wme);cor=r(rtt,"mt5"),rtt.forEach(t),mor=r(pye," \u2014 "),gq=n(pye,"A",{href:!0});var ttt=s(gq);gor=r(ttt,"TFMT5ForConditionalGeneration"),ttt.forEach(t),hor=r(pye," (mT5 model)"),pye.forEach(t),por=i(Ee),_T=n(Ee,"LI",{});var _ye=s(_T);Qme=n(_ye,"STRONG",{});var att=s(Qme);_or=r(att,"pegasus"),att.forEach(t),uor=r(_ye," \u2014 "),hq=n(_ye,"A",{href:!0});var ntt=s(hq);bor=r(ntt,"TFPegasusForConditionalGeneration"),ntt.forEach(t),vor=r(_ye," (Pegasus model)"),_ye.forEach(t),Tor=i(Ee),uT=n(Ee,"LI",{});var uye=s(uT);Hme=n(uye,"STRONG",{});var stt=s(Hme);For=r(stt,"t5"),stt.forEach(t),Cor=r(uye," \u2014 "),pq=n(uye,"A",{href:!0});var ltt=s(pq);Mor=r(ltt,"TFT5ForConditionalGeneration"),ltt.forEach(t),Eor=r(uye," (T5 model)"),uye.forEach(t),Ee.forEach(t),yor=i(pa),Ume=n(pa,"P",{});var itt=s(Ume);wor=r(itt,"Examples:"),itt.forEach(t),Aor=i(pa),m(cy.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),HLe=i(d),vc=n(d,"H2",{class:!0});var tke=s(vc);bT=n(tke,"A",{id:!0,class:!0,href:!0});var dtt=s(bT);Jme=n(dtt,"SPAN",{});var ctt=s(Jme);m(fy.$$.fragment,ctt),ctt.forEach(t),dtt.forEach(t),Lor=i(tke),Yme=n(tke,"SPAN",{});var ftt=s(Yme);Bor=r(ftt,"TFAutoModelForSequenceClassification"),ftt.forEach(t),tke.forEach(t),ULe=i(d),vr=n(d,"DIV",{class:!0});var Gl=s(vr);m(my.$$.fragment,Gl),kor=i(Gl),Tc=n(Gl,"P",{});var Dz=s(Tc);xor=r(Dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Kme=n(Dz,"CODE",{});var mtt=s(Kme);Ror=r(mtt,"from_pretrained()"),mtt.forEach(t),Sor=r(Dz,"class method or the "),Zme=n(Dz,"CODE",{});var gtt=s(Zme);Por=r(gtt,"from_config()"),gtt.forEach(t),$or=r(Dz,`class
method.`),Dz.forEach(t),Ior=i(Gl),gy=n(Gl,"P",{});var ake=s(gy);jor=r(ake,"This class cannot be instantiated directly using "),ege=n(ake,"CODE",{});var htt=s(ege);Nor=r(htt,"__init__()"),htt.forEach(t),Dor=r(ake," (throws an error)."),ake.forEach(t),qor=i(Gl),mt=n(Gl,"DIV",{class:!0});var Ol=s(mt);m(hy.$$.fragment,Ol),Gor=i(Ol),oge=n(Ol,"P",{});var ptt=s(oge);Oor=r(ptt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ptt.forEach(t),Xor=i(Ol),Fc=n(Ol,"P",{});var qz=s(Fc);zor=r(qz,`Note:
Loading a model from its configuration file does `),rge=n(qz,"STRONG",{});var _tt=s(rge);Vor=r(_tt,"not"),_tt.forEach(t),Wor=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tge=n(qz,"CODE",{});var utt=s(tge);Qor=r(utt,"from_pretrained()"),utt.forEach(t),Hor=r(qz,"to load the model weights."),qz.forEach(t),Uor=i(Ol),age=n(Ol,"P",{});var btt=s(age);Jor=r(btt,"Examples:"),btt.forEach(t),Yor=i(Ol),m(py.$$.fragment,Ol),Ol.forEach(t),Kor=i(Gl),vo=n(Gl,"DIV",{class:!0});var _a=s(vo);m(_y.$$.fragment,_a),Zor=i(_a),nge=n(_a,"P",{});var vtt=s(nge);err=r(vtt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vtt.forEach(t),orr=i(_a),hn=n(_a,"P",{});var BC=s(hn);rrr=r(BC,"The model class to instantiate is selected based on the "),sge=n(BC,"CODE",{});var Ttt=s(sge);trr=r(Ttt,"model_type"),Ttt.forEach(t),arr=r(BC,` property of the config object (either
passed as an argument or loaded from `),lge=n(BC,"CODE",{});var Ftt=s(lge);nrr=r(Ftt,"pretrained_model_name_or_path"),Ftt.forEach(t),srr=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(BC,"CODE",{});var Ctt=s(ige);lrr=r(Ctt,"pretrained_model_name_or_path"),Ctt.forEach(t),irr=r(BC,":"),BC.forEach(t),drr=i(_a),X=n(_a,"UL",{});var W=s(X);vT=n(W,"LI",{});var bye=s(vT);dge=n(bye,"STRONG",{});var Mtt=s(dge);crr=r(Mtt,"albert"),Mtt.forEach(t),frr=r(bye," \u2014 "),_q=n(bye,"A",{href:!0});var Ett=s(_q);mrr=r(Ett,"TFAlbertForSequenceClassification"),Ett.forEach(t),grr=r(bye," (ALBERT model)"),bye.forEach(t),hrr=i(W),TT=n(W,"LI",{});var vye=s(TT);cge=n(vye,"STRONG",{});var ytt=s(cge);prr=r(ytt,"bert"),ytt.forEach(t),_rr=r(vye," \u2014 "),uq=n(vye,"A",{href:!0});var wtt=s(uq);urr=r(wtt,"TFBertForSequenceClassification"),wtt.forEach(t),brr=r(vye," (BERT model)"),vye.forEach(t),vrr=i(W),FT=n(W,"LI",{});var Tye=s(FT);fge=n(Tye,"STRONG",{});var Att=s(fge);Trr=r(Att,"camembert"),Att.forEach(t),Frr=r(Tye," \u2014 "),bq=n(Tye,"A",{href:!0});var Ltt=s(bq);Crr=r(Ltt,"TFCamembertForSequenceClassification"),Ltt.forEach(t),Mrr=r(Tye," (CamemBERT model)"),Tye.forEach(t),Err=i(W),CT=n(W,"LI",{});var Fye=s(CT);mge=n(Fye,"STRONG",{});var Btt=s(mge);yrr=r(Btt,"convbert"),Btt.forEach(t),wrr=r(Fye," \u2014 "),vq=n(Fye,"A",{href:!0});var ktt=s(vq);Arr=r(ktt,"TFConvBertForSequenceClassification"),ktt.forEach(t),Lrr=r(Fye," (ConvBERT model)"),Fye.forEach(t),Brr=i(W),MT=n(W,"LI",{});var Cye=s(MT);gge=n(Cye,"STRONG",{});var xtt=s(gge);krr=r(xtt,"ctrl"),xtt.forEach(t),xrr=r(Cye," \u2014 "),Tq=n(Cye,"A",{href:!0});var Rtt=s(Tq);Rrr=r(Rtt,"TFCTRLForSequenceClassification"),Rtt.forEach(t),Srr=r(Cye," (CTRL model)"),Cye.forEach(t),Prr=i(W),ET=n(W,"LI",{});var Mye=s(ET);hge=n(Mye,"STRONG",{});var Stt=s(hge);$rr=r(Stt,"deberta"),Stt.forEach(t),Irr=r(Mye," \u2014 "),Fq=n(Mye,"A",{href:!0});var Ptt=s(Fq);jrr=r(Ptt,"TFDebertaForSequenceClassification"),Ptt.forEach(t),Nrr=r(Mye," (DeBERTa model)"),Mye.forEach(t),Drr=i(W),yT=n(W,"LI",{});var Eye=s(yT);pge=n(Eye,"STRONG",{});var $tt=s(pge);qrr=r($tt,"deberta-v2"),$tt.forEach(t),Grr=r(Eye," \u2014 "),Cq=n(Eye,"A",{href:!0});var Itt=s(Cq);Orr=r(Itt,"TFDebertaV2ForSequenceClassification"),Itt.forEach(t),Xrr=r(Eye," (DeBERTa-v2 model)"),Eye.forEach(t),zrr=i(W),wT=n(W,"LI",{});var yye=s(wT);_ge=n(yye,"STRONG",{});var jtt=s(_ge);Vrr=r(jtt,"distilbert"),jtt.forEach(t),Wrr=r(yye," \u2014 "),Mq=n(yye,"A",{href:!0});var Ntt=s(Mq);Qrr=r(Ntt,"TFDistilBertForSequenceClassification"),Ntt.forEach(t),Hrr=r(yye," (DistilBERT model)"),yye.forEach(t),Urr=i(W),AT=n(W,"LI",{});var wye=s(AT);uge=n(wye,"STRONG",{});var Dtt=s(uge);Jrr=r(Dtt,"electra"),Dtt.forEach(t),Yrr=r(wye," \u2014 "),Eq=n(wye,"A",{href:!0});var qtt=s(Eq);Krr=r(qtt,"TFElectraForSequenceClassification"),qtt.forEach(t),Zrr=r(wye," (ELECTRA model)"),wye.forEach(t),etr=i(W),LT=n(W,"LI",{});var Aye=s(LT);bge=n(Aye,"STRONG",{});var Gtt=s(bge);otr=r(Gtt,"flaubert"),Gtt.forEach(t),rtr=r(Aye," \u2014 "),yq=n(Aye,"A",{href:!0});var Ott=s(yq);ttr=r(Ott,"TFFlaubertForSequenceClassification"),Ott.forEach(t),atr=r(Aye," (FlauBERT model)"),Aye.forEach(t),ntr=i(W),BT=n(W,"LI",{});var Lye=s(BT);vge=n(Lye,"STRONG",{});var Xtt=s(vge);str=r(Xtt,"funnel"),Xtt.forEach(t),ltr=r(Lye," \u2014 "),wq=n(Lye,"A",{href:!0});var ztt=s(wq);itr=r(ztt,"TFFunnelForSequenceClassification"),ztt.forEach(t),dtr=r(Lye," (Funnel Transformer model)"),Lye.forEach(t),ctr=i(W),kT=n(W,"LI",{});var Bye=s(kT);Tge=n(Bye,"STRONG",{});var Vtt=s(Tge);ftr=r(Vtt,"gpt2"),Vtt.forEach(t),mtr=r(Bye," \u2014 "),Aq=n(Bye,"A",{href:!0});var Wtt=s(Aq);gtr=r(Wtt,"TFGPT2ForSequenceClassification"),Wtt.forEach(t),htr=r(Bye," (OpenAI GPT-2 model)"),Bye.forEach(t),ptr=i(W),xT=n(W,"LI",{});var kye=s(xT);Fge=n(kye,"STRONG",{});var Qtt=s(Fge);_tr=r(Qtt,"layoutlm"),Qtt.forEach(t),utr=r(kye," \u2014 "),Lq=n(kye,"A",{href:!0});var Htt=s(Lq);btr=r(Htt,"TFLayoutLMForSequenceClassification"),Htt.forEach(t),vtr=r(kye," (LayoutLM model)"),kye.forEach(t),Ttr=i(W),RT=n(W,"LI",{});var xye=s(RT);Cge=n(xye,"STRONG",{});var Utt=s(Cge);Ftr=r(Utt,"longformer"),Utt.forEach(t),Ctr=r(xye," \u2014 "),Bq=n(xye,"A",{href:!0});var Jtt=s(Bq);Mtr=r(Jtt,"TFLongformerForSequenceClassification"),Jtt.forEach(t),Etr=r(xye," (Longformer model)"),xye.forEach(t),ytr=i(W),ST=n(W,"LI",{});var Rye=s(ST);Mge=n(Rye,"STRONG",{});var Ytt=s(Mge);wtr=r(Ytt,"mobilebert"),Ytt.forEach(t),Atr=r(Rye," \u2014 "),kq=n(Rye,"A",{href:!0});var Ktt=s(kq);Ltr=r(Ktt,"TFMobileBertForSequenceClassification"),Ktt.forEach(t),Btr=r(Rye," (MobileBERT model)"),Rye.forEach(t),ktr=i(W),PT=n(W,"LI",{});var Sye=s(PT);Ege=n(Sye,"STRONG",{});var Ztt=s(Ege);xtr=r(Ztt,"mpnet"),Ztt.forEach(t),Rtr=r(Sye," \u2014 "),xq=n(Sye,"A",{href:!0});var eat=s(xq);Str=r(eat,"TFMPNetForSequenceClassification"),eat.forEach(t),Ptr=r(Sye," (MPNet model)"),Sye.forEach(t),$tr=i(W),$T=n(W,"LI",{});var Pye=s($T);yge=n(Pye,"STRONG",{});var oat=s(yge);Itr=r(oat,"openai-gpt"),oat.forEach(t),jtr=r(Pye," \u2014 "),Rq=n(Pye,"A",{href:!0});var rat=s(Rq);Ntr=r(rat,"TFOpenAIGPTForSequenceClassification"),rat.forEach(t),Dtr=r(Pye," (OpenAI GPT model)"),Pye.forEach(t),qtr=i(W),IT=n(W,"LI",{});var $ye=s(IT);wge=n($ye,"STRONG",{});var tat=s(wge);Gtr=r(tat,"rembert"),tat.forEach(t),Otr=r($ye," \u2014 "),Sq=n($ye,"A",{href:!0});var aat=s(Sq);Xtr=r(aat,"TFRemBertForSequenceClassification"),aat.forEach(t),ztr=r($ye," (RemBERT model)"),$ye.forEach(t),Vtr=i(W),jT=n(W,"LI",{});var Iye=s(jT);Age=n(Iye,"STRONG",{});var nat=s(Age);Wtr=r(nat,"roberta"),nat.forEach(t),Qtr=r(Iye," \u2014 "),Pq=n(Iye,"A",{href:!0});var sat=s(Pq);Htr=r(sat,"TFRobertaForSequenceClassification"),sat.forEach(t),Utr=r(Iye," (RoBERTa model)"),Iye.forEach(t),Jtr=i(W),NT=n(W,"LI",{});var jye=s(NT);Lge=n(jye,"STRONG",{});var lat=s(Lge);Ytr=r(lat,"roformer"),lat.forEach(t),Ktr=r(jye," \u2014 "),$q=n(jye,"A",{href:!0});var iat=s($q);Ztr=r(iat,"TFRoFormerForSequenceClassification"),iat.forEach(t),ear=r(jye," (RoFormer model)"),jye.forEach(t),oar=i(W),DT=n(W,"LI",{});var Nye=s(DT);Bge=n(Nye,"STRONG",{});var dat=s(Bge);rar=r(dat,"tapas"),dat.forEach(t),tar=r(Nye," \u2014 "),Iq=n(Nye,"A",{href:!0});var cat=s(Iq);aar=r(cat,"TFTapasForSequenceClassification"),cat.forEach(t),nar=r(Nye," (TAPAS model)"),Nye.forEach(t),sar=i(W),qT=n(W,"LI",{});var Dye=s(qT);kge=n(Dye,"STRONG",{});var fat=s(kge);lar=r(fat,"transfo-xl"),fat.forEach(t),iar=r(Dye," \u2014 "),jq=n(Dye,"A",{href:!0});var mat=s(jq);dar=r(mat,"TFTransfoXLForSequenceClassification"),mat.forEach(t),car=r(Dye," (Transformer-XL model)"),Dye.forEach(t),far=i(W),GT=n(W,"LI",{});var qye=s(GT);xge=n(qye,"STRONG",{});var gat=s(xge);mar=r(gat,"xlm"),gat.forEach(t),gar=r(qye," \u2014 "),Nq=n(qye,"A",{href:!0});var hat=s(Nq);har=r(hat,"TFXLMForSequenceClassification"),hat.forEach(t),par=r(qye," (XLM model)"),qye.forEach(t),_ar=i(W),OT=n(W,"LI",{});var Gye=s(OT);Rge=n(Gye,"STRONG",{});var pat=s(Rge);uar=r(pat,"xlm-roberta"),pat.forEach(t),bar=r(Gye," \u2014 "),Dq=n(Gye,"A",{href:!0});var _at=s(Dq);Tar=r(_at,"TFXLMRobertaForSequenceClassification"),_at.forEach(t),Far=r(Gye," (XLM-RoBERTa model)"),Gye.forEach(t),Car=i(W),XT=n(W,"LI",{});var Oye=s(XT);Sge=n(Oye,"STRONG",{});var uat=s(Sge);Mar=r(uat,"xlnet"),uat.forEach(t),Ear=r(Oye," \u2014 "),qq=n(Oye,"A",{href:!0});var bat=s(qq);yar=r(bat,"TFXLNetForSequenceClassification"),bat.forEach(t),war=r(Oye," (XLNet model)"),Oye.forEach(t),W.forEach(t),Aar=i(_a),Pge=n(_a,"P",{});var vat=s(Pge);Lar=r(vat,"Examples:"),vat.forEach(t),Bar=i(_a),m(uy.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),JLe=i(d),Cc=n(d,"H2",{class:!0});var nke=s(Cc);zT=n(nke,"A",{id:!0,class:!0,href:!0});var Tat=s(zT);$ge=n(Tat,"SPAN",{});var Fat=s($ge);m(by.$$.fragment,Fat),Fat.forEach(t),Tat.forEach(t),kar=i(nke),Ige=n(nke,"SPAN",{});var Cat=s(Ige);xar=r(Cat,"TFAutoModelForMultipleChoice"),Cat.forEach(t),nke.forEach(t),YLe=i(d),Tr=n(d,"DIV",{class:!0});var Xl=s(Tr);m(vy.$$.fragment,Xl),Rar=i(Xl),Mc=n(Xl,"P",{});var Gz=s(Mc);Sar=r(Gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jge=n(Gz,"CODE",{});var Mat=s(jge);Par=r(Mat,"from_pretrained()"),Mat.forEach(t),$ar=r(Gz,"class method or the "),Nge=n(Gz,"CODE",{});var Eat=s(Nge);Iar=r(Eat,"from_config()"),Eat.forEach(t),jar=r(Gz,`class
method.`),Gz.forEach(t),Nar=i(Xl),Ty=n(Xl,"P",{});var ske=s(Ty);Dar=r(ske,"This class cannot be instantiated directly using "),Dge=n(ske,"CODE",{});var yat=s(Dge);qar=r(yat,"__init__()"),yat.forEach(t),Gar=r(ske," (throws an error)."),ske.forEach(t),Oar=i(Xl),gt=n(Xl,"DIV",{class:!0});var zl=s(gt);m(Fy.$$.fragment,zl),Xar=i(zl),qge=n(zl,"P",{});var wat=s(qge);zar=r(wat,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wat.forEach(t),Var=i(zl),Ec=n(zl,"P",{});var Oz=s(Ec);War=r(Oz,`Note:
Loading a model from its configuration file does `),Gge=n(Oz,"STRONG",{});var Aat=s(Gge);Qar=r(Aat,"not"),Aat.forEach(t),Har=r(Oz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oge=n(Oz,"CODE",{});var Lat=s(Oge);Uar=r(Lat,"from_pretrained()"),Lat.forEach(t),Jar=r(Oz,"to load the model weights."),Oz.forEach(t),Yar=i(zl),Xge=n(zl,"P",{});var Bat=s(Xge);Kar=r(Bat,"Examples:"),Bat.forEach(t),Zar=i(zl),m(Cy.$$.fragment,zl),zl.forEach(t),enr=i(Xl),To=n(Xl,"DIV",{class:!0});var ua=s(To);m(My.$$.fragment,ua),onr=i(ua),zge=n(ua,"P",{});var kat=s(zge);rnr=r(kat,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kat.forEach(t),tnr=i(ua),pn=n(ua,"P",{});var kC=s(pn);anr=r(kC,"The model class to instantiate is selected based on the "),Vge=n(kC,"CODE",{});var xat=s(Vge);nnr=r(xat,"model_type"),xat.forEach(t),snr=r(kC,` property of the config object (either
passed as an argument or loaded from `),Wge=n(kC,"CODE",{});var Rat=s(Wge);lnr=r(Rat,"pretrained_model_name_or_path"),Rat.forEach(t),inr=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(kC,"CODE",{});var Sat=s(Qge);dnr=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),cnr=r(kC,":"),kC.forEach(t),fnr=i(ua),te=n(ua,"UL",{});var ae=s(te);VT=n(ae,"LI",{});var Xye=s(VT);Hge=n(Xye,"STRONG",{});var Pat=s(Hge);mnr=r(Pat,"albert"),Pat.forEach(t),gnr=r(Xye," \u2014 "),Gq=n(Xye,"A",{href:!0});var $at=s(Gq);hnr=r($at,"TFAlbertForMultipleChoice"),$at.forEach(t),pnr=r(Xye," (ALBERT model)"),Xye.forEach(t),_nr=i(ae),WT=n(ae,"LI",{});var zye=s(WT);Uge=n(zye,"STRONG",{});var Iat=s(Uge);unr=r(Iat,"bert"),Iat.forEach(t),bnr=r(zye," \u2014 "),Oq=n(zye,"A",{href:!0});var jat=s(Oq);vnr=r(jat,"TFBertForMultipleChoice"),jat.forEach(t),Tnr=r(zye," (BERT model)"),zye.forEach(t),Fnr=i(ae),QT=n(ae,"LI",{});var Vye=s(QT);Jge=n(Vye,"STRONG",{});var Nat=s(Jge);Cnr=r(Nat,"camembert"),Nat.forEach(t),Mnr=r(Vye," \u2014 "),Xq=n(Vye,"A",{href:!0});var Dat=s(Xq);Enr=r(Dat,"TFCamembertForMultipleChoice"),Dat.forEach(t),ynr=r(Vye," (CamemBERT model)"),Vye.forEach(t),wnr=i(ae),HT=n(ae,"LI",{});var Wye=s(HT);Yge=n(Wye,"STRONG",{});var qat=s(Yge);Anr=r(qat,"convbert"),qat.forEach(t),Lnr=r(Wye," \u2014 "),zq=n(Wye,"A",{href:!0});var Gat=s(zq);Bnr=r(Gat,"TFConvBertForMultipleChoice"),Gat.forEach(t),knr=r(Wye," (ConvBERT model)"),Wye.forEach(t),xnr=i(ae),UT=n(ae,"LI",{});var Qye=s(UT);Kge=n(Qye,"STRONG",{});var Oat=s(Kge);Rnr=r(Oat,"distilbert"),Oat.forEach(t),Snr=r(Qye," \u2014 "),Vq=n(Qye,"A",{href:!0});var Xat=s(Vq);Pnr=r(Xat,"TFDistilBertForMultipleChoice"),Xat.forEach(t),$nr=r(Qye," (DistilBERT model)"),Qye.forEach(t),Inr=i(ae),JT=n(ae,"LI",{});var Hye=s(JT);Zge=n(Hye,"STRONG",{});var zat=s(Zge);jnr=r(zat,"electra"),zat.forEach(t),Nnr=r(Hye," \u2014 "),Wq=n(Hye,"A",{href:!0});var Vat=s(Wq);Dnr=r(Vat,"TFElectraForMultipleChoice"),Vat.forEach(t),qnr=r(Hye," (ELECTRA model)"),Hye.forEach(t),Gnr=i(ae),YT=n(ae,"LI",{});var Uye=s(YT);ehe=n(Uye,"STRONG",{});var Wat=s(ehe);Onr=r(Wat,"flaubert"),Wat.forEach(t),Xnr=r(Uye," \u2014 "),Qq=n(Uye,"A",{href:!0});var Qat=s(Qq);znr=r(Qat,"TFFlaubertForMultipleChoice"),Qat.forEach(t),Vnr=r(Uye," (FlauBERT model)"),Uye.forEach(t),Wnr=i(ae),KT=n(ae,"LI",{});var Jye=s(KT);ohe=n(Jye,"STRONG",{});var Hat=s(ohe);Qnr=r(Hat,"funnel"),Hat.forEach(t),Hnr=r(Jye," \u2014 "),Hq=n(Jye,"A",{href:!0});var Uat=s(Hq);Unr=r(Uat,"TFFunnelForMultipleChoice"),Uat.forEach(t),Jnr=r(Jye," (Funnel Transformer model)"),Jye.forEach(t),Ynr=i(ae),ZT=n(ae,"LI",{});var Yye=s(ZT);rhe=n(Yye,"STRONG",{});var Jat=s(rhe);Knr=r(Jat,"longformer"),Jat.forEach(t),Znr=r(Yye," \u2014 "),Uq=n(Yye,"A",{href:!0});var Yat=s(Uq);esr=r(Yat,"TFLongformerForMultipleChoice"),Yat.forEach(t),osr=r(Yye," (Longformer model)"),Yye.forEach(t),rsr=i(ae),e7=n(ae,"LI",{});var Kye=s(e7);the=n(Kye,"STRONG",{});var Kat=s(the);tsr=r(Kat,"mobilebert"),Kat.forEach(t),asr=r(Kye," \u2014 "),Jq=n(Kye,"A",{href:!0});var Zat=s(Jq);nsr=r(Zat,"TFMobileBertForMultipleChoice"),Zat.forEach(t),ssr=r(Kye," (MobileBERT model)"),Kye.forEach(t),lsr=i(ae),o7=n(ae,"LI",{});var Zye=s(o7);ahe=n(Zye,"STRONG",{});var ent=s(ahe);isr=r(ent,"mpnet"),ent.forEach(t),dsr=r(Zye," \u2014 "),Yq=n(Zye,"A",{href:!0});var ont=s(Yq);csr=r(ont,"TFMPNetForMultipleChoice"),ont.forEach(t),fsr=r(Zye," (MPNet model)"),Zye.forEach(t),msr=i(ae),r7=n(ae,"LI",{});var ewe=s(r7);nhe=n(ewe,"STRONG",{});var rnt=s(nhe);gsr=r(rnt,"rembert"),rnt.forEach(t),hsr=r(ewe," \u2014 "),Kq=n(ewe,"A",{href:!0});var tnt=s(Kq);psr=r(tnt,"TFRemBertForMultipleChoice"),tnt.forEach(t),_sr=r(ewe," (RemBERT model)"),ewe.forEach(t),usr=i(ae),t7=n(ae,"LI",{});var owe=s(t7);she=n(owe,"STRONG",{});var ant=s(she);bsr=r(ant,"roberta"),ant.forEach(t),vsr=r(owe," \u2014 "),Zq=n(owe,"A",{href:!0});var nnt=s(Zq);Tsr=r(nnt,"TFRobertaForMultipleChoice"),nnt.forEach(t),Fsr=r(owe," (RoBERTa model)"),owe.forEach(t),Csr=i(ae),a7=n(ae,"LI",{});var rwe=s(a7);lhe=n(rwe,"STRONG",{});var snt=s(lhe);Msr=r(snt,"roformer"),snt.forEach(t),Esr=r(rwe," \u2014 "),eG=n(rwe,"A",{href:!0});var lnt=s(eG);ysr=r(lnt,"TFRoFormerForMultipleChoice"),lnt.forEach(t),wsr=r(rwe," (RoFormer model)"),rwe.forEach(t),Asr=i(ae),n7=n(ae,"LI",{});var twe=s(n7);ihe=n(twe,"STRONG",{});var int=s(ihe);Lsr=r(int,"xlm"),int.forEach(t),Bsr=r(twe," \u2014 "),oG=n(twe,"A",{href:!0});var dnt=s(oG);ksr=r(dnt,"TFXLMForMultipleChoice"),dnt.forEach(t),xsr=r(twe," (XLM model)"),twe.forEach(t),Rsr=i(ae),s7=n(ae,"LI",{});var awe=s(s7);dhe=n(awe,"STRONG",{});var cnt=s(dhe);Ssr=r(cnt,"xlm-roberta"),cnt.forEach(t),Psr=r(awe," \u2014 "),rG=n(awe,"A",{href:!0});var fnt=s(rG);$sr=r(fnt,"TFXLMRobertaForMultipleChoice"),fnt.forEach(t),Isr=r(awe," (XLM-RoBERTa model)"),awe.forEach(t),jsr=i(ae),l7=n(ae,"LI",{});var nwe=s(l7);che=n(nwe,"STRONG",{});var mnt=s(che);Nsr=r(mnt,"xlnet"),mnt.forEach(t),Dsr=r(nwe," \u2014 "),tG=n(nwe,"A",{href:!0});var gnt=s(tG);qsr=r(gnt,"TFXLNetForMultipleChoice"),gnt.forEach(t),Gsr=r(nwe," (XLNet model)"),nwe.forEach(t),ae.forEach(t),Osr=i(ua),fhe=n(ua,"P",{});var hnt=s(fhe);Xsr=r(hnt,"Examples:"),hnt.forEach(t),zsr=i(ua),m(Ey.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),KLe=i(d),yc=n(d,"H2",{class:!0});var lke=s(yc);i7=n(lke,"A",{id:!0,class:!0,href:!0});var pnt=s(i7);mhe=n(pnt,"SPAN",{});var _nt=s(mhe);m(yy.$$.fragment,_nt),_nt.forEach(t),pnt.forEach(t),Vsr=i(lke),ghe=n(lke,"SPAN",{});var unt=s(ghe);Wsr=r(unt,"TFAutoModelForTableQuestionAnswering"),unt.forEach(t),lke.forEach(t),ZLe=i(d),Fr=n(d,"DIV",{class:!0});var Vl=s(Fr);m(wy.$$.fragment,Vl),Qsr=i(Vl),wc=n(Vl,"P",{});var Xz=s(wc);Hsr=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hhe=n(Xz,"CODE",{});var bnt=s(hhe);Usr=r(bnt,"from_pretrained()"),bnt.forEach(t),Jsr=r(Xz,"class method or the "),phe=n(Xz,"CODE",{});var vnt=s(phe);Ysr=r(vnt,"from_config()"),vnt.forEach(t),Ksr=r(Xz,`class
method.`),Xz.forEach(t),Zsr=i(Vl),Ay=n(Vl,"P",{});var ike=s(Ay);elr=r(ike,"This class cannot be instantiated directly using "),_he=n(ike,"CODE",{});var Tnt=s(_he);olr=r(Tnt,"__init__()"),Tnt.forEach(t),rlr=r(ike," (throws an error)."),ike.forEach(t),tlr=i(Vl),ht=n(Vl,"DIV",{class:!0});var Wl=s(ht);m(Ly.$$.fragment,Wl),alr=i(Wl),uhe=n(Wl,"P",{});var Fnt=s(uhe);nlr=r(Fnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fnt.forEach(t),slr=i(Wl),Ac=n(Wl,"P",{});var zz=s(Ac);llr=r(zz,`Note:
Loading a model from its configuration file does `),bhe=n(zz,"STRONG",{});var Cnt=s(bhe);ilr=r(Cnt,"not"),Cnt.forEach(t),dlr=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),vhe=n(zz,"CODE",{});var Mnt=s(vhe);clr=r(Mnt,"from_pretrained()"),Mnt.forEach(t),flr=r(zz,"to load the model weights."),zz.forEach(t),mlr=i(Wl),The=n(Wl,"P",{});var Ent=s(The);glr=r(Ent,"Examples:"),Ent.forEach(t),hlr=i(Wl),m(By.$$.fragment,Wl),Wl.forEach(t),plr=i(Vl),Fo=n(Vl,"DIV",{class:!0});var ba=s(Fo);m(ky.$$.fragment,ba),_lr=i(ba),Fhe=n(ba,"P",{});var ynt=s(Fhe);ulr=r(ynt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ynt.forEach(t),blr=i(ba),_n=n(ba,"P",{});var xC=s(_n);vlr=r(xC,"The model class to instantiate is selected based on the "),Che=n(xC,"CODE",{});var wnt=s(Che);Tlr=r(wnt,"model_type"),wnt.forEach(t),Flr=r(xC,` property of the config object (either
passed as an argument or loaded from `),Mhe=n(xC,"CODE",{});var Ant=s(Mhe);Clr=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),Mlr=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=n(xC,"CODE",{});var Lnt=s(Ehe);Elr=r(Lnt,"pretrained_model_name_or_path"),Lnt.forEach(t),ylr=r(xC,":"),xC.forEach(t),wlr=i(ba),yhe=n(ba,"UL",{});var Bnt=s(yhe);d7=n(Bnt,"LI",{});var swe=s(d7);whe=n(swe,"STRONG",{});var knt=s(whe);Alr=r(knt,"tapas"),knt.forEach(t),Llr=r(swe," \u2014 "),aG=n(swe,"A",{href:!0});var xnt=s(aG);Blr=r(xnt,"TFTapasForQuestionAnswering"),xnt.forEach(t),klr=r(swe," (TAPAS model)"),swe.forEach(t),Bnt.forEach(t),xlr=i(ba),Ahe=n(ba,"P",{});var Rnt=s(Ahe);Rlr=r(Rnt,"Examples:"),Rnt.forEach(t),Slr=i(ba),m(xy.$$.fragment,ba),ba.forEach(t),Vl.forEach(t),e9e=i(d),Lc=n(d,"H2",{class:!0});var dke=s(Lc);c7=n(dke,"A",{id:!0,class:!0,href:!0});var Snt=s(c7);Lhe=n(Snt,"SPAN",{});var Pnt=s(Lhe);m(Ry.$$.fragment,Pnt),Pnt.forEach(t),Snt.forEach(t),Plr=i(dke),Bhe=n(dke,"SPAN",{});var $nt=s(Bhe);$lr=r($nt,"TFAutoModelForTokenClassification"),$nt.forEach(t),dke.forEach(t),o9e=i(d),Cr=n(d,"DIV",{class:!0});var Ql=s(Cr);m(Sy.$$.fragment,Ql),Ilr=i(Ql),Bc=n(Ql,"P",{});var Vz=s(Bc);jlr=r(Vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),khe=n(Vz,"CODE",{});var Int=s(khe);Nlr=r(Int,"from_pretrained()"),Int.forEach(t),Dlr=r(Vz,"class method or the "),xhe=n(Vz,"CODE",{});var jnt=s(xhe);qlr=r(jnt,"from_config()"),jnt.forEach(t),Glr=r(Vz,`class
method.`),Vz.forEach(t),Olr=i(Ql),Py=n(Ql,"P",{});var cke=s(Py);Xlr=r(cke,"This class cannot be instantiated directly using "),Rhe=n(cke,"CODE",{});var Nnt=s(Rhe);zlr=r(Nnt,"__init__()"),Nnt.forEach(t),Vlr=r(cke," (throws an error)."),cke.forEach(t),Wlr=i(Ql),pt=n(Ql,"DIV",{class:!0});var Hl=s(pt);m($y.$$.fragment,Hl),Qlr=i(Hl),She=n(Hl,"P",{});var Dnt=s(She);Hlr=r(Dnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dnt.forEach(t),Ulr=i(Hl),kc=n(Hl,"P",{});var Wz=s(kc);Jlr=r(Wz,`Note:
Loading a model from its configuration file does `),Phe=n(Wz,"STRONG",{});var qnt=s(Phe);Ylr=r(qnt,"not"),qnt.forEach(t),Klr=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$he=n(Wz,"CODE",{});var Gnt=s($he);Zlr=r(Gnt,"from_pretrained()"),Gnt.forEach(t),eir=r(Wz,"to load the model weights."),Wz.forEach(t),oir=i(Hl),Ihe=n(Hl,"P",{});var Ont=s(Ihe);rir=r(Ont,"Examples:"),Ont.forEach(t),tir=i(Hl),m(Iy.$$.fragment,Hl),Hl.forEach(t),air=i(Ql),Co=n(Ql,"DIV",{class:!0});var va=s(Co);m(jy.$$.fragment,va),nir=i(va),jhe=n(va,"P",{});var Xnt=s(jhe);sir=r(Xnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Xnt.forEach(t),lir=i(va),un=n(va,"P",{});var RC=s(un);iir=r(RC,"The model class to instantiate is selected based on the "),Nhe=n(RC,"CODE",{});var znt=s(Nhe);dir=r(znt,"model_type"),znt.forEach(t),cir=r(RC,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(RC,"CODE",{});var Vnt=s(Dhe);fir=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),mir=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(RC,"CODE",{});var Wnt=s(qhe);gir=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),hir=r(RC,":"),RC.forEach(t),pir=i(va),K=n(va,"UL",{});var oe=s(K);f7=n(oe,"LI",{});var lwe=s(f7);Ghe=n(lwe,"STRONG",{});var Qnt=s(Ghe);_ir=r(Qnt,"albert"),Qnt.forEach(t),uir=r(lwe," \u2014 "),nG=n(lwe,"A",{href:!0});var Hnt=s(nG);bir=r(Hnt,"TFAlbertForTokenClassification"),Hnt.forEach(t),vir=r(lwe," (ALBERT model)"),lwe.forEach(t),Tir=i(oe),m7=n(oe,"LI",{});var iwe=s(m7);Ohe=n(iwe,"STRONG",{});var Unt=s(Ohe);Fir=r(Unt,"bert"),Unt.forEach(t),Cir=r(iwe," \u2014 "),sG=n(iwe,"A",{href:!0});var Jnt=s(sG);Mir=r(Jnt,"TFBertForTokenClassification"),Jnt.forEach(t),Eir=r(iwe," (BERT model)"),iwe.forEach(t),yir=i(oe),g7=n(oe,"LI",{});var dwe=s(g7);Xhe=n(dwe,"STRONG",{});var Ynt=s(Xhe);wir=r(Ynt,"camembert"),Ynt.forEach(t),Air=r(dwe," \u2014 "),lG=n(dwe,"A",{href:!0});var Knt=s(lG);Lir=r(Knt,"TFCamembertForTokenClassification"),Knt.forEach(t),Bir=r(dwe," (CamemBERT model)"),dwe.forEach(t),kir=i(oe),h7=n(oe,"LI",{});var cwe=s(h7);zhe=n(cwe,"STRONG",{});var Znt=s(zhe);xir=r(Znt,"convbert"),Znt.forEach(t),Rir=r(cwe," \u2014 "),iG=n(cwe,"A",{href:!0});var est=s(iG);Sir=r(est,"TFConvBertForTokenClassification"),est.forEach(t),Pir=r(cwe," (ConvBERT model)"),cwe.forEach(t),$ir=i(oe),p7=n(oe,"LI",{});var fwe=s(p7);Vhe=n(fwe,"STRONG",{});var ost=s(Vhe);Iir=r(ost,"deberta"),ost.forEach(t),jir=r(fwe," \u2014 "),dG=n(fwe,"A",{href:!0});var rst=s(dG);Nir=r(rst,"TFDebertaForTokenClassification"),rst.forEach(t),Dir=r(fwe," (DeBERTa model)"),fwe.forEach(t),qir=i(oe),_7=n(oe,"LI",{});var mwe=s(_7);Whe=n(mwe,"STRONG",{});var tst=s(Whe);Gir=r(tst,"deberta-v2"),tst.forEach(t),Oir=r(mwe," \u2014 "),cG=n(mwe,"A",{href:!0});var ast=s(cG);Xir=r(ast,"TFDebertaV2ForTokenClassification"),ast.forEach(t),zir=r(mwe," (DeBERTa-v2 model)"),mwe.forEach(t),Vir=i(oe),u7=n(oe,"LI",{});var gwe=s(u7);Qhe=n(gwe,"STRONG",{});var nst=s(Qhe);Wir=r(nst,"distilbert"),nst.forEach(t),Qir=r(gwe," \u2014 "),fG=n(gwe,"A",{href:!0});var sst=s(fG);Hir=r(sst,"TFDistilBertForTokenClassification"),sst.forEach(t),Uir=r(gwe," (DistilBERT model)"),gwe.forEach(t),Jir=i(oe),b7=n(oe,"LI",{});var hwe=s(b7);Hhe=n(hwe,"STRONG",{});var lst=s(Hhe);Yir=r(lst,"electra"),lst.forEach(t),Kir=r(hwe," \u2014 "),mG=n(hwe,"A",{href:!0});var ist=s(mG);Zir=r(ist,"TFElectraForTokenClassification"),ist.forEach(t),edr=r(hwe," (ELECTRA model)"),hwe.forEach(t),odr=i(oe),v7=n(oe,"LI",{});var pwe=s(v7);Uhe=n(pwe,"STRONG",{});var dst=s(Uhe);rdr=r(dst,"flaubert"),dst.forEach(t),tdr=r(pwe," \u2014 "),gG=n(pwe,"A",{href:!0});var cst=s(gG);adr=r(cst,"TFFlaubertForTokenClassification"),cst.forEach(t),ndr=r(pwe," (FlauBERT model)"),pwe.forEach(t),sdr=i(oe),T7=n(oe,"LI",{});var _we=s(T7);Jhe=n(_we,"STRONG",{});var fst=s(Jhe);ldr=r(fst,"funnel"),fst.forEach(t),idr=r(_we," \u2014 "),hG=n(_we,"A",{href:!0});var mst=s(hG);ddr=r(mst,"TFFunnelForTokenClassification"),mst.forEach(t),cdr=r(_we," (Funnel Transformer model)"),_we.forEach(t),fdr=i(oe),F7=n(oe,"LI",{});var uwe=s(F7);Yhe=n(uwe,"STRONG",{});var gst=s(Yhe);mdr=r(gst,"layoutlm"),gst.forEach(t),gdr=r(uwe," \u2014 "),pG=n(uwe,"A",{href:!0});var hst=s(pG);hdr=r(hst,"TFLayoutLMForTokenClassification"),hst.forEach(t),pdr=r(uwe," (LayoutLM model)"),uwe.forEach(t),_dr=i(oe),C7=n(oe,"LI",{});var bwe=s(C7);Khe=n(bwe,"STRONG",{});var pst=s(Khe);udr=r(pst,"longformer"),pst.forEach(t),bdr=r(bwe," \u2014 "),_G=n(bwe,"A",{href:!0});var _st=s(_G);vdr=r(_st,"TFLongformerForTokenClassification"),_st.forEach(t),Tdr=r(bwe," (Longformer model)"),bwe.forEach(t),Fdr=i(oe),M7=n(oe,"LI",{});var vwe=s(M7);Zhe=n(vwe,"STRONG",{});var ust=s(Zhe);Cdr=r(ust,"mobilebert"),ust.forEach(t),Mdr=r(vwe," \u2014 "),uG=n(vwe,"A",{href:!0});var bst=s(uG);Edr=r(bst,"TFMobileBertForTokenClassification"),bst.forEach(t),ydr=r(vwe," (MobileBERT model)"),vwe.forEach(t),wdr=i(oe),E7=n(oe,"LI",{});var Twe=s(E7);epe=n(Twe,"STRONG",{});var vst=s(epe);Adr=r(vst,"mpnet"),vst.forEach(t),Ldr=r(Twe," \u2014 "),bG=n(Twe,"A",{href:!0});var Tst=s(bG);Bdr=r(Tst,"TFMPNetForTokenClassification"),Tst.forEach(t),kdr=r(Twe," (MPNet model)"),Twe.forEach(t),xdr=i(oe),y7=n(oe,"LI",{});var Fwe=s(y7);ope=n(Fwe,"STRONG",{});var Fst=s(ope);Rdr=r(Fst,"rembert"),Fst.forEach(t),Sdr=r(Fwe," \u2014 "),vG=n(Fwe,"A",{href:!0});var Cst=s(vG);Pdr=r(Cst,"TFRemBertForTokenClassification"),Cst.forEach(t),$dr=r(Fwe," (RemBERT model)"),Fwe.forEach(t),Idr=i(oe),w7=n(oe,"LI",{});var Cwe=s(w7);rpe=n(Cwe,"STRONG",{});var Mst=s(rpe);jdr=r(Mst,"roberta"),Mst.forEach(t),Ndr=r(Cwe," \u2014 "),TG=n(Cwe,"A",{href:!0});var Est=s(TG);Ddr=r(Est,"TFRobertaForTokenClassification"),Est.forEach(t),qdr=r(Cwe," (RoBERTa model)"),Cwe.forEach(t),Gdr=i(oe),A7=n(oe,"LI",{});var Mwe=s(A7);tpe=n(Mwe,"STRONG",{});var yst=s(tpe);Odr=r(yst,"roformer"),yst.forEach(t),Xdr=r(Mwe," \u2014 "),FG=n(Mwe,"A",{href:!0});var wst=s(FG);zdr=r(wst,"TFRoFormerForTokenClassification"),wst.forEach(t),Vdr=r(Mwe," (RoFormer model)"),Mwe.forEach(t),Wdr=i(oe),L7=n(oe,"LI",{});var Ewe=s(L7);ape=n(Ewe,"STRONG",{});var Ast=s(ape);Qdr=r(Ast,"xlm"),Ast.forEach(t),Hdr=r(Ewe," \u2014 "),CG=n(Ewe,"A",{href:!0});var Lst=s(CG);Udr=r(Lst,"TFXLMForTokenClassification"),Lst.forEach(t),Jdr=r(Ewe," (XLM model)"),Ewe.forEach(t),Ydr=i(oe),B7=n(oe,"LI",{});var ywe=s(B7);npe=n(ywe,"STRONG",{});var Bst=s(npe);Kdr=r(Bst,"xlm-roberta"),Bst.forEach(t),Zdr=r(ywe," \u2014 "),MG=n(ywe,"A",{href:!0});var kst=s(MG);ecr=r(kst,"TFXLMRobertaForTokenClassification"),kst.forEach(t),ocr=r(ywe," (XLM-RoBERTa model)"),ywe.forEach(t),rcr=i(oe),k7=n(oe,"LI",{});var wwe=s(k7);spe=n(wwe,"STRONG",{});var xst=s(spe);tcr=r(xst,"xlnet"),xst.forEach(t),acr=r(wwe," \u2014 "),EG=n(wwe,"A",{href:!0});var Rst=s(EG);ncr=r(Rst,"TFXLNetForTokenClassification"),Rst.forEach(t),scr=r(wwe," (XLNet model)"),wwe.forEach(t),oe.forEach(t),lcr=i(va),lpe=n(va,"P",{});var Sst=s(lpe);icr=r(Sst,"Examples:"),Sst.forEach(t),dcr=i(va),m(Ny.$$.fragment,va),va.forEach(t),Ql.forEach(t),r9e=i(d),xc=n(d,"H2",{class:!0});var fke=s(xc);x7=n(fke,"A",{id:!0,class:!0,href:!0});var Pst=s(x7);ipe=n(Pst,"SPAN",{});var $st=s(ipe);m(Dy.$$.fragment,$st),$st.forEach(t),Pst.forEach(t),ccr=i(fke),dpe=n(fke,"SPAN",{});var Ist=s(dpe);fcr=r(Ist,"TFAutoModelForQuestionAnswering"),Ist.forEach(t),fke.forEach(t),t9e=i(d),Mr=n(d,"DIV",{class:!0});var Ul=s(Mr);m(qy.$$.fragment,Ul),mcr=i(Ul),Rc=n(Ul,"P",{});var Qz=s(Rc);gcr=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cpe=n(Qz,"CODE",{});var jst=s(cpe);hcr=r(jst,"from_pretrained()"),jst.forEach(t),pcr=r(Qz,"class method or the "),fpe=n(Qz,"CODE",{});var Nst=s(fpe);_cr=r(Nst,"from_config()"),Nst.forEach(t),ucr=r(Qz,`class
method.`),Qz.forEach(t),bcr=i(Ul),Gy=n(Ul,"P",{});var mke=s(Gy);vcr=r(mke,"This class cannot be instantiated directly using "),mpe=n(mke,"CODE",{});var Dst=s(mpe);Tcr=r(Dst,"__init__()"),Dst.forEach(t),Fcr=r(mke," (throws an error)."),mke.forEach(t),Ccr=i(Ul),_t=n(Ul,"DIV",{class:!0});var Jl=s(_t);m(Oy.$$.fragment,Jl),Mcr=i(Jl),gpe=n(Jl,"P",{});var qst=s(gpe);Ecr=r(qst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qst.forEach(t),ycr=i(Jl),Sc=n(Jl,"P",{});var Hz=s(Sc);wcr=r(Hz,`Note:
Loading a model from its configuration file does `),hpe=n(Hz,"STRONG",{});var Gst=s(hpe);Acr=r(Gst,"not"),Gst.forEach(t),Lcr=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ppe=n(Hz,"CODE",{});var Ost=s(ppe);Bcr=r(Ost,"from_pretrained()"),Ost.forEach(t),kcr=r(Hz,"to load the model weights."),Hz.forEach(t),xcr=i(Jl),_pe=n(Jl,"P",{});var Xst=s(_pe);Rcr=r(Xst,"Examples:"),Xst.forEach(t),Scr=i(Jl),m(Xy.$$.fragment,Jl),Jl.forEach(t),Pcr=i(Ul),Mo=n(Ul,"DIV",{class:!0});var Ta=s(Mo);m(zy.$$.fragment,Ta),$cr=i(Ta),upe=n(Ta,"P",{});var zst=s(upe);Icr=r(zst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zst.forEach(t),jcr=i(Ta),bn=n(Ta,"P",{});var SC=s(bn);Ncr=r(SC,"The model class to instantiate is selected based on the "),bpe=n(SC,"CODE",{});var Vst=s(bpe);Dcr=r(Vst,"model_type"),Vst.forEach(t),qcr=r(SC,` property of the config object (either
passed as an argument or loaded from `),vpe=n(SC,"CODE",{});var Wst=s(vpe);Gcr=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),Ocr=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(SC,"CODE",{});var Qst=s(Tpe);Xcr=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),zcr=r(SC,":"),SC.forEach(t),Vcr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);R7=n(re,"LI",{});var Awe=s(R7);Fpe=n(Awe,"STRONG",{});var Hst=s(Fpe);Wcr=r(Hst,"albert"),Hst.forEach(t),Qcr=r(Awe," \u2014 "),yG=n(Awe,"A",{href:!0});var Ust=s(yG);Hcr=r(Ust,"TFAlbertForQuestionAnswering"),Ust.forEach(t),Ucr=r(Awe," (ALBERT model)"),Awe.forEach(t),Jcr=i(re),S7=n(re,"LI",{});var Lwe=s(S7);Cpe=n(Lwe,"STRONG",{});var Jst=s(Cpe);Ycr=r(Jst,"bert"),Jst.forEach(t),Kcr=r(Lwe," \u2014 "),wG=n(Lwe,"A",{href:!0});var Yst=s(wG);Zcr=r(Yst,"TFBertForQuestionAnswering"),Yst.forEach(t),efr=r(Lwe," (BERT model)"),Lwe.forEach(t),ofr=i(re),P7=n(re,"LI",{});var Bwe=s(P7);Mpe=n(Bwe,"STRONG",{});var Kst=s(Mpe);rfr=r(Kst,"camembert"),Kst.forEach(t),tfr=r(Bwe," \u2014 "),AG=n(Bwe,"A",{href:!0});var Zst=s(AG);afr=r(Zst,"TFCamembertForQuestionAnswering"),Zst.forEach(t),nfr=r(Bwe," (CamemBERT model)"),Bwe.forEach(t),sfr=i(re),$7=n(re,"LI",{});var kwe=s($7);Epe=n(kwe,"STRONG",{});var elt=s(Epe);lfr=r(elt,"convbert"),elt.forEach(t),ifr=r(kwe," \u2014 "),LG=n(kwe,"A",{href:!0});var olt=s(LG);dfr=r(olt,"TFConvBertForQuestionAnswering"),olt.forEach(t),cfr=r(kwe," (ConvBERT model)"),kwe.forEach(t),ffr=i(re),I7=n(re,"LI",{});var xwe=s(I7);ype=n(xwe,"STRONG",{});var rlt=s(ype);mfr=r(rlt,"deberta"),rlt.forEach(t),gfr=r(xwe," \u2014 "),BG=n(xwe,"A",{href:!0});var tlt=s(BG);hfr=r(tlt,"TFDebertaForQuestionAnswering"),tlt.forEach(t),pfr=r(xwe," (DeBERTa model)"),xwe.forEach(t),_fr=i(re),j7=n(re,"LI",{});var Rwe=s(j7);wpe=n(Rwe,"STRONG",{});var alt=s(wpe);ufr=r(alt,"deberta-v2"),alt.forEach(t),bfr=r(Rwe," \u2014 "),kG=n(Rwe,"A",{href:!0});var nlt=s(kG);vfr=r(nlt,"TFDebertaV2ForQuestionAnswering"),nlt.forEach(t),Tfr=r(Rwe," (DeBERTa-v2 model)"),Rwe.forEach(t),Ffr=i(re),N7=n(re,"LI",{});var Swe=s(N7);Ape=n(Swe,"STRONG",{});var slt=s(Ape);Cfr=r(slt,"distilbert"),slt.forEach(t),Mfr=r(Swe," \u2014 "),xG=n(Swe,"A",{href:!0});var llt=s(xG);Efr=r(llt,"TFDistilBertForQuestionAnswering"),llt.forEach(t),yfr=r(Swe," (DistilBERT model)"),Swe.forEach(t),wfr=i(re),D7=n(re,"LI",{});var Pwe=s(D7);Lpe=n(Pwe,"STRONG",{});var ilt=s(Lpe);Afr=r(ilt,"electra"),ilt.forEach(t),Lfr=r(Pwe," \u2014 "),RG=n(Pwe,"A",{href:!0});var dlt=s(RG);Bfr=r(dlt,"TFElectraForQuestionAnswering"),dlt.forEach(t),kfr=r(Pwe," (ELECTRA model)"),Pwe.forEach(t),xfr=i(re),q7=n(re,"LI",{});var $we=s(q7);Bpe=n($we,"STRONG",{});var clt=s(Bpe);Rfr=r(clt,"flaubert"),clt.forEach(t),Sfr=r($we," \u2014 "),SG=n($we,"A",{href:!0});var flt=s(SG);Pfr=r(flt,"TFFlaubertForQuestionAnsweringSimple"),flt.forEach(t),$fr=r($we," (FlauBERT model)"),$we.forEach(t),Ifr=i(re),G7=n(re,"LI",{});var Iwe=s(G7);kpe=n(Iwe,"STRONG",{});var mlt=s(kpe);jfr=r(mlt,"funnel"),mlt.forEach(t),Nfr=r(Iwe," \u2014 "),PG=n(Iwe,"A",{href:!0});var glt=s(PG);Dfr=r(glt,"TFFunnelForQuestionAnswering"),glt.forEach(t),qfr=r(Iwe," (Funnel Transformer model)"),Iwe.forEach(t),Gfr=i(re),O7=n(re,"LI",{});var jwe=s(O7);xpe=n(jwe,"STRONG",{});var hlt=s(xpe);Ofr=r(hlt,"longformer"),hlt.forEach(t),Xfr=r(jwe," \u2014 "),$G=n(jwe,"A",{href:!0});var plt=s($G);zfr=r(plt,"TFLongformerForQuestionAnswering"),plt.forEach(t),Vfr=r(jwe," (Longformer model)"),jwe.forEach(t),Wfr=i(re),X7=n(re,"LI",{});var Nwe=s(X7);Rpe=n(Nwe,"STRONG",{});var _lt=s(Rpe);Qfr=r(_lt,"mobilebert"),_lt.forEach(t),Hfr=r(Nwe," \u2014 "),IG=n(Nwe,"A",{href:!0});var ult=s(IG);Ufr=r(ult,"TFMobileBertForQuestionAnswering"),ult.forEach(t),Jfr=r(Nwe," (MobileBERT model)"),Nwe.forEach(t),Yfr=i(re),z7=n(re,"LI",{});var Dwe=s(z7);Spe=n(Dwe,"STRONG",{});var blt=s(Spe);Kfr=r(blt,"mpnet"),blt.forEach(t),Zfr=r(Dwe," \u2014 "),jG=n(Dwe,"A",{href:!0});var vlt=s(jG);emr=r(vlt,"TFMPNetForQuestionAnswering"),vlt.forEach(t),omr=r(Dwe," (MPNet model)"),Dwe.forEach(t),rmr=i(re),V7=n(re,"LI",{});var qwe=s(V7);Ppe=n(qwe,"STRONG",{});var Tlt=s(Ppe);tmr=r(Tlt,"rembert"),Tlt.forEach(t),amr=r(qwe," \u2014 "),NG=n(qwe,"A",{href:!0});var Flt=s(NG);nmr=r(Flt,"TFRemBertForQuestionAnswering"),Flt.forEach(t),smr=r(qwe," (RemBERT model)"),qwe.forEach(t),lmr=i(re),W7=n(re,"LI",{});var Gwe=s(W7);$pe=n(Gwe,"STRONG",{});var Clt=s($pe);imr=r(Clt,"roberta"),Clt.forEach(t),dmr=r(Gwe," \u2014 "),DG=n(Gwe,"A",{href:!0});var Mlt=s(DG);cmr=r(Mlt,"TFRobertaForQuestionAnswering"),Mlt.forEach(t),fmr=r(Gwe," (RoBERTa model)"),Gwe.forEach(t),mmr=i(re),Q7=n(re,"LI",{});var Owe=s(Q7);Ipe=n(Owe,"STRONG",{});var Elt=s(Ipe);gmr=r(Elt,"roformer"),Elt.forEach(t),hmr=r(Owe," \u2014 "),qG=n(Owe,"A",{href:!0});var ylt=s(qG);pmr=r(ylt,"TFRoFormerForQuestionAnswering"),ylt.forEach(t),_mr=r(Owe," (RoFormer model)"),Owe.forEach(t),umr=i(re),H7=n(re,"LI",{});var Xwe=s(H7);jpe=n(Xwe,"STRONG",{});var wlt=s(jpe);bmr=r(wlt,"xlm"),wlt.forEach(t),vmr=r(Xwe," \u2014 "),GG=n(Xwe,"A",{href:!0});var Alt=s(GG);Tmr=r(Alt,"TFXLMForQuestionAnsweringSimple"),Alt.forEach(t),Fmr=r(Xwe," (XLM model)"),Xwe.forEach(t),Cmr=i(re),U7=n(re,"LI",{});var zwe=s(U7);Npe=n(zwe,"STRONG",{});var Llt=s(Npe);Mmr=r(Llt,"xlm-roberta"),Llt.forEach(t),Emr=r(zwe," \u2014 "),OG=n(zwe,"A",{href:!0});var Blt=s(OG);ymr=r(Blt,"TFXLMRobertaForQuestionAnswering"),Blt.forEach(t),wmr=r(zwe," (XLM-RoBERTa model)"),zwe.forEach(t),Amr=i(re),J7=n(re,"LI",{});var Vwe=s(J7);Dpe=n(Vwe,"STRONG",{});var klt=s(Dpe);Lmr=r(klt,"xlnet"),klt.forEach(t),Bmr=r(Vwe," \u2014 "),XG=n(Vwe,"A",{href:!0});var xlt=s(XG);kmr=r(xlt,"TFXLNetForQuestionAnsweringSimple"),xlt.forEach(t),xmr=r(Vwe," (XLNet model)"),Vwe.forEach(t),re.forEach(t),Rmr=i(Ta),qpe=n(Ta,"P",{});var Rlt=s(qpe);Smr=r(Rlt,"Examples:"),Rlt.forEach(t),Pmr=i(Ta),m(Vy.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),a9e=i(d),Pc=n(d,"H2",{class:!0});var gke=s(Pc);Y7=n(gke,"A",{id:!0,class:!0,href:!0});var Slt=s(Y7);Gpe=n(Slt,"SPAN",{});var Plt=s(Gpe);m(Wy.$$.fragment,Plt),Plt.forEach(t),Slt.forEach(t),$mr=i(gke),Ope=n(gke,"SPAN",{});var $lt=s(Ope);Imr=r($lt,"TFAutoModelForVision2Seq"),$lt.forEach(t),gke.forEach(t),n9e=i(d),Er=n(d,"DIV",{class:!0});var Yl=s(Er);m(Qy.$$.fragment,Yl),jmr=i(Yl),$c=n(Yl,"P",{});var Uz=s($c);Nmr=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Xpe=n(Uz,"CODE",{});var Ilt=s(Xpe);Dmr=r(Ilt,"from_pretrained()"),Ilt.forEach(t),qmr=r(Uz,"class method or the "),zpe=n(Uz,"CODE",{});var jlt=s(zpe);Gmr=r(jlt,"from_config()"),jlt.forEach(t),Omr=r(Uz,`class
method.`),Uz.forEach(t),Xmr=i(Yl),Hy=n(Yl,"P",{});var hke=s(Hy);zmr=r(hke,"This class cannot be instantiated directly using "),Vpe=n(hke,"CODE",{});var Nlt=s(Vpe);Vmr=r(Nlt,"__init__()"),Nlt.forEach(t),Wmr=r(hke," (throws an error)."),hke.forEach(t),Qmr=i(Yl),ut=n(Yl,"DIV",{class:!0});var Kl=s(ut);m(Uy.$$.fragment,Kl),Hmr=i(Kl),Wpe=n(Kl,"P",{});var Dlt=s(Wpe);Umr=r(Dlt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dlt.forEach(t),Jmr=i(Kl),Ic=n(Kl,"P",{});var Jz=s(Ic);Ymr=r(Jz,`Note:
Loading a model from its configuration file does `),Qpe=n(Jz,"STRONG",{});var qlt=s(Qpe);Kmr=r(qlt,"not"),qlt.forEach(t),Zmr=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hpe=n(Jz,"CODE",{});var Glt=s(Hpe);egr=r(Glt,"from_pretrained()"),Glt.forEach(t),ogr=r(Jz,"to load the model weights."),Jz.forEach(t),rgr=i(Kl),Upe=n(Kl,"P",{});var Olt=s(Upe);tgr=r(Olt,"Examples:"),Olt.forEach(t),agr=i(Kl),m(Jy.$$.fragment,Kl),Kl.forEach(t),ngr=i(Yl),Eo=n(Yl,"DIV",{class:!0});var Fa=s(Eo);m(Yy.$$.fragment,Fa),sgr=i(Fa),Jpe=n(Fa,"P",{});var Xlt=s(Jpe);lgr=r(Xlt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xlt.forEach(t),igr=i(Fa),vn=n(Fa,"P",{});var PC=s(vn);dgr=r(PC,"The model class to instantiate is selected based on the "),Ype=n(PC,"CODE",{});var zlt=s(Ype);cgr=r(zlt,"model_type"),zlt.forEach(t),fgr=r(PC,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(PC,"CODE",{});var Vlt=s(Kpe);mgr=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),ggr=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(PC,"CODE",{});var Wlt=s(Zpe);hgr=r(Wlt,"pretrained_model_name_or_path"),Wlt.forEach(t),pgr=r(PC,":"),PC.forEach(t),_gr=i(Fa),e_e=n(Fa,"UL",{});var Qlt=s(e_e);K7=n(Qlt,"LI",{});var Wwe=s(K7);o_e=n(Wwe,"STRONG",{});var Hlt=s(o_e);ugr=r(Hlt,"vision-encoder-decoder"),Hlt.forEach(t),bgr=r(Wwe," \u2014 "),zG=n(Wwe,"A",{href:!0});var Ult=s(zG);vgr=r(Ult,"TFVisionEncoderDecoderModel"),Ult.forEach(t),Tgr=r(Wwe," (Vision Encoder decoder model)"),Wwe.forEach(t),Qlt.forEach(t),Fgr=i(Fa),r_e=n(Fa,"P",{});var Jlt=s(r_e);Cgr=r(Jlt,"Examples:"),Jlt.forEach(t),Mgr=i(Fa),m(Ky.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),s9e=i(d),jc=n(d,"H2",{class:!0});var pke=s(jc);Z7=n(pke,"A",{id:!0,class:!0,href:!0});var Ylt=s(Z7);t_e=n(Ylt,"SPAN",{});var Klt=s(t_e);m(Zy.$$.fragment,Klt),Klt.forEach(t),Ylt.forEach(t),Egr=i(pke),a_e=n(pke,"SPAN",{});var Zlt=s(a_e);ygr=r(Zlt,"TFAutoModelForSpeechSeq2Seq"),Zlt.forEach(t),pke.forEach(t),l9e=i(d),yr=n(d,"DIV",{class:!0});var Zl=s(yr);m(ew.$$.fragment,Zl),wgr=i(Zl),Nc=n(Zl,"P",{});var Yz=s(Nc);Agr=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),n_e=n(Yz,"CODE",{});var eit=s(n_e);Lgr=r(eit,"from_pretrained()"),eit.forEach(t),Bgr=r(Yz,"class method or the "),s_e=n(Yz,"CODE",{});var oit=s(s_e);kgr=r(oit,"from_config()"),oit.forEach(t),xgr=r(Yz,`class
method.`),Yz.forEach(t),Rgr=i(Zl),ow=n(Zl,"P",{});var _ke=s(ow);Sgr=r(_ke,"This class cannot be instantiated directly using "),l_e=n(_ke,"CODE",{});var rit=s(l_e);Pgr=r(rit,"__init__()"),rit.forEach(t),$gr=r(_ke," (throws an error)."),_ke.forEach(t),Igr=i(Zl),bt=n(Zl,"DIV",{class:!0});var ei=s(bt);m(rw.$$.fragment,ei),jgr=i(ei),i_e=n(ei,"P",{});var tit=s(i_e);Ngr=r(tit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tit.forEach(t),Dgr=i(ei),Dc=n(ei,"P",{});var Kz=s(Dc);qgr=r(Kz,`Note:
Loading a model from its configuration file does `),d_e=n(Kz,"STRONG",{});var ait=s(d_e);Ggr=r(ait,"not"),ait.forEach(t),Ogr=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),c_e=n(Kz,"CODE",{});var nit=s(c_e);Xgr=r(nit,"from_pretrained()"),nit.forEach(t),zgr=r(Kz,"to load the model weights."),Kz.forEach(t),Vgr=i(ei),f_e=n(ei,"P",{});var sit=s(f_e);Wgr=r(sit,"Examples:"),sit.forEach(t),Qgr=i(ei),m(tw.$$.fragment,ei),ei.forEach(t),Hgr=i(Zl),yo=n(Zl,"DIV",{class:!0});var Ca=s(yo);m(aw.$$.fragment,Ca),Ugr=i(Ca),m_e=n(Ca,"P",{});var lit=s(m_e);Jgr=r(lit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lit.forEach(t),Ygr=i(Ca),Tn=n(Ca,"P",{});var $C=s(Tn);Kgr=r($C,"The model class to instantiate is selected based on the "),g_e=n($C,"CODE",{});var iit=s(g_e);Zgr=r(iit,"model_type"),iit.forEach(t),ehr=r($C,` property of the config object (either
passed as an argument or loaded from `),h_e=n($C,"CODE",{});var dit=s(h_e);ohr=r(dit,"pretrained_model_name_or_path"),dit.forEach(t),rhr=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n($C,"CODE",{});var cit=s(p_e);thr=r(cit,"pretrained_model_name_or_path"),cit.forEach(t),ahr=r($C,":"),$C.forEach(t),nhr=i(Ca),__e=n(Ca,"UL",{});var fit=s(__e);e8=n(fit,"LI",{});var Qwe=s(e8);u_e=n(Qwe,"STRONG",{});var mit=s(u_e);shr=r(mit,"speech_to_text"),mit.forEach(t),lhr=r(Qwe," \u2014 "),VG=n(Qwe,"A",{href:!0});var git=s(VG);ihr=r(git,"TFSpeech2TextForConditionalGeneration"),git.forEach(t),dhr=r(Qwe," (Speech2Text model)"),Qwe.forEach(t),fit.forEach(t),chr=i(Ca),b_e=n(Ca,"P",{});var hit=s(b_e);fhr=r(hit,"Examples:"),hit.forEach(t),mhr=i(Ca),m(nw.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),i9e=i(d),qc=n(d,"H2",{class:!0});var uke=s(qc);o8=n(uke,"A",{id:!0,class:!0,href:!0});var pit=s(o8);v_e=n(pit,"SPAN",{});var _it=s(v_e);m(sw.$$.fragment,_it),_it.forEach(t),pit.forEach(t),ghr=i(uke),T_e=n(uke,"SPAN",{});var uit=s(T_e);hhr=r(uit,"FlaxAutoModel"),uit.forEach(t),uke.forEach(t),d9e=i(d),wr=n(d,"DIV",{class:!0});var oi=s(wr);m(lw.$$.fragment,oi),phr=i(oi),Gc=n(oi,"P",{});var Zz=s(Gc);_hr=r(Zz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),F_e=n(Zz,"CODE",{});var bit=s(F_e);uhr=r(bit,"from_pretrained()"),bit.forEach(t),bhr=r(Zz,"class method or the "),C_e=n(Zz,"CODE",{});var vit=s(C_e);vhr=r(vit,"from_config()"),vit.forEach(t),Thr=r(Zz,`class
method.`),Zz.forEach(t),Fhr=i(oi),iw=n(oi,"P",{});var bke=s(iw);Chr=r(bke,"This class cannot be instantiated directly using "),M_e=n(bke,"CODE",{});var Tit=s(M_e);Mhr=r(Tit,"__init__()"),Tit.forEach(t),Ehr=r(bke," (throws an error)."),bke.forEach(t),yhr=i(oi),vt=n(oi,"DIV",{class:!0});var ri=s(vt);m(dw.$$.fragment,ri),whr=i(ri),E_e=n(ri,"P",{});var Fit=s(E_e);Ahr=r(Fit,"Instantiates one of the base model classes of the library from a configuration."),Fit.forEach(t),Lhr=i(ri),Oc=n(ri,"P",{});var eV=s(Oc);Bhr=r(eV,`Note:
Loading a model from its configuration file does `),y_e=n(eV,"STRONG",{});var Cit=s(y_e);khr=r(Cit,"not"),Cit.forEach(t),xhr=r(eV,` load the model weights. It only affects the
model\u2019s configuration. Use `),w_e=n(eV,"CODE",{});var Mit=s(w_e);Rhr=r(Mit,"from_pretrained()"),Mit.forEach(t),Shr=r(eV,"to load the model weights."),eV.forEach(t),Phr=i(ri),A_e=n(ri,"P",{});var Eit=s(A_e);$hr=r(Eit,"Examples:"),Eit.forEach(t),Ihr=i(ri),m(cw.$$.fragment,ri),ri.forEach(t),jhr=i(oi),wo=n(oi,"DIV",{class:!0});var Ma=s(wo);m(fw.$$.fragment,Ma),Nhr=i(Ma),L_e=n(Ma,"P",{});var yit=s(L_e);Dhr=r(yit,"Instantiate one of the base model classes of the library from a pretrained model."),yit.forEach(t),qhr=i(Ma),Fn=n(Ma,"P",{});var IC=s(Fn);Ghr=r(IC,"The model class to instantiate is selected based on the "),B_e=n(IC,"CODE",{});var wit=s(B_e);Ohr=r(wit,"model_type"),wit.forEach(t),Xhr=r(IC,` property of the config object (either
passed as an argument or loaded from `),k_e=n(IC,"CODE",{});var Ait=s(k_e);zhr=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),Vhr=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(IC,"CODE",{});var Lit=s(x_e);Whr=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),Qhr=r(IC,":"),IC.forEach(t),Hhr=i(Ma),V=n(Ma,"UL",{});var Q=s(V);r8=n(Q,"LI",{});var Hwe=s(r8);R_e=n(Hwe,"STRONG",{});var Bit=s(R_e);Uhr=r(Bit,"albert"),Bit.forEach(t),Jhr=r(Hwe," \u2014 "),WG=n(Hwe,"A",{href:!0});var kit=s(WG);Yhr=r(kit,"FlaxAlbertModel"),kit.forEach(t),Khr=r(Hwe," (ALBERT model)"),Hwe.forEach(t),Zhr=i(Q),t8=n(Q,"LI",{});var Uwe=s(t8);S_e=n(Uwe,"STRONG",{});var xit=s(S_e);epr=r(xit,"bart"),xit.forEach(t),opr=r(Uwe," \u2014 "),QG=n(Uwe,"A",{href:!0});var Rit=s(QG);rpr=r(Rit,"FlaxBartModel"),Rit.forEach(t),tpr=r(Uwe," (BART model)"),Uwe.forEach(t),apr=i(Q),a8=n(Q,"LI",{});var Jwe=s(a8);P_e=n(Jwe,"STRONG",{});var Sit=s(P_e);npr=r(Sit,"beit"),Sit.forEach(t),spr=r(Jwe," \u2014 "),HG=n(Jwe,"A",{href:!0});var Pit=s(HG);lpr=r(Pit,"FlaxBeitModel"),Pit.forEach(t),ipr=r(Jwe," (BEiT model)"),Jwe.forEach(t),dpr=i(Q),n8=n(Q,"LI",{});var Ywe=s(n8);$_e=n(Ywe,"STRONG",{});var $it=s($_e);cpr=r($it,"bert"),$it.forEach(t),fpr=r(Ywe," \u2014 "),UG=n(Ywe,"A",{href:!0});var Iit=s(UG);mpr=r(Iit,"FlaxBertModel"),Iit.forEach(t),gpr=r(Ywe," (BERT model)"),Ywe.forEach(t),hpr=i(Q),s8=n(Q,"LI",{});var Kwe=s(s8);I_e=n(Kwe,"STRONG",{});var jit=s(I_e);ppr=r(jit,"big_bird"),jit.forEach(t),_pr=r(Kwe," \u2014 "),JG=n(Kwe,"A",{href:!0});var Nit=s(JG);upr=r(Nit,"FlaxBigBirdModel"),Nit.forEach(t),bpr=r(Kwe," (BigBird model)"),Kwe.forEach(t),vpr=i(Q),l8=n(Q,"LI",{});var Zwe=s(l8);j_e=n(Zwe,"STRONG",{});var Dit=s(j_e);Tpr=r(Dit,"blenderbot"),Dit.forEach(t),Fpr=r(Zwe," \u2014 "),YG=n(Zwe,"A",{href:!0});var qit=s(YG);Cpr=r(qit,"FlaxBlenderbotModel"),qit.forEach(t),Mpr=r(Zwe," (Blenderbot model)"),Zwe.forEach(t),Epr=i(Q),i8=n(Q,"LI",{});var eAe=s(i8);N_e=n(eAe,"STRONG",{});var Git=s(N_e);ypr=r(Git,"blenderbot-small"),Git.forEach(t),wpr=r(eAe," \u2014 "),KG=n(eAe,"A",{href:!0});var Oit=s(KG);Apr=r(Oit,"FlaxBlenderbotSmallModel"),Oit.forEach(t),Lpr=r(eAe," (BlenderbotSmall model)"),eAe.forEach(t),Bpr=i(Q),d8=n(Q,"LI",{});var oAe=s(d8);D_e=n(oAe,"STRONG",{});var Xit=s(D_e);kpr=r(Xit,"clip"),Xit.forEach(t),xpr=r(oAe," \u2014 "),ZG=n(oAe,"A",{href:!0});var zit=s(ZG);Rpr=r(zit,"FlaxCLIPModel"),zit.forEach(t),Spr=r(oAe," (CLIP model)"),oAe.forEach(t),Ppr=i(Q),c8=n(Q,"LI",{});var rAe=s(c8);q_e=n(rAe,"STRONG",{});var Vit=s(q_e);$pr=r(Vit,"distilbert"),Vit.forEach(t),Ipr=r(rAe," \u2014 "),eO=n(rAe,"A",{href:!0});var Wit=s(eO);jpr=r(Wit,"FlaxDistilBertModel"),Wit.forEach(t),Npr=r(rAe," (DistilBERT model)"),rAe.forEach(t),Dpr=i(Q),f8=n(Q,"LI",{});var tAe=s(f8);G_e=n(tAe,"STRONG",{});var Qit=s(G_e);qpr=r(Qit,"electra"),Qit.forEach(t),Gpr=r(tAe," \u2014 "),oO=n(tAe,"A",{href:!0});var Hit=s(oO);Opr=r(Hit,"FlaxElectraModel"),Hit.forEach(t),Xpr=r(tAe," (ELECTRA model)"),tAe.forEach(t),zpr=i(Q),m8=n(Q,"LI",{});var aAe=s(m8);O_e=n(aAe,"STRONG",{});var Uit=s(O_e);Vpr=r(Uit,"gpt2"),Uit.forEach(t),Wpr=r(aAe," \u2014 "),rO=n(aAe,"A",{href:!0});var Jit=s(rO);Qpr=r(Jit,"FlaxGPT2Model"),Jit.forEach(t),Hpr=r(aAe," (OpenAI GPT-2 model)"),aAe.forEach(t),Upr=i(Q),g8=n(Q,"LI",{});var nAe=s(g8);X_e=n(nAe,"STRONG",{});var Yit=s(X_e);Jpr=r(Yit,"gpt_neo"),Yit.forEach(t),Ypr=r(nAe," \u2014 "),tO=n(nAe,"A",{href:!0});var Kit=s(tO);Kpr=r(Kit,"FlaxGPTNeoModel"),Kit.forEach(t),Zpr=r(nAe," (GPT Neo model)"),nAe.forEach(t),e_r=i(Q),h8=n(Q,"LI",{});var sAe=s(h8);z_e=n(sAe,"STRONG",{});var Zit=s(z_e);o_r=r(Zit,"gptj"),Zit.forEach(t),r_r=r(sAe," \u2014 "),aO=n(sAe,"A",{href:!0});var edt=s(aO);t_r=r(edt,"FlaxGPTJModel"),edt.forEach(t),a_r=r(sAe," (GPT-J model)"),sAe.forEach(t),n_r=i(Q),p8=n(Q,"LI",{});var lAe=s(p8);V_e=n(lAe,"STRONG",{});var odt=s(V_e);s_r=r(odt,"marian"),odt.forEach(t),l_r=r(lAe," \u2014 "),nO=n(lAe,"A",{href:!0});var rdt=s(nO);i_r=r(rdt,"FlaxMarianModel"),rdt.forEach(t),d_r=r(lAe," (Marian model)"),lAe.forEach(t),c_r=i(Q),_8=n(Q,"LI",{});var iAe=s(_8);W_e=n(iAe,"STRONG",{});var tdt=s(W_e);f_r=r(tdt,"mbart"),tdt.forEach(t),m_r=r(iAe," \u2014 "),sO=n(iAe,"A",{href:!0});var adt=s(sO);g_r=r(adt,"FlaxMBartModel"),adt.forEach(t),h_r=r(iAe," (mBART model)"),iAe.forEach(t),p_r=i(Q),u8=n(Q,"LI",{});var dAe=s(u8);Q_e=n(dAe,"STRONG",{});var ndt=s(Q_e);__r=r(ndt,"mt5"),ndt.forEach(t),u_r=r(dAe," \u2014 "),lO=n(dAe,"A",{href:!0});var sdt=s(lO);b_r=r(sdt,"FlaxMT5Model"),sdt.forEach(t),v_r=r(dAe," (mT5 model)"),dAe.forEach(t),T_r=i(Q),b8=n(Q,"LI",{});var cAe=s(b8);H_e=n(cAe,"STRONG",{});var ldt=s(H_e);F_r=r(ldt,"pegasus"),ldt.forEach(t),C_r=r(cAe," \u2014 "),iO=n(cAe,"A",{href:!0});var idt=s(iO);M_r=r(idt,"FlaxPegasusModel"),idt.forEach(t),E_r=r(cAe," (Pegasus model)"),cAe.forEach(t),y_r=i(Q),v8=n(Q,"LI",{});var fAe=s(v8);U_e=n(fAe,"STRONG",{});var ddt=s(U_e);w_r=r(ddt,"roberta"),ddt.forEach(t),A_r=r(fAe," \u2014 "),dO=n(fAe,"A",{href:!0});var cdt=s(dO);L_r=r(cdt,"FlaxRobertaModel"),cdt.forEach(t),B_r=r(fAe," (RoBERTa model)"),fAe.forEach(t),k_r=i(Q),T8=n(Q,"LI",{});var mAe=s(T8);J_e=n(mAe,"STRONG",{});var fdt=s(J_e);x_r=r(fdt,"roformer"),fdt.forEach(t),R_r=r(mAe," \u2014 "),cO=n(mAe,"A",{href:!0});var mdt=s(cO);S_r=r(mdt,"FlaxRoFormerModel"),mdt.forEach(t),P_r=r(mAe," (RoFormer model)"),mAe.forEach(t),$_r=i(Q),F8=n(Q,"LI",{});var gAe=s(F8);Y_e=n(gAe,"STRONG",{});var gdt=s(Y_e);I_r=r(gdt,"t5"),gdt.forEach(t),j_r=r(gAe," \u2014 "),fO=n(gAe,"A",{href:!0});var hdt=s(fO);N_r=r(hdt,"FlaxT5Model"),hdt.forEach(t),D_r=r(gAe," (T5 model)"),gAe.forEach(t),q_r=i(Q),C8=n(Q,"LI",{});var hAe=s(C8);K_e=n(hAe,"STRONG",{});var pdt=s(K_e);G_r=r(pdt,"vision-text-dual-encoder"),pdt.forEach(t),O_r=r(hAe," \u2014 "),mO=n(hAe,"A",{href:!0});var _dt=s(mO);X_r=r(_dt,"FlaxVisionTextDualEncoderModel"),_dt.forEach(t),z_r=r(hAe," (VisionTextDualEncoder model)"),hAe.forEach(t),V_r=i(Q),M8=n(Q,"LI",{});var pAe=s(M8);Z_e=n(pAe,"STRONG",{});var udt=s(Z_e);W_r=r(udt,"vit"),udt.forEach(t),Q_r=r(pAe," \u2014 "),gO=n(pAe,"A",{href:!0});var bdt=s(gO);H_r=r(bdt,"FlaxViTModel"),bdt.forEach(t),U_r=r(pAe," (ViT model)"),pAe.forEach(t),J_r=i(Q),E8=n(Q,"LI",{});var _Ae=s(E8);eue=n(_Ae,"STRONG",{});var vdt=s(eue);Y_r=r(vdt,"wav2vec2"),vdt.forEach(t),K_r=r(_Ae," \u2014 "),hO=n(_Ae,"A",{href:!0});var Tdt=s(hO);Z_r=r(Tdt,"FlaxWav2Vec2Model"),Tdt.forEach(t),eur=r(_Ae," (Wav2Vec2 model)"),_Ae.forEach(t),our=i(Q),y8=n(Q,"LI",{});var uAe=s(y8);oue=n(uAe,"STRONG",{});var Fdt=s(oue);rur=r(Fdt,"xglm"),Fdt.forEach(t),tur=r(uAe," \u2014 "),pO=n(uAe,"A",{href:!0});var Cdt=s(pO);aur=r(Cdt,"FlaxXGLMModel"),Cdt.forEach(t),nur=r(uAe," (XGLM model)"),uAe.forEach(t),Q.forEach(t),sur=i(Ma),rue=n(Ma,"P",{});var Mdt=s(rue);lur=r(Mdt,"Examples:"),Mdt.forEach(t),iur=i(Ma),m(mw.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),c9e=i(d),Xc=n(d,"H2",{class:!0});var vke=s(Xc);w8=n(vke,"A",{id:!0,class:!0,href:!0});var Edt=s(w8);tue=n(Edt,"SPAN",{});var ydt=s(tue);m(gw.$$.fragment,ydt),ydt.forEach(t),Edt.forEach(t),dur=i(vke),aue=n(vke,"SPAN",{});var wdt=s(aue);cur=r(wdt,"FlaxAutoModelForCausalLM"),wdt.forEach(t),vke.forEach(t),f9e=i(d),Ar=n(d,"DIV",{class:!0});var ti=s(Ar);m(hw.$$.fragment,ti),fur=i(ti),zc=n(ti,"P",{});var oV=s(zc);mur=r(oV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nue=n(oV,"CODE",{});var Adt=s(nue);gur=r(Adt,"from_pretrained()"),Adt.forEach(t),hur=r(oV,"class method or the "),sue=n(oV,"CODE",{});var Ldt=s(sue);pur=r(Ldt,"from_config()"),Ldt.forEach(t),_ur=r(oV,`class
method.`),oV.forEach(t),uur=i(ti),pw=n(ti,"P",{});var Tke=s(pw);bur=r(Tke,"This class cannot be instantiated directly using "),lue=n(Tke,"CODE",{});var Bdt=s(lue);vur=r(Bdt,"__init__()"),Bdt.forEach(t),Tur=r(Tke," (throws an error)."),Tke.forEach(t),Fur=i(ti),Tt=n(ti,"DIV",{class:!0});var ai=s(Tt);m(_w.$$.fragment,ai),Cur=i(ai),iue=n(ai,"P",{});var kdt=s(iue);Mur=r(kdt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kdt.forEach(t),Eur=i(ai),Vc=n(ai,"P",{});var rV=s(Vc);yur=r(rV,`Note:
Loading a model from its configuration file does `),due=n(rV,"STRONG",{});var xdt=s(due);wur=r(xdt,"not"),xdt.forEach(t),Aur=r(rV,` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=n(rV,"CODE",{});var Rdt=s(cue);Lur=r(Rdt,"from_pretrained()"),Rdt.forEach(t),Bur=r(rV,"to load the model weights."),rV.forEach(t),kur=i(ai),fue=n(ai,"P",{});var Sdt=s(fue);xur=r(Sdt,"Examples:"),Sdt.forEach(t),Rur=i(ai),m(uw.$$.fragment,ai),ai.forEach(t),Sur=i(ti),Ao=n(ti,"DIV",{class:!0});var Ea=s(Ao);m(bw.$$.fragment,Ea),Pur=i(Ea),mue=n(Ea,"P",{});var Pdt=s(mue);$ur=r(Pdt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pdt.forEach(t),Iur=i(Ea),Cn=n(Ea,"P",{});var jC=s(Cn);jur=r(jC,"The model class to instantiate is selected based on the "),gue=n(jC,"CODE",{});var $dt=s(gue);Nur=r($dt,"model_type"),$dt.forEach(t),Dur=r(jC,` property of the config object (either
passed as an argument or loaded from `),hue=n(jC,"CODE",{});var Idt=s(hue);qur=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),Gur=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(jC,"CODE",{});var jdt=s(pue);Our=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),Xur=r(jC,":"),jC.forEach(t),zur=i(Ea),Mn=n(Ea,"UL",{});var NC=s(Mn);A8=n(NC,"LI",{});var bAe=s(A8);_ue=n(bAe,"STRONG",{});var Ndt=s(_ue);Vur=r(Ndt,"gpt2"),Ndt.forEach(t),Wur=r(bAe," \u2014 "),_O=n(bAe,"A",{href:!0});var Ddt=s(_O);Qur=r(Ddt,"FlaxGPT2LMHeadModel"),Ddt.forEach(t),Hur=r(bAe," (OpenAI GPT-2 model)"),bAe.forEach(t),Uur=i(NC),L8=n(NC,"LI",{});var vAe=s(L8);uue=n(vAe,"STRONG",{});var qdt=s(uue);Jur=r(qdt,"gpt_neo"),qdt.forEach(t),Yur=r(vAe," \u2014 "),uO=n(vAe,"A",{href:!0});var Gdt=s(uO);Kur=r(Gdt,"FlaxGPTNeoForCausalLM"),Gdt.forEach(t),Zur=r(vAe," (GPT Neo model)"),vAe.forEach(t),e1r=i(NC),B8=n(NC,"LI",{});var TAe=s(B8);bue=n(TAe,"STRONG",{});var Odt=s(bue);o1r=r(Odt,"gptj"),Odt.forEach(t),r1r=r(TAe," \u2014 "),bO=n(TAe,"A",{href:!0});var Xdt=s(bO);t1r=r(Xdt,"FlaxGPTJForCausalLM"),Xdt.forEach(t),a1r=r(TAe," (GPT-J model)"),TAe.forEach(t),n1r=i(NC),k8=n(NC,"LI",{});var FAe=s(k8);vue=n(FAe,"STRONG",{});var zdt=s(vue);s1r=r(zdt,"xglm"),zdt.forEach(t),l1r=r(FAe," \u2014 "),vO=n(FAe,"A",{href:!0});var Vdt=s(vO);i1r=r(Vdt,"FlaxXGLMForCausalLM"),Vdt.forEach(t),d1r=r(FAe," (XGLM model)"),FAe.forEach(t),NC.forEach(t),c1r=i(Ea),Tue=n(Ea,"P",{});var Wdt=s(Tue);f1r=r(Wdt,"Examples:"),Wdt.forEach(t),m1r=i(Ea),m(vw.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),m9e=i(d),Wc=n(d,"H2",{class:!0});var Fke=s(Wc);x8=n(Fke,"A",{id:!0,class:!0,href:!0});var Qdt=s(x8);Fue=n(Qdt,"SPAN",{});var Hdt=s(Fue);m(Tw.$$.fragment,Hdt),Hdt.forEach(t),Qdt.forEach(t),g1r=i(Fke),Cue=n(Fke,"SPAN",{});var Udt=s(Cue);h1r=r(Udt,"FlaxAutoModelForPreTraining"),Udt.forEach(t),Fke.forEach(t),g9e=i(d),Lr=n(d,"DIV",{class:!0});var ni=s(Lr);m(Fw.$$.fragment,ni),p1r=i(ni),Qc=n(ni,"P",{});var tV=s(Qc);_1r=r(tV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Mue=n(tV,"CODE",{});var Jdt=s(Mue);u1r=r(Jdt,"from_pretrained()"),Jdt.forEach(t),b1r=r(tV,"class method or the "),Eue=n(tV,"CODE",{});var Ydt=s(Eue);v1r=r(Ydt,"from_config()"),Ydt.forEach(t),T1r=r(tV,`class
method.`),tV.forEach(t),F1r=i(ni),Cw=n(ni,"P",{});var Cke=s(Cw);C1r=r(Cke,"This class cannot be instantiated directly using "),yue=n(Cke,"CODE",{});var Kdt=s(yue);M1r=r(Kdt,"__init__()"),Kdt.forEach(t),E1r=r(Cke," (throws an error)."),Cke.forEach(t),y1r=i(ni),Ft=n(ni,"DIV",{class:!0});var si=s(Ft);m(Mw.$$.fragment,si),w1r=i(si),wue=n(si,"P",{});var Zdt=s(wue);A1r=r(Zdt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Zdt.forEach(t),L1r=i(si),Hc=n(si,"P",{});var aV=s(Hc);B1r=r(aV,`Note:
Loading a model from its configuration file does `),Aue=n(aV,"STRONG",{});var ect=s(Aue);k1r=r(ect,"not"),ect.forEach(t),x1r=r(aV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lue=n(aV,"CODE",{});var oct=s(Lue);R1r=r(oct,"from_pretrained()"),oct.forEach(t),S1r=r(aV,"to load the model weights."),aV.forEach(t),P1r=i(si),Bue=n(si,"P",{});var rct=s(Bue);$1r=r(rct,"Examples:"),rct.forEach(t),I1r=i(si),m(Ew.$$.fragment,si),si.forEach(t),j1r=i(ni),Lo=n(ni,"DIV",{class:!0});var ya=s(Lo);m(yw.$$.fragment,ya),N1r=i(ya),kue=n(ya,"P",{});var tct=s(kue);D1r=r(tct,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tct.forEach(t),q1r=i(ya),En=n(ya,"P",{});var DC=s(En);G1r=r(DC,"The model class to instantiate is selected based on the "),xue=n(DC,"CODE",{});var act=s(xue);O1r=r(act,"model_type"),act.forEach(t),X1r=r(DC,` property of the config object (either
passed as an argument or loaded from `),Rue=n(DC,"CODE",{});var nct=s(Rue);z1r=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),V1r=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(DC,"CODE",{});var sct=s(Sue);W1r=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),Q1r=r(DC,":"),DC.forEach(t),H1r=i(ya),fe=n(ya,"UL",{});var _e=s(fe);R8=n(_e,"LI",{});var CAe=s(R8);Pue=n(CAe,"STRONG",{});var lct=s(Pue);U1r=r(lct,"albert"),lct.forEach(t),J1r=r(CAe," \u2014 "),TO=n(CAe,"A",{href:!0});var ict=s(TO);Y1r=r(ict,"FlaxAlbertForPreTraining"),ict.forEach(t),K1r=r(CAe," (ALBERT model)"),CAe.forEach(t),Z1r=i(_e),S8=n(_e,"LI",{});var MAe=s(S8);$ue=n(MAe,"STRONG",{});var dct=s($ue);ebr=r(dct,"bart"),dct.forEach(t),obr=r(MAe," \u2014 "),FO=n(MAe,"A",{href:!0});var cct=s(FO);rbr=r(cct,"FlaxBartForConditionalGeneration"),cct.forEach(t),tbr=r(MAe," (BART model)"),MAe.forEach(t),abr=i(_e),P8=n(_e,"LI",{});var EAe=s(P8);Iue=n(EAe,"STRONG",{});var fct=s(Iue);nbr=r(fct,"bert"),fct.forEach(t),sbr=r(EAe," \u2014 "),CO=n(EAe,"A",{href:!0});var mct=s(CO);lbr=r(mct,"FlaxBertForPreTraining"),mct.forEach(t),ibr=r(EAe," (BERT model)"),EAe.forEach(t),dbr=i(_e),$8=n(_e,"LI",{});var yAe=s($8);jue=n(yAe,"STRONG",{});var gct=s(jue);cbr=r(gct,"big_bird"),gct.forEach(t),fbr=r(yAe," \u2014 "),MO=n(yAe,"A",{href:!0});var hct=s(MO);mbr=r(hct,"FlaxBigBirdForPreTraining"),hct.forEach(t),gbr=r(yAe," (BigBird model)"),yAe.forEach(t),hbr=i(_e),I8=n(_e,"LI",{});var wAe=s(I8);Nue=n(wAe,"STRONG",{});var pct=s(Nue);pbr=r(pct,"electra"),pct.forEach(t),_br=r(wAe," \u2014 "),EO=n(wAe,"A",{href:!0});var _ct=s(EO);ubr=r(_ct,"FlaxElectraForPreTraining"),_ct.forEach(t),bbr=r(wAe," (ELECTRA model)"),wAe.forEach(t),vbr=i(_e),j8=n(_e,"LI",{});var AAe=s(j8);Due=n(AAe,"STRONG",{});var uct=s(Due);Tbr=r(uct,"mbart"),uct.forEach(t),Fbr=r(AAe," \u2014 "),yO=n(AAe,"A",{href:!0});var bct=s(yO);Cbr=r(bct,"FlaxMBartForConditionalGeneration"),bct.forEach(t),Mbr=r(AAe," (mBART model)"),AAe.forEach(t),Ebr=i(_e),N8=n(_e,"LI",{});var LAe=s(N8);que=n(LAe,"STRONG",{});var vct=s(que);ybr=r(vct,"mt5"),vct.forEach(t),wbr=r(LAe," \u2014 "),wO=n(LAe,"A",{href:!0});var Tct=s(wO);Abr=r(Tct,"FlaxMT5ForConditionalGeneration"),Tct.forEach(t),Lbr=r(LAe," (mT5 model)"),LAe.forEach(t),Bbr=i(_e),D8=n(_e,"LI",{});var BAe=s(D8);Gue=n(BAe,"STRONG",{});var Fct=s(Gue);kbr=r(Fct,"roberta"),Fct.forEach(t),xbr=r(BAe," \u2014 "),AO=n(BAe,"A",{href:!0});var Cct=s(AO);Rbr=r(Cct,"FlaxRobertaForMaskedLM"),Cct.forEach(t),Sbr=r(BAe," (RoBERTa model)"),BAe.forEach(t),Pbr=i(_e),q8=n(_e,"LI",{});var kAe=s(q8);Oue=n(kAe,"STRONG",{});var Mct=s(Oue);$br=r(Mct,"roformer"),Mct.forEach(t),Ibr=r(kAe," \u2014 "),LO=n(kAe,"A",{href:!0});var Ect=s(LO);jbr=r(Ect,"FlaxRoFormerForMaskedLM"),Ect.forEach(t),Nbr=r(kAe," (RoFormer model)"),kAe.forEach(t),Dbr=i(_e),G8=n(_e,"LI",{});var xAe=s(G8);Xue=n(xAe,"STRONG",{});var yct=s(Xue);qbr=r(yct,"t5"),yct.forEach(t),Gbr=r(xAe," \u2014 "),BO=n(xAe,"A",{href:!0});var wct=s(BO);Obr=r(wct,"FlaxT5ForConditionalGeneration"),wct.forEach(t),Xbr=r(xAe," (T5 model)"),xAe.forEach(t),zbr=i(_e),O8=n(_e,"LI",{});var RAe=s(O8);zue=n(RAe,"STRONG",{});var Act=s(zue);Vbr=r(Act,"wav2vec2"),Act.forEach(t),Wbr=r(RAe," \u2014 "),kO=n(RAe,"A",{href:!0});var Lct=s(kO);Qbr=r(Lct,"FlaxWav2Vec2ForPreTraining"),Lct.forEach(t),Hbr=r(RAe," (Wav2Vec2 model)"),RAe.forEach(t),_e.forEach(t),Ubr=i(ya),Vue=n(ya,"P",{});var Bct=s(Vue);Jbr=r(Bct,"Examples:"),Bct.forEach(t),Ybr=i(ya),m(ww.$$.fragment,ya),ya.forEach(t),ni.forEach(t),h9e=i(d),Uc=n(d,"H2",{class:!0});var Mke=s(Uc);X8=n(Mke,"A",{id:!0,class:!0,href:!0});var kct=s(X8);Wue=n(kct,"SPAN",{});var xct=s(Wue);m(Aw.$$.fragment,xct),xct.forEach(t),kct.forEach(t),Kbr=i(Mke),Que=n(Mke,"SPAN",{});var Rct=s(Que);Zbr=r(Rct,"FlaxAutoModelForMaskedLM"),Rct.forEach(t),Mke.forEach(t),p9e=i(d),Br=n(d,"DIV",{class:!0});var li=s(Br);m(Lw.$$.fragment,li),e5r=i(li),Jc=n(li,"P",{});var nV=s(Jc);o5r=r(nV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hue=n(nV,"CODE",{});var Sct=s(Hue);r5r=r(Sct,"from_pretrained()"),Sct.forEach(t),t5r=r(nV,"class method or the "),Uue=n(nV,"CODE",{});var Pct=s(Uue);a5r=r(Pct,"from_config()"),Pct.forEach(t),n5r=r(nV,`class
method.`),nV.forEach(t),s5r=i(li),Bw=n(li,"P",{});var Eke=s(Bw);l5r=r(Eke,"This class cannot be instantiated directly using "),Jue=n(Eke,"CODE",{});var $ct=s(Jue);i5r=r($ct,"__init__()"),$ct.forEach(t),d5r=r(Eke," (throws an error)."),Eke.forEach(t),c5r=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(kw.$$.fragment,ii),f5r=i(ii),Yue=n(ii,"P",{});var Ict=s(Yue);m5r=r(Ict,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ict.forEach(t),g5r=i(ii),Yc=n(ii,"P",{});var sV=s(Yc);h5r=r(sV,`Note:
Loading a model from its configuration file does `),Kue=n(sV,"STRONG",{});var jct=s(Kue);p5r=r(jct,"not"),jct.forEach(t),_5r=r(sV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zue=n(sV,"CODE",{});var Nct=s(Zue);u5r=r(Nct,"from_pretrained()"),Nct.forEach(t),b5r=r(sV,"to load the model weights."),sV.forEach(t),v5r=i(ii),e1e=n(ii,"P",{});var Dct=s(e1e);T5r=r(Dct,"Examples:"),Dct.forEach(t),F5r=i(ii),m(xw.$$.fragment,ii),ii.forEach(t),C5r=i(li),Bo=n(li,"DIV",{class:!0});var wa=s(Bo);m(Rw.$$.fragment,wa),M5r=i(wa),o1e=n(wa,"P",{});var qct=s(o1e);E5r=r(qct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qct.forEach(t),y5r=i(wa),yn=n(wa,"P",{});var qC=s(yn);w5r=r(qC,"The model class to instantiate is selected based on the "),r1e=n(qC,"CODE",{});var Gct=s(r1e);A5r=r(Gct,"model_type"),Gct.forEach(t),L5r=r(qC,` property of the config object (either
passed as an argument or loaded from `),t1e=n(qC,"CODE",{});var Oct=s(t1e);B5r=r(Oct,"pretrained_model_name_or_path"),Oct.forEach(t),k5r=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(qC,"CODE",{});var Xct=s(a1e);x5r=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),R5r=r(qC,":"),qC.forEach(t),S5r=i(wa),ve=n(wa,"UL",{});var Ze=s(ve);z8=n(Ze,"LI",{});var SAe=s(z8);n1e=n(SAe,"STRONG",{});var zct=s(n1e);P5r=r(zct,"albert"),zct.forEach(t),$5r=r(SAe," \u2014 "),xO=n(SAe,"A",{href:!0});var Vct=s(xO);I5r=r(Vct,"FlaxAlbertForMaskedLM"),Vct.forEach(t),j5r=r(SAe," (ALBERT model)"),SAe.forEach(t),N5r=i(Ze),V8=n(Ze,"LI",{});var PAe=s(V8);s1e=n(PAe,"STRONG",{});var Wct=s(s1e);D5r=r(Wct,"bart"),Wct.forEach(t),q5r=r(PAe," \u2014 "),RO=n(PAe,"A",{href:!0});var Qct=s(RO);G5r=r(Qct,"FlaxBartForConditionalGeneration"),Qct.forEach(t),O5r=r(PAe," (BART model)"),PAe.forEach(t),X5r=i(Ze),W8=n(Ze,"LI",{});var $Ae=s(W8);l1e=n($Ae,"STRONG",{});var Hct=s(l1e);z5r=r(Hct,"bert"),Hct.forEach(t),V5r=r($Ae," \u2014 "),SO=n($Ae,"A",{href:!0});var Uct=s(SO);W5r=r(Uct,"FlaxBertForMaskedLM"),Uct.forEach(t),Q5r=r($Ae," (BERT model)"),$Ae.forEach(t),H5r=i(Ze),Q8=n(Ze,"LI",{});var IAe=s(Q8);i1e=n(IAe,"STRONG",{});var Jct=s(i1e);U5r=r(Jct,"big_bird"),Jct.forEach(t),J5r=r(IAe," \u2014 "),PO=n(IAe,"A",{href:!0});var Yct=s(PO);Y5r=r(Yct,"FlaxBigBirdForMaskedLM"),Yct.forEach(t),K5r=r(IAe," (BigBird model)"),IAe.forEach(t),Z5r=i(Ze),H8=n(Ze,"LI",{});var jAe=s(H8);d1e=n(jAe,"STRONG",{});var Kct=s(d1e);e2r=r(Kct,"distilbert"),Kct.forEach(t),o2r=r(jAe," \u2014 "),$O=n(jAe,"A",{href:!0});var Zct=s($O);r2r=r(Zct,"FlaxDistilBertForMaskedLM"),Zct.forEach(t),t2r=r(jAe," (DistilBERT model)"),jAe.forEach(t),a2r=i(Ze),U8=n(Ze,"LI",{});var NAe=s(U8);c1e=n(NAe,"STRONG",{});var eft=s(c1e);n2r=r(eft,"electra"),eft.forEach(t),s2r=r(NAe," \u2014 "),IO=n(NAe,"A",{href:!0});var oft=s(IO);l2r=r(oft,"FlaxElectraForMaskedLM"),oft.forEach(t),i2r=r(NAe," (ELECTRA model)"),NAe.forEach(t),d2r=i(Ze),J8=n(Ze,"LI",{});var DAe=s(J8);f1e=n(DAe,"STRONG",{});var rft=s(f1e);c2r=r(rft,"mbart"),rft.forEach(t),f2r=r(DAe," \u2014 "),jO=n(DAe,"A",{href:!0});var tft=s(jO);m2r=r(tft,"FlaxMBartForConditionalGeneration"),tft.forEach(t),g2r=r(DAe," (mBART model)"),DAe.forEach(t),h2r=i(Ze),Y8=n(Ze,"LI",{});var qAe=s(Y8);m1e=n(qAe,"STRONG",{});var aft=s(m1e);p2r=r(aft,"roberta"),aft.forEach(t),_2r=r(qAe," \u2014 "),NO=n(qAe,"A",{href:!0});var nft=s(NO);u2r=r(nft,"FlaxRobertaForMaskedLM"),nft.forEach(t),b2r=r(qAe," (RoBERTa model)"),qAe.forEach(t),v2r=i(Ze),K8=n(Ze,"LI",{});var GAe=s(K8);g1e=n(GAe,"STRONG",{});var sft=s(g1e);T2r=r(sft,"roformer"),sft.forEach(t),F2r=r(GAe," \u2014 "),DO=n(GAe,"A",{href:!0});var lft=s(DO);C2r=r(lft,"FlaxRoFormerForMaskedLM"),lft.forEach(t),M2r=r(GAe," (RoFormer model)"),GAe.forEach(t),Ze.forEach(t),E2r=i(wa),h1e=n(wa,"P",{});var ift=s(h1e);y2r=r(ift,"Examples:"),ift.forEach(t),w2r=i(wa),m(Sw.$$.fragment,wa),wa.forEach(t),li.forEach(t),_9e=i(d),Kc=n(d,"H2",{class:!0});var yke=s(Kc);Z8=n(yke,"A",{id:!0,class:!0,href:!0});var dft=s(Z8);p1e=n(dft,"SPAN",{});var cft=s(p1e);m(Pw.$$.fragment,cft),cft.forEach(t),dft.forEach(t),A2r=i(yke),_1e=n(yke,"SPAN",{});var fft=s(_1e);L2r=r(fft,"FlaxAutoModelForSeq2SeqLM"),fft.forEach(t),yke.forEach(t),u9e=i(d),kr=n(d,"DIV",{class:!0});var di=s(kr);m($w.$$.fragment,di),B2r=i(di),Zc=n(di,"P",{});var lV=s(Zc);k2r=r(lV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),u1e=n(lV,"CODE",{});var mft=s(u1e);x2r=r(mft,"from_pretrained()"),mft.forEach(t),R2r=r(lV,"class method or the "),b1e=n(lV,"CODE",{});var gft=s(b1e);S2r=r(gft,"from_config()"),gft.forEach(t),P2r=r(lV,`class
method.`),lV.forEach(t),$2r=i(di),Iw=n(di,"P",{});var wke=s(Iw);I2r=r(wke,"This class cannot be instantiated directly using "),v1e=n(wke,"CODE",{});var hft=s(v1e);j2r=r(hft,"__init__()"),hft.forEach(t),N2r=r(wke," (throws an error)."),wke.forEach(t),D2r=i(di),Mt=n(di,"DIV",{class:!0});var ci=s(Mt);m(jw.$$.fragment,ci),q2r=i(ci),T1e=n(ci,"P",{});var pft=s(T1e);G2r=r(pft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pft.forEach(t),O2r=i(ci),ef=n(ci,"P",{});var iV=s(ef);X2r=r(iV,`Note:
Loading a model from its configuration file does `),F1e=n(iV,"STRONG",{});var _ft=s(F1e);z2r=r(_ft,"not"),_ft.forEach(t),V2r=r(iV,` load the model weights. It only affects the
model\u2019s configuration. Use `),C1e=n(iV,"CODE",{});var uft=s(C1e);W2r=r(uft,"from_pretrained()"),uft.forEach(t),Q2r=r(iV,"to load the model weights."),iV.forEach(t),H2r=i(ci),M1e=n(ci,"P",{});var bft=s(M1e);U2r=r(bft,"Examples:"),bft.forEach(t),J2r=i(ci),m(Nw.$$.fragment,ci),ci.forEach(t),Y2r=i(di),ko=n(di,"DIV",{class:!0});var Aa=s(ko);m(Dw.$$.fragment,Aa),K2r=i(Aa),E1e=n(Aa,"P",{});var vft=s(E1e);Z2r=r(vft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vft.forEach(t),evr=i(Aa),wn=n(Aa,"P",{});var GC=s(wn);ovr=r(GC,"The model class to instantiate is selected based on the "),y1e=n(GC,"CODE",{});var Tft=s(y1e);rvr=r(Tft,"model_type"),Tft.forEach(t),tvr=r(GC,` property of the config object (either
passed as an argument or loaded from `),w1e=n(GC,"CODE",{});var Fft=s(w1e);avr=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),nvr=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(GC,"CODE",{});var Cft=s(A1e);svr=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),lvr=r(GC,":"),GC.forEach(t),ivr=i(Aa),Te=n(Aa,"UL",{});var eo=s(Te);eF=n(eo,"LI",{});var OAe=s(eF);L1e=n(OAe,"STRONG",{});var Mft=s(L1e);dvr=r(Mft,"bart"),Mft.forEach(t),cvr=r(OAe," \u2014 "),qO=n(OAe,"A",{href:!0});var Eft=s(qO);fvr=r(Eft,"FlaxBartForConditionalGeneration"),Eft.forEach(t),mvr=r(OAe," (BART model)"),OAe.forEach(t),gvr=i(eo),oF=n(eo,"LI",{});var XAe=s(oF);B1e=n(XAe,"STRONG",{});var yft=s(B1e);hvr=r(yft,"blenderbot"),yft.forEach(t),pvr=r(XAe," \u2014 "),GO=n(XAe,"A",{href:!0});var wft=s(GO);_vr=r(wft,"FlaxBlenderbotForConditionalGeneration"),wft.forEach(t),uvr=r(XAe," (Blenderbot model)"),XAe.forEach(t),bvr=i(eo),rF=n(eo,"LI",{});var zAe=s(rF);k1e=n(zAe,"STRONG",{});var Aft=s(k1e);vvr=r(Aft,"blenderbot-small"),Aft.forEach(t),Tvr=r(zAe," \u2014 "),OO=n(zAe,"A",{href:!0});var Lft=s(OO);Fvr=r(Lft,"FlaxBlenderbotSmallForConditionalGeneration"),Lft.forEach(t),Cvr=r(zAe," (BlenderbotSmall model)"),zAe.forEach(t),Mvr=i(eo),tF=n(eo,"LI",{});var VAe=s(tF);x1e=n(VAe,"STRONG",{});var Bft=s(x1e);Evr=r(Bft,"encoder-decoder"),Bft.forEach(t),yvr=r(VAe," \u2014 "),XO=n(VAe,"A",{href:!0});var kft=s(XO);wvr=r(kft,"FlaxEncoderDecoderModel"),kft.forEach(t),Avr=r(VAe," (Encoder decoder model)"),VAe.forEach(t),Lvr=i(eo),aF=n(eo,"LI",{});var WAe=s(aF);R1e=n(WAe,"STRONG",{});var xft=s(R1e);Bvr=r(xft,"marian"),xft.forEach(t),kvr=r(WAe," \u2014 "),zO=n(WAe,"A",{href:!0});var Rft=s(zO);xvr=r(Rft,"FlaxMarianMTModel"),Rft.forEach(t),Rvr=r(WAe," (Marian model)"),WAe.forEach(t),Svr=i(eo),nF=n(eo,"LI",{});var QAe=s(nF);S1e=n(QAe,"STRONG",{});var Sft=s(S1e);Pvr=r(Sft,"mbart"),Sft.forEach(t),$vr=r(QAe," \u2014 "),VO=n(QAe,"A",{href:!0});var Pft=s(VO);Ivr=r(Pft,"FlaxMBartForConditionalGeneration"),Pft.forEach(t),jvr=r(QAe," (mBART model)"),QAe.forEach(t),Nvr=i(eo),sF=n(eo,"LI",{});var HAe=s(sF);P1e=n(HAe,"STRONG",{});var $ft=s(P1e);Dvr=r($ft,"mt5"),$ft.forEach(t),qvr=r(HAe," \u2014 "),WO=n(HAe,"A",{href:!0});var Ift=s(WO);Gvr=r(Ift,"FlaxMT5ForConditionalGeneration"),Ift.forEach(t),Ovr=r(HAe," (mT5 model)"),HAe.forEach(t),Xvr=i(eo),lF=n(eo,"LI",{});var UAe=s(lF);$1e=n(UAe,"STRONG",{});var jft=s($1e);zvr=r(jft,"pegasus"),jft.forEach(t),Vvr=r(UAe," \u2014 "),QO=n(UAe,"A",{href:!0});var Nft=s(QO);Wvr=r(Nft,"FlaxPegasusForConditionalGeneration"),Nft.forEach(t),Qvr=r(UAe," (Pegasus model)"),UAe.forEach(t),Hvr=i(eo),iF=n(eo,"LI",{});var JAe=s(iF);I1e=n(JAe,"STRONG",{});var Dft=s(I1e);Uvr=r(Dft,"t5"),Dft.forEach(t),Jvr=r(JAe," \u2014 "),HO=n(JAe,"A",{href:!0});var qft=s(HO);Yvr=r(qft,"FlaxT5ForConditionalGeneration"),qft.forEach(t),Kvr=r(JAe," (T5 model)"),JAe.forEach(t),eo.forEach(t),Zvr=i(Aa),j1e=n(Aa,"P",{});var Gft=s(j1e);e6r=r(Gft,"Examples:"),Gft.forEach(t),o6r=i(Aa),m(qw.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),b9e=i(d),of=n(d,"H2",{class:!0});var Ake=s(of);dF=n(Ake,"A",{id:!0,class:!0,href:!0});var Oft=s(dF);N1e=n(Oft,"SPAN",{});var Xft=s(N1e);m(Gw.$$.fragment,Xft),Xft.forEach(t),Oft.forEach(t),r6r=i(Ake),D1e=n(Ake,"SPAN",{});var zft=s(D1e);t6r=r(zft,"FlaxAutoModelForSequenceClassification"),zft.forEach(t),Ake.forEach(t),v9e=i(d),xr=n(d,"DIV",{class:!0});var fi=s(xr);m(Ow.$$.fragment,fi),a6r=i(fi),rf=n(fi,"P",{});var dV=s(rf);n6r=r(dV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),q1e=n(dV,"CODE",{});var Vft=s(q1e);s6r=r(Vft,"from_pretrained()"),Vft.forEach(t),l6r=r(dV,"class method or the "),G1e=n(dV,"CODE",{});var Wft=s(G1e);i6r=r(Wft,"from_config()"),Wft.forEach(t),d6r=r(dV,`class
method.`),dV.forEach(t),c6r=i(fi),Xw=n(fi,"P",{});var Lke=s(Xw);f6r=r(Lke,"This class cannot be instantiated directly using "),O1e=n(Lke,"CODE",{});var Qft=s(O1e);m6r=r(Qft,"__init__()"),Qft.forEach(t),g6r=r(Lke," (throws an error)."),Lke.forEach(t),h6r=i(fi),Et=n(fi,"DIV",{class:!0});var mi=s(Et);m(zw.$$.fragment,mi),p6r=i(mi),X1e=n(mi,"P",{});var Hft=s(X1e);_6r=r(Hft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Hft.forEach(t),u6r=i(mi),tf=n(mi,"P",{});var cV=s(tf);b6r=r(cV,`Note:
Loading a model from its configuration file does `),z1e=n(cV,"STRONG",{});var Uft=s(z1e);v6r=r(Uft,"not"),Uft.forEach(t),T6r=r(cV,` load the model weights. It only affects the
model\u2019s configuration. Use `),V1e=n(cV,"CODE",{});var Jft=s(V1e);F6r=r(Jft,"from_pretrained()"),Jft.forEach(t),C6r=r(cV,"to load the model weights."),cV.forEach(t),M6r=i(mi),W1e=n(mi,"P",{});var Yft=s(W1e);E6r=r(Yft,"Examples:"),Yft.forEach(t),y6r=i(mi),m(Vw.$$.fragment,mi),mi.forEach(t),w6r=i(fi),xo=n(fi,"DIV",{class:!0});var La=s(xo);m(Ww.$$.fragment,La),A6r=i(La),Q1e=n(La,"P",{});var Kft=s(Q1e);L6r=r(Kft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kft.forEach(t),B6r=i(La),An=n(La,"P",{});var OC=s(An);k6r=r(OC,"The model class to instantiate is selected based on the "),H1e=n(OC,"CODE",{});var Zft=s(H1e);x6r=r(Zft,"model_type"),Zft.forEach(t),R6r=r(OC,` property of the config object (either
passed as an argument or loaded from `),U1e=n(OC,"CODE",{});var emt=s(U1e);S6r=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),P6r=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(OC,"CODE",{});var omt=s(J1e);$6r=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),I6r=r(OC,":"),OC.forEach(t),j6r=i(La),Fe=n(La,"UL",{});var oo=s(Fe);cF=n(oo,"LI",{});var YAe=s(cF);Y1e=n(YAe,"STRONG",{});var rmt=s(Y1e);N6r=r(rmt,"albert"),rmt.forEach(t),D6r=r(YAe," \u2014 "),UO=n(YAe,"A",{href:!0});var tmt=s(UO);q6r=r(tmt,"FlaxAlbertForSequenceClassification"),tmt.forEach(t),G6r=r(YAe," (ALBERT model)"),YAe.forEach(t),O6r=i(oo),fF=n(oo,"LI",{});var KAe=s(fF);K1e=n(KAe,"STRONG",{});var amt=s(K1e);X6r=r(amt,"bart"),amt.forEach(t),z6r=r(KAe," \u2014 "),JO=n(KAe,"A",{href:!0});var nmt=s(JO);V6r=r(nmt,"FlaxBartForSequenceClassification"),nmt.forEach(t),W6r=r(KAe," (BART model)"),KAe.forEach(t),Q6r=i(oo),mF=n(oo,"LI",{});var ZAe=s(mF);Z1e=n(ZAe,"STRONG",{});var smt=s(Z1e);H6r=r(smt,"bert"),smt.forEach(t),U6r=r(ZAe," \u2014 "),YO=n(ZAe,"A",{href:!0});var lmt=s(YO);J6r=r(lmt,"FlaxBertForSequenceClassification"),lmt.forEach(t),Y6r=r(ZAe," (BERT model)"),ZAe.forEach(t),K6r=i(oo),gF=n(oo,"LI",{});var e0e=s(gF);ebe=n(e0e,"STRONG",{});var imt=s(ebe);Z6r=r(imt,"big_bird"),imt.forEach(t),eTr=r(e0e," \u2014 "),KO=n(e0e,"A",{href:!0});var dmt=s(KO);oTr=r(dmt,"FlaxBigBirdForSequenceClassification"),dmt.forEach(t),rTr=r(e0e," (BigBird model)"),e0e.forEach(t),tTr=i(oo),hF=n(oo,"LI",{});var o0e=s(hF);obe=n(o0e,"STRONG",{});var cmt=s(obe);aTr=r(cmt,"distilbert"),cmt.forEach(t),nTr=r(o0e," \u2014 "),ZO=n(o0e,"A",{href:!0});var fmt=s(ZO);sTr=r(fmt,"FlaxDistilBertForSequenceClassification"),fmt.forEach(t),lTr=r(o0e," (DistilBERT model)"),o0e.forEach(t),iTr=i(oo),pF=n(oo,"LI",{});var r0e=s(pF);rbe=n(r0e,"STRONG",{});var mmt=s(rbe);dTr=r(mmt,"electra"),mmt.forEach(t),cTr=r(r0e," \u2014 "),eX=n(r0e,"A",{href:!0});var gmt=s(eX);fTr=r(gmt,"FlaxElectraForSequenceClassification"),gmt.forEach(t),mTr=r(r0e," (ELECTRA model)"),r0e.forEach(t),gTr=i(oo),_F=n(oo,"LI",{});var t0e=s(_F);tbe=n(t0e,"STRONG",{});var hmt=s(tbe);hTr=r(hmt,"mbart"),hmt.forEach(t),pTr=r(t0e," \u2014 "),oX=n(t0e,"A",{href:!0});var pmt=s(oX);_Tr=r(pmt,"FlaxMBartForSequenceClassification"),pmt.forEach(t),uTr=r(t0e," (mBART model)"),t0e.forEach(t),bTr=i(oo),uF=n(oo,"LI",{});var a0e=s(uF);abe=n(a0e,"STRONG",{});var _mt=s(abe);vTr=r(_mt,"roberta"),_mt.forEach(t),TTr=r(a0e," \u2014 "),rX=n(a0e,"A",{href:!0});var umt=s(rX);FTr=r(umt,"FlaxRobertaForSequenceClassification"),umt.forEach(t),CTr=r(a0e," (RoBERTa model)"),a0e.forEach(t),MTr=i(oo),bF=n(oo,"LI",{});var n0e=s(bF);nbe=n(n0e,"STRONG",{});var bmt=s(nbe);ETr=r(bmt,"roformer"),bmt.forEach(t),yTr=r(n0e," \u2014 "),tX=n(n0e,"A",{href:!0});var vmt=s(tX);wTr=r(vmt,"FlaxRoFormerForSequenceClassification"),vmt.forEach(t),ATr=r(n0e," (RoFormer model)"),n0e.forEach(t),oo.forEach(t),LTr=i(La),sbe=n(La,"P",{});var Tmt=s(sbe);BTr=r(Tmt,"Examples:"),Tmt.forEach(t),kTr=i(La),m(Qw.$$.fragment,La),La.forEach(t),fi.forEach(t),T9e=i(d),af=n(d,"H2",{class:!0});var Bke=s(af);vF=n(Bke,"A",{id:!0,class:!0,href:!0});var Fmt=s(vF);lbe=n(Fmt,"SPAN",{});var Cmt=s(lbe);m(Hw.$$.fragment,Cmt),Cmt.forEach(t),Fmt.forEach(t),xTr=i(Bke),ibe=n(Bke,"SPAN",{});var Mmt=s(ibe);RTr=r(Mmt,"FlaxAutoModelForQuestionAnswering"),Mmt.forEach(t),Bke.forEach(t),F9e=i(d),Rr=n(d,"DIV",{class:!0});var gi=s(Rr);m(Uw.$$.fragment,gi),STr=i(gi),nf=n(gi,"P",{});var fV=s(nf);PTr=r(fV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dbe=n(fV,"CODE",{});var Emt=s(dbe);$Tr=r(Emt,"from_pretrained()"),Emt.forEach(t),ITr=r(fV,"class method or the "),cbe=n(fV,"CODE",{});var ymt=s(cbe);jTr=r(ymt,"from_config()"),ymt.forEach(t),NTr=r(fV,`class
method.`),fV.forEach(t),DTr=i(gi),Jw=n(gi,"P",{});var kke=s(Jw);qTr=r(kke,"This class cannot be instantiated directly using "),fbe=n(kke,"CODE",{});var wmt=s(fbe);GTr=r(wmt,"__init__()"),wmt.forEach(t),OTr=r(kke," (throws an error)."),kke.forEach(t),XTr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Yw.$$.fragment,hi),zTr=i(hi),mbe=n(hi,"P",{});var Amt=s(mbe);VTr=r(Amt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Amt.forEach(t),WTr=i(hi),sf=n(hi,"P",{});var mV=s(sf);QTr=r(mV,`Note:
Loading a model from its configuration file does `),gbe=n(mV,"STRONG",{});var Lmt=s(gbe);HTr=r(Lmt,"not"),Lmt.forEach(t),UTr=r(mV,` load the model weights. It only affects the
model\u2019s configuration. Use `),hbe=n(mV,"CODE",{});var Bmt=s(hbe);JTr=r(Bmt,"from_pretrained()"),Bmt.forEach(t),YTr=r(mV,"to load the model weights."),mV.forEach(t),KTr=i(hi),pbe=n(hi,"P",{});var kmt=s(pbe);ZTr=r(kmt,"Examples:"),kmt.forEach(t),e7r=i(hi),m(Kw.$$.fragment,hi),hi.forEach(t),o7r=i(gi),Ro=n(gi,"DIV",{class:!0});var Ba=s(Ro);m(Zw.$$.fragment,Ba),r7r=i(Ba),_be=n(Ba,"P",{});var xmt=s(_be);t7r=r(xmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xmt.forEach(t),a7r=i(Ba),Ln=n(Ba,"P",{});var XC=s(Ln);n7r=r(XC,"The model class to instantiate is selected based on the "),ube=n(XC,"CODE",{});var Rmt=s(ube);s7r=r(Rmt,"model_type"),Rmt.forEach(t),l7r=r(XC,` property of the config object (either
passed as an argument or loaded from `),bbe=n(XC,"CODE",{});var Smt=s(bbe);i7r=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),d7r=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(XC,"CODE",{});var Pmt=s(vbe);c7r=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),f7r=r(XC,":"),XC.forEach(t),m7r=i(Ba),Ce=n(Ba,"UL",{});var ro=s(Ce);TF=n(ro,"LI",{});var s0e=s(TF);Tbe=n(s0e,"STRONG",{});var $mt=s(Tbe);g7r=r($mt,"albert"),$mt.forEach(t),h7r=r(s0e," \u2014 "),aX=n(s0e,"A",{href:!0});var Imt=s(aX);p7r=r(Imt,"FlaxAlbertForQuestionAnswering"),Imt.forEach(t),_7r=r(s0e," (ALBERT model)"),s0e.forEach(t),u7r=i(ro),FF=n(ro,"LI",{});var l0e=s(FF);Fbe=n(l0e,"STRONG",{});var jmt=s(Fbe);b7r=r(jmt,"bart"),jmt.forEach(t),v7r=r(l0e," \u2014 "),nX=n(l0e,"A",{href:!0});var Nmt=s(nX);T7r=r(Nmt,"FlaxBartForQuestionAnswering"),Nmt.forEach(t),F7r=r(l0e," (BART model)"),l0e.forEach(t),C7r=i(ro),CF=n(ro,"LI",{});var i0e=s(CF);Cbe=n(i0e,"STRONG",{});var Dmt=s(Cbe);M7r=r(Dmt,"bert"),Dmt.forEach(t),E7r=r(i0e," \u2014 "),sX=n(i0e,"A",{href:!0});var qmt=s(sX);y7r=r(qmt,"FlaxBertForQuestionAnswering"),qmt.forEach(t),w7r=r(i0e," (BERT model)"),i0e.forEach(t),A7r=i(ro),MF=n(ro,"LI",{});var d0e=s(MF);Mbe=n(d0e,"STRONG",{});var Gmt=s(Mbe);L7r=r(Gmt,"big_bird"),Gmt.forEach(t),B7r=r(d0e," \u2014 "),lX=n(d0e,"A",{href:!0});var Omt=s(lX);k7r=r(Omt,"FlaxBigBirdForQuestionAnswering"),Omt.forEach(t),x7r=r(d0e," (BigBird model)"),d0e.forEach(t),R7r=i(ro),EF=n(ro,"LI",{});var c0e=s(EF);Ebe=n(c0e,"STRONG",{});var Xmt=s(Ebe);S7r=r(Xmt,"distilbert"),Xmt.forEach(t),P7r=r(c0e," \u2014 "),iX=n(c0e,"A",{href:!0});var zmt=s(iX);$7r=r(zmt,"FlaxDistilBertForQuestionAnswering"),zmt.forEach(t),I7r=r(c0e," (DistilBERT model)"),c0e.forEach(t),j7r=i(ro),yF=n(ro,"LI",{});var f0e=s(yF);ybe=n(f0e,"STRONG",{});var Vmt=s(ybe);N7r=r(Vmt,"electra"),Vmt.forEach(t),D7r=r(f0e," \u2014 "),dX=n(f0e,"A",{href:!0});var Wmt=s(dX);q7r=r(Wmt,"FlaxElectraForQuestionAnswering"),Wmt.forEach(t),G7r=r(f0e," (ELECTRA model)"),f0e.forEach(t),O7r=i(ro),wF=n(ro,"LI",{});var m0e=s(wF);wbe=n(m0e,"STRONG",{});var Qmt=s(wbe);X7r=r(Qmt,"mbart"),Qmt.forEach(t),z7r=r(m0e," \u2014 "),cX=n(m0e,"A",{href:!0});var Hmt=s(cX);V7r=r(Hmt,"FlaxMBartForQuestionAnswering"),Hmt.forEach(t),W7r=r(m0e," (mBART model)"),m0e.forEach(t),Q7r=i(ro),AF=n(ro,"LI",{});var g0e=s(AF);Abe=n(g0e,"STRONG",{});var Umt=s(Abe);H7r=r(Umt,"roberta"),Umt.forEach(t),U7r=r(g0e," \u2014 "),fX=n(g0e,"A",{href:!0});var Jmt=s(fX);J7r=r(Jmt,"FlaxRobertaForQuestionAnswering"),Jmt.forEach(t),Y7r=r(g0e," (RoBERTa model)"),g0e.forEach(t),K7r=i(ro),LF=n(ro,"LI",{});var h0e=s(LF);Lbe=n(h0e,"STRONG",{});var Ymt=s(Lbe);Z7r=r(Ymt,"roformer"),Ymt.forEach(t),e8r=r(h0e," \u2014 "),mX=n(h0e,"A",{href:!0});var Kmt=s(mX);o8r=r(Kmt,"FlaxRoFormerForQuestionAnswering"),Kmt.forEach(t),r8r=r(h0e," (RoFormer model)"),h0e.forEach(t),ro.forEach(t),t8r=i(Ba),Bbe=n(Ba,"P",{});var Zmt=s(Bbe);a8r=r(Zmt,"Examples:"),Zmt.forEach(t),n8r=i(Ba),m(eA.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),C9e=i(d),lf=n(d,"H2",{class:!0});var xke=s(lf);BF=n(xke,"A",{id:!0,class:!0,href:!0});var egt=s(BF);kbe=n(egt,"SPAN",{});var ogt=s(kbe);m(oA.$$.fragment,ogt),ogt.forEach(t),egt.forEach(t),s8r=i(xke),xbe=n(xke,"SPAN",{});var rgt=s(xbe);l8r=r(rgt,"FlaxAutoModelForTokenClassification"),rgt.forEach(t),xke.forEach(t),M9e=i(d),Sr=n(d,"DIV",{class:!0});var pi=s(Sr);m(rA.$$.fragment,pi),i8r=i(pi),df=n(pi,"P",{});var gV=s(df);d8r=r(gV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rbe=n(gV,"CODE",{});var tgt=s(Rbe);c8r=r(tgt,"from_pretrained()"),tgt.forEach(t),f8r=r(gV,"class method or the "),Sbe=n(gV,"CODE",{});var agt=s(Sbe);m8r=r(agt,"from_config()"),agt.forEach(t),g8r=r(gV,`class
method.`),gV.forEach(t),h8r=i(pi),tA=n(pi,"P",{});var Rke=s(tA);p8r=r(Rke,"This class cannot be instantiated directly using "),Pbe=n(Rke,"CODE",{});var ngt=s(Pbe);_8r=r(ngt,"__init__()"),ngt.forEach(t),u8r=r(Rke," (throws an error)."),Rke.forEach(t),b8r=i(pi),wt=n(pi,"DIV",{class:!0});var _i=s(wt);m(aA.$$.fragment,_i),v8r=i(_i),$be=n(_i,"P",{});var sgt=s($be);T8r=r(sgt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sgt.forEach(t),F8r=i(_i),cf=n(_i,"P",{});var hV=s(cf);C8r=r(hV,`Note:
Loading a model from its configuration file does `),Ibe=n(hV,"STRONG",{});var lgt=s(Ibe);M8r=r(lgt,"not"),lgt.forEach(t),E8r=r(hV,` load the model weights. It only affects the
model\u2019s configuration. Use `),jbe=n(hV,"CODE",{});var igt=s(jbe);y8r=r(igt,"from_pretrained()"),igt.forEach(t),w8r=r(hV,"to load the model weights."),hV.forEach(t),A8r=i(_i),Nbe=n(_i,"P",{});var dgt=s(Nbe);L8r=r(dgt,"Examples:"),dgt.forEach(t),B8r=i(_i),m(nA.$$.fragment,_i),_i.forEach(t),k8r=i(pi),So=n(pi,"DIV",{class:!0});var ka=s(So);m(sA.$$.fragment,ka),x8r=i(ka),Dbe=n(ka,"P",{});var cgt=s(Dbe);R8r=r(cgt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cgt.forEach(t),S8r=i(ka),Bn=n(ka,"P",{});var zC=s(Bn);P8r=r(zC,"The model class to instantiate is selected based on the "),qbe=n(zC,"CODE",{});var fgt=s(qbe);$8r=r(fgt,"model_type"),fgt.forEach(t),I8r=r(zC,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(zC,"CODE",{});var mgt=s(Gbe);j8r=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),N8r=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(zC,"CODE",{});var ggt=s(Obe);D8r=r(ggt,"pretrained_model_name_or_path"),ggt.forEach(t),q8r=r(zC,":"),zC.forEach(t),G8r=i(ka),so=n(ka,"UL",{});var ta=s(so);kF=n(ta,"LI",{});var p0e=s(kF);Xbe=n(p0e,"STRONG",{});var hgt=s(Xbe);O8r=r(hgt,"albert"),hgt.forEach(t),X8r=r(p0e," \u2014 "),gX=n(p0e,"A",{href:!0});var pgt=s(gX);z8r=r(pgt,"FlaxAlbertForTokenClassification"),pgt.forEach(t),V8r=r(p0e," (ALBERT model)"),p0e.forEach(t),W8r=i(ta),xF=n(ta,"LI",{});var _0e=s(xF);zbe=n(_0e,"STRONG",{});var _gt=s(zbe);Q8r=r(_gt,"bert"),_gt.forEach(t),H8r=r(_0e," \u2014 "),hX=n(_0e,"A",{href:!0});var ugt=s(hX);U8r=r(ugt,"FlaxBertForTokenClassification"),ugt.forEach(t),J8r=r(_0e," (BERT model)"),_0e.forEach(t),Y8r=i(ta),RF=n(ta,"LI",{});var u0e=s(RF);Vbe=n(u0e,"STRONG",{});var bgt=s(Vbe);K8r=r(bgt,"big_bird"),bgt.forEach(t),Z8r=r(u0e," \u2014 "),pX=n(u0e,"A",{href:!0});var vgt=s(pX);eFr=r(vgt,"FlaxBigBirdForTokenClassification"),vgt.forEach(t),oFr=r(u0e," (BigBird model)"),u0e.forEach(t),rFr=i(ta),SF=n(ta,"LI",{});var b0e=s(SF);Wbe=n(b0e,"STRONG",{});var Tgt=s(Wbe);tFr=r(Tgt,"distilbert"),Tgt.forEach(t),aFr=r(b0e," \u2014 "),_X=n(b0e,"A",{href:!0});var Fgt=s(_X);nFr=r(Fgt,"FlaxDistilBertForTokenClassification"),Fgt.forEach(t),sFr=r(b0e," (DistilBERT model)"),b0e.forEach(t),lFr=i(ta),PF=n(ta,"LI",{});var v0e=s(PF);Qbe=n(v0e,"STRONG",{});var Cgt=s(Qbe);iFr=r(Cgt,"electra"),Cgt.forEach(t),dFr=r(v0e," \u2014 "),uX=n(v0e,"A",{href:!0});var Mgt=s(uX);cFr=r(Mgt,"FlaxElectraForTokenClassification"),Mgt.forEach(t),fFr=r(v0e," (ELECTRA model)"),v0e.forEach(t),mFr=i(ta),$F=n(ta,"LI",{});var T0e=s($F);Hbe=n(T0e,"STRONG",{});var Egt=s(Hbe);gFr=r(Egt,"roberta"),Egt.forEach(t),hFr=r(T0e," \u2014 "),bX=n(T0e,"A",{href:!0});var ygt=s(bX);pFr=r(ygt,"FlaxRobertaForTokenClassification"),ygt.forEach(t),_Fr=r(T0e," (RoBERTa model)"),T0e.forEach(t),uFr=i(ta),IF=n(ta,"LI",{});var F0e=s(IF);Ube=n(F0e,"STRONG",{});var wgt=s(Ube);bFr=r(wgt,"roformer"),wgt.forEach(t),vFr=r(F0e," \u2014 "),vX=n(F0e,"A",{href:!0});var Agt=s(vX);TFr=r(Agt,"FlaxRoFormerForTokenClassification"),Agt.forEach(t),FFr=r(F0e," (RoFormer model)"),F0e.forEach(t),ta.forEach(t),CFr=i(ka),Jbe=n(ka,"P",{});var Lgt=s(Jbe);MFr=r(Lgt,"Examples:"),Lgt.forEach(t),EFr=i(ka),m(lA.$$.fragment,ka),ka.forEach(t),pi.forEach(t),E9e=i(d),ff=n(d,"H2",{class:!0});var Ske=s(ff);jF=n(Ske,"A",{id:!0,class:!0,href:!0});var Bgt=s(jF);Ybe=n(Bgt,"SPAN",{});var kgt=s(Ybe);m(iA.$$.fragment,kgt),kgt.forEach(t),Bgt.forEach(t),yFr=i(Ske),Kbe=n(Ske,"SPAN",{});var xgt=s(Kbe);wFr=r(xgt,"FlaxAutoModelForMultipleChoice"),xgt.forEach(t),Ske.forEach(t),y9e=i(d),Pr=n(d,"DIV",{class:!0});var ui=s(Pr);m(dA.$$.fragment,ui),AFr=i(ui),mf=n(ui,"P",{});var pV=s(mf);LFr=r(pV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Zbe=n(pV,"CODE",{});var Rgt=s(Zbe);BFr=r(Rgt,"from_pretrained()"),Rgt.forEach(t),kFr=r(pV,"class method or the "),e5e=n(pV,"CODE",{});var Sgt=s(e5e);xFr=r(Sgt,"from_config()"),Sgt.forEach(t),RFr=r(pV,`class
method.`),pV.forEach(t),SFr=i(ui),cA=n(ui,"P",{});var Pke=s(cA);PFr=r(Pke,"This class cannot be instantiated directly using "),o5e=n(Pke,"CODE",{});var Pgt=s(o5e);$Fr=r(Pgt,"__init__()"),Pgt.forEach(t),IFr=r(Pke," (throws an error)."),Pke.forEach(t),jFr=i(ui),At=n(ui,"DIV",{class:!0});var bi=s(At);m(fA.$$.fragment,bi),NFr=i(bi),r5e=n(bi,"P",{});var $gt=s(r5e);DFr=r($gt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$gt.forEach(t),qFr=i(bi),gf=n(bi,"P",{});var _V=s(gf);GFr=r(_V,`Note:
Loading a model from its configuration file does `),t5e=n(_V,"STRONG",{});var Igt=s(t5e);OFr=r(Igt,"not"),Igt.forEach(t),XFr=r(_V,` load the model weights. It only affects the
model\u2019s configuration. Use `),a5e=n(_V,"CODE",{});var jgt=s(a5e);zFr=r(jgt,"from_pretrained()"),jgt.forEach(t),VFr=r(_V,"to load the model weights."),_V.forEach(t),WFr=i(bi),n5e=n(bi,"P",{});var Ngt=s(n5e);QFr=r(Ngt,"Examples:"),Ngt.forEach(t),HFr=i(bi),m(mA.$$.fragment,bi),bi.forEach(t),UFr=i(ui),Po=n(ui,"DIV",{class:!0});var xa=s(Po);m(gA.$$.fragment,xa),JFr=i(xa),s5e=n(xa,"P",{});var Dgt=s(s5e);YFr=r(Dgt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dgt.forEach(t),KFr=i(xa),kn=n(xa,"P",{});var VC=s(kn);ZFr=r(VC,"The model class to instantiate is selected based on the "),l5e=n(VC,"CODE",{});var qgt=s(l5e);eCr=r(qgt,"model_type"),qgt.forEach(t),oCr=r(VC,` property of the config object (either
passed as an argument or loaded from `),i5e=n(VC,"CODE",{});var Ggt=s(i5e);rCr=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),tCr=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(VC,"CODE",{});var Ogt=s(d5e);aCr=r(Ogt,"pretrained_model_name_or_path"),Ogt.forEach(t),nCr=r(VC,":"),VC.forEach(t),sCr=i(xa),lo=n(xa,"UL",{});var aa=s(lo);NF=n(aa,"LI",{});var C0e=s(NF);c5e=n(C0e,"STRONG",{});var Xgt=s(c5e);lCr=r(Xgt,"albert"),Xgt.forEach(t),iCr=r(C0e," \u2014 "),TX=n(C0e,"A",{href:!0});var zgt=s(TX);dCr=r(zgt,"FlaxAlbertForMultipleChoice"),zgt.forEach(t),cCr=r(C0e," (ALBERT model)"),C0e.forEach(t),fCr=i(aa),DF=n(aa,"LI",{});var M0e=s(DF);f5e=n(M0e,"STRONG",{});var Vgt=s(f5e);mCr=r(Vgt,"bert"),Vgt.forEach(t),gCr=r(M0e," \u2014 "),FX=n(M0e,"A",{href:!0});var Wgt=s(FX);hCr=r(Wgt,"FlaxBertForMultipleChoice"),Wgt.forEach(t),pCr=r(M0e," (BERT model)"),M0e.forEach(t),_Cr=i(aa),qF=n(aa,"LI",{});var E0e=s(qF);m5e=n(E0e,"STRONG",{});var Qgt=s(m5e);uCr=r(Qgt,"big_bird"),Qgt.forEach(t),bCr=r(E0e," \u2014 "),CX=n(E0e,"A",{href:!0});var Hgt=s(CX);vCr=r(Hgt,"FlaxBigBirdForMultipleChoice"),Hgt.forEach(t),TCr=r(E0e," (BigBird model)"),E0e.forEach(t),FCr=i(aa),GF=n(aa,"LI",{});var y0e=s(GF);g5e=n(y0e,"STRONG",{});var Ugt=s(g5e);CCr=r(Ugt,"distilbert"),Ugt.forEach(t),MCr=r(y0e," \u2014 "),MX=n(y0e,"A",{href:!0});var Jgt=s(MX);ECr=r(Jgt,"FlaxDistilBertForMultipleChoice"),Jgt.forEach(t),yCr=r(y0e," (DistilBERT model)"),y0e.forEach(t),wCr=i(aa),OF=n(aa,"LI",{});var w0e=s(OF);h5e=n(w0e,"STRONG",{});var Ygt=s(h5e);ACr=r(Ygt,"electra"),Ygt.forEach(t),LCr=r(w0e," \u2014 "),EX=n(w0e,"A",{href:!0});var Kgt=s(EX);BCr=r(Kgt,"FlaxElectraForMultipleChoice"),Kgt.forEach(t),kCr=r(w0e," (ELECTRA model)"),w0e.forEach(t),xCr=i(aa),XF=n(aa,"LI",{});var A0e=s(XF);p5e=n(A0e,"STRONG",{});var Zgt=s(p5e);RCr=r(Zgt,"roberta"),Zgt.forEach(t),SCr=r(A0e," \u2014 "),yX=n(A0e,"A",{href:!0});var eht=s(yX);PCr=r(eht,"FlaxRobertaForMultipleChoice"),eht.forEach(t),$Cr=r(A0e," (RoBERTa model)"),A0e.forEach(t),ICr=i(aa),zF=n(aa,"LI",{});var L0e=s(zF);_5e=n(L0e,"STRONG",{});var oht=s(_5e);jCr=r(oht,"roformer"),oht.forEach(t),NCr=r(L0e," \u2014 "),wX=n(L0e,"A",{href:!0});var rht=s(wX);DCr=r(rht,"FlaxRoFormerForMultipleChoice"),rht.forEach(t),qCr=r(L0e," (RoFormer model)"),L0e.forEach(t),aa.forEach(t),GCr=i(xa),u5e=n(xa,"P",{});var tht=s(u5e);OCr=r(tht,"Examples:"),tht.forEach(t),XCr=i(xa),m(hA.$$.fragment,xa),xa.forEach(t),ui.forEach(t),w9e=i(d),hf=n(d,"H2",{class:!0});var $ke=s(hf);VF=n($ke,"A",{id:!0,class:!0,href:!0});var aht=s(VF);b5e=n(aht,"SPAN",{});var nht=s(b5e);m(pA.$$.fragment,nht),nht.forEach(t),aht.forEach(t),zCr=i($ke),v5e=n($ke,"SPAN",{});var sht=s(v5e);VCr=r(sht,"FlaxAutoModelForNextSentencePrediction"),sht.forEach(t),$ke.forEach(t),A9e=i(d),$r=n(d,"DIV",{class:!0});var vi=s($r);m(_A.$$.fragment,vi),WCr=i(vi),pf=n(vi,"P",{});var uV=s(pf);QCr=r(uV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),T5e=n(uV,"CODE",{});var lht=s(T5e);HCr=r(lht,"from_pretrained()"),lht.forEach(t),UCr=r(uV,"class method or the "),F5e=n(uV,"CODE",{});var iht=s(F5e);JCr=r(iht,"from_config()"),iht.forEach(t),YCr=r(uV,`class
method.`),uV.forEach(t),KCr=i(vi),uA=n(vi,"P",{});var Ike=s(uA);ZCr=r(Ike,"This class cannot be instantiated directly using "),C5e=n(Ike,"CODE",{});var dht=s(C5e);e4r=r(dht,"__init__()"),dht.forEach(t),o4r=r(Ike," (throws an error)."),Ike.forEach(t),r4r=i(vi),Lt=n(vi,"DIV",{class:!0});var Ti=s(Lt);m(bA.$$.fragment,Ti),t4r=i(Ti),M5e=n(Ti,"P",{});var cht=s(M5e);a4r=r(cht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cht.forEach(t),n4r=i(Ti),_f=n(Ti,"P",{});var bV=s(_f);s4r=r(bV,`Note:
Loading a model from its configuration file does `),E5e=n(bV,"STRONG",{});var fht=s(E5e);l4r=r(fht,"not"),fht.forEach(t),i4r=r(bV,` load the model weights. It only affects the
model\u2019s configuration. Use `),y5e=n(bV,"CODE",{});var mht=s(y5e);d4r=r(mht,"from_pretrained()"),mht.forEach(t),c4r=r(bV,"to load the model weights."),bV.forEach(t),f4r=i(Ti),w5e=n(Ti,"P",{});var ght=s(w5e);m4r=r(ght,"Examples:"),ght.forEach(t),g4r=i(Ti),m(vA.$$.fragment,Ti),Ti.forEach(t),h4r=i(vi),$o=n(vi,"DIV",{class:!0});var Ra=s($o);m(TA.$$.fragment,Ra),p4r=i(Ra),A5e=n(Ra,"P",{});var hht=s(A5e);_4r=r(hht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hht.forEach(t),u4r=i(Ra),xn=n(Ra,"P",{});var WC=s(xn);b4r=r(WC,"The model class to instantiate is selected based on the "),L5e=n(WC,"CODE",{});var pht=s(L5e);v4r=r(pht,"model_type"),pht.forEach(t),T4r=r(WC,` property of the config object (either
passed as an argument or loaded from `),B5e=n(WC,"CODE",{});var _ht=s(B5e);F4r=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),C4r=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=n(WC,"CODE",{});var uht=s(k5e);M4r=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),E4r=r(WC,":"),WC.forEach(t),y4r=i(Ra),x5e=n(Ra,"UL",{});var bht=s(x5e);WF=n(bht,"LI",{});var B0e=s(WF);R5e=n(B0e,"STRONG",{});var vht=s(R5e);w4r=r(vht,"bert"),vht.forEach(t),A4r=r(B0e," \u2014 "),AX=n(B0e,"A",{href:!0});var Tht=s(AX);L4r=r(Tht,"FlaxBertForNextSentencePrediction"),Tht.forEach(t),B4r=r(B0e," (BERT model)"),B0e.forEach(t),bht.forEach(t),k4r=i(Ra),S5e=n(Ra,"P",{});var Fht=s(S5e);x4r=r(Fht,"Examples:"),Fht.forEach(t),R4r=i(Ra),m(FA.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),L9e=i(d),uf=n(d,"H2",{class:!0});var jke=s(uf);QF=n(jke,"A",{id:!0,class:!0,href:!0});var Cht=s(QF);P5e=n(Cht,"SPAN",{});var Mht=s(P5e);m(CA.$$.fragment,Mht),Mht.forEach(t),Cht.forEach(t),S4r=i(jke),$5e=n(jke,"SPAN",{});var Eht=s($5e);P4r=r(Eht,"FlaxAutoModelForImageClassification"),Eht.forEach(t),jke.forEach(t),B9e=i(d),Ir=n(d,"DIV",{class:!0});var Fi=s(Ir);m(MA.$$.fragment,Fi),$4r=i(Fi),bf=n(Fi,"P",{});var vV=s(bf);I4r=r(vV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),I5e=n(vV,"CODE",{});var yht=s(I5e);j4r=r(yht,"from_pretrained()"),yht.forEach(t),N4r=r(vV,"class method or the "),j5e=n(vV,"CODE",{});var wht=s(j5e);D4r=r(wht,"from_config()"),wht.forEach(t),q4r=r(vV,`class
method.`),vV.forEach(t),G4r=i(Fi),EA=n(Fi,"P",{});var Nke=s(EA);O4r=r(Nke,"This class cannot be instantiated directly using "),N5e=n(Nke,"CODE",{});var Aht=s(N5e);X4r=r(Aht,"__init__()"),Aht.forEach(t),z4r=r(Nke," (throws an error)."),Nke.forEach(t),V4r=i(Fi),Bt=n(Fi,"DIV",{class:!0});var Ci=s(Bt);m(yA.$$.fragment,Ci),W4r=i(Ci),D5e=n(Ci,"P",{});var Lht=s(D5e);Q4r=r(Lht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lht.forEach(t),H4r=i(Ci),vf=n(Ci,"P",{});var TV=s(vf);U4r=r(TV,`Note:
Loading a model from its configuration file does `),q5e=n(TV,"STRONG",{});var Bht=s(q5e);J4r=r(Bht,"not"),Bht.forEach(t),Y4r=r(TV,` load the model weights. It only affects the
model\u2019s configuration. Use `),G5e=n(TV,"CODE",{});var kht=s(G5e);K4r=r(kht,"from_pretrained()"),kht.forEach(t),Z4r=r(TV,"to load the model weights."),TV.forEach(t),eMr=i(Ci),O5e=n(Ci,"P",{});var xht=s(O5e);oMr=r(xht,"Examples:"),xht.forEach(t),rMr=i(Ci),m(wA.$$.fragment,Ci),Ci.forEach(t),tMr=i(Fi),Io=n(Fi,"DIV",{class:!0});var Sa=s(Io);m(AA.$$.fragment,Sa),aMr=i(Sa),X5e=n(Sa,"P",{});var Rht=s(X5e);nMr=r(Rht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rht.forEach(t),sMr=i(Sa),Rn=n(Sa,"P",{});var QC=s(Rn);lMr=r(QC,"The model class to instantiate is selected based on the "),z5e=n(QC,"CODE",{});var Sht=s(z5e);iMr=r(Sht,"model_type"),Sht.forEach(t),dMr=r(QC,` property of the config object (either
passed as an argument or loaded from `),V5e=n(QC,"CODE",{});var Pht=s(V5e);cMr=r(Pht,"pretrained_model_name_or_path"),Pht.forEach(t),fMr=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(QC,"CODE",{});var $ht=s(W5e);mMr=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),gMr=r(QC,":"),QC.forEach(t),hMr=i(Sa),LA=n(Sa,"UL",{});var Dke=s(LA);HF=n(Dke,"LI",{});var k0e=s(HF);Q5e=n(k0e,"STRONG",{});var Iht=s(Q5e);pMr=r(Iht,"beit"),Iht.forEach(t),_Mr=r(k0e," \u2014 "),LX=n(k0e,"A",{href:!0});var jht=s(LX);uMr=r(jht,"FlaxBeitForImageClassification"),jht.forEach(t),bMr=r(k0e," (BEiT model)"),k0e.forEach(t),vMr=i(Dke),UF=n(Dke,"LI",{});var x0e=s(UF);H5e=n(x0e,"STRONG",{});var Nht=s(H5e);TMr=r(Nht,"vit"),Nht.forEach(t),FMr=r(x0e," \u2014 "),BX=n(x0e,"A",{href:!0});var Dht=s(BX);CMr=r(Dht,"FlaxViTForImageClassification"),Dht.forEach(t),MMr=r(x0e," (ViT model)"),x0e.forEach(t),Dke.forEach(t),EMr=i(Sa),U5e=n(Sa,"P",{});var qht=s(U5e);yMr=r(qht,"Examples:"),qht.forEach(t),wMr=i(Sa),m(BA.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),k9e=i(d),Tf=n(d,"H2",{class:!0});var qke=s(Tf);JF=n(qke,"A",{id:!0,class:!0,href:!0});var Ght=s(JF);J5e=n(Ght,"SPAN",{});var Oht=s(J5e);m(kA.$$.fragment,Oht),Oht.forEach(t),Ght.forEach(t),AMr=i(qke),Y5e=n(qke,"SPAN",{});var Xht=s(Y5e);LMr=r(Xht,"FlaxAutoModelForVision2Seq"),Xht.forEach(t),qke.forEach(t),x9e=i(d),jr=n(d,"DIV",{class:!0});var Mi=s(jr);m(xA.$$.fragment,Mi),BMr=i(Mi),Ff=n(Mi,"P",{});var FV=s(Ff);kMr=r(FV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),K5e=n(FV,"CODE",{});var zht=s(K5e);xMr=r(zht,"from_pretrained()"),zht.forEach(t),RMr=r(FV,"class method or the "),Z5e=n(FV,"CODE",{});var Vht=s(Z5e);SMr=r(Vht,"from_config()"),Vht.forEach(t),PMr=r(FV,`class
method.`),FV.forEach(t),$Mr=i(Mi),RA=n(Mi,"P",{});var Gke=s(RA);IMr=r(Gke,"This class cannot be instantiated directly using "),e2e=n(Gke,"CODE",{});var Wht=s(e2e);jMr=r(Wht,"__init__()"),Wht.forEach(t),NMr=r(Gke," (throws an error)."),Gke.forEach(t),DMr=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(SA.$$.fragment,Ei),qMr=i(Ei),o2e=n(Ei,"P",{});var Qht=s(o2e);GMr=r(Qht,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qht.forEach(t),OMr=i(Ei),Cf=n(Ei,"P",{});var CV=s(Cf);XMr=r(CV,`Note:
Loading a model from its configuration file does `),r2e=n(CV,"STRONG",{});var Hht=s(r2e);zMr=r(Hht,"not"),Hht.forEach(t),VMr=r(CV,` load the model weights. It only affects the
model\u2019s configuration. Use `),t2e=n(CV,"CODE",{});var Uht=s(t2e);WMr=r(Uht,"from_pretrained()"),Uht.forEach(t),QMr=r(CV,"to load the model weights."),CV.forEach(t),HMr=i(Ei),a2e=n(Ei,"P",{});var Jht=s(a2e);UMr=r(Jht,"Examples:"),Jht.forEach(t),JMr=i(Ei),m(PA.$$.fragment,Ei),Ei.forEach(t),YMr=i(Mi),jo=n(Mi,"DIV",{class:!0});var Pa=s(jo);m($A.$$.fragment,Pa),KMr=i(Pa),n2e=n(Pa,"P",{});var Yht=s(n2e);ZMr=r(Yht,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yht.forEach(t),eEr=i(Pa),Sn=n(Pa,"P",{});var HC=s(Sn);oEr=r(HC,"The model class to instantiate is selected based on the "),s2e=n(HC,"CODE",{});var Kht=s(s2e);rEr=r(Kht,"model_type"),Kht.forEach(t),tEr=r(HC,` property of the config object (either
passed as an argument or loaded from `),l2e=n(HC,"CODE",{});var Zht=s(l2e);aEr=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),nEr=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(HC,"CODE",{});var ept=s(i2e);sEr=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),lEr=r(HC,":"),HC.forEach(t),iEr=i(Pa),d2e=n(Pa,"UL",{});var opt=s(d2e);YF=n(opt,"LI",{});var R0e=s(YF);c2e=n(R0e,"STRONG",{});var rpt=s(c2e);dEr=r(rpt,"vision-encoder-decoder"),rpt.forEach(t),cEr=r(R0e," \u2014 "),kX=n(R0e,"A",{href:!0});var tpt=s(kX);fEr=r(tpt,"FlaxVisionEncoderDecoderModel"),tpt.forEach(t),mEr=r(R0e," (Vision Encoder decoder model)"),R0e.forEach(t),opt.forEach(t),gEr=i(Pa),f2e=n(Pa,"P",{});var apt=s(f2e);hEr=r(apt,"Examples:"),apt.forEach(t),pEr=i(Pa),m(IA.$$.fragment,Pa),Pa.forEach(t),Mi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(gpt)),c(me,"id","auto-classes"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#auto-classes"),c(le,"class","relative group"),c(Pn,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoModel"),c(jn,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(Si,"class","relative group"),c(kf,"id","transformers.AutoConfig"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(D0,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(q0,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertConfig"),c(G0,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartConfig"),c(O0,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitConfig"),c(X0,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertConfig"),c(z0,"href","/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(V0,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdConfig"),c(W0,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Q0,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(H0,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(U0,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig"),c(J0,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineConfig"),c(Y0,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPConfig"),c(K0,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertConfig"),c(Z0,"href","/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextConfig"),c(eL,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLConfig"),c(oL,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaConfig"),c(rL,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(tL,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTConfig"),c(aL,"href","/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrConfig"),c(nL,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertConfig"),c(sL,"href","/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRConfig"),c(lL,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraConfig"),c(iL,"href","/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(dL,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertConfig"),c(cL,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetConfig"),c(fL,"href","/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTConfig"),c(mL,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelConfig"),c(gL,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Config"),c(hL,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(pL,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJConfig"),c(_L,"href","/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertConfig"),c(uL,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertConfig"),c(bL,"href","/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(vL,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(TL,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(FL,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDConfig"),c(CL,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerConfig"),c(ML,"href","/docs/transformers/pr_15678/en/model_doc/luke#transformers.LukeConfig"),c(EL,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertConfig"),c(yL,"href","/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Config"),c(wL,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianConfig"),c(AL,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartConfig"),c(LL,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(BL,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(kL,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetConfig"),c(xL,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Config"),c(RL,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(SL,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(PL,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusConfig"),c($L,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverConfig"),c(IL,"href","/docs/transformers/pr_15678/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(jL,"href","/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(NL,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(DL,"href","/docs/transformers/pr_15678/en/model_doc/rag#transformers.RagConfig"),c(qL,"href","/docs/transformers/pr_15678/en/model_doc/realm#transformers.RealmConfig"),c(GL,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerConfig"),c(OL,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertConfig"),c(XL,"href","/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertConfig"),c(zL,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig"),c(VL,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerConfig"),c(WL,"href","/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerConfig"),c(QL,"href","/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWConfig"),c(HL,"href","/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDConfig"),c(UL,"href","/docs/transformers/pr_15678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(JL,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(YL,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(KL,"href","/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterConfig"),c(ZL,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(e9,"href","/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinConfig"),c(o9,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Config"),c(r9,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasConfig"),c(t9,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(a9,"href","/docs/transformers/pr_15678/en/model_doc/trocr#transformers.TrOCRConfig"),c(n9,"href","/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(s9,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(l9,"href","/docs/transformers/pr_15678/en/model_doc/vilt#transformers.ViltConfig"),c(i9,"href","/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(d9,"href","/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(c9,"href","/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(f9,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTConfig"),c(m9,"href","/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(g9,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(h9,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMConfig"),c(p9,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMConfig"),c(_9,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMConfig"),c(u9,"href","/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(b9,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(v9,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(T9,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetConfig"),c(F9,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoConfig"),c(fo,"class","docstring"),c(gg,"class","docstring"),c(Go,"class","docstring"),c(hg,"id","transformers.AutoTokenizer"),c(hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hg,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(C9,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(M9,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertTokenizer"),c(E9,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(y9,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartTokenizer"),c(w9,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartTokenizerFast"),c(A9,"href","/docs/transformers/pr_15678/en/model_doc/barthez#transformers.BarthezTokenizer"),c(L9,"href","/docs/transformers/pr_15678/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(B9,"href","/docs/transformers/pr_15678/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(k9,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertTokenizer"),c(x9,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertTokenizerFast"),c(R9,"href","/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(S9,"href","/docs/transformers/pr_15678/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(P9,"href","/docs/transformers/pr_15678/en/model_doc/bertweet#transformers.BertweetTokenizer"),c($9,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(I9,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(j9,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(N9,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(D9,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(q9,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(G9,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(O9,"href","/docs/transformers/pr_15678/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(X9,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertTokenizer"),c(z9,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(V9,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineTokenizer"),c(W9,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPTokenizer"),c(Q9,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(H9,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(U9,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(J9,"href","/docs/transformers/pr_15678/en/model_doc/cpm#transformers.CpmTokenizer"),c(Y9,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(K9,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Z9,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(eB,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(oB,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(rB,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(tB,"href","/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(aB,"href","/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(nB,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraTokenizer"),c(sB,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(lB,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(iB,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetTokenizer"),c(dB,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(cB,"href","/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(fB,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelTokenizer"),c(mB,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(gB,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hB,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(pB,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_B,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uB,"href","/docs/transformers/pr_15678/en/model_doc/herbert#transformers.HerbertTokenizer"),c(bB,"href","/docs/transformers/pr_15678/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(vB,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(TB,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FB,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(CB,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(MB,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(EB,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(yB,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(wB,"href","/docs/transformers/pr_15678/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(AB,"href","/docs/transformers/pr_15678/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(LB,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDTokenizer"),c(BB,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDTokenizerFast"),c(kB,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerTokenizer"),c(xB,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(RB,"href","/docs/transformers/pr_15678/en/model_doc/luke#transformers.LukeTokenizer"),c(SB,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(PB,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c($B,"href","/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(IB,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianTokenizer"),c(jB,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartTokenizer"),c(NB,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(DB,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(qB,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(GB,"href","/docs/transformers/pr_15678/en/model_doc/mluke#transformers.MLukeTokenizer"),c(OB,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(XB,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(zB,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VB,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(WB,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.T5Tokenizer"),c(QB,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.T5TokenizerFast"),c(HB,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UB,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JB,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(YB,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(KB,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ZB,"href","/docs/transformers/pr_15678/en/model_doc/phobert#transformers.PhobertTokenizer"),c(ek,"href","/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(ok,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertTokenizer"),c(rk,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertTokenizerFast"),c(tk,"href","/docs/transformers/pr_15678/en/model_doc/rag#transformers.RagTokenizer"),c(ak,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerTokenizer"),c(nk,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(sk,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertTokenizer"),c(lk,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(ik,"href","/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(dk,"href","/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(ck,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fk,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mk,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(gk,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(hk,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(pk,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(_k,"href","/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterTokenizer"),c(uk,"href","/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(bk,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(vk,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Tk,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.T5Tokenizer"),c(Fk,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Ck,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasTokenizer"),c(Mk,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(Ek,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(yk,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(wk,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Ak,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Lk,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMTokenizer"),c(Bk,"href","/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(kk,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(xk,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Rk,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Sk,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mo,"class","docstring"),c(Xg,"class","docstring"),c(Oo,"class","docstring"),c(zg,"id","transformers.AutoFeatureExtractor"),c(zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zg,"href","#transformers.AutoFeatureExtractor"),c(ji,"class","relative group"),c(Pk,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c($k,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Ik,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(jk,"href","/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Nk,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Dk,"href","/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(qk,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Gk,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Ok,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Xk,"href","/docs/transformers/pr_15678/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(zk,"href","/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Vk,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Wk,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Qk,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Hk,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Uk,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Le,"class","docstring"),c(lh,"class","docstring"),c(Xo,"class","docstring"),c(ih,"id","transformers.AutoProcessor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoProcessor"),c(Ni,"class","relative group"),c(Jk,"href","/docs/transformers/pr_15678/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Yk,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPProcessor"),c(Kk,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Zk,"href","/docs/transformers/pr_15678/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(ex,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(ox,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(rx,"href","/docs/transformers/pr_15678/en/model_doc/trocr#transformers.TrOCRProcessor"),c(tx,"href","/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(ax,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Be,"class","docstring"),c(bh,"class","docstring"),c(zo,"class","docstring"),c(vh,"id","transformers.AutoModel"),c(vh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vh,"href","#transformers.AutoModel"),c(qi,"class","relative group"),c(Nr,"class","docstring"),c(nx,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertModel"),c(sx,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartModel"),c(lx,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitModel"),c(ix,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertModel"),c(dx,"href","/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(cx,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdModel"),c(fx,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(mx,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(gx,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(hx,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertModel"),c(px,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineModel"),c(_x,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.CLIPModel"),c(ux,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertModel"),c(bx,"href","/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextModel"),c(vx,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLModel"),c(Tx,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaModel"),c(Fx,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Cx,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTModel"),c(Mx,"href","/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrModel"),c(Ex,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertModel"),c(yx,"href","/docs/transformers/pr_15678/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(wx,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraModel"),c(Ax,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertModel"),c(Lx,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetModel"),c(Bx,"href","/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTModel"),c(kx,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelModel"),c(xx,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Rx,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2Model"),c(Sx,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Px,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJModel"),c($x,"href","/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertModel"),c(Ix,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertModel"),c(jx,"href","/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Nx,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Dx,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(qx,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDModel"),c(Gx,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerModel"),c(Ox,"href","/docs/transformers/pr_15678/en/model_doc/luke#transformers.LukeModel"),c(Xx,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertModel"),c(zx,"href","/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100Model"),c(Vx,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianModel"),c(Wx,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartModel"),c(Qx,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Hx,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Ux,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetModel"),c(Jx,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5Model"),c(Yx,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Kx,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Zx,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusModel"),c(eR,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverModel"),c(oR,"href","/docs/transformers/pr_15678/en/model_doc/poolformer#transformers.PoolFormerModel"),c(rR,"href","/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(tR,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertModel"),c(aR,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerModel"),c(nR,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertModel"),c(sR,"href","/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertModel"),c(lR,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaModel"),c(iR,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerModel"),c(dR,"href","/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerModel"),c(cR,"href","/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWModel"),c(fR,"href","/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDModel"),c(mR,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(gR,"href","/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterModel"),c(hR,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(pR,"href","/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinModel"),c(_R,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5Model"),c(uR,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasModel"),c(bR,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(vR,"href","/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechModel"),c(TR,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(FR,"href","/docs/transformers/pr_15678/en/model_doc/vilt#transformers.ViltModel"),c(CR,"href","/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(MR,"href","/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertModel"),c(ER,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTModel"),c(yR,"href","/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(wR,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(AR,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMModel"),c(LR,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMModel"),c(BR,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMModel"),c(kR,"href","/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(xR,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(RR,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(SR,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetModel"),c(PR,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoModel"),c(ke,"class","docstring"),c(Vo,"class","docstring"),c(Up,"id","transformers.AutoModelForPreTraining"),c(Up,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Up,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(Dr,"class","docstring"),c($R,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForPreTraining"),c(IR,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jR,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForPreTraining"),c(NR,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(DR,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(qR,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(GR,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(OR,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(XR,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(zR,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForPreTraining"),c(VR,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(WR,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForPreTraining"),c(QR,"href","/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(HR,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(UR,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(JR,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(YR,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(KR,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ZR,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(eS,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(oS,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(rS,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tS,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aS,"href","/docs/transformers/pr_15678/en/model_doc/retribert#transformers.RetriBertModel"),c(nS,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sS,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lS,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iS,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dS,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cS,"href","/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fS,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(mS,"href","/docs/transformers/pr_15678/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gS,"href","/docs/transformers/pr_15678/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hS,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pS,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_S,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uS,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bS,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(xe,"class","docstring"),c(Wo,"class","docstring"),c($_,"id","transformers.AutoModelForCausalLM"),c($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($_,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(qr,"class","docstring"),c(vS,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForCausalLM"),c(TS,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertLMHeadModel"),c(FS,"href","/docs/transformers/pr_15678/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(CS,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(MS,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(ES,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(yS,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(wS,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(AS,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(LS,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForCausalLM"),c(BS,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(kS,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(xS,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(RS,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianForCausalLM"),c(SS,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForCausalLM"),c(PS,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c($S,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(IS,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(jS,"href","/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(NS,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(DS,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(qS,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(GS,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(OS,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(XS,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(zS,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(VS,"href","/docs/transformers/pr_15678/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(WS,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(QS,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(HS,"href","/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(US,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(JS,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(YS,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Re,"class","docstring"),c(Qo,"class","docstring"),c(_u,"id","transformers.AutoModelForMaskedLM"),c(_u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_u,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(Gr,"class","docstring"),c(KS,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(ZS,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eP,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForMaskedLM"),c(oP,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(rP,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tP,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(aP,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nP,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sP,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lP,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(iP,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dP,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(cP,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(fP,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mP,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gP,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hP,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(pP,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(_P,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(uP,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bP,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(vP,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(TP,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(FP,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(CP,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(MP,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(EP,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(yP,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wP,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AP,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LP,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(BP,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(kP,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Se,"class","docstring"),c(Ho,"class","docstring"),c(Ku,"id","transformers.AutoModelForSeq2SeqLM"),c(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ku,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(Or,"class","docstring"),c(xP,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(RP,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(SP,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(PP,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c($P,"href","/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(IP,"href","/docs/transformers/pr_15678/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(jP,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(NP,"href","/docs/transformers/pr_15678/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(DP,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.MarianMTModel"),c(qP,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(GP,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(OP,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(XP,"href","/docs/transformers/pr_15678/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(zP,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(VP,"href","/docs/transformers/pr_15678/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Pe,"class","docstring"),c(Uo,"class","docstring"),c(p1,"id","transformers.AutoModelForSequenceClassification"),c(p1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p1,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(Xr,"class","docstring"),c(WP,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(QP,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForSequenceClassification"),c(HP,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForSequenceClassification"),c(UP,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(JP,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(YP,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(KP,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(ZP,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(e$,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(o$,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(r$,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(t$,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(a$,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(n$,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(s$,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(l$,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(i$,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(d$,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(c$,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(f$,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(m$,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(g$,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(h$,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForSequenceClassification"),c(p$,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(_$,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(u$,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(b$,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(v$,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(T$,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(F$,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(C$,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(M$,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(E$,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(y$,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(w$,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(A$,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(L$,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(B$,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(k$,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(x$,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(R$,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(S$,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(P$,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c($$,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c($e,"class","docstring"),c(Jo,"class","docstring"),c(lb,"id","transformers.AutoModelForMultipleChoice"),c(lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lb,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(zr,"class","docstring"),c(I$,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(j$,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForMultipleChoice"),c(N$,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(D$,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(q$,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(G$,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(O$,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(X$,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(z$,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(V$,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(W$,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(Q$,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(H$,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(U$,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(J$,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Y$,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(K$,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Z$,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(eI,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(oI,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(rI,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(tI,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(aI,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(nI,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(sI,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(lI,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(iI,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ie,"class","docstring"),c(Yo,"class","docstring"),c(Ib,"id","transformers.AutoModelForNextSentencePrediction"),c(Ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ib,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(Vr,"class","docstring"),c(dI,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(cI,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(fI,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(mI,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(gI,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(je,"class","docstring"),c(Ko,"class","docstring"),c(Xb,"id","transformers.AutoModelForTokenClassification"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(Wr,"class","docstring"),c(hI,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(pI,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForTokenClassification"),c(_I,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(uI,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(bI,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForTokenClassification"),c(vI,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(TI,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(FI,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(CI,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(MI,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(EI,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(yI,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(wI,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(AI,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(LI,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(BI,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(kI,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(xI,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(RI,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(SI,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(PI,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c($I,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(II,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(jI,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(NI,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(DI,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(qI,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(GI,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(OI,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(XI,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(zI,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(VI,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ne,"class","docstring"),c(Zo,"class","docstring"),c(M5,"id","transformers.AutoModelForQuestionAnswering"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(Qr,"class","docstring"),c(WI,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(QI,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(HI,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(UI,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(JI,"href","/docs/transformers/pr_15678/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(YI,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(KI,"href","/docs/transformers/pr_15678/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(ZI,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(ej,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(oj,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(rj,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(tj,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(aj,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(nj,"href","/docs/transformers/pr_15678/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(sj,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(lj,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(ij,"href","/docs/transformers/pr_15678/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(dj,"href","/docs/transformers/pr_15678/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(cj,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(fj,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(mj,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(gj,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(hj,"href","/docs/transformers/pr_15678/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(pj,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(_j,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(uj,"href","/docs/transformers/pr_15678/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(bj,"href","/docs/transformers/pr_15678/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(vj,"href","/docs/transformers/pr_15678/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Tj,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Fj,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Cj,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Mj,"href","/docs/transformers/pr_15678/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Ej,"href","/docs/transformers/pr_15678/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(yj,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(wj,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Aj,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Lj,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Bj,"href","/docs/transformers/pr_15678/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(De,"class","docstring"),c(er,"class","docstring"),c(d2,"id","transformers.AutoModelForTableQuestionAnswering"),c(d2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d2,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(Hr,"class","docstring"),c(kj,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(qe,"class","docstring"),c(or,"class","docstring"),c(m2,"id","transformers.AutoModelForImageClassification"),c(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m2,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(Ur,"class","docstring"),c(xj,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitForImageClassification"),c(Rj,"href","/docs/transformers/pr_15678/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Sj,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Pj,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c($j,"href","/docs/transformers/pr_15678/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Ij,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(jj,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Nj,"href","/docs/transformers/pr_15678/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(Dj,"href","/docs/transformers/pr_15678/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qj,"href","/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(Gj,"href","/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinForImageClassification"),c(Oj,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTForImageClassification"),c(Ge,"class","docstring"),c(rr,"class","docstring"),c(F2,"id","transformers.AutoModelForVision2Seq"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForVision2Seq"),c(Cd,"class","relative group"),c(Jr,"class","docstring"),c(Xj,"href","/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Oe,"class","docstring"),c(tr,"class","docstring"),c(E2,"id","transformers.AutoModelForAudioClassification"),c(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E2,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(Yr,"class","docstring"),c(zj,"href","/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Xe,"class","docstring"),c(ar,"class","docstring"),c(S2,"id","transformers.AutoModelForAudioFrameClassification"),c(S2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S2,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(Kr,"class","docstring"),c(Yj,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Kj,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Zj,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ze,"class","docstring"),c(nr,"class","docstring"),c(N2,"id","transformers.AutoModelForCTC"),c(N2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N2,"href","#transformers.AutoModelForCTC"),c(Rd,"class","relative group"),c(Zr,"class","docstring"),c(eN,"href","/docs/transformers/pr_15678/en/model_doc/hubert#transformers.HubertForCTC"),c(oN,"href","/docs/transformers/pr_15678/en/model_doc/sew#transformers.SEWForCTC"),c(rN,"href","/docs/transformers/pr_15678/en/model_doc/sew-d#transformers.SEWDForCTC"),c(tN,"href","/docs/transformers/pr_15678/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(aN,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(nN,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(sN,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ve,"class","docstring"),c(sr,"class","docstring"),c(Q2,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q2,"href","#transformers.AutoModelForSpeechSeq2Seq"),c($d,"class","relative group"),c(et,"class","docstring"),c(lN,"href","/docs/transformers/pr_15678/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(iN,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(We,"class","docstring"),c(lr,"class","docstring"),c(Y2,"id","transformers.AutoModelForAudioXVector"),c(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y2,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(ot,"class","docstring"),c(dN,"href","/docs/transformers/pr_15678/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(cN,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(fN,"href","/docs/transformers/pr_15678/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Qe,"class","docstring"),c(ir,"class","docstring"),c(rv,"id","transformers.AutoModelForMaskedImageModeling"),c(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Od,"class","relative group"),c(rt,"class","docstring"),c(mN,"href","/docs/transformers/pr_15678/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(gN,"href","/docs/transformers/pr_15678/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(hN,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(He,"class","docstring"),c(dr,"class","docstring"),c(lv,"id","transformers.AutoModelForObjectDetection"),c(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lv,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(tt,"class","docstring"),c(pN,"href","/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Ue,"class","docstring"),c(cr,"class","docstring"),c(cv,"id","transformers.AutoModelForImageSegmentation"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForImageSegmentation"),c(Ud,"class","relative group"),c(at,"class","docstring"),c(_N,"href","/docs/transformers/pr_15678/en/model_doc/detr#transformers.DetrForSegmentation"),c(Je,"class","docstring"),c(fr,"class","docstring"),c(gv,"id","transformers.AutoModelForSemanticSegmentation"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForSemanticSegmentation"),c(Kd,"class","relative group"),c(nt,"class","docstring"),c(uN,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(bN,"href","/docs/transformers/pr_15678/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Ye,"class","docstring"),c(mr,"class","docstring"),c(uv,"id","transformers.TFAutoModel"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(st,"class","docstring"),c(vN,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertModel"),c(TN,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartModel"),c(FN,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertModel"),c(CN,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MN,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EN,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertModel"),c(yN,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.TFCLIPModel"),c(wN,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertModel"),c(AN,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLModel"),c(LN,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaModel"),c(BN,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kN,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(xN,"href","/docs/transformers/pr_15678/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(RN,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraModel"),c(SN,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(PN,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelModel"),c($N,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(IN,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2Model"),c(jN,"href","/docs/transformers/pr_15678/en/model_doc/hubert#transformers.TFHubertModel"),c(NN,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(DN,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.TFLEDModel"),c(qN,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerModel"),c(GN,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.TFLxmertModel"),c(ON,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.TFMarianModel"),c(XN,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.TFMBartModel"),c(zN,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(VN,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetModel"),c(WN,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.TFMT5Model"),c(QN,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(HN,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.TFPegasusModel"),c(UN,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertModel"),c(JN,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaModel"),c(YN,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerModel"),c(KN,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(ZN,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5Model"),c(eD,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasModel"),c(oD,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(rD,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.TFViTModel"),c(tD,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(aD,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMModel"),c(nD,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(sD,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetModel"),c(go,"class","docstring"),c(gr,"class","docstring"),c(a6,"id","transformers.TFAutoModelForPreTraining"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(lt,"class","docstring"),c(lD,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(iD,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForPreTraining"),c(cD,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fD,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mD,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gD,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(hD,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(pD,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(_D,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uD,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bD,"href","/docs/transformers/pr_15678/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(vD,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(TD,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FD,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(CD,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MD,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(yD,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wD,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AD,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(LD,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(ho,"class","docstring"),c(hr,"class","docstring"),c(A6,"id","transformers.TFAutoModelForCausalLM"),c(A6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A6,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(it,"class","docstring"),c(BD,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(kD,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xD,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(RD,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(SD,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(PD,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($D,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ID,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(jD,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ND,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(pr,"class","docstring"),c(N6,"id","transformers.TFAutoModelForImageClassification"),c(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N6,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(dt,"class","docstring"),c(DD,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.TFViTForImageClassification"),c(_o,"class","docstring"),c(_r,"class","docstring"),c(q6,"id","transformers.TFAutoModelForMaskedLM"),c(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q6,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(ct,"class","docstring"),c(qD,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(GD,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(OD,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(XD,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(zD,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(VD,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(WD,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(HD,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(UD,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(JD,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(YD,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(KD,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(ZD,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(eq,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(oq,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(rq,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(tq,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(aq,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(nq,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uo,"class","docstring"),c(ur,"class","docstring"),c(lT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(ft,"class","docstring"),c(sq,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(lq,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(iq,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(dq,"href","/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(cq,"href","/docs/transformers/pr_15678/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(fq,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.TFMarianMTModel"),c(mq,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(gq,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(hq,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(pq,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(bo,"class","docstring"),c(br,"class","docstring"),c(bT,"id","transformers.TFAutoModelForSequenceClassification"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(mt,"class","docstring"),c(_q,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(uq,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(bq,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(vq,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(Tq,"href","/docs/transformers/pr_15678/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Fq,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Cq,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Mq,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Eq,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(yq,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(wq,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Aq,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Lq,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Bq,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(kq,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(xq,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Rq,"href","/docs/transformers/pr_15678/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Sq,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Pq,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c($q,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Iq,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(jq,"href","/docs/transformers/pr_15678/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Nq,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Dq,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(qq,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(vo,"class","docstring"),c(vr,"class","docstring"),c(zT,"id","transformers.TFAutoModelForMultipleChoice"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cc,"class","relative group"),c(gt,"class","docstring"),c(Gq,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Oq,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Xq,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(zq,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Vq,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Wq,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Qq,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Hq,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Uq,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Jq,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(Yq,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Kq,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Zq,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(eG,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(oG,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(rG,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(tG,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(To,"class","docstring"),c(Tr,"class","docstring"),c(i7,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(ht,"class","docstring"),c(aG,"href","/docs/transformers/pr_15678/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Fo,"class","docstring"),c(Fr,"class","docstring"),c(c7,"id","transformers.TFAutoModelForTokenClassification"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.TFAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(pt,"class","docstring"),c(nG,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(sG,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(lG,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(iG,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(dG,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(cG,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(fG,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(mG,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(gG,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(hG,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(pG,"href","/docs/transformers/pr_15678/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(_G,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(uG,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(bG,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(vG,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(TG,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(FG,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(CG,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(MG,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(EG,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Co,"class","docstring"),c(Cr,"class","docstring"),c(x7,"id","transformers.TFAutoModelForQuestionAnswering"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.TFAutoModelForQuestionAnswering"),c(xc,"class","relative group"),c(_t,"class","docstring"),c(yG,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(wG,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(AG,"href","/docs/transformers/pr_15678/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(LG,"href","/docs/transformers/pr_15678/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(BG,"href","/docs/transformers/pr_15678/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(kG,"href","/docs/transformers/pr_15678/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(xG,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(RG,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(SG,"href","/docs/transformers/pr_15678/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(PG,"href","/docs/transformers/pr_15678/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c($G,"href","/docs/transformers/pr_15678/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(IG,"href","/docs/transformers/pr_15678/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(jG,"href","/docs/transformers/pr_15678/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_15678/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_15678/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(OG,"href","/docs/transformers/pr_15678/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Mo,"class","docstring"),c(Mr,"class","docstring"),c(Y7,"id","transformers.TFAutoModelForVision2Seq"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.TFAutoModelForVision2Seq"),c(Pc,"class","relative group"),c(ut,"class","docstring"),c(zG,"href","/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Eo,"class","docstring"),c(Er,"class","docstring"),c(Z7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(bt,"class","docstring"),c(VG,"href","/docs/transformers/pr_15678/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(yo,"class","docstring"),c(yr,"class","docstring"),c(o8,"id","transformers.FlaxAutoModel"),c(o8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o8,"href","#transformers.FlaxAutoModel"),c(qc,"class","relative group"),c(vt,"class","docstring"),c(WG,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertModel"),c(QG,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartModel"),c(HG,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.FlaxBeitModel"),c(UG,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertModel"),c(JG,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(YG,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(KG,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ZG,"href","/docs/transformers/pr_15678/en/model_doc/clip#transformers.FlaxCLIPModel"),c(eO,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(oO,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraModel"),c(rO,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(tO,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(aO,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(nO,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.FlaxMarianModel"),c(sO,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartModel"),c(lO,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5Model"),c(iO,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(dO,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(cO,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(fO,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5Model"),c(mO,"href","/docs/transformers/pr_15678/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(gO,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.FlaxViTModel"),c(hO,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(pO,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wo,"class","docstring"),c(wr,"class","docstring"),c(w8,"id","transformers.FlaxAutoModelForCausalLM"),c(w8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w8,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(Tt,"class","docstring"),c(_O,"href","/docs/transformers/pr_15678/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(uO,"href","/docs/transformers/pr_15678/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(bO,"href","/docs/transformers/pr_15678/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(vO,"href","/docs/transformers/pr_15678/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ao,"class","docstring"),c(Ar,"class","docstring"),c(x8,"id","transformers.FlaxAutoModelForPreTraining"),c(x8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x8,"href","#transformers.FlaxAutoModelForPreTraining"),c(Wc,"class","relative group"),c(Ft,"class","docstring"),c(TO,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(FO,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(MO,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(EO,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(yO,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(LO,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(BO,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(kO,"href","/docs/transformers/pr_15678/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Lo,"class","docstring"),c(Lr,"class","docstring"),c(X8,"id","transformers.FlaxAutoModelForMaskedLM"),c(X8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X8,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Uc,"class","relative group"),c(Ct,"class","docstring"),c(xO,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(RO,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(SO,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(PO,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c($O,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(IO,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(jO,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NO,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(DO,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Bo,"class","docstring"),c(Br,"class","docstring"),c(Z8,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z8,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Kc,"class","relative group"),c(Mt,"class","docstring"),c(qO,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_15678/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_15678/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(zO,"href","/docs/transformers/pr_15678/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(VO,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_15678/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_15678/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_15678/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(kr,"class","docstring"),c(dF,"id","transformers.FlaxAutoModelForSequenceClassification"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(of,"class","relative group"),c(Et,"class","docstring"),c(UO,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(JO,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(YO,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(KO,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(eX,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(oX,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(rX,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(tX,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xo,"class","docstring"),c(xr,"class","docstring"),c(vF,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(af,"class","relative group"),c(yt,"class","docstring"),c(aX,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_15678/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_15678/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ro,"class","docstring"),c(Rr,"class","docstring"),c(BF,"id","transformers.FlaxAutoModelForTokenClassification"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.FlaxAutoModelForTokenClassification"),c(lf,"class","relative group"),c(wt,"class","docstring"),c(gX,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(hX,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(pX,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(_X,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(uX,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(bX,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(vX,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(So,"class","docstring"),c(Sr,"class","docstring"),c(jF,"id","transformers.FlaxAutoModelForMultipleChoice"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ff,"class","relative group"),c(At,"class","docstring"),c(TX,"href","/docs/transformers/pr_15678/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(FX,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(CX,"href","/docs/transformers/pr_15678/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(MX,"href","/docs/transformers/pr_15678/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(EX,"href","/docs/transformers/pr_15678/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(yX,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(wX,"href","/docs/transformers/pr_15678/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Po,"class","docstring"),c(Pr,"class","docstring"),c(VF,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(hf,"class","relative group"),c(Lt,"class","docstring"),c(AX,"href","/docs/transformers/pr_15678/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c($o,"class","docstring"),c($r,"class","docstring"),c(QF,"id","transformers.FlaxAutoModelForImageClassification"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.FlaxAutoModelForImageClassification"),c(uf,"class","relative group"),c(Bt,"class","docstring"),c(LX,"href","/docs/transformers/pr_15678/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(BX,"href","/docs/transformers/pr_15678/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Io,"class","docstring"),c(Ir,"class","docstring"),c(JF,"id","transformers.FlaxAutoModelForVision2Seq"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(kt,"class","docstring"),c(kX,"href","/docs/transformers/pr_15678/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(jo,"class","docstring"),c(jr,"class","docstring")},m(d,u){e(document.head,J),b(d,Ae,u),b(d,le,u),e(le,me),e(me,to),g(ce,to,null),e(le,ue),e(le,Do),e(Do,wi),b(d,Ef,u),b(d,sa,u),e(sa,Ai),e(sa,Li),e(Li,UC),e(sa,yf),b(d,ye,u),b(d,io,u),e(io,Bi),e(io,Pn),e(Pn,JC),e(io,$n),e(io,In),e(In,YC),e(io,ki),e(io,jn),e(jn,KC),e(io,xi),b(d,wf,u),g($a,d,u),b(d,co,u),b(d,ge,u),e(ge,S0),e(ge,Ri),e(Ri,P0),e(ge,$0),b(d,qo,u),b(d,Ia,u),e(Ia,I0),e(Ia,Af),e(Af,j0),e(Ia,Oke),b(d,S0e,u),b(d,Si,u),e(Si,Lf),e(Lf,MV),g(ZC,MV,null),e(Si,Xke),e(Si,EV),e(EV,zke),b(d,P0e,u),b(d,Nn,u),e(Nn,Vke),e(Nn,yV),e(yV,Wke),e(Nn,Qke),e(Nn,wV),e(wV,Hke),e(Nn,Uke),b(d,$0e,u),g(e4,d,u),b(d,I0e,u),b(d,N0,u),e(N0,Jke),b(d,j0e,u),g(Bf,d,u),b(d,N0e,u),b(d,Pi,u),e(Pi,kf),e(kf,AV),g(o4,AV,null),e(Pi,Yke),e(Pi,LV),e(LV,Kke),b(d,D0e,u),b(d,Go,u),g(r4,Go,null),e(Go,Zke),e(Go,t4),e(t4,exe),e(t4,D0),e(D0,oxe),e(t4,rxe),e(Go,txe),e(Go,a4),e(a4,axe),e(a4,BV),e(BV,nxe),e(a4,sxe),e(Go,lxe),e(Go,fo),g(n4,fo,null),e(fo,ixe),e(fo,kV),e(kV,dxe),e(fo,cxe),e(fo,$i),e($i,fxe),e($i,xV),e(xV,mxe),e($i,gxe),e($i,RV),e(RV,hxe),e($i,pxe),e(fo,_xe),e(fo,v),e(v,xf),e(xf,SV),e(SV,uxe),e(xf,bxe),e(xf,q0),e(q0,vxe),e(xf,Txe),e(v,Fxe),e(v,Rf),e(Rf,PV),e(PV,Cxe),e(Rf,Mxe),e(Rf,G0),e(G0,Exe),e(Rf,yxe),e(v,wxe),e(v,Sf),e(Sf,$V),e($V,Axe),e(Sf,Lxe),e(Sf,O0),e(O0,Bxe),e(Sf,kxe),e(v,xxe),e(v,Pf),e(Pf,IV),e(IV,Rxe),e(Pf,Sxe),e(Pf,X0),e(X0,Pxe),e(Pf,$xe),e(v,Ixe),e(v,$f),e($f,jV),e(jV,jxe),e($f,Nxe),e($f,z0),e(z0,Dxe),e($f,qxe),e(v,Gxe),e(v,If),e(If,NV),e(NV,Oxe),e(If,Xxe),e(If,V0),e(V0,zxe),e(If,Vxe),e(v,Wxe),e(v,jf),e(jf,DV),e(DV,Qxe),e(jf,Hxe),e(jf,W0),e(W0,Uxe),e(jf,Jxe),e(v,Yxe),e(v,Nf),e(Nf,qV),e(qV,Kxe),e(Nf,Zxe),e(Nf,Q0),e(Q0,eRe),e(Nf,oRe),e(v,rRe),e(v,Df),e(Df,GV),e(GV,tRe),e(Df,aRe),e(Df,H0),e(H0,nRe),e(Df,sRe),e(v,lRe),e(v,qf),e(qf,OV),e(OV,iRe),e(qf,dRe),e(qf,U0),e(U0,cRe),e(qf,fRe),e(v,mRe),e(v,Gf),e(Gf,XV),e(XV,gRe),e(Gf,hRe),e(Gf,J0),e(J0,pRe),e(Gf,_Re),e(v,uRe),e(v,Of),e(Of,zV),e(zV,bRe),e(Of,vRe),e(Of,Y0),e(Y0,TRe),e(Of,FRe),e(v,CRe),e(v,Xf),e(Xf,VV),e(VV,MRe),e(Xf,ERe),e(Xf,K0),e(K0,yRe),e(Xf,wRe),e(v,ARe),e(v,zf),e(zf,WV),e(WV,LRe),e(zf,BRe),e(zf,Z0),e(Z0,kRe),e(zf,xRe),e(v,RRe),e(v,Vf),e(Vf,QV),e(QV,SRe),e(Vf,PRe),e(Vf,eL),e(eL,$Re),e(Vf,IRe),e(v,jRe),e(v,Wf),e(Wf,HV),e(HV,NRe),e(Wf,DRe),e(Wf,oL),e(oL,qRe),e(Wf,GRe),e(v,ORe),e(v,Qf),e(Qf,UV),e(UV,XRe),e(Qf,zRe),e(Qf,rL),e(rL,VRe),e(Qf,WRe),e(v,QRe),e(v,Hf),e(Hf,JV),e(JV,HRe),e(Hf,URe),e(Hf,tL),e(tL,JRe),e(Hf,YRe),e(v,KRe),e(v,Uf),e(Uf,YV),e(YV,ZRe),e(Uf,eSe),e(Uf,aL),e(aL,oSe),e(Uf,rSe),e(v,tSe),e(v,Jf),e(Jf,KV),e(KV,aSe),e(Jf,nSe),e(Jf,nL),e(nL,sSe),e(Jf,lSe),e(v,iSe),e(v,Yf),e(Yf,ZV),e(ZV,dSe),e(Yf,cSe),e(Yf,sL),e(sL,fSe),e(Yf,mSe),e(v,gSe),e(v,Kf),e(Kf,eW),e(eW,hSe),e(Kf,pSe),e(Kf,lL),e(lL,_Se),e(Kf,uSe),e(v,bSe),e(v,Zf),e(Zf,oW),e(oW,vSe),e(Zf,TSe),e(Zf,iL),e(iL,FSe),e(Zf,CSe),e(v,MSe),e(v,em),e(em,rW),e(rW,ESe),e(em,ySe),e(em,dL),e(dL,wSe),e(em,ASe),e(v,LSe),e(v,om),e(om,tW),e(tW,BSe),e(om,kSe),e(om,cL),e(cL,xSe),e(om,RSe),e(v,SSe),e(v,rm),e(rm,aW),e(aW,PSe),e(rm,$Se),e(rm,fL),e(fL,ISe),e(rm,jSe),e(v,NSe),e(v,tm),e(tm,nW),e(nW,DSe),e(tm,qSe),e(tm,mL),e(mL,GSe),e(tm,OSe),e(v,XSe),e(v,am),e(am,sW),e(sW,zSe),e(am,VSe),e(am,gL),e(gL,WSe),e(am,QSe),e(v,HSe),e(v,nm),e(nm,lW),e(lW,USe),e(nm,JSe),e(nm,hL),e(hL,YSe),e(nm,KSe),e(v,ZSe),e(v,sm),e(sm,iW),e(iW,ePe),e(sm,oPe),e(sm,pL),e(pL,rPe),e(sm,tPe),e(v,aPe),e(v,lm),e(lm,dW),e(dW,nPe),e(lm,sPe),e(lm,_L),e(_L,lPe),e(lm,iPe),e(v,dPe),e(v,im),e(im,cW),e(cW,cPe),e(im,fPe),e(im,uL),e(uL,mPe),e(im,gPe),e(v,hPe),e(v,dm),e(dm,fW),e(fW,pPe),e(dm,_Pe),e(dm,bL),e(bL,uPe),e(dm,bPe),e(v,vPe),e(v,cm),e(cm,mW),e(mW,TPe),e(cm,FPe),e(cm,vL),e(vL,CPe),e(cm,MPe),e(v,EPe),e(v,fm),e(fm,gW),e(gW,yPe),e(fm,wPe),e(fm,TL),e(TL,APe),e(fm,LPe),e(v,BPe),e(v,mm),e(mm,hW),e(hW,kPe),e(mm,xPe),e(mm,FL),e(FL,RPe),e(mm,SPe),e(v,PPe),e(v,gm),e(gm,pW),e(pW,$Pe),e(gm,IPe),e(gm,CL),e(CL,jPe),e(gm,NPe),e(v,DPe),e(v,hm),e(hm,_W),e(_W,qPe),e(hm,GPe),e(hm,ML),e(ML,OPe),e(hm,XPe),e(v,zPe),e(v,pm),e(pm,uW),e(uW,VPe),e(pm,WPe),e(pm,EL),e(EL,QPe),e(pm,HPe),e(v,UPe),e(v,_m),e(_m,bW),e(bW,JPe),e(_m,YPe),e(_m,yL),e(yL,KPe),e(_m,ZPe),e(v,e$e),e(v,um),e(um,vW),e(vW,o$e),e(um,r$e),e(um,wL),e(wL,t$e),e(um,a$e),e(v,n$e),e(v,bm),e(bm,TW),e(TW,s$e),e(bm,l$e),e(bm,AL),e(AL,i$e),e(bm,d$e),e(v,c$e),e(v,vm),e(vm,FW),e(FW,f$e),e(vm,m$e),e(vm,LL),e(LL,g$e),e(vm,h$e),e(v,p$e),e(v,Tm),e(Tm,CW),e(CW,_$e),e(Tm,u$e),e(Tm,BL),e(BL,b$e),e(Tm,v$e),e(v,T$e),e(v,Fm),e(Fm,MW),e(MW,F$e),e(Fm,C$e),e(Fm,kL),e(kL,M$e),e(Fm,E$e),e(v,y$e),e(v,Cm),e(Cm,EW),e(EW,w$e),e(Cm,A$e),e(Cm,xL),e(xL,L$e),e(Cm,B$e),e(v,k$e),e(v,Mm),e(Mm,yW),e(yW,x$e),e(Mm,R$e),e(Mm,RL),e(RL,S$e),e(Mm,P$e),e(v,$$e),e(v,Em),e(Em,wW),e(wW,I$e),e(Em,j$e),e(Em,SL),e(SL,N$e),e(Em,D$e),e(v,q$e),e(v,ym),e(ym,AW),e(AW,G$e),e(ym,O$e),e(ym,PL),e(PL,X$e),e(ym,z$e),e(v,V$e),e(v,wm),e(wm,LW),e(LW,W$e),e(wm,Q$e),e(wm,$L),e($L,H$e),e(wm,U$e),e(v,J$e),e(v,Am),e(Am,BW),e(BW,Y$e),e(Am,K$e),e(Am,IL),e(IL,Z$e),e(Am,eIe),e(v,oIe),e(v,Lm),e(Lm,kW),e(kW,rIe),e(Lm,tIe),e(Lm,jL),e(jL,aIe),e(Lm,nIe),e(v,sIe),e(v,Bm),e(Bm,xW),e(xW,lIe),e(Bm,iIe),e(Bm,NL),e(NL,dIe),e(Bm,cIe),e(v,fIe),e(v,km),e(km,RW),e(RW,mIe),e(km,gIe),e(km,DL),e(DL,hIe),e(km,pIe),e(v,_Ie),e(v,xm),e(xm,SW),e(SW,uIe),e(xm,bIe),e(xm,qL),e(qL,vIe),e(xm,TIe),e(v,FIe),e(v,Rm),e(Rm,PW),e(PW,CIe),e(Rm,MIe),e(Rm,GL),e(GL,EIe),e(Rm,yIe),e(v,wIe),e(v,Sm),e(Sm,$W),e($W,AIe),e(Sm,LIe),e(Sm,OL),e(OL,BIe),e(Sm,kIe),e(v,xIe),e(v,Pm),e(Pm,IW),e(IW,RIe),e(Pm,SIe),e(Pm,XL),e(XL,PIe),e(Pm,$Ie),e(v,IIe),e(v,$m),e($m,jW),e(jW,jIe),e($m,NIe),e($m,zL),e(zL,DIe),e($m,qIe),e(v,GIe),e(v,Im),e(Im,NW),e(NW,OIe),e(Im,XIe),e(Im,VL),e(VL,zIe),e(Im,VIe),e(v,WIe),e(v,jm),e(jm,DW),e(DW,QIe),e(jm,HIe),e(jm,WL),e(WL,UIe),e(jm,JIe),e(v,YIe),e(v,Nm),e(Nm,qW),e(qW,KIe),e(Nm,ZIe),e(Nm,QL),e(QL,eje),e(Nm,oje),e(v,rje),e(v,Dm),e(Dm,GW),e(GW,tje),e(Dm,aje),e(Dm,HL),e(HL,nje),e(Dm,sje),e(v,lje),e(v,qm),e(qm,OW),e(OW,ije),e(qm,dje),e(qm,UL),e(UL,cje),e(qm,fje),e(v,mje),e(v,Gm),e(Gm,XW),e(XW,gje),e(Gm,hje),e(Gm,JL),e(JL,pje),e(Gm,_je),e(v,uje),e(v,Om),e(Om,zW),e(zW,bje),e(Om,vje),e(Om,YL),e(YL,Tje),e(Om,Fje),e(v,Cje),e(v,Xm),e(Xm,VW),e(VW,Mje),e(Xm,Eje),e(Xm,KL),e(KL,yje),e(Xm,wje),e(v,Aje),e(v,zm),e(zm,WW),e(WW,Lje),e(zm,Bje),e(zm,ZL),e(ZL,kje),e(zm,xje),e(v,Rje),e(v,Vm),e(Vm,QW),e(QW,Sje),e(Vm,Pje),e(Vm,e9),e(e9,$je),e(Vm,Ije),e(v,jje),e(v,Wm),e(Wm,HW),e(HW,Nje),e(Wm,Dje),e(Wm,o9),e(o9,qje),e(Wm,Gje),e(v,Oje),e(v,Qm),e(Qm,UW),e(UW,Xje),e(Qm,zje),e(Qm,r9),e(r9,Vje),e(Qm,Wje),e(v,Qje),e(v,Hm),e(Hm,JW),e(JW,Hje),e(Hm,Uje),e(Hm,t9),e(t9,Jje),e(Hm,Yje),e(v,Kje),e(v,Um),e(Um,YW),e(YW,Zje),e(Um,eNe),e(Um,a9),e(a9,oNe),e(Um,rNe),e(v,tNe),e(v,Jm),e(Jm,KW),e(KW,aNe),e(Jm,nNe),e(Jm,n9),e(n9,sNe),e(Jm,lNe),e(v,iNe),e(v,Ym),e(Ym,ZW),e(ZW,dNe),e(Ym,cNe),e(Ym,s9),e(s9,fNe),e(Ym,mNe),e(v,gNe),e(v,Km),e(Km,eQ),e(eQ,hNe),e(Km,pNe),e(Km,l9),e(l9,_Ne),e(Km,uNe),e(v,bNe),e(v,Zm),e(Zm,oQ),e(oQ,vNe),e(Zm,TNe),e(Zm,i9),e(i9,FNe),e(Zm,CNe),e(v,MNe),e(v,eg),e(eg,rQ),e(rQ,ENe),e(eg,yNe),e(eg,d9),e(d9,wNe),e(eg,ANe),e(v,LNe),e(v,og),e(og,tQ),e(tQ,BNe),e(og,kNe),e(og,c9),e(c9,xNe),e(og,RNe),e(v,SNe),e(v,rg),e(rg,aQ),e(aQ,PNe),e(rg,$Ne),e(rg,f9),e(f9,INe),e(rg,jNe),e(v,NNe),e(v,tg),e(tg,nQ),e(nQ,DNe),e(tg,qNe),e(tg,m9),e(m9,GNe),e(tg,ONe),e(v,XNe),e(v,ag),e(ag,sQ),e(sQ,zNe),e(ag,VNe),e(ag,g9),e(g9,WNe),e(ag,QNe),e(v,HNe),e(v,ng),e(ng,lQ),e(lQ,UNe),e(ng,JNe),e(ng,h9),e(h9,YNe),e(ng,KNe),e(v,ZNe),e(v,sg),e(sg,iQ),e(iQ,eDe),e(sg,oDe),e(sg,p9),e(p9,rDe),e(sg,tDe),e(v,aDe),e(v,lg),e(lg,dQ),e(dQ,nDe),e(lg,sDe),e(lg,_9),e(_9,lDe),e(lg,iDe),e(v,dDe),e(v,ig),e(ig,cQ),e(cQ,cDe),e(ig,fDe),e(ig,u9),e(u9,mDe),e(ig,gDe),e(v,hDe),e(v,dg),e(dg,fQ),e(fQ,pDe),e(dg,_De),e(dg,b9),e(b9,uDe),e(dg,bDe),e(v,vDe),e(v,cg),e(cg,mQ),e(mQ,TDe),e(cg,FDe),e(cg,v9),e(v9,CDe),e(cg,MDe),e(v,EDe),e(v,fg),e(fg,gQ),e(gQ,yDe),e(fg,wDe),e(fg,T9),e(T9,ADe),e(fg,LDe),e(v,BDe),e(v,mg),e(mg,hQ),e(hQ,kDe),e(mg,xDe),e(mg,F9),e(F9,RDe),e(mg,SDe),e(fo,PDe),e(fo,pQ),e(pQ,$De),e(fo,IDe),g(s4,fo,null),e(Go,jDe),e(Go,gg),g(l4,gg,null),e(gg,NDe),e(gg,_Q),e(_Q,DDe),b(d,q0e,u),b(d,Ii,u),e(Ii,hg),e(hg,uQ),g(i4,uQ,null),e(Ii,qDe),e(Ii,bQ),e(bQ,GDe),b(d,G0e,u),b(d,Oo,u),g(d4,Oo,null),e(Oo,ODe),e(Oo,c4),e(c4,XDe),e(c4,C9),e(C9,zDe),e(c4,VDe),e(Oo,WDe),e(Oo,f4),e(f4,QDe),e(f4,vQ),e(vQ,HDe),e(f4,UDe),e(Oo,JDe),e(Oo,mo),g(m4,mo,null),e(mo,YDe),e(mo,TQ),e(TQ,KDe),e(mo,ZDe),e(mo,ja),e(ja,eqe),e(ja,FQ),e(FQ,oqe),e(ja,rqe),e(ja,CQ),e(CQ,tqe),e(ja,aqe),e(ja,MQ),e(MQ,nqe),e(ja,sqe),e(mo,lqe),e(mo,E),e(E,Dn),e(Dn,EQ),e(EQ,iqe),e(Dn,dqe),e(Dn,M9),e(M9,cqe),e(Dn,fqe),e(Dn,E9),e(E9,mqe),e(Dn,gqe),e(E,hqe),e(E,qn),e(qn,yQ),e(yQ,pqe),e(qn,_qe),e(qn,y9),e(y9,uqe),e(qn,bqe),e(qn,w9),e(w9,vqe),e(qn,Tqe),e(E,Fqe),e(E,Gn),e(Gn,wQ),e(wQ,Cqe),e(Gn,Mqe),e(Gn,A9),e(A9,Eqe),e(Gn,yqe),e(Gn,L9),e(L9,wqe),e(Gn,Aqe),e(E,Lqe),e(E,pg),e(pg,AQ),e(AQ,Bqe),e(pg,kqe),e(pg,B9),e(B9,xqe),e(pg,Rqe),e(E,Sqe),e(E,On),e(On,LQ),e(LQ,Pqe),e(On,$qe),e(On,k9),e(k9,Iqe),e(On,jqe),e(On,x9),e(x9,Nqe),e(On,Dqe),e(E,qqe),e(E,_g),e(_g,BQ),e(BQ,Gqe),e(_g,Oqe),e(_g,R9),e(R9,Xqe),e(_g,zqe),e(E,Vqe),e(E,ug),e(ug,kQ),e(kQ,Wqe),e(ug,Qqe),e(ug,S9),e(S9,Hqe),e(ug,Uqe),e(E,Jqe),e(E,bg),e(bg,xQ),e(xQ,Yqe),e(bg,Kqe),e(bg,P9),e(P9,Zqe),e(bg,eGe),e(E,oGe),e(E,Xn),e(Xn,RQ),e(RQ,rGe),e(Xn,tGe),e(Xn,$9),e($9,aGe),e(Xn,nGe),e(Xn,I9),e(I9,sGe),e(Xn,lGe),e(E,iGe),e(E,zn),e(zn,SQ),e(SQ,dGe),e(zn,cGe),e(zn,j9),e(j9,fGe),e(zn,mGe),e(zn,N9),e(N9,gGe),e(zn,hGe),e(E,pGe),e(E,Vn),e(Vn,PQ),e(PQ,_Ge),e(Vn,uGe),e(Vn,D9),e(D9,bGe),e(Vn,vGe),e(Vn,q9),e(q9,TGe),e(Vn,FGe),e(E,CGe),e(E,vg),e(vg,$Q),e($Q,MGe),e(vg,EGe),e(vg,G9),e(G9,yGe),e(vg,wGe),e(E,AGe),e(E,Tg),e(Tg,IQ),e(IQ,LGe),e(Tg,BGe),e(Tg,O9),e(O9,kGe),e(Tg,xGe),e(E,RGe),e(E,Wn),e(Wn,jQ),e(jQ,SGe),e(Wn,PGe),e(Wn,X9),e(X9,$Ge),e(Wn,IGe),e(Wn,z9),e(z9,jGe),e(Wn,NGe),e(E,DGe),e(E,Fg),e(Fg,NQ),e(NQ,qGe),e(Fg,GGe),e(Fg,V9),e(V9,OGe),e(Fg,XGe),e(E,zGe),e(E,Qn),e(Qn,DQ),e(DQ,VGe),e(Qn,WGe),e(Qn,W9),e(W9,QGe),e(Qn,HGe),e(Qn,Q9),e(Q9,UGe),e(Qn,JGe),e(E,YGe),e(E,Hn),e(Hn,qQ),e(qQ,KGe),e(Hn,ZGe),e(Hn,H9),e(H9,eOe),e(Hn,oOe),e(Hn,U9),e(U9,rOe),e(Hn,tOe),e(E,aOe),e(E,Un),e(Un,GQ),e(GQ,nOe),e(Un,sOe),e(Un,J9),e(J9,lOe),e(Un,iOe),e(Un,OQ),e(OQ,dOe),e(Un,cOe),e(E,fOe),e(E,Cg),e(Cg,XQ),e(XQ,mOe),e(Cg,gOe),e(Cg,Y9),e(Y9,hOe),e(Cg,pOe),e(E,_Oe),e(E,Jn),e(Jn,zQ),e(zQ,uOe),e(Jn,bOe),e(Jn,K9),e(K9,vOe),e(Jn,TOe),e(Jn,Z9),e(Z9,FOe),e(Jn,COe),e(E,MOe),e(E,Mg),e(Mg,VQ),e(VQ,EOe),e(Mg,yOe),e(Mg,eB),e(eB,wOe),e(Mg,AOe),e(E,LOe),e(E,Yn),e(Yn,WQ),e(WQ,BOe),e(Yn,kOe),e(Yn,oB),e(oB,xOe),e(Yn,ROe),e(Yn,rB),e(rB,SOe),e(Yn,POe),e(E,$Oe),e(E,Kn),e(Kn,QQ),e(QQ,IOe),e(Kn,jOe),e(Kn,tB),e(tB,NOe),e(Kn,DOe),e(Kn,aB),e(aB,qOe),e(Kn,GOe),e(E,OOe),e(E,Zn),e(Zn,HQ),e(HQ,XOe),e(Zn,zOe),e(Zn,nB),e(nB,VOe),e(Zn,WOe),e(Zn,sB),e(sB,QOe),e(Zn,HOe),e(E,UOe),e(E,Eg),e(Eg,UQ),e(UQ,JOe),e(Eg,YOe),e(Eg,lB),e(lB,KOe),e(Eg,ZOe),e(E,eXe),e(E,es),e(es,JQ),e(JQ,oXe),e(es,rXe),e(es,iB),e(iB,tXe),e(es,aXe),e(es,dB),e(dB,nXe),e(es,sXe),e(E,lXe),e(E,yg),e(yg,YQ),e(YQ,iXe),e(yg,dXe),e(yg,cB),e(cB,cXe),e(yg,fXe),e(E,mXe),e(E,os),e(os,KQ),e(KQ,gXe),e(os,hXe),e(os,fB),e(fB,pXe),e(os,_Xe),e(os,mB),e(mB,uXe),e(os,bXe),e(E,vXe),e(E,rs),e(rs,ZQ),e(ZQ,TXe),e(rs,FXe),e(rs,gB),e(gB,CXe),e(rs,MXe),e(rs,hB),e(hB,EXe),e(rs,yXe),e(E,wXe),e(E,ts),e(ts,eH),e(eH,AXe),e(ts,LXe),e(ts,pB),e(pB,BXe),e(ts,kXe),e(ts,_B),e(_B,xXe),e(ts,RXe),e(E,SXe),e(E,as),e(as,oH),e(oH,PXe),e(as,$Xe),e(as,uB),e(uB,IXe),e(as,jXe),e(as,bB),e(bB,NXe),e(as,DXe),e(E,qXe),e(E,wg),e(wg,rH),e(rH,GXe),e(wg,OXe),e(wg,vB),e(vB,XXe),e(wg,zXe),e(E,VXe),e(E,ns),e(ns,tH),e(tH,WXe),e(ns,QXe),e(ns,TB),e(TB,HXe),e(ns,UXe),e(ns,FB),e(FB,JXe),e(ns,YXe),e(E,KXe),e(E,ss),e(ss,aH),e(aH,ZXe),e(ss,eze),e(ss,CB),e(CB,oze),e(ss,rze),e(ss,MB),e(MB,tze),e(ss,aze),e(E,nze),e(E,ls),e(ls,nH),e(nH,sze),e(ls,lze),e(ls,EB),e(EB,ize),e(ls,dze),e(ls,yB),e(yB,cze),e(ls,fze),e(E,mze),e(E,is),e(is,sH),e(sH,gze),e(is,hze),e(is,wB),e(wB,pze),e(is,_ze),e(is,AB),e(AB,uze),e(is,bze),e(E,vze),e(E,ds),e(ds,lH),e(lH,Tze),e(ds,Fze),e(ds,LB),e(LB,Cze),e(ds,Mze),e(ds,BB),e(BB,Eze),e(ds,yze),e(E,wze),e(E,cs),e(cs,iH),e(iH,Aze),e(cs,Lze),e(cs,kB),e(kB,Bze),e(cs,kze),e(cs,xB),e(xB,xze),e(cs,Rze),e(E,Sze),e(E,Ag),e(Ag,dH),e(dH,Pze),e(Ag,$ze),e(Ag,RB),e(RB,Ize),e(Ag,jze),e(E,Nze),e(E,fs),e(fs,cH),e(cH,Dze),e(fs,qze),e(fs,SB),e(SB,Gze),e(fs,Oze),e(fs,PB),e(PB,Xze),e(fs,zze),e(E,Vze),e(E,Lg),e(Lg,fH),e(fH,Wze),e(Lg,Qze),e(Lg,$B),e($B,Hze),e(Lg,Uze),e(E,Jze),e(E,Bg),e(Bg,mH),e(mH,Yze),e(Bg,Kze),e(Bg,IB),e(IB,Zze),e(Bg,eVe),e(E,oVe),e(E,ms),e(ms,gH),e(gH,rVe),e(ms,tVe),e(ms,jB),e(jB,aVe),e(ms,nVe),e(ms,NB),e(NB,sVe),e(ms,lVe),e(E,iVe),e(E,gs),e(gs,hH),e(hH,dVe),e(gs,cVe),e(gs,DB),e(DB,fVe),e(gs,mVe),e(gs,qB),e(qB,gVe),e(gs,hVe),e(E,pVe),e(E,kg),e(kg,pH),e(pH,_Ve),e(kg,uVe),e(kg,GB),e(GB,bVe),e(kg,vVe),e(E,TVe),e(E,hs),e(hs,_H),e(_H,FVe),e(hs,CVe),e(hs,OB),e(OB,MVe),e(hs,EVe),e(hs,XB),e(XB,yVe),e(hs,wVe),e(E,AVe),e(E,ps),e(ps,uH),e(uH,LVe),e(ps,BVe),e(ps,zB),e(zB,kVe),e(ps,xVe),e(ps,VB),e(VB,RVe),e(ps,SVe),e(E,PVe),e(E,_s),e(_s,bH),e(bH,$Ve),e(_s,IVe),e(_s,WB),e(WB,jVe),e(_s,NVe),e(_s,QB),e(QB,DVe),e(_s,qVe),e(E,GVe),e(E,us),e(us,vH),e(vH,OVe),e(us,XVe),e(us,HB),e(HB,zVe),e(us,VVe),e(us,UB),e(UB,WVe),e(us,QVe),e(E,HVe),e(E,bs),e(bs,TH),e(TH,UVe),e(bs,JVe),e(bs,JB),e(JB,YVe),e(bs,KVe),e(bs,YB),e(YB,ZVe),e(bs,eWe),e(E,oWe),e(E,xg),e(xg,FH),e(FH,rWe),e(xg,tWe),e(xg,KB),e(KB,aWe),e(xg,nWe),e(E,sWe),e(E,Rg),e(Rg,CH),e(CH,lWe),e(Rg,iWe),e(Rg,ZB),e(ZB,dWe),e(Rg,cWe),e(E,fWe),e(E,Sg),e(Sg,MH),e(MH,mWe),e(Sg,gWe),e(Sg,ek),e(ek,hWe),e(Sg,pWe),e(E,_We),e(E,vs),e(vs,EH),e(EH,uWe),e(vs,bWe),e(vs,ok),e(ok,vWe),e(vs,TWe),e(vs,rk),e(rk,FWe),e(vs,CWe),e(E,MWe),e(E,Pg),e(Pg,yH),e(yH,EWe),e(Pg,yWe),e(Pg,tk),e(tk,wWe),e(Pg,AWe),e(E,LWe),e(E,Ts),e(Ts,wH),e(wH,BWe),e(Ts,kWe),e(Ts,ak),e(ak,xWe),e(Ts,RWe),e(Ts,nk),e(nk,SWe),e(Ts,PWe),e(E,$We),e(E,Fs),e(Fs,AH),e(AH,IWe),e(Fs,jWe),e(Fs,sk),e(sk,NWe),e(Fs,DWe),e(Fs,lk),e(lk,qWe),e(Fs,GWe),e(E,OWe),e(E,Cs),e(Cs,LH),e(LH,XWe),e(Cs,zWe),e(Cs,ik),e(ik,VWe),e(Cs,WWe),e(Cs,dk),e(dk,QWe),e(Cs,HWe),e(E,UWe),e(E,Ms),e(Ms,BH),e(BH,JWe),e(Ms,YWe),e(Ms,ck),e(ck,KWe),e(Ms,ZWe),e(Ms,fk),e(fk,eQe),e(Ms,oQe),e(E,rQe),e(E,Es),e(Es,kH),e(kH,tQe),e(Es,aQe),e(Es,mk),e(mk,nQe),e(Es,sQe),e(Es,gk),e(gk,lQe),e(Es,iQe),e(E,dQe),e(E,$g),e($g,xH),e(xH,cQe),e($g,fQe),e($g,hk),e(hk,mQe),e($g,gQe),e(E,hQe),e(E,Ig),e(Ig,RH),e(RH,pQe),e(Ig,_Qe),e(Ig,pk),e(pk,uQe),e(Ig,bQe),e(E,vQe),e(E,ys),e(ys,SH),e(SH,TQe),e(ys,FQe),e(ys,_k),e(_k,CQe),e(ys,MQe),e(ys,uk),e(uk,EQe),e(ys,yQe),e(E,wQe),e(E,ws),e(ws,PH),e(PH,AQe),e(ws,LQe),e(ws,bk),e(bk,BQe),e(ws,kQe),e(ws,vk),e(vk,xQe),e(ws,RQe),e(E,SQe),e(E,As),e(As,$H),e($H,PQe),e(As,$Qe),e(As,Tk),e(Tk,IQe),e(As,jQe),e(As,Fk),e(Fk,NQe),e(As,DQe),e(E,qQe),e(E,jg),e(jg,IH),e(IH,GQe),e(jg,OQe),e(jg,Ck),e(Ck,XQe),e(jg,zQe),e(E,VQe),e(E,Ng),e(Ng,jH),e(jH,WQe),e(Ng,QQe),e(Ng,Mk),e(Mk,HQe),e(Ng,UQe),e(E,JQe),e(E,Dg),e(Dg,NH),e(NH,YQe),e(Dg,KQe),e(Dg,Ek),e(Ek,ZQe),e(Dg,eHe),e(E,oHe),e(E,qg),e(qg,DH),e(DH,rHe),e(qg,tHe),e(qg,yk),e(yk,aHe),e(qg,nHe),e(E,sHe),e(E,Ls),e(Ls,qH),e(qH,lHe),e(Ls,iHe),e(Ls,wk),e(wk,dHe),e(Ls,cHe),e(Ls,Ak),e(Ak,fHe),e(Ls,mHe),e(E,gHe),e(E,Gg),e(Gg,GH),e(GH,hHe),e(Gg,pHe),e(Gg,Lk),e(Lk,_He),e(Gg,uHe),e(E,bHe),e(E,Og),e(Og,OH),e(OH,vHe),e(Og,THe),e(Og,Bk),e(Bk,FHe),e(Og,CHe),e(E,MHe),e(E,Bs),e(Bs,XH),e(XH,EHe),e(Bs,yHe),e(Bs,kk),e(kk,wHe),e(Bs,AHe),e(Bs,xk),e(xk,LHe),e(Bs,BHe),e(E,kHe),e(E,ks),e(ks,zH),e(zH,xHe),e(ks,RHe),e(ks,Rk),e(Rk,SHe),e(ks,PHe),e(ks,Sk),e(Sk,$He),e(ks,IHe),e(mo,jHe),e(mo,VH),e(VH,NHe),e(mo,DHe),g(g4,mo,null),e(Oo,qHe),e(Oo,Xg),g(h4,Xg,null),e(Xg,GHe),e(Xg,WH),e(WH,OHe),b(d,O0e,u),b(d,ji,u),e(ji,zg),e(zg,QH),g(p4,QH,null),e(ji,XHe),e(ji,HH),e(HH,zHe),b(d,X0e,u),b(d,Xo,u),g(_4,Xo,null),e(Xo,VHe),e(Xo,u4),e(u4,WHe),e(u4,Pk),e(Pk,QHe),e(u4,HHe),e(Xo,UHe),e(Xo,b4),e(b4,JHe),e(b4,UH),e(UH,YHe),e(b4,KHe),e(Xo,ZHe),e(Xo,Le),g(v4,Le,null),e(Le,eUe),e(Le,JH),e(JH,oUe),e(Le,rUe),e(Le,Na),e(Na,tUe),e(Na,YH),e(YH,aUe),e(Na,nUe),e(Na,KH),e(KH,sUe),e(Na,lUe),e(Na,ZH),e(ZH,iUe),e(Na,dUe),e(Le,cUe),e(Le,ne),e(ne,Vg),e(Vg,eU),e(eU,fUe),e(Vg,mUe),e(Vg,$k),e($k,gUe),e(Vg,hUe),e(ne,pUe),e(ne,Wg),e(Wg,oU),e(oU,_Ue),e(Wg,uUe),e(Wg,Ik),e(Ik,bUe),e(Wg,vUe),e(ne,TUe),e(ne,Qg),e(Qg,rU),e(rU,FUe),e(Qg,CUe),e(Qg,jk),e(jk,MUe),e(Qg,EUe),e(ne,yUe),e(ne,Hg),e(Hg,tU),e(tU,wUe),e(Hg,AUe),e(Hg,Nk),e(Nk,LUe),e(Hg,BUe),e(ne,kUe),e(ne,Ug),e(Ug,aU),e(aU,xUe),e(Ug,RUe),e(Ug,Dk),e(Dk,SUe),e(Ug,PUe),e(ne,$Ue),e(ne,Jg),e(Jg,nU),e(nU,IUe),e(Jg,jUe),e(Jg,qk),e(qk,NUe),e(Jg,DUe),e(ne,qUe),e(ne,Yg),e(Yg,sU),e(sU,GUe),e(Yg,OUe),e(Yg,Gk),e(Gk,XUe),e(Yg,zUe),e(ne,VUe),e(ne,Kg),e(Kg,lU),e(lU,WUe),e(Kg,QUe),e(Kg,Ok),e(Ok,HUe),e(Kg,UUe),e(ne,JUe),e(ne,Zg),e(Zg,iU),e(iU,YUe),e(Zg,KUe),e(Zg,Xk),e(Xk,ZUe),e(Zg,eJe),e(ne,oJe),e(ne,eh),e(eh,dU),e(dU,rJe),e(eh,tJe),e(eh,zk),e(zk,aJe),e(eh,nJe),e(ne,sJe),e(ne,oh),e(oh,cU),e(cU,lJe),e(oh,iJe),e(oh,Vk),e(Vk,dJe),e(oh,cJe),e(ne,fJe),e(ne,rh),e(rh,fU),e(fU,mJe),e(rh,gJe),e(rh,Wk),e(Wk,hJe),e(rh,pJe),e(ne,_Je),e(ne,th),e(th,mU),e(mU,uJe),e(th,bJe),e(th,Qk),e(Qk,vJe),e(th,TJe),e(ne,FJe),e(ne,ah),e(ah,gU),e(gU,CJe),e(ah,MJe),e(ah,Hk),e(Hk,EJe),e(ah,yJe),e(ne,wJe),e(ne,nh),e(nh,hU),e(hU,AJe),e(nh,LJe),e(nh,Uk),e(Uk,BJe),e(nh,kJe),e(Le,xJe),g(sh,Le,null),e(Le,RJe),e(Le,pU),e(pU,SJe),e(Le,PJe),g(T4,Le,null),e(Xo,$Je),e(Xo,lh),g(F4,lh,null),e(lh,IJe),e(lh,_U),e(_U,jJe),b(d,z0e,u),b(d,Ni,u),e(Ni,ih),e(ih,uU),g(C4,uU,null),e(Ni,NJe),e(Ni,bU),e(bU,DJe),b(d,V0e,u),b(d,zo,u),g(M4,zo,null),e(zo,qJe),e(zo,E4),e(E4,GJe),e(E4,Jk),e(Jk,OJe),e(E4,XJe),e(zo,zJe),e(zo,y4),e(y4,VJe),e(y4,vU),e(vU,WJe),e(y4,QJe),e(zo,HJe),e(zo,Be),g(w4,Be,null),e(Be,UJe),e(Be,TU),e(TU,JJe),e(Be,YJe),e(Be,Di),e(Di,KJe),e(Di,FU),e(FU,ZJe),e(Di,eYe),e(Di,CU),e(CU,oYe),e(Di,rYe),e(Be,tYe),e(Be,we),e(we,dh),e(dh,MU),e(MU,aYe),e(dh,nYe),e(dh,Yk),e(Yk,sYe),e(dh,lYe),e(we,iYe),e(we,ch),e(ch,EU),e(EU,dYe),e(ch,cYe),e(ch,Kk),e(Kk,fYe),e(ch,mYe),e(we,gYe),e(we,fh),e(fh,yU),e(yU,hYe),e(fh,pYe),e(fh,Zk),e(Zk,_Ye),e(fh,uYe),e(we,bYe),e(we,mh),e(mh,wU),e(wU,vYe),e(mh,TYe),e(mh,ex),e(ex,FYe),e(mh,CYe),e(we,MYe),e(we,gh),e(gh,AU),e(AU,EYe),e(gh,yYe),e(gh,ox),e(ox,wYe),e(gh,AYe),e(we,LYe),e(we,hh),e(hh,LU),e(LU,BYe),e(hh,kYe),e(hh,rx),e(rx,xYe),e(hh,RYe),e(we,SYe),e(we,ph),e(ph,BU),e(BU,PYe),e(ph,$Ye),e(ph,tx),e(tx,IYe),e(ph,jYe),e(we,NYe),e(we,_h),e(_h,kU),e(kU,DYe),e(_h,qYe),e(_h,ax),e(ax,GYe),e(_h,OYe),e(Be,XYe),g(uh,Be,null),e(Be,zYe),e(Be,xU),e(xU,VYe),e(Be,WYe),g(A4,Be,null),e(zo,QYe),e(zo,bh),g(L4,bh,null),e(bh,HYe),e(bh,RU),e(RU,UYe),b(d,W0e,u),b(d,qi,u),e(qi,vh),e(vh,SU),g(B4,SU,null),e(qi,JYe),e(qi,PU),e(PU,YYe),b(d,Q0e,u),b(d,Vo,u),g(k4,Vo,null),e(Vo,KYe),e(Vo,Gi),e(Gi,ZYe),e(Gi,$U),e($U,eKe),e(Gi,oKe),e(Gi,IU),e(IU,rKe),e(Gi,tKe),e(Vo,aKe),e(Vo,x4),e(x4,nKe),e(x4,jU),e(jU,sKe),e(x4,lKe),e(Vo,iKe),e(Vo,Nr),g(R4,Nr,null),e(Nr,dKe),e(Nr,NU),e(NU,cKe),e(Nr,fKe),e(Nr,Oi),e(Oi,mKe),e(Oi,DU),e(DU,gKe),e(Oi,hKe),e(Oi,qU),e(qU,pKe),e(Oi,_Ke),e(Nr,uKe),e(Nr,GU),e(GU,bKe),e(Nr,vKe),g(S4,Nr,null),e(Vo,TKe),e(Vo,ke),g(P4,ke,null),e(ke,FKe),e(ke,OU),e(OU,CKe),e(ke,MKe),e(ke,Da),e(Da,EKe),e(Da,XU),e(XU,yKe),e(Da,wKe),e(Da,zU),e(zU,AKe),e(Da,LKe),e(Da,VU),e(VU,BKe),e(Da,kKe),e(ke,xKe),e(ke,F),e(F,Th),e(Th,WU),e(WU,RKe),e(Th,SKe),e(Th,nx),e(nx,PKe),e(Th,$Ke),e(F,IKe),e(F,Fh),e(Fh,QU),e(QU,jKe),e(Fh,NKe),e(Fh,sx),e(sx,DKe),e(Fh,qKe),e(F,GKe),e(F,Ch),e(Ch,HU),e(HU,OKe),e(Ch,XKe),e(Ch,lx),e(lx,zKe),e(Ch,VKe),e(F,WKe),e(F,Mh),e(Mh,UU),e(UU,QKe),e(Mh,HKe),e(Mh,ix),e(ix,UKe),e(Mh,JKe),e(F,YKe),e(F,Eh),e(Eh,JU),e(JU,KKe),e(Eh,ZKe),e(Eh,dx),e(dx,eZe),e(Eh,oZe),e(F,rZe),e(F,yh),e(yh,YU),e(YU,tZe),e(yh,aZe),e(yh,cx),e(cx,nZe),e(yh,sZe),e(F,lZe),e(F,wh),e(wh,KU),e(KU,iZe),e(wh,dZe),e(wh,fx),e(fx,cZe),e(wh,fZe),e(F,mZe),e(F,Ah),e(Ah,ZU),e(ZU,gZe),e(Ah,hZe),e(Ah,mx),e(mx,pZe),e(Ah,_Ze),e(F,uZe),e(F,Lh),e(Lh,eJ),e(eJ,bZe),e(Lh,vZe),e(Lh,gx),e(gx,TZe),e(Lh,FZe),e(F,CZe),e(F,Bh),e(Bh,oJ),e(oJ,MZe),e(Bh,EZe),e(Bh,hx),e(hx,yZe),e(Bh,wZe),e(F,AZe),e(F,kh),e(kh,rJ),e(rJ,LZe),e(kh,BZe),e(kh,px),e(px,kZe),e(kh,xZe),e(F,RZe),e(F,xh),e(xh,tJ),e(tJ,SZe),e(xh,PZe),e(xh,_x),e(_x,$Ze),e(xh,IZe),e(F,jZe),e(F,Rh),e(Rh,aJ),e(aJ,NZe),e(Rh,DZe),e(Rh,ux),e(ux,qZe),e(Rh,GZe),e(F,OZe),e(F,Sh),e(Sh,nJ),e(nJ,XZe),e(Sh,zZe),e(Sh,bx),e(bx,VZe),e(Sh,WZe),e(F,QZe),e(F,Ph),e(Ph,sJ),e(sJ,HZe),e(Ph,UZe),e(Ph,vx),e(vx,JZe),e(Ph,YZe),e(F,KZe),e(F,$h),e($h,lJ),e(lJ,ZZe),e($h,eeo),e($h,Tx),e(Tx,oeo),e($h,reo),e(F,teo),e(F,Ih),e(Ih,iJ),e(iJ,aeo),e(Ih,neo),e(Ih,Fx),e(Fx,seo),e(Ih,leo),e(F,ieo),e(F,jh),e(jh,dJ),e(dJ,deo),e(jh,ceo),e(jh,Cx),e(Cx,feo),e(jh,meo),e(F,geo),e(F,Nh),e(Nh,cJ),e(cJ,heo),e(Nh,peo),e(Nh,Mx),e(Mx,_eo),e(Nh,ueo),e(F,beo),e(F,Dh),e(Dh,fJ),e(fJ,veo),e(Dh,Teo),e(Dh,Ex),e(Ex,Feo),e(Dh,Ceo),e(F,Meo),e(F,qh),e(qh,mJ),e(mJ,Eeo),e(qh,yeo),e(qh,yx),e(yx,weo),e(qh,Aeo),e(F,Leo),e(F,Gh),e(Gh,gJ),e(gJ,Beo),e(Gh,keo),e(Gh,wx),e(wx,xeo),e(Gh,Reo),e(F,Seo),e(F,Oh),e(Oh,hJ),e(hJ,Peo),e(Oh,$eo),e(Oh,Ax),e(Ax,Ieo),e(Oh,jeo),e(F,Neo),e(F,Xh),e(Xh,pJ),e(pJ,Deo),e(Xh,qeo),e(Xh,Lx),e(Lx,Geo),e(Xh,Oeo),e(F,Xeo),e(F,zh),e(zh,_J),e(_J,zeo),e(zh,Veo),e(zh,Bx),e(Bx,Weo),e(zh,Qeo),e(F,Heo),e(F,xs),e(xs,uJ),e(uJ,Ueo),e(xs,Jeo),e(xs,kx),e(kx,Yeo),e(xs,Keo),e(xs,xx),e(xx,Zeo),e(xs,eoo),e(F,ooo),e(F,Vh),e(Vh,bJ),e(bJ,roo),e(Vh,too),e(Vh,Rx),e(Rx,aoo),e(Vh,noo),e(F,soo),e(F,Wh),e(Wh,vJ),e(vJ,loo),e(Wh,ioo),e(Wh,Sx),e(Sx,doo),e(Wh,coo),e(F,foo),e(F,Qh),e(Qh,TJ),e(TJ,moo),e(Qh,goo),e(Qh,Px),e(Px,hoo),e(Qh,poo),e(F,_oo),e(F,Hh),e(Hh,FJ),e(FJ,uoo),e(Hh,boo),e(Hh,$x),e($x,voo),e(Hh,Too),e(F,Foo),e(F,Uh),e(Uh,CJ),e(CJ,Coo),e(Uh,Moo),e(Uh,Ix),e(Ix,Eoo),e(Uh,yoo),e(F,woo),e(F,Jh),e(Jh,MJ),e(MJ,Aoo),e(Jh,Loo),e(Jh,jx),e(jx,Boo),e(Jh,koo),e(F,xoo),e(F,Yh),e(Yh,EJ),e(EJ,Roo),e(Yh,Soo),e(Yh,Nx),e(Nx,Poo),e(Yh,$oo),e(F,Ioo),e(F,Kh),e(Kh,yJ),e(yJ,joo),e(Kh,Noo),e(Kh,Dx),e(Dx,Doo),e(Kh,qoo),e(F,Goo),e(F,Zh),e(Zh,wJ),e(wJ,Ooo),e(Zh,Xoo),e(Zh,qx),e(qx,zoo),e(Zh,Voo),e(F,Woo),e(F,ep),e(ep,AJ),e(AJ,Qoo),e(ep,Hoo),e(ep,Gx),e(Gx,Uoo),e(ep,Joo),e(F,Yoo),e(F,op),e(op,LJ),e(LJ,Koo),e(op,Zoo),e(op,Ox),e(Ox,ero),e(op,oro),e(F,rro),e(F,rp),e(rp,BJ),e(BJ,tro),e(rp,aro),e(rp,Xx),e(Xx,nro),e(rp,sro),e(F,lro),e(F,tp),e(tp,kJ),e(kJ,iro),e(tp,dro),e(tp,zx),e(zx,cro),e(tp,fro),e(F,mro),e(F,ap),e(ap,xJ),e(xJ,gro),e(ap,hro),e(ap,Vx),e(Vx,pro),e(ap,_ro),e(F,uro),e(F,np),e(np,RJ),e(RJ,bro),e(np,vro),e(np,Wx),e(Wx,Tro),e(np,Fro),e(F,Cro),e(F,sp),e(sp,SJ),e(SJ,Mro),e(sp,Ero),e(sp,Qx),e(Qx,yro),e(sp,wro),e(F,Aro),e(F,lp),e(lp,PJ),e(PJ,Lro),e(lp,Bro),e(lp,Hx),e(Hx,kro),e(lp,xro),e(F,Rro),e(F,ip),e(ip,$J),e($J,Sro),e(ip,Pro),e(ip,Ux),e(Ux,$ro),e(ip,Iro),e(F,jro),e(F,dp),e(dp,IJ),e(IJ,Nro),e(dp,Dro),e(dp,Jx),e(Jx,qro),e(dp,Gro),e(F,Oro),e(F,cp),e(cp,jJ),e(jJ,Xro),e(cp,zro),e(cp,Yx),e(Yx,Vro),e(cp,Wro),e(F,Qro),e(F,fp),e(fp,NJ),e(NJ,Hro),e(fp,Uro),e(fp,Kx),e(Kx,Jro),e(fp,Yro),e(F,Kro),e(F,mp),e(mp,DJ),e(DJ,Zro),e(mp,eto),e(mp,Zx),e(Zx,oto),e(mp,rto),e(F,tto),e(F,gp),e(gp,qJ),e(qJ,ato),e(gp,nto),e(gp,eR),e(eR,sto),e(gp,lto),e(F,ito),e(F,hp),e(hp,GJ),e(GJ,dto),e(hp,cto),e(hp,oR),e(oR,fto),e(hp,mto),e(F,gto),e(F,pp),e(pp,OJ),e(OJ,hto),e(pp,pto),e(pp,rR),e(rR,_to),e(pp,uto),e(F,bto),e(F,_p),e(_p,XJ),e(XJ,vto),e(_p,Tto),e(_p,tR),e(tR,Fto),e(_p,Cto),e(F,Mto),e(F,up),e(up,zJ),e(zJ,Eto),e(up,yto),e(up,aR),e(aR,wto),e(up,Ato),e(F,Lto),e(F,bp),e(bp,VJ),e(VJ,Bto),e(bp,kto),e(bp,nR),e(nR,xto),e(bp,Rto),e(F,Sto),e(F,vp),e(vp,WJ),e(WJ,Pto),e(vp,$to),e(vp,sR),e(sR,Ito),e(vp,jto),e(F,Nto),e(F,Tp),e(Tp,QJ),e(QJ,Dto),e(Tp,qto),e(Tp,lR),e(lR,Gto),e(Tp,Oto),e(F,Xto),e(F,Fp),e(Fp,HJ),e(HJ,zto),e(Fp,Vto),e(Fp,iR),e(iR,Wto),e(Fp,Qto),e(F,Hto),e(F,Cp),e(Cp,UJ),e(UJ,Uto),e(Cp,Jto),e(Cp,dR),e(dR,Yto),e(Cp,Kto),e(F,Zto),e(F,Mp),e(Mp,JJ),e(JJ,eao),e(Mp,oao),e(Mp,cR),e(cR,rao),e(Mp,tao),e(F,aao),e(F,Ep),e(Ep,YJ),e(YJ,nao),e(Ep,sao),e(Ep,fR),e(fR,lao),e(Ep,iao),e(F,dao),e(F,yp),e(yp,KJ),e(KJ,cao),e(yp,fao),e(yp,mR),e(mR,mao),e(yp,gao),e(F,hao),e(F,wp),e(wp,ZJ),e(ZJ,pao),e(wp,_ao),e(wp,gR),e(gR,uao),e(wp,bao),e(F,vao),e(F,Ap),e(Ap,eY),e(eY,Tao),e(Ap,Fao),e(Ap,hR),e(hR,Cao),e(Ap,Mao),e(F,Eao),e(F,Lp),e(Lp,oY),e(oY,yao),e(Lp,wao),e(Lp,pR),e(pR,Aao),e(Lp,Lao),e(F,Bao),e(F,Bp),e(Bp,rY),e(rY,kao),e(Bp,xao),e(Bp,_R),e(_R,Rao),e(Bp,Sao),e(F,Pao),e(F,kp),e(kp,tY),e(tY,$ao),e(kp,Iao),e(kp,uR),e(uR,jao),e(kp,Nao),e(F,Dao),e(F,xp),e(xp,aY),e(aY,qao),e(xp,Gao),e(xp,bR),e(bR,Oao),e(xp,Xao),e(F,zao),e(F,Rp),e(Rp,nY),e(nY,Vao),e(Rp,Wao),e(Rp,vR),e(vR,Qao),e(Rp,Hao),e(F,Uao),e(F,Sp),e(Sp,sY),e(sY,Jao),e(Sp,Yao),e(Sp,TR),e(TR,Kao),e(Sp,Zao),e(F,eno),e(F,Pp),e(Pp,lY),e(lY,ono),e(Pp,rno),e(Pp,FR),e(FR,tno),e(Pp,ano),e(F,nno),e(F,$p),e($p,iY),e(iY,sno),e($p,lno),e($p,CR),e(CR,ino),e($p,dno),e(F,cno),e(F,Ip),e(Ip,dY),e(dY,fno),e(Ip,mno),e(Ip,MR),e(MR,gno),e(Ip,hno),e(F,pno),e(F,jp),e(jp,cY),e(cY,_no),e(jp,uno),e(jp,ER),e(ER,bno),e(jp,vno),e(F,Tno),e(F,Np),e(Np,fY),e(fY,Fno),e(Np,Cno),e(Np,yR),e(yR,Mno),e(Np,Eno),e(F,yno),e(F,Dp),e(Dp,mY),e(mY,wno),e(Dp,Ano),e(Dp,wR),e(wR,Lno),e(Dp,Bno),e(F,kno),e(F,qp),e(qp,gY),e(gY,xno),e(qp,Rno),e(qp,AR),e(AR,Sno),e(qp,Pno),e(F,$no),e(F,Gp),e(Gp,hY),e(hY,Ino),e(Gp,jno),e(Gp,LR),e(LR,Nno),e(Gp,Dno),e(F,qno),e(F,Op),e(Op,pY),e(pY,Gno),e(Op,Ono),e(Op,BR),e(BR,Xno),e(Op,zno),e(F,Vno),e(F,Xp),e(Xp,_Y),e(_Y,Wno),e(Xp,Qno),e(Xp,kR),e(kR,Hno),e(Xp,Uno),e(F,Jno),e(F,zp),e(zp,uY),e(uY,Yno),e(zp,Kno),e(zp,xR),e(xR,Zno),e(zp,eso),e(F,oso),e(F,Vp),e(Vp,bY),e(bY,rso),e(Vp,tso),e(Vp,RR),e(RR,aso),e(Vp,nso),e(F,sso),e(F,Wp),e(Wp,vY),e(vY,lso),e(Wp,iso),e(Wp,SR),e(SR,dso),e(Wp,cso),e(F,fso),e(F,Qp),e(Qp,TY),e(TY,mso),e(Qp,gso),e(Qp,PR),e(PR,hso),e(Qp,pso),e(ke,_so),e(ke,Hp),e(Hp,uso),e(Hp,FY),e(FY,bso),e(Hp,vso),e(Hp,CY),e(CY,Tso),e(ke,Fso),e(ke,MY),e(MY,Cso),e(ke,Mso),g($4,ke,null),b(d,H0e,u),b(d,Xi,u),e(Xi,Up),e(Up,EY),g(I4,EY,null),e(Xi,Eso),e(Xi,yY),e(yY,yso),b(d,U0e,u),b(d,Wo,u),g(j4,Wo,null),e(Wo,wso),e(Wo,zi),e(zi,Aso),e(zi,wY),e(wY,Lso),e(zi,Bso),e(zi,AY),e(AY,kso),e(zi,xso),e(Wo,Rso),e(Wo,N4),e(N4,Sso),e(N4,LY),e(LY,Pso),e(N4,$so),e(Wo,Iso),e(Wo,Dr),g(D4,Dr,null),e(Dr,jso),e(Dr,BY),e(BY,Nso),e(Dr,Dso),e(Dr,Vi),e(Vi,qso),e(Vi,kY),e(kY,Gso),e(Vi,Oso),e(Vi,xY),e(xY,Xso),e(Vi,zso),e(Dr,Vso),e(Dr,RY),e(RY,Wso),e(Dr,Qso),g(q4,Dr,null),e(Wo,Hso),e(Wo,xe),g(G4,xe,null),e(xe,Uso),e(xe,SY),e(SY,Jso),e(xe,Yso),e(xe,qa),e(qa,Kso),e(qa,PY),e(PY,Zso),e(qa,elo),e(qa,$Y),e($Y,olo),e(qa,rlo),e(qa,IY),e(IY,tlo),e(qa,alo),e(xe,nlo),e(xe,x),e(x,Jp),e(Jp,jY),e(jY,slo),e(Jp,llo),e(Jp,$R),e($R,ilo),e(Jp,dlo),e(x,clo),e(x,Yp),e(Yp,NY),e(NY,flo),e(Yp,mlo),e(Yp,IR),e(IR,glo),e(Yp,hlo),e(x,plo),e(x,Kp),e(Kp,DY),e(DY,_lo),e(Kp,ulo),e(Kp,jR),e(jR,blo),e(Kp,vlo),e(x,Tlo),e(x,Zp),e(Zp,qY),e(qY,Flo),e(Zp,Clo),e(Zp,NR),e(NR,Mlo),e(Zp,Elo),e(x,ylo),e(x,e_),e(e_,GY),e(GY,wlo),e(e_,Alo),e(e_,DR),e(DR,Llo),e(e_,Blo),e(x,klo),e(x,o_),e(o_,OY),e(OY,xlo),e(o_,Rlo),e(o_,qR),e(qR,Slo),e(o_,Plo),e(x,$lo),e(x,r_),e(r_,XY),e(XY,Ilo),e(r_,jlo),e(r_,GR),e(GR,Nlo),e(r_,Dlo),e(x,qlo),e(x,t_),e(t_,zY),e(zY,Glo),e(t_,Olo),e(t_,OR),e(OR,Xlo),e(t_,zlo),e(x,Vlo),e(x,a_),e(a_,VY),e(VY,Wlo),e(a_,Qlo),e(a_,XR),e(XR,Hlo),e(a_,Ulo),e(x,Jlo),e(x,n_),e(n_,WY),e(WY,Ylo),e(n_,Klo),e(n_,zR),e(zR,Zlo),e(n_,eio),e(x,oio),e(x,s_),e(s_,QY),e(QY,rio),e(s_,tio),e(s_,VR),e(VR,aio),e(s_,nio),e(x,sio),e(x,l_),e(l_,HY),e(HY,lio),e(l_,iio),e(l_,WR),e(WR,dio),e(l_,cio),e(x,fio),e(x,i_),e(i_,UY),e(UY,mio),e(i_,gio),e(i_,QR),e(QR,hio),e(i_,pio),e(x,_io),e(x,d_),e(d_,JY),e(JY,uio),e(d_,bio),e(d_,HR),e(HR,vio),e(d_,Tio),e(x,Fio),e(x,c_),e(c_,YY),e(YY,Cio),e(c_,Mio),e(c_,UR),e(UR,Eio),e(c_,yio),e(x,wio),e(x,f_),e(f_,KY),e(KY,Aio),e(f_,Lio),e(f_,JR),e(JR,Bio),e(f_,kio),e(x,xio),e(x,m_),e(m_,ZY),e(ZY,Rio),e(m_,Sio),e(m_,YR),e(YR,Pio),e(m_,$io),e(x,Iio),e(x,g_),e(g_,eK),e(eK,jio),e(g_,Nio),e(g_,KR),e(KR,Dio),e(g_,qio),e(x,Gio),e(x,h_),e(h_,oK),e(oK,Oio),e(h_,Xio),e(h_,ZR),e(ZR,zio),e(h_,Vio),e(x,Wio),e(x,p_),e(p_,rK),e(rK,Qio),e(p_,Hio),e(p_,eS),e(eS,Uio),e(p_,Jio),e(x,Yio),e(x,__),e(__,tK),e(tK,Kio),e(__,Zio),e(__,oS),e(oS,edo),e(__,odo),e(x,rdo),e(x,u_),e(u_,aK),e(aK,tdo),e(u_,ado),e(u_,rS),e(rS,ndo),e(u_,sdo),e(x,ldo),e(x,b_),e(b_,nK),e(nK,ido),e(b_,ddo),e(b_,tS),e(tS,cdo),e(b_,fdo),e(x,mdo),e(x,v_),e(v_,sK),e(sK,gdo),e(v_,hdo),e(v_,aS),e(aS,pdo),e(v_,_do),e(x,udo),e(x,T_),e(T_,lK),e(lK,bdo),e(T_,vdo),e(T_,nS),e(nS,Tdo),e(T_,Fdo),e(x,Cdo),e(x,F_),e(F_,iK),e(iK,Mdo),e(F_,Edo),e(F_,sS),e(sS,ydo),e(F_,wdo),e(x,Ado),e(x,C_),e(C_,dK),e(dK,Ldo),e(C_,Bdo),e(C_,lS),e(lS,kdo),e(C_,xdo),e(x,Rdo),e(x,M_),e(M_,cK),e(cK,Sdo),e(M_,Pdo),e(M_,iS),e(iS,$do),e(M_,Ido),e(x,jdo),e(x,E_),e(E_,fK),e(fK,Ndo),e(E_,Ddo),e(E_,dS),e(dS,qdo),e(E_,Gdo),e(x,Odo),e(x,y_),e(y_,mK),e(mK,Xdo),e(y_,zdo),e(y_,cS),e(cS,Vdo),e(y_,Wdo),e(x,Qdo),e(x,w_),e(w_,gK),e(gK,Hdo),e(w_,Udo),e(w_,fS),e(fS,Jdo),e(w_,Ydo),e(x,Kdo),e(x,A_),e(A_,hK),e(hK,Zdo),e(A_,eco),e(A_,mS),e(mS,oco),e(A_,rco),e(x,tco),e(x,L_),e(L_,pK),e(pK,aco),e(L_,nco),e(L_,gS),e(gS,sco),e(L_,lco),e(x,ico),e(x,B_),e(B_,_K),e(_K,dco),e(B_,cco),e(B_,hS),e(hS,fco),e(B_,mco),e(x,gco),e(x,k_),e(k_,uK),e(uK,hco),e(k_,pco),e(k_,pS),e(pS,_co),e(k_,uco),e(x,bco),e(x,x_),e(x_,bK),e(bK,vco),e(x_,Tco),e(x_,_S),e(_S,Fco),e(x_,Cco),e(x,Mco),e(x,R_),e(R_,vK),e(vK,Eco),e(R_,yco),e(R_,uS),e(uS,wco),e(R_,Aco),e(x,Lco),e(x,S_),e(S_,TK),e(TK,Bco),e(S_,kco),e(S_,bS),e(bS,xco),e(S_,Rco),e(xe,Sco),e(xe,P_),e(P_,Pco),e(P_,FK),e(FK,$co),e(P_,Ico),e(P_,CK),e(CK,jco),e(xe,Nco),e(xe,MK),e(MK,Dco),e(xe,qco),g(O4,xe,null),b(d,J0e,u),b(d,Wi,u),e(Wi,$_),e($_,EK),g(X4,EK,null),e(Wi,Gco),e(Wi,yK),e(yK,Oco),b(d,Y0e,u),b(d,Qo,u),g(z4,Qo,null),e(Qo,Xco),e(Qo,Qi),e(Qi,zco),e(Qi,wK),e(wK,Vco),e(Qi,Wco),e(Qi,AK),e(AK,Qco),e(Qi,Hco),e(Qo,Uco),e(Qo,V4),e(V4,Jco),e(V4,LK),e(LK,Yco),e(V4,Kco),e(Qo,Zco),e(Qo,qr),g(W4,qr,null),e(qr,efo),e(qr,BK),e(BK,ofo),e(qr,rfo),e(qr,Hi),e(Hi,tfo),e(Hi,kK),e(kK,afo),e(Hi,nfo),e(Hi,xK),e(xK,sfo),e(Hi,lfo),e(qr,ifo),e(qr,RK),e(RK,dfo),e(qr,cfo),g(Q4,qr,null),e(Qo,ffo),e(Qo,Re),g(H4,Re,null),e(Re,mfo),e(Re,SK),e(SK,gfo),e(Re,hfo),e(Re,Ga),e(Ga,pfo),e(Ga,PK),e(PK,_fo),e(Ga,ufo),e(Ga,$K),e($K,bfo),e(Ga,vfo),e(Ga,IK),e(IK,Tfo),e(Ga,Ffo),e(Re,Cfo),e(Re,I),e(I,I_),e(I_,jK),e(jK,Mfo),e(I_,Efo),e(I_,vS),e(vS,yfo),e(I_,wfo),e(I,Afo),e(I,j_),e(j_,NK),e(NK,Lfo),e(j_,Bfo),e(j_,TS),e(TS,kfo),e(j_,xfo),e(I,Rfo),e(I,N_),e(N_,DK),e(DK,Sfo),e(N_,Pfo),e(N_,FS),e(FS,$fo),e(N_,Ifo),e(I,jfo),e(I,D_),e(D_,qK),e(qK,Nfo),e(D_,Dfo),e(D_,CS),e(CS,qfo),e(D_,Gfo),e(I,Ofo),e(I,q_),e(q_,GK),e(GK,Xfo),e(q_,zfo),e(q_,MS),e(MS,Vfo),e(q_,Wfo),e(I,Qfo),e(I,G_),e(G_,OK),e(OK,Hfo),e(G_,Ufo),e(G_,ES),e(ES,Jfo),e(G_,Yfo),e(I,Kfo),e(I,O_),e(O_,XK),e(XK,Zfo),e(O_,emo),e(O_,yS),e(yS,omo),e(O_,rmo),e(I,tmo),e(I,X_),e(X_,zK),e(zK,amo),e(X_,nmo),e(X_,wS),e(wS,smo),e(X_,lmo),e(I,imo),e(I,z_),e(z_,VK),e(VK,dmo),e(z_,cmo),e(z_,AS),e(AS,fmo),e(z_,mmo),e(I,gmo),e(I,V_),e(V_,WK),e(WK,hmo),e(V_,pmo),e(V_,LS),e(LS,_mo),e(V_,umo),e(I,bmo),e(I,W_),e(W_,QK),e(QK,vmo),e(W_,Tmo),e(W_,BS),e(BS,Fmo),e(W_,Cmo),e(I,Mmo),e(I,Q_),e(Q_,HK),e(HK,Emo),e(Q_,ymo),e(Q_,kS),e(kS,wmo),e(Q_,Amo),e(I,Lmo),e(I,H_),e(H_,UK),e(UK,Bmo),e(H_,kmo),e(H_,xS),e(xS,xmo),e(H_,Rmo),e(I,Smo),e(I,U_),e(U_,JK),e(JK,Pmo),e(U_,$mo),e(U_,RS),e(RS,Imo),e(U_,jmo),e(I,Nmo),e(I,J_),e(J_,YK),e(YK,Dmo),e(J_,qmo),e(J_,SS),e(SS,Gmo),e(J_,Omo),e(I,Xmo),e(I,Y_),e(Y_,KK),e(KK,zmo),e(Y_,Vmo),e(Y_,PS),e(PS,Wmo),e(Y_,Qmo),e(I,Hmo),e(I,K_),e(K_,ZK),e(ZK,Umo),e(K_,Jmo),e(K_,$S),e($S,Ymo),e(K_,Kmo),e(I,Zmo),e(I,Z_),e(Z_,eZ),e(eZ,ego),e(Z_,ogo),e(Z_,IS),e(IS,rgo),e(Z_,tgo),e(I,ago),e(I,eu),e(eu,oZ),e(oZ,ngo),e(eu,sgo),e(eu,jS),e(jS,lgo),e(eu,igo),e(I,dgo),e(I,ou),e(ou,rZ),e(rZ,cgo),e(ou,fgo),e(ou,NS),e(NS,mgo),e(ou,ggo),e(I,hgo),e(I,ru),e(ru,tZ),e(tZ,pgo),e(ru,_go),e(ru,DS),e(DS,ugo),e(ru,bgo),e(I,vgo),e(I,tu),e(tu,aZ),e(aZ,Tgo),e(tu,Fgo),e(tu,qS),e(qS,Cgo),e(tu,Mgo),e(I,Ego),e(I,au),e(au,nZ),e(nZ,ygo),e(au,wgo),e(au,GS),e(GS,Ago),e(au,Lgo),e(I,Bgo),e(I,nu),e(nu,sZ),e(sZ,kgo),e(nu,xgo),e(nu,OS),e(OS,Rgo),e(nu,Sgo),e(I,Pgo),e(I,su),e(su,lZ),e(lZ,$go),e(su,Igo),e(su,XS),e(XS,jgo),e(su,Ngo),e(I,Dgo),e(I,lu),e(lu,iZ),e(iZ,qgo),e(lu,Ggo),e(lu,zS),e(zS,Ogo),e(lu,Xgo),e(I,zgo),e(I,iu),e(iu,dZ),e(dZ,Vgo),e(iu,Wgo),e(iu,VS),e(VS,Qgo),e(iu,Hgo),e(I,Ugo),e(I,du),e(du,cZ),e(cZ,Jgo),e(du,Ygo),e(du,WS),e(WS,Kgo),e(du,Zgo),e(I,eho),e(I,cu),e(cu,fZ),e(fZ,oho),e(cu,rho),e(cu,QS),e(QS,tho),e(cu,aho),e(I,nho),e(I,fu),e(fu,mZ),e(mZ,sho),e(fu,lho),e(fu,HS),e(HS,iho),e(fu,dho),e(I,cho),e(I,mu),e(mu,gZ),e(gZ,fho),e(mu,mho),e(mu,US),e(US,gho),e(mu,hho),e(I,pho),e(I,gu),e(gu,hZ),e(hZ,_ho),e(gu,uho),e(gu,JS),e(JS,bho),e(gu,vho),e(I,Tho),e(I,hu),e(hu,pZ),e(pZ,Fho),e(hu,Cho),e(hu,YS),e(YS,Mho),e(hu,Eho),e(Re,yho),e(Re,pu),e(pu,who),e(pu,_Z),e(_Z,Aho),e(pu,Lho),e(pu,uZ),e(uZ,Bho),e(Re,kho),e(Re,bZ),e(bZ,xho),e(Re,Rho),g(U4,Re,null),b(d,K0e,u),b(d,Ui,u),e(Ui,_u),e(_u,vZ),g(J4,vZ,null),e(Ui,Sho),e(Ui,TZ),e(TZ,Pho),b(d,Z0e,u),b(d,Ho,u),g(Y4,Ho,null),e(Ho,$ho),e(Ho,Ji),e(Ji,Iho),e(Ji,FZ),e(FZ,jho),e(Ji,Nho),e(Ji,CZ),e(CZ,Dho),e(Ji,qho),e(Ho,Gho),e(Ho,K4),e(K4,Oho),e(K4,MZ),e(MZ,Xho),e(K4,zho),e(Ho,Vho),e(Ho,Gr),g(Z4,Gr,null),e(Gr,Who),e(Gr,EZ),e(EZ,Qho),e(Gr,Hho),e(Gr,Yi),e(Yi,Uho),e(Yi,yZ),e(yZ,Jho),e(Yi,Yho),e(Yi,wZ),e(wZ,Kho),e(Yi,Zho),e(Gr,epo),e(Gr,AZ),e(AZ,opo),e(Gr,rpo),g(eM,Gr,null),e(Ho,tpo),e(Ho,Se),g(oM,Se,null),e(Se,apo),e(Se,LZ),e(LZ,npo),e(Se,spo),e(Se,Oa),e(Oa,lpo),e(Oa,BZ),e(BZ,ipo),e(Oa,dpo),e(Oa,kZ),e(kZ,cpo),e(Oa,fpo),e(Oa,xZ),e(xZ,mpo),e(Oa,gpo),e(Se,hpo),e(Se,$),e($,uu),e(uu,RZ),e(RZ,ppo),e(uu,_po),e(uu,KS),e(KS,upo),e(uu,bpo),e($,vpo),e($,bu),e(bu,SZ),e(SZ,Tpo),e(bu,Fpo),e(bu,ZS),e(ZS,Cpo),e(bu,Mpo),e($,Epo),e($,vu),e(vu,PZ),e(PZ,ypo),e(vu,wpo),e(vu,eP),e(eP,Apo),e(vu,Lpo),e($,Bpo),e($,Tu),e(Tu,$Z),e($Z,kpo),e(Tu,xpo),e(Tu,oP),e(oP,Rpo),e(Tu,Spo),e($,Ppo),e($,Fu),e(Fu,IZ),e(IZ,$po),e(Fu,Ipo),e(Fu,rP),e(rP,jpo),e(Fu,Npo),e($,Dpo),e($,Cu),e(Cu,jZ),e(jZ,qpo),e(Cu,Gpo),e(Cu,tP),e(tP,Opo),e(Cu,Xpo),e($,zpo),e($,Mu),e(Mu,NZ),e(NZ,Vpo),e(Mu,Wpo),e(Mu,aP),e(aP,Qpo),e(Mu,Hpo),e($,Upo),e($,Eu),e(Eu,DZ),e(DZ,Jpo),e(Eu,Ypo),e(Eu,nP),e(nP,Kpo),e(Eu,Zpo),e($,e_o),e($,yu),e(yu,qZ),e(qZ,o_o),e(yu,r_o),e(yu,sP),e(sP,t_o),e(yu,a_o),e($,n_o),e($,wu),e(wu,GZ),e(GZ,s_o),e(wu,l_o),e(wu,lP),e(lP,i_o),e(wu,d_o),e($,c_o),e($,Au),e(Au,OZ),e(OZ,f_o),e(Au,m_o),e(Au,iP),e(iP,g_o),e(Au,h_o),e($,p_o),e($,Lu),e(Lu,XZ),e(XZ,__o),e(Lu,u_o),e(Lu,dP),e(dP,b_o),e(Lu,v_o),e($,T_o),e($,Bu),e(Bu,zZ),e(zZ,F_o),e(Bu,C_o),e(Bu,cP),e(cP,M_o),e(Bu,E_o),e($,y_o),e($,ku),e(ku,VZ),e(VZ,w_o),e(ku,A_o),e(ku,fP),e(fP,L_o),e(ku,B_o),e($,k_o),e($,xu),e(xu,WZ),e(WZ,x_o),e(xu,R_o),e(xu,mP),e(mP,S_o),e(xu,P_o),e($,$_o),e($,Ru),e(Ru,QZ),e(QZ,I_o),e(Ru,j_o),e(Ru,gP),e(gP,N_o),e(Ru,D_o),e($,q_o),e($,Su),e(Su,HZ),e(HZ,G_o),e(Su,O_o),e(Su,hP),e(hP,X_o),e(Su,z_o),e($,V_o),e($,Pu),e(Pu,UZ),e(UZ,W_o),e(Pu,Q_o),e(Pu,pP),e(pP,H_o),e(Pu,U_o),e($,J_o),e($,$u),e($u,JZ),e(JZ,Y_o),e($u,K_o),e($u,_P),e(_P,Z_o),e($u,euo),e($,ouo),e($,Iu),e(Iu,YZ),e(YZ,ruo),e(Iu,tuo),e(Iu,uP),e(uP,auo),e(Iu,nuo),e($,suo),e($,ju),e(ju,KZ),e(KZ,luo),e(ju,iuo),e(ju,bP),e(bP,duo),e(ju,cuo),e($,fuo),e($,Nu),e(Nu,ZZ),e(ZZ,muo),e(Nu,guo),e(Nu,vP),e(vP,huo),e(Nu,puo),e($,_uo),e($,Du),e(Du,eee),e(eee,uuo),e(Du,buo),e(Du,TP),e(TP,vuo),e(Du,Tuo),e($,Fuo),e($,qu),e(qu,oee),e(oee,Cuo),e(qu,Muo),e(qu,FP),e(FP,Euo),e(qu,yuo),e($,wuo),e($,Gu),e(Gu,ree),e(ree,Auo),e(Gu,Luo),e(Gu,CP),e(CP,Buo),e(Gu,kuo),e($,xuo),e($,Ou),e(Ou,tee),e(tee,Ruo),e(Ou,Suo),e(Ou,MP),e(MP,Puo),e(Ou,$uo),e($,Iuo),e($,Xu),e(Xu,aee),e(aee,juo),e(Xu,Nuo),e(Xu,EP),e(EP,Duo),e(Xu,quo),e($,Guo),e($,zu),e(zu,nee),e(nee,Ouo),e(zu,Xuo),e(zu,yP),e(yP,zuo),e(zu,Vuo),e($,Wuo),e($,Vu),e(Vu,see),e(see,Quo),e(Vu,Huo),e(Vu,wP),e(wP,Uuo),e(Vu,Juo),e($,Yuo),e($,Wu),e(Wu,lee),e(lee,Kuo),e(Wu,Zuo),e(Wu,iee),e(iee,e1o),e(Wu,o1o),e($,r1o),e($,Qu),e(Qu,dee),e(dee,t1o),e(Qu,a1o),e(Qu,AP),e(AP,n1o),e(Qu,s1o),e($,l1o),e($,Hu),e(Hu,cee),e(cee,i1o),e(Hu,d1o),e(Hu,LP),e(LP,c1o),e(Hu,f1o),e($,m1o),e($,Uu),e(Uu,fee),e(fee,g1o),e(Uu,h1o),e(Uu,BP),e(BP,p1o),e(Uu,_1o),e($,u1o),e($,Ju),e(Ju,mee),e(mee,b1o),e(Ju,v1o),e(Ju,kP),e(kP,T1o),e(Ju,F1o),e(Se,C1o),e(Se,Yu),e(Yu,M1o),e(Yu,gee),e(gee,E1o),e(Yu,y1o),e(Yu,hee),e(hee,w1o),e(Se,A1o),e(Se,pee),e(pee,L1o),e(Se,B1o),g(rM,Se,null),b(d,eLe,u),b(d,Ki,u),e(Ki,Ku),e(Ku,_ee),g(tM,_ee,null),e(Ki,k1o),e(Ki,uee),e(uee,x1o),b(d,oLe,u),b(d,Uo,u),g(aM,Uo,null),e(Uo,R1o),e(Uo,Zi),e(Zi,S1o),e(Zi,bee),e(bee,P1o),e(Zi,$1o),e(Zi,vee),e(vee,I1o),e(Zi,j1o),e(Uo,N1o),e(Uo,nM),e(nM,D1o),e(nM,Tee),e(Tee,q1o),e(nM,G1o),e(Uo,O1o),e(Uo,Or),g(sM,Or,null),e(Or,X1o),e(Or,Fee),e(Fee,z1o),e(Or,V1o),e(Or,ed),e(ed,W1o),e(ed,Cee),e(Cee,Q1o),e(ed,H1o),e(ed,Mee),e(Mee,U1o),e(ed,J1o),e(Or,Y1o),e(Or,Eee),e(Eee,K1o),e(Or,Z1o),g(lM,Or,null),e(Uo,ebo),e(Uo,Pe),g(iM,Pe,null),e(Pe,obo),e(Pe,yee),e(yee,rbo),e(Pe,tbo),e(Pe,Xa),e(Xa,abo),e(Xa,wee),e(wee,nbo),e(Xa,sbo),e(Xa,Aee),e(Aee,lbo),e(Xa,ibo),e(Xa,Lee),e(Lee,dbo),e(Xa,cbo),e(Pe,fbo),e(Pe,se),e(se,Zu),e(Zu,Bee),e(Bee,mbo),e(Zu,gbo),e(Zu,xP),e(xP,hbo),e(Zu,pbo),e(se,_bo),e(se,e1),e(e1,kee),e(kee,ubo),e(e1,bbo),e(e1,RP),e(RP,vbo),e(e1,Tbo),e(se,Fbo),e(se,o1),e(o1,xee),e(xee,Cbo),e(o1,Mbo),e(o1,SP),e(SP,Ebo),e(o1,ybo),e(se,wbo),e(se,r1),e(r1,Ree),e(Ree,Abo),e(r1,Lbo),e(r1,PP),e(PP,Bbo),e(r1,kbo),e(se,xbo),e(se,t1),e(t1,See),e(See,Rbo),e(t1,Sbo),e(t1,$P),e($P,Pbo),e(t1,$bo),e(se,Ibo),e(se,a1),e(a1,Pee),e(Pee,jbo),e(a1,Nbo),e(a1,IP),e(IP,Dbo),e(a1,qbo),e(se,Gbo),e(se,n1),e(n1,$ee),e($ee,Obo),e(n1,Xbo),e(n1,jP),e(jP,zbo),e(n1,Vbo),e(se,Wbo),e(se,s1),e(s1,Iee),e(Iee,Qbo),e(s1,Hbo),e(s1,NP),e(NP,Ubo),e(s1,Jbo),e(se,Ybo),e(se,l1),e(l1,jee),e(jee,Kbo),e(l1,Zbo),e(l1,DP),e(DP,e5o),e(l1,o5o),e(se,r5o),e(se,i1),e(i1,Nee),e(Nee,t5o),e(i1,a5o),e(i1,qP),e(qP,n5o),e(i1,s5o),e(se,l5o),e(se,d1),e(d1,Dee),e(Dee,i5o),e(d1,d5o),e(d1,GP),e(GP,c5o),e(d1,f5o),e(se,m5o),e(se,c1),e(c1,qee),e(qee,g5o),e(c1,h5o),e(c1,OP),e(OP,p5o),e(c1,_5o),e(se,u5o),e(se,f1),e(f1,Gee),e(Gee,b5o),e(f1,v5o),e(f1,XP),e(XP,T5o),e(f1,F5o),e(se,C5o),e(se,m1),e(m1,Oee),e(Oee,M5o),e(m1,E5o),e(m1,zP),e(zP,y5o),e(m1,w5o),e(se,A5o),e(se,g1),e(g1,Xee),e(Xee,L5o),e(g1,B5o),e(g1,VP),e(VP,k5o),e(g1,x5o),e(Pe,R5o),e(Pe,h1),e(h1,S5o),e(h1,zee),e(zee,P5o),e(h1,$5o),e(h1,Vee),e(Vee,I5o),e(Pe,j5o),e(Pe,Wee),e(Wee,N5o),e(Pe,D5o),g(dM,Pe,null),b(d,rLe,u),b(d,od,u),e(od,p1),e(p1,Qee),g(cM,Qee,null),e(od,q5o),e(od,Hee),e(Hee,G5o),b(d,tLe,u),b(d,Jo,u),g(fM,Jo,null),e(Jo,O5o),e(Jo,rd),e(rd,X5o),e(rd,Uee),e(Uee,z5o),e(rd,V5o),e(rd,Jee),e(Jee,W5o),e(rd,Q5o),e(Jo,H5o),e(Jo,mM),e(mM,U5o),e(mM,Yee),e(Yee,J5o),e(mM,Y5o),e(Jo,K5o),e(Jo,Xr),g(gM,Xr,null),e(Xr,Z5o),e(Xr,Kee),e(Kee,e2o),e(Xr,o2o),e(Xr,td),e(td,r2o),e(td,Zee),e(Zee,t2o),e(td,a2o),e(td,eoe),e(eoe,n2o),e(td,s2o),e(Xr,l2o),e(Xr,ooe),e(ooe,i2o),e(Xr,d2o),g(hM,Xr,null),e(Jo,c2o),e(Jo,$e),g(pM,$e,null),e($e,f2o),e($e,roe),e(roe,m2o),e($e,g2o),e($e,za),e(za,h2o),e(za,toe),e(toe,p2o),e(za,_2o),e(za,aoe),e(aoe,u2o),e(za,b2o),e(za,noe),e(noe,v2o),e(za,T2o),e($e,F2o),e($e,A),e(A,_1),e(_1,soe),e(soe,C2o),e(_1,M2o),e(_1,WP),e(WP,E2o),e(_1,y2o),e(A,w2o),e(A,u1),e(u1,loe),e(loe,A2o),e(u1,L2o),e(u1,QP),e(QP,B2o),e(u1,k2o),e(A,x2o),e(A,b1),e(b1,ioe),e(ioe,R2o),e(b1,S2o),e(b1,HP),e(HP,P2o),e(b1,$2o),e(A,I2o),e(A,v1),e(v1,doe),e(doe,j2o),e(v1,N2o),e(v1,UP),e(UP,D2o),e(v1,q2o),e(A,G2o),e(A,T1),e(T1,coe),e(coe,O2o),e(T1,X2o),e(T1,JP),e(JP,z2o),e(T1,V2o),e(A,W2o),e(A,F1),e(F1,foe),e(foe,Q2o),e(F1,H2o),e(F1,YP),e(YP,U2o),e(F1,J2o),e(A,Y2o),e(A,C1),e(C1,moe),e(moe,K2o),e(C1,Z2o),e(C1,KP),e(KP,evo),e(C1,ovo),e(A,rvo),e(A,M1),e(M1,goe),e(goe,tvo),e(M1,avo),e(M1,ZP),e(ZP,nvo),e(M1,svo),e(A,lvo),e(A,E1),e(E1,hoe),e(hoe,ivo),e(E1,dvo),e(E1,e$),e(e$,cvo),e(E1,fvo),e(A,mvo),e(A,y1),e(y1,poe),e(poe,gvo),e(y1,hvo),e(y1,o$),e(o$,pvo),e(y1,_vo),e(A,uvo),e(A,w1),e(w1,_oe),e(_oe,bvo),e(w1,vvo),e(w1,r$),e(r$,Tvo),e(w1,Fvo),e(A,Cvo),e(A,A1),e(A1,uoe),e(uoe,Mvo),e(A1,Evo),e(A1,t$),e(t$,yvo),e(A1,wvo),e(A,Avo),e(A,L1),e(L1,boe),e(boe,Lvo),e(L1,Bvo),e(L1,a$),e(a$,kvo),e(L1,xvo),e(A,Rvo),e(A,B1),e(B1,voe),e(voe,Svo),e(B1,Pvo),e(B1,n$),e(n$,$vo),e(B1,Ivo),e(A,jvo),e(A,k1),e(k1,Toe),e(Toe,Nvo),e(k1,Dvo),e(k1,s$),e(s$,qvo),e(k1,Gvo),e(A,Ovo),e(A,x1),e(x1,Foe),e(Foe,Xvo),e(x1,zvo),e(x1,l$),e(l$,Vvo),e(x1,Wvo),e(A,Qvo),e(A,R1),e(R1,Coe),e(Coe,Hvo),e(R1,Uvo),e(R1,i$),e(i$,Jvo),e(R1,Yvo),e(A,Kvo),e(A,S1),e(S1,Moe),e(Moe,Zvo),e(S1,e6o),e(S1,d$),e(d$,o6o),e(S1,r6o),e(A,t6o),e(A,P1),e(P1,Eoe),e(Eoe,a6o),e(P1,n6o),e(P1,c$),e(c$,s6o),e(P1,l6o),e(A,i6o),e(A,$1),e($1,yoe),e(yoe,d6o),e($1,c6o),e($1,f$),e(f$,f6o),e($1,m6o),e(A,g6o),e(A,I1),e(I1,woe),e(woe,h6o),e(I1,p6o),e(I1,m$),e(m$,_6o),e(I1,u6o),e(A,b6o),e(A,j1),e(j1,Aoe),e(Aoe,v6o),e(j1,T6o),e(j1,g$),e(g$,F6o),e(j1,C6o),e(A,M6o),e(A,N1),e(N1,Loe),e(Loe,E6o),e(N1,y6o),e(N1,h$),e(h$,w6o),e(N1,A6o),e(A,L6o),e(A,D1),e(D1,Boe),e(Boe,B6o),e(D1,k6o),e(D1,p$),e(p$,x6o),e(D1,R6o),e(A,S6o),e(A,q1),e(q1,koe),e(koe,P6o),e(q1,$6o),e(q1,_$),e(_$,I6o),e(q1,j6o),e(A,N6o),e(A,G1),e(G1,xoe),e(xoe,D6o),e(G1,q6o),e(G1,u$),e(u$,G6o),e(G1,O6o),e(A,X6o),e(A,O1),e(O1,Roe),e(Roe,z6o),e(O1,V6o),e(O1,b$),e(b$,W6o),e(O1,Q6o),e(A,H6o),e(A,X1),e(X1,Soe),e(Soe,U6o),e(X1,J6o),e(X1,v$),e(v$,Y6o),e(X1,K6o),e(A,Z6o),e(A,z1),e(z1,Poe),e(Poe,eTo),e(z1,oTo),e(z1,T$),e(T$,rTo),e(z1,tTo),e(A,aTo),e(A,V1),e(V1,$oe),e($oe,nTo),e(V1,sTo),e(V1,F$),e(F$,lTo),e(V1,iTo),e(A,dTo),e(A,W1),e(W1,Ioe),e(Ioe,cTo),e(W1,fTo),e(W1,C$),e(C$,mTo),e(W1,gTo),e(A,hTo),e(A,Q1),e(Q1,joe),e(joe,pTo),e(Q1,_To),e(Q1,M$),e(M$,uTo),e(Q1,bTo),e(A,vTo),e(A,H1),e(H1,Noe),e(Noe,TTo),e(H1,FTo),e(H1,E$),e(E$,CTo),e(H1,MTo),e(A,ETo),e(A,U1),e(U1,Doe),e(Doe,yTo),e(U1,wTo),e(U1,y$),e(y$,ATo),e(U1,LTo),e(A,BTo),e(A,J1),e(J1,qoe),e(qoe,kTo),e(J1,xTo),e(J1,w$),e(w$,RTo),e(J1,STo),e(A,PTo),e(A,Y1),e(Y1,Goe),e(Goe,$To),e(Y1,ITo),e(Y1,A$),e(A$,jTo),e(Y1,NTo),e(A,DTo),e(A,K1),e(K1,Ooe),e(Ooe,qTo),e(K1,GTo),e(K1,L$),e(L$,OTo),e(K1,XTo),e(A,zTo),e(A,Z1),e(Z1,Xoe),e(Xoe,VTo),e(Z1,WTo),e(Z1,B$),e(B$,QTo),e(Z1,HTo),e(A,UTo),e(A,eb),e(eb,zoe),e(zoe,JTo),e(eb,YTo),e(eb,k$),e(k$,KTo),e(eb,ZTo),e(A,e7o),e(A,ob),e(ob,Voe),e(Voe,o7o),e(ob,r7o),e(ob,x$),e(x$,t7o),e(ob,a7o),e(A,n7o),e(A,rb),e(rb,Woe),e(Woe,s7o),e(rb,l7o),e(rb,R$),e(R$,i7o),e(rb,d7o),e(A,c7o),e(A,tb),e(tb,Qoe),e(Qoe,f7o),e(tb,m7o),e(tb,S$),e(S$,g7o),e(tb,h7o),e(A,p7o),e(A,ab),e(ab,Hoe),e(Hoe,_7o),e(ab,u7o),e(ab,P$),e(P$,b7o),e(ab,v7o),e(A,T7o),e(A,nb),e(nb,Uoe),e(Uoe,F7o),e(nb,C7o),e(nb,$$),e($$,M7o),e(nb,E7o),e($e,y7o),e($e,sb),e(sb,w7o),e(sb,Joe),e(Joe,A7o),e(sb,L7o),e(sb,Yoe),e(Yoe,B7o),e($e,k7o),e($e,Koe),e(Koe,x7o),e($e,R7o),g(_M,$e,null),b(d,aLe,u),b(d,ad,u),e(ad,lb),e(lb,Zoe),g(uM,Zoe,null),e(ad,S7o),e(ad,ere),e(ere,P7o),b(d,nLe,u),b(d,Yo,u),g(bM,Yo,null),e(Yo,$7o),e(Yo,nd),e(nd,I7o),e(nd,ore),e(ore,j7o),e(nd,N7o),e(nd,rre),e(rre,D7o),e(nd,q7o),e(Yo,G7o),e(Yo,vM),e(vM,O7o),e(vM,tre),e(tre,X7o),e(vM,z7o),e(Yo,V7o),e(Yo,zr),g(TM,zr,null),e(zr,W7o),e(zr,are),e(are,Q7o),e(zr,H7o),e(zr,sd),e(sd,U7o),e(sd,nre),e(nre,J7o),e(sd,Y7o),e(sd,sre),e(sre,K7o),e(sd,Z7o),e(zr,e8o),e(zr,lre),e(lre,o8o),e(zr,r8o),g(FM,zr,null),e(Yo,t8o),e(Yo,Ie),g(CM,Ie,null),e(Ie,a8o),e(Ie,ire),e(ire,n8o),e(Ie,s8o),e(Ie,Va),e(Va,l8o),e(Va,dre),e(dre,i8o),e(Va,d8o),e(Va,cre),e(cre,c8o),e(Va,f8o),e(Va,fre),e(fre,m8o),e(Va,g8o),e(Ie,h8o),e(Ie,G),e(G,ib),e(ib,mre),e(mre,p8o),e(ib,_8o),e(ib,I$),e(I$,u8o),e(ib,b8o),e(G,v8o),e(G,db),e(db,gre),e(gre,T8o),e(db,F8o),e(db,j$),e(j$,C8o),e(db,M8o),e(G,E8o),e(G,cb),e(cb,hre),e(hre,y8o),e(cb,w8o),e(cb,N$),e(N$,A8o),e(cb,L8o),e(G,B8o),e(G,fb),e(fb,pre),e(pre,k8o),e(fb,x8o),e(fb,D$),e(D$,R8o),e(fb,S8o),e(G,P8o),e(G,mb),e(mb,_re),e(_re,$8o),e(mb,I8o),e(mb,q$),e(q$,j8o),e(mb,N8o),e(G,D8o),e(G,gb),e(gb,ure),e(ure,q8o),e(gb,G8o),e(gb,G$),e(G$,O8o),e(gb,X8o),e(G,z8o),e(G,hb),e(hb,bre),e(bre,V8o),e(hb,W8o),e(hb,O$),e(O$,Q8o),e(hb,H8o),e(G,U8o),e(G,pb),e(pb,vre),e(vre,J8o),e(pb,Y8o),e(pb,X$),e(X$,K8o),e(pb,Z8o),e(G,eFo),e(G,_b),e(_b,Tre),e(Tre,oFo),e(_b,rFo),e(_b,z$),e(z$,tFo),e(_b,aFo),e(G,nFo),e(G,ub),e(ub,Fre),e(Fre,sFo),e(ub,lFo),e(ub,V$),e(V$,iFo),e(ub,dFo),e(G,cFo),e(G,bb),e(bb,Cre),e(Cre,fFo),e(bb,mFo),e(bb,W$),e(W$,gFo),e(bb,hFo),e(G,pFo),e(G,vb),e(vb,Mre),e(Mre,_Fo),e(vb,uFo),e(vb,Q$),e(Q$,bFo),e(vb,vFo),e(G,TFo),e(G,Tb),e(Tb,Ere),e(Ere,FFo),e(Tb,CFo),e(Tb,H$),e(H$,MFo),e(Tb,EFo),e(G,yFo),e(G,Fb),e(Fb,yre),e(yre,wFo),e(Fb,AFo),e(Fb,U$),e(U$,LFo),e(Fb,BFo),e(G,kFo),e(G,Cb),e(Cb,wre),e(wre,xFo),e(Cb,RFo),e(Cb,J$),e(J$,SFo),e(Cb,PFo),e(G,$Fo),e(G,Mb),e(Mb,Are),e(Are,IFo),e(Mb,jFo),e(Mb,Y$),e(Y$,NFo),e(Mb,DFo),e(G,qFo),e(G,Eb),e(Eb,Lre),e(Lre,GFo),e(Eb,OFo),e(Eb,K$),e(K$,XFo),e(Eb,zFo),e(G,VFo),e(G,yb),e(yb,Bre),e(Bre,WFo),e(yb,QFo),e(yb,Z$),e(Z$,HFo),e(yb,UFo),e(G,JFo),e(G,wb),e(wb,kre),e(kre,YFo),e(wb,KFo),e(wb,eI),e(eI,ZFo),e(wb,eCo),e(G,oCo),e(G,Ab),e(Ab,xre),e(xre,rCo),e(Ab,tCo),e(Ab,oI),e(oI,aCo),e(Ab,nCo),e(G,sCo),e(G,Lb),e(Lb,Rre),e(Rre,lCo),e(Lb,iCo),e(Lb,rI),e(rI,dCo),e(Lb,cCo),e(G,fCo),e(G,Bb),e(Bb,Sre),e(Sre,mCo),e(Bb,gCo),e(Bb,tI),e(tI,hCo),e(Bb,pCo),e(G,_Co),e(G,kb),e(kb,Pre),e(Pre,uCo),e(kb,bCo),e(kb,aI),e(aI,vCo),e(kb,TCo),e(G,FCo),e(G,xb),e(xb,$re),e($re,CCo),e(xb,MCo),e(xb,nI),e(nI,ECo),e(xb,yCo),e(G,wCo),e(G,Rb),e(Rb,Ire),e(Ire,ACo),e(Rb,LCo),e(Rb,sI),e(sI,BCo),e(Rb,kCo),e(G,xCo),e(G,Sb),e(Sb,jre),e(jre,RCo),e(Sb,SCo),e(Sb,lI),e(lI,PCo),e(Sb,$Co),e(G,ICo),e(G,Pb),e(Pb,Nre),e(Nre,jCo),e(Pb,NCo),e(Pb,iI),e(iI,DCo),e(Pb,qCo),e(Ie,GCo),e(Ie,$b),e($b,OCo),e($b,Dre),e(Dre,XCo),e($b,zCo),e($b,qre),e(qre,VCo),e(Ie,WCo),e(Ie,Gre),e(Gre,QCo),e(Ie,HCo),g(MM,Ie,null),b(d,sLe,u),b(d,ld,u),e(ld,Ib),e(Ib,Ore),g(EM,Ore,null),e(ld,UCo),e(ld,Xre),e(Xre,JCo),b(d,lLe,u),b(d,Ko,u),g(yM,Ko,null),e(Ko,YCo),e(Ko,id),e(id,KCo),e(id,zre),e(zre,ZCo),e(id,e4o),e(id,Vre),e(Vre,o4o),e(id,r4o),e(Ko,t4o),e(Ko,wM),e(wM,a4o),e(wM,Wre),e(Wre,n4o),e(wM,s4o),e(Ko,l4o),e(Ko,Vr),g(AM,Vr,null),e(Vr,i4o),e(Vr,Qre),e(Qre,d4o),e(Vr,c4o),e(Vr,dd),e(dd,f4o),e(dd,Hre),e(Hre,m4o),e(dd,g4o),e(dd,Ure),e(Ure,h4o),e(dd,p4o),e(Vr,_4o),e(Vr,Jre),e(Jre,u4o),e(Vr,b4o),g(LM,Vr,null),e(Ko,v4o),e(Ko,je),g(BM,je,null),e(je,T4o),e(je,Yre),e(Yre,F4o),e(je,C4o),e(je,Wa),e(Wa,M4o),e(Wa,Kre),e(Kre,E4o),e(Wa,y4o),e(Wa,Zre),e(Zre,w4o),e(Wa,A4o),e(Wa,ete),e(ete,L4o),e(Wa,B4o),e(je,k4o),e(je,na),e(na,jb),e(jb,ote),e(ote,x4o),e(jb,R4o),e(jb,dI),e(dI,S4o),e(jb,P4o),e(na,$4o),e(na,Nb),e(Nb,rte),e(rte,I4o),e(Nb,j4o),e(Nb,cI),e(cI,N4o),e(Nb,D4o),e(na,q4o),e(na,Db),e(Db,tte),e(tte,G4o),e(Db,O4o),e(Db,fI),e(fI,X4o),e(Db,z4o),e(na,V4o),e(na,qb),e(qb,ate),e(ate,W4o),e(qb,Q4o),e(qb,mI),e(mI,H4o),e(qb,U4o),e(na,J4o),e(na,Gb),e(Gb,nte),e(nte,Y4o),e(Gb,K4o),e(Gb,gI),e(gI,Z4o),e(Gb,eMo),e(je,oMo),e(je,Ob),e(Ob,rMo),e(Ob,ste),e(ste,tMo),e(Ob,aMo),e(Ob,lte),e(lte,nMo),e(je,sMo),e(je,ite),e(ite,lMo),e(je,iMo),g(kM,je,null),b(d,iLe,u),b(d,cd,u),e(cd,Xb),e(Xb,dte),g(xM,dte,null),e(cd,dMo),e(cd,cte),e(cte,cMo),b(d,dLe,u),b(d,Zo,u),g(RM,Zo,null),e(Zo,fMo),e(Zo,fd),e(fd,mMo),e(fd,fte),e(fte,gMo),e(fd,hMo),e(fd,mte),e(mte,pMo),e(fd,_Mo),e(Zo,uMo),e(Zo,SM),e(SM,bMo),e(SM,gte),e(gte,vMo),e(SM,TMo),e(Zo,FMo),e(Zo,Wr),g(PM,Wr,null),e(Wr,CMo),e(Wr,hte),e(hte,MMo),e(Wr,EMo),e(Wr,md),e(md,yMo),e(md,pte),e(pte,wMo),e(md,AMo),e(md,_te),e(_te,LMo),e(md,BMo),e(Wr,kMo),e(Wr,ute),e(ute,xMo),e(Wr,RMo),g($M,Wr,null),e(Zo,SMo),e(Zo,Ne),g(IM,Ne,null),e(Ne,PMo),e(Ne,bte),e(bte,$Mo),e(Ne,IMo),e(Ne,Qa),e(Qa,jMo),e(Qa,vte),e(vte,NMo),e(Qa,DMo),e(Qa,Tte),e(Tte,qMo),e(Qa,GMo),e(Qa,Fte),e(Fte,OMo),e(Qa,XMo),e(Ne,zMo),e(Ne,N),e(N,zb),e(zb,Cte),e(Cte,VMo),e(zb,WMo),e(zb,hI),e(hI,QMo),e(zb,HMo),e(N,UMo),e(N,Vb),e(Vb,Mte),e(Mte,JMo),e(Vb,YMo),e(Vb,pI),e(pI,KMo),e(Vb,ZMo),e(N,eEo),e(N,Wb),e(Wb,Ete),e(Ete,oEo),e(Wb,rEo),e(Wb,_I),e(_I,tEo),e(Wb,aEo),e(N,nEo),e(N,Qb),e(Qb,yte),e(yte,sEo),e(Qb,lEo),e(Qb,uI),e(uI,iEo),e(Qb,dEo),e(N,cEo),e(N,Hb),e(Hb,wte),e(wte,fEo),e(Hb,mEo),e(Hb,bI),e(bI,gEo),e(Hb,hEo),e(N,pEo),e(N,Ub),e(Ub,Ate),e(Ate,_Eo),e(Ub,uEo),e(Ub,vI),e(vI,bEo),e(Ub,vEo),e(N,TEo),e(N,Jb),e(Jb,Lte),e(Lte,FEo),e(Jb,CEo),e(Jb,TI),e(TI,MEo),e(Jb,EEo),e(N,yEo),e(N,Yb),e(Yb,Bte),e(Bte,wEo),e(Yb,AEo),e(Yb,FI),e(FI,LEo),e(Yb,BEo),e(N,kEo),e(N,Kb),e(Kb,kte),e(kte,xEo),e(Kb,REo),e(Kb,CI),e(CI,SEo),e(Kb,PEo),e(N,$Eo),e(N,Zb),e(Zb,xte),e(xte,IEo),e(Zb,jEo),e(Zb,MI),e(MI,NEo),e(Zb,DEo),e(N,qEo),e(N,e5),e(e5,Rte),e(Rte,GEo),e(e5,OEo),e(e5,EI),e(EI,XEo),e(e5,zEo),e(N,VEo),e(N,o5),e(o5,Ste),e(Ste,WEo),e(o5,QEo),e(o5,yI),e(yI,HEo),e(o5,UEo),e(N,JEo),e(N,r5),e(r5,Pte),e(Pte,YEo),e(r5,KEo),e(r5,wI),e(wI,ZEo),e(r5,e3o),e(N,o3o),e(N,t5),e(t5,$te),e($te,r3o),e(t5,t3o),e(t5,AI),e(AI,a3o),e(t5,n3o),e(N,s3o),e(N,a5),e(a5,Ite),e(Ite,l3o),e(a5,i3o),e(a5,LI),e(LI,d3o),e(a5,c3o),e(N,f3o),e(N,n5),e(n5,jte),e(jte,m3o),e(n5,g3o),e(n5,BI),e(BI,h3o),e(n5,p3o),e(N,_3o),e(N,s5),e(s5,Nte),e(Nte,u3o),e(s5,b3o),e(s5,kI),e(kI,v3o),e(s5,T3o),e(N,F3o),e(N,l5),e(l5,Dte),e(Dte,C3o),e(l5,M3o),e(l5,xI),e(xI,E3o),e(l5,y3o),e(N,w3o),e(N,i5),e(i5,qte),e(qte,A3o),e(i5,L3o),e(i5,RI),e(RI,B3o),e(i5,k3o),e(N,x3o),e(N,d5),e(d5,Gte),e(Gte,R3o),e(d5,S3o),e(d5,SI),e(SI,P3o),e(d5,$3o),e(N,I3o),e(N,c5),e(c5,Ote),e(Ote,j3o),e(c5,N3o),e(c5,PI),e(PI,D3o),e(c5,q3o),e(N,G3o),e(N,f5),e(f5,Xte),e(Xte,O3o),e(f5,X3o),e(f5,$I),e($I,z3o),e(f5,V3o),e(N,W3o),e(N,m5),e(m5,zte),e(zte,Q3o),e(m5,H3o),e(m5,II),e(II,U3o),e(m5,J3o),e(N,Y3o),e(N,g5),e(g5,Vte),e(Vte,K3o),e(g5,Z3o),e(g5,jI),e(jI,eyo),e(g5,oyo),e(N,ryo),e(N,h5),e(h5,Wte),e(Wte,tyo),e(h5,ayo),e(h5,NI),e(NI,nyo),e(h5,syo),e(N,lyo),e(N,p5),e(p5,Qte),e(Qte,iyo),e(p5,dyo),e(p5,DI),e(DI,cyo),e(p5,fyo),e(N,myo),e(N,_5),e(_5,Hte),e(Hte,gyo),e(_5,hyo),e(_5,qI),e(qI,pyo),e(_5,_yo),e(N,uyo),e(N,u5),e(u5,Ute),e(Ute,byo),e(u5,vyo),e(u5,GI),e(GI,Tyo),e(u5,Fyo),e(N,Cyo),e(N,b5),e(b5,Jte),e(Jte,Myo),e(b5,Eyo),e(b5,OI),e(OI,yyo),e(b5,wyo),e(N,Ayo),e(N,v5),e(v5,Yte),e(Yte,Lyo),e(v5,Byo),e(v5,XI),e(XI,kyo),e(v5,xyo),e(N,Ryo),e(N,T5),e(T5,Kte),e(Kte,Syo),e(T5,Pyo),e(T5,zI),e(zI,$yo),e(T5,Iyo),e(N,jyo),e(N,F5),e(F5,Zte),e(Zte,Nyo),e(F5,Dyo),e(F5,VI),e(VI,qyo),e(F5,Gyo),e(Ne,Oyo),e(Ne,C5),e(C5,Xyo),e(C5,eae),e(eae,zyo),e(C5,Vyo),e(C5,oae),e(oae,Wyo),e(Ne,Qyo),e(Ne,rae),e(rae,Hyo),e(Ne,Uyo),g(jM,Ne,null),b(d,cLe,u),b(d,gd,u),e(gd,M5),e(M5,tae),g(NM,tae,null),e(gd,Jyo),e(gd,aae),e(aae,Yyo),b(d,fLe,u),b(d,er,u),g(DM,er,null),e(er,Kyo),e(er,hd),e(hd,Zyo),e(hd,nae),e(nae,ewo),e(hd,owo),e(hd,sae),e(sae,rwo),e(hd,two),e(er,awo),e(er,qM),e(qM,nwo),e(qM,lae),e(lae,swo),e(qM,lwo),e(er,iwo),e(er,Qr),g(GM,Qr,null),e(Qr,dwo),e(Qr,iae),e(iae,cwo),e(Qr,fwo),e(Qr,pd),e(pd,mwo),e(pd,dae),e(dae,gwo),e(pd,hwo),e(pd,cae),e(cae,pwo),e(pd,_wo),e(Qr,uwo),e(Qr,fae),e(fae,bwo),e(Qr,vwo),g(OM,Qr,null),e(er,Two),e(er,De),g(XM,De,null),e(De,Fwo),e(De,mae),e(mae,Cwo),e(De,Mwo),e(De,Ha),e(Ha,Ewo),e(Ha,gae),e(gae,ywo),e(Ha,wwo),e(Ha,hae),e(hae,Awo),e(Ha,Lwo),e(Ha,pae),e(pae,Bwo),e(Ha,kwo),e(De,xwo),e(De,R),e(R,E5),e(E5,_ae),e(_ae,Rwo),e(E5,Swo),e(E5,WI),e(WI,Pwo),e(E5,$wo),e(R,Iwo),e(R,y5),e(y5,uae),e(uae,jwo),e(y5,Nwo),e(y5,QI),e(QI,Dwo),e(y5,qwo),e(R,Gwo),e(R,w5),e(w5,bae),e(bae,Owo),e(w5,Xwo),e(w5,HI),e(HI,zwo),e(w5,Vwo),e(R,Wwo),e(R,A5),e(A5,vae),e(vae,Qwo),e(A5,Hwo),e(A5,UI),e(UI,Uwo),e(A5,Jwo),e(R,Ywo),e(R,L5),e(L5,Tae),e(Tae,Kwo),e(L5,Zwo),e(L5,JI),e(JI,eAo),e(L5,oAo),e(R,rAo),e(R,B5),e(B5,Fae),e(Fae,tAo),e(B5,aAo),e(B5,YI),e(YI,nAo),e(B5,sAo),e(R,lAo),e(R,k5),e(k5,Cae),e(Cae,iAo),e(k5,dAo),e(k5,KI),e(KI,cAo),e(k5,fAo),e(R,mAo),e(R,x5),e(x5,Mae),e(Mae,gAo),e(x5,hAo),e(x5,ZI),e(ZI,pAo),e(x5,_Ao),e(R,uAo),e(R,R5),e(R5,Eae),e(Eae,bAo),e(R5,vAo),e(R5,ej),e(ej,TAo),e(R5,FAo),e(R,CAo),e(R,S5),e(S5,yae),e(yae,MAo),e(S5,EAo),e(S5,oj),e(oj,yAo),e(S5,wAo),e(R,AAo),e(R,P5),e(P5,wae),e(wae,LAo),e(P5,BAo),e(P5,rj),e(rj,kAo),e(P5,xAo),e(R,RAo),e(R,$5),e($5,Aae),e(Aae,SAo),e($5,PAo),e($5,tj),e(tj,$Ao),e($5,IAo),e(R,jAo),e(R,I5),e(I5,Lae),e(Lae,NAo),e(I5,DAo),e(I5,aj),e(aj,qAo),e(I5,GAo),e(R,OAo),e(R,j5),e(j5,Bae),e(Bae,XAo),e(j5,zAo),e(j5,nj),e(nj,VAo),e(j5,WAo),e(R,QAo),e(R,N5),e(N5,kae),e(kae,HAo),e(N5,UAo),e(N5,sj),e(sj,JAo),e(N5,YAo),e(R,KAo),e(R,D5),e(D5,xae),e(xae,ZAo),e(D5,e0o),e(D5,lj),e(lj,o0o),e(D5,r0o),e(R,t0o),e(R,q5),e(q5,Rae),e(Rae,a0o),e(q5,n0o),e(q5,ij),e(ij,s0o),e(q5,l0o),e(R,i0o),e(R,G5),e(G5,Sae),e(Sae,d0o),e(G5,c0o),e(G5,dj),e(dj,f0o),e(G5,m0o),e(R,g0o),e(R,O5),e(O5,Pae),e(Pae,h0o),e(O5,p0o),e(O5,cj),e(cj,_0o),e(O5,u0o),e(R,b0o),e(R,X5),e(X5,$ae),e($ae,v0o),e(X5,T0o),e(X5,fj),e(fj,F0o),e(X5,C0o),e(R,M0o),e(R,z5),e(z5,Iae),e(Iae,E0o),e(z5,y0o),e(z5,mj),e(mj,w0o),e(z5,A0o),e(R,L0o),e(R,V5),e(V5,jae),e(jae,B0o),e(V5,k0o),e(V5,gj),e(gj,x0o),e(V5,R0o),e(R,S0o),e(R,W5),e(W5,Nae),e(Nae,P0o),e(W5,$0o),e(W5,hj),e(hj,I0o),e(W5,j0o),e(R,N0o),e(R,Q5),e(Q5,Dae),e(Dae,D0o),e(Q5,q0o),e(Q5,pj),e(pj,G0o),e(Q5,O0o),e(R,X0o),e(R,H5),e(H5,qae),e(qae,z0o),e(H5,V0o),e(H5,_j),e(_j,W0o),e(H5,Q0o),e(R,H0o),e(R,U5),e(U5,Gae),e(Gae,U0o),e(U5,J0o),e(U5,uj),e(uj,Y0o),e(U5,K0o),e(R,Z0o),e(R,J5),e(J5,Oae),e(Oae,eLo),e(J5,oLo),e(J5,bj),e(bj,rLo),e(J5,tLo),e(R,aLo),e(R,Y5),e(Y5,Xae),e(Xae,nLo),e(Y5,sLo),e(Y5,vj),e(vj,lLo),e(Y5,iLo),e(R,dLo),e(R,K5),e(K5,zae),e(zae,cLo),e(K5,fLo),e(K5,Tj),e(Tj,mLo),e(K5,gLo),e(R,hLo),e(R,Z5),e(Z5,Vae),e(Vae,pLo),e(Z5,_Lo),e(Z5,Fj),e(Fj,uLo),e(Z5,bLo),e(R,vLo),e(R,e2),e(e2,Wae),e(Wae,TLo),e(e2,FLo),e(e2,Cj),e(Cj,CLo),e(e2,MLo),e(R,ELo),e(R,o2),e(o2,Qae),e(Qae,yLo),e(o2,wLo),e(o2,Mj),e(Mj,ALo),e(o2,LLo),e(R,BLo),e(R,r2),e(r2,Hae),e(Hae,kLo),e(r2,xLo),e(r2,Ej),e(Ej,RLo),e(r2,SLo),e(R,PLo),e(R,t2),e(t2,Uae),e(Uae,$Lo),e(t2,ILo),e(t2,yj),e(yj,jLo),e(t2,NLo),e(R,DLo),e(R,a2),e(a2,Jae),e(Jae,qLo),e(a2,GLo),e(a2,wj),e(wj,OLo),e(a2,XLo),e(R,zLo),e(R,n2),e(n2,Yae),e(Yae,VLo),e(n2,WLo),e(n2,Aj),e(Aj,QLo),e(n2,HLo),e(R,ULo),e(R,s2),e(s2,Kae),e(Kae,JLo),e(s2,YLo),e(s2,Lj),e(Lj,KLo),e(s2,ZLo),e(R,e9o),e(R,l2),e(l2,Zae),e(Zae,o9o),e(l2,r9o),e(l2,Bj),e(Bj,t9o),e(l2,a9o),e(De,n9o),e(De,i2),e(i2,s9o),e(i2,ene),e(ene,l9o),e(i2,i9o),e(i2,one),e(one,d9o),e(De,c9o),e(De,rne),e(rne,f9o),e(De,m9o),g(zM,De,null),b(d,mLe,u),b(d,_d,u),e(_d,d2),e(d2,tne),g(VM,tne,null),e(_d,g9o),e(_d,ane),e(ane,h9o),b(d,gLe,u),b(d,or,u),g(WM,or,null),e(or,p9o),e(or,ud),e(ud,_9o),e(ud,nne),e(nne,u9o),e(ud,b9o),e(ud,sne),e(sne,v9o),e(ud,T9o),e(or,F9o),e(or,QM),e(QM,C9o),e(QM,lne),e(lne,M9o),e(QM,E9o),e(or,y9o),e(or,Hr),g(HM,Hr,null),e(Hr,w9o),e(Hr,ine),e(ine,A9o),e(Hr,L9o),e(Hr,bd),e(bd,B9o),e(bd,dne),e(dne,k9o),e(bd,x9o),e(bd,cne),e(cne,R9o),e(bd,S9o),e(Hr,P9o),e(Hr,fne),e(fne,$9o),e(Hr,I9o),g(UM,Hr,null),e(or,j9o),e(or,qe),g(JM,qe,null),e(qe,N9o),e(qe,mne),e(mne,D9o),e(qe,q9o),e(qe,Ua),e(Ua,G9o),e(Ua,gne),e(gne,O9o),e(Ua,X9o),e(Ua,hne),e(hne,z9o),e(Ua,V9o),e(Ua,pne),e(pne,W9o),e(Ua,Q9o),e(qe,H9o),e(qe,_ne),e(_ne,c2),e(c2,une),e(une,U9o),e(c2,J9o),e(c2,kj),e(kj,Y9o),e(c2,K9o),e(qe,Z9o),e(qe,f2),e(f2,eBo),e(f2,bne),e(bne,oBo),e(f2,rBo),e(f2,vne),e(vne,tBo),e(qe,aBo),e(qe,Tne),e(Tne,nBo),e(qe,sBo),g(YM,qe,null),b(d,hLe,u),b(d,vd,u),e(vd,m2),e(m2,Fne),g(KM,Fne,null),e(vd,lBo),e(vd,Cne),e(Cne,iBo),b(d,pLe,u),b(d,rr,u),g(ZM,rr,null),e(rr,dBo),e(rr,Td),e(Td,cBo),e(Td,Mne),e(Mne,fBo),e(Td,mBo),e(Td,Ene),e(Ene,gBo),e(Td,hBo),e(rr,pBo),e(rr,eE),e(eE,_Bo),e(eE,yne),e(yne,uBo),e(eE,bBo),e(rr,vBo),e(rr,Ur),g(oE,Ur,null),e(Ur,TBo),e(Ur,wne),e(wne,FBo),e(Ur,CBo),e(Ur,Fd),e(Fd,MBo),e(Fd,Ane),e(Ane,EBo),e(Fd,yBo),e(Fd,Lne),e(Lne,wBo),e(Fd,ABo),e(Ur,LBo),e(Ur,Bne),e(Bne,BBo),e(Ur,kBo),g(rE,Ur,null),e(rr,xBo),e(rr,Ge),g(tE,Ge,null),e(Ge,RBo),e(Ge,kne),e(kne,SBo),e(Ge,PBo),e(Ge,Ja),e(Ja,$Bo),e(Ja,xne),e(xne,IBo),e(Ja,jBo),e(Ja,Rne),e(Rne,NBo),e(Ja,DBo),e(Ja,Sne),e(Sne,qBo),e(Ja,GBo),e(Ge,OBo),e(Ge,be),e(be,g2),e(g2,Pne),e(Pne,XBo),e(g2,zBo),e(g2,xj),e(xj,VBo),e(g2,WBo),e(be,QBo),e(be,h2),e(h2,$ne),e($ne,HBo),e(h2,UBo),e(h2,Rj),e(Rj,JBo),e(h2,YBo),e(be,KBo),e(be,Rs),e(Rs,Ine),e(Ine,ZBo),e(Rs,eko),e(Rs,Sj),e(Sj,oko),e(Rs,rko),e(Rs,Pj),e(Pj,tko),e(Rs,ako),e(be,nko),e(be,p2),e(p2,jne),e(jne,sko),e(p2,lko),e(p2,$j),e($j,iko),e(p2,dko),e(be,cko),e(be,la),e(la,Nne),e(Nne,fko),e(la,mko),e(la,Ij),e(Ij,gko),e(la,hko),e(la,jj),e(jj,pko),e(la,_ko),e(la,Nj),e(Nj,uko),e(la,bko),e(be,vko),e(be,_2),e(_2,Dne),e(Dne,Tko),e(_2,Fko),e(_2,Dj),e(Dj,Cko),e(_2,Mko),e(be,Eko),e(be,u2),e(u2,qne),e(qne,yko),e(u2,wko),e(u2,qj),e(qj,Ako),e(u2,Lko),e(be,Bko),e(be,b2),e(b2,Gne),e(Gne,kko),e(b2,xko),e(b2,Gj),e(Gj,Rko),e(b2,Sko),e(be,Pko),e(be,v2),e(v2,One),e(One,$ko),e(v2,Iko),e(v2,Oj),e(Oj,jko),e(v2,Nko),e(Ge,Dko),e(Ge,T2),e(T2,qko),e(T2,Xne),e(Xne,Gko),e(T2,Oko),e(T2,zne),e(zne,Xko),e(Ge,zko),e(Ge,Vne),e(Vne,Vko),e(Ge,Wko),g(aE,Ge,null),b(d,_Le,u),b(d,Cd,u),e(Cd,F2),e(F2,Wne),g(nE,Wne,null),e(Cd,Qko),e(Cd,Qne),e(Qne,Hko),b(d,uLe,u),b(d,tr,u),g(sE,tr,null),e(tr,Uko),e(tr,Md),e(Md,Jko),e(Md,Hne),e(Hne,Yko),e(Md,Kko),e(Md,Une),e(Une,Zko),e(Md,exo),e(tr,oxo),e(tr,lE),e(lE,rxo),e(lE,Jne),e(Jne,txo),e(lE,axo),e(tr,nxo),e(tr,Jr),g(iE,Jr,null),e(Jr,sxo),e(Jr,Yne),e(Yne,lxo),e(Jr,ixo),e(Jr,Ed),e(Ed,dxo),e(Ed,Kne),e(Kne,cxo),e(Ed,fxo),e(Ed,Zne),e(Zne,mxo),e(Ed,gxo),e(Jr,hxo),e(Jr,ese),e(ese,pxo),e(Jr,_xo),g(dE,Jr,null),e(tr,uxo),e(tr,Oe),g(cE,Oe,null),e(Oe,bxo),e(Oe,ose),e(ose,vxo),e(Oe,Txo),e(Oe,Ya),e(Ya,Fxo),e(Ya,rse),e(rse,Cxo),e(Ya,Mxo),e(Ya,tse),e(tse,Exo),e(Ya,yxo),e(Ya,ase),e(ase,wxo),e(Ya,Axo),e(Oe,Lxo),e(Oe,nse),e(nse,C2),e(C2,sse),e(sse,Bxo),e(C2,kxo),e(C2,Xj),e(Xj,xxo),e(C2,Rxo),e(Oe,Sxo),e(Oe,M2),e(M2,Pxo),e(M2,lse),e(lse,$xo),e(M2,Ixo),e(M2,ise),e(ise,jxo),e(Oe,Nxo),e(Oe,dse),e(dse,Dxo),e(Oe,qxo),g(fE,Oe,null),b(d,bLe,u),b(d,yd,u),e(yd,E2),e(E2,cse),g(mE,cse,null),e(yd,Gxo),e(yd,fse),e(fse,Oxo),b(d,vLe,u),b(d,ar,u),g(gE,ar,null),e(ar,Xxo),e(ar,wd),e(wd,zxo),e(wd,mse),e(mse,Vxo),e(wd,Wxo),e(wd,gse),e(gse,Qxo),e(wd,Hxo),e(ar,Uxo),e(ar,hE),e(hE,Jxo),e(hE,hse),e(hse,Yxo),e(hE,Kxo),e(ar,Zxo),e(ar,Yr),g(pE,Yr,null),e(Yr,eRo),e(Yr,pse),e(pse,oRo),e(Yr,rRo),e(Yr,Ad),e(Ad,tRo),e(Ad,_se),e(_se,aRo),e(Ad,nRo),e(Ad,use),e(use,sRo),e(Ad,lRo),e(Yr,iRo),e(Yr,bse),e(bse,dRo),e(Yr,cRo),g(_E,Yr,null),e(ar,fRo),e(ar,Xe),g(uE,Xe,null),e(Xe,mRo),e(Xe,vse),e(vse,gRo),e(Xe,hRo),e(Xe,Ka),e(Ka,pRo),e(Ka,Tse),e(Tse,_Ro),e(Ka,uRo),e(Ka,Fse),e(Fse,bRo),e(Ka,vRo),e(Ka,Cse),e(Cse,TRo),e(Ka,FRo),e(Xe,CRo),e(Xe,ao),e(ao,y2),e(y2,Mse),e(Mse,MRo),e(y2,ERo),e(y2,zj),e(zj,yRo),e(y2,wRo),e(ao,ARo),e(ao,w2),e(w2,Ese),e(Ese,LRo),e(w2,BRo),e(w2,Vj),e(Vj,kRo),e(w2,xRo),e(ao,RRo),e(ao,A2),e(A2,yse),e(yse,SRo),e(A2,PRo),e(A2,Wj),e(Wj,$Ro),e(A2,IRo),e(ao,jRo),e(ao,L2),e(L2,wse),e(wse,NRo),e(L2,DRo),e(L2,Qj),e(Qj,qRo),e(L2,GRo),e(ao,ORo),e(ao,B2),e(B2,Ase),e(Ase,XRo),e(B2,zRo),e(B2,Hj),e(Hj,VRo),e(B2,WRo),e(ao,QRo),e(ao,k2),e(k2,Lse),e(Lse,HRo),e(k2,URo),e(k2,Uj),e(Uj,JRo),e(k2,YRo),e(ao,KRo),e(ao,x2),e(x2,Bse),e(Bse,ZRo),e(x2,eSo),e(x2,Jj),e(Jj,oSo),e(x2,rSo),e(Xe,tSo),e(Xe,R2),e(R2,aSo),e(R2,kse),e(kse,nSo),e(R2,sSo),e(R2,xse),e(xse,lSo),e(Xe,iSo),e(Xe,Rse),e(Rse,dSo),e(Xe,cSo),g(bE,Xe,null),b(d,TLe,u),b(d,Ld,u),e(Ld,S2),e(S2,Sse),g(vE,Sse,null),e(Ld,fSo),e(Ld,Pse),e(Pse,mSo),b(d,FLe,u),b(d,nr,u),g(TE,nr,null),e(nr,gSo),e(nr,Bd),e(Bd,hSo),e(Bd,$se),e($se,pSo),e(Bd,_So),e(Bd,Ise),e(Ise,uSo),e(Bd,bSo),e(nr,vSo),e(nr,FE),e(FE,TSo),e(FE,jse),e(jse,FSo),e(FE,CSo),e(nr,MSo),e(nr,Kr),g(CE,Kr,null),e(Kr,ESo),e(Kr,Nse),e(Nse,ySo),e(Kr,wSo),e(Kr,kd),e(kd,ASo),e(kd,Dse),e(Dse,LSo),e(kd,BSo),e(kd,qse),e(qse,kSo),e(kd,xSo),e(Kr,RSo),e(Kr,Gse),e(Gse,SSo),e(Kr,PSo),g(ME,Kr,null),e(nr,$So),e(nr,ze),g(EE,ze,null),e(ze,ISo),e(ze,Ose),e(Ose,jSo),e(ze,NSo),e(ze,Za),e(Za,DSo),e(Za,Xse),e(Xse,qSo),e(Za,GSo),e(Za,zse),e(zse,OSo),e(Za,XSo),e(Za,Vse),e(Vse,zSo),e(Za,VSo),e(ze,WSo),e(ze,xd),e(xd,P2),e(P2,Wse),e(Wse,QSo),e(P2,HSo),e(P2,Yj),e(Yj,USo),e(P2,JSo),e(xd,YSo),e(xd,$2),e($2,Qse),e(Qse,KSo),e($2,ZSo),e($2,Kj),e(Kj,ePo),e($2,oPo),e(xd,rPo),e(xd,I2),e(I2,Hse),e(Hse,tPo),e(I2,aPo),e(I2,Zj),e(Zj,nPo),e(I2,sPo),e(ze,lPo),e(ze,j2),e(j2,iPo),e(j2,Use),e(Use,dPo),e(j2,cPo),e(j2,Jse),e(Jse,fPo),e(ze,mPo),e(ze,Yse),e(Yse,gPo),e(ze,hPo),g(yE,ze,null),b(d,CLe,u),b(d,Rd,u),e(Rd,N2),e(N2,Kse),g(wE,Kse,null),e(Rd,pPo),e(Rd,Zse),e(Zse,_Po),b(d,MLe,u),b(d,sr,u),g(AE,sr,null),e(sr,uPo),e(sr,Sd),e(Sd,bPo),e(Sd,ele),e(ele,vPo),e(Sd,TPo),e(Sd,ole),e(ole,FPo),e(Sd,CPo),e(sr,MPo),e(sr,LE),e(LE,EPo),e(LE,rle),e(rle,yPo),e(LE,wPo),e(sr,APo),e(sr,Zr),g(BE,Zr,null),e(Zr,LPo),e(Zr,tle),e(tle,BPo),e(Zr,kPo),e(Zr,Pd),e(Pd,xPo),e(Pd,ale),e(ale,RPo),e(Pd,SPo),e(Pd,nle),e(nle,PPo),e(Pd,$Po),e(Zr,IPo),e(Zr,sle),e(sle,jPo),e(Zr,NPo),g(kE,Zr,null),e(sr,DPo),e(sr,Ve),g(xE,Ve,null),e(Ve,qPo),e(Ve,lle),e(lle,GPo),e(Ve,OPo),e(Ve,en),e(en,XPo),e(en,ile),e(ile,zPo),e(en,VPo),e(en,dle),e(dle,WPo),e(en,QPo),e(en,cle),e(cle,HPo),e(en,UPo),e(Ve,JPo),e(Ve,no),e(no,D2),e(D2,fle),e(fle,YPo),e(D2,KPo),e(D2,eN),e(eN,ZPo),e(D2,e$o),e(no,o$o),e(no,q2),e(q2,mle),e(mle,r$o),e(q2,t$o),e(q2,oN),e(oN,a$o),e(q2,n$o),e(no,s$o),e(no,G2),e(G2,gle),e(gle,l$o),e(G2,i$o),e(G2,rN),e(rN,d$o),e(G2,c$o),e(no,f$o),e(no,O2),e(O2,hle),e(hle,m$o),e(O2,g$o),e(O2,tN),e(tN,h$o),e(O2,p$o),e(no,_$o),e(no,X2),e(X2,ple),e(ple,u$o),e(X2,b$o),e(X2,aN),e(aN,v$o),e(X2,T$o),e(no,F$o),e(no,z2),e(z2,_le),e(_le,C$o),e(z2,M$o),e(z2,nN),e(nN,E$o),e(z2,y$o),e(no,w$o),e(no,V2),e(V2,ule),e(ule,A$o),e(V2,L$o),e(V2,sN),e(sN,B$o),e(V2,k$o),e(Ve,x$o),e(Ve,W2),e(W2,R$o),e(W2,ble),e(ble,S$o),e(W2,P$o),e(W2,vle),e(vle,$$o),e(Ve,I$o),e(Ve,Tle),e(Tle,j$o),e(Ve,N$o),g(RE,Ve,null),b(d,ELe,u),b(d,$d,u),e($d,Q2),e(Q2,Fle),g(SE,Fle,null),e($d,D$o),e($d,Cle),e(Cle,q$o),b(d,yLe,u),b(d,lr,u),g(PE,lr,null),e(lr,G$o),e(lr,Id),e(Id,O$o),e(Id,Mle),e(Mle,X$o),e(Id,z$o),e(Id,Ele),e(Ele,V$o),e(Id,W$o),e(lr,Q$o),e(lr,$E),e($E,H$o),e($E,yle),e(yle,U$o),e($E,J$o),e(lr,Y$o),e(lr,et),g(IE,et,null),e(et,K$o),e(et,wle),e(wle,Z$o),e(et,eIo),e(et,jd),e(jd,oIo),e(jd,Ale),e(Ale,rIo),e(jd,tIo),e(jd,Lle),e(Lle,aIo),e(jd,nIo),e(et,sIo),e(et,Ble),e(Ble,lIo),e(et,iIo),g(jE,et,null),e(lr,dIo),e(lr,We),g(NE,We,null),e(We,cIo),e(We,kle),e(kle,fIo),e(We,mIo),e(We,on),e(on,gIo),e(on,xle),e(xle,hIo),e(on,pIo),e(on,Rle),e(Rle,_Io),e(on,uIo),e(on,Sle),e(Sle,bIo),e(on,vIo),e(We,TIo),e(We,DE),e(DE,H2),e(H2,Ple),e(Ple,FIo),e(H2,CIo),e(H2,lN),e(lN,MIo),e(H2,EIo),e(DE,yIo),e(DE,U2),e(U2,$le),e($le,wIo),e(U2,AIo),e(U2,iN),e(iN,LIo),e(U2,BIo),e(We,kIo),e(We,J2),e(J2,xIo),e(J2,Ile),e(Ile,RIo),e(J2,SIo),e(J2,jle),e(jle,PIo),e(We,$Io),e(We,Nle),e(Nle,IIo),e(We,jIo),g(qE,We,null),b(d,wLe,u),b(d,Nd,u),e(Nd,Y2),e(Y2,Dle),g(GE,Dle,null),e(Nd,NIo),e(Nd,qle),e(qle,DIo),b(d,ALe,u),b(d,ir,u),g(OE,ir,null),e(ir,qIo),e(ir,Dd),e(Dd,GIo),e(Dd,Gle),e(Gle,OIo),e(Dd,XIo),e(Dd,Ole),e(Ole,zIo),e(Dd,VIo),e(ir,WIo),e(ir,XE),e(XE,QIo),e(XE,Xle),e(Xle,HIo),e(XE,UIo),e(ir,JIo),e(ir,ot),g(zE,ot,null),e(ot,YIo),e(ot,zle),e(zle,KIo),e(ot,ZIo),e(ot,qd),e(qd,ejo),e(qd,Vle),e(Vle,ojo),e(qd,rjo),e(qd,Wle),e(Wle,tjo),e(qd,ajo),e(ot,njo),e(ot,Qle),e(Qle,sjo),e(ot,ljo),g(VE,ot,null),e(ir,ijo),e(ir,Qe),g(WE,Qe,null),e(Qe,djo),e(Qe,Hle),e(Hle,cjo),e(Qe,fjo),e(Qe,rn),e(rn,mjo),e(rn,Ule),e(Ule,gjo),e(rn,hjo),e(rn,Jle),e(Jle,pjo),e(rn,_jo),e(rn,Yle),e(Yle,ujo),e(rn,bjo),e(Qe,vjo),e(Qe,Gd),e(Gd,K2),e(K2,Kle),e(Kle,Tjo),e(K2,Fjo),e(K2,dN),e(dN,Cjo),e(K2,Mjo),e(Gd,Ejo),e(Gd,Z2),e(Z2,Zle),e(Zle,yjo),e(Z2,wjo),e(Z2,cN),e(cN,Ajo),e(Z2,Ljo),e(Gd,Bjo),e(Gd,ev),e(ev,eie),e(eie,kjo),e(ev,xjo),e(ev,fN),e(fN,Rjo),e(ev,Sjo),e(Qe,Pjo),e(Qe,ov),e(ov,$jo),e(ov,oie),e(oie,Ijo),e(ov,jjo),e(ov,rie),e(rie,Njo),e(Qe,Djo),e(Qe,tie),e(tie,qjo),e(Qe,Gjo),g(QE,Qe,null),b(d,LLe,u),b(d,Od,u),e(Od,rv),e(rv,aie),g(HE,aie,null),e(Od,Ojo),e(Od,nie),e(nie,Xjo),b(d,BLe,u),b(d,dr,u),g(UE,dr,null),e(dr,zjo),e(dr,Xd),e(Xd,Vjo),e(Xd,sie),e(sie,Wjo),e(Xd,Qjo),e(Xd,lie),e(lie,Hjo),e(Xd,Ujo),e(dr,Jjo),e(dr,JE),e(JE,Yjo),e(JE,iie),e(iie,Kjo),e(JE,Zjo),e(dr,eNo),e(dr,rt),g(YE,rt,null),e(rt,oNo),e(rt,die),e(die,rNo),e(rt,tNo),e(rt,zd),e(zd,aNo),e(zd,cie),e(cie,nNo),e(zd,sNo),e(zd,fie),e(fie,lNo),e(zd,iNo),e(rt,dNo),e(rt,mie),e(mie,cNo),e(rt,fNo),g(KE,rt,null),e(dr,mNo),e(dr,He),g(ZE,He,null),e(He,gNo),e(He,gie),e(gie,hNo),e(He,pNo),e(He,tn),e(tn,_No),e(tn,hie),e(hie,uNo),e(tn,bNo),e(tn,pie),e(pie,vNo),e(tn,TNo),e(tn,_ie),e(_ie,FNo),e(tn,CNo),e(He,MNo),e(He,Vd),e(Vd,tv),e(tv,uie),e(uie,ENo),e(tv,yNo),e(tv,mN),e(mN,wNo),e(tv,ANo),e(Vd,LNo),e(Vd,av),e(av,bie),e(bie,BNo),e(av,kNo),e(av,gN),e(gN,xNo),e(av,RNo),e(Vd,SNo),e(Vd,nv),e(nv,vie),e(vie,PNo),e(nv,$No),e(nv,hN),e(hN,INo),e(nv,jNo),e(He,NNo),e(He,sv),e(sv,DNo),e(sv,Tie),e(Tie,qNo),e(sv,GNo),e(sv,Fie),e(Fie,ONo),e(He,XNo),e(He,Cie),e(Cie,zNo),e(He,VNo),g(e3,He,null),b(d,kLe,u),b(d,Wd,u),e(Wd,lv),e(lv,Mie),g(o3,Mie,null),e(Wd,WNo),e(Wd,Eie),e(Eie,QNo),b(d,xLe,u),b(d,cr,u),g(r3,cr,null),e(cr,HNo),e(cr,Qd),e(Qd,UNo),e(Qd,yie),e(yie,JNo),e(Qd,YNo),e(Qd,wie),e(wie,KNo),e(Qd,ZNo),e(cr,eDo),e(cr,t3),e(t3,oDo),e(t3,Aie),e(Aie,rDo),e(t3,tDo),e(cr,aDo),e(cr,tt),g(a3,tt,null),e(tt,nDo),e(tt,Lie),e(Lie,sDo),e(tt,lDo),e(tt,Hd),e(Hd,iDo),e(Hd,Bie),e(Bie,dDo),e(Hd,cDo),e(Hd,kie),e(kie,fDo),e(Hd,mDo),e(tt,gDo),e(tt,xie),e(xie,hDo),e(tt,pDo),g(n3,tt,null),e(cr,_Do),e(cr,Ue),g(s3,Ue,null),e(Ue,uDo),e(Ue,Rie),e(Rie,bDo),e(Ue,vDo),e(Ue,an),e(an,TDo),e(an,Sie),e(Sie,FDo),e(an,CDo),e(an,Pie),e(Pie,MDo),e(an,EDo),e(an,$ie),e($ie,yDo),e(an,wDo),e(Ue,ADo),e(Ue,Iie),e(Iie,iv),e(iv,jie),e(jie,LDo),e(iv,BDo),e(iv,pN),e(pN,kDo),e(iv,xDo),e(Ue,RDo),e(Ue,dv),e(dv,SDo),e(dv,Nie),e(Nie,PDo),e(dv,$Do),e(dv,Die),e(Die,IDo),e(Ue,jDo),e(Ue,qie),e(qie,NDo),e(Ue,DDo),g(l3,Ue,null),b(d,RLe,u),b(d,Ud,u),e(Ud,cv),e(cv,Gie),g(i3,Gie,null),e(Ud,qDo),e(Ud,Oie),e(Oie,GDo),b(d,SLe,u),b(d,fr,u),g(d3,fr,null),e(fr,ODo),e(fr,Jd),e(Jd,XDo),e(Jd,Xie),e(Xie,zDo),e(Jd,VDo),e(Jd,zie),e(zie,WDo),e(Jd,QDo),e(fr,HDo),e(fr,c3),e(c3,UDo),e(c3,Vie),e(Vie,JDo),e(c3,YDo),e(fr,KDo),e(fr,at),g(f3,at,null),e(at,ZDo),e(at,Wie),e(Wie,eqo),e(at,oqo),e(at,Yd),e(Yd,rqo),e(Yd,Qie),e(Qie,tqo),e(Yd,aqo),e(Yd,Hie),e(Hie,nqo),e(Yd,sqo),e(at,lqo),e(at,Uie),e(Uie,iqo),e(at,dqo),g(m3,at,null),e(fr,cqo),e(fr,Je),g(g3,Je,null),e(Je,fqo),e(Je,Jie),e(Jie,mqo),e(Je,gqo),e(Je,nn),e(nn,hqo),e(nn,Yie),e(Yie,pqo),e(nn,_qo),e(nn,Kie),e(Kie,uqo),e(nn,bqo),e(nn,Zie),e(Zie,vqo),e(nn,Tqo),e(Je,Fqo),e(Je,ede),e(ede,fv),e(fv,ode),e(ode,Cqo),e(fv,Mqo),e(fv,_N),e(_N,Eqo),e(fv,yqo),e(Je,wqo),e(Je,mv),e(mv,Aqo),e(mv,rde),e(rde,Lqo),e(mv,Bqo),e(mv,tde),e(tde,kqo),e(Je,xqo),e(Je,ade),e(ade,Rqo),e(Je,Sqo),g(h3,Je,null),b(d,PLe,u),b(d,Kd,u),e(Kd,gv),e(gv,nde),g(p3,nde,null),e(Kd,Pqo),e(Kd,sde),e(sde,$qo),b(d,$Le,u),b(d,mr,u),g(_3,mr,null),e(mr,Iqo),e(mr,Zd),e(Zd,jqo),e(Zd,lde),e(lde,Nqo),e(Zd,Dqo),e(Zd,ide),e(ide,qqo),e(Zd,Gqo),e(mr,Oqo),e(mr,u3),e(u3,Xqo),e(u3,dde),e(dde,zqo),e(u3,Vqo),e(mr,Wqo),e(mr,nt),g(b3,nt,null),e(nt,Qqo),e(nt,cde),e(cde,Hqo),e(nt,Uqo),e(nt,ec),e(ec,Jqo),e(ec,fde),e(fde,Yqo),e(ec,Kqo),e(ec,mde),e(mde,Zqo),e(ec,eGo),e(nt,oGo),e(nt,gde),e(gde,rGo),e(nt,tGo),g(v3,nt,null),e(mr,aGo),e(mr,Ye),g(T3,Ye,null),e(Ye,nGo),e(Ye,hde),e(hde,sGo),e(Ye,lGo),e(Ye,sn),e(sn,iGo),e(sn,pde),e(pde,dGo),e(sn,cGo),e(sn,_de),e(_de,fGo),e(sn,mGo),e(sn,ude),e(ude,gGo),e(sn,hGo),e(Ye,pGo),e(Ye,F3),e(F3,hv),e(hv,bde),e(bde,_Go),e(hv,uGo),e(hv,uN),e(uN,bGo),e(hv,vGo),e(F3,TGo),e(F3,pv),e(pv,vde),e(vde,FGo),e(pv,CGo),e(pv,bN),e(bN,MGo),e(pv,EGo),e(Ye,yGo),e(Ye,_v),e(_v,wGo),e(_v,Tde),e(Tde,AGo),e(_v,LGo),e(_v,Fde),e(Fde,BGo),e(Ye,kGo),e(Ye,Cde),e(Cde,xGo),e(Ye,RGo),g(C3,Ye,null),b(d,ILe,u),b(d,oc,u),e(oc,uv),e(uv,Mde),g(M3,Mde,null),e(oc,SGo),e(oc,Ede),e(Ede,PGo),b(d,jLe,u),b(d,gr,u),g(E3,gr,null),e(gr,$Go),e(gr,rc),e(rc,IGo),e(rc,yde),e(yde,jGo),e(rc,NGo),e(rc,wde),e(wde,DGo),e(rc,qGo),e(gr,GGo),e(gr,y3),e(y3,OGo),e(y3,Ade),e(Ade,XGo),e(y3,zGo),e(gr,VGo),e(gr,st),g(w3,st,null),e(st,WGo),e(st,Lde),e(Lde,QGo),e(st,HGo),e(st,tc),e(tc,UGo),e(tc,Bde),e(Bde,JGo),e(tc,YGo),e(tc,kde),e(kde,KGo),e(tc,ZGo),e(st,eOo),e(st,xde),e(xde,oOo),e(st,rOo),g(A3,st,null),e(gr,tOo),e(gr,go),g(L3,go,null),e(go,aOo),e(go,Rde),e(Rde,nOo),e(go,sOo),e(go,ln),e(ln,lOo),e(ln,Sde),e(Sde,iOo),e(ln,dOo),e(ln,Pde),e(Pde,cOo),e(ln,fOo),e(ln,$de),e($de,mOo),e(ln,gOo),e(go,hOo),e(go,B),e(B,bv),e(bv,Ide),e(Ide,pOo),e(bv,_Oo),e(bv,vN),e(vN,uOo),e(bv,bOo),e(B,vOo),e(B,vv),e(vv,jde),e(jde,TOo),e(vv,FOo),e(vv,TN),e(TN,COo),e(vv,MOo),e(B,EOo),e(B,Tv),e(Tv,Nde),e(Nde,yOo),e(Tv,wOo),e(Tv,FN),e(FN,AOo),e(Tv,LOo),e(B,BOo),e(B,Fv),e(Fv,Dde),e(Dde,kOo),e(Fv,xOo),e(Fv,CN),e(CN,ROo),e(Fv,SOo),e(B,POo),e(B,Cv),e(Cv,qde),e(qde,$Oo),e(Cv,IOo),e(Cv,MN),e(MN,jOo),e(Cv,NOo),e(B,DOo),e(B,Mv),e(Mv,Gde),e(Gde,qOo),e(Mv,GOo),e(Mv,EN),e(EN,OOo),e(Mv,XOo),e(B,zOo),e(B,Ev),e(Ev,Ode),e(Ode,VOo),e(Ev,WOo),e(Ev,yN),e(yN,QOo),e(Ev,HOo),e(B,UOo),e(B,yv),e(yv,Xde),e(Xde,JOo),e(yv,YOo),e(yv,wN),e(wN,KOo),e(yv,ZOo),e(B,eXo),e(B,wv),e(wv,zde),e(zde,oXo),e(wv,rXo),e(wv,AN),e(AN,tXo),e(wv,aXo),e(B,nXo),e(B,Av),e(Av,Vde),e(Vde,sXo),e(Av,lXo),e(Av,LN),e(LN,iXo),e(Av,dXo),e(B,cXo),e(B,Lv),e(Lv,Wde),e(Wde,fXo),e(Lv,mXo),e(Lv,BN),e(BN,gXo),e(Lv,hXo),e(B,pXo),e(B,Bv),e(Bv,Qde),e(Qde,_Xo),e(Bv,uXo),e(Bv,kN),e(kN,bXo),e(Bv,vXo),e(B,TXo),e(B,kv),e(kv,Hde),e(Hde,FXo),e(kv,CXo),e(kv,xN),e(xN,MXo),e(kv,EXo),e(B,yXo),e(B,xv),e(xv,Ude),e(Ude,wXo),e(xv,AXo),e(xv,RN),e(RN,LXo),e(xv,BXo),e(B,kXo),e(B,Rv),e(Rv,Jde),e(Jde,xXo),e(Rv,RXo),e(Rv,SN),e(SN,SXo),e(Rv,PXo),e(B,$Xo),e(B,Ss),e(Ss,Yde),e(Yde,IXo),e(Ss,jXo),e(Ss,PN),e(PN,NXo),e(Ss,DXo),e(Ss,$N),e($N,qXo),e(Ss,GXo),e(B,OXo),e(B,Sv),e(Sv,Kde),e(Kde,XXo),e(Sv,zXo),e(Sv,IN),e(IN,VXo),e(Sv,WXo),e(B,QXo),e(B,Pv),e(Pv,Zde),e(Zde,HXo),e(Pv,UXo),e(Pv,jN),e(jN,JXo),e(Pv,YXo),e(B,KXo),e(B,$v),e($v,ece),e(ece,ZXo),e($v,ezo),e($v,NN),e(NN,ozo),e($v,rzo),e(B,tzo),e(B,Iv),e(Iv,oce),e(oce,azo),e(Iv,nzo),e(Iv,DN),e(DN,szo),e(Iv,lzo),e(B,izo),e(B,jv),e(jv,rce),e(rce,dzo),e(jv,czo),e(jv,qN),e(qN,fzo),e(jv,mzo),e(B,gzo),e(B,Nv),e(Nv,tce),e(tce,hzo),e(Nv,pzo),e(Nv,GN),e(GN,_zo),e(Nv,uzo),e(B,bzo),e(B,Dv),e(Dv,ace),e(ace,vzo),e(Dv,Tzo),e(Dv,ON),e(ON,Fzo),e(Dv,Czo),e(B,Mzo),e(B,qv),e(qv,nce),e(nce,Ezo),e(qv,yzo),e(qv,XN),e(XN,wzo),e(qv,Azo),e(B,Lzo),e(B,Gv),e(Gv,sce),e(sce,Bzo),e(Gv,kzo),e(Gv,zN),e(zN,xzo),e(Gv,Rzo),e(B,Szo),e(B,Ov),e(Ov,lce),e(lce,Pzo),e(Ov,$zo),e(Ov,VN),e(VN,Izo),e(Ov,jzo),e(B,Nzo),e(B,Xv),e(Xv,ice),e(ice,Dzo),e(Xv,qzo),e(Xv,WN),e(WN,Gzo),e(Xv,Ozo),e(B,Xzo),e(B,zv),e(zv,dce),e(dce,zzo),e(zv,Vzo),e(zv,QN),e(QN,Wzo),e(zv,Qzo),e(B,Hzo),e(B,Vv),e(Vv,cce),e(cce,Uzo),e(Vv,Jzo),e(Vv,HN),e(HN,Yzo),e(Vv,Kzo),e(B,Zzo),e(B,Wv),e(Wv,fce),e(fce,eVo),e(Wv,oVo),e(Wv,UN),e(UN,rVo),e(Wv,tVo),e(B,aVo),e(B,Qv),e(Qv,mce),e(mce,nVo),e(Qv,sVo),e(Qv,JN),e(JN,lVo),e(Qv,iVo),e(B,dVo),e(B,Hv),e(Hv,gce),e(gce,cVo),e(Hv,fVo),e(Hv,YN),e(YN,mVo),e(Hv,gVo),e(B,hVo),e(B,Uv),e(Uv,hce),e(hce,pVo),e(Uv,_Vo),e(Uv,KN),e(KN,uVo),e(Uv,bVo),e(B,vVo),e(B,Jv),e(Jv,pce),e(pce,TVo),e(Jv,FVo),e(Jv,ZN),e(ZN,CVo),e(Jv,MVo),e(B,EVo),e(B,Yv),e(Yv,_ce),e(_ce,yVo),e(Yv,wVo),e(Yv,eD),e(eD,AVo),e(Yv,LVo),e(B,BVo),e(B,Kv),e(Kv,uce),e(uce,kVo),e(Kv,xVo),e(Kv,oD),e(oD,RVo),e(Kv,SVo),e(B,PVo),e(B,Zv),e(Zv,bce),e(bce,$Vo),e(Zv,IVo),e(Zv,rD),e(rD,jVo),e(Zv,NVo),e(B,DVo),e(B,e6),e(e6,vce),e(vce,qVo),e(e6,GVo),e(e6,tD),e(tD,OVo),e(e6,XVo),e(B,zVo),e(B,o6),e(o6,Tce),e(Tce,VVo),e(o6,WVo),e(o6,aD),e(aD,QVo),e(o6,HVo),e(B,UVo),e(B,r6),e(r6,Fce),e(Fce,JVo),e(r6,YVo),e(r6,nD),e(nD,KVo),e(r6,ZVo),e(B,eWo),e(B,t6),e(t6,Cce),e(Cce,oWo),e(t6,rWo),e(t6,sD),e(sD,tWo),e(t6,aWo),e(go,nWo),e(go,Mce),e(Mce,sWo),e(go,lWo),g(B3,go,null),b(d,NLe,u),b(d,ac,u),e(ac,a6),e(a6,Ece),g(k3,Ece,null),e(ac,iWo),e(ac,yce),e(yce,dWo),b(d,DLe,u),b(d,hr,u),g(x3,hr,null),e(hr,cWo),e(hr,nc),e(nc,fWo),e(nc,wce),e(wce,mWo),e(nc,gWo),e(nc,Ace),e(Ace,hWo),e(nc,pWo),e(hr,_Wo),e(hr,R3),e(R3,uWo),e(R3,Lce),e(Lce,bWo),e(R3,vWo),e(hr,TWo),e(hr,lt),g(S3,lt,null),e(lt,FWo),e(lt,Bce),e(Bce,CWo),e(lt,MWo),e(lt,sc),e(sc,EWo),e(sc,kce),e(kce,yWo),e(sc,wWo),e(sc,xce),e(xce,AWo),e(sc,LWo),e(lt,BWo),e(lt,Rce),e(Rce,kWo),e(lt,xWo),g(P3,lt,null),e(hr,RWo),e(hr,ho),g($3,ho,null),e(ho,SWo),e(ho,Sce),e(Sce,PWo),e(ho,$Wo),e(ho,dn),e(dn,IWo),e(dn,Pce),e(Pce,jWo),e(dn,NWo),e(dn,$ce),e($ce,DWo),e(dn,qWo),e(dn,Ice),e(Ice,GWo),e(dn,OWo),e(ho,XWo),e(ho,H),e(H,n6),e(n6,jce),e(jce,zWo),e(n6,VWo),e(n6,lD),e(lD,WWo),e(n6,QWo),e(H,HWo),e(H,s6),e(s6,Nce),e(Nce,UWo),e(s6,JWo),e(s6,iD),e(iD,YWo),e(s6,KWo),e(H,ZWo),e(H,l6),e(l6,Dce),e(Dce,eQo),e(l6,oQo),e(l6,dD),e(dD,rQo),e(l6,tQo),e(H,aQo),e(H,i6),e(i6,qce),e(qce,nQo),e(i6,sQo),e(i6,cD),e(cD,lQo),e(i6,iQo),e(H,dQo),e(H,d6),e(d6,Gce),e(Gce,cQo),e(d6,fQo),e(d6,fD),e(fD,mQo),e(d6,gQo),e(H,hQo),e(H,c6),e(c6,Oce),e(Oce,pQo),e(c6,_Qo),e(c6,mD),e(mD,uQo),e(c6,bQo),e(H,vQo),e(H,f6),e(f6,Xce),e(Xce,TQo),e(f6,FQo),e(f6,gD),e(gD,CQo),e(f6,MQo),e(H,EQo),e(H,m6),e(m6,zce),e(zce,yQo),e(m6,wQo),e(m6,hD),e(hD,AQo),e(m6,LQo),e(H,BQo),e(H,g6),e(g6,Vce),e(Vce,kQo),e(g6,xQo),e(g6,pD),e(pD,RQo),e(g6,SQo),e(H,PQo),e(H,h6),e(h6,Wce),e(Wce,$Qo),e(h6,IQo),e(h6,_D),e(_D,jQo),e(h6,NQo),e(H,DQo),e(H,p6),e(p6,Qce),e(Qce,qQo),e(p6,GQo),e(p6,uD),e(uD,OQo),e(p6,XQo),e(H,zQo),e(H,_6),e(_6,Hce),e(Hce,VQo),e(_6,WQo),e(_6,bD),e(bD,QQo),e(_6,HQo),e(H,UQo),e(H,u6),e(u6,Uce),e(Uce,JQo),e(u6,YQo),e(u6,vD),e(vD,KQo),e(u6,ZQo),e(H,eHo),e(H,b6),e(b6,Jce),e(Jce,oHo),e(b6,rHo),e(b6,TD),e(TD,tHo),e(b6,aHo),e(H,nHo),e(H,v6),e(v6,Yce),e(Yce,sHo),e(v6,lHo),e(v6,FD),e(FD,iHo),e(v6,dHo),e(H,cHo),e(H,T6),e(T6,Kce),e(Kce,fHo),e(T6,mHo),e(T6,CD),e(CD,gHo),e(T6,hHo),e(H,pHo),e(H,F6),e(F6,Zce),e(Zce,_Ho),e(F6,uHo),e(F6,MD),e(MD,bHo),e(F6,vHo),e(H,THo),e(H,C6),e(C6,efe),e(efe,FHo),e(C6,CHo),e(C6,ED),e(ED,MHo),e(C6,EHo),e(H,yHo),e(H,M6),e(M6,ofe),e(ofe,wHo),e(M6,AHo),e(M6,yD),e(yD,LHo),e(M6,BHo),e(H,kHo),e(H,E6),e(E6,rfe),e(rfe,xHo),e(E6,RHo),e(E6,wD),e(wD,SHo),e(E6,PHo),e(H,$Ho),e(H,y6),e(y6,tfe),e(tfe,IHo),e(y6,jHo),e(y6,AD),e(AD,NHo),e(y6,DHo),e(H,qHo),e(H,w6),e(w6,afe),e(afe,GHo),e(w6,OHo),e(w6,LD),e(LD,XHo),e(w6,zHo),e(ho,VHo),e(ho,nfe),e(nfe,WHo),e(ho,QHo),g(I3,ho,null),b(d,qLe,u),b(d,lc,u),e(lc,A6),e(A6,sfe),g(j3,sfe,null),e(lc,HHo),e(lc,lfe),e(lfe,UHo),b(d,GLe,u),b(d,pr,u),g(N3,pr,null),e(pr,JHo),e(pr,ic),e(ic,YHo),e(ic,ife),e(ife,KHo),e(ic,ZHo),e(ic,dfe),e(dfe,eUo),e(ic,oUo),e(pr,rUo),e(pr,D3),e(D3,tUo),e(D3,cfe),e(cfe,aUo),e(D3,nUo),e(pr,sUo),e(pr,it),g(q3,it,null),e(it,lUo),e(it,ffe),e(ffe,iUo),e(it,dUo),e(it,dc),e(dc,cUo),e(dc,mfe),e(mfe,fUo),e(dc,mUo),e(dc,gfe),e(gfe,gUo),e(dc,hUo),e(it,pUo),e(it,hfe),e(hfe,_Uo),e(it,uUo),g(G3,it,null),e(pr,bUo),e(pr,po),g(O3,po,null),e(po,vUo),e(po,pfe),e(pfe,TUo),e(po,FUo),e(po,cn),e(cn,CUo),e(cn,_fe),e(_fe,MUo),e(cn,EUo),e(cn,ufe),e(ufe,yUo),e(cn,wUo),e(cn,bfe),e(bfe,AUo),e(cn,LUo),e(po,BUo),e(po,he),e(he,L6),e(L6,vfe),e(vfe,kUo),e(L6,xUo),e(L6,BD),e(BD,RUo),e(L6,SUo),e(he,PUo),e(he,B6),e(B6,Tfe),e(Tfe,$Uo),e(B6,IUo),e(B6,kD),e(kD,jUo),e(B6,NUo),e(he,DUo),e(he,k6),e(k6,Ffe),e(Ffe,qUo),e(k6,GUo),e(k6,xD),e(xD,OUo),e(k6,XUo),e(he,zUo),e(he,x6),e(x6,Cfe),e(Cfe,VUo),e(x6,WUo),e(x6,RD),e(RD,QUo),e(x6,HUo),e(he,UUo),e(he,R6),e(R6,Mfe),e(Mfe,JUo),e(R6,YUo),e(R6,SD),e(SD,KUo),e(R6,ZUo),e(he,eJo),e(he,S6),e(S6,Efe),e(Efe,oJo),e(S6,rJo),e(S6,PD),e(PD,tJo),e(S6,aJo),e(he,nJo),e(he,P6),e(P6,yfe),e(yfe,sJo),e(P6,lJo),e(P6,$D),e($D,iJo),e(P6,dJo),e(he,cJo),e(he,$6),e($6,wfe),e(wfe,fJo),e($6,mJo),e($6,ID),e(ID,gJo),e($6,hJo),e(he,pJo),e(he,I6),e(I6,Afe),e(Afe,_Jo),e(I6,uJo),e(I6,jD),e(jD,bJo),e(I6,vJo),e(he,TJo),e(he,j6),e(j6,Lfe),e(Lfe,FJo),e(j6,CJo),e(j6,ND),e(ND,MJo),e(j6,EJo),e(po,yJo),e(po,Bfe),e(Bfe,wJo),e(po,AJo),g(X3,po,null),b(d,OLe,u),b(d,cc,u),e(cc,N6),e(N6,kfe),g(z3,kfe,null),e(cc,LJo),e(cc,xfe),e(xfe,BJo),b(d,XLe,u),b(d,_r,u),g(V3,_r,null),e(_r,kJo),e(_r,fc),e(fc,xJo),e(fc,Rfe),e(Rfe,RJo),e(fc,SJo),e(fc,Sfe),e(Sfe,PJo),e(fc,$Jo),e(_r,IJo),e(_r,W3),e(W3,jJo),e(W3,Pfe),e(Pfe,NJo),e(W3,DJo),e(_r,qJo),e(_r,dt),g(Q3,dt,null),e(dt,GJo),e(dt,$fe),e($fe,OJo),e(dt,XJo),e(dt,mc),e(mc,zJo),e(mc,Ife),e(Ife,VJo),e(mc,WJo),e(mc,jfe),e(jfe,QJo),e(mc,HJo),e(dt,UJo),e(dt,Nfe),e(Nfe,JJo),e(dt,YJo),g(H3,dt,null),e(_r,KJo),e(_r,_o),g(U3,_o,null),e(_o,ZJo),e(_o,Dfe),e(Dfe,eYo),e(_o,oYo),e(_o,fn),e(fn,rYo),e(fn,qfe),e(qfe,tYo),e(fn,aYo),e(fn,Gfe),e(Gfe,nYo),e(fn,sYo),e(fn,Ofe),e(Ofe,lYo),e(fn,iYo),e(_o,dYo),e(_o,Xfe),e(Xfe,D6),e(D6,zfe),e(zfe,cYo),e(D6,fYo),e(D6,DD),e(DD,mYo),e(D6,gYo),e(_o,hYo),e(_o,Vfe),e(Vfe,pYo),e(_o,_Yo),g(J3,_o,null),b(d,zLe,u),b(d,gc,u),e(gc,q6),e(q6,Wfe),g(Y3,Wfe,null),e(gc,uYo),e(gc,Qfe),e(Qfe,bYo),b(d,VLe,u),b(d,ur,u),g(K3,ur,null),e(ur,vYo),e(ur,hc),e(hc,TYo),e(hc,Hfe),e(Hfe,FYo),e(hc,CYo),e(hc,Ufe),e(Ufe,MYo),e(hc,EYo),e(ur,yYo),e(ur,Z3),e(Z3,wYo),e(Z3,Jfe),e(Jfe,AYo),e(Z3,LYo),e(ur,BYo),e(ur,ct),g(ey,ct,null),e(ct,kYo),e(ct,Yfe),e(Yfe,xYo),e(ct,RYo),e(ct,pc),e(pc,SYo),e(pc,Kfe),e(Kfe,PYo),e(pc,$Yo),e(pc,Zfe),e(Zfe,IYo),e(pc,jYo),e(ct,NYo),e(ct,eme),e(eme,DYo),e(ct,qYo),g(oy,ct,null),e(ur,GYo),e(ur,uo),g(ry,uo,null),e(uo,OYo),e(uo,ome),e(ome,XYo),e(uo,zYo),e(uo,mn),e(mn,VYo),e(mn,rme),e(rme,WYo),e(mn,QYo),e(mn,tme),e(tme,HYo),e(mn,UYo),e(mn,ame),e(ame,JYo),e(mn,YYo),e(uo,KYo),e(uo,Y),e(Y,G6),e(G6,nme),e(nme,ZYo),e(G6,eKo),e(G6,qD),e(qD,oKo),e(G6,rKo),e(Y,tKo),e(Y,O6),e(O6,sme),e(sme,aKo),e(O6,nKo),e(O6,GD),e(GD,sKo),e(O6,lKo),e(Y,iKo),e(Y,X6),e(X6,lme),e(lme,dKo),e(X6,cKo),e(X6,OD),e(OD,fKo),e(X6,mKo),e(Y,gKo),e(Y,z6),e(z6,ime),e(ime,hKo),e(z6,pKo),e(z6,XD),e(XD,_Ko),e(z6,uKo),e(Y,bKo),e(Y,V6),e(V6,dme),e(dme,vKo),e(V6,TKo),e(V6,zD),e(zD,FKo),e(V6,CKo),e(Y,MKo),e(Y,W6),e(W6,cme),e(cme,EKo),e(W6,yKo),e(W6,VD),e(VD,wKo),e(W6,AKo),e(Y,LKo),e(Y,Q6),e(Q6,fme),e(fme,BKo),e(Q6,kKo),e(Q6,WD),e(WD,xKo),e(Q6,RKo),e(Y,SKo),e(Y,H6),e(H6,mme),e(mme,PKo),e(H6,$Ko),e(H6,QD),e(QD,IKo),e(H6,jKo),e(Y,NKo),e(Y,U6),e(U6,gme),e(gme,DKo),e(U6,qKo),e(U6,HD),e(HD,GKo),e(U6,OKo),e(Y,XKo),e(Y,J6),e(J6,hme),e(hme,zKo),e(J6,VKo),e(J6,UD),e(UD,WKo),e(J6,QKo),e(Y,HKo),e(Y,Y6),e(Y6,pme),e(pme,UKo),e(Y6,JKo),e(Y6,JD),e(JD,YKo),e(Y6,KKo),e(Y,ZKo),e(Y,K6),e(K6,_me),e(_me,eZo),e(K6,oZo),e(K6,YD),e(YD,rZo),e(K6,tZo),e(Y,aZo),e(Y,Z6),e(Z6,ume),e(ume,nZo),e(Z6,sZo),e(Z6,KD),e(KD,lZo),e(Z6,iZo),e(Y,dZo),e(Y,eT),e(eT,bme),e(bme,cZo),e(eT,fZo),e(eT,ZD),e(ZD,mZo),e(eT,gZo),e(Y,hZo),e(Y,oT),e(oT,vme),e(vme,pZo),e(oT,_Zo),e(oT,eq),e(eq,uZo),e(oT,bZo),e(Y,vZo),e(Y,rT),e(rT,Tme),e(Tme,TZo),e(rT,FZo),e(rT,oq),e(oq,CZo),e(rT,MZo),e(Y,EZo),e(Y,tT),e(tT,Fme),e(Fme,yZo),e(tT,wZo),e(tT,rq),e(rq,AZo),e(tT,LZo),e(Y,BZo),e(Y,aT),e(aT,Cme),e(Cme,kZo),e(aT,xZo),e(aT,tq),e(tq,RZo),e(aT,SZo),e(Y,PZo),e(Y,nT),e(nT,Mme),e(Mme,$Zo),e(nT,IZo),e(nT,aq),e(aq,jZo),e(nT,NZo),e(Y,DZo),e(Y,sT),e(sT,Eme),e(Eme,qZo),e(sT,GZo),e(sT,nq),e(nq,OZo),e(sT,XZo),e(uo,zZo),e(uo,yme),e(yme,VZo),e(uo,WZo),g(ty,uo,null),b(d,WLe,u),b(d,_c,u),e(_c,lT),e(lT,wme),g(ay,wme,null),e(_c,QZo),e(_c,Ame),e(Ame,HZo),b(d,QLe,u),b(d,br,u),g(ny,br,null),e(br,UZo),e(br,uc),e(uc,JZo),e(uc,Lme),e(Lme,YZo),e(uc,KZo),e(uc,Bme),e(Bme,ZZo),e(uc,eer),e(br,oer),e(br,sy),e(sy,rer),e(sy,kme),e(kme,ter),e(sy,aer),e(br,ner),e(br,ft),g(ly,ft,null),e(ft,ser),e(ft,xme),e(xme,ler),e(ft,ier),e(ft,bc),e(bc,der),e(bc,Rme),e(Rme,cer),e(bc,fer),e(bc,Sme),e(Sme,mer),e(bc,ger),e(ft,her),e(ft,Pme),e(Pme,per),e(ft,_er),g(iy,ft,null),e(br,uer),e(br,bo),g(dy,bo,null),e(bo,ber),e(bo,$me),e($me,ver),e(bo,Ter),e(bo,gn),e(gn,Fer),e(gn,Ime),e(Ime,Cer),e(gn,Mer),e(gn,jme),e(jme,Eer),e(gn,yer),e(gn,Nme),e(Nme,wer),e(gn,Aer),e(bo,Ler),e(bo,pe),e(pe,iT),e(iT,Dme),e(Dme,Ber),e(iT,ker),e(iT,sq),e(sq,xer),e(iT,Rer),e(pe,Ser),e(pe,dT),e(dT,qme),e(qme,Per),e(dT,$er),e(dT,lq),e(lq,Ier),e(dT,jer),e(pe,Ner),e(pe,cT),e(cT,Gme),e(Gme,Der),e(cT,qer),e(cT,iq),e(iq,Ger),e(cT,Oer),e(pe,Xer),e(pe,fT),e(fT,Ome),e(Ome,zer),e(fT,Ver),e(fT,dq),e(dq,Wer),e(fT,Qer),e(pe,Her),e(pe,mT),e(mT,Xme),e(Xme,Uer),e(mT,Jer),e(mT,cq),e(cq,Yer),e(mT,Ker),e(pe,Zer),e(pe,gT),e(gT,zme),e(zme,eor),e(gT,oor),e(gT,fq),e(fq,ror),e(gT,tor),e(pe,aor),e(pe,hT),e(hT,Vme),e(Vme,nor),e(hT,sor),e(hT,mq),e(mq,lor),e(hT,ior),e(pe,dor),e(pe,pT),e(pT,Wme),e(Wme,cor),e(pT,mor),e(pT,gq),e(gq,gor),e(pT,hor),e(pe,por),e(pe,_T),e(_T,Qme),e(Qme,_or),e(_T,uor),e(_T,hq),e(hq,bor),e(_T,vor),e(pe,Tor),e(pe,uT),e(uT,Hme),e(Hme,For),e(uT,Cor),e(uT,pq),e(pq,Mor),e(uT,Eor),e(bo,yor),e(bo,Ume),e(Ume,wor),e(bo,Aor),g(cy,bo,null),b(d,HLe,u),b(d,vc,u),e(vc,bT),e(bT,Jme),g(fy,Jme,null),e(vc,Lor),e(vc,Yme),e(Yme,Bor),b(d,ULe,u),b(d,vr,u),g(my,vr,null),e(vr,kor),e(vr,Tc),e(Tc,xor),e(Tc,Kme),e(Kme,Ror),e(Tc,Sor),e(Tc,Zme),e(Zme,Por),e(Tc,$or),e(vr,Ior),e(vr,gy),e(gy,jor),e(gy,ege),e(ege,Nor),e(gy,Dor),e(vr,qor),e(vr,mt),g(hy,mt,null),e(mt,Gor),e(mt,oge),e(oge,Oor),e(mt,Xor),e(mt,Fc),e(Fc,zor),e(Fc,rge),e(rge,Vor),e(Fc,Wor),e(Fc,tge),e(tge,Qor),e(Fc,Hor),e(mt,Uor),e(mt,age),e(age,Jor),e(mt,Yor),g(py,mt,null),e(vr,Kor),e(vr,vo),g(_y,vo,null),e(vo,Zor),e(vo,nge),e(nge,err),e(vo,orr),e(vo,hn),e(hn,rrr),e(hn,sge),e(sge,trr),e(hn,arr),e(hn,lge),e(lge,nrr),e(hn,srr),e(hn,ige),e(ige,lrr),e(hn,irr),e(vo,drr),e(vo,X),e(X,vT),e(vT,dge),e(dge,crr),e(vT,frr),e(vT,_q),e(_q,mrr),e(vT,grr),e(X,hrr),e(X,TT),e(TT,cge),e(cge,prr),e(TT,_rr),e(TT,uq),e(uq,urr),e(TT,brr),e(X,vrr),e(X,FT),e(FT,fge),e(fge,Trr),e(FT,Frr),e(FT,bq),e(bq,Crr),e(FT,Mrr),e(X,Err),e(X,CT),e(CT,mge),e(mge,yrr),e(CT,wrr),e(CT,vq),e(vq,Arr),e(CT,Lrr),e(X,Brr),e(X,MT),e(MT,gge),e(gge,krr),e(MT,xrr),e(MT,Tq),e(Tq,Rrr),e(MT,Srr),e(X,Prr),e(X,ET),e(ET,hge),e(hge,$rr),e(ET,Irr),e(ET,Fq),e(Fq,jrr),e(ET,Nrr),e(X,Drr),e(X,yT),e(yT,pge),e(pge,qrr),e(yT,Grr),e(yT,Cq),e(Cq,Orr),e(yT,Xrr),e(X,zrr),e(X,wT),e(wT,_ge),e(_ge,Vrr),e(wT,Wrr),e(wT,Mq),e(Mq,Qrr),e(wT,Hrr),e(X,Urr),e(X,AT),e(AT,uge),e(uge,Jrr),e(AT,Yrr),e(AT,Eq),e(Eq,Krr),e(AT,Zrr),e(X,etr),e(X,LT),e(LT,bge),e(bge,otr),e(LT,rtr),e(LT,yq),e(yq,ttr),e(LT,atr),e(X,ntr),e(X,BT),e(BT,vge),e(vge,str),e(BT,ltr),e(BT,wq),e(wq,itr),e(BT,dtr),e(X,ctr),e(X,kT),e(kT,Tge),e(Tge,ftr),e(kT,mtr),e(kT,Aq),e(Aq,gtr),e(kT,htr),e(X,ptr),e(X,xT),e(xT,Fge),e(Fge,_tr),e(xT,utr),e(xT,Lq),e(Lq,btr),e(xT,vtr),e(X,Ttr),e(X,RT),e(RT,Cge),e(Cge,Ftr),e(RT,Ctr),e(RT,Bq),e(Bq,Mtr),e(RT,Etr),e(X,ytr),e(X,ST),e(ST,Mge),e(Mge,wtr),e(ST,Atr),e(ST,kq),e(kq,Ltr),e(ST,Btr),e(X,ktr),e(X,PT),e(PT,Ege),e(Ege,xtr),e(PT,Rtr),e(PT,xq),e(xq,Str),e(PT,Ptr),e(X,$tr),e(X,$T),e($T,yge),e(yge,Itr),e($T,jtr),e($T,Rq),e(Rq,Ntr),e($T,Dtr),e(X,qtr),e(X,IT),e(IT,wge),e(wge,Gtr),e(IT,Otr),e(IT,Sq),e(Sq,Xtr),e(IT,ztr),e(X,Vtr),e(X,jT),e(jT,Age),e(Age,Wtr),e(jT,Qtr),e(jT,Pq),e(Pq,Htr),e(jT,Utr),e(X,Jtr),e(X,NT),e(NT,Lge),e(Lge,Ytr),e(NT,Ktr),e(NT,$q),e($q,Ztr),e(NT,ear),e(X,oar),e(X,DT),e(DT,Bge),e(Bge,rar),e(DT,tar),e(DT,Iq),e(Iq,aar),e(DT,nar),e(X,sar),e(X,qT),e(qT,kge),e(kge,lar),e(qT,iar),e(qT,jq),e(jq,dar),e(qT,car),e(X,far),e(X,GT),e(GT,xge),e(xge,mar),e(GT,gar),e(GT,Nq),e(Nq,har),e(GT,par),e(X,_ar),e(X,OT),e(OT,Rge),e(Rge,uar),e(OT,bar),e(OT,Dq),e(Dq,Tar),e(OT,Far),e(X,Car),e(X,XT),e(XT,Sge),e(Sge,Mar),e(XT,Ear),e(XT,qq),e(qq,yar),e(XT,war),e(vo,Aar),e(vo,Pge),e(Pge,Lar),e(vo,Bar),g(uy,vo,null),b(d,JLe,u),b(d,Cc,u),e(Cc,zT),e(zT,$ge),g(by,$ge,null),e(Cc,kar),e(Cc,Ige),e(Ige,xar),b(d,YLe,u),b(d,Tr,u),g(vy,Tr,null),e(Tr,Rar),e(Tr,Mc),e(Mc,Sar),e(Mc,jge),e(jge,Par),e(Mc,$ar),e(Mc,Nge),e(Nge,Iar),e(Mc,jar),e(Tr,Nar),e(Tr,Ty),e(Ty,Dar),e(Ty,Dge),e(Dge,qar),e(Ty,Gar),e(Tr,Oar),e(Tr,gt),g(Fy,gt,null),e(gt,Xar),e(gt,qge),e(qge,zar),e(gt,Var),e(gt,Ec),e(Ec,War),e(Ec,Gge),e(Gge,Qar),e(Ec,Har),e(Ec,Oge),e(Oge,Uar),e(Ec,Jar),e(gt,Yar),e(gt,Xge),e(Xge,Kar),e(gt,Zar),g(Cy,gt,null),e(Tr,enr),e(Tr,To),g(My,To,null),e(To,onr),e(To,zge),e(zge,rnr),e(To,tnr),e(To,pn),e(pn,anr),e(pn,Vge),e(Vge,nnr),e(pn,snr),e(pn,Wge),e(Wge,lnr),e(pn,inr),e(pn,Qge),e(Qge,dnr),e(pn,cnr),e(To,fnr),e(To,te),e(te,VT),e(VT,Hge),e(Hge,mnr),e(VT,gnr),e(VT,Gq),e(Gq,hnr),e(VT,pnr),e(te,_nr),e(te,WT),e(WT,Uge),e(Uge,unr),e(WT,bnr),e(WT,Oq),e(Oq,vnr),e(WT,Tnr),e(te,Fnr),e(te,QT),e(QT,Jge),e(Jge,Cnr),e(QT,Mnr),e(QT,Xq),e(Xq,Enr),e(QT,ynr),e(te,wnr),e(te,HT),e(HT,Yge),e(Yge,Anr),e(HT,Lnr),e(HT,zq),e(zq,Bnr),e(HT,knr),e(te,xnr),e(te,UT),e(UT,Kge),e(Kge,Rnr),e(UT,Snr),e(UT,Vq),e(Vq,Pnr),e(UT,$nr),e(te,Inr),e(te,JT),e(JT,Zge),e(Zge,jnr),e(JT,Nnr),e(JT,Wq),e(Wq,Dnr),e(JT,qnr),e(te,Gnr),e(te,YT),e(YT,ehe),e(ehe,Onr),e(YT,Xnr),e(YT,Qq),e(Qq,znr),e(YT,Vnr),e(te,Wnr),e(te,KT),e(KT,ohe),e(ohe,Qnr),e(KT,Hnr),e(KT,Hq),e(Hq,Unr),e(KT,Jnr),e(te,Ynr),e(te,ZT),e(ZT,rhe),e(rhe,Knr),e(ZT,Znr),e(ZT,Uq),e(Uq,esr),e(ZT,osr),e(te,rsr),e(te,e7),e(e7,the),e(the,tsr),e(e7,asr),e(e7,Jq),e(Jq,nsr),e(e7,ssr),e(te,lsr),e(te,o7),e(o7,ahe),e(ahe,isr),e(o7,dsr),e(o7,Yq),e(Yq,csr),e(o7,fsr),e(te,msr),e(te,r7),e(r7,nhe),e(nhe,gsr),e(r7,hsr),e(r7,Kq),e(Kq,psr),e(r7,_sr),e(te,usr),e(te,t7),e(t7,she),e(she,bsr),e(t7,vsr),e(t7,Zq),e(Zq,Tsr),e(t7,Fsr),e(te,Csr),e(te,a7),e(a7,lhe),e(lhe,Msr),e(a7,Esr),e(a7,eG),e(eG,ysr),e(a7,wsr),e(te,Asr),e(te,n7),e(n7,ihe),e(ihe,Lsr),e(n7,Bsr),e(n7,oG),e(oG,ksr),e(n7,xsr),e(te,Rsr),e(te,s7),e(s7,dhe),e(dhe,Ssr),e(s7,Psr),e(s7,rG),e(rG,$sr),e(s7,Isr),e(te,jsr),e(te,l7),e(l7,che),e(che,Nsr),e(l7,Dsr),e(l7,tG),e(tG,qsr),e(l7,Gsr),e(To,Osr),e(To,fhe),e(fhe,Xsr),e(To,zsr),g(Ey,To,null),b(d,KLe,u),b(d,yc,u),e(yc,i7),e(i7,mhe),g(yy,mhe,null),e(yc,Vsr),e(yc,ghe),e(ghe,Wsr),b(d,ZLe,u),b(d,Fr,u),g(wy,Fr,null),e(Fr,Qsr),e(Fr,wc),e(wc,Hsr),e(wc,hhe),e(hhe,Usr),e(wc,Jsr),e(wc,phe),e(phe,Ysr),e(wc,Ksr),e(Fr,Zsr),e(Fr,Ay),e(Ay,elr),e(Ay,_he),e(_he,olr),e(Ay,rlr),e(Fr,tlr),e(Fr,ht),g(Ly,ht,null),e(ht,alr),e(ht,uhe),e(uhe,nlr),e(ht,slr),e(ht,Ac),e(Ac,llr),e(Ac,bhe),e(bhe,ilr),e(Ac,dlr),e(Ac,vhe),e(vhe,clr),e(Ac,flr),e(ht,mlr),e(ht,The),e(The,glr),e(ht,hlr),g(By,ht,null),e(Fr,plr),e(Fr,Fo),g(ky,Fo,null),e(Fo,_lr),e(Fo,Fhe),e(Fhe,ulr),e(Fo,blr),e(Fo,_n),e(_n,vlr),e(_n,Che),e(Che,Tlr),e(_n,Flr),e(_n,Mhe),e(Mhe,Clr),e(_n,Mlr),e(_n,Ehe),e(Ehe,Elr),e(_n,ylr),e(Fo,wlr),e(Fo,yhe),e(yhe,d7),e(d7,whe),e(whe,Alr),e(d7,Llr),e(d7,aG),e(aG,Blr),e(d7,klr),e(Fo,xlr),e(Fo,Ahe),e(Ahe,Rlr),e(Fo,Slr),g(xy,Fo,null),b(d,e9e,u),b(d,Lc,u),e(Lc,c7),e(c7,Lhe),g(Ry,Lhe,null),e(Lc,Plr),e(Lc,Bhe),e(Bhe,$lr),b(d,o9e,u),b(d,Cr,u),g(Sy,Cr,null),e(Cr,Ilr),e(Cr,Bc),e(Bc,jlr),e(Bc,khe),e(khe,Nlr),e(Bc,Dlr),e(Bc,xhe),e(xhe,qlr),e(Bc,Glr),e(Cr,Olr),e(Cr,Py),e(Py,Xlr),e(Py,Rhe),e(Rhe,zlr),e(Py,Vlr),e(Cr,Wlr),e(Cr,pt),g($y,pt,null),e(pt,Qlr),e(pt,She),e(She,Hlr),e(pt,Ulr),e(pt,kc),e(kc,Jlr),e(kc,Phe),e(Phe,Ylr),e(kc,Klr),e(kc,$he),e($he,Zlr),e(kc,eir),e(pt,oir),e(pt,Ihe),e(Ihe,rir),e(pt,tir),g(Iy,pt,null),e(Cr,air),e(Cr,Co),g(jy,Co,null),e(Co,nir),e(Co,jhe),e(jhe,sir),e(Co,lir),e(Co,un),e(un,iir),e(un,Nhe),e(Nhe,dir),e(un,cir),e(un,Dhe),e(Dhe,fir),e(un,mir),e(un,qhe),e(qhe,gir),e(un,hir),e(Co,pir),e(Co,K),e(K,f7),e(f7,Ghe),e(Ghe,_ir),e(f7,uir),e(f7,nG),e(nG,bir),e(f7,vir),e(K,Tir),e(K,m7),e(m7,Ohe),e(Ohe,Fir),e(m7,Cir),e(m7,sG),e(sG,Mir),e(m7,Eir),e(K,yir),e(K,g7),e(g7,Xhe),e(Xhe,wir),e(g7,Air),e(g7,lG),e(lG,Lir),e(g7,Bir),e(K,kir),e(K,h7),e(h7,zhe),e(zhe,xir),e(h7,Rir),e(h7,iG),e(iG,Sir),e(h7,Pir),e(K,$ir),e(K,p7),e(p7,Vhe),e(Vhe,Iir),e(p7,jir),e(p7,dG),e(dG,Nir),e(p7,Dir),e(K,qir),e(K,_7),e(_7,Whe),e(Whe,Gir),e(_7,Oir),e(_7,cG),e(cG,Xir),e(_7,zir),e(K,Vir),e(K,u7),e(u7,Qhe),e(Qhe,Wir),e(u7,Qir),e(u7,fG),e(fG,Hir),e(u7,Uir),e(K,Jir),e(K,b7),e(b7,Hhe),e(Hhe,Yir),e(b7,Kir),e(b7,mG),e(mG,Zir),e(b7,edr),e(K,odr),e(K,v7),e(v7,Uhe),e(Uhe,rdr),e(v7,tdr),e(v7,gG),e(gG,adr),e(v7,ndr),e(K,sdr),e(K,T7),e(T7,Jhe),e(Jhe,ldr),e(T7,idr),e(T7,hG),e(hG,ddr),e(T7,cdr),e(K,fdr),e(K,F7),e(F7,Yhe),e(Yhe,mdr),e(F7,gdr),e(F7,pG),e(pG,hdr),e(F7,pdr),e(K,_dr),e(K,C7),e(C7,Khe),e(Khe,udr),e(C7,bdr),e(C7,_G),e(_G,vdr),e(C7,Tdr),e(K,Fdr),e(K,M7),e(M7,Zhe),e(Zhe,Cdr),e(M7,Mdr),e(M7,uG),e(uG,Edr),e(M7,ydr),e(K,wdr),e(K,E7),e(E7,epe),e(epe,Adr),e(E7,Ldr),e(E7,bG),e(bG,Bdr),e(E7,kdr),e(K,xdr),e(K,y7),e(y7,ope),e(ope,Rdr),e(y7,Sdr),e(y7,vG),e(vG,Pdr),e(y7,$dr),e(K,Idr),e(K,w7),e(w7,rpe),e(rpe,jdr),e(w7,Ndr),e(w7,TG),e(TG,Ddr),e(w7,qdr),e(K,Gdr),e(K,A7),e(A7,tpe),e(tpe,Odr),e(A7,Xdr),e(A7,FG),e(FG,zdr),e(A7,Vdr),e(K,Wdr),e(K,L7),e(L7,ape),e(ape,Qdr),e(L7,Hdr),e(L7,CG),e(CG,Udr),e(L7,Jdr),e(K,Ydr),e(K,B7),e(B7,npe),e(npe,Kdr),e(B7,Zdr),e(B7,MG),e(MG,ecr),e(B7,ocr),e(K,rcr),e(K,k7),e(k7,spe),e(spe,tcr),e(k7,acr),e(k7,EG),e(EG,ncr),e(k7,scr),e(Co,lcr),e(Co,lpe),e(lpe,icr),e(Co,dcr),g(Ny,Co,null),b(d,r9e,u),b(d,xc,u),e(xc,x7),e(x7,ipe),g(Dy,ipe,null),e(xc,ccr),e(xc,dpe),e(dpe,fcr),b(d,t9e,u),b(d,Mr,u),g(qy,Mr,null),e(Mr,mcr),e(Mr,Rc),e(Rc,gcr),e(Rc,cpe),e(cpe,hcr),e(Rc,pcr),e(Rc,fpe),e(fpe,_cr),e(Rc,ucr),e(Mr,bcr),e(Mr,Gy),e(Gy,vcr),e(Gy,mpe),e(mpe,Tcr),e(Gy,Fcr),e(Mr,Ccr),e(Mr,_t),g(Oy,_t,null),e(_t,Mcr),e(_t,gpe),e(gpe,Ecr),e(_t,ycr),e(_t,Sc),e(Sc,wcr),e(Sc,hpe),e(hpe,Acr),e(Sc,Lcr),e(Sc,ppe),e(ppe,Bcr),e(Sc,kcr),e(_t,xcr),e(_t,_pe),e(_pe,Rcr),e(_t,Scr),g(Xy,_t,null),e(Mr,Pcr),e(Mr,Mo),g(zy,Mo,null),e(Mo,$cr),e(Mo,upe),e(upe,Icr),e(Mo,jcr),e(Mo,bn),e(bn,Ncr),e(bn,bpe),e(bpe,Dcr),e(bn,qcr),e(bn,vpe),e(vpe,Gcr),e(bn,Ocr),e(bn,Tpe),e(Tpe,Xcr),e(bn,zcr),e(Mo,Vcr),e(Mo,Z),e(Z,R7),e(R7,Fpe),e(Fpe,Wcr),e(R7,Qcr),e(R7,yG),e(yG,Hcr),e(R7,Ucr),e(Z,Jcr),e(Z,S7),e(S7,Cpe),e(Cpe,Ycr),e(S7,Kcr),e(S7,wG),e(wG,Zcr),e(S7,efr),e(Z,ofr),e(Z,P7),e(P7,Mpe),e(Mpe,rfr),e(P7,tfr),e(P7,AG),e(AG,afr),e(P7,nfr),e(Z,sfr),e(Z,$7),e($7,Epe),e(Epe,lfr),e($7,ifr),e($7,LG),e(LG,dfr),e($7,cfr),e(Z,ffr),e(Z,I7),e(I7,ype),e(ype,mfr),e(I7,gfr),e(I7,BG),e(BG,hfr),e(I7,pfr),e(Z,_fr),e(Z,j7),e(j7,wpe),e(wpe,ufr),e(j7,bfr),e(j7,kG),e(kG,vfr),e(j7,Tfr),e(Z,Ffr),e(Z,N7),e(N7,Ape),e(Ape,Cfr),e(N7,Mfr),e(N7,xG),e(xG,Efr),e(N7,yfr),e(Z,wfr),e(Z,D7),e(D7,Lpe),e(Lpe,Afr),e(D7,Lfr),e(D7,RG),e(RG,Bfr),e(D7,kfr),e(Z,xfr),e(Z,q7),e(q7,Bpe),e(Bpe,Rfr),e(q7,Sfr),e(q7,SG),e(SG,Pfr),e(q7,$fr),e(Z,Ifr),e(Z,G7),e(G7,kpe),e(kpe,jfr),e(G7,Nfr),e(G7,PG),e(PG,Dfr),e(G7,qfr),e(Z,Gfr),e(Z,O7),e(O7,xpe),e(xpe,Ofr),e(O7,Xfr),e(O7,$G),e($G,zfr),e(O7,Vfr),e(Z,Wfr),e(Z,X7),e(X7,Rpe),e(Rpe,Qfr),e(X7,Hfr),e(X7,IG),e(IG,Ufr),e(X7,Jfr),e(Z,Yfr),e(Z,z7),e(z7,Spe),e(Spe,Kfr),e(z7,Zfr),e(z7,jG),e(jG,emr),e(z7,omr),e(Z,rmr),e(Z,V7),e(V7,Ppe),e(Ppe,tmr),e(V7,amr),e(V7,NG),e(NG,nmr),e(V7,smr),e(Z,lmr),e(Z,W7),e(W7,$pe),e($pe,imr),e(W7,dmr),e(W7,DG),e(DG,cmr),e(W7,fmr),e(Z,mmr),e(Z,Q7),e(Q7,Ipe),e(Ipe,gmr),e(Q7,hmr),e(Q7,qG),e(qG,pmr),e(Q7,_mr),e(Z,umr),e(Z,H7),e(H7,jpe),e(jpe,bmr),e(H7,vmr),e(H7,GG),e(GG,Tmr),e(H7,Fmr),e(Z,Cmr),e(Z,U7),e(U7,Npe),e(Npe,Mmr),e(U7,Emr),e(U7,OG),e(OG,ymr),e(U7,wmr),e(Z,Amr),e(Z,J7),e(J7,Dpe),e(Dpe,Lmr),e(J7,Bmr),e(J7,XG),e(XG,kmr),e(J7,xmr),e(Mo,Rmr),e(Mo,qpe),e(qpe,Smr),e(Mo,Pmr),g(Vy,Mo,null),b(d,a9e,u),b(d,Pc,u),e(Pc,Y7),e(Y7,Gpe),g(Wy,Gpe,null),e(Pc,$mr),e(Pc,Ope),e(Ope,Imr),b(d,n9e,u),b(d,Er,u),g(Qy,Er,null),e(Er,jmr),e(Er,$c),e($c,Nmr),e($c,Xpe),e(Xpe,Dmr),e($c,qmr),e($c,zpe),e(zpe,Gmr),e($c,Omr),e(Er,Xmr),e(Er,Hy),e(Hy,zmr),e(Hy,Vpe),e(Vpe,Vmr),e(Hy,Wmr),e(Er,Qmr),e(Er,ut),g(Uy,ut,null),e(ut,Hmr),e(ut,Wpe),e(Wpe,Umr),e(ut,Jmr),e(ut,Ic),e(Ic,Ymr),e(Ic,Qpe),e(Qpe,Kmr),e(Ic,Zmr),e(Ic,Hpe),e(Hpe,egr),e(Ic,ogr),e(ut,rgr),e(ut,Upe),e(Upe,tgr),e(ut,agr),g(Jy,ut,null),e(Er,ngr),e(Er,Eo),g(Yy,Eo,null),e(Eo,sgr),e(Eo,Jpe),e(Jpe,lgr),e(Eo,igr),e(Eo,vn),e(vn,dgr),e(vn,Ype),e(Ype,cgr),e(vn,fgr),e(vn,Kpe),e(Kpe,mgr),e(vn,ggr),e(vn,Zpe),e(Zpe,hgr),e(vn,pgr),e(Eo,_gr),e(Eo,e_e),e(e_e,K7),e(K7,o_e),e(o_e,ugr),e(K7,bgr),e(K7,zG),e(zG,vgr),e(K7,Tgr),e(Eo,Fgr),e(Eo,r_e),e(r_e,Cgr),e(Eo,Mgr),g(Ky,Eo,null),b(d,s9e,u),b(d,jc,u),e(jc,Z7),e(Z7,t_e),g(Zy,t_e,null),e(jc,Egr),e(jc,a_e),e(a_e,ygr),b(d,l9e,u),b(d,yr,u),g(ew,yr,null),e(yr,wgr),e(yr,Nc),e(Nc,Agr),e(Nc,n_e),e(n_e,Lgr),e(Nc,Bgr),e(Nc,s_e),e(s_e,kgr),e(Nc,xgr),e(yr,Rgr),e(yr,ow),e(ow,Sgr),e(ow,l_e),e(l_e,Pgr),e(ow,$gr),e(yr,Igr),e(yr,bt),g(rw,bt,null),e(bt,jgr),e(bt,i_e),e(i_e,Ngr),e(bt,Dgr),e(bt,Dc),e(Dc,qgr),e(Dc,d_e),e(d_e,Ggr),e(Dc,Ogr),e(Dc,c_e),e(c_e,Xgr),e(Dc,zgr),e(bt,Vgr),e(bt,f_e),e(f_e,Wgr),e(bt,Qgr),g(tw,bt,null),e(yr,Hgr),e(yr,yo),g(aw,yo,null),e(yo,Ugr),e(yo,m_e),e(m_e,Jgr),e(yo,Ygr),e(yo,Tn),e(Tn,Kgr),e(Tn,g_e),e(g_e,Zgr),e(Tn,ehr),e(Tn,h_e),e(h_e,ohr),e(Tn,rhr),e(Tn,p_e),e(p_e,thr),e(Tn,ahr),e(yo,nhr),e(yo,__e),e(__e,e8),e(e8,u_e),e(u_e,shr),e(e8,lhr),e(e8,VG),e(VG,ihr),e(e8,dhr),e(yo,chr),e(yo,b_e),e(b_e,fhr),e(yo,mhr),g(nw,yo,null),b(d,i9e,u),b(d,qc,u),e(qc,o8),e(o8,v_e),g(sw,v_e,null),e(qc,ghr),e(qc,T_e),e(T_e,hhr),b(d,d9e,u),b(d,wr,u),g(lw,wr,null),e(wr,phr),e(wr,Gc),e(Gc,_hr),e(Gc,F_e),e(F_e,uhr),e(Gc,bhr),e(Gc,C_e),e(C_e,vhr),e(Gc,Thr),e(wr,Fhr),e(wr,iw),e(iw,Chr),e(iw,M_e),e(M_e,Mhr),e(iw,Ehr),e(wr,yhr),e(wr,vt),g(dw,vt,null),e(vt,whr),e(vt,E_e),e(E_e,Ahr),e(vt,Lhr),e(vt,Oc),e(Oc,Bhr),e(Oc,y_e),e(y_e,khr),e(Oc,xhr),e(Oc,w_e),e(w_e,Rhr),e(Oc,Shr),e(vt,Phr),e(vt,A_e),e(A_e,$hr),e(vt,Ihr),g(cw,vt,null),e(wr,jhr),e(wr,wo),g(fw,wo,null),e(wo,Nhr),e(wo,L_e),e(L_e,Dhr),e(wo,qhr),e(wo,Fn),e(Fn,Ghr),e(Fn,B_e),e(B_e,Ohr),e(Fn,Xhr),e(Fn,k_e),e(k_e,zhr),e(Fn,Vhr),e(Fn,x_e),e(x_e,Whr),e(Fn,Qhr),e(wo,Hhr),e(wo,V),e(V,r8),e(r8,R_e),e(R_e,Uhr),e(r8,Jhr),e(r8,WG),e(WG,Yhr),e(r8,Khr),e(V,Zhr),e(V,t8),e(t8,S_e),e(S_e,epr),e(t8,opr),e(t8,QG),e(QG,rpr),e(t8,tpr),e(V,apr),e(V,a8),e(a8,P_e),e(P_e,npr),e(a8,spr),e(a8,HG),e(HG,lpr),e(a8,ipr),e(V,dpr),e(V,n8),e(n8,$_e),e($_e,cpr),e(n8,fpr),e(n8,UG),e(UG,mpr),e(n8,gpr),e(V,hpr),e(V,s8),e(s8,I_e),e(I_e,ppr),e(s8,_pr),e(s8,JG),e(JG,upr),e(s8,bpr),e(V,vpr),e(V,l8),e(l8,j_e),e(j_e,Tpr),e(l8,Fpr),e(l8,YG),e(YG,Cpr),e(l8,Mpr),e(V,Epr),e(V,i8),e(i8,N_e),e(N_e,ypr),e(i8,wpr),e(i8,KG),e(KG,Apr),e(i8,Lpr),e(V,Bpr),e(V,d8),e(d8,D_e),e(D_e,kpr),e(d8,xpr),e(d8,ZG),e(ZG,Rpr),e(d8,Spr),e(V,Ppr),e(V,c8),e(c8,q_e),e(q_e,$pr),e(c8,Ipr),e(c8,eO),e(eO,jpr),e(c8,Npr),e(V,Dpr),e(V,f8),e(f8,G_e),e(G_e,qpr),e(f8,Gpr),e(f8,oO),e(oO,Opr),e(f8,Xpr),e(V,zpr),e(V,m8),e(m8,O_e),e(O_e,Vpr),e(m8,Wpr),e(m8,rO),e(rO,Qpr),e(m8,Hpr),e(V,Upr),e(V,g8),e(g8,X_e),e(X_e,Jpr),e(g8,Ypr),e(g8,tO),e(tO,Kpr),e(g8,Zpr),e(V,e_r),e(V,h8),e(h8,z_e),e(z_e,o_r),e(h8,r_r),e(h8,aO),e(aO,t_r),e(h8,a_r),e(V,n_r),e(V,p8),e(p8,V_e),e(V_e,s_r),e(p8,l_r),e(p8,nO),e(nO,i_r),e(p8,d_r),e(V,c_r),e(V,_8),e(_8,W_e),e(W_e,f_r),e(_8,m_r),e(_8,sO),e(sO,g_r),e(_8,h_r),e(V,p_r),e(V,u8),e(u8,Q_e),e(Q_e,__r),e(u8,u_r),e(u8,lO),e(lO,b_r),e(u8,v_r),e(V,T_r),e(V,b8),e(b8,H_e),e(H_e,F_r),e(b8,C_r),e(b8,iO),e(iO,M_r),e(b8,E_r),e(V,y_r),e(V,v8),e(v8,U_e),e(U_e,w_r),e(v8,A_r),e(v8,dO),e(dO,L_r),e(v8,B_r),e(V,k_r),e(V,T8),e(T8,J_e),e(J_e,x_r),e(T8,R_r),e(T8,cO),e(cO,S_r),e(T8,P_r),e(V,$_r),e(V,F8),e(F8,Y_e),e(Y_e,I_r),e(F8,j_r),e(F8,fO),e(fO,N_r),e(F8,D_r),e(V,q_r),e(V,C8),e(C8,K_e),e(K_e,G_r),e(C8,O_r),e(C8,mO),e(mO,X_r),e(C8,z_r),e(V,V_r),e(V,M8),e(M8,Z_e),e(Z_e,W_r),e(M8,Q_r),e(M8,gO),e(gO,H_r),e(M8,U_r),e(V,J_r),e(V,E8),e(E8,eue),e(eue,Y_r),e(E8,K_r),e(E8,hO),e(hO,Z_r),e(E8,eur),e(V,our),e(V,y8),e(y8,oue),e(oue,rur),e(y8,tur),e(y8,pO),e(pO,aur),e(y8,nur),e(wo,sur),e(wo,rue),e(rue,lur),e(wo,iur),g(mw,wo,null),b(d,c9e,u),b(d,Xc,u),e(Xc,w8),e(w8,tue),g(gw,tue,null),e(Xc,dur),e(Xc,aue),e(aue,cur),b(d,f9e,u),b(d,Ar,u),g(hw,Ar,null),e(Ar,fur),e(Ar,zc),e(zc,mur),e(zc,nue),e(nue,gur),e(zc,hur),e(zc,sue),e(sue,pur),e(zc,_ur),e(Ar,uur),e(Ar,pw),e(pw,bur),e(pw,lue),e(lue,vur),e(pw,Tur),e(Ar,Fur),e(Ar,Tt),g(_w,Tt,null),e(Tt,Cur),e(Tt,iue),e(iue,Mur),e(Tt,Eur),e(Tt,Vc),e(Vc,yur),e(Vc,due),e(due,wur),e(Vc,Aur),e(Vc,cue),e(cue,Lur),e(Vc,Bur),e(Tt,kur),e(Tt,fue),e(fue,xur),e(Tt,Rur),g(uw,Tt,null),e(Ar,Sur),e(Ar,Ao),g(bw,Ao,null),e(Ao,Pur),e(Ao,mue),e(mue,$ur),e(Ao,Iur),e(Ao,Cn),e(Cn,jur),e(Cn,gue),e(gue,Nur),e(Cn,Dur),e(Cn,hue),e(hue,qur),e(Cn,Gur),e(Cn,pue),e(pue,Our),e(Cn,Xur),e(Ao,zur),e(Ao,Mn),e(Mn,A8),e(A8,_ue),e(_ue,Vur),e(A8,Wur),e(A8,_O),e(_O,Qur),e(A8,Hur),e(Mn,Uur),e(Mn,L8),e(L8,uue),e(uue,Jur),e(L8,Yur),e(L8,uO),e(uO,Kur),e(L8,Zur),e(Mn,e1r),e(Mn,B8),e(B8,bue),e(bue,o1r),e(B8,r1r),e(B8,bO),e(bO,t1r),e(B8,a1r),e(Mn,n1r),e(Mn,k8),e(k8,vue),e(vue,s1r),e(k8,l1r),e(k8,vO),e(vO,i1r),e(k8,d1r),e(Ao,c1r),e(Ao,Tue),e(Tue,f1r),e(Ao,m1r),g(vw,Ao,null),b(d,m9e,u),b(d,Wc,u),e(Wc,x8),e(x8,Fue),g(Tw,Fue,null),e(Wc,g1r),e(Wc,Cue),e(Cue,h1r),b(d,g9e,u),b(d,Lr,u),g(Fw,Lr,null),e(Lr,p1r),e(Lr,Qc),e(Qc,_1r),e(Qc,Mue),e(Mue,u1r),e(Qc,b1r),e(Qc,Eue),e(Eue,v1r),e(Qc,T1r),e(Lr,F1r),e(Lr,Cw),e(Cw,C1r),e(Cw,yue),e(yue,M1r),e(Cw,E1r),e(Lr,y1r),e(Lr,Ft),g(Mw,Ft,null),e(Ft,w1r),e(Ft,wue),e(wue,A1r),e(Ft,L1r),e(Ft,Hc),e(Hc,B1r),e(Hc,Aue),e(Aue,k1r),e(Hc,x1r),e(Hc,Lue),e(Lue,R1r),e(Hc,S1r),e(Ft,P1r),e(Ft,Bue),e(Bue,$1r),e(Ft,I1r),g(Ew,Ft,null),e(Lr,j1r),e(Lr,Lo),g(yw,Lo,null),e(Lo,N1r),e(Lo,kue),e(kue,D1r),e(Lo,q1r),e(Lo,En),e(En,G1r),e(En,xue),e(xue,O1r),e(En,X1r),e(En,Rue),e(Rue,z1r),e(En,V1r),e(En,Sue),e(Sue,W1r),e(En,Q1r),e(Lo,H1r),e(Lo,fe),e(fe,R8),e(R8,Pue),e(Pue,U1r),e(R8,J1r),e(R8,TO),e(TO,Y1r),e(R8,K1r),e(fe,Z1r),e(fe,S8),e(S8,$ue),e($ue,ebr),e(S8,obr),e(S8,FO),e(FO,rbr),e(S8,tbr),e(fe,abr),e(fe,P8),e(P8,Iue),e(Iue,nbr),e(P8,sbr),e(P8,CO),e(CO,lbr),e(P8,ibr),e(fe,dbr),e(fe,$8),e($8,jue),e(jue,cbr),e($8,fbr),e($8,MO),e(MO,mbr),e($8,gbr),e(fe,hbr),e(fe,I8),e(I8,Nue),e(Nue,pbr),e(I8,_br),e(I8,EO),e(EO,ubr),e(I8,bbr),e(fe,vbr),e(fe,j8),e(j8,Due),e(Due,Tbr),e(j8,Fbr),e(j8,yO),e(yO,Cbr),e(j8,Mbr),e(fe,Ebr),e(fe,N8),e(N8,que),e(que,ybr),e(N8,wbr),e(N8,wO),e(wO,Abr),e(N8,Lbr),e(fe,Bbr),e(fe,D8),e(D8,Gue),e(Gue,kbr),e(D8,xbr),e(D8,AO),e(AO,Rbr),e(D8,Sbr),e(fe,Pbr),e(fe,q8),e(q8,Oue),e(Oue,$br),e(q8,Ibr),e(q8,LO),e(LO,jbr),e(q8,Nbr),e(fe,Dbr),e(fe,G8),e(G8,Xue),e(Xue,qbr),e(G8,Gbr),e(G8,BO),e(BO,Obr),e(G8,Xbr),e(fe,zbr),e(fe,O8),e(O8,zue),e(zue,Vbr),e(O8,Wbr),e(O8,kO),e(kO,Qbr),e(O8,Hbr),e(Lo,Ubr),e(Lo,Vue),e(Vue,Jbr),e(Lo,Ybr),g(ww,Lo,null),b(d,h9e,u),b(d,Uc,u),e(Uc,X8),e(X8,Wue),g(Aw,Wue,null),e(Uc,Kbr),e(Uc,Que),e(Que,Zbr),b(d,p9e,u),b(d,Br,u),g(Lw,Br,null),e(Br,e5r),e(Br,Jc),e(Jc,o5r),e(Jc,Hue),e(Hue,r5r),e(Jc,t5r),e(Jc,Uue),e(Uue,a5r),e(Jc,n5r),e(Br,s5r),e(Br,Bw),e(Bw,l5r),e(Bw,Jue),e(Jue,i5r),e(Bw,d5r),e(Br,c5r),e(Br,Ct),g(kw,Ct,null),e(Ct,f5r),e(Ct,Yue),e(Yue,m5r),e(Ct,g5r),e(Ct,Yc),e(Yc,h5r),e(Yc,Kue),e(Kue,p5r),e(Yc,_5r),e(Yc,Zue),e(Zue,u5r),e(Yc,b5r),e(Ct,v5r),e(Ct,e1e),e(e1e,T5r),e(Ct,F5r),g(xw,Ct,null),e(Br,C5r),e(Br,Bo),g(Rw,Bo,null),e(Bo,M5r),e(Bo,o1e),e(o1e,E5r),e(Bo,y5r),e(Bo,yn),e(yn,w5r),e(yn,r1e),e(r1e,A5r),e(yn,L5r),e(yn,t1e),e(t1e,B5r),e(yn,k5r),e(yn,a1e),e(a1e,x5r),e(yn,R5r),e(Bo,S5r),e(Bo,ve),e(ve,z8),e(z8,n1e),e(n1e,P5r),e(z8,$5r),e(z8,xO),e(xO,I5r),e(z8,j5r),e(ve,N5r),e(ve,V8),e(V8,s1e),e(s1e,D5r),e(V8,q5r),e(V8,RO),e(RO,G5r),e(V8,O5r),e(ve,X5r),e(ve,W8),e(W8,l1e),e(l1e,z5r),e(W8,V5r),e(W8,SO),e(SO,W5r),e(W8,Q5r),e(ve,H5r),e(ve,Q8),e(Q8,i1e),e(i1e,U5r),e(Q8,J5r),e(Q8,PO),e(PO,Y5r),e(Q8,K5r),e(ve,Z5r),e(ve,H8),e(H8,d1e),e(d1e,e2r),e(H8,o2r),e(H8,$O),e($O,r2r),e(H8,t2r),e(ve,a2r),e(ve,U8),e(U8,c1e),e(c1e,n2r),e(U8,s2r),e(U8,IO),e(IO,l2r),e(U8,i2r),e(ve,d2r),e(ve,J8),e(J8,f1e),e(f1e,c2r),e(J8,f2r),e(J8,jO),e(jO,m2r),e(J8,g2r),e(ve,h2r),e(ve,Y8),e(Y8,m1e),e(m1e,p2r),e(Y8,_2r),e(Y8,NO),e(NO,u2r),e(Y8,b2r),e(ve,v2r),e(ve,K8),e(K8,g1e),e(g1e,T2r),e(K8,F2r),e(K8,DO),e(DO,C2r),e(K8,M2r),e(Bo,E2r),e(Bo,h1e),e(h1e,y2r),e(Bo,w2r),g(Sw,Bo,null),b(d,_9e,u),b(d,Kc,u),e(Kc,Z8),e(Z8,p1e),g(Pw,p1e,null),e(Kc,A2r),e(Kc,_1e),e(_1e,L2r),b(d,u9e,u),b(d,kr,u),g($w,kr,null),e(kr,B2r),e(kr,Zc),e(Zc,k2r),e(Zc,u1e),e(u1e,x2r),e(Zc,R2r),e(Zc,b1e),e(b1e,S2r),e(Zc,P2r),e(kr,$2r),e(kr,Iw),e(Iw,I2r),e(Iw,v1e),e(v1e,j2r),e(Iw,N2r),e(kr,D2r),e(kr,Mt),g(jw,Mt,null),e(Mt,q2r),e(Mt,T1e),e(T1e,G2r),e(Mt,O2r),e(Mt,ef),e(ef,X2r),e(ef,F1e),e(F1e,z2r),e(ef,V2r),e(ef,C1e),e(C1e,W2r),e(ef,Q2r),e(Mt,H2r),e(Mt,M1e),e(M1e,U2r),e(Mt,J2r),g(Nw,Mt,null),e(kr,Y2r),e(kr,ko),g(Dw,ko,null),e(ko,K2r),e(ko,E1e),e(E1e,Z2r),e(ko,evr),e(ko,wn),e(wn,ovr),e(wn,y1e),e(y1e,rvr),e(wn,tvr),e(wn,w1e),e(w1e,avr),e(wn,nvr),e(wn,A1e),e(A1e,svr),e(wn,lvr),e(ko,ivr),e(ko,Te),e(Te,eF),e(eF,L1e),e(L1e,dvr),e(eF,cvr),e(eF,qO),e(qO,fvr),e(eF,mvr),e(Te,gvr),e(Te,oF),e(oF,B1e),e(B1e,hvr),e(oF,pvr),e(oF,GO),e(GO,_vr),e(oF,uvr),e(Te,bvr),e(Te,rF),e(rF,k1e),e(k1e,vvr),e(rF,Tvr),e(rF,OO),e(OO,Fvr),e(rF,Cvr),e(Te,Mvr),e(Te,tF),e(tF,x1e),e(x1e,Evr),e(tF,yvr),e(tF,XO),e(XO,wvr),e(tF,Avr),e(Te,Lvr),e(Te,aF),e(aF,R1e),e(R1e,Bvr),e(aF,kvr),e(aF,zO),e(zO,xvr),e(aF,Rvr),e(Te,Svr),e(Te,nF),e(nF,S1e),e(S1e,Pvr),e(nF,$vr),e(nF,VO),e(VO,Ivr),e(nF,jvr),e(Te,Nvr),e(Te,sF),e(sF,P1e),e(P1e,Dvr),e(sF,qvr),e(sF,WO),e(WO,Gvr),e(sF,Ovr),e(Te,Xvr),e(Te,lF),e(lF,$1e),e($1e,zvr),e(lF,Vvr),e(lF,QO),e(QO,Wvr),e(lF,Qvr),e(Te,Hvr),e(Te,iF),e(iF,I1e),e(I1e,Uvr),e(iF,Jvr),e(iF,HO),e(HO,Yvr),e(iF,Kvr),e(ko,Zvr),e(ko,j1e),e(j1e,e6r),e(ko,o6r),g(qw,ko,null),b(d,b9e,u),b(d,of,u),e(of,dF),e(dF,N1e),g(Gw,N1e,null),e(of,r6r),e(of,D1e),e(D1e,t6r),b(d,v9e,u),b(d,xr,u),g(Ow,xr,null),e(xr,a6r),e(xr,rf),e(rf,n6r),e(rf,q1e),e(q1e,s6r),e(rf,l6r),e(rf,G1e),e(G1e,i6r),e(rf,d6r),e(xr,c6r),e(xr,Xw),e(Xw,f6r),e(Xw,O1e),e(O1e,m6r),e(Xw,g6r),e(xr,h6r),e(xr,Et),g(zw,Et,null),e(Et,p6r),e(Et,X1e),e(X1e,_6r),e(Et,u6r),e(Et,tf),e(tf,b6r),e(tf,z1e),e(z1e,v6r),e(tf,T6r),e(tf,V1e),e(V1e,F6r),e(tf,C6r),e(Et,M6r),e(Et,W1e),e(W1e,E6r),e(Et,y6r),g(Vw,Et,null),e(xr,w6r),e(xr,xo),g(Ww,xo,null),e(xo,A6r),e(xo,Q1e),e(Q1e,L6r),e(xo,B6r),e(xo,An),e(An,k6r),e(An,H1e),e(H1e,x6r),e(An,R6r),e(An,U1e),e(U1e,S6r),e(An,P6r),e(An,J1e),e(J1e,$6r),e(An,I6r),e(xo,j6r),e(xo,Fe),e(Fe,cF),e(cF,Y1e),e(Y1e,N6r),e(cF,D6r),e(cF,UO),e(UO,q6r),e(cF,G6r),e(Fe,O6r),e(Fe,fF),e(fF,K1e),e(K1e,X6r),e(fF,z6r),e(fF,JO),e(JO,V6r),e(fF,W6r),e(Fe,Q6r),e(Fe,mF),e(mF,Z1e),e(Z1e,H6r),e(mF,U6r),e(mF,YO),e(YO,J6r),e(mF,Y6r),e(Fe,K6r),e(Fe,gF),e(gF,ebe),e(ebe,Z6r),e(gF,eTr),e(gF,KO),e(KO,oTr),e(gF,rTr),e(Fe,tTr),e(Fe,hF),e(hF,obe),e(obe,aTr),e(hF,nTr),e(hF,ZO),e(ZO,sTr),e(hF,lTr),e(Fe,iTr),e(Fe,pF),e(pF,rbe),e(rbe,dTr),e(pF,cTr),e(pF,eX),e(eX,fTr),e(pF,mTr),e(Fe,gTr),e(Fe,_F),e(_F,tbe),e(tbe,hTr),e(_F,pTr),e(_F,oX),e(oX,_Tr),e(_F,uTr),e(Fe,bTr),e(Fe,uF),e(uF,abe),e(abe,vTr),e(uF,TTr),e(uF,rX),e(rX,FTr),e(uF,CTr),e(Fe,MTr),e(Fe,bF),e(bF,nbe),e(nbe,ETr),e(bF,yTr),e(bF,tX),e(tX,wTr),e(bF,ATr),e(xo,LTr),e(xo,sbe),e(sbe,BTr),e(xo,kTr),g(Qw,xo,null),b(d,T9e,u),b(d,af,u),e(af,vF),e(vF,lbe),g(Hw,lbe,null),e(af,xTr),e(af,ibe),e(ibe,RTr),b(d,F9e,u),b(d,Rr,u),g(Uw,Rr,null),e(Rr,STr),e(Rr,nf),e(nf,PTr),e(nf,dbe),e(dbe,$Tr),e(nf,ITr),e(nf,cbe),e(cbe,jTr),e(nf,NTr),e(Rr,DTr),e(Rr,Jw),e(Jw,qTr),e(Jw,fbe),e(fbe,GTr),e(Jw,OTr),e(Rr,XTr),e(Rr,yt),g(Yw,yt,null),e(yt,zTr),e(yt,mbe),e(mbe,VTr),e(yt,WTr),e(yt,sf),e(sf,QTr),e(sf,gbe),e(gbe,HTr),e(sf,UTr),e(sf,hbe),e(hbe,JTr),e(sf,YTr),e(yt,KTr),e(yt,pbe),e(pbe,ZTr),e(yt,e7r),g(Kw,yt,null),e(Rr,o7r),e(Rr,Ro),g(Zw,Ro,null),e(Ro,r7r),e(Ro,_be),e(_be,t7r),e(Ro,a7r),e(Ro,Ln),e(Ln,n7r),e(Ln,ube),e(ube,s7r),e(Ln,l7r),e(Ln,bbe),e(bbe,i7r),e(Ln,d7r),e(Ln,vbe),e(vbe,c7r),e(Ln,f7r),e(Ro,m7r),e(Ro,Ce),e(Ce,TF),e(TF,Tbe),e(Tbe,g7r),e(TF,h7r),e(TF,aX),e(aX,p7r),e(TF,_7r),e(Ce,u7r),e(Ce,FF),e(FF,Fbe),e(Fbe,b7r),e(FF,v7r),e(FF,nX),e(nX,T7r),e(FF,F7r),e(Ce,C7r),e(Ce,CF),e(CF,Cbe),e(Cbe,M7r),e(CF,E7r),e(CF,sX),e(sX,y7r),e(CF,w7r),e(Ce,A7r),e(Ce,MF),e(MF,Mbe),e(Mbe,L7r),e(MF,B7r),e(MF,lX),e(lX,k7r),e(MF,x7r),e(Ce,R7r),e(Ce,EF),e(EF,Ebe),e(Ebe,S7r),e(EF,P7r),e(EF,iX),e(iX,$7r),e(EF,I7r),e(Ce,j7r),e(Ce,yF),e(yF,ybe),e(ybe,N7r),e(yF,D7r),e(yF,dX),e(dX,q7r),e(yF,G7r),e(Ce,O7r),e(Ce,wF),e(wF,wbe),e(wbe,X7r),e(wF,z7r),e(wF,cX),e(cX,V7r),e(wF,W7r),e(Ce,Q7r),e(Ce,AF),e(AF,Abe),e(Abe,H7r),e(AF,U7r),e(AF,fX),e(fX,J7r),e(AF,Y7r),e(Ce,K7r),e(Ce,LF),e(LF,Lbe),e(Lbe,Z7r),e(LF,e8r),e(LF,mX),e(mX,o8r),e(LF,r8r),e(Ro,t8r),e(Ro,Bbe),e(Bbe,a8r),e(Ro,n8r),g(eA,Ro,null),b(d,C9e,u),b(d,lf,u),e(lf,BF),e(BF,kbe),g(oA,kbe,null),e(lf,s8r),e(lf,xbe),e(xbe,l8r),b(d,M9e,u),b(d,Sr,u),g(rA,Sr,null),e(Sr,i8r),e(Sr,df),e(df,d8r),e(df,Rbe),e(Rbe,c8r),e(df,f8r),e(df,Sbe),e(Sbe,m8r),e(df,g8r),e(Sr,h8r),e(Sr,tA),e(tA,p8r),e(tA,Pbe),e(Pbe,_8r),e(tA,u8r),e(Sr,b8r),e(Sr,wt),g(aA,wt,null),e(wt,v8r),e(wt,$be),e($be,T8r),e(wt,F8r),e(wt,cf),e(cf,C8r),e(cf,Ibe),e(Ibe,M8r),e(cf,E8r),e(cf,jbe),e(jbe,y8r),e(cf,w8r),e(wt,A8r),e(wt,Nbe),e(Nbe,L8r),e(wt,B8r),g(nA,wt,null),e(Sr,k8r),e(Sr,So),g(sA,So,null),e(So,x8r),e(So,Dbe),e(Dbe,R8r),e(So,S8r),e(So,Bn),e(Bn,P8r),e(Bn,qbe),e(qbe,$8r),e(Bn,I8r),e(Bn,Gbe),e(Gbe,j8r),e(Bn,N8r),e(Bn,Obe),e(Obe,D8r),e(Bn,q8r),e(So,G8r),e(So,so),e(so,kF),e(kF,Xbe),e(Xbe,O8r),e(kF,X8r),e(kF,gX),e(gX,z8r),e(kF,V8r),e(so,W8r),e(so,xF),e(xF,zbe),e(zbe,Q8r),e(xF,H8r),e(xF,hX),e(hX,U8r),e(xF,J8r),e(so,Y8r),e(so,RF),e(RF,Vbe),e(Vbe,K8r),e(RF,Z8r),e(RF,pX),e(pX,eFr),e(RF,oFr),e(so,rFr),e(so,SF),e(SF,Wbe),e(Wbe,tFr),e(SF,aFr),e(SF,_X),e(_X,nFr),e(SF,sFr),e(so,lFr),e(so,PF),e(PF,Qbe),e(Qbe,iFr),e(PF,dFr),e(PF,uX),e(uX,cFr),e(PF,fFr),e(so,mFr),e(so,$F),e($F,Hbe),e(Hbe,gFr),e($F,hFr),e($F,bX),e(bX,pFr),e($F,_Fr),e(so,uFr),e(so,IF),e(IF,Ube),e(Ube,bFr),e(IF,vFr),e(IF,vX),e(vX,TFr),e(IF,FFr),e(So,CFr),e(So,Jbe),e(Jbe,MFr),e(So,EFr),g(lA,So,null),b(d,E9e,u),b(d,ff,u),e(ff,jF),e(jF,Ybe),g(iA,Ybe,null),e(ff,yFr),e(ff,Kbe),e(Kbe,wFr),b(d,y9e,u),b(d,Pr,u),g(dA,Pr,null),e(Pr,AFr),e(Pr,mf),e(mf,LFr),e(mf,Zbe),e(Zbe,BFr),e(mf,kFr),e(mf,e5e),e(e5e,xFr),e(mf,RFr),e(Pr,SFr),e(Pr,cA),e(cA,PFr),e(cA,o5e),e(o5e,$Fr),e(cA,IFr),e(Pr,jFr),e(Pr,At),g(fA,At,null),e(At,NFr),e(At,r5e),e(r5e,DFr),e(At,qFr),e(At,gf),e(gf,GFr),e(gf,t5e),e(t5e,OFr),e(gf,XFr),e(gf,a5e),e(a5e,zFr),e(gf,VFr),e(At,WFr),e(At,n5e),e(n5e,QFr),e(At,HFr),g(mA,At,null),e(Pr,UFr),e(Pr,Po),g(gA,Po,null),e(Po,JFr),e(Po,s5e),e(s5e,YFr),e(Po,KFr),e(Po,kn),e(kn,ZFr),e(kn,l5e),e(l5e,eCr),e(kn,oCr),e(kn,i5e),e(i5e,rCr),e(kn,tCr),e(kn,d5e),e(d5e,aCr),e(kn,nCr),e(Po,sCr),e(Po,lo),e(lo,NF),e(NF,c5e),e(c5e,lCr),e(NF,iCr),e(NF,TX),e(TX,dCr),e(NF,cCr),e(lo,fCr),e(lo,DF),e(DF,f5e),e(f5e,mCr),e(DF,gCr),e(DF,FX),e(FX,hCr),e(DF,pCr),e(lo,_Cr),e(lo,qF),e(qF,m5e),e(m5e,uCr),e(qF,bCr),e(qF,CX),e(CX,vCr),e(qF,TCr),e(lo,FCr),e(lo,GF),e(GF,g5e),e(g5e,CCr),e(GF,MCr),e(GF,MX),e(MX,ECr),e(GF,yCr),e(lo,wCr),e(lo,OF),e(OF,h5e),e(h5e,ACr),e(OF,LCr),e(OF,EX),e(EX,BCr),e(OF,kCr),e(lo,xCr),e(lo,XF),e(XF,p5e),e(p5e,RCr),e(XF,SCr),e(XF,yX),e(yX,PCr),e(XF,$Cr),e(lo,ICr),e(lo,zF),e(zF,_5e),e(_5e,jCr),e(zF,NCr),e(zF,wX),e(wX,DCr),e(zF,qCr),e(Po,GCr),e(Po,u5e),e(u5e,OCr),e(Po,XCr),g(hA,Po,null),b(d,w9e,u),b(d,hf,u),e(hf,VF),e(VF,b5e),g(pA,b5e,null),e(hf,zCr),e(hf,v5e),e(v5e,VCr),b(d,A9e,u),b(d,$r,u),g(_A,$r,null),e($r,WCr),e($r,pf),e(pf,QCr),e(pf,T5e),e(T5e,HCr),e(pf,UCr),e(pf,F5e),e(F5e,JCr),e(pf,YCr),e($r,KCr),e($r,uA),e(uA,ZCr),e(uA,C5e),e(C5e,e4r),e(uA,o4r),e($r,r4r),e($r,Lt),g(bA,Lt,null),e(Lt,t4r),e(Lt,M5e),e(M5e,a4r),e(Lt,n4r),e(Lt,_f),e(_f,s4r),e(_f,E5e),e(E5e,l4r),e(_f,i4r),e(_f,y5e),e(y5e,d4r),e(_f,c4r),e(Lt,f4r),e(Lt,w5e),e(w5e,m4r),e(Lt,g4r),g(vA,Lt,null),e($r,h4r),e($r,$o),g(TA,$o,null),e($o,p4r),e($o,A5e),e(A5e,_4r),e($o,u4r),e($o,xn),e(xn,b4r),e(xn,L5e),e(L5e,v4r),e(xn,T4r),e(xn,B5e),e(B5e,F4r),e(xn,C4r),e(xn,k5e),e(k5e,M4r),e(xn,E4r),e($o,y4r),e($o,x5e),e(x5e,WF),e(WF,R5e),e(R5e,w4r),e(WF,A4r),e(WF,AX),e(AX,L4r),e(WF,B4r),e($o,k4r),e($o,S5e),e(S5e,x4r),e($o,R4r),g(FA,$o,null),b(d,L9e,u),b(d,uf,u),e(uf,QF),e(QF,P5e),g(CA,P5e,null),e(uf,S4r),e(uf,$5e),e($5e,P4r),b(d,B9e,u),b(d,Ir,u),g(MA,Ir,null),e(Ir,$4r),e(Ir,bf),e(bf,I4r),e(bf,I5e),e(I5e,j4r),e(bf,N4r),e(bf,j5e),e(j5e,D4r),e(bf,q4r),e(Ir,G4r),e(Ir,EA),e(EA,O4r),e(EA,N5e),e(N5e,X4r),e(EA,z4r),e(Ir,V4r),e(Ir,Bt),g(yA,Bt,null),e(Bt,W4r),e(Bt,D5e),e(D5e,Q4r),e(Bt,H4r),e(Bt,vf),e(vf,U4r),e(vf,q5e),e(q5e,J4r),e(vf,Y4r),e(vf,G5e),e(G5e,K4r),e(vf,Z4r),e(Bt,eMr),e(Bt,O5e),e(O5e,oMr),e(Bt,rMr),g(wA,Bt,null),e(Ir,tMr),e(Ir,Io),g(AA,Io,null),e(Io,aMr),e(Io,X5e),e(X5e,nMr),e(Io,sMr),e(Io,Rn),e(Rn,lMr),e(Rn,z5e),e(z5e,iMr),e(Rn,dMr),e(Rn,V5e),e(V5e,cMr),e(Rn,fMr),e(Rn,W5e),e(W5e,mMr),e(Rn,gMr),e(Io,hMr),e(Io,LA),e(LA,HF),e(HF,Q5e),e(Q5e,pMr),e(HF,_Mr),e(HF,LX),e(LX,uMr),e(HF,bMr),e(LA,vMr),e(LA,UF),e(UF,H5e),e(H5e,TMr),e(UF,FMr),e(UF,BX),e(BX,CMr),e(UF,MMr),e(Io,EMr),e(Io,U5e),e(U5e,yMr),e(Io,wMr),g(BA,Io,null),b(d,k9e,u),b(d,Tf,u),e(Tf,JF),e(JF,J5e),g(kA,J5e,null),e(Tf,AMr),e(Tf,Y5e),e(Y5e,LMr),b(d,x9e,u),b(d,jr,u),g(xA,jr,null),e(jr,BMr),e(jr,Ff),e(Ff,kMr),e(Ff,K5e),e(K5e,xMr),e(Ff,RMr),e(Ff,Z5e),e(Z5e,SMr),e(Ff,PMr),e(jr,$Mr),e(jr,RA),e(RA,IMr),e(RA,e2e),e(e2e,jMr),e(RA,NMr),e(jr,DMr),e(jr,kt),g(SA,kt,null),e(kt,qMr),e(kt,o2e),e(o2e,GMr),e(kt,OMr),e(kt,Cf),e(Cf,XMr),e(Cf,r2e),e(r2e,zMr),e(Cf,VMr),e(Cf,t2e),e(t2e,WMr),e(Cf,QMr),e(kt,HMr),e(kt,a2e),e(a2e,UMr),e(kt,JMr),g(PA,kt,null),e(jr,YMr),e(jr,jo),g($A,jo,null),e(jo,KMr),e(jo,n2e),e(n2e,ZMr),e(jo,eEr),e(jo,Sn),e(Sn,oEr),e(Sn,s2e),e(s2e,rEr),e(Sn,tEr),e(Sn,l2e),e(l2e,aEr),e(Sn,nEr),e(Sn,i2e),e(i2e,sEr),e(Sn,lEr),e(jo,iEr),e(jo,d2e),e(d2e,YF),e(YF,c2e),e(c2e,dEr),e(YF,cEr),e(YF,kX),e(kX,fEr),e(YF,mEr),e(jo,gEr),e(jo,f2e),e(f2e,hEr),e(jo,pEr),g(IA,jo,null),R9e=!0},p(d,[u]){const jA={};u&2&&(jA.$$scope={dirty:u,ctx:d}),Bf.$set(jA);const m2e={};u&2&&(m2e.$$scope={dirty:u,ctx:d}),sh.$set(m2e);const g2e={};u&2&&(g2e.$$scope={dirty:u,ctx:d}),uh.$set(g2e)},i(d){R9e||(h(ce.$$.fragment,d),h($a.$$.fragment,d),h(ZC.$$.fragment,d),h(e4.$$.fragment,d),h(Bf.$$.fragment,d),h(o4.$$.fragment,d),h(r4.$$.fragment,d),h(n4.$$.fragment,d),h(s4.$$.fragment,d),h(l4.$$.fragment,d),h(i4.$$.fragment,d),h(d4.$$.fragment,d),h(m4.$$.fragment,d),h(g4.$$.fragment,d),h(h4.$$.fragment,d),h(p4.$$.fragment,d),h(_4.$$.fragment,d),h(v4.$$.fragment,d),h(sh.$$.fragment,d),h(T4.$$.fragment,d),h(F4.$$.fragment,d),h(C4.$$.fragment,d),h(M4.$$.fragment,d),h(w4.$$.fragment,d),h(uh.$$.fragment,d),h(A4.$$.fragment,d),h(L4.$$.fragment,d),h(B4.$$.fragment,d),h(k4.$$.fragment,d),h(R4.$$.fragment,d),h(S4.$$.fragment,d),h(P4.$$.fragment,d),h($4.$$.fragment,d),h(I4.$$.fragment,d),h(j4.$$.fragment,d),h(D4.$$.fragment,d),h(q4.$$.fragment,d),h(G4.$$.fragment,d),h(O4.$$.fragment,d),h(X4.$$.fragment,d),h(z4.$$.fragment,d),h(W4.$$.fragment,d),h(Q4.$$.fragment,d),h(H4.$$.fragment,d),h(U4.$$.fragment,d),h(J4.$$.fragment,d),h(Y4.$$.fragment,d),h(Z4.$$.fragment,d),h(eM.$$.fragment,d),h(oM.$$.fragment,d),h(rM.$$.fragment,d),h(tM.$$.fragment,d),h(aM.$$.fragment,d),h(sM.$$.fragment,d),h(lM.$$.fragment,d),h(iM.$$.fragment,d),h(dM.$$.fragment,d),h(cM.$$.fragment,d),h(fM.$$.fragment,d),h(gM.$$.fragment,d),h(hM.$$.fragment,d),h(pM.$$.fragment,d),h(_M.$$.fragment,d),h(uM.$$.fragment,d),h(bM.$$.fragment,d),h(TM.$$.fragment,d),h(FM.$$.fragment,d),h(CM.$$.fragment,d),h(MM.$$.fragment,d),h(EM.$$.fragment,d),h(yM.$$.fragment,d),h(AM.$$.fragment,d),h(LM.$$.fragment,d),h(BM.$$.fragment,d),h(kM.$$.fragment,d),h(xM.$$.fragment,d),h(RM.$$.fragment,d),h(PM.$$.fragment,d),h($M.$$.fragment,d),h(IM.$$.fragment,d),h(jM.$$.fragment,d),h(NM.$$.fragment,d),h(DM.$$.fragment,d),h(GM.$$.fragment,d),h(OM.$$.fragment,d),h(XM.$$.fragment,d),h(zM.$$.fragment,d),h(VM.$$.fragment,d),h(WM.$$.fragment,d),h(HM.$$.fragment,d),h(UM.$$.fragment,d),h(JM.$$.fragment,d),h(YM.$$.fragment,d),h(KM.$$.fragment,d),h(ZM.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(sE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(gE.$$.fragment,d),h(pE.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(TE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(AE.$$.fragment,d),h(BE.$$.fragment,d),h(kE.$$.fragment,d),h(xE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h(PE.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(GE.$$.fragment,d),h(OE.$$.fragment,d),h(zE.$$.fragment,d),h(VE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(UE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(ZE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(s3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(g3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(_3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(T3.$$.fragment,d),h(C3.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(w3.$$.fragment,d),h(A3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(k3.$$.fragment,d),h(x3.$$.fragment,d),h(S3.$$.fragment,d),h(P3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(j3.$$.fragment,d),h(N3.$$.fragment,d),h(q3.$$.fragment,d),h(G3.$$.fragment,d),h(O3.$$.fragment,d),h(X3.$$.fragment,d),h(z3.$$.fragment,d),h(V3.$$.fragment,d),h(Q3.$$.fragment,d),h(H3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(ey.$$.fragment,d),h(oy.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(ly.$$.fragment,d),h(iy.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(hy.$$.fragment,d),h(py.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(ky.$$.fragment,d),h(xy.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(jy.$$.fragment,d),h(Ny.$$.fragment,d),h(Dy.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Xy.$$.fragment,d),h(zy.$$.fragment,d),h(Vy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(kw.$$.fragment,d),h(xw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(Dw.$$.fragment,d),h(qw.$$.fragment,d),h(Gw.$$.fragment,d),h(Ow.$$.fragment,d),h(zw.$$.fragment,d),h(Vw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(BA.$$.fragment,d),h(kA.$$.fragment,d),h(xA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),R9e=!0)},o(d){p(ce.$$.fragment,d),p($a.$$.fragment,d),p(ZC.$$.fragment,d),p(e4.$$.fragment,d),p(Bf.$$.fragment,d),p(o4.$$.fragment,d),p(r4.$$.fragment,d),p(n4.$$.fragment,d),p(s4.$$.fragment,d),p(l4.$$.fragment,d),p(i4.$$.fragment,d),p(d4.$$.fragment,d),p(m4.$$.fragment,d),p(g4.$$.fragment,d),p(h4.$$.fragment,d),p(p4.$$.fragment,d),p(_4.$$.fragment,d),p(v4.$$.fragment,d),p(sh.$$.fragment,d),p(T4.$$.fragment,d),p(F4.$$.fragment,d),p(C4.$$.fragment,d),p(M4.$$.fragment,d),p(w4.$$.fragment,d),p(uh.$$.fragment,d),p(A4.$$.fragment,d),p(L4.$$.fragment,d),p(B4.$$.fragment,d),p(k4.$$.fragment,d),p(R4.$$.fragment,d),p(S4.$$.fragment,d),p(P4.$$.fragment,d),p($4.$$.fragment,d),p(I4.$$.fragment,d),p(j4.$$.fragment,d),p(D4.$$.fragment,d),p(q4.$$.fragment,d),p(G4.$$.fragment,d),p(O4.$$.fragment,d),p(X4.$$.fragment,d),p(z4.$$.fragment,d),p(W4.$$.fragment,d),p(Q4.$$.fragment,d),p(H4.$$.fragment,d),p(U4.$$.fragment,d),p(J4.$$.fragment,d),p(Y4.$$.fragment,d),p(Z4.$$.fragment,d),p(eM.$$.fragment,d),p(oM.$$.fragment,d),p(rM.$$.fragment,d),p(tM.$$.fragment,d),p(aM.$$.fragment,d),p(sM.$$.fragment,d),p(lM.$$.fragment,d),p(iM.$$.fragment,d),p(dM.$$.fragment,d),p(cM.$$.fragment,d),p(fM.$$.fragment,d),p(gM.$$.fragment,d),p(hM.$$.fragment,d),p(pM.$$.fragment,d),p(_M.$$.fragment,d),p(uM.$$.fragment,d),p(bM.$$.fragment,d),p(TM.$$.fragment,d),p(FM.$$.fragment,d),p(CM.$$.fragment,d),p(MM.$$.fragment,d),p(EM.$$.fragment,d),p(yM.$$.fragment,d),p(AM.$$.fragment,d),p(LM.$$.fragment,d),p(BM.$$.fragment,d),p(kM.$$.fragment,d),p(xM.$$.fragment,d),p(RM.$$.fragment,d),p(PM.$$.fragment,d),p($M.$$.fragment,d),p(IM.$$.fragment,d),p(jM.$$.fragment,d),p(NM.$$.fragment,d),p(DM.$$.fragment,d),p(GM.$$.fragment,d),p(OM.$$.fragment,d),p(XM.$$.fragment,d),p(zM.$$.fragment,d),p(VM.$$.fragment,d),p(WM.$$.fragment,d),p(HM.$$.fragment,d),p(UM.$$.fragment,d),p(JM.$$.fragment,d),p(YM.$$.fragment,d),p(KM.$$.fragment,d),p(ZM.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(sE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(gE.$$.fragment,d),p(pE.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(TE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(AE.$$.fragment,d),p(BE.$$.fragment,d),p(kE.$$.fragment,d),p(xE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p(PE.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(GE.$$.fragment,d),p(OE.$$.fragment,d),p(zE.$$.fragment,d),p(VE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(UE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(ZE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(s3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(g3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(_3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(T3.$$.fragment,d),p(C3.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(w3.$$.fragment,d),p(A3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(k3.$$.fragment,d),p(x3.$$.fragment,d),p(S3.$$.fragment,d),p(P3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(j3.$$.fragment,d),p(N3.$$.fragment,d),p(q3.$$.fragment,d),p(G3.$$.fragment,d),p(O3.$$.fragment,d),p(X3.$$.fragment,d),p(z3.$$.fragment,d),p(V3.$$.fragment,d),p(Q3.$$.fragment,d),p(H3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(ey.$$.fragment,d),p(oy.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(ly.$$.fragment,d),p(iy.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(hy.$$.fragment,d),p(py.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Fy.$$.fragment,d),p(Cy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ly.$$.fragment,d),p(By.$$.fragment,d),p(ky.$$.fragment,d),p(xy.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p($y.$$.fragment,d),p(Iy.$$.fragment,d),p(jy.$$.fragment,d),p(Ny.$$.fragment,d),p(Dy.$$.fragment,d),p(qy.$$.fragment,d),p(Oy.$$.fragment,d),p(Xy.$$.fragment,d),p(zy.$$.fragment,d),p(Vy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(aw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(yw.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(kw.$$.fragment,d),p(xw.$$.fragment,d),p(Rw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(jw.$$.fragment,d),p(Nw.$$.fragment,d),p(Dw.$$.fragment,d),p(qw.$$.fragment,d),p(Gw.$$.fragment,d),p(Ow.$$.fragment,d),p(zw.$$.fragment,d),p(Vw.$$.fragment,d),p(Ww.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(Zw.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(BA.$$.fragment,d),p(kA.$$.fragment,d),p(xA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),R9e=!1},d(d){t(J),d&&t(Ae),d&&t(le),_(ce),d&&t(Ef),d&&t(sa),d&&t(ye),d&&t(io),d&&t(wf),_($a,d),d&&t(co),d&&t(ge),d&&t(qo),d&&t(Ia),d&&t(S0e),d&&t(Si),_(ZC),d&&t(P0e),d&&t(Nn),d&&t($0e),_(e4,d),d&&t(I0e),d&&t(N0),d&&t(j0e),_(Bf,d),d&&t(N0e),d&&t(Pi),_(o4),d&&t(D0e),d&&t(Go),_(r4),_(n4),_(s4),_(l4),d&&t(q0e),d&&t(Ii),_(i4),d&&t(G0e),d&&t(Oo),_(d4),_(m4),_(g4),_(h4),d&&t(O0e),d&&t(ji),_(p4),d&&t(X0e),d&&t(Xo),_(_4),_(v4),_(sh),_(T4),_(F4),d&&t(z0e),d&&t(Ni),_(C4),d&&t(V0e),d&&t(zo),_(M4),_(w4),_(uh),_(A4),_(L4),d&&t(W0e),d&&t(qi),_(B4),d&&t(Q0e),d&&t(Vo),_(k4),_(R4),_(S4),_(P4),_($4),d&&t(H0e),d&&t(Xi),_(I4),d&&t(U0e),d&&t(Wo),_(j4),_(D4),_(q4),_(G4),_(O4),d&&t(J0e),d&&t(Wi),_(X4),d&&t(Y0e),d&&t(Qo),_(z4),_(W4),_(Q4),_(H4),_(U4),d&&t(K0e),d&&t(Ui),_(J4),d&&t(Z0e),d&&t(Ho),_(Y4),_(Z4),_(eM),_(oM),_(rM),d&&t(eLe),d&&t(Ki),_(tM),d&&t(oLe),d&&t(Uo),_(aM),_(sM),_(lM),_(iM),_(dM),d&&t(rLe),d&&t(od),_(cM),d&&t(tLe),d&&t(Jo),_(fM),_(gM),_(hM),_(pM),_(_M),d&&t(aLe),d&&t(ad),_(uM),d&&t(nLe),d&&t(Yo),_(bM),_(TM),_(FM),_(CM),_(MM),d&&t(sLe),d&&t(ld),_(EM),d&&t(lLe),d&&t(Ko),_(yM),_(AM),_(LM),_(BM),_(kM),d&&t(iLe),d&&t(cd),_(xM),d&&t(dLe),d&&t(Zo),_(RM),_(PM),_($M),_(IM),_(jM),d&&t(cLe),d&&t(gd),_(NM),d&&t(fLe),d&&t(er),_(DM),_(GM),_(OM),_(XM),_(zM),d&&t(mLe),d&&t(_d),_(VM),d&&t(gLe),d&&t(or),_(WM),_(HM),_(UM),_(JM),_(YM),d&&t(hLe),d&&t(vd),_(KM),d&&t(pLe),d&&t(rr),_(ZM),_(oE),_(rE),_(tE),_(aE),d&&t(_Le),d&&t(Cd),_(nE),d&&t(uLe),d&&t(tr),_(sE),_(iE),_(dE),_(cE),_(fE),d&&t(bLe),d&&t(yd),_(mE),d&&t(vLe),d&&t(ar),_(gE),_(pE),_(_E),_(uE),_(bE),d&&t(TLe),d&&t(Ld),_(vE),d&&t(FLe),d&&t(nr),_(TE),_(CE),_(ME),_(EE),_(yE),d&&t(CLe),d&&t(Rd),_(wE),d&&t(MLe),d&&t(sr),_(AE),_(BE),_(kE),_(xE),_(RE),d&&t(ELe),d&&t($d),_(SE),d&&t(yLe),d&&t(lr),_(PE),_(IE),_(jE),_(NE),_(qE),d&&t(wLe),d&&t(Nd),_(GE),d&&t(ALe),d&&t(ir),_(OE),_(zE),_(VE),_(WE),_(QE),d&&t(LLe),d&&t(Od),_(HE),d&&t(BLe),d&&t(dr),_(UE),_(YE),_(KE),_(ZE),_(e3),d&&t(kLe),d&&t(Wd),_(o3),d&&t(xLe),d&&t(cr),_(r3),_(a3),_(n3),_(s3),_(l3),d&&t(RLe),d&&t(Ud),_(i3),d&&t(SLe),d&&t(fr),_(d3),_(f3),_(m3),_(g3),_(h3),d&&t(PLe),d&&t(Kd),_(p3),d&&t($Le),d&&t(mr),_(_3),_(b3),_(v3),_(T3),_(C3),d&&t(ILe),d&&t(oc),_(M3),d&&t(jLe),d&&t(gr),_(E3),_(w3),_(A3),_(L3),_(B3),d&&t(NLe),d&&t(ac),_(k3),d&&t(DLe),d&&t(hr),_(x3),_(S3),_(P3),_($3),_(I3),d&&t(qLe),d&&t(lc),_(j3),d&&t(GLe),d&&t(pr),_(N3),_(q3),_(G3),_(O3),_(X3),d&&t(OLe),d&&t(cc),_(z3),d&&t(XLe),d&&t(_r),_(V3),_(Q3),_(H3),_(U3),_(J3),d&&t(zLe),d&&t(gc),_(Y3),d&&t(VLe),d&&t(ur),_(K3),_(ey),_(oy),_(ry),_(ty),d&&t(WLe),d&&t(_c),_(ay),d&&t(QLe),d&&t(br),_(ny),_(ly),_(iy),_(dy),_(cy),d&&t(HLe),d&&t(vc),_(fy),d&&t(ULe),d&&t(vr),_(my),_(hy),_(py),_(_y),_(uy),d&&t(JLe),d&&t(Cc),_(by),d&&t(YLe),d&&t(Tr),_(vy),_(Fy),_(Cy),_(My),_(Ey),d&&t(KLe),d&&t(yc),_(yy),d&&t(ZLe),d&&t(Fr),_(wy),_(Ly),_(By),_(ky),_(xy),d&&t(e9e),d&&t(Lc),_(Ry),d&&t(o9e),d&&t(Cr),_(Sy),_($y),_(Iy),_(jy),_(Ny),d&&t(r9e),d&&t(xc),_(Dy),d&&t(t9e),d&&t(Mr),_(qy),_(Oy),_(Xy),_(zy),_(Vy),d&&t(a9e),d&&t(Pc),_(Wy),d&&t(n9e),d&&t(Er),_(Qy),_(Uy),_(Jy),_(Yy),_(Ky),d&&t(s9e),d&&t(jc),_(Zy),d&&t(l9e),d&&t(yr),_(ew),_(rw),_(tw),_(aw),_(nw),d&&t(i9e),d&&t(qc),_(sw),d&&t(d9e),d&&t(wr),_(lw),_(dw),_(cw),_(fw),_(mw),d&&t(c9e),d&&t(Xc),_(gw),d&&t(f9e),d&&t(Ar),_(hw),_(_w),_(uw),_(bw),_(vw),d&&t(m9e),d&&t(Wc),_(Tw),d&&t(g9e),d&&t(Lr),_(Fw),_(Mw),_(Ew),_(yw),_(ww),d&&t(h9e),d&&t(Uc),_(Aw),d&&t(p9e),d&&t(Br),_(Lw),_(kw),_(xw),_(Rw),_(Sw),d&&t(_9e),d&&t(Kc),_(Pw),d&&t(u9e),d&&t(kr),_($w),_(jw),_(Nw),_(Dw),_(qw),d&&t(b9e),d&&t(of),_(Gw),d&&t(v9e),d&&t(xr),_(Ow),_(zw),_(Vw),_(Ww),_(Qw),d&&t(T9e),d&&t(af),_(Hw),d&&t(F9e),d&&t(Rr),_(Uw),_(Yw),_(Kw),_(Zw),_(eA),d&&t(C9e),d&&t(lf),_(oA),d&&t(M9e),d&&t(Sr),_(rA),_(aA),_(nA),_(sA),_(lA),d&&t(E9e),d&&t(ff),_(iA),d&&t(y9e),d&&t(Pr),_(dA),_(fA),_(mA),_(gA),_(hA),d&&t(w9e),d&&t(hf),_(pA),d&&t(A9e),d&&t($r),_(_A),_(bA),_(vA),_(TA),_(FA),d&&t(L9e),d&&t(uf),_(CA),d&&t(B9e),d&&t(Ir),_(MA),_(yA),_(wA),_(AA),_(BA),d&&t(k9e),d&&t(Tf),_(kA),d&&t(x9e),d&&t(jr),_(xA),_(SA),_(PA),_($A),_(IA)}}}const gpt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function hpt(yi,J,Ae){let{fw:le}=J;return yi.$$set=me=>{"fw"in me&&Ae(0,le=me.fw)},[le]}class Fpt extends npt{constructor(J){super();spt(this,J,hpt,mpt,lpt,{fw:0})}}export{Fpt as default,gpt as metadata};
