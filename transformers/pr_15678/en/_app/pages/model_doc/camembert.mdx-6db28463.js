import{S as Pu,i as qu,s as Lu,e as r,k as d,w as $,t as n,M as Ru,c as s,d as t,m,a,x as F,h as i,b as c,F as e,g as h,y as M,q as P,o as q,B as L}from"../../chunks/vendor-4833417e.js";import{T as Rs}from"../../chunks/Tip-fffd6df1.js";import{D as $e}from"../../chunks/Docstring-6a25bf3b.js";import{I as Me}from"../../chunks/IconCopyLink-4b81c553.js";function Au(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,se,H,E,j,V,g,k,ee,O,ae,te,S,he,ne,v,fe,B,oe,J,N,re,pe,C,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),se=n("."),H=d(),E=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),ae=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),C=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=s(l,"P",{});var p=a(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=s(l,"UL",{});var W=a(_);z=s(W,"LI",{});var ke=a(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=s(W,"LI",{});var Ee=a(D);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),W.forEach(t),Q=m(l),u=s(l,"P",{});var y=a(u);K=i(y,"This second option is useful when using "),x=s(y,"CODE",{});var Te=a(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=s(y,"CODE",{});var ge=a(I);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),E=s(l,"P",{});var ve=a(E);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=s(l,"UL",{});var T=a(g);k=s(T,"LI",{});var R=a(k);ee=i(R,"a single Tensor with "),O=s(R,"CODE",{});var Ce=a(O);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i(R," only and nothing else: "),S=s(R,"CODE",{});var be=a(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=s(T,"LI",{});var U=a(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=s(U,"CODE",{});var we=a(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=s(U,"CODE",{});var _e=a(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),C=s(T,"LI",{});var Y=a(C);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=s(Y,"CODE",{});var ye=a(w);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,se),h(l,H,p),h(l,E,p),e(E,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,ae),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,C),e(C,ie),e(C,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(E),l&&t(V),l&&t(g)}}}function zu(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,se,H,E,j,V,g,k,ee,O,ae,te,S,he,ne,v,fe,B,oe,J,N,re,pe,C,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),se=n("."),H=d(),E=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),ae=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),C=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=s(l,"P",{});var p=a(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=s(l,"UL",{});var W=a(_);z=s(W,"LI",{});var ke=a(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=s(W,"LI",{});var Ee=a(D);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),W.forEach(t),Q=m(l),u=s(l,"P",{});var y=a(u);K=i(y,"This second option is useful when using "),x=s(y,"CODE",{});var Te=a(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=s(y,"CODE",{});var ge=a(I);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),E=s(l,"P",{});var ve=a(E);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=s(l,"UL",{});var T=a(g);k=s(T,"LI",{});var R=a(k);ee=i(R,"a single Tensor with "),O=s(R,"CODE",{});var Ce=a(O);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i(R," only and nothing else: "),S=s(R,"CODE",{});var be=a(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=s(T,"LI",{});var U=a(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=s(U,"CODE",{});var we=a(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=s(U,"CODE",{});var _e=a(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),C=s(T,"LI",{});var Y=a(C);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=s(Y,"CODE",{});var ye=a(w);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,se),h(l,H,p),h(l,E,p),e(E,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,ae),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,C),e(C,ie),e(C,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(E),l&&t(V),l&&t(g)}}}function Du(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,se,H,E,j,V,g,k,ee,O,ae,te,S,he,ne,v,fe,B,oe,J,N,re,pe,C,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),se=n("."),H=d(),E=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),ae=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),C=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=s(l,"P",{});var p=a(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=s(l,"UL",{});var W=a(_);z=s(W,"LI",{});var ke=a(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=s(W,"LI",{});var Ee=a(D);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),W.forEach(t),Q=m(l),u=s(l,"P",{});var y=a(u);K=i(y,"This second option is useful when using "),x=s(y,"CODE",{});var Te=a(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=s(y,"CODE",{});var ge=a(I);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),E=s(l,"P",{});var ve=a(E);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=s(l,"UL",{});var T=a(g);k=s(T,"LI",{});var R=a(k);ee=i(R,"a single Tensor with "),O=s(R,"CODE",{});var Ce=a(O);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i(R," only and nothing else: "),S=s(R,"CODE",{});var be=a(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=s(T,"LI",{});var U=a(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=s(U,"CODE",{});var we=a(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=s(U,"CODE",{});var _e=a(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),C=s(T,"LI",{});var Y=a(C);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=s(Y,"CODE",{});var ye=a(w);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,se),h(l,H,p),h(l,E,p),e(E,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,ae),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,C),e(C,ie),e(C,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(E),l&&t(V),l&&t(g)}}}function xu(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,se,H,E,j,V,g,k,ee,O,ae,te,S,he,ne,v,fe,B,oe,J,N,re,pe,C,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),se=n("."),H=d(),E=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),ae=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),C=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=s(l,"P",{});var p=a(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=s(l,"UL",{});var W=a(_);z=s(W,"LI",{});var ke=a(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=s(W,"LI",{});var Ee=a(D);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),W.forEach(t),Q=m(l),u=s(l,"P",{});var y=a(u);K=i(y,"This second option is useful when using "),x=s(y,"CODE",{});var Te=a(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=s(y,"CODE",{});var ge=a(I);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),E=s(l,"P",{});var ve=a(E);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=s(l,"UL",{});var T=a(g);k=s(T,"LI",{});var R=a(k);ee=i(R,"a single Tensor with "),O=s(R,"CODE",{});var Ce=a(O);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i(R," only and nothing else: "),S=s(R,"CODE",{});var be=a(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=s(T,"LI",{});var U=a(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=s(U,"CODE",{});var we=a(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=s(U,"CODE",{});var _e=a(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),C=s(T,"LI",{});var Y=a(C);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=s(Y,"CODE",{});var ye=a(w);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,se),h(l,H,p),h(l,E,p),e(E,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,ae),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,C),e(C,ie),e(C,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(E),l&&t(V),l&&t(g)}}}function Iu(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,se,H,E,j,V,g,k,ee,O,ae,te,S,he,ne,v,fe,B,oe,J,N,re,pe,C,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),se=n("."),H=d(),E=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),ae=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),C=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=s(l,"P",{});var p=a(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=s(l,"UL",{});var W=a(_);z=s(W,"LI",{});var ke=a(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=s(W,"LI",{});var Ee=a(D);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),W.forEach(t),Q=m(l),u=s(l,"P",{});var y=a(u);K=i(y,"This second option is useful when using "),x=s(y,"CODE",{});var Te=a(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=s(y,"CODE",{});var ge=a(I);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),E=s(l,"P",{});var ve=a(E);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=s(l,"UL",{});var T=a(g);k=s(T,"LI",{});var R=a(k);ee=i(R,"a single Tensor with "),O=s(R,"CODE",{});var Ce=a(O);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i(R," only and nothing else: "),S=s(R,"CODE",{});var be=a(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=s(T,"LI",{});var U=a(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=s(U,"CODE",{});var we=a(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=s(U,"CODE",{});var _e=a(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),C=s(T,"LI",{});var Y=a(C);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=s(Y,"CODE",{});var ye=a(w);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,se),h(l,H,p),h(l,E,p),e(E,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,ae),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,C),e(C,ie),e(C,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(E),l&&t(V),l&&t(g)}}}function Su(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,se,H,E,j,V,g,k,ee,O,ae,te,S,he,ne,v,fe,B,oe,J,N,re,pe,C,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),se=n("."),H=d(),E=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),ae=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),C=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=s(l,"P",{});var p=a(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=s(l,"UL",{});var W=a(_);z=s(W,"LI",{});var ke=a(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=s(W,"LI",{});var Ee=a(D);de=i(Ee,"having all inputs as a list, tuple or dict in the first positional arguments."),Ee.forEach(t),W.forEach(t),Q=m(l),u=s(l,"P",{});var y=a(u);K=i(y,"This second option is useful when using "),x=s(y,"CODE",{});var Te=a(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(y,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=s(y,"CODE",{});var ge=a(I);ce=i(ge,"model(inputs)"),ge.forEach(t),se=i(y,"."),y.forEach(t),H=m(l),E=s(l,"P",{});var ve=a(E);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=s(l,"UL",{});var T=a(g);k=s(T,"LI",{});var R=a(k);ee=i(R,"a single Tensor with "),O=s(R,"CODE",{});var Ce=a(O);ae=i(Ce,"input_ids"),Ce.forEach(t),te=i(R," only and nothing else: "),S=s(R,"CODE",{});var be=a(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=s(T,"LI",{});var U=a(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=s(U,"CODE",{});var we=a(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=s(U,"CODE",{});var _e=a(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),C=s(T,"LI",{});var Y=a(C);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=s(Y,"CODE",{});var ye=a(w);ue=i(ye,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),ye.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,se),h(l,H,p),h(l,E,p),e(E,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,ae),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,C),e(C,ie),e(C,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(E),l&&t(V),l&&t(g)}}}function Bu(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,se,H,E,j,V,g,k,ee,O,ae,te,S,he,ne,v,fe,B,oe,J,N,re,pe,C,ie,w,ue,l,p,W,ke,Ee,y,Te,ge,ve,T,R,Ce,be,U,we,_e,Y,ye,Yt,zi,Vr,Di,xi,Oa,mt,$t,As,Zt,Ii,zs,Si,Na,Fe,eo,Bi,Ye,Oi,Wr,Ni,Ui,Kr,Hi,Qi,to,Vi,Wi,Ki,oo,Gi,Gr,Xi,ji,Ji,Ze,ro,Yi,Ds,Zi,el,so,Xr,tl,xs,ol,rl,jr,sl,Is,al,nl,Ft,ao,il,no,ll,Ss,dl,ml,cl,Mt,io,hl,Bs,fl,pl,Os,Ua,ct,Pt,Ns,lo,ul,Us,gl,Ha,xe,mo,_l,Ve,vl,Hs,kl,bl,Jr,Tl,wl,Yr,El,Cl,co,yl,$l,Fl,ho,Ml,Zr,Pl,ql,Ll,et,fo,Rl,Qs,Al,zl,po,es,Dl,Vs,xl,Il,ts,Sl,Ws,Bl,Ol,qt,uo,Nl,Ks,Ul,Qa,ht,Lt,Gs,go,Hl,Xs,Ql,Va,Ie,_o,Vl,js,Wl,Kl,vo,Gl,os,Xl,jl,Jl,ko,Yl,bo,Zl,ed,td,To,od,rs,rd,sd,Wa,ft,Rt,Js,wo,ad,Ys,nd,Ka,Se,Eo,id,Co,ld,Zs,dd,md,cd,yo,hd,ss,fd,pd,ud,$o,gd,Fo,_d,vd,kd,Mo,bd,as,Td,wd,Ga,pt,At,ea,Po,Ed,ta,Cd,Xa,Be,qo,yd,Lo,$d,oa,Fd,Md,Pd,Ro,qd,ns,Ld,Rd,Ad,Ao,zd,zo,Dd,xd,Id,Do,Sd,is,Bd,Od,ja,ut,zt,ra,xo,Nd,sa,Ud,Ja,Oe,Io,Hd,aa,Qd,Vd,So,Wd,ls,Kd,Gd,Xd,Bo,jd,Oo,Jd,Yd,Zd,No,em,ds,tm,om,Ya,gt,Dt,na,Uo,rm,ia,sm,Za,Ne,Ho,am,la,nm,im,Qo,lm,ms,dm,mm,cm,Vo,hm,Wo,fm,pm,um,Ko,gm,cs,_m,vm,en,_t,xt,da,Go,km,ma,bm,tn,Ue,Xo,Tm,ca,wm,Em,jo,Cm,hs,ym,$m,Fm,Jo,Mm,Yo,Pm,qm,Lm,Zo,Rm,fs,Am,zm,on,vt,It,ha,er,Dm,fa,xm,rn,He,tr,Im,St,Sm,pa,Bm,Om,ua,Nm,Um,or,Hm,ps,Qm,Vm,Wm,rr,Km,sr,Gm,Xm,jm,ar,Jm,us,Ym,Zm,sn,kt,Bt,ga,nr,ec,_a,tc,an,Pe,ir,oc,va,rc,sc,lr,ac,gs,nc,ic,lc,dr,dc,mr,mc,cc,hc,Ot,fc,cr,pc,_s,uc,gc,nn,bt,Nt,ka,hr,_c,ba,vc,ln,qe,fr,kc,pr,bc,Ta,Tc,wc,Ec,ur,Cc,vs,yc,$c,Fc,gr,Mc,_r,Pc,qc,Lc,Ut,Rc,vr,Ac,ks,zc,Dc,dn,Tt,Ht,wa,kr,xc,Ea,Ic,mn,Le,br,Sc,Ca,Bc,Oc,Tr,Nc,bs,Uc,Hc,Qc,wr,Vc,Er,Wc,Kc,Gc,Qt,Xc,Cr,jc,Ts,Jc,Yc,cn,wt,Vt,ya,yr,Zc,$a,eh,hn,Re,$r,th,Fa,oh,rh,Fr,sh,ws,ah,nh,ih,Mr,lh,Pr,dh,mh,ch,Wt,hh,qr,fh,Es,ph,uh,fn,Et,Kt,Ma,Lr,gh,Pa,_h,pn,Ae,Rr,vh,qa,kh,bh,Ar,Th,Cs,wh,Eh,Ch,zr,yh,Dr,$h,Fh,Mh,Gt,Ph,xr,qh,ys,Lh,Rh,un,Ct,Xt,La,Ir,Ah,Ra,zh,gn,ze,Sr,Dh,yt,xh,Aa,Ih,Sh,za,Bh,Oh,Nh,Br,Uh,$s,Hh,Qh,Vh,Or,Wh,Nr,Kh,Gh,Xh,jt,jh,Ur,Jh,Fs,Yh,Zh,_n;return G=new Me({}),X=new Me({}),R=new Me({}),Y=new $e({props:{name:"class transformers.CamembertConfig",anchor:"transformers.CamembertConfig",parameters:[{name:"pad_token_id",val:" = 1"},{name:"bos_token_id",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/configuration_camembert.py#L35"}}),Zt=new Me({}),eo=new $e({props:{name:"class transformers.CamembertTokenizer",anchor:"transformers.CamembertTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"additional_special_tokens",val:" = ['<s>NOTUSED', '</s>NOTUSED']"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/tokenization_camembert.py#L45",parametersDescription:[{anchor:"transformers.CamembertTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.CamembertTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.CamembertTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.CamembertTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.CamembertTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.CamembertTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.CamembertTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.CamembertTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.CamembertTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.CamembertTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.CamembertTokenizer.sp_model",description:`<strong>sp_model</strong> (<code>SentencePieceProcessor</code>) &#x2014;
The <em>SentencePiece</em> processor that is used for every conversion (string, tokens and IDs).`,name:"sp_model"}]}}),ro=new $e({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/tokenization_camembert.py#L161",parametersDescription:[{anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),ao=new $e({props:{name:"get_special_tokens_mask",anchor:"transformers.CamembertTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/tokenization_camembert.py#L187",parametersDescription:[{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),io=new $e({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/tokenization_camembert.py#L214",parametersDescription:[{anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),lo=new Me({}),mo=new $e({props:{name:"class transformers.CamembertTokenizerFast",anchor:"transformers.CamembertTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"additional_special_tokens",val:" = ['<s>NOTUSED', '</s>NOTUSED']"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/tokenization_camembert_fast.py#L54",parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.CamembertTokenizerFast.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.CamembertTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.CamembertTokenizerFast.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.CamembertTokenizerFast.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.CamembertTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.CamembertTokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.CamembertTokenizerFast.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.CamembertTokenizerFast.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"}]}}),fo=new $e({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/tokenization_camembert_fast.py#L146",parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),uo=new $e({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/tokenization_camembert_fast.py#L172",parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),go=new Me({}),_o=new $e({props:{name:"class transformers.CamembertModel",anchor:"transformers.CamembertModel",parameters:[{name:"config",val:""},{name:"add_pooling_layer",val:" = True"}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_camembert.py#L64",parametersDescription:[{anchor:"transformers.CamembertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),wo=new Me({}),Eo=new $e({props:{name:"class transformers.CamembertForCausalLM",anchor:"transformers.CamembertForCausalLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_camembert.py#L153",parametersDescription:[{anchor:"transformers.CamembertForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Po=new Me({}),qo=new $e({props:{name:"class transformers.CamembertForMaskedLM",anchor:"transformers.CamembertForMaskedLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_camembert.py#L77",parametersDescription:[{anchor:"transformers.CamembertForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),xo=new Me({}),Io=new $e({props:{name:"class transformers.CamembertForSequenceClassification",anchor:"transformers.CamembertForSequenceClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_camembert.py#L93",parametersDescription:[{anchor:"transformers.CamembertForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Uo=new Me({}),Ho=new $e({props:{name:"class transformers.CamembertForMultipleChoice",anchor:"transformers.CamembertForMultipleChoice",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_camembert.py#L109",parametersDescription:[{anchor:"transformers.CamembertForMultipleChoice.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Go=new Me({}),Xo=new $e({props:{name:"class transformers.CamembertForTokenClassification",anchor:"transformers.CamembertForTokenClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_camembert.py#L125",parametersDescription:[{anchor:"transformers.CamembertForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),er=new Me({}),tr=new $e({props:{name:"class transformers.CamembertForQuestionAnswering",anchor:"transformers.CamembertForQuestionAnswering",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_camembert.py#L141",parametersDescription:[{anchor:"transformers.CamembertForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),nr=new Me({}),ir=new $e({props:{name:"class transformers.TFCamembertModel",anchor:"transformers.TFCamembertModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_tf_camembert.py#L80",parametersDescription:[{anchor:"transformers.TFCamembertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ot=new Rs({props:{$$slots:{default:[Au]},$$scope:{ctx:De}}}),hr=new Me({}),fr=new $e({props:{name:"class transformers.TFCamembertForMaskedLM",anchor:"transformers.TFCamembertForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_tf_camembert.py#L93",parametersDescription:[{anchor:"transformers.TFCamembertForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ut=new Rs({props:{$$slots:{default:[zu]},$$scope:{ctx:De}}}),kr=new Me({}),br=new $e({props:{name:"class transformers.TFCamembertForSequenceClassification",anchor:"transformers.TFCamembertForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_tf_camembert.py#L109",parametersDescription:[{anchor:"transformers.TFCamembertForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Qt=new Rs({props:{$$slots:{default:[Du]},$$scope:{ctx:De}}}),yr=new Me({}),$r=new $e({props:{name:"class transformers.TFCamembertForMultipleChoice",anchor:"transformers.TFCamembertForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_tf_camembert.py#L141",parametersDescription:[{anchor:"transformers.TFCamembertForMultipleChoice.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Wt=new Rs({props:{$$slots:{default:[xu]},$$scope:{ctx:De}}}),Lr=new Me({}),Rr=new $e({props:{name:"class transformers.TFCamembertForTokenClassification",anchor:"transformers.TFCamembertForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_tf_camembert.py#L125",parametersDescription:[{anchor:"transformers.TFCamembertForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Gt=new Rs({props:{$$slots:{default:[Iu]},$$scope:{ctx:De}}}),Ir=new Me({}),Sr=new $e({props:{name:"class transformers.TFCamembertForQuestionAnswering",anchor:"transformers.TFCamembertForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15678/src/transformers/models/camembert/modeling_tf_camembert.py#L157",parametersDescription:[{anchor:"transformers.TFCamembertForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15678/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),jt=new Rs({props:{$$slots:{default:[Su]},$$scope:{ctx:De}}}),{c(){b=r("meta"),Z=d(),A=r("h1"),_=r("a"),z=r("span"),$(G.$$.fragment),le=d(),D=r("span"),de=n("CamemBERT"),Q=d(),u=r("h2"),K=r("a"),x=r("span"),$(X.$$.fragment),me=d(),I=r("span"),ce=n("Overview"),se=d(),H=r("p"),E=n("The CamemBERT model was proposed in "),j=r("a"),V=n("CamemBERT: a Tasty French Language Model"),g=n(` by
Louis Martin, Benjamin Muller, Pedro Javier Ortiz Su\xE1rez, Yoann Dupont, Laurent Romary, \xC9ric Villemonte de la
Clergerie, Djam\xE9 Seddah, and Beno\xEEt Sagot. It is based on Facebook\u2019s RoBERTa model released in 2019. It is a model
trained on 138GB of French text.`),k=d(),ee=r("p"),O=n("The abstract from the paper is the following:"),ae=d(),te=r("p"),S=r("em"),he=n(`Pretrained language models are now ubiquitous in Natural Language Processing. Despite their success, most available
models have either been trained on English data or on the concatenation of data in multiple languages. This makes
practical use of such models \u2014in all languages except English\u2014 very limited. Aiming to address this issue for French,
we release CamemBERT, a French version of the Bi-directional Encoders for Transformers (BERT). We measure the
performance of CamemBERT compared to multilingual models in multiple downstream tasks, namely part-of-speech tagging,
dependency parsing, named-entity recognition, and natural language inference. CamemBERT improves the state of the art
for most of the tasks considered. We release the pretrained model for CamemBERT hoping to foster research and
downstream applications for French NLP.`),ne=d(),v=r("p"),fe=n("Tips:"),B=d(),oe=r("ul"),J=r("li"),N=n("This implementation is the same as RoBERTa. Refer to the "),re=r("a"),pe=n("documentation of RoBERTa"),C=n(` for usage examples
as well as the information relative to the inputs and outputs.`),ie=d(),w=r("p"),ue=n("This model was contributed by "),l=r("a"),p=n("camembert"),W=n(". The original code can be found "),ke=r("a"),Ee=n("here"),y=n("."),Te=d(),ge=r("h2"),ve=r("a"),T=r("span"),$(R.$$.fragment),Ce=d(),be=r("span"),U=n("CamembertConfig"),we=d(),_e=r("div"),$(Y.$$.fragment),ye=d(),Yt=r("p"),zi=n("This class overrides "),Vr=r("a"),Di=n("RobertaConfig"),xi=n(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Oa=d(),mt=r("h2"),$t=r("a"),As=r("span"),$(Zt.$$.fragment),Ii=d(),zs=r("span"),Si=n("CamembertTokenizer"),Na=d(),Fe=r("div"),$(eo.$$.fragment),Bi=d(),Ye=r("p"),Oi=n("Adapted from "),Wr=r("a"),Ni=n("RobertaTokenizer"),Ui=n(" and "),Kr=r("a"),Hi=n("XLNetTokenizer"),Qi=n(`. Construct a CamemBERT tokenizer. Based on
`),to=r("a"),Vi=n("SentencePiece"),Wi=n("."),Ki=d(),oo=r("p"),Gi=n("This tokenizer inherits from "),Gr=r("a"),Xi=n("PreTrainedTokenizer"),ji=n(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),Ji=d(),Ze=r("div"),$(ro.$$.fragment),Yi=d(),Ds=r("p"),Zi=n(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),el=d(),so=r("ul"),Xr=r("li"),tl=n("single sequence: "),xs=r("code"),ol=n("<s> X </s>"),rl=d(),jr=r("li"),sl=n("pair of sequences: "),Is=r("code"),al=n("<s> A </s></s> B </s>"),nl=d(),Ft=r("div"),$(ao.$$.fragment),il=d(),no=r("p"),ll=n(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Ss=r("code"),dl=n("prepare_for_model"),ml=n(" method."),cl=d(),Mt=r("div"),$(io.$$.fragment),hl=d(),Bs=r("p"),fl=n(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),pl=d(),Os=r("div"),Ua=d(),ct=r("h2"),Pt=r("a"),Ns=r("span"),$(lo.$$.fragment),ul=d(),Us=r("span"),gl=n("CamembertTokenizerFast"),Ha=d(),xe=r("div"),$(mo.$$.fragment),_l=d(),Ve=r("p"),vl=n("Construct a \u201Cfast\u201D CamemBERT tokenizer (backed by HuggingFace\u2019s "),Hs=r("em"),kl=n("tokenizers"),bl=n(` library). Adapted from
`),Jr=r("a"),Tl=n("RobertaTokenizer"),wl=n(" and "),Yr=r("a"),El=n("XLNetTokenizer"),Cl=n(`. Based on
`),co=r("a"),yl=n("BPE"),$l=n("."),Fl=d(),ho=r("p"),Ml=n("This tokenizer inherits from "),Zr=r("a"),Pl=n("PreTrainedTokenizerFast"),ql=n(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),Ll=d(),et=r("div"),$(fo.$$.fragment),Rl=d(),Qs=r("p"),Al=n(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),zl=d(),po=r("ul"),es=r("li"),Dl=n("single sequence: "),Vs=r("code"),xl=n("<s> X </s>"),Il=d(),ts=r("li"),Sl=n("pair of sequences: "),Ws=r("code"),Bl=n("<s> A </s></s> B </s>"),Ol=d(),qt=r("div"),$(uo.$$.fragment),Nl=d(),Ks=r("p"),Ul=n(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),Qa=d(),ht=r("h2"),Lt=r("a"),Gs=r("span"),$(go.$$.fragment),Hl=d(),Xs=r("span"),Ql=n("CamembertModel"),Va=d(),Ie=r("div"),$(_o.$$.fragment),Vl=d(),js=r("p"),Wl=n("The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Kl=d(),vo=r("p"),Gl=n("This model inherits from "),os=r("a"),Xl=n("PreTrainedModel"),jl=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Jl=d(),ko=r("p"),Yl=n("This model is also a PyTorch "),bo=r("a"),Zl=n("torch.nn.Module"),ed=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),td=d(),To=r("p"),od=n("This class overrides "),rs=r("a"),rd=n("RobertaModel"),sd=n(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Wa=d(),ft=r("h2"),Rt=r("a"),Js=r("span"),$(wo.$$.fragment),ad=d(),Ys=r("span"),nd=n("CamembertForCausalLM"),Ka=d(),Se=r("div"),$(Eo.$$.fragment),id=d(),Co=r("p"),ld=n("CamemBERT Model with a "),Zs=r("code"),dd=n("language modeling"),md=n(" head on top for CLM fine-tuning."),cd=d(),yo=r("p"),hd=n("This model inherits from "),ss=r("a"),fd=n("PreTrainedModel"),pd=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ud=d(),$o=r("p"),gd=n("This model is also a PyTorch "),Fo=r("a"),_d=n("torch.nn.Module"),vd=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),kd=d(),Mo=r("p"),bd=n("This class overrides "),as=r("a"),Td=n("RobertaForCausalLM"),wd=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Ga=d(),pt=r("h2"),At=r("a"),ea=r("span"),$(Po.$$.fragment),Ed=d(),ta=r("span"),Cd=n("CamembertForMaskedLM"),Xa=d(),Be=r("div"),$(qo.$$.fragment),yd=d(),Lo=r("p"),$d=n("CamemBERT Model with a "),oa=r("code"),Fd=n("language modeling"),Md=n(" head on top."),Pd=d(),Ro=r("p"),qd=n("This model inherits from "),ns=r("a"),Ld=n("PreTrainedModel"),Rd=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ad=d(),Ao=r("p"),zd=n("This model is also a PyTorch "),zo=r("a"),Dd=n("torch.nn.Module"),xd=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Id=d(),Do=r("p"),Sd=n("This class overrides "),is=r("a"),Bd=n("RobertaForMaskedLM"),Od=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),ja=d(),ut=r("h2"),zt=r("a"),ra=r("span"),$(xo.$$.fragment),Nd=d(),sa=r("span"),Ud=n("CamembertForSequenceClassification"),Ja=d(),Oe=r("div"),$(Io.$$.fragment),Hd=d(),aa=r("p"),Qd=n(`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Vd=d(),So=r("p"),Wd=n("This model inherits from "),ls=r("a"),Kd=n("PreTrainedModel"),Gd=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Xd=d(),Bo=r("p"),jd=n("This model is also a PyTorch "),Oo=r("a"),Jd=n("torch.nn.Module"),Yd=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Zd=d(),No=r("p"),em=n("This class overrides "),ds=r("a"),tm=n("RobertaForSequenceClassification"),om=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Ya=d(),gt=r("h2"),Dt=r("a"),na=r("span"),$(Uo.$$.fragment),rm=d(),ia=r("span"),sm=n("CamembertForMultipleChoice"),Za=d(),Ne=r("div"),$(Ho.$$.fragment),am=d(),la=r("p"),nm=n(`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),im=d(),Qo=r("p"),lm=n("This model inherits from "),ms=r("a"),dm=n("PreTrainedModel"),mm=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),cm=d(),Vo=r("p"),hm=n("This model is also a PyTorch "),Wo=r("a"),fm=n("torch.nn.Module"),pm=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),um=d(),Ko=r("p"),gm=n("This class overrides "),cs=r("a"),_m=n("RobertaForMultipleChoice"),vm=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),en=d(),_t=r("h2"),xt=r("a"),da=r("span"),$(Go.$$.fragment),km=d(),ma=r("span"),bm=n("CamembertForTokenClassification"),tn=d(),Ue=r("div"),$(Xo.$$.fragment),Tm=d(),ca=r("p"),wm=n(`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Em=d(),jo=r("p"),Cm=n("This model inherits from "),hs=r("a"),ym=n("PreTrainedModel"),$m=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Fm=d(),Jo=r("p"),Mm=n("This model is also a PyTorch "),Yo=r("a"),Pm=n("torch.nn.Module"),qm=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Lm=d(),Zo=r("p"),Rm=n("This class overrides "),fs=r("a"),Am=n("RobertaForTokenClassification"),zm=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),on=d(),vt=r("h2"),It=r("a"),ha=r("span"),$(er.$$.fragment),Dm=d(),fa=r("span"),xm=n("CamembertForQuestionAnswering"),rn=d(),He=r("div"),$(tr.$$.fragment),Im=d(),St=r("p"),Sm=n(`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),pa=r("code"),Bm=n("span start logits"),Om=n(" and "),ua=r("code"),Nm=n("span end logits"),Um=d(),or=r("p"),Hm=n("This model inherits from "),ps=r("a"),Qm=n("PreTrainedModel"),Vm=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Wm=d(),rr=r("p"),Km=n("This model is also a PyTorch "),sr=r("a"),Gm=n("torch.nn.Module"),Xm=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),jm=d(),ar=r("p"),Jm=n("This class overrides "),us=r("a"),Ym=n("RobertaForQuestionAnswering"),Zm=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),sn=d(),kt=r("h2"),Bt=r("a"),ga=r("span"),$(nr.$$.fragment),ec=d(),_a=r("span"),tc=n("TFCamembertModel"),an=d(),Pe=r("div"),$(ir.$$.fragment),oc=d(),va=r("p"),rc=n("The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),sc=d(),lr=r("p"),ac=n("This model inherits from "),gs=r("a"),nc=n("TFPreTrainedModel"),ic=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),lc=d(),dr=r("p"),dc=n("This model is also a "),mr=r("a"),mc=n("tf.keras.Model"),cc=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),hc=d(),$(Ot.$$.fragment),fc=d(),cr=r("p"),pc=n("This class overrides "),_s=r("a"),uc=n("TFRobertaModel"),gc=n(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),nn=d(),bt=r("h2"),Nt=r("a"),ka=r("span"),$(hr.$$.fragment),_c=d(),ba=r("span"),vc=n("TFCamembertForMaskedLM"),ln=d(),qe=r("div"),$(fr.$$.fragment),kc=d(),pr=r("p"),bc=n("CamemBERT Model with a "),Ta=r("code"),Tc=n("language modeling"),wc=n(" head on top."),Ec=d(),ur=r("p"),Cc=n("This model inherits from "),vs=r("a"),yc=n("TFPreTrainedModel"),$c=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Fc=d(),gr=r("p"),Mc=n("This model is also a "),_r=r("a"),Pc=n("tf.keras.Model"),qc=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Lc=d(),$(Ut.$$.fragment),Rc=d(),vr=r("p"),Ac=n("This class overrides "),ks=r("a"),zc=n("TFRobertaForMaskedLM"),Dc=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),dn=d(),Tt=r("h2"),Ht=r("a"),wa=r("span"),$(kr.$$.fragment),xc=d(),Ea=r("span"),Ic=n("TFCamembertForSequenceClassification"),mn=d(),Le=r("div"),$(br.$$.fragment),Sc=d(),Ca=r("p"),Bc=n(`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Oc=d(),Tr=r("p"),Nc=n("This model inherits from "),bs=r("a"),Uc=n("TFPreTrainedModel"),Hc=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Qc=d(),wr=r("p"),Vc=n("This model is also a "),Er=r("a"),Wc=n("tf.keras.Model"),Kc=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Gc=d(),$(Qt.$$.fragment),Xc=d(),Cr=r("p"),jc=n("This class overrides "),Ts=r("a"),Jc=n("TFRobertaForSequenceClassification"),Yc=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),cn=d(),wt=r("h2"),Vt=r("a"),ya=r("span"),$(yr.$$.fragment),Zc=d(),$a=r("span"),eh=n("TFCamembertForMultipleChoice"),hn=d(),Re=r("div"),$($r.$$.fragment),th=d(),Fa=r("p"),oh=n(`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),rh=d(),Fr=r("p"),sh=n("This model inherits from "),ws=r("a"),ah=n("TFPreTrainedModel"),nh=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ih=d(),Mr=r("p"),lh=n("This model is also a "),Pr=r("a"),dh=n("tf.keras.Model"),mh=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ch=d(),$(Wt.$$.fragment),hh=d(),qr=r("p"),fh=n("This class overrides "),Es=r("a"),ph=n("TFRobertaForMultipleChoice"),uh=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),fn=d(),Et=r("h2"),Kt=r("a"),Ma=r("span"),$(Lr.$$.fragment),gh=d(),Pa=r("span"),_h=n("TFCamembertForTokenClassification"),pn=d(),Ae=r("div"),$(Rr.$$.fragment),vh=d(),qa=r("p"),kh=n(`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),bh=d(),Ar=r("p"),Th=n("This model inherits from "),Cs=r("a"),wh=n("TFPreTrainedModel"),Eh=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ch=d(),zr=r("p"),yh=n("This model is also a "),Dr=r("a"),$h=n("tf.keras.Model"),Fh=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Mh=d(),$(Gt.$$.fragment),Ph=d(),xr=r("p"),qh=n("This class overrides "),ys=r("a"),Lh=n("TFRobertaForTokenClassification"),Rh=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),un=d(),Ct=r("h2"),Xt=r("a"),La=r("span"),$(Ir.$$.fragment),Ah=d(),Ra=r("span"),zh=n("TFCamembertForQuestionAnswering"),gn=d(),ze=r("div"),$(Sr.$$.fragment),Dh=d(),yt=r("p"),xh=n(`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),Aa=r("code"),Ih=n("span start logits"),Sh=n(" and "),za=r("code"),Bh=n("span end logits"),Oh=n(")."),Nh=d(),Br=r("p"),Uh=n("This model inherits from "),$s=r("a"),Hh=n("TFPreTrainedModel"),Qh=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Vh=d(),Or=r("p"),Wh=n("This model is also a "),Nr=r("a"),Kh=n("tf.keras.Model"),Gh=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Xh=d(),$(jt.$$.fragment),jh=d(),Ur=r("p"),Jh=n("This class overrides "),Fs=r("a"),Yh=n("TFRobertaForQuestionAnswering"),Zh=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),this.h()},l(o){const f=Ru('[data-svelte="svelte-1phssyn"]',document.head);b=s(f,"META",{name:!0,content:!0}),f.forEach(t),Z=m(o),A=s(o,"H1",{class:!0});var Hr=a(A);_=s(Hr,"A",{id:!0,class:!0,href:!0});var Da=a(_);z=s(Da,"SPAN",{});var xa=a(z);F(G.$$.fragment,xa),xa.forEach(t),Da.forEach(t),le=m(Hr),D=s(Hr,"SPAN",{});var Ia=a(D);de=i(Ia,"CamemBERT"),Ia.forEach(t),Hr.forEach(t),Q=m(o),u=s(o,"H2",{class:!0});var Qr=a(u);K=s(Qr,"A",{id:!0,class:!0,href:!0});var Sa=a(K);x=s(Sa,"SPAN",{});var sf=a(x);F(X.$$.fragment,sf),sf.forEach(t),Sa.forEach(t),me=m(Qr),I=s(Qr,"SPAN",{});var af=a(I);ce=i(af,"Overview"),af.forEach(t),Qr.forEach(t),se=m(o),H=s(o,"P",{});var vn=a(H);E=i(vn,"The CamemBERT model was proposed in "),j=s(vn,"A",{href:!0,rel:!0});var nf=a(j);V=i(nf,"CamemBERT: a Tasty French Language Model"),nf.forEach(t),g=i(vn,` by
Louis Martin, Benjamin Muller, Pedro Javier Ortiz Su\xE1rez, Yoann Dupont, Laurent Romary, \xC9ric Villemonte de la
Clergerie, Djam\xE9 Seddah, and Beno\xEEt Sagot. It is based on Facebook\u2019s RoBERTa model released in 2019. It is a model
trained on 138GB of French text.`),vn.forEach(t),k=m(o),ee=s(o,"P",{});var lf=a(ee);O=i(lf,"The abstract from the paper is the following:"),lf.forEach(t),ae=m(o),te=s(o,"P",{});var df=a(te);S=s(df,"EM",{});var mf=a(S);he=i(mf,`Pretrained language models are now ubiquitous in Natural Language Processing. Despite their success, most available
models have either been trained on English data or on the concatenation of data in multiple languages. This makes
practical use of such models \u2014in all languages except English\u2014 very limited. Aiming to address this issue for French,
we release CamemBERT, a French version of the Bi-directional Encoders for Transformers (BERT). We measure the
performance of CamemBERT compared to multilingual models in multiple downstream tasks, namely part-of-speech tagging,
dependency parsing, named-entity recognition, and natural language inference. CamemBERT improves the state of the art
for most of the tasks considered. We release the pretrained model for CamemBERT hoping to foster research and
downstream applications for French NLP.`),mf.forEach(t),df.forEach(t),ne=m(o),v=s(o,"P",{});var cf=a(v);fe=i(cf,"Tips:"),cf.forEach(t),B=m(o),oe=s(o,"UL",{});var hf=a(oe);J=s(hf,"LI",{});var kn=a(J);N=i(kn,"This implementation is the same as RoBERTa. Refer to the "),re=s(kn,"A",{href:!0});var ff=a(re);pe=i(ff,"documentation of RoBERTa"),ff.forEach(t),C=i(kn,` for usage examples
as well as the information relative to the inputs and outputs.`),kn.forEach(t),hf.forEach(t),ie=m(o),w=s(o,"P",{});var Ms=a(w);ue=i(Ms,"This model was contributed by "),l=s(Ms,"A",{href:!0,rel:!0});var pf=a(l);p=i(pf,"camembert"),pf.forEach(t),W=i(Ms,". The original code can be found "),ke=s(Ms,"A",{href:!0,rel:!0});var uf=a(ke);Ee=i(uf,"here"),uf.forEach(t),y=i(Ms,"."),Ms.forEach(t),Te=m(o),ge=s(o,"H2",{class:!0});var bn=a(ge);ve=s(bn,"A",{id:!0,class:!0,href:!0});var gf=a(ve);T=s(gf,"SPAN",{});var _f=a(T);F(R.$$.fragment,_f),_f.forEach(t),gf.forEach(t),Ce=m(bn),be=s(bn,"SPAN",{});var vf=a(be);U=i(vf,"CamembertConfig"),vf.forEach(t),bn.forEach(t),we=m(o),_e=s(o,"DIV",{class:!0});var Tn=a(_e);F(Y.$$.fragment,Tn),ye=m(Tn),Yt=s(Tn,"P",{});var wn=a(Yt);zi=i(wn,"This class overrides "),Vr=s(wn,"A",{href:!0});var kf=a(Vr);Di=i(kf,"RobertaConfig"),kf.forEach(t),xi=i(wn,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),wn.forEach(t),Tn.forEach(t),Oa=m(o),mt=s(o,"H2",{class:!0});var En=a(mt);$t=s(En,"A",{id:!0,class:!0,href:!0});var bf=a($t);As=s(bf,"SPAN",{});var Tf=a(As);F(Zt.$$.fragment,Tf),Tf.forEach(t),bf.forEach(t),Ii=m(En),zs=s(En,"SPAN",{});var wf=a(zs);Si=i(wf,"CamembertTokenizer"),wf.forEach(t),En.forEach(t),Na=m(o),Fe=s(o,"DIV",{class:!0});var Qe=a(Fe);F(eo.$$.fragment,Qe),Bi=m(Qe),Ye=s(Qe,"P",{});var Jt=a(Ye);Oi=i(Jt,"Adapted from "),Wr=s(Jt,"A",{href:!0});var Ef=a(Wr);Ni=i(Ef,"RobertaTokenizer"),Ef.forEach(t),Ui=i(Jt," and "),Kr=s(Jt,"A",{href:!0});var Cf=a(Kr);Hi=i(Cf,"XLNetTokenizer"),Cf.forEach(t),Qi=i(Jt,`. Construct a CamemBERT tokenizer. Based on
`),to=s(Jt,"A",{href:!0,rel:!0});var yf=a(to);Vi=i(yf,"SentencePiece"),yf.forEach(t),Wi=i(Jt,"."),Jt.forEach(t),Ki=m(Qe),oo=s(Qe,"P",{});var Cn=a(oo);Gi=i(Cn,"This tokenizer inherits from "),Gr=s(Cn,"A",{href:!0});var $f=a(Gr);Xi=i($f,"PreTrainedTokenizer"),$f.forEach(t),ji=i(Cn,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),Cn.forEach(t),Ji=m(Qe),Ze=s(Qe,"DIV",{class:!0});var Ps=a(Ze);F(ro.$$.fragment,Ps),Yi=m(Ps),Ds=s(Ps,"P",{});var Ff=a(Ds);Zi=i(Ff,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),Ff.forEach(t),el=m(Ps),so=s(Ps,"UL",{});var yn=a(so);Xr=s(yn,"LI",{});var ef=a(Xr);tl=i(ef,"single sequence: "),xs=s(ef,"CODE",{});var Mf=a(xs);ol=i(Mf,"<s> X </s>"),Mf.forEach(t),ef.forEach(t),rl=m(yn),jr=s(yn,"LI",{});var tf=a(jr);sl=i(tf,"pair of sequences: "),Is=s(tf,"CODE",{});var Pf=a(Is);al=i(Pf,"<s> A </s></s> B </s>"),Pf.forEach(t),tf.forEach(t),yn.forEach(t),Ps.forEach(t),nl=m(Qe),Ft=s(Qe,"DIV",{class:!0});var $n=a(Ft);F(ao.$$.fragment,$n),il=m($n),no=s($n,"P",{});var Fn=a(no);ll=i(Fn,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Ss=s(Fn,"CODE",{});var qf=a(Ss);dl=i(qf,"prepare_for_model"),qf.forEach(t),ml=i(Fn," method."),Fn.forEach(t),$n.forEach(t),cl=m(Qe),Mt=s(Qe,"DIV",{class:!0});var Mn=a(Mt);F(io.$$.fragment,Mn),hl=m(Mn),Bs=s(Mn,"P",{});var Lf=a(Bs);fl=i(Lf,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),Lf.forEach(t),Mn.forEach(t),pl=m(Qe),Os=s(Qe,"DIV",{class:!0}),a(Os).forEach(t),Qe.forEach(t),Ua=m(o),ct=s(o,"H2",{class:!0});var Pn=a(ct);Pt=s(Pn,"A",{id:!0,class:!0,href:!0});var Rf=a(Pt);Ns=s(Rf,"SPAN",{});var Af=a(Ns);F(lo.$$.fragment,Af),Af.forEach(t),Rf.forEach(t),ul=m(Pn),Us=s(Pn,"SPAN",{});var zf=a(Us);gl=i(zf,"CamembertTokenizerFast"),zf.forEach(t),Pn.forEach(t),Ha=m(o),xe=s(o,"DIV",{class:!0});var tt=a(xe);F(mo.$$.fragment,tt),_l=m(tt),Ve=s(tt,"P",{});var ot=a(Ve);vl=i(ot,"Construct a \u201Cfast\u201D CamemBERT tokenizer (backed by HuggingFace\u2019s "),Hs=s(ot,"EM",{});var Df=a(Hs);kl=i(Df,"tokenizers"),Df.forEach(t),bl=i(ot,` library). Adapted from
`),Jr=s(ot,"A",{href:!0});var xf=a(Jr);Tl=i(xf,"RobertaTokenizer"),xf.forEach(t),wl=i(ot," and "),Yr=s(ot,"A",{href:!0});var If=a(Yr);El=i(If,"XLNetTokenizer"),If.forEach(t),Cl=i(ot,`. Based on
`),co=s(ot,"A",{href:!0,rel:!0});var Sf=a(co);yl=i(Sf,"BPE"),Sf.forEach(t),$l=i(ot,"."),ot.forEach(t),Fl=m(tt),ho=s(tt,"P",{});var qn=a(ho);Ml=i(qn,"This tokenizer inherits from "),Zr=s(qn,"A",{href:!0});var Bf=a(Zr);Pl=i(Bf,"PreTrainedTokenizerFast"),Bf.forEach(t),ql=i(qn,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),qn.forEach(t),Ll=m(tt),et=s(tt,"DIV",{class:!0});var qs=a(et);F(fo.$$.fragment,qs),Rl=m(qs),Qs=s(qs,"P",{});var Of=a(Qs);Al=i(Of,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),Of.forEach(t),zl=m(qs),po=s(qs,"UL",{});var Ln=a(po);es=s(Ln,"LI",{});var of=a(es);Dl=i(of,"single sequence: "),Vs=s(of,"CODE",{});var Nf=a(Vs);xl=i(Nf,"<s> X </s>"),Nf.forEach(t),of.forEach(t),Il=m(Ln),ts=s(Ln,"LI",{});var rf=a(ts);Sl=i(rf,"pair of sequences: "),Ws=s(rf,"CODE",{});var Uf=a(Ws);Bl=i(Uf,"<s> A </s></s> B </s>"),Uf.forEach(t),rf.forEach(t),Ln.forEach(t),qs.forEach(t),Ol=m(tt),qt=s(tt,"DIV",{class:!0});var Rn=a(qt);F(uo.$$.fragment,Rn),Nl=m(Rn),Ks=s(Rn,"P",{});var Hf=a(Ks);Ul=i(Hf,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),Hf.forEach(t),Rn.forEach(t),tt.forEach(t),Qa=m(o),ht=s(o,"H2",{class:!0});var An=a(ht);Lt=s(An,"A",{id:!0,class:!0,href:!0});var Qf=a(Lt);Gs=s(Qf,"SPAN",{});var Vf=a(Gs);F(go.$$.fragment,Vf),Vf.forEach(t),Qf.forEach(t),Hl=m(An),Xs=s(An,"SPAN",{});var Wf=a(Xs);Ql=i(Wf,"CamembertModel"),Wf.forEach(t),An.forEach(t),Va=m(o),Ie=s(o,"DIV",{class:!0});var rt=a(Ie);F(_o.$$.fragment,rt),Vl=m(rt),js=s(rt,"P",{});var Kf=a(js);Wl=i(Kf,"The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Kf.forEach(t),Kl=m(rt),vo=s(rt,"P",{});var zn=a(vo);Gl=i(zn,"This model inherits from "),os=s(zn,"A",{href:!0});var Gf=a(os);Xl=i(Gf,"PreTrainedModel"),Gf.forEach(t),jl=i(zn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),zn.forEach(t),Jl=m(rt),ko=s(rt,"P",{});var Dn=a(ko);Yl=i(Dn,"This model is also a PyTorch "),bo=s(Dn,"A",{href:!0,rel:!0});var Xf=a(bo);Zl=i(Xf,"torch.nn.Module"),Xf.forEach(t),ed=i(Dn,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Dn.forEach(t),td=m(rt),To=s(rt,"P",{});var xn=a(To);od=i(xn,"This class overrides "),rs=s(xn,"A",{href:!0});var jf=a(rs);rd=i(jf,"RobertaModel"),jf.forEach(t),sd=i(xn,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),xn.forEach(t),rt.forEach(t),Wa=m(o),ft=s(o,"H2",{class:!0});var In=a(ft);Rt=s(In,"A",{id:!0,class:!0,href:!0});var Jf=a(Rt);Js=s(Jf,"SPAN",{});var Yf=a(Js);F(wo.$$.fragment,Yf),Yf.forEach(t),Jf.forEach(t),ad=m(In),Ys=s(In,"SPAN",{});var Zf=a(Ys);nd=i(Zf,"CamembertForCausalLM"),Zf.forEach(t),In.forEach(t),Ka=m(o),Se=s(o,"DIV",{class:!0});var st=a(Se);F(Eo.$$.fragment,st),id=m(st),Co=s(st,"P",{});var Sn=a(Co);ld=i(Sn,"CamemBERT Model with a "),Zs=s(Sn,"CODE",{});var ep=a(Zs);dd=i(ep,"language modeling"),ep.forEach(t),md=i(Sn," head on top for CLM fine-tuning."),Sn.forEach(t),cd=m(st),yo=s(st,"P",{});var Bn=a(yo);hd=i(Bn,"This model inherits from "),ss=s(Bn,"A",{href:!0});var tp=a(ss);fd=i(tp,"PreTrainedModel"),tp.forEach(t),pd=i(Bn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Bn.forEach(t),ud=m(st),$o=s(st,"P",{});var On=a($o);gd=i(On,"This model is also a PyTorch "),Fo=s(On,"A",{href:!0,rel:!0});var op=a(Fo);_d=i(op,"torch.nn.Module"),op.forEach(t),vd=i(On,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),On.forEach(t),kd=m(st),Mo=s(st,"P",{});var Nn=a(Mo);bd=i(Nn,"This class overrides "),as=s(Nn,"A",{href:!0});var rp=a(as);Td=i(rp,"RobertaForCausalLM"),rp.forEach(t),wd=i(Nn,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Nn.forEach(t),st.forEach(t),Ga=m(o),pt=s(o,"H2",{class:!0});var Un=a(pt);At=s(Un,"A",{id:!0,class:!0,href:!0});var sp=a(At);ea=s(sp,"SPAN",{});var ap=a(ea);F(Po.$$.fragment,ap),ap.forEach(t),sp.forEach(t),Ed=m(Un),ta=s(Un,"SPAN",{});var np=a(ta);Cd=i(np,"CamembertForMaskedLM"),np.forEach(t),Un.forEach(t),Xa=m(o),Be=s(o,"DIV",{class:!0});var at=a(Be);F(qo.$$.fragment,at),yd=m(at),Lo=s(at,"P",{});var Hn=a(Lo);$d=i(Hn,"CamemBERT Model with a "),oa=s(Hn,"CODE",{});var ip=a(oa);Fd=i(ip,"language modeling"),ip.forEach(t),Md=i(Hn," head on top."),Hn.forEach(t),Pd=m(at),Ro=s(at,"P",{});var Qn=a(Ro);qd=i(Qn,"This model inherits from "),ns=s(Qn,"A",{href:!0});var lp=a(ns);Ld=i(lp,"PreTrainedModel"),lp.forEach(t),Rd=i(Qn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Qn.forEach(t),Ad=m(at),Ao=s(at,"P",{});var Vn=a(Ao);zd=i(Vn,"This model is also a PyTorch "),zo=s(Vn,"A",{href:!0,rel:!0});var dp=a(zo);Dd=i(dp,"torch.nn.Module"),dp.forEach(t),xd=i(Vn,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Vn.forEach(t),Id=m(at),Do=s(at,"P",{});var Wn=a(Do);Sd=i(Wn,"This class overrides "),is=s(Wn,"A",{href:!0});var mp=a(is);Bd=i(mp,"RobertaForMaskedLM"),mp.forEach(t),Od=i(Wn,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Wn.forEach(t),at.forEach(t),ja=m(o),ut=s(o,"H2",{class:!0});var Kn=a(ut);zt=s(Kn,"A",{id:!0,class:!0,href:!0});var cp=a(zt);ra=s(cp,"SPAN",{});var hp=a(ra);F(xo.$$.fragment,hp),hp.forEach(t),cp.forEach(t),Nd=m(Kn),sa=s(Kn,"SPAN",{});var fp=a(sa);Ud=i(fp,"CamembertForSequenceClassification"),fp.forEach(t),Kn.forEach(t),Ja=m(o),Oe=s(o,"DIV",{class:!0});var nt=a(Oe);F(Io.$$.fragment,nt),Hd=m(nt),aa=s(nt,"P",{});var pp=a(aa);Qd=i(pp,`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),pp.forEach(t),Vd=m(nt),So=s(nt,"P",{});var Gn=a(So);Wd=i(Gn,"This model inherits from "),ls=s(Gn,"A",{href:!0});var up=a(ls);Kd=i(up,"PreTrainedModel"),up.forEach(t),Gd=i(Gn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Gn.forEach(t),Xd=m(nt),Bo=s(nt,"P",{});var Xn=a(Bo);jd=i(Xn,"This model is also a PyTorch "),Oo=s(Xn,"A",{href:!0,rel:!0});var gp=a(Oo);Jd=i(gp,"torch.nn.Module"),gp.forEach(t),Yd=i(Xn,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Xn.forEach(t),Zd=m(nt),No=s(nt,"P",{});var jn=a(No);em=i(jn,"This class overrides "),ds=s(jn,"A",{href:!0});var _p=a(ds);tm=i(_p,"RobertaForSequenceClassification"),_p.forEach(t),om=i(jn,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),jn.forEach(t),nt.forEach(t),Ya=m(o),gt=s(o,"H2",{class:!0});var Jn=a(gt);Dt=s(Jn,"A",{id:!0,class:!0,href:!0});var vp=a(Dt);na=s(vp,"SPAN",{});var kp=a(na);F(Uo.$$.fragment,kp),kp.forEach(t),vp.forEach(t),rm=m(Jn),ia=s(Jn,"SPAN",{});var bp=a(ia);sm=i(bp,"CamembertForMultipleChoice"),bp.forEach(t),Jn.forEach(t),Za=m(o),Ne=s(o,"DIV",{class:!0});var it=a(Ne);F(Ho.$$.fragment,it),am=m(it),la=s(it,"P",{});var Tp=a(la);nm=i(Tp,`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),Tp.forEach(t),im=m(it),Qo=s(it,"P",{});var Yn=a(Qo);lm=i(Yn,"This model inherits from "),ms=s(Yn,"A",{href:!0});var wp=a(ms);dm=i(wp,"PreTrainedModel"),wp.forEach(t),mm=i(Yn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Yn.forEach(t),cm=m(it),Vo=s(it,"P",{});var Zn=a(Vo);hm=i(Zn,"This model is also a PyTorch "),Wo=s(Zn,"A",{href:!0,rel:!0});var Ep=a(Wo);fm=i(Ep,"torch.nn.Module"),Ep.forEach(t),pm=i(Zn,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Zn.forEach(t),um=m(it),Ko=s(it,"P",{});var ei=a(Ko);gm=i(ei,"This class overrides "),cs=s(ei,"A",{href:!0});var Cp=a(cs);_m=i(Cp,"RobertaForMultipleChoice"),Cp.forEach(t),vm=i(ei,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),ei.forEach(t),it.forEach(t),en=m(o),_t=s(o,"H2",{class:!0});var ti=a(_t);xt=s(ti,"A",{id:!0,class:!0,href:!0});var yp=a(xt);da=s(yp,"SPAN",{});var $p=a(da);F(Go.$$.fragment,$p),$p.forEach(t),yp.forEach(t),km=m(ti),ma=s(ti,"SPAN",{});var Fp=a(ma);bm=i(Fp,"CamembertForTokenClassification"),Fp.forEach(t),ti.forEach(t),tn=m(o),Ue=s(o,"DIV",{class:!0});var lt=a(Ue);F(Xo.$$.fragment,lt),Tm=m(lt),ca=s(lt,"P",{});var Mp=a(ca);wm=i(Mp,`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Mp.forEach(t),Em=m(lt),jo=s(lt,"P",{});var oi=a(jo);Cm=i(oi,"This model inherits from "),hs=s(oi,"A",{href:!0});var Pp=a(hs);ym=i(Pp,"PreTrainedModel"),Pp.forEach(t),$m=i(oi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),oi.forEach(t),Fm=m(lt),Jo=s(lt,"P",{});var ri=a(Jo);Mm=i(ri,"This model is also a PyTorch "),Yo=s(ri,"A",{href:!0,rel:!0});var qp=a(Yo);Pm=i(qp,"torch.nn.Module"),qp.forEach(t),qm=i(ri,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ri.forEach(t),Lm=m(lt),Zo=s(lt,"P",{});var si=a(Zo);Rm=i(si,"This class overrides "),fs=s(si,"A",{href:!0});var Lp=a(fs);Am=i(Lp,"RobertaForTokenClassification"),Lp.forEach(t),zm=i(si,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),si.forEach(t),lt.forEach(t),on=m(o),vt=s(o,"H2",{class:!0});var ai=a(vt);It=s(ai,"A",{id:!0,class:!0,href:!0});var Rp=a(It);ha=s(Rp,"SPAN",{});var Ap=a(ha);F(er.$$.fragment,Ap),Ap.forEach(t),Rp.forEach(t),Dm=m(ai),fa=s(ai,"SPAN",{});var zp=a(fa);xm=i(zp,"CamembertForQuestionAnswering"),zp.forEach(t),ai.forEach(t),rn=m(o),He=s(o,"DIV",{class:!0});var dt=a(He);F(tr.$$.fragment,dt),Im=m(dt),St=s(dt,"P",{});var Ba=a(St);Sm=i(Ba,`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),pa=s(Ba,"CODE",{});var Dp=a(pa);Bm=i(Dp,"span start logits"),Dp.forEach(t),Om=i(Ba," and "),ua=s(Ba,"CODE",{});var xp=a(ua);Nm=i(xp,"span end logits"),xp.forEach(t),Ba.forEach(t),Um=m(dt),or=s(dt,"P",{});var ni=a(or);Hm=i(ni,"This model inherits from "),ps=s(ni,"A",{href:!0});var Ip=a(ps);Qm=i(Ip,"PreTrainedModel"),Ip.forEach(t),Vm=i(ni,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ni.forEach(t),Wm=m(dt),rr=s(dt,"P",{});var ii=a(rr);Km=i(ii,"This model is also a PyTorch "),sr=s(ii,"A",{href:!0,rel:!0});var Sp=a(sr);Gm=i(Sp,"torch.nn.Module"),Sp.forEach(t),Xm=i(ii,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ii.forEach(t),jm=m(dt),ar=s(dt,"P",{});var li=a(ar);Jm=i(li,"This class overrides "),us=s(li,"A",{href:!0});var Bp=a(us);Ym=i(Bp,"RobertaForQuestionAnswering"),Bp.forEach(t),Zm=i(li,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),li.forEach(t),dt.forEach(t),sn=m(o),kt=s(o,"H2",{class:!0});var di=a(kt);Bt=s(di,"A",{id:!0,class:!0,href:!0});var Op=a(Bt);ga=s(Op,"SPAN",{});var Np=a(ga);F(nr.$$.fragment,Np),Np.forEach(t),Op.forEach(t),ec=m(di),_a=s(di,"SPAN",{});var Up=a(_a);tc=i(Up,"TFCamembertModel"),Up.forEach(t),di.forEach(t),an=m(o),Pe=s(o,"DIV",{class:!0});var We=a(Pe);F(ir.$$.fragment,We),oc=m(We),va=s(We,"P",{});var Hp=a(va);rc=i(Hp,"The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Hp.forEach(t),sc=m(We),lr=s(We,"P",{});var mi=a(lr);ac=i(mi,"This model inherits from "),gs=s(mi,"A",{href:!0});var Qp=a(gs);nc=i(Qp,"TFPreTrainedModel"),Qp.forEach(t),ic=i(mi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),mi.forEach(t),lc=m(We),dr=s(We,"P",{});var ci=a(dr);dc=i(ci,"This model is also a "),mr=s(ci,"A",{href:!0,rel:!0});var Vp=a(mr);mc=i(Vp,"tf.keras.Model"),Vp.forEach(t),cc=i(ci,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ci.forEach(t),hc=m(We),F(Ot.$$.fragment,We),fc=m(We),cr=s(We,"P",{});var hi=a(cr);pc=i(hi,"This class overrides "),_s=s(hi,"A",{href:!0});var Wp=a(_s);uc=i(Wp,"TFRobertaModel"),Wp.forEach(t),gc=i(hi,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),hi.forEach(t),We.forEach(t),nn=m(o),bt=s(o,"H2",{class:!0});var fi=a(bt);Nt=s(fi,"A",{id:!0,class:!0,href:!0});var Kp=a(Nt);ka=s(Kp,"SPAN",{});var Gp=a(ka);F(hr.$$.fragment,Gp),Gp.forEach(t),Kp.forEach(t),_c=m(fi),ba=s(fi,"SPAN",{});var Xp=a(ba);vc=i(Xp,"TFCamembertForMaskedLM"),Xp.forEach(t),fi.forEach(t),ln=m(o),qe=s(o,"DIV",{class:!0});var Ke=a(qe);F(fr.$$.fragment,Ke),kc=m(Ke),pr=s(Ke,"P",{});var pi=a(pr);bc=i(pi,"CamemBERT Model with a "),Ta=s(pi,"CODE",{});var jp=a(Ta);Tc=i(jp,"language modeling"),jp.forEach(t),wc=i(pi," head on top."),pi.forEach(t),Ec=m(Ke),ur=s(Ke,"P",{});var ui=a(ur);Cc=i(ui,"This model inherits from "),vs=s(ui,"A",{href:!0});var Jp=a(vs);yc=i(Jp,"TFPreTrainedModel"),Jp.forEach(t),$c=i(ui,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ui.forEach(t),Fc=m(Ke),gr=s(Ke,"P",{});var gi=a(gr);Mc=i(gi,"This model is also a "),_r=s(gi,"A",{href:!0,rel:!0});var Yp=a(_r);Pc=i(Yp,"tf.keras.Model"),Yp.forEach(t),qc=i(gi,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),gi.forEach(t),Lc=m(Ke),F(Ut.$$.fragment,Ke),Rc=m(Ke),vr=s(Ke,"P",{});var _i=a(vr);Ac=i(_i,"This class overrides "),ks=s(_i,"A",{href:!0});var Zp=a(ks);zc=i(Zp,"TFRobertaForMaskedLM"),Zp.forEach(t),Dc=i(_i,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),_i.forEach(t),Ke.forEach(t),dn=m(o),Tt=s(o,"H2",{class:!0});var vi=a(Tt);Ht=s(vi,"A",{id:!0,class:!0,href:!0});var eu=a(Ht);wa=s(eu,"SPAN",{});var tu=a(wa);F(kr.$$.fragment,tu),tu.forEach(t),eu.forEach(t),xc=m(vi),Ea=s(vi,"SPAN",{});var ou=a(Ea);Ic=i(ou,"TFCamembertForSequenceClassification"),ou.forEach(t),vi.forEach(t),mn=m(o),Le=s(o,"DIV",{class:!0});var Ge=a(Le);F(br.$$.fragment,Ge),Sc=m(Ge),Ca=s(Ge,"P",{});var ru=a(Ca);Bc=i(ru,`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),ru.forEach(t),Oc=m(Ge),Tr=s(Ge,"P",{});var ki=a(Tr);Nc=i(ki,"This model inherits from "),bs=s(ki,"A",{href:!0});var su=a(bs);Uc=i(su,"TFPreTrainedModel"),su.forEach(t),Hc=i(ki,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ki.forEach(t),Qc=m(Ge),wr=s(Ge,"P",{});var bi=a(wr);Vc=i(bi,"This model is also a "),Er=s(bi,"A",{href:!0,rel:!0});var au=a(Er);Wc=i(au,"tf.keras.Model"),au.forEach(t),Kc=i(bi,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),bi.forEach(t),Gc=m(Ge),F(Qt.$$.fragment,Ge),Xc=m(Ge),Cr=s(Ge,"P",{});var Ti=a(Cr);jc=i(Ti,"This class overrides "),Ts=s(Ti,"A",{href:!0});var nu=a(Ts);Jc=i(nu,"TFRobertaForSequenceClassification"),nu.forEach(t),Yc=i(Ti,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Ti.forEach(t),Ge.forEach(t),cn=m(o),wt=s(o,"H2",{class:!0});var wi=a(wt);Vt=s(wi,"A",{id:!0,class:!0,href:!0});var iu=a(Vt);ya=s(iu,"SPAN",{});var lu=a(ya);F(yr.$$.fragment,lu),lu.forEach(t),iu.forEach(t),Zc=m(wi),$a=s(wi,"SPAN",{});var du=a($a);eh=i(du,"TFCamembertForMultipleChoice"),du.forEach(t),wi.forEach(t),hn=m(o),Re=s(o,"DIV",{class:!0});var Xe=a(Re);F($r.$$.fragment,Xe),th=m(Xe),Fa=s(Xe,"P",{});var mu=a(Fa);oh=i(mu,`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),mu.forEach(t),rh=m(Xe),Fr=s(Xe,"P",{});var Ei=a(Fr);sh=i(Ei,"This model inherits from "),ws=s(Ei,"A",{href:!0});var cu=a(ws);ah=i(cu,"TFPreTrainedModel"),cu.forEach(t),nh=i(Ei,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ei.forEach(t),ih=m(Xe),Mr=s(Xe,"P",{});var Ci=a(Mr);lh=i(Ci,"This model is also a "),Pr=s(Ci,"A",{href:!0,rel:!0});var hu=a(Pr);dh=i(hu,"tf.keras.Model"),hu.forEach(t),mh=i(Ci,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ci.forEach(t),ch=m(Xe),F(Wt.$$.fragment,Xe),hh=m(Xe),qr=s(Xe,"P",{});var yi=a(qr);fh=i(yi,"This class overrides "),Es=s(yi,"A",{href:!0});var fu=a(Es);ph=i(fu,"TFRobertaForMultipleChoice"),fu.forEach(t),uh=i(yi,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),yi.forEach(t),Xe.forEach(t),fn=m(o),Et=s(o,"H2",{class:!0});var $i=a(Et);Kt=s($i,"A",{id:!0,class:!0,href:!0});var pu=a(Kt);Ma=s(pu,"SPAN",{});var uu=a(Ma);F(Lr.$$.fragment,uu),uu.forEach(t),pu.forEach(t),gh=m($i),Pa=s($i,"SPAN",{});var gu=a(Pa);_h=i(gu,"TFCamembertForTokenClassification"),gu.forEach(t),$i.forEach(t),pn=m(o),Ae=s(o,"DIV",{class:!0});var je=a(Ae);F(Rr.$$.fragment,je),vh=m(je),qa=s(je,"P",{});var _u=a(qa);kh=i(_u,`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),_u.forEach(t),bh=m(je),Ar=s(je,"P",{});var Fi=a(Ar);Th=i(Fi,"This model inherits from "),Cs=s(Fi,"A",{href:!0});var vu=a(Cs);wh=i(vu,"TFPreTrainedModel"),vu.forEach(t),Eh=i(Fi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Fi.forEach(t),Ch=m(je),zr=s(je,"P",{});var Mi=a(zr);yh=i(Mi,"This model is also a "),Dr=s(Mi,"A",{href:!0,rel:!0});var ku=a(Dr);$h=i(ku,"tf.keras.Model"),ku.forEach(t),Fh=i(Mi,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Mi.forEach(t),Mh=m(je),F(Gt.$$.fragment,je),Ph=m(je),xr=s(je,"P",{});var Pi=a(xr);qh=i(Pi,"This class overrides "),ys=s(Pi,"A",{href:!0});var bu=a(ys);Lh=i(bu,"TFRobertaForTokenClassification"),bu.forEach(t),Rh=i(Pi,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Pi.forEach(t),je.forEach(t),un=m(o),Ct=s(o,"H2",{class:!0});var qi=a(Ct);Xt=s(qi,"A",{id:!0,class:!0,href:!0});var Tu=a(Xt);La=s(Tu,"SPAN",{});var wu=a(La);F(Ir.$$.fragment,wu),wu.forEach(t),Tu.forEach(t),Ah=m(qi),Ra=s(qi,"SPAN",{});var Eu=a(Ra);zh=i(Eu,"TFCamembertForQuestionAnswering"),Eu.forEach(t),qi.forEach(t),gn=m(o),ze=s(o,"DIV",{class:!0});var Je=a(ze);F(Sr.$$.fragment,Je),Dh=m(Je),yt=s(Je,"P",{});var Ls=a(yt);xh=i(Ls,`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),Aa=s(Ls,"CODE",{});var Cu=a(Aa);Ih=i(Cu,"span start logits"),Cu.forEach(t),Sh=i(Ls," and "),za=s(Ls,"CODE",{});var yu=a(za);Bh=i(yu,"span end logits"),yu.forEach(t),Oh=i(Ls,")."),Ls.forEach(t),Nh=m(Je),Br=s(Je,"P",{});var Li=a(Br);Uh=i(Li,"This model inherits from "),$s=s(Li,"A",{href:!0});var $u=a($s);Hh=i($u,"TFPreTrainedModel"),$u.forEach(t),Qh=i(Li,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Li.forEach(t),Vh=m(Je),Or=s(Je,"P",{});var Ri=a(Or);Wh=i(Ri,"This model is also a "),Nr=s(Ri,"A",{href:!0,rel:!0});var Fu=a(Nr);Kh=i(Fu,"tf.keras.Model"),Fu.forEach(t),Gh=i(Ri,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ri.forEach(t),Xh=m(Je),F(jt.$$.fragment,Je),jh=m(Je),Ur=s(Je,"P",{});var Ai=a(Ur);Jh=i(Ai,"This class overrides "),Fs=s(Ai,"A",{href:!0});var Mu=a(Fs);Yh=i(Mu,"TFRobertaForQuestionAnswering"),Mu.forEach(t),Zh=i(Ai,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Ai.forEach(t),Je.forEach(t),this.h()},h(){c(b,"name","hf:doc:metadata"),c(b,"content",JSON.stringify(Ou)),c(_,"id","camembert"),c(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_,"href","#camembert"),c(A,"class","relative group"),c(K,"id","overview"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#overview"),c(u,"class","relative group"),c(j,"href","https://arxiv.org/abs/1911.03894"),c(j,"rel","nofollow"),c(re,"href","roberta"),c(l,"href","https://huggingface.co/camembert"),c(l,"rel","nofollow"),c(ke,"href","https://camembert-model.fr/"),c(ke,"rel","nofollow"),c(ve,"id","transformers.CamembertConfig"),c(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ve,"href","#transformers.CamembertConfig"),c(ge,"class","relative group"),c(Vr,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaConfig"),c(_e,"class","docstring"),c($t,"id","transformers.CamembertTokenizer"),c($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($t,"href","#transformers.CamembertTokenizer"),c(mt,"class","relative group"),c(Wr,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Kr,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(to,"href","https://github.com/google/sentencepiece"),c(to,"rel","nofollow"),c(Gr,"href","/docs/transformers/pr_15678/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),c(Ze,"class","docstring"),c(Ft,"class","docstring"),c(Mt,"class","docstring"),c(Os,"class","docstring"),c(Fe,"class","docstring"),c(Pt,"id","transformers.CamembertTokenizerFast"),c(Pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pt,"href","#transformers.CamembertTokenizerFast"),c(ct,"class","relative group"),c(Jr,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Yr,"href","/docs/transformers/pr_15678/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(co,"href","https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=BPE#models"),c(co,"rel","nofollow"),c(Zr,"href","/docs/transformers/pr_15678/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),c(et,"class","docstring"),c(qt,"class","docstring"),c(xe,"class","docstring"),c(Lt,"id","transformers.CamembertModel"),c(Lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lt,"href","#transformers.CamembertModel"),c(ht,"class","relative group"),c(os,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel"),c(bo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(bo,"rel","nofollow"),c(rs,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaModel"),c(Ie,"class","docstring"),c(Rt,"id","transformers.CamembertForCausalLM"),c(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rt,"href","#transformers.CamembertForCausalLM"),c(ft,"class","relative group"),c(ss,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel"),c(Fo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Fo,"rel","nofollow"),c(as,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Se,"class","docstring"),c(At,"id","transformers.CamembertForMaskedLM"),c(At,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(At,"href","#transformers.CamembertForMaskedLM"),c(pt,"class","relative group"),c(ns,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel"),c(zo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(zo,"rel","nofollow"),c(is,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Be,"class","docstring"),c(zt,"id","transformers.CamembertForSequenceClassification"),c(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zt,"href","#transformers.CamembertForSequenceClassification"),c(ut,"class","relative group"),c(ls,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel"),c(Oo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Oo,"rel","nofollow"),c(ds,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Oe,"class","docstring"),c(Dt,"id","transformers.CamembertForMultipleChoice"),c(Dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dt,"href","#transformers.CamembertForMultipleChoice"),c(gt,"class","relative group"),c(ms,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel"),c(Wo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Wo,"rel","nofollow"),c(cs,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Ne,"class","docstring"),c(xt,"id","transformers.CamembertForTokenClassification"),c(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xt,"href","#transformers.CamembertForTokenClassification"),c(_t,"class","relative group"),c(hs,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel"),c(Yo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Yo,"rel","nofollow"),c(fs,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Ue,"class","docstring"),c(It,"id","transformers.CamembertForQuestionAnswering"),c(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(It,"href","#transformers.CamembertForQuestionAnswering"),c(vt,"class","relative group"),c(ps,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.PreTrainedModel"),c(sr,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(sr,"rel","nofollow"),c(us,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(He,"class","docstring"),c(Bt,"id","transformers.TFCamembertModel"),c(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bt,"href","#transformers.TFCamembertModel"),c(kt,"class","relative group"),c(gs,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.TFPreTrainedModel"),c(mr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(mr,"rel","nofollow"),c(_s,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaModel"),c(Pe,"class","docstring"),c(Nt,"id","transformers.TFCamembertForMaskedLM"),c(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nt,"href","#transformers.TFCamembertForMaskedLM"),c(bt,"class","relative group"),c(vs,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.TFPreTrainedModel"),c(_r,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(_r,"rel","nofollow"),c(ks,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qe,"class","docstring"),c(Ht,"id","transformers.TFCamembertForSequenceClassification"),c(Ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ht,"href","#transformers.TFCamembertForSequenceClassification"),c(Tt,"class","relative group"),c(bs,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.TFPreTrainedModel"),c(Er,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Er,"rel","nofollow"),c(Ts,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Le,"class","docstring"),c(Vt,"id","transformers.TFCamembertForMultipleChoice"),c(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vt,"href","#transformers.TFCamembertForMultipleChoice"),c(wt,"class","relative group"),c(ws,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.TFPreTrainedModel"),c(Pr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Pr,"rel","nofollow"),c(Es,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Re,"class","docstring"),c(Kt,"id","transformers.TFCamembertForTokenClassification"),c(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kt,"href","#transformers.TFCamembertForTokenClassification"),c(Et,"class","relative group"),c(Cs,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.TFPreTrainedModel"),c(Dr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Dr,"rel","nofollow"),c(ys,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Ae,"class","docstring"),c(Xt,"id","transformers.TFCamembertForQuestionAnswering"),c(Xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xt,"href","#transformers.TFCamembertForQuestionAnswering"),c(Ct,"class","relative group"),c($s,"href","/docs/transformers/pr_15678/en/main_classes/model#transformers.TFPreTrainedModel"),c(Nr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Nr,"rel","nofollow"),c(Fs,"href","/docs/transformers/pr_15678/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(ze,"class","docstring")},m(o,f){e(document.head,b),h(o,Z,f),h(o,A,f),e(A,_),e(_,z),M(G,z,null),e(A,le),e(A,D),e(D,de),h(o,Q,f),h(o,u,f),e(u,K),e(K,x),M(X,x,null),e(u,me),e(u,I),e(I,ce),h(o,se,f),h(o,H,f),e(H,E),e(H,j),e(j,V),e(H,g),h(o,k,f),h(o,ee,f),e(ee,O),h(o,ae,f),h(o,te,f),e(te,S),e(S,he),h(o,ne,f),h(o,v,f),e(v,fe),h(o,B,f),h(o,oe,f),e(oe,J),e(J,N),e(J,re),e(re,pe),e(J,C),h(o,ie,f),h(o,w,f),e(w,ue),e(w,l),e(l,p),e(w,W),e(w,ke),e(ke,Ee),e(w,y),h(o,Te,f),h(o,ge,f),e(ge,ve),e(ve,T),M(R,T,null),e(ge,Ce),e(ge,be),e(be,U),h(o,we,f),h(o,_e,f),M(Y,_e,null),e(_e,ye),e(_e,Yt),e(Yt,zi),e(Yt,Vr),e(Vr,Di),e(Yt,xi),h(o,Oa,f),h(o,mt,f),e(mt,$t),e($t,As),M(Zt,As,null),e(mt,Ii),e(mt,zs),e(zs,Si),h(o,Na,f),h(o,Fe,f),M(eo,Fe,null),e(Fe,Bi),e(Fe,Ye),e(Ye,Oi),e(Ye,Wr),e(Wr,Ni),e(Ye,Ui),e(Ye,Kr),e(Kr,Hi),e(Ye,Qi),e(Ye,to),e(to,Vi),e(Ye,Wi),e(Fe,Ki),e(Fe,oo),e(oo,Gi),e(oo,Gr),e(Gr,Xi),e(oo,ji),e(Fe,Ji),e(Fe,Ze),M(ro,Ze,null),e(Ze,Yi),e(Ze,Ds),e(Ds,Zi),e(Ze,el),e(Ze,so),e(so,Xr),e(Xr,tl),e(Xr,xs),e(xs,ol),e(so,rl),e(so,jr),e(jr,sl),e(jr,Is),e(Is,al),e(Fe,nl),e(Fe,Ft),M(ao,Ft,null),e(Ft,il),e(Ft,no),e(no,ll),e(no,Ss),e(Ss,dl),e(no,ml),e(Fe,cl),e(Fe,Mt),M(io,Mt,null),e(Mt,hl),e(Mt,Bs),e(Bs,fl),e(Fe,pl),e(Fe,Os),h(o,Ua,f),h(o,ct,f),e(ct,Pt),e(Pt,Ns),M(lo,Ns,null),e(ct,ul),e(ct,Us),e(Us,gl),h(o,Ha,f),h(o,xe,f),M(mo,xe,null),e(xe,_l),e(xe,Ve),e(Ve,vl),e(Ve,Hs),e(Hs,kl),e(Ve,bl),e(Ve,Jr),e(Jr,Tl),e(Ve,wl),e(Ve,Yr),e(Yr,El),e(Ve,Cl),e(Ve,co),e(co,yl),e(Ve,$l),e(xe,Fl),e(xe,ho),e(ho,Ml),e(ho,Zr),e(Zr,Pl),e(ho,ql),e(xe,Ll),e(xe,et),M(fo,et,null),e(et,Rl),e(et,Qs),e(Qs,Al),e(et,zl),e(et,po),e(po,es),e(es,Dl),e(es,Vs),e(Vs,xl),e(po,Il),e(po,ts),e(ts,Sl),e(ts,Ws),e(Ws,Bl),e(xe,Ol),e(xe,qt),M(uo,qt,null),e(qt,Nl),e(qt,Ks),e(Ks,Ul),h(o,Qa,f),h(o,ht,f),e(ht,Lt),e(Lt,Gs),M(go,Gs,null),e(ht,Hl),e(ht,Xs),e(Xs,Ql),h(o,Va,f),h(o,Ie,f),M(_o,Ie,null),e(Ie,Vl),e(Ie,js),e(js,Wl),e(Ie,Kl),e(Ie,vo),e(vo,Gl),e(vo,os),e(os,Xl),e(vo,jl),e(Ie,Jl),e(Ie,ko),e(ko,Yl),e(ko,bo),e(bo,Zl),e(ko,ed),e(Ie,td),e(Ie,To),e(To,od),e(To,rs),e(rs,rd),e(To,sd),h(o,Wa,f),h(o,ft,f),e(ft,Rt),e(Rt,Js),M(wo,Js,null),e(ft,ad),e(ft,Ys),e(Ys,nd),h(o,Ka,f),h(o,Se,f),M(Eo,Se,null),e(Se,id),e(Se,Co),e(Co,ld),e(Co,Zs),e(Zs,dd),e(Co,md),e(Se,cd),e(Se,yo),e(yo,hd),e(yo,ss),e(ss,fd),e(yo,pd),e(Se,ud),e(Se,$o),e($o,gd),e($o,Fo),e(Fo,_d),e($o,vd),e(Se,kd),e(Se,Mo),e(Mo,bd),e(Mo,as),e(as,Td),e(Mo,wd),h(o,Ga,f),h(o,pt,f),e(pt,At),e(At,ea),M(Po,ea,null),e(pt,Ed),e(pt,ta),e(ta,Cd),h(o,Xa,f),h(o,Be,f),M(qo,Be,null),e(Be,yd),e(Be,Lo),e(Lo,$d),e(Lo,oa),e(oa,Fd),e(Lo,Md),e(Be,Pd),e(Be,Ro),e(Ro,qd),e(Ro,ns),e(ns,Ld),e(Ro,Rd),e(Be,Ad),e(Be,Ao),e(Ao,zd),e(Ao,zo),e(zo,Dd),e(Ao,xd),e(Be,Id),e(Be,Do),e(Do,Sd),e(Do,is),e(is,Bd),e(Do,Od),h(o,ja,f),h(o,ut,f),e(ut,zt),e(zt,ra),M(xo,ra,null),e(ut,Nd),e(ut,sa),e(sa,Ud),h(o,Ja,f),h(o,Oe,f),M(Io,Oe,null),e(Oe,Hd),e(Oe,aa),e(aa,Qd),e(Oe,Vd),e(Oe,So),e(So,Wd),e(So,ls),e(ls,Kd),e(So,Gd),e(Oe,Xd),e(Oe,Bo),e(Bo,jd),e(Bo,Oo),e(Oo,Jd),e(Bo,Yd),e(Oe,Zd),e(Oe,No),e(No,em),e(No,ds),e(ds,tm),e(No,om),h(o,Ya,f),h(o,gt,f),e(gt,Dt),e(Dt,na),M(Uo,na,null),e(gt,rm),e(gt,ia),e(ia,sm),h(o,Za,f),h(o,Ne,f),M(Ho,Ne,null),e(Ne,am),e(Ne,la),e(la,nm),e(Ne,im),e(Ne,Qo),e(Qo,lm),e(Qo,ms),e(ms,dm),e(Qo,mm),e(Ne,cm),e(Ne,Vo),e(Vo,hm),e(Vo,Wo),e(Wo,fm),e(Vo,pm),e(Ne,um),e(Ne,Ko),e(Ko,gm),e(Ko,cs),e(cs,_m),e(Ko,vm),h(o,en,f),h(o,_t,f),e(_t,xt),e(xt,da),M(Go,da,null),e(_t,km),e(_t,ma),e(ma,bm),h(o,tn,f),h(o,Ue,f),M(Xo,Ue,null),e(Ue,Tm),e(Ue,ca),e(ca,wm),e(Ue,Em),e(Ue,jo),e(jo,Cm),e(jo,hs),e(hs,ym),e(jo,$m),e(Ue,Fm),e(Ue,Jo),e(Jo,Mm),e(Jo,Yo),e(Yo,Pm),e(Jo,qm),e(Ue,Lm),e(Ue,Zo),e(Zo,Rm),e(Zo,fs),e(fs,Am),e(Zo,zm),h(o,on,f),h(o,vt,f),e(vt,It),e(It,ha),M(er,ha,null),e(vt,Dm),e(vt,fa),e(fa,xm),h(o,rn,f),h(o,He,f),M(tr,He,null),e(He,Im),e(He,St),e(St,Sm),e(St,pa),e(pa,Bm),e(St,Om),e(St,ua),e(ua,Nm),e(He,Um),e(He,or),e(or,Hm),e(or,ps),e(ps,Qm),e(or,Vm),e(He,Wm),e(He,rr),e(rr,Km),e(rr,sr),e(sr,Gm),e(rr,Xm),e(He,jm),e(He,ar),e(ar,Jm),e(ar,us),e(us,Ym),e(ar,Zm),h(o,sn,f),h(o,kt,f),e(kt,Bt),e(Bt,ga),M(nr,ga,null),e(kt,ec),e(kt,_a),e(_a,tc),h(o,an,f),h(o,Pe,f),M(ir,Pe,null),e(Pe,oc),e(Pe,va),e(va,rc),e(Pe,sc),e(Pe,lr),e(lr,ac),e(lr,gs),e(gs,nc),e(lr,ic),e(Pe,lc),e(Pe,dr),e(dr,dc),e(dr,mr),e(mr,mc),e(dr,cc),e(Pe,hc),M(Ot,Pe,null),e(Pe,fc),e(Pe,cr),e(cr,pc),e(cr,_s),e(_s,uc),e(cr,gc),h(o,nn,f),h(o,bt,f),e(bt,Nt),e(Nt,ka),M(hr,ka,null),e(bt,_c),e(bt,ba),e(ba,vc),h(o,ln,f),h(o,qe,f),M(fr,qe,null),e(qe,kc),e(qe,pr),e(pr,bc),e(pr,Ta),e(Ta,Tc),e(pr,wc),e(qe,Ec),e(qe,ur),e(ur,Cc),e(ur,vs),e(vs,yc),e(ur,$c),e(qe,Fc),e(qe,gr),e(gr,Mc),e(gr,_r),e(_r,Pc),e(gr,qc),e(qe,Lc),M(Ut,qe,null),e(qe,Rc),e(qe,vr),e(vr,Ac),e(vr,ks),e(ks,zc),e(vr,Dc),h(o,dn,f),h(o,Tt,f),e(Tt,Ht),e(Ht,wa),M(kr,wa,null),e(Tt,xc),e(Tt,Ea),e(Ea,Ic),h(o,mn,f),h(o,Le,f),M(br,Le,null),e(Le,Sc),e(Le,Ca),e(Ca,Bc),e(Le,Oc),e(Le,Tr),e(Tr,Nc),e(Tr,bs),e(bs,Uc),e(Tr,Hc),e(Le,Qc),e(Le,wr),e(wr,Vc),e(wr,Er),e(Er,Wc),e(wr,Kc),e(Le,Gc),M(Qt,Le,null),e(Le,Xc),e(Le,Cr),e(Cr,jc),e(Cr,Ts),e(Ts,Jc),e(Cr,Yc),h(o,cn,f),h(o,wt,f),e(wt,Vt),e(Vt,ya),M(yr,ya,null),e(wt,Zc),e(wt,$a),e($a,eh),h(o,hn,f),h(o,Re,f),M($r,Re,null),e(Re,th),e(Re,Fa),e(Fa,oh),e(Re,rh),e(Re,Fr),e(Fr,sh),e(Fr,ws),e(ws,ah),e(Fr,nh),e(Re,ih),e(Re,Mr),e(Mr,lh),e(Mr,Pr),e(Pr,dh),e(Mr,mh),e(Re,ch),M(Wt,Re,null),e(Re,hh),e(Re,qr),e(qr,fh),e(qr,Es),e(Es,ph),e(qr,uh),h(o,fn,f),h(o,Et,f),e(Et,Kt),e(Kt,Ma),M(Lr,Ma,null),e(Et,gh),e(Et,Pa),e(Pa,_h),h(o,pn,f),h(o,Ae,f),M(Rr,Ae,null),e(Ae,vh),e(Ae,qa),e(qa,kh),e(Ae,bh),e(Ae,Ar),e(Ar,Th),e(Ar,Cs),e(Cs,wh),e(Ar,Eh),e(Ae,Ch),e(Ae,zr),e(zr,yh),e(zr,Dr),e(Dr,$h),e(zr,Fh),e(Ae,Mh),M(Gt,Ae,null),e(Ae,Ph),e(Ae,xr),e(xr,qh),e(xr,ys),e(ys,Lh),e(xr,Rh),h(o,un,f),h(o,Ct,f),e(Ct,Xt),e(Xt,La),M(Ir,La,null),e(Ct,Ah),e(Ct,Ra),e(Ra,zh),h(o,gn,f),h(o,ze,f),M(Sr,ze,null),e(ze,Dh),e(ze,yt),e(yt,xh),e(yt,Aa),e(Aa,Ih),e(yt,Sh),e(yt,za),e(za,Bh),e(yt,Oh),e(ze,Nh),e(ze,Br),e(Br,Uh),e(Br,$s),e($s,Hh),e(Br,Qh),e(ze,Vh),e(ze,Or),e(Or,Wh),e(Or,Nr),e(Nr,Kh),e(Or,Gh),e(ze,Xh),M(jt,ze,null),e(ze,jh),e(ze,Ur),e(Ur,Jh),e(Ur,Fs),e(Fs,Yh),e(Ur,Zh),_n=!0},p(o,[f]){const Hr={};f&2&&(Hr.$$scope={dirty:f,ctx:o}),Ot.$set(Hr);const Da={};f&2&&(Da.$$scope={dirty:f,ctx:o}),Ut.$set(Da);const xa={};f&2&&(xa.$$scope={dirty:f,ctx:o}),Qt.$set(xa);const Ia={};f&2&&(Ia.$$scope={dirty:f,ctx:o}),Wt.$set(Ia);const Qr={};f&2&&(Qr.$$scope={dirty:f,ctx:o}),Gt.$set(Qr);const Sa={};f&2&&(Sa.$$scope={dirty:f,ctx:o}),jt.$set(Sa)},i(o){_n||(P(G.$$.fragment,o),P(X.$$.fragment,o),P(R.$$.fragment,o),P(Y.$$.fragment,o),P(Zt.$$.fragment,o),P(eo.$$.fragment,o),P(ro.$$.fragment,o),P(ao.$$.fragment,o),P(io.$$.fragment,o),P(lo.$$.fragment,o),P(mo.$$.fragment,o),P(fo.$$.fragment,o),P(uo.$$.fragment,o),P(go.$$.fragment,o),P(_o.$$.fragment,o),P(wo.$$.fragment,o),P(Eo.$$.fragment,o),P(Po.$$.fragment,o),P(qo.$$.fragment,o),P(xo.$$.fragment,o),P(Io.$$.fragment,o),P(Uo.$$.fragment,o),P(Ho.$$.fragment,o),P(Go.$$.fragment,o),P(Xo.$$.fragment,o),P(er.$$.fragment,o),P(tr.$$.fragment,o),P(nr.$$.fragment,o),P(ir.$$.fragment,o),P(Ot.$$.fragment,o),P(hr.$$.fragment,o),P(fr.$$.fragment,o),P(Ut.$$.fragment,o),P(kr.$$.fragment,o),P(br.$$.fragment,o),P(Qt.$$.fragment,o),P(yr.$$.fragment,o),P($r.$$.fragment,o),P(Wt.$$.fragment,o),P(Lr.$$.fragment,o),P(Rr.$$.fragment,o),P(Gt.$$.fragment,o),P(Ir.$$.fragment,o),P(Sr.$$.fragment,o),P(jt.$$.fragment,o),_n=!0)},o(o){q(G.$$.fragment,o),q(X.$$.fragment,o),q(R.$$.fragment,o),q(Y.$$.fragment,o),q(Zt.$$.fragment,o),q(eo.$$.fragment,o),q(ro.$$.fragment,o),q(ao.$$.fragment,o),q(io.$$.fragment,o),q(lo.$$.fragment,o),q(mo.$$.fragment,o),q(fo.$$.fragment,o),q(uo.$$.fragment,o),q(go.$$.fragment,o),q(_o.$$.fragment,o),q(wo.$$.fragment,o),q(Eo.$$.fragment,o),q(Po.$$.fragment,o),q(qo.$$.fragment,o),q(xo.$$.fragment,o),q(Io.$$.fragment,o),q(Uo.$$.fragment,o),q(Ho.$$.fragment,o),q(Go.$$.fragment,o),q(Xo.$$.fragment,o),q(er.$$.fragment,o),q(tr.$$.fragment,o),q(nr.$$.fragment,o),q(ir.$$.fragment,o),q(Ot.$$.fragment,o),q(hr.$$.fragment,o),q(fr.$$.fragment,o),q(Ut.$$.fragment,o),q(kr.$$.fragment,o),q(br.$$.fragment,o),q(Qt.$$.fragment,o),q(yr.$$.fragment,o),q($r.$$.fragment,o),q(Wt.$$.fragment,o),q(Lr.$$.fragment,o),q(Rr.$$.fragment,o),q(Gt.$$.fragment,o),q(Ir.$$.fragment,o),q(Sr.$$.fragment,o),q(jt.$$.fragment,o),_n=!1},d(o){t(b),o&&t(Z),o&&t(A),L(G),o&&t(Q),o&&t(u),L(X),o&&t(se),o&&t(H),o&&t(k),o&&t(ee),o&&t(ae),o&&t(te),o&&t(ne),o&&t(v),o&&t(B),o&&t(oe),o&&t(ie),o&&t(w),o&&t(Te),o&&t(ge),L(R),o&&t(we),o&&t(_e),L(Y),o&&t(Oa),o&&t(mt),L(Zt),o&&t(Na),o&&t(Fe),L(eo),L(ro),L(ao),L(io),o&&t(Ua),o&&t(ct),L(lo),o&&t(Ha),o&&t(xe),L(mo),L(fo),L(uo),o&&t(Qa),o&&t(ht),L(go),o&&t(Va),o&&t(Ie),L(_o),o&&t(Wa),o&&t(ft),L(wo),o&&t(Ka),o&&t(Se),L(Eo),o&&t(Ga),o&&t(pt),L(Po),o&&t(Xa),o&&t(Be),L(qo),o&&t(ja),o&&t(ut),L(xo),o&&t(Ja),o&&t(Oe),L(Io),o&&t(Ya),o&&t(gt),L(Uo),o&&t(Za),o&&t(Ne),L(Ho),o&&t(en),o&&t(_t),L(Go),o&&t(tn),o&&t(Ue),L(Xo),o&&t(on),o&&t(vt),L(er),o&&t(rn),o&&t(He),L(tr),o&&t(sn),o&&t(kt),L(nr),o&&t(an),o&&t(Pe),L(ir),L(Ot),o&&t(nn),o&&t(bt),L(hr),o&&t(ln),o&&t(qe),L(fr),L(Ut),o&&t(dn),o&&t(Tt),L(kr),o&&t(mn),o&&t(Le),L(br),L(Qt),o&&t(cn),o&&t(wt),L(yr),o&&t(hn),o&&t(Re),L($r),L(Wt),o&&t(fn),o&&t(Et),L(Lr),o&&t(pn),o&&t(Ae),L(Rr),L(Gt),o&&t(un),o&&t(Ct),L(Ir),o&&t(gn),o&&t(ze),L(Sr),L(jt)}}}const Ou={local:"camembert",sections:[{local:"overview",title:"Overview"},{local:"transformers.CamembertConfig",title:"CamembertConfig"},{local:"transformers.CamembertTokenizer",title:"CamembertTokenizer"},{local:"transformers.CamembertTokenizerFast",title:"CamembertTokenizerFast"},{local:"transformers.CamembertModel",title:"CamembertModel"},{local:"transformers.CamembertForCausalLM",title:"CamembertForCausalLM"},{local:"transformers.CamembertForMaskedLM",title:"CamembertForMaskedLM"},{local:"transformers.CamembertForSequenceClassification",title:"CamembertForSequenceClassification"},{local:"transformers.CamembertForMultipleChoice",title:"CamembertForMultipleChoice"},{local:"transformers.CamembertForTokenClassification",title:"CamembertForTokenClassification"},{local:"transformers.CamembertForQuestionAnswering",title:"CamembertForQuestionAnswering"},{local:"transformers.TFCamembertModel",title:"TFCamembertModel"},{local:"transformers.TFCamembertForMaskedLM",title:"TFCamembertForMaskedLM"},{local:"transformers.TFCamembertForSequenceClassification",title:"TFCamembertForSequenceClassification"},{local:"transformers.TFCamembertForMultipleChoice",title:"TFCamembertForMultipleChoice"},{local:"transformers.TFCamembertForTokenClassification",title:"TFCamembertForTokenClassification"},{local:"transformers.TFCamembertForQuestionAnswering",title:"TFCamembertForQuestionAnswering"}],title:"CamemBERT"};function Nu(De,b,Z){let{fw:A}=b;return De.$$set=_=>{"fw"in _&&Z(0,A=_.fw)},[A]}class Wu extends Pu{constructor(b){super();qu(this,b,Nu,Bu,Lu,{fw:0})}}export{Wu as default,Ou as metadata};
